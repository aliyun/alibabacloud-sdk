/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Dyvmsapi';
  @version = '2017-05-25';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddVirtualNumberRelationRequest {
  corpNameList?: string(name='CorpNameList', description='The company names. Separate multiple company names with commas (,).', example='Company 1', position='Query'),
  numberList: string(name='NumberList', description='The real numbers. Separate multiple real numbers with commas (,).', example='1321111****,1322222****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNum: string(name='PhoneNum', description='The virtual number.', example='05516214****', position='Query'),
  prodCode?: string(name='ProdCode', description='The service name. Default value: **dyvms**.', example='dyvms', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeType: int32(name='RouteType', description='The route type. Valid values:

*   **0**: number location first.
*   **1**: random.', example='0', minimum=0, maximum=99999, position='Query'),
}

model AddVirtualNumberRelationResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value 200 indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='200'),
  data?: string(name='Data', description='The numbers that failed to be associated.

> If all numbers are associated, no value is returned for this parameter.', example='1321111****'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='F655A8D5-B967-440B-8683-DAD6FF8DE990'),
}

model AddVirtualNumberRelationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddVirtualNumberRelationResponseBody(name='body'),
}

/**
  * ### QPS limits
  * You can call this operation up to 200 times per second per account.
  *
 */
async function addVirtualNumberRelation(request: AddVirtualNumberRelationRequest): AddVirtualNumberRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddVirtualNumberRelation', 'POST', '/', 'json', false, 'json', request);
}

model BatchRobotSmartCallRequest {
  calledNumber: string(name='CalledNumber', description='The called number. Only mobile phone numbers in the Chinese mainland are supported.

You can set up to 1,000 called numbers and separate the numbers with commas (,).', example='1390000****', position='Query'),
  calledShowNumber: string(name='CalledShowNumber', description='The number displayed to called parties, which must be a number you purchased. You can view the numbers you purchased in the [Voice Messaging Service console](https://dyvms.console.aliyun.com/dyvms.htm#/number/normal).

You can set up to 100 numbers and separate the numbers with commas (,).', example='222', position='Query'),
  corpName?: string(name='CorpName', description='The company name, which must be the same as the **company name** specified on the [qualification management page](https://dyvms.console.aliyun.com/dyvms.htm#/corp/normal).

> This parameter is optional if **isSelfLine** is set to **true**.', example='Alibaba', position='Query'),
  dialogId: string(name='DialogId', description='The ID of the robot or communication script that is used to initiate a call.

You can obtain the **communication script ID** from the [Communication script management](https://dyvms.console.aliyun.com/dyvms.htm#/smart-call/saas/robot/list) page.', example='1234567', position='Query'),
  earlyMediaAsr?: boolean(name='EarlyMediaAsr', description='The speech recognition identifier of early media. The default value is **false**, which means that the speech recognition identifier of early media is not enabled.

Set the parameter to **true** if you want to enable the speech recognition identifier of early media.', example='true', position='Query'),
  isSelfLine?: boolean(name='IsSelfLine', description='Specifies whether to call the self-managed line. Default value: **false**.', example='true', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scheduleCall?: boolean(name='ScheduleCall', description='Specifies whether the call is scheduled. If you set this parameter to **true**, the **ScheduleTime** parameter is required.', example='true', position='Query'),
  scheduleTime?: long(name='ScheduleTime', description='The preset call time. This value is a UNIX timestamp. Unit: milliseconds.

>  This parameter is required only when **ScheduleCall** is set to **true**.', example='12', position='Query'),
  taskName: string(name='TaskName', description='The task name. The task name can be up to 30 characters in length.', example='Batch Tasks', position='Query'),
  ttsParam?: string(name='TtsParam', description='The variable value of the TTS template, in the JSON format.

The variable value must correspond to a number. The TtsParam parameter must be used together with the TtsParamHead parameter.', example='[{"number":"1390000****","params":[“Miss li”,"miss wang","Mr.li"]}]', position='Query'),
  ttsParamHead?: string(name='TtsParamHead', description='The call tasks with variables, in the JSON format.

The parameter value is a list of variable names. The TtsParamHead parameter must be used together with the TtsParam parameter.', example='["name1","name2","name3"]', position='Query'),
}

model BatchRobotSmartCallResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
  taskId?: string(name='TaskId', description='The unique ID of the robocall task. You can call the [QueryCallDetailByTaskId](~~393537~~) operation to query the details of the task based on the task ID.', example='4001112222'),
}

model BatchRobotSmartCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchRobotSmartCallResponseBody(name='body'),
}

/**
  * *   In an intelligent speech interaction task, you can use the robot communication scripts preset in the Voice Messaging Service console, or invoke the callback function to return the response mode configured by the business party in each call.
  * *   The BatchRobotSmartCall operation is used to initiate an outbound robocall task by using the robot communication scripts preset in the Voice Messaging Service console.
  * ## Prerequisites
  * *   You have passed the real-name verification for an enterprise user and passed the enterprise qualification review.
  * *   You have purchased numbers in the [Voice Messaging Service console](https://dyvms.console.aliyun.com/dyvms.htm#/number/normal).
  * *   You have added communication scripts on the [Communication script management](https://dyvms.console.aliyun.com/dyvms.htm#/smart-call/saas/robot/list) page, and the communication scripts have been approved.
  * > Before you call this operation, make sure that you are familiar with the [billing](https://www.aliyun.com/price/product#/vms/detail) of Voice Messaging Service (VMS).
  *
 */
async function batchRobotSmartCall(request: BatchRobotSmartCallRequest): BatchRobotSmartCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchRobotSmartCall', 'POST', '/', 'json', false, 'json', request);
}

model CancelOrderRobotTaskRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: long(name='TaskId', description='The unique ID of the robocall task. You can call the [CreateRobotTask](~~393531~~) operation to obtain the ID of the robocall task.', example='1045001', position='Query'),
}

model CancelOrderRobotTaskResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  data?: string(name='Data', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
}

model CancelOrderRobotTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelOrderRobotTaskResponseBody(name='body'),
}

/**
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function cancelOrderRobotTask(request: CancelOrderRobotTaskRequest): CancelOrderRobotTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelOrderRobotTask', 'POST', '/', 'json', false, 'json', request);
}

model CancelRobotTaskRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId?: long(name='TaskId', description='The unique ID of the robocall task. You can call the [CreateRobotTask](~~393531~~) operation to obtain the task ID.', example='1045001', position='Query'),
}

model CancelRobotTaskResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  data?: string(name='Data', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
}

model CancelRobotTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelRobotTaskResponseBody(name='body'),
}

/**
  * Only a task in progress can be terminated by calling the CancelRobotTask operation, and the task cannot be resumed after it is terminated.
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function cancelRobotTask(request: CancelRobotTaskRequest): CancelRobotTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelRobotTask', 'POST', '/', 'json', false, 'json', request);
}

model ChangeMediaTypeRequest {
  callId?: string(name='CallId', example='示例值示例值示例值', position='Query'),
  calledNum: string(name='CalledNum', example='示例值示例值', position='Query'),
  mediaType?: string(name='MediaType', example='示例值示例值', position='Query'),
  outId?: string(name='OutId', example='示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ChangeMediaTypeResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='示例值示例值'),
  message?: string(name='Message', example='示例值'),
  model?: boolean(name='Model', example='false'),
  success?: boolean(name='Success', example='true'),
}

model ChangeMediaTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeMediaTypeResponseBody(name='body'),
}

async function changeMediaType(request: ChangeMediaTypeRequest): ChangeMediaTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeMediaType', 'POST', '/', 'json', false, 'json', request);
}

model CreateCallTaskRequest {
  bizType?: string(name='BizType', description='The type of the task template. Valid values:

*   **VMS_VOICE_TTS**: the text-to-speech (TTS) notification template.
*   **VMS_VOICE_CODE**: the voice notification template.
*   **VMS_TTS**: the voice verification code template.', example='VMS_VOICE_TTS', position='Query'),
  data?: string(name='Data', description='The called numbers.

*   If you set DataType to LIST, the value of Data is in the LIST format.
*   If you set DataType to JSON, the value of Data is in the JSON format.', example='{ "paramNames":["name1","name2","key3"], "calleeList":[ { "callee":"131222222", "params":["zangsan","zhangsan01","zhangsan02"] }, { "callee":"131222222", "params":["zangsan","zhangsan01","zhangsan02"] }, ] }', position='Query'),
  dataType?: string(name='DataType', description='The type of called numbers. Valid values:

*   **LIST**: the called numbers that are separated by commas (,).
*   **JSON**: a JSON-formatted list of called numbers with template parameters.', example='JSON', position='Query'),
  fireTime?: string(name='FireTime', description='This parameter is unavailable.', example='1', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resource?: string(name='Resource', description='The calling number. Only virtual numbers are supported.', example='05516214****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the calling number. Set the value to **LIST**.', example='LIST', position='Query'),
  scheduleType?: string(name='ScheduleType', description='This parameter is unavailable.', example='1', position='Query'),
  stopTime?: string(name='StopTime', description='This parameter is unavailable.', example='1', position='Query'),
  taskName?: string(name='TaskName', description='The task name.', example='Aliyun', position='Query'),
  templateCode?: string(name='TemplateCode', description='The template ID.', example='TTS_2122****', position='Query'),
  templateName?: string(name='TemplateName', description='The template name.', example='Test Template', position='Query'),
}

model CreateCallTaskResponseBody = {
  code?: string(name='Code', description='The response code.', example='200'),
  data?: long(name='Data', description='The task ID.', example='123456'),
  requestId?: string(name='RequestId', description='The request ID.', example='ED815433-724A-4357-9991-A54AD2FF09FD'),
}

model CreateCallTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCallTaskResponseBody(name='body'),
}

/**
  * You can create up to 1,000 voice notifications for each task.
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function createCallTask(request: CreateCallTaskRequest): CreateCallTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCallTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateRobotTaskRequest {
  caller: string(name='Caller', description='The calling number.

You must use the phone numbers that you have purchased and separate multiple numbers with commas (,). You can log on to the [Voice Messaging Service console](https://dyvms.console.aliyun.com/overview/home) and choose **Real Number Service** > **Real Number Management** to view the numbers you purchased.', example='0571****5678', position='Query'),
  corpName?: string(name='CorpName', description='The company name, which must be the same as the **enterprise name** on the qualification management page.', example='Alibaba', position='Query'),
  dialogId: long(name='DialogId', description='The ID of the robot or communication script that is used to initiate the call.

You can log on to the [Voice Messaging Service console](https://dyvms.console.aliyun.com/overview/home) and choose **Intelligent Voice Robot** > **Communication Script Management** to view the communication script ID.', example='1000023****', position='Query'),
  isSelfLine?: boolean(name='IsSelfLine', description='Specifies whether to call the self-managed line. Valid values:

*   **false** (default)
*   **true**

> If you set this parameter to **true**, calling numbers are not verified.', example='false', position='Query'),
  numberStatusIdent: boolean(name='NumberStatusIdent', description='Specifies whether to enable number status identification. Valid values:

*   **false** (default)
*   **true**

> If you set this parameter to **true**, the reason why a call is not answered is recorded.', example='true', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  recallInterval?: int32(name='RecallInterval', description='The redial interval. Unit: minutes. The value must be greater than 1.

> The maximum redial interval is 30 minutes.', example='5', position='Query'),
  recallStateCodes?: string(name='RecallStateCodes', description='The call state in which redial is required. Separate multiple call states with commas (,). Valid values:

*   **200010**: The phone of the called party is powered off.
*   **200011**: The number of the called party is out of service.
*   **200002**: The line is busy.
*   **200012**: The call is lost.
*   **200005**: The called party cannot be connected.
*   **200003**: The called party does not respond to the call.', example='200010,200011', position='Query'),
  recallTimes?: int32(name='RecallTimes', description='The number of redial times.', example='1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  retryType: int32(name='RetryType', description='Specifies whether to enable auto-redial. Valid values:

*   **1**: enables auto-redial.
*   **0**: disables auto-redial.', example='1', position='Query'),
  taskName: string(name='TaskName', description='The task name. The task name can be up to 30 characters in length.', example='Test Template', position='Query'),
}

model CreateRobotTaskResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  data?: string(name='Data', description='The unique ID of the robocall task.

You can call the [QueryRobotTaskDetail](~~393538~~) operation to query the details of the task based on the task ID.', example='400111****'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
}

model CreateRobotTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRobotTaskResponseBody(name='body'),
}

/**
  * You can call this operation to initiate an outbound robocall task by using the robot communication scripts preset in the Voice Messaging Service console. In an intelligent speech interaction task, you can use the robot communication scripts preset in the Voice Messaging Service console, or invoke the callback function to return the response mode configured by the business party in each call.
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function createRobotTask(request: CreateRobotTaskRequest): CreateRobotTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRobotTask', 'POST', '/', 'json', false, 'json', request);
}

model DegradeVideoFileRequest {
  callId?: string(name='CallId', example='116012354148^1028137841****', position='Query'),
  calledNumber: string(name='CalledNumber', example='1590****000', position='Query'),
  mediaType?: string(name='MediaType', example='video', position='Query'),
  outId?: string(name='OutId', example='225869*****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DegradeVideoFileResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message', example='示例值'),
  success?: boolean(name='Success', example='true'),
}

model DegradeVideoFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DegradeVideoFileResponseBody(name='body'),
}

async function degradeVideoFile(request: DegradeVideoFileRequest): DegradeVideoFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DegradeVideoFile', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRobotTaskRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: long(name='TaskId', description='The unique ID of the robocall task. You can call the [CreateRobotTask](~~CreateRobotTask~~) operation to obtain the task ID.', example='1045001', position='Query'),
}

model DeleteRobotTaskResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  data?: string(name='Data', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
}

model DeleteRobotTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRobotTaskResponseBody(name='body'),
}

/**
  * You can call this operation to delete only tasks that are not started, that are completed, and that are terminated.
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function deleteRobotTask(request: DeleteRobotTaskRequest): DeleteRobotTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRobotTask', 'POST', '/', 'json', false, 'json', request);
}

model ExecuteCallTaskRequest {
  fireTime?: string(name='FireTime', description='The time when the call task is executed, in the yyyy-MM-dd HH:mm:ss format.

> You can leave this parameter empty.', example='2021-03-09 00:00:00', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status: string(name='Status', description='The task state. Valid values:

*   **RUNNING**
*   **STOP**
*   **CANCEL**', example='RUNNING', position='Query'),
  taskId: long(name='TaskId', description='The task ID. You can call the [CreateCallTask](~~CreateCallTask~~) operation to obtain the task ID.', example='2256****', minimum=0, maximum=9223372036854775807, position='Query'),
}

model ExecuteCallTaskResponseBody = {
  code?: string(name='Code', description='The response code.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='53D0F0Fe-cbbB-De28-6FCd-DdbBcefA46dD'),
}

model ExecuteCallTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteCallTaskResponseBody(name='body'),
}

/**
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function executeCallTask(request: ExecuteCallTaskRequest): ExecuteCallTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteCallTask', 'POST', '/', 'json', false, 'json', request);
}

model GetCallMediaTypeRequest {
  callId?: string(name='CallId', example='116012854210^10281427****', position='Query'),
  calledNumber: string(name='CalledNumber', example='1580000****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetCallMediaTypeResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message', example='示例值示例值示例值'),
  success?: boolean(name='Success', example='true'),
}

model GetCallMediaTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCallMediaTypeResponseBody(name='body'),
}

async function getCallMediaType(request: GetCallMediaTypeRequest): GetCallMediaTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCallMediaType', 'POST', '/', 'json', false, 'json', request);
}

model GetCallProgressRequest {
  callId?: string(name='CallId', example='示例值', position='Query'),
  calledNum: string(name='CalledNum', example='示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetCallProgressResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='示例值示例值'),
  message?: string(name='Message', example='示例值示例值'),
  model?: map[string]any(name='Model'),
  success?: boolean(name='Success', example='false'),
}

model GetCallProgressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCallProgressResponseBody(name='body'),
}

async function getCallProgress(request: GetCallProgressRequest): GetCallProgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCallProgress', 'POST', '/', 'json', false, 'json', request);
}

model GetHotlineQualificationByOrderRequest {
  orderId: string(name='OrderId', description='The ticket ID.

You can log on to the [Voice Messaging Service console](https://dyvms.console.aliyun.com/overview/home), choose **Qualification\\&Communication Script Management** > **Qualification Management**, and then click the **400 Qualifications** tab to view the ticket ID.', example='22456****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetHotlineQualificationByOrderResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  data?: {
    orderId?: string(name='OrderId', description='The ID of the qualification application ticket.', example='22456****'),
    qualificationId?: string(name='QualificationId', description='The qualification ID.', example='1478*****'),
    status?: string(name='Status', description='The qualification state. Valid values:

*   **NORMAL**
*   **OTHER**', example='NORMAL'),
  }(name='Data', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='6086693B-2250-17CE-A41F-06259AB6DB1B'),
}

model GetHotlineQualificationByOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHotlineQualificationByOrderResponseBody(name='body'),
}

/**
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function getHotlineQualificationByOrder(request: GetHotlineQualificationByOrderRequest): GetHotlineQualificationByOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHotlineQualificationByOrder', 'POST', '/', 'json', false, 'json', request);
}

model GetTemporaryFileUrlRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  videoId: string(name='VideoId', example='45a04670582571eebf9e4531948c****', position='Query'),
}

model GetTemporaryFileUrlResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message', example='示例值'),
  requestId?: string(name='RequestId', example='7BF47617-7851-48F7-A3A1-2021342A****'),
  success?: boolean(name='Success', example='true'),
}

model GetTemporaryFileUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTemporaryFileUrlResponseBody(name='body'),
}

async function getTemporaryFileUrl(request: GetTemporaryFileUrlRequest): GetTemporaryFileUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTemporaryFileUrl', 'POST', '/', 'json', false, 'json', request);
}

model GetTokenRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tokenType?: string(name='TokenType', description='The token type.', example='dyvms', position='Query'),
}

model GetTokenResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69DDD'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  token?: string(name='Token', description='The token.', example='eyJhbGciOiJSUzI1NiIsImtpZCI6ImFjY2Vzc190ZXN0In0.eyJqdGkiOiJUTjhfRzFCaEpETTJ3LWVoeGJZZXRnIiwiaWF0IjoxNjIzMzk0NTI3LCJleHAiOjE2MjMzOTYzMjcsIm5iZi****'),
}

model GetTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTokenResponseBody(name='body'),
}

/**
  * ### QPS limits
  * You can call this operation up to five times per second per account.
  *
 */
async function getToken(request: GetTokenRequest): GetTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetToken', 'POST', '/', 'json', false, 'json', request);
}

model GetVideoFieldUrlRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  videoFile?: string(name='VideoFile', example='示例值示例值', position='Query'),
}

model GetVideoFieldUrlResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='示例值示例值'),
  message?: string(name='Message', example='示例值示例值'),
  model?: map[string]any(name='Model'),
  success?: boolean(name='Success', example='false'),
}

model GetVideoFieldUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVideoFieldUrlResponseBody(name='body'),
}

async function getVideoFieldUrl(request: GetVideoFieldUrlRequest): GetVideoFieldUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVideoFieldUrl', 'POST', '/', 'json', false, 'json', request);
}

model IvrCallRequest {
  byeCode?: string(name='ByeCode', description='The end voice.

*   If you use a voice notification file, this parameter specifies the voice ID. You can log on to the [Voice Messaging Service console](https://dyvms.console.aliyun.com/overview/home), choose **Voice Messages** > **Voice Notifications**, and then click the **Voice Notification Files** tab to view the voice ID.
*   If you use a TTS template, this parameter specifies the template ID. You can log on to the [Voice Messaging Service console](https://dyvms.console.aliyun.com/overview/home), choose **Voice Messages** > **Voice Notifications**, and then click the **TTS Template** tab to view the template ID.

> The value of the ByeCode parameter must be of the same type as the value of the StartCode parameter. This means that both parameters must specify voice IDs or TTS template IDs.', example='TTS_1234****', position='Query'),
  byeTtsParams?: string(name='ByeTtsParams', description='The variables in the TTS template, in the JSON format.

> This parameter is required when the ByeCode parameter is set to the ID of a TTS template that contains variables.', example='{"name":"xxx","code":"123"}', position='Query'),
  calledNumber: string(name='CalledNumber', description='The called number.

Only phone numbers in the Chinese mainland are supported. Each request supports only one called number.', example='1590****000', position='Query'),
  calledShowNumber: string(name='CalledShowNumber', description='The calling number.

The value must be a number you purchased. Each request supports only one calling number. In most cases, a calling number is configured with the maximum number of concurrent requests. New requests fail if the maximum number of concurrent requests is reached. You can log on to the [Voice Messaging Service console](https://dyvms.console.aliyun.com/overview/home) and choose **Real Number Service > Real Number Management** to view the number you purchased.', example='0571****5678', position='Query'),
  menuKeyMap?: [ 
    {
      code?: string(name='Code', description='The voice that corresponds to the key specified by the **MenuKeyMap.N.Key** parameter.

*   If you use a voice notification file, this parameter specifies the voice ID. You can log on to the [Voice Messaging Service console](https://dyvms.console.aliyun.com/overview/home), choose **Voice Messages** > **Voice Notifications**, and then click the **Voice Notification Files** tab to view the voice ID.
*   If you use a TTS template, this parameter specifies the template ID. You can log on to the [Voice Messaging Service console](https://dyvms.console.aliyun.com/overview/home), choose **Voice Messages** > **Voice Notifications**, and then click the **TTS Template** tab to view the template ID.', example='TTS_1235****'),
      key?: string(name='Key', description='The key that can be pressed by the subscriber.', example='1'),
      ttsParams?: string(name='TtsParams', description='The variables in the TTS template, in the JSON format.

> 

*   This parameter specifies the substitution relationship of the variables in the TTS template if the value of the **MenuKeyMap.N.Code** parameter is set to the ID of the TTS template.

*   This parameter is required if the value of the **MenuKeyMap.N.Code** parameter is set to the ID of a TTS template that contains variables.', example='{"name":"xxx","code":"123"}'),
    }
  ](name='MenuKeyMap', description='The information about the key pressed by the subscriber.', position='Query'),
  outId?: string(name='OutId', description='The ID that is reserved for the caller of the operation. This ID is returned to the caller in a receipt message.

The value is of the STRING type and must be 1 to 15 bytes in length.', example='PR0210428****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  playTimes?: long(name='PlayTimes', description='The number of replay times. Valid values: 1 to 3.', example='3', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startCode: string(name='StartCode', description='The voice that is played when the call begins.

*   If you use a voice notification file, this parameter specifies the voice ID. You can log on to the [Voice Messaging Service console](https://dyvms.console.aliyun.com/overview/home), choose **Voice Messages** > Voice Notifications, and then click the **Voice Notification Files** tab to view the voice ID.
*   If you use a text-to-speech (TTS) template, this parameter specifies the template ID. You can log on to the [Voice Messaging Service console](https://dyvms.console.aliyun.com/overview/home), choose **Voice Messages** > **Voice Notifications**, and then click the **TTS Template** tab to view the template ID.', example='TTS_1234****', position='Query'),
  startTtsParams?: string(name='StartTtsParams', description='The variables in the TTS template, in the JSON format.

> This parameter is required when the StartCode parameter is set to the ID of a TTS template that contains variables.', example='{"name":"xxx","code":"123"}', position='Query'),
  timeout?: int32(name='Timeout', description='The timeout period for the subscriber to press a key. Unit: milliseconds.', example='3000', position='Query'),
}

model IvrCallResponseBody = {
  callId?: string(name='CallId', description='The unique receipt ID of the call.

You can call the [QueryCallDetailByCallId](~~393529~~) operation to query the details of the call based on the receipt ID.', example='116012354148^10281378****'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
}

model IvrCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IvrCallResponseBody(name='body'),
}

/**
  * *   Your enterprise qualification is approved. For more information, see [Submit enterprise qualifications](~~149795~~).
  * *   Voice numbers are purchased. For more information, see [Purchase numbers](~~149794~~).
  * *   When the subscriber answers the call, the subscriber hears a voice that instructs the subscriber to press a key as needed. If the [message receipt](~~112503~~) feature is enabled, the Voice Messaging Service (VMS) platform returns the information about the key pressed by the subscriber to the business system. The key information includes the order confirmation, questionnaire survey, and satisfaction survey completed by the subscriber.
  * ## QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function ivrCall(request: IvrCallRequest): IvrCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'IvrCall', 'POST', '/', 'json', false, 'json', request);
}

model ListCallTaskRequest {
  bizType?: string(name='BizType', description='The type of the task template. Valid values:

*   **VMS_VOICE_TTS**: the text-to-speech (TTS) notification template.
*   **VMS_VOICE_CODE**: the voice notification template.
*   **VMS_TTS**: the voice verification code template.', example='VMS_VOICE_CODE', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', minimum=0, maximum=9223372036854775807, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **10**.', example='10', minimum=0, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', description='The task state. Valid values:

*   **INIT**: The task is in the initial state.
*   **RELEASE**: The task is being parsed.
*   **RUNNING**: The task is running.
*   **STOP**: The task is suspended.
*   **SYSTEM_STOP**: The task is suspended by the system.
*   **CANCEL**: The task is canceled.
*   **SYSTEM_CANCEL**: The task is canceled by the system.
*   **DONE**: The task is complete.', example='DONE', position='Query'),
  taskId?: string(name='TaskId', description='The task ID.', example='151001****', position='Query'),
  taskName?: string(name='TaskName', description='The task name.', example='Aliyun', position='Query'),
  templateName?: string(name='TemplateName', description='The template name.', example='Test Template', position='Query'),
}

model ListCallTaskResponseBody = {
  code?: string(name='Code', description='The response code.', example='200'),
  data?: [ 
    {
      bizType?: string(name='BizType', description='The type of the task template. Valid values:

*   **VMS_VOICE_TTS**: the TTS notification template.
*   **VMS_VOICE_CODE**: the voice notification template.
*   **VMS_TTS**: the voice verification code template.', example='VMS_VOICE_TTS'),
      completeTime?: string(name='CompleteTime', description='The time when the task was completed. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1614330986000'),
      completedCount?: long(name='CompletedCount', description='The number of tasks that were complete.', example='2'),
      completedRate?: int32(name='CompletedRate', description='The task progress.', example='26%'),
      data?: string(name='Data', description='This parameter is unavailable.', example='1'),
      dataType?: string(name='DataType', description='The type of the called number.', example='LIST'),
      fireTime?: string(name='FireTime', description='The time when the scheduled task was started. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1614330978000'),
      id?: long(name='Id', description='The task ID.', example='123879546214'),
      resource?: string(name='Resource', description='The calling number.', example='0571000****'),
      status?: string(name='Status', description='The task state. Valid values:

*   **INIT**: The task was in the initial state.
*   **RELEASE**: The task was being parsed.
*   **RUNNING**: The task was running.
*   **STOP**: The task was manually suspended.
*   **SYSTEM_STOP**: The task was suspended by the system.
*   **CANCEL**: The task was manually canceled.
*   **SYSTEM_CANCEL**: The task was canceled by the system.
*   **DONE**: The task was complete.', example='DONE'),
      stopTime?: string(name='StopTime', description='This parameter is unavailable.', example='1'),
      taskName?: string(name='TaskName', description='The task name.', example='Aliyun'),
      templateCode?: string(name='TemplateCode', description='The ID of the voice template.', example='TTS_2100****'),
      templateName?: string(name='TemplateName', description='The template name.', example='Test Template'),
      totalCount?: long(name='TotalCount', description='The total number of called numbers.', example='600'),
    }
  ](name='Data', description='The task information.'),
  pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='2'),
  requestId?: string(name='RequestId', description='The request ID.', example='5B0F201F-DCDA-45C2-AA92-1AE177F94991'),
  total?: long(name='Total', description='The total number of tasks.', example='10'),
}

model ListCallTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCallTaskResponseBody(name='body'),
}

/**
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function listCallTask(request: ListCallTaskRequest): ListCallTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCallTask', 'POST', '/', 'json', false, 'json', request);
}

model ListCallTaskDetailRequest {
  calledNum?: string(name='CalledNum', description='The called number.', example='1300000****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **10**.', example='10', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', description='The task state. Valid values:

*   **SUCCESS**: The task is successful.
*   **FAIL**: The task fails.
*   **INIT**: The task is not started.', example='SUCCESS', position='Query'),
  taskId: long(name='TaskId', description='The task ID.', example='150001****', minimum=0, maximum=9223372036854775807, position='Query'),
}

model ListCallTaskDetailResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  data?: [ 
    {
      calledNum?: string(name='CalledNum', description='The called number.', example='1300000****'),
      caller?: string(name='Caller', description='The calling number.', example='0571000****'),
      duration?: long(name='Duration', description='The call duration. Unit: seconds.', example='200'),
      id?: long(name='Id', description='This parameter is unavailable.', example='1'),
      status?: string(name='Status', description='The task state. Valid values:

*   **SUCCESS**: The task was successful.
*   **FAIL**: The task failed.
*   **INIT**: The task was not started.', example='FAIL'),
    }
  ](name='Data', description='The information about the task.'),
  pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='D692AC3D-CBA8-417F-BEB9-5B73718922D4'),
  total?: long(name='Total', description='The total number of called numbers.', example='1000'),
  totalPage?: long(name='TotalPage', description='The total number of pages.', example='1'),
}

model ListCallTaskDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCallTaskDetailResponseBody(name='body'),
}

/**
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function listCallTaskDetail(request: ListCallTaskDetailRequest): ListCallTaskDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCallTaskDetail', 'POST', '/', 'json', false, 'json', request);
}

model ListHotlineTransferNumberRequest {
  hotlineNumber: string(name='HotlineNumber', description='The China 400 number.', example='400****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', description='The page number. Default value: **1**.', example='1', minimum=0, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 10.', example='10', minimum=1, position='Query'),
  qualificationId: string(name='QualificationId', description='The qualification ID. You can call the [GetHotlineQualificationByOrder](~~393548~~) operation to obtain the qualification ID.', example='100***', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListHotlineTransferNumberResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  data?: {
    pageNo?: int32(name='PageNo', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
    total?: long(name='Total', description='The total number of entries returned.', example='1'),
    values?: [ 
      {
        hotlineNumber?: string(name='HotlineNumber', description='The China 400 number.', example='400****'),
        identityCard?: string(name='IdentityCard', description='The ID card number of the number owner.', example='500***4119'),
        numberOwnerName?: string(name='NumberOwnerName', description='The real name of the number owner or the company name.', example='A***'),
        phoneNumber?: string(name='PhoneNumber', description='The registered phone number.', example='1580000****'),
        qualificationId?: string(name='QualificationId', description='The qualification ID.', example='100***'),
        resUniqueCode?: string(name='ResUniqueCode', description='The resource code.', example='1***'),
      }
    ](name='Values', description='The phone numbers.'),
  }(name='Data', description='The information about the registered phone number.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='6086693B-2250-17CE-A41F-06259AB6DB1B'),
}

model ListHotlineTransferNumberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHotlineTransferNumberResponseBody(name='body'),
}

/**
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function listHotlineTransferNumber(request: ListHotlineTransferNumberRequest): ListHotlineTransferNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHotlineTransferNumber', 'POST', '/', 'json', false, 'json', request);
}

model ListHotlineTransferRegisterFileRequest {
  hotlineNumber: string(name='HotlineNumber', description='The China 400 number.', example='400****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', description='The page number. Default value: **1**.', example='1', minimum=0, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 10.', example='10', minimum=1, maximum=1000, position='Query'),
  qualificationId: string(name='QualificationId', description='The qualification ID. You can call the [GetHotlineQualificationByOrder](~~393548~~) operation to obtain the qualification ID.', example='1000****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListHotlineTransferRegisterFileResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  data?: {
    pageNo?: int32(name='PageNo', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    total?: long(name='Total', description='The total number of entries returned.', example='1'),
    values?: [ 
      {
        agree?: string(name='Agree', description='The authenticity of the commitment.', example='true'),
        corpName?: string(name='CorpName', description='The enterprise name.', example='A**'),
        hotlineNumber?: string(name='HotlineNumber', description='The China 400 number.', example='400****'),
        mngOpIdentityCard?: string(name='MngOpIdentityCard', description='The ID card number of the handler.', example='5****************9'),
        mngOpMail?: string(name='MngOpMail', description='The email address of the handler.', example='username@example.com'),
        mngOpMobile?: string(name='MngOpMobile', description='The mobile phone number of the handler.', example='150****0000'),
        mngOpName?: string(name='MngOpName', description='The name of the handler.', example='A***'),
        qualificationId?: string(name='QualificationId', description='The qualification ID.', example='1234****'),
        resUniqueCode?: long(name='ResUniqueCode', description='The unique code of the query operation.', example='1'),
      }
    ](name='Values', description='The registration file.'),
  }(name='Data', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='6086693B-2250-17CE-A41F-06259AB6DB1B'),
}

model ListHotlineTransferRegisterFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHotlineTransferRegisterFileResponseBody(name='body'),
}

/**
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function listHotlineTransferRegisterFile(request: ListHotlineTransferRegisterFileRequest): ListHotlineTransferRegisterFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHotlineTransferRegisterFile', 'POST', '/', 'json', false, 'json', request);
}

model PauseVideoFileRequest {
  callId?: string(name='CallId', example='116012854210^10281427****', position='Query'),
  calledNumber: string(name='CalledNumber', example='示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model PauseVideoFileResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message', example='示例值示例值示例值'),
  success?: boolean(name='Success', example='true'),
}

model PauseVideoFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PauseVideoFileResponseBody(name='body'),
}

async function pauseVideoFile(request: PauseVideoFileRequest): PauseVideoFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PauseVideoFile', 'POST', '/', 'json', false, 'json', request);
}

model PlayVideoFileRequest {
  callId?: string(name='CallId', example='116012354148^1028137841****', position='Query'),
  calledNumber: string(name='CalledNumber', example='示例值', position='Query'),
  outId?: string(name='OutId', example='342268*****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  videoId: string(name='VideoId', example='示例值示例值示例值', position='Query'),
}

model PlayVideoFileResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='示例值示例值'),
  model?: boolean(name='Model', example='false'),
  success?: boolean(name='Success', example='true'),
}

model PlayVideoFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PlayVideoFileResponseBody(name='body'),
}

async function playVideoFile(request: PlayVideoFileRequest): PlayVideoFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PlayVideoFile', 'POST', '/', 'json', false, 'json', request);
}

model QueryCallDetailByCallIdRequest {
  callId: string(name='CallId', description='The unique ID of the call.

> 

*   The CallId parameter is included in the response parameters of the outbound call operation that you call to initiate a call.

*   The date when the call specified by CallId is started must be the same as the date specified by QueryDate.

*   The value of CallId must match the value of ProdId.', example='116014888060^10281631****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodId: long(name='ProdId', description='The service ID. Valid values:

*   **11000000300006**: voice notification. You can call the [SingleCallByVoice](https://help.aliyun.com/document_detail/393517.html) operation to send a voice notification of the voice notification file type to the specified number.
*   **11010000138001**: voice verification code. You can call the [SingleCallByTts](https://help.aliyun.com/document_detail/393519.html) operation to send a voice verification code or a text-to-speech (TTS) voice notification to the specified number.
*   **11000000300005**: IVR. You can call the [IvrCall](https://help.aliyun.com/document_detail/393521.html) operation to initiate an interactive voice call to the specified number.
*   **11000000300009**: Session Initiation Protocol (SIP) call.
*   **11030000180001**: intelligent outbound call.', example='11000000300006', position='Query'),
  queryDate: long(name='QueryDate', description='The time at which call details are queried. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.

> The system queries the call records that are generated within 24 hours after the specified point in time. For example, if you specify the time 20:00:01 on November 21, 2022, the system queries the call records that are generated for the specified call ID from 20:00:01 on November 21, 2022, to 20:00:01 on November 22, 2022.', example='1671552000000', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryCallDetailByCallIdResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  data?: string(name='Data', description='The details of the call, in the JSON format.

*   **caller**: the calling number.
*   **startDate**: the time when the call was started.
*   **stateDesc**: the description of the call state.
*   **duration**: the call duration. Unit: seconds. The value **0** indicates that the user was not connected.
*   **callerShowNumber**: the calling number displayed to the called party.
*   **gmtCreate**: the time when the call request was received.
*   **state**: the call state. The call state is returned by the Internet service provider (ISP) in real time. For more information about call states, see [ISP-returned error codes](~~55085~~).
*   **endDate**: the time when the call was ended.
*   **calleeShowNumber**: the number displayed to the called party.
*   **callee**: the called number.
*   **aRingTime**: the time when Line A started to ring, in the yyyy-MM-dd HH:mm:ss format.
*   **aEndTime**: the time when ringing on Line A ended, in the yyyy-MM-dd HH:mm:ss format.
*   **bRingTime**: the time when Line B started to ring, in the yyyy-MM-dd HH:mm:ss format.
*   **bEndTime**: the time when ringing on Line B ended, in the yyyy-MM-dd HH:mm:ss format.', example='{"caller":"18767****","startDate":"","stateDesc":"502","duration":0,"callerShowNumber":"05344****","gmtCreate":"2017-11-27 20:09:06","state":"502","endDate":"","calleeShowNumber":"053447****","bRingTime":"2022-01-01 12:02:00"，"bEndTime":"2022-01-01 12:02:28"，"callee":"1373546****"}'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='A90E4451-FED7-49D2-87C8-00700A8C4D0D'),
}

model QueryCallDetailByCallIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCallDetailByCallIdResponseBody(name='body'),
}

/**
  * QueryCallDetailByCallId is a common query operation. You can call this operation to query the details of a voice notification, voice verification code, interactive voice response (IVR), intelligent inbound voice call, intelligent outbound voice call, or intelligent robocall.
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function queryCallDetailByCallId(request: QueryCallDetailByCallIdRequest): QueryCallDetailByCallIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCallDetailByCallId', 'POST', '/', 'json', false, 'json', request);
}

model QueryCallDetailByTaskIdRequest {
  callee: string(name='Callee', description='The called number. You can view the outbound call records of only one called number.', example='1390000****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  queryDate: long(name='QueryDate', description='The start time of the outbound robocall task. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='2020-10-09 09:02:03', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: string(name='TaskId', description='The unique ID of the outbound robocall task. The task ID is returned after the outbound robocall task is successfully delivered. You can view the task ID on the [Task Management](https://dyvms.console.aliyun.com/job/list) page of the Voice Messaging Service console, or call the **BatchRobotSmartCall** operation to obtain the **task ID**.', example='4001112222', position='Query'),
}

model QueryCallDetailByTaskIdResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  data?: string(name='Data', description='The call details of the outbound robocall task, in the JSON format.

*   **startDate**: the time when the call was answered.

*   **stateDesc**: the reason why the call was hung up. If the status code of early media was returned, this parameter indicates the reason why the status code of early media was used.

*   **statusCode**: the status code.

*   **EndDate**: the time when the call was ended.

*   **calleeShowNumber**: the calling number displayed to the called party.

*   **callee**: the called number.

*   **duration**: the billing duration.

*   **gmtCreate**: the time when the outbound robocall task was created.

*   **hangupDirection**: the party who hung up.

*   **tags**: the call tags.

*   **dialogCount**: the number of conversation rounds in the call.

*   **sureCount**: the number of times that the robocall task was acknowledged.

*   **denyCount**: the number of times that the robocall task was denied.

*   **rejectCount**: the number of times that the robocall task was rejected.

*   **customCount**: the number of times that the robocall task was customized.

*   **knowledgeCount**: the number of times that the knowledge base was queried.

*   **recordFile**: the download URL of the recording file. The URL is valid only for 48 hours. The recording file must be downloaded in time.

*   **callId**: the call ID.

*   **recordStatus**: indicates whether a recording file was available. Valid values:

    *   1: A recording file was available.
    *   2: No recording file was available.

*   **knowledgeCommonCount**: the number of call failures caused by the common issues in the knowledge base.

*   **knowledgeBusinessCount**: the number of call failures caused by the business issues in the knowledge base.

*   **callee**: the called number.

*   **dialogDetail**: the conversation details. The value is a JSON array that contains the following parameters:

    *   **role**: the role who spoke.
    *   **content**: the content of the speech.
    *   **time**: the start time of the speech.

> The preceding parameters are for reference only. The actually returned parameters prevail.', example='{"rejectCount":0,"dialogCount":3,"tags":"","startDate":"2019-03-27 10:34:54","gmtCreate":"2019-03-27 10:34:40","sureCount":0,"state":"200000","recordFile":"http://alicom-fc-record-biz.cn-hangzhou.oss.aliyun-inc.com/Freeswitch_RU_115987800002_02c3554f-ea24-422d-b1de-e671f455f21a_record.wav?OSSAccessKeyId=bypFNbGJVk73****&Signature=VWHOX%2FFhvvtSkxfMTw%2F5fdJUQuk%3D&Expires=1554382725","defaultCount":0,"endDate":"2019-03-27 10:35:09","calleeShowNumber":"1390000****","customCount":0,"callId":"1390000****","knowledgeCount":0,"recordStatus":1,"denyCount":0,"duration":16,"knowledgeCommonCount":0,"callee":"1390000****","knowledgeBusinessCount":0,"hangupDirection":1}'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='D86B61A8-F2EE-4E4C-9F05-08A4676FFD89'),
}

model QueryCallDetailByTaskIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCallDetailByTaskIdResponseBody(name='body'),
}

async function queryCallDetailByTaskId(request: QueryCallDetailByTaskIdRequest): QueryCallDetailByTaskIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCallDetailByTaskId', 'POST', '/', 'json', false, 'json', request);
}

model QueryCallInPoolTransferConfigRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='The China 400 number used to transfer the call.', example='400****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryCallInPoolTransferConfigResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  data?: {
    calledRouteMode?: string(name='CalledRouteMode', description='The call mode. Valid values:

*   **roundRobin**
*   **random**', example='random'),
    details?: [ 
      {
        called?: string(name='Called', description='The number used to transfer the call.', example='400****'),
      }
    ](name='Details', description='The details of the response parameters.'),
    gmtCreate?: long(name='GmtCreate', description='The time when the call transfer task was created.', example='1623137002000'),
    transferTimeout?: string(name='TransferTimeout', description='The timeout period for transferring the call.', example='30'),
  }(name='Data', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='7BF47617-7851-48F7-A3A1-2021342A78E2'),
}

model QueryCallInPoolTransferConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCallInPoolTransferConfigResponseBody(name='body'),
}

/**
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function queryCallInPoolTransferConfig(request: QueryCallInPoolTransferConfigRequest): QueryCallInPoolTransferConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCallInPoolTransferConfig', 'POST', '/', 'json', false, 'json', request);
}

model QueryCallInTransferRecordRequest {
  callInCaller?: string(name='CallInCaller', description='The calling number of the inbound call.', example='150****0000', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo: long(name='PageNo', description='The page number. Default value: **1**.', example='1', position='Query'),
  pageSize: long(name='PageSize', description='The number of entries per page. Valid values: 1 to 10.', example='10', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='The phone number to which a call is transferred.', example='400****', position='Query'),
  queryDate: string(name='QueryDate', description='The time at which call transfer records are queried, in the YYYY-MM-DD hh:mm:ss format.

> The query result is all the call transfer records of the specified day.', example='2021-06-28 00:00:00', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryCallInTransferRecordResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  data?: {
    pageNo?: long(name='PageNo', description='The page number.', example='1'),
    pageSize?: long(name='PageSize', description='The number of entries per page.', example='20'),
    total?: long(name='Total', description='The total number of entries returned.', example='50'),
    values?: [ 
      {
        callInCalled?: string(name='CallInCalled', description='The called number of the inbound call.', example='150****0000'),
        callInCaller?: string(name='CallInCaller', description='The calling number of the inbound call.', example='150****0000'),
        gmtCreate?: long(name='GmtCreate', description='The time when the call was initiated.', example='2020-10-03 10:21:21'),
        recordUrl?: string(name='RecordUrl', description='The recording URL.', example='http://alicom-fc-media.cn-hangzhou.oss.aliyun-inc.com/dayuBizVoiceMrg/4238c230-9e74-41be-90b8-2fbe7684****.wav?Expires=1627538265&OSSAccessKeyId=bypFNbGJVk73****&Signature=****mUqkPqIQ%3D'),
        transferCalled?: string(name='TransferCalled', description='The phone number to which the call was transferred.', example='151****0000'),
        transferCaller?: string(name='TransferCaller', description='The calling number that transferred the call.', example='151****0000'),
      }
    ](name='Values', description='The call transfer records.'),
  }(name='Data', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='7BF47617-7851-48F7-A3A1-2021342A78E2'),
}

model QueryCallInTransferRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCallInTransferRecordResponseBody(name='body'),
}

/**
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function queryCallInTransferRecord(request: QueryCallInTransferRecordRequest): QueryCallInTransferRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCallInTransferRecord', 'POST', '/', 'json', false, 'json', request);
}

model QueryRobotInfoListRequest {
  auditStatus?: string(name='AuditStatus', description='The review state. Valid values:

*   **CONFIGURABLE**
*   **AUDITING**
*   **AUDITPASS**
*   **AUDITFAIL**', example='AUDITING', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryRobotInfoListResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  data?: string(name='Data', description='The basic information about the robot, in the JSON format. The basic information contains the following parameters:

*   **id**: the robot ID.
*   **robotName**: the robot name.
*   **robotType**: the robot type.
*   **auditStatus**: the review state.
*   **gmtCreate**: the time when the task was created.
*   **gmtModified**: the time when the task was modified.
*   **partnerId**: the partner ID.
*   **asrId**: the ID of the automatic speech recognition (ASR) model.
*   **asrType**: the ASR type. Valid values: **Public** and **Private**.
*   **remark**: the additional information.', example='{["id":1000010920004, "gmtModified":"Thu Mar 21 15:38:55 CST 2019", "auditStatus":"AUDITPASS","gmtCreate":"Thu Mar 21 12:00:51 CST 2019","remark":"tset","partnerId":100000022670001,"asrId":"a9a1d69081fd4266ad788346bf5e1b6c","robotType":"CUSTOM","asrType":"1","robotName":"Collection scenario"},{"id":1000010920003,"gmtModified":"Thu Mar 21 11:51:10 CST 2019","auditStatus":"AUDITPASS","gmtCreate":"Thu Mar 21 11:44:57 CST 2019","remark":"test","partnerId":100000022670001,"asrId":"a9a1d69081fd4266ad788346bf5e1b6c","robotType":"CUSTOM","asrType":"1","robotName":"Collection scenario"]}'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='F59AF338-655D-48E8-9471-5EB07692B1CC'),
}

model QueryRobotInfoListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryRobotInfoListResponseBody(name='body'),
}

async function queryRobotInfoList(request: QueryRobotInfoListRequest): QueryRobotInfoListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRobotInfoList', 'POST', '/', 'json', false, 'json', request);
}

model QueryRobotTaskCallDetailRequest {
  callee: string(name='Callee', description='The called number.', example='130****0000', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  queryDate: long(name='QueryDate', description='The timestamp of the time at which the call details you want to query.', example='2020-10-21 08:23:21', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: long(name='TaskId', description='The unique ID of the robocall task. You can call the [CreateRobotTask](~~393531~~) operation to obtain the task ID.', example='1045001', position='Query'),
}

model QueryRobotTaskCallDetailResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  data?: string(name='Data', description='The call details of a robocall task, in the JSON format.

*   **taskId**: the unique ID of the robocall task.
*   **caller**: the calling number.
*   **called**: the called number.
*   **duration**: the call duration. Unit: seconds.
*   **label**: the label of the called party.
*   **dialogCount**: the number of conversation rounds in the call.
*   **callResult**: the call result.
*   **hangupDirection**: the party who hung up. Valid values: **0**: the robot. **1**: the called party.
*   **transferResult**: the result of transferring the call to an agent. Valid values: **1**, **0**, and **3**. The value 1 indicates that the call was transferred to the agent. The value 0 indicates that the call failed to be transferred to the agent. The value 3 indicates that the call was not transferred to the agent.
*   **transferNumber**: the phone number of the agent to whom the call was transferred.
*   **transferFailReason**: the reason why the call failed to be transferred to the agent.
*   **callId**: the unique receipt ID of the call, in the `taskId^bizId` format.
*   **recallCurTimes**: the number of recalls.
*   **callStartTime**: the start time of the call.
*   **callEndTime**: the end time of the call.
*   **sureCount**: the number of times that the robocall task was affirmed.
*   **denyCount**: the number of times that the robocall task was denied.
*   **rejectCount**: the number of times that the robocall task was rejected.
*   **customCount**: the number of times that the robocall task was customized.
*   **knowledgeCount**: the number of times that the knowledge base was queried.
*   **defaultCount**: the default number of calls.
*   **knowledgeBusinessCount**: the number of call failures caused by the business issues in the knowledge base.
*   **knowledgeCommonCount**: the number of call failures caused by the common issues in the knowledge base.
*   **recordStatus**: Indicates whether the call has a recording file. Valid values: **1**: The call has a recording file. **2**: The call does not have a recording file.
*   **recordFile**: the download URL of the recording file.
*   **dialogDetail**: the dialog details, in a JSON-formatted array. **role**: the object of the speech. **content**: the content of the speech. **speakTime**: the time of the speech.', example='{ "taskId" : 1045001, "caller" : "0571-8899****", "called" : "130****0000", "duration" : "60", "label" : "Invitation", "dialogCount": "3", "callResult" : "Not Available", "hangupDirection" : "1", "transferResult" : "3", "transferNumber" ：0571-8833****, "transferFailReason" ："User hangs up", "callId" ："116950320375^10375010****", "recallCurTimes" : 2, "callStartTime" : "2019.06.14 15:22:23", "callEndTime" : "2019.06.14 15:22:55", "sureCount" : 2, "denyCount" : 2, "rejectCount" : 0, "customCount" : 0, "knowledgeCount" : 0, "defaultCount" : 0, "knowledgeBusinessCount" : 0, "knowledgeCommonCount" : 0, "recordStatus":1, "recordFile": "http://alicom-fc-record-biz.cn-hangzhou.oss.aliyun-inc.com/Freeswitch_RU_117074080001_ccd71132-8256-4eb4-9217-884e1d87c0d4_record.wav?Expires=1562740186&OSSAccessKeyId=bypFNbGJVk7****&Signature=99losPmytVl%2BMH85noZGD******", "dialogDetail": [{"role": "robot","speakTime": "2019-06-19 20:44:17","content":"prologue"}] }'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
}

model QueryRobotTaskCallDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryRobotTaskCallDetailResponseBody(name='body'),
}

/**
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function queryRobotTaskCallDetail(request: QueryRobotTaskCallDetailRequest): QueryRobotTaskCallDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRobotTaskCallDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryRobotTaskCallListRequest {
  callResult?: string(name='CallResult', description='The call result. Valid values:

*   **200002**: The line is busy.
*   **200005**: The called party cannot be connected.
*   **200010**: The phone of the called party is powered off.
*   **200011**: The called party is out of service.
*   **200012**: The call is lost.', example='200002', position='Query'),
  called?: string(name='Called', description='The called number.', example='1300****0000', position='Query'),
  dialogCountFrom?: string(name='DialogCountFrom', description='The minimum number of conversation rounds in the call.', example='0', position='Query'),
  dialogCountTo?: string(name='DialogCountTo', description='The maximum number of conversation rounds in the call.', example='5', position='Query'),
  durationFrom?: string(name='DurationFrom', description='The minimum call duration.', example='0', position='Query'),
  durationTo?: string(name='DurationTo', description='The maximum call duration.', example='60', position='Query'),
  hangupDirection?: string(name='HangupDirection', description='The party who hangs up. Valid values:

*   **0**: the called party.
*   **1**: the robot.', example='1', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', description='The page number.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: string(name='TaskId', description='The unique ID of the robocall task. You can call the [CreateRobotTask](~~393531~~) operation to obtain the task ID.', example='1045001****', position='Query'),
}

model QueryRobotTaskCallListResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  data?: string(name='Data', description='The information about the robocall task, which is a JSON-formatted array.

*   **taskId**: the unique ID of the robocall task.
*   **caller**: the calling number.
*   **called**: the called number.
*   **duration**: the call duration. Unit: seconds.
*   **label**: the label of the called party.
*   **dialogCount**: the number of conversation rounds in the call.
*   **callResult**: the call result.
*   **hangupDirection**: the party who hung up. Valid values: **1** and **0**. The value 1 indicates the called party, and the value 0 indicates the robot.
*   **transferResult**: the result of transferring the call to an agent. Valid values: **1**, **0**, and **3**. The value 1 indicates that the call was transferred to an agent. The value 0 indicates that the call failed to be transferred to an agent. The value 3 indicates that the call was not transferred to an agent.
*   **transferNumber**: the phone number of the agent to whom the call was transferred.
*   **transferFailReason**: the reason why the call failed to be transferred to an agent.
*   **callId**: the unique receipt ID of the call.
*   **recallCurTimes**: the number of recalls.
*   **callStartTime**: the start time of the call.
*   **callEndTime**: the end time of the call.
*   **sureCount**: the number of times that the robocall task was acknowledged.
*   **denyCount**: the number of times that the robocall task was denied.
*   **rejectCount**: the number of times that the robocall task was rejected.
*   **customCount**: the number of times that the robocall task was customized.
*   **knowledgeCount**: the number of times that the knowledge base was queried.
*   **defaultCount**: the default number of calls.
*   **knowledgeBusinessCount**: the number of call failures caused by the business issues in the knowledge base.
*   **knowledgeCommonCount**: the number of call failures caused by the common issues in the knowledge base.
*   ****', example='[ {"taskId":"1045001", "caller":"0571-889****", "called": "130****0000", "duration":"60", "label":"Invitation", "dialogCount":"3", "callResult":"Not Available", "hangupDirection":"1", "transferResult":"3", "transferNumber":"0571-8833****", "transferFailReason":"User hangs up", "callId":"116950320375^10375010****", "recallCurTimes":"2", "callStartTime":"2019.06.14 15:22:23", "callEndTime":"2019.06.14 15:22:55", "sureCount":"2", "denyCount":"2", "rejectCount":"0", "customCount:"0", "knowledgeCount":"0", "defaultCount":"0", "knowledgeBusinessCount":"0", "knowledgeCommonCount":"0"} ]'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
}

model QueryRobotTaskCallListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryRobotTaskCallListResponseBody(name='body'),
}

/**
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function queryRobotTaskCallList(request: QueryRobotTaskCallListRequest): QueryRobotTaskCallListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRobotTaskCallList', 'POST', '/', 'json', false, 'json', request);
}

model QueryRobotTaskDetailRequest {
  id: long(name='Id', description='The unique ID of the robocall task. You can call the [CreateRobotTask](~~CreateRobotTask~~) operation to obtain the task ID.', example='1045001', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryRobotTaskDetailResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  data?: string(name='Data', description='The details of the robocall task, in the JSON format.

*   **Id**: the unique ID of the robocall task.
*   **taskName**: the task name.
*   **robotId**: the robot ID.
*   **robotName**: the robot name.
*   **corpName**: the company name.
*   **caller**: the number displayed to the called party.
*   **numberStatusIdent**: indicates whether number status identification was enabled. Valid values: **true** and **false**. The value true indicates that number status identification was enabled. The value false indicates that number status identification was not enabled.
*   **status**: the task state. You can call the [QueryRobotTaskList](~~QueryRobotTaskList~~) operation to obtain the task state from the `status` parameter.
*   **scheduleType**: the scheduling type. Valid values: **SINGLE** and **ORDER**. The value SINGLE indicates that the task was started immediately after it was created. The value ORDER indicates that the task was started at a scheduled time.
*   **retryType**: indicates whether auto-redial was enabled. Valid values: **1** and **0**. The value 1 indicates that auto-redial was enabled. The value 0 indicates that auto-redial was not enabled.
*   **recallStateCodes**: the call state in which redial is required. Valid values: **200010**, **200011**, **200002**, **200012**, and **200005**. The value 200010 indicates that the phone of the called party was powered off. The value 200011 indicates that the number of the called party was out of service. The value 200002 indicates that the line was busy. The value 200012 indicates that the call was lost. The value 200005 indicates that the called party could not be connected.
*   **recallTimes**: the number of redial times.
*   **recallInterval**: the redial interval. Unit: minutes.
*   **createTime**: the time when the task was created, in the yyyy-MM-dd HH:mm:ss format.
*   **fireTime**: the time when the task was started, in the yyyy-MM-dd HH:mm:ss format.
*   **completeTime**: the time when the task was completed, in the yyyy-MM-dd HH:mm:ss format.
*   **filename**: the name of the called number file.
*   **ossFilePath**: the path of the called number file.', example='{"id":1045001,"taskName":"Test Template","robotId":1000000075003,"robotName":"robot","corpName":"company ","caller":"057156xxxx,0571568xxxx", "numberStatusIdent":true,"status":"INIT","scheduleType":"SINGLE", "retryType":1,"recallStateCodes":"200010,200011", "recallTimes":2,"recallInterval":5,"createTime": "2019-06-14 11:04:19","fireTime":"2019-06-14 11:05:23","completeTime": "2019-06-14 18:21:06","called": [{"fileName": "5102636f-7be6-4a2d-9ac7-755a2e140a50--robotCallApi", "ossFilePath": "http://test.cn-hangzhou.oss.aliyun-inc.com/5102636f-7be6-4a2d-9ac7-755a2e140a50--robotCallApi.xlsx"}]}'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
}

model QueryRobotTaskDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryRobotTaskDetailResponseBody(name='body'),
}

/**
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function queryRobotTaskDetail(request: QueryRobotTaskDetailRequest): QueryRobotTaskDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRobotTaskDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryRobotTaskListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', description='The page number.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', description='The task state. Valid values:

*   **INIT**: The task is not started.
*   **READY**: The task is ready to start.
*   **DISPATCH**: The task is being parsed.
*   **EXCUTING**: The task is being executed.
*   **MANUAL_STOP**: The task is manually suspended.
*   **SYSTEM_STOP**: The task is suspended by the system.
*   **ARREARS_STOP**: The task is suspended due to overdue payments.
*   **CANCEL**: The task is manually canceled.
*   **SYSTEM_CANCEL**: The task is canceled by the system.
*   **FINISH**: The task is complete.', example='EXCUTING', position='Query'),
  taskName?: string(name='TaskName', description='The task name.', example='Test Template', position='Query'),
  time?: string(name='Time', description='The date when the task is created, in the yyyy-MM-dd format.', example='2019-06-14', position='Query'),
}

model QueryRobotTaskListResponseBody = {
  code?: string(name='Code', description='The response code.', example='OK'),
  data?: string(name='Data', description='The robocall tasks, in the JSON format.

*   **id**: the unique ID of the robocall task.
*   **taskName**: the task name.
*   **robotId**: the robot ID.
*   **robotName**: the robot name.
*   **status**: the task state.
*   **scheduleType**: the scheduling type. Valid values: **SINGLE** and **ORDER**. The value SINGLE indicates that the task was started immediately after it was created. The value ORDER indicates that the task was started at a scheduled time.
*   **createTime**: the time when the task was created, in the yyyy.MM.dd HH:mm:ss format.
*   **completeTime**: the time when the task was completed, in the yyyy.MM.dd HH:mm:ss format.
*   **fireTime**: the time when the task was started, in the yyyy.MM.dd HH:mm:ss format.
*   **totalCount**: the total number of calls processed.
*   **finishCount**: the number of calls completed.', example='[ {"id": 1045001, "taskName": "Test Template", "robotId": 1000000075003, "robotName": "robot", "status": "INIT","scheduleType": "SINGLE", "createTime": "2019.06.14 14:55:23", "completeTime": "2019.06.14 14:55:23", "fireTime": "2019.06.14 14:55:23", "totalCount": 1000, "finishCount": 998} ]'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  pageNo?: string(name='PageNo', description='The page number.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
  totalCount?: string(name='TotalCount', description='The total number of tasks.', example='1'),
}

model QueryRobotTaskListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryRobotTaskListResponseBody(name='body'),
}

/**
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function queryRobotTaskList(request: QueryRobotTaskListRequest): QueryRobotTaskListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRobotTaskList', 'POST', '/', 'json', false, 'json', request);
}

model QueryRobotv2AllListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryRobotv2AllListResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  data?: string(name='Data', description='The information about the robot communication script, in the JSON format.

*   **id**: the ID of the robot communication script.
*   **robotName**: the name of the robot communication script.
*   **robotType**: the type of the robot communication script.', example='{"id":100000007****,"robotName":"Robot","robotType":"CUSTOM"}'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
}

model QueryRobotv2AllListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryRobotv2AllListResponseBody(name='body'),
}

/**
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function queryRobotv2AllList(request: QueryRobotv2AllListRequest): QueryRobotv2AllListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRobotv2AllList', 'POST', '/', 'json', false, 'json', request);
}

model QueryVideoPlayProgressRequest {
  callId?: string(name='CallId', example='116004767703^102806****', position='Query'),
  calledNumber: string(name='CalledNumber', example='159****0000', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryVideoPlayProgressResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message', example='示例值示例值'),
  success?: boolean(name='Success', example='true'),
}

model QueryVideoPlayProgressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryVideoPlayProgressResponseBody(name='body'),
}

async function queryVideoPlayProgress(request: QueryVideoPlayProgressRequest): QueryVideoPlayProgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryVideoPlayProgress', 'POST', '/', 'json', false, 'json', request);
}

model QueryVirtualNumberRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', description='The page number.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10', position='Query'),
  prodCode?: string(name='ProdCode', description='The service name. Default value: **dyvms**.', example='dyvms', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeType?: int32(name='RouteType', description='The route type. Valid values:

*   **0**: number location first.
*   **1**: random.', example='0', position='Query'),
}

model QueryVirtualNumberResponseBody = {
  code?: string(name='Code', description='The response code. The value 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The details of the numbers associated with the virtual numbers. The following fields are returned:

*   createTime: the time when the number was activated.
*   qualificationCount: the number of qualifications.
*   cityCount: the number of cities.
*   phoneNumCount: the number of virtual numbers.
*   remark: the additional information.
*   phoneNum: the virtual number.
*   routeType: the route type.
*   canCancel: indicates whether the number can be deactivated.
*   specCount: the number of Internet service providers (ISPs).
*   status: the number state. Valid values: **1**, **0**, and **-1**. The value 1 indicates that the number is valid. The value 0 indicates that the number is invalid. The value -1 indicates that the number was deactivated.
*   pageNo: the page number.
*   pageSize: the number of entries per page.
*   total: the total number of virtual numbers.', example='{"data":[{"createTime":"2020-07-15 04:00:00","qualificationCount":0,"cityCount":0,"phoneNumCount":1,"remark":"20200715Unicom CTD shut down","phoneNum":"05516214****","routeType":1,"canCancel":true,"specCount":0,"status":"1"}],"pageSize":1,"total":17,"pageNo":1}'),
  requestId?: string(name='RequestId', description='The request ID.', example='9FF70B74-1B3C-44C1-ACDF-8DF962988F0E'),
}

model QueryVirtualNumberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryVirtualNumberResponseBody(name='body'),
}

/**
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function queryVirtualNumber(request: QueryVirtualNumberRequest): QueryVirtualNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryVirtualNumber', 'POST', '/', 'json', false, 'json', request);
}

model QueryVirtualNumberRelationRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', description='The page number.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10', position='Query'),
  phoneNum?: string(name='PhoneNum', description='The virtual number.', example='05516214****', position='Query'),
  prodCode?: string(name='ProdCode', description='The service name. Default value: **dyvms**.', example='dyvms', position='Query'),
  qualificationId?: long(name='QualificationId', description='The qualification ID.

You can log on to the [Voice Messaging Service console](https://dyvms.console.aliyun.com/overview/home), choose **Qualifications\\&Communication Scripts > Qualification Management**, and then click **Details** in the Actions column to view the qualification ID.', example='1000000542****', position='Query'),
  regionNameCity?: string(name='RegionNameCity', description='The city to which the virtual number belongs.', example='hangzhou', position='Query'),
  relatedNum?: string(name='RelatedNum', description='The real number.', example='1705559****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeType?: int32(name='RouteType', description='The route type. Valid values:

**0**: number location first. **1**: random.', example='0', position='Query'),
  specId?: long(name='SpecId', description='The number type. Valid values:

*   **1**: the number provided by a virtual network operator, in the 05710000\\*\\*\\*\\* format.
*   **2**: the number provided by an Internet service provider (ISP).
*   **3**: a 5-digit phone number that starts with 95.', example='1', position='Query'),
}

model QueryVirtualNumberRelationResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value 200 indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='200'),
  data?: string(name='Data', description='The list of associations between virtual numbers and real numbers. The following fields are returned:

*   **relatedNum**: the real number.
*   **createTime**: the time when the number was activated.
*   **pageNo**: the page number.
*   **pageSize**: the number of entries per page.
*   **total**: the total number of entries returned.', example='{"data":[{"relatedNum":"1705559****","createTime":"2021-03-26 12:34:08"}],"pageSize":20,"total":1,"pageNo":1}'),
  requestId?: string(name='RequestId', description='The request ID.', example='8FAD5988-B483-48A4-B251-6E8470A67371'),
}

model QueryVirtualNumberRelationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryVirtualNumberRelationResponseBody(name='body'),
}

/**
  * ### QPS limits
  * You can call this operation up to 200 times per second per account.
  *
 */
async function queryVirtualNumberRelation(request: QueryVirtualNumberRelationRequest): QueryVirtualNumberRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryVirtualNumberRelation', 'POST', '/', 'json', false, 'json', request);
}

model QueryVoiceFileAuditInfoRequest {
  businessType?: int32(name='BusinessType', description='The type of the voice file. Valid values:

*   **0** (default): the voice notification file.
*   **2**: the recording file.', example='0', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  voiceCodes: string(name='VoiceCodes', description='The ID of the voice file. You can log on to the [Voice Messaging Service console](https://dyvms.console.aliyun.com/overview/home), choose **Voice Messages** > **Voice Notifications** or **Voice File Management**, and then click the **Voice Notification Files** tab to view the **voice ID**.

> You can query up to 10 voice files each time. Separate the voice file names with commas (,).', example='8501d2eb-efbb-471f-xxx8-****.wav', position='Query'),
}

model QueryVoiceFileAuditInfoResponseBody = {
  code?: string(name='Code', description='The response code.

The value OK indicates that the request was successful. For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  data?: [ 
    {
      auditState?: string(name='AuditState', description='The review state of the voice file. Valid values:

*   **AUDIT_STATE_INIT**: The voice file was under review.
*   **AUDIT_STATE_PASS**: The voice file was approved.
*   **AUDIT_STATE_NOT_PASS**: The voice file was rejected.
*   **AUDIT_STATE_UPLOADING**: The voice file was approved and is being uploaded.
*   **AUDIT_STATE_REDOING**: The voice file was being reprocessed.
*   **AUDIT_SATE_CANCEL**: The review of the voice file was canceled.
*   **AUDIT_PAUSE**: The review of the voice file was suspended.
*   **AUDIT_ORDER_FINISHED**: The voice file was approved by the ticket system and was waiting for the review of the Internet service provider (ISP).', example='AUDIT_STATE_NOT_PASS'),
      rejectInfo?: string(name='RejectInfo', description='The reason why the voice file was rejected.', example='This business is not supported'),
      voiceCode?: string(name='VoiceCode', description='The code of the voice file.', example='8501d2eb-efbb-471f-xxx8-****.wav'),
    }
  ](name='Data', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='A90E4451-FED7-49D2-87C8-00700A8C4D0D'),
}

model QueryVoiceFileAuditInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryVoiceFileAuditInfoResponseBody(name='body'),
}

async function queryVoiceFileAuditInfo(request: QueryVoiceFileAuditInfoRequest): QueryVoiceFileAuditInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryVoiceFileAuditInfo', 'POST', '/', 'json', false, 'json', request);
}

model RecoverCallInConfigRequest {
  number: string(name='Number', description='The China 400 number that is used to transfer the inbound call.', example='400***', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RecoverCallInConfigResponseBody = {
  code?: string(name='Code', description='The response code.', example='OK'),
  data?: boolean(name='Data', description='Indicates whether the inbound call was resumed. Valid values:

*   true: The inbound call was resumed.
*   false: The inbound call failed to be resumed.', example='true'),
  message?: string(name='Message', description='The returned message.', example='test'),
  requestId?: string(name='RequestId', description='The request ID.', example='a78278ff-26bb-48ec-805c-26a0f4c102***'),
}

model RecoverCallInConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecoverCallInConfigResponseBody(name='body'),
}

async function recoverCallInConfig(request: RecoverCallInConfigRequest): RecoverCallInConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecoverCallInConfig', 'POST', '/', 'json', false, 'json', request);
}

model ResumeVideoFileRequest {
  callId?: string(name='CallId', example='100001616500^1000018****', position='Query'),
  calledNumber: string(name='CalledNumber', example='示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ResumeVideoFileResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message', example='示例值示例值'),
  success?: boolean(name='Success', example='True'),
}

model ResumeVideoFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResumeVideoFileResponseBody(name='body'),
}

async function resumeVideoFile(request: ResumeVideoFileRequest): ResumeVideoFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumeVideoFile', 'POST', '/', 'json', false, 'json', request);
}

model SeekVideoFileRequest {
  callId?: string(name='CallId', description='呼叫唯一ID', example='示例值', position='Query'),
  calledNumber?: string(name='CalledNumber', description='被叫号码', example='示例值示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  seekTimes?: long(name='SeekTimes', description='快进或快退值，负数为快退，单位秒', example='92', position='Query'),
}

model SeekVideoFileResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='示例值'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message', example='示例值示例值'),
  success?: boolean(name='Success', example='false'),
}

model SeekVideoFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SeekVideoFileResponseBody(name='body'),
}

async function seekVideoFile(request: SeekVideoFileRequest): SeekVideoFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SeekVideoFile', 'POST', '/', 'json', false, 'json', request);
}

model SendVerificationRequest {
  bizType: string(name='BizType', description='The business type. Set the value to **CONTACT**.', example='CONTACT', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  target: string(name='Target', description='The mobile phone number that receives the SMS verification code.', example='150****0000', position='Query'),
  verifyType: string(name='VerifyType', description='The mode of sending the SMS verification code. Set the value to **SMS**.', example='SMS', position='Query'),
}

model SendVerificationResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  data?: boolean(name='Data', description='Indicates whether the verification code was sent successfully.', example='true'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='6086693B-2250-17CE-A41F-06259AB6DB1B'),
}

model SendVerificationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendVerificationResponseBody(name='body'),
}

/**
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function sendVerification(request: SendVerificationRequest): SendVerificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendVerification', 'POST', '/', 'json', false, 'json', request);
}

model SetTransferCalleePoolConfigRequest {
  calledRouteMode: string(name='CalledRouteMode', description='The call mode. Valid values:

*   **roundRobin**
*   **random**', example='roundRobin', position='Query'),
  details: [ 
    {
      called: string(name='Called', description='The called number.', example='151****0000'),
      caller?: string(name='Caller', description='The calling number.', example='150****0000'),
    }
  ](name='Details', description='The information about the phone numbers for transferring the call.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='The phone number used for transferring the call.', example='400****', position='Query'),
  qualificationId: string(name='QualificationId', description='The qualification ID. You can call the [GetHotlineQualificationByOrder](~~393548~~) operation to obtain the qualification ID.', example='190***', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model SetTransferCalleePoolConfigResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  data?: boolean(name='Data', description='Indicates whether the phone numbers for transferring the call were configured.', example='true'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='E7518CE1-B0FF-4C6F-9252-BF80271B2F99'),
}

model SetTransferCalleePoolConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetTransferCalleePoolConfigResponseBody(name='body'),
}

/**
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function setTransferCalleePoolConfig(request: SetTransferCalleePoolConfigRequest): SetTransferCalleePoolConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetTransferCalleePoolConfig', 'POST', '/', 'json', false, 'json', request);
}

model SingleCallByTtsRequest {
  calledNumber: string(name='CalledNumber', description='The mobile phone number that receives voice notifications.

*   Number format in the Chinese mainland:

    *   Mobile phone number, for example, 159\\*\\*\\*\\*0000.
    *   Landline number, for example, 0571\\*\\*\\*\\*5678.

*   Number format outside the Chinese mainland: country code + phone number, for example, 85200\\*\\*\\*\\*00.

> 

*   Each request supports only one called number. For more information, see [How to use voice notifications in the Chinese mainland](~~150016~~) or [How to use voice verification codes in regions outside the Chinese mainland](~~270044~~).

*   Voice verification codes are sent to a called number at the following frequency: one time per minute, five times per hour, and 20 times per 24 hours.', example='1590****000', position='Query'),
  calledShowNumber?: string(name='CalledShowNumber', description='The number displayed to the called party.

*   You do not need to specify this parameter if you use the text-to-speech (TTS) notification template or voice verification code template for outbound calls in the common mode. For more information, see [FAQ about the common outbound call mode](~~172104~~).
*   If you use the TTS notification template or voice verification code template for outbound calls in the dedicated mode, you must specify a number you purchased and only one number can be specified. You can log on to the [Voice Messaging Service console](https://dyvms.console.aliyun.com/overview/home) and choose **Voice Numbers** > **Real Number Management** to view the number you purchased.', example='0571****5678', position='Query'),
  outId?: string(name='OutId', description='The custom ID that is reserved for the caller of the operation when the request is initiated. This ID is returned to the caller in a receipt message.

The value is of the STRING type and must be 1 to 15 bytes in length.', example='225869*****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  playTimes?: int32(name='PlayTimes', description='The number of times a voice notification is played back in a call. Valid values: 1 to 3. Default value: 3.', example='3', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  speed?: int32(name='Speed', description='The playback speed. Valid value: -500 to 500.', example='5', position='Query'),
  ttsCode: string(name='TtsCode', description='The ID of the approved TTS notification template or voice verification code template.

You can log on to the [Voice Messaging Service console](https://dyvms.console.aliyun.com/overview/home), and choose **Voice Messages** > **Voice Verification Codes** or choose **Voice Messages** > **Voice Notifications** to view the **template ID**.

> The account to which the TTS template belongs must be the same as the account that is used to call the SingleCallByTts operation.', example='TTS_100****', position='Query'),
  ttsParam?: string(name='TtsParam', description='The variables in the template, in the JSON format.

> The variables in the template must be less than 250 characters in length. The length of each single variable is not limited. These variables do not support URLs. The variables in the verification code template support only digits and letters.', example='{"AckNum":"123456"}', position='Query'),
  volume?: int32(name='Volume', description='The playback volume of the voice notification. Valid values: 0 to 100. Default value: 100.', example='100', position='Query'),
}

model SingleCallByTtsResponseBody = {
  callId?: string(name='CallId', description='The unique receipt ID of the call.

You can call the [QueryCallDetailByCallId](~~393529~~) operation to query the details of the call based on the receipt ID.', example='116012354148^10281378****'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
}

model SingleCallByTtsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SingleCallByTtsResponseBody(name='body'),
}

/**
  * *   Due to business adjustments, the updates of the voice notification and voice verification code services have been stopped in regions outside the Chinese mainland and the services have been discontinued since March 2022. Only qualified customers can continue using the voice notification and voice verification code services.
  * *   For more information about voice plans or voice service billing, see [Pricing of VMS on China site (aliyun.com)](~~150083~~).
  * ### QPS limits
  * You can call this operation up to 1,000 times per second per account.
  *
 */
async function singleCallByTts(request: SingleCallByTtsRequest): SingleCallByTtsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SingleCallByTts', 'POST', '/', 'json', false, 'json', request);
}

model SingleCallByVideoRequest {
  calledNumber: string(name='CalledNumber', example='1590****000', position='Query'),
  calledShowNumber?: string(name='CalledShowNumber', example='0571****5678', position='Query'),
  outId?: string(name='OutId', example='abcdefgh', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  playTimes?: int32(name='PlayTimes', example='3', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  speed?: int32(name='Speed', example='100', position='Query'),
  videoCode: string(name='VideoCode', position='Query'),
  voiceCode: string(name='VoiceCode', example='2d4c-4e78-8d2a-afbb06cf****.wav', position='Query'),
  volume?: int32(name='Volume', example='100', position='Query'),
}

model SingleCallByVideoResponseBody = {
  callId?: string(name='CallId', example='116012354148^10281378****'),
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='a78278ff-26bb-48ec-805c-26a0f4c102***'),
}

model SingleCallByVideoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SingleCallByVideoResponseBody(name='body'),
}

async function singleCallByVideo(request: SingleCallByVideoRequest): SingleCallByVideoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SingleCallByVideo', 'POST', '/', 'json', false, 'json', request);
}

model SingleCallByVoiceRequest {
  calledNumber: string(name='CalledNumber', description='The number for receiving voice notifications.

Number format:

*   In the Chinese mainland:

    *   Mobile phone number, for example, 159\\*\\*\\*\\*0000.
    *   Landline number, for example, 0571\\*\\*\\*\\*5678.

*   Outside the Chinese mainland: country code + phone number, for example, 85200\\*\\*\\*\\*00.

> 

*   You can specify only one called number for a request. For more information, see [How to use voice notifications in the Chinese mainland](~~150016~~) or [How to use voice notifications in regions outside the Chinese mainland](~~268810~~).

*   Voice notifications are sent to a called number at the following frequency: one time per minute, five times per hour, and 20 times per 24 hours.', example='1590****000', position='Query'),
  calledShowNumber?: string(name='CalledShowNumber', description='The number displayed to the called party.

*   You do not need to specify this parameter if you use a voice notification file that uses the common outbound call mode. For more information, see [FAQ about the common outbound call mode](~~172104~~).
*   If you use a voice notification file that uses the dedicated outbound call mode, you must specify a number that you purchased. You can specify only one number. You can log on to the [Voice Messaging Service console](https://dyvms.console.aliyun.com/overview/home) and choose **Real Number Service** > **Real Number Management** to view the number that you purchased.', example='0571****5678', position='Query'),
  outId?: string(name='OutId', description='The ID reserved for the caller. This ID is returned to the caller in a receipt message.

The value must be of the STRING type and 1 to 15 bytes in length.', example='22596****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  playTimes?: int32(name='PlayTimes', description='The number of times the voice notification file is played. Valid values: 1 to 3.', example='3', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  speed?: int32(name='Speed', description='The playback speed of the voice notification file. Valid values: -500 to 500.', example='100', position='Query'),
  voiceCode: string(name='VoiceCode', description='The voice ID of the voice notification file.

You can log on to the [Voice Messaging Service console](https://dyvms.console.aliyun.com/overview/home), choose **Voice Messages** > **Voice Notifications** or **Voice File Management**, and then click the **Voice Notification Files** tab to view the **voice ID**.', example='2d4c-4e78-8d2a-afbb06cf****.wav', position='Query'),
  volume?: int32(name='Volume', description='The playback volume of the voice notification file. Valid values: 0 to 100. Default value: 100.', example='100', position='Query'),
}

model SingleCallByVoiceResponseBody = {
  callId?: string(name='CallId', description='The unique receipt ID for the call.

You can call the [QueryCallDetailByCallId](~~393529~~) operation to query the details of the call.', example='116004767703^102806****'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.****
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='E50FFA85-0B79-4421-A7BD-00B0A271966F'),
}

model SingleCallByVoiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SingleCallByVoiceResponseBody(name='body'),
}

/**
  * > Due to business adjustments, the updates of the voice notification and voice verification code services have been stopped in regions outside the Chinese mainland and the services have been discontinued since March 2022. Only qualified customers can continue using the voice notification and voice verification code services.
  * You can call the [SingleCallByTts](~~393519~~) operation to send voice notifications with variables.
  * ### QPS limits
  * You can call this operation up to 1,200 times per second per account.
  *
 */
async function singleCallByVoice(request: SingleCallByVoiceRequest): SingleCallByVoiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SingleCallByVoice', 'POST', '/', 'json', false, 'json', request);
}

model SkipVideoFileRequest {
  callId?: string(name='CallId', example='116012854210^10281427****', position='Query'),
  calledNumber: string(name='CalledNumber', example='1590****000', position='Query'),
  outId?: string(name='OutId', example='PR0210428****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  skipTimes: long(name='SkipTimes', example='04:02:01', position='Query'),
}

model SkipVideoFileResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='false'),
  message?: string(name='Message', example='示例值示例值示例值'),
  success?: boolean(name='Success', example='true'),
}

model SkipVideoFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SkipVideoFileResponseBody(name='body'),
}

async function skipVideoFile(request: SkipVideoFileRequest): SkipVideoFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SkipVideoFile', 'POST', '/', 'json', false, 'json', request);
}

model SmartCallRequest {
  actionCodeBreak?: boolean(name='ActionCodeBreak', position='Query'),
  actionCodeTimeBreak?: int32(name='ActionCodeTimeBreak', position='Query'),
  asrBaseId?: string(name='AsrBaseId', position='Query'),
  asrModelId?: string(name='AsrModelId', position='Query'),
  backgroundFileCode?: string(name='BackgroundFileCode', position='Query'),
  backgroundSpeed?: int32(name='BackgroundSpeed', position='Query'),
  backgroundVolume?: int32(name='BackgroundVolume', minimum=-4, maximum=4, position='Query'),
  calledNumber: string(name='CalledNumber', position='Query'),
  calledShowNumber: string(name='CalledShowNumber', position='Query'),
  dynamicId?: string(name='DynamicId', position='Query'),
  earlyMediaAsr?: boolean(name='EarlyMediaAsr', position='Query'),
  enableITN?: boolean(name='EnableITN', position='Query'),
  muteTime?: int32(name='MuteTime', position='Query'),
  noiseThreshold?: double(name='NoiseThreshold', position='Query'),
  outId?: string(name='OutId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pauseTime?: int32(name='PauseTime', position='Query'),
  recordFlag?: boolean(name='RecordFlag', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sessionTimeout?: int32(name='SessionTimeout', position='Query'),
  speed?: int32(name='Speed', position='Query'),
  streamAsr?: int32(name='StreamAsr', minimum=0, maximum=100, position='Query'),
  ttsConf?: boolean(name='TtsConf', position='Query'),
  ttsSpeed?: int32(name='TtsSpeed', position='Query'),
  ttsStyle?: string(name='TtsStyle', position='Query'),
  ttsVolume?: int32(name='TtsVolume', position='Query'),
  voiceCode: string(name='VoiceCode', position='Query'),
  voiceCodeParam?: string(name='VoiceCodeParam', position='Query'),
  volume?: int32(name='Volume', position='Query'),
}

model SmartCallResponseBody = {
  callId?: string(name='CallId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SmartCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SmartCallResponseBody(name='body'),
}

async function smartCall(request: SmartCallRequest): SmartCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SmartCall', 'POST', '/', 'json', false, 'json', request);
}

model SmartCallOperateRequest {
  callId: string(name='CallId', description='The unique receipt ID of the call. You can call the [SmartCall](~~393526~~) operation to obtain the receipt ID.', example='116012854210^1028142****', position='Query'),
  command: string(name='Command', description='The action that is initiated to the called number of an outbound robocall.

> Only the value **parallelBridge** is supported. This value indicates that a bridge action is initiated between a called number and an agent of the call center.', example='parallelBridge', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  param?: string(name='Param', description='The extended field.', example='Param', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model SmartCallOperateResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='A90E4451-FED7-49D2-87C8-00700A8C4D0D'),
  status?: boolean(name='Status', description='The action result. Valid values:

*   **true**: The action was successful.
*   **false**: The action failed.', example='true'),
}

model SmartCallOperateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SmartCallOperateResponseBody(name='body'),
}

/**
  * You can call this operation to initiate a specified action on the called number of an outbound robocall when the call is transferred to an agent of the call center.
  * > You can only initiate the action of bridging a called number and an agent of the call center.
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function smartCallOperate(request: SmartCallOperateRequest): SmartCallOperateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SmartCallOperate', 'POST', '/', 'json', false, 'json', request);
}

model StartRobotTaskRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scheduleTime?: string(name='ScheduleTime', description='The time scheduled for starting the robocall task, in the yyyy-MM-dd HH:mm:ss format.', example='2019-06-14 14:55:23', position='Query'),
  taskId: long(name='TaskId', description='The unique ID of the robocall task. You can call the [CreateRobotTask](~~CreateRobotTask~~) operation to obtain the task ID.', example='104500****', position='Query'),
}

model StartRobotTaskResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  data?: string(name='Data', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
}

model StartRobotTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartRobotTaskResponseBody(name='body'),
}

/**
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function startRobotTask(request: StartRobotTaskRequest): StartRobotTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartRobotTask', 'POST', '/', 'json', false, 'json', request);
}

model StopCallInConfigRequest {
  number: string(name='Number', description='The China 400 number from which the inbound call to be stopped is transferred.', example='400***', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model StopCallInConfigResponseBody = {
  code?: string(name='Code', description='The response code.', example='OK'),
  data?: boolean(name='Data', description='Indicates whether the inbound call was stopped. Valid values:

*   true: The inbound call was stopped.
*   false: The inbound call failed to be stopped.', example='true'),
  message?: string(name='Message', description='The returned message.', example='test'),
  requestId?: string(name='RequestId', description='The request ID.', example='a78278ff-26bb-48ec-805c-26a0f4c102***'),
}

model StopCallInConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopCallInConfigResponseBody(name='body'),
}

async function stopCallInConfig(request: StopCallInConfigRequest): StopCallInConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopCallInConfig', 'POST', '/', 'json', false, 'json', request);
}

model StopRobotTaskRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: long(name='TaskId', description='The unique ID of the robocall task. You can call the [CreateRobotTask](~~CreateRobotTask~~) operation to obtain the task ID.', example='1045001', position='Query'),
}

model StopRobotTaskResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  data?: string(name='Data', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
}

model StopRobotTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopRobotTaskResponseBody(name='body'),
}

/**
  * After you stop a robocall task, you can call the [StartRobotTask](~~StartRobotTask~~) operation to start it again.
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function stopRobotTask(request: StopRobotTaskRequest): StopRobotTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopRobotTask', 'POST', '/', 'json', false, 'json', request);
}

model SubmitHotlineTransferRegisterRequest {
  agreement: string(name='Agreement', description='The authenticity of the commitment. Valid values:

*   **true**: The commitment is authentic.
*   **false**: The commitment is not authentic.', example='true', position='Query'),
  hotlineNumber: string(name='HotlineNumber', description='The China 400 number.', example='400****', position='Query'),
  operatorIdentityCard: string(name='OperatorIdentityCard', description='The ID card number of the handler.', example='5****************9', position='Query'),
  operatorMail: string(name='OperatorMail', description='The email address of the handler.', example='username@example.com', position='Query'),
  operatorMailVerifyCode?: string(name='OperatorMailVerifyCode', description='The verification code that is received by the mailbox of the handler.', example='1234', position='Query'),
  operatorMobile: string(name='OperatorMobile', description='The mobile phone number of the handler.', example='158****7230', position='Query'),
  operatorMobileVerifyCode: string(name='OperatorMobileVerifyCode', description='The verification code that is received by the mobile phone of the handler.', example='1234', position='Query'),
  operatorName: string(name='OperatorName', description='The name of the handler.', example='A***', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  qualificationId: string(name='QualificationId', description='The qualification ID. You can call the [GetHotlineQualificationByOrder](~~393548~~) operation to obtain the qualification ID.', example='10000004933****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transferPhoneNumberInfos: [ 
    {
      identityCard: string(name='IdentityCard', description='The ID card number of the number owner.', example='500***'),
      phoneNumber: string(name='PhoneNumber', description='The China 400 number that you want to submit for registration.', example='1580000****'),
      phoneNumberOwnerName: string(name='PhoneNumberOwnerName', description='The real name or company name of the number owner.', example='A***'),
    }
  ](name='TransferPhoneNumberInfos', description='The registration information about the China 400 number.', position='Query'),
}

model SubmitHotlineTransferRegisterResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  data?: long(name='Data', description='The registration ID.', example='2258****'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='6086693B-2250-17CE-A41F-06259AB6DB1B'),
}

model SubmitHotlineTransferRegisterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitHotlineTransferRegisterResponseBody(name='body'),
}

/**
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function submitHotlineTransferRegister(request: SubmitHotlineTransferRegisterRequest): SubmitHotlineTransferRegisterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitHotlineTransferRegister', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeVideoFileRequest {
  callId?: string(name='CallId', example='116012354148^10281378****', position='Query'),
  calledNumber: string(name='CalledNumber', example='1590****000', position='Query'),
  mediaType?: string(name='MediaType', example='video', position='Query'),
  outId?: string(name='OutId', example='225869*****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpgradeVideoFileResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message', example='示例值示例值'),
  success?: boolean(name='Success', example='true'),
}

model UpgradeVideoFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeVideoFileResponseBody(name='body'),
}

async function upgradeVideoFile(request: UpgradeVideoFileRequest): UpgradeVideoFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeVideoFile', 'POST', '/', 'json', false, 'json', request);
}

model UploadRobotTaskCalledFileRequest {
  calledNumber: string(name='CalledNumber', description='The called numbers. Separate multiple called numbers with commas (,).

> After you create a robocall task, you must upload called numbers in batches. You can upload up to 300,000 called numbers for each task.', example='1370****000,1370****111', position='Query'),
  id: long(name='Id', description='The unique ID of the robocall task. You can call the [CreateRobotTask](~~CreateRobotTask~~) operation to obtain the ID of the robocall task.', example='1045****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  ttsParam?: string(name='TtsParam', description='The values of the variable in the text-to-speech (TTS) template, in the JSON format. The variable values specified by the TtsParam parameter must match the variable names specified by the TtsParamHead parameter.

*   If all the called numbers carry the same variable values, you can set the value of the number field to **all** and upload only one copy of the variable values.
*   If only some of the called numbers carry the same variable values, you can set the value of the number field to **all** for these called numbers and set the value of the number field and variable values for other called numbers based on your business requirements. The system preferentially selects the values that you set for the called numbers.', example='[{"number":"1370****000","params":["xiaowang","xiaoli","xiaozhou"]}]', position='Query'),
  ttsParamHead?: string(name='TtsParamHead', description='The list of variable names carried in the robocall task, in the JSON format. The TtsParamHead parameter must be used together with the TtsParam parameter.', example='["name1","name2","name3"]', position='Query'),
}

model UploadRobotTaskCalledFileResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](~~112502~~).', example='OK'),
  data?: string(name='Data', description='The unique ID of the robocall task.

You can call the [QueryRobotTaskDetail](~~QueryRobotTaskDetail~~) operation to query the details of the robocall task based on the task ID.', example='10450****'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
}

model UploadRobotTaskCalledFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadRobotTaskCalledFileResponseBody(name='body'),
}

/**
  * ### QPS limits
  * You can call this operation up to 100 times per second per account.
  *
 */
async function uploadRobotTaskCalledFile(request: UploadRobotTaskCalledFileRequest): UploadRobotTaskCalledFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadRobotTaskCalledFile', 'POST', '/', 'json', false, 'json', request);
}

