/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Dyvmsapi';
  @version = '2017-05-25';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddRtcAccountRequest {
  deviceId?: string(name='DeviceId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AddRtcAccountResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  module?: string(name='Module'),
  requestId?: string(name='RequestId'),
}

model AddRtcAccountResponse = {
  headers: map[string]string(name='headers'),
  body: AddRtcAccountResponseBody(name='body'),
}

async function addRtcAccount(request: AddRtcAccountRequest): AddRtcAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddRtcAccount', 'POST', '/', 'json', false, 'json', request);
}

model AddVirtualNumberRelationRequest {
  corpNameList?: string(name='CorpNameList', position='Query'),
  numberList: string(name='NumberList', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNum: string(name='PhoneNum', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeType: int32(name='RouteType', minimum=0, maximum=99999, position='Query'),
}

model AddVirtualNumberRelationResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddVirtualNumberRelationResponse = {
  headers: map[string]string(name='headers'),
  body: AddVirtualNumberRelationResponseBody(name='body'),
}

async function addVirtualNumberRelation(request: AddVirtualNumberRelationRequest): AddVirtualNumberRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddVirtualNumberRelation', 'POST', '/', 'json', false, 'json', request);
}

model BatchRobotSmartCallRequest {
  calledNumber: string(name='CalledNumber', position='Query'),
  calledShowNumber: string(name='CalledShowNumber', position='Query'),
  corpName?: string(name='CorpName', position='Query'),
  dialogId: string(name='DialogId', position='Query'),
  earlyMediaAsr?: boolean(name='EarlyMediaAsr', position='Query'),
  isSelfLine?: boolean(name='IsSelfLine', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scheduleCall?: boolean(name='ScheduleCall', position='Query'),
  scheduleTime?: long(name='ScheduleTime', position='Query'),
  taskName: string(name='TaskName', position='Query'),
  ttsParam?: string(name='TtsParam', position='Query'),
  ttsParamHead?: string(name='TtsParamHead', position='Query'),
}

model BatchRobotSmartCallResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model BatchRobotSmartCallResponse = {
  headers: map[string]string(name='headers'),
  body: BatchRobotSmartCallResponseBody(name='body'),
}

async function batchRobotSmartCall(request: BatchRobotSmartCallRequest): BatchRobotSmartCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchRobotSmartCall', 'POST', '/', 'json', false, 'json', request);
}

model CancelCallRequest {
  callId: string(name='CallId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CancelCallResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model CancelCallResponse = {
  headers: map[string]string(name='headers'),
  body: CancelCallResponseBody(name='body'),
}

async function cancelCall(request: CancelCallRequest): CancelCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelCall', 'POST', '/', 'json', false, 'json', request);
}

model CancelOrderRobotTaskRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: long(name='TaskId', position='Query'),
}

model CancelOrderRobotTaskResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CancelOrderRobotTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CancelOrderRobotTaskResponseBody(name='body'),
}

async function cancelOrderRobotTask(request: CancelOrderRobotTaskRequest): CancelOrderRobotTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelOrderRobotTask', 'POST', '/', 'json', false, 'json', request);
}

model CancelRobotTaskRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId?: long(name='TaskId', position='Query'),
}

model CancelRobotTaskResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CancelRobotTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CancelRobotTaskResponseBody(name='body'),
}

async function cancelRobotTask(request: CancelRobotTaskRequest): CancelRobotTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelRobotTask', 'POST', '/', 'json', false, 'json', request);
}

model ClickToDialRequest {
  asrFlag?: boolean(name='AsrFlag', position='Query'),
  asrModelId?: string(name='AsrModelId', position='Query'),
  calledNumber: string(name='CalledNumber', position='Query'),
  calledShowNumber: string(name='CalledShowNumber', position='Query'),
  callerNumber: string(name='CallerNumber', position='Query'),
  callerShowNumber: string(name='CallerShowNumber', position='Query'),
  outId?: string(name='OutId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  recordFlag?: boolean(name='RecordFlag', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sessionTimeout?: int32(name='SessionTimeout', position='Query'),
}

model ClickToDialResponseBody = {
  callId?: string(name='CallId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ClickToDialResponse = {
  headers: map[string]string(name='headers'),
  body: ClickToDialResponseBody(name='body'),
}

async function clickToDial(request: ClickToDialRequest): ClickToDialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ClickToDial', 'POST', '/', 'json', false, 'json', request);
}

model CreateCallTaskRequest {
  bizType?: string(name='BizType', position='Query'),
  data?: string(name='Data', position='Query'),
  dataType?: string(name='DataType', position='Query'),
  fireTime?: string(name='FireTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resource?: string(name='Resource', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
  scheduleType?: string(name='ScheduleType', position='Query'),
  stopTime?: string(name='StopTime', position='Query'),
  taskName?: string(name='TaskName', position='Query'),
  templateCode?: string(name='TemplateCode', position='Query'),
  templateName?: string(name='TemplateName', position='Query'),
}

model CreateCallTaskResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  requestId?: string(name='RequestId'),
}

model CreateCallTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCallTaskResponseBody(name='body'),
}

async function createCallTask(request: CreateCallTaskRequest): CreateCallTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCallTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateRobotTaskRequest {
  caller: string(name='Caller', position='Query'),
  corpName?: string(name='CorpName', position='Query'),
  dialogId: long(name='DialogId', position='Query'),
  isSelfLine?: boolean(name='IsSelfLine', position='Query'),
  numberStatusIdent: boolean(name='NumberStatusIdent', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  recallInterval?: int32(name='RecallInterval', position='Query'),
  recallStateCodes?: string(name='RecallStateCodes', position='Query'),
  recallTimes?: int32(name='RecallTimes', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  retryType: int32(name='RetryType', position='Query'),
  taskName: string(name='TaskName', position='Query'),
}

model CreateRobotTaskResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateRobotTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRobotTaskResponseBody(name='body'),
}

async function createRobotTask(request: CreateRobotTaskRequest): CreateRobotTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRobotTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRobotTaskRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: long(name='TaskId', position='Query'),
}

model DeleteRobotTaskResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteRobotTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRobotTaskResponseBody(name='body'),
}

async function deleteRobotTask(request: DeleteRobotTaskRequest): DeleteRobotTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRobotTask', 'POST', '/', 'json', false, 'json', request);
}

model ExecuteCallTaskRequest {
  fireTime?: string(name='FireTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status: string(name='Status', position='Query'),
  taskId: long(name='TaskId', minimum=0, maximum=9223372036854775807, position='Query'),
}

model ExecuteCallTaskResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model ExecuteCallTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteCallTaskResponseBody(name='body'),
}

async function executeCallTask(request: ExecuteCallTaskRequest): ExecuteCallTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteCallTask', 'POST', '/', 'json', false, 'json', request);
}

model GetCallInfoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  rtcId: string(name='RtcId', position='Query'),
}

model GetCallInfoResponseBody = {
  code?: string(name='Code'),
  data?: {
    channelId?: string(name='ChannelId'),
    status?: string(name='Status'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetCallInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetCallInfoResponseBody(name='body'),
}

async function getCallInfo(request: GetCallInfoRequest): GetCallInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCallInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetHotlineQualificationByOrderRequest {
  orderId: string(name='OrderId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetHotlineQualificationByOrderResponseBody = {
  code?: string(name='Code'),
  data?: {
    orderId?: string(name='OrderId'),
    qualificationId?: string(name='QualificationId'),
    status?: string(name='Status'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetHotlineQualificationByOrderResponse = {
  headers: map[string]string(name='headers'),
  body: GetHotlineQualificationByOrderResponseBody(name='body'),
}

async function getHotlineQualificationByOrder(request: GetHotlineQualificationByOrderRequest): GetHotlineQualificationByOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHotlineQualificationByOrder', 'POST', '/', 'json', false, 'json', request);
}

model GetMqttTokenRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetMqttTokenResponseBody = {
  code?: string(name='Code'),
  data?: {
    clientId?: string(name='ClientId'),
    expireTime?: string(name='ExpireTime'),
    host?: string(name='Host'),
    instanceId?: string(name='InstanceId'),
    p2pTopic?: string(name='P2pTopic'),
    serverId?: string(name='ServerId'),
    token?: string(name='Token'),
    username?: string(name='Username'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetMqttTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetMqttTokenResponseBody(name='body'),
}

async function getMqttToken(request: GetMqttTokenRequest): GetMqttTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMqttToken', 'POST', '/', 'json', false, 'json', request);
}

model GetRtcTokenRequest {
  deviceId: string(name='DeviceId', position='Query'),
  isCustomAccount?: boolean(name='IsCustomAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  userId: string(name='UserId', position='Query'),
}

model GetRtcTokenResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  module?: string(name='Module'),
  requestId?: string(name='RequestId'),
}

model GetRtcTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetRtcTokenResponseBody(name='body'),
}

async function getRtcToken(request: GetRtcTokenRequest): GetRtcTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRtcToken', 'POST', '/', 'json', false, 'json', request);
}

model GetTokenRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tokenType?: string(name='TokenType', maxLength=9223372036854776000, position='Query'),
}

model GetTokenResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  token?: string(name='Token'),
}

model GetTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetTokenResponseBody(name='body'),
}

async function getToken(request: GetTokenRequest): GetTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetToken', 'POST', '/', 'json', false, 'json', request);
}

model IvrCallRequest {
  byeCode?: string(name='ByeCode', position='Query'),
  byeTtsParams?: string(name='ByeTtsParams', position='Query'),
  calledNumber: string(name='CalledNumber', position='Query'),
  calledShowNumber: string(name='CalledShowNumber', position='Query'),
  menuKeyMap?: [ 
    {
      code?: string(name='Code'),
      key?: string(name='Key'),
      ttsParams?: string(name='TtsParams'),
    }
  ](name='MenuKeyMap', position='Query'),
  outId?: string(name='OutId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  playTimes?: long(name='PlayTimes', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startCode: string(name='StartCode', position='Query'),
  startTtsParams?: string(name='StartTtsParams', position='Query'),
  timeout?: int32(name='Timeout', position='Query'),
}

model IvrCallResponseBody = {
  callId?: string(name='CallId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model IvrCallResponse = {
  headers: map[string]string(name='headers'),
  body: IvrCallResponseBody(name='body'),
}

async function ivrCall(request: IvrCallRequest): IvrCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'IvrCall', 'POST', '/', 'json', false, 'json', request);
}

model ListCallTaskRequest {
  bizType?: string(name='BizType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=0, maximum=9223372036854775807, position='Query'),
  pageSize?: int32(name='PageSize', minimum=0, maximum=9223372036854775807, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', position='Query'),
  taskId?: string(name='TaskId', position='Query'),
  taskName?: string(name='TaskName', position='Query'),
  templateName?: string(name='TemplateName', position='Query'),
}

model ListCallTaskResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      bizType?: string(name='BizType'),
      completeTime?: string(name='CompleteTime'),
      completedCount?: long(name='CompletedCount'),
      completedRate?: int32(name='CompletedRate'),
      data?: string(name='Data'),
      dataType?: string(name='DataType'),
      fireTime?: string(name='FireTime'),
      id?: long(name='Id'),
      resource?: string(name='Resource'),
      status?: string(name='Status'),
      stopTime?: string(name='StopTime'),
      taskName?: string(name='TaskName'),
      templateCode?: string(name='TemplateCode'),
      templateName?: string(name='TemplateName'),
      totalCount?: long(name='TotalCount'),
    }
  ](name='Data'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model ListCallTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ListCallTaskResponseBody(name='body'),
}

async function listCallTask(request: ListCallTaskRequest): ListCallTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCallTask', 'POST', '/', 'json', false, 'json', request);
}

model ListCallTaskDetailRequest {
  calledNum?: string(name='CalledNum', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', position='Query'),
  taskId: long(name='TaskId', minimum=0, maximum=9223372036854775807, position='Query'),
}

model ListCallTaskDetailResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      calledNum?: string(name='CalledNum'),
      caller?: string(name='Caller'),
      duration?: long(name='Duration'),
      id?: long(name='Id'),
      status?: string(name='Status'),
    }
  ](name='Data'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
  totalPage?: long(name='TotalPage'),
}

model ListCallTaskDetailResponse = {
  headers: map[string]string(name='headers'),
  body: ListCallTaskDetailResponseBody(name='body'),
}

async function listCallTaskDetail(request: ListCallTaskDetailRequest): ListCallTaskDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCallTaskDetail', 'POST', '/', 'json', false, 'json', request);
}

model ListHotlineTransferNumberRequest {
  hotlineNumber: string(name='HotlineNumber', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', minimum=0, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, position='Query'),
  qualificationId: string(name='QualificationId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListHotlineTransferNumberResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    total?: long(name='Total'),
    values?: [ 
      {
        hotlineNumber?: string(name='HotlineNumber'),
        identityCard?: string(name='IdentityCard'),
        numberOwnerName?: string(name='NumberOwnerName'),
        phoneNumber?: string(name='PhoneNumber'),
        qualificationId?: string(name='QualificationId'),
        resUniqueCode?: string(name='ResUniqueCode'),
      }
    ](name='Values'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListHotlineTransferNumberResponse = {
  headers: map[string]string(name='headers'),
  body: ListHotlineTransferNumberResponseBody(name='body'),
}

async function listHotlineTransferNumber(request: ListHotlineTransferNumberRequest): ListHotlineTransferNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHotlineTransferNumber', 'POST', '/', 'json', false, 'json', request);
}

model ListHotlineTransferRegisterFileRequest {
  hotlineNumber: string(name='HotlineNumber', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', minimum=0, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=1000, position='Query'),
  qualificationId: string(name='QualificationId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListHotlineTransferRegisterFileResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    total?: long(name='Total'),
    values?: [ 
      {
        agree?: string(name='Agree'),
        corpName?: string(name='CorpName'),
        hotlineNumber?: string(name='HotlineNumber'),
        mngOpIdentityCard?: string(name='MngOpIdentityCard'),
        mngOpMail?: string(name='MngOpMail'),
        mngOpMobile?: string(name='MngOpMobile'),
        mngOpName?: string(name='MngOpName'),
        qualificationId?: string(name='QualificationId'),
        resUniqueCode?: long(name='ResUniqueCode'),
      }
    ](name='Values'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListHotlineTransferRegisterFileResponse = {
  headers: map[string]string(name='headers'),
  body: ListHotlineTransferRegisterFileResponseBody(name='body'),
}

async function listHotlineTransferRegisterFile(request: ListHotlineTransferRegisterFileRequest): ListHotlineTransferRegisterFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHotlineTransferRegisterFile', 'POST', '/', 'json', false, 'json', request);
}

model QueryCallDetailByCallIdRequest {
  callId: string(name='CallId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodId: long(name='ProdId', position='Query'),
  queryDate: long(name='QueryDate', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryCallDetailByCallIdResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryCallDetailByCallIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCallDetailByCallIdResponseBody(name='body'),
}

async function queryCallDetailByCallId(request: QueryCallDetailByCallIdRequest): QueryCallDetailByCallIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCallDetailByCallId', 'POST', '/', 'json', false, 'json', request);
}

model QueryCallDetailByTaskIdRequest {
  callee: string(name='Callee', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  queryDate: long(name='QueryDate', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: string(name='TaskId', position='Query'),
}

model QueryCallDetailByTaskIdResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryCallDetailByTaskIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCallDetailByTaskIdResponseBody(name='body'),
}

async function queryCallDetailByTaskId(request: QueryCallDetailByTaskIdRequest): QueryCallDetailByTaskIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCallDetailByTaskId', 'POST', '/', 'json', false, 'json', request);
}

model QueryCallInPoolTransferConfigRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryCallInPoolTransferConfigResponseBody = {
  code?: string(name='Code'),
  data?: {
    calledRouteMode?: string(name='CalledRouteMode'),
    details?: [ 
      {
        called?: string(name='Called'),
      }
    ](name='Details'),
    gmtCreate?: long(name='GmtCreate'),
    transferTimeout?: string(name='TransferTimeout'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryCallInPoolTransferConfigResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCallInPoolTransferConfigResponseBody(name='body'),
}

async function queryCallInPoolTransferConfig(request: QueryCallInPoolTransferConfigRequest): QueryCallInPoolTransferConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCallInPoolTransferConfig', 'POST', '/', 'json', false, 'json', request);
}

model QueryCallInTransferRecordRequest {
  callInCaller?: string(name='CallInCaller', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo: long(name='PageNo', position='Query'),
  pageSize: long(name='PageSize', position='Query'),
  phoneNumber: string(name='PhoneNumber', position='Query'),
  queryDate: string(name='QueryDate', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryCallInTransferRecordResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNo?: long(name='PageNo'),
    pageSize?: long(name='PageSize'),
    total?: long(name='Total'),
    values?: [ 
      {
        callInCalled?: string(name='CallInCalled'),
        callInCaller?: string(name='CallInCaller'),
        gmtCreate?: long(name='GmtCreate'),
        recordUrl?: string(name='RecordUrl'),
        transferCalled?: string(name='TransferCalled'),
        transferCaller?: string(name='TransferCaller'),
      }
    ](name='Values'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryCallInTransferRecordResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCallInTransferRecordResponseBody(name='body'),
}

async function queryCallInTransferRecord(request: QueryCallInTransferRecordRequest): QueryCallInTransferRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCallInTransferRecord', 'POST', '/', 'json', false, 'json', request);
}

model QueryRobotInfoListRequest {
  auditStatus?: string(name='AuditStatus', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryRobotInfoListResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryRobotInfoListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRobotInfoListResponseBody(name='body'),
}

async function queryRobotInfoList(request: QueryRobotInfoListRequest): QueryRobotInfoListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRobotInfoList', 'POST', '/', 'json', false, 'json', request);
}

model QueryRobotTaskCallDetailRequest {
  callee: string(name='Callee', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  queryDate: long(name='QueryDate', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: long(name='TaskId', position='Query'),
}

model QueryRobotTaskCallDetailResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryRobotTaskCallDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRobotTaskCallDetailResponseBody(name='body'),
}

async function queryRobotTaskCallDetail(request: QueryRobotTaskCallDetailRequest): QueryRobotTaskCallDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRobotTaskCallDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryRobotTaskCallListRequest {
  callResult?: string(name='CallResult', position='Query'),
  called?: string(name='Called', position='Query'),
  dialogCountFrom?: string(name='DialogCountFrom', position='Query'),
  dialogCountTo?: string(name='DialogCountTo', position='Query'),
  durationFrom?: string(name='DurationFrom', position='Query'),
  durationTo?: string(name='DurationTo', position='Query'),
  hangupDirection?: string(name='HangupDirection', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: string(name='TaskId', position='Query'),
}

model QueryRobotTaskCallListResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryRobotTaskCallListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRobotTaskCallListResponseBody(name='body'),
}

async function queryRobotTaskCallList(request: QueryRobotTaskCallListRequest): QueryRobotTaskCallListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRobotTaskCallList', 'POST', '/', 'json', false, 'json', request);
}

model QueryRobotTaskDetailRequest {
  id: long(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryRobotTaskDetailResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryRobotTaskDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRobotTaskDetailResponseBody(name='body'),
}

async function queryRobotTaskDetail(request: QueryRobotTaskDetailRequest): QueryRobotTaskDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRobotTaskDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryRobotTaskListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', position='Query'),
  taskName?: string(name='TaskName', position='Query'),
  time?: string(name='Time', position='Query'),
}

model QueryRobotTaskListResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  pageNo?: string(name='PageNo'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model QueryRobotTaskListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRobotTaskListResponseBody(name='body'),
}

async function queryRobotTaskList(request: QueryRobotTaskListRequest): QueryRobotTaskListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRobotTaskList', 'POST', '/', 'json', false, 'json', request);
}

model QueryRobotv2AllListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryRobotv2AllListResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryRobotv2AllListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRobotv2AllListResponseBody(name='body'),
}

async function queryRobotv2AllList(request: QueryRobotv2AllListRequest): QueryRobotv2AllListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRobotv2AllList', 'POST', '/', 'json', false, 'json', request);
}

model QueryVirtualNumberRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeType?: int32(name='RouteType', position='Query'),
}

model QueryVirtualNumberResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model QueryVirtualNumberResponse = {
  headers: map[string]string(name='headers'),
  body: QueryVirtualNumberResponseBody(name='body'),
}

async function queryVirtualNumber(request: QueryVirtualNumberRequest): QueryVirtualNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryVirtualNumber', 'POST', '/', 'json', false, 'json', request);
}

model QueryVirtualNumberRelationRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  phoneNum?: string(name='PhoneNum', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  qualificationId?: long(name='QualificationId', position='Query'),
  regionNameCity?: string(name='RegionNameCity', position='Query'),
  relatedNum?: string(name='RelatedNum', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeType?: int32(name='RouteType', position='Query'),
  specId?: long(name='SpecId', position='Query'),
}

model QueryVirtualNumberRelationResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model QueryVirtualNumberRelationResponse = {
  headers: map[string]string(name='headers'),
  body: QueryVirtualNumberRelationResponseBody(name='body'),
}

async function queryVirtualNumberRelation(request: QueryVirtualNumberRelationRequest): QueryVirtualNumberRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryVirtualNumberRelation', 'POST', '/', 'json', false, 'json', request);
}

model QueryVoiceFileAuditInfoRequest {
  businessType?: int32(name='BusinessType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  voiceCodes: string(name='VoiceCodes', position='Query'),
}

model QueryVoiceFileAuditInfoResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      auditState?: string(name='AuditState'),
      rejectInfo?: string(name='RejectInfo'),
      voiceCode?: string(name='VoiceCode'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryVoiceFileAuditInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryVoiceFileAuditInfoResponseBody(name='body'),
}

async function queryVoiceFileAuditInfo(request: QueryVoiceFileAuditInfoRequest): QueryVoiceFileAuditInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryVoiceFileAuditInfo', 'POST', '/', 'json', false, 'json', request);
}

model RefreshMqttTokenRequest {
  clientId: string(name='ClientId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RefreshMqttTokenResponseBody = {
  code?: string(name='Code'),
  data?: {
    clientId?: string(name='ClientId'),
    expireTime?: string(name='ExpireTime'),
    host?: string(name='Host'),
    instanceId?: string(name='InstanceId'),
    p2pTopic?: string(name='P2pTopic'),
    serverId?: string(name='ServerId'),
    token?: string(name='Token'),
    username?: string(name='Username'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RefreshMqttTokenResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshMqttTokenResponseBody(name='body'),
}

async function refreshMqttToken(request: RefreshMqttTokenRequest): RefreshMqttTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshMqttToken', 'POST', '/', 'json', false, 'json', request);
}

model SendVerificationRequest {
  bizType: string(name='BizType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  target: string(name='Target', position='Query'),
  verifyType: string(name='VerifyType', position='Query'),
}

model SendVerificationResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SendVerificationResponse = {
  headers: map[string]string(name='headers'),
  body: SendVerificationResponseBody(name='body'),
}

async function sendVerification(request: SendVerificationRequest): SendVerificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendVerification', 'POST', '/', 'json', false, 'json', request);
}

model SetTransferCalleePoolConfigRequest {
  calledRouteMode: string(name='CalledRouteMode', position='Query'),
  details: [ 
    {
      called: string(name='Called'),
      caller?: string(name='Caller'),
    }
  ](name='Details', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', position='Query'),
  qualificationId: string(name='QualificationId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model SetTransferCalleePoolConfigResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SetTransferCalleePoolConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetTransferCalleePoolConfigResponseBody(name='body'),
}

async function setTransferCalleePoolConfig(request: SetTransferCalleePoolConfigRequest): SetTransferCalleePoolConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetTransferCalleePoolConfig', 'POST', '/', 'json', false, 'json', request);
}

model SingleCallByTtsRequest {
  calledNumber: string(name='CalledNumber', position='Query'),
  calledShowNumber?: string(name='CalledShowNumber', position='Query'),
  outId?: string(name='OutId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  playTimes?: int32(name='PlayTimes', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  speed?: int32(name='Speed', position='Query'),
  ttsCode: string(name='TtsCode', position='Query'),
  ttsParam?: string(name='TtsParam', position='Query'),
  volume?: int32(name='Volume', position='Query'),
}

model SingleCallByTtsResponseBody = {
  callId?: string(name='CallId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SingleCallByTtsResponse = {
  headers: map[string]string(name='headers'),
  body: SingleCallByTtsResponseBody(name='body'),
}

async function singleCallByTts(request: SingleCallByTtsRequest): SingleCallByTtsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SingleCallByTts', 'POST', '/', 'json', false, 'json', request);
}

model SingleCallByVoiceRequest {
  calledNumber: string(name='CalledNumber', position='Query'),
  calledShowNumber?: string(name='CalledShowNumber', position='Query'),
  outId?: string(name='OutId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  playTimes?: int32(name='PlayTimes', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  speed?: int32(name='Speed', position='Query'),
  voiceCode: string(name='VoiceCode', position='Query'),
  volume?: int32(name='Volume', position='Query'),
}

model SingleCallByVoiceResponseBody = {
  callId?: string(name='CallId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SingleCallByVoiceResponse = {
  headers: map[string]string(name='headers'),
  body: SingleCallByVoiceResponseBody(name='body'),
}

async function singleCallByVoice(request: SingleCallByVoiceRequest): SingleCallByVoiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SingleCallByVoice', 'POST', '/', 'json', false, 'json', request);
}

model SmartCallRequest {
  actionCodeBreak?: boolean(name='ActionCodeBreak', position='Query'),
  actionCodeTimeBreak?: int32(name='ActionCodeTimeBreak', position='Query'),
  asrBaseId?: string(name='AsrBaseId', position='Query'),
  asrModelId?: string(name='AsrModelId', position='Query'),
  backgroundFileCode?: string(name='BackgroundFileCode', position='Query'),
  backgroundSpeed?: int32(name='BackgroundSpeed', position='Query'),
  backgroundVolume?: int32(name='BackgroundVolume', minimum=-4, maximum=4, position='Query'),
  calledNumber: string(name='CalledNumber', position='Query'),
  calledShowNumber: string(name='CalledShowNumber', position='Query'),
  dynamicId?: string(name='DynamicId', position='Query'),
  earlyMediaAsr?: boolean(name='EarlyMediaAsr', position='Query'),
  enableITN?: boolean(name='EnableITN', position='Query'),
  muteTime?: int32(name='MuteTime', position='Query'),
  outId?: string(name='OutId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pauseTime?: int32(name='PauseTime', position='Query'),
  recordFlag?: boolean(name='RecordFlag', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sessionTimeout?: int32(name='SessionTimeout', position='Query'),
  speed?: int32(name='Speed', position='Query'),
  streamAsr?: int32(name='StreamAsr', minimum=0, maximum=100, position='Query'),
  ttsConf?: boolean(name='TtsConf', position='Query'),
  ttsSpeed?: int32(name='TtsSpeed', position='Query'),
  ttsStyle?: string(name='TtsStyle', position='Query'),
  ttsVolume?: int32(name='TtsVolume', position='Query'),
  voiceCode: string(name='VoiceCode', position='Query'),
  voiceCodeParam?: string(name='VoiceCodeParam', position='Query'),
  volume?: int32(name='Volume', position='Query'),
}

model SmartCallResponseBody = {
  callId?: string(name='CallId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SmartCallResponse = {
  headers: map[string]string(name='headers'),
  body: SmartCallResponseBody(name='body'),
}

async function smartCall(request: SmartCallRequest): SmartCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SmartCall', 'POST', '/', 'json', false, 'json', request);
}

model SmartCallOperateRequest {
  callId: string(name='CallId', position='Query'),
  command: string(name='Command', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  param?: string(name='Param', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model SmartCallOperateResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model SmartCallOperateResponse = {
  headers: map[string]string(name='headers'),
  body: SmartCallOperateResponseBody(name='body'),
}

async function smartCallOperate(request: SmartCallOperateRequest): SmartCallOperateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SmartCallOperate', 'POST', '/', 'json', false, 'json', request);
}

model StartRobotTaskRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scheduleTime?: string(name='ScheduleTime', position='Query'),
  taskId: long(name='TaskId', position='Query'),
}

model StartRobotTaskResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model StartRobotTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StartRobotTaskResponseBody(name='body'),
}

async function startRobotTask(request: StartRobotTaskRequest): StartRobotTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartRobotTask', 'POST', '/', 'json', false, 'json', request);
}

model StopRobotTaskRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: long(name='TaskId', position='Query'),
}

model StopRobotTaskResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model StopRobotTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StopRobotTaskResponseBody(name='body'),
}

async function stopRobotTask(request: StopRobotTaskRequest): StopRobotTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopRobotTask', 'POST', '/', 'json', false, 'json', request);
}

model SubmitHotlineTransferRegisterRequest {
  agreement: string(name='Agreement', position='Query'),
  hotlineNumber: string(name='HotlineNumber', position='Query'),
  operatorIdentityCard: string(name='OperatorIdentityCard', position='Query'),
  operatorMail: string(name='OperatorMail', position='Query'),
  operatorMailVerifyCode?: string(name='OperatorMailVerifyCode', position='Query'),
  operatorMobile: string(name='OperatorMobile', position='Query'),
  operatorMobileVerifyCode: string(name='OperatorMobileVerifyCode', position='Query'),
  operatorName: string(name='OperatorName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  qualificationId: string(name='QualificationId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transferPhoneNumberInfos: [ 
    {
      identityCard: string(name='IdentityCard'),
      phoneNumber: string(name='PhoneNumber'),
      phoneNumberOwnerName: string(name='PhoneNumberOwnerName'),
    }
  ](name='TransferPhoneNumberInfos', position='Query'),
}

model SubmitHotlineTransferRegisterResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SubmitHotlineTransferRegisterResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitHotlineTransferRegisterResponseBody(name='body'),
}

async function submitHotlineTransferRegister(request: SubmitHotlineTransferRegisterRequest): SubmitHotlineTransferRegisterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitHotlineTransferRegister', 'POST', '/', 'json', false, 'json', request);
}

model UploadRobotTaskCalledFileRequest {
  calledNumber: string(name='CalledNumber', position='Query'),
  id: long(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  ttsParam?: string(name='TtsParam', position='Query'),
  ttsParamHead?: string(name='TtsParamHead', position='Query'),
}

model UploadRobotTaskCalledFileResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UploadRobotTaskCalledFileResponse = {
  headers: map[string]string(name='headers'),
  body: UploadRobotTaskCalledFileResponseBody(name='body'),
}

async function uploadRobotTaskCalledFile(request: UploadRobotTaskCalledFileRequest): UploadRobotTaskCalledFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadRobotTaskCalledFile', 'POST', '/', 'json', false, 'json', request);
}

