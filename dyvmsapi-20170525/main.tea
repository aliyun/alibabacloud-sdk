/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('dyvmsapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddRtcAccountRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  deviceId?: string(name='DeviceId'),
}

model AddRtcAccountResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  module?: string(name='Module'),
  code?: string(name='Code'),
}

model AddRtcAccountResponse = {
  headers: map[string]string(name='headers'),
  body: AddRtcAccountResponseBody(name='body'),
}

async function addRtcAccountWithOptions(request: AddRtcAccountRequest, runtime: Util.RuntimeOptions): AddRtcAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddRtcAccount', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addRtcAccount(request: AddRtcAccountRequest): AddRtcAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return addRtcAccountWithOptions(request, runtime);
}

model BatchRobotSmartCallRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  calledShowNumber?: string(name='CalledShowNumber'),
  corpName?: string(name='CorpName'),
  calledNumber?: string(name='CalledNumber'),
  dialogId?: string(name='DialogId'),
  earlyMediaAsr?: boolean(name='EarlyMediaAsr'),
  taskName?: string(name='TaskName'),
  scheduleTime?: long(name='ScheduleTime'),
  scheduleCall?: boolean(name='ScheduleCall'),
  ttsParam?: string(name='TtsParam'),
  ttsParamHead?: string(name='TtsParamHead'),
  isSelfLine?: boolean(name='IsSelfLine'),
}

model BatchRobotSmartCallResponseBody = {
  taskId?: string(name='TaskId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model BatchRobotSmartCallResponse = {
  headers: map[string]string(name='headers'),
  body: BatchRobotSmartCallResponseBody(name='body'),
}

async function batchRobotSmartCallWithOptions(request: BatchRobotSmartCallRequest, runtime: Util.RuntimeOptions): BatchRobotSmartCallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchRobotSmartCall', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchRobotSmartCall(request: BatchRobotSmartCallRequest): BatchRobotSmartCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchRobotSmartCallWithOptions(request, runtime);
}

model BindNumberAndVoipIdRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  phoneNumber?: string(name='PhoneNumber'),
  voipId?: string(name='VoipId'),
}

model BindNumberAndVoipIdResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  module?: string(name='Module'),
  code?: string(name='Code'),
}

model BindNumberAndVoipIdResponse = {
  headers: map[string]string(name='headers'),
  body: BindNumberAndVoipIdResponseBody(name='body'),
}

async function bindNumberAndVoipIdWithOptions(request: BindNumberAndVoipIdRequest, runtime: Util.RuntimeOptions): BindNumberAndVoipIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BindNumberAndVoipId', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function bindNumberAndVoipId(request: BindNumberAndVoipIdRequest): BindNumberAndVoipIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindNumberAndVoipIdWithOptions(request, runtime);
}

model CancelCallRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  callId?: string(name='CallId'),
}

model CancelCallResponseBody = {
  status?: boolean(name='Status'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model CancelCallResponse = {
  headers: map[string]string(name='headers'),
  body: CancelCallResponseBody(name='body'),
}

async function cancelCallWithOptions(request: CancelCallRequest, runtime: Util.RuntimeOptions): CancelCallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelCall', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelCall(request: CancelCallRequest): CancelCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelCallWithOptions(request, runtime);
}

model CancelOrderRobotTaskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  taskId?: long(name='TaskId'),
}

model CancelOrderRobotTaskResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model CancelOrderRobotTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CancelOrderRobotTaskResponseBody(name='body'),
}

async function cancelOrderRobotTaskWithOptions(request: CancelOrderRobotTaskRequest, runtime: Util.RuntimeOptions): CancelOrderRobotTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelOrderRobotTask', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelOrderRobotTask(request: CancelOrderRobotTaskRequest): CancelOrderRobotTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOrderRobotTaskWithOptions(request, runtime);
}

model CancelRobotTaskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  taskId?: long(name='TaskId'),
}

model CancelRobotTaskResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model CancelRobotTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CancelRobotTaskResponseBody(name='body'),
}

async function cancelRobotTaskWithOptions(request: CancelRobotTaskRequest, runtime: Util.RuntimeOptions): CancelRobotTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelRobotTask', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelRobotTask(request: CancelRobotTaskRequest): CancelRobotTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelRobotTaskWithOptions(request, runtime);
}

model ClickToDialRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  callerShowNumber?: string(name='CallerShowNumber'),
  callerNumber?: string(name='CallerNumber'),
  calledShowNumber?: string(name='CalledShowNumber'),
  calledNumber?: string(name='CalledNumber'),
  recordFlag?: boolean(name='RecordFlag'),
  asrFlag?: boolean(name='AsrFlag'),
  sessionTimeout?: int32(name='SessionTimeout'),
  asrModelId?: string(name='AsrModelId'),
  outId?: string(name='OutId'),
}

model ClickToDialResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  callId?: string(name='CallId'),
  code?: string(name='Code'),
}

model ClickToDialResponse = {
  headers: map[string]string(name='headers'),
  body: ClickToDialResponseBody(name='body'),
}

async function clickToDialWithOptions(request: ClickToDialRequest, runtime: Util.RuntimeOptions): ClickToDialResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ClickToDial', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function clickToDial(request: ClickToDialRequest): ClickToDialResponse {
  var runtime = new Util.RuntimeOptions{};
  return clickToDialWithOptions(request, runtime);
}

model CreateRobotTaskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  taskName?: string(name='TaskName'),
  dialogId?: long(name='DialogId'),
  corpName?: string(name='CorpName'),
  caller?: string(name='Caller'),
  numberStatusIdent?: boolean(name='NumberStatusIdent'),
  retryType?: int32(name='RetryType'),
  recallStateCodes?: string(name='RecallStateCodes'),
  recallTimes?: int32(name='RecallTimes'),
  recallInterval?: int32(name='RecallInterval'),
  isSelfLine?: boolean(name='IsSelfLine'),
}

model CreateRobotTaskResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model CreateRobotTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRobotTaskResponseBody(name='body'),
}

async function createRobotTaskWithOptions(request: CreateRobotTaskRequest, runtime: Util.RuntimeOptions): CreateRobotTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRobotTask', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRobotTask(request: CreateRobotTaskRequest): CreateRobotTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRobotTaskWithOptions(request, runtime);
}

model DeleteRobotTaskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  taskId?: long(name='TaskId'),
}

model DeleteRobotTaskResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model DeleteRobotTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRobotTaskResponseBody(name='body'),
}

async function deleteRobotTaskWithOptions(request: DeleteRobotTaskRequest, runtime: Util.RuntimeOptions): DeleteRobotTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteRobotTask', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteRobotTask(request: DeleteRobotTaskRequest): DeleteRobotTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRobotTaskWithOptions(request, runtime);
}

model DescribeRecordDataRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  prodCode?: string(name='ProdCode'),
  accountType?: string(name='AccountType'),
  accountId?: string(name='AccountId'),
  acid?: string(name='Acid'),
  secLevel?: int32(name='SecLevel'),
}

model DescribeRecordDataResponseBody = {
  acid?: string(name='Acid'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  ossLink?: string(name='OssLink'),
  agentId?: string(name='AgentId'),
  code?: string(name='Code'),
}

model DescribeRecordDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecordDataResponseBody(name='body'),
}

async function describeRecordDataWithOptions(request: DescribeRecordDataRequest, runtime: Util.RuntimeOptions): DescribeRecordDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRecordData', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRecordData(request: DescribeRecordDataRequest): DescribeRecordDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecordDataWithOptions(request, runtime);
}

model DoRtcNumberAuthRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  phoneNumber?: string(name='PhoneNumber'),
}

model DoRtcNumberAuthResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  module?: string(name='Module'),
  code?: string(name='Code'),
}

model DoRtcNumberAuthResponse = {
  headers: map[string]string(name='headers'),
  body: DoRtcNumberAuthResponseBody(name='body'),
}

async function doRtcNumberAuthWithOptions(request: DoRtcNumberAuthRequest, runtime: Util.RuntimeOptions): DoRtcNumberAuthResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DoRtcNumberAuth', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function doRtcNumberAuth(request: DoRtcNumberAuthRequest): DoRtcNumberAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  return doRtcNumberAuthWithOptions(request, runtime);
}

model GetRtcTokenRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
  isCustomAccount?: boolean(name='IsCustomAccount'),
}

model GetRtcTokenResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  module?: string(name='Module'),
  code?: string(name='Code'),
}

model GetRtcTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetRtcTokenResponseBody(name='body'),
}

async function getRtcTokenWithOptions(request: GetRtcTokenRequest, runtime: Util.RuntimeOptions): GetRtcTokenResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetRtcToken', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getRtcToken(request: GetRtcTokenRequest): GetRtcTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRtcTokenWithOptions(request, runtime);
}

model IvrCallRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  calledShowNumber?: string(name='CalledShowNumber'),
  calledNumber?: string(name='CalledNumber'),
  startCode?: string(name='StartCode'),
  startTtsParams?: string(name='StartTtsParams'),
  playTimes?: long(name='PlayTimes'),
  byeCode?: string(name='ByeCode'),
  byeTtsParams?: string(name='ByeTtsParams'),
  timeout?: int32(name='Timeout'),
  outId?: string(name='OutId'),
  menuKeyMap?: [ 
    {
      key?: string(name='Key'),
      ttsParams?: string(name='TtsParams'),
      code?: string(name='Code'),
    }
  ](name='MenuKeyMap'),
}

model IvrCallResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  callId?: string(name='CallId'),
  code?: string(name='Code'),
}

model IvrCallResponse = {
  headers: map[string]string(name='headers'),
  body: IvrCallResponseBody(name='body'),
}

async function ivrCallWithOptions(request: IvrCallRequest, runtime: Util.RuntimeOptions): IvrCallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('IvrCall', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function ivrCall(request: IvrCallRequest): IvrCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return ivrCallWithOptions(request, runtime);
}

model ListOrderedNumbersRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  prodCode?: string(name='ProdCode'),
}

model ListOrderedNumbersResponseBody = {
  numbers?: [ string ](name='Numbers'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model ListOrderedNumbersResponse = {
  headers: map[string]string(name='headers'),
  body: ListOrderedNumbersResponseBody(name='body'),
}

async function listOrderedNumbersWithOptions(request: ListOrderedNumbersRequest, runtime: Util.RuntimeOptions): ListOrderedNumbersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListOrderedNumbers', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listOrderedNumbers(request: ListOrderedNumbersRequest): ListOrderedNumbersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOrderedNumbersWithOptions(request, runtime);
}

model ListOutboundStrategiesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  prodCode?: string(name='ProdCode'),
  buId?: long(name='BuId'),
  keyword?: string(name='Keyword'),
}

model ListOutboundStrategiesResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  outboundStrategies?: [ 
    {
      status?: int32(name='Status'),
      successRate?: int32(name='SuccessRate'),
      process?: int32(name='Process'),
      gmtModifiedStr?: string(name='GmtModifiedStr'),
      outboundNum?: string(name='OutboundNum'),
      modifierId?: long(name='ModifierId'),
      sceneName?: string(name='SceneName'),
      creatorId?: long(name='CreatorId'),
      robotName?: string(name='RobotName'),
      modifierName?: string(name='ModifierName'),
      resourceAllocation?: int32(name='ResourceAllocation'),
      extAttr?: string(name='ExtAttr'),
      numType?: int32(name='NumType'),
      buId?: long(name='BuId'),
      robotId?: string(name='RobotId'),
      creatorName?: string(name='CreatorName'),
      departmentId?: long(name='DepartmentId'),
      robotType?: int32(name='RobotType'),
      ruleCode?: long(name='RuleCode'),
      name?: string(name='name'),
      gmtCreateStr?: string(name='GmtCreateStr'),
      id?: long(name='Id'),
    }
  ](name='OutboundStrategies'),
  code?: string(name='Code'),
}

model ListOutboundStrategiesResponse = {
  headers: map[string]string(name='headers'),
  body: ListOutboundStrategiesResponseBody(name='body'),
}

async function listOutboundStrategiesWithOptions(request: ListOutboundStrategiesRequest, runtime: Util.RuntimeOptions): ListOutboundStrategiesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListOutboundStrategies', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listOutboundStrategies(request: ListOutboundStrategiesRequest): ListOutboundStrategiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOutboundStrategiesWithOptions(request, runtime);
}

model ListRobotTaskCallsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  taskId?: string(name='TaskId'),
  durationFrom?: string(name='DurationFrom'),
  durationTo?: string(name='DurationTo'),
  dialogCountFrom?: string(name='DialogCountFrom'),
  dialogCountTo?: string(name='DialogCountTo'),
  hangupDirection?: string(name='HangupDirection'),
  callResult?: string(name='CallResult'),
  called?: string(name='Called'),
}

model ListRobotTaskCallsResponseBody = {
  totalCount?: string(name='TotalCount'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  pageSize?: string(name='PageSize'),
  data?: string(name='Data'),
  pageNo?: string(name='PageNo'),
  code?: string(name='Code'),
}

model ListRobotTaskCallsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRobotTaskCallsResponseBody(name='body'),
}

async function listRobotTaskCallsWithOptions(request: ListRobotTaskCallsRequest, runtime: Util.RuntimeOptions): ListRobotTaskCallsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListRobotTaskCalls', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listRobotTaskCalls(request: ListRobotTaskCallsRequest): ListRobotTaskCallsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRobotTaskCallsWithOptions(request, runtime);
}

model QueryCallDetailByCallIdRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  callId?: string(name='CallId'),
  prodId?: long(name='ProdId'),
  queryDate?: long(name='QueryDate'),
}

model QueryCallDetailByCallIdResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model QueryCallDetailByCallIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCallDetailByCallIdResponseBody(name='body'),
}

async function queryCallDetailByCallIdWithOptions(request: QueryCallDetailByCallIdRequest, runtime: Util.RuntimeOptions): QueryCallDetailByCallIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryCallDetailByCallId', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryCallDetailByCallId(request: QueryCallDetailByCallIdRequest): QueryCallDetailByCallIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCallDetailByCallIdWithOptions(request, runtime);
}

model QueryCallDetailByTaskIdRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  taskId?: string(name='TaskId'),
  queryDate?: long(name='QueryDate'),
  callee?: string(name='Callee'),
}

model QueryCallDetailByTaskIdResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model QueryCallDetailByTaskIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCallDetailByTaskIdResponseBody(name='body'),
}

async function queryCallDetailByTaskIdWithOptions(request: QueryCallDetailByTaskIdRequest, runtime: Util.RuntimeOptions): QueryCallDetailByTaskIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryCallDetailByTaskId', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryCallDetailByTaskId(request: QueryCallDetailByTaskIdRequest): QueryCallDetailByTaskIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCallDetailByTaskIdWithOptions(request, runtime);
}

model QueryRobotInfoListRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  auditStatus?: string(name='AuditStatus'),
}

model QueryRobotInfoListResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model QueryRobotInfoListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRobotInfoListResponseBody(name='body'),
}

async function queryRobotInfoListWithOptions(request: QueryRobotInfoListRequest, runtime: Util.RuntimeOptions): QueryRobotInfoListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryRobotInfoList', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryRobotInfoList(request: QueryRobotInfoListRequest): QueryRobotInfoListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRobotInfoListWithOptions(request, runtime);
}

model QueryRobotTaskCallDetailRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  taskId?: long(name='TaskId'),
  callee?: string(name='Callee'),
  queryDate?: long(name='QueryDate'),
}

model QueryRobotTaskCallDetailResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model QueryRobotTaskCallDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRobotTaskCallDetailResponseBody(name='body'),
}

async function queryRobotTaskCallDetailWithOptions(request: QueryRobotTaskCallDetailRequest, runtime: Util.RuntimeOptions): QueryRobotTaskCallDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryRobotTaskCallDetail', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryRobotTaskCallDetail(request: QueryRobotTaskCallDetailRequest): QueryRobotTaskCallDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRobotTaskCallDetailWithOptions(request, runtime);
}

model QueryRobotTaskCallListRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  taskId?: string(name='TaskId'),
  durationFrom?: string(name='DurationFrom'),
  durationTo?: string(name='DurationTo'),
  dialogCountFrom?: string(name='DialogCountFrom'),
  dialogCountTo?: string(name='DialogCountTo'),
  hangupDirection?: string(name='HangupDirection'),
  callResult?: string(name='CallResult'),
  called?: string(name='Called'),
}

model QueryRobotTaskCallListResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model QueryRobotTaskCallListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRobotTaskCallListResponseBody(name='body'),
}

async function queryRobotTaskCallListWithOptions(request: QueryRobotTaskCallListRequest, runtime: Util.RuntimeOptions): QueryRobotTaskCallListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryRobotTaskCallList', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryRobotTaskCallList(request: QueryRobotTaskCallListRequest): QueryRobotTaskCallListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRobotTaskCallListWithOptions(request, runtime);
}

model QueryRobotTaskDetailRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  id?: long(name='Id'),
}

model QueryRobotTaskDetailResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model QueryRobotTaskDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRobotTaskDetailResponseBody(name='body'),
}

async function queryRobotTaskDetailWithOptions(request: QueryRobotTaskDetailRequest, runtime: Util.RuntimeOptions): QueryRobotTaskDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryRobotTaskDetail', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryRobotTaskDetail(request: QueryRobotTaskDetailRequest): QueryRobotTaskDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRobotTaskDetailWithOptions(request, runtime);
}

model QueryRobotTaskListRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  taskName?: string(name='TaskName'),
  status?: string(name='Status'),
  time?: string(name='Time'),
  pageSize?: int32(name='PageSize'),
  pageNo?: int32(name='PageNo'),
}

model QueryRobotTaskListResponseBody = {
  totalCount?: string(name='TotalCount'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  pageSize?: string(name='PageSize'),
  data?: string(name='Data'),
  pageNo?: string(name='PageNo'),
  code?: string(name='Code'),
}

model QueryRobotTaskListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRobotTaskListResponseBody(name='body'),
}

async function queryRobotTaskListWithOptions(request: QueryRobotTaskListRequest, runtime: Util.RuntimeOptions): QueryRobotTaskListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryRobotTaskList', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryRobotTaskList(request: QueryRobotTaskListRequest): QueryRobotTaskListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRobotTaskListWithOptions(request, runtime);
}

model QueryRobotv2AllListRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryRobotv2AllListResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model QueryRobotv2AllListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRobotv2AllListResponseBody(name='body'),
}

async function queryRobotv2AllListWithOptions(request: QueryRobotv2AllListRequest, runtime: Util.RuntimeOptions): QueryRobotv2AllListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryRobotv2AllList', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryRobotv2AllList(request: QueryRobotv2AllListRequest): QueryRobotv2AllListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRobotv2AllListWithOptions(request, runtime);
}

model QueryRtcNumberAuthStatusRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  phoneNumber?: string(name='PhoneNumber'),
}

model QueryRtcNumberAuthStatusResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  module?: string(name='Module'),
  code?: string(name='Code'),
}

model QueryRtcNumberAuthStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRtcNumberAuthStatusResponseBody(name='body'),
}

async function queryRtcNumberAuthStatusWithOptions(request: QueryRtcNumberAuthStatusRequest, runtime: Util.RuntimeOptions): QueryRtcNumberAuthStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryRtcNumberAuthStatus', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryRtcNumberAuthStatus(request: QueryRtcNumberAuthStatusRequest): QueryRtcNumberAuthStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRtcNumberAuthStatusWithOptions(request, runtime);
}

model QueryVoipNumberBindInfosRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  phoneNumber?: string(name='PhoneNumber'),
  voipId?: string(name='VoipId'),
}

model QueryVoipNumberBindInfosResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  module?: string(name='Module'),
  code?: string(name='Code'),
}

model QueryVoipNumberBindInfosResponse = {
  headers: map[string]string(name='headers'),
  body: QueryVoipNumberBindInfosResponseBody(name='body'),
}

async function queryVoipNumberBindInfosWithOptions(request: QueryVoipNumberBindInfosRequest, runtime: Util.RuntimeOptions): QueryVoipNumberBindInfosResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryVoipNumberBindInfos', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryVoipNumberBindInfos(request: QueryVoipNumberBindInfosRequest): QueryVoipNumberBindInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryVoipNumberBindInfosWithOptions(request, runtime);
}

model ReportVoipProblemsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  channelId?: string(name='ChannelId'),
  voipId?: string(name='VoipId'),
  title?: string(name='Title'),
  desc?: string(name='Desc'),
}

model ReportVoipProblemsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  module?: string(name='Module'),
  code?: string(name='Code'),
}

model ReportVoipProblemsResponse = {
  headers: map[string]string(name='headers'),
  body: ReportVoipProblemsResponseBody(name='body'),
}

async function reportVoipProblemsWithOptions(request: ReportVoipProblemsRequest, runtime: Util.RuntimeOptions): ReportVoipProblemsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReportVoipProblems', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function reportVoipProblems(request: ReportVoipProblemsRequest): ReportVoipProblemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportVoipProblemsWithOptions(request, runtime);
}

model SingleCallByTtsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  calledShowNumber?: string(name='CalledShowNumber'),
  calledNumber?: string(name='CalledNumber'),
  ttsCode?: string(name='TtsCode'),
  ttsParam?: string(name='TtsParam'),
  playTimes?: int32(name='PlayTimes'),
  volume?: int32(name='Volume'),
  speed?: int32(name='Speed'),
  outId?: string(name='OutId'),
}

model SingleCallByTtsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  callId?: string(name='CallId'),
  code?: string(name='Code'),
}

model SingleCallByTtsResponse = {
  headers: map[string]string(name='headers'),
  body: SingleCallByTtsResponseBody(name='body'),
}

async function singleCallByTtsWithOptions(request: SingleCallByTtsRequest, runtime: Util.RuntimeOptions): SingleCallByTtsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SingleCallByTts', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function singleCallByTts(request: SingleCallByTtsRequest): SingleCallByTtsResponse {
  var runtime = new Util.RuntimeOptions{};
  return singleCallByTtsWithOptions(request, runtime);
}

model SingleCallByVoiceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  calledShowNumber?: string(name='CalledShowNumber'),
  calledNumber?: string(name='CalledNumber'),
  voiceCode?: string(name='VoiceCode'),
  playTimes?: int32(name='PlayTimes'),
  volume?: int32(name='Volume'),
  speed?: int32(name='Speed'),
  outId?: string(name='OutId'),
}

model SingleCallByVoiceResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  callId?: string(name='CallId'),
  code?: string(name='Code'),
}

model SingleCallByVoiceResponse = {
  headers: map[string]string(name='headers'),
  body: SingleCallByVoiceResponseBody(name='body'),
}

async function singleCallByVoiceWithOptions(request: SingleCallByVoiceRequest, runtime: Util.RuntimeOptions): SingleCallByVoiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SingleCallByVoice', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function singleCallByVoice(request: SingleCallByVoiceRequest): SingleCallByVoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return singleCallByVoiceWithOptions(request, runtime);
}

model SmartCallRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  calledShowNumber?: string(name='CalledShowNumber'),
  calledNumber?: string(name='CalledNumber'),
  voiceCode?: string(name='VoiceCode'),
  recordFlag?: boolean(name='RecordFlag'),
  volume?: int32(name='Volume'),
  speed?: int32(name='Speed'),
  asrModelId?: string(name='AsrModelId'),
  pauseTime?: int32(name='PauseTime'),
  muteTime?: int32(name='MuteTime'),
  actionCodeBreak?: boolean(name='ActionCodeBreak'),
  outId?: string(name='OutId'),
  dynamicId?: string(name='DynamicId'),
  earlyMediaAsr?: boolean(name='EarlyMediaAsr'),
  voiceCodeParam?: string(name='VoiceCodeParam'),
  sessionTimeout?: int32(name='SessionTimeout'),
  actionCodeTimeBreak?: int32(name='ActionCodeTimeBreak'),
  ttsStyle?: string(name='TtsStyle'),
  ttsVolume?: int32(name='TtsVolume'),
  ttsSpeed?: int32(name='TtsSpeed'),
  ttsConf?: boolean(name='TtsConf'),
  asrBaseId?: string(name='AsrBaseId'),
}

model SmartCallResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  callId?: string(name='CallId'),
  code?: string(name='Code'),
}

model SmartCallResponse = {
  headers: map[string]string(name='headers'),
  body: SmartCallResponseBody(name='body'),
}

async function smartCallWithOptions(request: SmartCallRequest, runtime: Util.RuntimeOptions): SmartCallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SmartCall', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function smartCall(request: SmartCallRequest): SmartCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return smartCallWithOptions(request, runtime);
}

model SmartCallOperateRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  callId?: string(name='CallId'),
  command?: string(name='Command'),
  param?: string(name='Param'),
}

model SmartCallOperateResponseBody = {
  status?: boolean(name='Status'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model SmartCallOperateResponse = {
  headers: map[string]string(name='headers'),
  body: SmartCallOperateResponseBody(name='body'),
}

async function smartCallOperateWithOptions(request: SmartCallOperateRequest, runtime: Util.RuntimeOptions): SmartCallOperateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SmartCallOperate', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function smartCallOperate(request: SmartCallOperateRequest): SmartCallOperateResponse {
  var runtime = new Util.RuntimeOptions{};
  return smartCallOperateWithOptions(request, runtime);
}

model StartMicroOutboundRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  prodCode?: string(name='ProdCode'),
  accountType?: string(name='AccountType'),
  accountId?: string(name='AccountId'),
  commandCode?: string(name='CommandCode'),
  callingNumber?: string(name='CallingNumber'),
  calledNumber?: string(name='CalledNumber'),
  extInfo?: string(name='ExtInfo'),
  appName?: string(name='AppName'),
}

model StartMicroOutboundResponseBody = {
  invokeCreateTime?: string(name='InvokeCreateTime'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  invokeCmdId?: string(name='InvokeCmdId'),
  customerInfo?: string(name='CustomerInfo'),
  code?: string(name='Code'),
}

model StartMicroOutboundResponse = {
  headers: map[string]string(name='headers'),
  body: StartMicroOutboundResponseBody(name='body'),
}

async function startMicroOutboundWithOptions(request: StartMicroOutboundRequest, runtime: Util.RuntimeOptions): StartMicroOutboundResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartMicroOutbound', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startMicroOutbound(request: StartMicroOutboundRequest): StartMicroOutboundResponse {
  var runtime = new Util.RuntimeOptions{};
  return startMicroOutboundWithOptions(request, runtime);
}

model StartRobotTaskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  taskId?: long(name='TaskId'),
  scheduleTime?: string(name='ScheduleTime'),
}

model StartRobotTaskResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model StartRobotTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StartRobotTaskResponseBody(name='body'),
}

async function startRobotTaskWithOptions(request: StartRobotTaskRequest, runtime: Util.RuntimeOptions): StartRobotTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartRobotTask', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startRobotTask(request: StartRobotTaskRequest): StartRobotTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return startRobotTaskWithOptions(request, runtime);
}

model StopRobotTaskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  taskId?: long(name='TaskId'),
}

model StopRobotTaskResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model StopRobotTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StopRobotTaskResponseBody(name='body'),
}

async function stopRobotTaskWithOptions(request: StopRobotTaskRequest, runtime: Util.RuntimeOptions): StopRobotTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopRobotTask', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopRobotTask(request: StopRobotTaskRequest): StopRobotTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopRobotTaskWithOptions(request, runtime);
}

model UnbindNumberAndVoipIdRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  phoneNumber?: string(name='PhoneNumber'),
  voipId?: string(name='VoipId'),
}

model UnbindNumberAndVoipIdResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  module?: string(name='Module'),
  code?: string(name='Code'),
}

model UnbindNumberAndVoipIdResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindNumberAndVoipIdResponseBody(name='body'),
}

async function unbindNumberAndVoipIdWithOptions(request: UnbindNumberAndVoipIdRequest, runtime: Util.RuntimeOptions): UnbindNumberAndVoipIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnbindNumberAndVoipId', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unbindNumberAndVoipId(request: UnbindNumberAndVoipIdRequest): UnbindNumberAndVoipIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindNumberAndVoipIdWithOptions(request, runtime);
}

model UndoRtcNumberAuthRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  phoneNumber?: string(name='PhoneNumber'),
}

model UndoRtcNumberAuthResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  module?: string(name='Module'),
  code?: string(name='Code'),
}

model UndoRtcNumberAuthResponse = {
  headers: map[string]string(name='headers'),
  body: UndoRtcNumberAuthResponseBody(name='body'),
}

async function undoRtcNumberAuthWithOptions(request: UndoRtcNumberAuthRequest, runtime: Util.RuntimeOptions): UndoRtcNumberAuthResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UndoRtcNumberAuth', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function undoRtcNumberAuth(request: UndoRtcNumberAuthRequest): UndoRtcNumberAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  return undoRtcNumberAuthWithOptions(request, runtime);
}

model UploadRobotTaskCalledFileRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  id?: long(name='Id'),
  calledNumber?: string(name='CalledNumber'),
  ttsParam?: string(name='TtsParam'),
  ttsParamHead?: string(name='TtsParamHead'),
}

model UploadRobotTaskCalledFileResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model UploadRobotTaskCalledFileResponse = {
  headers: map[string]string(name='headers'),
  body: UploadRobotTaskCalledFileResponseBody(name='body'),
}

async function uploadRobotTaskCalledFileWithOptions(request: UploadRobotTaskCalledFileRequest, runtime: Util.RuntimeOptions): UploadRobotTaskCalledFileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UploadRobotTaskCalledFile', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function uploadRobotTaskCalledFile(request: UploadRobotTaskCalledFileRequest): UploadRobotTaskCalledFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadRobotTaskCalledFileWithOptions(request, runtime);
}

model VoipAddAccountRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  deviceId?: string(name='DeviceId'),
}

model VoipAddAccountResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  module?: string(name='Module'),
  code?: string(name='Code'),
}

model VoipAddAccountResponse = {
  headers: map[string]string(name='headers'),
  body: VoipAddAccountResponseBody(name='body'),
}

async function voipAddAccountWithOptions(request: VoipAddAccountRequest, runtime: Util.RuntimeOptions): VoipAddAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('VoipAddAccount', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function voipAddAccount(request: VoipAddAccountRequest): VoipAddAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return voipAddAccountWithOptions(request, runtime);
}

model VoipGetTokenRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  voipId?: string(name='VoipId'),
  deviceId?: string(name='DeviceId'),
  isCustomAccount?: boolean(name='IsCustomAccount'),
}

model VoipGetTokenResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  module?: string(name='Module'),
  code?: string(name='Code'),
}

model VoipGetTokenResponse = {
  headers: map[string]string(name='headers'),
  body: VoipGetTokenResponseBody(name='body'),
}

async function voipGetTokenWithOptions(request: VoipGetTokenRequest, runtime: Util.RuntimeOptions): VoipGetTokenResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('VoipGetToken', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function voipGetToken(request: VoipGetTokenRequest): VoipGetTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return voipGetTokenWithOptions(request, runtime);
}

