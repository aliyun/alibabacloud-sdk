/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('dyvmsapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddRtcAccountRequest {
  deviceId?: string(name='DeviceId'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AddRtcAccountResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  module?: string(name='Module'),
  requestId?: string(name='RequestId'),
}

model AddRtcAccountResponse = {
  headers: map[string]string(name='headers'),
  body: AddRtcAccountResponseBody(name='body'),
}

async function addRtcAccountWithOptions(request: AddRtcAccountRequest, runtime: Util.RuntimeOptions): AddRtcAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddRtcAccount',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addRtcAccount(request: AddRtcAccountRequest): AddRtcAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return addRtcAccountWithOptions(request, runtime);
}

model AddVirtualNumberRelationRequest {
  corpNameList?: string(name='CorpNameList'),
  numberList?: string(name='NumberList'),
  ownerId?: long(name='OwnerId'),
  phoneNum?: string(name='PhoneNum'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeType?: int32(name='RouteType'),
}

model AddVirtualNumberRelationResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddVirtualNumberRelationResponse = {
  headers: map[string]string(name='headers'),
  body: AddVirtualNumberRelationResponseBody(name='body'),
}

async function addVirtualNumberRelationWithOptions(request: AddVirtualNumberRelationRequest, runtime: Util.RuntimeOptions): AddVirtualNumberRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.corpNameList)) {
    query['CorpNameList'] = request.corpNameList;
  }
  if (!Util.isUnset(request.numberList)) {
    query['NumberList'] = request.numberList;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNum)) {
    query['PhoneNum'] = request.phoneNum;
  }
  if (!Util.isUnset(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeType)) {
    query['RouteType'] = request.routeType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddVirtualNumberRelation',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addVirtualNumberRelation(request: AddVirtualNumberRelationRequest): AddVirtualNumberRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return addVirtualNumberRelationWithOptions(request, runtime);
}

model BatchRobotSmartCallRequest {
  calledNumber?: string(name='CalledNumber'),
  calledShowNumber?: string(name='CalledShowNumber'),
  corpName?: string(name='CorpName'),
  dialogId?: string(name='DialogId'),
  earlyMediaAsr?: boolean(name='EarlyMediaAsr'),
  isSelfLine?: boolean(name='IsSelfLine'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  scheduleCall?: boolean(name='ScheduleCall'),
  scheduleTime?: long(name='ScheduleTime'),
  taskName?: string(name='TaskName'),
  ttsParam?: string(name='TtsParam'),
  ttsParamHead?: string(name='TtsParamHead'),
}

model BatchRobotSmartCallResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model BatchRobotSmartCallResponse = {
  headers: map[string]string(name='headers'),
  body: BatchRobotSmartCallResponseBody(name='body'),
}

async function batchRobotSmartCallWithOptions(request: BatchRobotSmartCallRequest, runtime: Util.RuntimeOptions): BatchRobotSmartCallResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.calledNumber)) {
    query['CalledNumber'] = request.calledNumber;
  }
  if (!Util.isUnset(request.calledShowNumber)) {
    query['CalledShowNumber'] = request.calledShowNumber;
  }
  if (!Util.isUnset(request.corpName)) {
    query['CorpName'] = request.corpName;
  }
  if (!Util.isUnset(request.dialogId)) {
    query['DialogId'] = request.dialogId;
  }
  if (!Util.isUnset(request.earlyMediaAsr)) {
    query['EarlyMediaAsr'] = request.earlyMediaAsr;
  }
  if (!Util.isUnset(request.isSelfLine)) {
    query['IsSelfLine'] = request.isSelfLine;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.scheduleCall)) {
    query['ScheduleCall'] = request.scheduleCall;
  }
  if (!Util.isUnset(request.scheduleTime)) {
    query['ScheduleTime'] = request.scheduleTime;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.ttsParam)) {
    query['TtsParam'] = request.ttsParam;
  }
  if (!Util.isUnset(request.ttsParamHead)) {
    query['TtsParamHead'] = request.ttsParamHead;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchRobotSmartCall',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchRobotSmartCall(request: BatchRobotSmartCallRequest): BatchRobotSmartCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchRobotSmartCallWithOptions(request, runtime);
}

model CancelCallRequest {
  callId?: string(name='CallId'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CancelCallResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model CancelCallResponse = {
  headers: map[string]string(name='headers'),
  body: CancelCallResponseBody(name='body'),
}

async function cancelCallWithOptions(request: CancelCallRequest, runtime: Util.RuntimeOptions): CancelCallResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.callId)) {
    query['CallId'] = request.callId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelCall',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelCall(request: CancelCallRequest): CancelCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelCallWithOptions(request, runtime);
}

model CancelOrderRobotTaskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  taskId?: long(name='TaskId'),
}

model CancelOrderRobotTaskResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CancelOrderRobotTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CancelOrderRobotTaskResponseBody(name='body'),
}

async function cancelOrderRobotTaskWithOptions(request: CancelOrderRobotTaskRequest, runtime: Util.RuntimeOptions): CancelOrderRobotTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelOrderRobotTask',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelOrderRobotTask(request: CancelOrderRobotTaskRequest): CancelOrderRobotTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOrderRobotTaskWithOptions(request, runtime);
}

model CancelRobotTaskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  taskId?: long(name='TaskId'),
}

model CancelRobotTaskResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CancelRobotTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CancelRobotTaskResponseBody(name='body'),
}

async function cancelRobotTaskWithOptions(request: CancelRobotTaskRequest, runtime: Util.RuntimeOptions): CancelRobotTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelRobotTask',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelRobotTask(request: CancelRobotTaskRequest): CancelRobotTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelRobotTaskWithOptions(request, runtime);
}

model ClickToDialRequest {
  asrFlag?: boolean(name='AsrFlag'),
  asrModelId?: string(name='AsrModelId'),
  calledNumber?: string(name='CalledNumber'),
  calledShowNumber?: string(name='CalledShowNumber'),
  callerNumber?: string(name='CallerNumber'),
  callerShowNumber?: string(name='CallerShowNumber'),
  outId?: string(name='OutId'),
  ownerId?: long(name='OwnerId'),
  recordFlag?: boolean(name='RecordFlag'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sessionTimeout?: int32(name='SessionTimeout'),
}

model ClickToDialResponseBody = {
  callId?: string(name='CallId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ClickToDialResponse = {
  headers: map[string]string(name='headers'),
  body: ClickToDialResponseBody(name='body'),
}

async function clickToDialWithOptions(request: ClickToDialRequest, runtime: Util.RuntimeOptions): ClickToDialResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asrFlag)) {
    query['AsrFlag'] = request.asrFlag;
  }
  if (!Util.isUnset(request.asrModelId)) {
    query['AsrModelId'] = request.asrModelId;
  }
  if (!Util.isUnset(request.calledNumber)) {
    query['CalledNumber'] = request.calledNumber;
  }
  if (!Util.isUnset(request.calledShowNumber)) {
    query['CalledShowNumber'] = request.calledShowNumber;
  }
  if (!Util.isUnset(request.callerNumber)) {
    query['CallerNumber'] = request.callerNumber;
  }
  if (!Util.isUnset(request.callerShowNumber)) {
    query['CallerShowNumber'] = request.callerShowNumber;
  }
  if (!Util.isUnset(request.outId)) {
    query['OutId'] = request.outId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.recordFlag)) {
    query['RecordFlag'] = request.recordFlag;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sessionTimeout)) {
    query['SessionTimeout'] = request.sessionTimeout;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ClickToDial',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function clickToDial(request: ClickToDialRequest): ClickToDialResponse {
  var runtime = new Util.RuntimeOptions{};
  return clickToDialWithOptions(request, runtime);
}

model CreateCallTaskRequest {
  bizType?: string(name='BizType'),
  data?: string(name='Data'),
  dataType?: string(name='DataType'),
  fireTime?: string(name='FireTime'),
  ownerId?: long(name='OwnerId'),
  resource?: string(name='Resource'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
  scheduleType?: string(name='ScheduleType'),
  stopTime?: string(name='StopTime'),
  taskName?: string(name='TaskName'),
  templateCode?: string(name='TemplateCode'),
  templateName?: string(name='TemplateName'),
}

model CreateCallTaskResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  requestId?: string(name='RequestId'),
}

model CreateCallTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCallTaskResponseBody(name='body'),
}

async function createCallTaskWithOptions(request: CreateCallTaskRequest, runtime: Util.RuntimeOptions): CreateCallTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.data)) {
    query['Data'] = request.data;
  }
  if (!Util.isUnset(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!Util.isUnset(request.fireTime)) {
    query['FireTime'] = request.fireTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.scheduleType)) {
    query['ScheduleType'] = request.scheduleType;
  }
  if (!Util.isUnset(request.stopTime)) {
    query['StopTime'] = request.stopTime;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCallTask',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCallTask(request: CreateCallTaskRequest): CreateCallTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCallTaskWithOptions(request, runtime);
}

model CreateRobotTaskRequest {
  caller?: string(name='Caller'),
  corpName?: string(name='CorpName'),
  dialogId?: long(name='DialogId'),
  isSelfLine?: boolean(name='IsSelfLine'),
  numberStatusIdent?: boolean(name='NumberStatusIdent'),
  ownerId?: long(name='OwnerId'),
  recallInterval?: int32(name='RecallInterval'),
  recallStateCodes?: string(name='RecallStateCodes'),
  recallTimes?: int32(name='RecallTimes'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  retryType?: int32(name='RetryType'),
  taskName?: string(name='TaskName'),
}

model CreateRobotTaskResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateRobotTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRobotTaskResponseBody(name='body'),
}

async function createRobotTaskWithOptions(request: CreateRobotTaskRequest, runtime: Util.RuntimeOptions): CreateRobotTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.caller)) {
    query['Caller'] = request.caller;
  }
  if (!Util.isUnset(request.corpName)) {
    query['CorpName'] = request.corpName;
  }
  if (!Util.isUnset(request.dialogId)) {
    query['DialogId'] = request.dialogId;
  }
  if (!Util.isUnset(request.isSelfLine)) {
    query['IsSelfLine'] = request.isSelfLine;
  }
  if (!Util.isUnset(request.numberStatusIdent)) {
    query['NumberStatusIdent'] = request.numberStatusIdent;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.recallInterval)) {
    query['RecallInterval'] = request.recallInterval;
  }
  if (!Util.isUnset(request.recallStateCodes)) {
    query['RecallStateCodes'] = request.recallStateCodes;
  }
  if (!Util.isUnset(request.recallTimes)) {
    query['RecallTimes'] = request.recallTimes;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.retryType)) {
    query['RetryType'] = request.retryType;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRobotTask',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRobotTask(request: CreateRobotTaskRequest): CreateRobotTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRobotTaskWithOptions(request, runtime);
}

model DeleteRobotTaskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  taskId?: long(name='TaskId'),
}

model DeleteRobotTaskResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteRobotTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRobotTaskResponseBody(name='body'),
}

async function deleteRobotTaskWithOptions(request: DeleteRobotTaskRequest, runtime: Util.RuntimeOptions): DeleteRobotTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRobotTask',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRobotTask(request: DeleteRobotTaskRequest): DeleteRobotTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRobotTaskWithOptions(request, runtime);
}

model ExecuteCallTaskRequest {
  fireTime?: string(name='FireTime'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
  taskId?: long(name='TaskId'),
}

model ExecuteCallTaskResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model ExecuteCallTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteCallTaskResponseBody(name='body'),
}

async function executeCallTaskWithOptions(request: ExecuteCallTaskRequest, runtime: Util.RuntimeOptions): ExecuteCallTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fireTime)) {
    query['FireTime'] = request.fireTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExecuteCallTask',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function executeCallTask(request: ExecuteCallTaskRequest): ExecuteCallTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeCallTaskWithOptions(request, runtime);
}

model GetCallInfoRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  rtcId?: string(name='RtcId'),
}

model GetCallInfoResponseBody = {
  code?: string(name='Code'),
  data?: {
    channelId?: string(name='ChannelId'),
    status?: string(name='Status'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetCallInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetCallInfoResponseBody(name='body'),
}

async function getCallInfoWithOptions(request: GetCallInfoRequest, runtime: Util.RuntimeOptions): GetCallInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.rtcId)) {
    query['RtcId'] = request.rtcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCallInfo',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCallInfo(request: GetCallInfoRequest): GetCallInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCallInfoWithOptions(request, runtime);
}

model GetHotlineQualificationByOrderRequest {
  orderId?: string(name='OrderId'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetHotlineQualificationByOrderResponseBody = {
  code?: string(name='Code'),
  data?: {
    orderId?: string(name='OrderId'),
    qualificationId?: string(name='QualificationId'),
    status?: string(name='Status'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetHotlineQualificationByOrderResponse = {
  headers: map[string]string(name='headers'),
  body: GetHotlineQualificationByOrderResponseBody(name='body'),
}

async function getHotlineQualificationByOrderWithOptions(request: GetHotlineQualificationByOrderRequest, runtime: Util.RuntimeOptions): GetHotlineQualificationByOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotlineQualificationByOrder',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHotlineQualificationByOrder(request: GetHotlineQualificationByOrderRequest): GetHotlineQualificationByOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHotlineQualificationByOrderWithOptions(request, runtime);
}

model GetMqttTokenRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetMqttTokenResponseBody = {
  code?: string(name='Code'),
  data?: {
    clientId?: string(name='ClientId'),
    expireTime?: string(name='ExpireTime'),
    host?: string(name='Host'),
    instanceId?: string(name='InstanceId'),
    p2pTopic?: string(name='P2pTopic'),
    serverId?: string(name='ServerId'),
    token?: string(name='Token'),
    username?: string(name='Username'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetMqttTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetMqttTokenResponseBody(name='body'),
}

async function getMqttTokenWithOptions(request: GetMqttTokenRequest, runtime: Util.RuntimeOptions): GetMqttTokenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMqttToken',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMqttToken(request: GetMqttTokenRequest): GetMqttTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMqttTokenWithOptions(request, runtime);
}

model GetRtcTokenRequest {
  deviceId?: string(name='DeviceId'),
  isCustomAccount?: boolean(name='IsCustomAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  userId?: string(name='UserId'),
}

model GetRtcTokenResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  module?: string(name='Module'),
  requestId?: string(name='RequestId'),
}

model GetRtcTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetRtcTokenResponseBody(name='body'),
}

async function getRtcTokenWithOptions(request: GetRtcTokenRequest, runtime: Util.RuntimeOptions): GetRtcTokenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.isCustomAccount)) {
    query['IsCustomAccount'] = request.isCustomAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRtcToken',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRtcToken(request: GetRtcTokenRequest): GetRtcTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRtcTokenWithOptions(request, runtime);
}

model GetTokenRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tokenType?: string(name='TokenType'),
}

model GetTokenResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  token?: string(name='Token'),
}

model GetTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetTokenResponseBody(name='body'),
}

async function getTokenWithOptions(request: GetTokenRequest, runtime: Util.RuntimeOptions): GetTokenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tokenType)) {
    query['TokenType'] = request.tokenType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetToken',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getToken(request: GetTokenRequest): GetTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTokenWithOptions(request, runtime);
}

model IvrCallRequest {
  byeCode?: string(name='ByeCode'),
  byeTtsParams?: string(name='ByeTtsParams'),
  calledNumber?: string(name='CalledNumber'),
  calledShowNumber?: string(name='CalledShowNumber'),
  menuKeyMap?: [ 
    {
      code?: string(name='Code'),
      key?: string(name='Key'),
      ttsParams?: string(name='TtsParams'),
    }
  ](name='MenuKeyMap'),
  outId?: string(name='OutId'),
  ownerId?: long(name='OwnerId'),
  playTimes?: long(name='PlayTimes'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startCode?: string(name='StartCode'),
  startTtsParams?: string(name='StartTtsParams'),
  timeout?: int32(name='Timeout'),
}

model IvrCallResponseBody = {
  callId?: string(name='CallId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model IvrCallResponse = {
  headers: map[string]string(name='headers'),
  body: IvrCallResponseBody(name='body'),
}

async function ivrCallWithOptions(request: IvrCallRequest, runtime: Util.RuntimeOptions): IvrCallResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.byeCode)) {
    query['ByeCode'] = request.byeCode;
  }
  if (!Util.isUnset(request.byeTtsParams)) {
    query['ByeTtsParams'] = request.byeTtsParams;
  }
  if (!Util.isUnset(request.calledNumber)) {
    query['CalledNumber'] = request.calledNumber;
  }
  if (!Util.isUnset(request.calledShowNumber)) {
    query['CalledShowNumber'] = request.calledShowNumber;
  }
  if (!Util.isUnset(request.menuKeyMap)) {
    query['MenuKeyMap'] = request.menuKeyMap;
  }
  if (!Util.isUnset(request.outId)) {
    query['OutId'] = request.outId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.playTimes)) {
    query['PlayTimes'] = request.playTimes;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startCode)) {
    query['StartCode'] = request.startCode;
  }
  if (!Util.isUnset(request.startTtsParams)) {
    query['StartTtsParams'] = request.startTtsParams;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IvrCall',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function ivrCall(request: IvrCallRequest): IvrCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return ivrCallWithOptions(request, runtime);
}

model ListCallTaskRequest {
  bizType?: string(name='BizType'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
  taskId?: string(name='TaskId'),
  taskName?: string(name='TaskName'),
  templateName?: string(name='TemplateName'),
}

model ListCallTaskResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      bizType?: string(name='BizType'),
      completeTime?: string(name='CompleteTime'),
      completedCount?: long(name='CompletedCount'),
      completedRate?: int32(name='CompletedRate'),
      data?: string(name='Data'),
      dataType?: string(name='DataType'),
      fireTime?: string(name='FireTime'),
      id?: long(name='Id'),
      resource?: string(name='Resource'),
      status?: string(name='Status'),
      stopTime?: string(name='StopTime'),
      taskName?: string(name='TaskName'),
      templateCode?: string(name='TemplateCode'),
      templateName?: string(name='TemplateName'),
      totalCount?: long(name='TotalCount'),
    }
  ](name='Data'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model ListCallTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ListCallTaskResponseBody(name='body'),
}

async function listCallTaskWithOptions(request: ListCallTaskRequest, runtime: Util.RuntimeOptions): ListCallTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCallTask',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCallTask(request: ListCallTaskRequest): ListCallTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCallTaskWithOptions(request, runtime);
}

model ListCallTaskDetailRequest {
  calledNum?: string(name='CalledNum'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
  taskId?: long(name='TaskId'),
}

model ListCallTaskDetailResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      calledNum?: string(name='CalledNum'),
      caller?: string(name='Caller'),
      duration?: long(name='Duration'),
      id?: long(name='Id'),
      status?: string(name='Status'),
    }
  ](name='Data'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
  totalPage?: long(name='TotalPage'),
}

model ListCallTaskDetailResponse = {
  headers: map[string]string(name='headers'),
  body: ListCallTaskDetailResponseBody(name='body'),
}

async function listCallTaskDetailWithOptions(request: ListCallTaskDetailRequest, runtime: Util.RuntimeOptions): ListCallTaskDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.calledNum)) {
    query['CalledNum'] = request.calledNum;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCallTaskDetail',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCallTaskDetail(request: ListCallTaskDetailRequest): ListCallTaskDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCallTaskDetailWithOptions(request, runtime);
}

model ListHotlineTransferNumberRequest {
  hotlineNumber?: string(name='HotlineNumber'),
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  qualificationId?: string(name='QualificationId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListHotlineTransferNumberResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    total?: long(name='Total'),
    values?: [ 
      {
        hotlineNumber?: string(name='HotlineNumber'),
        identityCard?: string(name='IdentityCard'),
        numberOwnerName?: string(name='NumberOwnerName'),
        phoneNumber?: string(name='PhoneNumber'),
        qualificationId?: string(name='QualificationId'),
        resUniqueCode?: string(name='ResUniqueCode'),
      }
    ](name='Values'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListHotlineTransferNumberResponse = {
  headers: map[string]string(name='headers'),
  body: ListHotlineTransferNumberResponseBody(name='body'),
}

async function listHotlineTransferNumberWithOptions(request: ListHotlineTransferNumberRequest, runtime: Util.RuntimeOptions): ListHotlineTransferNumberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.hotlineNumber)) {
    query['HotlineNumber'] = request.hotlineNumber;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.qualificationId)) {
    query['QualificationId'] = request.qualificationId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHotlineTransferNumber',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHotlineTransferNumber(request: ListHotlineTransferNumberRequest): ListHotlineTransferNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHotlineTransferNumberWithOptions(request, runtime);
}

model ListHotlineTransferRegisterFileRequest {
  hotlineNumber?: string(name='HotlineNumber'),
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  qualificationId?: string(name='QualificationId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListHotlineTransferRegisterFileResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    total?: long(name='Total'),
    values?: [ 
      {
        agree?: string(name='Agree'),
        corpName?: string(name='CorpName'),
        hotlineNumber?: string(name='HotlineNumber'),
        mngOpIdentityCard?: string(name='MngOpIdentityCard'),
        mngOpMail?: string(name='MngOpMail'),
        mngOpMobile?: string(name='MngOpMobile'),
        mngOpName?: string(name='MngOpName'),
        qualificationId?: string(name='QualificationId'),
        resUniqueCode?: long(name='ResUniqueCode'),
      }
    ](name='Values'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListHotlineTransferRegisterFileResponse = {
  headers: map[string]string(name='headers'),
  body: ListHotlineTransferRegisterFileResponseBody(name='body'),
}

async function listHotlineTransferRegisterFileWithOptions(request: ListHotlineTransferRegisterFileRequest, runtime: Util.RuntimeOptions): ListHotlineTransferRegisterFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.hotlineNumber)) {
    query['HotlineNumber'] = request.hotlineNumber;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.qualificationId)) {
    query['QualificationId'] = request.qualificationId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHotlineTransferRegisterFile',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHotlineTransferRegisterFile(request: ListHotlineTransferRegisterFileRequest): ListHotlineTransferRegisterFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHotlineTransferRegisterFileWithOptions(request, runtime);
}

model QueryCallDetailByCallIdRequest {
  callId?: string(name='CallId'),
  ownerId?: long(name='OwnerId'),
  prodId?: long(name='ProdId'),
  queryDate?: long(name='QueryDate'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryCallDetailByCallIdResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryCallDetailByCallIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCallDetailByCallIdResponseBody(name='body'),
}

async function queryCallDetailByCallIdWithOptions(request: QueryCallDetailByCallIdRequest, runtime: Util.RuntimeOptions): QueryCallDetailByCallIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.callId)) {
    query['CallId'] = request.callId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.prodId)) {
    query['ProdId'] = request.prodId;
  }
  if (!Util.isUnset(request.queryDate)) {
    query['QueryDate'] = request.queryDate;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryCallDetailByCallId',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCallDetailByCallId(request: QueryCallDetailByCallIdRequest): QueryCallDetailByCallIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCallDetailByCallIdWithOptions(request, runtime);
}

model QueryCallDetailByTaskIdRequest {
  callee?: string(name='Callee'),
  ownerId?: long(name='OwnerId'),
  queryDate?: long(name='QueryDate'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  taskId?: string(name='TaskId'),
}

model QueryCallDetailByTaskIdResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryCallDetailByTaskIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCallDetailByTaskIdResponseBody(name='body'),
}

async function queryCallDetailByTaskIdWithOptions(request: QueryCallDetailByTaskIdRequest, runtime: Util.RuntimeOptions): QueryCallDetailByTaskIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.callee)) {
    query['Callee'] = request.callee;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.queryDate)) {
    query['QueryDate'] = request.queryDate;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryCallDetailByTaskId',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCallDetailByTaskId(request: QueryCallDetailByTaskIdRequest): QueryCallDetailByTaskIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCallDetailByTaskIdWithOptions(request, runtime);
}

model QueryCallInPoolTransferConfigRequest {
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryCallInPoolTransferConfigResponseBody = {
  code?: string(name='Code'),
  data?: {
    calledRouteMode?: string(name='CalledRouteMode'),
    details?: [ 
      {
        called?: string(name='Called'),
      }
    ](name='Details'),
    gmtCreate?: long(name='GmtCreate'),
    transferTimeout?: string(name='TransferTimeout'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryCallInPoolTransferConfigResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCallInPoolTransferConfigResponseBody(name='body'),
}

async function queryCallInPoolTransferConfigWithOptions(request: QueryCallInPoolTransferConfigRequest, runtime: Util.RuntimeOptions): QueryCallInPoolTransferConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryCallInPoolTransferConfig',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCallInPoolTransferConfig(request: QueryCallInPoolTransferConfigRequest): QueryCallInPoolTransferConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCallInPoolTransferConfigWithOptions(request, runtime);
}

model QueryCallInTransferRecordRequest {
  callInCaller?: string(name='CallInCaller'),
  ownerId?: long(name='OwnerId'),
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
  phoneNumber?: string(name='PhoneNumber'),
  queryDate?: string(name='QueryDate'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryCallInTransferRecordResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNo?: long(name='PageNo'),
    pageSize?: long(name='PageSize'),
    total?: long(name='Total'),
    values?: [ 
      {
        callInCalled?: string(name='CallInCalled'),
        callInCaller?: string(name='CallInCaller'),
        gmtCreate?: long(name='GmtCreate'),
        recordUrl?: string(name='RecordUrl'),
        transferCalled?: string(name='TransferCalled'),
        transferCaller?: string(name='TransferCaller'),
      }
    ](name='Values'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryCallInTransferRecordResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCallInTransferRecordResponseBody(name='body'),
}

async function queryCallInTransferRecordWithOptions(request: QueryCallInTransferRecordRequest, runtime: Util.RuntimeOptions): QueryCallInTransferRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.callInCaller)) {
    query['CallInCaller'] = request.callInCaller;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.queryDate)) {
    query['QueryDate'] = request.queryDate;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryCallInTransferRecord',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCallInTransferRecord(request: QueryCallInTransferRecordRequest): QueryCallInTransferRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCallInTransferRecordWithOptions(request, runtime);
}

model QueryRobotInfoListRequest {
  auditStatus?: string(name='AuditStatus'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryRobotInfoListResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryRobotInfoListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRobotInfoListResponseBody(name='body'),
}

async function queryRobotInfoListWithOptions(request: QueryRobotInfoListRequest, runtime: Util.RuntimeOptions): QueryRobotInfoListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.auditStatus)) {
    query['AuditStatus'] = request.auditStatus;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryRobotInfoList',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRobotInfoList(request: QueryRobotInfoListRequest): QueryRobotInfoListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRobotInfoListWithOptions(request, runtime);
}

model QueryRobotTaskCallDetailRequest {
  callee?: string(name='Callee'),
  ownerId?: long(name='OwnerId'),
  queryDate?: long(name='QueryDate'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  taskId?: long(name='TaskId'),
}

model QueryRobotTaskCallDetailResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryRobotTaskCallDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRobotTaskCallDetailResponseBody(name='body'),
}

async function queryRobotTaskCallDetailWithOptions(request: QueryRobotTaskCallDetailRequest, runtime: Util.RuntimeOptions): QueryRobotTaskCallDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.callee)) {
    query['Callee'] = request.callee;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.queryDate)) {
    query['QueryDate'] = request.queryDate;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryRobotTaskCallDetail',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRobotTaskCallDetail(request: QueryRobotTaskCallDetailRequest): QueryRobotTaskCallDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRobotTaskCallDetailWithOptions(request, runtime);
}

model QueryRobotTaskCallListRequest {
  callResult?: string(name='CallResult'),
  called?: string(name='Called'),
  dialogCountFrom?: string(name='DialogCountFrom'),
  dialogCountTo?: string(name='DialogCountTo'),
  durationFrom?: string(name='DurationFrom'),
  durationTo?: string(name='DurationTo'),
  hangupDirection?: string(name='HangupDirection'),
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  taskId?: string(name='TaskId'),
}

model QueryRobotTaskCallListResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryRobotTaskCallListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRobotTaskCallListResponseBody(name='body'),
}

async function queryRobotTaskCallListWithOptions(request: QueryRobotTaskCallListRequest, runtime: Util.RuntimeOptions): QueryRobotTaskCallListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.callResult)) {
    query['CallResult'] = request.callResult;
  }
  if (!Util.isUnset(request.called)) {
    query['Called'] = request.called;
  }
  if (!Util.isUnset(request.dialogCountFrom)) {
    query['DialogCountFrom'] = request.dialogCountFrom;
  }
  if (!Util.isUnset(request.dialogCountTo)) {
    query['DialogCountTo'] = request.dialogCountTo;
  }
  if (!Util.isUnset(request.durationFrom)) {
    query['DurationFrom'] = request.durationFrom;
  }
  if (!Util.isUnset(request.durationTo)) {
    query['DurationTo'] = request.durationTo;
  }
  if (!Util.isUnset(request.hangupDirection)) {
    query['HangupDirection'] = request.hangupDirection;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryRobotTaskCallList',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRobotTaskCallList(request: QueryRobotTaskCallListRequest): QueryRobotTaskCallListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRobotTaskCallListWithOptions(request, runtime);
}

model QueryRobotTaskDetailRequest {
  id?: long(name='Id'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryRobotTaskDetailResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryRobotTaskDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRobotTaskDetailResponseBody(name='body'),
}

async function queryRobotTaskDetailWithOptions(request: QueryRobotTaskDetailRequest, runtime: Util.RuntimeOptions): QueryRobotTaskDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryRobotTaskDetail',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRobotTaskDetail(request: QueryRobotTaskDetailRequest): QueryRobotTaskDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRobotTaskDetailWithOptions(request, runtime);
}

model QueryRobotTaskListRequest {
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
  taskName?: string(name='TaskName'),
  time?: string(name='Time'),
}

model QueryRobotTaskListResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  pageNo?: string(name='PageNo'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model QueryRobotTaskListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRobotTaskListResponseBody(name='body'),
}

async function queryRobotTaskListWithOptions(request: QueryRobotTaskListRequest, runtime: Util.RuntimeOptions): QueryRobotTaskListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.time)) {
    query['Time'] = request.time;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryRobotTaskList',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRobotTaskList(request: QueryRobotTaskListRequest): QueryRobotTaskListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRobotTaskListWithOptions(request, runtime);
}

model QueryRobotv2AllListRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryRobotv2AllListResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryRobotv2AllListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRobotv2AllListResponseBody(name='body'),
}

async function queryRobotv2AllListWithOptions(request: QueryRobotv2AllListRequest, runtime: Util.RuntimeOptions): QueryRobotv2AllListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryRobotv2AllList',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRobotv2AllList(request: QueryRobotv2AllListRequest): QueryRobotv2AllListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRobotv2AllListWithOptions(request, runtime);
}

model QueryVirtualNumberRequest {
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeType?: int32(name='RouteType'),
}

model QueryVirtualNumberResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model QueryVirtualNumberResponse = {
  headers: map[string]string(name='headers'),
  body: QueryVirtualNumberResponseBody(name='body'),
}

async function queryVirtualNumberWithOptions(request: QueryVirtualNumberRequest, runtime: Util.RuntimeOptions): QueryVirtualNumberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeType)) {
    query['RouteType'] = request.routeType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryVirtualNumber',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryVirtualNumber(request: QueryVirtualNumberRequest): QueryVirtualNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryVirtualNumberWithOptions(request, runtime);
}

model QueryVirtualNumberRelationRequest {
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  phoneNum?: string(name='PhoneNum'),
  prodCode?: string(name='ProdCode'),
  qualificationId?: long(name='QualificationId'),
  regionNameCity?: string(name='RegionNameCity'),
  relatedNum?: string(name='RelatedNum'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeType?: int32(name='RouteType'),
  specId?: long(name='SpecId'),
}

model QueryVirtualNumberRelationResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model QueryVirtualNumberRelationResponse = {
  headers: map[string]string(name='headers'),
  body: QueryVirtualNumberRelationResponseBody(name='body'),
}

async function queryVirtualNumberRelationWithOptions(request: QueryVirtualNumberRelationRequest, runtime: Util.RuntimeOptions): QueryVirtualNumberRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.phoneNum)) {
    query['PhoneNum'] = request.phoneNum;
  }
  if (!Util.isUnset(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!Util.isUnset(request.qualificationId)) {
    query['QualificationId'] = request.qualificationId;
  }
  if (!Util.isUnset(request.regionNameCity)) {
    query['RegionNameCity'] = request.regionNameCity;
  }
  if (!Util.isUnset(request.relatedNum)) {
    query['RelatedNum'] = request.relatedNum;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeType)) {
    query['RouteType'] = request.routeType;
  }
  if (!Util.isUnset(request.specId)) {
    query['SpecId'] = request.specId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryVirtualNumberRelation',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryVirtualNumberRelation(request: QueryVirtualNumberRelationRequest): QueryVirtualNumberRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryVirtualNumberRelationWithOptions(request, runtime);
}

model QueryVoiceFileAuditInfoRequest {
  businessType?: int32(name='BusinessType'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  voiceCodes?: string(name='VoiceCodes'),
}

model QueryVoiceFileAuditInfoResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      auditState?: string(name='AuditState'),
      rejectInfo?: string(name='RejectInfo'),
      voiceCode?: string(name='VoiceCode'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryVoiceFileAuditInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryVoiceFileAuditInfoResponseBody(name='body'),
}

async function queryVoiceFileAuditInfoWithOptions(request: QueryVoiceFileAuditInfoRequest, runtime: Util.RuntimeOptions): QueryVoiceFileAuditInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.voiceCodes)) {
    query['VoiceCodes'] = request.voiceCodes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryVoiceFileAuditInfo',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryVoiceFileAuditInfo(request: QueryVoiceFileAuditInfoRequest): QueryVoiceFileAuditInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryVoiceFileAuditInfoWithOptions(request, runtime);
}

model RefreshMqttTokenRequest {
  clientId?: string(name='ClientId'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model RefreshMqttTokenResponseBody = {
  code?: string(name='Code'),
  data?: {
    clientId?: string(name='ClientId'),
    expireTime?: string(name='ExpireTime'),
    host?: string(name='Host'),
    instanceId?: string(name='InstanceId'),
    p2pTopic?: string(name='P2pTopic'),
    serverId?: string(name='ServerId'),
    token?: string(name='Token'),
    username?: string(name='Username'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RefreshMqttTokenResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshMqttTokenResponseBody(name='body'),
}

async function refreshMqttTokenWithOptions(request: RefreshMqttTokenRequest, runtime: Util.RuntimeOptions): RefreshMqttTokenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RefreshMqttToken',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function refreshMqttToken(request: RefreshMqttTokenRequest): RefreshMqttTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshMqttTokenWithOptions(request, runtime);
}

model SendVerificationRequest {
  bizType?: string(name='BizType'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  target?: string(name='Target'),
  verifyType?: string(name='VerifyType'),
}

model SendVerificationResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SendVerificationResponse = {
  headers: map[string]string(name='headers'),
  body: SendVerificationResponseBody(name='body'),
}

async function sendVerificationWithOptions(request: SendVerificationRequest, runtime: Util.RuntimeOptions): SendVerificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  if (!Util.isUnset(request.verifyType)) {
    query['VerifyType'] = request.verifyType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SendVerification',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendVerification(request: SendVerificationRequest): SendVerificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendVerificationWithOptions(request, runtime);
}

model SetTransferCalleePoolConfigRequest {
  calledRouteMode?: string(name='CalledRouteMode'),
  details?: [ 
    {
      called?: string(name='Called'),
      caller?: string(name='Caller'),
    }
  ](name='Details'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber'),
  qualificationId?: string(name='QualificationId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model SetTransferCalleePoolConfigResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SetTransferCalleePoolConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetTransferCalleePoolConfigResponseBody(name='body'),
}

async function setTransferCalleePoolConfigWithOptions(request: SetTransferCalleePoolConfigRequest, runtime: Util.RuntimeOptions): SetTransferCalleePoolConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.calledRouteMode)) {
    query['CalledRouteMode'] = request.calledRouteMode;
  }
  if (!Util.isUnset(request.details)) {
    query['Details'] = request.details;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.qualificationId)) {
    query['QualificationId'] = request.qualificationId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetTransferCalleePoolConfig',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setTransferCalleePoolConfig(request: SetTransferCalleePoolConfigRequest): SetTransferCalleePoolConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setTransferCalleePoolConfigWithOptions(request, runtime);
}

model SingleCallByTtsRequest {
  calledNumber?: string(name='CalledNumber'),
  calledShowNumber?: string(name='CalledShowNumber'),
  outId?: string(name='OutId'),
  ownerId?: long(name='OwnerId'),
  playTimes?: int32(name='PlayTimes'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  speed?: int32(name='Speed'),
  ttsCode?: string(name='TtsCode'),
  ttsParam?: string(name='TtsParam'),
  volume?: int32(name='Volume'),
}

model SingleCallByTtsResponseBody = {
  callId?: string(name='CallId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SingleCallByTtsResponse = {
  headers: map[string]string(name='headers'),
  body: SingleCallByTtsResponseBody(name='body'),
}

async function singleCallByTtsWithOptions(request: SingleCallByTtsRequest, runtime: Util.RuntimeOptions): SingleCallByTtsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.calledNumber)) {
    query['CalledNumber'] = request.calledNumber;
  }
  if (!Util.isUnset(request.calledShowNumber)) {
    query['CalledShowNumber'] = request.calledShowNumber;
  }
  if (!Util.isUnset(request.outId)) {
    query['OutId'] = request.outId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.playTimes)) {
    query['PlayTimes'] = request.playTimes;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.speed)) {
    query['Speed'] = request.speed;
  }
  if (!Util.isUnset(request.ttsCode)) {
    query['TtsCode'] = request.ttsCode;
  }
  if (!Util.isUnset(request.ttsParam)) {
    query['TtsParam'] = request.ttsParam;
  }
  if (!Util.isUnset(request.volume)) {
    query['Volume'] = request.volume;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SingleCallByTts',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function singleCallByTts(request: SingleCallByTtsRequest): SingleCallByTtsResponse {
  var runtime = new Util.RuntimeOptions{};
  return singleCallByTtsWithOptions(request, runtime);
}

model SingleCallByVoiceRequest {
  calledNumber?: string(name='CalledNumber'),
  calledShowNumber?: string(name='CalledShowNumber'),
  outId?: string(name='OutId'),
  ownerId?: long(name='OwnerId'),
  playTimes?: int32(name='PlayTimes'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  speed?: int32(name='Speed'),
  voiceCode?: string(name='VoiceCode'),
  volume?: int32(name='Volume'),
}

model SingleCallByVoiceResponseBody = {
  callId?: string(name='CallId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SingleCallByVoiceResponse = {
  headers: map[string]string(name='headers'),
  body: SingleCallByVoiceResponseBody(name='body'),
}

async function singleCallByVoiceWithOptions(request: SingleCallByVoiceRequest, runtime: Util.RuntimeOptions): SingleCallByVoiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.calledNumber)) {
    query['CalledNumber'] = request.calledNumber;
  }
  if (!Util.isUnset(request.calledShowNumber)) {
    query['CalledShowNumber'] = request.calledShowNumber;
  }
  if (!Util.isUnset(request.outId)) {
    query['OutId'] = request.outId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.playTimes)) {
    query['PlayTimes'] = request.playTimes;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.speed)) {
    query['Speed'] = request.speed;
  }
  if (!Util.isUnset(request.voiceCode)) {
    query['VoiceCode'] = request.voiceCode;
  }
  if (!Util.isUnset(request.volume)) {
    query['Volume'] = request.volume;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SingleCallByVoice',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function singleCallByVoice(request: SingleCallByVoiceRequest): SingleCallByVoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return singleCallByVoiceWithOptions(request, runtime);
}

model SmartCallRequest {
  actionCodeBreak?: boolean(name='ActionCodeBreak'),
  actionCodeTimeBreak?: int32(name='ActionCodeTimeBreak'),
  asrBaseId?: string(name='AsrBaseId'),
  asrModelId?: string(name='AsrModelId'),
  backgroundFileCode?: string(name='BackgroundFileCode'),
  backgroundSpeed?: int32(name='BackgroundSpeed'),
  backgroundVolume?: int32(name='BackgroundVolume'),
  calledNumber?: string(name='CalledNumber'),
  calledShowNumber?: string(name='CalledShowNumber'),
  dynamicId?: string(name='DynamicId'),
  earlyMediaAsr?: boolean(name='EarlyMediaAsr'),
  enableITN?: boolean(name='EnableITN'),
  muteTime?: int32(name='MuteTime'),
  outId?: string(name='OutId'),
  ownerId?: long(name='OwnerId'),
  pauseTime?: int32(name='PauseTime'),
  recordFlag?: boolean(name='RecordFlag'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sessionTimeout?: int32(name='SessionTimeout'),
  speed?: int32(name='Speed'),
  streamAsr?: int32(name='StreamAsr'),
  ttsConf?: boolean(name='TtsConf'),
  ttsSpeed?: int32(name='TtsSpeed'),
  ttsStyle?: string(name='TtsStyle'),
  ttsVolume?: int32(name='TtsVolume'),
  voiceCode?: string(name='VoiceCode'),
  voiceCodeParam?: string(name='VoiceCodeParam'),
  volume?: int32(name='Volume'),
}

model SmartCallResponseBody = {
  callId?: string(name='CallId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SmartCallResponse = {
  headers: map[string]string(name='headers'),
  body: SmartCallResponseBody(name='body'),
}

async function smartCallWithOptions(request: SmartCallRequest, runtime: Util.RuntimeOptions): SmartCallResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actionCodeBreak)) {
    query['ActionCodeBreak'] = request.actionCodeBreak;
  }
  if (!Util.isUnset(request.actionCodeTimeBreak)) {
    query['ActionCodeTimeBreak'] = request.actionCodeTimeBreak;
  }
  if (!Util.isUnset(request.asrBaseId)) {
    query['AsrBaseId'] = request.asrBaseId;
  }
  if (!Util.isUnset(request.asrModelId)) {
    query['AsrModelId'] = request.asrModelId;
  }
  if (!Util.isUnset(request.backgroundFileCode)) {
    query['BackgroundFileCode'] = request.backgroundFileCode;
  }
  if (!Util.isUnset(request.backgroundSpeed)) {
    query['BackgroundSpeed'] = request.backgroundSpeed;
  }
  if (!Util.isUnset(request.backgroundVolume)) {
    query['BackgroundVolume'] = request.backgroundVolume;
  }
  if (!Util.isUnset(request.calledNumber)) {
    query['CalledNumber'] = request.calledNumber;
  }
  if (!Util.isUnset(request.calledShowNumber)) {
    query['CalledShowNumber'] = request.calledShowNumber;
  }
  if (!Util.isUnset(request.dynamicId)) {
    query['DynamicId'] = request.dynamicId;
  }
  if (!Util.isUnset(request.earlyMediaAsr)) {
    query['EarlyMediaAsr'] = request.earlyMediaAsr;
  }
  if (!Util.isUnset(request.enableITN)) {
    query['EnableITN'] = request.enableITN;
  }
  if (!Util.isUnset(request.muteTime)) {
    query['MuteTime'] = request.muteTime;
  }
  if (!Util.isUnset(request.outId)) {
    query['OutId'] = request.outId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pauseTime)) {
    query['PauseTime'] = request.pauseTime;
  }
  if (!Util.isUnset(request.recordFlag)) {
    query['RecordFlag'] = request.recordFlag;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sessionTimeout)) {
    query['SessionTimeout'] = request.sessionTimeout;
  }
  if (!Util.isUnset(request.speed)) {
    query['Speed'] = request.speed;
  }
  if (!Util.isUnset(request.streamAsr)) {
    query['StreamAsr'] = request.streamAsr;
  }
  if (!Util.isUnset(request.ttsConf)) {
    query['TtsConf'] = request.ttsConf;
  }
  if (!Util.isUnset(request.ttsSpeed)) {
    query['TtsSpeed'] = request.ttsSpeed;
  }
  if (!Util.isUnset(request.ttsStyle)) {
    query['TtsStyle'] = request.ttsStyle;
  }
  if (!Util.isUnset(request.ttsVolume)) {
    query['TtsVolume'] = request.ttsVolume;
  }
  if (!Util.isUnset(request.voiceCode)) {
    query['VoiceCode'] = request.voiceCode;
  }
  if (!Util.isUnset(request.voiceCodeParam)) {
    query['VoiceCodeParam'] = request.voiceCodeParam;
  }
  if (!Util.isUnset(request.volume)) {
    query['Volume'] = request.volume;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SmartCall',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function smartCall(request: SmartCallRequest): SmartCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return smartCallWithOptions(request, runtime);
}

model SmartCallOperateRequest {
  callId?: string(name='CallId'),
  command?: string(name='Command'),
  ownerId?: long(name='OwnerId'),
  param?: string(name='Param'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model SmartCallOperateResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model SmartCallOperateResponse = {
  headers: map[string]string(name='headers'),
  body: SmartCallOperateResponseBody(name='body'),
}

async function smartCallOperateWithOptions(request: SmartCallOperateRequest, runtime: Util.RuntimeOptions): SmartCallOperateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.callId)) {
    query['CallId'] = request.callId;
  }
  if (!Util.isUnset(request.command)) {
    query['Command'] = request.command;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.param)) {
    query['Param'] = request.param;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SmartCallOperate',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function smartCallOperate(request: SmartCallOperateRequest): SmartCallOperateResponse {
  var runtime = new Util.RuntimeOptions{};
  return smartCallOperateWithOptions(request, runtime);
}

model StartRobotTaskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  scheduleTime?: string(name='ScheduleTime'),
  taskId?: long(name='TaskId'),
}

model StartRobotTaskResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model StartRobotTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StartRobotTaskResponseBody(name='body'),
}

async function startRobotTaskWithOptions(request: StartRobotTaskRequest, runtime: Util.RuntimeOptions): StartRobotTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.scheduleTime)) {
    query['ScheduleTime'] = request.scheduleTime;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartRobotTask',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startRobotTask(request: StartRobotTaskRequest): StartRobotTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return startRobotTaskWithOptions(request, runtime);
}

model StopRobotTaskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  taskId?: long(name='TaskId'),
}

model StopRobotTaskResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model StopRobotTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StopRobotTaskResponseBody(name='body'),
}

async function stopRobotTaskWithOptions(request: StopRobotTaskRequest, runtime: Util.RuntimeOptions): StopRobotTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopRobotTask',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopRobotTask(request: StopRobotTaskRequest): StopRobotTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopRobotTaskWithOptions(request, runtime);
}

model SubmitHotlineTransferRegisterRequest {
  agreement?: string(name='Agreement'),
  hotlineNumber?: string(name='HotlineNumber'),
  operatorIdentityCard?: string(name='OperatorIdentityCard'),
  operatorMail?: string(name='OperatorMail'),
  operatorMailVerifyCode?: string(name='OperatorMailVerifyCode'),
  operatorMobile?: string(name='OperatorMobile'),
  operatorMobileVerifyCode?: string(name='OperatorMobileVerifyCode'),
  operatorName?: string(name='OperatorName'),
  ownerId?: long(name='OwnerId'),
  qualificationId?: string(name='QualificationId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transferPhoneNumberInfos?: [ 
    {
      identityCard?: string(name='IdentityCard'),
      phoneNumber?: string(name='PhoneNumber'),
      phoneNumberOwnerName?: string(name='PhoneNumberOwnerName'),
    }
  ](name='TransferPhoneNumberInfos'),
}

model SubmitHotlineTransferRegisterResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SubmitHotlineTransferRegisterResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitHotlineTransferRegisterResponseBody(name='body'),
}

async function submitHotlineTransferRegisterWithOptions(request: SubmitHotlineTransferRegisterRequest, runtime: Util.RuntimeOptions): SubmitHotlineTransferRegisterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agreement)) {
    query['Agreement'] = request.agreement;
  }
  if (!Util.isUnset(request.hotlineNumber)) {
    query['HotlineNumber'] = request.hotlineNumber;
  }
  if (!Util.isUnset(request.operatorIdentityCard)) {
    query['OperatorIdentityCard'] = request.operatorIdentityCard;
  }
  if (!Util.isUnset(request.operatorMail)) {
    query['OperatorMail'] = request.operatorMail;
  }
  if (!Util.isUnset(request.operatorMailVerifyCode)) {
    query['OperatorMailVerifyCode'] = request.operatorMailVerifyCode;
  }
  if (!Util.isUnset(request.operatorMobile)) {
    query['OperatorMobile'] = request.operatorMobile;
  }
  if (!Util.isUnset(request.operatorMobileVerifyCode)) {
    query['OperatorMobileVerifyCode'] = request.operatorMobileVerifyCode;
  }
  if (!Util.isUnset(request.operatorName)) {
    query['OperatorName'] = request.operatorName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.qualificationId)) {
    query['QualificationId'] = request.qualificationId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.transferPhoneNumberInfos)) {
    query['TransferPhoneNumberInfos'] = request.transferPhoneNumberInfos;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitHotlineTransferRegister',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitHotlineTransferRegister(request: SubmitHotlineTransferRegisterRequest): SubmitHotlineTransferRegisterResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitHotlineTransferRegisterWithOptions(request, runtime);
}

model UploadRobotTaskCalledFileRequest {
  calledNumber?: string(name='CalledNumber'),
  id?: long(name='Id'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ttsParam?: string(name='TtsParam'),
  ttsParamHead?: string(name='TtsParamHead'),
}

model UploadRobotTaskCalledFileResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UploadRobotTaskCalledFileResponse = {
  headers: map[string]string(name='headers'),
  body: UploadRobotTaskCalledFileResponseBody(name='body'),
}

async function uploadRobotTaskCalledFileWithOptions(request: UploadRobotTaskCalledFileRequest, runtime: Util.RuntimeOptions): UploadRobotTaskCalledFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.calledNumber)) {
    query['CalledNumber'] = request.calledNumber;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.ttsParam)) {
    query['TtsParam'] = request.ttsParam;
  }
  if (!Util.isUnset(request.ttsParamHead)) {
    query['TtsParamHead'] = request.ttsParamHead;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UploadRobotTaskCalledFile',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function uploadRobotTaskCalledFile(request: UploadRobotTaskCalledFileRequest): UploadRobotTaskCalledFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadRobotTaskCalledFileWithOptions(request, runtime);
}

