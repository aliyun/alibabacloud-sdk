/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'servicemesh';
  @version = '2020-01-11';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddBuiltinEnvoyFilterRequest {
  id: string(name='Id', position='Body'),
  istioVersion: string(name='IstioVersion', position='Body'),
  name: string(name='Name', position='Body'),
  parameters: string(name='Parameters', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model AddBuiltinEnvoyFilterResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddBuiltinEnvoyFilterResponse = {
  headers: map[string]string(name='headers'),
  body: AddBuiltinEnvoyFilterResponseBody(name='body'),
}

async function addBuiltinEnvoyFilter(request: AddBuiltinEnvoyFilterRequest): AddBuiltinEnvoyFilterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddBuiltinEnvoyFilter', 'POST', '/', 'json', true, 'form', request);
}

model AddClusterIntoServiceMeshRequest {
  clusterId: string(name='ClusterId', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model AddClusterIntoServiceMeshResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddClusterIntoServiceMeshResponse = {
  headers: map[string]string(name='headers'),
  body: AddClusterIntoServiceMeshResponseBody(name='body'),
}

async function addClusterIntoServiceMesh(request: AddClusterIntoServiceMeshRequest): AddClusterIntoServiceMeshResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddClusterIntoServiceMesh', 'POST', '/', 'json', true, 'form', request);
}

model AddMeshTagToEcsRequest {
  ecsId: string(name='EcsId', position='Query'),
  serviceMeshId: string(name='ServiceMeshId', position='Query'),
}

model AddMeshTagToEcsResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddMeshTagToEcsResponse = {
  headers: map[string]string(name='headers'),
  body: AddMeshTagToEcsResponseBody(name='body'),
}

async function addMeshTagToEcs(request: AddMeshTagToEcsRequest): AddMeshTagToEcsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddMeshTagToEcs', 'POST', '/', 'json', false, 'json', request);
}

model AddVMIntoServiceMeshRequest {
  ecsId: string(name='EcsId', position='Query'),
  serviceMeshId: string(name='ServiceMeshId', position='Query'),
}

model AddVMIntoServiceMeshResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AddVMIntoServiceMeshResponse = {
  headers: map[string]string(name='headers'),
  body: AddVMIntoServiceMeshResponseBody(name='body'),
}

async function addVMIntoServiceMesh(request: AddVMIntoServiceMeshRequest): AddVMIntoServiceMeshResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddVMIntoServiceMesh', 'POST', '/', 'json', false, 'json', request);
}

model AddVmAppToMeshRequest {
  annotations?: string(name='Annotations', position='Query'),
  force?: boolean(name='Force', position='Query'),
  ips: string(name='Ips', position='Query'),
  labels: string(name='Labels', position='Query'),
  namespace: string(name='Namespace', position='Query'),
  ports: string(name='Ports', position='Query'),
  serviceAccount?: string(name='ServiceAccount', position='Query'),
  serviceMeshId: string(name='ServiceMeshId', position='Query'),
  serviceName: string(name='ServiceName', position='Query'),
}

model AddVmAppToMeshResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model AddVmAppToMeshResponse = {
  headers: map[string]string(name='headers'),
  body: AddVmAppToMeshResponseBody(name='body'),
}

async function addVmAppToMesh(request: AddVmAppToMeshRequest): AddVmAppToMeshResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddVmAppToMesh', 'POST', '/', 'json', false, 'json', request);
}

model CreateASMGatewayRequest {
  body?: string(name='Body', position='Body'),
  istioGatewayName?: string(name='IstioGatewayName', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model CreateASMGatewayResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateASMGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: CreateASMGatewayResponseBody(name='body'),
}

async function createASMGateway(request: CreateASMGatewayRequest): CreateASMGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateASMGateway', 'POST', '/', 'json', true, 'form', request);
}

model CreateExtensionProviderRequest {
  config?: string(name='Config', position='Body'),
  name?: string(name='Name', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
  type?: string(name='Type', position='Body'),
}

model CreateExtensionProviderResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateExtensionProviderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateExtensionProviderResponseBody(name='body'),
}

async function createExtensionProvider(request: CreateExtensionProviderRequest): CreateExtensionProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateExtensionProvider', 'POST', '/', 'json', true, 'form', request);
}

model CreateServiceMeshRequest {
  accessLogEnabled?: boolean(name='AccessLogEnabled', position='Body'),
  accessLogFile?: string(name='AccessLogFile', position='Body'),
  accessLogFormat?: string(name='AccessLogFormat', position='Body'),
  accessLogProject?: string(name='AccessLogProject', position='Body'),
  accessLogServiceEnabled?: boolean(name='AccessLogServiceEnabled', position='Body'),
  accessLogServiceHost?: string(name='AccessLogServiceHost', position='Body'),
  accessLogServicePort?: int32(name='AccessLogServicePort', position='Body'),
  apiServerPublicEip?: boolean(name='ApiServerPublicEip', position='Body'),
  auditProject?: string(name='AuditProject', position='Body'),
  CRAggregationEnabled?: boolean(name='CRAggregationEnabled', position='Body'),
  configSourceEnabled?: boolean(name='ConfigSourceEnabled', position='Body'),
  configSourceNacosID?: string(name='ConfigSourceNacosID', position='Body'),
  controlPlaneLogEnabled?: boolean(name='ControlPlaneLogEnabled', position='Body'),
  controlPlaneLogProject?: string(name='ControlPlaneLogProject', position='Body'),
  customizedPrometheus?: boolean(name='CustomizedPrometheus', position='Body'),
  customizedZipkin?: boolean(name='CustomizedZipkin', position='Body'),
  DNSProxyingEnabled?: boolean(name='DNSProxyingEnabled', position='Body'),
  dubboFilterEnabled?: boolean(name='DubboFilterEnabled', position='Body'),
  edition?: string(name='Edition', position='Body'),
  enableAudit?: boolean(name='EnableAudit', position='Body'),
  enableCRHistory?: boolean(name='EnableCRHistory', position='Body'),
  enableSDSServer?: boolean(name='EnableSDSServer', position='Body'),
  excludeIPRanges?: string(name='ExcludeIPRanges', position='Body'),
  excludeInboundPorts?: string(name='ExcludeInboundPorts', position='Body'),
  excludeOutboundPorts?: string(name='ExcludeOutboundPorts', position='Body'),
  filterGatewayClusterConfig?: boolean(name='FilterGatewayClusterConfig', position='Body'),
  gatewayAPIEnabled?: boolean(name='GatewayAPIEnabled', position='Body'),
  includeIPRanges?: string(name='IncludeIPRanges', position='Body'),
  istioVersion?: string(name='IstioVersion', position='Body'),
  kialiEnabled?: boolean(name='KialiEnabled', position='Body'),
  localityLBConf?: string(name='LocalityLBConf', position='Body'),
  localityLoadBalancing?: boolean(name='LocalityLoadBalancing', position='Body'),
  MSEEnabled?: boolean(name='MSEEnabled', position='Body'),
  mysqlFilterEnabled?: boolean(name='MysqlFilterEnabled', position='Body'),
  name?: string(name='Name', position='Body'),
  OPALimitCPU?: string(name='OPALimitCPU', position='Body'),
  OPALimitMemory?: string(name='OPALimitMemory', position='Body'),
  OPALogLevel?: string(name='OPALogLevel', position='Body'),
  OPARequestCPU?: string(name='OPARequestCPU', position='Body'),
  OPARequestMemory?: string(name='OPARequestMemory', position='Body'),
  opaEnabled?: boolean(name='OpaEnabled', position='Body'),
  openAgentPolicy?: boolean(name='OpenAgentPolicy', position='Body'),
  prometheusUrl?: string(name='PrometheusUrl', position='Body'),
  proxyLimitCPU?: string(name='ProxyLimitCPU', position='Body'),
  proxyLimitMemory?: string(name='ProxyLimitMemory', position='Body'),
  proxyRequestCPU?: string(name='ProxyRequestCPU', position='Body'),
  proxyRequestMemory?: string(name='ProxyRequestMemory', position='Body'),
  redisFilterEnabled?: boolean(name='RedisFilterEnabled', position='Body'),
  regionId: string(name='RegionId', position='Body'),
  telemetry?: boolean(name='Telemetry', position='Body'),
  thriftFilterEnabled?: boolean(name='ThriftFilterEnabled', position='Body'),
  traceSampling?: float(name='TraceSampling', position='Body'),
  tracing?: boolean(name='Tracing', position='Body'),
  vSwitches: string(name='VSwitches', position='Body'),
  vpcId: string(name='VpcId', position='Body'),
  webAssemblyFilterEnabled?: boolean(name='WebAssemblyFilterEnabled', position='Body'),
}

model CreateServiceMeshResponseBody = {
  requestId?: string(name='RequestId'),
  serviceMeshId?: string(name='ServiceMeshId'),
}

model CreateServiceMeshResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceMeshResponseBody(name='body'),
}

async function createServiceMesh(request: CreateServiceMeshRequest): CreateServiceMeshResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServiceMesh', 'POST', '/', 'json', true, 'form', request);
}

model DeleteExtensionProviderRequest {
  name?: string(name='Name', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
  type?: string(name='Type', position='Body'),
}

model DeleteExtensionProviderResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteExtensionProviderResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteExtensionProviderResponseBody(name='body'),
}

async function deleteExtensionProvider(request: DeleteExtensionProviderRequest): DeleteExtensionProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteExtensionProvider', 'POST', '/', 'json', true, 'form', request);
}

model DeleteServiceMeshRequest {
  force?: boolean(name='Force', position='Body'),
  retainResources?: string(name='RetainResources', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model DeleteServiceMeshResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteServiceMeshResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceMeshResponseBody(name='body'),
}

async function deleteServiceMesh(request: DeleteServiceMeshRequest): DeleteServiceMeshResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteServiceMesh', 'POST', '/', 'json', true, 'form', request);
}

model DescribeASMGatewayImportedServicesRequest {
  ASMGatewayName?: string(name='ASMGatewayName', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
  serviceNamespace?: string(name='ServiceNamespace', position='Body'),
}

model DescribeASMGatewayImportedServicesResponseBody = {
  importedServices?: [ 
    {
      serviceName?: string(name='ServiceName'),
      serviceNamespace?: string(name='ServiceNamespace'),
    }
  ](name='ImportedServices'),
  requestId?: string(name='RequestId'),
}

model DescribeASMGatewayImportedServicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeASMGatewayImportedServicesResponseBody(name='body'),
}

async function describeASMGatewayImportedServices(request: DescribeASMGatewayImportedServicesRequest): DescribeASMGatewayImportedServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeASMGatewayImportedServices', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlertActionPoliciesRequest {
  page?: int32(name='Page', position='Body'),
}

model DescribeAlertActionPoliciesResponseBody = {
  actionPolicyList?: [ 
    {
      id?: string(name='Id'),
      name?: string(name='Name'),
    }
  ](name='ActionPolicyList'),
  pageTotal?: int32(name='PageTotal'),
  requestId?: string(name='RequestId'),
}

model DescribeAlertActionPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAlertActionPoliciesResponseBody(name='body'),
}

async function describeAlertActionPolicies(request: DescribeAlertActionPoliciesRequest): DescribeAlertActionPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertActionPolicies', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAvailableNacosInstancesRequest {
  regionId: string(name='RegionId', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
}

model DescribeAvailableNacosInstancesResponseBody = {
  data?: [ string ](name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeAvailableNacosInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableNacosInstancesResponseBody(name='body'),
}

async function describeAvailableNacosInstances(request: DescribeAvailableNacosInstancesRequest): DescribeAvailableNacosInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAvailableNacosInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCCMVersionRequest {
  serviceMeshId: string(name='ServiceMeshId', position='Query'),
}

model DescribeCCMVersionResponseBody = {
  CCMVersions?: map[string]CCMVersionsValue(name='CCMVersions'),
  requestId?: string(name='RequestId'),
}

model DescribeCCMVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCCMVersionResponseBody(name='body'),
}

async function describeCCMVersion(request: DescribeCCMVersionRequest): DescribeCCMVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCCMVersion', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCensRequest {
  serviceMeshId?: string(name='ServiceMeshId', position='Query'),
}

model DescribeCensResponseBody = {
  clusters?: [ string ](name='Clusters'),
  requestId?: string(name='RequestId'),
}

model DescribeCensResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCensResponseBody(name='body'),
}

async function describeCens(request: DescribeCensRequest): DescribeCensResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCens', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClusterGrafanaRequest {
  k8sClusterId: string(name='K8sClusterId', position='Query'),
  serviceMeshId: string(name='ServiceMeshId', position='Query'),
}

model DescribeClusterGrafanaResponseBody = {
  dashboards?: [ 
    {
      title?: string(name='Title'),
      url?: string(name='Url'),
    }
  ](name='Dashboards'),
  requestId?: string(name='RequestId'),
}

model DescribeClusterGrafanaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterGrafanaResponseBody(name='body'),
}

async function describeClusterGrafana(request: DescribeClusterGrafanaRequest): DescribeClusterGrafanaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusterGrafana', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClusterPrometheusRequest {
  k8sClusterId?: string(name='K8sClusterId', position='Query'),
  k8sClusterRegionId?: string(name='K8sClusterRegionId', position='Query'),
  serviceMeshId?: string(name='ServiceMeshId', position='Query'),
}

model DescribeClusterPrometheusResponseBody = {
  prometheus?: string(name='Prometheus'),
  requestId?: string(name='RequestId'),
}

model DescribeClusterPrometheusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterPrometheusResponseBody(name='body'),
}

async function describeClusterPrometheus(request: DescribeClusterPrometheusRequest): DescribeClusterPrometheusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusterPrometheus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClustersInServiceMeshRequest {
  serviceMeshId: string(name='ServiceMeshId', position='Query'),
}

model DescribeClustersInServiceMeshResponseBody = {
  clusters?: [ 
    {
      accessLogDashboards?: [ 
        {
          title?: string(name='Title'),
          url?: string(name='Url'),
        }
      ](name='AccessLogDashboards'),
      clusterDomain?: string(name='ClusterDomain'),
      clusterId?: string(name='ClusterId'),
      clusterType?: string(name='ClusterType'),
      creationTime?: string(name='CreationTime'),
      errorMessage?: string(name='ErrorMessage'),
      logtailInstalledState?: string(name='LogtailInstalledState'),
      name?: string(name='Name'),
      regionId?: string(name='RegionId'),
      sgId?: string(name='SgId'),
      state?: string(name='State'),
      updateTime?: string(name='UpdateTime'),
      version?: string(name='Version'),
      vpcId?: string(name='VpcId'),
    }
  ](name='Clusters'),
  requestId?: string(name='RequestId'),
}

model DescribeClustersInServiceMeshResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClustersInServiceMeshResponseBody(name='body'),
}

async function describeClustersInServiceMesh(request: DescribeClustersInServiceMeshRequest): DescribeClustersInServiceMeshResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClustersInServiceMesh', 'POST', '/', 'json', false, 'json', request);
}

model DescribeControlPlaneLogAlertRulesRequest {
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model DescribeControlPlaneLogAlertRulesResponseBody = {
  data?: [ 
    {
      actionPolicyId?: string(name='ActionPolicyId'),
      enabled?: boolean(name='Enabled'),
      info?: {
        description?: string(name='Description'),
        title?: string(name='Title'),
      }(name='Info'),
      ruleId?: string(name='RuleId'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeControlPlaneLogAlertRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeControlPlaneLogAlertRulesResponseBody(name='body'),
}

async function describeControlPlaneLogAlertRules(request: DescribeControlPlaneLogAlertRulesRequest): DescribeControlPlaneLogAlertRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeControlPlaneLogAlertRules', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCrTemplatesRequest {
  istioVersion: string(name='IstioVersion', position='Body'),
  kind: string(name='Kind', position='Body'),
}

model DescribeCrTemplatesResponseBody = {
  requestId?: string(name='RequestId'),
  templates?: [ 
    {
      chineseName?: string(name='ChineseName'),
      englishName?: string(name='EnglishName'),
      yaml?: string(name='Yaml'),
    }
  ](name='Templates'),
}

model DescribeCrTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCrTemplatesResponseBody(name='body'),
}

async function describeCrTemplates(request: DescribeCrTemplatesRequest): DescribeCrTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCrTemplates', 'POST', '/', 'json', true, 'form', request);
}

model DescribeExtensionProviderRequest {
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
  type?: string(name='Type', position='Body'),
}

model DescribeExtensionProviderResponseBody = {
  extensionProviders?: [  map[string]any ](name='ExtensionProviders'),
  requestId?: string(name='RequestId'),
}

model DescribeExtensionProviderResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExtensionProviderResponseBody(name='body'),
}

async function describeExtensionProvider(request: DescribeExtensionProviderRequest): DescribeExtensionProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExtensionProvider', 'POST', '/', 'json', true, 'form', request);
}

model DescribeGuestClusterAccessLogDashboardsRequest {
  k8sClusterId: string(name='K8sClusterId', position='Body'),
}

model DescribeGuestClusterAccessLogDashboardsResponseBody = {
  dashboards?: [ 
    {
      title?: string(name='Title'),
      url?: string(name='Url'),
    }
  ](name='Dashboards'),
  k8sClusterId?: string(name='K8sClusterId'),
  requestId?: string(name='RequestId'),
}

model DescribeGuestClusterAccessLogDashboardsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGuestClusterAccessLogDashboardsResponseBody(name='body'),
}

async function describeGuestClusterAccessLogDashboards(request: DescribeGuestClusterAccessLogDashboardsRequest): DescribeGuestClusterAccessLogDashboardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGuestClusterAccessLogDashboards', 'POST', '/', 'json', true, 'form', request);
}

model DescribeGuestClusterNamespacesRequest {
  guestClusterID: string(name='GuestClusterID', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model DescribeGuestClusterNamespacesResponseBody = {
  nsList?: [ string ](name='NsList'),
  requestId?: string(name='RequestId'),
}

model DescribeGuestClusterNamespacesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGuestClusterNamespacesResponseBody(name='body'),
}

async function describeGuestClusterNamespaces(request: DescribeGuestClusterNamespacesRequest): DescribeGuestClusterNamespacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGuestClusterNamespaces', 'POST', '/', 'json', true, 'form', request);
}

model DescribeGuestClusterPodsRequest {
  guestClusterID: string(name='GuestClusterID', position='Body'),
  namespace: string(name='Namespace', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model DescribeGuestClusterPodsResponseBody = {
  podList?: [ string ](name='PodList'),
  requestId?: string(name='RequestId'),
}

model DescribeGuestClusterPodsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGuestClusterPodsResponseBody(name='body'),
}

async function describeGuestClusterPods(request: DescribeGuestClusterPodsRequest): DescribeGuestClusterPodsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGuestClusterPods', 'POST', '/', 'json', true, 'form', request);
}

model DescribeImportedServicesDetailRequest {
  ASMGatewayName?: string(name='ASMGatewayName', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
  serviceNamespace?: string(name='ServiceNamespace', position='Body'),
}

model DescribeImportedServicesDetailResponseBody = {
  details?: [ 
    {
      clusterIds?: [ string ](name='ClusterIds'),
      labels?: map[string]string(name='Labels'),
      namespace?: string(name='Namespace'),
      ports?: [ 
        {
          name?: string(name='Name'),
          nodePort?: int32(name='NodePort'),
          port?: int32(name='Port'),
          protocol?: string(name='Protocol'),
          targetPort?: int32(name='TargetPort'),
        }
      ](name='Ports'),
      serviceName?: string(name='ServiceName'),
      serviceType?: string(name='ServiceType'),
    }
  ](name='Details'),
  requestId?: string(name='RequestId'),
}

model DescribeImportedServicesDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImportedServicesDetailResponseBody(name='body'),
}

async function describeImportedServicesDetail(request: DescribeImportedServicesDetailRequest): DescribeImportedServicesDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImportedServicesDetail', 'POST', '/', 'json', true, 'form', request);
}

model DescribeIngressGatewaysRequest {
  serviceMeshId?: string(name='ServiceMeshId', position='Query'),
}

model DescribeIngressGatewaysResponseBody = {
  ingressGateways?: [  map[string]any ](name='IngressGateways'),
  requestId?: string(name='RequestId'),
}

model DescribeIngressGatewaysResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIngressGatewaysResponseBody(name='body'),
}

async function describeIngressGateways(request: DescribeIngressGatewaysRequest): DescribeIngressGatewaysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIngressGateways', 'GET', '/', 'json', false, 'json', request);
}

model DescribeNamespaceScopeSidecarConfigRequest {
  namespace?: string(name='Namespace', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model DescribeNamespaceScopeSidecarConfigResponseBody = {
  configPatches?: {
    excludeInboundPorts?: string(name='ExcludeInboundPorts'),
    excludeOutboundIPRanges?: string(name='ExcludeOutboundIPRanges'),
    excludeOutboundPorts?: string(name='ExcludeOutboundPorts'),
    includeInboundPorts?: string(name='IncludeInboundPorts'),
    includeOutboundIPRanges?: string(name='IncludeOutboundIPRanges'),
    includeOutboundPorts?: string(name='IncludeOutboundPorts'),
    istioDNSProxyEnabled?: boolean(name='IstioDNSProxyEnabled'),
    lifecycleStr?: string(name='LifecycleStr'),
    sidecarProxyInitResourceLimit?: {
      resourceCPULimit?: string(name='ResourceCPULimit'),
      resourceMemoryLimit?: string(name='ResourceMemoryLimit'),
    }(name='SidecarProxyInitResourceLimit'),
    sidecarProxyInitResourceRequest?: {
      resourceCPURequest?: string(name='ResourceCPURequest'),
      resourceMemoryRequest?: string(name='ResourceMemoryRequest'),
    }(name='SidecarProxyInitResourceRequest'),
    sidecarProxyResourceLimit?: {
      resourceCPULimit?: string(name='ResourceCPULimit'),
      resourceMemoryLimit?: string(name='ResourceMemoryLimit'),
    }(name='SidecarProxyResourceLimit'),
    sidecarProxyResourceRequest?: {
      resourceCPURequest?: string(name='ResourceCPURequest'),
      resourceMemoryRequest?: string(name='ResourceMemoryRequest'),
    }(name='SidecarProxyResourceRequest'),
    terminationDrainDuration?: string(name='TerminationDrainDuration'),
  }(name='ConfigPatches'),
  requestId?: string(name='RequestId'),
}

model DescribeNamespaceScopeSidecarConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNamespaceScopeSidecarConfigResponseBody(name='body'),
}

async function describeNamespaceScopeSidecarConfig(request: DescribeNamespaceScopeSidecarConfigRequest): DescribeNamespaceScopeSidecarConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNamespaceScopeSidecarConfig', 'POST', '/', 'json', true, 'form', request);
}

model DescribeNodesInstanceTypeRequest {
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model DescribeNodesInstanceTypeResponseBody = {
  instanceTypes?: [ 
    {
      multiBufferEnabled?: boolean(name='MultiBufferEnabled'),
      nodeType?: string(name='NodeType'),
    }
  ](name='InstanceTypes'),
  requestId?: string(name='RequestId'),
}

model DescribeNodesInstanceTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNodesInstanceTypeResponseBody(name='body'),
}

async function describeNodesInstanceType(request: DescribeNodesInstanceTypeRequest): DescribeNodesInstanceTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNodesInstanceType', 'POST', '/', 'json', true, 'form', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Query'),
}

model DescribeRegionsResponseBody = {
  businessLocations?: string(name='BusinessLocations'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'GET', '/', 'json', false, 'json', request);
}

model DescribeServiceMeshDetailRequest {
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model DescribeServiceMeshDetailResponseBody = {
  requestId?: string(name='RequestId'),
  serviceMesh?: {
    clusters?: [ string ](name='Clusters'),
    endpoints?: {
      intranetApiServerEndpoint?: string(name='IntranetApiServerEndpoint'),
      intranetPilotEndpoint?: string(name='IntranetPilotEndpoint'),
      publicApiServerEndpoint?: string(name='PublicApiServerEndpoint'),
      publicPilotEndpoint?: string(name='PublicPilotEndpoint'),
    }(name='Endpoints'),
    serviceMeshInfo?: {
      creationTime?: string(name='CreationTime'),
      errorMessage?: string(name='ErrorMessage'),
      name?: string(name='Name'),
      profile?: string(name='Profile'),
      regionId?: string(name='RegionId'),
      serviceMeshId?: string(name='ServiceMeshId'),
      state?: string(name='State'),
      updateTime?: string(name='UpdateTime'),
      version?: string(name='Version'),
    }(name='ServiceMeshInfo'),
    spec?: {
      loadBalancer?: {
        apiServerLoadbalancerId?: string(name='ApiServerLoadbalancerId'),
        apiServerPublicEip?: boolean(name='ApiServerPublicEip'),
        pilotPublicEip?: boolean(name='PilotPublicEip'),
        pilotPublicLoadbalancerId?: string(name='PilotPublicLoadbalancerId'),
      }(name='LoadBalancer'),
      meshConfig?: {
        accessLog?: {
          enabled?: boolean(name='Enabled'),
          project?: string(name='Project'),
        }(name='AccessLog'),
        audit?: {
          auditProjectStatus?: string(name='AuditProjectStatus'),
          enabled?: boolean(name='Enabled'),
          project?: string(name='Project'),
        }(name='Audit'),
        controlPlaneLogInfo?: {
          enabled?: boolean(name='Enabled'),
          project?: string(name='Project'),
        }(name='ControlPlaneLogInfo'),
        customizedZipkin?: boolean(name='CustomizedZipkin'),
        edition?: {
          istiodImageTag?: string(name='IstiodImageTag'),
          name?: string(name='Name'),
          proxyImageTag?: string(name='ProxyImageTag'),
        }(name='Edition'),
        enableLocalityLB?: boolean(name='EnableLocalityLB'),
        excludeIPRanges?: string(name='ExcludeIPRanges'),
        excludeInboundPorts?: string(name='ExcludeInboundPorts'),
        excludeOutboundPorts?: string(name='ExcludeOutboundPorts'),
        extraConfiguration?: {
          CRAggregationEnabled?: boolean(name='CRAggregationEnabled'),
          discoverySelectors?: [  map[string]any ](name='DiscoverySelectors'),
          istioCRHistory?: {
            enableHistory?: boolean(name='EnableHistory'),
          }(name='IstioCRHistory'),
          lifecycle?: {
            postStart?: {
              exec?: {
                command?: [ string ](name='Command'),
              }(name='Exec'),
              HTTPGet?: {
                HTTPHeaders?: [ 
                  {
                    name?: string(name='Name'),
                    value?: string(name='Value'),
                  }
                ](name='HTTPHeaders'),
                host?: string(name='Host'),
                port?: string(name='Port'),
                scheme?: string(name='Scheme'),
              }(name='HTTPGet'),
              TCPSocket?: {
                host?: string(name='Host'),
                port?: string(name='Port'),
              }(name='TCPSocket'),
            }(name='PostStart'),
            preStop?: {
              exec?: {
                command?: [ string ](name='Command'),
              }(name='Exec'),
              HTTPGet?: {
                HTTPHeaders?: [ 
                  {
                    name?: string(name='Name'),
                    value?: string(name='Value'),
                  }
                ](name='HTTPHeaders'),
                host?: string(name='Host'),
                port?: string(name='Port'),
                scheme?: string(name='Scheme'),
              }(name='HTTPGet'),
              TCPSocket?: {
                host?: string(name='Host'),
                port?: string(name='Port'),
              }(name='TCPSocket'),
            }(name='PreStop'),
          }(name='Lifecycle'),
          multiBuffer?: {
            enabled?: boolean(name='Enabled'),
            pollDelay?: string(name='PollDelay'),
          }(name='MultiBuffer'),
          sidecarProxyInitResourceLimit?: {
            resourceCPULimit?: string(name='ResourceCPULimit'),
            resourceMemoryLimit?: string(name='ResourceMemoryLimit'),
          }(name='SidecarProxyInitResourceLimit'),
          sidecarProxyInitResourceRequest?: {
            resourceCPURequest?: string(name='ResourceCPURequest'),
            resourceMemoryRequest?: string(name='ResourceMemoryRequest'),
          }(name='SidecarProxyInitResourceRequest'),
          terminationDrainDuration?: string(name='TerminationDrainDuration'),
        }(name='ExtraConfiguration'),
        includeIPRanges?: string(name='IncludeIPRanges'),
        k8sNewAPIsSupport?: {
          gatewayAPIEnabled?: boolean(name='GatewayAPIEnabled'),
        }(name='K8sNewAPIsSupport'),
        kiali?: {
          enabled?: boolean(name='Enabled'),
          url?: string(name='Url'),
        }(name='Kiali'),
        localityLB?: {
          distribute?: map[string]any(name='Distribute'),
          enabled?: boolean(name='Enabled'),
          failover?: map[string]any(name='Failover'),
        }(name='LocalityLB'),
        MSE?: {
          enabled?: boolean(name='Enabled'),
        }(name='MSE'),
        OPA?: {
          enabled?: boolean(name='Enabled'),
          limitCPU?: string(name='LimitCPU'),
          limitMemory?: string(name='LimitMemory'),
          logLevel?: string(name='LogLevel'),
          requestCPU?: string(name='RequestCPU'),
          requestMemory?: string(name='RequestMemory'),
        }(name='OPA'),
        outboundTrafficPolicy?: string(name='OutboundTrafficPolicy'),
        pilot?: {
          configSource?: {
            enabled?: boolean(name='Enabled'),
            nacosID?: string(name='NacosID'),
          }(name='ConfigSource'),
          feature?: {
            enableSDSServer?: boolean(name='EnableSDSServer'),
            filterGatewayClusterConfig?: boolean(name='FilterGatewayClusterConfig'),
          }(name='Feature'),
          http10Enabled?: boolean(name='Http10Enabled'),
          traceSampling?: float(name='TraceSampling'),
        }(name='Pilot'),
        prometheus?: {
          externalUrl?: string(name='ExternalUrl'),
          useExternal?: boolean(name='UseExternal'),
        }(name='Prometheus'),
        protocolSupport?: {
          dubboFilterEnabled?: boolean(name='DubboFilterEnabled'),
          mysqlFilterEnabled?: boolean(name='MysqlFilterEnabled'),
          redisFilterEnabled?: boolean(name='RedisFilterEnabled'),
          thriftFilterEnabled?: boolean(name='ThriftFilterEnabled'),
        }(name='ProtocolSupport'),
        proxy?: {
          accessLogFile?: string(name='AccessLogFile'),
          accessLogFormat?: string(name='AccessLogFormat'),
          accessLogServiceEnabled?: boolean(name='AccessLogServiceEnabled'),
          accessLogServiceHost?: string(name='AccessLogServiceHost'),
          accessLogServicePort?: int32(name='AccessLogServicePort'),
          clusterDomain?: string(name='ClusterDomain'),
          enableDNSProxying?: boolean(name='EnableDNSProxying'),
          limitCPU?: string(name='LimitCPU'),
          limitMemory?: string(name='LimitMemory'),
          requestCPU?: string(name='RequestCPU'),
          requestMemory?: string(name='RequestMemory'),
        }(name='Proxy'),
        sidecarInjector?: {
          autoInjectionPolicyEnabled?: boolean(name='AutoInjectionPolicyEnabled'),
          enableNamespacesByDefault?: boolean(name='EnableNamespacesByDefault'),
          initCNIConfiguration?: {
            enabled?: boolean(name='Enabled'),
            excludeNamespaces?: string(name='ExcludeNamespaces'),
          }(name='InitCNIConfiguration'),
          limitCPU?: string(name='LimitCPU'),
          limitMemory?: string(name='LimitMemory'),
          requestCPU?: string(name='RequestCPU'),
          requestMemory?: string(name='RequestMemory'),
          sidecarInjectorWebhookAsYaml?: string(name='SidecarInjectorWebhookAsYaml'),
        }(name='SidecarInjector'),
        telemetry?: boolean(name='Telemetry'),
        tracing?: boolean(name='Tracing'),
        webAssemblyFilterDeployment?: {
          enabled?: boolean(name='Enabled'),
        }(name='WebAssemblyFilterDeployment'),
      }(name='MeshConfig'),
      network?: {
        securityGroupId?: string(name='SecurityGroupId'),
        vSwitches?: [ string ](name='VSwitches'),
        vpcId?: string(name='VpcId'),
      }(name='Network'),
    }(name='Spec'),
  }(name='ServiceMesh'),
}

model DescribeServiceMeshDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServiceMeshDetailResponseBody(name='body'),
}

async function describeServiceMeshDetail(request: DescribeServiceMeshDetailRequest): DescribeServiceMeshDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeServiceMeshDetail', 'POST', '/', 'json', true, 'form', request);
}

model DescribeServiceMeshGatewayPodStatusRequest {
  gatewayFullName?: string(name='GatewayFullName', position='Body'),
  guestClusterIds?: string(name='GuestClusterIds', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Query'),
}

model DescribeServiceMeshGatewayPodStatusResponseBody = {
  ASMGatewayDetails?: [ 
    {
      clusterID?: string(name='ClusterID'),
      gatewayName?: string(name='GatewayName'),
      readyPodNum?: long(name='ReadyPodNum'),
      specPodNum?: long(name='SpecPodNum'),
    }
  ](name='ASMGatewayDetails'),
  requestId?: string(name='RequestId'),
}

model DescribeServiceMeshGatewayPodStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServiceMeshGatewayPodStatusResponseBody(name='body'),
}

async function describeServiceMeshGatewayPodStatus(request: DescribeServiceMeshGatewayPodStatusRequest): DescribeServiceMeshGatewayPodStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeServiceMeshGatewayPodStatus', 'POST', '/', 'json', true, 'form', request);
}

model DescribeServiceMeshGatewaySLBStatusRequest {
  gatewayAddresses?: string(name='GatewayAddresses', position='Body'),
  gatewayFullName?: string(name='GatewayFullName', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Query'),
}

model DescribeServiceMeshGatewaySLBStatusResponseBody = {
  gatewaySLB?: map[string]GatewaySLBValue(name='GatewaySLB'),
  requestId?: string(name='RequestId'),
}

model DescribeServiceMeshGatewaySLBStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServiceMeshGatewaySLBStatusResponseBody(name='body'),
}

async function describeServiceMeshGatewaySLBStatus(request: DescribeServiceMeshGatewaySLBStatusRequest): DescribeServiceMeshGatewaySLBStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeServiceMeshGatewaySLBStatus', 'POST', '/', 'json', true, 'form', request);
}

model DescribeServiceMeshKubeconfigRequest {
  privateIpAddress?: boolean(name='PrivateIpAddress', position='Query'),
  serviceMeshId: string(name='ServiceMeshId', position='Query'),
}

model DescribeServiceMeshKubeconfigResponseBody = {
  kubeconfig?: string(name='Kubeconfig'),
  requestId?: string(name='RequestId'),
}

model DescribeServiceMeshKubeconfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServiceMeshKubeconfigResponseBody(name='body'),
}

async function describeServiceMeshKubeconfig(request: DescribeServiceMeshKubeconfigRequest): DescribeServiceMeshKubeconfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeServiceMeshKubeconfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeServiceMeshUpgradeStatusRequest {
  allIstioGatewayFullNames?: string(name='AllIstioGatewayFullNames', position='Body'),
  guestClusterIds?: string(name='GuestClusterIds', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Query'),
}

model DescribeServiceMeshUpgradeStatusResponseBody = {
  requestId?: string(name='RequestId'),
  upgradeDetail?: {
    finishedGatewaysNum?: long(name='FinishedGatewaysNum'),
    gatewayStatusRecord?: map[string]UpgradeDetailGatewayStatusRecordValue(name='GatewayStatusRecord'),
    meshStatus?: string(name='MeshStatus'),
    totalGatewaysNum?: long(name='TotalGatewaysNum'),
  }(name='UpgradeDetail'),
}

model DescribeServiceMeshUpgradeStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServiceMeshUpgradeStatusResponseBody(name='body'),
}

async function describeServiceMeshUpgradeStatus(request: DescribeServiceMeshUpgradeStatusRequest): DescribeServiceMeshUpgradeStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeServiceMeshUpgradeStatus', 'POST', '/', 'json', true, 'form', request);
}

model DescribeServiceMeshVMsRequest {
  serviceMeshId: string(name='ServiceMeshId', position='Query'),
}

model DescribeServiceMeshVMsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  VMs?: [ 
    {
      hasTag?: boolean(name='HasTag'),
      hostName?: string(name='HostName'),
      instanceId?: string(name='InstanceId'),
      ipAddress?: string(name='IpAddress'),
      region?: string(name='Region'),
      securityGroupIds?: string(name='SecurityGroupIds'),
      serviceMeshId?: string(name='ServiceMeshId'),
      status?: string(name='Status'),
    }
  ](name='VMs'),
}

model DescribeServiceMeshVMsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServiceMeshVMsResponseBody(name='body'),
}

async function describeServiceMeshVMs(request: DescribeServiceMeshVMsRequest): DescribeServiceMeshVMsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeServiceMeshVMs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeServiceMeshesRequest {
}

model DescribeServiceMeshesResponseBody = {
  requestId?: string(name='RequestId'),
  serviceMeshes?: [ 
    {
      clusters?: [ string ](name='Clusters'),
      endpoints?: {
        intranetApiServerEndpoint?: string(name='IntranetApiServerEndpoint'),
        intranetPilotEndpoint?: string(name='IntranetPilotEndpoint'),
        publicApiServerEndpoint?: string(name='PublicApiServerEndpoint'),
        publicPilotEndpoint?: string(name='PublicPilotEndpoint'),
        reverseTunnelEndpoint?: string(name='ReverseTunnelEndpoint'),
      }(name='Endpoints'),
      serviceMeshInfo?: {
        creationTime?: string(name='CreationTime'),
        errorMessage?: string(name='ErrorMessage'),
        name?: string(name='Name'),
        profile?: string(name='Profile'),
        regionId?: string(name='RegionId'),
        serviceMeshId?: string(name='ServiceMeshId'),
        state?: string(name='State'),
        updateTime?: string(name='UpdateTime'),
        version?: string(name='Version'),
      }(name='ServiceMeshInfo'),
      spec?: {
        loadBalancer?: {
          apiServerLoadbalancerId?: string(name='ApiServerLoadbalancerId'),
          apiServerPublicEip?: boolean(name='ApiServerPublicEip'),
          pilotPublicEip?: boolean(name='PilotPublicEip'),
          pilotPublicLoadbalancerId?: string(name='PilotPublicLoadbalancerId'),
        }(name='LoadBalancer'),
        meshConfig?: {
          mtls?: boolean(name='Mtls'),
          outboundTrafficPolicy?: string(name='OutboundTrafficPolicy'),
          pilot?: {
            http10Enabled?: boolean(name='Http10Enabled'),
            traceSampling?: float(name='TraceSampling'),
          }(name='Pilot'),
          sidecarInjector?: {
            autoInjectionPolicyEnabled?: boolean(name='AutoInjectionPolicyEnabled'),
            enableNamespacesByDefault?: boolean(name='EnableNamespacesByDefault'),
            initCNIConfiguration?: {
              enabled?: boolean(name='Enabled'),
              excludeNamespaces?: string(name='ExcludeNamespaces'),
            }(name='InitCNIConfiguration'),
          }(name='SidecarInjector'),
          strictMtls?: boolean(name='StrictMtls'),
          telemetry?: boolean(name='Telemetry'),
          tracing?: boolean(name='Tracing'),
        }(name='MeshConfig'),
        network?: {
          securityGroupId?: string(name='SecurityGroupId'),
          vSwitches?: [ string ](name='VSwitches'),
          vpcId?: string(name='VpcId'),
        }(name='Network'),
      }(name='Spec'),
    }
  ](name='ServiceMeshes'),
}

model DescribeServiceMeshesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServiceMeshesResponseBody(name='body'),
}

async function describeServiceMeshes(request: DescribeServiceMeshesRequest): DescribeServiceMeshesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeServiceMeshes', 'GET', '/', 'json', false, 'json', request);
}

model DescribeUpgradeVersionRequest {
  serviceMeshId: string(name='ServiceMeshId', position='Query'),
}

model DescribeUpgradeVersionResponseBody = {
  requestId?: string(name='RequestId'),
  version?: {
    istioOperatorVersion?: string(name='IstioOperatorVersion'),
    istioVersion?: string(name='IstioVersion'),
    kubernetesVersion?: string(name='KubernetesVersion'),
  }(name='Version'),
}

model DescribeUpgradeVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUpgradeVersionResponseBody(name='body'),
}

async function describeUpgradeVersion(request: DescribeUpgradeVersionRequest): DescribeUpgradeVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUpgradeVersion', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUsersWithPermissionsRequest {
  userType: string(name='UserType', position='Body'),
}

model DescribeUsersWithPermissionsResponseBody = {
  requestId?: string(name='RequestId'),
  UIDs?: [ string ](name='UIDs'),
}

model DescribeUsersWithPermissionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUsersWithPermissionsResponseBody(name='body'),
}

async function describeUsersWithPermissions(request: DescribeUsersWithPermissionsRequest): DescribeUsersWithPermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUsersWithPermissions', 'POST', '/', 'json', true, 'form', request);
}

model DescribeVMsInServiceMeshRequest {
  serviceMeshId: string(name='ServiceMeshId', position='Query'),
}

model DescribeVMsInServiceMeshResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  VMs?: [ 
    {
      hasTag?: boolean(name='HasTag'),
      hostName?: string(name='HostName'),
      instanceId?: string(name='InstanceId'),
      ipAddress?: string(name='IpAddress'),
      region?: string(name='Region'),
      securityGroupIds?: string(name='SecurityGroupIds'),
      status?: string(name='Status'),
    }
  ](name='VMs'),
}

model DescribeVMsInServiceMeshResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVMsInServiceMeshResponseBody(name='body'),
}

async function describeVMsInServiceMesh(request: DescribeVMsInServiceMeshRequest): DescribeVMsInServiceMeshResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVMsInServiceMesh', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVSwitchesRequest {
  regionId: string(name='RegionId', position='Body'),
  vpcId: string(name='VpcId', position='Body'),
}

model DescribeVSwitchesResponseBody = {
  maxResults?: int32(name='MaxResults', description='MaxResults本次请求所返回的最大记录条数'),
  nextToken: string(name='NextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount', description='TotalCount本次请求条件下的数据总量，此参数为可选参数，默认可不返回'),
  vSwitches?: [ 
    {
      isDefault?: boolean(name='IsDefault'),
      status?: string(name='Status'),
      vSwitchId?: string(name='VSwitchId'),
      vSwitchName?: string(name='VSwitchName'),
      vpcId?: string(name='VpcId'),
    }
  ](name='VSwitches', description='VSwitches'),
}

model DescribeVSwitchesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVSwitchesResponseBody(name='body'),
}

async function describeVSwitches(request: DescribeVSwitchesRequest): DescribeVSwitchesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVSwitches', 'POST', '/', 'json', true, 'form', request);
}

model DescribeVersionsRequest {
}

model DescribeVersionsResponseBody = {
  requestId?: string(name='RequestId'),
  versionInfo?: [ 
    {
      edition?: string(name='Edition'),
      versions?: [ string ](name='Versions'),
    }
  ](name='VersionInfo'),
}

model DescribeVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVersionsResponseBody(name='body'),
}

async function describeVersions(request: DescribeVersionsRequest): DescribeVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVersions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpcsRequest {
  regionId: string(name='RegionId', position='Body'),
}

model DescribeVpcsResponseBody = {
  maxResults?: int32(name='MaxResults', description='MaxResults本次请求所返回的最大记录条数'),
  nextToken: string(name='NextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount', description='TotalCount本次请求条件下的数据总量，此参数为可选参数，默认可不返回'),
  vpcs?: [ 
    {
      isDefault?: boolean(name='IsDefault'),
      status?: string(name='Status'),
      vpcId?: string(name='VpcId'),
      vpcName?: string(name='VpcName'),
    }
  ](name='Vpcs', description='Vpcs'),
}

model DescribeVpcsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpcsResponseBody(name='body'),
}

async function describeVpcs(request: DescribeVpcsRequest): DescribeVpcsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpcs', 'POST', '/', 'json', true, 'form', request);
}

model DisableControlPlaneLogAlertRequest {
  ruleId?: string(name='RuleId', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model DisableControlPlaneLogAlertResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableControlPlaneLogAlertResponse = {
  headers: map[string]string(name='headers'),
  body: DisableControlPlaneLogAlertResponseBody(name='body'),
}

async function disableControlPlaneLogAlert(request: DisableControlPlaneLogAlertRequest): DisableControlPlaneLogAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableControlPlaneLogAlert', 'POST', '/', 'json', true, 'form', request);
}

model EnableControlPlaneLogAlertRequest {
  actionPolicyId?: string(name='ActionPolicyId', position='Body'),
  ruleId?: string(name='RuleId', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model EnableControlPlaneLogAlertResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableControlPlaneLogAlertResponse = {
  headers: map[string]string(name='headers'),
  body: EnableControlPlaneLogAlertResponseBody(name='body'),
}

async function enableControlPlaneLogAlert(request: EnableControlPlaneLogAlertRequest): EnableControlPlaneLogAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableControlPlaneLogAlert', 'POST', '/', 'json', true, 'form', request);
}

model GetAutoInjectionLabelSyncStatusRequest {
  serviceMeshId: string(name='ServiceMeshId', position='Query'),
}

model GetAutoInjectionLabelSyncStatusResponseBody = {
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetAutoInjectionLabelSyncStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetAutoInjectionLabelSyncStatusResponseBody(name='body'),
}

async function getAutoInjectionLabelSyncStatus(request: GetAutoInjectionLabelSyncStatusRequest): GetAutoInjectionLabelSyncStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAutoInjectionLabelSyncStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetBuiltinEnvoyFilterRequest {
  id: string(name='Id', position='Body'),
  istioVersion: string(name='IstioVersion', position='Body'),
  name: string(name='Name', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model GetBuiltinEnvoyFilterResponseBody = {
  parameters?: string(name='Parameters'),
  requestId?: string(name='RequestId'),
}

model GetBuiltinEnvoyFilterResponse = {
  headers: map[string]string(name='headers'),
  body: GetBuiltinEnvoyFilterResponseBody(name='body'),
}

async function getBuiltinEnvoyFilter(request: GetBuiltinEnvoyFilterRequest): GetBuiltinEnvoyFilterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBuiltinEnvoyFilter', 'POST', '/', 'json', true, 'form', request);
}

model GetBuiltinEnvoyFilterCatalogRequest {
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model GetBuiltinEnvoyFilterCatalogResponseBody = {
  data?: map[string]any(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetBuiltinEnvoyFilterCatalogResponse = {
  headers: map[string]string(name='headers'),
  body: GetBuiltinEnvoyFilterCatalogResponseBody(name='body'),
}

async function getBuiltinEnvoyFilterCatalog(request: GetBuiltinEnvoyFilterCatalogRequest): GetBuiltinEnvoyFilterCatalogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBuiltinEnvoyFilterCatalog', 'POST', '/', 'json', true, 'form', request);
}

model GetCaCertRequest {
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model GetCaCertResponseBody = {
  caCert?: string(name='CaCert', description='base64 encode format'),
  requestId?: string(name='RequestId'),
}

model GetCaCertResponse = {
  headers: map[string]string(name='headers'),
  body: GetCaCertResponseBody(name='body'),
}

async function getCaCert(request: GetCaCertRequest): GetCaCertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCaCert', 'POST', '/', 'json', true, 'form', request);
}

model GetDiagnosisRequest {
  serviceMeshId: string(name='ServiceMeshId', position='Query'),
}

model GetDiagnosisResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  runAt?: string(name='RunAt'),
  status?: string(name='Status'),
}

model GetDiagnosisResponse = {
  headers: map[string]string(name='headers'),
  body: GetDiagnosisResponseBody(name='body'),
}

async function getDiagnosis(request: GetDiagnosisRequest): GetDiagnosisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDiagnosis', 'POST', '/', 'json', false, 'json', request);
}

model GetEcsListRequest {
  serviceMeshId: string(name='ServiceMeshId', position='Query'),
}

model GetEcsListResponseBody = {
  ecsInstances?: [ 
    {
      hasTag?: boolean(name='HasTag'),
      hostName?: string(name='HostName'),
      instanceId?: string(name='InstanceId'),
      ipAddress?: string(name='IpAddress'),
      securityGroupIds?: [ string ](name='SecurityGroupIds'),
      status?: string(name='Status'),
    }
  ](name='EcsInstances'),
  requestId?: string(name='RequestId'),
}

model GetEcsListResponse = {
  headers: map[string]string(name='headers'),
  body: GetEcsListResponseBody(name='body'),
}

async function getEcsList(request: GetEcsListRequest): GetEcsListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEcsList', 'GET', '/', 'json', false, 'json', request);
}

model GetRegisteredServiceEndpointsRequest {
  clusterIds?: string(name='ClusterIds', position='Body'),
  name?: string(name='Name', position='Body'),
  namespace?: string(name='Namespace', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
  serviceType?: string(name='ServiceType', position='Body'),
}

model GetRegisteredServiceEndpointsResponseBody = {
  endPointSlice?: {
    endpointsDetails?: [ 
      {
        address?: string(name='Address'),
        hostname?: string(name='Hostname'),
        podName?: string(name='PodName'),
        ports?: [ int32 ](name='Ports'),
        region?: string(name='Region'),
        sidecarInjected?: boolean(name='SidecarInjected'),
      }
    ](name='EndpointsDetails'),
    location?: string(name='Location'),
    namespace?: string(name='Namespace'),
    serviceName?: string(name='ServiceName'),
  }(name='EndPointSlice'),
  requestId?: string(name='RequestId'),
  serviceEndpoints?: [ 
    {
      address?: string(name='Address'),
      clusterId?: string(name='ClusterId'),
    }
  ](name='ServiceEndpoints'),
}

model GetRegisteredServiceEndpointsResponse = {
  headers: map[string]string(name='headers'),
  body: GetRegisteredServiceEndpointsResponseBody(name='body'),
}

async function getRegisteredServiceEndpoints(request: GetRegisteredServiceEndpointsRequest): GetRegisteredServiceEndpointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRegisteredServiceEndpoints', 'POST', '/', 'json', true, 'form', request);
}

model GetRegisteredServiceNamespacesRequest {
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model GetRegisteredServiceNamespacesResponseBody = {
  namespaces?: [ string ](name='Namespaces'),
  requestId?: string(name='RequestId'),
}

model GetRegisteredServiceNamespacesResponse = {
  headers: map[string]string(name='headers'),
  body: GetRegisteredServiceNamespacesResponseBody(name='body'),
}

async function getRegisteredServiceNamespaces(request: GetRegisteredServiceNamespacesRequest): GetRegisteredServiceNamespacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRegisteredServiceNamespaces', 'POST', '/', 'json', true, 'form', request);
}

model GetRegisteredServicesRequest {
  guestClusters?: string(name='GuestClusters', position='Body'),
  guestLimits?: string(name='GuestLimits', position='Body'),
  guestMarkers?: string(name='GuestMarkers', position='Body'),
  meshLimit?: long(name='MeshLimit', position='Body'),
  meshMarker?: string(name='MeshMarker', position='Body'),
  namespace?: string(name='Namespace', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Query'),
}

model GetRegisteredServicesResponseBody = {
  requestId?: string(name='RequestId'),
  serviceDirectory?: {
    serviceListStages?: [ 
      {
        clusterId?: string(name='ClusterId'),
        marker?: string(name='Marker'),
      }
    ](name='ServiceListStages'),
    services?: map[string]ServiceDirectoryServicesValue(name='Services'),
  }(name='ServiceDirectory'),
  services?: [ string ](name='Services'),
}

model GetRegisteredServicesResponse = {
  headers: map[string]string(name='headers'),
  body: GetRegisteredServicesResponseBody(name='body'),
}

async function getRegisteredServices(request: GetRegisteredServicesRequest): GetRegisteredServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRegisteredServices', 'POST', '/', 'json', true, 'form', request);
}

model GetSaTokenRequest {
  namespace: string(name='Namespace', position='Body'),
  needRefresh?: boolean(name='NeedRefresh', position='Body'),
  serviceAccountName: string(name='ServiceAccountName', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model GetSaTokenResponseBody = {
  requestId?: string(name='RequestId'),
  token?: string(name='Token', description='Token of service account'),
}

model GetSaTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetSaTokenResponseBody(name='body'),
}

async function getSaToken(request: GetSaTokenRequest): GetSaTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSaToken', 'POST', '/', 'json', true, 'form', request);
}

model GetServiceMeshSlbRequest {
  serviceMeshId: string(name='ServiceMeshId', position='Query'),
}

model GetServiceMeshSlbResponseBody = {
  data?: [ 
    {
      loadBalancerId?: string(name='LoadBalancerId'),
      serverHealthStatus?: string(name='ServerHealthStatus'),
      status?: string(name='Status'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model GetServiceMeshSlbResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceMeshSlbResponseBody(name='body'),
}

async function getServiceMeshSlb(request: GetServiceMeshSlbRequest): GetServiceMeshSlbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceMeshSlb', 'POST', '/', 'json', false, 'json', request);
}

model GetServiceRegistrySourceRequest {
  serviceMeshId: string(name='ServiceMeshId', position='Query'),
}

model GetServiceRegistrySourceResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  status?: string(name='Status'),
}

model GetServiceRegistrySourceResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceRegistrySourceResponseBody(name='body'),
}

async function getServiceRegistrySource(request: GetServiceRegistrySourceRequest): GetServiceRegistrySourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceRegistrySource', 'POST', '/', 'json', false, 'json', request);
}

model GetVmAppMeshInfoRequest {
  serviceMeshId: string(name='ServiceMeshId', position='Query'),
}

model GetVmAppMeshInfoResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetVmAppMeshInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetVmAppMeshInfoResponseBody(name='body'),
}

async function getVmAppMeshInfo(request: GetVmAppMeshInfoRequest): GetVmAppMeshInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVmAppMeshInfo', 'GET', '/', 'json', false, 'json', request);
}

model GetVmMetaRequest {
  namespace?: string(name='Namespace', position='Query'),
  serviceAccount?: string(name='ServiceAccount', position='Query'),
  serviceMeshId: string(name='ServiceMeshId', position='Query'),
  trustDomain?: string(name='TrustDomain', position='Query'),
}

model GetVmMetaResponseBody = {
  requestId?: string(name='RequestId'),
  vmMetaInfo?: {
    envoyEnvContent?: string(name='EnvoyEnvContent'),
    hostsContent?: string(name='HostsContent'),
    tokenContent?: string(name='TokenContent'),
  }(name='VmMetaInfo'),
}

model GetVmMetaResponse = {
  headers: map[string]string(name='headers'),
  body: GetVmMetaResponseBody(name='body'),
}

async function getVmMeta(request: GetVmMetaRequest): GetVmMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVmMeta', 'GET', '/', 'json', false, 'json', request);
}

model InitializeASMRoleRequest {
}

model InitializeASMRoleResponseBody = {
  requestId?: string(name='RequestId'),
}

model InitializeASMRoleResponse = {
  headers: map[string]string(name='headers'),
  body: InitializeASMRoleResponseBody(name='body'),
}

async function initializeASMRole(request: InitializeASMRoleRequest): InitializeASMRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitializeASMRole', 'POST', '/', 'json', false, 'json', request);
}

model ListBuiltinEnvoyFilterRequest {
  id: string(name='Id', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model ListBuiltinEnvoyFilterResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model ListBuiltinEnvoyFilterResponse = {
  headers: map[string]string(name='headers'),
  body: ListBuiltinEnvoyFilterResponseBody(name='body'),
}

async function listBuiltinEnvoyFilter(request: ListBuiltinEnvoyFilterRequest): ListBuiltinEnvoyFilterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBuiltinEnvoyFilter', 'POST', '/', 'json', true, 'form', request);
}

model ModifyBuiltinEnvoyFilterRequest {
  id: string(name='Id', position='Body'),
  istioVersion: string(name='IstioVersion', position='Body'),
  name: string(name='Name', position='Body'),
  parameters: string(name='Parameters', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model ModifyBuiltinEnvoyFilterResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBuiltinEnvoyFilterResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBuiltinEnvoyFilterResponseBody(name='body'),
}

async function modifyBuiltinEnvoyFilter(request: ModifyBuiltinEnvoyFilterRequest): ModifyBuiltinEnvoyFilterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBuiltinEnvoyFilter', 'POST', '/', 'json', true, 'form', request);
}

model ModifyServiceMeshNameRequest {
  name: string(name='Name', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model ModifyServiceMeshNameResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyServiceMeshNameResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyServiceMeshNameResponseBody(name='body'),
}

async function modifyServiceMeshName(request: ModifyServiceMeshNameRequest): ModifyServiceMeshNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyServiceMeshName', 'POST', '/', 'json', true, 'form', request);
}

model ReActivateAuditRequest {
  enableAudit?: boolean(name='EnableAudit', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model ReActivateAuditResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model ReActivateAuditResponse = {
  headers: map[string]string(name='headers'),
  body: ReActivateAuditResponseBody(name='body'),
}

async function reActivateAudit(request: ReActivateAuditRequest): ReActivateAuditResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReActivateAudit', 'POST', '/', 'json', true, 'form', request);
}

model RemoveBuiltinEnvoyFilterRequest {
  id: string(name='Id', position='Body'),
  istioVersion: string(name='IstioVersion', position='Body'),
  name: string(name='Name', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model RemoveBuiltinEnvoyFilterResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveBuiltinEnvoyFilterResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveBuiltinEnvoyFilterResponseBody(name='body'),
}

async function removeBuiltinEnvoyFilter(request: RemoveBuiltinEnvoyFilterRequest): RemoveBuiltinEnvoyFilterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveBuiltinEnvoyFilter', 'POST', '/', 'json', true, 'form', request);
}

model RemoveClusterFromServiceMeshRequest {
  clusterId: string(name='ClusterId', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model RemoveClusterFromServiceMeshResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RemoveClusterFromServiceMeshResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveClusterFromServiceMeshResponseBody(name='body'),
}

async function removeClusterFromServiceMesh(request: RemoveClusterFromServiceMeshRequest): RemoveClusterFromServiceMeshResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveClusterFromServiceMesh', 'POST', '/', 'json', true, 'form', request);
}

model RemoveVMFromServiceMeshRequest {
  ecsId: string(name='EcsId', position='Query'),
  serviceMeshId: string(name='ServiceMeshId', position='Query'),
}

model RemoveVMFromServiceMeshResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RemoveVMFromServiceMeshResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveVMFromServiceMeshResponseBody(name='body'),
}

async function removeVMFromServiceMesh(request: RemoveVMFromServiceMeshRequest): RemoveVMFromServiceMeshResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveVMFromServiceMesh', 'POST', '/', 'json', false, 'json', request);
}

model RemoveVmAppFromMeshRequest {
  namespace: string(name='Namespace', position='Query'),
  serviceMeshId: string(name='ServiceMeshId', position='Query'),
  serviceName: string(name='ServiceName', position='Query'),
}

model RemoveVmAppFromMeshResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model RemoveVmAppFromMeshResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveVmAppFromMeshResponseBody(name='body'),
}

async function removeVmAppFromMesh(request: RemoveVmAppFromMeshRequest): RemoveVmAppFromMeshResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveVmAppFromMesh', 'POST', '/', 'json', false, 'json', request);
}

model RevokeKubeconfigRequest {
  privateIpAddress?: boolean(name='PrivateIpAddress', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model RevokeKubeconfigResponseBody = {
  kubeconfig?: string(name='Kubeconfig'),
  requestId?: string(name='RequestId'),
}

model RevokeKubeconfigResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeKubeconfigResponseBody(name='body'),
}

async function revokeKubeconfig(request: RevokeKubeconfigRequest): RevokeKubeconfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeKubeconfig', 'POST', '/', 'json', true, 'form', request);
}

model RunDiagnosisRequest {
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model RunDiagnosisResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model RunDiagnosisResponse = {
  headers: map[string]string(name='headers'),
  body: RunDiagnosisResponseBody(name='body'),
}

async function runDiagnosis(request: RunDiagnosisRequest): RunDiagnosisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunDiagnosis', 'POST', '/', 'json', true, 'form', request);
}

model SetServiceRegistrySourceRequest {
  config: map[string]any(name='Config', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model SetServiceRegistrySourceResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model SetServiceRegistrySourceResponse = {
  headers: map[string]string(name='headers'),
  body: SetServiceRegistrySourceResponseBody(name='body'),
}

async function setServiceRegistrySource(request: SetServiceRegistrySourceRequest): SetServiceRegistrySourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetServiceRegistrySource', 'POST', '/', 'json', true, 'form', request);
}

model UpdateASMGatewayRequest {
  body?: string(name='Body', position='Body'),
  istioGatewayName?: string(name='IstioGatewayName', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model UpdateASMGatewayResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateASMGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateASMGatewayResponseBody(name='body'),
}

async function updateASMGateway(request: UpdateASMGatewayRequest): UpdateASMGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateASMGateway', 'POST', '/', 'json', true, 'form', request);
}

model UpdateASMGatewayImportedServicesRequest {
  ASMGatewayName?: string(name='ASMGatewayName', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
  serviceNames?: string(name='ServiceNames', position='Body'),
  serviceNamespace?: string(name='ServiceNamespace', position='Body'),
}

model UpdateASMGatewayImportedServicesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateASMGatewayImportedServicesResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateASMGatewayImportedServicesResponseBody(name='body'),
}

async function updateASMGatewayImportedServices(request: UpdateASMGatewayImportedServicesRequest): UpdateASMGatewayImportedServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateASMGatewayImportedServices', 'POST', '/', 'json', true, 'form', request);
}

model UpdateControlPlaneLogAlertActionPolicyRequest {
  actionPolicyId?: string(name='ActionPolicyId', position='Body'),
  ruleId?: string(name='RuleId', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model UpdateControlPlaneLogAlertActionPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateControlPlaneLogAlertActionPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateControlPlaneLogAlertActionPolicyResponseBody(name='body'),
}

async function updateControlPlaneLogAlertActionPolicy(request: UpdateControlPlaneLogAlertActionPolicyRequest): UpdateControlPlaneLogAlertActionPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateControlPlaneLogAlertActionPolicy', 'POST', '/', 'json', true, 'form', request);
}

model UpdateControlPlaneLogConfigRequest {
  enabled: boolean(name='Enabled', position='Body'),
  project?: string(name='Project', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model UpdateControlPlaneLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateControlPlaneLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateControlPlaneLogConfigResponseBody(name='body'),
}

async function updateControlPlaneLogConfig(request: UpdateControlPlaneLogConfigRequest): UpdateControlPlaneLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateControlPlaneLogConfig', 'POST', '/', 'json', true, 'form', request);
}

model UpdateExtensionProviderRequest {
  config?: string(name='Config', position='Body'),
  name?: string(name='Name', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
  type?: string(name='Type', position='Body'),
}

model UpdateExtensionProviderResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateExtensionProviderResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateExtensionProviderResponseBody(name='body'),
}

async function updateExtensionProvider(request: UpdateExtensionProviderRequest): UpdateExtensionProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateExtensionProvider', 'POST', '/', 'json', true, 'form', request);
}

model UpdateIstioInjectionConfigRequest {
  enableIstioInjection?: boolean(name='EnableIstioInjection', position='Body'),
  enableSidecarSetInjection?: boolean(name='EnableSidecarSetInjection', position='Body'),
  namespace: string(name='Namespace', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
}

model UpdateIstioInjectionConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateIstioInjectionConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateIstioInjectionConfigResponseBody(name='body'),
}

async function updateIstioInjectionConfig(request: UpdateIstioInjectionConfigRequest): UpdateIstioInjectionConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateIstioInjectionConfig', 'POST', '/', 'json', true, 'form', request);
}

model UpdateMeshFeatureRequest {
  accessLogEnabled?: boolean(name='AccessLogEnabled', position='Body'),
  accessLogFile?: string(name='AccessLogFile', position='Body'),
  accessLogFormat?: string(name='AccessLogFormat', position='Body'),
  accessLogProject?: string(name='AccessLogProject', position='Body'),
  accessLogServiceEnabled?: boolean(name='AccessLogServiceEnabled', position='Body'),
  accessLogServiceHost?: string(name='AccessLogServiceHost', position='Body'),
  accessLogServicePort?: int32(name='AccessLogServicePort', position='Body'),
  auditProject?: string(name='AuditProject', position='Body'),
  autoInjectionPolicyEnabled?: boolean(name='AutoInjectionPolicyEnabled', position='Body'),
  CRAggregationEnabled?: boolean(name='CRAggregationEnabled', position='Body'),
  cniEnabled?: boolean(name='CniEnabled', position='Body'),
  cniExcludeNamespaces?: string(name='CniExcludeNamespaces', position='Body'),
  configSourceEnabled?: boolean(name='ConfigSourceEnabled', position='Body'),
  configSourceNacosID?: string(name='ConfigSourceNacosID', position='Body'),
  customizedPrometheus?: boolean(name='CustomizedPrometheus', position='Body'),
  customizedZipkin?: boolean(name='CustomizedZipkin', position='Body'),
  DNSProxyingEnabled?: boolean(name='DNSProxyingEnabled', position='Body'),
  discoverySelectors?: string(name='DiscoverySelectors', position='Body'),
  dubboFilterEnabled?: boolean(name='DubboFilterEnabled', position='Body'),
  enableAudit?: boolean(name='EnableAudit', position='Body'),
  enableCRHistory?: boolean(name='EnableCRHistory', position='Body'),
  enableNamespacesByDefault?: boolean(name='EnableNamespacesByDefault', position='Body'),
  enableSDSServer?: boolean(name='EnableSDSServer', position='Body'),
  excludeIPRanges?: string(name='ExcludeIPRanges', position='Body'),
  excludeInboundPorts?: string(name='ExcludeInboundPorts', position='Body'),
  excludeOutboundPorts?: string(name='ExcludeOutboundPorts', position='Body'),
  filterGatewayClusterConfig?: boolean(name='FilterGatewayClusterConfig', position='Body'),
  gatewayAPIEnabled?: boolean(name='GatewayAPIEnabled', position='Body'),
  http10Enabled?: boolean(name='Http10Enabled', position='Body'),
  includeIPRanges?: string(name='IncludeIPRanges', position='Body'),
  includeInboundPorts?: string(name='IncludeInboundPorts', position='Body'),
  kialiEnabled?: boolean(name='KialiEnabled', position='Body'),
  lifecycle?: string(name='Lifecycle', position='Body'),
  localityLBConf?: string(name='LocalityLBConf', position='Body'),
  localityLoadBalancing?: boolean(name='LocalityLoadBalancing', position='Body'),
  MSEEnabled?: boolean(name='MSEEnabled', position='Body'),
  multiBufferEnabled?: boolean(name='MultiBufferEnabled', position='Body'),
  multiBufferPollDelay?: string(name='MultiBufferPollDelay', position='Body'),
  mysqlFilterEnabled?: boolean(name='MysqlFilterEnabled', position='Body'),
  OPALimitCPU?: string(name='OPALimitCPU', position='Body'),
  OPALimitMemory?: string(name='OPALimitMemory', position='Body'),
  OPALogLevel?: string(name='OPALogLevel', position='Body'),
  OPARequestCPU?: string(name='OPARequestCPU', position='Body'),
  OPARequestMemory?: string(name='OPARequestMemory', position='Body'),
  opaEnabled?: boolean(name='OpaEnabled', position='Body'),
  openAgentPolicy?: boolean(name='OpenAgentPolicy', position='Body'),
  outboundTrafficPolicy?: string(name='OutboundTrafficPolicy', position='Body'),
  prometheusUrl?: string(name='PrometheusUrl', position='Body'),
  proxyInitCPUResourceLimit?: string(name='ProxyInitCPUResourceLimit', position='Body'),
  proxyInitCPUResourceRequest?: string(name='ProxyInitCPUResourceRequest', position='Body'),
  proxyInitMemoryResourceLimit?: string(name='ProxyInitMemoryResourceLimit', position='Body'),
  proxyInitMemoryResourceRequest?: string(name='ProxyInitMemoryResourceRequest', position='Body'),
  proxyLimitCPU?: string(name='ProxyLimitCPU', position='Body'),
  proxyLimitMemory?: string(name='ProxyLimitMemory', position='Body'),
  proxyRequestCPU?: string(name='ProxyRequestCPU', position='Body'),
  proxyRequestMemory?: string(name='ProxyRequestMemory', position='Body'),
  redisFilterEnabled?: boolean(name='RedisFilterEnabled', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
  sidecarInjectorLimitCPU?: string(name='SidecarInjectorLimitCPU', position='Body'),
  sidecarInjectorLimitMemory?: string(name='SidecarInjectorLimitMemory', position='Body'),
  sidecarInjectorRequestCPU?: string(name='SidecarInjectorRequestCPU', position='Body'),
  sidecarInjectorRequestMemory?: string(name='SidecarInjectorRequestMemory', position='Body'),
  sidecarInjectorWebhookAsYaml?: string(name='SidecarInjectorWebhookAsYaml', position='Body'),
  telemetry?: boolean(name='Telemetry', position='Body'),
  terminationDrainDuration?: string(name='TerminationDrainDuration', position='Body'),
  thriftFilterEnabled?: boolean(name='ThriftFilterEnabled', position='Body'),
  traceSampling?: float(name='TraceSampling', position='Body'),
  tracing?: boolean(name='Tracing', position='Body'),
  webAssemblyFilterEnabled?: boolean(name='WebAssemblyFilterEnabled', position='Body'),
}

model UpdateMeshFeatureResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateMeshFeatureResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateMeshFeatureResponseBody(name='body'),
}

async function updateMeshFeature(request: UpdateMeshFeatureRequest): UpdateMeshFeatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMeshFeature', 'POST', '/', 'json', true, 'form', request);
}

model UpdateNamespaceScopeSidecarConfigRequest {
  excludeIPRanges?: string(name='ExcludeIPRanges', position='Body'),
  excludeInboundPorts?: string(name='ExcludeInboundPorts', position='Body'),
  excludeOutboundPorts?: string(name='ExcludeOutboundPorts', position='Body'),
  includeIPRanges?: string(name='IncludeIPRanges', position='Body'),
  includeInboundPorts?: string(name='IncludeInboundPorts', position='Body'),
  includeOutboundPorts?: string(name='IncludeOutboundPorts', position='Body'),
  istioDNSProxyEnabled?: boolean(name='IstioDNSProxyEnabled', position='Body'),
  lifecycle?: string(name='Lifecycle', position='Body'),
  namespace?: string(name='Namespace', position='Body'),
  proxyInitCPUResourceLimit?: string(name='ProxyInitCPUResourceLimit', position='Body'),
  proxyInitCPUResourceRequest?: string(name='ProxyInitCPUResourceRequest', position='Body'),
  proxyInitMemoryResourceLimit?: string(name='ProxyInitMemoryResourceLimit', position='Body'),
  proxyInitMemoryResourceRequest?: string(name='ProxyInitMemoryResourceRequest', position='Body'),
  serviceMeshId: string(name='ServiceMeshId', position='Body'),
  sidecarProxyCPUResourceLimit?: string(name='SidecarProxyCPUResourceLimit', position='Body'),
  sidecarProxyCPUResourceRequest?: string(name='SidecarProxyCPUResourceRequest', position='Body'),
  sidecarProxyMemoryResourceLimit?: string(name='SidecarProxyMemoryResourceLimit', position='Body'),
  sidecarProxyMemoryResourceRequest?: string(name='SidecarProxyMemoryResourceRequest', position='Body'),
  terminationDrainDuration?: string(name='TerminationDrainDuration', position='Body'),
}

model UpdateNamespaceScopeSidecarConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateNamespaceScopeSidecarConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateNamespaceScopeSidecarConfigResponseBody(name='body'),
}

async function updateNamespaceScopeSidecarConfig(request: UpdateNamespaceScopeSidecarConfigRequest): UpdateNamespaceScopeSidecarConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateNamespaceScopeSidecarConfig', 'POST', '/', 'json', true, 'form', request);
}

model UpgradeMeshVersionRequest {
  serviceMeshId: string(name='ServiceMeshId', position='Query'),
}

model UpgradeMeshVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpgradeMeshVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeMeshVersionResponseBody(name='body'),
}

async function upgradeMeshVersion(request: UpgradeMeshVersionRequest): UpgradeMeshVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeMeshVersion', 'POST', '/', 'json', false, 'json', request);
}

model CCMVersionsValue = {
  queryState?: string(name='QueryState'),
  version?: string(name='Version'),
  SLBGracefulDrainSupport?: boolean(name='SLBGracefulDrainSupport'),
  clusterId?: string(name='ClusterId'),
  message?: string(name='Message'),
}

model GatewaySLBValue = {
  SLBAddress?: string(name='SLBAddress'),
  loadBalancerId?: string(name='LoadBalancerId'),
  backendServers?: {
    port?: long(name='Port'),
    protocol?: string(name='Protocol'),
    serverIp?: string(name='ServerIp'),
    serverHealthStatus?: string(name='ServerHealthStatus'),
    serverId?: string(name='ServerId'),
    vpcId?: string(name='VpcId'),
    listenerPort?: long(name='ListenerPort'),
    weight?: string(name='Weight'),
    description?: string(name='Description'),
    eniHost?: string(name='EniHost'),
    type?: string(name='Type'),
  }(name='BackendServers'),
  SLBHealthCheckState?: string(name='SLBHealthCheckState'),
}

model UpgradeDetailGatewayStatusRecordValue = {
  status?: string(name='Status'),
  message?: string(name='Message'),
  version?: string(name='Version'),
}

model ServiceDirectoryServicesValue = {
  ports?: [ 
    {
      name?: string(name='Name'),
      protocol?: string(name='Protocol'),
      port?: int32(name='Port'),
      targetPort?: int32(name='TargetPort'),
      nodePort?: int32(name='NodePort'),
    }
  ](name='Ports'),
  serviceName?: string(name='ServiceName'),
  namespace?: string(name='Namespace'),
  serviceType?: string(name='ServiceType'),
  labels?: map[string]string(name='Labels'),
  clusterIds?: [ string ](name='ClusterIds'),
}

model ServiceDirectoryServicesValueValue = {
  name?: string(name='Name'),
  protocol?: string(name='Protocol'),
  port?: int32(name='Port'),
  targetPort?: int32(name='TargetPort'),
  nodePort?: int32(name='NodePort'),
}

