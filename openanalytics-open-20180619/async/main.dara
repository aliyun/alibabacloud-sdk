/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'openanalytics-open';
  @version = '2018-06-19';
  @endpointRule = 'central';
  @endpointMap = {
    cn-beijing = 'openanalytics.cn-beijing.aliyuncs.com',
    cn-zhangjiakou = 'openanalytics.cn-zhangjiakou.aliyuncs.com',
    cn-hangzhou = 'openanalytics.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'openanalytics.cn-shanghai.aliyuncs.com',
    cn-shenzhen = 'openanalytics.cn-shenzhen.aliyuncs.com',
    cn-hongkong = 'openanalytics.cn-hongkong.aliyuncs.com',
    ap-southeast-1 = 'openanalytics.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'datalakeanalytics.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'openanalytics.ap-southeast-3.aliyuncs.com',
    ap-northeast-1 = 'datalakeanalytics.ap-northeast-1.aliyuncs.com',
    eu-west-1 = 'openanalytics.eu-west-1.aliyuncs.com',
    us-west-1 = 'openanalytics.us-west-1.aliyuncs.com',
    us-east-1 = 'datalakeanalytics.us-east-1.aliyuncs.com',
    eu-central-1 = 'datalakeanalytics.eu-central-1.aliyuncs.com',
    ap-south-1 = 'openanalytics.ap-south-1.aliyuncs.com',
    ap-northeast-2-pop = 'openanalytics.ap-northeast-1.aliyuncs.com',
    ap-southeast-5 = 'openanalytics.ap-southeast-5.aliyuncs.com',
    cn-beijing-finance-1 = 'openanalytics.aliyuncs.com',
    cn-beijing-finance-pop = 'openanalytics.aliyuncs.com',
    cn-beijing-gov-1 = 'openanalytics.aliyuncs.com',
    cn-beijing-nu16-b01 = 'openanalytics.aliyuncs.com',
    cn-chengdu = 'openanalytics.aliyuncs.com',
    cn-edge-1 = 'openanalytics.aliyuncs.com',
    cn-fujian = 'openanalytics.aliyuncs.com',
    cn-haidian-cm12-c01 = 'openanalytics.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'openanalytics.aliyuncs.com',
    cn-hangzhou-finance = 'openanalytics.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'openanalytics.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'openanalytics.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'openanalytics.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'openanalytics.aliyuncs.com',
    cn-hangzhou-test-306 = 'openanalytics.aliyuncs.com',
    cn-hongkong-finance-pop = 'openanalytics.aliyuncs.com',
    cn-huhehaote = 'openanalytics.cn-huhehaote.aliyuncs.com',
    cn-north-2-gov-1 = 'openanalytics.aliyuncs.com',
    cn-qingdao = 'openanalytics.cn-qingdao.aliyuncs.com',
    cn-qingdao-nebula = 'openanalytics.aliyuncs.com',
    cn-shanghai-et15-b01 = 'openanalytics.aliyuncs.com',
    cn-shanghai-et2-b01 = 'openanalytics.aliyuncs.com',
    cn-shanghai-finance-1 = 'openanalytics.aliyuncs.com',
    cn-shanghai-inner = 'openanalytics.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'openanalytics.aliyuncs.com',
    cn-shenzhen-finance-1 = 'openanalytics.aliyuncs.com',
    cn-shenzhen-inner = 'openanalytics.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'openanalytics.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'openanalytics.aliyuncs.com',
    cn-wuhan = 'openanalytics.aliyuncs.com',
    cn-yushanfang = 'openanalytics.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'openanalytics.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'openanalytics.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'openanalytics.aliyuncs.com',
    eu-west-1-oxs = 'openanalytics.ap-northeast-1.aliyuncs.com',
    me-east-1 = 'openanalytics.me-east-1.aliyuncs.com',
    rus-west-1-pop = 'openanalytics.ap-northeast-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CancelSparkStatementRequest {
  jobId: string(name='JobId', position='Body'),
  statementId: string(name='StatementId', position='Body'),
}

model CancelSparkStatementResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model CancelSparkStatementResponse = {
  headers: map[string]string(name='headers'),
  body: CancelSparkStatementResponseBody(name='body'),
}

async function cancelSparkStatement(request: CancelSparkStatementRequest): CancelSparkStatementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelSparkStatement', 'POST', '/', 'json', true, 'form', request);
}

model CreateInstanceRequest {
  chargeType: string(name='ChargeType', position='Body'),
  component: string(name='Component', position='Body'),
  instanceType: string(name='InstanceType', position='Body'),
  regionId?: string(name='RegionId', position='Body'),
}

model CreateInstanceResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorInfo?: string(name='ErrorInfo'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstance', 'POST', '/', 'json', true, 'form', request);
}

model ExecuteSparkStatementRequest {
  code: string(name='Code', position='Body'),
  jobId: string(name='JobId', position='Body'),
  kind?: string(name='Kind', position='Body'),
}

model ExecuteSparkStatementResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model ExecuteSparkStatementResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteSparkStatementResponseBody(name='body'),
}

async function executeSparkStatement(request: ExecuteSparkStatementRequest): ExecuteSparkStatementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteSparkStatement', 'POST', '/', 'json', true, 'form', request);
}

model GetJobAttemptLogRequest {
  jobAttemptId: string(name='JobAttemptId', position='Body'),
  jobId: string(name='JobId', position='Body'),
  vcName: string(name='VcName', position='Body'),
}

model GetJobAttemptLogResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetJobAttemptLogResponse = {
  headers: map[string]string(name='headers'),
  body: GetJobAttemptLogResponseBody(name='body'),
}

async function getJobAttemptLog(request: GetJobAttemptLogRequest): GetJobAttemptLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetJobAttemptLog', 'POST', '/', 'json', true, 'form', request);
}

model GetJobDetailRequest {
  jobId: string(name='JobId', position='Body'),
  vcName: string(name='VcName', position='Body'),
}

model GetJobDetailResponseBody = {
  jobDetail?: {
    createTime?: string(name='CreateTime'),
    createTimeValue?: string(name='CreateTimeValue'),
    detail?: string(name='Detail'),
    driverResourceSpec?: string(name='DriverResourceSpec'),
    executorInstances?: string(name='ExecutorInstances'),
    executorResourceSpec?: string(name='ExecutorResourceSpec'),
    jobId?: string(name='JobId'),
    jobName?: string(name='JobName'),
    lastJobAttemptId?: string(name='LastJobAttemptId'),
    sparkUI?: string(name='SparkUI'),
    status?: string(name='Status'),
    submitTime?: string(name='SubmitTime'),
    submitTimeValue?: string(name='SubmitTimeValue'),
    updateTime?: string(name='UpdateTime'),
    updateTimeValue?: string(name='UpdateTimeValue'),
    vcName?: string(name='VcName'),
  }(name='JobDetail'),
  requestId?: string(name='RequestId'),
}

model GetJobDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetJobDetailResponseBody(name='body'),
}

async function getJobDetail(request: GetJobDetailRequest): GetJobDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetJobDetail', 'POST', '/', 'json', true, 'form', request);
}

model GetJobLogRequest {
  jobId: string(name='JobId', position='Body'),
  vcName: string(name='VcName', position='Body'),
}

model GetJobLogResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetJobLogResponse = {
  headers: map[string]string(name='headers'),
  body: GetJobLogResponseBody(name='body'),
}

async function getJobLog(request: GetJobLogRequest): GetJobLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetJobLog', 'POST', '/', 'json', true, 'form', request);
}

model GetJobStatusRequest {
  jobId: string(name='JobId', position='Body'),
  vcName: string(name='VcName', position='Body'),
}

model GetJobStatusResponseBody = {
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetJobStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetJobStatusResponseBody(name='body'),
}

async function getJobStatus(request: GetJobStatusRequest): GetJobStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetJobStatus', 'POST', '/', 'json', true, 'form', request);
}

model GetSparkSessionStateRequest {
  jobId: string(name='JobId', position='Body'),
}

model GetSparkSessionStateResponseBody = {
  requestId?: string(name='RequestId'),
  state?: string(name='State'),
}

model GetSparkSessionStateResponse = {
  headers: map[string]string(name='headers'),
  body: GetSparkSessionStateResponseBody(name='body'),
}

async function getSparkSessionState(request: GetSparkSessionStateRequest): GetSparkSessionStateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSparkSessionState', 'POST', '/', 'json', true, 'form', request);
}

model GetSparkStatementRequest {
  jobId: string(name='JobId', position='Body'),
  statementId: int32(name='StatementId', minimum=0, position='Body'),
}

model GetSparkStatementResponseBody = {
  data?: {
    code?: string(name='Code'),
    completedTime?: long(name='CompletedTime'),
    id?: int32(name='Id'),
    output?: string(name='Output'),
    process?: float(name='Process'),
    startedTime?: long(name='StartedTime'),
    state?: string(name='State'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetSparkStatementResponse = {
  headers: map[string]string(name='headers'),
  body: GetSparkStatementResponseBody(name='body'),
}

async function getSparkStatement(request: GetSparkStatementRequest): GetSparkStatementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSparkStatement', 'POST', '/', 'json', true, 'form', request);
}

model KillSparkJobRequest {
  jobId: string(name='JobId', position='Body'),
  vcName: string(name='VcName', position='Body'),
}

model KillSparkJobResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model KillSparkJobResponse = {
  headers: map[string]string(name='headers'),
  body: KillSparkJobResponseBody(name='body'),
}

async function killSparkJob(request: KillSparkJobRequest): KillSparkJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'KillSparkJob', 'POST', '/', 'json', true, 'form', request);
}

model ListSparkJobRequest {
  condition?: map[string]any(name='Condition', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  vcName: string(name='VcName', position='Query'),
}

model ListSparkJobResponseBody = {
  dataResult?: {
    jobList?: [ 
      {
        createTime?: string(name='CreateTime'),
        createTimeValue?: string(name='CreateTimeValue'),
        detail?: string(name='Detail'),
        driverResourceSpec?: string(name='DriverResourceSpec'),
        executorInstances?: string(name='ExecutorInstances'),
        executorResourceSpec?: string(name='ExecutorResourceSpec'),
        jobId?: string(name='JobId'),
        jobName?: string(name='JobName'),
        sparkUI?: string(name='SparkUI'),
        status?: string(name='Status'),
        submitTime?: string(name='SubmitTime'),
        submitTimeValue?: string(name='SubmitTimeValue'),
        updateTime?: string(name='UpdateTime'),
        updateTimeValue?: string(name='UpdateTimeValue'),
        vcName?: string(name='VcName'),
      }
    ](name='JobList'),
    pageNumber?: string(name='PageNumber'),
    pageSize?: string(name='PageSize'),
    totalCount?: string(name='TotalCount'),
  }(name='DataResult'),
  requestId?: string(name='RequestId'),
}

model ListSparkJobResponse = {
  headers: map[string]string(name='headers'),
  body: ListSparkJobResponseBody(name='body'),
}

async function listSparkJob(request: ListSparkJobRequest): ListSparkJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSparkJob', 'POST', '/', 'json', false, 'json', request);
}

model ListSparkJobAttemptRequest {
  condition?: map[string]any(name='Condition', position='Query'),
  jobId: string(name='JobId', position='Query'),
  pageNumber: int32(name='PageNumber', minimum=1, maximum=1000, position='Query'),
  pageSize: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  vcName: string(name='VcName', position='Query'),
}

model ListSparkJobAttemptResponseBody = {
  dataResult?: {
    jobAttemptList?: [ 
      {
        createTime?: string(name='CreateTime'),
        createTimeValue?: string(name='CreateTimeValue'),
        detail?: string(name='Detail'),
        durationTime?: string(name='DurationTime'),
        durationTimeValue?: string(name='DurationTimeValue'),
        jobAttemptId?: string(name='JobAttemptId'),
        jobId?: string(name='JobId'),
        jobName?: string(name='JobName'),
        sparkUI?: string(name='SparkUI'),
        status?: string(name='Status'),
        terminatedTime?: string(name='TerminatedTime'),
        terminatedTimeValue?: string(name='TerminatedTimeValue'),
        vcName?: string(name='VcName'),
      }
    ](name='JobAttemptList'),
    pageNumber?: string(name='PageNumber'),
    pageSize?: string(name='PageSize'),
    totalCount?: string(name='TotalCount'),
  }(name='DataResult'),
  requestId?: string(name='RequestId'),
}

model ListSparkJobAttemptResponse = {
  headers: map[string]string(name='headers'),
  body: ListSparkJobAttemptResponseBody(name='body'),
}

async function listSparkJobAttempt(request: ListSparkJobAttemptRequest): ListSparkJobAttemptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSparkJobAttempt', 'POST', '/', 'json', false, 'json', request);
}

model ListSparkStatementsRequest {
  jobId: string(name='JobId', position='Body'),
}

model ListSparkStatementsResponseBody = {
  requestId?: string(name='RequestId'),
  statements?: [ 
    {
      code?: string(name='Code'),
      completedTime?: long(name='CompletedTime'),
      id?: int32(name='Id'),
      output?: string(name='Output'),
      progress?: float(name='Progress'),
      startedTime?: long(name='StartedTime'),
      state?: string(name='State'),
    }
  ](name='Statements'),
}

model ListSparkStatementsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSparkStatementsResponseBody(name='body'),
}

async function listSparkStatements(request: ListSparkStatementsRequest): ListSparkStatementsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSparkStatements', 'POST', '/', 'json', true, 'form', request);
}

model ReleaseInstanceRequest {
  instanceId: string(name='InstanceId', position='Body'),
  regionId?: string(name='RegionId', position='Body'),
}

model ReleaseInstanceResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorInfo?: string(name='ErrorInfo'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model ReleaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseInstanceResponseBody(name='body'),
}

async function releaseInstance(request: ReleaseInstanceRequest): ReleaseInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseInstance', 'POST', '/', 'json', true, 'form', request);
}

model SubmitSparkJobRequest {
  configJson: string(name='ConfigJson', position='Body'),
  vcName: string(name='VcName', position='Body'),
}

model SubmitSparkJobResponseBody = {
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
}

model SubmitSparkJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitSparkJobResponseBody(name='body'),
}

async function submitSparkJob(request: SubmitSparkJobRequest): SubmitSparkJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitSparkJob', 'POST', '/', 'json', true, 'form', request);
}

model SubmitSparkSQLRequest {
  sql: string(name='Sql', position='Body'),
  vcName: string(name='VcName', position='Body'),
}

model SubmitSparkSQLResponseBody = {
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
}

model SubmitSparkSQLResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitSparkSQLResponseBody(name='body'),
}

async function submitSparkSQL(request: SubmitSparkSQLRequest): SubmitSparkSQLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitSparkSQL', 'POST', '/', 'json', true, 'form', request);
}

model ValidateVirtualClusterNameRequest {
  vcName?: string(name='VcName', position='Body'),
}

model ValidateVirtualClusterNameResponseBody = {
  data?: {
    legal?: string(name='Legal'),
    message?: string(name='Message'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model ValidateVirtualClusterNameResponse = {
  headers: map[string]string(name='headers'),
  body: ValidateVirtualClusterNameResponseBody(name='body'),
}

async function validateVirtualClusterName(request: ValidateVirtualClusterNameRequest): ValidateVirtualClusterNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ValidateVirtualClusterName', 'POST', '/', 'json', true, 'form', request);
}

