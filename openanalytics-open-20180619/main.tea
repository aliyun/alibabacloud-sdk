/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  @endpointMap = {
    cn-beijing = 'openanalytics.cn-beijing.aliyuncs.com',
    cn-zhangjiakou = 'openanalytics.cn-zhangjiakou.aliyuncs.com',
    cn-hangzhou = 'openanalytics.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'openanalytics.cn-shanghai.aliyuncs.com',
    cn-shenzhen = 'openanalytics.cn-shenzhen.aliyuncs.com',
    cn-hongkong = 'openanalytics.cn-hongkong.aliyuncs.com',
    ap-southeast-1 = 'openanalytics.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'datalakeanalytics.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'openanalytics.ap-southeast-3.aliyuncs.com',
    ap-northeast-1 = 'datalakeanalytics.ap-northeast-1.aliyuncs.com',
    eu-west-1 = 'openanalytics.eu-west-1.aliyuncs.com',
    us-west-1 = 'openanalytics.us-west-1.aliyuncs.com',
    us-east-1 = 'datalakeanalytics.us-east-1.aliyuncs.com',
    eu-central-1 = 'datalakeanalytics.eu-central-1.aliyuncs.com',
    ap-south-1 = 'openanalytics.ap-south-1.aliyuncs.com',
    ap-northeast-2-pop = 'openanalytics.ap-northeast-1.aliyuncs.com',
    ap-southeast-5 = 'openanalytics.ap-southeast-5.aliyuncs.com',
    cn-beijing-finance-1 = 'openanalytics.aliyuncs.com',
    cn-beijing-finance-pop = 'openanalytics.aliyuncs.com',
    cn-beijing-gov-1 = 'openanalytics.aliyuncs.com',
    cn-beijing-nu16-b01 = 'openanalytics.aliyuncs.com',
    cn-chengdu = 'openanalytics.aliyuncs.com',
    cn-edge-1 = 'openanalytics.aliyuncs.com',
    cn-fujian = 'openanalytics.aliyuncs.com',
    cn-haidian-cm12-c01 = 'openanalytics.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'openanalytics.aliyuncs.com',
    cn-hangzhou-finance = 'openanalytics.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'openanalytics.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'openanalytics.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'openanalytics.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'openanalytics.aliyuncs.com',
    cn-hangzhou-test-306 = 'openanalytics.aliyuncs.com',
    cn-hongkong-finance-pop = 'openanalytics.aliyuncs.com',
    cn-huhehaote = 'openanalytics.cn-huhehaote.aliyuncs.com',
    cn-north-2-gov-1 = 'openanalytics.aliyuncs.com',
    cn-qingdao = 'openanalytics.cn-qingdao.aliyuncs.com',
    cn-qingdao-nebula = 'openanalytics.aliyuncs.com',
    cn-shanghai-et15-b01 = 'openanalytics.aliyuncs.com',
    cn-shanghai-et2-b01 = 'openanalytics.aliyuncs.com',
    cn-shanghai-finance-1 = 'openanalytics.aliyuncs.com',
    cn-shanghai-inner = 'openanalytics.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'openanalytics.aliyuncs.com',
    cn-shenzhen-finance-1 = 'openanalytics.aliyuncs.com',
    cn-shenzhen-inner = 'openanalytics.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'openanalytics.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'openanalytics.aliyuncs.com',
    cn-wuhan = 'openanalytics.aliyuncs.com',
    cn-yushanfang = 'openanalytics.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'openanalytics.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'openanalytics.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'openanalytics.aliyuncs.com',
    eu-west-1-oxs = 'openanalytics.ap-northeast-1.aliyuncs.com',
    me-east-1 = 'openanalytics.me-east-1.aliyuncs.com',
    rus-west-1-pop = 'openanalytics.ap-northeast-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('openanalytics-open', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CancelSparkStatementRequest {
  jobId?: string(name='JobId'),
  statementId?: string(name='StatementId'),
}

model CancelSparkStatementResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model CancelSparkStatementResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelSparkStatementResponseBody(name='body'),
}

async function cancelSparkStatementWithOptions(request: CancelSparkStatementRequest, runtime: Util.RuntimeOptions): CancelSparkStatementResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.statementId)) {
    body['StatementId'] = request.statementId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CancelSparkStatement',
    version = '2018-06-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelSparkStatement(request: CancelSparkStatementRequest): CancelSparkStatementResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelSparkStatementWithOptions(request, runtime);
}

model CreateInstanceRequest {
  chargeType?: string(name='ChargeType'),
  component?: string(name='Component'),
  instanceType?: string(name='InstanceType'),
  regionId?: string(name='RegionId'),
}

model CreateInstanceResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorInfo?: string(name='ErrorInfo'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.chargeType)) {
    body['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.component)) {
    body['Component'] = request.component;
  }
  if (!Util.isUnset(request.instanceType)) {
    body['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstance',
    version = '2018-06-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model ExecuteSparkStatementRequest {
  code?: string(name='Code'),
  jobId?: string(name='JobId'),
  kind?: string(name='Kind'),
}

model ExecuteSparkStatementResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model ExecuteSparkStatementResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExecuteSparkStatementResponseBody(name='body'),
}

async function executeSparkStatementWithOptions(request: ExecuteSparkStatementRequest, runtime: Util.RuntimeOptions): ExecuteSparkStatementResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['Code'] = request.code;
  }
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.kind)) {
    body['Kind'] = request.kind;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ExecuteSparkStatement',
    version = '2018-06-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function executeSparkStatement(request: ExecuteSparkStatementRequest): ExecuteSparkStatementResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeSparkStatementWithOptions(request, runtime);
}

model GetJobAttemptLogRequest {
  jobAttemptId?: string(name='JobAttemptId'),
  jobId?: string(name='JobId'),
  vcName?: string(name='VcName'),
}

model GetJobAttemptLogResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetJobAttemptLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetJobAttemptLogResponseBody(name='body'),
}

async function getJobAttemptLogWithOptions(request: GetJobAttemptLogRequest, runtime: Util.RuntimeOptions): GetJobAttemptLogResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.jobAttemptId)) {
    body['JobAttemptId'] = request.jobAttemptId;
  }
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.vcName)) {
    body['VcName'] = request.vcName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetJobAttemptLog',
    version = '2018-06-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getJobAttemptLog(request: GetJobAttemptLogRequest): GetJobAttemptLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getJobAttemptLogWithOptions(request, runtime);
}

model GetJobDetailRequest {
  jobId?: string(name='JobId'),
  vcName?: string(name='VcName'),
}

model GetJobDetailResponseBody = {
  jobDetail?: {
    createTime?: string(name='CreateTime'),
    createTimeValue?: string(name='CreateTimeValue'),
    detail?: string(name='Detail'),
    driverResourceSpec?: string(name='DriverResourceSpec'),
    executorInstances?: string(name='ExecutorInstances'),
    executorResourceSpec?: string(name='ExecutorResourceSpec'),
    jobId?: string(name='JobId'),
    jobName?: string(name='JobName'),
    lastJobAttemptId?: string(name='LastJobAttemptId'),
    sparkUI?: string(name='SparkUI'),
    status?: string(name='Status'),
    submitTime?: string(name='SubmitTime'),
    submitTimeValue?: string(name='SubmitTimeValue'),
    updateTime?: string(name='UpdateTime'),
    updateTimeValue?: string(name='UpdateTimeValue'),
    vcName?: string(name='VcName'),
  }(name='JobDetail'),
  requestId?: string(name='RequestId'),
}

model GetJobDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetJobDetailResponseBody(name='body'),
}

async function getJobDetailWithOptions(request: GetJobDetailRequest, runtime: Util.RuntimeOptions): GetJobDetailResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.vcName)) {
    body['VcName'] = request.vcName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetJobDetail',
    version = '2018-06-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getJobDetail(request: GetJobDetailRequest): GetJobDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getJobDetailWithOptions(request, runtime);
}

model GetJobLogRequest {
  jobId?: string(name='JobId'),
  vcName?: string(name='VcName'),
}

model GetJobLogResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetJobLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetJobLogResponseBody(name='body'),
}

async function getJobLogWithOptions(request: GetJobLogRequest, runtime: Util.RuntimeOptions): GetJobLogResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.vcName)) {
    body['VcName'] = request.vcName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetJobLog',
    version = '2018-06-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getJobLog(request: GetJobLogRequest): GetJobLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getJobLogWithOptions(request, runtime);
}

model GetJobStatusRequest {
  jobId?: string(name='JobId'),
  vcName?: string(name='VcName'),
}

model GetJobStatusResponseBody = {
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetJobStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetJobStatusResponseBody(name='body'),
}

async function getJobStatusWithOptions(request: GetJobStatusRequest, runtime: Util.RuntimeOptions): GetJobStatusResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.vcName)) {
    body['VcName'] = request.vcName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetJobStatus',
    version = '2018-06-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getJobStatus(request: GetJobStatusRequest): GetJobStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getJobStatusWithOptions(request, runtime);
}

model GetSparkSessionStateRequest {
  jobId?: string(name='JobId'),
}

model GetSparkSessionStateResponseBody = {
  requestId?: string(name='RequestId'),
  state?: string(name='State'),
}

model GetSparkSessionStateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSparkSessionStateResponseBody(name='body'),
}

async function getSparkSessionStateWithOptions(request: GetSparkSessionStateRequest, runtime: Util.RuntimeOptions): GetSparkSessionStateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSparkSessionState',
    version = '2018-06-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSparkSessionState(request: GetSparkSessionStateRequest): GetSparkSessionStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSparkSessionStateWithOptions(request, runtime);
}

model GetSparkStatementRequest {
  jobId?: string(name='JobId'),
  statementId?: int32(name='StatementId'),
}

model GetSparkStatementResponseBody = {
  data?: {
    code?: string(name='Code'),
    completedTime?: long(name='CompletedTime'),
    id?: int32(name='Id'),
    output?: string(name='Output'),
    process?: float(name='Process'),
    startedTime?: long(name='StartedTime'),
    state?: string(name='State'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetSparkStatementResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSparkStatementResponseBody(name='body'),
}

async function getSparkStatementWithOptions(request: GetSparkStatementRequest, runtime: Util.RuntimeOptions): GetSparkStatementResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.statementId)) {
    body['StatementId'] = request.statementId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSparkStatement',
    version = '2018-06-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSparkStatement(request: GetSparkStatementRequest): GetSparkStatementResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSparkStatementWithOptions(request, runtime);
}

model KillSparkJobRequest {
  jobId?: string(name='JobId'),
  vcName?: string(name='VcName'),
}

model KillSparkJobResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model KillSparkJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: KillSparkJobResponseBody(name='body'),
}

async function killSparkJobWithOptions(request: KillSparkJobRequest, runtime: Util.RuntimeOptions): KillSparkJobResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.vcName)) {
    body['VcName'] = request.vcName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'KillSparkJob',
    version = '2018-06-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function killSparkJob(request: KillSparkJobRequest): KillSparkJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return killSparkJobWithOptions(request, runtime);
}

model ListSparkJobRequest {
  condition?: map[string]any(name='Condition'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  vcName?: string(name='VcName'),
}

model ListSparkJobShrinkRequest {
  conditionShrink?: string(name='Condition'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  vcName?: string(name='VcName'),
}

model ListSparkJobResponseBody = {
  dataResult?: {
    jobList?: [ 
      {
        createTime?: string(name='CreateTime'),
        createTimeValue?: string(name='CreateTimeValue'),
        detail?: string(name='Detail'),
        driverResourceSpec?: string(name='DriverResourceSpec'),
        executorInstances?: string(name='ExecutorInstances'),
        executorResourceSpec?: string(name='ExecutorResourceSpec'),
        jobId?: string(name='JobId'),
        jobName?: string(name='JobName'),
        sparkUI?: string(name='SparkUI'),
        status?: string(name='Status'),
        submitTime?: string(name='SubmitTime'),
        submitTimeValue?: string(name='SubmitTimeValue'),
        updateTime?: string(name='UpdateTime'),
        updateTimeValue?: string(name='UpdateTimeValue'),
        vcName?: string(name='VcName'),
      }
    ](name='JobList'),
    pageNumber?: string(name='PageNumber'),
    pageSize?: string(name='PageSize'),
    totalCount?: string(name='TotalCount'),
  }(name='DataResult'),
  requestId?: string(name='RequestId'),
}

model ListSparkJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSparkJobResponseBody(name='body'),
}

async function listSparkJobWithOptions(tmpReq: ListSparkJobRequest, runtime: Util.RuntimeOptions): ListSparkJobResponse {
  Util.validateModel(tmpReq);
  var request = new ListSparkJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.condition)) {
    request.conditionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.condition, 'Condition', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.conditionShrink)) {
    query['Condition'] = request.conditionShrink;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.vcName)) {
    query['VcName'] = request.vcName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSparkJob',
    version = '2018-06-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSparkJob(request: ListSparkJobRequest): ListSparkJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSparkJobWithOptions(request, runtime);
}

model ListSparkJobAttemptRequest {
  condition?: map[string]any(name='Condition'),
  jobId?: string(name='JobId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  vcName?: string(name='VcName'),
}

model ListSparkJobAttemptShrinkRequest {
  conditionShrink?: string(name='Condition'),
  jobId?: string(name='JobId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  vcName?: string(name='VcName'),
}

model ListSparkJobAttemptResponseBody = {
  dataResult?: {
    jobAttemptList?: [ 
      {
        createTime?: string(name='CreateTime'),
        createTimeValue?: string(name='CreateTimeValue'),
        detail?: string(name='Detail'),
        durationTime?: string(name='DurationTime'),
        durationTimeValue?: string(name='DurationTimeValue'),
        jobAttemptId?: string(name='JobAttemptId'),
        jobId?: string(name='JobId'),
        jobName?: string(name='JobName'),
        sparkUI?: string(name='SparkUI'),
        status?: string(name='Status'),
        terminatedTime?: string(name='TerminatedTime'),
        terminatedTimeValue?: string(name='TerminatedTimeValue'),
        vcName?: string(name='VcName'),
      }
    ](name='JobAttemptList'),
    pageNumber?: string(name='PageNumber'),
    pageSize?: string(name='PageSize'),
    totalCount?: string(name='TotalCount'),
  }(name='DataResult'),
  requestId?: string(name='RequestId'),
}

model ListSparkJobAttemptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSparkJobAttemptResponseBody(name='body'),
}

async function listSparkJobAttemptWithOptions(tmpReq: ListSparkJobAttemptRequest, runtime: Util.RuntimeOptions): ListSparkJobAttemptResponse {
  Util.validateModel(tmpReq);
  var request = new ListSparkJobAttemptShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.condition)) {
    request.conditionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.condition, 'Condition', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.conditionShrink)) {
    query['Condition'] = request.conditionShrink;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.vcName)) {
    query['VcName'] = request.vcName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSparkJobAttempt',
    version = '2018-06-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSparkJobAttempt(request: ListSparkJobAttemptRequest): ListSparkJobAttemptResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSparkJobAttemptWithOptions(request, runtime);
}

model ListSparkStatementsRequest {
  jobId?: string(name='JobId'),
}

model ListSparkStatementsResponseBody = {
  requestId?: string(name='RequestId'),
  statements?: [ 
    {
      code?: string(name='Code'),
      completedTime?: long(name='CompletedTime'),
      id?: int32(name='Id'),
      output?: string(name='Output'),
      progress?: float(name='Progress'),
      startedTime?: long(name='StartedTime'),
      state?: string(name='State'),
    }
  ](name='Statements'),
}

model ListSparkStatementsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSparkStatementsResponseBody(name='body'),
}

async function listSparkStatementsWithOptions(request: ListSparkStatementsRequest, runtime: Util.RuntimeOptions): ListSparkStatementsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListSparkStatements',
    version = '2018-06-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSparkStatements(request: ListSparkStatementsRequest): ListSparkStatementsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSparkStatementsWithOptions(request, runtime);
}

model ReleaseInstanceRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
}

model ReleaseInstanceResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorInfo?: string(name='ErrorInfo'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model ReleaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseInstanceResponseBody(name='body'),
}

async function releaseInstanceWithOptions(request: ReleaseInstanceRequest, runtime: Util.RuntimeOptions): ReleaseInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseInstance',
    version = '2018-06-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseInstance(request: ReleaseInstanceRequest): ReleaseInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstanceWithOptions(request, runtime);
}

model SubmitSparkJobRequest {
  configJson?: string(name='ConfigJson'),
  vcName?: string(name='VcName'),
}

model SubmitSparkJobResponseBody = {
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
}

model SubmitSparkJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitSparkJobResponseBody(name='body'),
}

async function submitSparkJobWithOptions(request: SubmitSparkJobRequest, runtime: Util.RuntimeOptions): SubmitSparkJobResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.configJson)) {
    body['ConfigJson'] = request.configJson;
  }
  if (!Util.isUnset(request.vcName)) {
    body['VcName'] = request.vcName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitSparkJob',
    version = '2018-06-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitSparkJob(request: SubmitSparkJobRequest): SubmitSparkJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSparkJobWithOptions(request, runtime);
}

model SubmitSparkSQLRequest {
  sql?: string(name='Sql'),
  vcName?: string(name='VcName'),
}

model SubmitSparkSQLResponseBody = {
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
}

model SubmitSparkSQLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitSparkSQLResponseBody(name='body'),
}

async function submitSparkSQLWithOptions(request: SubmitSparkSQLRequest, runtime: Util.RuntimeOptions): SubmitSparkSQLResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.sql)) {
    body['Sql'] = request.sql;
  }
  if (!Util.isUnset(request.vcName)) {
    body['VcName'] = request.vcName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitSparkSQL',
    version = '2018-06-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitSparkSQL(request: SubmitSparkSQLRequest): SubmitSparkSQLResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSparkSQLWithOptions(request, runtime);
}

model ValidateVirtualClusterNameRequest {
  vcName?: string(name='VcName'),
}

model ValidateVirtualClusterNameResponseBody = {
  data?: {
    legal?: string(name='Legal'),
    message?: string(name='Message'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model ValidateVirtualClusterNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ValidateVirtualClusterNameResponseBody(name='body'),
}

async function validateVirtualClusterNameWithOptions(request: ValidateVirtualClusterNameRequest, runtime: Util.RuntimeOptions): ValidateVirtualClusterNameResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.vcName)) {
    body['VcName'] = request.vcName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ValidateVirtualClusterName',
    version = '2018-06-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function validateVirtualClusterName(request: ValidateVirtualClusterNameRequest): ValidateVirtualClusterNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return validateVirtualClusterNameWithOptions(request, runtime);
}

