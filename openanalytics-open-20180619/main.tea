/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
@endpointMap = {
    cn-beijing = 'openanalytics.cn-beijing.aliyuncs.com',
    cn-zhangjiakou = 'openanalytics.cn-zhangjiakou.aliyuncs.com',
    cn-hangzhou = 'openanalytics.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'openanalytics.cn-shanghai.aliyuncs.com',
    cn-shenzhen = 'openanalytics.cn-shenzhen.aliyuncs.com',
    cn-hongkong = 'openanalytics.cn-hongkong.aliyuncs.com',
    ap-southeast-1 = 'openanalytics.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'datalakeanalytics.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'openanalytics.ap-southeast-3.aliyuncs.com',
    ap-northeast-1 = 'datalakeanalytics.ap-northeast-1.aliyuncs.com',
    eu-west-1 = 'openanalytics.eu-west-1.aliyuncs.com',
    us-west-1 = 'openanalytics.us-west-1.aliyuncs.com',
    us-east-1 = 'datalakeanalytics.us-east-1.aliyuncs.com',
    eu-central-1 = 'datalakeanalytics.eu-central-1.aliyuncs.com',
    ap-south-1 = 'openanalytics.ap-south-1.aliyuncs.com',
    ap-northeast-2-pop = 'openanalytics.ap-northeast-1.aliyuncs.com',
    ap-southeast-5 = 'openanalytics.ap-southeast-5.aliyuncs.com',
    cn-beijing-finance-1 = 'openanalytics.aliyuncs.com',
    cn-beijing-finance-pop = 'openanalytics.aliyuncs.com',
    cn-beijing-gov-1 = 'openanalytics.aliyuncs.com',
    cn-beijing-nu16-b01 = 'openanalytics.aliyuncs.com',
    cn-chengdu = 'openanalytics.aliyuncs.com',
    cn-edge-1 = 'openanalytics.aliyuncs.com',
    cn-fujian = 'openanalytics.aliyuncs.com',
    cn-haidian-cm12-c01 = 'openanalytics.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'openanalytics.aliyuncs.com',
    cn-hangzhou-finance = 'openanalytics.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'openanalytics.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'openanalytics.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'openanalytics.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'openanalytics.aliyuncs.com',
    cn-hangzhou-test-306 = 'openanalytics.aliyuncs.com',
    cn-hongkong-finance-pop = 'openanalytics.aliyuncs.com',
    cn-huhehaote = 'openanalytics.cn-huhehaote.aliyuncs.com',
    cn-north-2-gov-1 = 'openanalytics.aliyuncs.com',
    cn-qingdao = 'openanalytics.cn-qingdao.aliyuncs.com',
    cn-qingdao-nebula = 'openanalytics.aliyuncs.com',
    cn-shanghai-et15-b01 = 'openanalytics.aliyuncs.com',
    cn-shanghai-et2-b01 = 'openanalytics.aliyuncs.com',
    cn-shanghai-finance-1 = 'openanalytics.aliyuncs.com',
    cn-shanghai-inner = 'openanalytics.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'openanalytics.aliyuncs.com',
    cn-shenzhen-finance-1 = 'openanalytics.aliyuncs.com',
    cn-shenzhen-inner = 'openanalytics.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'openanalytics.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'openanalytics.aliyuncs.com',
    cn-wuhan = 'openanalytics.aliyuncs.com',
    cn-yushanfang = 'openanalytics.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'openanalytics.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'openanalytics.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'openanalytics.aliyuncs.com',
    eu-west-1-oxs = 'openanalytics.ap-northeast-1.aliyuncs.com',
    me-east-1 = 'openanalytics.me-east-1.aliyuncs.com',
    rus-west-1-pop = 'openanalytics.ap-northeast-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('openanalytics-open', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddAccountRequest {
  regionId?: string(name='RegionId'),
  accountName?: string(name='AccountName'),
  password?: string(name='Password'),
  isShort?: boolean(name='IsShort'),
  enableKMS?: boolean(name='EnableKMS'),
  remark?: string(name='Remark'),
  ramUid?: string(name='RamUid'),
  useRandomPassword?: boolean(name='UseRandomPassword'),
}

model AddAccountResponseBody = {
  account?: {
    password?: string(name='Password'),
    userName?: string(name='UserName'),
  }(name='Account'),
  requestId?: string(name='RequestId'),
  regionId?: string(name='RegionId'),
}

model AddAccountResponse = {
  headers: map[string]string(name='headers'),
  body: AddAccountResponseBody(name='body'),
}

async function addAccountWithOptions(request: AddAccountRequest, runtime: Util.RuntimeOptions): AddAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddAccount', '2018-06-19', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addAccount(request: AddAccountRequest): AddAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return addAccountWithOptions(request, runtime);
}

model AddEndPointRequest {
  regionId?: string(name='RegionId'),
  networkType?: string(name='NetworkType'),
  vpcID?: string(name='VpcID'),
  vswitch?: string(name='Vswitch'),
  zone?: string(name='Zone'),
  product?: string(name='Product'),
}

model AddEndPointResponseBody = {
  requestId?: string(name='RequestId'),
  endPointInfo?: {
    product?: string(name='product'),
    zone?: string(name='zone'),
    domainURL?: string(name='domainURL'),
    vSwitch?: string(name='vSwitch'),
    host?: string(name='host'),
    status?: string(name='status'),
    endPointID?: string(name='endPointID'),
    allowIP?: string(name='allowIP'),
    vpcID?: string(name='vpcID'),
    networkType?: string(name='networkType'),
    port?: string(name='port'),
  }(name='EndPointInfo'),
  regionId?: string(name='RegionId'),
}

model AddEndPointResponse = {
  headers: map[string]string(name='headers'),
  body: AddEndPointResponseBody(name='body'),
}

async function addEndPointWithOptions(request: AddEndPointRequest, runtime: Util.RuntimeOptions): AddEndPointResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddEndPoint', '2018-06-19', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addEndPoint(request: AddEndPointRequest): AddEndPointResponse {
  var runtime = new Util.RuntimeOptions{};
  return addEndPointWithOptions(request, runtime);
}

model CreateInstanceRequest {
  regionId?: string(name='RegionId'),
  chargeType?: string(name='ChargeType'),
  instanceType?: string(name='InstanceType'),
  component?: string(name='Component'),
}

model CreateInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  errorInfo?: string(name='ErrorInfo'),
  errorCode?: string(name='ErrorCode'),
  success?: boolean(name='Success'),
  result?: string(name='Result'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateInstance', '2018-06-19', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model DeleteAccountRequest {
  regionId?: string(name='RegionId'),
  accountName?: string(name='AccountName'),
  isShort?: boolean(name='IsShort'),
  isServiceUser?: boolean(name='IsServiceUser'),
}

model DeleteAccountResponseBody = {
  requestId?: string(name='RequestId'),
  regionId?: string(name='RegionId'),
}

model DeleteAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAccountResponseBody(name='body'),
}

async function deleteAccountWithOptions(request: DeleteAccountRequest, runtime: Util.RuntimeOptions): DeleteAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAccount', '2018-06-19', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccountWithOptions(request, runtime);
}

model GetAllowIPRequest {
  regionId?: string(name='RegionId'),
  networkType?: string(name='NetworkType'),
  product?: string(name='Product'),
}

model GetAllowIPResponseBody = {
  requestId?: string(name='RequestId'),
  allowIP?: string(name='AllowIP'),
  regionId?: string(name='RegionId'),
}

model GetAllowIPResponse = {
  headers: map[string]string(name='headers'),
  body: GetAllowIPResponseBody(name='body'),
}

async function getAllowIPWithOptions(request: GetAllowIPRequest, runtime: Util.RuntimeOptions): GetAllowIPResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAllowIP', '2018-06-19', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAllowIP(request: GetAllowIPRequest): GetAllowIPResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAllowIPWithOptions(request, runtime);
}

model GetEndPointRequest {
  regionId?: string(name='RegionId'),
  endPointID?: string(name='EndPointID'),
}

model GetEndPointResponseBody = {
  requestId?: string(name='RequestId'),
  endPointInfo?: {
    product?: string(name='product'),
    zone?: string(name='zone'),
    domainURL?: string(name='domainURL'),
    vSwitch?: string(name='vSwitch'),
    host?: string(name='host'),
    status?: string(name='status'),
    allowIP?: string(name='allowIP'),
    vpcID?: string(name='vpcID'),
    endPointID?: string(name='endPointID'),
    networkType?: string(name='networkType'),
    port?: string(name='port'),
  }(name='EndPointInfo'),
  regionId?: string(name='RegionId'),
}

model GetEndPointResponse = {
  headers: map[string]string(name='headers'),
  body: GetEndPointResponseBody(name='body'),
}

async function getEndPointWithOptions(request: GetEndPointRequest, runtime: Util.RuntimeOptions): GetEndPointResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetEndPoint', '2018-06-19', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getEndPoint(request: GetEndPointRequest): GetEndPointResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEndPointWithOptions(request, runtime);
}

model GetEndPointByDomainRequest {
  regionId?: string(name='RegionId'),
  domainURL?: string(name='DomainURL'),
  regionID?: string(name='RegionID'),
}

model GetEndPointByDomainResponseBody = {
  requestId?: string(name='RequestId'),
  endPointInfo?: {
    product?: string(name='product'),
    cloudInstanceID?: string(name='cloudInstanceID'),
    zone?: string(name='zone'),
    domainURL?: string(name='domainURL'),
    vSwitch?: string(name='vSwitch'),
    host?: string(name='host'),
    allowIP?: string(name='allowIP'),
    vpcID?: string(name='vpcID'),
    endPointID?: string(name='endPointID'),
    networkType?: string(name='networkType'),
    port?: string(name='port'),
  }(name='EndPointInfo'),
  regionId?: string(name='RegionId'),
}

model GetEndPointByDomainResponse = {
  headers: map[string]string(name='headers'),
  body: GetEndPointByDomainResponseBody(name='body'),
}

async function getEndPointByDomainWithOptions(request: GetEndPointByDomainRequest, runtime: Util.RuntimeOptions): GetEndPointByDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetEndPointByDomain', '2018-06-19', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getEndPointByDomain(request: GetEndPointByDomainRequest): GetEndPointByDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEndPointByDomainWithOptions(request, runtime);
}

model GetJobDetailRequest {
  jobId?: string(name='JobId'),
  vcName?: string(name='VcName'),
}

model GetJobDetailResponseBody = {
  jobDetail?: {
    status?: string(name='Status'),
    updateTime?: string(name='UpdateTime'),
    executorResourceSpec?: string(name='ExecutorResourceSpec'),
    createTime?: string(name='CreateTime'),
    createTimeValue?: string(name='CreateTimeValue'),
    driverResourceSpec?: string(name='DriverResourceSpec'),
    updateTimeValue?: string(name='UpdateTimeValue'),
    sparkUI?: string(name='SparkUI'),
    submitTimeValue?: string(name='SubmitTimeValue'),
    jobName?: string(name='JobName'),
    jobId?: string(name='JobId'),
    executorInstances?: string(name='ExecutorInstances'),
    vcName?: string(name='VcName'),
    submitTime?: string(name='SubmitTime'),
    detail?: string(name='Detail'),
  }(name='JobDetail'),
  requestId?: string(name='RequestId'),
}

model GetJobDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetJobDetailResponseBody(name='body'),
}

async function getJobDetailWithOptions(request: GetJobDetailRequest, runtime: Util.RuntimeOptions): GetJobDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetJobDetail', '2018-06-19', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getJobDetail(request: GetJobDetailRequest): GetJobDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getJobDetailWithOptions(request, runtime);
}

model GetJobLogRequest {
  jobId?: string(name='JobId'),
  vcName?: string(name='VcName'),
}

model GetJobLogResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
}

model GetJobLogResponse = {
  headers: map[string]string(name='headers'),
  body: GetJobLogResponseBody(name='body'),
}

async function getJobLogWithOptions(request: GetJobLogRequest, runtime: Util.RuntimeOptions): GetJobLogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetJobLog', '2018-06-19', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getJobLog(request: GetJobLogRequest): GetJobLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getJobLogWithOptions(request, runtime);
}

model GetJobStatusRequest {
  jobId?: string(name='JobId'),
  vcName?: string(name='VcName'),
}

model GetJobStatusResponseBody = {
  status?: string(name='Status'),
  requestId?: string(name='RequestId'),
}

model GetJobStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetJobStatusResponseBody(name='body'),
}

async function getJobStatusWithOptions(request: GetJobStatusRequest, runtime: Util.RuntimeOptions): GetJobStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetJobStatus', '2018-06-19', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getJobStatus(request: GetJobStatusRequest): GetJobStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getJobStatusWithOptions(request, runtime);
}

model KillSparkJobRequest {
  vcName?: string(name='VcName'),
  jobId?: string(name='JobId'),
}

model KillSparkJobResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
}

model KillSparkJobResponse = {
  headers: map[string]string(name='headers'),
  body: KillSparkJobResponseBody(name='body'),
}

async function killSparkJobWithOptions(request: KillSparkJobRequest, runtime: Util.RuntimeOptions): KillSparkJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('KillSparkJob', '2018-06-19', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function killSparkJob(request: KillSparkJobRequest): KillSparkJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return killSparkJobWithOptions(request, runtime);
}

model ListSparkJobRequest {
  vcName?: string(name='VcName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListSparkJobResponseBody = {
  dataResult?: {
    jobList?: [ 
      {
        status?: string(name='Status'),
        updateTime?: string(name='UpdateTime'),
        executorResourceSpec?: string(name='ExecutorResourceSpec'),
        createTime?: string(name='CreateTime'),
        driverResourceSpec?: string(name='DriverResourceSpec'),
        createTimeValue?: string(name='CreateTimeValue'),
        updateTimeValue?: string(name='UpdateTimeValue'),
        sparkUI?: string(name='SparkUI'),
        submitTimeValue?: string(name='SubmitTimeValue'),
        jobName?: string(name='JobName'),
        jobId?: string(name='JobId'),
        vcName?: string(name='VcName'),
        executorInstances?: string(name='ExecutorInstances'),
        submitTime?: string(name='SubmitTime'),
        detail?: string(name='Detail'),
      }
    ](name='JobList'),
    pageNumber?: string(name='PageNumber'),
    pageSize?: string(name='PageSize'),
    totalCount?: string(name='TotalCount'),
  }(name='DataResult'),
  requestId?: string(name='RequestId'),
}

model ListSparkJobResponse = {
  headers: map[string]string(name='headers'),
  body: ListSparkJobResponseBody(name='body'),
}

async function listSparkJobWithOptions(request: ListSparkJobRequest, runtime: Util.RuntimeOptions): ListSparkJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSparkJob', '2018-06-19', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSparkJob(request: ListSparkJobRequest): ListSparkJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSparkJobWithOptions(request, runtime);
}

model QueryAccountListRequest {
  regionId?: string(name='RegionId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model QueryAccountListResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  data?: [ 
    {
      remark?: string(name='Remark'),
      ramUid?: string(name='RamUid'),
      shortName?: string(name='ShortName'),
      role?: string(name='Role'),
      userName?: string(name='UserName'),
    }
  ](name='Data'),
  regionId?: string(name='RegionId'),
}

model QueryAccountListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAccountListResponseBody(name='body'),
}

async function queryAccountListWithOptions(request: QueryAccountListRequest, runtime: Util.RuntimeOptions): QueryAccountListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryAccountList', '2018-06-19', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryAccountList(request: QueryAccountListRequest): QueryAccountListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAccountListWithOptions(request, runtime);
}

model QueryEndPointListRequest {
  regionId?: string(name='RegionId'),
}

model QueryEndPointListResponseBody = {
  requestId?: string(name='RequestId'),
  endPointList?: [ 
    {
      product?: string(name='product'),
      domainURL?: string(name='domainURL'),
      zone?: string(name='zone'),
      vSwitch?: string(name='vSwitch'),
      host?: string(name='host'),
      allowIP?: string(name='allowIP'),
      vpcID?: string(name='vpcID'),
      status?: string(name='status'),
      endPointID?: string(name='endPointID'),
      networkType?: string(name='networkType'),
      port?: string(name='port'),
    }
  ](name='EndPointList'),
  regionId?: string(name='RegionId'),
}

model QueryEndPointListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEndPointListResponseBody(name='body'),
}

async function queryEndPointListWithOptions(request: QueryEndPointListRequest, runtime: Util.RuntimeOptions): QueryEndPointListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryEndPointList', '2018-06-19', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryEndPointList(request: QueryEndPointListRequest): QueryEndPointListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEndPointListWithOptions(request, runtime);
}

model ReleaseInstanceRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
}

model ReleaseInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  errorInfo?: string(name='ErrorInfo'),
  errorCode?: string(name='ErrorCode'),
  success?: boolean(name='Success'),
  result?: string(name='Result'),
}

model ReleaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseInstanceResponseBody(name='body'),
}

async function releaseInstanceWithOptions(request: ReleaseInstanceRequest, runtime: Util.RuntimeOptions): ReleaseInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReleaseInstance', '2018-06-19', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function releaseInstance(request: ReleaseInstanceRequest): ReleaseInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstanceWithOptions(request, runtime);
}

model RemoveEndPointRequest {
  regionId?: string(name='RegionId'),
  endPointID?: string(name='EndPointID'),
}

model RemoveEndPointResponseBody = {
  requestId?: string(name='RequestId'),
  regionId?: string(name='RegionId'),
}

model RemoveEndPointResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveEndPointResponseBody(name='body'),
}

async function removeEndPointWithOptions(request: RemoveEndPointRequest, runtime: Util.RuntimeOptions): RemoveEndPointResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveEndPoint', '2018-06-19', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeEndPoint(request: RemoveEndPointRequest): RemoveEndPointResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeEndPointWithOptions(request, runtime);
}

model ResetMainPasswordRequest {
  regionId?: string(name='RegionId'),
  useRandomPassword?: boolean(name='UseRandomPassword'),
  initPassword?: string(name='InitPassword'),
  enableKMS?: boolean(name='EnableKMS'),
  externalUid?: string(name='ExternalUid'),
  externalAliyunUid?: string(name='ExternalAliyunUid'),
  externalBizAliyunUid?: string(name='ExternalBizAliyunUid'),
}

model ResetMainPasswordResponseBody = {
  account?: {
    password?: string(name='Password'),
    userName?: string(name='UserName'),
  }(name='Account'),
  requestId?: string(name='RequestId'),
  regionId?: string(name='RegionId'),
}

model ResetMainPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ResetMainPasswordResponseBody(name='body'),
}

async function resetMainPasswordWithOptions(request: ResetMainPasswordRequest, runtime: Util.RuntimeOptions): ResetMainPasswordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetMainPassword', '2018-06-19', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetMainPassword(request: ResetMainPasswordRequest): ResetMainPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetMainPasswordWithOptions(request, runtime);
}

model SetAllowIPRequest {
  regionId?: string(name='RegionId'),
  networkType?: string(name='NetworkType'),
  product?: string(name='Product'),
  allowIP?: string(name='AllowIP'),
  append?: boolean(name='Append'),
}

model SetAllowIPResponseBody = {
  requestId?: string(name='RequestId'),
  regionId?: string(name='RegionId'),
}

model SetAllowIPResponse = {
  headers: map[string]string(name='headers'),
  body: SetAllowIPResponseBody(name='body'),
}

async function setAllowIPWithOptions(request: SetAllowIPRequest, runtime: Util.RuntimeOptions): SetAllowIPResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetAllowIP', '2018-06-19', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setAllowIP(request: SetAllowIPRequest): SetAllowIPResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAllowIPWithOptions(request, runtime);
}

model SubmitSparkJobRequest {
  vcName?: string(name='VcName'),
  configJson?: string(name='ConfigJson'),
}

model SubmitSparkJobResponseBody = {
  requestId?: string(name='RequestId'),
  jobId?: string(name='JobId'),
}

model SubmitSparkJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitSparkJobResponseBody(name='body'),
}

async function submitSparkJobWithOptions(request: SubmitSparkJobRequest, runtime: Util.RuntimeOptions): SubmitSparkJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitSparkJob', '2018-06-19', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitSparkJob(request: SubmitSparkJobRequest): SubmitSparkJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSparkJobWithOptions(request, runtime);
}

model UnSubscribeRegionRequest {
  regionId?: string(name='RegionId'),
}

model UnSubscribeRegionResponseBody = {
  requestId?: string(name='RequestId'),
  regionId?: string(name='RegionId'),
}

model UnSubscribeRegionResponse = {
  headers: map[string]string(name='headers'),
  body: UnSubscribeRegionResponseBody(name='body'),
}

async function unSubscribeRegionWithOptions(request: UnSubscribeRegionRequest, runtime: Util.RuntimeOptions): UnSubscribeRegionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnSubscribeRegion', '2018-06-19', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unSubscribeRegion(request: UnSubscribeRegionRequest): UnSubscribeRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  return unSubscribeRegionWithOptions(request, runtime);
}

model UpdateAccountPasswordRequest {
  regionId?: string(name='RegionId'),
  accountName?: string(name='AccountName'),
  isShort?: boolean(name='IsShort'),
  password?: string(name='Password'),
  enableKMS?: boolean(name='EnableKMS'),
  useRandomPassword?: boolean(name='UseRandomPassword'),
}

model UpdateAccountPasswordResponseBody = {
  account?: {
    password?: string(name='Password'),
    userName?: string(name='UserName'),
  }(name='Account'),
  requestId?: string(name='RequestId'),
  regionId?: string(name='RegionId'),
}

model UpdateAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAccountPasswordResponseBody(name='body'),
}

async function updateAccountPasswordWithOptions(request: UpdateAccountPasswordRequest, runtime: Util.RuntimeOptions): UpdateAccountPasswordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateAccountPassword', '2018-06-19', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateAccountPassword(request: UpdateAccountPasswordRequest): UpdateAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAccountPasswordWithOptions(request, runtime);
}

model UpgradeInstanceRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  chargeType?: string(name='ChargeType'),
  instanceType?: string(name='InstanceType'),
  component?: string(name='Component'),
}

model UpgradeInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  errorInfo?: string(name='ErrorInfo'),
  errorCode?: string(name='ErrorCode'),
  success?: boolean(name='Success'),
  result?: string(name='Result'),
}

model UpgradeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeInstanceResponseBody(name='body'),
}

async function upgradeInstanceWithOptions(request: UpgradeInstanceRequest, runtime: Util.RuntimeOptions): UpgradeInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpgradeInstance', '2018-06-19', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function upgradeInstance(request: UpgradeInstanceRequest): UpgradeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeInstanceWithOptions(request, runtime);
}

model ValidateVirtualClusterNameRequest {
  vcName?: string(name='VcName'),
}

model ValidateVirtualClusterNameResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    message?: string(name='Message'),
    legal?: string(name='Legal'),
  }(name='Data'),
}

model ValidateVirtualClusterNameResponse = {
  headers: map[string]string(name='headers'),
  body: ValidateVirtualClusterNameResponseBody(name='body'),
}

async function validateVirtualClusterNameWithOptions(request: ValidateVirtualClusterNameRequest, runtime: Util.RuntimeOptions): ValidateVirtualClusterNameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ValidateVirtualClusterName', '2018-06-19', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function validateVirtualClusterName(request: ValidateVirtualClusterNameRequest): ValidateVirtualClusterNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return validateVirtualClusterNameWithOptions(request, runtime);
}

