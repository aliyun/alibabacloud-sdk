/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ImageSearch';
  @version = '2019-03-25';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddImageRequest {
  categoryId?: int32(name='CategoryId', example='88888888', position='Body'),
  crop?: boolean(name='Crop', example='true', position='Body'),
  customContent?: string(name='CustomContent', example='{\\"merchant_id\\":\\"46-718f-da04-4099b2f144ae\\",\\"category_ids\\":[\\"1234\\"],\\"image_index\\":0,\\"updated\\":5678}', position='Body'),
  instanceName: string(name='InstanceName', example='demoinstance1', position='Body'),
  intAttr?: int32(name='IntAttr', example='22', position='Body'),
  picContent: string(name='PicContent', example='AAAANSUhEUgAAAPcAAAEVCAYAAAA8d3NuAAAAAXNSR0IArs......RK5CYII=', position='Body'),
  picName: string(name='PicName', example='2092061_1.jpg', position='Body'),
  productId: string(name='ProductId', example='2092061_1', position='Body'),
  region?: string(name='Region', example='280,486,232,351', position='Body'),
  strAttr?: string(name='StrAttr', example='ss', position='Body'),
}

model AddImageResponseBody = {
  code?: int32(name='Code', example='0'),
  message?: string(name='Message', example='success'),
  picInfo?: {
    categoryId?: int32(name='CategoryId', example='88888888'),
    region?: string(name='Region', example='94,691,206,650'),
  }(name='PicInfo'),
  requestId?: string(name='RequestId', example='E0845DE6-52AF-4B50-9F15-51ED4044E6AB'),
  success?: boolean(name='Success', example='true'),
}

model AddImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddImageResponseBody(name='body'),
}

async function addImage(request: AddImageRequest): AddImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddImage', 'POST', '/v2/image/add', 'json', true, 'form', request);
}

model DeleteImageRequest {
  instanceName: string(name='InstanceName', example='demoinstance1', position='Body'),
  picName?: string(name='PicName', example='2092061_1.jpg', position='Body'),
  productId: string(name='ProductId', example='179443', position='Body'),
}

model DeleteImageResponseBody = {
  code?: int32(name='Code', example='0'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0703956F-9BCC-48FA-99F7-96C0BF449C69'),
  success?: boolean(name='Success', example='true'),
}

model DeleteImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteImageResponseBody(name='body'),
}

async function deleteImage(request: DeleteImageRequest): DeleteImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteImage', 'POST', '/v2/image/delete', 'json', true, 'form', request);
}

model SearchImageRequest {
  categoryId?: int32(name='CategoryId', example='88888888', position='Body'),
  crop?: boolean(name='Crop', example='true', position='Body'),
  filter?: string(name='Filter', example='(int_attr >= 100000000 AND int_attr < 200000000 AND int_attr=100000252 AND str_attr=\\"87\\")', position='Body'),
  instanceName: string(name='InstanceName', example='phimagesearch', position='Body'),
  num?: int32(name='Num', example='10', position='Body'),
  picContent?: string(name='PicContent', example='iVBORw0KGgoAAAANSUhEUgAAAV8AAADwAQMAAACdRvVNAAAABGdBTUEAALGPC/xhBQAAAAFzUkdCAK7OHOkAAAADUExURQAAAKd6PdoAAAABdFJOUyR85Ty3AAAAIUlEQVRo3u3BAQ0AAADCoPdPbQ8HFAAAAAAAAAAAAADPBiowAAGR02EbAAAAAElFTkSuQmCC', position='Body'),
  picName?: string(name='PicName', example='goods-23312-1', position='Body'),
  productId?: string(name='ProductId', example='pro-goods-25376', position='Body'),
  region?: string(name='Region', example='32,282,43,256', position='Body'),
  start?: int32(name='Start', example='0', position='Body'),
  type?: string(name='Type', example='SearchByPic', position='Body'),
}

model SearchImageResponseBody = {
  auctions?: [ 
    {
      categoryId?: int32(name='CategoryId', example='8888888'),
      customContent?: string(name='CustomContent', example='zidingyi'),
      intAttr?: int32(name='IntAttr', example='2'),
      picName?: string(name='PicName', example='2092061_1.jpg'),
      productId?: string(name='ProductId', example='2092061_1'),
      score?: float(name='Score'),
      sortExprValues?: string(name='SortExprValues', example='5.37633353624177e+24;0'),
      strAttr?: string(name='StrAttr', example='ss'),
    }
  ](name='Auctions'),
  code?: int32(name='Code', example='0'),
  head?: {
    docsFound?: int32(name='DocsFound', example='10'),
    docsReturn?: int32(name='DocsReturn', example='10000'),
    searchTime?: int32(name='SearchTime', example='95'),
  }(name='Head'),
  msg?: string(name='Msg', example='success'),
  picInfo?: {
    allCategories?: [ 
      {
        id?: int32(name='Id', example='88888888'),
        name?: string(name='Name', example='other'),
      }
    ](name='AllCategories'),
    categoryId?: int32(name='CategoryId', example='88888888'),
    multiRegion?: [ 
      {
        region?: string(name='Region'),
      }
    ](name='MultiRegion'),
    region?: string(name='Region', example='94,691,206,650'),
  }(name='PicInfo'),
  requestId?: string(name='RequestId', example='3033A0A7-36DA-5AC9-9973-953C38EBDFA9'),
  success?: boolean(name='Success', example='true'),
}

model SearchImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchImageResponseBody(name='body'),
}

async function searchImage(request: SearchImageRequest): SearchImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SearchImage', 'POST', '/v2/image/search', 'json', true, 'form', request);
}

