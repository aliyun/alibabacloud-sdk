/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('eduaiservice', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model QueryOrgLabRecordListRequest {
  aliyunUid?: string(name='AliyunUid', description='This parameter is required.'),
  labId?: string(name='LabId', description='This parameter is required.'),
  orderBy?: string(name='OrderBy'),
  orderDirection?: string(name='OrderDirection'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model QueryOrgLabRecordListResponseBody = {
  data?: [ 
    {
      createdAt?: long(name='CreatedAt'),
      labRecordId?: string(name='LabRecordId'),
      status?: int32(name='Status'),
      submittedAt?: long(name='SubmittedAt'),
    }
  ](name='Data'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  pageIndex?: long(name='PageIndex'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model QueryOrgLabRecordListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryOrgLabRecordListResponseBody(name='body'),
}

/**
 * @summary 查询指定学生实验记录
 *
 * @param request QueryOrgLabRecordListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryOrgLabRecordListResponse
 */
async function queryOrgLabRecordListWithOptions(request: QueryOrgLabRecordListRequest, runtime: Util.RuntimeOptions): QueryOrgLabRecordListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunUid)) {
    query['AliyunUid'] = request.aliyunUid;
  }
  if (!Util.isUnset(request.labId)) {
    query['LabId'] = request.labId;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.orderDirection)) {
    query['OrderDirection'] = request.orderDirection;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryOrgLabRecordList',
    version = '2023-12-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询指定学生实验记录
 *
 * @param request QueryOrgLabRecordListRequest
 * @return QueryOrgLabRecordListResponse
 */
async function queryOrgLabRecordList(request: QueryOrgLabRecordListRequest): QueryOrgLabRecordListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOrgLabRecordListWithOptions(request, runtime);
}

