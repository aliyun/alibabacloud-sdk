/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'dg';
  @version = '2019-03-27';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'dg.aliyuncs.com',
    ap-northeast-2-pop = 'dg.aliyuncs.com',
    ap-south-1 = 'dg.aliyuncs.com',
    ap-southeast-1 = 'dg.aliyuncs.com',
    ap-southeast-2 = 'dg.aliyuncs.com',
    ap-southeast-3 = 'dg.aliyuncs.com',
    ap-southeast-5 = 'dg.aliyuncs.com',
    cn-beijing = 'dg.aliyuncs.com',
    cn-beijing-finance-1 = 'dg.aliyuncs.com',
    cn-beijing-finance-pop = 'dg.aliyuncs.com',
    cn-beijing-gov-1 = 'dg.aliyuncs.com',
    cn-beijing-nu16-b01 = 'dg.aliyuncs.com',
    cn-chengdu = 'dg.aliyuncs.com',
    cn-edge-1 = 'dg.aliyuncs.com',
    cn-fujian = 'dg.aliyuncs.com',
    cn-haidian-cm12-c01 = 'dg.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'dg.aliyuncs.com',
    cn-hangzhou-finance = 'dg.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'dg.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'dg.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'dg.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'dg.aliyuncs.com',
    cn-hangzhou-test-306 = 'dg.aliyuncs.com',
    cn-hongkong = 'dg.aliyuncs.com',
    cn-hongkong-finance-pop = 'dg.aliyuncs.com',
    cn-huhehaote = 'dg.aliyuncs.com',
    cn-north-2-gov-1 = 'dg.aliyuncs.com',
    cn-qingdao = 'dg.aliyuncs.com',
    cn-qingdao-nebula = 'dg.aliyuncs.com',
    cn-shanghai = 'dg.aliyuncs.com',
    cn-shanghai-et15-b01 = 'dg.aliyuncs.com',
    cn-shanghai-et2-b01 = 'dg.aliyuncs.com',
    cn-shanghai-finance-1 = 'dg.aliyuncs.com',
    cn-shanghai-inner = 'dg.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'dg.aliyuncs.com',
    cn-shenzhen = 'dg.aliyuncs.com',
    cn-shenzhen-finance-1 = 'dg.aliyuncs.com',
    cn-shenzhen-inner = 'dg.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'dg.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'dg.aliyuncs.com',
    cn-wuhan = 'dg.aliyuncs.com',
    cn-yushanfang = 'dg.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'dg.aliyuncs.com',
    cn-zhangjiakou = 'dg.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'dg.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'dg.aliyuncs.com',
    eu-central-1 = 'dg.aliyuncs.com',
    eu-west-1 = 'dg.aliyuncs.com',
    eu-west-1-oxs = 'dg.aliyuncs.com',
    me-east-1 = 'dg.aliyuncs.com',
    rus-west-1-pop = 'dg.aliyuncs.com',
    us-east-1 = 'dg.aliyuncs.com',
    us-west-1 = 'dg.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddDatabaseRequest {
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCzxxxx', position='Body'),
  dbDescription?: string(name='DbDescription', position='Body'),
  dbName?: string(name='DbName', example='db_test', position='Body'),
  dbPassword?: string(name='DbPassword', example='password', position='Body'),
  dbType?: string(name='DbType', example='MySQL', position='Body'),
  dbUserName?: string(name='DbUserName', example='dg_test', position='Body'),
  gatewayId: string(name='GatewayId', example='dg-yhss6sdla****', position='Body'),
  host: string(name='Host', example='11.*.*.109', position='Body'),
  port: int32(name='Port', example='3440', position='Body'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model AddDatabaseResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='test_data'),
  errorMsg?: string(name='ErrorMsg', example='SYSTEM_ERR'),
  requestId?: string(name='RequestId', example='41916DEB-F62D-41FA-AB53-FC61D795BC88'),
  success?: boolean(name='Success', example='true'),
}

model AddDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddDatabaseResponseBody(name='body'),
}

async function addDatabase(request: AddDatabaseRequest): AddDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDatabase', 'POST', '/', 'json', true, 'form', request);
}

model AddDatabaseListRequest {
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCzxxxx', position='Body'),
  databaseString: string(name='DatabaseString', example='[{"host":"127.0.0.1","port":"3306","gatewayId":"dg-xsdasdasdasdasd"}]', position='Body'),
}

model AddDatabaseListResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='SUCCESS'),
  errorMsg?: string(name='ErrorMsg', example='Error'),
  requestId?: string(name='RequestId', example='ABCD-1234'),
  success?: boolean(name='Success', example='true'),
}

model AddDatabaseListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddDatabaseListResponseBody(name='body'),
}

async function addDatabaseList(request: AddDatabaseListRequest): AddDatabaseListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDatabaseList', 'POST', '/', 'json', true, 'form', request);
}

model ConnectDatabaseRequest {
  dbName?: string(name='DbName', example='db_name', position='Body'),
  dbPassword?: string(name='DbPassword', example='password', position='Body'),
  dbType?: string(name='DbType', example='MySQL', position='Body'),
  dbUserName?: string(name='DbUserName', example='dg_test', position='Body'),
  gatewayId: string(name='GatewayId', example='dg-yhss6sdlaff****', position='Body'),
  host: string(name='Host', example='11.163.23.109', position='Body'),
  port: int32(name='Port', example='3440', position='Body'),
}

model ConnectDatabaseResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='test_data'),
  errorMsg?: string(name='ErrorMsg', example='SYSTEM_ERR'),
  requestId?: string(name='RequestId', example='EAF2AA07-860D-43DA-BEE8-1E43AAE024DG'),
  success?: boolean(name='Success', example='true'),
}

model ConnectDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConnectDatabaseResponseBody(name='body'),
}

async function connectDatabase(request: ConnectDatabaseRequest): ConnectDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConnectDatabase', 'POST', '/', 'json', true, 'form', request);
}

model CreateDatabaseAccessPointRequest {
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCzxxxx', position='Body'),
  dbInstanceId: string(name='DbInstanceId', example='dg-db-abcd1234', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  vSwitchId: string(name='VSwitchId', example='vsw-123abcd', position='Body'),
  vpcAZone: string(name='VpcAZone', example='cn-hangzhou-i', position='Body'),
  vpcId: string(name='VpcId', example='vpc-123abcd', position='Body'),
  vpcRegionId: string(name='VpcRegionId', example='cn-hangzhou', position='Body'),
}

model CreateDatabaseAccessPointResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='test_data'),
  errorMsg?: string(name='ErrorMsg', example='SYSTEM_ERR'),
  requestId?: string(name='RequestId', example='41916DEB-F62D-41FA-AB53-FC61D795BC66'),
  success?: boolean(name='Success', example='true'),
}

model CreateDatabaseAccessPointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDatabaseAccessPointResponseBody(name='body'),
}

async function createDatabaseAccessPoint(request: CreateDatabaseAccessPointRequest): CreateDatabaseAccessPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDatabaseAccessPoint', 'POST', '/', 'json', true, 'form', request);
}

model CreateGatewayRequest {
  gatewayDesc?: string(name='GatewayDesc', position='Body'),
  gatewayName: string(name='GatewayName', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model CreateGatewayResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='dg-yhss6sdlaff****'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId', example='A7D17E3E-358C-4A80-986C-F6C3B048AD17'),
  success?: boolean(name='Success', example='true'),
}

model CreateGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateGatewayResponseBody(name='body'),
}

async function createGateway(request: CreateGatewayRequest): CreateGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGateway', 'POST', '/', 'json', true, 'form', request);
}

model CreateGatewayVerifyCodeRequest {
  gatewayId: string(name='GatewayId', example='dg-yhss6sdlaff****', position='Body'),
}

model CreateGatewayVerifyCodeResponseBody = {
  code?: string(name='Code', example='SYSTEM_ERR'),
  data?: string(name='Data', example='O2emaiUwOqSakQhidbbvb4mu8Rpy****'),
  errorMsg?: string(name='ErrorMsg', example='Check parameter failure[User not match gateway].'),
  requestId?: string(name='RequestId', example='D31DB440-6025-57A6-841C-DD366F1B54C3'),
  success?: boolean(name='Success', example='true'),
}

model CreateGatewayVerifyCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateGatewayVerifyCodeResponseBody(name='body'),
}

async function createGatewayVerifyCode(request: CreateGatewayVerifyCodeRequest): CreateGatewayVerifyCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGatewayVerifyCode', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDatabaseRequest {
  instanceId: string(name='InstanceId', example='z8gw7qdjm36****', position='Body'),
}

model DeleteDatabaseResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='2019-09-12T14:40:46'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId', example='CDDAAA07-D806-AG67-BEE8-1E43AAE024DC'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDatabaseResponseBody(name='body'),
}

async function deleteDatabase(request: DeleteDatabaseRequest): DeleteDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDatabase', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDatabaseAccessPointRequest {
  dbInstanceId: string(name='DbInstanceId', example='dg-db-abcd123', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  vSwitchId?: string(name='VSwitchId', example='vsw-123abcd', position='Body'),
  vpcAZone?: string(name='VpcAZone', example='cn-hangzhou-i', position='Body'),
  vpcId: string(name='VpcId', example='vpc-123abcd', position='Body'),
  vpcRegionId?: string(name='VpcRegionId', example='cn-hangzhou', position='Body'),
}

model DeleteDatabaseAccessPointResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='SUCCESS'),
  errorMsg?: string(name='ErrorMsg', example='SYSTEM_ERR'),
  requestId?: string(name='RequestId', example='41916DEB-F62D-41FA-AB53-FC61D795BC66'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDatabaseAccessPointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDatabaseAccessPointResponseBody(name='body'),
}

async function deleteDatabaseAccessPoint(request: DeleteDatabaseAccessPointRequest): DeleteDatabaseAccessPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDatabaseAccessPoint', 'POST', '/', 'json', true, 'form', request);
}

model DeleteGatewayRequest {
  gatewayId: string(name='GatewayId', example='dg-9z57rbne******', position='Body'),
}

model DeleteGatewayResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='SUCCESS'),
  errorMsg?: string(name='ErrorMsg', example='SYSTEM_ERR'),
  requestId?: string(name='RequestId', example='60B7DF92-CC90-5166-9965-BCBE5F2911CD'),
  success?: boolean(name='Success', example='true'),
}

model DeleteGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGatewayResponseBody(name='body'),
}

async function deleteGateway(request: DeleteGatewayRequest): DeleteGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGateway', 'POST', '/', 'json', true, 'form', request);
}

model DeleteGatewayInstanceRequest {
  gatewayId: string(name='GatewayId', example='dg-123', position='Body'),
  gatewayInstanceId: string(name='GatewayInstanceId', example='dg-node-123', position='Body'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DeleteGatewayInstanceResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='SUCCESS'),
  errorMsg?: string(name='ErrorMsg', example='Error'),
  requestId?: string(name='RequestId', example='41916DEB-F62D-41FA-AB53-FC61D795BC66'),
  success?: boolean(name='Success', example='true'),
}

model DeleteGatewayInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGatewayInstanceResponseBody(name='body'),
}

async function deleteGatewayInstance(request: DeleteGatewayInstanceRequest): DeleteGatewayInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGatewayInstance', 'POST', '/', 'json', true, 'form', request);
}

model DescribeRegionsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeRegionsResponseBody = {
  code?: string(name='Code', example='200'),
  errorMsg?: string(name='ErrorMsg', example='Error'),
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint', description='Region Endpoint。', example='dg.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='Region')
  }(name='Regions', description='Region'),
  requestId?: string(name='RequestId', example='41916DEB-F62D-41FA-AB53-FC61D795BC66'),
  success?: boolean(name='Success', example='true'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', true, 'form', request);
}

model DownloadGatewayProgramRequest {
  dgVersion?: string(name='DgVersion', position='Body'),
  userOS?: string(name='UserOS', example='your OS', position='Body'),
}

model DownloadGatewayProgramResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='https://public-buk.oss-cn-hangzhou.aliyuncs.com/db-gateway-pkgs/gateway-daemon-pkgs/aliyun-db-gateway.tar.gz?Expires=xxx/YV56pzE%3D'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId', example='028D8614-5940-4BC4-86BB-428E115F27DC'),
  success?: boolean(name='Success', example='true'),
}

model DownloadGatewayProgramResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DownloadGatewayProgramResponseBody(name='body'),
}

async function downloadGatewayProgram(request: DownloadGatewayProgramRequest): DownloadGatewayProgramResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadGatewayProgram', 'POST', '/', 'json', true, 'form', request);
}

model FindUserGatewayByIdRequest {
  gatewayId: string(name='GatewayId', example='dg-yhss6sdlaff****', position='Body'),
}

model FindUserGatewayByIdResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data'),
  errorMsg?: string(name='ErrorMsg', example='""'),
  requestId?: string(name='RequestId', example='31728E14-8164-49C3-928B-044E93B8A11E'),
  success?: boolean(name='Success', example='true'),
}

model FindUserGatewayByIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FindUserGatewayByIdResponseBody(name='body'),
}

async function findUserGatewayById(request: FindUserGatewayByIdRequest): FindUserGatewayByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FindUserGatewayById', 'POST', '/', 'json', true, 'form', request);
}

model GetUserDatabasesRequest {
  dbType?: string(name='DbType', example='MySQL', position='Body'),
  gatewayId?: string(name='GatewayId', example='dg-yhss6sdlaff****', position='Body'),
  host?: string(name='Host', example='11.*.*.109', position='Body'),
  instanceId?: string(name='InstanceId', example='db', position='Body'),
  pageNumber?: string(name='PageNumber', example='1', position='Body'),
  pageSize?: string(name='PageSize', example='10', position='Body'),
  port?: int32(name='Port', example='3440', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  searchKey?: string(name='SearchKey', position='Body'),
}

model GetUserDatabasesResponseBody = {
  code?: string(name='Code', example='OK'),
  count?: int32(name='Count', example='1'),
  data?: string(name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId', example='951AE6AA-BFC5-4DD8-8CD6-DFD3D51E4170'),
  success?: string(name='Success', example='true'),
}

model GetUserDatabasesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserDatabasesResponseBody(name='body'),
}

async function getUserDatabases(request: GetUserDatabasesRequest): GetUserDatabasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserDatabases', 'POST', '/', 'json', true, 'form', request);
}

model GetUserGatewayInstancesRequest {
  gatewayId: string(name='GatewayId', example='dg-7i09blz8i*******', position='Body'),
}

model GetUserGatewayInstancesResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='[{\\"connectEndpointType\\":\\"INTERNET\\",\\"currentDaemonVersion\\":\\"3.0\\",\\"currentVersion\\":\\"3.0\\",\\"endPoint\\":\\"pub-cn-hangzhou.dg.aliyuncs.com\\",\\"gatewayId\\":\\"dg-7i09bl******\\",\\"gatewayInstanceId\\":\\"dg-node-IjtchHPSucZ******\\",\\"gatewayInstanceStatus\\":\\"STOPPED\\",\\"lastUpdateTime\\":\\"16124920*****\\",\\"localIP\\":\\"172.XX.XX.49\\",\\"message\\":\\"\\",\\"outputIP\\":\\"172.XX.XX.49\\"}]'),
  errorMsg?: string(name='ErrorMsg', example='SYSTEM_ERR'),
  requestId?: string(name='RequestId', example='4171E7B3-ED84-5882-90ED-924A08EDD414'),
  success?: boolean(name='Success', example='true'),
}

model GetUserGatewayInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserGatewayInstancesResponseBody(name='body'),
}

async function getUserGatewayInstances(request: GetUserGatewayInstancesRequest): GetUserGatewayInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserGatewayInstances', 'POST', '/', 'json', true, 'form', request);
}

model GetUserGatewaysRequest {
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='20', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  searchKey?: string(name='SearchKey', example='test', position='Body'),
}

model GetUserGatewaysResponseBody = {
  code?: string(name='Code', example='200'),
  count?: int32(name='Count', example='15'),
  data?: string(name='Data', example='[{\\"creatorId\\":\\"\\",\\"dgVersion\\":\\"3\\",\\"exceptionMsg\\":\\"\\",\\"gatewayDesc\\":\\"test\\",\\"gatewayId\\":\\"dg-a55it25s******\\",\\"gatewayName\\":\\"shu**test\\",\\"numOfExceptionInstance\\":0,\\"numOfRunningInstance\\":0,\\"regionId\\":\\"cn-hangzhou\\",\\"status\\":\\"STOPPED\\",\\"userId\\":\\"140692647******\\"}]'),
  errorMsg?: string(name='ErrorMsg', example='SYSTEM_ERR'),
  requestId?: string(name='RequestId', example='E68F1794-354B-4F18-AA6D-1F00353E632E'),
  success?: boolean(name='Success', example='true'),
}

model GetUserGatewaysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserGatewaysResponseBody(name='body'),
}

async function getUserGateways(request: GetUserGatewaysRequest): GetUserGatewaysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserGateways', 'POST', '/', 'json', true, 'form', request);
}

model ListDatabaseAccessPointRequest {
  dbInstanceId?: string(name='DbInstanceId', example='dg-db-123', position='Body'),
  gatewayId?: string(name='GatewayId', example='dg-123', position='Body'),
  host?: string(name='Host', example='127.XX.XX.1', position='Body'),
  pageNumber?: string(name='PageNumber', example='1', position='Body'),
  pageSize?: string(name='PageSize', example='20', position='Body'),
  port?: int32(name='Port', example='3306', minimum=0, maximum=65535, position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  searchKey?: string(name='SearchKey', example='dg-123', position='Body'),
  vpcId?: string(name='VpcId', example='vpc-123', position='Body'),
}

model ListDatabaseAccessPointResponseBody = {
  code?: string(name='Code', example='200'),
  count?: int32(name='Count', example='1'),
  data?: string(name='Data', example='[{\\"accessAddr\\":\\"172.XX.XX.205\\",\\"accessPort\\":450**,\\"dbInstanceId\\":\\"dg--0gt663453******\\",\\"gmtCreate\\":16426*******,\\"gmtModified\\":1642649******,\\"routerId\\":\\"cn-hangzhou\\",\\"vpcAzoneId\\":\\"cn-hangzhou-h\\",\\"vpcId\\":\\"vpc-bp13h7uzhul******\\",\\"vswitchId\\":\\"vsw-bp1syh8v******\\"}]'),
  errorMsg?: string(name='ErrorMsg', example='SYSTEM_ERR'),
  requestId?: string(name='RequestId', example='08897339-B531-56EE-AB7E-71E69DFDEBDA'),
  success?: string(name='Success', example='true'),
}

model ListDatabaseAccessPointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDatabaseAccessPointResponseBody(name='body'),
}

async function listDatabaseAccessPoint(request: ListDatabaseAccessPointRequest): ListDatabaseAccessPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDatabaseAccessPoint', 'POST', '/', 'json', true, 'form', request);
}

model ModifyDatabaseRequest {
  dbDescription?: string(name='DbDescription', position='Body'),
  dbName?: string(name='DbName', example='db_test', position='Body'),
  dbPassword?: string(name='DbPassword', example='password', position='Body'),
  dbType?: string(name='DbType', example='MySQL', position='Body'),
  dbUserName?: string(name='DbUserName', example='dg_test', position='Body'),
  host: string(name='Host', example='11.*.*.109', position='Body'),
  instanceId: string(name='InstanceId', example='db', position='Body'),
  port: int32(name='Port', example='3440', position='Body'),
}

model ModifyDatabaseResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='2019-09-12T14:40:46'),
  errorMsg?: string(name='ErrorMsg', example='SYSTEM_ERR'),
  requestId?: string(name='RequestId', example='EAF2AA07-860D-43DA-BEE8-1E43AAE024ED'),
  success?: boolean(name='Success', example='true'),
}

model ModifyDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDatabaseResponseBody(name='body'),
}

async function modifyDatabase(request: ModifyDatabaseRequest): ModifyDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDatabase', 'POST', '/', 'json', true, 'form', request);
}

model ModifyGatewayRequest {
  gatewayDesc?: string(name='GatewayDesc', position='Body'),
  gatewayId: string(name='GatewayId', example='dg-yhss6sdlaff****', position='Body'),
  gatewayName: string(name='GatewayName', example='gateway_name', position='Body'),
}

model ModifyGatewayResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='data_test'),
  errorMsg?: string(name='ErrorMsg', example='SYSTEM_ERR'),
  requestId?: string(name='RequestId', example='CDDAAA07-D806-AG67-BEE8-1E43AAE024DC'),
  success?: boolean(name='Success', example='true'),
}

model ModifyGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyGatewayResponseBody(name='body'),
}

async function modifyGateway(request: ModifyGatewayRequest): ModifyGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyGateway', 'POST', '/', 'json', true, 'form', request);
}

model RetryDatabaseRequest {
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCzxxxx', position='Body'),
  dbDescription?: string(name='DbDescription', example='123', position='Body'),
  dbName?: string(name='DbName', example='abcd', position='Body'),
  dbPassword?: string(name='DbPassword', example='123', position='Body'),
  dbType?: string(name='DbType', example='MySQL', position='Body'),
  dbUserName?: string(name='DbUserName', example='abcd', position='Body'),
  gatewayId: string(name='GatewayId', example='dg-yhss6sdlaff****', position='Body'),
  host: string(name='Host', example='127.0.0.1', position='Body'),
  port: int32(name='Port', example='3306', minimum=0, maximum=65535, position='Body'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model RetryDatabaseResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='SUCCESS'),
  errorMsg?: string(name='ErrorMsg', example='Error'),
  requestId?: string(name='RequestId', example='CDDAAA07-D806-AG67-BEE8-1E43AAE024DD'),
  success?: boolean(name='Success', example='true'),
}

model RetryDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RetryDatabaseResponseBody(name='body'),
}

async function retryDatabase(request: RetryDatabaseRequest): RetryDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RetryDatabase', 'POST', '/', 'json', true, 'form', request);
}

model StopGatewayRequest {
  gatewayId: string(name='GatewayId', example='dg-yhss6sdlaff****', position='Body'),
  gatewayInstanceId?: string(name='GatewayInstanceId', example='dg-node-123', position='Body'),
}

model StopGatewayResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='test_data'),
  errorMsg?: string(name='ErrorMsg', example='SYSTEM_ERR'),
  requestId?: string(name='RequestId', example='CDDAAA07-D806-AG67-BEE8-1E43AAE024DE'),
  success?: boolean(name='Success', example='true'),
}

model StopGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopGatewayResponseBody(name='body'),
}

async function stopGateway(request: StopGatewayRequest): StopGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopGateway', 'POST', '/', 'json', true, 'form', request);
}

