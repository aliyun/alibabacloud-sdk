/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'green.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'green.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'green.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'green.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'green.ap-southeast-1.aliyuncs.com',
    cn-chengdu = 'green.aliyuncs.com',
    cn-hongkong = 'green.aliyuncs.com',
    cn-huhehaote = 'green.aliyuncs.com',
    cn-qingdao = 'green.aliyuncs.com',
    cn-zhangjiakou = 'green.aliyuncs.com',
    eu-central-1 = 'green.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'green.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'green.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'green.ap-southeast-1.aliyuncs.com',
    cn-hangzhou-finance = 'green.aliyuncs.com',
    cn-shenzhen-finance-1 = 'green.aliyuncs.com',
    cn-shanghai-finance-1 = 'green.aliyuncs.com',
    cn-north-2-gov-1 = 'green.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('green', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DescribeImageResultExtRequest {
  infoType?: string(name='InfoType', example='customImage,textInImage'),
  reqId?: string(name='ReqId', example='638EDDC65C82AB39319A9F60'),
}

model DescribeImageResultExtResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    customImage?: [ 
      {
        imageId?: string(name='ImageId', description='图片ID。', example='123456'),
        libId?: string(name='LibId', description='图库ID。', example='123456'),
        libName?: string(name='LibName', description='图库名。', example='图库123'),
      }
    ](name='CustomImage'),
    publicFigure?: [ 
      {
        figureId?: string(name='FigureId', description='人物ID。', example='yzazhzou'),
      }
    ](name='PublicFigure'),
    textInImage?: {
      ocrDatas?: [ string ](name='OcrDatas'),
      riskWords?: [ string ](name='RiskWords'),
    }(name='TextInImage'),
  }(name='Data'),
  msg?: string(name='Msg', example='success'),
  requestId?: string(name='RequestId', example='6CF2815C-C8C7-4A01-B52E-FF6E24F53492'),
}

model DescribeImageResultExtResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageResultExtResponseBody(name='body'),
}

async function describeImageResultExtWithOptions(request: DescribeImageResultExtRequest, runtime: Util.RuntimeOptions): DescribeImageResultExtResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.infoType)) {
    body['InfoType'] = request.infoType;
  }
  if (!Util.isUnset(request.reqId)) {
    body['ReqId'] = request.reqId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageResultExt',
    version = '2022-03-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageResultExt(request: DescribeImageResultExtRequest): DescribeImageResultExtResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageResultExtWithOptions(request, runtime);
}

model ImageModerationRequest {
  service?: string(name='Service', example='baselineCheck'),
  serviceParameters?: string(name='ServiceParameters', example='{"imageUrl":"https://www.aliyun.com/test.jpg","dataId":"img1234567"}'),
}

model ImageModerationResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    dataId?: string(name='DataId', example='fb5ffab1-993b-449f-b8d6-b97d5e3331f2'),
    result?: [ 
      {
        confidence?: float(name='Confidence', example='81.22'),
        label?: string(name='Label', example='violent_explosion'),
      }
    ](name='Result'),
  }(name='Data'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='6CF2815C-C8C7-4A01-B52E-FF6E24F53492'),
}

model ImageModerationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImageModerationResponseBody(name='body'),
}

async function imageModerationWithOptions(request: ImageModerationRequest, runtime: Util.RuntimeOptions): ImageModerationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.service)) {
    body['Service'] = request.service;
  }
  if (!Util.isUnset(request.serviceParameters)) {
    body['ServiceParameters'] = request.serviceParameters;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ImageModeration',
    version = '2022-03-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function imageModeration(request: ImageModerationRequest): ImageModerationResponse {
  var runtime = new Util.RuntimeOptions{};
  return imageModerationWithOptions(request, runtime);
}

model TextModerationRequest {
  service?: string(name='Service', example='nickname_detection'),
  serviceParameters?: string(name='ServiceParameters'),
}

model TextModerationResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    accountId?: string(name='accountId'),
    deviceId?: string(name='deviceId'),
    labels?: string(name='labels', example='porn'),
    reason?: string(name='reason'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model TextModerationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TextModerationResponseBody(name='body'),
}

async function textModerationWithOptions(request: TextModerationRequest, runtime: Util.RuntimeOptions): TextModerationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.service)) {
    body['Service'] = request.service;
  }
  if (!Util.isUnset(request.serviceParameters)) {
    body['ServiceParameters'] = request.serviceParameters;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TextModeration',
    version = '2022-03-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function textModeration(request: TextModerationRequest): TextModerationResponse {
  var runtime = new Util.RuntimeOptions{};
  return textModerationWithOptions(request, runtime);
}

model VoiceModerationRequest {
  service?: string(name='Service', example='nickname_detection'),
  serviceParameters?: string(name='ServiceParameters'),
}

model VoiceModerationResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    taskId?: string(name='TaskId', example='xxxxx-xxxxx'),
  }(name='Data'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', description='Id of the request', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model VoiceModerationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VoiceModerationResponseBody(name='body'),
}

async function voiceModerationWithOptions(request: VoiceModerationRequest, runtime: Util.RuntimeOptions): VoiceModerationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.service)) {
    body['Service'] = request.service;
  }
  if (!Util.isUnset(request.serviceParameters)) {
    body['ServiceParameters'] = request.serviceParameters;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'VoiceModeration',
    version = '2022-03-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function voiceModeration(request: VoiceModerationRequest): VoiceModerationResponse {
  var runtime = new Util.RuntimeOptions{};
  return voiceModerationWithOptions(request, runtime);
}

model VoiceModerationCancelRequest {
  service?: string(name='Service', example='nickname_detection'),
  serviceParameters?: string(name='ServiceParameters', example='{
        "taskId": "xxxxx-xxxx"
    }'),
}

model VoiceModerationCancelResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', description='Id of the request', example='4A926AE2-4C96-573F-824F-0532960799F8'),
}

model VoiceModerationCancelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VoiceModerationCancelResponseBody(name='body'),
}

async function voiceModerationCancelWithOptions(request: VoiceModerationCancelRequest, runtime: Util.RuntimeOptions): VoiceModerationCancelResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.service)) {
    body['Service'] = request.service;
  }
  if (!Util.isUnset(request.serviceParameters)) {
    body['ServiceParameters'] = request.serviceParameters;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'VoiceModerationCancel',
    version = '2022-03-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function voiceModerationCancel(request: VoiceModerationCancelRequest): VoiceModerationCancelResponse {
  var runtime = new Util.RuntimeOptions{};
  return voiceModerationCancelWithOptions(request, runtime);
}

model VoiceModerationResultRequest {
  service?: string(name='Service', example='nickname_detection'),
  serviceParameters?: string(name='ServiceParameters'),
}

model VoiceModerationResultResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    liveId?: string(name='LiveId', example='liveId'),
    sliceDetails?: [ 
      {
        endTime?: long(name='EndTime', example='10'),
        endTimestamp?: long(name='EndTimestamp'),
        extend?: string(name='Extend'),
        labels?: string(name='Labels', example='sexual_sounds'),
        originAlgoResult?: map[string]any(name='OriginAlgoResult'),
        riskTips?: string(name='RiskTips'),
        riskWords?: string(name='RiskWords'),
        score?: float(name='Score', example='87.01'),
        startTime?: long(name='StartTime', example='0'),
        startTimestamp?: long(name='StartTimestamp'),
        text?: string(name='Text'),
        url?: string(name='Url'),
      }
    ](name='SliceDetails'),
    taskId?: string(name='TaskId', example='kw24ihd0WGkdi5nniVZM@qOj-1x5Ibb'),
    url?: string(name='Url'),
  }(name='Data'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', description='Id of the request', example='2881AD4F-638B-52A3-BA20-F74C5B1CEAE3'),
}

model VoiceModerationResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VoiceModerationResultResponseBody(name='body'),
}

async function voiceModerationResultWithOptions(request: VoiceModerationResultRequest, runtime: Util.RuntimeOptions): VoiceModerationResultResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.service)) {
    body['Service'] = request.service;
  }
  if (!Util.isUnset(request.serviceParameters)) {
    body['ServiceParameters'] = request.serviceParameters;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'VoiceModerationResult',
    version = '2022-03-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function voiceModerationResult(request: VoiceModerationResultRequest): VoiceModerationResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return voiceModerationResultWithOptions(request, runtime);
}

