/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('educloud', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DescribeCourseRequest {
  courseId?: string(name='CourseId'),
}

model DescribeCourseResponseBody = {
  code?: long(name='Code'),
  data?: {
    category?: string(name='Category'),
    chapter?: [ 
      {
        lessons?: [ 
          {
            lessonId?: string(name='LessonId'),
            title?: string(name='Title'),
            type?: string(name='Type'),
          }
        ](name='Lessons'),
        number?: long(name='Number'),
        title?: string(name='Title'),
        unit?: [ 
          {
            lessons?: [ 
              {
                lessonId?: string(name='LessonId'),
                title?: string(name='Title'),
                type?: string(name='Type'),
              }
            ](name='Lessons'),
            number?: long(name='Number'),
            title?: string(name='Title'),
          }
        ](name='Unit'),
      }
    ](name='Chapter'),
    courseId?: string(name='CourseId'),
    introduce?: string(name='Introduce'),
    lessonNum?: long(name='LessonNum'),
    lessons?: [ 
      {
        lessonId?: string(name='LessonId'),
        title?: string(name='Title'),
        type?: string(name='Type'),
      }
    ](name='Lessons'),
    pictureUrl?: string(name='PictureUrl'),
    tags?: string(name='Tags'),
    title?: string(name='Title'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model DescribeCourseResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCourseResponseBody(name='body'),
}

async function describeCourseWithOptions(request: DescribeCourseRequest, runtime: Util.RuntimeOptions): DescribeCourseResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCourse',
    version = '2022-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCourse(request: DescribeCourseRequest): DescribeCourseResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCourseWithOptions(request, runtime);
}

model DescribeCourseLessonRequest {
  lessonId?: string(name='LessonId'),
}

model DescribeCourseLessonResponseBody = {
  code?: long(name='Code'),
  data?: {
    content?: string(name='Content'),
    url?: string(name='Url'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model DescribeCourseLessonResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCourseLessonResponseBody(name='body'),
}

async function describeCourseLessonWithOptions(request: DescribeCourseLessonRequest, runtime: Util.RuntimeOptions): DescribeCourseLessonResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCourseLesson',
    version = '2022-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCourseLesson(request: DescribeCourseLessonRequest): DescribeCourseLessonResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCourseLessonWithOptions(request, runtime);
}

model DescribeLabRequest {
  labId?: string(name='LabId'),
}

model DescribeLabResponseBody = {
  code?: long(name='Code'),
  data?: {
    category?: string(name='Category'),
    chapter?: [ 
      {
        orderNumber?: long(name='OrderNumber'),
        sections?: [ 
          {
            content?: string(name='Content'),
            orderNumber?: long(name='OrderNumber'),
            sectionId?: string(name='SectionId'),
            title?: string(name='Title'),
          }
        ](name='Sections'),
        title?: string(name='Title'),
      }
    ](name='Chapter'),
    introduce?: string(name='Introduce'),
    labId?: string(name='LabId'),
    tag?: string(name='Tag'),
    time?: string(name='Time'),
    title?: string(name='Title'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model DescribeLabResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLabResponseBody(name='body'),
}

async function describeLabWithOptions(request: DescribeLabRequest, runtime: Util.RuntimeOptions): DescribeLabResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLab',
    version = '2022-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLab(request: DescribeLabRequest): DescribeLabResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLabWithOptions(request, runtime);
}

model GetLabTokenRequest {
  labId?: string(name='LabId'),
  ramUid?: string(name='RamUid'),
}

model GetLabTokenResponseBody = {
  code?: long(name='Code'),
  data?: {
    orderId?: string(name='OrderId'),
    url?: string(name='Url'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model GetLabTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetLabTokenResponseBody(name='body'),
}

async function getLabTokenWithOptions(request: GetLabTokenRequest, runtime: Util.RuntimeOptions): GetLabTokenResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLabToken',
    version = '2022-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLabToken(request: GetLabTokenRequest): GetLabTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLabTokenWithOptions(request, runtime);
}

model ListCoursesRequest {
  id?: [ string ](name='Id'),
  page?: long(name='Page'),
  pageSize?: long(name='PageSize'),
}

model ListCoursesResponseBody = {
  code?: long(name='Code'),
  data?: {
    list?: [ 
      {
        category?: string(name='Category'),
        courseId?: string(name='CourseId'),
        introduce?: string(name='Introduce'),
        lessonNum?: long(name='LessonNum'),
        pictureUrl?: string(name='PictureUrl'),
        tags?: string(name='Tags'),
        title?: string(name='Title'),
      }
    ](name='List'),
    page?: long(name='Page'),
    pageSize?: long(name='PageSize'),
    total?: long(name='Total'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model ListCoursesResponse = {
  headers: map[string]string(name='headers'),
  body: ListCoursesResponseBody(name='body'),
}

async function listCoursesWithOptions(request: ListCoursesRequest, runtime: Util.RuntimeOptions): ListCoursesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCourses',
    version = '2022-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCourses(request: ListCoursesRequest): ListCoursesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCoursesWithOptions(request, runtime);
}

model ListLabsRequest {
  id?: [ string ](name='Id'),
  page?: long(name='Page'),
  pageSize?: long(name='PageSize'),
}

model ListLabsResponseBody = {
  code?: long(name='Code'),
  data?: {
    list?: [ 
      {
        category?: string(name='Category'),
        description?: string(name='Description'),
        labId?: string(name='LabId'),
        tag?: string(name='Tag'),
        time?: string(name='Time'),
        title?: string(name='Title'),
      }
    ](name='List'),
    page?: long(name='Page'),
    pageSize?: long(name='PageSize'),
    total?: long(name='Total'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model ListLabsResponse = {
  headers: map[string]string(name='headers'),
  body: ListLabsResponseBody(name='body'),
}

async function listLabsWithOptions(request: ListLabsRequest, runtime: Util.RuntimeOptions): ListLabsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLabs',
    version = '2022-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLabs(request: ListLabsRequest): ListLabsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLabsWithOptions(request, runtime);
}

