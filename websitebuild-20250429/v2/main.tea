/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('websitebuild', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateLogoTaskRequest {
  logoVersion?: string(name='LogoVersion'),
  negativePrompt?: string(name='NegativePrompt'),
  parameters?: string(name='Parameters', example='{\\\\"ehpcutilParam\\\\":\\\\"sched job_submit --commandline \\\\\\\\\\\\"/ehpcdata/data/usersTest/huangqiaoyi-1725933699384/huangqiaoyi-1725933699384.slurm\\\\\\\\\\\\" --runasuser TestGfjnSimworks\\\\"}'),
  prompt?: string(name='Prompt'),
}

model CreateLogoTaskResponseBody = {
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', example='aliuid:1998006665794443 assumeRole not exist,serviceName:realtimelogpush.dcdnservices.aliyuncs.com'),
  requestId?: string(name='RequestId', description='Id of the request', example='6C6B99AC-39EC-5350-874C-204128C905E6'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='c3r127e325at9yd'),
}

model CreateLogoTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLogoTaskResponseBody(name='body'),
}

/**
 * @summary 提交创建Logo任务
 *
 * @param request CreateLogoTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateLogoTaskResponse
 */
async function createLogoTaskWithOptions(request: CreateLogoTaskRequest, runtime: $RuntimeOptions): CreateLogoTaskResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.logoVersion)) {
    query['LogoVersion'] = request.logoVersion;
  }
  if (!$isNull(request.negativePrompt)) {
    query['NegativePrompt'] = request.negativePrompt;
  }
  if (!$isNull(request.parameters)) {
    query['Parameters'] = request.parameters;
  }
  if (!$isNull(request.prompt)) {
    query['Prompt'] = request.prompt;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateLogoTask',
    version = '2025-04-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交创建Logo任务
 *
 * @param request CreateLogoTaskRequest
 * @return CreateLogoTaskResponse
 */
async function createLogoTask(request: CreateLogoTaskRequest): CreateLogoTaskResponse {
  var runtime = new $RuntimeOptions{};
  return createLogoTaskWithOptions(request, runtime);
}

model GetCreateLogoTaskRequest {
  taskId?: string(name='TaskId', example='20051349'),
}

model GetCreateLogoTaskResponseBody = {
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', example='aliuid:1998006665794443 assumeRole not exist,serviceName:realtimelogpush.dcdnservices.aliyuncs.com'),
  requestId?: string(name='RequestId', description='Id of the request', example='6C6B99AC-39EC-5350-874C-204128C905E6'),
  success?: boolean(name='Success', example='true'),
  task?: {
    taskId?: string(name='TaskId', example='604860995'),
    taskStatus?: string(name='TaskStatus', example='SUCCESS'),
    urls?: [ string ](name='Urls'),
  }(name='Task'),
}

model GetCreateLogoTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCreateLogoTaskResponseBody(name='body'),
}

/**
 * @summary 查询Logo创建任务
 *
 * @param request GetCreateLogoTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCreateLogoTaskResponse
 */
async function getCreateLogoTaskWithOptions(request: GetCreateLogoTaskRequest, runtime: $RuntimeOptions): GetCreateLogoTaskResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetCreateLogoTask',
    version = '2025-04-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询Logo创建任务
 *
 * @param request GetCreateLogoTaskRequest
 * @return GetCreateLogoTaskResponse
 */
async function getCreateLogoTask(request: GetCreateLogoTaskRequest): GetCreateLogoTaskResponse {
  var runtime = new $RuntimeOptions{};
  return getCreateLogoTaskWithOptions(request, runtime);
}

model OperateAppInstanceForPartnerRequest {
  extend?: string(name='Extend'),
  operateEvent?: string(name='OperateEvent', example='SERVICE_DELIVERY_PROCESS'),
}

model OperateAppInstanceForPartnerResponseBody = {
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', example='aliuid:1998006665794443 assumeRole not exist,serviceName:realtimelogpush.dcdnservices.aliyuncs.com'),
  requestId?: string(name='RequestId', description='Id of the request', example='6C6B99AC-39EC-5350-874C-204128C905E6'),
  success?: string(name='Success', example='true'),
}

model OperateAppInstanceForPartnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateAppInstanceForPartnerResponseBody(name='body'),
}

/**
 * @summary 合作伙伴操作应用
 *
 * @param request OperateAppInstanceForPartnerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return OperateAppInstanceForPartnerResponse
 */
async function operateAppInstanceForPartnerWithOptions(request: OperateAppInstanceForPartnerRequest, runtime: $RuntimeOptions): OperateAppInstanceForPartnerResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.extend)) {
    query['Extend'] = request.extend;
  }
  if (!$isNull(request.operateEvent)) {
    query['OperateEvent'] = request.operateEvent;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'OperateAppInstanceForPartner',
    version = '2025-04-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 合作伙伴操作应用
 *
 * @param request OperateAppInstanceForPartnerRequest
 * @return OperateAppInstanceForPartnerResponse
 */
async function operateAppInstanceForPartner(request: OperateAppInstanceForPartnerRequest): OperateAppInstanceForPartnerResponse {
  var runtime = new $RuntimeOptions{};
  return operateAppInstanceForPartnerWithOptions(request, runtime);
}

model OperateAppServiceForPartnerRequest {
  bizId?: string(name='BizId', example='WS00001'),
  extend?: string(name='Extend', example='{\\\\"user_device_id\\\\":\\\\"6bef45cb0c76de284d24de074c088b73\\\\"}\\\\n'),
  operateEvent?: string(name='OperateEvent', example='SERVICE_FINISH'),
  serviceType?: string(name='ServiceType', example='WEBSITE_DESIGN'),
}

model OperateAppServiceForPartnerResponseBody = {
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', example='aliuid:1998006665794443 assumeRole not exist,serviceName:realtimelogpush.dcdnservices.aliyuncs.com'),
  requestId?: string(name='RequestId', description='Id of the request', example='6C6B99AC-39EC-5350-874C-204128C905E6'),
  success?: boolean(name='Success', example='true'),
}

model OperateAppServiceForPartnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateAppServiceForPartnerResponseBody(name='body'),
}

/**
 * @summary 合作伙伴操作应用服务
 *
 * @param request OperateAppServiceForPartnerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return OperateAppServiceForPartnerResponse
 */
async function operateAppServiceForPartnerWithOptions(request: OperateAppServiceForPartnerRequest, runtime: $RuntimeOptions): OperateAppServiceForPartnerResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!$isNull(request.extend)) {
    query['Extend'] = request.extend;
  }
  if (!$isNull(request.operateEvent)) {
    query['OperateEvent'] = request.operateEvent;
  }
  if (!$isNull(request.serviceType)) {
    query['ServiceType'] = request.serviceType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'OperateAppServiceForPartner',
    version = '2025-04-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 合作伙伴操作应用服务
 *
 * @param request OperateAppServiceForPartnerRequest
 * @return OperateAppServiceForPartnerResponse
 */
async function operateAppServiceForPartner(request: OperateAppServiceForPartnerRequest): OperateAppServiceForPartnerResponse {
  var runtime = new $RuntimeOptions{};
  return operateAppServiceForPartnerWithOptions(request, runtime);
}

model SyncAppInstanceForPartnerRequest {
  appInstance?: {
    appType?: string(name='AppType', example='WEBSITE'),
    bizId?: string(name='BizId', example='WD20250711094503000001'),
    deleted?: string(name='Deleted', example='fase'),
    domain?: string(name='Domain', example='alliveout.xntv.tv'),
    endTime?: string(name='EndTime', example='2024-08-23T02:14:00Z'),
    gmtDelete?: string(name='GmtDelete', example='2025-01-01 00:00:00'),
    gmtPublish?: string(name='GmtPublish', example='2025-01-01 00:00:00'),
    iconUrl?: string(name='IconUrl', example='icon/WS20250626112715000001/thumbnail.jpg'),
    name?: string(name='Name'),
    profile?: {
      deployArea?: string(name='DeployArea', example='ChineseMainland'),
      lxInstanceId?: string(name='LxInstanceId', example='12313213'),
      orderId?: string(name='OrderId', example='222217928591'),
      siteVersion?: string(name='SiteVersion', example='Basic_Edition'),
      templateEtag?: string(name='TemplateEtag', example='DC4D30B7BADDAFE9928A6C36416A2A4C'),
      templateId?: string(name='TemplateId', example='ST20211231160247sYG4'),
    }(name='Profile'),
    siteHost?: string(name='SiteHost', description='siteId', example='xxxx.scd.wezhan.cn'),
    slug?: string(name='Slug', example='31104757'),
    startTime?: string(name='StartTime', example='2025-07-15T16:00:00Z'),
    status?: string(name='Status', example='{\\\\"Phase\\\\": \\\\"Running\\\\", \\\\"SlotNum\\\\": 1, \\\\"UsedCapacity\\\\": \\\\"500.0Gi\\\\"}'),
    thumbnailUrl?: string(name='ThumbnailUrl', example='thumbnails/WS20250626112715000001/thumbnail.jpg'),
    userId?: string(name='UserId', description='123123123131232', example='12313213131'),
  }(name='AppInstance'),
  eventType?: string(name='EventType', example='CREATE'),
  operator?: string(name='Operator', example='system'),
  sourceBizId?: string(name='SourceBizId', example='31104757'),
  sourceType?: string(name='SourceType', example='MARKET_CLOUD_DREAM'),
}

model SyncAppInstanceForPartnerShrinkRequest {
  appInstanceShrink?: string(name='AppInstance'),
  eventType?: string(name='EventType', example='CREATE'),
  operator?: string(name='Operator', example='system'),
  sourceBizId?: string(name='SourceBizId', example='31104757'),
  sourceType?: string(name='SourceType', example='MARKET_CLOUD_DREAM'),
}

model SyncAppInstanceForPartnerResponseBody = {
  data?: {
    appInstance?: {
      bizId?: string(name='BizId', example='WD20250626114752000001'),
    }(name='AppInstance'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request', example='6C6B99AC-39EC-5350-874C-204128C905E6'),
}

model SyncAppInstanceForPartnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncAppInstanceForPartnerResponseBody(name='body'),
}

/**
 * @summary 合作伙伴同步应用实例
 *
 * @param tmpReq SyncAppInstanceForPartnerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SyncAppInstanceForPartnerResponse
 */
async function syncAppInstanceForPartnerWithOptions(tmpReq: SyncAppInstanceForPartnerRequest, runtime: $RuntimeOptions): SyncAppInstanceForPartnerResponse {
  tmpReq.validate();
  var request = new SyncAppInstanceForPartnerShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.appInstance)) {
    request.appInstanceShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.appInstance, 'AppInstance', 'json');
  }
  var query = {};
  if (!$isNull(request.appInstanceShrink)) {
    query['AppInstance'] = request.appInstanceShrink;
  }
  if (!$isNull(request.eventType)) {
    query['EventType'] = request.eventType;
  }
  if (!$isNull(request.operator)) {
    query['Operator'] = request.operator;
  }
  if (!$isNull(request.sourceBizId)) {
    query['SourceBizId'] = request.sourceBizId;
  }
  if (!$isNull(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SyncAppInstanceForPartner',
    version = '2025-04-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 合作伙伴同步应用实例
 *
 * @param request SyncAppInstanceForPartnerRequest
 * @return SyncAppInstanceForPartnerResponse
 */
async function syncAppInstanceForPartner(request: SyncAppInstanceForPartnerRequest): SyncAppInstanceForPartnerResponse {
  var runtime = new $RuntimeOptions{};
  return syncAppInstanceForPartnerWithOptions(request, runtime);
}

