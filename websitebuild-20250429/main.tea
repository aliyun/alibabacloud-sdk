/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('websitebuild', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateLogoTaskRequest {
  logoVersion?: string(name='LogoVersion'),
  negativePrompt?: string(name='NegativePrompt'),
  parameters?: string(name='Parameters', example='{\\\\"ehpcutilParam\\\\":\\\\"sched job_submit --commandline \\\\\\\\\\\\"/ehpcdata/data/usersTest/huangqiaoyi-1725933699384/huangqiaoyi-1725933699384.slurm\\\\\\\\\\\\" --runasuser TestGfjnSimworks\\\\"}'),
  prompt?: string(name='Prompt'),
}

model CreateLogoTaskResponseBody = {
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', example='aliuid:1998006665794443 assumeRole not exist,serviceName:realtimelogpush.dcdnservices.aliyuncs.com'),
  requestId?: string(name='RequestId', description='Id of the request', example='6C6B99AC-39EC-5350-874C-204128C905E6'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='c3r127e325at9yd'),
}

model CreateLogoTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLogoTaskResponseBody(name='body'),
}

/**
 * @summary 提交创建Logo任务
 *
 * @param request CreateLogoTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateLogoTaskResponse
 */
async function createLogoTaskWithOptions(request: CreateLogoTaskRequest, runtime: Util.RuntimeOptions): CreateLogoTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.logoVersion)) {
    query['LogoVersion'] = request.logoVersion;
  }
  if (!Util.isUnset(request.negativePrompt)) {
    query['NegativePrompt'] = request.negativePrompt;
  }
  if (!Util.isUnset(request.parameters)) {
    query['Parameters'] = request.parameters;
  }
  if (!Util.isUnset(request.prompt)) {
    query['Prompt'] = request.prompt;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLogoTask',
    version = '2025-04-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交创建Logo任务
 *
 * @param request CreateLogoTaskRequest
 * @return CreateLogoTaskResponse
 */
async function createLogoTask(request: CreateLogoTaskRequest): CreateLogoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLogoTaskWithOptions(request, runtime);
}

model GetCreateLogoTaskRequest {
  taskId?: string(name='TaskId', example='20051349'),
}

model GetCreateLogoTaskResponseBody = {
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', example='aliuid:1998006665794443 assumeRole not exist,serviceName:realtimelogpush.dcdnservices.aliyuncs.com'),
  requestId?: string(name='RequestId', description='Id of the request', example='6C6B99AC-39EC-5350-874C-204128C905E6'),
  success?: boolean(name='Success', example='true'),
  task?: {
    taskId?: string(name='TaskId', example='604860995'),
    taskStatus?: string(name='TaskStatus', example='SUCCESS'),
    urls?: [ string ](name='Urls'),
  }(name='Task'),
}

model GetCreateLogoTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCreateLogoTaskResponseBody(name='body'),
}

/**
 * @summary 查询Logo创建任务
 *
 * @param request GetCreateLogoTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCreateLogoTaskResponse
 */
async function getCreateLogoTaskWithOptions(request: GetCreateLogoTaskRequest, runtime: Util.RuntimeOptions): GetCreateLogoTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCreateLogoTask',
    version = '2025-04-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询Logo创建任务
 *
 * @param request GetCreateLogoTaskRequest
 * @return GetCreateLogoTaskResponse
 */
async function getCreateLogoTask(request: GetCreateLogoTaskRequest): GetCreateLogoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCreateLogoTaskWithOptions(request, runtime);
}

model OperateAppInstanceForPartnerRequest {
  extend?: string(name='Extend'),
  operateEvent?: string(name='OperateEvent', example='SERVICE_DELIVERY_PROCESS'),
}

model OperateAppInstanceForPartnerResponseBody = {
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', example='aliuid:1998006665794443 assumeRole not exist,serviceName:realtimelogpush.dcdnservices.aliyuncs.com'),
  requestId?: string(name='RequestId', description='Id of the request', example='6C6B99AC-39EC-5350-874C-204128C905E6'),
  success?: string(name='Success', example='true'),
}

model OperateAppInstanceForPartnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateAppInstanceForPartnerResponseBody(name='body'),
}

/**
 * @summary 合作伙伴操作应用
 *
 * @param request OperateAppInstanceForPartnerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return OperateAppInstanceForPartnerResponse
 */
async function operateAppInstanceForPartnerWithOptions(request: OperateAppInstanceForPartnerRequest, runtime: Util.RuntimeOptions): OperateAppInstanceForPartnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.extend)) {
    query['Extend'] = request.extend;
  }
  if (!Util.isUnset(request.operateEvent)) {
    query['OperateEvent'] = request.operateEvent;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateAppInstanceForPartner',
    version = '2025-04-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 合作伙伴操作应用
 *
 * @param request OperateAppInstanceForPartnerRequest
 * @return OperateAppInstanceForPartnerResponse
 */
async function operateAppInstanceForPartner(request: OperateAppInstanceForPartnerRequest): OperateAppInstanceForPartnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateAppInstanceForPartnerWithOptions(request, runtime);
}

model OperateAppServiceForPartnerRequest {
  bizId?: string(name='BizId', example='WS00001'),
  extend?: string(name='Extend', example='{\\\\"user_device_id\\\\":\\\\"6bef45cb0c76de284d24de074c088b73\\\\"}\\\\n'),
  operateEvent?: string(name='OperateEvent', example='SERVICE_FINISH'),
  serviceType?: string(name='ServiceType', example='WEBSITE_DESIGN'),
}

model OperateAppServiceForPartnerResponseBody = {
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', example='aliuid:1998006665794443 assumeRole not exist,serviceName:realtimelogpush.dcdnservices.aliyuncs.com'),
  requestId?: string(name='RequestId', description='Id of the request', example='6C6B99AC-39EC-5350-874C-204128C905E6'),
  success?: boolean(name='Success', example='true'),
}

model OperateAppServiceForPartnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateAppServiceForPartnerResponseBody(name='body'),
}

/**
 * @summary 合作伙伴操作应用服务
 *
 * @param request OperateAppServiceForPartnerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return OperateAppServiceForPartnerResponse
 */
async function operateAppServiceForPartnerWithOptions(request: OperateAppServiceForPartnerRequest, runtime: Util.RuntimeOptions): OperateAppServiceForPartnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!Util.isUnset(request.extend)) {
    query['Extend'] = request.extend;
  }
  if (!Util.isUnset(request.operateEvent)) {
    query['OperateEvent'] = request.operateEvent;
  }
  if (!Util.isUnset(request.serviceType)) {
    query['ServiceType'] = request.serviceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateAppServiceForPartner',
    version = '2025-04-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 合作伙伴操作应用服务
 *
 * @param request OperateAppServiceForPartnerRequest
 * @return OperateAppServiceForPartnerResponse
 */
async function operateAppServiceForPartner(request: OperateAppServiceForPartnerRequest): OperateAppServiceForPartnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateAppServiceForPartnerWithOptions(request, runtime);
}

model SearchImageRequest {
  colorHex?: string(name='ColorHex', example='#B0B0B0'),
  hasPerson?: boolean(name='HasPerson'),
  imageCategory?: string(name='ImageCategory', example='WindowsWithMssqlStdLicense'),
  imageRatio?: string(name='ImageRatio', example='16:9'),
  maxHeight?: int32(name='MaxHeight', example='4000'),
  maxResults?: int32(name='MaxResults', example='500'),
  maxWidth?: int32(name='MaxWidth', example='4000'),
  minHeight?: int32(name='MinHeight', example='500'),
  minWidth?: int32(name='MinWidth', example='500'),
  nextToken?: string(name='NextToken', example='FFh3Xqm+JgZ/U9Jyb7wdVr9LWk80Tghn5UZjbcWEVEderBcbVF+Y6PS0i8PpCL4PQZ3e0C9oEH0Asd4tJEuGtkl2WuKdiWZpEwadNydQdJPFM='),
  ossKey?: string(name='OssKey', description='Osskey。', example='backend/detection/objects/r-0008ujvfksltf5j45n81/task-000hckiuwyau0gwn17vq.jpg'),
  size?: int32(name='Size', example='10'),
  start?: int32(name='Start', example='0'),
  tags?: [ string ](name='Tags'),
  text?: string(name='Text'),
}

model SearchImageShrinkRequest {
  colorHex?: string(name='ColorHex', example='#B0B0B0'),
  hasPerson?: boolean(name='HasPerson'),
  imageCategory?: string(name='ImageCategory', example='WindowsWithMssqlStdLicense'),
  imageRatio?: string(name='ImageRatio', example='16:9'),
  maxHeight?: int32(name='MaxHeight', example='4000'),
  maxResults?: int32(name='MaxResults', example='500'),
  maxWidth?: int32(name='MaxWidth', example='4000'),
  minHeight?: int32(name='MinHeight', example='500'),
  minWidth?: int32(name='MinWidth', example='500'),
  nextToken?: string(name='NextToken', example='FFh3Xqm+JgZ/U9Jyb7wdVr9LWk80Tghn5UZjbcWEVEderBcbVF+Y6PS0i8PpCL4PQZ3e0C9oEH0Asd4tJEuGtkl2WuKdiWZpEwadNydQdJPFM='),
  ossKey?: string(name='OssKey', description='Osskey。', example='backend/detection/objects/r-0008ujvfksltf5j45n81/task-000hckiuwyau0gwn17vq.jpg'),
  size?: int32(name='Size', example='10'),
  start?: int32(name='Start', example='0'),
  tagsShrink?: string(name='Tags'),
  text?: string(name='Text'),
}

model SearchImageResponseBody = {
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', example='aliuid:1998006665794443 assumeRole not exist,serviceName:realtimelogpush.dcdnservices.aliyuncs.com'),
  imageResponse?: {
    imageList?: [ 
      {
        descriptiveTones?: string(name='DescriptiveTones'),
        height?: int32(name='Height', example='1000'),
        imageCategory?: string(name='ImageCategory', example='normal'),
        imageRatio?: string(name='ImageRatio'),
        imageUuid?: string(name='ImageUuid', example='70687446-821c-4ebd-9be6-b57dc0a3500a'),
        ossKey?: string(name='OssKey', description='oss key', example='1ad5/c728/cb40/2410/e01d/b24c/9acd/7d51/1ad5c728cb402410e01db24c9acd7d51'),
        quantitativePalette?: string(name='QuantitativePalette'),
        tagsFromImage?: string(name='TagsFromImage'),
        url?: string(name='Url', example='https://other-general-huadong1.oss-cn-hangzhou.aliyuncs.com/uploadWidget/RollTicket_01.jpeg'),
        width?: int32(name='Width', example='154'),
      }
    ](name='ImageList'),
    maxResults?: int32(name='MaxResults', example='3'),
    nextToken?: string(name='NextToken', example='2c6b65b6f9d625d4e2514a628bde8eb2e0b5e8707e68181f'),
  }(name='ImageResponse'),
  requestId?: string(name='RequestId', description='Id of the request', example='6C6B99AC-39EC-5350-874C-204128C905E6'),
  success?: string(name='Success', example='true'),
}

model SearchImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchImageResponseBody(name='body'),
}

/**
 * @summary 图片检索
 *
 * @param tmpReq SearchImageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SearchImageResponse
 */
async function searchImageWithOptions(tmpReq: SearchImageRequest, runtime: Util.RuntimeOptions): SearchImageResponse {
  Util.validateModel(tmpReq);
  var request = new SearchImageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'simple');
  }
  var query = {};
  if (!Util.isUnset(request.colorHex)) {
    query['ColorHex'] = request.colorHex;
  }
  if (!Util.isUnset(request.hasPerson)) {
    query['HasPerson'] = request.hasPerson;
  }
  if (!Util.isUnset(request.imageCategory)) {
    query['ImageCategory'] = request.imageCategory;
  }
  if (!Util.isUnset(request.imageRatio)) {
    query['ImageRatio'] = request.imageRatio;
  }
  if (!Util.isUnset(request.maxHeight)) {
    query['MaxHeight'] = request.maxHeight;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.maxWidth)) {
    query['MaxWidth'] = request.maxWidth;
  }
  if (!Util.isUnset(request.minHeight)) {
    query['MinHeight'] = request.minHeight;
  }
  if (!Util.isUnset(request.minWidth)) {
    query['MinWidth'] = request.minWidth;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ossKey)) {
    query['OssKey'] = request.ossKey;
  }
  if (!Util.isUnset(request.size)) {
    query['Size'] = request.size;
  }
  if (!Util.isUnset(request.start)) {
    query['Start'] = request.start;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  if (!Util.isUnset(request.text)) {
    query['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchImage',
    version = '2025-04-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 图片检索
 *
 * @param request SearchImageRequest
 * @return SearchImageResponse
 */
async function searchImage(request: SearchImageRequest): SearchImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchImageWithOptions(request, runtime);
}

model SyncAppInstanceForPartnerRequest {
  appInstance?: {
    appType?: string(name='AppType', example='WEBSITE'),
    bizId?: string(name='BizId', example='WD20250711094503000001'),
    deleted?: string(name='Deleted', example='fase'),
    domain?: string(name='Domain', example='alliveout.xntv.tv'),
    endTime?: string(name='EndTime', example='2024-08-23T02:14:00Z'),
    gmtDelete?: string(name='GmtDelete', example='2025-01-01 00:00:00'),
    gmtPublish?: string(name='GmtPublish', example='2025-01-01 00:00:00'),
    iconUrl?: string(name='IconUrl', example='icon/WS20250626112715000001/thumbnail.jpg'),
    name?: string(name='Name'),
    profile?: {
      deployArea?: string(name='DeployArea', example='ChineseMainland'),
      lxInstanceId?: string(name='LxInstanceId', example='12313213'),
      orderId?: string(name='OrderId', example='222217928591'),
      siteVersion?: string(name='SiteVersion', example='Basic_Edition'),
      templateEtag?: string(name='TemplateEtag', example='DC4D30B7BADDAFE9928A6C36416A2A4C'),
      templateId?: string(name='TemplateId', example='ST20211231160247sYG4'),
    }(name='Profile'),
    siteHost?: string(name='SiteHost', description='siteId', example='xxxx.scd.wezhan.cn'),
    slug?: string(name='Slug', example='31104757'),
    startTime?: string(name='StartTime', example='2025-07-15T16:00:00Z'),
    status?: string(name='Status', example='{\\\\"Phase\\\\": \\\\"Running\\\\", \\\\"SlotNum\\\\": 1, \\\\"UsedCapacity\\\\": \\\\"500.0Gi\\\\"}'),
    thumbnailUrl?: string(name='ThumbnailUrl', example='thumbnails/WS20250626112715000001/thumbnail.jpg'),
    userId?: string(name='UserId', description='123123123131232', example='12313213131'),
  }(name='AppInstance'),
  eventType?: string(name='EventType', example='CREATE'),
  operator?: string(name='Operator', example='system'),
  sourceBizId?: string(name='SourceBizId', example='31104757'),
  sourceType?: string(name='SourceType', example='MARKET_CLOUD_DREAM'),
}

model SyncAppInstanceForPartnerShrinkRequest {
  appInstanceShrink?: string(name='AppInstance'),
  eventType?: string(name='EventType', example='CREATE'),
  operator?: string(name='Operator', example='system'),
  sourceBizId?: string(name='SourceBizId', example='31104757'),
  sourceType?: string(name='SourceType', example='MARKET_CLOUD_DREAM'),
}

model SyncAppInstanceForPartnerResponseBody = {
  data?: {
    appInstance?: {
      bizId?: string(name='BizId', example='WD20250626114752000001'),
    }(name='AppInstance'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request', example='6C6B99AC-39EC-5350-874C-204128C905E6'),
}

model SyncAppInstanceForPartnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncAppInstanceForPartnerResponseBody(name='body'),
}

/**
 * @summary 合作伙伴同步应用实例
 *
 * @param tmpReq SyncAppInstanceForPartnerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SyncAppInstanceForPartnerResponse
 */
async function syncAppInstanceForPartnerWithOptions(tmpReq: SyncAppInstanceForPartnerRequest, runtime: Util.RuntimeOptions): SyncAppInstanceForPartnerResponse {
  Util.validateModel(tmpReq);
  var request = new SyncAppInstanceForPartnerShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.appInstance)) {
    request.appInstanceShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.appInstance, 'AppInstance', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appInstanceShrink)) {
    query['AppInstance'] = request.appInstanceShrink;
  }
  if (!Util.isUnset(request.eventType)) {
    query['EventType'] = request.eventType;
  }
  if (!Util.isUnset(request.operator)) {
    query['Operator'] = request.operator;
  }
  if (!Util.isUnset(request.sourceBizId)) {
    query['SourceBizId'] = request.sourceBizId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SyncAppInstanceForPartner',
    version = '2025-04-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 合作伙伴同步应用实例
 *
 * @param request SyncAppInstanceForPartnerRequest
 * @return SyncAppInstanceForPartnerResponse
 */
async function syncAppInstanceForPartner(request: SyncAppInstanceForPartnerRequest): SyncAppInstanceForPartnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncAppInstanceForPartnerWithOptions(request, runtime);
}

