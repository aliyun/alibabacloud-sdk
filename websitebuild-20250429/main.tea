/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('websitebuild', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model OperateAppInstanceForPartnerRequest {
  extend?: string(name='Extend'),
  operateEvent?: string(name='OperateEvent', example='SERVICE_DELIVERY_PROCESS'),
}

model OperateAppInstanceForPartnerResponseBody = {
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', example='aliuid:1998006665794443 assumeRole not exist,serviceName:realtimelogpush.dcdnservices.aliyuncs.com'),
  requestId?: string(name='RequestId', description='Id of the request', example='6C6B99AC-39EC-5350-874C-204128C905E6'),
  success?: string(name='Success', example='true'),
}

model OperateAppInstanceForPartnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateAppInstanceForPartnerResponseBody(name='body'),
}

/**
 * @summary 合作伙伴操作应用
 *
 * @param request OperateAppInstanceForPartnerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return OperateAppInstanceForPartnerResponse
 */
async function operateAppInstanceForPartnerWithOptions(request: OperateAppInstanceForPartnerRequest, runtime: Util.RuntimeOptions): OperateAppInstanceForPartnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.extend)) {
    query['Extend'] = request.extend;
  }
  if (!Util.isUnset(request.operateEvent)) {
    query['OperateEvent'] = request.operateEvent;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateAppInstanceForPartner',
    version = '2025-04-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 合作伙伴操作应用
 *
 * @param request OperateAppInstanceForPartnerRequest
 * @return OperateAppInstanceForPartnerResponse
 */
async function operateAppInstanceForPartner(request: OperateAppInstanceForPartnerRequest): OperateAppInstanceForPartnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateAppInstanceForPartnerWithOptions(request, runtime);
}

model OperateAppServiceForPartnerRequest {
  bizId?: string(name='BizId', example='WS00001'),
  extend?: string(name='Extend', example='{\\\\"user_device_id\\\\":\\\\"6bef45cb0c76de284d24de074c088b73\\\\"}\\\\n'),
  operateEvent?: string(name='OperateEvent', example='SERVICE_FINISH'),
  serviceType?: string(name='ServiceType', example='WEBSITE_DESIGN'),
}

model OperateAppServiceForPartnerResponseBody = {
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', example='aliuid:1998006665794443 assumeRole not exist,serviceName:realtimelogpush.dcdnservices.aliyuncs.com'),
  requestId?: string(name='RequestId', description='Id of the request', example='6C6B99AC-39EC-5350-874C-204128C905E6'),
  success?: boolean(name='Success', example='true'),
}

model OperateAppServiceForPartnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateAppServiceForPartnerResponseBody(name='body'),
}

/**
 * @summary 合作伙伴操作应用服务
 *
 * @param request OperateAppServiceForPartnerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return OperateAppServiceForPartnerResponse
 */
async function operateAppServiceForPartnerWithOptions(request: OperateAppServiceForPartnerRequest, runtime: Util.RuntimeOptions): OperateAppServiceForPartnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!Util.isUnset(request.extend)) {
    query['Extend'] = request.extend;
  }
  if (!Util.isUnset(request.operateEvent)) {
    query['OperateEvent'] = request.operateEvent;
  }
  if (!Util.isUnset(request.serviceType)) {
    query['ServiceType'] = request.serviceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateAppServiceForPartner',
    version = '2025-04-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 合作伙伴操作应用服务
 *
 * @param request OperateAppServiceForPartnerRequest
 * @return OperateAppServiceForPartnerResponse
 */
async function operateAppServiceForPartner(request: OperateAppServiceForPartnerRequest): OperateAppServiceForPartnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateAppServiceForPartnerWithOptions(request, runtime);
}

