/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'WebsiteBuild';
  @version = '2025-04-29';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateLogoTaskRequest {
  logoVersion?: string(name='LogoVersion', position='Query'),
  negativePrompt?: string(name='NegativePrompt', position='Query'),
  parameters?: string(name='Parameters', example='{\\"ehpcutilParam\\":\\"sched job_submit --commandline \\\\\\"/ehpcdata/data/usersTest/huangqiaoyi-1725933699384/huangqiaoyi-1725933699384.slurm\\\\\\" --runasuser TestGfjnSimworks\\"}', position='Query'),
  prompt?: string(name='Prompt', position='Query'),
}

model CreateLogoTaskResponseBody = {
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', example='aliuid:1998006665794443 assumeRole not exist,serviceName:realtimelogpush.dcdnservices.aliyuncs.com'),
  requestId?: string(name='RequestId', description='Id of the request', example='6C6B99AC-39EC-5350-874C-204128C905E6'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='c3r127e325at9yd'),
}

model CreateLogoTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLogoTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateLogoTask  CreateLogoTaskRequest
  * @return CreateLogoTaskResponse
 */
async function createLogoTask(request: CreateLogoTaskRequest): CreateLogoTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLogoTask', 'POST', '/', 'json', false, 'json', request);
}

model GetCreateLogoTaskRequest {
  taskId?: string(name='TaskId', example='20051349', position='Query'),
}

model GetCreateLogoTaskResponseBody = {
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', example='aliuid:1998006665794443 assumeRole not exist,serviceName:realtimelogpush.dcdnservices.aliyuncs.com'),
  requestId?: string(name='RequestId', description='Id of the request', example='6C6B99AC-39EC-5350-874C-204128C905E6'),
  success?: boolean(name='Success', example='true'),
  task?: {
    taskId?: string(name='TaskId', example='604860995'),
    taskStatus?: string(name='TaskStatus', example='SUCCESS'),
    urls?: [ string ](name='Urls'),
  }(name='Task'),
}

model GetCreateLogoTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCreateLogoTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCreateLogoTask  GetCreateLogoTaskRequest
  * @return GetCreateLogoTaskResponse
 */
async function getCreateLogoTask(request: GetCreateLogoTaskRequest): GetCreateLogoTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCreateLogoTask', 'POST', '/', 'json', false, 'json', request);
}

model OperateAppInstanceForPartnerRequest {
  extend?: string(name='Extend', position='Query'),
  operateEvent?: string(name='OperateEvent', example='SERVICE_DELIVERY_PROCESS', position='Query'),
}

model OperateAppInstanceForPartnerResponseBody = {
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', example='aliuid:1998006665794443 assumeRole not exist,serviceName:realtimelogpush.dcdnservices.aliyuncs.com'),
  requestId?: string(name='RequestId', description='Id of the request', example='6C6B99AC-39EC-5350-874C-204128C905E6'),
  success?: string(name='Success', example='true'),
}

model OperateAppInstanceForPartnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateAppInstanceForPartnerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OperateAppInstanceForPartner  OperateAppInstanceForPartnerRequest
  * @return OperateAppInstanceForPartnerResponse
 */
async function operateAppInstanceForPartner(request: OperateAppInstanceForPartnerRequest): OperateAppInstanceForPartnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateAppInstanceForPartner', 'POST', '/', 'json', false, 'json', request);
}

model OperateAppServiceForPartnerRequest {
  bizId?: string(name='BizId', example='WS00001', position='Query'),
  extend?: string(name='Extend', example='{\\"user_device_id\\":\\"6bef45cb0c76de284d24de074c088b73\\"}\\n', position='Query'),
  operateEvent?: string(name='OperateEvent', example='SERVICE_FINISH', position='Query'),
  serviceType?: string(name='ServiceType', example='WEBSITE_DESIGN', position='Query'),
}

model OperateAppServiceForPartnerResponseBody = {
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', example='aliuid:1998006665794443 assumeRole not exist,serviceName:realtimelogpush.dcdnservices.aliyuncs.com'),
  requestId?: string(name='RequestId', description='Id of the request', example='6C6B99AC-39EC-5350-874C-204128C905E6'),
  success?: boolean(name='Success', example='true'),
}

model OperateAppServiceForPartnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateAppServiceForPartnerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OperateAppServiceForPartner  OperateAppServiceForPartnerRequest
  * @return OperateAppServiceForPartnerResponse
 */
async function operateAppServiceForPartner(request: OperateAppServiceForPartnerRequest): OperateAppServiceForPartnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateAppServiceForPartner', 'POST', '/', 'json', false, 'json', request);
}

model SyncAppInstanceForPartnerRequest {
  appInstance?: {
    appType?: string(name='AppType', example='WEBSITE'),
    bizId?: string(name='BizId', example='WD20250711094503000001'),
    deleted?: string(name='Deleted', example='fase'),
    domain?: string(name='Domain', example='alliveout.xntv.tv'),
    endTime?: string(name='EndTime', example='2024-08-23T02:14:00Z'),
    gmtDelete?: string(name='GmtDelete', example='2025-01-01 00:00:00'),
    gmtPublish?: string(name='GmtPublish', example='2025-01-01 00:00:00'),
    iconUrl?: string(name='IconUrl', example='icon/WS20250626112715000001/thumbnail.jpg'),
    name?: string(name='Name'),
    profile?: {
      deployArea?: string(name='DeployArea', example='ChineseMainland'),
      lxInstanceId?: string(name='LxInstanceId', example='12313213'),
      orderId?: string(name='OrderId', example='222217928591'),
      siteVersion?: string(name='SiteVersion', example='Basic_Edition'),
      templateEtag?: string(name='TemplateEtag', example='DC4D30B7BADDAFE9928A6C36416A2A4C'),
      templateId?: string(name='TemplateId', example='ST20211231160247sYG4'),
    }(name='Profile'),
    siteHost?: string(name='SiteHost', description='siteId', example='xxxx.scd.wezhan.cn'),
    slug?: string(name='Slug', example='31104757'),
    startTime?: string(name='StartTime', example='2025-07-15T16:00:00Z'),
    status?: string(name='Status', example='{\\"Phase\\": \\"Running\\", \\"SlotNum\\": 1, \\"UsedCapacity\\": \\"500.0Gi\\"}'),
    thumbnailUrl?: string(name='ThumbnailUrl', example='thumbnails/WS20250626112715000001/thumbnail.jpg'),
    userId?: string(name='UserId', description='123123123131232', example='12313213131'),
  }(name='AppInstance', shrink='json', position='Query'),
  eventType?: string(name='EventType', example='CREATE', position='Query'),
  operator?: string(name='Operator', example='system', position='Query'),
  sourceBizId?: string(name='SourceBizId', example='31104757', position='Query'),
  sourceType?: string(name='SourceType', example='MARKET_CLOUD_DREAM', position='Query'),
}

model SyncAppInstanceForPartnerResponseBody = {
  data?: {
    appInstance?: {
      bizId?: string(name='BizId', example='WD20250626114752000001'),
    }(name='AppInstance'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request', example='6C6B99AC-39EC-5350-874C-204128C905E6'),
}

model SyncAppInstanceForPartnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncAppInstanceForPartnerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SyncAppInstanceForPartner  SyncAppInstanceForPartnerRequest
  * @return SyncAppInstanceForPartnerResponse
 */
async function syncAppInstanceForPartner(request: SyncAppInstanceForPartnerRequest): SyncAppInstanceForPartnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncAppInstanceForPartner', 'POST', '/', 'json', false, 'json', request);
}

