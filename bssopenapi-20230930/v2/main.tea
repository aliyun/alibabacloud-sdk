/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    'cn-hangzhou' = 'business.aliyuncs.com',
    'cn-shanghai' = 'business.aliyuncs.com',
    'ap-southeast-1' = 'business.ap-southeast-1.aliyuncs.com',
    'ap-northeast-1' = 'business.ap-southeast-1.aliyuncs.com',
    'ap-northeast-2' = 'business.ap-southeast-1.aliyuncs.com',
    'ap-northeast-2-pop' = 'business.ap-southeast-1.aliyuncs.com',
    'ap-south-1' = 'business.ap-southeast-1.aliyuncs.com',
    'ap-southeast-2' = 'business.ap-southeast-1.aliyuncs.com',
    'ap-southeast-3' = 'business.ap-southeast-1.aliyuncs.com',
    'ap-southeast-5' = 'business.ap-southeast-1.aliyuncs.com',
    'cn-beijing' = 'business.aliyuncs.com',
    'cn-beijing-finance-1' = 'business.aliyuncs.com',
    'cn-beijing-finance-pop' = 'business.aliyuncs.com',
    'cn-beijing-gov-1' = 'business.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'business.aliyuncs.com',
    'cn-chengdu' = 'business.aliyuncs.com',
    'cn-edge-1' = 'business.aliyuncs.com',
    'cn-fujian' = 'business.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'business.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'business.aliyuncs.com',
    'cn-hangzhou-finance' = 'business.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'business.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'business.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'business.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'business.aliyuncs.com',
    'cn-hangzhou-test-306' = 'business.aliyuncs.com',
    'cn-hongkong' = 'business.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'business.aliyuncs.com',
    'cn-huhehaote' = 'business.aliyuncs.com',
    'cn-huhehaote-nebula-1' = 'business.aliyuncs.com',
    'cn-north-2-gov-1' = 'business.aliyuncs.com',
    'cn-qingdao' = 'business.aliyuncs.com',
    'cn-qingdao-nebula' = 'business.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'business.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'business.aliyuncs.com',
    'cn-shanghai-finance-1' = 'business.aliyuncs.com',
    'cn-shanghai-inner' = 'business.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'business.aliyuncs.com',
    'cn-shenzhen' = 'business.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'business.aliyuncs.com',
    'cn-shenzhen-inner' = 'business.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'business.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'business.aliyuncs.com',
    'cn-wuhan' = 'business.aliyuncs.com',
    'cn-wulanchabu' = 'business.aliyuncs.com',
    'cn-yushanfang' = 'business.aliyuncs.com',
    'cn-zhangbei' = 'business.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'business.aliyuncs.com',
    'cn-zhangjiakou' = 'business.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'business.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'business.aliyuncs.com',
    'eu-central-1' = 'business.ap-southeast-1.aliyuncs.com',
    'eu-west-1' = 'business.ap-southeast-1.aliyuncs.com',
    'eu-west-1-oxs' = 'business.ap-southeast-1.aliyuncs.com',
    'me-east-1' = 'business.ap-southeast-1.aliyuncs.com',
    'rus-west-1-pop' = 'business.ap-southeast-1.aliyuncs.com',
    'us-east-1' = 'business.ap-southeast-1.aliyuncs.com',
    'us-west-1' = 'business.ap-southeast-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('bssopenapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DataModuleMapListSpnTypeMapListValue = {
  filterModules?: [ 
    {
      moduleId?: long(name='ModuleId'),
      moduleCode?: string(name='ModuleCode'),
      moduleName?: string(name='ModuleName'),
    }
  ](name='FilterModules'),
  showModules?: [ 
    {
      moduleId?: long(name='ModuleId'),
      moduleCode?: string(name='ModuleCode'),
      moduleName?: string(name='ModuleName'),
    }
  ](name='ShowModules'),
}

model DataStepPriceMapValue = {
  rightClose?: boolean(name='RightClose'),
  min?: string(name='Min'),
  max?: string(name='Max'),
  currency?: string(name='Currency'),
  leftClose?: boolean(name='LeftClose'),
  stepPriceValue?: string(name='StepPriceValue'),
  priceValueType?: string(name='PriceValueType'),
  priceValue?: string(name='PriceValue'),
  deductCycleType?: string(name='DeductCycleType'),
}

model AddCouponDeductTagRequest {
  couponId?: string(name='CouponId'),
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds'),
      ecId?: string(name='EcId', description='This parameter is required.'),
    }
  ](name='EcIdAccountIds'),
  nbid?: string(name='Nbid'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
}

model AddCouponDeductTagShrinkRequest {
  couponId?: string(name='CouponId'),
  ecIdAccountIdsShrink?: string(name='EcIdAccountIds'),
  nbid?: string(name='Nbid'),
  tagsShrink?: string(name='Tags'),
}

model AddCouponDeductTagResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model AddCouponDeductTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddCouponDeductTagResponseBody(name='body'),
}

/**
 * @summary 添加优惠券抵扣标签
 *
 * @param tmpReq AddCouponDeductTagRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddCouponDeductTagResponse
 */
@context("addCouponDeductTagWithContext")
async function addCouponDeductTagWithOptions(tmpReq: AddCouponDeductTagRequest, runtime: $RuntimeOptions): AddCouponDeductTagResponse {
  tmpReq.validate();
  var request = new AddCouponDeductTagShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ecIdAccountIds)) {
    request.ecIdAccountIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ecIdAccountIds, 'EcIdAccountIds', 'json');
  }
  if (!$isNull(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!$isNull(request.couponId)) {
    query['CouponId'] = request.couponId;
  }
  if (!$isNull(request.ecIdAccountIdsShrink)) {
    query['EcIdAccountIds'] = request.ecIdAccountIdsShrink;
  }
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  if (!$isNull(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'AddCouponDeductTag',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 添加优惠券抵扣标签
 *
 * @param request AddCouponDeductTagRequest
 * @return AddCouponDeductTagResponse
 */
async function addCouponDeductTag(request: AddCouponDeductTagRequest): AddCouponDeductTagResponse {
  var runtime = new $RuntimeOptions{};
  return addCouponDeductTagWithOptions(request, runtime);
}

model AllocateCostCenterResourceRequest {
  fromCostCenterId?: long(name='FromCostCenterId', example='637180'),
  fromOwnerAccountId?: long(name='FromOwnerAccountId', example='1529600453335198'),
  nbid?: string(name='Nbid', example='2684201000001'),
  resourceInstanceList?: [ 
    {
      apportionCode?: string(name='ApportionCode', example='qwer1-cn-beijing'),
      apportionName?: string(name='ApportionName', example='split-item-test1'),
      commodityCode?: string(name='CommodityCode', example='oss'),
      commodityName?: string(name='CommodityName', example='RESOURCE_UDR'),
      instanceId?: string(name='InstanceId'),
      pipCode?: string(name='PipCode', example='ecs'),
      relatedResources?: string(name='RelatedResources', example='related-resource'),
      resourceGroup?: string(name='ResourceGroup', example='xihe_mpp'),
      resourceId?: string(name='ResourceId', example='cn-hangzhou;standard'),
      resourceNick?: string(name='ResourceNick', example='ecs-test-1'),
      resourceSource?: string(name='ResourceSource', example='AUTO_ALLOCATE'),
      resourceStatus?: string(name='ResourceStatus', example='0'),
      resourceTag?: string(name='ResourceTag', example='tag-test1'),
      resourceType?: string(name='ResourceType', example='SCU'),
      resourceUserId?: long(name='ResourceUserId', example='273394581313325532'),
      resourceUserName?: string(name='ResourceUserName', example='test'),
    }
  ](name='ResourceInstanceList', description='This parameter is required.'),
  toCostCenterId?: long(name='ToCostCenterId', example='638288'),
}

model AllocateCostCenterResourceShrinkRequest {
  fromCostCenterId?: long(name='FromCostCenterId', example='637180'),
  fromOwnerAccountId?: long(name='FromOwnerAccountId', example='1529600453335198'),
  nbid?: string(name='Nbid', example='2684201000001'),
  resourceInstanceListShrink?: string(name='ResourceInstanceList', description='This parameter is required.'),
  toCostCenterId?: long(name='ToCostCenterId', example='638288'),
}

model AllocateCostCenterResourceResponseBody = {
  costCenterId?: long(name='CostCenterId', example='640403'),
  isSuccess?: boolean(name='IsSuccess', example='true'),
  metadata?: any(name='Metadata', example='{}'),
  ownerAccountId?: long(name='OwnerAccountId', example='1529600453335198'),
  requestId?: string(name='RequestId', example='UUID'),
}

model AllocateCostCenterResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AllocateCostCenterResourceResponseBody(name='body'),
}

/**
 * @summary 财务单元实例重分配
 *
 * @param tmpReq AllocateCostCenterResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AllocateCostCenterResourceResponse
 */
@context("allocateCostCenterResourceWithContext")
async function allocateCostCenterResourceWithOptions(tmpReq: AllocateCostCenterResourceRequest, runtime: $RuntimeOptions): AllocateCostCenterResourceResponse {
  tmpReq.validate();
  var request = new AllocateCostCenterResourceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.resourceInstanceList)) {
    request.resourceInstanceListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceInstanceList, 'ResourceInstanceList', 'json');
  }
  var query = {};
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  var body : map[string]any = {};
  if (!$isNull(request.fromCostCenterId)) {
    body['FromCostCenterId'] = request.fromCostCenterId;
  }
  if (!$isNull(request.fromOwnerAccountId)) {
    body['FromOwnerAccountId'] = request.fromOwnerAccountId;
  }
  if (!$isNull(request.resourceInstanceListShrink)) {
    body['ResourceInstanceList'] = request.resourceInstanceListShrink;
  }
  if (!$isNull(request.toCostCenterId)) {
    body['ToCostCenterId'] = request.toCostCenterId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'AllocateCostCenterResource',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 财务单元实例重分配
 *
 * @param request AllocateCostCenterResourceRequest
 * @return AllocateCostCenterResourceResponse
 */
async function allocateCostCenterResource(request: AllocateCostCenterResourceRequest): AllocateCostCenterResourceResponse {
  var runtime = new $RuntimeOptions{};
  return allocateCostCenterResourceWithOptions(request, runtime);
}

model CancelFundAccountLowAvailableAmountAlarmRequest {
  fundAccountId?: long(name='FundAccountId', example='123321123'),
}

model CancelFundAccountLowAvailableAmountAlarmResponseBody = {
  data?: boolean(name='Data', example='true'),
  metadata?: any(name='Metadata', example='{}'),
  requestId?: string(name='RequestId', example='DFC1F7F9-3BA9-BA4D-2F2E653'),
}

model CancelFundAccountLowAvailableAmountAlarmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelFundAccountLowAvailableAmountAlarmResponseBody(name='body'),
}

/**
 * @summary 取消资金账户低额预警
 *
 * @param request CancelFundAccountLowAvailableAmountAlarmRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CancelFundAccountLowAvailableAmountAlarmResponse
 */
@context("cancelFundAccountLowAvailableAmountAlarmWithContext")
async function cancelFundAccountLowAvailableAmountAlarmWithOptions(request: CancelFundAccountLowAvailableAmountAlarmRequest, runtime: $RuntimeOptions): CancelFundAccountLowAvailableAmountAlarmResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.fundAccountId)) {
    body['FundAccountId'] = request.fundAccountId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CancelFundAccountLowAvailableAmountAlarm',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 取消资金账户低额预警
 *
 * @param request CancelFundAccountLowAvailableAmountAlarmRequest
 * @return CancelFundAccountLowAvailableAmountAlarmResponse
 */
async function cancelFundAccountLowAvailableAmountAlarm(request: CancelFundAccountLowAvailableAmountAlarmRequest): CancelFundAccountLowAvailableAmountAlarmResponse {
  var runtime = new $RuntimeOptions{};
  return cancelFundAccountLowAvailableAmountAlarmWithOptions(request, runtime);
}

model CreateCostCenterRequest {
  costCenterEntityList?: [ 
    {
      costCenterName?: string(name='CostCenterName', description='This parameter is required.'),
      ownerAccountId?: long(name='OwnerAccountId', description='This parameter is required.', example='1314839403940987'),
      parentCostCenterId?: long(name='ParentCostCenterId', description='This parameter is required.', example='-1'),
    }
  ](name='CostCenterEntityList', description='This parameter is required.'),
  nbid?: string(name='Nbid', example='2084210001'),
}

model CreateCostCenterShrinkRequest {
  costCenterEntityListShrink?: string(name='CostCenterEntityList', description='This parameter is required.'),
  nbid?: string(name='Nbid', example='2084210001'),
}

model CreateCostCenterResponseBody = {
  costCenterDtoList?: [ 
    {
      costCenterId?: long(name='CostCenterId', example='485938'),
      costCenterName?: string(name='CostCenterName'),
      ownerAccountId?: long(name='OwnerAccountId', example='1314839403940987'),
      parentCostCenterId?: long(name='ParentCostCenterId', example='-1'),
    }
  ](name='CostCenterDtoList'),
  metadata?: any(name='Metadata', example='{}'),
  requestId?: string(name='RequestId', example='C1BD134E-D914-6AE0-1901-AEB2A99FA205'),
}

model CreateCostCenterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCostCenterResponseBody(name='body'),
}

/**
 * @summary 创建财务单元
 *
 * @param tmpReq CreateCostCenterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateCostCenterResponse
 */
@context("createCostCenterWithContext")
async function createCostCenterWithOptions(tmpReq: CreateCostCenterRequest, runtime: $RuntimeOptions): CreateCostCenterResponse {
  tmpReq.validate();
  var request = new CreateCostCenterShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.costCenterEntityList)) {
    request.costCenterEntityListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.costCenterEntityList, 'CostCenterEntityList', 'json');
  }
  var query = {};
  if (!$isNull(request.costCenterEntityListShrink)) {
    query['CostCenterEntityList'] = request.costCenterEntityListShrink;
  }
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateCostCenter',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建财务单元
 *
 * @param request CreateCostCenterRequest
 * @return CreateCostCenterResponse
 */
async function createCostCenter(request: CreateCostCenterRequest): CreateCostCenterResponse {
  var runtime = new $RuntimeOptions{};
  return createCostCenterWithOptions(request, runtime);
}

model CreateCostCenterRuleRequest {
  costCenterId?: long(name='CostCenterId', example='485938'),
  filterExpression?: {
    expressionType?: string(name='ExpressionType', example='NARY'),
    filterValues?: {
      code?: string(name='Code', example='TAG-test-xxx-key'),
      codeName?: string(name='CodeName'),
      selectType?: string(name='SelectType', example='IN'),
      values?: [ string ](name='Values'),
    }(name='FilterValues'),
    operand?: any(name='Operand'),
    operands?: [ any ](name='Operands'),
    operatorType?: string(name='OperatorType', example='AND'),
  }(name='FilterExpression'),
  nbid?: string(name='Nbid', example='2084210001'),
}

model CreateCostCenterRuleShrinkRequest {
  costCenterId?: long(name='CostCenterId', example='485938'),
  filterExpressionShrink?: string(name='FilterExpression'),
  nbid?: string(name='Nbid', example='2084210001'),
}

model CreateCostCenterRuleResponseBody = {
  data?: long(name='Data', example='1111'),
  metadata?: any(name='Metadata', example='{}'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
}

model CreateCostCenterRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCostCenterRuleResponseBody(name='body'),
}

/**
 * @summary 新建财务单元规则
 *
 * @param tmpReq CreateCostCenterRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateCostCenterRuleResponse
 */
@context("createCostCenterRuleWithContext")
async function createCostCenterRuleWithOptions(tmpReq: CreateCostCenterRuleRequest, runtime: $RuntimeOptions): CreateCostCenterRuleResponse {
  tmpReq.validate();
  var request = new CreateCostCenterRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.filterExpression)) {
    request.filterExpressionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filterExpression, 'FilterExpression', 'json');
  }
  var query = {};
  if (!$isNull(request.filterExpressionShrink)) {
    query['FilterExpression'] = request.filterExpressionShrink;
  }
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  var body : map[string]any = {};
  if (!$isNull(request.costCenterId)) {
    body['CostCenterId'] = request.costCenterId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateCostCenterRule',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新建财务单元规则
 *
 * @param request CreateCostCenterRuleRequest
 * @return CreateCostCenterRuleResponse
 */
async function createCostCenterRule(request: CreateCostCenterRuleRequest): CreateCostCenterRuleResponse {
  var runtime = new $RuntimeOptions{};
  return createCostCenterRuleWithOptions(request, runtime);
}

model CreateFundAccountPayRelationRequest {
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds', description='This parameter is required.'),
      ecId?: string(name='EcId', example='1501603440974415'),
    }
  ](name='EcIdAccountIds', description='This parameter is required.'),
  fundAccountId?: string(name='FundAccountId', description='This parameter is required.', example='12332112'),
  nbid?: string(name='Nbid', example='2684201000001'),
}

model CreateFundAccountPayRelationShrinkRequest {
  ecIdAccountIdsShrink?: string(name='EcIdAccountIds', description='This parameter is required.'),
  fundAccountId?: string(name='FundAccountId', description='This parameter is required.', example='12332112'),
  nbid?: string(name='Nbid', example='2684201000001'),
}

model CreateFundAccountPayRelationResponseBody = {
  data?: [ 
    {
      accountId?: string(name='AccountId', example='1501603440974415'),
      accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
      fundAccountId?: string(name='FundAccountId', example='12332112'),
      resultCode?: string(name='ResultCode', example='Success'),
      resultMessage?: string(name='ResultMessage', example='Successful'),
    }
  ](name='Data'),
  metadata?: any(name='Metadata', example='{}'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999'),
}

model CreateFundAccountPayRelationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFundAccountPayRelationResponseBody(name='body'),
}

/**
 * @summary 创建资金账户付款关系
 *
 * @param tmpReq CreateFundAccountPayRelationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateFundAccountPayRelationResponse
 */
@context("createFundAccountPayRelationWithContext")
async function createFundAccountPayRelationWithOptions(tmpReq: CreateFundAccountPayRelationRequest, runtime: $RuntimeOptions): CreateFundAccountPayRelationResponse {
  tmpReq.validate();
  var request = new CreateFundAccountPayRelationShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ecIdAccountIds)) {
    request.ecIdAccountIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ecIdAccountIds, 'EcIdAccountIds', 'json');
  }
  var query = {};
  if (!$isNull(request.ecIdAccountIdsShrink)) {
    query['EcIdAccountIds'] = request.ecIdAccountIdsShrink;
  }
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  var body : map[string]any = {};
  if (!$isNull(request.fundAccountId)) {
    body['FundAccountId'] = request.fundAccountId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateFundAccountPayRelation',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建资金账户付款关系
 *
 * @param request CreateFundAccountPayRelationRequest
 * @return CreateFundAccountPayRelationResponse
 */
async function createFundAccountPayRelation(request: CreateFundAccountPayRelationRequest): CreateFundAccountPayRelationResponse {
  var runtime = new $RuntimeOptions{};
  return createFundAccountPayRelationWithOptions(request, runtime);
}

model CreateFundAccountTransferRequest {
  amount?: string(name='Amount', description='This parameter is required.', example='100'),
  currency?: string(name='Currency', description='This parameter is required.', example='CNY'),
  financeType?: string(name='FinanceType', description='This parameter is required.', example='cash'),
  fromFundAccountId?: long(name='FromFundAccountId', description='This parameter is required.', example='123212323'),
  remark?: string(name='Remark', description='This parameter is required.', example='转账的备注'),
  toFundAccountId?: long(name='ToFundAccountId', description='This parameter is required.', example='11112231'),
  transferType?: string(name='TransferType', description='This parameter is required.', example='grant'),
}

model CreateFundAccountTransferResponseBody = {
  metadata?: any(name='Metadata', example='{}'),
  requestId?: string(name='RequestId', example='1BB79-5B23-3EA-BB4F-352F93E'),
}

model CreateFundAccountTransferResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFundAccountTransferResponseBody(name='body'),
}

/**
 * @summary 创建资金账户划拨/回收
 *
 * @param request CreateFundAccountTransferRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateFundAccountTransferResponse
 */
@context("createFundAccountTransferWithContext")
async function createFundAccountTransferWithOptions(request: CreateFundAccountTransferRequest, runtime: $RuntimeOptions): CreateFundAccountTransferResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.amount)) {
    body['Amount'] = request.amount;
  }
  if (!$isNull(request.currency)) {
    body['Currency'] = request.currency;
  }
  if (!$isNull(request.financeType)) {
    body['FinanceType'] = request.financeType;
  }
  if (!$isNull(request.fromFundAccountId)) {
    body['FromFundAccountId'] = request.fromFundAccountId;
  }
  if (!$isNull(request.remark)) {
    body['Remark'] = request.remark;
  }
  if (!$isNull(request.toFundAccountId)) {
    body['ToFundAccountId'] = request.toFundAccountId;
  }
  if (!$isNull(request.transferType)) {
    body['TransferType'] = request.transferType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateFundAccountTransfer',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建资金账户划拨/回收
 *
 * @param request CreateFundAccountTransferRequest
 * @return CreateFundAccountTransferResponse
 */
async function createFundAccountTransfer(request: CreateFundAccountTransferRequest): CreateFundAccountTransferResponse {
  var runtime = new $RuntimeOptions{};
  return createFundAccountTransferWithOptions(request, runtime);
}

model CreateInvoiceRequest {
  amount?: string(name='Amount', example='0.01'),
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds'),
      ecId?: string(name='EcId', example='12345'),
    }
  ](name='EcIdAccountIds'),
  invoiceCandidateIds?: [ string ](name='InvoiceCandidateIds', description='This parameter is required.'),
  invoiceMode?: int32(name='InvoiceMode', description='This parameter is required.', example='0'),
  invoiceRemark?: string(name='InvoiceRemark'),
  invoiceTitleId?: string(name='InvoiceTitleId', description='This parameter is required.', example='12345'),
  invoiceType?: int32(name='InvoiceType', description='This parameter is required.', example='0'),
  nbid?: string(name='Nbid', example='2684201000001'),
  recipientEmails?: [ string ](name='RecipientEmails', description='This parameter is required.'),
}

model CreateInvoiceShrinkRequest {
  amount?: string(name='Amount', example='0.01'),
  ecIdAccountIdsShrink?: string(name='EcIdAccountIds'),
  invoiceCandidateIdsShrink?: string(name='InvoiceCandidateIds', description='This parameter is required.'),
  invoiceMode?: int32(name='InvoiceMode', description='This parameter is required.', example='0'),
  invoiceRemark?: string(name='InvoiceRemark'),
  invoiceTitleId?: string(name='InvoiceTitleId', description='This parameter is required.', example='12345'),
  invoiceType?: int32(name='InvoiceType', description='This parameter is required.', example='0'),
  nbid?: string(name='Nbid', example='2684201000001'),
  recipientEmailsShrink?: string(name='RecipientEmails', description='This parameter is required.'),
}

model CreateInvoiceResponseBody = {
  data?: [ 
    {
      accountId?: long(name='AccountId', example='1990699401005016'),
      amount?: string(name='Amount', example='0.01'),
      errorCode?: string(name='ErrorCode', example='1001'),
      invoiceIssuer?: string(name='InvoiceIssuer', example='ALIYUN_SERVICE'),
      message?: string(name='Message'),
    }
  ](name='Data'),
  metadata?: any(name='Metadata', example='{}'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
}

model CreateInvoiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInvoiceResponseBody(name='body'),
}

/**
 * @summary 申请发票
 *
 * @param tmpReq CreateInvoiceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateInvoiceResponse
 */
@context("createInvoiceWithContext")
async function createInvoiceWithOptions(tmpReq: CreateInvoiceRequest, runtime: $RuntimeOptions): CreateInvoiceResponse {
  tmpReq.validate();
  var request = new CreateInvoiceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ecIdAccountIds)) {
    request.ecIdAccountIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ecIdAccountIds, 'EcIdAccountIds', 'json');
  }
  if (!$isNull(tmpReq.invoiceCandidateIds)) {
    request.invoiceCandidateIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.invoiceCandidateIds, 'InvoiceCandidateIds', 'json');
  }
  if (!$isNull(tmpReq.recipientEmails)) {
    request.recipientEmailsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.recipientEmails, 'RecipientEmails', 'json');
  }
  var query = {};
  if (!$isNull(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!$isNull(request.ecIdAccountIdsShrink)) {
    query['EcIdAccountIds'] = request.ecIdAccountIdsShrink;
  }
  if (!$isNull(request.invoiceCandidateIdsShrink)) {
    query['InvoiceCandidateIds'] = request.invoiceCandidateIdsShrink;
  }
  if (!$isNull(request.invoiceMode)) {
    query['InvoiceMode'] = request.invoiceMode;
  }
  if (!$isNull(request.invoiceRemark)) {
    query['InvoiceRemark'] = request.invoiceRemark;
  }
  if (!$isNull(request.invoiceTitleId)) {
    query['InvoiceTitleId'] = request.invoiceTitleId;
  }
  if (!$isNull(request.invoiceType)) {
    query['InvoiceType'] = request.invoiceType;
  }
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  if (!$isNull(request.recipientEmailsShrink)) {
    query['RecipientEmails'] = request.recipientEmailsShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateInvoice',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 申请发票
 *
 * @param request CreateInvoiceRequest
 * @return CreateInvoiceResponse
 */
async function createInvoice(request: CreateInvoiceRequest): CreateInvoiceResponse {
  var runtime = new $RuntimeOptions{};
  return createInvoiceWithOptions(request, runtime);
}

model CreateReportDefinitionRequest {
  beginBillingCycle?: string(name='BeginBillingCycle', example='2025-05'),
  includeMembers?: string(name='IncludeMembers'),
  mcProject?: string(name='McProject', example='project'),
  mcTableName?: string(name='McTableName', example='table'),
  nbid?: string(name='Nbid', example='2684201000001'),
  notSendOnNoData?: string(name='NotSendOnNoData'),
  ossBucketName?: string(name='OssBucketName', example='sh-bill'),
  ossBucketOwnerAccountId?: long(name='OssBucketOwnerAccountId', example='1234567812345678'),
  ossBucketPath?: string(name='OssBucketPath', example='bill/'),
  reportSourceType?: string(name='ReportSourceType', example='OSS'),
  reportType?: string(name='ReportType', description='This parameter is required.', example='BillingItemDetailForBillingPeriod'),
  sendWithAttach?: string(name='SendWithAttach'),
  splitFileOnUserId?: string(name='SplitFileOnUserId'),
}

model CreateReportDefinitionResponseBody = {
  beginBillingCycle?: string(name='BeginBillingCycle', example='2025-05'),
  metadata?: any(name='Metadata'),
  ossBucketName?: string(name='OssBucketName', example='sh-bill'),
  ossBucketOwnerAccountId?: long(name='OssBucketOwnerAccountId', example='1234567812345678'),
  ossBucketPath?: string(name='OssBucketPath', example='bill/'),
  reportSourceName?: string(name='ReportSourceName', example='OSS'),
  reportSourceType?: string(name='ReportSourceType', example='OSS'),
  reportTaskId?: long(name='ReportTaskId', example='123123'),
  reportType?: string(name='ReportType', example='BillingItemDetailForBillingPeriod'),
  requestId?: string(name='RequestId', example='340CAB45-0637-5875-9BE4-EFD5750F6BA5'),
  subscribeCreateTime?: string(name='SubscribeCreateTime', example='2025-05-21 10:36:31'),
}

model CreateReportDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateReportDefinitionResponseBody(name='body'),
}

/**
 * @summary 创建账单订阅
 *
 * @param request CreateReportDefinitionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateReportDefinitionResponse
 */
@context("createReportDefinitionWithContext")
async function createReportDefinitionWithOptions(request: CreateReportDefinitionRequest, runtime: $RuntimeOptions): CreateReportDefinitionResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.beginBillingCycle)) {
    query['BeginBillingCycle'] = request.beginBillingCycle;
  }
  if (!$isNull(request.includeMembers)) {
    query['IncludeMembers'] = request.includeMembers;
  }
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  if (!$isNull(request.notSendOnNoData)) {
    query['NotSendOnNoData'] = request.notSendOnNoData;
  }
  if (!$isNull(request.ossBucketName)) {
    query['OssBucketName'] = request.ossBucketName;
  }
  if (!$isNull(request.ossBucketOwnerAccountId)) {
    query['OssBucketOwnerAccountId'] = request.ossBucketOwnerAccountId;
  }
  if (!$isNull(request.ossBucketPath)) {
    query['OssBucketPath'] = request.ossBucketPath;
  }
  if (!$isNull(request.reportType)) {
    query['ReportType'] = request.reportType;
  }
  if (!$isNull(request.sendWithAttach)) {
    query['SendWithAttach'] = request.sendWithAttach;
  }
  if (!$isNull(request.splitFileOnUserId)) {
    query['SplitFileOnUserId'] = request.splitFileOnUserId;
  }
  var body : map[string]any = {};
  if (!$isNull(request.mcProject)) {
    body['McProject'] = request.mcProject;
  }
  if (!$isNull(request.mcTableName)) {
    body['McTableName'] = request.mcTableName;
  }
  if (!$isNull(request.reportSourceType)) {
    body['ReportSourceType'] = request.reportSourceType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateReportDefinition',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建账单订阅
 *
 * @param request CreateReportDefinitionRequest
 * @return CreateReportDefinitionResponse
 */
async function createReportDefinition(request: CreateReportDefinitionRequest): CreateReportDefinitionResponse {
  var runtime = new $RuntimeOptions{};
  return createReportDefinitionWithOptions(request, runtime);
}

model DeleteCostCenterRequest {
  costCenterId?: long(name='CostCenterId', description='This parameter is required.', example='485938'),
  nbid?: string(name='Nbid', example='2684201000001'),
  ownerAccountId?: long(name='OwnerAccountId', description='This parameter is required.', example='1314839403940987'),
}

model DeleteCostCenterResponseBody = {
  costCenterId?: long(name='CostCenterId', example='485938'),
  isSuccess?: boolean(name='IsSuccess', example='True'),
  metadata?: any(name='Metadata', example='{}'),
  ownerAccountId?: long(name='OwnerAccountId', example='1314839403940987'),
  requestId?: string(name='RequestId', example='C1BD134E-D914-6AE0-1901-AEB2A99FA205'),
}

model DeleteCostCenterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCostCenterResponseBody(name='body'),
}

/**
 * @summary 删除财务单元
 *
 * @param request DeleteCostCenterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteCostCenterResponse
 */
@context("deleteCostCenterWithContext")
async function deleteCostCenterWithOptions(request: DeleteCostCenterRequest, runtime: $RuntimeOptions): DeleteCostCenterResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.costCenterId)) {
    query['CostCenterId'] = request.costCenterId;
  }
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  if (!$isNull(request.ownerAccountId)) {
    query['OwnerAccountId'] = request.ownerAccountId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteCostCenter',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除财务单元
 *
 * @param request DeleteCostCenterRequest
 * @return DeleteCostCenterResponse
 */
async function deleteCostCenter(request: DeleteCostCenterRequest): DeleteCostCenterResponse {
  var runtime = new $RuntimeOptions{};
  return deleteCostCenterWithOptions(request, runtime);
}

model DeleteCostCenterRuleRequest {
  costCenterId?: long(name='CostCenterId', example='637127'),
  filterExpression?: {
    expressionType?: string(name='ExpressionType', example='NARY'),
    filterValues?: {
      code?: string(name='Code', example='TAG-test-xxx-key'),
      codeName?: string(name='CodeName'),
      selectType?: string(name='SelectType', example='IN'),
      values?: [ string ](name='Values'),
    }(name='FilterValues'),
    operand?: any(name='Operand'),
    operands?: [ any ](name='Operands'),
    operatorType?: string(name='OperatorType', example='AND'),
  }(name='FilterExpression'),
  nbid?: string(name='Nbid', example='2684201000001'),
}

model DeleteCostCenterRuleShrinkRequest {
  costCenterId?: long(name='CostCenterId', example='637127'),
  filterExpressionShrink?: string(name='FilterExpression'),
  nbid?: string(name='Nbid', example='2684201000001'),
}

model DeleteCostCenterRuleResponseBody = {
  data?: long(name='Data', example='37404'),
  metadata?: any(name='Metadata', example='{}'),
  requestId?: string(name='RequestId', example='UUID'),
}

model DeleteCostCenterRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCostCenterRuleResponseBody(name='body'),
}

/**
 * @summary 删除财务单元规则
 *
 * @param tmpReq DeleteCostCenterRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteCostCenterRuleResponse
 */
@context("deleteCostCenterRuleWithContext")
async function deleteCostCenterRuleWithOptions(tmpReq: DeleteCostCenterRuleRequest, runtime: $RuntimeOptions): DeleteCostCenterRuleResponse {
  tmpReq.validate();
  var request = new DeleteCostCenterRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.filterExpression)) {
    request.filterExpressionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filterExpression, 'FilterExpression', 'json');
  }
  var query = {};
  if (!$isNull(request.filterExpressionShrink)) {
    query['FilterExpression'] = request.filterExpressionShrink;
  }
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  var body : map[string]any = {};
  if (!$isNull(request.costCenterId)) {
    body['CostCenterId'] = request.costCenterId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteCostCenterRule',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除财务单元规则
 *
 * @param request DeleteCostCenterRuleRequest
 * @return DeleteCostCenterRuleResponse
 */
async function deleteCostCenterRule(request: DeleteCostCenterRuleRequest): DeleteCostCenterRuleResponse {
  var runtime = new $RuntimeOptions{};
  return deleteCostCenterRuleWithOptions(request, runtime);
}

model DeleteCouponDeductTagRequest {
  couponId?: string(name='CouponId'),
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds'),
      ecId?: string(name='EcId', description='This parameter is required.'),
    }
  ](name='EcIdAccountIds'),
  nbid?: string(name='Nbid'),
  tagKeys?: [ string ](name='TagKeys'),
}

model DeleteCouponDeductTagShrinkRequest {
  couponId?: string(name='CouponId'),
  ecIdAccountIdsShrink?: string(name='EcIdAccountIds'),
  nbid?: string(name='Nbid'),
  tagKeysShrink?: string(name='TagKeys'),
}

model DeleteCouponDeductTagResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model DeleteCouponDeductTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCouponDeductTagResponseBody(name='body'),
}

/**
 * @summary 删除优惠券的抵扣标签
 *
 * @param tmpReq DeleteCouponDeductTagRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteCouponDeductTagResponse
 */
@context("deleteCouponDeductTagWithContext")
async function deleteCouponDeductTagWithOptions(tmpReq: DeleteCouponDeductTagRequest, runtime: $RuntimeOptions): DeleteCouponDeductTagResponse {
  tmpReq.validate();
  var request = new DeleteCouponDeductTagShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ecIdAccountIds)) {
    request.ecIdAccountIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ecIdAccountIds, 'EcIdAccountIds', 'json');
  }
  if (!$isNull(tmpReq.tagKeys)) {
    request.tagKeysShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tagKeys, 'TagKeys', 'json');
  }
  var query = {};
  if (!$isNull(request.couponId)) {
    query['CouponId'] = request.couponId;
  }
  if (!$isNull(request.ecIdAccountIdsShrink)) {
    query['EcIdAccountIds'] = request.ecIdAccountIdsShrink;
  }
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  if (!$isNull(request.tagKeysShrink)) {
    query['TagKeys'] = request.tagKeysShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteCouponDeductTag',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除优惠券的抵扣标签
 *
 * @param request DeleteCouponDeductTagRequest
 * @return DeleteCouponDeductTagResponse
 */
async function deleteCouponDeductTag(request: DeleteCouponDeductTagRequest): DeleteCouponDeductTagResponse {
  var runtime = new $RuntimeOptions{};
  return deleteCouponDeductTagWithOptions(request, runtime);
}

model DeleteReportDefinitionRequest {
  nbid?: string(name='Nbid', example='2684201000001'),
  reportTaskId?: long(name='ReportTaskId', description='This parameter is required.', example='123123'),
}

model DeleteReportDefinitionResponseBody = {
  data?: boolean(name='Data', example='true'),
  metadata?: any(name='Metadata', example='{}'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
}

model DeleteReportDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteReportDefinitionResponseBody(name='body'),
}

/**
 * @summary 取消账单订阅
 *
 * @param request DeleteReportDefinitionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteReportDefinitionResponse
 */
@context("deleteReportDefinitionWithContext")
async function deleteReportDefinitionWithOptions(request: DeleteReportDefinitionRequest, runtime: $RuntimeOptions): DeleteReportDefinitionResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  if (!$isNull(request.reportTaskId)) {
    query['ReportTaskId'] = request.reportTaskId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteReportDefinition',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 取消账单订阅
 *
 * @param request DeleteReportDefinitionRequest
 * @return DeleteReportDefinitionResponse
 */
async function deleteReportDefinition(request: DeleteReportDefinitionRequest): DeleteReportDefinitionResponse {
  var runtime = new $RuntimeOptions{};
  return deleteReportDefinitionWithOptions(request, runtime);
}

model DescribeCouponRequest {
  couponId?: long(name='CouponId', example='351430260343'),
  couponNo?: string(name='CouponNo', example='554863270150'),
  couponType?: string(name='CouponType', example='CERTAIN'),
  currentPage?: int32(name='CurrentPage', description='This parameter is required.', example='1'),
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds'),
      ecId?: string(name='EcId', description='This parameter is required.', example='1501603440974415'),
    }
  ](name='EcIdAccountIds'),
  effectiveEndTime?: long(name='EffectiveEndTime', example='1708423156000'),
  effectiveStartTime?: long(name='EffectiveStartTime', example='1684750028000'),
  expireEndDate?: long(name='ExpireEndDate', example='1708423156000'),
  expireStartDate?: long(name='ExpireStartDate', example='1684750028000'),
  nbid?: string(name='Nbid', example='2684201000001'),
  pageSize?: int32(name='PageSize', description='This parameter is required.', example='20'),
  status?: string(name='Status', example='AVAILABLE'),
}

model DescribeCouponShrinkRequest {
  couponId?: long(name='CouponId', example='351430260343'),
  couponNo?: string(name='CouponNo', example='554863270150'),
  couponType?: string(name='CouponType', example='CERTAIN'),
  currentPage?: int32(name='CurrentPage', description='This parameter is required.', example='1'),
  ecIdAccountIdsShrink?: string(name='EcIdAccountIds'),
  effectiveEndTime?: long(name='EffectiveEndTime', example='1708423156000'),
  effectiveStartTime?: long(name='EffectiveStartTime', example='1684750028000'),
  expireEndDate?: long(name='ExpireEndDate', example='1708423156000'),
  expireStartDate?: long(name='ExpireStartDate', example='1684750028000'),
  nbid?: string(name='Nbid', example='2684201000001'),
  pageSize?: int32(name='PageSize', description='This parameter is required.', example='20'),
  status?: string(name='Status', example='AVAILABLE'),
}

model DescribeCouponResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  data?: [ 
    {
      amount?: string(name='Amount', example='9929.750000'),
      certainAmount?: string(name='CertainAmount'),
      couponId?: long(name='CouponId', example='59243658'),
      couponNo?: string(name='CouponNo', example='731074910070'),
      couponType?: string(name='CouponType', example='CERTAIN'),
      couponTypeName?: string(name='CouponTypeName'),
      currency?: string(name='Currency', example='CNY'),
      endTime?: string(name='EndTime', example='2021-03-06T15:12Z'),
      firstBuy?: boolean(name='FirstBuy'),
      gmtCreate?: string(name='GmtCreate', example='2021-03-02T15:12Z'),
      itemNames?: [ string ](name='ItemNames'),
      moneyLimit?: string(name='MoneyLimit'),
      orderTimeRule?: string(name='OrderTimeRule'),
      remainAmount?: string(name='RemainAmount', example='100.00'),
      remark?: string(name='Remark'),
      shareUidList?: [ 
        {
          uid?: string(name='Uid', example='1902671110151254'),
          userNick?: string(name='UserNick'),
        }
      ](name='ShareUidList'),
      showSetDeductTagButton?: boolean(name='ShowSetDeductTagButton', example='true'),
      site?: string(name='Site', example='CHINA'),
      siteName?: string(name='SiteName'),
      startTime?: string(name='StartTime', example='2021-03-02T15:12Z'),
      status?: string(name='Status', example='Available'),
      suitAccount?: string(name='SuitAccount', example='1902671110151254'),
      suitItemType?: string(name='SuitItemType', example='all'),
      universalType?: string(name='UniversalType', example='UNIVERSAL'),
      yhOrderTypes?: [ string ](name='YhOrderTypes'),
    }
  ](name='Data'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='C880B065-A781-4F19-B6DD-3E0E3B715C64'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeCouponResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCouponResponseBody(name='body'),
}

/**
 * @summary 查询优惠券列表
 *
 * @param tmpReq DescribeCouponRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeCouponResponse
 */
@context("describeCouponWithContext")
async function describeCouponWithOptions(tmpReq: DescribeCouponRequest, runtime: $RuntimeOptions): DescribeCouponResponse {
  tmpReq.validate();
  var request = new DescribeCouponShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ecIdAccountIds)) {
    request.ecIdAccountIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ecIdAccountIds, 'EcIdAccountIds', 'json');
  }
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeCoupon',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询优惠券列表
 *
 * @param request DescribeCouponRequest
 * @return DescribeCouponResponse
 */
async function describeCoupon(request: DescribeCouponRequest): DescribeCouponResponse {
  var runtime = new $RuntimeOptions{};
  return describeCouponWithOptions(request, runtime);
}

model DescribeCouponItemListRequest {
  couponId?: long(name='CouponId', example='59104570'),
  currentPage?: int32(name='CurrentPage', example='1'),
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds'),
      ecId?: string(name='EcId', description='This parameter is required.', example='1004064243473974'),
    }
  ](name='EcIdAccountIds'),
  name?: string(name='Name'),
  nbid?: string(name='Nbid', example='2684201000001'),
  pageSize?: int32(name='PageSize', example='20'),
}

model DescribeCouponItemListShrinkRequest {
  couponId?: long(name='CouponId', example='59104570'),
  currentPage?: int32(name='CurrentPage', example='1'),
  ecIdAccountIdsShrink?: string(name='EcIdAccountIds'),
  name?: string(name='Name'),
  nbid?: string(name='Nbid', example='2684201000001'),
  pageSize?: int32(name='PageSize', example='20'),
}

model DescribeCouponItemListResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  data?: [ 
    {
      code?: string(name='Code', example='vm'),
      name?: string(name='Name'),
    }
  ](name='Data'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='EAE08A27-386C-579E-966D-8853EC3C5D0E'),
  totalCount?: int32(name='TotalCount', example='5'),
}

model DescribeCouponItemListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCouponItemListResponseBody(name='body'),
}

/**
 * @summary 查询优惠券可用商品列表
 *
 * @param tmpReq DescribeCouponItemListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeCouponItemListResponse
 */
@context("describeCouponItemListWithContext")
async function describeCouponItemListWithOptions(tmpReq: DescribeCouponItemListRequest, runtime: $RuntimeOptions): DescribeCouponItemListResponse {
  tmpReq.validate();
  var request = new DescribeCouponItemListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ecIdAccountIds)) {
    request.ecIdAccountIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ecIdAccountIds, 'EcIdAccountIds', 'json');
  }
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeCouponItemList',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询优惠券可用商品列表
 *
 * @param request DescribeCouponItemListRequest
 * @return DescribeCouponItemListResponse
 */
async function describeCouponItemList(request: DescribeCouponItemListRequest): DescribeCouponItemListResponse {
  var runtime = new $RuntimeOptions{};
  return describeCouponItemListWithOptions(request, runtime);
}

model DescribeUserSpnSummaryInfoRequest {
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds'),
      ecId?: string(name='EcId', description='This parameter is required.'),
    }
  ](name='EcIdAccountIds'),
  nbid?: string(name='Nbid'),
}

model DescribeUserSpnSummaryInfoShrinkRequest {
  ecIdAccountIdsShrink?: string(name='EcIdAccountIds'),
  nbid?: string(name='Nbid'),
}

model DescribeUserSpnSummaryInfoResponseBody = {
  instanceFamilyList?: [ string ](name='InstanceFamilyList'),
  regionList?: [ 
    {
      regionCode?: string(name='RegionCode'),
      regionName?: string(name='RegionName'),
    }
  ](name='RegionList'),
  requestId?: string(name='RequestId'),
  spnCodeAndTypeList?: [ 
    {
      productCode?: string(name='ProductCode'),
      spnCommodityCode?: string(name='SpnCommodityCode'),
      spnType?: string(name='SpnType'),
      spnTypeName?: string(name='SpnTypeName'),
    }
  ](name='SpnCodeAndTypeList'),
}

model DescribeUserSpnSummaryInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUserSpnSummaryInfoResponseBody(name='body'),
}

/**
 * @summary 获取客户使用SPN的概述信息
 *
 * @param tmpReq DescribeUserSpnSummaryInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeUserSpnSummaryInfoResponse
 */
@context("describeUserSpnSummaryInfoWithContext")
async function describeUserSpnSummaryInfoWithOptions(tmpReq: DescribeUserSpnSummaryInfoRequest, runtime: $RuntimeOptions): DescribeUserSpnSummaryInfoResponse {
  tmpReq.validate();
  var request = new DescribeUserSpnSummaryInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ecIdAccountIds)) {
    request.ecIdAccountIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ecIdAccountIds, 'EcIdAccountIds', 'json');
  }
  var query = {};
  if (!$isNull(request.ecIdAccountIdsShrink)) {
    query['EcIdAccountIds'] = request.ecIdAccountIdsShrink;
  }
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeUserSpnSummaryInfo',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取客户使用SPN的概述信息
 *
 * @param request DescribeUserSpnSummaryInfoRequest
 * @return DescribeUserSpnSummaryInfoResponse
 */
async function describeUserSpnSummaryInfo(request: DescribeUserSpnSummaryInfoRequest): DescribeUserSpnSummaryInfoResponse {
  var runtime = new $RuntimeOptions{};
  return describeUserSpnSummaryInfoWithOptions(request, runtime);
}

model GetFundAccountAvailableAmountRequest {
  fundAccountId?: string(name='FundAccountId', example='12332112'),
}

model GetFundAccountAvailableAmountResponseBody = {
  availableAmount?: string(name='AvailableAmount', example='100'),
  availableCreditAmount?: string(name='AvailableCreditAmount', example='50'),
  bankAcceptanceAmount?: string(name='BankAcceptanceAmount', example='0'),
  cashAmount?: string(name='CashAmount', example='50'),
  creditAmount?: string(name='CreditAmount', example='100'),
  creditRefundAmount?: string(name='CreditRefundAmount', example='0'),
  creditUser?: boolean(name='CreditUser'),
  currency?: string(name='Currency', example='CNY'),
  currentMonthUnclearedAmount?: string(name='CurrentMonthUnclearedAmount', example='20'),
  extendLedgerList?: [ 
    {
      currency?: string(name='Currency', example='CNY'),
      ledgerName?: string(name='LedgerName', example='应付对冲账本'),
      originalAmount?: string(name='OriginalAmount', example='50'),
    }
  ](name='ExtendLedgerList'),
  fundAccountId?: string(name='FundAccountId', example='12332112'),
  fundAccountOwnerAccountId?: string(name='FundAccountOwnerAccountId', example='1344312434'),
  fundAccountStatus?: string(name='FundAccountStatus', example='valid'),
  fundAccountType?: string(name='FundAccountType', example='REDIRECT_USER'),
  historyMonthUnclearedAmount?: string(name='HistoryMonthUnclearedAmount', example='30'),
  metadata?: any(name='Metadata', example='{}'),
  negativeBillAmount?: string(name='NegativeBillAmount', example='0'),
  originalCashAmountList?: [ 
    {
      amount?: string(name='Amount', example='10'),
      currency?: string(name='Currency', example='USD'),
    }
  ](name='OriginalCashAmountList'),
  quotaAmount?: string(name='QuotaAmount', example='20'),
  quotaConsumedAmount?: string(name='QuotaConsumedAmount', example='10'),
  requestId?: string(name='RequestId', example='F96A2D13-7509-5DF9-A60E-E7E3A3CB68E8'),
  unclearedAmount?: string(name='UnclearedAmount', example='50'),
}

model GetFundAccountAvailableAmountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFundAccountAvailableAmountResponseBody(name='body'),
}

/**
 * @summary 查询资金账户可用金
 *
 * @param request GetFundAccountAvailableAmountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFundAccountAvailableAmountResponse
 */
@context("getFundAccountAvailableAmountWithContext")
async function getFundAccountAvailableAmountWithOptions(request: GetFundAccountAvailableAmountRequest, runtime: $RuntimeOptions): GetFundAccountAvailableAmountResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.fundAccountId)) {
    body['FundAccountId'] = request.fundAccountId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetFundAccountAvailableAmount',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询资金账户可用金
 *
 * @param request GetFundAccountAvailableAmountRequest
 * @return GetFundAccountAvailableAmountResponse
 */
async function getFundAccountAvailableAmount(request: GetFundAccountAvailableAmountRequest): GetFundAccountAvailableAmountResponse {
  var runtime = new $RuntimeOptions{};
  return getFundAccountAvailableAmountWithOptions(request, runtime);
}

model GetFundAccountCanAllocateCreditAmountRequest {
  fundAccountId?: long(name='FundAccountId', example='1233231'),
}

model GetFundAccountCanAllocateCreditAmountResponseBody = {
  ecid?: string(name='Ecid', example='2032123221'),
  ecidAllocatedCreditAmount?: string(name='EcidAllocatedCreditAmount', example='300'),
  ecidCreditAmount?: string(name='EcidCreditAmount', example='1000'),
  fundAccountEcid?: string(name='FundAccountEcid', example='202321232'),
  fundAccountId?: long(name='FundAccountId', example='12332112'),
  fundAccountName?: string(name='FundAccountName', example='云某的名称'),
  fundAccountOwnerAccountId?: long(name='FundAccountOwnerAccountId', example='123433121'),
  maxCanAllocateCreditAmount?: string(name='MaxCanAllocateCreditAmount', example='1500'),
  metadata?: any(name='Metadata', example='{}'),
  minCanAllocateCreditAmount?: string(name='MinCanAllocateCreditAmount', example='200'),
  nbid?: string(name='Nbid', example='2684210001'),
  requestId?: string(name='RequestId', example='CC706AAC-75A6-55B5-9AB7-7D171C6C7655'),
  site?: string(name='Site', example='26842'),
}

model GetFundAccountCanAllocateCreditAmountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFundAccountCanAllocateCreditAmountResponseBody(name='body'),
}

/**
 * @summary 查询资金账户可分配信控额度
 *
 * @param request GetFundAccountCanAllocateCreditAmountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFundAccountCanAllocateCreditAmountResponse
 */
@context("getFundAccountCanAllocateCreditAmountWithContext")
async function getFundAccountCanAllocateCreditAmountWithOptions(request: GetFundAccountCanAllocateCreditAmountRequest, runtime: $RuntimeOptions): GetFundAccountCanAllocateCreditAmountResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.fundAccountId)) {
    body['FundAccountId'] = request.fundAccountId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetFundAccountCanAllocateCreditAmount',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询资金账户可分配信控额度
 *
 * @param request GetFundAccountCanAllocateCreditAmountRequest
 * @return GetFundAccountCanAllocateCreditAmountResponse
 */
async function getFundAccountCanAllocateCreditAmount(request: GetFundAccountCanAllocateCreditAmountRequest): GetFundAccountCanAllocateCreditAmountResponse {
  var runtime = new $RuntimeOptions{};
  return getFundAccountCanAllocateCreditAmountWithOptions(request, runtime);
}

model GetFundAccountCanRecycleAmountRequest {
  currency?: string(name='Currency', description='This parameter is required.', example='CNY'),
  recycleFromFundAccountId?: string(name='RecycleFromFundAccountId', example='122321223'),
}

model GetFundAccountCanRecycleAmountResponseBody = {
  availableAmount?: string(name='AvailableAmount', example='300'),
  currency?: string(name='Currency', example='CNY'),
  metadata?: any(name='Metadata', example='{}'),
  recycleFromFundAccountId?: string(name='RecycleFromFundAccountId', example='1232122132'),
  recycleToFundAccountList?: [ 
    {
      fundAccountId?: string(name='FundAccountId', example='122323121'),
      fundAccountName?: string(name='FundAccountName', example='云某的账户'),
      fundAccountOwnerAccountId?: string(name='FundAccountOwnerAccountId', example='183221321'),
      maxRecyclableAmount?: string(name='MaxRecyclableAmount', example='120'),
      originalTransferRemainAmount?: string(name='OriginalTransferRemainAmount', example='120'),
    }
  ](name='RecycleToFundAccountList'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  transferAmount?: string(name='TransferAmount', example='200'),
}

model GetFundAccountCanRecycleAmountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFundAccountCanRecycleAmountResponseBody(name='body'),
}

/**
 * @summary 查询资金账户可回收金额
 *
 * @param request GetFundAccountCanRecycleAmountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFundAccountCanRecycleAmountResponse
 */
@context("getFundAccountCanRecycleAmountWithContext")
async function getFundAccountCanRecycleAmountWithOptions(request: GetFundAccountCanRecycleAmountRequest, runtime: $RuntimeOptions): GetFundAccountCanRecycleAmountResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.currency)) {
    body['Currency'] = request.currency;
  }
  if (!$isNull(request.recycleFromFundAccountId)) {
    body['RecycleFromFundAccountId'] = request.recycleFromFundAccountId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetFundAccountCanRecycleAmount',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询资金账户可回收金额
 *
 * @param request GetFundAccountCanRecycleAmountRequest
 * @return GetFundAccountCanRecycleAmountResponse
 */
async function getFundAccountCanRecycleAmount(request: GetFundAccountCanRecycleAmountRequest): GetFundAccountCanRecycleAmountResponse {
  var runtime = new $RuntimeOptions{};
  return getFundAccountCanRecycleAmountWithOptions(request, runtime);
}

model GetFundAccountCanTransferAmountRequest {
  currency?: string(name='Currency', description='This parameter is required.', example='CNY'),
  fundAccountId?: string(name='FundAccountId', example='123212'),
}

model GetFundAccountCanTransferAmountResponseBody = {
  availableAmount?: string(name='AvailableAmount', example='100'),
  cashAmount?: string(name='CashAmount', example='500'),
  currency?: string(name='Currency', example='CNY'),
  fundAccountEcid?: string(name='FundAccountEcid', example='2032121324'),
  fundAccountId?: long(name='FundAccountId', example='12332112'),
  fundAccountName?: string(name='FundAccountName', example='云某的账户'),
  fundAccountOwnerAccountId?: long(name='FundAccountOwnerAccountId', example='154738212323'),
  maxTransferableAmount?: string(name='MaxTransferableAmount', example='100'),
  metadata?: any(name='Metadata', example='{}'),
  nbid?: string(name='Nbid', example='2684210001'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  site?: string(name='Site', example='26842'),
  transferAmount?: string(name='TransferAmount', example='100'),
}

model GetFundAccountCanTransferAmountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFundAccountCanTransferAmountResponseBody(name='body'),
}

/**
 * @summary 查询资金账户的可转出金额
 *
 * @param request GetFundAccountCanTransferAmountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFundAccountCanTransferAmountResponse
 */
@context("getFundAccountCanTransferAmountWithContext")
async function getFundAccountCanTransferAmountWithOptions(request: GetFundAccountCanTransferAmountRequest, runtime: $RuntimeOptions): GetFundAccountCanTransferAmountResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.currency)) {
    body['Currency'] = request.currency;
  }
  if (!$isNull(request.fundAccountId)) {
    body['FundAccountId'] = request.fundAccountId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetFundAccountCanTransferAmount',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询资金账户的可转出金额
 *
 * @param request GetFundAccountCanTransferAmountRequest
 * @return GetFundAccountCanTransferAmountResponse
 */
async function getFundAccountCanTransferAmount(request: GetFundAccountCanTransferAmountRequest): GetFundAccountCanTransferAmountResponse {
  var runtime = new $RuntimeOptions{};
  return getFundAccountCanTransferAmountWithOptions(request, runtime);
}

model GetFundAccountCanWithdrawAmountRequest {
  fundAccountId?: long(name='FundAccountId', example='123212232'),
}

model GetFundAccountCanWithdrawAmountResponseBody = {
  canOriginalWithdrawAmount?: string(name='CanOriginalWithdrawAmount', example='400'),
  canWithdrawAmount?: string(name='CanWithdrawAmount', example='500'),
  cannotOriginalWithdrawAmount?: string(name='CannotOriginalWithdrawAmount', example='100'),
  cashAmount?: string(name='CashAmount', example='1000'),
  creditMemoAmount?: string(name='CreditMemoAmount', example='100'),
  currentMonthUnclearedAmount?: string(name='CurrentMonthUnclearedAmount', example='200'),
  historyMonthUnclearedAmount?: string(name='HistoryMonthUnclearedAmount', example='100'),
  metadata?: any(name='Metadata', example='{}'),
  payAsYouGoReversedAmount?: string(name='PayAsYouGoReversedAmount', example='100'),
  requestId?: string(name='RequestId', example='DF58589C-A06C-4224-8615-7797E6474FA3'),
  transferAmount?: string(name='TransferAmount', example='0'),
}

model GetFundAccountCanWithdrawAmountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFundAccountCanWithdrawAmountResponseBody(name='body'),
}

/**
 * @summary 查询资金账户可提现金额
 *
 * @param request GetFundAccountCanWithdrawAmountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFundAccountCanWithdrawAmountResponse
 */
@context("getFundAccountCanWithdrawAmountWithContext")
async function getFundAccountCanWithdrawAmountWithOptions(request: GetFundAccountCanWithdrawAmountRequest, runtime: $RuntimeOptions): GetFundAccountCanWithdrawAmountResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.fundAccountId)) {
    body['FundAccountId'] = request.fundAccountId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetFundAccountCanWithdrawAmount',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询资金账户可提现金额
 *
 * @param request GetFundAccountCanWithdrawAmountRequest
 * @return GetFundAccountCanWithdrawAmountResponse
 */
async function getFundAccountCanWithdrawAmount(request: GetFundAccountCanWithdrawAmountRequest): GetFundAccountCanWithdrawAmountResponse {
  var runtime = new $RuntimeOptions{};
  return getFundAccountCanWithdrawAmountWithOptions(request, runtime);
}

model GetFundAccountLowAvailableAmountAlarmRequest {
  fundAccountId?: long(name='FundAccountId', example='12332112'),
}

model GetFundAccountLowAvailableAmountAlarmResponseBody = {
  alarmEnabled?: boolean(name='AlarmEnabled'),
  metadata?: any(name='Metadata', example='{}'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  thresholdAmount?: string(name='ThresholdAmount', example='100'),
}

model GetFundAccountLowAvailableAmountAlarmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFundAccountLowAvailableAmountAlarmResponseBody(name='body'),
}

/**
 * @summary 查询资金账户低额预警
 *
 * @param request GetFundAccountLowAvailableAmountAlarmRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFundAccountLowAvailableAmountAlarmResponse
 */
@context("getFundAccountLowAvailableAmountAlarmWithContext")
async function getFundAccountLowAvailableAmountAlarmWithOptions(request: GetFundAccountLowAvailableAmountAlarmRequest, runtime: $RuntimeOptions): GetFundAccountLowAvailableAmountAlarmResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.fundAccountId)) {
    body['FundAccountId'] = request.fundAccountId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetFundAccountLowAvailableAmountAlarm',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询资金账户低额预警
 *
 * @param request GetFundAccountLowAvailableAmountAlarmRequest
 * @return GetFundAccountLowAvailableAmountAlarmResponse
 */
async function getFundAccountLowAvailableAmountAlarm(request: GetFundAccountLowAvailableAmountAlarmRequest): GetFundAccountLowAvailableAmountAlarmResponse {
  var runtime = new $RuntimeOptions{};
  return getFundAccountLowAvailableAmountAlarmWithOptions(request, runtime);
}

model GetFundAccountTransactionDetailsRequest {
  billNumber?: string(name='BillNumber', example='2023212312321'),
  channelTransactionNumber?: string(name='ChannelTransactionNumber', example='20250312334312322'),
  currentPage?: int32(name='CurrentPage', example='1'),
  endTime?: long(name='EndTime', example='1735664561000'),
  fundAccountId?: long(name='FundAccountId', example='123221232'),
  pageSize?: int32(name='PageSize', example='20'),
  startTime?: long(name='StartTime', example='1735664461000'),
  transactionChannelList?: [ string ](name='TransactionChannelList'),
  transactionDirection?: string(name='TransactionDirection', example='IN'),
  transactionNumber?: long(name='TransactionNumber', example='543231231'),
  transactionType?: string(name='TransactionType', example='CHARGE'),
  transactionTypeList?: [ string ](name='TransactionTypeList'),
}

model GetFundAccountTransactionDetailsShrinkRequest {
  billNumber?: string(name='BillNumber', example='2023212312321'),
  channelTransactionNumber?: string(name='ChannelTransactionNumber', example='20250312334312322'),
  currentPage?: int32(name='CurrentPage', example='1'),
  endTime?: long(name='EndTime', example='1735664561000'),
  fundAccountId?: long(name='FundAccountId', example='123221232'),
  pageSize?: int32(name='PageSize', example='20'),
  startTime?: long(name='StartTime', example='1735664461000'),
  transactionChannelListShrink?: string(name='TransactionChannelList'),
  transactionDirection?: string(name='TransactionDirection', example='IN'),
  transactionNumber?: long(name='TransactionNumber', example='543231231'),
  transactionType?: string(name='TransactionType', example='CHARGE'),
  transactionTypeListShrink?: string(name='TransactionTypeList'),
}

model GetFundAccountTransactionDetailsResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  data?: [ 
    {
      balance?: string(name='Balance', example='5'),
      billNumber?: string(name='BillNumber', example='2323203243'),
      channelTransactionNumber?: string(name='ChannelTransactionNumber', example='20244389232'),
      currency?: string(name='Currency', example='USD'),
      fundAccountEcid?: string(name='FundAccountEcid', example='23473943'),
      fundAccountId?: long(name='FundAccountId', example='1232121'),
      fundAccountName?: string(name='FundAccountName', example='云某的名称'),
      fundAccountOwnerAccountId?: long(name='FundAccountOwnerAccountId', example='32343231'),
      fundType?: string(name='FundType', example='ACCT_BOOK'),
      nbid?: string(name='Nbid', example='2684210001'),
      remark?: string(name='Remark', example='订单备注'),
      site?: string(name='Site', example='26842'),
      transactionAccount?: string(name='TransactionAccount', example='186****3975'),
      transactionAmount?: string(name='TransactionAmount', example='10'),
      transactionChannel?: string(name='TransactionChannel', example='ALIPAY'),
      transactionDirection?: string(name='TransactionDirection', example='IN'),
      transactionNumber?: long(name='TransactionNumber', example='5423121'),
      transactionTime?: string(name='TransactionTime', example='2024-12-01 12:00:00'),
      transactionType?: string(name='TransactionType', example='CHARGE'),
    }
  ](name='Data'),
  metadata?: any(name='Metadata', example='{}'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22ECB1F'),
  totalCount?: int32(name='TotalCount', example='30'),
}

model GetFundAccountTransactionDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFundAccountTransactionDetailsResponseBody(name='body'),
}

/**
 * @summary 查询资金账户收支明细
 *
 * @param tmpReq GetFundAccountTransactionDetailsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFundAccountTransactionDetailsResponse
 */
@context("getFundAccountTransactionDetailsWithContext")
async function getFundAccountTransactionDetailsWithOptions(tmpReq: GetFundAccountTransactionDetailsRequest, runtime: $RuntimeOptions): GetFundAccountTransactionDetailsResponse {
  tmpReq.validate();
  var request = new GetFundAccountTransactionDetailsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.transactionChannelList)) {
    request.transactionChannelListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.transactionChannelList, 'TransactionChannelList', 'json');
  }
  if (!$isNull(tmpReq.transactionTypeList)) {
    request.transactionTypeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.transactionTypeList, 'TransactionTypeList', 'json');
  }
  var query = {};
  if (!$isNull(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var body : map[string]any = {};
  if (!$isNull(request.billNumber)) {
    body['BillNumber'] = request.billNumber;
  }
  if (!$isNull(request.channelTransactionNumber)) {
    body['ChannelTransactionNumber'] = request.channelTransactionNumber;
  }
  if (!$isNull(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!$isNull(request.fundAccountId)) {
    body['FundAccountId'] = request.fundAccountId;
  }
  if (!$isNull(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!$isNull(request.transactionChannelListShrink)) {
    body['TransactionChannelList'] = request.transactionChannelListShrink;
  }
  if (!$isNull(request.transactionDirection)) {
    body['TransactionDirection'] = request.transactionDirection;
  }
  if (!$isNull(request.transactionNumber)) {
    body['TransactionNumber'] = request.transactionNumber;
  }
  if (!$isNull(request.transactionType)) {
    body['TransactionType'] = request.transactionType;
  }
  if (!$isNull(request.transactionTypeListShrink)) {
    body['TransactionTypeList'] = request.transactionTypeListShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetFundAccountTransactionDetails',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询资金账户收支明细
 *
 * @param request GetFundAccountTransactionDetailsRequest
 * @return GetFundAccountTransactionDetailsResponse
 */
async function getFundAccountTransactionDetails(request: GetFundAccountTransactionDetailsRequest): GetFundAccountTransactionDetailsResponse {
  var runtime = new $RuntimeOptions{};
  return getFundAccountTransactionDetailsWithOptions(request, runtime);
}

model GetOrderDetailRequest {
  memberUid?: long(name='MemberUid', example='1715322405372273'),
  orderId?: string(name='OrderId', description='This parameter is required.', example='233501558440169'),
  ownerId?: long(name='OwnerId'),
}

model GetOrderDetailResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    hostName?: string(name='HostName', example='test'),
    orderList?: {
      order?: [ 
      {
        afterTaxAmount?: string(name='AfterTaxAmount', example='0'),
        billModuleConfig?: {
          billModuleConfig?: [ 
          {
            apiCode?: string(name='ApiCode', description='apiCode', example='datadisk'),
            billModuleProperties?: {
              billModuleProperties?: [ 
              {
                attrApiCode?: string(name='AttrApiCode', example='cloud_ssd'),
                moduleApiCode?: string(name='ModuleApiCode', example='cloud_ssd'),
                value?: string(name='Value', example='cloud_ssd'),
              }
            ](name='billModuleProperties')
            }(name='BillModuleProperties'),
            code?: string(name='Code', example='datadisk'),
            name?: string(name='Name'),
          }
        ](name='billModuleConfig')
        }(name='BillModuleConfig'),
        commodityCode?: string(name='CommodityCode', example='rds'),
        config?: string(name='Config', example='DBInstanceClass:[DBInstanceClass:rds.mysql.s1.small;EngineVersion:8.0;Region:cn-qingdao;]DBFlowType:[Region:cn-qingdao;]'),
        createTime?: string(name='CreateTime', example='2017-06-08T09:41:30Z'),
        currency?: string(name='Currency', example='CNY'),
        extendInfos?: map[string]string(name='ExtendInfos'),
        instanceIds?: string(name='InstanceIds', example='["rm-bp1a2vsr018313t6o"]'),
        operator?: string(name='Operator', example='322315'),
        orderId?: string(name='OrderId', example='241559391310333'),
        orderSubType?: string(name='OrderSubType', example='productsuborder'),
        orderType?: string(name='OrderType', example='new'),
        originalConfig?: string(name='OriginalConfig', example='DBInstanceClass:[DBInstanceClass:rds.mysql.s1.small;EngineVersion:8.0;Region:cn-qingdao;]DBFlowType:[Region:cn-qingdao;]'),
        originalModuleConfig?: {
          originalModuleConfig?: [ 
          {
            code?: string(name='Code', example='systemdisk'),
            moduleProperties?: {
              moduleProperties?: [ 
              {
                code?: string(name='Code', example='cloud_efficiency'),
                name?: string(name='Name'),
                value?: string(name='Value', example='cloud_efficiency'),
              }
            ](name='moduleProperties')
            }(name='ModuleProperties'),
            name?: string(name='Name'),
          }
        ](name='originalModuleConfig')
        }(name='OriginalModuleConfig'),
        paymentCurrency?: string(name='PaymentCurrency', example='CNY'),
        paymentStatus?: string(name='PaymentStatus', example='paid'),
        paymentTime?: string(name='PaymentTime', example='2017-06-08T09:41:30Z'),
        pretaxAmount?: string(name='PretaxAmount', example='0'),
        pretaxAmountLocal?: string(name='PretaxAmountLocal', example='0'),
        pretaxGrossAmount?: string(name='PretaxGrossAmount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productType?: string(name='ProductType', example='rds'),
        quantity?: string(name='Quantity', example='3'),
        region?: string(name='Region', example='cn-hangzhou'),
        relatedOrderId?: string(name='RelatedOrderId', example='241559391310332'),
        subOrderId?: string(name='SubOrderId', example='234343'),
        subscriptionType?: string(name='SubscriptionType', example='Subscription'),
        tax?: string(name='Tax', example='0'),
        usageEndTime?: string(name='UsageEndTime', example='2117-06-08T16:00:00Z'),
        usageStartTime?: string(name='UsageStartTime', example='2017-06-08T16:00:00Z'),
      }
    ](name='Order')
    }(name='OrderList'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='400'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22ECB1F'),
  success?: boolean(name='Success', example='true'),
}

model GetOrderDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOrderDetailResponseBody(name='body'),
}

/**
 * @summary 订单详情查询
 *
 * @param request GetOrderDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetOrderDetailResponse
 */
@context("getOrderDetailWithContext")
async function getOrderDetailWithOptions(request: GetOrderDetailRequest, runtime: $RuntimeOptions): GetOrderDetailResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!$isNull(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetOrderDetail',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 订单详情查询
 *
 * @param request GetOrderDetailRequest
 * @return GetOrderDetailResponse
 */
async function getOrderDetail(request: GetOrderDetailRequest): GetOrderDetailResponse {
  var runtime = new $RuntimeOptions{};
  return getOrderDetailWithOptions(request, runtime);
}

model GetOrdersRequest {
  createTimeEnd?: string(name='CreateTimeEnd', example='2016-05-23T12:00:00Z'),
  createTimeStart?: string(name='CreateTimeStart', example='2016-05-23T13:00:00Z'),
  memberUid?: long(name='MemberUid', example='1779628988149763'),
  orderType?: string(name='OrderType', example='New'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  paymentStatus?: string(name='PaymentStatus', example='Paid'),
  productCode?: string(name='ProductCode', example='rds'),
  productType?: string(name='ProductType', example='rds'),
  subscriptionType?: string(name='SubscriptionType', example='Subscription'),
}

model GetOrdersResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    hostName?: string(name='HostName', example='test'),
    orderList?: {
      order?: [ 
      {
        afterTaxAmount?: string(name='AfterTaxAmount', example='66'),
        commodityCode?: string(name='CommodityCode', example='rds'),
        createTime?: string(name='CreateTime', example='2017-06-08T09:41:30Z'),
        currency?: string(name='Currency', example='CNY'),
        orderId?: string(name='OrderId', example='237258627070169'),
        orderType?: string(name='OrderType', example='New'),
        paymentCurrency?: string(name='PaymentCurrency', example='CNY'),
        paymentStatus?: string(name='PaymentStatus', example='Paid'),
        paymentTime?: string(name='PaymentTime', example='2017-06-08T09:41:30Z'),
        pretaxAmount?: string(name='PretaxAmount', example='0'),
        pretaxAmountLocal?: string(name='PretaxAmountLocal', example='0'),
        pretaxGrossAmount?: string(name='PretaxGrossAmount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productType?: string(name='ProductType', example='rds'),
        relatedOrderId?: string(name='RelatedOrderId', example='234535345345342'),
        subscriptionType?: string(name='SubscriptionType', example='Subscription'),
        tax?: string(name='Tax', example='1'),
      }
    ](name='Order')
    }(name='OrderList'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', example='true'),
}

model GetOrdersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOrdersResponseBody(name='body'),
}

/**
 * @summary 订单列表查询
 *
 * @param request GetOrdersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetOrdersResponse
 */
@context("getOrdersWithContext")
async function getOrdersWithOptions(request: GetOrdersRequest, runtime: $RuntimeOptions): GetOrdersResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.createTimeEnd)) {
    query['CreateTimeEnd'] = request.createTimeEnd;
  }
  if (!$isNull(request.createTimeStart)) {
    query['CreateTimeStart'] = request.createTimeStart;
  }
  if (!$isNull(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!$isNull(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.paymentStatus)) {
    query['PaymentStatus'] = request.paymentStatus;
  }
  if (!$isNull(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!$isNull(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!$isNull(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetOrders',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 订单列表查询
 *
 * @param request GetOrdersRequest
 * @return GetOrdersResponse
 */
async function getOrders(request: GetOrdersRequest): GetOrdersResponse {
  var runtime = new $RuntimeOptions{};
  return getOrdersWithOptions(request, runtime);
}

model GetSavingPlanDeductableCommodityRequest {
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds'),
      ecId?: string(name='EcId', description='This parameter is required.'),
    }
  ](name='EcIdAccountIds'),
  nbid?: string(name='Nbid'),
}

model GetSavingPlanDeductableCommodityShrinkRequest {
  ecIdAccountIdsShrink?: string(name='EcIdAccountIds'),
  nbid?: string(name='Nbid'),
}

model GetSavingPlanDeductableCommodityResponseBody = {
  data?: [ 
    {
      activityId?: long(name='ActivityId'),
      commodityCode?: string(name='CommodityCode'),
      commodityId?: long(name='CommodityId'),
      commodityName?: string(name='CommodityName'),
      cycleList?: [ 
        {
          code?: string(name='Code'),
          name?: string(name='Name'),
        }
      ](name='CycleList'),
      filterModules?: [ 
        {
          moduleCode?: string(name='ModuleCode'),
          moduleId?: long(name='ModuleId'),
          moduleName?: string(name='ModuleName'),
        }
      ](name='FilterModules'),
      itemCode?: string(name='ItemCode'),
      itemId?: long(name='ItemId'),
      itemName?: string(name='ItemName'),
      moduleMapList?: [ 
        {
          filterModules?: [ 
            {
              moduleCode?: string(name='ModuleCode'),
              moduleId?: long(name='ModuleId'),
              moduleName?: string(name='ModuleName'),
            }
          ](name='FilterModules'),
          moduleCode?: string(name='ModuleCode'),
          moduleId?: long(name='ModuleId'),
          moduleName?: string(name='ModuleName'),
          showModules?: [ 
            {
              moduleCode?: string(name='ModuleCode'),
              moduleId?: long(name='ModuleId'),
              moduleName?: string(name='ModuleName'),
            }
          ](name='ShowModules'),
          spnTypeList?: [ string ](name='SpnTypeList'),
          spnTypeMapList?: [ map[string]DataModuleMapListSpnTypeMapListValue ](name='SpnTypeMapList'),
          spnTypeNameList?: [ 
            {
              code?: string(name='Code'),
              name?: string(name='Name'),
            }
          ](name='SpnTypeNameList'),
        }
      ](name='ModuleMapList'),
      payModeList?: [ 
        {
          code?: string(name='Code'),
          name?: string(name='Name'),
        }
      ](name='PayModeList'),
      pricingModules?: [ 
        {
          moduleCode?: string(name='ModuleCode'),
          moduleId?: long(name='ModuleId'),
          moduleName?: string(name='ModuleName'),
        }
      ](name='PricingModules'),
      spnCommodityCode?: string(name='SpnCommodityCode'),
      spnCommodityName?: string(name='SpnCommodityName'),
      spnDiscountConfigType?: string(name='SpnDiscountConfigType'),
      stepPriceMap?: map[string][ DataStepPriceMapValue       ](name='StepPriceMap'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model GetSavingPlanDeductableCommodityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSavingPlanDeductableCommodityResponseBody(name='body'),
}

/**
 * @summary 获取节省计划及可抵扣商品信息
 *
 * @param tmpReq GetSavingPlanDeductableCommodityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSavingPlanDeductableCommodityResponse
 */
@context("getSavingPlanDeductableCommodityWithContext")
async function getSavingPlanDeductableCommodityWithOptions(tmpReq: GetSavingPlanDeductableCommodityRequest, runtime: $RuntimeOptions): GetSavingPlanDeductableCommodityResponse {
  tmpReq.validate();
  var request = new GetSavingPlanDeductableCommodityShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ecIdAccountIds)) {
    request.ecIdAccountIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ecIdAccountIds, 'EcIdAccountIds', 'json');
  }
  var query = {};
  if (!$isNull(request.ecIdAccountIdsShrink)) {
    query['EcIdAccountIds'] = request.ecIdAccountIdsShrink;
  }
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetSavingPlanDeductableCommodity',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取节省计划及可抵扣商品信息
 *
 * @param request GetSavingPlanDeductableCommodityRequest
 * @return GetSavingPlanDeductableCommodityResponse
 */
async function getSavingPlanDeductableCommodity(request: GetSavingPlanDeductableCommodityRequest): GetSavingPlanDeductableCommodityResponse {
  var runtime = new $RuntimeOptions{};
  return getSavingPlanDeductableCommodityWithOptions(request, runtime);
}

model GetSavingPlanShareAccountsRequest {
  currentPage?: int32(name='CurrentPage'),
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds'),
      ecId?: string(name='EcId', description='This parameter is required.'),
    }
  ](name='EcIdAccountIds'),
  nbid?: string(name='Nbid'),
  pageSize?: int32(name='PageSize'),
  spnInstanceCode?: string(name='SpnInstanceCode'),
}

model GetSavingPlanShareAccountsShrinkRequest {
  currentPage?: int32(name='CurrentPage'),
  ecIdAccountIdsShrink?: string(name='EcIdAccountIds'),
  nbid?: string(name='Nbid'),
  pageSize?: int32(name='PageSize'),
  spnInstanceCode?: string(name='SpnInstanceCode'),
}

model GetSavingPlanShareAccountsResponseBody = {
  data?: [ 
    {
      accountId?: string(name='AccountId'),
      aliUid?: long(name='AliUid'),
      shareTimeList?: [ 
        {
          shareEndTime?: string(name='ShareEndTime'),
          shareStartTime?: string(name='ShareStartTime'),
        }
      ](name='ShareTimeList'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model GetSavingPlanShareAccountsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSavingPlanShareAccountsResponseBody(name='body'),
}

/**
 * @summary 获取节省计划实例共享账号信息
 *
 * @param tmpReq GetSavingPlanShareAccountsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSavingPlanShareAccountsResponse
 */
@context("getSavingPlanShareAccountsWithContext")
async function getSavingPlanShareAccountsWithOptions(tmpReq: GetSavingPlanShareAccountsRequest, runtime: $RuntimeOptions): GetSavingPlanShareAccountsResponse {
  tmpReq.validate();
  var request = new GetSavingPlanShareAccountsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ecIdAccountIds)) {
    request.ecIdAccountIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ecIdAccountIds, 'EcIdAccountIds', 'json');
  }
  var query = {};
  if (!$isNull(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!$isNull(request.ecIdAccountIdsShrink)) {
    query['EcIdAccountIds'] = request.ecIdAccountIdsShrink;
  }
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.spnInstanceCode)) {
    query['SpnInstanceCode'] = request.spnInstanceCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetSavingPlanShareAccounts',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取节省计划实例共享账号信息
 *
 * @param request GetSavingPlanShareAccountsRequest
 * @return GetSavingPlanShareAccountsResponse
 */
async function getSavingPlanShareAccounts(request: GetSavingPlanShareAccountsRequest): GetSavingPlanShareAccountsResponse {
  var runtime = new $RuntimeOptions{};
  return getSavingPlanShareAccountsWithOptions(request, runtime);
}

model GetSavingPlanUserDeductRuleRequest {
  currentPage?: int32(name='CurrentPage'),
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds'),
      ecId?: string(name='EcId', description='This parameter is required.'),
    }
  ](name='EcIdAccountIds'),
  nbid?: string(name='Nbid'),
  pageSize?: int32(name='PageSize'),
  spnInstanceCode?: string(name='SpnInstanceCode'),
}

model GetSavingPlanUserDeductRuleShrinkRequest {
  currentPage?: int32(name='CurrentPage'),
  ecIdAccountIdsShrink?: string(name='EcIdAccountIds'),
  nbid?: string(name='Nbid'),
  pageSize?: int32(name='PageSize'),
  spnInstanceCode?: string(name='SpnInstanceCode'),
}

model GetSavingPlanUserDeductRuleResponseBody = {
  data?: [ 
    {
      commodityCode?: string(name='CommodityCode'),
      commodityName?: string(name='CommodityName'),
      moduleCode?: string(name='ModuleCode'),
      moduleName?: string(name='ModuleName'),
      skipDeduct?: boolean(name='SkipDeduct'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model GetSavingPlanUserDeductRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSavingPlanUserDeductRuleResponseBody(name='body'),
}

/**
 * @summary 获取节省计划实例客户自定义规则
 *
 * @param tmpReq GetSavingPlanUserDeductRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSavingPlanUserDeductRuleResponse
 */
@context("getSavingPlanUserDeductRuleWithContext")
async function getSavingPlanUserDeductRuleWithOptions(tmpReq: GetSavingPlanUserDeductRuleRequest, runtime: $RuntimeOptions): GetSavingPlanUserDeductRuleResponse {
  tmpReq.validate();
  var request = new GetSavingPlanUserDeductRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ecIdAccountIds)) {
    request.ecIdAccountIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ecIdAccountIds, 'EcIdAccountIds', 'json');
  }
  var query = {};
  if (!$isNull(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!$isNull(request.ecIdAccountIdsShrink)) {
    query['EcIdAccountIds'] = request.ecIdAccountIdsShrink;
  }
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.spnInstanceCode)) {
    query['SpnInstanceCode'] = request.spnInstanceCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetSavingPlanUserDeductRule',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取节省计划实例客户自定义规则
 *
 * @param request GetSavingPlanUserDeductRuleRequest
 * @return GetSavingPlanUserDeductRuleResponse
 */
async function getSavingPlanUserDeductRule(request: GetSavingPlanUserDeductRuleRequest): GetSavingPlanUserDeductRuleResponse {
  var runtime = new $RuntimeOptions{};
  return getSavingPlanUserDeductRuleWithOptions(request, runtime);
}

model ListCouponDeductTagRequest {
  couponId?: string(name='CouponId'),
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds'),
      ecId?: string(name='EcId', description='This parameter is required.'),
    }
  ](name='EcIdAccountIds'),
  nbid?: string(name='Nbid'),
}

model ListCouponDeductTagShrinkRequest {
  couponId?: string(name='CouponId'),
  ecIdAccountIdsShrink?: string(name='EcIdAccountIds'),
  nbid?: string(name='Nbid'),
}

model ListCouponDeductTagResponseBody = {
  data?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model ListCouponDeductTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCouponDeductTagResponseBody(name='body'),
}

/**
 * @summary 查询优惠券设置的抵扣标签
 *
 * @param tmpReq ListCouponDeductTagRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCouponDeductTagResponse
 */
@context("listCouponDeductTagWithContext")
async function listCouponDeductTagWithOptions(tmpReq: ListCouponDeductTagRequest, runtime: $RuntimeOptions): ListCouponDeductTagResponse {
  tmpReq.validate();
  var request = new ListCouponDeductTagShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ecIdAccountIds)) {
    request.ecIdAccountIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ecIdAccountIds, 'EcIdAccountIds', 'json');
  }
  var query = {};
  if (!$isNull(request.couponId)) {
    query['CouponId'] = request.couponId;
  }
  if (!$isNull(request.ecIdAccountIdsShrink)) {
    query['EcIdAccountIds'] = request.ecIdAccountIdsShrink;
  }
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListCouponDeductTag',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询优惠券设置的抵扣标签
 *
 * @param request ListCouponDeductTagRequest
 * @return ListCouponDeductTagResponse
 */
async function listCouponDeductTag(request: ListCouponDeductTagRequest): ListCouponDeductTagResponse {
  var runtime = new $RuntimeOptions{};
  return listCouponDeductTagWithOptions(request, runtime);
}

model ListFundAccountRequest {
  nbid?: string(name='Nbid', example='2084210001'),
  queryOnlyInUse?: boolean(name='QueryOnlyInUse'),
  queryOnlyManage?: boolean(name='QueryOnlyManage'),
}

model ListFundAccountResponseBody = {
  data?: [ 
    {
      createDate?: string(name='CreateDate', example='2024-12-30 12:00:00'),
      fundAccountAdminAccountId?: string(name='FundAccountAdminAccountId', example='1232121'),
      fundAccountAdminAccountName?: string(name='FundAccountAdminAccountName', example='云某的账户'),
      fundAccountId?: string(name='FundAccountId', example='1022231'),
      fundAccountName?: string(name='FundAccountName', example='云某的账户'),
      fundAccountOwnerAccountId?: string(name='FundAccountOwnerAccountId', example='132123211'),
      fundAccountStatus?: string(name='FundAccountStatus', example='VALID'),
      fundAccountType?: string(name='FundAccountType', example='DIRECT_USER'),
      nbid?: string(name='Nbid', example='2684210001'),
      permissions?: [ string ](name='Permissions'),
      site?: string(name='Site', example='26842'),
    }
  ](name='Data'),
  metadata?: any(name='Metadata', example='{}'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
}

model ListFundAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFundAccountResponseBody(name='body'),
}

/**
 * @summary 查询资金账户列表
 *
 * @param request ListFundAccountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListFundAccountResponse
 */
@context("listFundAccountWithContext")
async function listFundAccountWithOptions(request: ListFundAccountRequest, runtime: $RuntimeOptions): ListFundAccountResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  var body : map[string]any = {};
  if (!$isNull(request.queryOnlyInUse)) {
    body['QueryOnlyInUse'] = request.queryOnlyInUse;
  }
  if (!$isNull(request.queryOnlyManage)) {
    body['QueryOnlyManage'] = request.queryOnlyManage;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListFundAccount',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询资金账户列表
 *
 * @param request ListFundAccountRequest
 * @return ListFundAccountResponse
 */
async function listFundAccount(request: ListFundAccountRequest): ListFundAccountResponse {
  var runtime = new $RuntimeOptions{};
  return listFundAccountWithOptions(request, runtime);
}

model ListFundAccountPayRelationRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  fundAccountId?: string(name='FundAccountId', description='This parameter is required.', example='12323123'),
  nbid?: string(name='Nbid', example='2684201000001'),
  pageSize?: int32(name='PageSize', example='20'),
  status?: string(name='Status', example='valid'),
}

model ListFundAccountPayRelationResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  data?: [ 
    {
      accountId?: string(name='AccountId', example='32812132121'),
      accountName?: string(name='AccountName', example='云某的名称'),
      ecid?: string(name='Ecid', example='213231232'),
      effectiveTime?: string(name='EffectiveTime', example='2024-12-01 12:00:10'),
      fundAccountId?: string(name='FundAccountId', example='123231213'),
      fundAccountOwnerAccountId?: string(name='FundAccountOwnerAccountId', example='312328912'),
      ineffectiveTime?: string(name='IneffectiveTime', example='2025-01-01 12:12:12'),
      nbid?: string(name='Nbid', example='2684210001'),
      operatorName?: string(name='OperatorName', example='云某的名称'),
      operatorNo?: string(name='OperatorNo', example='1232343423'),
      operatorType?: string(name='OperatorType', example='aliyun_pk'),
      relationType?: string(name='RelationType', example='PAYMENT'),
      site?: string(name='Site', example='26842'),
      status?: string(name='Status', example='valid'),
    }
  ](name='Data'),
  metadata?: any(name='Metadata', example='{}'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  totalCount?: int32(name='TotalCount', example='50'),
}

model ListFundAccountPayRelationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFundAccountPayRelationResponseBody(name='body'),
}

/**
 * @summary 查询资金账户的付款关系
 *
 * @param request ListFundAccountPayRelationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListFundAccountPayRelationResponse
 */
@context("listFundAccountPayRelationWithContext")
async function listFundAccountPayRelationWithOptions(request: ListFundAccountPayRelationRequest, runtime: $RuntimeOptions): ListFundAccountPayRelationResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var body : map[string]any = {};
  if (!$isNull(request.fundAccountId)) {
    body['FundAccountId'] = request.fundAccountId;
  }
  if (!$isNull(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListFundAccountPayRelation',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询资金账户的付款关系
 *
 * @param request ListFundAccountPayRelationRequest
 * @return ListFundAccountPayRelationResponse
 */
async function listFundAccountPayRelation(request: ListFundAccountPayRelationRequest): ListFundAccountPayRelationResponse {
  var runtime = new $RuntimeOptions{};
  return listFundAccountPayRelationWithOptions(request, runtime);
}

model ListInvoiceCandidateRequest {
  billingCycles?: [ int32 ](name='BillingCycles'),
  businessIds?: [ string ](name='BusinessIds'),
  currentPage?: int32(name='CurrentPage', example='1'),
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds'),
      ecId?: string(name='EcId', example='12345'),
    }
  ](name='EcIdAccountIds'),
  endTime?: string(name='EndTime', example='2025-07-01 00:00:00'),
  invoiceIssuers?: [ string ](name='InvoiceIssuers'),
  nbid?: string(name='Nbid', example='2684201000001'),
  pageSize?: int32(name='PageSize', example='20'),
  startTime?: string(name='StartTime', example='2025-06-01 00:00:00'),
  status?: [ int32 ](name='Status'),
  types?: [ int32 ](name='Types'),
}

model ListInvoiceCandidateShrinkRequest {
  billingCyclesShrink?: string(name='BillingCycles'),
  businessIdsShrink?: string(name='BusinessIds'),
  currentPage?: int32(name='CurrentPage', example='1'),
  ecIdAccountIdsShrink?: string(name='EcIdAccountIds'),
  endTime?: string(name='EndTime', example='2025-07-01 00:00:00'),
  invoiceIssuersShrink?: string(name='InvoiceIssuers'),
  nbid?: string(name='Nbid', example='2684201000001'),
  pageSize?: int32(name='PageSize', example='20'),
  startTime?: string(name='StartTime', example='2025-06-01 00:00:00'),
  statusShrink?: string(name='Status'),
  typesShrink?: string(name='Types'),
}

model ListInvoiceCandidateResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  data?: [ 
    {
      acceptedOffsetAmount?: string(name='AcceptedOffsetAmount', example='0.01'),
      accountId?: long(name='AccountId', example='1990699401005016'),
      accountName?: string(name='AccountName'),
      billingCycle?: int32(name='BillingCycle', example='202506'),
      businessId?: string(name='BusinessId', example='202506'),
      businessTime?: string(name='BusinessTime', example='2025-06-01 00:00:00'),
      commodityCode?: string(name='CommodityCode', example='pts'),
      commodityName?: string(name='CommodityName'),
      createTime?: string(name='CreateTime', example='2025-06-91 00:00:00'),
      id?: string(name='Id', example='12345'),
      invoiceIssuer?: string(name='InvoiceIssuer', example='ALIYUN_SERVICE'),
      invoiceableAmount?: string(name='InvoiceableAmount', example='0.01'),
      invoicedAmount?: string(name='InvoicedAmount', example='0'),
      offsetAmount?: string(name='OffsetAmount', example='0'),
      productCode?: string(name='ProductCode', example='pts'),
      productName?: string(name='ProductName'),
      resourceOwnerAccountId?: long(name='ResourceOwnerAccountId', example='1990699401005016'),
      resourceOwnerAccountName?: string(name='ResourceOwnerAccountName'),
      status?: int32(name='Status', example='1'),
      totalAmount?: string(name='TotalAmount', example='0.01'),
      type?: int32(name='Type', example='1'),
    }
  ](name='Data'),
  metadata?: any(name='Metadata', example='{}'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListInvoiceCandidateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInvoiceCandidateResponseBody(name='body'),
}

/**
 * @summary 对客OpenAPI开票对象查询
 *
 * @param tmpReq ListInvoiceCandidateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListInvoiceCandidateResponse
 */
@context("listInvoiceCandidateWithContext")
async function listInvoiceCandidateWithOptions(tmpReq: ListInvoiceCandidateRequest, runtime: $RuntimeOptions): ListInvoiceCandidateResponse {
  tmpReq.validate();
  var request = new ListInvoiceCandidateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.billingCycles)) {
    request.billingCyclesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.billingCycles, 'BillingCycles', 'json');
  }
  if (!$isNull(tmpReq.businessIds)) {
    request.businessIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.businessIds, 'BusinessIds', 'json');
  }
  if (!$isNull(tmpReq.ecIdAccountIds)) {
    request.ecIdAccountIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ecIdAccountIds, 'EcIdAccountIds', 'json');
  }
  if (!$isNull(tmpReq.invoiceIssuers)) {
    request.invoiceIssuersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.invoiceIssuers, 'InvoiceIssuers', 'json');
  }
  if (!$isNull(tmpReq.status)) {
    request.statusShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.status, 'Status', 'json');
  }
  if (!$isNull(tmpReq.types)) {
    request.typesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.types, 'Types', 'json');
  }
  var query = {};
  if (!$isNull(request.billingCyclesShrink)) {
    query['BillingCycles'] = request.billingCyclesShrink;
  }
  if (!$isNull(request.businessIdsShrink)) {
    query['BusinessIds'] = request.businessIdsShrink;
  }
  if (!$isNull(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!$isNull(request.ecIdAccountIdsShrink)) {
    query['EcIdAccountIds'] = request.ecIdAccountIdsShrink;
  }
  if (!$isNull(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!$isNull(request.invoiceIssuersShrink)) {
    query['InvoiceIssuers'] = request.invoiceIssuersShrink;
  }
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!$isNull(request.statusShrink)) {
    query['Status'] = request.statusShrink;
  }
  if (!$isNull(request.typesShrink)) {
    query['Types'] = request.typesShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListInvoiceCandidate',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 对客OpenAPI开票对象查询
 *
 * @param request ListInvoiceCandidateRequest
 * @return ListInvoiceCandidateResponse
 */
async function listInvoiceCandidate(request: ListInvoiceCandidateRequest): ListInvoiceCandidateResponse {
  var runtime = new $RuntimeOptions{};
  return listInvoiceCandidateWithOptions(request, runtime);
}

model ListInvoiceTitleResponseBody = {
  data?: [ 
    {
      accountBankName?: string(name='AccountBankName'),
      accountId?: long(name='AccountId', example='1990699401005016'),
      bankAccountNumber?: string(name='BankAccountNumber', example='1234567890'),
      createTime?: string(name='CreateTime', example='2025-06-01 00:00:00'),
      id?: string(name='Id', example='123456'),
      invoiceTitle?: string(name='InvoiceTitle'),
      registeredAddress?: string(name='RegisteredAddress'),
      registeredLandline?: string(name='RegisteredLandline', example='010-12345678'),
      unifiedSocialCreditCode?: string(name='UnifiedSocialCreditCode', example='111111111111111'),
    }
  ](name='Data'),
  metadata?: any(name='Metadata', example='{}'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
}

model ListInvoiceTitleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInvoiceTitleResponseBody(name='body'),
}

/**
 * @summary 发票抬头查询服务
 *
 * @param request ListInvoiceTitleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListInvoiceTitleResponse
 */
async function listInvoiceTitleWithOptions(runtime: $RuntimeOptions): ListInvoiceTitleResponse {
  var req = new OpenApiUtil.OpenApiRequest{};
  var params = new OpenApiUtil.Params{
    action = 'ListInvoiceTitle',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 发票抬头查询服务
 *
 * @return ListInvoiceTitleResponse
 */
async function listInvoiceTitle(): ListInvoiceTitleResponse {
  var runtime = new $RuntimeOptions{};
  return listInvoiceTitleWithOptions(runtime);
}

model ListReportDefinitionsRequest {
  nbid?: string(name='Nbid', example='2684201000001'),
}

model ListReportDefinitionsResponseBody = {
  metadata?: any(name='Metadata'),
  reportDefinitions?: [ 
    {
      beginBillingCycle?: string(name='BeginBillingCycle', example='2025-05'),
      ossBucketName?: string(name='OssBucketName', example='oss-bill'),
      ossBucketOwnerAccountId?: long(name='OssBucketOwnerAccountId', example='1234567812345678'),
      ossBucketPath?: string(name='OssBucketPath', example='bill/'),
      reportSourceName?: string(name='ReportSourceName', example='OSS'),
      reportSourceType?: string(name='ReportSourceType', example='OSS'),
      reportTaskId?: long(name='ReportTaskId', example='123321'),
      reportType?: string(name='ReportType', example='BillingItemDetailForBillingPeriod'),
      subscribeCreateTime?: string(name='SubscribeCreateTime', example='2025-05-21 10:36:31'),
    }
  ](name='ReportDefinitions'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
}

model ListReportDefinitionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListReportDefinitionsResponseBody(name='body'),
}

/**
 * @summary 查看已订阅的报告列表
 *
 * @param request ListReportDefinitionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListReportDefinitionsResponse
 */
@context("listReportDefinitionsWithContext")
async function listReportDefinitionsWithOptions(request: ListReportDefinitionsRequest, runtime: $RuntimeOptions): ListReportDefinitionsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListReportDefinitions',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看已订阅的报告列表
 *
 * @param request ListReportDefinitionsRequest
 * @return ListReportDefinitionsResponse
 */
async function listReportDefinitions(request: ListReportDefinitionsRequest): ListReportDefinitionsResponse {
  var runtime = new $RuntimeOptions{};
  return listReportDefinitionsWithOptions(request, runtime);
}

model ModifyCostCenterRequest {
  costCenterEntityList?: [ 
    {
      costCenterId?: long(name='CostCenterId', description='This parameter is required.', example='485938'),
      costCenterName?: string(name='CostCenterName', description='This parameter is required.'),
      ownerAccountId?: long(name='OwnerAccountId', description='This parameter is required.', example='1314839403940987'),
    }
  ](name='CostCenterEntityList', description='This parameter is required.'),
  nbid?: string(name='Nbid', example='2684201000001'),
}

model ModifyCostCenterShrinkRequest {
  costCenterEntityListShrink?: string(name='CostCenterEntityList', description='This parameter is required.'),
  nbid?: string(name='Nbid', example='2684201000001'),
}

model ModifyCostCenterResponseBody = {
  costCenterOperateDto?: [ 
    {
      costCenterId?: long(name='CostCenterId', example='485938'),
      isSuccess?: boolean(name='IsSuccess', example='True'),
      ownerAccountId?: long(name='OwnerAccountId', example='1314839403940987'),
    }
  ](name='CostCenterOperateDto'),
  metadata?: any(name='Metadata', example='{}'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
}

model ModifyCostCenterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyCostCenterResponseBody(name='body'),
}

/**
 * @summary 修改财务单元
 *
 * @param tmpReq ModifyCostCenterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyCostCenterResponse
 */
@context("modifyCostCenterWithContext")
async function modifyCostCenterWithOptions(tmpReq: ModifyCostCenterRequest, runtime: $RuntimeOptions): ModifyCostCenterResponse {
  tmpReq.validate();
  var request = new ModifyCostCenterShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.costCenterEntityList)) {
    request.costCenterEntityListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.costCenterEntityList, 'CostCenterEntityList', 'json');
  }
  var query = {};
  if (!$isNull(request.costCenterEntityListShrink)) {
    query['CostCenterEntityList'] = request.costCenterEntityListShrink;
  }
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ModifyCostCenter',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改财务单元
 *
 * @param request ModifyCostCenterRequest
 * @return ModifyCostCenterResponse
 */
async function modifyCostCenter(request: ModifyCostCenterRequest): ModifyCostCenterResponse {
  var runtime = new $RuntimeOptions{};
  return modifyCostCenterWithOptions(request, runtime);
}

model ModifyCostCenterRuleRequest {
  costCenterId?: long(name='CostCenterId', example='485938'),
  filterExpression?: {
    expressionType?: string(name='ExpressionType', example='NARY'),
    filterValues?: {
      code?: string(name='Code', example='TAG-test-xxx-key'),
      codeName?: string(name='CodeName'),
      selectType?: string(name='SelectType', example='IN'),
      values?: [ string ](name='Values'),
    }(name='FilterValues'),
    operand?: any(name='Operand'),
    operands?: [ any ](name='Operands'),
    operatorType?: string(name='OperatorType', example='AND'),
  }(name='FilterExpression'),
  nbid?: string(name='Nbid', example='2684201000001'),
  ownerAccountId?: long(name='OwnerAccountId', example='1234567812345678'),
}

model ModifyCostCenterRuleShrinkRequest {
  costCenterId?: long(name='CostCenterId', example='485938'),
  filterExpressionShrink?: string(name='FilterExpression'),
  nbid?: string(name='Nbid', example='2684201000001'),
  ownerAccountId?: long(name='OwnerAccountId', example='1234567812345678'),
}

model ModifyCostCenterRuleResponseBody = {
  data?: long(name='Data', example='5632'),
  metadata?: any(name='Metadata', example='{}'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
}

model ModifyCostCenterRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyCostCenterRuleResponseBody(name='body'),
}

/**
 * @summary 修改财务单元规则
 *
 * @param tmpReq ModifyCostCenterRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyCostCenterRuleResponse
 */
@context("modifyCostCenterRuleWithContext")
async function modifyCostCenterRuleWithOptions(tmpReq: ModifyCostCenterRuleRequest, runtime: $RuntimeOptions): ModifyCostCenterRuleResponse {
  tmpReq.validate();
  var request = new ModifyCostCenterRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.filterExpression)) {
    request.filterExpressionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filterExpression, 'FilterExpression', 'json');
  }
  var query = {};
  if (!$isNull(request.filterExpressionShrink)) {
    query['FilterExpression'] = request.filterExpressionShrink;
  }
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  var body : map[string]any = {};
  if (!$isNull(request.costCenterId)) {
    body['CostCenterId'] = request.costCenterId;
  }
  if (!$isNull(request.ownerAccountId)) {
    body['OwnerAccountId'] = request.ownerAccountId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ModifyCostCenterRule',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改财务单元规则
 *
 * @param request ModifyCostCenterRuleRequest
 * @return ModifyCostCenterRuleResponse
 */
async function modifyCostCenterRule(request: ModifyCostCenterRuleRequest): ModifyCostCenterRuleResponse {
  var runtime = new $RuntimeOptions{};
  return modifyCostCenterRuleWithOptions(request, runtime);
}

model QueryCostCenterRequest {
  currentPage?: int32(name='CurrentPage', description='This parameter is required.', example='1'),
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds'),
      ecId?: string(name='EcId', description='This parameter is required.', example='1004064243473974'),
    }
  ](name='EcIdAccountIds'),
  nbid?: string(name='Nbid', example='2684201000001'),
  ownerAccountId?: long(name='OwnerAccountId', description='This parameter is required.', example='1314839403940987'),
  pageSize?: int32(name='PageSize', description='This parameter is required.', example='20'),
  parentCostCenterId?: long(name='ParentCostCenterId', description='This parameter is required.', example='-1'),
}

model QueryCostCenterShrinkRequest {
  currentPage?: int32(name='CurrentPage', description='This parameter is required.', example='1'),
  ecIdAccountIdsShrink?: string(name='EcIdAccountIds'),
  nbid?: string(name='Nbid', example='2684201000001'),
  ownerAccountId?: long(name='OwnerAccountId', description='This parameter is required.', example='1314839403940987'),
  pageSize?: int32(name='PageSize', description='This parameter is required.', example='20'),
  parentCostCenterId?: long(name='ParentCostCenterId', description='This parameter is required.', example='-1'),
}

model QueryCostCenterResponseBody = {
  costCenterDtoList?: [ 
    {
      costCenterCode?: string(name='CostCenterCode', example='15945703968#'),
      costCenterId?: long(name='CostCenterId', example='485938'),
      costCenterName?: string(name='CostCenterName'),
      level?: int32(name='Level', example='loose'),
      ownerAccountId?: long(name='OwnerAccountId', example='1314839403940987'),
      parentCostCenterId?: long(name='ParentCostCenterId', example='-1'),
      prevCostCenterId?: long(name='PrevCostCenterId', example='485996'),
    }
  ](name='CostCenterDtoList'),
  currentPage?: int32(name='CurrentPage', example='1'),
  metadata?: any(name='Metadata', example='{}'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', description='Id of the request', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  totalCount?: int32(name='TotalCount', example='30'),
}

model QueryCostCenterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCostCenterResponseBody(name='body'),
}

/**
 * @summary 查询财务单元
 *
 * @param tmpReq QueryCostCenterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryCostCenterResponse
 */
@context("queryCostCenterWithContext")
async function queryCostCenterWithOptions(tmpReq: QueryCostCenterRequest, runtime: $RuntimeOptions): QueryCostCenterResponse {
  tmpReq.validate();
  var request = new QueryCostCenterShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ecIdAccountIds)) {
    request.ecIdAccountIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ecIdAccountIds, 'EcIdAccountIds', 'json');
  }
  var query = {};
  if (!$isNull(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!$isNull(request.ecIdAccountIdsShrink)) {
    query['EcIdAccountIds'] = request.ecIdAccountIdsShrink;
  }
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  if (!$isNull(request.ownerAccountId)) {
    query['OwnerAccountId'] = request.ownerAccountId;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.parentCostCenterId)) {
    query['ParentCostCenterId'] = request.parentCostCenterId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryCostCenter',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询财务单元
 *
 * @param request QueryCostCenterRequest
 * @return QueryCostCenterResponse
 */
async function queryCostCenter(request: QueryCostCenterRequest): QueryCostCenterResponse {
  var runtime = new $RuntimeOptions{};
  return queryCostCenterWithOptions(request, runtime);
}

model QueryCostCenterResourceRequest {
  costCenterId?: long(name='CostCenterId', example='123456'),
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds'),
      ecId?: string(name='EcId', description='This parameter is required.', example='1501603440974415'),
    }
  ](name='EcIdAccountIds'),
  maxResults?: int32(name='MaxResults', example='200'),
  nbid?: string(name='Nbid', example='2684201000001'),
  nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmd'),
  ownerAccountId?: long(name='OwnerAccountId', example='1234567812345678'),
}

model QueryCostCenterResourceResponseBody = {
  costCenterResourceDtoList?: [ 
    {
      apportionItemCode?: string(name='ApportionItemCode', example='test'),
      apportionItemName?: string(name='ApportionItemName', example='test'),
      commodityCode?: string(name='CommodityCode', example='otsbag'),
      commodityName?: string(name='CommodityName'),
      costCenterCode?: string(name='CostCenterCode', example='code'),
      costCenterCreateTime?: string(name='CostCenterCreateTime', example='2025-05-18 12:12:25'),
      costCenterId?: long(name='CostCenterId', example='123456'),
      costCenterName?: string(name='CostCenterName', example='test'),
      costCenterUpdateTime?: string(name='CostCenterUpdateTime', example='2025-05-18 16:12:25'),
      instanceId?: string(name='InstanceId'),
      ownerAccountId?: long(name='OwnerAccountId', example='1234567812345678'),
      ownerAccountName?: string(name='OwnerAccountName'),
      parentCostCenterId?: long(name='ParentCostCenterId', example='123456'),
      pipCode?: string(name='PipCode', example='rds'),
      pipName?: string(name='PipName'),
      resourceGroup?: string(name='ResourceGroup'),
      resourceId?: string(name='ResourceId', example='OSSBAG-cn-v0h1s4hma018'),
      resourceNick?: string(name='ResourceNick', example='testResource'),
      resourceSource?: string(name='ResourceSource', example='MANUAL_ALLOCATE'),
      resourceTag?: string(name='ResourceTag', example='tag'),
      resourceType?: string(name='ResourceType', example='FPT_ossbag_absolute_Storage_bj'),
      resourceUpdateTime?: string(name='ResourceUpdateTime', example='2025-05-18 16:12:25'),
      resourceUserId?: long(name='ResourceUserId', example='1234567812345678'),
      resourceUserName?: string(name='ResourceUserName', example='test@test.aliyun.com'),
      rootCostCenterId?: long(name='RootCostCenterId', example='-1'),
    }
  ](name='CostCenterResourceDtoList'),
  maxResults?: int32(name='MaxResults', example='200'),
  metadata?: any(name='Metadata', example='{}'),
  nextToken?: string(name='NextToken', description='This parameter is required.', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6MTB9'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  totalCount?: int32(name='TotalCount', example='2000'),
}

model QueryCostCenterResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCostCenterResourceResponseBody(name='body'),
}

/**
 * @summary 查询财务单元下资源信息
 *
 * @param request QueryCostCenterResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryCostCenterResourceResponse
 */
@context("queryCostCenterResourceWithContext")
async function queryCostCenterResourceWithOptions(request: QueryCostCenterResourceRequest, runtime: $RuntimeOptions): QueryCostCenterResourceResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ecIdAccountIds)) {
    query['EcIdAccountIds'] = request.ecIdAccountIds;
  }
  if (!$isNull(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  if (!$isNull(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var body : map[string]any = {};
  if (!$isNull(request.costCenterId)) {
    body['CostCenterId'] = request.costCenterId;
  }
  if (!$isNull(request.ownerAccountId)) {
    body['OwnerAccountId'] = request.ownerAccountId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryCostCenterResource',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询财务单元下资源信息
 *
 * @param request QueryCostCenterResourceRequest
 * @return QueryCostCenterResourceResponse
 */
async function queryCostCenterResource(request: QueryCostCenterResourceRequest): QueryCostCenterResourceResponse {
  var runtime = new $RuntimeOptions{};
  return queryCostCenterResourceWithOptions(request, runtime);
}

model QueryCostCenterRuleRequest {
  costCenterId?: long(name='CostCenterId', example='597745'),
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds'),
      ecId?: string(name='EcId', description='This parameter is required.', example='1004064243473974'),
    }
  ](name='EcIdAccountIds'),
  nbid?: string(name='Nbid', example='2684201000001'),
}

model QueryCostCenterRuleResponseBody = {
  costCenterId?: long(name='CostCenterId', example='597745'),
  filterExpression?: {
    expressionType?: string(name='ExpressionType', example='NARY'),
    filterValues?: {
      code?: string(name='Code', example='TAG-test-xxx-key'),
      codeName?: string(name='CodeName'),
      selectType?: string(name='SelectType', example='IN'),
      values?: [ string ](name='Values'),
    }(name='FilterValues'),
    operand?: any(name='Operand'),
    operands?: [ any ](name='Operands'),
    operatorType?: string(name='OperatorType', example='AND'),
  }(name='FilterExpression'),
  gmtCreate?: string(name='GmtCreate', example='Tue Nov 12 14:49:43 CST 2024'),
  gmtModified?: string(name='GmtModified', example='Wed Oct 16 10:15:37 CST 2024'),
  id?: long(name='Id', example='32048'),
  isDeleted?: int32(name='IsDeleted', example='false'),
  metadata?: any(name='Metadata', example='{}'),
  ownerAccountId?: long(name='OwnerAccountId', example='1977800748053695'),
  requestId?: string(name='RequestId', description='Id of the request', example='UUID'),
  rootCostCenterId?: long(name='RootCostCenterId', example='0'),
  status?: string(name='Status', example='on'),
}

model QueryCostCenterRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCostCenterRuleResponseBody(name='body'),
}

/**
 * @summary 查询财务单元规则
 *
 * @param request QueryCostCenterRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryCostCenterRuleResponse
 */
@context("queryCostCenterRuleWithContext")
async function queryCostCenterRuleWithOptions(request: QueryCostCenterRuleRequest, runtime: $RuntimeOptions): QueryCostCenterRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ecIdAccountIds)) {
    query['EcIdAccountIds'] = request.ecIdAccountIds;
  }
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  var body : map[string]any = {};
  if (!$isNull(request.costCenterId)) {
    body['CostCenterId'] = request.costCenterId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryCostCenterRule',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询财务单元规则
 *
 * @param request QueryCostCenterRuleRequest
 * @return QueryCostCenterRuleResponse
 */
async function queryCostCenterRule(request: QueryCostCenterRuleRequest): QueryCostCenterRuleResponse {
  var runtime = new $RuntimeOptions{};
  return queryCostCenterRuleWithOptions(request, runtime);
}

model QueryCostCenterShareRuleRequest {
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds'),
      ecId?: string(name='EcId', description='This parameter is required.', example='1004064243473974'),
    }
  ](name='EcIdAccountIds'),
  maxResults?: int32(name='MaxResults', example='20'),
  nbid?: string(name='Nbid', example='2684201000001'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6nYCisJwqt18pP5E9yb47iu'),
  ownerAccountId?: long(name='OwnerAccountId', example='1529600453335198'),
}

model QueryCostCenterShareRuleResponseBody = {
  data?: [ 
    {
      fromCostCenterShareRuleDetails?: [ 
        {
          costCenterCode?: string(name='CostCenterCode', example='970354711219#'),
          costCenterId?: long(name='CostCenterId', example='637127'),
          costCenterName?: string(name='CostCenterName'),
          gmtCreate?: string(name='GmtCreate', example='2025-07-16 13:49:59'),
          gmtModified?: string(name='GmtModified', example='2025-07-16 13:49:59'),
          ownerAccountId?: long(name='OwnerAccountId', example='1529600453335198'),
          parentCostCenterId?: long(name='ParentCostCenterId', example='637537'),
          prevCostCenterId?: long(name='PrevCostCenterId', example='583059'),
          rootCostCenterId?: long(name='RootCostCenterId', example='583050'),
        }
      ](name='FromCostCenterShareRuleDetails'),
      ownerAccountId?: long(name='OwnerAccountId', example='1529600453335198'),
      shareRuleId?: long(name='ShareRuleId', example='1826'),
      shareRuleName?: string(name='ShareRuleName', example='test'),
      shareRuleType?: string(name='ShareRuleType', example='AVERAGE'),
      toCostCenterShareRuleDetails?: [ 
        {
          costCenterCode?: string(name='CostCenterCode', example='970354711215#'),
          costCenterId?: long(name='CostCenterId', example='637127'),
          costCenterName?: string(name='CostCenterName'),
          gmtCreate?: string(name='GmtCreate', example='2025-07-16 13:49:59'),
          gmtModified?: string(name='GmtModified', example='2025-07-16 13:49:59'),
          ownerAccountId?: long(name='OwnerAccountId', example='1529600453335198'),
          parentCostCenterId?: long(name='ParentCostCenterId', example='637537'),
          prevCostCenterId?: long(name='PrevCostCenterId', example='583055'),
          rootCostCenterId?: long(name='RootCostCenterId', example='583050'),
          shareRatio?: double(name='ShareRatio', example='0.2'),
        }
      ](name='ToCostCenterShareRuleDetails'),
    }
  ](name='Data'),
  maxResults?: int32(name='MaxResults', example='20'),
  metadata?: any(name='Metadata', example='{}'),
  nextToken?: string(name='NextToken', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6NH0='),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model QueryCostCenterShareRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCostCenterShareRuleResponseBody(name='body'),
}

/**
 * @summary 查询财务单元分摊规则
 *
 * @param request QueryCostCenterShareRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryCostCenterShareRuleResponse
 */
@context("queryCostCenterShareRuleWithContext")
async function queryCostCenterShareRuleWithOptions(request: QueryCostCenterShareRuleRequest, runtime: $RuntimeOptions): QueryCostCenterShareRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ecIdAccountIds)) {
    query['EcIdAccountIds'] = request.ecIdAccountIds;
  }
  if (!$isNull(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  if (!$isNull(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.ownerAccountId)) {
    query['OwnerAccountId'] = request.ownerAccountId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryCostCenterShareRule',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询财务单元分摊规则
 *
 * @param request QueryCostCenterShareRuleRequest
 * @return QueryCostCenterShareRuleResponse
 */
async function queryCostCenterShareRule(request: QueryCostCenterShareRuleRequest): QueryCostCenterShareRuleResponse {
  var runtime = new $RuntimeOptions{};
  return queryCostCenterShareRuleWithOptions(request, runtime);
}

model SaveCostCenterShareRuleRequest {
  createShareRuleList?: [ 
    {
      fromCostCenterList?: [ long ](name='FromCostCenterList'),
      shareRatioList?: [ double ](name='ShareRatioList'),
      shareRuleName?: string(name='ShareRuleName', example='test'),
      shareType?: string(name='ShareType', description='This parameter is required.', example='RATIO'),
      toCostCenterList?: [ long ](name='ToCostCenterList'),
    }
  ](name='CreateShareRuleList'),
  modifyShareRuleList?: [ 
    {
      fromCostCenterList?: [ long ](name='FromCostCenterList'),
      shareRatioList?: [ double ](name='ShareRatioList'),
      shareRuleId?: long(name='ShareRuleId', description='This parameter is required.', example='1828'),
      shareRuleName?: string(name='ShareRuleName', example='test'),
      shareType?: string(name='ShareType', description='This parameter is required.', example='CUSTOM'),
      toCostCenterList?: [ long ](name='ToCostCenterList'),
    }
  ](name='ModifyShareRuleList'),
  nbid?: string(name='Nbid', example='2684201000001'),
  ownerAccountId?: long(name='OwnerAccountId', example='1977800748053695'),
  removeShareRuleList?: [ long ](name='RemoveShareRuleList'),
}

model SaveCostCenterShareRuleShrinkRequest {
  createShareRuleListShrink?: string(name='CreateShareRuleList'),
  modifyShareRuleListShrink?: string(name='ModifyShareRuleList'),
  nbid?: string(name='Nbid', example='2684201000001'),
  ownerAccountId?: long(name='OwnerAccountId', example='1977800748053695'),
  removeShareRuleListShrink?: string(name='RemoveShareRuleList'),
}

model SaveCostCenterShareRuleResponseBody = {
  metadata?: any(name='Metadata', example='{}'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', example='true'),
}

model SaveCostCenterShareRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveCostCenterShareRuleResponseBody(name='body'),
}

/**
 * @summary 修改财务单元分摊规则
 *
 * @param tmpReq SaveCostCenterShareRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SaveCostCenterShareRuleResponse
 */
@context("saveCostCenterShareRuleWithContext")
async function saveCostCenterShareRuleWithOptions(tmpReq: SaveCostCenterShareRuleRequest, runtime: $RuntimeOptions): SaveCostCenterShareRuleResponse {
  tmpReq.validate();
  var request = new SaveCostCenterShareRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.createShareRuleList)) {
    request.createShareRuleListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.createShareRuleList, 'CreateShareRuleList', 'json');
  }
  if (!$isNull(tmpReq.modifyShareRuleList)) {
    request.modifyShareRuleListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.modifyShareRuleList, 'ModifyShareRuleList', 'json');
  }
  if (!$isNull(tmpReq.removeShareRuleList)) {
    request.removeShareRuleListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.removeShareRuleList, 'RemoveShareRuleList', 'json');
  }
  var query = {};
  if (!$isNull(request.createShareRuleListShrink)) {
    query['CreateShareRuleList'] = request.createShareRuleListShrink;
  }
  if (!$isNull(request.modifyShareRuleListShrink)) {
    query['ModifyShareRuleList'] = request.modifyShareRuleListShrink;
  }
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  if (!$isNull(request.ownerAccountId)) {
    query['OwnerAccountId'] = request.ownerAccountId;
  }
  if (!$isNull(request.removeShareRuleListShrink)) {
    query['RemoveShareRuleList'] = request.removeShareRuleListShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SaveCostCenterShareRule',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改财务单元分摊规则
 *
 * @param request SaveCostCenterShareRuleRequest
 * @return SaveCostCenterShareRuleResponse
 */
async function saveCostCenterShareRule(request: SaveCostCenterShareRuleRequest): SaveCostCenterShareRuleResponse {
  var runtime = new $RuntimeOptions{};
  return saveCostCenterShareRuleWithOptions(request, runtime);
}

model SetFundAccountCreditAmountRequest {
  creditAmount?: string(name='CreditAmount', description='This parameter is required.', example='500'),
  currency?: string(name='Currency', description='This parameter is required.', example='CNY'),
  fundAccountId?: long(name='FundAccountId', example='1232312'),
}

model SetFundAccountCreditAmountResponseBody = {
  metadata?: any(name='Metadata', example='{}'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
}

model SetFundAccountCreditAmountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetFundAccountCreditAmountResponseBody(name='body'),
}

/**
 * @summary 设置资金账户的信控限额
 *
 * @param request SetFundAccountCreditAmountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetFundAccountCreditAmountResponse
 */
@context("setFundAccountCreditAmountWithContext")
async function setFundAccountCreditAmountWithOptions(request: SetFundAccountCreditAmountRequest, runtime: $RuntimeOptions): SetFundAccountCreditAmountResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.creditAmount)) {
    body['CreditAmount'] = request.creditAmount;
  }
  if (!$isNull(request.currency)) {
    body['Currency'] = request.currency;
  }
  if (!$isNull(request.fundAccountId)) {
    body['FundAccountId'] = request.fundAccountId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'SetFundAccountCreditAmount',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 设置资金账户的信控限额
 *
 * @param request SetFundAccountCreditAmountRequest
 * @return SetFundAccountCreditAmountResponse
 */
async function setFundAccountCreditAmount(request: SetFundAccountCreditAmountRequest): SetFundAccountCreditAmountResponse {
  var runtime = new $RuntimeOptions{};
  return setFundAccountCreditAmountWithOptions(request, runtime);
}

model SetFundAccountLowAvailableAmountAlarmRequest {
  fundAccountId?: long(name='FundAccountId', example='12321213'),
  thresholdAmount?: string(name='ThresholdAmount', example='100'),
}

model SetFundAccountLowAvailableAmountAlarmResponseBody = {
  data?: boolean(name='Data', example='true'),
  metadata?: any(name='Metadata', example='{}'),
  requestId?: string(name='RequestId', example='08108BF5-1AA3-518E-9986-95A3616E8DA9'),
}

model SetFundAccountLowAvailableAmountAlarmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetFundAccountLowAvailableAmountAlarmResponseBody(name='body'),
}

/**
 * @summary 设置资金账户低额预警
 *
 * @param request SetFundAccountLowAvailableAmountAlarmRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetFundAccountLowAvailableAmountAlarmResponse
 */
@context("setFundAccountLowAvailableAmountAlarmWithContext")
async function setFundAccountLowAvailableAmountAlarmWithOptions(request: SetFundAccountLowAvailableAmountAlarmRequest, runtime: $RuntimeOptions): SetFundAccountLowAvailableAmountAlarmResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.fundAccountId)) {
    body['FundAccountId'] = request.fundAccountId;
  }
  if (!$isNull(request.thresholdAmount)) {
    body['ThresholdAmount'] = request.thresholdAmount;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'SetFundAccountLowAvailableAmountAlarm',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 设置资金账户低额预警
 *
 * @param request SetFundAccountLowAvailableAmountAlarmRequest
 * @return SetFundAccountLowAvailableAmountAlarmResponse
 */
async function setFundAccountLowAvailableAmountAlarm(request: SetFundAccountLowAvailableAmountAlarmRequest): SetFundAccountLowAvailableAmountAlarmResponse {
  var runtime = new $RuntimeOptions{};
  return setFundAccountLowAvailableAmountAlarmWithOptions(request, runtime);
}

model SetSavingPlanUserDeductRuleRequest {
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds'),
      ecId?: string(name='EcId'),
    }
  ](name='EcIdAccountIds'),
  nbid?: string(name='Nbid'),
  spnInstanceCode?: string(name='SpnInstanceCode'),
  userDeductRules?: [ 
    {
      commodityCode?: string(name='CommodityCode'),
      moduleCode?: string(name='ModuleCode'),
      skipDeduct?: boolean(name='SkipDeduct'),
    }
  ](name='UserDeductRules'),
}

model SetSavingPlanUserDeductRuleShrinkRequest {
  ecIdAccountIdsShrink?: string(name='EcIdAccountIds'),
  nbid?: string(name='Nbid'),
  spnInstanceCode?: string(name='SpnInstanceCode'),
  userDeductRulesShrink?: string(name='UserDeductRules'),
}

model SetSavingPlanUserDeductRuleResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model SetSavingPlanUserDeductRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetSavingPlanUserDeductRuleResponseBody(name='body'),
}

/**
 * @summary 设置节省计划用户级抵扣规则
 *
 * @param tmpReq SetSavingPlanUserDeductRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetSavingPlanUserDeductRuleResponse
 */
@context("setSavingPlanUserDeductRuleWithContext")
async function setSavingPlanUserDeductRuleWithOptions(tmpReq: SetSavingPlanUserDeductRuleRequest, runtime: $RuntimeOptions): SetSavingPlanUserDeductRuleResponse {
  tmpReq.validate();
  var request = new SetSavingPlanUserDeductRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ecIdAccountIds)) {
    request.ecIdAccountIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ecIdAccountIds, 'EcIdAccountIds', 'json');
  }
  if (!$isNull(tmpReq.userDeductRules)) {
    request.userDeductRulesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userDeductRules, 'UserDeductRules', 'json');
  }
  var query = {};
  if (!$isNull(request.ecIdAccountIdsShrink)) {
    query['EcIdAccountIds'] = request.ecIdAccountIdsShrink;
  }
  if (!$isNull(request.nbid)) {
    query['Nbid'] = request.nbid;
  }
  var body : map[string]any = {};
  if (!$isNull(request.spnInstanceCode)) {
    body['SpnInstanceCode'] = request.spnInstanceCode;
  }
  if (!$isNull(request.userDeductRulesShrink)) {
    body['UserDeductRules'] = request.userDeductRulesShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'SetSavingPlanUserDeductRule',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 设置节省计划用户级抵扣规则
 *
 * @param request SetSavingPlanUserDeductRuleRequest
 * @return SetSavingPlanUserDeductRuleResponse
 */
async function setSavingPlanUserDeductRule(request: SetSavingPlanUserDeductRuleRequest): SetSavingPlanUserDeductRuleResponse {
  var runtime = new $RuntimeOptions{};
  return setSavingPlanUserDeductRuleWithOptions(request, runtime);
}

