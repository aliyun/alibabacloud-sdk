/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'BssOpenApi';
  @version = '2023-09-30';
  @endpointRule = 'regional';
  @endpointMap = {
    'cn-hangzhou' = 'business.aliyuncs.com',
    'cn-shanghai' = 'business.aliyuncs.com',
    'ap-southeast-1' = 'business.ap-southeast-1.aliyuncs.com',
    'ap-northeast-1' = 'business.ap-southeast-1.aliyuncs.com',
    'ap-northeast-2' = 'business.ap-southeast-1.aliyuncs.com',
    'ap-northeast-2-pop' = 'business.ap-southeast-1.aliyuncs.com',
    'ap-south-1' = 'business.ap-southeast-1.aliyuncs.com',
    'ap-southeast-2' = 'business.ap-southeast-1.aliyuncs.com',
    'ap-southeast-3' = 'business.ap-southeast-1.aliyuncs.com',
    'ap-southeast-5' = 'business.ap-southeast-1.aliyuncs.com',
    'cn-beijing' = 'business.aliyuncs.com',
    'cn-beijing-finance-1' = 'business.aliyuncs.com',
    'cn-beijing-finance-pop' = 'business.aliyuncs.com',
    'cn-beijing-gov-1' = 'business.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'business.aliyuncs.com',
    'cn-chengdu' = 'business.aliyuncs.com',
    'cn-edge-1' = 'business.aliyuncs.com',
    'cn-fujian' = 'business.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'business.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'business.aliyuncs.com',
    'cn-hangzhou-finance' = 'business.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'business.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'business.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'business.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'business.aliyuncs.com',
    'cn-hangzhou-test-306' = 'business.aliyuncs.com',
    'cn-hongkong' = 'business.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'business.aliyuncs.com',
    'cn-huhehaote' = 'business.aliyuncs.com',
    'cn-huhehaote-nebula-1' = 'business.aliyuncs.com',
    'cn-north-2-gov-1' = 'business.aliyuncs.com',
    'cn-qingdao' = 'business.aliyuncs.com',
    'cn-qingdao-nebula' = 'business.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'business.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'business.aliyuncs.com',
    'cn-shanghai-finance-1' = 'business.aliyuncs.com',
    'cn-shanghai-inner' = 'business.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'business.aliyuncs.com',
    'cn-shenzhen' = 'business.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'business.aliyuncs.com',
    'cn-shenzhen-inner' = 'business.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'business.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'business.aliyuncs.com',
    'cn-wuhan' = 'business.aliyuncs.com',
    'cn-wulanchabu' = 'business.aliyuncs.com',
    'cn-yushanfang' = 'business.aliyuncs.com',
    'cn-zhangbei' = 'business.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'business.aliyuncs.com',
    'cn-zhangjiakou' = 'business.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'business.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'business.aliyuncs.com',
    'eu-central-1' = 'business.ap-southeast-1.aliyuncs.com',
    'eu-west-1' = 'business.ap-southeast-1.aliyuncs.com',
    'eu-west-1-oxs' = 'business.ap-southeast-1.aliyuncs.com',
    'me-east-1' = 'business.ap-southeast-1.aliyuncs.com',
    'rus-west-1-pop' = 'business.ap-southeast-1.aliyuncs.com',
    'us-east-1' = 'business.ap-southeast-1.aliyuncs.com',
    'us-west-1' = 'business.ap-southeast-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddCouponDeductTagRequest {
  couponId?: string(name='CouponId', position='Query'),
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds'),
      ecId: string(name='EcId', description='This parameter is required.'),
    }
  ](name='EcIdAccountIds', shrink='json', position='Query'),
  nbid?: string(name='Nbid', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', shrink='json', position='Query'),
}

model AddCouponDeductTagResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model AddCouponDeductTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddCouponDeductTagResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddCouponDeductTag  AddCouponDeductTagRequest
  * @return AddCouponDeductTagResponse
 */
async function addCouponDeductTag(request: AddCouponDeductTagRequest): AddCouponDeductTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCouponDeductTag', 'POST', '/', 'json', false, 'json', request);
}

model CancelFundAccountLowAvailableAmountAlarmRequest {
  fundAccountId?: long(name='FundAccountId', example='123321123', position='Body'),
}

model CancelFundAccountLowAvailableAmountAlarmResponseBody = {
  data?: boolean(name='Data', example='true'),
  metadata?: any(name='Metadata', example='{}'),
  requestId?: string(name='RequestId', example='DFC1F7F9-3BA9-BA4D-2F2E653'),
}

model CancelFundAccountLowAvailableAmountAlarmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelFundAccountLowAvailableAmountAlarmResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelFundAccountLowAvailableAmountAlarm  CancelFundAccountLowAvailableAmountAlarmRequest
  * @return CancelFundAccountLowAvailableAmountAlarmResponse
 */
async function cancelFundAccountLowAvailableAmountAlarm(request: CancelFundAccountLowAvailableAmountAlarmRequest): CancelFundAccountLowAvailableAmountAlarmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelFundAccountLowAvailableAmountAlarm', 'POST', '/', 'json', true, 'form', request);
}

model CreateFundAccountTransferRequest {
  amount: string(name='Amount', description='This parameter is required.', example='100', position='Body'),
  currency: string(name='Currency', description='This parameter is required.', example='CNY', position='Body'),
  financeType: string(name='FinanceType', description='This parameter is required.', example='cash', position='Body'),
  fromFundAccountId: long(name='FromFundAccountId', description='This parameter is required.', example='123212323', position='Body'),
  remark: string(name='Remark', description='This parameter is required.', example='转账的备注', position='Body'),
  toFundAccountId: long(name='ToFundAccountId', description='This parameter is required.', example='11112231', position='Body'),
  transferType: string(name='TransferType', description='This parameter is required.', example='grant', position='Body'),
}

model CreateFundAccountTransferResponseBody = {
  metadata?: any(name='Metadata', example='{}'),
  requestId?: string(name='RequestId', example='1BB79-5B23-3EA-BB4F-352F93E'),
}

model CreateFundAccountTransferResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFundAccountTransferResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateFundAccountTransfer  CreateFundAccountTransferRequest
  * @return CreateFundAccountTransferResponse
 */
async function createFundAccountTransfer(request: CreateFundAccountTransferRequest): CreateFundAccountTransferResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFundAccountTransfer', 'POST', '/', 'json', true, 'form', request);
}

model DeleteCouponDeductTagRequest {
  couponId?: string(name='CouponId', position='Query'),
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds'),
      ecId: string(name='EcId', description='This parameter is required.'),
    }
  ](name='EcIdAccountIds', shrink='json', position='Query'),
  nbid?: string(name='Nbid', position='Query'),
  tagKeys?: [ string ](name='TagKeys', shrink='json', position='Query'),
}

model DeleteCouponDeductTagResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model DeleteCouponDeductTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCouponDeductTagResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCouponDeductTag  DeleteCouponDeductTagRequest
  * @return DeleteCouponDeductTagResponse
 */
async function deleteCouponDeductTag(request: DeleteCouponDeductTagRequest): DeleteCouponDeductTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCouponDeductTag', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCouponRequest {
  couponId?: long(name='CouponId', example='351430260343', position='Query'),
  couponNo?: string(name='CouponNo', example='554863270150', position='Query'),
  couponType?: string(name='CouponType', example='CERTAIN', position='Query'),
  currentPage: int32(name='CurrentPage', description='This parameter is required.', example='1', position='Query'),
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds'),
      ecId: string(name='EcId', description='This parameter is required.', example='1501603440974415'),
    }
  ](name='EcIdAccountIds', shrink='json', position='Query'),
  effectiveEndTime?: long(name='EffectiveEndTime', example='1708423156000', position='Query'),
  effectiveStartTime?: long(name='EffectiveStartTime', example='1684750028000', position='Query'),
  expireEndDate?: long(name='ExpireEndDate', example='1708423156000', position='Query'),
  expireStartDate?: long(name='ExpireStartDate', example='1684750028000', position='Query'),
  nbid?: string(name='Nbid', example='2684201000001', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='20', position='Query'),
  status?: string(name='Status', example='AVAILABLE', position='Query'),
}

model DescribeCouponResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  data?: [ 
    {
      amount?: string(name='Amount', example='9929.750000'),
      certainAmount?: string(name='CertainAmount'),
      couponId?: long(name='CouponId', example='59243658'),
      couponNo?: string(name='CouponNo', example='731074910070'),
      couponType?: string(name='CouponType', example='CERTAIN'),
      couponTypeName?: string(name='CouponTypeName'),
      currency?: string(name='Currency', example='CNY'),
      endTime?: string(name='EndTime', example='2021-03-06T15:12Z'),
      gmtCreate?: string(name='GmtCreate', example='2021-03-02T15:12Z'),
      itemNames?: [ string ](name='ItemNames'),
      moneyLimit?: string(name='MoneyLimit'),
      orderTimeRule?: string(name='OrderTimeRule'),
      remainAmount?: string(name='RemainAmount', example='100.00'),
      remark?: string(name='Remark'),
      shareUidList?: [ 
        {
          uid?: string(name='Uid', example='1902671110151254'),
          userNick?: string(name='UserNick'),
        }
      ](name='ShareUidList'),
      showSetDeductTagButton?: boolean(name='ShowSetDeductTagButton', example='true'),
      site?: string(name='Site', example='CHINA'),
      siteName?: string(name='SiteName'),
      startTime?: string(name='StartTime', example='2021-03-02T15:12Z'),
      status?: string(name='Status', example='Available'),
      suitAccount?: string(name='SuitAccount', example='1902671110151254'),
      suitItemType?: string(name='SuitItemType', example='all'),
      universalType?: string(name='UniversalType', example='UNIVERSAL'),
      yhOrderTypes?: [ string ](name='YhOrderTypes'),
    }
  ](name='Data'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='C880B065-A781-4F19-B6DD-3E0E3B715C64'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeCouponResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCouponResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCoupon  DescribeCouponRequest
  * @return DescribeCouponResponse
 */
async function describeCoupon(request: DescribeCouponRequest): DescribeCouponResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCoupon', 'GET', '/', 'json', false, 'json', request);
}

model DescribeCouponItemListRequest {
  couponId?: long(name='CouponId', example='59104570', position='Query'),
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds'),
      ecId: string(name='EcId', description='This parameter is required.', example='1004064243473974'),
    }
  ](name='EcIdAccountIds', shrink='json', position='Query'),
  name?: string(name='Name', position='Query'),
  nbid?: string(name='Nbid', example='2684201000001', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
}

model DescribeCouponItemListResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  data?: [ 
    {
      code?: string(name='Code', example='vm'),
      name?: string(name='Name'),
    }
  ](name='Data'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='EAE08A27-386C-579E-966D-8853EC3C5D0E'),
  totalCount?: int32(name='TotalCount', example='5'),
}

model DescribeCouponItemListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCouponItemListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCouponItemList  DescribeCouponItemListRequest
  * @return DescribeCouponItemListResponse
 */
async function describeCouponItemList(request: DescribeCouponItemListRequest): DescribeCouponItemListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCouponItemList', 'GET', '/', 'json', false, 'json', request);
}

model DescribeUserSpnSummaryInfoRequest {
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds'),
      ecId: string(name='EcId', description='This parameter is required.'),
    }
  ](name='EcIdAccountIds', shrink='json', position='Query'),
  nbid?: string(name='Nbid', position='Query'),
}

model DescribeUserSpnSummaryInfoResponseBody = {
  instanceFamilyList?: [ string ](name='InstanceFamilyList'),
  regionList?: [ 
    {
      regionCode?: string(name='RegionCode'),
      regionName?: string(name='RegionName'),
    }
  ](name='RegionList'),
  requestId?: string(name='RequestId'),
  spnCodeAndTypeList?: [ 
    {
      productCode?: string(name='ProductCode'),
      spnCommodityCode?: string(name='SpnCommodityCode'),
      spnType?: string(name='SpnType'),
      spnTypeName?: string(name='SpnTypeName'),
    }
  ](name='SpnCodeAndTypeList'),
}

model DescribeUserSpnSummaryInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUserSpnSummaryInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeUserSpnSummaryInfo  DescribeUserSpnSummaryInfoRequest
  * @return DescribeUserSpnSummaryInfoResponse
 */
async function describeUserSpnSummaryInfo(request: DescribeUserSpnSummaryInfoRequest): DescribeUserSpnSummaryInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserSpnSummaryInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetFundAccountAvailableAmountRequest {
  fundAccountId?: string(name='FundAccountId', example='12332112', position='Body'),
}

model GetFundAccountAvailableAmountResponseBody = {
  availableAmount?: string(name='AvailableAmount', example='100'),
  availableCreditAmount?: string(name='AvailableCreditAmount', example='50'),
  bankAcceptanceAmount?: string(name='BankAcceptanceAmount', example='0'),
  cashAmount?: string(name='CashAmount', example='50'),
  creditAmount?: string(name='CreditAmount', example='100'),
  creditRefundAmount?: string(name='CreditRefundAmount', example='0'),
  creditUser?: boolean(name='CreditUser'),
  currency?: string(name='Currency', example='CNY'),
  currentMonthUnclearedAmount?: string(name='CurrentMonthUnclearedAmount', example='20'),
  extendLedgerList?: [ 
    {
      currency?: string(name='Currency', example='CNY'),
      ledgerName?: string(name='LedgerName', example='应付对冲账本'),
      originalAmount?: string(name='OriginalAmount', example='50'),
    }
  ](name='ExtendLedgerList'),
  fundAccountId?: string(name='FundAccountId', example='12332112'),
  fundAccountOwnerAccountId?: string(name='FundAccountOwnerAccountId', example='1344312434'),
  fundAccountStatus?: string(name='FundAccountStatus', example='valid'),
  fundAccountType?: string(name='FundAccountType', example='REDIRECT_USER'),
  historyMonthUnclearedAmount?: string(name='HistoryMonthUnclearedAmount', example='30'),
  metadata?: any(name='Metadata', example='{}'),
  negativeBillAmount?: string(name='NegativeBillAmount', example='0'),
  originalCashAmountList?: [ 
    {
      amount?: string(name='Amount', example='10'),
      currency?: string(name='Currency', example='USD'),
    }
  ](name='OriginalCashAmountList'),
  quotaAmount?: string(name='QuotaAmount', example='20'),
  quotaConsumedAmount?: string(name='QuotaConsumedAmount', example='10'),
  requestId?: string(name='RequestId', example='F96A2D13-7509-5DF9-A60E-E7E3A3CB68E8'),
  unclearedAmount?: string(name='UnclearedAmount', example='50'),
}

model GetFundAccountAvailableAmountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFundAccountAvailableAmountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetFundAccountAvailableAmount  GetFundAccountAvailableAmountRequest
  * @return GetFundAccountAvailableAmountResponse
 */
async function getFundAccountAvailableAmount(request: GetFundAccountAvailableAmountRequest): GetFundAccountAvailableAmountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFundAccountAvailableAmount', 'POST', '/', 'json', true, 'form', request);
}

model GetFundAccountCanAllocateCreditAmountRequest {
  fundAccountId?: long(name='FundAccountId', example='1233231', position='Body'),
}

model GetFundAccountCanAllocateCreditAmountResponseBody = {
  ecid?: string(name='Ecid', example='2032123221'),
  ecidAllocatedCreditAmount?: string(name='EcidAllocatedCreditAmount', example='300'),
  ecidCreditAmount?: string(name='EcidCreditAmount', example='1000'),
  fundAccountEcid?: string(name='FundAccountEcid', example='202321232'),
  fundAccountId?: long(name='FundAccountId', example='12332112'),
  fundAccountName?: string(name='FundAccountName', example='云某的名称'),
  fundAccountOwnerAccountId?: long(name='FundAccountOwnerAccountId', example='123433121'),
  maxCanAllocateCreditAmount?: string(name='MaxCanAllocateCreditAmount', example='1500'),
  metadata?: any(name='Metadata', example='{}'),
  minCanAllocateCreditAmount?: string(name='MinCanAllocateCreditAmount', example='200'),
  nbid?: string(name='Nbid', example='2684210001'),
  requestId?: string(name='RequestId', example='CC706AAC-75A6-55B5-9AB7-7D171C6C7655'),
  site?: string(name='Site', example='26842'),
}

model GetFundAccountCanAllocateCreditAmountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFundAccountCanAllocateCreditAmountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetFundAccountCanAllocateCreditAmount  GetFundAccountCanAllocateCreditAmountRequest
  * @return GetFundAccountCanAllocateCreditAmountResponse
 */
async function getFundAccountCanAllocateCreditAmount(request: GetFundAccountCanAllocateCreditAmountRequest): GetFundAccountCanAllocateCreditAmountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFundAccountCanAllocateCreditAmount', 'POST', '/', 'json', true, 'form', request);
}

model GetFundAccountCanRecycleAmountRequest {
  currency: string(name='Currency', description='This parameter is required.', example='CNY', position='Body'),
  recycleFromFundAccountId?: string(name='RecycleFromFundAccountId', example='122321223', position='Body'),
}

model GetFundAccountCanRecycleAmountResponseBody = {
  availableAmount?: string(name='AvailableAmount', example='300'),
  currency?: string(name='Currency', example='CNY'),
  metadata?: any(name='Metadata', example='{}'),
  recycleFromFundAccountId?: string(name='RecycleFromFundAccountId', example='1232122132'),
  recycleToFundAccountList?: [ 
    {
      fundAccountId?: string(name='FundAccountId', example='122323121'),
      fundAccountName?: string(name='FundAccountName', example='云某的账户'),
      fundAccountOwnerAccountId?: string(name='FundAccountOwnerAccountId', example='183221321'),
      maxRecyclableAmount?: string(name='MaxRecyclableAmount', example='120'),
      originalTransferRemainAmount?: string(name='OriginalTransferRemainAmount', example='120'),
    }
  ](name='RecycleToFundAccountList'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  transferAmount?: string(name='TransferAmount', example='200'),
}

model GetFundAccountCanRecycleAmountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFundAccountCanRecycleAmountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetFundAccountCanRecycleAmount  GetFundAccountCanRecycleAmountRequest
  * @return GetFundAccountCanRecycleAmountResponse
 */
async function getFundAccountCanRecycleAmount(request: GetFundAccountCanRecycleAmountRequest): GetFundAccountCanRecycleAmountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFundAccountCanRecycleAmount', 'POST', '/', 'json', true, 'form', request);
}

model GetFundAccountCanTransferAmountRequest {
  currency: string(name='Currency', description='This parameter is required.', example='CNY', position='Body'),
  fundAccountId?: string(name='FundAccountId', example='123212', position='Body'),
}

model GetFundAccountCanTransferAmountResponseBody = {
  availableAmount?: string(name='AvailableAmount', example='100'),
  cashAmount?: string(name='CashAmount', example='500'),
  currency?: string(name='Currency', example='CNY'),
  fundAccountEcid?: string(name='FundAccountEcid', example='2032121324'),
  fundAccountId?: long(name='FundAccountId', example='12332112'),
  fundAccountName?: string(name='FundAccountName', example='云某的账户'),
  fundAccountOwnerAccountId?: long(name='FundAccountOwnerAccountId', example='154738212323'),
  maxTransferableAmount?: string(name='MaxTransferableAmount', example='100'),
  metadata?: any(name='Metadata', example='{}'),
  nbid?: string(name='Nbid', example='2684210001'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  site?: string(name='Site', example='26842'),
  transferAmount?: string(name='TransferAmount', example='100'),
}

model GetFundAccountCanTransferAmountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFundAccountCanTransferAmountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetFundAccountCanTransferAmount  GetFundAccountCanTransferAmountRequest
  * @return GetFundAccountCanTransferAmountResponse
 */
async function getFundAccountCanTransferAmount(request: GetFundAccountCanTransferAmountRequest): GetFundAccountCanTransferAmountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFundAccountCanTransferAmount', 'POST', '/', 'json', true, 'form', request);
}

model GetFundAccountCanWithdrawAmountRequest {
  fundAccountId?: long(name='FundAccountId', example='123212232', position='Body'),
}

model GetFundAccountCanWithdrawAmountResponseBody = {
  canOriginalWithdrawAmount?: string(name='CanOriginalWithdrawAmount', example='400'),
  canWithdrawAmount?: string(name='CanWithdrawAmount', example='500'),
  cannotOriginalWithdrawAmount?: string(name='CannotOriginalWithdrawAmount', example='100'),
  cashAmount?: string(name='CashAmount', example='1000'),
  creditMemoAmount?: string(name='CreditMemoAmount', example='100'),
  currentMonthUnclearedAmount?: string(name='CurrentMonthUnclearedAmount', example='200'),
  historyMonthUnclearedAmount?: string(name='HistoryMonthUnclearedAmount', example='100'),
  metadata?: any(name='Metadata', example='{}'),
  payAsYouGoReversedAmount?: string(name='PayAsYouGoReversedAmount', example='100'),
  requestId?: string(name='RequestId', example='DF58589C-A06C-4224-8615-7797E6474FA3'),
  transferAmount?: string(name='TransferAmount', example='0'),
}

model GetFundAccountCanWithdrawAmountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFundAccountCanWithdrawAmountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetFundAccountCanWithdrawAmount  GetFundAccountCanWithdrawAmountRequest
  * @return GetFundAccountCanWithdrawAmountResponse
 */
async function getFundAccountCanWithdrawAmount(request: GetFundAccountCanWithdrawAmountRequest): GetFundAccountCanWithdrawAmountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFundAccountCanWithdrawAmount', 'POST', '/', 'json', true, 'form', request);
}

model GetFundAccountLowAvailableAmountAlarmRequest {
  fundAccountId?: long(name='FundAccountId', example='12332112', position='Body'),
}

model GetFundAccountLowAvailableAmountAlarmResponseBody = {
  alarmEnabled?: boolean(name='AlarmEnabled'),
  metadata?: any(name='Metadata', example='{}'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  thresholdAmount?: string(name='ThresholdAmount', example='100'),
}

model GetFundAccountLowAvailableAmountAlarmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFundAccountLowAvailableAmountAlarmResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetFundAccountLowAvailableAmountAlarm  GetFundAccountLowAvailableAmountAlarmRequest
  * @return GetFundAccountLowAvailableAmountAlarmResponse
 */
async function getFundAccountLowAvailableAmountAlarm(request: GetFundAccountLowAvailableAmountAlarmRequest): GetFundAccountLowAvailableAmountAlarmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFundAccountLowAvailableAmountAlarm', 'POST', '/', 'json', true, 'form', request);
}

model GetFundAccountTransactionDetailsRequest {
  billNumber?: string(name='BillNumber', example='2023212312321', position='Body'),
  channelTransactionNumber?: string(name='ChannelTransactionNumber', example='20250312334312322', position='Body'),
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  endTime?: long(name='EndTime', example='1735664561000', position='Body'),
  fundAccountId?: long(name='FundAccountId', example='123221232', position='Body'),
  pageSize?: int32(name='PageSize', example='20', maximum=200, position='Query'),
  startTime?: long(name='StartTime', example='1735664461000', position='Body'),
  transactionChannelList?: [ string ](name='TransactionChannelList', shrink='json', position='Body'),
  transactionDirection?: string(name='TransactionDirection', example='IN', position='Body'),
  transactionNumber?: long(name='TransactionNumber', example='543231231', position='Body'),
  transactionType?: string(name='TransactionType', example='CHARGE', position='Body'),
  transactionTypeList?: [ string ](name='TransactionTypeList', shrink='json', position='Body'),
}

model GetFundAccountTransactionDetailsResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  data?: [ 
    {
      balance?: string(name='Balance', example='5'),
      billNumber?: string(name='BillNumber', example='2323203243'),
      channelTransactionNumber?: string(name='ChannelTransactionNumber', example='20244389232'),
      currency?: string(name='Currency', example='USD'),
      fundAccountEcid?: string(name='FundAccountEcid', example='23473943'),
      fundAccountId?: long(name='FundAccountId', example='1232121'),
      fundAccountName?: string(name='FundAccountName', example='云某的名称'),
      fundAccountOwnerAccountId?: long(name='FundAccountOwnerAccountId', example='32343231'),
      fundType?: string(name='FundType', example='ACCT_BOOK'),
      nbid?: string(name='Nbid', example='2684210001'),
      remark?: string(name='Remark', example='订单备注'),
      site?: string(name='Site', example='26842'),
      transactionAccount?: string(name='TransactionAccount', example='186****3975'),
      transactionAmount?: string(name='TransactionAmount', example='10'),
      transactionChannel?: string(name='TransactionChannel', example='ALIPAY'),
      transactionDirection?: string(name='TransactionDirection', example='IN'),
      transactionNumber?: long(name='TransactionNumber', example='5423121'),
      transactionTime?: string(name='TransactionTime', example='2024-12-01 12:00:00'),
      transactionType?: string(name='TransactionType', example='CHARGE'),
    }
  ](name='Data'),
  metadata?: any(name='Metadata', example='{}'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22ECB1F'),
  totalCount?: int32(name='TotalCount', example='30'),
}

model GetFundAccountTransactionDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFundAccountTransactionDetailsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetFundAccountTransactionDetails  GetFundAccountTransactionDetailsRequest
  * @return GetFundAccountTransactionDetailsResponse
 */
async function getFundAccountTransactionDetails(request: GetFundAccountTransactionDetailsRequest): GetFundAccountTransactionDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFundAccountTransactionDetails', 'POST', '/', 'json', true, 'form', request);
}

model GetSavingPlanDeductableCommodityRequest {
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds'),
      ecId: string(name='EcId', description='This parameter is required.'),
    }
  ](name='EcIdAccountIds', shrink='json', position='Query'),
  nbid?: string(name='Nbid', position='Query'),
}

model GetSavingPlanDeductableCommodityResponseBody = {
  data?: [ 
    {
      activityId?: long(name='ActivityId'),
      commodityCode?: string(name='CommodityCode'),
      commodityId?: long(name='CommodityId'),
      commodityName?: string(name='CommodityName'),
      cycleList?: [ 
        {
          code?: string(name='Code'),
          name?: string(name='Name'),
        }
      ](name='CycleList'),
      filterModules?: [ 
        {
          moduleCode?: string(name='ModuleCode'),
          moduleId?: long(name='ModuleId'),
          moduleName?: string(name='ModuleName'),
        }
      ](name='FilterModules'),
      itemCode?: string(name='ItemCode'),
      itemId?: long(name='ItemId'),
      itemName?: string(name='ItemName'),
      moduleMapList?: [ 
        {
          filterModules?: [ 
            {
              moduleCode?: string(name='ModuleCode'),
              moduleId?: long(name='ModuleId'),
              moduleName?: string(name='ModuleName'),
            }
          ](name='FilterModules'),
          moduleCode?: string(name='ModuleCode'),
          moduleId?: long(name='ModuleId'),
          moduleName?: string(name='ModuleName'),
          showModules?: [ 
            {
              moduleCode?: string(name='ModuleCode'),
              moduleId?: long(name='ModuleId'),
              moduleName?: string(name='ModuleName'),
            }
          ](name='ShowModules'),
          spnTypeList?: [ string ](name='SpnTypeList'),
          spnTypeMapList?: [ map[string]DataModuleMapListSpnTypeMapListValue ](name='SpnTypeMapList'),
          spnTypeNameList?: [ 
            {
              code?: string(name='Code'),
              name?: string(name='Name'),
            }
          ](name='SpnTypeNameList'),
        }
      ](name='ModuleMapList'),
      payModeList?: [ 
        {
          code?: string(name='Code'),
          name?: string(name='Name'),
        }
      ](name='PayModeList'),
      pricingModules?: [ 
        {
          moduleCode?: string(name='ModuleCode'),
          moduleId?: long(name='ModuleId'),
          moduleName?: string(name='ModuleName'),
        }
      ](name='PricingModules'),
      spnCommodityCode?: string(name='SpnCommodityCode'),
      spnCommodityName?: string(name='SpnCommodityName'),
      spnDiscountConfigType?: string(name='SpnDiscountConfigType'),
      stepPriceMap?: map[string][ DataStepPriceMapValue       ](name='StepPriceMap'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model GetSavingPlanDeductableCommodityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSavingPlanDeductableCommodityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSavingPlanDeductableCommodity  GetSavingPlanDeductableCommodityRequest
  * @return GetSavingPlanDeductableCommodityResponse
 */
async function getSavingPlanDeductableCommodity(request: GetSavingPlanDeductableCommodityRequest): GetSavingPlanDeductableCommodityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSavingPlanDeductableCommodity', 'POST', '/', 'json', false, 'json', request);
}

model GetSavingPlanShareAccountsRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds'),
      ecId: string(name='EcId', description='This parameter is required.'),
    }
  ](name='EcIdAccountIds', shrink='json', position='Query'),
  nbid?: string(name='Nbid', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  spnInstanceCode?: string(name='SpnInstanceCode', position='Query'),
}

model GetSavingPlanShareAccountsResponseBody = {
  data?: [ 
    {
      accountId?: string(name='AccountId'),
      aliUid?: long(name='AliUid'),
      shareTimeList?: [ 
        {
          shareEndTime?: string(name='ShareEndTime'),
          shareStartTime?: string(name='ShareStartTime'),
        }
      ](name='ShareTimeList'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model GetSavingPlanShareAccountsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSavingPlanShareAccountsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSavingPlanShareAccounts  GetSavingPlanShareAccountsRequest
  * @return GetSavingPlanShareAccountsResponse
 */
async function getSavingPlanShareAccounts(request: GetSavingPlanShareAccountsRequest): GetSavingPlanShareAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSavingPlanShareAccounts', 'POST', '/', 'json', false, 'json', request);
}

model GetSavingPlanUserDeductRuleRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds'),
      ecId: string(name='EcId', description='This parameter is required.'),
    }
  ](name='EcIdAccountIds', shrink='json', position='Query'),
  nbid?: string(name='Nbid', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  spnInstanceCode?: string(name='SpnInstanceCode', position='Query'),
}

model GetSavingPlanUserDeductRuleResponseBody = {
  data?: [ 
    {
      commodityCode?: string(name='CommodityCode'),
      commodityName?: string(name='CommodityName'),
      moduleCode?: string(name='ModuleCode'),
      moduleName?: string(name='ModuleName'),
      skipDeduct?: boolean(name='SkipDeduct'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model GetSavingPlanUserDeductRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSavingPlanUserDeductRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSavingPlanUserDeductRule  GetSavingPlanUserDeductRuleRequest
  * @return GetSavingPlanUserDeductRuleResponse
 */
async function getSavingPlanUserDeductRule(request: GetSavingPlanUserDeductRuleRequest): GetSavingPlanUserDeductRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSavingPlanUserDeductRule', 'POST', '/', 'json', false, 'json', request);
}

model ListCouponDeductTagRequest {
  couponId?: string(name='CouponId', position='Query'),
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds'),
      ecId: string(name='EcId', description='This parameter is required.'),
    }
  ](name='EcIdAccountIds', shrink='json', position='Query'),
  nbid?: string(name='Nbid', position='Query'),
}

model ListCouponDeductTagResponseBody = {
  data?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model ListCouponDeductTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCouponDeductTagResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCouponDeductTag  ListCouponDeductTagRequest
  * @return ListCouponDeductTagResponse
 */
async function listCouponDeductTag(request: ListCouponDeductTagRequest): ListCouponDeductTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCouponDeductTag', 'POST', '/', 'json', false, 'json', request);
}

model ListFundAccountRequest {
  nbid?: string(name='Nbid', example='2084210001', position='Query'),
  queryOnlyInUse?: boolean(name='QueryOnlyInUse', position='Body'),
  queryOnlyManage?: boolean(name='QueryOnlyManage', position='Body'),
}

model ListFundAccountResponseBody = {
  data?: [ 
    {
      createDate?: string(name='CreateDate', example='2024-12-30 12:00:00'),
      fundAccountAdminAccountId?: string(name='FundAccountAdminAccountId', example='1232121'),
      fundAccountAdminAccountName?: string(name='FundAccountAdminAccountName', example='云某的账户'),
      fundAccountId?: string(name='FundAccountId', example='1022231'),
      fundAccountName?: string(name='FundAccountName', example='云某的账户'),
      fundAccountOwnerAccountId?: string(name='FundAccountOwnerAccountId', example='132123211'),
      fundAccountStatus?: string(name='FundAccountStatus', example='VALID'),
      fundAccountType?: string(name='FundAccountType', example='DIRECT_USER'),
      nbid?: string(name='Nbid', example='2684210001'),
      permissions?: [ string ](name='Permissions'),
      site?: string(name='Site', example='26842'),
    }
  ](name='Data'),
  metadata?: any(name='Metadata', example='{}'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
}

model ListFundAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFundAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFundAccount  ListFundAccountRequest
  * @return ListFundAccountResponse
 */
async function listFundAccount(request: ListFundAccountRequest): ListFundAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFundAccount', 'POST', '/', 'json', true, 'form', request);
}

model ListFundAccountPayRelationRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  fundAccountId: string(name='FundAccountId', description='This parameter is required.', example='12323123', position='Body'),
  nbid?: string(name='Nbid', example='2684201000001', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  status?: string(name='Status', example='valid', position='Body'),
}

model ListFundAccountPayRelationResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  data?: [ 
    {
      accountId?: string(name='AccountId', example='32812132121'),
      accountName?: string(name='AccountName', example='云某的名称'),
      ecid?: string(name='Ecid', example='213231232'),
      effectiveTime?: string(name='EffectiveTime', example='2024-12-01 12:00:10'),
      fundAccountId?: string(name='FundAccountId', example='123231213'),
      fundAccountOwnerAccountId?: string(name='FundAccountOwnerAccountId', example='312328912'),
      ineffectiveTime?: string(name='IneffectiveTime', example='2025-01-01 12:12:12'),
      nbid?: string(name='Nbid', example='2684210001'),
      operatorName?: string(name='OperatorName', example='云某的名称'),
      operatorNo?: string(name='OperatorNo', example='1232343423'),
      operatorType?: string(name='OperatorType', example='aliyun_pk'),
      relationType?: string(name='RelationType', example='PAYMENT'),
      site?: string(name='Site', example='26842'),
      status?: string(name='Status', example='valid'),
    }
  ](name='Data'),
  metadata?: any(name='Metadata', example='{}'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  totalCount?: int32(name='TotalCount', example='50'),
}

model ListFundAccountPayRelationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFundAccountPayRelationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFundAccountPayRelation  ListFundAccountPayRelationRequest
  * @return ListFundAccountPayRelationResponse
 */
async function listFundAccountPayRelation(request: ListFundAccountPayRelationRequest): ListFundAccountPayRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFundAccountPayRelation', 'POST', '/', 'json', true, 'form', request);
}

model SetFundAccountCreditAmountRequest {
  creditAmount: string(name='CreditAmount', description='This parameter is required.', example='500', position='Body'),
  currency: string(name='Currency', description='This parameter is required.', example='CNY', position='Body'),
  fundAccountId?: long(name='FundAccountId', example='1232312', position='Body'),
}

model SetFundAccountCreditAmountResponseBody = {
  metadata?: any(name='Metadata', example='{}'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
}

model SetFundAccountCreditAmountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetFundAccountCreditAmountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetFundAccountCreditAmount  SetFundAccountCreditAmountRequest
  * @return SetFundAccountCreditAmountResponse
 */
async function setFundAccountCreditAmount(request: SetFundAccountCreditAmountRequest): SetFundAccountCreditAmountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetFundAccountCreditAmount', 'POST', '/', 'json', true, 'form', request);
}

model SetFundAccountLowAvailableAmountAlarmRequest {
  fundAccountId?: long(name='FundAccountId', example='12321213', position='Body'),
  thresholdAmount?: string(name='ThresholdAmount', example='100', position='Body'),
}

model SetFundAccountLowAvailableAmountAlarmResponseBody = {
  data?: boolean(name='Data', example='true'),
  metadata?: any(name='Metadata', example='{}'),
  requestId?: string(name='RequestId', example='08108BF5-1AA3-518E-9986-95A3616E8DA9'),
}

model SetFundAccountLowAvailableAmountAlarmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetFundAccountLowAvailableAmountAlarmResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetFundAccountLowAvailableAmountAlarm  SetFundAccountLowAvailableAmountAlarmRequest
  * @return SetFundAccountLowAvailableAmountAlarmResponse
 */
async function setFundAccountLowAvailableAmountAlarm(request: SetFundAccountLowAvailableAmountAlarmRequest): SetFundAccountLowAvailableAmountAlarmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetFundAccountLowAvailableAmountAlarm', 'POST', '/', 'json', true, 'form', request);
}

model SetSavingPlanUserDeductRuleRequest {
  ecIdAccountIds?: [ 
    {
      accountIds?: [ long ](name='AccountIds'),
      ecId?: string(name='EcId'),
    }
  ](name='EcIdAccountIds', shrink='json', position='Query'),
  nbid?: string(name='Nbid', position='Query'),
  spnInstanceCode?: string(name='SpnInstanceCode', position='Body'),
  userDeductRules?: [ 
    {
      commodityCode?: string(name='CommodityCode'),
      moduleCode?: string(name='ModuleCode'),
      skipDeduct?: boolean(name='SkipDeduct'),
    }
  ](name='UserDeductRules', shrink='json', position='Body'),
}

model SetSavingPlanUserDeductRuleResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model SetSavingPlanUserDeductRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetSavingPlanUserDeductRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetSavingPlanUserDeductRule  SetSavingPlanUserDeductRuleRequest
  * @return SetSavingPlanUserDeductRuleResponse
 */
async function setSavingPlanUserDeductRule(request: SetSavingPlanUserDeductRuleRequest): SetSavingPlanUserDeductRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetSavingPlanUserDeductRule', 'POST', '/', 'json', true, 'form', request);
}

model DataModuleMapListSpnTypeMapListValue = {
  filterModules?: [ 
    {
      moduleId?: long(name='ModuleId'),
      moduleCode?: string(name='ModuleCode'),
      moduleName?: string(name='ModuleName'),
    }
  ](name='FilterModules'),
  showModules?: [ 
    {
      moduleId?: long(name='ModuleId'),
      moduleCode?: string(name='ModuleCode'),
      moduleName?: string(name='ModuleName'),
    }
  ](name='ShowModules'),
}

model DataStepPriceMapValue = {
  rightClose?: boolean(name='RightClose'),
  min?: string(name='Min'),
  max?: string(name='Max'),
  currency?: string(name='Currency'),
  leftClose?: boolean(name='LeftClose'),
  stepPriceValue?: string(name='StepPriceValue'),
  priceValueType?: string(name='PriceValueType'),
  priceValue?: string(name='PriceValue'),
  deductCycleType?: string(name='DeductCycleType'),
}

