/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou-finance = 'sofa.cn-shanghai.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('sofa', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddMsConfigAttributesRequest {
  attributeName?: string(name='AttributeName'),
  desc?: string(name='Desc'),
  instanceId?: string(name='InstanceId'),
  resourceId?: long(name='ResourceId'),
}

model AddMsConfigAttributesResponseBody = {
  attribute?: {
    attributeName?: string(name='AttributeName'),
    desc?: string(name='Desc'),
    id?: long(name='Id'),
    instanceId?: string(name='InstanceId'),
  }(name='Attribute'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model AddMsConfigAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddMsConfigAttributesResponseBody(name='body'),
}

async function addMsConfigAttributesWithOptions(request: AddMsConfigAttributesRequest, runtime: Util.RuntimeOptions): AddMsConfigAttributesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.attributeName)) {
    body['AttributeName'] = request.attributeName;
  }
  if (!Util.isUnset(request.desc)) {
    body['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.resourceId)) {
    body['ResourceId'] = request.resourceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddMsConfigAttributes',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addMsConfigAttributes(request: AddMsConfigAttributesRequest): AddMsConfigAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return addMsConfigAttributesWithOptions(request, runtime);
}

model AddMsConfigResourcesRequest {
  appName?: string(name='AppName'),
  attributes?: string(name='Attributes'),
  desc?: string(name='Desc'),
  instanceId?: string(name='InstanceId'),
  region?: string(name='Region'),
  resourceId?: string(name='ResourceId'),
}

model AddMsConfigResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  resource?: {
    appName?: string(name='AppName'),
    attributes?: [ 
      {
        attributeName?: string(name='AttributeName'),
        desc?: string(name='Desc'),
        id?: long(name='Id'),
        instanceId?: string(name='InstanceId'),
      }
    ](name='Attributes'),
    desc?: string(name='Desc'),
    id?: long(name='Id'),
    instanceId?: string(name='InstanceId'),
    region?: string(name='Region'),
    resourceId?: string(name='ResourceId'),
  }(name='Resource'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model AddMsConfigResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddMsConfigResourcesResponseBody(name='body'),
}

async function addMsConfigResourcesWithOptions(request: AddMsConfigResourcesRequest, runtime: Util.RuntimeOptions): AddMsConfigResourcesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.attributes)) {
    body['Attributes'] = request.attributes;
  }
  if (!Util.isUnset(request.desc)) {
    body['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  if (!Util.isUnset(request.resourceId)) {
    body['ResourceId'] = request.resourceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddMsConfigResources',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addMsConfigResources(request: AddMsConfigResourcesRequest): AddMsConfigResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return addMsConfigResourcesWithOptions(request, runtime);
}

model CreateMqSofamqGroupRequest {
  groupId?: string(name='GroupId'),
  groupType?: string(name='GroupType'),
  instanceId?: string(name='InstanceId'),
  remark?: string(name='Remark'),
}

model CreateMqSofamqGroupResponseBody = {
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model CreateMqSofamqGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMqSofamqGroupResponseBody(name='body'),
}

async function createMqSofamqGroupWithOptions(request: CreateMqSofamqGroupRequest, runtime: Util.RuntimeOptions): CreateMqSofamqGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupType)) {
    body['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.remark)) {
    body['Remark'] = request.remark;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateMqSofamqGroup',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createMqSofamqGroup(request: CreateMqSofamqGroupRequest): CreateMqSofamqGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMqSofamqGroupWithOptions(request, runtime);
}

model CreateMqSofamqTopicRequest {
  instanceId?: string(name='InstanceId'),
  messageType?: long(name='MessageType'),
  remark?: string(name='Remark'),
  topic?: string(name='Topic'),
}

model CreateMqSofamqTopicResponseBody = {
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model CreateMqSofamqTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMqSofamqTopicResponseBody(name='body'),
}

async function createMqSofamqTopicWithOptions(request: CreateMqSofamqTopicRequest, runtime: Util.RuntimeOptions): CreateMqSofamqTopicResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.messageType)) {
    body['MessageType'] = request.messageType;
  }
  if (!Util.isUnset(request.remark)) {
    body['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.topic)) {
    body['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateMqSofamqTopic',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createMqSofamqTopic(request: CreateMqSofamqTopicRequest): CreateMqSofamqTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMqSofamqTopicWithOptions(request, runtime);
}

model CreateRMSUnifiedAlarmRuleRequest {
  alarmNodata?: long(name='AlarmNodata'),
  category?: string(name='Category'),
  channelsRepeatList?: [ string ](name='ChannelsRepeatList'),
  emergency?: string(name='Emergency'),
  emergencyUrl?: string(name='EmergencyUrl'),
  level?: long(name='Level'),
  name?: string(name='Name'),
  notifyFiring?: long(name='NotifyFiring'),
  notifyNodata?: long(name='NotifyNodata'),
  notifyRecovered?: long(name='NotifyRecovered'),
  notifyTarget?: [ 
    {
      subscriber?: string(name='Subscriber'),
      subscriberName?: string(name='SubscriberName'),
      subscriberSource?: string(name='SubscriberSource'),
      subscriberType?: string(name='SubscriberType'),
      subscriberUuid?: string(name='SubscriberUuid'),
    }
  ](name='NotifyTarget'),
  notifyTimeFilterJsonStr?: string(name='NotifyTimeFilterJsonStr'),
  pendingHit?: long(name='PendingHit'),
  recoveredHit?: long(name='RecoveredHit'),
  ruleConfig?: string(name='RuleConfig'),
  silenceTime?: long(name='SilenceTime'),
  step?: long(name='Step'),
  workspaceName?: string(name='WorkspaceName'),
}

model CreateRMSUnifiedAlarmRuleResponseBody = {
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model CreateRMSUnifiedAlarmRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRMSUnifiedAlarmRuleResponseBody(name='body'),
}

async function createRMSUnifiedAlarmRuleWithOptions(request: CreateRMSUnifiedAlarmRuleRequest, runtime: Util.RuntimeOptions): CreateRMSUnifiedAlarmRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alarmNodata)) {
    body['AlarmNodata'] = request.alarmNodata;
  }
  if (!Util.isUnset(request.category)) {
    body['Category'] = request.category;
  }
  if (!Util.isUnset(request.channelsRepeatList)) {
    body['ChannelsRepeatList'] = request.channelsRepeatList;
  }
  if (!Util.isUnset(request.emergency)) {
    body['Emergency'] = request.emergency;
  }
  if (!Util.isUnset(request.emergencyUrl)) {
    body['EmergencyUrl'] = request.emergencyUrl;
  }
  if (!Util.isUnset(request.level)) {
    body['Level'] = request.level;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.notifyFiring)) {
    body['NotifyFiring'] = request.notifyFiring;
  }
  if (!Util.isUnset(request.notifyNodata)) {
    body['NotifyNodata'] = request.notifyNodata;
  }
  if (!Util.isUnset(request.notifyRecovered)) {
    body['NotifyRecovered'] = request.notifyRecovered;
  }
  if (!Util.isUnset(request.notifyTarget)) {
    body['NotifyTarget'] = request.notifyTarget;
  }
  if (!Util.isUnset(request.notifyTimeFilterJsonStr)) {
    body['NotifyTimeFilterJsonStr'] = request.notifyTimeFilterJsonStr;
  }
  if (!Util.isUnset(request.pendingHit)) {
    body['PendingHit'] = request.pendingHit;
  }
  if (!Util.isUnset(request.recoveredHit)) {
    body['RecoveredHit'] = request.recoveredHit;
  }
  if (!Util.isUnset(request.ruleConfig)) {
    body['RuleConfig'] = request.ruleConfig;
  }
  if (!Util.isUnset(request.silenceTime)) {
    body['SilenceTime'] = request.silenceTime;
  }
  if (!Util.isUnset(request.step)) {
    body['Step'] = request.step;
  }
  if (!Util.isUnset(request.workspaceName)) {
    body['WorkspaceName'] = request.workspaceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateRMSUnifiedAlarmRule',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRMSUnifiedAlarmRule(request: CreateRMSUnifiedAlarmRuleRequest): CreateRMSUnifiedAlarmRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRMSUnifiedAlarmRuleWithOptions(request, runtime);
}

model DeleteMqSofamqGroupRequest {
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
}

model DeleteMqSofamqGroupResponseBody = {
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model DeleteMqSofamqGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMqSofamqGroupResponseBody(name='body'),
}

async function deleteMqSofamqGroupWithOptions(request: DeleteMqSofamqGroupRequest, runtime: Util.RuntimeOptions): DeleteMqSofamqGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMqSofamqGroup',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMqSofamqGroup(request: DeleteMqSofamqGroupRequest): DeleteMqSofamqGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMqSofamqGroupWithOptions(request, runtime);
}

model DeleteMqSofamqTopicRequest {
  instanceId?: string(name='InstanceId'),
  topic?: string(name='Topic'),
}

model DeleteMqSofamqTopicResponseBody = {
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model DeleteMqSofamqTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMqSofamqTopicResponseBody(name='body'),
}

async function deleteMqSofamqTopicWithOptions(request: DeleteMqSofamqTopicRequest, runtime: Util.RuntimeOptions): DeleteMqSofamqTopicResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.topic)) {
    body['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMqSofamqTopic',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMqSofamqTopic(request: DeleteMqSofamqTopicRequest): DeleteMqSofamqTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMqSofamqTopicWithOptions(request, runtime);
}

model DeleteMqSofamqTraceRequest {
  instanceId?: string(name='InstanceId'),
  queryId?: string(name='QueryId'),
}

model DeleteMqSofamqTraceResponseBody = {
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model DeleteMqSofamqTraceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMqSofamqTraceResponseBody(name='body'),
}

async function deleteMqSofamqTraceWithOptions(request: DeleteMqSofamqTraceRequest, runtime: Util.RuntimeOptions): DeleteMqSofamqTraceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.queryId)) {
    body['QueryId'] = request.queryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMqSofamqTrace',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMqSofamqTrace(request: DeleteMqSofamqTraceRequest): DeleteMqSofamqTraceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMqSofamqTraceWithOptions(request, runtime);
}

model DeleteMqSofamqWarnRequest {
  instanceId?: string(name='InstanceId'),
  warnId?: long(name='WarnId'),
}

model DeleteMqSofamqWarnResponseBody = {
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model DeleteMqSofamqWarnResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMqSofamqWarnResponseBody(name='body'),
}

async function deleteMqSofamqWarnWithOptions(request: DeleteMqSofamqWarnRequest, runtime: Util.RuntimeOptions): DeleteMqSofamqWarnResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.warnId)) {
    body['WarnId'] = request.warnId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMqSofamqWarn',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMqSofamqWarn(request: DeleteMqSofamqWarnRequest): DeleteMqSofamqWarnResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMqSofamqWarnWithOptions(request, runtime);
}

model DeleteMsConfigAttributesRequest {
  id?: long(name='Id'),
  instanceId?: string(name='InstanceId'),
}

model DeleteMsConfigAttributesResponseBody = {
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model DeleteMsConfigAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMsConfigAttributesResponseBody(name='body'),
}

async function deleteMsConfigAttributesWithOptions(request: DeleteMsConfigAttributesRequest, runtime: Util.RuntimeOptions): DeleteMsConfigAttributesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMsConfigAttributes',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMsConfigAttributes(request: DeleteMsConfigAttributesRequest): DeleteMsConfigAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMsConfigAttributesWithOptions(request, runtime);
}

model DeleteMsConfigResourcesRequest {
  id?: long(name='Id'),
  instanceId?: string(name='InstanceId'),
}

model DeleteMsConfigResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model DeleteMsConfigResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMsConfigResourcesResponseBody(name='body'),
}

async function deleteMsConfigResourcesWithOptions(request: DeleteMsConfigResourcesRequest, runtime: Util.RuntimeOptions): DeleteMsConfigResourcesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMsConfigResources',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMsConfigResources(request: DeleteMsConfigResourcesRequest): DeleteMsConfigResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMsConfigResourcesWithOptions(request, runtime);
}

model DeleteRMSUnifiedAlarmRuleRequest {
  id?: long(name='Id'),
  workspaceName?: string(name='WorkspaceName'),
}

model DeleteRMSUnifiedAlarmRuleResponseBody = {
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model DeleteRMSUnifiedAlarmRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRMSUnifiedAlarmRuleResponseBody(name='body'),
}

async function deleteRMSUnifiedAlarmRuleWithOptions(request: DeleteRMSUnifiedAlarmRuleRequest, runtime: Util.RuntimeOptions): DeleteRMSUnifiedAlarmRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.workspaceName)) {
    body['WorkspaceName'] = request.workspaceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRMSUnifiedAlarmRule',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRMSUnifiedAlarmRule(request: DeleteRMSUnifiedAlarmRuleRequest): DeleteRMSUnifiedAlarmRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRMSUnifiedAlarmRuleWithOptions(request, runtime);
}

model DescribeCasComputersRequest {
  appServiceIdsRepeatList?: [ string ](name='AppServiceIdsRepeatList'),
  currentPage?: long(name='CurrentPage'),
  name?: string(name='Name'),
  pageSize?: long(name='PageSize'),
  workspace?: string(name='Workspace'),
}

model DescribeCasComputersResponseBody = {
  currentPage?: long(name='CurrentPage'),
  data?: [ 
    {
      appId?: string(name='AppId'),
      appServiceIds?: [ string ](name='AppServiceIds'),
      assignedAppServiceIds?: [ string ](name='AssignedAppServiceIds'),
      autoRenew?: boolean(name='AutoRenew'),
      autoRenewPeriod?: long(name='AutoRenewPeriod'),
      bandwidth?: long(name='Bandwidth'),
      commonImage?: boolean(name='CommonImage'),
      cpu?: long(name='Cpu'),
      cpuShared?: boolean(name='CpuShared'),
      creationTime?: string(name='CreationTime'),
      dataDisks?: [ 
        {
          category?: string(name='Category'),
          computer?: {
            iaasId?: string(name='IaasId'),
            id?: string(name='Id'),
            name?: string(name='Name'),
            status?: string(name='Status'),
          }(name='Computer'),
          deleteAutoSnapshot?: boolean(name='DeleteAutoSnapshot'),
          deleteWithComputer?: boolean(name='DeleteWithComputer'),
          device?: string(name='Device'),
          enableAutoSnapshot?: boolean(name='EnableAutoSnapshot'),
          iaasId?: string(name='IaasId'),
          id?: string(name='Id'),
          imageId?: string(name='ImageId'),
          name?: string(name='Name'),
          portable?: boolean(name='Portable'),
          providerId?: string(name='ProviderId'),
          regionId?: string(name='RegionId'),
          size?: long(name='Size'),
          status?: string(name='Status'),
          tenantId?: string(name='TenantId'),
          type?: string(name='Type'),
          utcCreate?: string(name='UtcCreate'),
          utcModified?: string(name='UtcModified'),
          workspaceId?: string(name='WorkspaceId'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='DataDisks'),
      deployMode?: string(name='DeployMode'),
      description?: string(name='Description'),
      elasticIp?: string(name='ElasticIp'),
      expiredTime?: string(name='ExpiredTime'),
      iaasId?: string(name='IaasId'),
      iaasStatus?: string(name='IaasStatus'),
      iaasType?: string(name='IaasType'),
      id?: string(name='Id'),
      imageIaasId?: string(name='ImageIaasId'),
      imageId?: string(name='ImageId'),
      imageName?: string(name='ImageName'),
      initialized?: boolean(name='Initialized'),
      instanceChargeType?: string(name='InstanceChargeType'),
      ioOptimized?: boolean(name='IoOptimized'),
      lastOpsOrderId?: string(name='LastOpsOrderId'),
      lastOpsType?: string(name='LastOpsType'),
      memory?: long(name='Memory'),
      name?: string(name='Name'),
      networkType?: string(name='NetworkType'),
      options?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Options'),
      os?: string(name='Os'),
      osBit?: long(name='OsBit'),
      osVersion?: string(name='OsVersion'),
      paasStatus?: string(name='PaasStatus'),
      password?: string(name='Password'),
      privateIp?: string(name='PrivateIp'),
      providerId?: string(name='ProviderId'),
      publicIp?: string(name='PublicIp'),
      regionId?: string(name='RegionId'),
      serialNumber?: string(name='SerialNumber'),
      specIaasId?: string(name='SpecIaasId'),
      status?: string(name='Status'),
      systemDisk?: {
        category?: string(name='Category'),
        computer?: {
          iaasId?: string(name='IaasId'),
          id?: string(name='Id'),
          name?: string(name='Name'),
          status?: string(name='Status'),
        }(name='Computer'),
        deleteAutoSnapshot?: boolean(name='DeleteAutoSnapshot'),
        deleteWithComputer?: boolean(name='DeleteWithComputer'),
        device?: string(name='Device'),
        enableAutoSnapshot?: boolean(name='EnableAutoSnapshot'),
        iaasId?: string(name='IaasId'),
        id?: string(name='Id'),
        imageId?: string(name='ImageId'),
        name?: string(name='Name'),
        portable?: boolean(name='Portable'),
        providerId?: string(name='ProviderId'),
        regionId?: string(name='RegionId'),
        size?: long(name='Size'),
        status?: string(name='Status'),
        tenantId?: string(name='TenantId'),
        type?: string(name='Type'),
        utcCreate?: string(name='UtcCreate'),
        utcModified?: string(name='UtcModified'),
        workspaceId?: string(name='WorkspaceId'),
        zoneId?: string(name='ZoneId'),
      }(name='SystemDisk'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
      tenantId?: string(name='TenantId'),
      tenantId2?: string(name='TenantId2'),
      threadsPerCore?: long(name='ThreadsPerCore'),
      utcCreate?: string(name='UtcCreate'),
      utcModified?: string(name='UtcModified'),
      vSwitchIaasId?: string(name='VSwitchIaasId'),
      vpcId?: string(name='VpcId'),
      workspaceId?: string(name='WorkspaceId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Data'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  totalCount?: long(name='TotalCount'),
}

model DescribeCasComputersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCasComputersResponseBody(name='body'),
}

async function describeCasComputersWithOptions(request: DescribeCasComputersRequest, runtime: Util.RuntimeOptions): DescribeCasComputersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appServiceIdsRepeatList)) {
    body['AppServiceIdsRepeatList'] = request.appServiceIdsRepeatList;
  }
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.workspace)) {
    body['Workspace'] = request.workspace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCasComputers',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCasComputers(request: DescribeCasComputersRequest): DescribeCasComputersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCasComputersWithOptions(request, runtime);
}

model DisableMqSofamqWarnRequest {
  instanceId?: string(name='InstanceId'),
  warnId?: long(name='WarnId'),
}

model DisableMqSofamqWarnResponseBody = {
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model DisableMqSofamqWarnResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableMqSofamqWarnResponseBody(name='body'),
}

async function disableMqSofamqWarnWithOptions(request: DisableMqSofamqWarnRequest, runtime: Util.RuntimeOptions): DisableMqSofamqWarnResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.warnId)) {
    body['WarnId'] = request.warnId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DisableMqSofamqWarn',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableMqSofamqWarn(request: DisableMqSofamqWarnRequest): DisableMqSofamqWarnResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableMqSofamqWarnWithOptions(request, runtime);
}

model EnableMqSofamqWarnRequest {
  instanceId?: string(name='InstanceId'),
  warnId?: long(name='WarnId'),
}

model EnableMqSofamqWarnResponseBody = {
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model EnableMqSofamqWarnResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableMqSofamqWarnResponseBody(name='body'),
}

async function enableMqSofamqWarnWithOptions(request: EnableMqSofamqWarnRequest, runtime: Util.RuntimeOptions): EnableMqSofamqWarnResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.warnId)) {
    body['WarnId'] = request.warnId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EnableMqSofamqWarn',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableMqSofamqWarn(request: EnableMqSofamqWarnRequest): EnableMqSofamqWarnResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableMqSofamqWarnWithOptions(request, runtime);
}

model GetMqSofamqConsumerJStackRequest {
  cell?: string(name='Cell'),
  clientId?: string(name='ClientId'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
}

model GetMqSofamqConsumerJStackResponseBody = {
  data?: {
    clientId?: string(name='ClientId'),
    jstack?: [ 
      {
        thread?: string(name='Thread'),
        trackList?: [ string ](name='TrackList'),
      }
    ](name='Jstack'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model GetMqSofamqConsumerJStackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMqSofamqConsumerJStackResponseBody(name='body'),
}

async function getMqSofamqConsumerJStackWithOptions(request: GetMqSofamqConsumerJStackRequest, runtime: Util.RuntimeOptions): GetMqSofamqConsumerJStackResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cell)) {
    body['Cell'] = request.cell;
  }
  if (!Util.isUnset(request.clientId)) {
    body['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMqSofamqConsumerJStack',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMqSofamqConsumerJStack(request: GetMqSofamqConsumerJStackRequest): GetMqSofamqConsumerJStackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMqSofamqConsumerJStackWithOptions(request, runtime);
}

model GetMqSofamqConsumerStatusRequest {
  cell?: string(name='Cell'),
  detail?: boolean(name='Detail'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  needJstack?: boolean(name='NeedJstack'),
}

model GetMqSofamqConsumerStatusResponseBody = {
  data?: {
    connectionSet?: [ 
      {
        clientAddr?: string(name='ClientAddr'),
        clientId?: string(name='ClientId'),
        language?: string(name='Language'),
        remoteIp?: string(name='RemoteIp'),
        version?: string(name='Version'),
      }
    ](name='ConnectionSet'),
    consumeModel?: string(name='ConsumeModel'),
    consumeTps?: string(name='ConsumeTps'),
    consumerConnectionInfoList?: [ 
      {
        clientId?: string(name='ClientId'),
        connection?: string(name='Connection'),
        consumeType?: string(name='ConsumeType'),
        jstack?: [ 
          {
            thread?: string(name='Thread'),
            trackList?: [ string ](name='TrackList'),
          }
        ](name='Jstack'),
        language?: string(name='Language'),
        lastTimestamp?: long(name='LastTimestamp'),
        messageModel?: string(name='MessageModel'),
        runningDataList?: [ 
          {
            diff?: long(name='Diff'),
            failedCountPerHour?: long(name='FailedCountPerHour'),
            failedTps?: string(name='FailedTps'),
            groupId?: string(name='GroupId'),
            okTps?: string(name='OkTps'),
            rt?: string(name='Rt'),
            topic?: string(name='Topic'),
          }
        ](name='RunningDataList'),
        startTimestamp?: long(name='StartTimestamp'),
        subscriptionSet?: [ 
          {
            subString?: string(name='SubString'),
            subVersion?: long(name='SubVersion'),
            tagsSet?: [ string ](name='TagsSet'),
            topic?: string(name='Topic'),
          }
        ](name='SubscriptionSet'),
        threadCount?: long(name='ThreadCount'),
        version?: string(name='Version'),
      }
    ](name='ConsumerConnectionInfoList'),
    delayTime?: long(name='DelayTime'),
    detailInTopicList?: [ 
      {
        delayTime?: long(name='DelayTime'),
        lastTimestamp?: long(name='LastTimestamp'),
        topic?: string(name='Topic'),
        totalDiff?: long(name='TotalDiff'),
      }
    ](name='DetailInTopicList'),
    instanceId?: string(name='InstanceId'),
    lastTimestamp?: long(name='LastTimestamp'),
    online?: boolean(name='Online'),
    rebalanceOk?: boolean(name='RebalanceOk'),
    subscriptionSame?: boolean(name='SubscriptionSame'),
    totalDiff?: long(name='TotalDiff'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model GetMqSofamqConsumerStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMqSofamqConsumerStatusResponseBody(name='body'),
}

async function getMqSofamqConsumerStatusWithOptions(request: GetMqSofamqConsumerStatusRequest, runtime: Util.RuntimeOptions): GetMqSofamqConsumerStatusResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cell)) {
    body['Cell'] = request.cell;
  }
  if (!Util.isUnset(request.detail)) {
    body['Detail'] = request.detail;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.needJstack)) {
    body['NeedJstack'] = request.needJstack;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMqSofamqConsumerStatus',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMqSofamqConsumerStatus(request: GetMqSofamqConsumerStatusRequest): GetMqSofamqConsumerStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMqSofamqConsumerStatusWithOptions(request, runtime);
}

model GetMqSofamqDLQMessageByIdRequest {
  cell?: string(name='Cell'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  msgId?: string(name='MsgId'),
}

model GetMqSofamqDLQMessageByIdResponseBody = {
  data?: {
    body?: string(name='Body'),
    bodyCrc?: long(name='BodyCrc'),
    bornHost?: string(name='BornHost'),
    bornTimestamp?: long(name='BornTimestamp'),
    instanceId?: string(name='InstanceId'),
    msgId?: string(name='MsgId'),
    propertyList?: [ 
      {
        name?: string(name='Name'),
        value?: string(name='Value'),
      }
    ](name='PropertyList'),
    reconsumeTimes?: long(name='ReconsumeTimes'),
    storeHost?: string(name='StoreHost'),
    storeSize?: long(name='StoreSize'),
    storeTimestamp?: long(name='StoreTimestamp'),
    topic?: string(name='Topic'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model GetMqSofamqDLQMessageByIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMqSofamqDLQMessageByIdResponseBody(name='body'),
}

async function getMqSofamqDLQMessageByIdWithOptions(request: GetMqSofamqDLQMessageByIdRequest, runtime: Util.RuntimeOptions): GetMqSofamqDLQMessageByIdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cell)) {
    body['Cell'] = request.cell;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.msgId)) {
    body['MsgId'] = request.msgId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMqSofamqDLQMessageById',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMqSofamqDLQMessageById(request: GetMqSofamqDLQMessageByIdRequest): GetMqSofamqDLQMessageByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMqSofamqDLQMessageByIdWithOptions(request, runtime);
}

model GetMqSofamqMessageByIdRequest {
  cell?: string(name='Cell'),
  instanceId?: string(name='InstanceId'),
  msgId?: string(name='MsgId'),
  topic?: string(name='Topic'),
}

model GetMqSofamqMessageByIdResponseBody = {
  data?: {
    body?: string(name='Body'),
    bodyCrc?: long(name='BodyCrc'),
    bornHost?: string(name='BornHost'),
    bornTimestamp?: long(name='BornTimestamp'),
    instanceId?: string(name='InstanceId'),
    msgId?: string(name='MsgId'),
    propertyList?: [ 
      {
        name?: string(name='Name'),
        value?: string(name='Value'),
      }
    ](name='PropertyList'),
    reconsumeTimes?: long(name='ReconsumeTimes'),
    storeHost?: string(name='StoreHost'),
    storeSize?: long(name='StoreSize'),
    storeTimestamp?: long(name='StoreTimestamp'),
    topic?: string(name='Topic'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model GetMqSofamqMessageByIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMqSofamqMessageByIdResponseBody(name='body'),
}

async function getMqSofamqMessageByIdWithOptions(request: GetMqSofamqMessageByIdRequest, runtime: Util.RuntimeOptions): GetMqSofamqMessageByIdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cell)) {
    body['Cell'] = request.cell;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.msgId)) {
    body['MsgId'] = request.msgId;
  }
  if (!Util.isUnset(request.topic)) {
    body['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMqSofamqMessageById',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMqSofamqMessageById(request: GetMqSofamqMessageByIdRequest): GetMqSofamqMessageByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMqSofamqMessageByIdWithOptions(request, runtime);
}

model GetMqSofamqTraceByMsgIdRequest {
  beginTime?: long(name='BeginTime'),
  cell?: string(name='Cell'),
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  msgId?: string(name='MsgId'),
  topic?: string(name='Topic'),
}

model GetMqSofamqTraceByMsgIdResponseBody = {
  queryId?: string(name='QueryId'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model GetMqSofamqTraceByMsgIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMqSofamqTraceByMsgIdResponseBody(name='body'),
}

async function getMqSofamqTraceByMsgIdWithOptions(request: GetMqSofamqTraceByMsgIdRequest, runtime: Util.RuntimeOptions): GetMqSofamqTraceByMsgIdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.beginTime)) {
    body['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.cell)) {
    body['Cell'] = request.cell;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.msgId)) {
    body['MsgId'] = request.msgId;
  }
  if (!Util.isUnset(request.topic)) {
    body['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMqSofamqTraceByMsgId',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMqSofamqTraceByMsgId(request: GetMqSofamqTraceByMsgIdRequest): GetMqSofamqTraceByMsgIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMqSofamqTraceByMsgIdWithOptions(request, runtime);
}

model GetMqSofamqTraceResultRequest {
  instanceId?: string(name='InstanceId'),
  queryId?: string(name='QueryId'),
}

model GetMqSofamqTraceResultResponseBody = {
  data?: {
    createTime?: long(name='CreateTime'),
    instanceId?: string(name='InstanceId'),
    msgId?: string(name='MsgId'),
    msgKey?: string(name='MsgKey'),
    queryId?: string(name='QueryId'),
    status?: string(name='Status'),
    topic?: string(name='Topic'),
    traceList?: [ 
      {
        bornHost?: string(name='BornHost'),
        cell?: string(name='Cell'),
        costTime?: long(name='CostTime'),
        msgId?: string(name='MsgId'),
        msgKey?: string(name='MsgKey'),
        pubGroupName?: string(name='PubGroupName'),
        pubTime?: long(name='PubTime'),
        status?: string(name='Status'),
        subList?: [ 
          {
            cell?: string(name='Cell'),
            clientList?: [ 
              {
                clientHost?: string(name='ClientHost'),
                costTime?: long(name='CostTime'),
                reconsumeTimes?: long(name='ReconsumeTimes'),
                status?: string(name='Status'),
                subGroupName?: string(name='SubGroupName'),
                subTime?: long(name='SubTime'),
              }
            ](name='ClientList'),
            failCount?: long(name='FailCount'),
            subGroupName?: string(name='SubGroupName'),
            successCount?: long(name='SuccessCount'),
          }
        ](name='SubList'),
        tag?: string(name='Tag'),
        topic?: string(name='Topic'),
      }
    ](name='TraceList'),
    updateTime?: long(name='UpdateTime'),
    userId?: string(name='UserId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model GetMqSofamqTraceResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMqSofamqTraceResultResponseBody(name='body'),
}

async function getMqSofamqTraceResultWithOptions(request: GetMqSofamqTraceResultRequest, runtime: Util.RuntimeOptions): GetMqSofamqTraceResultResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.queryId)) {
    body['QueryId'] = request.queryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMqSofamqTraceResult',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMqSofamqTraceResult(request: GetMqSofamqTraceResultRequest): GetMqSofamqTraceResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMqSofamqTraceResultWithOptions(request, runtime);
}

model GetMsConfigAttributesRequest {
  id?: long(name='Id'),
  instanceId?: string(name='InstanceId'),
}

model GetMsConfigAttributesResponseBody = {
  attribute?: {
    attributeName?: string(name='AttributeName'),
    desc?: string(name='Desc'),
    id?: long(name='Id'),
    instanceId?: string(name='InstanceId'),
  }(name='Attribute'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model GetMsConfigAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMsConfigAttributesResponseBody(name='body'),
}

async function getMsConfigAttributesWithOptions(request: GetMsConfigAttributesRequest, runtime: Util.RuntimeOptions): GetMsConfigAttributesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMsConfigAttributes',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMsConfigAttributes(request: GetMsConfigAttributesRequest): GetMsConfigAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMsConfigAttributesWithOptions(request, runtime);
}

model GetMsConfigResourcesRequest {
  id?: long(name='Id'),
  instanceId?: string(name='InstanceId'),
}

model GetMsConfigResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  resource?: {
    appName?: string(name='AppName'),
    attributes?: [ 
      {
        attributeName?: string(name='AttributeName'),
        desc?: string(name='Desc'),
        id?: long(name='Id'),
        instanceId?: string(name='InstanceId'),
      }
    ](name='Attributes'),
    desc?: string(name='Desc'),
    id?: long(name='Id'),
    instanceId?: string(name='InstanceId'),
    region?: string(name='Region'),
    resourceId?: string(name='ResourceId'),
  }(name='Resource'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model GetMsConfigResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMsConfigResourcesResponseBody(name='body'),
}

async function getMsConfigResourcesWithOptions(request: GetMsConfigResourcesRequest, runtime: Util.RuntimeOptions): GetMsConfigResourcesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMsConfigResources',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMsConfigResources(request: GetMsConfigResourcesRequest): GetMsConfigResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMsConfigResourcesWithOptions(request, runtime);
}

model GrayPushMsConfigDataRequest {
  attributeId?: long(name='AttributeId'),
  data?: string(name='Data'),
  hosts?: string(name='Hosts'),
  instanceId?: string(name='InstanceId'),
  operator?: string(name='Operator'),
}

model GrayPushMsConfigDataResponseBody = {
  pushResult?: [ 
    {
      host?: string(name='Host'),
      success?: boolean(name='Success'),
    }
  ](name='PushResult'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model GrayPushMsConfigDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GrayPushMsConfigDataResponseBody(name='body'),
}

async function grayPushMsConfigDataWithOptions(request: GrayPushMsConfigDataRequest, runtime: Util.RuntimeOptions): GrayPushMsConfigDataResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.attributeId)) {
    body['AttributeId'] = request.attributeId;
  }
  if (!Util.isUnset(request.data)) {
    body['Data'] = request.data;
  }
  if (!Util.isUnset(request.hosts)) {
    body['Hosts'] = request.hosts;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.operator)) {
    body['Operator'] = request.operator;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GrayPushMsConfigData',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function grayPushMsConfigData(request: GrayPushMsConfigDataRequest): GrayPushMsConfigDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return grayPushMsConfigDataWithOptions(request, runtime);
}

model ListMqSofamqGroupRequest {
  groupId?: string(name='GroupId'),
  groupType?: string(name='GroupType'),
  instanceId?: string(name='InstanceId'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
}

model ListMqSofamqGroupResponseBody = {
  data?: {
    content?: [ 
      {
        cluster?: string(name='Cluster'),
        deleteMark?: string(name='DeleteMark'),
        gmtCreate?: long(name='GmtCreate'),
        gmtModified?: long(name='GmtModified'),
        groupId?: string(name='GroupId'),
        groupType?: string(name='GroupType'),
        id?: long(name='Id'),
        instanceId?: string(name='InstanceId'),
        operator?: string(name='Operator'),
        readEnable?: boolean(name='ReadEnable'),
        remark?: string(name='Remark'),
        retryPerm?: long(name='RetryPerm'),
        retryReadQueueNum?: long(name='RetryReadQueueNum'),
        retryWriteQueueNum?: long(name='RetryWriteQueueNum'),
        scope?: string(name='Scope'),
        version?: long(name='Version'),
      }
    ](name='Content'),
    pageNum?: long(name='PageNum'),
    pageSize?: long(name='PageSize'),
    total?: long(name='Total'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model ListMqSofamqGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMqSofamqGroupResponseBody(name='body'),
}

async function listMqSofamqGroupWithOptions(request: ListMqSofamqGroupRequest, runtime: Util.RuntimeOptions): ListMqSofamqGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupType)) {
    body['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNum)) {
    body['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListMqSofamqGroup',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMqSofamqGroup(request: ListMqSofamqGroupRequest): ListMqSofamqGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMqSofamqGroupWithOptions(request, runtime);
}

model ListMqSofamqTopicRequest {
  instanceId?: string(name='InstanceId'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  topic?: string(name='Topic'),
}

model ListMqSofamqTopicResponseBody = {
  data?: {
    content?: [ 
      {
        cluster?: string(name='Cluster'),
        gmtCreate?: long(name='GmtCreate'),
        gmtModified?: long(name='GmtModified'),
        id?: long(name='Id'),
        instanceId?: string(name='InstanceId'),
        messageType?: long(name='MessageType'),
        operator?: string(name='Operator'),
        perm?: long(name='Perm'),
        readQueueNum?: long(name='ReadQueueNum'),
        remark?: string(name='Remark'),
        topic?: string(name='Topic'),
        writeQueueNum?: long(name='WriteQueueNum'),
      }
    ](name='Content'),
    pageNum?: long(name='PageNum'),
    pageSize?: long(name='PageSize'),
    total?: long(name='Total'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model ListMqSofamqTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMqSofamqTopicResponseBody(name='body'),
}

async function listMqSofamqTopicWithOptions(request: ListMqSofamqTopicRequest, runtime: Util.RuntimeOptions): ListMqSofamqTopicResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNum)) {
    body['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.topic)) {
    body['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListMqSofamqTopic',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMqSofamqTopic(request: ListMqSofamqTopicRequest): ListMqSofamqTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMqSofamqTopicWithOptions(request, runtime);
}

model ListMqSofamqTraceRequest {
  instanceId?: string(name='InstanceId'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  queryItem?: string(name='QueryItem'),
}

model ListMqSofamqTraceResponseBody = {
  data?: {
    content?: [ 
      {
        cell?: string(name='Cell'),
        gmtCreate?: long(name='GmtCreate'),
        gmtModified?: long(name='GmtModified'),
        instanceId?: string(name='InstanceId'),
        msgId?: string(name='MsgId'),
        msgKey?: string(name='MsgKey'),
        queryId?: string(name='QueryId'),
        status?: string(name='Status'),
        topic?: string(name='Topic'),
      }
    ](name='Content'),
    pageNum?: long(name='PageNum'),
    pageSize?: long(name='PageSize'),
    total?: long(name='Total'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model ListMqSofamqTraceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMqSofamqTraceResponseBody(name='body'),
}

async function listMqSofamqTraceWithOptions(request: ListMqSofamqTraceRequest, runtime: Util.RuntimeOptions): ListMqSofamqTraceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNum)) {
    body['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryItem)) {
    body['QueryItem'] = request.queryItem;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListMqSofamqTrace',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMqSofamqTrace(request: ListMqSofamqTraceRequest): ListMqSofamqTraceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMqSofamqTraceWithOptions(request, runtime);
}

model ListMqSofamqWarnRequest {
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  topic?: string(name='Topic'),
}

model ListMqSofamqWarnResponseBody = {
  data?: {
    content?: [ 
      {
        alertTime?: string(name='AlertTime'),
        attribute?: string(name='Attribute'),
        blockTime?: long(name='BlockTime'),
        contacts?: string(name='Contacts'),
        delayTime?: long(name='DelayTime'),
        frequency?: long(name='Frequency'),
        gmtCreate?: long(name='GmtCreate'),
        gmtModified?: long(name='GmtModified'),
        groupId?: string(name='GroupId'),
        id?: long(name='Id'),
        instanceId?: string(name='InstanceId'),
        operator?: string(name='Operator'),
        threshold?: long(name='Threshold'),
        topic?: string(name='Topic'),
        warnLevel?: long(name='WarnLevel'),
        warnStatus?: long(name='WarnStatus'),
        warnType?: long(name='WarnType'),
      }
    ](name='Content'),
    pageNum?: long(name='PageNum'),
    pageSize?: long(name='PageSize'),
    total?: long(name='Total'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model ListMqSofamqWarnResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMqSofamqWarnResponseBody(name='body'),
}

async function listMqSofamqWarnWithOptions(request: ListMqSofamqWarnRequest, runtime: Util.RuntimeOptions): ListMqSofamqWarnResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNum)) {
    body['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.topic)) {
    body['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListMqSofamqWarn',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMqSofamqWarn(request: ListMqSofamqWarnRequest): ListMqSofamqWarnResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMqSofamqWarnWithOptions(request, runtime);
}

model ListMqSofamqWarnHistoryRequest {
  cell?: string(name='Cell'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  topic?: string(name='Topic'),
  warnId?: long(name='WarnId'),
}

model ListMqSofamqWarnHistoryResponseBody = {
  data?: {
    content?: [ 
      {
        cell?: string(name='Cell'),
        gmtCreate?: long(name='GmtCreate'),
        gmtModified?: long(name='GmtModified'),
        groupId?: string(name='GroupId'),
        instanceId?: string(name='InstanceId'),
        topic?: string(name='Topic'),
        warnId?: long(name='WarnId'),
        warnInfo?: string(name='WarnInfo'),
      }
    ](name='Content'),
    pageNum?: long(name='PageNum'),
    pageSize?: long(name='PageSize'),
    total?: long(name='Total'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model ListMqSofamqWarnHistoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMqSofamqWarnHistoryResponseBody(name='body'),
}

async function listMqSofamqWarnHistoryWithOptions(request: ListMqSofamqWarnHistoryRequest, runtime: Util.RuntimeOptions): ListMqSofamqWarnHistoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cell)) {
    body['Cell'] = request.cell;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNum)) {
    body['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.topic)) {
    body['Topic'] = request.topic;
  }
  if (!Util.isUnset(request.warnId)) {
    body['WarnId'] = request.warnId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListMqSofamqWarnHistory',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMqSofamqWarnHistory(request: ListMqSofamqWarnHistoryRequest): ListMqSofamqWarnHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMqSofamqWarnHistoryWithOptions(request, runtime);
}

model LogoutMsRegistryServiceRequest {
  instanceId?: string(name='InstanceId'),
  serverIpsRepeatList?: [ string ](name='ServerIpsRepeatList'),
}

model LogoutMsRegistryServiceResponseBody = {
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model LogoutMsRegistryServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LogoutMsRegistryServiceResponseBody(name='body'),
}

async function logoutMsRegistryServiceWithOptions(request: LogoutMsRegistryServiceRequest, runtime: Util.RuntimeOptions): LogoutMsRegistryServiceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.serverIpsRepeatList)) {
    body['ServerIpsRepeatList'] = request.serverIpsRepeatList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'LogoutMsRegistryService',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function logoutMsRegistryService(request: LogoutMsRegistryServiceRequest): LogoutMsRegistryServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return logoutMsRegistryServiceWithOptions(request, runtime);
}

model PushMsConfigDataRequest {
  attributeId?: long(name='AttributeId'),
  cells?: string(name='Cells'),
  data?: string(name='Data'),
  instanceId?: string(name='InstanceId'),
  operator?: string(name='Operator'),
}

model PushMsConfigDataResponseBody = {
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model PushMsConfigDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PushMsConfigDataResponseBody(name='body'),
}

async function pushMsConfigDataWithOptions(request: PushMsConfigDataRequest, runtime: Util.RuntimeOptions): PushMsConfigDataResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.attributeId)) {
    body['AttributeId'] = request.attributeId;
  }
  if (!Util.isUnset(request.cells)) {
    body['Cells'] = request.cells;
  }
  if (!Util.isUnset(request.data)) {
    body['Data'] = request.data;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.operator)) {
    body['Operator'] = request.operator;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PushMsConfigData',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pushMsConfigData(request: PushMsConfigDataRequest): PushMsConfigDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushMsConfigDataWithOptions(request, runtime);
}

model QueryMqSofamqConsumerAccumulateRequest {
  cell?: string(name='Cell'),
  detail?: boolean(name='Detail'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
}

model QueryMqSofamqConsumerAccumulateResponseBody = {
  data?: {
    consumeTps?: string(name='ConsumeTps'),
    delayTime?: long(name='DelayTime'),
    detailInTopicList?: [ 
      {
        delayTime?: long(name='DelayTime'),
        lastTimestamp?: long(name='LastTimestamp'),
        topic?: string(name='Topic'),
        totalDiff?: long(name='TotalDiff'),
      }
    ](name='DetailInTopicList'),
    lastTimestamp?: long(name='LastTimestamp'),
    online?: boolean(name='Online'),
    totalDiff?: long(name='TotalDiff'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model QueryMqSofamqConsumerAccumulateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMqSofamqConsumerAccumulateResponseBody(name='body'),
}

async function queryMqSofamqConsumerAccumulateWithOptions(request: QueryMqSofamqConsumerAccumulateRequest, runtime: Util.RuntimeOptions): QueryMqSofamqConsumerAccumulateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cell)) {
    body['Cell'] = request.cell;
  }
  if (!Util.isUnset(request.detail)) {
    body['Detail'] = request.detail;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMqSofamqConsumerAccumulate',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMqSofamqConsumerAccumulate(request: QueryMqSofamqConsumerAccumulateRequest): QueryMqSofamqConsumerAccumulateResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMqSofamqConsumerAccumulateWithOptions(request, runtime);
}

model QueryMqSofamqConsumerConnectionRequest {
  cell?: string(name='Cell'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
}

model QueryMqSofamqConsumerConnectionResponseBody = {
  data?: {
    connectionList?: [ 
      {
        clientAddr?: string(name='ClientAddr'),
        clientId?: string(name='ClientId'),
        language?: string(name='Language'),
        remoteIp?: string(name='RemoteIp'),
        version?: string(name='Version'),
      }
    ](name='ConnectionList'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model QueryMqSofamqConsumerConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMqSofamqConsumerConnectionResponseBody(name='body'),
}

async function queryMqSofamqConsumerConnectionWithOptions(request: QueryMqSofamqConsumerConnectionRequest, runtime: Util.RuntimeOptions): QueryMqSofamqConsumerConnectionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cell)) {
    body['Cell'] = request.cell;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMqSofamqConsumerConnection',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMqSofamqConsumerConnection(request: QueryMqSofamqConsumerConnectionRequest): QueryMqSofamqConsumerConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMqSofamqConsumerConnectionWithOptions(request, runtime);
}

model QueryMqSofamqConsumerTimespanRequest {
  cell?: string(name='Cell'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  topic?: string(name='Topic'),
}

model QueryMqSofamqConsumerTimespanResponseBody = {
  data?: {
    consumeTimestamp?: long(name='ConsumeTimestamp'),
    instanceId?: string(name='InstanceId'),
    maxTimestamp?: long(name='MaxTimestamp'),
    minTimestamp?: long(name='MinTimestamp'),
    topic?: string(name='Topic'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model QueryMqSofamqConsumerTimespanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMqSofamqConsumerTimespanResponseBody(name='body'),
}

async function queryMqSofamqConsumerTimespanWithOptions(request: QueryMqSofamqConsumerTimespanRequest, runtime: Util.RuntimeOptions): QueryMqSofamqConsumerTimespanResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cell)) {
    body['Cell'] = request.cell;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.topic)) {
    body['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMqSofamqConsumerTimespan',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMqSofamqConsumerTimespan(request: QueryMqSofamqConsumerTimespanRequest): QueryMqSofamqConsumerTimespanResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMqSofamqConsumerTimespanWithOptions(request, runtime);
}

model QueryMqSofamqDLQMessageByGroupIdRequest {
  beginTime?: long(name='BeginTime'),
  cell?: string(name='Cell'),
  endTime?: long(name='EndTime'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  taskId?: string(name='TaskId'),
}

model QueryMqSofamqDLQMessageByGroupIdResponseBody = {
  data?: {
    content?: [ 
      {
        body?: string(name='Body'),
        bodyCrc?: long(name='BodyCrc'),
        bornHost?: string(name='BornHost'),
        bornTimestamp?: long(name='BornTimestamp'),
        instanceId?: string(name='InstanceId'),
        msgId?: string(name='MsgId'),
        propertyList?: [ 
          {
            name?: string(name='Name'),
            value?: string(name='Value'),
          }
        ](name='PropertyList'),
        reconsumeTimes?: long(name='ReconsumeTimes'),
        storeHost?: string(name='StoreHost'),
        storeSize?: long(name='StoreSize'),
        storeTimestamp?: long(name='StoreTimestamp'),
        topic?: string(name='Topic'),
      }
    ](name='Content'),
    pageNum?: long(name='PageNum'),
    pageSize?: long(name='PageSize'),
    taskId?: string(name='TaskId'),
    total?: long(name='Total'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model QueryMqSofamqDLQMessageByGroupIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMqSofamqDLQMessageByGroupIdResponseBody(name='body'),
}

async function queryMqSofamqDLQMessageByGroupIdWithOptions(request: QueryMqSofamqDLQMessageByGroupIdRequest, runtime: Util.RuntimeOptions): QueryMqSofamqDLQMessageByGroupIdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.beginTime)) {
    body['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.cell)) {
    body['Cell'] = request.cell;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNum)) {
    body['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMqSofamqDLQMessageByGroupId',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMqSofamqDLQMessageByGroupId(request: QueryMqSofamqDLQMessageByGroupIdRequest): QueryMqSofamqDLQMessageByGroupIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMqSofamqDLQMessageByGroupIdWithOptions(request, runtime);
}

model QueryMqSofamqGroupSubDetailRequest {
  cell?: string(name='Cell'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
}

model QueryMqSofamqGroupSubDetailResponseBody = {
  data?: {
    groupId?: string(name='GroupId'),
    messageModel?: string(name='MessageModel'),
    online?: boolean(name='Online'),
    subscriptionDataList?: [ 
      {
        online?: boolean(name='Online'),
        subString?: string(name='SubString'),
        topic?: string(name='Topic'),
      }
    ](name='SubscriptionDataList'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model QueryMqSofamqGroupSubDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMqSofamqGroupSubDetailResponseBody(name='body'),
}

async function queryMqSofamqGroupSubDetailWithOptions(request: QueryMqSofamqGroupSubDetailRequest, runtime: Util.RuntimeOptions): QueryMqSofamqGroupSubDetailResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cell)) {
    body['Cell'] = request.cell;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMqSofamqGroupSubDetail',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMqSofamqGroupSubDetail(request: QueryMqSofamqGroupSubDetailRequest): QueryMqSofamqGroupSubDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMqSofamqGroupSubDetailWithOptions(request, runtime);
}

model QueryMqSofamqMessageByKeyRequest {
  cell?: string(name='Cell'),
  instanceId?: string(name='InstanceId'),
  key?: string(name='Key'),
  topic?: string(name='Topic'),
}

model QueryMqSofamqMessageByKeyResponseBody = {
  data?: [ 
    {
      body?: string(name='Body'),
      bodyCrc?: long(name='BodyCrc'),
      bornHost?: string(name='BornHost'),
      bornTimestamp?: long(name='BornTimestamp'),
      instanceId?: string(name='InstanceId'),
      msgId?: string(name='MsgId'),
      propertyList?: [ 
        {
          name?: string(name='Name'),
          value?: string(name='Value'),
        }
      ](name='PropertyList'),
      reconsumeTimes?: long(name='ReconsumeTimes'),
      storeHost?: string(name='StoreHost'),
      storeSize?: long(name='StoreSize'),
      storeTimestamp?: long(name='StoreTimestamp'),
      topic?: string(name='Topic'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model QueryMqSofamqMessageByKeyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMqSofamqMessageByKeyResponseBody(name='body'),
}

async function queryMqSofamqMessageByKeyWithOptions(request: QueryMqSofamqMessageByKeyRequest, runtime: Util.RuntimeOptions): QueryMqSofamqMessageByKeyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cell)) {
    body['Cell'] = request.cell;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.key)) {
    body['Key'] = request.key;
  }
  if (!Util.isUnset(request.topic)) {
    body['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMqSofamqMessageByKey',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMqSofamqMessageByKey(request: QueryMqSofamqMessageByKeyRequest): QueryMqSofamqMessageByKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMqSofamqMessageByKeyWithOptions(request, runtime);
}

model QueryMqSofamqMessageByTopicRequest {
  beginTime?: long(name='BeginTime'),
  cell?: string(name='Cell'),
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  taskId?: string(name='TaskId'),
  topic?: string(name='Topic'),
}

model QueryMqSofamqMessageByTopicResponseBody = {
  data?: {
    content?: [ 
      {
        body?: string(name='Body'),
        bodyCrc?: long(name='BodyCrc'),
        bornHost?: string(name='BornHost'),
        bornTimestamp?: long(name='BornTimestamp'),
        instanceId?: string(name='InstanceId'),
        msgId?: string(name='MsgId'),
        propertyList?: [ 
          {
            name?: string(name='Name'),
            value?: string(name='Value'),
          }
        ](name='PropertyList'),
        reconsumeTimes?: long(name='ReconsumeTimes'),
        storeHost?: string(name='StoreHost'),
        storeSize?: long(name='StoreSize'),
        storeTimestamp?: long(name='StoreTimestamp'),
        topic?: string(name='Topic'),
      }
    ](name='Content'),
    pageNum?: long(name='PageNum'),
    pageSize?: long(name='PageSize'),
    taskId?: string(name='TaskId'),
    total?: long(name='Total'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model QueryMqSofamqMessageByTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMqSofamqMessageByTopicResponseBody(name='body'),
}

async function queryMqSofamqMessageByTopicWithOptions(request: QueryMqSofamqMessageByTopicRequest, runtime: Util.RuntimeOptions): QueryMqSofamqMessageByTopicResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.beginTime)) {
    body['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.cell)) {
    body['Cell'] = request.cell;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNum)) {
    body['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.topic)) {
    body['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMqSofamqMessageByTopic',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMqSofamqMessageByTopic(request: QueryMqSofamqMessageByTopicRequest): QueryMqSofamqMessageByTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMqSofamqMessageByTopicWithOptions(request, runtime);
}

model QueryMqSofamqTraceByMsgKeyRequest {
  beginTime?: long(name='BeginTime'),
  cell?: string(name='Cell'),
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  msgKey?: string(name='MsgKey'),
  topic?: string(name='Topic'),
}

model QueryMqSofamqTraceByMsgKeyResponseBody = {
  queryId?: string(name='QueryId'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model QueryMqSofamqTraceByMsgKeyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMqSofamqTraceByMsgKeyResponseBody(name='body'),
}

async function queryMqSofamqTraceByMsgKeyWithOptions(request: QueryMqSofamqTraceByMsgKeyRequest, runtime: Util.RuntimeOptions): QueryMqSofamqTraceByMsgKeyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.beginTime)) {
    body['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.cell)) {
    body['Cell'] = request.cell;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.msgKey)) {
    body['MsgKey'] = request.msgKey;
  }
  if (!Util.isUnset(request.topic)) {
    body['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMqSofamqTraceByMsgKey',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMqSofamqTraceByMsgKey(request: QueryMqSofamqTraceByMsgKeyRequest): QueryMqSofamqTraceByMsgKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMqSofamqTraceByMsgKeyWithOptions(request, runtime);
}

model QueryMqSofamqTraceByTopicRequest {
  beginTime?: long(name='BeginTime'),
  cell?: string(name='Cell'),
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  topic?: string(name='Topic'),
}

model QueryMqSofamqTraceByTopicResponseBody = {
  queryId?: string(name='QueryId'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model QueryMqSofamqTraceByTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMqSofamqTraceByTopicResponseBody(name='body'),
}

async function queryMqSofamqTraceByTopicWithOptions(request: QueryMqSofamqTraceByTopicRequest, runtime: Util.RuntimeOptions): QueryMqSofamqTraceByTopicResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.beginTime)) {
    body['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.cell)) {
    body['Cell'] = request.cell;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.topic)) {
    body['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMqSofamqTraceByTopic',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMqSofamqTraceByTopic(request: QueryMqSofamqTraceByTopicRequest): QueryMqSofamqTraceByTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMqSofamqTraceByTopicWithOptions(request, runtime);
}

model QueryMsConfigAttributesRequest {
  appName?: string(name='AppName'),
  attributeName?: string(name='AttributeName'),
  instanceId?: string(name='InstanceId'),
  region?: string(name='Region'),
  resourceId?: string(name='ResourceId'),
}

model QueryMsConfigAttributesResponseBody = {
  attribute?: {
    attributeName?: string(name='AttributeName'),
    desc?: string(name='Desc'),
    id?: long(name='Id'),
    instanceId?: string(name='InstanceId'),
  }(name='Attribute'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model QueryMsConfigAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMsConfigAttributesResponseBody(name='body'),
}

async function queryMsConfigAttributesWithOptions(request: QueryMsConfigAttributesRequest, runtime: Util.RuntimeOptions): QueryMsConfigAttributesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.attributeName)) {
    body['AttributeName'] = request.attributeName;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  if (!Util.isUnset(request.resourceId)) {
    body['ResourceId'] = request.resourceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMsConfigAttributes',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMsConfigAttributes(request: QueryMsConfigAttributesRequest): QueryMsConfigAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMsConfigAttributesWithOptions(request, runtime);
}

model QueryMsConfigClientValuesRequest {
  attributeId?: long(name='AttributeId'),
  instanceId?: string(name='InstanceId'),
  ips?: string(name='Ips'),
}

model QueryMsConfigClientValuesResponseBody = {
  clients?: [ 
    {
      data?: string(name='Data'),
      ip?: string(name='Ip'),
      success?: boolean(name='Success'),
    }
  ](name='Clients'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model QueryMsConfigClientValuesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMsConfigClientValuesResponseBody(name='body'),
}

async function queryMsConfigClientValuesWithOptions(request: QueryMsConfigClientValuesRequest, runtime: Util.RuntimeOptions): QueryMsConfigClientValuesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.attributeId)) {
    body['AttributeId'] = request.attributeId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ips)) {
    body['Ips'] = request.ips;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMsConfigClientValues',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMsConfigClientValues(request: QueryMsConfigClientValuesRequest): QueryMsConfigClientValuesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMsConfigClientValuesWithOptions(request, runtime);
}

model QueryMsConfigClientsRequest {
  attributeId?: long(name='AttributeId'),
  instanceId?: string(name='InstanceId'),
  pageNum?: long(name='PageNum'),
  pageSize?: string(name='PageSize'),
}

model QueryMsConfigClientsResponseBody = {
  clients?: [ 
    {
      cell?: string(name='Cell'),
      data?: string(name='Data'),
      ip?: string(name='Ip'),
      pushData?: string(name='PushData'),
    }
  ](name='Clients'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  totalCount?: long(name='TotalCount'),
}

model QueryMsConfigClientsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMsConfigClientsResponseBody(name='body'),
}

async function queryMsConfigClientsWithOptions(request: QueryMsConfigClientsRequest, runtime: Util.RuntimeOptions): QueryMsConfigClientsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.attributeId)) {
    body['AttributeId'] = request.attributeId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNum)) {
    body['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMsConfigClients',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMsConfigClients(request: QueryMsConfigClientsRequest): QueryMsConfigClientsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMsConfigClientsWithOptions(request, runtime);
}

model QueryMsConfigDataRequest {
  attributeId?: long(name='AttributeId'),
  instanceId?: string(name='InstanceId'),
}

model QueryMsConfigDataResponseBody = {
  queryResult?: [ 
    {
      cell?: string(name='Cell'),
      data?: string(name='Data'),
    }
  ](name='QueryResult'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model QueryMsConfigDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMsConfigDataResponseBody(name='body'),
}

async function queryMsConfigDataWithOptions(request: QueryMsConfigDataRequest, runtime: Util.RuntimeOptions): QueryMsConfigDataResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.attributeId)) {
    body['AttributeId'] = request.attributeId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMsConfigData',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMsConfigData(request: QueryMsConfigDataRequest): QueryMsConfigDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMsConfigDataWithOptions(request, runtime);
}

model QueryMsConfigResourcesRequest {
  appName?: string(name='AppName'),
  instanceId?: string(name='InstanceId'),
  keyword?: string(name='Keyword'),
  pageNum?: long(name='PageNum'),
  pageSize?: string(name='PageSize'),
}

model QueryMsConfigResourcesResponseBody = {
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  resources?: [ 
    {
      appName?: string(name='AppName'),
      attributes?: [ 
        {
          attributeName?: string(name='AttributeName'),
          desc?: string(name='Desc'),
          id?: long(name='Id'),
          instanceId?: string(name='InstanceId'),
        }
      ](name='Attributes'),
      desc?: string(name='Desc'),
      id?: long(name='Id'),
      instanceId?: string(name='InstanceId'),
      region?: string(name='Region'),
      resourceId?: string(name='ResourceId'),
    }
  ](name='Resources'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  totalCount?: long(name='TotalCount'),
}

model QueryMsConfigResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMsConfigResourcesResponseBody(name='body'),
}

async function queryMsConfigResourcesWithOptions(request: QueryMsConfigResourcesRequest, runtime: Util.RuntimeOptions): QueryMsConfigResourcesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageNum)) {
    body['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMsConfigResources',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMsConfigResources(request: QueryMsConfigResourcesRequest): QueryMsConfigResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMsConfigResourcesWithOptions(request, runtime);
}

model QueryRMSMetricsRequest {
  contentType?: string(name='ContentType'),
  dsId?: string(name='DsId'),
  end?: long(name='End'),
  fieldsRepeatList?: [ string ](name='FieldsRepeatList'),
  periodType?: string(name='PeriodType'),
  plugin?: string(name='Plugin'),
  start?: long(name='Start'),
  where?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Where'),
  workspaceName?: string(name='WorkspaceName'),
}

model QueryRMSMetricsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model QueryRMSMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRMSMetricsResponseBody(name='body'),
}

async function queryRMSMetricsWithOptions(request: QueryRMSMetricsRequest, runtime: Util.RuntimeOptions): QueryRMSMetricsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.contentType)) {
    body['ContentType'] = request.contentType;
  }
  if (!Util.isUnset(request.dsId)) {
    body['DsId'] = request.dsId;
  }
  if (!Util.isUnset(request.end)) {
    body['End'] = request.end;
  }
  if (!Util.isUnset(request.fieldsRepeatList)) {
    body['FieldsRepeatList'] = request.fieldsRepeatList;
  }
  if (!Util.isUnset(request.periodType)) {
    body['PeriodType'] = request.periodType;
  }
  if (!Util.isUnset(request.plugin)) {
    body['Plugin'] = request.plugin;
  }
  if (!Util.isUnset(request.start)) {
    body['Start'] = request.start;
  }
  if (!Util.isUnset(request.where)) {
    body['Where'] = request.where;
  }
  if (!Util.isUnset(request.workspaceName)) {
    body['WorkspaceName'] = request.workspaceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryRMSMetrics',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRMSMetrics(request: QueryRMSMetricsRequest): QueryRMSMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRMSMetricsWithOptions(request, runtime);
}

model QueryRMSUnifiedAlarmEventRequest {
  alarmLevel?: long(name='AlarmLevel'),
  alarmRuleId?: long(name='AlarmRuleId'),
  alarmRuleUuid?: string(name='AlarmRuleUuid'),
  alarmStackInfoJsonStr?: string(name='AlarmStackInfoJsonStr'),
  alarmStatusRepeatList?: [ long ](name='AlarmStatusRepeatList'),
  alarmTargetKeyword?: string(name='AlarmTargetKeyword'),
  alarmTargetType?: string(name='AlarmTargetType'),
  currentPage?: long(name='CurrentPage'),
  endTime?: long(name='EndTime'),
  keyword?: string(name='Keyword'),
  pageSize?: long(name='PageSize'),
  startTime?: long(name='StartTime'),
  status?: long(name='Status'),
  workspaceName?: string(name='WorkspaceName'),
}

model QueryRMSUnifiedAlarmEventResponseBody = {
  currentPage?: long(name='CurrentPage'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  totalCount?: long(name='TotalCount'),
  unifiedAlarmEventList?: [ 
    {
      alarmContent?: string(name='AlarmContent'),
      alarmEventId?: string(name='AlarmEventId'),
      alarmHistoryId?: long(name='AlarmHistoryId'),
      alarmHistoryList?: [ 
        {
          alarmContent?: string(name='AlarmContent'),
          alarmDetail?: string(name='AlarmDetail'),
          alarmLevel?: long(name='AlarmLevel'),
          alarmRuleId?: long(name='AlarmRuleId'),
          alarmRuleName?: string(name='AlarmRuleName'),
          alarmTarget?: string(name='AlarmTarget'),
          alarmTargetDeleted?: boolean(name='AlarmTargetDeleted'),
          alarmTargetType?: string(name='AlarmTargetType'),
          alarmTime?: long(name='AlarmTime'),
          alarmType?: string(name='AlarmType'),
          alarmUrl?: string(name='AlarmUrl'),
          alarmUrlWithDomain?: string(name='AlarmUrlWithDomain'),
          dataSourceName?: string(name='DataSourceName'),
          eventId?: string(name='EventId'),
          gmtCreate?: string(name='GmtCreate'),
          gmtModified?: string(name='GmtModified'),
          id?: long(name='Id'),
          status?: long(name='Status'),
          tenantId?: long(name='TenantId'),
          uniqueIdentity?: string(name='UniqueIdentity'),
          workspaceId?: long(name='WorkspaceId'),
        }
      ](name='AlarmHistoryList'),
      alarmLevel?: long(name='AlarmLevel'),
      alarmRecoverTime?: string(name='AlarmRecoverTime'),
      alarmRuleId?: long(name='AlarmRuleId'),
      alarmStartTime?: string(name='AlarmStartTime'),
      alarmTarget?: string(name='AlarmTarget'),
      alarmTargetDeleted?: boolean(name='AlarmTargetDeleted'),
      alarmTargetType?: string(name='AlarmTargetType'),
      alarmType?: string(name='AlarmType'),
      alarmUrl?: string(name='AlarmUrl'),
      alarmUrlWithDomain?: string(name='AlarmUrlWithDomain'),
      dataSourceName?: string(name='DataSourceName'),
      silenceRemainTime?: long(name='SilenceRemainTime'),
      status?: long(name='Status'),
    }
  ](name='UnifiedAlarmEventList'),
}

model QueryRMSUnifiedAlarmEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRMSUnifiedAlarmEventResponseBody(name='body'),
}

async function queryRMSUnifiedAlarmEventWithOptions(request: QueryRMSUnifiedAlarmEventRequest, runtime: Util.RuntimeOptions): QueryRMSUnifiedAlarmEventResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alarmLevel)) {
    body['AlarmLevel'] = request.alarmLevel;
  }
  if (!Util.isUnset(request.alarmRuleId)) {
    body['AlarmRuleId'] = request.alarmRuleId;
  }
  if (!Util.isUnset(request.alarmRuleUuid)) {
    body['AlarmRuleUuid'] = request.alarmRuleUuid;
  }
  if (!Util.isUnset(request.alarmStackInfoJsonStr)) {
    body['AlarmStackInfoJsonStr'] = request.alarmStackInfoJsonStr;
  }
  if (!Util.isUnset(request.alarmStatusRepeatList)) {
    body['AlarmStatusRepeatList'] = request.alarmStatusRepeatList;
  }
  if (!Util.isUnset(request.alarmTargetKeyword)) {
    body['AlarmTargetKeyword'] = request.alarmTargetKeyword;
  }
  if (!Util.isUnset(request.alarmTargetType)) {
    body['AlarmTargetType'] = request.alarmTargetType;
  }
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.workspaceName)) {
    body['WorkspaceName'] = request.workspaceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryRMSUnifiedAlarmEvent',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRMSUnifiedAlarmEvent(request: QueryRMSUnifiedAlarmEventRequest): QueryRMSUnifiedAlarmEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRMSUnifiedAlarmEventWithOptions(request, runtime);
}

model QueryRMSUnifiedAlarmNotifyHistoryRequest {
  alarmRuleId?: long(name='AlarmRuleId'),
  alarmStackInfoJsonStr?: string(name='AlarmStackInfoJsonStr'),
  alarmStatus?: long(name='AlarmStatus'),
  alarmSubscribers?: [ 
    {
      subscriber?: string(name='Subscriber'),
      subscriberName?: string(name='SubscriberName'),
      subscriberSource?: string(name='SubscriberSource'),
      subscriberType?: string(name='SubscriberType'),
      subscriberUuid?: string(name='SubscriberUuid'),
    }
  ](name='AlarmSubscribers'),
  channel?: string(name='Channel'),
  currentPage?: long(name='CurrentPage'),
  endTime?: long(name='EndTime'),
  eventId?: string(name='EventId'),
  keyword?: string(name='Keyword'),
  pageSize?: long(name='PageSize'),
  startTime?: long(name='StartTime'),
  status?: long(name='Status'),
  subscriber?: string(name='Subscriber'),
  workspaceName?: string(name='WorkspaceName'),
}

model QueryRMSUnifiedAlarmNotifyHistoryResponseBody = {
  alarmNotifyHistories?: [ 
    {
      aggCount?: long(name='AggCount'),
      alarmEventId?: string(name='AlarmEventId'),
      alarmHistoryId?: long(name='AlarmHistoryId'),
      alarmLevel?: long(name='AlarmLevel'),
      alarmRuleId?: long(name='AlarmRuleId'),
      alarmRuleName?: string(name='AlarmRuleName'),
      alarmSilenceTime?: long(name='AlarmSilenceTime'),
      alarmStatus?: long(name='AlarmStatus'),
      alarmTargetDeleted?: boolean(name='AlarmTargetDeleted'),
      alarmTime?: long(name='AlarmTime'),
      alarmType?: string(name='AlarmType'),
      alarmUrl?: string(name='AlarmUrl'),
      alarmUrlWithDomain?: string(name='AlarmUrlWithDomain'),
      channel?: string(name='Channel'),
      dataSourceName?: string(name='DataSourceName'),
      errorMessage?: string(name='ErrorMessage'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      id?: long(name='Id'),
      notifyContent?: string(name='NotifyContent'),
      status?: long(name='Status'),
      subscriber?: string(name='Subscriber'),
      subscriberName?: string(name='SubscriberName'),
      subscriberSource?: string(name='SubscriberSource'),
      subscriberType?: string(name='SubscriberType'),
      tenantId?: long(name='TenantId'),
      traceId?: string(name='TraceId'),
      workspaceId?: long(name='WorkspaceId'),
    }
  ](name='AlarmNotifyHistories'),
  alarmNotifySubs?: [ 
    {
      subscriber?: string(name='Subscriber'),
      subscriberName?: string(name='SubscriberName'),
      subscriberSource?: string(name='SubscriberSource'),
      subscriberType?: string(name='SubscriberType'),
      subscriberUuid?: string(name='SubscriberUuid'),
    }
  ](name='AlarmNotifySubs'),
  currentPage?: long(name='CurrentPage'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  totalCount?: long(name='TotalCount'),
}

model QueryRMSUnifiedAlarmNotifyHistoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRMSUnifiedAlarmNotifyHistoryResponseBody(name='body'),
}

async function queryRMSUnifiedAlarmNotifyHistoryWithOptions(request: QueryRMSUnifiedAlarmNotifyHistoryRequest, runtime: Util.RuntimeOptions): QueryRMSUnifiedAlarmNotifyHistoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alarmRuleId)) {
    body['AlarmRuleId'] = request.alarmRuleId;
  }
  if (!Util.isUnset(request.alarmStackInfoJsonStr)) {
    body['AlarmStackInfoJsonStr'] = request.alarmStackInfoJsonStr;
  }
  if (!Util.isUnset(request.alarmStatus)) {
    body['AlarmStatus'] = request.alarmStatus;
  }
  if (!Util.isUnset(request.alarmSubscribers)) {
    body['AlarmSubscribers'] = request.alarmSubscribers;
  }
  if (!Util.isUnset(request.channel)) {
    body['Channel'] = request.channel;
  }
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.eventId)) {
    body['EventId'] = request.eventId;
  }
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.subscriber)) {
    body['Subscriber'] = request.subscriber;
  }
  if (!Util.isUnset(request.workspaceName)) {
    body['WorkspaceName'] = request.workspaceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryRMSUnifiedAlarmNotifyHistory',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRMSUnifiedAlarmNotifyHistory(request: QueryRMSUnifiedAlarmNotifyHistoryRequest): QueryRMSUnifiedAlarmNotifyHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRMSUnifiedAlarmNotifyHistoryWithOptions(request, runtime);
}

model QueryRMSUnifiedAlarmRuleRequest {
  alarmStatus?: long(name='AlarmStatus'),
  alarmTargetJsonStr?: string(name='AlarmTargetJsonStr'),
  category?: string(name='Category'),
  currentPage?: long(name='CurrentPage'),
  keyword?: string(name='Keyword'),
  level?: long(name='Level'),
  onlyMe?: boolean(name='OnlyMe'),
  pageSize?: long(name='PageSize'),
  refDatasourceType?: string(name='RefDatasourceType'),
  ruleId?: long(name='RuleId'),
  ruleStatus?: long(name='RuleStatus'),
  ruleUniqueIdentity?: string(name='RuleUniqueIdentity'),
  workspaceName?: string(name='WorkspaceName'),
}

model QueryRMSUnifiedAlarmRuleResponseBody = {
  alarmRules?: [ 
    {
      alarmEmpty?: long(name='AlarmEmpty'),
      alarmStatus?: long(name='AlarmStatus'),
      category?: string(name='Category'),
      channels?: string(name='Channels'),
      conditionsDes?: [ string ](name='ConditionsDes'),
      creator?: string(name='Creator'),
      deleted?: long(name='Deleted'),
      emergency?: string(name='Emergency'),
      emergencyUrl?: string(name='EmergencyUrl'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      id?: long(name='Id'),
      level?: long(name='Level'),
      modifier?: string(name='Modifier'),
      name?: string(name='Name'),
      notifyEmpty?: long(name='NotifyEmpty'),
      notifyFiring?: long(name='NotifyFiring'),
      notifyRecovered?: long(name='NotifyRecovered'),
      notifyTimeFilter?: string(name='NotifyTimeFilter'),
      notifyTplId?: long(name='NotifyTplId'),
      pendingHit?: long(name='PendingHit'),
      recoveredHit?: long(name='RecoveredHit'),
      ruleConfig?: string(name='RuleConfig'),
      silenceTime?: long(name='SilenceTime'),
      sourceId?: string(name='SourceId'),
      status?: long(name='Status'),
      step?: long(name='Step'),
      suspendedEndTime?: long(name='SuspendedEndTime'),
      suspendedReason?: string(name='SuspendedReason'),
      suspendedStartTime?: long(name='SuspendedStartTime'),
      tenantId?: long(name='TenantId'),
      timeZone?: string(name='TimeZone'),
      uniqueIdentity?: string(name='UniqueIdentity'),
      workspaceId?: long(name='WorkspaceId'),
    }
  ](name='AlarmRules'),
  currentPage?: long(name='CurrentPage'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  totalCount?: long(name='TotalCount'),
}

model QueryRMSUnifiedAlarmRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRMSUnifiedAlarmRuleResponseBody(name='body'),
}

async function queryRMSUnifiedAlarmRuleWithOptions(request: QueryRMSUnifiedAlarmRuleRequest, runtime: Util.RuntimeOptions): QueryRMSUnifiedAlarmRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alarmStatus)) {
    body['AlarmStatus'] = request.alarmStatus;
  }
  if (!Util.isUnset(request.alarmTargetJsonStr)) {
    body['AlarmTargetJsonStr'] = request.alarmTargetJsonStr;
  }
  if (!Util.isUnset(request.category)) {
    body['Category'] = request.category;
  }
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.level)) {
    body['Level'] = request.level;
  }
  if (!Util.isUnset(request.onlyMe)) {
    body['OnlyMe'] = request.onlyMe;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.refDatasourceType)) {
    body['RefDatasourceType'] = request.refDatasourceType;
  }
  if (!Util.isUnset(request.ruleId)) {
    body['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.ruleStatus)) {
    body['RuleStatus'] = request.ruleStatus;
  }
  if (!Util.isUnset(request.ruleUniqueIdentity)) {
    body['RuleUniqueIdentity'] = request.ruleUniqueIdentity;
  }
  if (!Util.isUnset(request.workspaceName)) {
    body['WorkspaceName'] = request.workspaceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryRMSUnifiedAlarmRule',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRMSUnifiedAlarmRule(request: QueryRMSUnifiedAlarmRuleRequest): QueryRMSUnifiedAlarmRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRMSUnifiedAlarmRuleWithOptions(request, runtime);
}

model ResendMqSofamqDLQMessageBatchRequest {
  cell?: string(name='Cell'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  msgIds?: string(name='MsgIds'),
}

model ResendMqSofamqDLQMessageBatchResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model ResendMqSofamqDLQMessageBatchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResendMqSofamqDLQMessageBatchResponseBody(name='body'),
}

async function resendMqSofamqDLQMessageBatchWithOptions(request: ResendMqSofamqDLQMessageBatchRequest, runtime: Util.RuntimeOptions): ResendMqSofamqDLQMessageBatchResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cell)) {
    body['Cell'] = request.cell;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.msgIds)) {
    body['MsgIds'] = request.msgIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ResendMqSofamqDLQMessageBatch',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resendMqSofamqDLQMessageBatch(request: ResendMqSofamqDLQMessageBatchRequest): ResendMqSofamqDLQMessageBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return resendMqSofamqDLQMessageBatchWithOptions(request, runtime);
}

model ResendMqSofamqDLQMessageByIdRequest {
  cell?: string(name='Cell'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  msgId?: string(name='MsgId'),
}

model ResendMqSofamqDLQMessageByIdResponseBody = {
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model ResendMqSofamqDLQMessageByIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResendMqSofamqDLQMessageByIdResponseBody(name='body'),
}

async function resendMqSofamqDLQMessageByIdWithOptions(request: ResendMqSofamqDLQMessageByIdRequest, runtime: Util.RuntimeOptions): ResendMqSofamqDLQMessageByIdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cell)) {
    body['Cell'] = request.cell;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.msgId)) {
    body['MsgId'] = request.msgId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ResendMqSofamqDLQMessageById',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resendMqSofamqDLQMessageById(request: ResendMqSofamqDLQMessageByIdRequest): ResendMqSofamqDLQMessageByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return resendMqSofamqDLQMessageByIdWithOptions(request, runtime);
}

model ResetMqSofamqConsumerOffsetRequest {
  cell?: string(name='Cell'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  resetTimestamp?: long(name='ResetTimestamp'),
  topic?: string(name='Topic'),
  type?: long(name='Type'),
}

model ResetMqSofamqConsumerOffsetResponseBody = {
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model ResetMqSofamqConsumerOffsetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetMqSofamqConsumerOffsetResponseBody(name='body'),
}

async function resetMqSofamqConsumerOffsetWithOptions(request: ResetMqSofamqConsumerOffsetRequest, runtime: Util.RuntimeOptions): ResetMqSofamqConsumerOffsetResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cell)) {
    body['Cell'] = request.cell;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.resetTimestamp)) {
    body['ResetTimestamp'] = request.resetTimestamp;
  }
  if (!Util.isUnset(request.topic)) {
    body['Topic'] = request.topic;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ResetMqSofamqConsumerOffset',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetMqSofamqConsumerOffset(request: ResetMqSofamqConsumerOffsetRequest): ResetMqSofamqConsumerOffsetResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetMqSofamqConsumerOffsetWithOptions(request, runtime);
}

model UpdateMqSofamqGroupRequest {
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  readEnable?: boolean(name='ReadEnable'),
}

model UpdateMqSofamqGroupResponseBody = {
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model UpdateMqSofamqGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMqSofamqGroupResponseBody(name='body'),
}

async function updateMqSofamqGroupWithOptions(request: UpdateMqSofamqGroupRequest, runtime: Util.RuntimeOptions): UpdateMqSofamqGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.readEnable)) {
    body['ReadEnable'] = request.readEnable;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMqSofamqGroup',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMqSofamqGroup(request: UpdateMqSofamqGroupRequest): UpdateMqSofamqGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMqSofamqGroupWithOptions(request, runtime);
}

model UpdateMqSofamqGroupRemarkRequest {
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  remark?: string(name='Remark'),
}

model UpdateMqSofamqGroupRemarkResponseBody = {
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model UpdateMqSofamqGroupRemarkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMqSofamqGroupRemarkResponseBody(name='body'),
}

async function updateMqSofamqGroupRemarkWithOptions(request: UpdateMqSofamqGroupRemarkRequest, runtime: Util.RuntimeOptions): UpdateMqSofamqGroupRemarkResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.remark)) {
    body['Remark'] = request.remark;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMqSofamqGroupRemark',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMqSofamqGroupRemark(request: UpdateMqSofamqGroupRemarkRequest): UpdateMqSofamqGroupRemarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMqSofamqGroupRemarkWithOptions(request, runtime);
}

model UpdateMqSofamqTopicRequest {
  instanceId?: string(name='InstanceId'),
  perm?: long(name='Perm'),
  topic?: string(name='Topic'),
}

model UpdateMqSofamqTopicResponseBody = {
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model UpdateMqSofamqTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMqSofamqTopicResponseBody(name='body'),
}

async function updateMqSofamqTopicWithOptions(request: UpdateMqSofamqTopicRequest, runtime: Util.RuntimeOptions): UpdateMqSofamqTopicResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.perm)) {
    body['Perm'] = request.perm;
  }
  if (!Util.isUnset(request.topic)) {
    body['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMqSofamqTopic',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMqSofamqTopic(request: UpdateMqSofamqTopicRequest): UpdateMqSofamqTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMqSofamqTopicWithOptions(request, runtime);
}

model UpdateMqSofamqTopicRemarkRequest {
  instanceId?: string(name='InstanceId'),
  remark?: string(name='Remark'),
  topic?: string(name='Topic'),
}

model UpdateMqSofamqTopicRemarkResponseBody = {
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model UpdateMqSofamqTopicRemarkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMqSofamqTopicRemarkResponseBody(name='body'),
}

async function updateMqSofamqTopicRemarkWithOptions(request: UpdateMqSofamqTopicRemarkRequest, runtime: Util.RuntimeOptions): UpdateMqSofamqTopicRemarkResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.remark)) {
    body['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.topic)) {
    body['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMqSofamqTopicRemark',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMqSofamqTopicRemark(request: UpdateMqSofamqTopicRemarkRequest): UpdateMqSofamqTopicRemarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMqSofamqTopicRemarkWithOptions(request, runtime);
}

model UpdateMqSofamqWarnRequest {
  alertTime?: string(name='AlertTime'),
  contacts?: string(name='Contacts'),
  delayTime?: long(name='DelayTime'),
  frequency?: long(name='Frequency'),
  instanceId?: string(name='InstanceId'),
  threshold?: long(name='Threshold'),
  warnId?: long(name='WarnId'),
}

model UpdateMqSofamqWarnResponseBody = {
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model UpdateMqSofamqWarnResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMqSofamqWarnResponseBody(name='body'),
}

async function updateMqSofamqWarnWithOptions(request: UpdateMqSofamqWarnRequest, runtime: Util.RuntimeOptions): UpdateMqSofamqWarnResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertTime)) {
    body['AlertTime'] = request.alertTime;
  }
  if (!Util.isUnset(request.contacts)) {
    body['Contacts'] = request.contacts;
  }
  if (!Util.isUnset(request.delayTime)) {
    body['DelayTime'] = request.delayTime;
  }
  if (!Util.isUnset(request.frequency)) {
    body['Frequency'] = request.frequency;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.threshold)) {
    body['Threshold'] = request.threshold;
  }
  if (!Util.isUnset(request.warnId)) {
    body['WarnId'] = request.warnId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMqSofamqWarn',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMqSofamqWarn(request: UpdateMqSofamqWarnRequest): UpdateMqSofamqWarnResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMqSofamqWarnWithOptions(request, runtime);
}

model UpdateMsConfigAttributesRequest {
  attributeName?: string(name='AttributeName'),
  desc?: string(name='Desc'),
  id?: long(name='Id'),
  instanceId?: string(name='InstanceId'),
}

model UpdateMsConfigAttributesResponseBody = {
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model UpdateMsConfigAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMsConfigAttributesResponseBody(name='body'),
}

async function updateMsConfigAttributesWithOptions(request: UpdateMsConfigAttributesRequest, runtime: Util.RuntimeOptions): UpdateMsConfigAttributesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.attributeName)) {
    body['AttributeName'] = request.attributeName;
  }
  if (!Util.isUnset(request.desc)) {
    body['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMsConfigAttributes',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMsConfigAttributes(request: UpdateMsConfigAttributesRequest): UpdateMsConfigAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMsConfigAttributesWithOptions(request, runtime);
}

model UpdateMsConfigResourcesRequest {
  appName?: string(name='AppName'),
  attributes?: string(name='Attributes'),
  desc?: string(name='Desc'),
  id?: long(name='Id'),
  instanceId?: string(name='InstanceId'),
  region?: string(name='Region'),
  resourceId?: string(name='ResourceId'),
  updateAttribute?: boolean(name='UpdateAttribute'),
}

model UpdateMsConfigResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model UpdateMsConfigResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMsConfigResourcesResponseBody(name='body'),
}

async function updateMsConfigResourcesWithOptions(request: UpdateMsConfigResourcesRequest, runtime: Util.RuntimeOptions): UpdateMsConfigResourcesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.attributes)) {
    body['Attributes'] = request.attributes;
  }
  if (!Util.isUnset(request.desc)) {
    body['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  if (!Util.isUnset(request.resourceId)) {
    body['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.updateAttribute)) {
    body['UpdateAttribute'] = request.updateAttribute;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMsConfigResources',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMsConfigResources(request: UpdateMsConfigResourcesRequest): UpdateMsConfigResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMsConfigResourcesWithOptions(request, runtime);
}

model UpdateRMSUnifiedAlarmRuleRequest {
  alarmNodata?: long(name='AlarmNodata'),
  category?: string(name='Category'),
  channelsRepeatList?: [ string ](name='ChannelsRepeatList'),
  emergency?: string(name='Emergency'),
  emergencyUrl?: string(name='EmergencyUrl'),
  id?: long(name='Id'),
  level?: long(name='Level'),
  name?: string(name='Name'),
  notifyFiring?: long(name='NotifyFiring'),
  notifyNodata?: long(name='NotifyNodata'),
  notifyRecovered?: long(name='NotifyRecovered'),
  notifyTarget?: [ 
    {
      subscriber?: string(name='Subscriber'),
      subscriberName?: string(name='SubscriberName'),
      subscriberSource?: string(name='SubscriberSource'),
      subscriberType?: string(name='SubscriberType'),
      subscriberUuid?: string(name='SubscriberUuid'),
    }
  ](name='NotifyTarget'),
  notifyTimeFilterJsonStr?: string(name='NotifyTimeFilterJsonStr'),
  pendingHit?: long(name='PendingHit'),
  recoveredHit?: long(name='RecoveredHit'),
  ruleConfig?: string(name='RuleConfig'),
  silenceTime?: long(name='SilenceTime'),
  status?: string(name='Status'),
  step?: long(name='Step'),
  suspendedEndTime?: long(name='SuspendedEndTime'),
  suspendedReason?: string(name='SuspendedReason'),
  suspendedStartTime?: long(name='SuspendedStartTime'),
  workspaceName?: string(name='WorkspaceName'),
}

model UpdateRMSUnifiedAlarmRuleResponseBody = {
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model UpdateRMSUnifiedAlarmRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateRMSUnifiedAlarmRuleResponseBody(name='body'),
}

async function updateRMSUnifiedAlarmRuleWithOptions(request: UpdateRMSUnifiedAlarmRuleRequest, runtime: Util.RuntimeOptions): UpdateRMSUnifiedAlarmRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alarmNodata)) {
    body['AlarmNodata'] = request.alarmNodata;
  }
  if (!Util.isUnset(request.category)) {
    body['Category'] = request.category;
  }
  if (!Util.isUnset(request.channelsRepeatList)) {
    body['ChannelsRepeatList'] = request.channelsRepeatList;
  }
  if (!Util.isUnset(request.emergency)) {
    body['Emergency'] = request.emergency;
  }
  if (!Util.isUnset(request.emergencyUrl)) {
    body['EmergencyUrl'] = request.emergencyUrl;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.level)) {
    body['Level'] = request.level;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.notifyFiring)) {
    body['NotifyFiring'] = request.notifyFiring;
  }
  if (!Util.isUnset(request.notifyNodata)) {
    body['NotifyNodata'] = request.notifyNodata;
  }
  if (!Util.isUnset(request.notifyRecovered)) {
    body['NotifyRecovered'] = request.notifyRecovered;
  }
  if (!Util.isUnset(request.notifyTarget)) {
    body['NotifyTarget'] = request.notifyTarget;
  }
  if (!Util.isUnset(request.notifyTimeFilterJsonStr)) {
    body['NotifyTimeFilterJsonStr'] = request.notifyTimeFilterJsonStr;
  }
  if (!Util.isUnset(request.pendingHit)) {
    body['PendingHit'] = request.pendingHit;
  }
  if (!Util.isUnset(request.recoveredHit)) {
    body['RecoveredHit'] = request.recoveredHit;
  }
  if (!Util.isUnset(request.ruleConfig)) {
    body['RuleConfig'] = request.ruleConfig;
  }
  if (!Util.isUnset(request.silenceTime)) {
    body['SilenceTime'] = request.silenceTime;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.step)) {
    body['Step'] = request.step;
  }
  if (!Util.isUnset(request.suspendedEndTime)) {
    body['SuspendedEndTime'] = request.suspendedEndTime;
  }
  if (!Util.isUnset(request.suspendedReason)) {
    body['SuspendedReason'] = request.suspendedReason;
  }
  if (!Util.isUnset(request.suspendedStartTime)) {
    body['SuspendedStartTime'] = request.suspendedStartTime;
  }
  if (!Util.isUnset(request.workspaceName)) {
    body['WorkspaceName'] = request.workspaceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRMSUnifiedAlarmRule',
    version = '2019-08-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRMSUnifiedAlarmRule(request: UpdateRMSUnifiedAlarmRuleRequest): UpdateRMSUnifiedAlarmRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRMSUnifiedAlarmRuleWithOptions(request, runtime);
}

