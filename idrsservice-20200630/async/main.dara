/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'idrsservice';
  @version = '2020-06-30';
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-1' = 'idrsservice.aliyuncs.com',
    'ap-northeast-2-pop' = 'idrsservice.aliyuncs.com',
    'ap-south-1' = 'idrsservice.aliyuncs.com',
    'ap-southeast-1' = 'idrsservice.aliyuncs.com',
    'ap-southeast-2' = 'idrsservice.aliyuncs.com',
    'ap-southeast-3' = 'idrsservice.aliyuncs.com',
    'ap-southeast-5' = 'idrsservice.aliyuncs.com',
    'cn-beijing' = 'idrsservice.aliyuncs.com',
    'cn-beijing-finance-1' = 'idrsservice.aliyuncs.com',
    'cn-beijing-finance-pop' = 'idrsservice.aliyuncs.com',
    'cn-beijing-gov-1' = 'idrsservice.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'idrsservice.aliyuncs.com',
    'cn-chengdu' = 'idrsservice.aliyuncs.com',
    'cn-edge-1' = 'idrsservice.aliyuncs.com',
    'cn-fujian' = 'idrsservice.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'idrsservice.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'idrsservice.aliyuncs.com',
    'cn-hangzhou-finance' = 'idrsservice.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'idrsservice.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'idrsservice.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'idrsservice.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'idrsservice.aliyuncs.com',
    'cn-hangzhou-test-306' = 'idrsservice.aliyuncs.com',
    'cn-hongkong' = 'idrsservice.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'idrsservice.aliyuncs.com',
    'cn-huhehaote' = 'idrsservice.aliyuncs.com',
    'cn-huhehaote-nebula-1' = 'idrsservice.aliyuncs.com',
    'cn-north-2-gov-1' = 'idrsservice.aliyuncs.com',
    'cn-qingdao' = 'idrsservice.aliyuncs.com',
    'cn-qingdao-nebula' = 'idrsservice.aliyuncs.com',
    'cn-shanghai' = 'idrsservice.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'idrsservice.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'idrsservice.aliyuncs.com',
    'cn-shanghai-inner' = 'idrsservice.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'idrsservice.aliyuncs.com',
    'cn-shenzhen' = 'idrsservice.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'idrsservice.aliyuncs.com',
    'cn-shenzhen-inner' = 'idrsservice.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'idrsservice.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'idrsservice.aliyuncs.com',
    'cn-wuhan' = 'idrsservice.aliyuncs.com',
    'cn-wulanchabu' = 'idrsservice.aliyuncs.com',
    'cn-yushanfang' = 'idrsservice.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'idrsservice.aliyuncs.com',
    'cn-zhangjiakou' = 'idrsservice.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'idrsservice.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'idrsservice.aliyuncs.com',
    'eu-central-1' = 'idrsservice.aliyuncs.com',
    'eu-west-1' = 'idrsservice.aliyuncs.com',
    'eu-west-1-oxs' = 'idrsservice.aliyuncs.com',
    'me-east-1' = 'idrsservice.aliyuncs.com',
    'rus-west-1-pop' = 'idrsservice.aliyuncs.com',
    'us-east-1' = 'idrsservice.aliyuncs.com',
    'us-west-1' = 'idrsservice.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AsrRealtimeRequest {
  appId?: string(name='AppId', example='4a29b426-742f-4078-8386-79b440b25***', position='Query'),
  customizationId?: string(name='CustomizationId', position='Query'),
  disfluency?: boolean(name='Disfluency', example='false', position='Query'),
  enableIgnoreSentenceTimeout?: boolean(name='EnableIgnoreSentenceTimeout', example='false', position='Query'),
  enableIntermediateResult?: boolean(name='EnableIntermediateResult', example='false', position='Query'),
  enableInverseTextNormalization?: boolean(name='EnableInverseTextNormalization', example='false', position='Query'),
  enablePunctuationPrediction?: boolean(name='EnablePunctuationPrediction', example='false', position='Query'),
  enableSemanticSentenceDetection?: boolean(name='EnableSemanticSentenceDetection', example='false', position='Query'),
  enableWords?: boolean(name='EnableWords', example='false', position='Query'),
  fileUrl?: string(name='FileUrl', example='https://gw.alipayobjects.com/os/bmw-prod/0574ee2e-f494-45a5-820f-63aee***.wav', position='Query'),
  format?: string(name='Format', example='PCM', position='Query'),
  maxSentenceSilence?: long(name='MaxSentenceSilence', example='800', position='Query'),
  sampleRate?: long(name='SampleRate', example='16000', position='Query'),
  speechNoiseThreshold?: float(name='SpeechNoiseThreshold', example='0.3', position='Query'),
  vocabularyId?: string(name='VocabularyId', position='Query'),
}

model AsrRealtimeResponseBody = {
  code?: int32(name='Code', example='OK'),
  data?: {
    beginTime?: long(name='BeginTime', example='1649952000000'),
    code?: int32(name='Code', example='OK'),
    confidence?: double(name='Confidence', example='0.78'),
    id?: string(name='Id', example='f3bd31c0-0001-4b4b-977d-7cfa64b5***'),
    message?: string(name='Message'),
    name?: string(name='Name', example='default'),
    result?: string(name='Result'),
    status?: string(name='Status', example='completed'),
    taskId?: string(name='TaskId', example='368cfa55-2364-4d79-aeb4-c0956c4a4***'),
    time?: long(name='Time', example='1638243477'),
  }(name='Data'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='84118BF0-56F7-54D2-8C1A-35BBBBD50***'),
  success?: boolean(name='Success', example='True'),
}

model AsrRealtimeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AsrRealtimeResponseBody(name='body'),
}

async function asrRealtime(request: AsrRealtimeRequest): AsrRealtimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AsrRealtime', 'POST', '/', 'json', false, 'json', request);
}

model AsrSentenceRequest {
  asrRequest?: {
    appId?: string(name='AppId', example='d61be709-49d2-4cf1-b219-cd6181f72db8'),
    enableInverseTextNormalization?: boolean(name='EnableInverseTextNormalization', example='false'),
    enablePunctuationPrediction?: boolean(name='EnablePunctuationPrediction', example='false'),
    enableVoiceDetection?: boolean(name='EnableVoiceDetection', example='false'),
    fileUrl?: string(name='FileUrl', example='http://shuanglu-record-finance.oss-cn-shanghai.aliyuncs.com/record/4x5avhil/047730_30307_0/2022-02-12-10-20****'),
    format?: string(name='Format', example='PCM'),
    sampleRate?: int32(name='SampleRate', example='16000'),
  }(name='AsrRequest', shrink='json', position='Body'),
}

model AsrSentenceResponseBody = {
  code?: int32(name='Code', example='OK'),
  data?: {
    code?: int32(name='Code', example='20000000'),
    id?: string(name='Id', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
    message?: string(name='Message', example='-'),
    name?: string(name='Name'),
    result?: string(name='Result'),
    taskId?: string(name='TaskId', example='368cfa55-2364-4d79-aeb4-c0956c4a45cd'),
  }(name='Data'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
  success?: boolean(name='Success', example='True'),
}

model AsrSentenceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AsrSentenceResponseBody(name='body'),
}

async function asrSentence(request: AsrSentenceRequest): AsrSentenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AsrSentence', 'POST', '/', 'json', true, 'form', request);
}

model AsrTaskRequest {
  request?: {
    appId: string(name='AppId', example='d9ee5df9-20bf-47bf-987a-76b26984b***'),
    asrTaskId?: string(name='AsrTaskId', example='d9ee5df9-20bf-47bf-987a-76b26984b***'),
    event: string(name='Event', example='START'),
    roomId: string(name='RoomId', example='662027426755***'),
    timestamp?: long(name='Timestamp', example='1656388156399'),
  }(name='Request', shrink='json', position='Body'),
}

model AsrTaskResponseBody = {
  code?: int32(name='Code', example='OK'),
  data?: {
    result?: string(name='Result'),
  }(name='Data'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', example='DF4B0162-A5E0-5F85-BEFD-CAC36E876***'),
  success?: boolean(name='Success', example='True'),
}

model AsrTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AsrTaskResponseBody(name='body'),
}

async function asrTask(request: AsrTaskRequest): AsrTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AsrTask', 'POST', '/', 'json', true, 'form', request);
}

model AssociateRoomRequest {
  appId: string(name='AppId', example='5bbfb884-1186-4d48-906b-88d586770f6b', position='Query'),
  clientBaseParam?: string(name='ClientBaseParam', example='{"version":"1.0.0"}', position='Query'),
  clientVersion?: string(name='ClientVersion', example='1.0.002', position='Query'),
  departmentId?: string(name='DepartmentId', example='5bbfb884-1186-4d48-906b-88d586770f6b', position='Query'),
  roomId: string(name='RoomId', example='5500707344661', position='Query'),
}

model AssociateRoomResponseBody = {
  code?: string(name='Code', description='code', example='OK'),
  data?: string(name='Data', example='{\\"Name\\": u\\"\\u4ee3\\u7406\\u4eba\\", \\"CreatedAt\\": \\"2021-11-11T15:27:39.449+08:00\\", \\"Channel\\": \\"063756\\", \\"Id\\": \\"5ead2d7f-9e2c-4521-bac4-e37bd44b6a56\\"}'),
  errors?: [ 
    {
      field?: string(name='Field', example='-'),
      message?: string(name='Message', example='-'),
    }
  ](name='Errors'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', description='requestId', example='84118BF0-56F7-54D2-8C1A-35BBBBD5016B'),
  success?: boolean(name='Success', example='True'),
}

model AssociateRoomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssociateRoomResponseBody(name='body'),
}

async function associateRoom(request: AssociateRoomRequest): AssociateRoomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateRoom', 'POST', '/', 'json', false, 'json', request);
}

model CreateAppRequest {
  clientToken?: string(name='ClientToken', example='4367c30a-c686-4bb2-a45d-5affb87****', position='Query'),
  departmentId?: string(name='DepartmentId', example='4367c30a-c686-4bb2-a45d-5affb87f7aca', position='Query'),
  name: string(name='Name', position='Query'),
  packageName?: string(name='PackageName', example='com.test.app', position='Query'),
}

model CreateAppResponseBody = {
  code?: string(name='Code', description='code', example='OK'),
  data?: {
    createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
    creatorName?: string(name='CreatorName'),
    disabled?: boolean(name='Disabled', example='false'),
    id?: string(name='Id', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
    name?: string(name='Name'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
}

model CreateAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppResponseBody(name='body'),
}

async function createApp(request: CreateAppRequest): CreateAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApp', 'POST', '/', 'json', false, 'json', request);
}

model CreateDepartmentRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  label?: string(name='Label', position='Query'),
  name: string(name='Name', position='Query'),
}

model CreateDepartmentResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
    description?: string(name='Description'),
    id?: string(name='Id', example='63bb629d-92bf-4cdc-ad0b-3032c926d23f'),
    name?: string(name='Name'),
  }(name='Data'),
  message?: string(name='Message', example='11111111'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
}

model CreateDepartmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDepartmentResponseBody(name='body'),
}

async function createDepartment(request: CreateDepartmentRequest): CreateDepartmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDepartment', 'POST', '/', 'json', false, 'json', request);
}

model CreateDetectProcessRequest {
  content?: string(name='Content', example='{}', position='Query'),
  draft?: string(name='Draft', example='{}', position='Query'),
  name: string(name='Name', position='Query'),
  type?: string(name='Type', example='LOCAL', position='Query'),
}

model CreateDetectProcessResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    content?: string(name='Content', example='{}'),
    createdAt?: string(name='CreatedAt', example='2020-12-04T14:47:59.000+08:00'),
    disabled?: boolean(name='Disabled', example='false'),
    draft?: string(name='Draft', example='{}'),
    id?: string(name='Id', description='ID', example='0f1c45cd-3eee-4e60-b505-2e330b8755d3'),
    md5?: string(name='Md5', example='987d563d38f5aef27feca8702c689bb1'),
    name?: string(name='Name'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='0q1c45cd-3eee-1e60-b505-2e330b8755d3'),
}

model CreateDetectProcessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDetectProcessResponseBody(name='body'),
}

async function createDetectProcess(request: CreateDetectProcessRequest): CreateDetectProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDetectProcess', 'POST', '/', 'json', false, 'json', request);
}

model CreateRuleRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  content: string(name='Content', example='[{"sequence":1,"actions":[{"name":"id_card_recognize"}]},{"sequence":2,"actions":[{"name":"document_title_recognize"},{"name":"flip_action_recognize"},{"name":"sign_action_recognize"}]},{"sequence":3,"actions":[{"name":"sign_recognize"}]},{"sequence":0,"actions":[{"name":"face_track"},{"name":"speech_to_text"}]}]', position='Query'),
  name: string(name='Name', example='default', position='Query'),
}

model CreateRuleResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    content?: string(name='Content', example='{}'),
    id?: string(name='Id', description='ID', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
    name?: string(name='Name', example='default'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
}

model CreateRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRuleResponseBody(name='body'),
}

async function createRule(request: CreateRuleRequest): CreateRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateSignatureRequest {
  appId: string(name='AppId', example='5bbfb884-1186-4d48-906b-88d586770f6b', minimum=0, maximum=9223372036854775807, position='Query'),
  clientBaseParam?: string(name='ClientBaseParam', example='{"version":"1.0.0"}', position='Query'),
  clientVersion?: string(name='ClientVersion', example='1.0.001', position='Query'),
  expireTime?: long(name='ExpireTime', example='300', position='Query'),
  uid: string(name='Uid', example='550070734466****', position='Query'),
}

model CreateSignatureResponseBody = {
  code?: string(name='Code', description='code', example='OK'),
  data?: {
    expireTime?: string(name='ExpireTime', example='300'),
    rtcAppId?: string(name='RtcAppId', example='124325213125435'),
    rtcBizName?: string(name='RtcBizName'),
    rtcSign?: string(name='RtcSign'),
    rtcWorkspaceId?: string(name='RtcWorkspaceId', example='my_workspace'),
  }(name='Data'),
  errors?: [ 
    {
      field?: string(name='Field', example='A1899517-BB99-5D3E-A71B-97524DCB0942'),
      message?: string(name='Message'),
    }
  ](name='Errors'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='requestId', example='A1899517-BB99-5D3E-A71B-97524DCB0942'),
  success?: boolean(name='Success', example='True'),
}

model CreateSignatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSignatureResponseBody(name='body'),
}

async function createSignature(request: CreateSignatureRequest): CreateSignatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSignature', 'POST', '/', 'json', false, 'json', request);
}

model CreateTaskGroupRequest {
  appId?: string(name='AppId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  day?: [ int32 ](name='Day', example='3', position='Query'),
  expireAt?: string(name='ExpireAt', example='2020-10-10', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
  ruleId?: string(name='RuleId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38', position='Query'),
  runnableTimeFrom?: string(name='RunnableTimeFrom', example='17:00', position='Query'),
  runnableTimeTo?: string(name='RunnableTimeTo', example='18:00', position='Query'),
  triggerPeriod?: string(name='TriggerPeriod', example='immediately', position='Query'),
  videoInfo: [ 
    {
      ruleId?: string(name='RuleId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
      videoMetaUrl?: string(name='VideoMetaUrl', example='18/mrtc//641905591891464_record_64190559189146412713.mp4.meta'),
      videoUrl?: string(name='VideoUrl', example='18/mrtc//641905591891464_record_64190559189146412713.mp4'),
    }
  ](name='VideoInfo', position='Query'),
}

model CreateTaskGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    completedTasks?: int32(name='CompletedTasks', example='0'),
    createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
    id?: string(name='Id', description='ID', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
    name?: string(name='Name'),
    ruleId?: string(name='RuleId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
    ruleName?: string(name='RuleName', example='default'),
    status?: string(name='Status', example='runnable'),
    taskIds?: [ string ](name='TaskIds'),
    totalTasks?: int32(name='TotalTasks', example='1'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
}

model CreateTaskGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTaskGroupResponseBody(name='body'),
}

async function createTaskGroup(request: CreateTaskGroupRequest): CreateTaskGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTaskGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateTtsQuestionRequest {
  request: {
    answer: string(name='Answer'),
    question: string(name='Question'),
    questionGroupId: string(name='QuestionGroupId', example='47584ba4-9781-496b-8e6f-c8525a213***'),
  }(name='Request', shrink='json', position='Body'),
}

model CreateTtsQuestionResponseBody = {
  code?: int32(name='Code', example='OK'),
  data?: {
    id?: string(name='Id', description='ID', example='59b0bbfe-929b-4a8c-9833-3ce70b4ba***'),
  }(name='Data'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', example='D9AA9055-F73D-592C-832B-5AEECB093***'),
  success?: boolean(name='Success', example='True'),
}

model CreateTtsQuestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTtsQuestionResponseBody(name='body'),
}

async function createTtsQuestion(request: CreateTtsQuestionRequest): CreateTtsQuestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTtsQuestion', 'POST', '/', 'json', true, 'form', request);
}

model CreateTtsQuestionGroupRequest {
  request: {
    format?: string(name='Format', example='PCM'),
    pitchRate?: int32(name='PitchRate', example='50'),
    sampleRate?: int32(name='SampleRate', example='16000'),
    speechRate?: int32(name='SpeechRate', example='50'),
    voice?: string(name='Voice', example='xiaoyun'),
    volume?: int32(name='Volume', example='50'),
  }(name='Request', shrink='json', position='Body'),
}

model CreateTtsQuestionGroupResponseBody = {
  code?: int32(name='Code', example='OK'),
  data?: {
    id?: string(name='Id', example='63bb629d-92bf-4cdc-ad0b-3032c926d***'),
  }(name='Data'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', example='B2AADC9E-2A58-5918-AE4E-FF59E19D7***'),
  success?: boolean(name='Success', example='True'),
}

model CreateTtsQuestionGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTtsQuestionGroupResponseBody(name='body'),
}

async function createTtsQuestionGroup(request: CreateTtsQuestionGroupRequest): CreateTtsQuestionGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTtsQuestionGroup', 'POST', '/', 'json', true, 'form', request);
}

model CreateUserDepartmentsRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  departmentId: [ string ](name='DepartmentId', position='Query'),
  userId: [ string ](name='UserId', position='Query'),
}

model CreateUserDepartmentsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='0B576AAB-A638-5029-9A54-A7C1DB5AC0B3'),
}

model CreateUserDepartmentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUserDepartmentsResponseBody(name='body'),
}

async function createUserDepartments(request: CreateUserDepartmentsRequest): CreateUserDepartmentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUserDepartments', 'POST', '/', 'json', false, 'json', request);
}

model CreateVideoMergeTaskRequest {
  videoMergeRequest: {
    callbackUrl: string(name='CallbackUrl', example='https://h5-api.neoclub.cn/v1/bff/service/other/rtc/callback'),
    layoutStyles: [ 
      {
        height: long(name='Height', example='3037'),
        inputNum: long(name='InputNum', example='2'),
        videoStyles: [ 
          {
            fileName: string(name='FileName', example='http://xxx.xxx'),
            height: long(name='Height', example='888'),
            positionX: long(name='PositionX', example='100'),
            positionY: long(name='PositionY', example='400'),
            width: long(name='Width', example='100'),
          }
        ](name='VideoStyles'),
        width: long(name='Width', example='800'),
      }
    ](name='LayoutStyles'),
    videoList: [ 
      {
        endTime: long(name='EndTime', example='2021-12-28'),
        fileName: string(name='FileName'),
        fileUrl: string(name='FileUrl', example='http://shuanglu-record-finance.oss-cn-shanghai.aliyuncs.com/record/4x5avhil/264516_33430_1/2022-03-21-13-56-38_2022-03-21-14-17-22.mp4'),
        mergeBeginTime: long(name='MergeBeginTime', example='5'),
        mergeEndTime: long(name='MergeEndTime', example='15'),
        primeVideo: boolean(name='PrimeVideo', example='true'),
        startTime: long(name='StartTime', example='2022-03-05'),
      }
    ](name='VideoList'),
    watermark: {
      fontColor: string(name='FontColor', example='14803425'),
      fontSize: long(name='FontSize', example='20'),
      positionX: long(name='PositionX', example='100'),
      positionY: long(name='PositionY', example='400'),
      text: string(name='Text'),
      timestamp: long(name='Timestamp', example='1617245014'),
    }(name='Watermark'),
  }(name='VideoMergeRequest', shrink='json', position='Body'),
}

model CreateVideoMergeTaskResponseBody = {
  code?: int32(name='Code', description='code', example='OK'),
  data?: string(name='Data', example='AC140413004421B8D17C549B31B20000'),
  message?: string(name='Message', example='-'),
  status?: boolean(name='Status', example='success'),
}

model CreateVideoMergeTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVideoMergeTaskResponseBody(name='body'),
}

async function createVideoMergeTask(request: CreateVideoMergeTaskRequest): CreateVideoMergeTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVideoMergeTask', 'POST', '/', 'json', true, 'form', request);
}

model CreateWatermarkRequest {
  name?: string(name='Name', position='Query'),
  value?: string(name='Value', example='{}', position='Query'),
}

model CreateWatermarkResponseBody = {
  code?: string(name='Code', description='code', example='OK'),
  data?: {
    createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
    id?: string(name='Id', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
    name?: string(name='Name'),
    value?: string(name='Value', example='{}'),
  }(name='Data'),
  errors?: [ 
    {
      field?: string(name='Field', example='A1899517-BB99-5D3E-A71B-97524DCB0942'),
      message?: string(name='Message', example='-'),
    }
  ](name='Errors'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', description='requestId', example='A1899517-BB99-5D3E-A71B-97524DCB0942'),
  success?: boolean(name='Success', example='True'),
}

model CreateWatermarkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWatermarkResponseBody(name='body'),
}

async function createWatermark(request: CreateWatermarkRequest): CreateWatermarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWatermark', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAppRequest {
  id: string(name='Id', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38', position='Query'),
}

model DeleteAppResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A1899517-BB99-5D3E-A71B-97524DCB0942'),
}

model DeleteAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppResponseBody(name='body'),
}

async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApp', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDepartmentRequest {
  id: string(name='Id', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38', position='Query'),
}

model DeleteDepartmentResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A1899517-BB99-5D3E-A71B-97524DCB0942'),
}

model DeleteDepartmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDepartmentResponseBody(name='body'),
}

async function deleteDepartment(request: DeleteDepartmentRequest): DeleteDepartmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDepartment', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDetectProcessRequest {
  id: string(name='Id', description='ID', example='0f1c45cd-3eee-4e60-b505-2e330b8755d3', position='Query'),
}

model DeleteDetectProcessResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: map[string]any(name='Data', example='-'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', example='1fdc45cd-3eee-4e60-b505-2e330b8755d3'),
}

model DeleteDetectProcessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDetectProcessResponseBody(name='body'),
}

async function deleteDetectProcess(request: DeleteDetectProcessRequest): DeleteDetectProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDetectProcess', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRuleRequest {
  id: string(name='Id', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38', position='Query'),
}

model DeleteRuleResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    content?: string(name='Content', example='{}'),
    createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
    id?: string(name='Id', description='ID', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
    name?: string(name='Name', example='default'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
}

model DeleteRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRuleResponseBody(name='body'),
}

async function deleteRule(request: DeleteRuleRequest): DeleteRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserRequest {
  id: string(name='Id', description='ID', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38', position='Query'),
}

model DeleteUserResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: map[string]any(name='Data'),
  errors?: [ 
    {
      field?: string(name='Field'),
      message?: string(name='Message'),
    }
  ](name='Errors'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
}

model DeleteUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserResponseBody(name='body'),
}

async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUser', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserDepartmentsRequest {
  departmentId: [ string ](name='DepartmentId', position='Query'),
  userId: [ string ](name='UserId', position='Body'),
}

model DeleteUserDepartmentsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='48A2B2E2-9995-5220-B77C-871119CB05CC'),
}

model DeleteUserDepartmentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserDepartmentsResponseBody(name='body'),
}

async function deleteUserDepartments(request: DeleteUserDepartmentsRequest): DeleteUserDepartmentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserDepartments', 'POST', '/', 'json', true, 'form', request);
}

model DeleteWatermarkRequest {
  watermarkId?: string(name='WatermarkId', example='e5a923e0e727f212813a195e274b02c6', position='Query'),
}

model DeleteWatermarkResponseBody = {
  code?: string(name='Code', description='code', example='OK'),
  data?: {
    createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
    id?: string(name='Id', example='0f1c45cd-3eee-4e60-b505-2e330b8755d3'),
    name?: string(name='Name'),
    value?: string(name='Value', example='{}'),
  }(name='Data'),
  errors?: [ 
    {
      field?: string(name='Field', example='A1899517-BB99-5D3E-A71B-97524DCB0942'),
      message?: string(name='Message', example='-'),
    }
  ](name='Errors'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', description='requestId', example='84118BF0-56F7-54D2-8C1A-35BBBBD5016B'),
  success?: boolean(name='Success', example='True'),
}

model DeleteWatermarkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWatermarkResponseBody(name='body'),
}

async function deleteWatermark(request: DeleteWatermarkRequest): DeleteWatermarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWatermark', 'POST', '/', 'json', false, 'json', request);
}

model FaceCompareRequest {
  faceRequest?: {
    appId?: string(name='AppId', example='d61be709-49d2-4cf1-b219-cd6181f72***'),
    sourceImage?: string(name='SourceImage', example='/9j/4AAQSkZJRgABAQAASxxxxxxx'),
    targetImage?: string(name='TargetImage', example='/9j/4AAQSkZJRgABAQAASxxxxxxx'),
  }(name='FaceRequest', shrink='json', position='Body'),
}

model FaceCompareResponseBody = {
  code?: int32(name='Code', example='OK'),
  data?: {
    code?: string(name='Code', example='200'),
    id?: string(name='Id', description='ID', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
    message?: string(name='Message', example='-'),
    passed?: string(name='Passed', example='T'),
    requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
    status?: string(name='Status', example='completed'),
    verifyScore?: float(name='VerifyScore', example='60.86'),
  }(name='Data'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4ba***'),
  success?: boolean(name='Success', example='True'),
}

model FaceCompareResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FaceCompareResponseBody(name='body'),
}

async function faceCompare(request: FaceCompareRequest): FaceCompareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FaceCompare', 'POST', '/', 'json', true, 'form', request);
}

model FaceLivenessRequest {
  faceRequest: {
    appId: string(name='AppId', example='d61be709-49d2-4cf1-b219-cd6181f72***'),
    sourceImage: string(name='SourceImage', example='/9j/4AAQSkZJRgABAQAASxxxxxxx'),
  }(name='FaceRequest', shrink='json', position='Body'),
}

model FaceLivenessResponseBody = {
  code?: int32(name='Code', example='OK'),
  data?: {
    code?: string(name='Code', example='2000000'),
    message?: string(name='Message', example='success'),
    passed?: string(name='Passed', example='T'),
    publicId?: string(name='PublicId', example='d61be709-49d2-4cf1-b219-cd6181f72***'),
    score?: float(name='Score', example='3.24324324324'),
    status?: string(name='Status', example='COMPLETED'),
  }(name='Data'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', example='7AC54DAF-38F8-58C7-8383-3131FEDDA***'),
  success?: boolean(name='Success', example='True'),
}

model FaceLivenessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FaceLivenessResponseBody(name='body'),
}

async function faceLiveness(request: FaceLivenessRequest): FaceLivenessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FaceLiveness', 'POST', '/', 'json', true, 'form', request);
}

model FaceRecognizeRequest {
  faceRequest: {
    appId: string(name='AppId', example='d61be709-49d2-4cf1-b219-cd6181f72***'),
    liveness?: boolean(name='Liveness', example='true'),
    sourceImage: string(name='SourceImage', example='/9j/4AAQSkZJRgABAQAASxxxxxxx'),
    targetImage: string(name='TargetImage', example='/9j/4AAQSkZJRgABAQAASxxxxxxx'),
  }(name='FaceRequest', shrink='json', position='Body'),
}

model FaceRecognizeResponseBody = {
  code?: int32(name='Code', example='OK'),
  data?: {
    comparePassed?: string(name='ComparePassed', example='T'),
    compareScore?: float(name='CompareScore', example='32.435'),
    livenessPassed?: string(name='LivenessPassed', example='T'),
    livenessScore?: float(name='LivenessScore', example='56.34'),
  }(name='Data'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4ba***'),
  success?: boolean(name='Success', example='True'),
}

model FaceRecognizeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FaceRecognizeResponseBody(name='body'),
}

async function faceRecognize(request: FaceRecognizeRequest): FaceRecognizeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FaceRecognize', 'POST', '/', 'json', true, 'form', request);
}

model GetAppRequest {
  clientBaseParam?: string(name='ClientBaseParam', example='{"version":"1.0.0"}', position='Query'),
  clientVersion?: string(name='ClientVersion', example='1.0.002', position='Query'),
  deviceId: string(name='DeviceId', example='xxx-xxx-xxx', position='Query'),
  id: string(name='Id', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38', position='Query'),
  packageName: string(name='PackageName', example='com.a.test', position='Query'),
}

model GetAppResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    config?: string(name='Config', example='{}'),
    createdAt?: string(name='CreatedAt', example='1'),
    disabled?: string(name='Disabled', example='false'),
    feeId?: string(name='FeeId', example='ff1d7783-e087-4d62-92df-3a163eca7c07'),
    name?: string(name='Name'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
}

model GetAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAppResponseBody(name='body'),
}

async function getApp(request: GetAppRequest): GetAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApp', 'POST', '/', 'json', false, 'json', request);
}

model GetAsrResultRequest {
  asrTaskId: string(name='AsrTaskId', example='B2AADC9E-2A58-5918-AE4E-FF59E19D7***', position='Query'),
}

model GetAsrResultResponseBody = {
  code?: int32(name='Code', example='OK'),
  data?: {
    result?: string(name='Result'),
  }(name='Data'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', example='C14ED32C-B9E4-54E7-BA85-C2B562C5B***'),
  success?: boolean(name='Success', example='True'),
}

model GetAsrResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAsrResultResponseBody(name='body'),
}

async function getAsrResult(request: GetAsrResultRequest): GetAsrResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAsrResult', 'POST', '/', 'json', false, 'json', request);
}

model GetDepartmentRequest {
  clientBaseParam?: string(name='ClientBaseParam', example='{"version":"1.0.0"}', position='Query'),
  id: string(name='Id', description='ID', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38', position='Query'),
}

model GetDepartmentResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
    description?: string(name='Description'),
    id?: string(name='Id', description='ID', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
    name?: string(name='Name'),
    updatedAt?: string(name='UpdatedAt', example='2020-07-14T14:01:41.000+08:00'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
}

model GetDepartmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDepartmentResponseBody(name='body'),
}

async function getDepartment(request: GetDepartmentRequest): GetDepartmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDepartment', 'POST', '/', 'json', false, 'json', request);
}

model GetDetectProcessRequest {
  clientBaseParam?: string(name='ClientBaseParam', example='{"version":"1.0.0"}', position='Query'),
  id: string(name='Id', description='ID', example='0f1c45cd-3eee-4e60-b505-2e330b87****', position='Query'),
}

model GetDetectProcessResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    content?: string(name='Content', example='{}'),
    createdAt?: string(name='CreatedAt', example='2020-12-04T14:47:59.000+08:00'),
    draft?: string(name='Draft', example='{}'),
    id?: string(name='Id', description='ID', example='0f1c45cd-3eee-4e60-b505-2e330b8755d3'),
    md5?: string(name='Md5', example='987d563d38f5aef27feca8702c689bb1'),
    name?: string(name='Name'),
    newVersion?: boolean(name='NewVersion', example='true'),
    updatedAt?: string(name='UpdatedAt', example='2020-12-04T14:47:59.000+08:00'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='0q1c45cd-3eee-1e60-b505-2e330b8755d3'),
}

model GetDetectProcessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDetectProcessResponseBody(name='body'),
}

async function getDetectProcess(request: GetDetectProcessRequest): GetDetectProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDetectProcess', 'POST', '/', 'json', false, 'json', request);
}

model GetDetectProcessJsonFileRequest {
  clientBaseParam?: string(name='ClientBaseParam', example='{"version":"1.0.0"}', position='Query'),
  id: string(name='Id', description='ID', example='hpsk3wdo-2020122319', position='Body'),
}

model GetDetectProcessJsonFileResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='-'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', example='B2695011-0604-5557-9E00-B74F58AB3F2B'),
}

model GetDetectProcessJsonFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDetectProcessJsonFileResponseBody(name='body'),
}

async function getDetectProcessJsonFile(request: GetDetectProcessJsonFileRequest): GetDetectProcessJsonFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDetectProcessJsonFile', 'POST', '/', 'json', true, 'form', request);
}

model GetDetectionRequest {
  clientBaseParam?: string(name='ClientBaseParam', example='{"version":"1.0.0"}', position='Query'),
  id: string(name='Id', description='ID', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38', position='Query'),
}

model GetDetectionResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
    departmentId?: string(name='DepartmentId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
    departmentName?: string(name='DepartmentName'),
    id?: string(name='Id', description='ID', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
    recordingType?: string(name='RecordingType', example='local'),
    ruleId?: string(name='RuleId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
    ruleName?: string(name='RuleName', example='default'),
    status?: string(name='Status', example='runnable'),
    tasks?: [ 
      {
        createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
        id?: string(name='Id', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
        status?: string(name='Status', example='runnable'),
        videoMetaUrl?: string(name='VideoMetaUrl', example='http://oss.aliyun.com/1.mp4.meta'),
        videoUrl?: string(name='VideoUrl', example='http://oss.aliyun.com/1.mp4'),
      }
    ](name='Tasks'),
  }(name='Data', description='-'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
}

model GetDetectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDetectionResponseBody(name='body'),
}

async function getDetection(request: GetDetectionRequest): GetDetectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDetection', 'POST', '/', 'json', false, 'json', request);
}

model GetPreSignedUrlRequest {
  clientBaseParam?: string(name='ClientBaseParam', example='{"version":"1.0.0"}', position='Query'),
  clientVersion?: string(name='ClientVersion', example='1.0.001', position='Query'),
  prefix?: string(name='Prefix', example='test.mp4', position='Body'),
}

model GetPreSignedUrlResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='http://shuanglu-pre.oss-cn-beijing.aliyuncs.com/13ba4081-84f3-42b0-af93-10a64319f8ef/test.txt'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
}

model GetPreSignedUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPreSignedUrlResponseBody(name='body'),
}

async function getPreSignedUrl(request: GetPreSignedUrlRequest): GetPreSignedUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPreSignedUrl', 'POST', '/', 'json', true, 'form', request);
}

model GetRecordResultRequest {
  clientBaseParam?: string(name='ClientBaseParam', example='{"version":"1.0.0"}', position='Query'),
  recordId: string(name='RecordId', example='A1899517-BB99-5D3E-A71B-97524DCB0942', position='Query'),
}

model GetRecordResultResponseBody = {
  code?: string(name='Code', description='code', example='OK'),
  data?: {
    appName?: string(name='AppName'),
    createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
    departmentName?: string(name='DepartmentName'),
    detectProcessName?: string(name='DetectProcessName'),
    duration?: long(name='Duration', example='22'),
    id?: string(name='Id', example='0f1c45cd-3eee-4e60-b505-2e330b8755d3'),
    metaUrl?: string(name='MetaUrl', example='http://oss.aliyuncs.com/1.mp4.meta'),
    outerBusinessId?: string(name='OuterBusinessId', example='ads32efef43'),
    recordAt?: string(name='RecordAt', example='2020-07-14T14:01:41.000+08:00'),
    recordRoomList?: [ 
      {
        outerBusinessId?: string(name='OuterBusinessId', example='ads32efef43'),
        recordType?: string(name='RecordType', example='Mix'),
        role?: string(name='Role', example='21343'),
        roomMetaUrl?: string(name='RoomMetaUrl', example='http://oss.aliyuncs.com/1.mp4.meta'),
        roomRecordAt?: string(name='RoomRecordAt', example='2020-07-14T14:01:41.000+08:00'),
        roomResultUrl?: string(name='RoomResultUrl', example='http://oss.aliyuncs.com/1.mp4.json'),
        roomStatus?: string(name='RoomStatus', example='runnable'),
        roomVideoUrl?: string(name='RoomVideoUrl', example='http://oss.aliyuncs.com/1.mp4'),
        rtcRecordId?: string(name='RtcRecordId', example='record_65703154805715668342'),
      }
    ](name='RecordRoomList'),
    resultUrl?: string(name='ResultUrl', example='http://oss.aliyuncs.com/1.mp4.json'),
    roomId?: string(name='RoomId', example='641981583353***'),
    status?: string(name='Status', example='completed'),
    videoUrl?: string(name='VideoUrl', example='http://oss.aliyuncs.com/1.mp4'),
  }(name='Data'),
  errors?: [ 
    {
      field?: string(name='Field', example='0f1c45cd-3eee-4e60-b505-2e330b8755d3'),
      message?: string(name='Message'),
    }
  ](name='Errors'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='requestId', example='84118BF0-56F7-54D2-8C1A-35BBBBD5016B'),
  success?: boolean(name='Success', example='True'),
}

model GetRecordResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRecordResultResponseBody(name='body'),
}

async function getRecordResult(request: GetRecordResultRequest): GetRecordResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRecordResult', 'POST', '/', 'json', false, 'json', request);
}

model GetRecordsByFeeIdRequest {
  feeId?: string(name='FeeId', example='6c94f2a7-632d-4ea0-aa06-a97800a9060f', position='Body'),
}

model GetRecordsByFeeIdResponseBody = {
  code?: string(name='Code', description='code', example='OK'),
  data?: [ 
    {
      appName?: string(name='AppName'),
      createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
      departmentName?: string(name='DepartmentName'),
      detectProcessName?: string(name='DetectProcessName'),
      duration?: long(name='Duration', example='22'),
      id?: string(name='Id', example='63bb629d-92bf-4cdc-ad0b-3032c926d23f'),
      metaUrl?: string(name='MetaUrl', example='http://oss.aliyuncs.com/1.mp4.meta'),
      outerBusinessId?: string(name='OuterBusinessId', example='ads32efef43'),
      recordAt?: string(name='RecordAt', example='2020-07-14T14:01:41.000+08:00'),
      recordRoomList?: [ 
        {
          outerBusinessId?: string(name='OuterBusinessId', example='ads32efef43'),
          recordType?: string(name='RecordType', example='Mix'),
          role?: string(name='Role', example='21343'),
          roomMetaUrl?: string(name='RoomMetaUrl', example='http://oss.aliyuncs.com/1.mp4.meta'),
          roomRecordAt?: string(name='RoomRecordAt', example='2020-07-14T14:01:41.000+08:00'),
          roomResultUrl?: string(name='RoomResultUrl', example='http://oss.aliyuncs.com/1.mp4.json'),
          roomStatus?: string(name='RoomStatus', example='runnable'),
          roomVideoUrl?: string(name='RoomVideoUrl', example='http://oss.aliyuncs.com/1.mp4'),
          rtcRecordId?: string(name='RtcRecordId', example='record_65703154805715668342'),
        }
      ](name='RecordRoomList'),
      resultUrl?: string(name='ResultUrl', example='http://oss.aliyuncs.com/1.mp4.json'),
      roomId?: string(name='RoomId', example='654078150345590'),
      status?: string(name='Status', example='completed'),
      videoUrl?: string(name='VideoUrl', example='http://oss.aliyuncs.com/1.mp4'),
    }
  ](name='Data'),
  errors?: [ 
    {
      field?: string(name='Field', example='A1899517-BB99-5D3E-A71B-97524DCB0942'),
      message?: string(name='Message', example='-'),
    }
  ](name='Errors'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', description='requestId', example='0B576AAB-A638-5029-9A54-A7C1DB5AC0B3'),
  success?: boolean(name='Success', example='True'),
}

model GetRecordsByFeeIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRecordsByFeeIdResponseBody(name='body'),
}

async function getRecordsByFeeId(request: GetRecordsByFeeIdRequest): GetRecordsByFeeIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRecordsByFeeId', 'POST', '/', 'json', true, 'form', request);
}

model GetRecordsByOuterBusinessIdRequest {
  outerBusinessId: string(name='OuterBusinessId', example='ads32efef43', position='Query'),
}

model GetRecordsByOuterBusinessIdResponseBody = {
  code?: string(name='Code', description='code', example='OK'),
  data?: [ 
    {
      appName?: string(name='AppName'),
      createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
      departmentName?: string(name='DepartmentName'),
      detectProcessName?: string(name='DetectProcessName'),
      duration?: long(name='Duration', example='22'),
      id?: string(name='Id', example='0f1c45cd-3eee-4e60-b505-2e330b875***'),
      metaUrl?: string(name='MetaUrl', example='http://oss.aliyuncs.com/1.mp4.meta'),
      outerBusinessId?: string(name='OuterBusinessId', example='ads32efef43'),
      recordAt?: string(name='RecordAt', example='2020-07-14T14:01:41.000+08:00'),
      recordRoomList?: [ 
        {
          outerBusinessId?: string(name='OuterBusinessId', example='ads32efef43'),
          recordType?: string(name='RecordType', example='Mix'),
          role?: string(name='Role', example='user'),
          roomMetaUrl?: string(name='RoomMetaUrl', example='http://oss.aliyuncs.com/1.mp4.meta'),
          roomRecordAt?: string(name='RoomRecordAt', example='2020-07-14T14:01:41.000+08:00'),
          roomResultUrl?: string(name='RoomResultUrl', example='http://oss.aliyuncs.com/1.mp4.json'),
          roomStatus?: string(name='RoomStatus', example='1'),
          roomVideoUrl?: string(name='RoomVideoUrl', example='http://oss.aliyuncs.com/1.mp4'),
          rtcRecordId?: string(name='RtcRecordId', example='record_65703154805715668342'),
        }
      ](name='RecordRoomList'),
      resultUrl?: string(name='ResultUrl', example='http://oss.aliyuncs.com/1.mp4.json'),
      roomId?: string(name='RoomId', example='641981583353***'),
      status?: string(name='Status', example='COMPLETED'),
      videoUrl?: string(name='VideoUrl', example='http://oss.aliyuncs.com/1.mp4'),
    }
  ](name='Data'),
  errors?: [ 
    {
      field?: string(name='Field', example='A1899517-BB99-5D3E-A71B-97524DCB0***'),
      message?: string(name='Message', example='-'),
    }
  ](name='Errors'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', description='requestId', example='0f1c45cd-3eee-4e60-b505-2e330b875***'),
  success?: boolean(name='Success', example='True'),
}

model GetRecordsByOuterBusinessIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRecordsByOuterBusinessIdResponseBody(name='body'),
}

async function getRecordsByOuterBusinessId(request: GetRecordsByOuterBusinessIdRequest): GetRecordsByOuterBusinessIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRecordsByOuterBusinessId', 'POST', '/', 'json', false, 'json', request);
}

model GetRuleRequest {
  clientBaseParam?: string(name='ClientBaseParam', example='{"version":"1.0.0"}', position='Query'),
  id: string(name='Id', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38', position='Query'),
}

model GetRuleResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    content?: string(name='Content', example='{}'),
    createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
    id?: string(name='Id', description='ID', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
    name?: string(name='Name', example='default'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
}

model GetRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRuleResponseBody(name='body'),
}

async function getRule(request: GetRuleRequest): GetRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRule', 'POST', '/', 'json', false, 'json', request);
}

model GetStatisticsRecordsByFeeIdRequest {
  feeId?: string(name='FeeId', example='ab7ce59f-a68a-4a6f-82a6-6460fadc9a70', position='Body'),
}

model GetStatisticsRecordsByFeeIdResponseBody = {
  code?: string(name='Code', description='code', example='OK'),
  data?: [ 
    {
      appId?: long(name='AppId', description='appid', example='12'),
      beginAt?: string(name='BeginAt', example='2022-05-23 10:33:12'),
      chargeDuration?: int32(name='ChargeDuration', example='12'),
      createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
      departmentId?: long(name='DepartmentId', example='12'),
      detectionDuration?: int32(name='DetectionDuration', example='1200'),
      deviceId?: string(name='DeviceId', example='7f3dfb9aa0dd0261'),
      deviceType?: int32(name='DeviceType', example='0'),
      endAt?: string(name='EndAt', example='2022-03-24 11:39:46'),
      feeId?: string(name='FeeId', example='ff1d7783-e087-4d62-92df-3a163eca7c07'),
      hour?: int32(name='Hour', example='2020050811'),
      tenantId?: long(name='TenantId', example='1'),
      type?: string(name='Type', example='REMOTE'),
      updatedAt?: string(name='UpdatedAt', example='2020-07-14T14:01:41.000+08:00'),
    }
  ](name='Data'),
  errors?: [ 
    {
      field?: string(name='Field', example='-'),
      message?: string(name='Message', example='-'),
    }
  ](name='Errors'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', description='requestId', example='CAD43A24-D34C-5848-BEB0-3D184F6687B1'),
  success?: boolean(name='Success', example='True'),
}

model GetStatisticsRecordsByFeeIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetStatisticsRecordsByFeeIdResponseBody(name='body'),
}

async function getStatisticsRecordsByFeeId(request: GetStatisticsRecordsByFeeIdRequest): GetStatisticsRecordsByFeeIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStatisticsRecordsByFeeId', 'POST', '/', 'json', true, 'form', request);
}

model GetTaskRequest {
  clientBaseParam?: string(name='ClientBaseParam', example='{"version":"1.0.0"}', position='Query'),
  taskId: string(name='TaskId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38', position='Query'),
}

model GetTaskResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
    id?: string(name='Id', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
    status?: string(name='Status', example='runnable'),
    videoUrl?: string(name='VideoUrl', example='http://oss.aliyuncs.com/1.mp4'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A1899517-BB99-5D3E-A71B-97524DCB0942'),
}

model GetTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskResponseBody(name='body'),
}

async function getTask(request: GetTaskRequest): GetTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTask', 'POST', '/', 'json', false, 'json', request);
}

model GetTaskGroupRequest {
  clientBaseParam?: string(name='ClientBaseParam', example='{"version":"1.0.0"}', position='Query'),
  id: string(name='Id', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38', position='Query'),
}

model GetTaskGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    completedTasks?: int32(name='CompletedTasks', example='1'),
    createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
    id?: string(name='Id', description='ID', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
    name?: string(name='Name'),
    ruleId?: string(name='RuleId', example='2020-07-14T14:01:41.000+08:00'),
    ruleName?: string(name='RuleName', example='default'),
    status?: string(name='Status', example='runnable'),
    taskIds?: [ string ](name='TaskIds', description='-'),
    totalTasks?: int32(name='TotalTasks', example='1'),
  }(name='Data', description='-'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
}

model GetTaskGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskGroupResponseBody(name='body'),
}

/**
  * **1**
  *
 */
async function getTaskGroup(request: GetTaskGroupRequest): GetTaskGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTaskGroup', 'POST', '/', 'json', false, 'json', request);
}

model GetTtsQuestionByGroupIdRequest {
  groupId: string(name='GroupId', example='47584ba4-9781-496b-8e6f-c8525a213***', position='Body'),
}

model GetTtsQuestionByGroupIdResponseBody = {
  code?: int32(name='Code', example='OK'),
  data?: {
    groupId?: string(name='GroupId', example='47584ba4-9781-496b-8e6f-c8525a213***'),
    questions?: [ 
      {
        answer?: string(name='Answer'),
        duration?: double(name='Duration', example='674'),
        id?: long(name='Id', example='1'),
        ossUrl?: string(name='OssUrl', example='https://pts-data-f***.pcm'),
        question?: string(name='Question'),
        questionGroupId?: long(name='QuestionGroupId', example='47584ba4-9781-496b-8e6f-c8525a213***'),
        questionKey?: string(name='QuestionKey', example='47584ba4-9781-496b-8e6f-c8525a213***'),
        tenantId?: long(name='TenantId', example='2'),
      }
    ](name='Questions'),
  }(name='Data'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', example='D2DFCDC3-1ECF-599D-8EDA-8F598E5A9***'),
  success?: boolean(name='Success', example='True'),
}

model GetTtsQuestionByGroupIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTtsQuestionByGroupIdResponseBody(name='body'),
}

async function getTtsQuestionByGroupId(request: GetTtsQuestionByGroupIdRequest): GetTtsQuestionByGroupIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTtsQuestionByGroupId', 'POST', '/', 'json', true, 'form', request);
}

model GetUserRequest {
  clientBaseParam?: string(name='ClientBaseParam', example='{"version":"1.0.0"}', position='Query'),
  id: string(name='Id', description='ID', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38', position='Query'),
}

model GetUserResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
    departments?: [ 
      {
        description?: string(name='Description'),
        gmtCreate?: string(name='GmtCreate', example='2020-07-14T14:01:41.000+08:00'),
        gmtModified?: string(name='GmtModified', example='2020-07-14T14:01:41.000+08:00'),
        id?: string(name='Id', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
        name?: string(name='Name'),
      }
    ](name='Departments'),
    email?: string(name='Email', example='xxx@aa.com'),
    id?: string(name='Id', description='ID', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
    name?: string(name='Name'),
    phoneNumber?: string(name='PhoneNumber', example='187000023323'),
    role?: string(name='Role', example='admin'),
    source?: string(name='Source', example='ram'),
    updatedAt?: string(name='UpdatedAt', example='2020-07-14T14:01:41.000+08:00'),
    username?: string(name='Username', example='test'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
}

model GetUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserResponseBody(name='body'),
}

async function getUser(request: GetUserRequest): GetUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUser', 'POST', '/', 'json', false, 'json', request);
}

model GetVideoMergeTaskRequest {
  taskId: string(name='TaskId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38', position='Body'),
}

model GetVideoMergeTaskResponseBody = {
  code?: string(name='Code', description='code', example='OK'),
  data?: {
    clientTraceId?: string(name='ClientTraceId', example='2fr4fa55-2364-4d79-aeb4-c093ec4a4fd4'),
    duration?: float(name='Duration', example='22'),
    height?: int32(name='Height', example='0.6'),
    mergeFileId?: string(name='MergeFileId', example='http://xxx.mp4'),
    taskId?: string(name='TaskId', example='368cfa55-2364-4d79-aeb4-c0956c4a45cd'),
    width?: int32(name='Width', example='0.6'),
  }(name='Data'),
  errors?: [ 
    {
      field?: string(name='Field', example='A1899517-BB99-5D3E-A71B-97524DCB0942'),
      message?: string(name='Message', example='-'),
    }
  ](name='Errors'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', description='requestId', example='89A61EB9-2FF8-595D-89D3-845C8B615011'),
  success?: boolean(name='Success', example='True'),
}

model GetVideoMergeTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVideoMergeTaskResponseBody(name='body'),
}

async function getVideoMergeTask(request: GetVideoMergeTaskRequest): GetVideoMergeTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVideoMergeTask', 'POST', '/', 'json', true, 'form', request);
}

model GetWatermarkRequest {
  clientBaseParam?: string(name='ClientBaseParam', example='{"version":"1.0.0"}', position='Query'),
  clientVersion?: string(name='ClientVersion', example='1.0.003', position='Query'),
  watermarkId?: string(name='WatermarkId', example='728fd812a876ec04818858982baebe6f', position='Query'),
}

model GetWatermarkResponseBody = {
  code?: string(name='Code', description='code', example='OK'),
  data?: {
    createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
    id?: string(name='Id', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
    name?: string(name='Name'),
    value?: string(name='Value', example='{}'),
  }(name='Data'),
  errors?: [ 
    {
      field?: string(name='Field', example='A1899517-BB99-5D3E-A71B-97524DCB0942'),
      message?: string(name='Message', example='-'),
    }
  ](name='Errors'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', description='requestId', example='84118BF0-56F7-54D2-8C1A-35BBBBD5016B'),
  success?: boolean(name='Success', example='True'),
}

model GetWatermarkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWatermarkResponseBody(name='body'),
}

async function getWatermark(request: GetWatermarkRequest): GetWatermarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWatermark', 'POST', '/', 'json', false, 'json', request);
}

model JoinRoomRequest {
  appId: string(name='AppId', example='4a29b426-742f-4078-8386-79b440b***', position='Query'),
  roomId: string(name='RoomId', example='66194***681868', position='Query'),
  roomToken?: string(name='RoomToken', example='006f4***b269', position='Query'),
  streamId?: string(name='StreamId', example='12312***2412', position='Query'),
}

model JoinRoomResponseBody = {
  code?: int32(name='Code', example='OK'),
  data?: {
    roomId?: string(name='RoomId', example='641981583353***'),
    streamId?: string(name='StreamId', example='12312***412'),
  }(name='Data'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', example='D15744FC-97D2-5D61-A18C-8CC4FA0A3***'),
  success?: boolean(name='Success', example='True'),
}

model JoinRoomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: JoinRoomResponseBody(name='body'),
}

async function joinRoom(request: JoinRoomRequest): JoinRoomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'JoinRoom', 'POST', '/', 'json', false, 'json', request);
}

model LeaveRoomRequest {
  roomId?: string(name='RoomId', example='661940620884***', position='Query'),
}

model LeaveRoomResponseBody = {
  code?: int32(name='Code', example='OK'),
  data?: string(name='Data'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='8F5F961D-07AA-5293-BFFE-32CDC251***'),
  success?: boolean(name='Success', example='True'),
}

model LeaveRoomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LeaveRoomResponseBody(name='body'),
}

async function leaveRoom(request: LeaveRoomRequest): LeaveRoomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LeaveRoom', 'POST', '/', 'json', false, 'json', request);
}

model ListAppsRequest {
  pageIndex?: int32(name='PageIndex', example='1', minimum=1, maximum=1000000, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=10, maximum=10000, position='Query'),
}

model ListAppsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    items?: [ 
      {
        createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
        departmentId?: string(name='DepartmentId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
        departmentName?: string(name='DepartmentName'),
        disabled?: boolean(name='Disabled', example='false'),
        id?: string(name='Id', description='ID', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
        name?: string(name='Name'),
        packageName?: string(name='PackageName', example='com.aaa.test'),
      }
    ](name='Items'),
    totalElements?: long(name='TotalElements', example='1'),
    totalPages?: int32(name='TotalPages', example='11'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
}

model ListAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAppsResponseBody(name='body'),
}

async function listApps(request: ListAppsRequest): ListAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApps', 'POST', '/', 'json', false, 'json', request);
}

model ListDepartmentsRequest {
  name?: string(name='Name', position='Query'),
  pageIndex?: int32(name='PageIndex', example='1', minimum=1, maximum=10000, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=10, maximum=100, position='Query'),
  userId?: string(name='UserId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38', position='Query'),
}

model ListDepartmentsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    items?: [ 
      {
        administrators?: [ 
          {
            id?: string(name='Id', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
            name?: string(name='Name', example='user'),
          }
        ](name='Administrators'),
        createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
        description?: string(name='Description'),
        id?: string(name='Id', description='ID', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
        name?: string(name='Name'),
        updatedAt?: string(name='UpdatedAt', example='2020-07-14T14:01:41.000+08:00'),
      }
    ](name='Items'),
    totalElements?: long(name='TotalElements', example='1'),
    totalPages?: int32(name='TotalPages', example='11'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
}

model ListDepartmentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDepartmentsResponseBody(name='body'),
}

async function listDepartments(request: ListDepartmentsRequest): ListDepartmentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDepartments', 'POST', '/', 'json', false, 'json', request);
}

model ListDetectProcessesRequest {
  name?: string(name='Name', position='Query'),
  pageIndex?: int32(name='PageIndex', example='1', minimum=1, maximum=10000, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=10, maximum=500, position='Query'),
  publishStatus?: boolean(name='PublishStatus', example='true', position='Query'),
  sort?: string(name='Sort', example='desc', position='Query'),
  sortKey?: string(name='SortKey', example='CONTENT', position='Query'),
  type?: string(name='Type', example='LOCAL', position='Query'),
}

model ListDetectProcessesResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    items?: [ 
      {
        content?: string(name='Content', example='{}'),
        contentAt?: string(name='ContentAt', example='2020-12-04T14:48:59.000+08:00'),
        createdAt?: string(name='CreatedAt', example='2020-12-04T14:47:59.000+08:00'),
        draft?: string(name='Draft', example='{}'),
        draftAt?: string(name='DraftAt', example='2020-12-04T14:48:59.000+08:00'),
        fileUrl?: string(name='FileUrl', example='http://abc.com/123.json'),
        id?: string(name='Id', description='ID', example='0f1c45cd-3eee-4e60-b505-2e330b8755d3'),
        md5?: string(name='Md5', example='987d563d38f5aef27feca8702c689bb1'),
        name?: string(name='Name'),
        newVersion?: boolean(name='NewVersion', example='true'),
        published?: boolean(name='Published', example='True'),
        type?: string(name='Type', example='REMOTE'),
        updatedAt?: string(name='UpdatedAt', example='2020-12-04T14:48:59.000+08:00'),
      }
    ](name='Items'),
    totalElements?: long(name='TotalElements', example='100'),
    totalPages?: int32(name='TotalPages', example='10'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='bf1c45cd-3eee-4e60-b505-2e330bf755d3'),
}

model ListDetectProcessesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDetectProcessesResponseBody(name='body'),
}

async function listDetectProcesses(request: ListDetectProcessesRequest): ListDetectProcessesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDetectProcesses', 'POST', '/', 'json', false, 'json', request);
}

model ListDetectionsRequest {
  createDateFrom?: string(name='CreateDateFrom', example='2020-10-10', position='Query'),
  createDateTo?: string(name='CreateDateTo', example='2020-10-11', position='Query'),
  departmentId?: string(name='DepartmentId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38', position='Query'),
  pageIndex?: int32(name='PageIndex', example='1', minimum=1, maximum=10000, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=10, maximum=100, position='Query'),
  recordingType?: string(name='RecordingType', example='local', position='Query'),
  ruleId?: string(name='RuleId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38', position='Query'),
}

model ListDetectionsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    items?: [ 
      {
        createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
        departmentId?: string(name='DepartmentId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
        departmentName?: string(name='DepartmentName'),
        id?: string(name='Id', description='ID', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
        recordingType?: string(name='RecordingType', example='local'),
        ruleId?: string(name='RuleId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
        ruleName?: string(name='RuleName', example='default'),
        status?: string(name='Status', example='runnable'),
        tasks?: [ 
          {
            createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
            id?: string(name='Id', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
            status?: string(name='Status', example='runnable'),
            videoMetaUrl?: string(name='VideoMetaUrl', example='http://oss.aliyuncs.com/1.mp4.meta'),
            videoUrl?: string(name='VideoUrl', example='http://oss.aliyuncs.com/1.mp4'),
          }
        ](name='Tasks'),
      }
    ](name='Items'),
    totalElements?: long(name='TotalElements', example='1'),
    totalPages?: int32(name='TotalPages', example='11'),
  }(name='Data', description='-'),
  errors?: [ 
    {
      field?: string(name='Field', example='status'),
      message?: string(name='Message', example='-'),
    }
  ](name='Errors', description='-'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
}

model ListDetectionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDetectionsResponseBody(name='body'),
}

async function listDetections(request: ListDetectionsRequest): ListDetectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDetections', 'POST', '/', 'json', false, 'json', request);
}

model ListFilesRequest {
  limit?: int32(name='Limit', example='500', minimum=1, maximum=1000, position='Query'),
  prefix?: string(name='Prefix', example='20220110/', position='Query'),
}

model ListFilesResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='[\\"d0388a41-30c6-4c74-af83-a1f923ce1725/process/\\", \\"d0388a41-30c6-4c74-af83-a1f923ce1725/video_12_14_09_05_41.mp4\\", \\"d0388a41-30c6-4c74-af83-a1f923ce1725/video_12_14_09_05_41.mp4.meta\\"]'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
}

model ListFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFilesResponseBody(name='body'),
}

async function listFiles(request: ListFilesRequest): ListFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFiles', 'POST', '/', 'json', false, 'json', request);
}

model ListRecordResultsRequest {
  createDateFrom?: string(name='CreateDateFrom', example='2020-10-10', position='Query'),
  createDateTo?: string(name='CreateDateTo', example='2020-10-11', position='Query'),
  departmentId?: string(name='DepartmentId', example='90c2459a-4c73-4ab7-8a6b-e550d62fbd8c', position='Query'),
  outerBusinessId?: string(name='OuterBusinessId', example='ads32efef43', position='Query'),
  pageIndex?: int32(name='PageIndex', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  recordId?: string(name='RecordId', example='A1899517-BB99-5D3E-A71B-97524DCB0942', position='Query'),
  type?: string(name='Type', example='LOCAL', position='Query'),
}

model ListRecordResultsResponseBody = {
  code?: string(name='Code', description='code', example='OK'),
  data?: {
    items?: [ 
      {
        appName?: string(name='AppName', example='myapp'),
        createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
        departmentName?: string(name='DepartmentName'),
        detectProcessName?: string(name='DetectProcessName', example='process name'),
        duration?: long(name='Duration', example='22'),
        id?: string(name='Id', example='A1899517-BB99-5D3E-A71B-97524DCB0942'),
        metaUrl?: string(name='MetaUrl', example='http://oss.aliyuncs.com/1.mp4.meta'),
        outerBusinessId?: string(name='OuterBusinessId', example='fasfasda'),
        recordAt?: string(name='RecordAt', example='2020-07-14T14:01:41.000+08:00'),
        resultUrl?: string(name='ResultUrl', example='http://oss.aliyuncs.com/1.mp4.json'),
        roomId?: string(name='RoomId', example='642662467657798'),
        rtcRecordId?: string(name='RtcRecordId', example='record_65703154805715668342'),
        status?: string(name='Status', example='runnable'),
        videoUrl?: string(name='VideoUrl', example='http://oss.aliyuncs.com/1.mp4'),
      }
    ](name='Items'),
    totalElements?: long(name='TotalElements', example='10'),
    totalPages?: int32(name='TotalPages', example='11'),
  }(name='Data'),
  errors?: [ 
    {
      field?: string(name='Field', example='A1899517-BB99-5D3E-A71B-97524DCB0942'),
      message?: string(name='Message'),
    }
  ](name='Errors'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='requestId', example='A1899517-BB99-5D3E-A71B-97524DCB0942'),
  success?: boolean(name='Success', example='True'),
}

model ListRecordResultsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRecordResultsResponseBody(name='body'),
}

async function listRecordResults(request: ListRecordResultsRequest): ListRecordResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRecordResults', 'POST', '/', 'json', false, 'json', request);
}

model ListRulesRequest {
  pageIndex?: int32(name='PageIndex', example='1', minimum=1, maximum=10000, position='Query'),
  pageSize?: int32(name='PageSize', example='1', minimum=10, maximum=100, position='Query'),
}

model ListRulesResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    items?: [ 
      {
        content?: string(name='Content', example='{}'),
        createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
        id?: string(name='Id', description='ID', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
        name?: string(name='Name', example='default'),
      }
    ](name='Items'),
    totalElements?: long(name='TotalElements', example='1'),
    totalPages?: int32(name='TotalPages', example='1'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
}

model ListRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRulesResponseBody(name='body'),
}

async function listRules(request: ListRulesRequest): ListRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRules', 'POST', '/', 'json', false, 'json', request);
}

model ListTaskGroupsRequest {
  pageIndex?: int32(name='PageIndex', example='1', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=10, maximum=1000, position='Query'),
  status?: string(name='Status', example='runnable', position='Query'),
}

model ListTaskGroupsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    items?: [ 
      {
        completedTasks?: int32(name='CompletedTasks', example='0'),
        createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
        id?: string(name='Id', description='ID', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
        name?: string(name='Name'),
        ruleId?: string(name='RuleId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
        ruleName?: string(name='RuleName', example='default'),
        status?: string(name='Status', example='runnable'),
        taskIds?: [ string ](name='TaskIds'),
        totalTasks?: int32(name='TotalTasks', example='1'),
      }
    ](name='Items'),
    totalElements?: long(name='TotalElements', example='1'),
    totalPages?: int32(name='TotalPages', example='1'),
  }(name='Data', description='-'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
}

model ListTaskGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTaskGroupsResponseBody(name='body'),
}

async function listTaskGroups(request: ListTaskGroupsRequest): ListTaskGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTaskGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListTaskItemsRequest {
  taskId: string(name='TaskId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38', position='Query'),
}

model ListTaskItemsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
      message?: string(name='Message'),
      name?: string(name='Name'),
      output?: string(name='Output', example='{}'),
      segmentSeq?: long(name='SegmentSeq', example='1'),
      status?: string(name='Status', example='completed'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
}

model ListTaskItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTaskItemsResponseBody(name='body'),
}

async function listTaskItems(request: ListTaskItemsRequest): ListTaskItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTaskItems', 'POST', '/', 'json', false, 'json', request);
}

model ListTasksRequest {
  pageIndex?: int32(name='PageIndex', example='1', minimum=1, maximum=10000, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=10, maximum=10000, position='Query'),
  taskGroupId?: string(name='TaskGroupId', example='1', position='Query'),
}

model ListTasksResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    items?: [ 
      {
        createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
        id?: string(name='Id', description='ID', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
        status?: string(name='Status', example='runnable'),
        videoMetaUrl?: string(name='VideoMetaUrl', example='http://oss.aliyuncs.com/1.mp4.meta?expire=2010323&sign=sf2324'),
        videoUrl?: string(name='VideoUrl', example='http://oss.aliyuncs.com/1.mp4?expire=2010323&sign=sf2324'),
      }
    ](name='Items'),
    totalElements?: long(name='TotalElements', example='1'),
    totalPages?: int32(name='TotalPages', example='1'),
  }(name='Data', description='-'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
}

model ListTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTasksResponseBody(name='body'),
}

async function listTasks(request: ListTasksRequest): ListTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTasks', 'POST', '/', 'json', false, 'json', request);
}

model ListUsersRequest {
  departmentId?: string(name='DepartmentId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38', position='Query'),
  pageIndex?: int32(name='PageIndex', example='1', minimum=1, maximum=10000, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=10, maximum=500, position='Query'),
  username?: string(name='Username', example='tom', position='Query'),
}

model ListUsersResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    items?: [ 
      {
        createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
        departments?: [ 
          {
            createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
            description?: string(name='Description'),
            id?: string(name='Id', description='ID', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
            name?: string(name='Name'),
            updatedAt?: string(name='UpdatedAt', example='2020-07-14T14:01:41.000+08:00'),
          }
        ](name='Departments'),
        email?: string(name='Email', example='a@a.com'),
        id?: string(name='Id', description='ID', example='2020-07-14T14:01:41.000+08:00'),
        name?: string(name='Name'),
        phoneNumber?: string(name='PhoneNumber', example='186000000'),
        ramUsername?: string(name='RamUsername', example='xxx'),
        role?: string(name='Role', example='admin'),
        source?: string(name='Source', example='ram'),
        updatedAt?: string(name='UpdatedAt', example='2020-07-14T14:01:41.000+08:00'),
        username?: string(name='Username', example='xxx'),
      }
    ](name='Items'),
    totalElements?: long(name='TotalElements', example='10'),
    totalPages?: int32(name='TotalPages', example='1'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
}

model ListUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUsersResponseBody(name='body'),
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsers', 'POST', '/', 'json', false, 'json', request);
}

model ListWatermarksRequest {
  pageIndex?: int32(name='PageIndex', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model ListWatermarksResponseBody = {
  code?: string(name='Code', description='code', example='OK'),
  data?: {
    items?: [ 
      {
        createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
        id?: string(name='Id', example='A1899517-BB99-5D3E-A71B-97524DCB0942'),
        name?: string(name='Name'),
        value?: string(name='Value', example='{}'),
      }
    ](name='Items'),
    totalElements?: long(name='TotalElements', example='1'),
    totalPages?: int32(name='TotalPages', example='1'),
  }(name='Data'),
  errors?: [ 
    {
      field?: string(name='Field', example='A1899517-BB99-5D3E-A71B-97524DCB0942'),
      message?: string(name='Message', example='-'),
    }
  ](name='Errors'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', description='requestId', example='A1899517-BB99-5D3E-A71B-97524DCB0942'),
  success?: boolean(name='Success', example='True'),
}

model ListWatermarksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWatermarksResponseBody(name='body'),
}

async function listWatermarks(request: ListWatermarksRequest): ListWatermarksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWatermarks', 'POST', '/', 'json', false, 'json', request);
}

model RenameDetectProcessRequest {
  id: string(name='Id', description='ID', example='1q1c45cd-3eee-1e60-b505-2e330b8755d2', position='Query'),
  name: string(name='Name', position='Query'),
}

model RenameDetectProcessResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    content?: string(name='Content', example='{}'),
    createdAt?: string(name='CreatedAt', example='2020-12-04T14:47:59.000+08:00'),
    draft?: string(name='Draft', example='{}'),
    id?: string(name='Id', description='ID', example='0f1c45cd-3eee-4e60-b505-2e330b8755d3'),
    md5?: string(name='Md5', example='987d563d38f5aef27feca8702c689bb1'),
    name?: string(name='Name'),
  }(name='Data'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', example='db1c45cd-3eee-1e60-b505-2e330b8755d2'),
}

model RenameDetectProcessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenameDetectProcessResponseBody(name='body'),
}

async function renameDetectProcess(request: RenameDetectProcessRequest): RenameDetectProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenameDetectProcess', 'POST', '/', 'json', false, 'json', request);
}

model TtsCommonRequest {
  ttsRequest?: {
    appId?: string(name='AppId', description='appid', example='d61be709-49d2-4cf1-b219-cd6181f72***'),
    format?: string(name='Format', example='WAV'),
    pitchRate?: int32(name='PitchRate', example='50'),
    sampleRate?: int32(name='SampleRate', example='16000'),
    speechRate?: int32(name='SpeechRate', example='50'),
    text?: string(name='Text'),
    voice?: string(name='Voice', example='Xiaoyun'),
    volume?: int32(name='Volume', example='50'),
  }(name='TtsRequest', shrink='json', position='Body'),
}

model TtsCommonResponseBody = {
  code?: int32(name='Code', example='OK'),
  data?: {
    code?: int32(name='Code', example='20000000'),
    id?: string(name='Id', example='63bb629d-92bf-4cdc-ad0b-3032c926****'),
    message?: string(name='Message', example='-'),
    name?: string(name='Name'),
    publicUrl?: string(name='PublicUrl', example='http://idrs-daily.oss-cn-beijing.aliyuncs.com/mode/android/model.zip?Expires=1607004612&OSSAccessKeyId=LTAI4FcsdDhFc7h78gqB****&Signature=XXXXX'),
    taskId?: string(name='TaskId', example='368cfa55-2364-4d79-aeb4-c0956c4a****'),
  }(name='Data'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', description='requestId', example='c761f0ec-107c-43dc-8565-45330e10e11b'),
  success?: boolean(name='Success', example='True'),
}

model TtsCommonResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TtsCommonResponseBody(name='body'),
}

async function ttsCommon(request: TtsCommonRequest): TtsCommonResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TtsCommon', 'POST', '/', 'json', true, 'form', request);
}

model TtsTaskRequest {
  request: {
    key: string(name='Key', example='d9ee5df9-20bf-47bf-987a-76b26984b***'),
    roomId: string(name='RoomId', example='655259585579***'),
    timestamp?: long(name='Timestamp', example='1662271315039'),
  }(name='Request', shrink='json', position='Body'),
}

model TtsTaskResponseBody = {
  code?: int32(name='Code', example='OK'),
  data?: {
    answer?: string(name='Answer'),
    duration?: double(name='Duration', example='727'),
    question?: string(name='Question'),
    speechRate?: int32(name='SpeechRate', example='64'),
  }(name='Data'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', example='16A4A091-98BE-55F4-92D1-21590658***'),
  success?: boolean(name='Success', example='True'),
}

model TtsTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TtsTaskResponseBody(name='body'),
}

async function ttsTask(request: TtsTaskRequest): TtsTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TtsTask', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAppRequest {
  departmentId?: string(name='DepartmentId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38', position='Query'),
  disabled?: boolean(name='Disabled', example='false', position='Query'),
  id: string(name='Id', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38', position='Query'),
  name?: string(name='Name', position='Query'),
  packageName?: string(name='PackageName', example='com.aliyun.idrs.sdk', position='Query'),
}

model UpdateAppResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='84118BF0-56F7-54D2-8C1A-35BBBBD5016B'),
}

model UpdateAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAppResponseBody(name='body'),
}

async function updateApp(request: UpdateAppRequest): UpdateAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateApp', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDepartmentRequest {
  description?: string(name='Description', position='Body'),
  id: string(name='Id', description='ID', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38', position='Query'),
  label?: string(name='Label', position='Body'),
  name?: string(name='Name', position='Body'),
}

model UpdateDepartmentResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
}

model UpdateDepartmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDepartmentResponseBody(name='body'),
}

async function updateDepartment(request: UpdateDepartmentRequest): UpdateDepartmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDepartment', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDetectProcessRequest {
  content?: string(name='Content', example='{}', position='Query'),
  draft?: string(name='Draft', example='{}', position='Query'),
  id: string(name='Id', description='ID', example='0f1c45cd-3eee-4e60-b505-2e330b8755d3', position='Query'),
  name: string(name='Name', position='Query'),
}

model UpdateDetectProcessResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    content?: string(name='Content', example='{}'),
    createdAt?: string(name='CreatedAt', example='2020-12-04T14:47:59.000+08:00'),
    draft?: string(name='Draft', example='{}'),
    id?: string(name='Id', description='ID', example='cd1c45cd-3eee-4e60-b505-2e330b8755d3'),
    md5?: string(name='Md5', example='987d563d38f5aef27feca8702c689bb1'),
    name?: string(name='Name'),
  }(name='Data'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', example='0c1c45cd-3eee-4e60-b505-2e330b8755d3'),
}

model UpdateDetectProcessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDetectProcessResponseBody(name='body'),
}

/**
  * ********
  *
 */
async function updateDetectProcess(request: UpdateDetectProcessRequest): UpdateDetectProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDetectProcess', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRuleRequest {
  content?: string(name='Content', position='Query'),
  id: string(name='Id', description='ID', example='Id', position='Query'),
  name?: string(name='Name', position='Query'),
}

model UpdateRuleResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    content?: string(name='Content', example='{}'),
    createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
    id?: string(name='Id', description='ID', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
    name?: string(name='Name', example='default'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38'),
}

model UpdateRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRuleResponseBody(name='body'),
}

async function updateRule(request: UpdateRuleRequest): UpdateRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateUserRequest {
  email?: string(name='Email', example='xxx@xxx.com', position='Query'),
  id: string(name='Id', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38', position='Query'),
  name?: string(name='Name', position='Query'),
  phoneNumber?: string(name='PhoneNumber', position='Query'),
  role?: string(name='Role', example='user', position='Query'),
}

model UpdateUserResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: map[string]any(name='Data', example='{\\"Id\\": \\"5073e5f4-99c6-4bb1-bd6c-30ab12f11059\\", \\"CreatedAt\\": \\"2021-12-29T11:31:53.072+08:00\\"}'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='84118BF0-56F7-54D2-8C1A-35BBBBD5016B'),
}

model UpdateUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserResponseBody(name='body'),
}

async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUser', 'POST', '/', 'json', false, 'json', request);
}

model UpdateWatermarkRequest {
  name?: string(name='Name', position='Query'),
  value?: string(name='Value', example='{}', position='Query'),
  watermarkId?: string(name='WatermarkId', example='d4ba1e0428a8df069316060cef41948a', position='Query'),
}

model UpdateWatermarkResponseBody = {
  code?: string(name='Code', description='code', example='OK'),
  data?: {
    createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
    id?: string(name='Id', example='f3bd31c0-0001-4b4b-977d-7cfa64b585f5'),
    name?: string(name='Name'),
    value?: string(name='Value', example='{}'),
  }(name='Data'),
  errors?: [ 
    {
      field?: string(name='Field', example='A1899517-BB99-5D3E-A71B-97524DCB0942'),
      message?: string(name='Message', example='-'),
    }
  ](name='Errors'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message', example='-'),
  requestId?: string(name='RequestId', description='requestId', example='84118BF0-56F7-54D2-8C1A-35BBBBD5016B'),
  success?: boolean(name='Success', example='True'),
}

model UpdateWatermarkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWatermarkResponseBody(name='body'),
}

async function updateWatermark(request: UpdateWatermarkRequest): UpdateWatermarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWatermark', 'POST', '/', 'json', false, 'json', request);
}

model UploadReportRequest {
  appId?: string(name='AppId', example='90c2459a-4c73-4ab7-8a6b-e550d62fbd8c', position='Query'),
  clientBaseParam?: string(name='ClientBaseParam', example='{"version":"1.0.0"}', position='Query'),
  clientVersion?: string(name='ClientVersion', example='1.0.003', position='Query'),
  departmentId?: string(name='DepartmentId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad38', position='Query'),
  detectProcessId?: string(name='DetectProcessId', example='iuhptk3w-2021122017', position='Query'),
  duration?: long(name='Duration', example='12', position='Query'),
  feeId?: string(name='FeeId', example='6c94f2a7-632d-4ea0-aa06-a97800a9060f', position='Query'),
  metaUrl?: string(name='MetaUrl', example='http://abc.oss.aliyuncs.com/1/12_03_20_03_36toubaoren.mp4.meta', position='Query'),
  outerBusinessId?: string(name='OuterBusinessId', example='ads32efef43', position='Query'),
  recordAt?: string(name='RecordAt', example='2022-01-04T08%3A45%3A37Z', position='Query'),
  resultUrl?: string(name='ResultUrl', example='http://abc.oss.aliyuncs.com/1/12_03_20_03_36toubaoren.mp4.json', position='Query'),
  role?: string(name='Role', position='Query'),
  roomId?: string(name='RoomId', example='6000028888875', position='Query'),
  rtcRecordId?: string(name='RtcRecordId', example='record_6570315480571566****', position='Query'),
  type?: string(name='Type', example='LOCAL', position='Query'),
  userId?: string(name='UserId', example='59b0bbfe-929b-4a8c-9833-3ce70b4bad34', position='Query'),
  videoType?: string(name='VideoType', position='Query'),
  videoUrl?: string(name='VideoUrl', example='https://mogo-apps-sh.oss-cn-shanghai-internal.aliyuncs.com/tmp/d2720028b53d384c6d3fca32e45209d1_20_src.mp4', position='Query'),
}

model UploadReportResponseBody = {
  code?: string(name='Code', description='code', example='OK'),
  data?: {
    createdAt?: string(name='CreatedAt', example='2020-07-14T14:01:41.000+08:00'),
    duration?: long(name='Duration', example='12'),
    id?: string(name='Id', example='59b0bbfe-929b-4a8c-9833-3ce7****'),
    metaUrl?: string(name='MetaUrl', example='http://oss.aliyuncs.com/1.mp4.meta'),
    outerBusinessId?: string(name='OuterBusinessId', example='ads32efef43'),
    recordAt?: string(name='RecordAt', example='2020-07-14T14:01:41.000+08:00'),
    resultUrl?: string(name='ResultUrl', example='http://oss.aliyuncs.com/1.mp4.json'),
    rtcRecordId?: string(name='RtcRecordId', example='record_6570315480571566****'),
    videoUrl?: string(name='VideoUrl', example='http://oss.aliyuncs.com/1.mp4'),
  }(name='Data'),
  errors?: [ 
    {
      field?: string(name='Field'),
      message?: string(name='Message'),
    }
  ](name='Errors'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='requestId', example='84118BF0-56F7-54D2-8C1A-35BBBB*****'),
  success?: boolean(name='Success', example='True'),
}

model UploadReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadReportResponseBody(name='body'),
}

async function uploadReport(request: UploadReportRequest): UploadReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadReport', 'POST', '/', 'json', false, 'json', request);
}

