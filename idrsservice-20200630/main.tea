/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'idrsservice.aliyuncs.com',
    ap-northeast-2-pop = 'idrsservice.aliyuncs.com',
    ap-south-1 = 'idrsservice.aliyuncs.com',
    ap-southeast-1 = 'idrsservice.aliyuncs.com',
    ap-southeast-2 = 'idrsservice.aliyuncs.com',
    ap-southeast-3 = 'idrsservice.aliyuncs.com',
    ap-southeast-5 = 'idrsservice.aliyuncs.com',
    cn-beijing = 'idrsservice.aliyuncs.com',
    cn-beijing-finance-1 = 'idrsservice.aliyuncs.com',
    cn-beijing-finance-pop = 'idrsservice.aliyuncs.com',
    cn-beijing-gov-1 = 'idrsservice.aliyuncs.com',
    cn-beijing-nu16-b01 = 'idrsservice.aliyuncs.com',
    cn-chengdu = 'idrsservice.aliyuncs.com',
    cn-edge-1 = 'idrsservice.aliyuncs.com',
    cn-fujian = 'idrsservice.aliyuncs.com',
    cn-haidian-cm12-c01 = 'idrsservice.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'idrsservice.aliyuncs.com',
    cn-hangzhou-finance = 'idrsservice.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'idrsservice.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'idrsservice.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'idrsservice.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'idrsservice.aliyuncs.com',
    cn-hangzhou-test-306 = 'idrsservice.aliyuncs.com',
    cn-hongkong = 'idrsservice.aliyuncs.com',
    cn-hongkong-finance-pop = 'idrsservice.aliyuncs.com',
    cn-huhehaote = 'idrsservice.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'idrsservice.aliyuncs.com',
    cn-north-2-gov-1 = 'idrsservice.aliyuncs.com',
    cn-qingdao = 'idrsservice.aliyuncs.com',
    cn-qingdao-nebula = 'idrsservice.aliyuncs.com',
    cn-shanghai = 'idrsservice.aliyuncs.com',
    cn-shanghai-et15-b01 = 'idrsservice.aliyuncs.com',
    cn-shanghai-et2-b01 = 'idrsservice.aliyuncs.com',
    cn-shanghai-inner = 'idrsservice.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'idrsservice.aliyuncs.com',
    cn-shenzhen = 'idrsservice.aliyuncs.com',
    cn-shenzhen-finance-1 = 'idrsservice.aliyuncs.com',
    cn-shenzhen-inner = 'idrsservice.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'idrsservice.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'idrsservice.aliyuncs.com',
    cn-wuhan = 'idrsservice.aliyuncs.com',
    cn-wulanchabu = 'idrsservice.aliyuncs.com',
    cn-yushanfang = 'idrsservice.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'idrsservice.aliyuncs.com',
    cn-zhangjiakou = 'idrsservice.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'idrsservice.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'idrsservice.aliyuncs.com',
    eu-central-1 = 'idrsservice.aliyuncs.com',
    eu-west-1 = 'idrsservice.aliyuncs.com',
    eu-west-1-oxs = 'idrsservice.aliyuncs.com',
    me-east-1 = 'idrsservice.aliyuncs.com',
    rus-west-1-pop = 'idrsservice.aliyuncs.com',
    us-east-1 = 'idrsservice.aliyuncs.com',
    us-west-1 = 'idrsservice.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('idrsservice', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AssociateRoomRequest {
  appId?: string(name='AppId', description='质检应用id'),
  clientVersion?: string(name='ClientVersion'),
  departmentId?: string(name='DepartmentId', description='部门id'),
  roomId?: string(name='RoomId', description='Mrtc房间id'),
}

model AssociateRoomResponseBody = {
  code?: string(name='Code', description='code'),
  data?: string(name='Data', description='数据'),
  errors?: [ 
    {
      field?: string(name='Field'),
      message?: string(name='Message'),
    }
  ](name='Errors', description='错误列表'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message', description='提示'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='给 pop 使用的'),
}

model AssociateRoomResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateRoomResponseBody(name='body'),
}

async function associateRoomWithOptions(request: AssociateRoomRequest, runtime: Util.RuntimeOptions): AssociateRoomResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.clientVersion)) {
    query['ClientVersion'] = request.clientVersion;
  }
  if (!Util.isUnset(request.departmentId)) {
    query['DepartmentId'] = request.departmentId;
  }
  if (!Util.isUnset(request.roomId)) {
    query['RoomId'] = request.roomId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateRoom',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateRoom(request: AssociateRoomRequest): AssociateRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateRoomWithOptions(request, runtime);
}

model CheckServiceLinkedRoleRequest {
  roleName?: string(name='RoleName'),
}

model CheckServiceLinkedRoleResponseBody = {
  code?: string(name='Code'),
  data?: {
    hasRole?: boolean(name='HasRole'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CheckServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CheckServiceLinkedRoleResponseBody(name='body'),
}

async function checkServiceLinkedRoleWithOptions(request: CheckServiceLinkedRoleRequest, runtime: Util.RuntimeOptions): CheckServiceLinkedRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.roleName)) {
    query['RoleName'] = request.roleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckServiceLinkedRole',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkServiceLinkedRole(request: CheckServiceLinkedRoleRequest): CheckServiceLinkedRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkServiceLinkedRoleWithOptions(request, runtime);
}

model CreateAppRequest {
  clientToken?: string(name='ClientToken'),
  departmentId?: string(name='DepartmentId'),
  name?: string(name='Name'),
  packageName?: string(name='PackageName'),
}

model CreateAppResponseBody = {
  code?: string(name='Code'),
  data?: {
    createdAt?: string(name='CreatedAt'),
    creatorName?: string(name='CreatorName'),
    disabled?: boolean(name='Disabled'),
    id?: string(name='Id'),
    name?: string(name='Name'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateAppResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppResponseBody(name='body'),
}

async function createAppWithOptions(request: CreateAppRequest, runtime: Util.RuntimeOptions): CreateAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.departmentId)) {
    query['DepartmentId'] = request.departmentId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.packageName)) {
    query['PackageName'] = request.packageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateApp',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createApp(request: CreateAppRequest): CreateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppWithOptions(request, runtime);
}

model CreateDepartmentRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  label?: string(name='Label'),
  name?: string(name='Name'),
}

model CreateDepartmentResponseBody = {
  code?: string(name='Code'),
  data?: {
    createdAt?: string(name='CreatedAt'),
    description?: string(name='Description'),
    id?: string(name='Id'),
    name?: string(name='Name'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateDepartmentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDepartmentResponseBody(name='body'),
}

async function createDepartmentWithOptions(request: CreateDepartmentRequest, runtime: Util.RuntimeOptions): CreateDepartmentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.label)) {
    query['Label'] = request.label;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDepartment',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDepartment(request: CreateDepartmentRequest): CreateDepartmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDepartmentWithOptions(request, runtime);
}

model CreateDetectProcessRequest {
  content?: string(name='Content'),
  draft?: string(name='Draft'),
  name?: string(name='Name'),
}

model CreateDetectProcessResponseBody = {
  code?: string(name='Code'),
  data?: {
    content?: string(name='Content'),
    createdAt?: string(name='CreatedAt'),
    disabled?: boolean(name='Disabled'),
    draft?: string(name='Draft'),
    id?: string(name='Id'),
    md5?: string(name='Md5'),
    name?: string(name='Name'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateDetectProcessResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDetectProcessResponseBody(name='body'),
}

async function createDetectProcessWithOptions(request: CreateDetectProcessRequest, runtime: Util.RuntimeOptions): CreateDetectProcessResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.draft)) {
    query['Draft'] = request.draft;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDetectProcess',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDetectProcess(request: CreateDetectProcessRequest): CreateDetectProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDetectProcessWithOptions(request, runtime);
}

model CreateLiveRequest {
  appId?: string(name='AppId'),
  clientToken?: string(name='ClientToken'),
  name?: string(name='Name'),
  rtcCode?: string(name='RtcCode'),
  userId?: string(name='UserId'),
}

model CreateLiveResponseBody = {
  code?: string(name='Code'),
  data?: {
    channel?: string(name='Channel'),
    createdAt?: string(name='CreatedAt'),
    id?: string(name='Id'),
    name?: string(name='Name'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateLiveResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLiveResponseBody(name='body'),
}

async function createLiveWithOptions(request: CreateLiveRequest, runtime: Util.RuntimeOptions): CreateLiveResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.rtcCode)) {
    query['RtcCode'] = request.rtcCode;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLive',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createLive(request: CreateLiveRequest): CreateLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLiveWithOptions(request, runtime);
}

model CreateLiveDetectionRequest {
  clientToken?: string(name='ClientToken'),
  liveId?: string(name='LiveId'),
  metaUrl?: string(name='MetaUrl'),
  ruleId?: string(name='RuleId'),
  userId?: string(name='UserId'),
}

model CreateLiveDetectionResponseBody = {
  code?: string(name='Code'),
  data?: {
    id?: string(name='Id'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateLiveDetectionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLiveDetectionResponseBody(name='body'),
}

async function createLiveDetectionWithOptions(request: CreateLiveDetectionRequest, runtime: Util.RuntimeOptions): CreateLiveDetectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.liveId)) {
    query['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.metaUrl)) {
    query['MetaUrl'] = request.metaUrl;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLiveDetection',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createLiveDetection(request: CreateLiveDetectionRequest): CreateLiveDetectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLiveDetectionWithOptions(request, runtime);
}

model CreateLiveRecordTemplateRequest {
  backgroundColor?: int32(name='BackgroundColor'),
  backgrounds?: [ 
    {
      display?: int32(name='Display'),
      height?: float(name='Height'),
      url?: string(name='Url'),
      width?: float(name='Width'),
      x?: float(name='X'),
      y?: float(name='Y'),
      ZOrder?: int32(name='ZOrder'),
    }
  ](name='Backgrounds'),
  clockWidgets?: [ 
    {
      fontColor?: int32(name='FontColor'),
      fontSize?: int32(name='FontSize'),
      fontType?: int32(name='FontType'),
      x?: float(name='X'),
      y?: float(name='Y'),
      ZOrder?: int32(name='ZOrder'),
    }
  ](name='ClockWidgets'),
  layoutIds?: [ string ](name='LayoutIds'),
  name?: string(name='Name'),
  rtcCode?: string(name='RtcCode'),
  watermarks?: [ 
    {
      alpha?: float(name='Alpha'),
      display?: int32(name='Display'),
      height?: float(name='Height'),
      url?: string(name='Url'),
      width?: float(name='Width'),
      x?: float(name='X'),
      y?: float(name='Y'),
      ZOrder?: int32(name='ZOrder'),
    }
  ](name='Watermarks'),
}

model CreateLiveRecordTemplateShrinkRequest {
  backgroundColor?: int32(name='BackgroundColor'),
  backgroundsShrink?: string(name='Backgrounds'),
  clockWidgetsShrink?: string(name='ClockWidgets'),
  layoutIds?: [ string ](name='LayoutIds'),
  name?: string(name='Name'),
  rtcCode?: string(name='RtcCode'),
  watermarksShrink?: string(name='Watermarks'),
}

model CreateLiveRecordTemplateResponseBody = {
  code?: string(name='Code'),
  data?: {
    createdAt?: string(name='CreatedAt'),
    id?: string(name='Id'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateLiveRecordTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLiveRecordTemplateResponseBody(name='body'),
}

async function createLiveRecordTemplateWithOptions(tmpReq: CreateLiveRecordTemplateRequest, runtime: Util.RuntimeOptions): CreateLiveRecordTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new CreateLiveRecordTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.backgrounds)) {
    request.backgroundsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.backgrounds, 'Backgrounds', 'json');
  }
  if (!Util.isUnset(tmpReq.clockWidgets)) {
    request.clockWidgetsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.clockWidgets, 'ClockWidgets', 'json');
  }
  if (!Util.isUnset(tmpReq.watermarks)) {
    request.watermarksShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.watermarks, 'Watermarks', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.backgroundColor)) {
    query['BackgroundColor'] = request.backgroundColor;
  }
  if (!Util.isUnset(request.backgroundsShrink)) {
    query['Backgrounds'] = request.backgroundsShrink;
  }
  if (!Util.isUnset(request.clockWidgetsShrink)) {
    query['ClockWidgets'] = request.clockWidgetsShrink;
  }
  if (!Util.isUnset(request.layoutIds)) {
    query['LayoutIds'] = request.layoutIds;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.rtcCode)) {
    query['RtcCode'] = request.rtcCode;
  }
  if (!Util.isUnset(request.watermarksShrink)) {
    query['Watermarks'] = request.watermarksShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLiveRecordTemplate',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createLiveRecordTemplate(request: CreateLiveRecordTemplateRequest): CreateLiveRecordTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLiveRecordTemplateWithOptions(request, runtime);
}

model CreateRuleRequest {
  clientToken?: string(name='ClientToken'),
  content?: string(name='Content'),
  name?: string(name='Name'),
}

model CreateRuleResponseBody = {
  code?: string(name='Code'),
  data?: {
    content?: string(name='Content'),
    id?: string(name='Id'),
    name?: string(name='Name'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRuleResponseBody(name='body'),
}

async function createRuleWithOptions(request: CreateRuleRequest, runtime: Util.RuntimeOptions): CreateRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRule',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRule(request: CreateRuleRequest): CreateRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRuleWithOptions(request, runtime);
}

model CreateSignatureRequest {
  appId?: string(name='AppId', description='质检应用Id'),
  clientVersion?: string(name='ClientVersion'),
  expireTime?: long(name='ExpireTime', description='过期时间，单位秒，默认时间300s'),
  uid?: string(name='Uid', description='rtc用户id'),
}

model CreateSignatureResponseBody = {
  code?: string(name='Code', description='code'),
  data?: {
    expireTime?: string(name='ExpireTime'),
    rtcAppId?: string(name='RtcAppId'),
    rtcBizName?: string(name='RtcBizName'),
    rtcSign?: string(name='RtcSign'),
    rtcWorkspaceId?: string(name='RtcWorkspaceId'),
  }(name='Data', description='数据'),
  errors?: [ 
    {
      field?: string(name='Field'),
      message?: string(name='Message'),
    }
  ](name='Errors', description='错误列表'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message', description='提示'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='给 pop 使用的'),
}

model CreateSignatureResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSignatureResponseBody(name='body'),
}

async function createSignatureWithOptions(request: CreateSignatureRequest, runtime: Util.RuntimeOptions): CreateSignatureResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.clientVersion)) {
    query['ClientVersion'] = request.clientVersion;
  }
  if (!Util.isUnset(request.expireTime)) {
    query['ExpireTime'] = request.expireTime;
  }
  if (!Util.isUnset(request.uid)) {
    query['Uid'] = request.uid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSignature',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSignature(request: CreateSignatureRequest): CreateSignatureResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSignatureWithOptions(request, runtime);
}

model CreateStatisticsRecordRequest {
  appId?: string(name='AppId'),
  beginAt?: string(name='BeginAt'),
  clientToken?: string(name='ClientToken'),
  clientVersion?: string(name='ClientVersion'),
  deviceId?: string(name='DeviceId'),
  deviceType?: int32(name='DeviceType'),
  endAt?: string(name='EndAt'),
  feeId?: string(name='FeeId'),
  type?: string(name='Type'),
}

model CreateStatisticsRecordResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateStatisticsRecordResponse = {
  headers: map[string]string(name='headers'),
  body: CreateStatisticsRecordResponseBody(name='body'),
}

async function createStatisticsRecordWithOptions(request: CreateStatisticsRecordRequest, runtime: Util.RuntimeOptions): CreateStatisticsRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.beginAt)) {
    query['BeginAt'] = request.beginAt;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.clientVersion)) {
    query['ClientVersion'] = request.clientVersion;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.deviceType)) {
    query['DeviceType'] = request.deviceType;
  }
  if (!Util.isUnset(request.endAt)) {
    query['EndAt'] = request.endAt;
  }
  if (!Util.isUnset(request.feeId)) {
    query['FeeId'] = request.feeId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateStatisticsRecord',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createStatisticsRecord(request: CreateStatisticsRecordRequest): CreateStatisticsRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return createStatisticsRecordWithOptions(request, runtime);
}

model CreateStatisticsTaskRequest {
  clientToken?: string(name='ClientToken'),
  dateFrom?: string(name='DateFrom'),
  dateTo?: string(name='DateTo'),
  departmentId?: [ string ](name='DepartmentId'),
}

model CreateStatisticsTaskResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateStatisticsTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateStatisticsTaskResponseBody(name='body'),
}

async function createStatisticsTaskWithOptions(request: CreateStatisticsTaskRequest, runtime: Util.RuntimeOptions): CreateStatisticsTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dateFrom)) {
    query['DateFrom'] = request.dateFrom;
  }
  if (!Util.isUnset(request.dateTo)) {
    query['DateTo'] = request.dateTo;
  }
  if (!Util.isUnset(request.departmentId)) {
    query['DepartmentId'] = request.departmentId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateStatisticsTask',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createStatisticsTask(request: CreateStatisticsTaskRequest): CreateStatisticsTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createStatisticsTaskWithOptions(request, runtime);
}

model CreateTaskGroupRequest {
  appId?: string(name='AppId'),
  clientToken?: string(name='ClientToken'),
  day?: [ int32 ](name='Day'),
  expireAt?: string(name='ExpireAt'),
  groupName?: string(name='GroupName'),
  ruleId?: string(name='RuleId'),
  runnableTimeFrom?: string(name='RunnableTimeFrom'),
  runnableTimeTo?: string(name='RunnableTimeTo'),
  triggerPeriod?: string(name='TriggerPeriod'),
  videoMetaUrl?: [ string ](name='VideoMetaUrl'),
  videoUrl?: [ string ](name='VideoUrl'),
}

model CreateTaskGroupResponseBody = {
  code?: string(name='Code'),
  data?: {
    completedTasks?: int32(name='CompletedTasks'),
    createdAt?: string(name='CreatedAt'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    ruleId?: string(name='RuleId'),
    ruleName?: string(name='RuleName'),
    status?: string(name='Status'),
    taskIds?: [ string ](name='TaskIds'),
    totalTasks?: int32(name='TotalTasks'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateTaskGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTaskGroupResponseBody(name='body'),
}

async function createTaskGroupWithOptions(request: CreateTaskGroupRequest, runtime: Util.RuntimeOptions): CreateTaskGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.day)) {
    query['Day'] = request.day;
  }
  if (!Util.isUnset(request.expireAt)) {
    query['ExpireAt'] = request.expireAt;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.runnableTimeFrom)) {
    query['RunnableTimeFrom'] = request.runnableTimeFrom;
  }
  if (!Util.isUnset(request.runnableTimeTo)) {
    query['RunnableTimeTo'] = request.runnableTimeTo;
  }
  if (!Util.isUnset(request.triggerPeriod)) {
    query['TriggerPeriod'] = request.triggerPeriod;
  }
  if (!Util.isUnset(request.videoMetaUrl)) {
    query['VideoMetaUrl'] = request.videoMetaUrl;
  }
  if (!Util.isUnset(request.videoUrl)) {
    query['VideoUrl'] = request.videoUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTaskGroup',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTaskGroup(request: CreateTaskGroupRequest): CreateTaskGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTaskGroupWithOptions(request, runtime);
}

model CreateUserDepartmentsRequest {
  clientToken?: string(name='ClientToken'),
  departmentId?: [ string ](name='DepartmentId'),
  userId?: [ string ](name='UserId'),
}

model CreateUserDepartmentsResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateUserDepartmentsResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserDepartmentsResponseBody(name='body'),
}

async function createUserDepartmentsWithOptions(request: CreateUserDepartmentsRequest, runtime: Util.RuntimeOptions): CreateUserDepartmentsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.departmentId)) {
    query['DepartmentId'] = request.departmentId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateUserDepartments',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createUserDepartments(request: CreateUserDepartmentsRequest): CreateUserDepartmentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserDepartmentsWithOptions(request, runtime);
}

model CreateWatermarkRequest {
  name?: string(name='Name'),
  value?: string(name='Value'),
}

model CreateWatermarkResponseBody = {
  code?: string(name='Code', description='code'),
  data?: {
    createdAt?: string(name='CreatedAt', description='创建时间'),
    id?: string(name='Id', description='水印id'),
    name?: string(name='Name', description='水印名称'),
    value?: string(name='Value', description='水印信息'),
  }(name='Data', description='数据'),
  errors?: [ 
    {
      field?: string(name='Field'),
      message?: string(name='Message'),
    }
  ](name='Errors', description='错误列表'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message', description='提示'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='给 pop 使用的'),
}

model CreateWatermarkResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWatermarkResponseBody(name='body'),
}

async function createWatermarkWithOptions(request: CreateWatermarkRequest, runtime: Util.RuntimeOptions): CreateWatermarkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateWatermark',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createWatermark(request: CreateWatermarkRequest): CreateWatermarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWatermarkWithOptions(request, runtime);
}

model DeleteAppRequest {
  id?: string(name='Id'),
}

model DeleteAppResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteAppResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAppResponseBody(name='body'),
}

async function deleteAppWithOptions(request: DeleteAppRequest, runtime: Util.RuntimeOptions): DeleteAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteApp',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAppWithOptions(request, runtime);
}

model DeleteDepartmentRequest {
  id?: string(name='Id'),
}

model DeleteDepartmentResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteDepartmentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDepartmentResponseBody(name='body'),
}

async function deleteDepartmentWithOptions(request: DeleteDepartmentRequest, runtime: Util.RuntimeOptions): DeleteDepartmentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDepartment',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDepartment(request: DeleteDepartmentRequest): DeleteDepartmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDepartmentWithOptions(request, runtime);
}

model DeleteDetectProcessRequest {
  id?: string(name='Id'),
}

model DeleteDetectProcessResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteDetectProcessResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDetectProcessResponseBody(name='body'),
}

async function deleteDetectProcessWithOptions(request: DeleteDetectProcessRequest, runtime: Util.RuntimeOptions): DeleteDetectProcessResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDetectProcess',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDetectProcess(request: DeleteDetectProcessRequest): DeleteDetectProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDetectProcessWithOptions(request, runtime);
}

model DeleteLiveRecordTemplateRequest {
  id?: string(name='Id'),
}

model DeleteLiveRecordTemplateResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteLiveRecordTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveRecordTemplateResponseBody(name='body'),
}

async function deleteLiveRecordTemplateWithOptions(request: DeleteLiveRecordTemplateRequest, runtime: Util.RuntimeOptions): DeleteLiveRecordTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLiveRecordTemplate',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteLiveRecordTemplate(request: DeleteLiveRecordTemplateRequest): DeleteLiveRecordTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveRecordTemplateWithOptions(request, runtime);
}

model DeleteRuleRequest {
  id?: string(name='Id'),
}

model DeleteRuleResponseBody = {
  code?: string(name='Code'),
  data?: {
    content?: string(name='Content'),
    createdAt?: string(name='CreatedAt'),
    id?: string(name='Id'),
    name?: string(name='Name'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRuleResponseBody(name='body'),
}

async function deleteRuleWithOptions(request: DeleteRuleRequest, runtime: Util.RuntimeOptions): DeleteRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRule',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRule(request: DeleteRuleRequest): DeleteRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRuleWithOptions(request, runtime);
}

model DeleteUserRequest {
  id?: string(name='Id'),
}

model DeleteUserResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  errors?: [ 
    {
      field?: string(name='Field'),
      message?: string(name='Message'),
    }
  ](name='Errors'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteUserResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserResponseBody(name='body'),
}

async function deleteUserWithOptions(request: DeleteUserRequest, runtime: Util.RuntimeOptions): DeleteUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUser',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserWithOptions(request, runtime);
}

model DeleteUserDepartmentsRequest {
  departmentId?: [ string ](name='DepartmentId'),
  userId?: [ string ](name='UserId'),
}

model DeleteUserDepartmentsResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteUserDepartmentsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserDepartmentsResponseBody(name='body'),
}

async function deleteUserDepartmentsWithOptions(request: DeleteUserDepartmentsRequest, runtime: Util.RuntimeOptions): DeleteUserDepartmentsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.departmentId)) {
    query['DepartmentId'] = request.departmentId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUserDepartments',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteUserDepartments(request: DeleteUserDepartmentsRequest): DeleteUserDepartmentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserDepartmentsWithOptions(request, runtime);
}

model DeleteWatermarkRequest {
  watermarkId?: string(name='WatermarkId'),
}

model DeleteWatermarkResponseBody = {
  code?: string(name='Code', description='code'),
  data?: {
    createdAt?: string(name='CreatedAt', description='创建时间'),
    id?: string(name='Id', description='水印id'),
    name?: string(name='Name', description='水印名称'),
    value?: string(name='Value', description='水印信息'),
  }(name='Data', description='数据'),
  errors?: [ 
    {
      field?: string(name='Field'),
      message?: string(name='Message'),
    }
  ](name='Errors', description='错误列表'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message', description='提示'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='给 pop 使用的'),
}

model DeleteWatermarkResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWatermarkResponseBody(name='body'),
}

async function deleteWatermarkWithOptions(request: DeleteWatermarkRequest, runtime: Util.RuntimeOptions): DeleteWatermarkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.watermarkId)) {
    query['WatermarkId'] = request.watermarkId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWatermark',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteWatermark(request: DeleteWatermarkRequest): DeleteWatermarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWatermarkWithOptions(request, runtime);
}

model ExitLiveRequest {
  channel?: string(name='Channel'),
  rtcCode?: string(name='RtcCode'),
  userId?: string(name='UserId'),
}

model ExitLiveResponseBody = {
  code?: string(name='Code'),
  data?: {
    code?: int32(name='Code'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ExitLiveResponse = {
  headers: map[string]string(name='headers'),
  body: ExitLiveResponseBody(name='body'),
}

async function exitLiveWithOptions(request: ExitLiveRequest, runtime: Util.RuntimeOptions): ExitLiveResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channel)) {
    query['Channel'] = request.channel;
  }
  if (!Util.isUnset(request.rtcCode)) {
    query['RtcCode'] = request.rtcCode;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExitLive',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function exitLive(request: ExitLiveRequest): ExitLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return exitLiveWithOptions(request, runtime);
}

model GetAppRequest {
  clientVersion?: string(name='ClientVersion'),
  deviceId?: string(name='DeviceId'),
  id?: string(name='Id'),
  packageName?: string(name='PackageName'),
}

model GetAppResponseBody = {
  code?: string(name='Code'),
  data?: {
    config?: string(name='Config'),
    createdAt?: int32(name='CreatedAt'),
    disabled?: string(name='Disabled'),
    feeId?: string(name='FeeId'),
    name?: string(name='Name'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetAppResponse = {
  headers: map[string]string(name='headers'),
  body: GetAppResponseBody(name='body'),
}

async function getAppWithOptions(request: GetAppRequest, runtime: Util.RuntimeOptions): GetAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientVersion)) {
    query['ClientVersion'] = request.clientVersion;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.packageName)) {
    query['PackageName'] = request.packageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetApp',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getApp(request: GetAppRequest): GetAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAppWithOptions(request, runtime);
}

model GetBatchSignedUrlRequest {
  fileUrlList?: [ string ](name='FileUrlList'),
}

model GetBatchSignedUrlResponseBody = {
  code?: string(name='Code'),
  data?: [ string ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetBatchSignedUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetBatchSignedUrlResponseBody(name='body'),
}

async function getBatchSignedUrlWithOptions(request: GetBatchSignedUrlRequest, runtime: Util.RuntimeOptions): GetBatchSignedUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileUrlList)) {
    query['FileUrlList'] = request.fileUrlList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetBatchSignedUrl',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBatchSignedUrl(request: GetBatchSignedUrlRequest): GetBatchSignedUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBatchSignedUrlWithOptions(request, runtime);
}

model GetDepartmentRequest {
  id?: string(name='Id'),
}

model GetDepartmentResponseBody = {
  code?: string(name='Code'),
  data?: {
    createdAt?: string(name='CreatedAt'),
    description?: string(name='Description'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    updatedAt?: string(name='UpdatedAt'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetDepartmentResponse = {
  headers: map[string]string(name='headers'),
  body: GetDepartmentResponseBody(name='body'),
}

async function getDepartmentWithOptions(request: GetDepartmentRequest, runtime: Util.RuntimeOptions): GetDepartmentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDepartment',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDepartment(request: GetDepartmentRequest): GetDepartmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDepartmentWithOptions(request, runtime);
}

model GetDetectEvaluationRequest {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
}

model GetDetectEvaluationResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      day?: string(name='Day'),
      evaluationItemList?: [ 
        {
          handleCount?: int32(name='HandleCount'),
          name?: string(name='Name'),
          successCount?: int32(name='SuccessCount'),
          successRate?: string(name='SuccessRate'),
        }
      ](name='EvaluationItemList'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetDetectEvaluationResponse = {
  headers: map[string]string(name='headers'),
  body: GetDetectEvaluationResponseBody(name='body'),
}

async function getDetectEvaluationWithOptions(request: GetDetectEvaluationRequest, runtime: Util.RuntimeOptions): GetDetectEvaluationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDetectEvaluation',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDetectEvaluation(request: GetDetectEvaluationRequest): GetDetectEvaluationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDetectEvaluationWithOptions(request, runtime);
}

model GetDetectProcessRequest {
  id?: string(name='Id'),
}

model GetDetectProcessResponseBody = {
  code?: string(name='Code'),
  data?: {
    content?: string(name='Content'),
    createdAt?: string(name='CreatedAt'),
    draft?: string(name='Draft'),
    id?: string(name='Id'),
    md5?: string(name='Md5'),
    name?: string(name='Name'),
    newVersion?: boolean(name='NewVersion'),
    updatedAt?: string(name='UpdatedAt'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetDetectProcessResponse = {
  headers: map[string]string(name='headers'),
  body: GetDetectProcessResponseBody(name='body'),
}

async function getDetectProcessWithOptions(request: GetDetectProcessRequest, runtime: Util.RuntimeOptions): GetDetectProcessResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDetectProcess',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDetectProcess(request: GetDetectProcessRequest): GetDetectProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDetectProcessWithOptions(request, runtime);
}

model GetDetectProcessJsonFileRequest {
  id?: string(name='Id'),
}

model GetDetectProcessJsonFileResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetDetectProcessJsonFileResponse = {
  headers: map[string]string(name='headers'),
  body: GetDetectProcessJsonFileResponseBody(name='body'),
}

async function getDetectProcessJsonFileWithOptions(request: GetDetectProcessJsonFileRequest, runtime: Util.RuntimeOptions): GetDetectProcessJsonFileResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDetectProcessJsonFile',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDetectProcessJsonFile(request: GetDetectProcessJsonFileRequest): GetDetectProcessJsonFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDetectProcessJsonFileWithOptions(request, runtime);
}

model GetDetectProcessTemplateResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetDetectProcessTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetDetectProcessTemplateResponseBody(name='body'),
}

async function getDetectProcessTemplateWithOptions(runtime: Util.RuntimeOptions): GetDetectProcessTemplateResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetDetectProcessTemplate',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDetectProcessTemplate(): GetDetectProcessTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDetectProcessTemplateWithOptions(runtime);
}

model GetDetectionRequest {
  id?: string(name='Id'),
}

model GetDetectionResponseBody = {
  code?: string(name='Code'),
  data?: {
    createdAt?: string(name='CreatedAt'),
    departmentId?: string(name='DepartmentId'),
    departmentName?: string(name='DepartmentName'),
    id?: string(name='Id'),
    recordingType?: string(name='RecordingType'),
    ruleId?: string(name='RuleId'),
    ruleName?: string(name='RuleName'),
    status?: string(name='Status'),
    tasks?: [ 
      {
        createdAt?: string(name='CreatedAt'),
        id?: string(name='Id'),
        status?: string(name='Status'),
        videoMetaUrl?: string(name='VideoMetaUrl'),
        videoUrl?: string(name='VideoUrl'),
      }
    ](name='Tasks'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetDetectionResponse = {
  headers: map[string]string(name='headers'),
  body: GetDetectionResponseBody(name='body'),
}

async function getDetectionWithOptions(request: GetDetectionRequest, runtime: Util.RuntimeOptions): GetDetectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDetection',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDetection(request: GetDetectionRequest): GetDetectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDetectionWithOptions(request, runtime);
}

model GetGlobalConfigRequest {
  name?: string(name='Name'),
}

model GetGlobalConfigResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetGlobalConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetGlobalConfigResponseBody(name='body'),
}

async function getGlobalConfigWithOptions(request: GetGlobalConfigRequest, runtime: Util.RuntimeOptions): GetGlobalConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetGlobalConfig',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGlobalConfig(request: GetGlobalConfigRequest): GetGlobalConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGlobalConfigWithOptions(request, runtime);
}

model GetLiveRecordTemplateRequest {
  id?: string(name='Id'),
}

model GetLiveRecordTemplateResponseBody = {
  code?: string(name='Code'),
  data?: {
    backgrounds?: [ 
      {
        display?: long(name='Display'),
        height?: float(name='Height'),
        width?: float(name='Width'),
        x?: float(name='X'),
        y?: float(name='Y'),
        ZOrder?: long(name='ZOrder'),
      }
    ](name='Backgrounds'),
    clockWidgets?: [ 
      {
        fontColor?: long(name='FontColor'),
        fontSize?: long(name='FontSize'),
        fontType?: long(name='FontType'),
        x?: float(name='X'),
        y?: float(name='Y'),
        ZOrder?: long(name='ZOrder'),
      }
    ](name='ClockWidgets'),
    createdAt?: int32(name='CreatedAt'),
    description?: string(name='Description'),
    disabled?: string(name='Disabled'),
    id?: string(name='Id'),
    layoutIds?: [ bytes ](name='LayoutIds'),
    name?: string(name='Name'),
    rtcCode?: string(name='RtcCode'),
    watermarks?: [ 
      {
        alpha?: float(name='Alpha'),
        display?: long(name='Display'),
        height?: float(name='Height'),
        url?: string(name='Url'),
        width?: float(name='Width'),
        x?: float(name='X'),
        y?: float(name='Y'),
        ZOrder?: long(name='ZOrder'),
      }
    ](name='Watermarks'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetLiveRecordTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetLiveRecordTemplateResponseBody(name='body'),
}

async function getLiveRecordTemplateWithOptions(request: GetLiveRecordTemplateRequest, runtime: Util.RuntimeOptions): GetLiveRecordTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLiveRecordTemplate',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLiveRecordTemplate(request: GetLiveRecordTemplateRequest): GetLiveRecordTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLiveRecordTemplateWithOptions(request, runtime);
}

model GetModelSignedUrlRequest {
  modelPath?: [ string ](name='ModelPath'),
}

model GetModelSignedUrlResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      md5?: string(name='Md5'),
      modelPath?: string(name='ModelPath'),
      publicUrl?: string(name='PublicUrl'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetModelSignedUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetModelSignedUrlResponseBody(name='body'),
}

async function getModelSignedUrlWithOptions(request: GetModelSignedUrlRequest, runtime: Util.RuntimeOptions): GetModelSignedUrlResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.modelPath)) {
    body['ModelPath'] = request.modelPath;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetModelSignedUrl',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getModelSignedUrl(request: GetModelSignedUrlRequest): GetModelSignedUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getModelSignedUrlWithOptions(request, runtime);
}

model GetPreSignedUrlRequest {
  clientVersion?: string(name='ClientVersion'),
  prefix?: string(name='Prefix'),
}

model GetPreSignedUrlResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetPreSignedUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetPreSignedUrlResponseBody(name='body'),
}

async function getPreSignedUrlWithOptions(request: GetPreSignedUrlRequest, runtime: Util.RuntimeOptions): GetPreSignedUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientVersion)) {
    query['ClientVersion'] = request.clientVersion;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.prefix)) {
    body['Prefix'] = request.prefix;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetPreSignedUrl',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPreSignedUrl(request: GetPreSignedUrlRequest): GetPreSignedUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPreSignedUrlWithOptions(request, runtime);
}

model GetRecordResultRequest {
  recordId?: string(name='RecordId'),
}

model GetRecordResultResponseBody = {
  code?: string(name='Code', description='code'),
  data?: {
    appName?: string(name='AppName', description='应用名'),
    createdAt?: string(name='CreatedAt', description='创建时间'),
    departmentName?: string(name='DepartmentName', description='部门名'),
    detectProcessName?: string(name='DetectProcessName', description='业务检测流程名'),
    duration?: long(name='Duration', description='时长'),
    id?: string(name='Id', description='双录记录id'),
    metaUrl?: string(name='MetaUrl', description='meta地址'),
    recordAt?: string(name='RecordAt', description='录制时间'),
    recordRoomList?: [ 
      {
        recordType?: string(name='RecordType', description='录制视频类型'),
        role?: string(name='Role', description='角色'),
        roomMetaUrl?: string(name='RoomMetaUrl', description='meta地址'),
        roomRecordAt?: string(name='RoomRecordAt', description='录制时间'),
        roomResultUrl?: string(name='RoomResultUrl', description='结果地址'),
        roomStatus?: string(name='RoomStatus', description='检测状态'),
        roomVideoUrl?: string(name='RoomVideoUrl', description='视频地址'),
      }
    ](name='RecordRoomList', description='远程双录文件地址列表'),
    resultUrl?: string(name='ResultUrl', description='结果地址'),
    roomId?: string(name='RoomId', description='mrtc房间id'),
    status?: string(name='Status', description='检测状态'),
    videoUrl?: string(name='VideoUrl', description='视频地址'),
  }(name='Data', description='数据'),
  errors?: [ 
    {
      field?: string(name='Field'),
      message?: string(name='Message'),
    }
  ](name='Errors', description='错误列表'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message', description='提示'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='给 pop 使用的'),
}

model GetRecordResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetRecordResultResponseBody(name='body'),
}

async function getRecordResultWithOptions(request: GetRecordResultRequest, runtime: Util.RuntimeOptions): GetRecordResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.recordId)) {
    query['RecordId'] = request.recordId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRecordResult',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRecordResult(request: GetRecordResultRequest): GetRecordResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRecordResultWithOptions(request, runtime);
}

model GetRecordsByFeeIdRequest {
  feeId?: string(name='FeeId'),
}

model GetRecordsByFeeIdResponseBody = {
  code?: string(name='Code', description='code'),
  data?: [ 
    {
      appId?: long(name='AppId'),
      createdAt?: string(name='CreatedAt'),
      departmentId?: long(name='DepartmentId'),
      detectProcessId?: long(name='DetectProcessId'),
      duration?: long(name='Duration'),
      feeId?: string(name='FeeId'),
      id?: long(name='Id'),
      metaUrl?: string(name='MetaUrl'),
      publicId?: string(name='PublicId'),
      recordAt?: string(name='RecordAt'),
      resultUrl?: string(name='ResultUrl'),
      roomId?: string(name='RoomId'),
      tenantId?: long(name='TenantId'),
      type?: string(name='Type'),
      updatedAt?: string(name='UpdatedAt'),
      userId?: long(name='UserId'),
      videoUrl?: string(name='VideoUrl'),
    }
  ](name='Data', description='数据'),
  errors?: [ 
    {
      field?: string(name='Field'),
      message?: string(name='Message'),
    }
  ](name='Errors', description='错误列表'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message', description='提示'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='给 pop 使用的'),
}

model GetRecordsByFeeIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetRecordsByFeeIdResponseBody(name='body'),
}

async function getRecordsByFeeIdWithOptions(request: GetRecordsByFeeIdRequest, runtime: Util.RuntimeOptions): GetRecordsByFeeIdResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.feeId)) {
    body['FeeId'] = request.feeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetRecordsByFeeId',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRecordsByFeeId(request: GetRecordsByFeeIdRequest): GetRecordsByFeeIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRecordsByFeeIdWithOptions(request, runtime);
}

model GetRuleRequest {
  id?: string(name='Id'),
}

model GetRuleResponseBody = {
  code?: string(name='Code'),
  data?: {
    content?: string(name='Content'),
    createdAt?: string(name='CreatedAt'),
    id?: string(name='Id'),
    name?: string(name='Name'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetRuleResponse = {
  headers: map[string]string(name='headers'),
  body: GetRuleResponseBody(name='body'),
}

async function getRuleWithOptions(request: GetRuleRequest, runtime: Util.RuntimeOptions): GetRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRule',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRule(request: GetRuleRequest): GetRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRuleWithOptions(request, runtime);
}

model GetServiceConfigurationRequest {
  userId?: string(name='UserId'),
}

model GetServiceConfigurationResponseBody = {
  code?: string(name='Code'),
  data?: {
    clientQueueSize?: int32(name='ClientQueueSize'),
    liveRecordAll?: boolean(name='LiveRecordAll'),
    liveRecordEveryOne?: boolean(name='LiveRecordEveryOne'),
    liveRecordLayout?: int32(name='LiveRecordLayout'),
    liveRecordMaxClient?: int32(name='LiveRecordMaxClient'),
    liveRecordTaskProfile?: string(name='LiveRecordTaskProfile'),
    liveRecordVideoResolution?: int32(name='LiveRecordVideoResolution'),
    taskItemQueueSize?: int32(name='TaskItemQueueSize'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetServiceConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceConfigurationResponseBody(name='body'),
}

async function getServiceConfigurationWithOptions(request: GetServiceConfigurationRequest, runtime: Util.RuntimeOptions): GetServiceConfigurationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetServiceConfiguration',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getServiceConfiguration(request: GetServiceConfigurationRequest): GetServiceConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getServiceConfigurationWithOptions(request, runtime);
}

model GetSignedUrlRequest {
  fileUrl?: string(name='FileUrl'),
}

model GetSignedUrlResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetSignedUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetSignedUrlResponseBody(name='body'),
}

async function getSignedUrlWithOptions(request: GetSignedUrlRequest, runtime: Util.RuntimeOptions): GetSignedUrlResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.fileUrl)) {
    body['FileUrl'] = request.fileUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSignedUrl',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSignedUrl(request: GetSignedUrlRequest): GetSignedUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSignedUrlWithOptions(request, runtime);
}

model GetSlrConfigurationRequest {
  userId?: string(name='UserId'),
}

model GetSlrConfigurationResponseBody = {
  code?: string(name='Code'),
  data?: {
    mqEndpoint?: string(name='MqEndpoint'),
    mqEventList?: [ string ](name='MqEventList'),
    mqGroupId?: string(name='MqGroupId'),
    mqGroupIdTest?: string(name='MqGroupIdTest'),
    mqInstanceId?: string(name='MqInstanceId'),
    mqSubscribe?: boolean(name='MqSubscribe'),
    mqTopic?: string(name='MqTopic'),
    mqTopicTest?: string(name='MqTopicTest'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetSlrConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: GetSlrConfigurationResponseBody(name='body'),
}

async function getSlrConfigurationWithOptions(request: GetSlrConfigurationRequest, runtime: Util.RuntimeOptions): GetSlrConfigurationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSlrConfiguration',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSlrConfiguration(request: GetSlrConfigurationRequest): GetSlrConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSlrConfigurationWithOptions(request, runtime);
}

model GetStatisticsRequest {
  dateFrom?: string(name='DateFrom'),
  dateTo?: string(name='DateTo'),
  departmentId?: [ string ](name='DepartmentId'),
}

model GetStatisticsResponseBody = {
  code?: string(name='Code'),
  data?: {
    items?: [ 
      {
        clientCount?: long(name='ClientCount'),
        cloudCount?: long(name='CloudCount'),
        departmentName?: string(name='DepartmentName'),
        detail?: [ 
          {
            clientCount?: long(name='ClientCount'),
            cloudCount?: long(name='CloudCount'),
            departmentId?: string(name='DepartmentId'),
            departmentName?: string(name='DepartmentName'),
            month?: int32(name='Month'),
          }
        ](name='Detail'),
        month?: string(name='Month'),
      }
    ](name='Items'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetStatisticsResponseBody(name='body'),
}

async function getStatisticsWithOptions(request: GetStatisticsRequest, runtime: Util.RuntimeOptions): GetStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dateFrom)) {
    query['DateFrom'] = request.dateFrom;
  }
  if (!Util.isUnset(request.dateTo)) {
    query['DateTo'] = request.dateTo;
  }
  if (!Util.isUnset(request.departmentId)) {
    query['DepartmentId'] = request.departmentId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetStatistics',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getStatistics(request: GetStatisticsRequest): GetStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStatisticsWithOptions(request, runtime);
}

model GetStatisticsRecordsByFeeIdRequest {
  feeId?: string(name='FeeId'),
}

model GetStatisticsRecordsByFeeIdResponseBody = {
  code?: string(name='Code', description='code'),
  data?: [ 
    {
      appId?: long(name='AppId'),
      beginAt?: string(name='BeginAt'),
      chargeDuration?: int32(name='ChargeDuration', description='计费时长，min'),
      createdAt?: string(name='CreatedAt'),
      departmentId?: long(name='DepartmentId'),
      detectionDuration?: int32(name='DetectionDuration', description='检测时长，s'),
      deviceId?: string(name='DeviceId'),
      deviceType?: int32(name='DeviceType'),
      endAt?: string(name='EndAt'),
      feeId?: string(name='FeeId'),
      hour?: int32(name='Hour', description='2020050811'),
      id?: long(name='Id'),
      tenantId?: long(name='TenantId'),
      type?: string(name='Type'),
      updatedAt?: string(name='UpdatedAt'),
    }
  ](name='Data', description='数据'),
  errors?: [ 
    {
      field?: string(name='Field'),
      message?: string(name='Message'),
    }
  ](name='Errors', description='错误列表'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message', description='提示'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='给 pop 使用的'),
}

model GetStatisticsRecordsByFeeIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetStatisticsRecordsByFeeIdResponseBody(name='body'),
}

async function getStatisticsRecordsByFeeIdWithOptions(request: GetStatisticsRecordsByFeeIdRequest, runtime: Util.RuntimeOptions): GetStatisticsRecordsByFeeIdResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.feeId)) {
    body['FeeId'] = request.feeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetStatisticsRecordsByFeeId',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getStatisticsRecordsByFeeId(request: GetStatisticsRecordsByFeeIdRequest): GetStatisticsRecordsByFeeIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStatisticsRecordsByFeeIdWithOptions(request, runtime);
}

model GetTaskRequest {
  taskId?: string(name='TaskId'),
}

model GetTaskResponseBody = {
  code?: string(name='Code'),
  data?: {
    createdAt?: string(name='CreatedAt'),
    id?: string(name='Id'),
    status?: string(name='Status'),
    videoUrl?: string(name='VideoUrl'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetTaskResponse = {
  headers: map[string]string(name='headers'),
  body: GetTaskResponseBody(name='body'),
}

async function getTaskWithOptions(request: GetTaskRequest, runtime: Util.RuntimeOptions): GetTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTask',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTask(request: GetTaskRequest): GetTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTaskWithOptions(request, runtime);
}

model GetTaskGroupRequest {
  id?: string(name='Id'),
}

model GetTaskGroupResponseBody = {
  code?: string(name='Code'),
  data?: {
    completedTasks?: int32(name='CompletedTasks'),
    createdAt?: string(name='CreatedAt'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    ruleId?: string(name='RuleId'),
    ruleName?: string(name='RuleName'),
    status?: string(name='Status'),
    taskIds?: [ string ](name='TaskIds'),
    totalTasks?: int32(name='TotalTasks'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetTaskGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetTaskGroupResponseBody(name='body'),
}

async function getTaskGroupWithOptions(request: GetTaskGroupRequest, runtime: Util.RuntimeOptions): GetTaskGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTaskGroup',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTaskGroup(request: GetTaskGroupRequest): GetTaskGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTaskGroupWithOptions(request, runtime);
}

model GetUserRequest {
  id?: string(name='Id'),
}

model GetUserResponseBody = {
  code?: string(name='Code'),
  data?: {
    createdAt?: string(name='CreatedAt'),
    departments?: [ 
      {
        description?: string(name='Description'),
        gmtCreate?: string(name='GmtCreate'),
        gmtModified?: string(name='GmtModified'),
        id?: string(name='Id'),
        name?: string(name='Name'),
      }
    ](name='Departments'),
    email?: string(name='Email'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    phoneNumber?: string(name='PhoneNumber'),
    role?: string(name='Role'),
    source?: string(name='Source'),
    updatedAt?: string(name='UpdatedAt'),
    username?: string(name='Username'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserResponseBody(name='body'),
}

async function getUserWithOptions(request: GetUserRequest, runtime: Util.RuntimeOptions): GetUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUser',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUser(request: GetUserRequest): GetUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserWithOptions(request, runtime);
}

model GetWatermarkRequest {
  clientVersion?: string(name='ClientVersion'),
  watermarkId?: string(name='WatermarkId'),
}

model GetWatermarkResponseBody = {
  code?: string(name='Code', description='code'),
  data?: {
    createdAt?: string(name='CreatedAt', description='创建时间'),
    id?: string(name='Id', description='水印id'),
    name?: string(name='Name', description='水印名称'),
    value?: string(name='Value', description='水印信息'),
  }(name='Data', description='数据'),
  errors?: [ 
    {
      field?: string(name='Field'),
      message?: string(name='Message'),
    }
  ](name='Errors', description='错误列表'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message', description='提示'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='给 pop 使用的'),
}

model GetWatermarkResponse = {
  headers: map[string]string(name='headers'),
  body: GetWatermarkResponseBody(name='body'),
}

async function getWatermarkWithOptions(request: GetWatermarkRequest, runtime: Util.RuntimeOptions): GetWatermarkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientVersion)) {
    query['ClientVersion'] = request.clientVersion;
  }
  if (!Util.isUnset(request.watermarkId)) {
    query['WatermarkId'] = request.watermarkId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWatermark',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWatermark(request: GetWatermarkRequest): GetWatermarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWatermarkWithOptions(request, runtime);
}

model InitializeServiceLinkedRoleRequest {
  roleName?: string(name='RoleName'),
}

model InitializeServiceLinkedRoleResponseBody = {
  code?: string(name='Code'),
  data?: {
    createSuccess?: boolean(name='CreateSuccess'),
    errorMessage?: string(name='ErrorMessage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model InitializeServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: InitializeServiceLinkedRoleResponseBody(name='body'),
}

async function initializeServiceLinkedRoleWithOptions(request: InitializeServiceLinkedRoleRequest, runtime: Util.RuntimeOptions): InitializeServiceLinkedRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.roleName)) {
    query['RoleName'] = request.roleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InitializeServiceLinkedRole',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function initializeServiceLinkedRole(request: InitializeServiceLinkedRoleRequest): InitializeServiceLinkedRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return initializeServiceLinkedRoleWithOptions(request, runtime);
}

model JoinLiveRequest {
  channel?: string(name='Channel'),
  rtcCode?: string(name='RtcCode'),
  userId?: string(name='UserId'),
}

model JoinLiveResponseBody = {
  code?: string(name='Code'),
  data?: {
    code?: int32(name='Code'),
    tokenData?: {
      appId?: string(name='AppId'),
      gslb?: [ string ](name='Gslb'),
      liveId?: string(name='LiveId'),
      nonce?: string(name='Nonce'),
      timestamp?: long(name='Timestamp'),
      token?: string(name='Token'),
      turn?: {
        password?: string(name='Password'),
        username?: string(name='Username'),
      }(name='Turn'),
      userId?: string(name='UserId'),
    }(name='TokenData'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model JoinLiveResponse = {
  headers: map[string]string(name='headers'),
  body: JoinLiveResponseBody(name='body'),
}

async function joinLiveWithOptions(request: JoinLiveRequest, runtime: Util.RuntimeOptions): JoinLiveResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channel)) {
    query['Channel'] = request.channel;
  }
  if (!Util.isUnset(request.rtcCode)) {
    query['RtcCode'] = request.rtcCode;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'JoinLive',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function joinLive(request: JoinLiveRequest): JoinLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return joinLiveWithOptions(request, runtime);
}

model ListAppsRequest {
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model ListAppsResponseBody = {
  code?: string(name='Code'),
  data?: {
    items?: [ 
      {
        createdAt?: string(name='CreatedAt'),
        departmentId?: string(name='DepartmentId'),
        departmentName?: string(name='DepartmentName'),
        disabled?: boolean(name='Disabled'),
        id?: string(name='Id'),
        name?: string(name='Name'),
        packageName?: string(name='PackageName'),
      }
    ](name='Items'),
    totalElements?: long(name='TotalElements'),
    totalPages?: int32(name='TotalPages'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListAppsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAppsResponseBody(name='body'),
}

async function listAppsWithOptions(request: ListAppsRequest, runtime: Util.RuntimeOptions): ListAppsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListApps',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listApps(request: ListAppsRequest): ListAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppsWithOptions(request, runtime);
}

model ListDepartmentsRequest {
  name?: string(name='Name'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  userId?: string(name='UserId'),
}

model ListDepartmentsResponseBody = {
  code?: string(name='Code'),
  data?: {
    items?: [ 
      {
        administrators?: [ 
          {
            id?: string(name='Id'),
            name?: string(name='Name'),
          }
        ](name='Administrators'),
        createdAt?: string(name='CreatedAt'),
        description?: string(name='Description'),
        id?: string(name='Id'),
        name?: string(name='Name'),
        updatedAt?: string(name='UpdatedAt'),
      }
    ](name='Items'),
    totalElements?: long(name='TotalElements'),
    totalPages?: int32(name='TotalPages'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListDepartmentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDepartmentsResponseBody(name='body'),
}

async function listDepartmentsWithOptions(request: ListDepartmentsRequest, runtime: Util.RuntimeOptions): ListDepartmentsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDepartments',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDepartments(request: ListDepartmentsRequest): ListDepartmentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDepartmentsWithOptions(request, runtime);
}

model ListDetectProcessesRequest {
  name?: string(name='Name'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  publishStatus?: boolean(name='PublishStatus'),
}

model ListDetectProcessesResponseBody = {
  code?: string(name='Code'),
  data?: {
    items?: [ 
      {
        content?: string(name='Content'),
        contentAt?: string(name='ContentAt', description='发布时间'),
        createdAt?: string(name='CreatedAt'),
        draft?: string(name='Draft'),
        draftAt?: string(name='DraftAt', description='保存时间'),
        fileUrl?: string(name='FileUrl'),
        id?: string(name='Id'),
        md5?: string(name='Md5'),
        name?: string(name='Name'),
        newVersion?: boolean(name='NewVersion'),
        updatedAt?: string(name='UpdatedAt'),
      }
    ](name='Items'),
    totalElements?: long(name='TotalElements'),
    totalPages?: int32(name='TotalPages'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListDetectProcessesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDetectProcessesResponseBody(name='body'),
}

async function listDetectProcessesWithOptions(request: ListDetectProcessesRequest, runtime: Util.RuntimeOptions): ListDetectProcessesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.publishStatus)) {
    query['PublishStatus'] = request.publishStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDetectProcesses',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDetectProcesses(request: ListDetectProcessesRequest): ListDetectProcessesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDetectProcessesWithOptions(request, runtime);
}

model ListDetectionsRequest {
  createDateFrom?: string(name='CreateDateFrom'),
  createDateTo?: string(name='CreateDateTo'),
  departmentId?: string(name='DepartmentId'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  recordingType?: string(name='RecordingType'),
  ruleId?: string(name='RuleId'),
}

model ListDetectionsResponseBody = {
  code?: string(name='Code'),
  data?: {
    items?: [ 
      {
        createdAt?: string(name='CreatedAt'),
        departmentId?: string(name='DepartmentId'),
        departmentName?: string(name='DepartmentName'),
        id?: string(name='Id'),
        recordingType?: string(name='RecordingType'),
        ruleId?: string(name='RuleId'),
        ruleName?: string(name='RuleName'),
        status?: string(name='Status'),
        tasks?: [ 
          {
            createdAt?: string(name='CreatedAt'),
            id?: string(name='Id'),
            status?: string(name='Status'),
            videoMetaUrl?: string(name='VideoMetaUrl'),
            videoUrl?: string(name='VideoUrl'),
          }
        ](name='Tasks'),
      }
    ](name='Items'),
    totalElements?: long(name='TotalElements'),
    totalPages?: int32(name='TotalPages'),
  }(name='Data'),
  errors?: [ 
    {
      field?: string(name='Field'),
      message?: string(name='Message'),
    }
  ](name='Errors'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListDetectionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDetectionsResponseBody(name='body'),
}

async function listDetectionsWithOptions(request: ListDetectionsRequest, runtime: Util.RuntimeOptions): ListDetectionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.createDateFrom)) {
    query['CreateDateFrom'] = request.createDateFrom;
  }
  if (!Util.isUnset(request.createDateTo)) {
    query['CreateDateTo'] = request.createDateTo;
  }
  if (!Util.isUnset(request.departmentId)) {
    query['DepartmentId'] = request.departmentId;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.recordingType)) {
    query['RecordingType'] = request.recordingType;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDetections',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDetections(request: ListDetectionsRequest): ListDetectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDetectionsWithOptions(request, runtime);
}

model ListFilesRequest {
  limit?: int32(name='Limit'),
  prefix?: string(name='Prefix'),
}

model ListFilesResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data', description='数据'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListFilesResponse = {
  headers: map[string]string(name='headers'),
  body: ListFilesResponseBody(name='body'),
}

async function listFilesWithOptions(request: ListFilesRequest, runtime: Util.RuntimeOptions): ListFilesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.prefix)) {
    query['Prefix'] = request.prefix;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFiles',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFiles(request: ListFilesRequest): ListFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFilesWithOptions(request, runtime);
}

model ListLiveAppsRequest {
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model ListLiveAppsResponseBody = {
  code?: string(name='Code'),
  data?: {
    items?: [ 
      {
        createdAt?: string(name='CreatedAt'),
        id?: string(name='Id'),
        name?: string(name='Name'),
        rtcCode?: string(name='RtcCode'),
      }
    ](name='Items'),
    totalElements?: long(name='TotalElements'),
    totalPages?: int32(name='TotalPages'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListLiveAppsResponse = {
  headers: map[string]string(name='headers'),
  body: ListLiveAppsResponseBody(name='body'),
}

async function listLiveAppsWithOptions(request: ListLiveAppsRequest, runtime: Util.RuntimeOptions): ListLiveAppsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLiveApps',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLiveApps(request: ListLiveAppsRequest): ListLiveAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLiveAppsWithOptions(request, runtime);
}

model ListLiveRecordTemplatesRequest {
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model ListLiveRecordTemplatesResponseBody = {
  code?: string(name='Code'),
  data?: {
    items?: [ 
      {
        createdAt?: string(name='CreatedAt'),
        id?: string(name='Id'),
        name?: string(name='Name'),
        rtcCode?: string(name='RtcCode'),
        updatedAt?: string(name='UpdatedAt'),
      }
    ](name='Items'),
    totalElements?: long(name='TotalElements'),
    totalPages?: int32(name='TotalPages'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListLiveRecordTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListLiveRecordTemplatesResponseBody(name='body'),
}

async function listLiveRecordTemplatesWithOptions(request: ListLiveRecordTemplatesRequest, runtime: Util.RuntimeOptions): ListLiveRecordTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLiveRecordTemplates',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLiveRecordTemplates(request: ListLiveRecordTemplatesRequest): ListLiveRecordTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLiveRecordTemplatesWithOptions(request, runtime);
}

model ListLiveRecordsRequest {
  liveId?: string(name='LiveId'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model ListLiveRecordsResponseBody = {
  code?: string(name='Code'),
  data?: {
    items?: [ 
      {
        channel?: string(name='Channel'),
        createdAt?: string(name='CreatedAt'),
        id?: string(name='Id'),
        sourceType?: long(name='SourceType'),
        videoUrl?: string(name='VideoUrl'),
      }
    ](name='Items'),
    totalElements?: long(name='TotalElements'),
    totalPages?: int32(name='TotalPages'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListLiveRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: ListLiveRecordsResponseBody(name='body'),
}

async function listLiveRecordsWithOptions(request: ListLiveRecordsRequest, runtime: Util.RuntimeOptions): ListLiveRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.liveId)) {
    query['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLiveRecords',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLiveRecords(request: ListLiveRecordsRequest): ListLiveRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLiveRecordsWithOptions(request, runtime);
}

model ListLivesRequest {
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model ListLivesResponseBody = {
  code?: string(name='Code'),
  data?: {
    items?: [ 
      {
        channel?: string(name='Channel'),
        createdAt?: string(name='CreatedAt'),
        id?: string(name='Id'),
        name?: string(name='Name'),
        publicId?: string(name='PublicId'),
        status?: string(name='Status'),
        userId?: string(name='UserId'),
      }
    ](name='Items'),
    totalElements?: long(name='TotalElements'),
    totalPages?: int32(name='TotalPages'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListLivesResponse = {
  headers: map[string]string(name='headers'),
  body: ListLivesResponseBody(name='body'),
}

async function listLivesWithOptions(request: ListLivesRequest, runtime: Util.RuntimeOptions): ListLivesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLives',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLives(request: ListLivesRequest): ListLivesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLivesWithOptions(request, runtime);
}

model ListRecordResultsRequest {
  createDateFrom?: string(name='CreateDateFrom', description='yyyy-MM-dd'),
  createDateTo?: string(name='CreateDateTo', description='yyyy-MM-dd'),
  departmentId?: string(name='DepartmentId'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  recordId?: string(name='RecordId'),
  type?: string(name='Type'),
}

model ListRecordResultsResponseBody = {
  code?: string(name='Code', description='code'),
  data?: {
    items?: [ 
      {
        appName?: string(name='AppName', description='应用名'),
        createdAt?: string(name='CreatedAt', description='创建时间'),
        departmentName?: string(name='DepartmentName', description='部门名'),
        detectProcessName?: string(name='DetectProcessName', description='业务检测流程名'),
        duration?: long(name='Duration', description='时长'),
        id?: string(name='Id', description='双录记录id'),
        metaUrl?: string(name='MetaUrl', description='meta地址'),
        recordAt?: string(name='RecordAt', description='录制时间'),
        resultUrl?: string(name='ResultUrl', description='结果地址'),
        roomId?: string(name='RoomId', description='mrtc房间id'),
        status?: string(name='Status', description='检测状态'),
        videoUrl?: string(name='VideoUrl', description='视频地址'),
      }
    ](name='Items', description='当前页面数据项'),
    totalElements?: long(name='TotalElements', description='总数据项数'),
    totalPages?: int32(name='TotalPages', description='总页数'),
  }(name='Data', description='数据'),
  errors?: [ 
    {
      field?: string(name='Field'),
      message?: string(name='Message'),
    }
  ](name='Errors', description='错误列表'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message', description='提示'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='给 pop 使用的'),
}

model ListRecordResultsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRecordResultsResponseBody(name='body'),
}

async function listRecordResultsWithOptions(request: ListRecordResultsRequest, runtime: Util.RuntimeOptions): ListRecordResultsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.createDateFrom)) {
    query['CreateDateFrom'] = request.createDateFrom;
  }
  if (!Util.isUnset(request.createDateTo)) {
    query['CreateDateTo'] = request.createDateTo;
  }
  if (!Util.isUnset(request.departmentId)) {
    query['DepartmentId'] = request.departmentId;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.recordId)) {
    query['RecordId'] = request.recordId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRecordResults',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRecordResults(request: ListRecordResultsRequest): ListRecordResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRecordResultsWithOptions(request, runtime);
}

model ListRolesResponseBody = {
  code?: string(name='Code'),
  data?: [ string ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListRolesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRolesResponseBody(name='body'),
}

async function listRolesWithOptions(runtime: Util.RuntimeOptions): ListRolesResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListRoles',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRoles(): ListRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRolesWithOptions(runtime);
}

model ListRulesRequest {
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model ListRulesResponseBody = {
  code?: string(name='Code'),
  data?: {
    items?: [ 
      {
        content?: string(name='Content'),
        createdAt?: string(name='CreatedAt'),
        id?: string(name='Id'),
        name?: string(name='Name'),
      }
    ](name='Items'),
    totalElements?: long(name='TotalElements'),
    totalPages?: int32(name='TotalPages'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRulesResponseBody(name='body'),
}

async function listRulesWithOptions(request: ListRulesRequest, runtime: Util.RuntimeOptions): ListRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRules',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRules(request: ListRulesRequest): ListRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRulesWithOptions(request, runtime);
}

model ListStatisticsTaskRequest {
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model ListStatisticsTaskResponseBody = {
  code?: string(name='Code'),
  data?: {
    items?: [ 
      {
        createdAt?: string(name='CreatedAt'),
        fileUrl?: string(name='FileUrl'),
        name?: string(name='Name'),
        status?: int32(name='Status'),
      }
    ](name='Items'),
    totalElements?: long(name='TotalElements'),
    totalPages?: int32(name='TotalPages'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListStatisticsTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ListStatisticsTaskResponseBody(name='body'),
}

async function listStatisticsTaskWithOptions(request: ListStatisticsTaskRequest, runtime: Util.RuntimeOptions): ListStatisticsTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListStatisticsTask',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listStatisticsTask(request: ListStatisticsTaskRequest): ListStatisticsTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return listStatisticsTaskWithOptions(request, runtime);
}

model ListTaskGroupsRequest {
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  status?: string(name='Status'),
}

model ListTaskGroupsResponseBody = {
  code?: string(name='Code'),
  data?: {
    items?: [ 
      {
        completedTasks?: int32(name='CompletedTasks'),
        createdAt?: string(name='CreatedAt'),
        id?: string(name='Id'),
        name?: string(name='Name'),
        ruleId?: string(name='RuleId'),
        ruleName?: string(name='RuleName'),
        status?: string(name='Status'),
        taskIds?: [ string ](name='TaskIds'),
        totalTasks?: int32(name='TotalTasks'),
      }
    ](name='Items'),
    totalElements?: long(name='TotalElements'),
    totalPages?: int32(name='TotalPages'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListTaskGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTaskGroupsResponseBody(name='body'),
}

async function listTaskGroupsWithOptions(request: ListTaskGroupsRequest, runtime: Util.RuntimeOptions): ListTaskGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTaskGroups',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTaskGroups(request: ListTaskGroupsRequest): ListTaskGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTaskGroupsWithOptions(request, runtime);
}

model ListTaskGroupsByConstraintRequest {
  appId?: string(name='AppId'),
  id?: string(name='Id'),
  name?: string(name='Name'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  ruleId?: string(name='RuleId'),
}

model ListTaskGroupsByConstraintResponseBody = {
  code?: string(name='Code', description='code'),
  data?: {
    items?: [ 
      {
        completedTasks?: int32(name='CompletedTasks', description='已经完成任务数'),
        createdAt?: string(name='CreatedAt', description='创建时间'),
        id?: string(name='Id', description='任务组id'),
        name?: string(name='Name', description='名称'),
        ruleId?: string(name='RuleId', description='规则id'),
        ruleName?: string(name='RuleName', description='规则名称'),
        status?: string(name='Status', description='状态'),
        taskIds?: [ string ](name='TaskIds', description='任务组下的所有任务id列表'),
        totalTasks?: int32(name='TotalTasks', description='总任务数'),
      }
    ](name='Items', description='当前页面数据项'),
    totalElements?: long(name='TotalElements', description='总数据项数'),
    totalPages?: int32(name='TotalPages', description='总页数'),
  }(name='Data', description='数据'),
  errors?: [ 
    {
      field?: string(name='Field'),
      message?: string(name='Message'),
    }
  ](name='Errors', description='错误列表'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message', description='提示'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='给 pop 使用的'),
}

model ListTaskGroupsByConstraintResponse = {
  headers: map[string]string(name='headers'),
  body: ListTaskGroupsByConstraintResponseBody(name='body'),
}

async function listTaskGroupsByConstraintWithOptions(request: ListTaskGroupsByConstraintRequest, runtime: Util.RuntimeOptions): ListTaskGroupsByConstraintResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTaskGroupsByConstraint',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTaskGroupsByConstraint(request: ListTaskGroupsByConstraintRequest): ListTaskGroupsByConstraintResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTaskGroupsByConstraintWithOptions(request, runtime);
}

model ListTaskItemsRequest {
  taskId?: string(name='TaskId'),
}

model ListTaskItemsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      createdAt?: string(name='CreatedAt'),
      message?: string(name='Message'),
      name?: string(name='Name'),
      output?: string(name='Output'),
      segmentSeq?: long(name='SegmentSeq'),
      status?: string(name='Status'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListTaskItemsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTaskItemsResponseBody(name='body'),
}

async function listTaskItemsWithOptions(request: ListTaskItemsRequest, runtime: Util.RuntimeOptions): ListTaskItemsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTaskItems',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTaskItems(request: ListTaskItemsRequest): ListTaskItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTaskItemsWithOptions(request, runtime);
}

model ListTasksRequest {
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  taskGroupId?: string(name='TaskGroupId'),
}

model ListTasksResponseBody = {
  code?: string(name='Code'),
  data?: {
    items?: [ 
      {
        createdAt?: string(name='CreatedAt'),
        id?: string(name='Id'),
        status?: string(name='Status'),
        videoMetaUrl?: string(name='VideoMetaUrl'),
        videoUrl?: string(name='VideoUrl'),
      }
    ](name='Items'),
    totalElements?: long(name='TotalElements'),
    totalPages?: int32(name='TotalPages'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ListTasksResponseBody(name='body'),
}

async function listTasksWithOptions(request: ListTasksRequest, runtime: Util.RuntimeOptions): ListTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.taskGroupId)) {
    query['TaskGroupId'] = request.taskGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTasks',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTasks(request: ListTasksRequest): ListTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTasksWithOptions(request, runtime);
}

model ListUsersRequest {
  departmentId?: string(name='DepartmentId'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  username?: string(name='Username'),
}

model ListUsersResponseBody = {
  code?: string(name='Code'),
  data?: {
    items?: [ 
      {
        createdAt?: string(name='CreatedAt'),
        departments?: [ 
          {
            createdAt?: string(name='CreatedAt'),
            description?: string(name='Description'),
            id?: string(name='Id'),
            name?: string(name='Name'),
            updatedAt?: string(name='UpdatedAt'),
          }
        ](name='Departments'),
        email?: string(name='Email'),
        id?: string(name='Id'),
        name?: string(name='Name'),
        phoneNumber?: string(name='PhoneNumber'),
        ramUsername?: string(name='RamUsername'),
        role?: string(name='Role'),
        source?: string(name='Source'),
        updatedAt?: string(name='UpdatedAt'),
        username?: string(name='Username'),
      }
    ](name='Items'),
    totalElements?: long(name='TotalElements'),
    totalPages?: int32(name='TotalPages'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsersWithOptions(request: ListUsersRequest, runtime: Util.RuntimeOptions): ListUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.departmentId)) {
    query['DepartmentId'] = request.departmentId;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.username)) {
    query['Username'] = request.username;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUsers',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUsersWithOptions(request, runtime);
}

model ListWatermarksRequest {
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model ListWatermarksResponseBody = {
  code?: string(name='Code', description='code'),
  data?: {
    items?: [ 
      {
        createdAt?: string(name='CreatedAt', description='创建时间'),
        id?: string(name='Id', description='水印id'),
        name?: string(name='Name', description='水印名称'),
        value?: string(name='Value', description='水印信息'),
      }
    ](name='Items', description='当前页面数据项'),
    totalElements?: long(name='TotalElements', description='总数据项数'),
    totalPages?: int32(name='TotalPages', description='总页数'),
  }(name='Data', description='数据'),
  errors?: [ 
    {
      field?: string(name='Field'),
      message?: string(name='Message'),
    }
  ](name='Errors', description='错误列表'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message', description='提示'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='给 pop 使用的'),
}

model ListWatermarksResponse = {
  headers: map[string]string(name='headers'),
  body: ListWatermarksResponseBody(name='body'),
}

async function listWatermarksWithOptions(request: ListWatermarksRequest, runtime: Util.RuntimeOptions): ListWatermarksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWatermarks',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listWatermarks(request: ListWatermarksRequest): ListWatermarksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWatermarksWithOptions(request, runtime);
}

model RenameDetectProcessRequest {
  id?: string(name='Id'),
  name?: string(name='Name'),
}

model RenameDetectProcessResponseBody = {
  code?: string(name='Code'),
  data?: {
    content?: string(name='Content'),
    createdAt?: string(name='CreatedAt'),
    draft?: string(name='Draft'),
    id?: string(name='Id'),
    md5?: string(name='Md5'),
    name?: string(name='Name'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RenameDetectProcessResponse = {
  headers: map[string]string(name='headers'),
  body: RenameDetectProcessResponseBody(name='body'),
}

async function renameDetectProcessWithOptions(request: RenameDetectProcessRequest, runtime: Util.RuntimeOptions): RenameDetectProcessResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenameDetectProcess',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function renameDetectProcess(request: RenameDetectProcessRequest): RenameDetectProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return renameDetectProcessWithOptions(request, runtime);
}

model StartLiveRecordTaskRequest {
  backgroundColor?: int32(name='BackgroundColor'),
  clockWidgets?: [ 
    {
      fontColor?: int32(name='FontColor'),
      fontSize?: int32(name='FontSize'),
      fontType?: int32(name='FontType'),
      x?: float(name='X'),
      y?: float(name='Y'),
      ZOrder?: int32(name='ZOrder'),
    }
  ](name='ClockWidgets'),
  dynamicLayout?: boolean(name='DynamicLayout'),
  liveId?: string(name='LiveId'),
  name?: string(name='Name'),
  rtcCode?: string(name='RtcCode'),
  sourceType?: boolean(name='SourceType'),
  templateId?: string(name='TemplateId'),
  userId?: string(name='UserId'),
  userPanes?: [ 
    {
      images?: [ 
        {
          display?: int32(name='Display'),
          height?: float(name='Height'),
          url?: string(name='Url'),
          width?: float(name='Width'),
          x?: float(name='X'),
          y?: float(name='Y'),
          ZOrder?: int32(name='ZOrder'),
        }
      ](name='Images'),
      paneId?: int32(name='PaneId'),
      sourceType?: string(name='SourceType'),
      texts?: [ 
        {
          fontColor?: int32(name='FontColor'),
          fontSize?: int32(name='FontSize'),
          fontType?: int32(name='FontType'),
          text?: string(name='Text'),
          x?: float(name='X'),
          y?: float(name='Y'),
          ZOrder?: int32(name='ZOrder'),
        }
      ](name='Texts'),
      userId?: string(name='UserId'),
    }
  ](name='UserPanes'),
}

model StartLiveRecordTaskShrinkRequest {
  backgroundColor?: int32(name='BackgroundColor'),
  clockWidgetsShrink?: string(name='ClockWidgets'),
  dynamicLayout?: boolean(name='DynamicLayout'),
  liveId?: string(name='LiveId'),
  name?: string(name='Name'),
  rtcCode?: string(name='RtcCode'),
  sourceType?: boolean(name='SourceType'),
  templateId?: string(name='TemplateId'),
  userId?: string(name='UserId'),
  userPanesShrink?: string(name='UserPanes'),
}

model StartLiveRecordTaskResponseBody = {
  code?: string(name='Code'),
  data?: {
    createdAt?: string(name='CreatedAt'),
    id?: string(name='Id'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model StartLiveRecordTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StartLiveRecordTaskResponseBody(name='body'),
}

async function startLiveRecordTaskWithOptions(tmpReq: StartLiveRecordTaskRequest, runtime: Util.RuntimeOptions): StartLiveRecordTaskResponse {
  Util.validateModel(tmpReq);
  var request = new StartLiveRecordTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.clockWidgets)) {
    request.clockWidgetsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.clockWidgets, 'ClockWidgets', 'json');
  }
  if (!Util.isUnset(tmpReq.userPanes)) {
    request.userPanesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userPanes, 'UserPanes', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.backgroundColor)) {
    query['BackgroundColor'] = request.backgroundColor;
  }
  if (!Util.isUnset(request.clockWidgetsShrink)) {
    query['ClockWidgets'] = request.clockWidgetsShrink;
  }
  if (!Util.isUnset(request.dynamicLayout)) {
    query['DynamicLayout'] = request.dynamicLayout;
  }
  if (!Util.isUnset(request.liveId)) {
    query['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.rtcCode)) {
    query['RtcCode'] = request.rtcCode;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.userPanesShrink)) {
    query['UserPanes'] = request.userPanesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartLiveRecordTask',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startLiveRecordTask(request: StartLiveRecordTaskRequest): StartLiveRecordTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return startLiveRecordTaskWithOptions(request, runtime);
}

model StopLiveRecordTaskRequest {
  liveId?: string(name='LiveId'),
  userId?: string(name='UserId'),
}

model StopLiveRecordTaskResponseBody = {
  code?: string(name='Code'),
  data?: {
    id?: string(name='Id'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model StopLiveRecordTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StopLiveRecordTaskResponseBody(name='body'),
}

async function stopLiveRecordTaskWithOptions(request: StopLiveRecordTaskRequest, runtime: Util.RuntimeOptions): StopLiveRecordTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.liveId)) {
    query['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopLiveRecordTask',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopLiveRecordTask(request: StopLiveRecordTaskRequest): StopLiveRecordTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopLiveRecordTaskWithOptions(request, runtime);
}

model UpdateAppRequest {
  departmentId?: string(name='DepartmentId'),
  disabled?: boolean(name='Disabled'),
  id?: string(name='Id'),
  name?: string(name='Name'),
  packageName?: string(name='PackageName'),
}

model UpdateAppResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateAppResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAppResponseBody(name='body'),
}

async function updateAppWithOptions(request: UpdateAppRequest, runtime: Util.RuntimeOptions): UpdateAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.departmentId)) {
    query['DepartmentId'] = request.departmentId;
  }
  if (!Util.isUnset(request.disabled)) {
    query['Disabled'] = request.disabled;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.packageName)) {
    query['PackageName'] = request.packageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateApp',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateApp(request: UpdateAppRequest): UpdateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAppWithOptions(request, runtime);
}

model UpdateDepartmentRequest {
  description?: string(name='Description'),
  id?: string(name='Id'),
  label?: string(name='Label'),
  name?: string(name='Name'),
}

model UpdateDepartmentResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateDepartmentResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDepartmentResponseBody(name='body'),
}

async function updateDepartmentWithOptions(request: UpdateDepartmentRequest, runtime: Util.RuntimeOptions): UpdateDepartmentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.label)) {
    body['Label'] = request.label;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDepartment',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDepartment(request: UpdateDepartmentRequest): UpdateDepartmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDepartmentWithOptions(request, runtime);
}

model UpdateDetectProcessRequest {
  content?: string(name='Content'),
  draft?: string(name='Draft'),
  id?: string(name='Id'),
  name?: string(name='Name'),
}

model UpdateDetectProcessResponseBody = {
  code?: string(name='Code'),
  data?: {
    content?: string(name='Content'),
    createdAt?: string(name='CreatedAt'),
    draft?: string(name='Draft'),
    id?: string(name='Id'),
    md5?: string(name='Md5'),
    name?: string(name='Name'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateDetectProcessResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDetectProcessResponseBody(name='body'),
}

async function updateDetectProcessWithOptions(request: UpdateDetectProcessRequest, runtime: Util.RuntimeOptions): UpdateDetectProcessResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.draft)) {
    query['Draft'] = request.draft;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDetectProcess',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDetectProcess(request: UpdateDetectProcessRequest): UpdateDetectProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDetectProcessWithOptions(request, runtime);
}

model UpdateLiveRequest {
  liveId?: string(name='LiveId'),
  status?: string(name='Status'),
  userId?: string(name='UserId'),
}

model UpdateLiveResponseBody = {
  code?: string(name='Code'),
  data?: {
    createdAt?: string(name='CreatedAt'),
    id?: string(name='Id'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateLiveResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveResponseBody(name='body'),
}

async function updateLiveWithOptions(request: UpdateLiveRequest, runtime: Util.RuntimeOptions): UpdateLiveResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.liveId)) {
    query['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateLive',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateLive(request: UpdateLiveRequest): UpdateLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveWithOptions(request, runtime);
}

model UpdateLiveRecordTaskRequest {
  backgroundColor?: int32(name='BackgroundColor'),
  clockWidgets?: [ 
    {
      fontColor?: int32(name='FontColor'),
      fontSize?: int32(name='FontSize'),
      fontType?: int32(name='FontType'),
      x?: float(name='X'),
      y?: float(name='Y'),
      ZOrder?: int32(name='ZOrder'),
    }
  ](name='ClockWidgets'),
  dynamicLayout?: boolean(name='DynamicLayout'),
  liveId?: string(name='LiveId'),
  name?: string(name='Name'),
  rtcCode?: string(name='RtcCode'),
  sourceType?: boolean(name='SourceType'),
  templateId?: string(name='TemplateId'),
  userId?: string(name='UserId'),
  userPanes?: [ 
    {
      images?: [ 
        {
          display?: int32(name='Display'),
          height?: float(name='Height'),
          url?: string(name='Url'),
          width?: float(name='Width'),
          x?: float(name='X'),
          y?: float(name='Y'),
          ZOrder?: int32(name='ZOrder'),
        }
      ](name='Images'),
      paneId?: int32(name='PaneId'),
      sourceType?: string(name='SourceType'),
      texts?: [ 
        {
          fontColor?: int32(name='FontColor'),
          fontSize?: int32(name='FontSize'),
          fontType?: int32(name='FontType'),
          text?: string(name='Text'),
          x?: float(name='X'),
          y?: float(name='Y'),
          ZOrder?: int32(name='ZOrder'),
        }
      ](name='Texts'),
      userId?: string(name='UserId'),
    }
  ](name='UserPanes'),
}

model UpdateLiveRecordTaskShrinkRequest {
  backgroundColor?: int32(name='BackgroundColor'),
  clockWidgetsShrink?: string(name='ClockWidgets'),
  dynamicLayout?: boolean(name='DynamicLayout'),
  liveId?: string(name='LiveId'),
  name?: string(name='Name'),
  rtcCode?: string(name='RtcCode'),
  sourceType?: boolean(name='SourceType'),
  templateId?: string(name='TemplateId'),
  userId?: string(name='UserId'),
  userPanesShrink?: string(name='UserPanes'),
}

model UpdateLiveRecordTaskResponseBody = {
  code?: string(name='Code'),
  data?: {
    createdAt?: string(name='CreatedAt'),
    id?: string(name='Id'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateLiveRecordTaskResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveRecordTaskResponseBody(name='body'),
}

async function updateLiveRecordTaskWithOptions(tmpReq: UpdateLiveRecordTaskRequest, runtime: Util.RuntimeOptions): UpdateLiveRecordTaskResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateLiveRecordTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.clockWidgets)) {
    request.clockWidgetsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.clockWidgets, 'ClockWidgets', 'json');
  }
  if (!Util.isUnset(tmpReq.userPanes)) {
    request.userPanesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userPanes, 'UserPanes', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.backgroundColor)) {
    query['BackgroundColor'] = request.backgroundColor;
  }
  if (!Util.isUnset(request.clockWidgetsShrink)) {
    query['ClockWidgets'] = request.clockWidgetsShrink;
  }
  if (!Util.isUnset(request.dynamicLayout)) {
    query['DynamicLayout'] = request.dynamicLayout;
  }
  if (!Util.isUnset(request.liveId)) {
    query['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.rtcCode)) {
    query['RtcCode'] = request.rtcCode;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.userPanesShrink)) {
    query['UserPanes'] = request.userPanesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateLiveRecordTask',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateLiveRecordTask(request: UpdateLiveRecordTaskRequest): UpdateLiveRecordTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveRecordTaskWithOptions(request, runtime);
}

model UpdateLiveRecordTemplateRequest {
  backgroundColor?: int32(name='BackgroundColor'),
  backgrounds?: [ 
    {
      display?: int32(name='Display'),
      height?: float(name='Height'),
      url?: string(name='Url'),
      width?: float(name='Width'),
      x?: float(name='X'),
      y?: float(name='Y'),
      ZOrder?: int32(name='ZOrder'),
    }
  ](name='Backgrounds'),
  clockWidgets?: [ 
    {
      fontColor?: int32(name='FontColor'),
      fontSize?: int32(name='FontSize'),
      fontType?: int32(name='FontType'),
      x?: float(name='X'),
      y?: float(name='Y'),
      ZOrder?: int32(name='ZOrder'),
    }
  ](name='ClockWidgets'),
  id?: string(name='Id'),
  layoutIds?: [ string ](name='LayoutIds'),
  name?: string(name='Name'),
  rtcCode?: string(name='RtcCode'),
  watermarks?: [ 
    {
      alpha?: float(name='Alpha'),
      display?: int32(name='Display'),
      height?: float(name='Height'),
      url?: string(name='Url'),
      width?: float(name='Width'),
      x?: float(name='X'),
      y?: float(name='Y'),
      ZOrder?: int32(name='ZOrder'),
    }
  ](name='Watermarks'),
}

model UpdateLiveRecordTemplateShrinkRequest {
  backgroundColor?: int32(name='BackgroundColor'),
  backgroundsShrink?: string(name='Backgrounds'),
  clockWidgetsShrink?: string(name='ClockWidgets'),
  id?: string(name='Id'),
  layoutIds?: [ string ](name='LayoutIds'),
  name?: string(name='Name'),
  rtcCode?: string(name='RtcCode'),
  watermarksShrink?: string(name='Watermarks'),
}

model UpdateLiveRecordTemplateResponseBody = {
  code?: string(name='Code'),
  data?: {
    createdAt?: string(name='CreatedAt'),
    id?: string(name='Id'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateLiveRecordTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveRecordTemplateResponseBody(name='body'),
}

async function updateLiveRecordTemplateWithOptions(tmpReq: UpdateLiveRecordTemplateRequest, runtime: Util.RuntimeOptions): UpdateLiveRecordTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateLiveRecordTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.backgrounds)) {
    request.backgroundsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.backgrounds, 'Backgrounds', 'json');
  }
  if (!Util.isUnset(tmpReq.clockWidgets)) {
    request.clockWidgetsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.clockWidgets, 'ClockWidgets', 'json');
  }
  if (!Util.isUnset(tmpReq.watermarks)) {
    request.watermarksShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.watermarks, 'Watermarks', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.backgroundColor)) {
    query['BackgroundColor'] = request.backgroundColor;
  }
  if (!Util.isUnset(request.backgroundsShrink)) {
    query['Backgrounds'] = request.backgroundsShrink;
  }
  if (!Util.isUnset(request.clockWidgetsShrink)) {
    query['ClockWidgets'] = request.clockWidgetsShrink;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.layoutIds)) {
    query['LayoutIds'] = request.layoutIds;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.rtcCode)) {
    query['RtcCode'] = request.rtcCode;
  }
  if (!Util.isUnset(request.watermarksShrink)) {
    query['Watermarks'] = request.watermarksShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateLiveRecordTemplate',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateLiveRecordTemplate(request: UpdateLiveRecordTemplateRequest): UpdateLiveRecordTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveRecordTemplateWithOptions(request, runtime);
}

model UpdateRuleRequest {
  content?: string(name='Content'),
  id?: string(name='Id'),
  name?: string(name='Name'),
}

model UpdateRuleResponseBody = {
  code?: string(name='Code'),
  data?: {
    content?: string(name='Content'),
    createdAt?: string(name='CreatedAt'),
    id?: string(name='Id'),
    name?: string(name='Name'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRuleResponseBody(name='body'),
}

async function updateRuleWithOptions(request: UpdateRuleRequest, runtime: Util.RuntimeOptions): UpdateRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRule',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRule(request: UpdateRuleRequest): UpdateRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRuleWithOptions(request, runtime);
}

model UpdateServiceConfigurationRequest {
  clientQueueSize?: int32(name='ClientQueueSize'),
  liveRecordAll?: boolean(name='LiveRecordAll'),
  liveRecordEveryOne?: boolean(name='LiveRecordEveryOne'),
  liveRecordLayout?: int32(name='LiveRecordLayout'),
  liveRecordMaxClient?: int32(name='LiveRecordMaxClient'),
  liveRecordTaskProfile?: string(name='LiveRecordTaskProfile'),
  liveRecordVideoResolution?: int32(name='LiveRecordVideoResolution'),
  taskItemQueueSize?: int32(name='TaskItemQueueSize'),
}

model UpdateServiceConfigurationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateServiceConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceConfigurationResponseBody(name='body'),
}

async function updateServiceConfigurationWithOptions(request: UpdateServiceConfigurationRequest, runtime: Util.RuntimeOptions): UpdateServiceConfigurationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientQueueSize)) {
    query['ClientQueueSize'] = request.clientQueueSize;
  }
  if (!Util.isUnset(request.liveRecordAll)) {
    query['LiveRecordAll'] = request.liveRecordAll;
  }
  if (!Util.isUnset(request.liveRecordEveryOne)) {
    query['LiveRecordEveryOne'] = request.liveRecordEveryOne;
  }
  if (!Util.isUnset(request.liveRecordLayout)) {
    query['LiveRecordLayout'] = request.liveRecordLayout;
  }
  if (!Util.isUnset(request.liveRecordMaxClient)) {
    query['LiveRecordMaxClient'] = request.liveRecordMaxClient;
  }
  if (!Util.isUnset(request.liveRecordTaskProfile)) {
    query['LiveRecordTaskProfile'] = request.liveRecordTaskProfile;
  }
  if (!Util.isUnset(request.liveRecordVideoResolution)) {
    query['LiveRecordVideoResolution'] = request.liveRecordVideoResolution;
  }
  if (!Util.isUnset(request.taskItemQueueSize)) {
    query['TaskItemQueueSize'] = request.taskItemQueueSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateServiceConfiguration',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateServiceConfiguration(request: UpdateServiceConfigurationRequest): UpdateServiceConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateServiceConfigurationWithOptions(request, runtime);
}

model UpdateSlrConfigurationRequest {
  mqEndpoint?: string(name='MqEndpoint'),
  mqEvent?: [ string ](name='MqEvent'),
  mqGroupId?: string(name='MqGroupId'),
  mqGroupIdTest?: string(name='MqGroupIdTest'),
  mqInstanceId?: string(name='MqInstanceId'),
  mqSubscribe?: boolean(name='MqSubscribe'),
  mqTopic?: string(name='MqTopic'),
  mqTopicTest?: string(name='MqTopicTest'),
}

model UpdateSlrConfigurationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateSlrConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSlrConfigurationResponseBody(name='body'),
}

async function updateSlrConfigurationWithOptions(request: UpdateSlrConfigurationRequest, runtime: Util.RuntimeOptions): UpdateSlrConfigurationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mqEndpoint)) {
    query['MqEndpoint'] = request.mqEndpoint;
  }
  if (!Util.isUnset(request.mqEvent)) {
    query['MqEvent'] = request.mqEvent;
  }
  if (!Util.isUnset(request.mqGroupId)) {
    query['MqGroupId'] = request.mqGroupId;
  }
  if (!Util.isUnset(request.mqGroupIdTest)) {
    query['MqGroupIdTest'] = request.mqGroupIdTest;
  }
  if (!Util.isUnset(request.mqInstanceId)) {
    query['MqInstanceId'] = request.mqInstanceId;
  }
  if (!Util.isUnset(request.mqSubscribe)) {
    query['MqSubscribe'] = request.mqSubscribe;
  }
  if (!Util.isUnset(request.mqTopic)) {
    query['MqTopic'] = request.mqTopic;
  }
  if (!Util.isUnset(request.mqTopicTest)) {
    query['MqTopicTest'] = request.mqTopicTest;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSlrConfiguration',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSlrConfiguration(request: UpdateSlrConfigurationRequest): UpdateSlrConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSlrConfigurationWithOptions(request, runtime);
}

model UpdateUserRequest {
  email?: string(name='Email'),
  id?: string(name='Id'),
  name?: string(name='Name'),
  phoneNumber?: string(name='PhoneNumber'),
  role?: string(name='Role'),
}

model UpdateUserResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateUserResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateUserResponseBody(name='body'),
}

async function updateUserWithOptions(request: UpdateUserRequest, runtime: Util.RuntimeOptions): UpdateUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.role)) {
    query['Role'] = request.role;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateUser',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUserWithOptions(request, runtime);
}

model UpdateWatermarkRequest {
  name?: string(name='Name'),
  value?: string(name='Value'),
  watermarkId?: string(name='WatermarkId'),
}

model UpdateWatermarkResponseBody = {
  code?: string(name='Code', description='code'),
  data?: {
    createdAt?: string(name='CreatedAt', description='创建时间'),
    id?: string(name='Id', description='水印id'),
    name?: string(name='Name', description='水印名称'),
    value?: string(name='Value', description='水印信息'),
  }(name='Data', description='数据'),
  errors?: [ 
    {
      field?: string(name='Field'),
      message?: string(name='Message'),
    }
  ](name='Errors', description='错误列表'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message', description='提示'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='给 pop 使用的'),
}

model UpdateWatermarkResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateWatermarkResponseBody(name='body'),
}

async function updateWatermarkWithOptions(request: UpdateWatermarkRequest, runtime: Util.RuntimeOptions): UpdateWatermarkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  if (!Util.isUnset(request.watermarkId)) {
    query['WatermarkId'] = request.watermarkId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWatermark',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateWatermark(request: UpdateWatermarkRequest): UpdateWatermarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWatermarkWithOptions(request, runtime);
}

model UploadReportRequest {
  appId?: string(name='AppId'),
  clientVersion?: string(name='ClientVersion'),
  departmentId?: string(name='DepartmentId'),
  detectProcessId?: string(name='DetectProcessId'),
  duration?: long(name='Duration'),
  feeId?: string(name='FeeId'),
  metaUrl?: string(name='MetaUrl'),
  recordAt?: string(name='RecordAt', description='yyyy-MM-dd hh:mm:ss'),
  resultUrl?: string(name='ResultUrl'),
  roomId?: string(name='RoomId'),
  type?: string(name='Type'),
  userId?: string(name='UserId'),
  videoUrl?: string(name='VideoUrl'),
}

model UploadReportResponseBody = {
  code?: string(name='Code', description='code'),
  data?: {
    createdAt?: string(name='CreatedAt', description='创建时间'),
    duration?: long(name='Duration', description='时长'),
    id?: string(name='Id', description='双录记录id'),
    metaUrl?: string(name='MetaUrl', description='meta地址'),
    recordAt?: string(name='RecordAt', description='录制时间'),
    resultUrl?: string(name='ResultUrl', description='结果地址'),
    videoUrl?: string(name='VideoUrl', description='视频地址'),
  }(name='Data', description='数据'),
  errors?: [ 
    {
      field?: string(name='Field'),
      message?: string(name='Message'),
    }
  ](name='Errors', description='错误列表'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message', description='提示'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='给 pop 使用的'),
}

model UploadReportResponse = {
  headers: map[string]string(name='headers'),
  body: UploadReportResponseBody(name='body'),
}

async function uploadReportWithOptions(request: UploadReportRequest, runtime: Util.RuntimeOptions): UploadReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.clientVersion)) {
    query['ClientVersion'] = request.clientVersion;
  }
  if (!Util.isUnset(request.departmentId)) {
    query['DepartmentId'] = request.departmentId;
  }
  if (!Util.isUnset(request.detectProcessId)) {
    query['DetectProcessId'] = request.detectProcessId;
  }
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.feeId)) {
    query['FeeId'] = request.feeId;
  }
  if (!Util.isUnset(request.metaUrl)) {
    query['MetaUrl'] = request.metaUrl;
  }
  if (!Util.isUnset(request.recordAt)) {
    query['RecordAt'] = request.recordAt;
  }
  if (!Util.isUnset(request.resultUrl)) {
    query['ResultUrl'] = request.resultUrl;
  }
  if (!Util.isUnset(request.roomId)) {
    query['RoomId'] = request.roomId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.videoUrl)) {
    query['VideoUrl'] = request.videoUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UploadReport',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function uploadReport(request: UploadReportRequest): UploadReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadReportWithOptions(request, runtime);
}

