/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'OpenITag';
  @version = '2022-06-16';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateTaskDetail {
  admins?: {
    users?: [
      SimpleUser
    ](name='Users'),
  }(name='Admins'),
  allowAppendData?: boolean(name='AllowAppendData'),
  assignConfig: TaskAssginConfig(name='AssignConfig'),
  datasetProxyRelations: [
    DatasetProxyConfig
  ](name='DatasetProxyRelations'),
  exif?: map[string]any(name='Exif'),
  tags?: [ string ](name='Tags'),
  taskName: string(name='TaskName'),
  taskTemplateConfig?: TaskTemplateConfig(name='TaskTemplateConfig'),
  taskWorkflow: [ 
    {
      nodeName?: string(name='NodeName'),
    }
  ](name='TaskWorkflow'),
  templateId: string(name='TemplateId'),
  UUID: string(name='UUID'),
  voteConfigs?: map[string]CreateTaskDetailVoteInfo(name='VoteConfigs'),
}

model CreateTaskDetailVoteInfo {
  minVote?: long(name='MinVote', example='3'),
  voteNum?: long(name='VoteNum', example='3'),
}

model DatasetProxyConfig {
  datasetType?: string(name='DatasetType', example='LABEL'),
  source?: string(name='Source', example='PAI'),
  sourceDatasetId: string(name='SourceDatasetId'),
}

model FlowJobInfo {
  display?: boolean(name='Display'),
  jobId?: string(name='JobId'),
  jobType?: string(name='JobType'),
  messageId?: string(name='MessageId'),
  processType?: string(name='ProcessType'),
  taskId?: string(name='TaskId'),
}

model Job {
  creator?: SimpleUser(name='Creator'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  jobId?: string(name='JobId'),
  jobResult?: {
    resultLink?: string(name='ResultLink'),
  }(name='JobResult'),
  jobType?: string(name='JobType'),
  status?: string(name='Status'),
}

model MarkResult {
  isNeedVoteJudge?: boolean(name='IsNeedVoteJudge', example='False'),
  markResult?: string(name='MarkResult', example='b'),
  markResultId?: string(name='MarkResultId', example='1500758849089597440'),
  markTime?: string(name='MarkTime', example='Mon Mar 07 17:02:48 CST 2022'),
  markTitle?: string(name='MarkTitle', example='单选'),
  progress?: string(name='Progress', example='None'),
  questionId?: string(name='QuestionId', example='1'),
  resultType?: string(name='ResultType', example='RADIO'),
  userMarkResultId?: string(name='UserMarkResultId', example='1500758849358032896'),
  version?: string(name='Version', example='1646643768468'),
}

model OpenDatasetProxyAppendDataRequest {
  dataMeta?: [ map[string]string ](name='DataMeta'),
  taskId?: string(name='TaskId'),
  traceId?: string(name='TraceId'),
  UUID?: string(name='UUID'),
}

model QuestionOption {
  children?: [
    QuestionOption
  ](name='Children'),
  color?: string(name='Color'),
  key: string(name='Key'),
  label: string(name='Label'),
  remark?: string(name='Remark'),
  shortcut?: string(name='Shortcut'),
}

model QuestionPlugin {
  canSelect?: boolean(name='CanSelect', example='False'),
  children?: [
    QuestionPlugin
  ](name='Children'),
  defaultResult?: string(name='DefaultResult', example='None'),
  display: boolean(name='Display', example='True'),
  exif?: map[string]any(name='Exif'),
  hotKeyMap?: string(name='HotKeyMap', example='None'),
  markTitle: string(name='MarkTitle', example='内部单选'),
  markTitleAlias?: string(name='MarkTitleAlias', example='None'),
  mustFill: boolean(name='MustFill', example='False'),
  options: [
    QuestionOption
  ](name='Options'),
  preOptions?: [ string ](name='PreOptions'),
  questionId: string(name='QuestionId'),
  rule?: string(name='Rule', example='None'),
  selectGroup?: string(name='SelectGroup', example='None'),
  selected?: boolean(name='Selected', example='False'),
  type: string(name='Type', example='RADIO'),
}

model SimpleSubtask {
  items?: [ 
    {
      abandonFlag?: boolean(name='AbandonFlag', example='False'),
      abandonRemark?: string(name='AbandonRemark', example='None'),
      dataId?: string(name='DataId', example='1957578084'),
      feedbackFlag?: boolean(name='FeedbackFlag', example='False'),
      feedbackRemark?: string(name='FeedbackRemark', example='None'),
      fixedFlag?: boolean(name='FixedFlag', example='False'),
      itemId?: long(name='ItemId'),
      mine?: long(name='Mine', example='0'),
      rejectFlag?: boolean(name='RejectFlag', example='False'),
      state?: string(name='State', example='HANDLING'),
      weight?: long(name='Weight', example='311011'),
    }
  ](name='Items'),
  status?: string(name='Status', example='FINISHED'),
  subtaskId?: long(name='SubtaskId', example='1500682457270333440'),
}

model SimpleTask {
  archived?: boolean(name='Archived'),
  archivedInfos?: string(name='ArchivedInfos'),
  creator?: SimpleUser(name='Creator'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  labelStyle?: string(name='LabelStyle'),
  modifier?: SimpleUser(name='Modifier'),
  refTaskId?: string(name='RefTaskId'),
  remark?: string(name='Remark'),
  stage?: string(name='Stage'),
  status?: string(name='Status'),
  tags?: [ string ](name='Tags'),
  taskId?: string(name='TaskId'),
  taskName?: string(name='TaskName'),
  taskType?: string(name='TaskType'),
  templateId?: string(name='TemplateId'),
  tenantId?: string(name='TenantId'),
  UUID?: string(name='UUID'),
  workflowNodes?: [ string ](name='WorkflowNodes'),
}

model SimpleTemplate {
  abandonReasons?: string(name='AbandonReasons', example='None'),
  description?: string(name='Description'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2022-07-12 14:21:08'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2022-07-12 14:21:08'),
  sharedMode?: string(name='SharedMode', example='None'),
  status?: string(name='Status', example='DRAFT'),
  tags?: [ string ](name='Tags'),
  templateId?: string(name='TemplateId', example='1546741431673270272'),
  templateName?: string(name='TemplateName', example='图片分割组合77aa'),
  tenantId?: string(name='TenantId', example='GARDAW134'),
  type?: string(name='Type', example='CUSTOM'),
}

model SimpleTenant {
  creator?: SimpleUser(name='Creator'),
  description?: string(name='Description'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  modifier?: SimpleUser(name='Modifier'),
  role?: string(name='Role'),
  tenantId?: string(name='TenantId'),
  tenantName?: string(name='TenantName'),
  UUID?: string(name='UUID'),
}

model SimpleUser {
  accountNo?: string(name='AccountNo'),
  accountType?: string(name='AccountType', example='BUC'),
  role?: string(name='Role'),
  userId?: long(name='UserId'),
  userName?: string(name='UserName'),
}

model SimpleWorkforce {
  userIds?: [ long ](name='UserIds'),
  workNodeId?: int32(name='WorkNodeId'),
}

model SingleTenant {
  description?: string(name='Description'),
  status?: string(name='Status'),
  tenantId?: string(name='TenantId'),
  tenantName?: string(name='TenantName'),
  UUID?: string(name='UUID'),
}

model SubtaskDetail {
  canDiscard?: boolean(name='CanDiscard'),
  canReassign?: boolean(name='CanReassign'),
  canRelease?: boolean(name='CanRelease'),
  currentWorkNode?: string(name='CurrentWorkNode', example='MARK'),
  extConfigs?: string(name='ExtConfigs'),
  items?: [ 
    {
      abandonFlag?: boolean(name='AbandonFlag', example='False'),
      abandonRemark?: string(name='AbandonRemark', example='None'),
      dataId?: string(name='DataId', example='1957578084'),
      feedbackFlag?: boolean(name='FeedbackFlag', example='False'),
      feedbackRemark?: string(name='FeedbackRemark', example='None'),
      fixedFlag?: boolean(name='FixedFlag', example='False'),
      mine?: long(name='Mine', example='0'),
      rejectFlag?: boolean(name='RejectFlag', example='False'),
      state?: string(name='State', example='HANDLING'),
      weight?: long(name='Weight', example='311011'),
    }
  ](name='Items'),
  status?: string(name='Status', example='FINISHED'),
  subtaskId?: string(name='SubtaskId', example='1500682457270333440'),
  taskId?: string(name='TaskId'),
  weight?: long(name='Weight'),
  workNodeState?: string(name='WorkNodeState', example='FINISHED'),
  workforce?: [
    Workforce
  ](name='Workforce'),
}

model SubtaskItemDetail {
  annotations?: [ 
    {
      abandonFlag?: boolean(name='AbandonFlag', example='False'),
      abandonRemark?: string(name='AbandonRemark', example='None'),
      dataId?: string(name='DataId', example='1957578084'),
      feedbackFlag?: boolean(name='FeedbackFlag', example='False'),
      feedbackRemark?: string(name='FeedbackRemark', example='None'),
      fixedFlag?: boolean(name='FixedFlag', example='False'),
      mine?: long(name='Mine', example='0'),
      rejectFlag?: boolean(name='RejectFlag', example='False'),
      state?: string(name='State', example='HANDLING'),
      weight?: long(name='Weight', example='311011'),
    }
  ](name='Annotations'),
  dataSource?: map[string]any(name='DataSource', example='None'),
  itemId?: long(name='ItemId', example='1500758847176994816'),
}

model TaskAssginConfig {
  assignCount?: long(name='AssignCount'),
  assignField?: string(name='AssignField'),
  assignSubTaskCount?: string(name='AssignSubTaskCount'),
  assignType?: string(name='AssignType'),
}

model TaskDetail {
  admins?: [
    SimpleUser
  ](name='Admins'),
  alertTime?: long(name='AlertTime'),
  allowAppendData?: boolean(name='AllowAppendData'),
  archived?: boolean(name='Archived'),
  archivedInfos?: string(name='ArchivedInfos'),
  assignConfig?: map[string]any(name='AssignConfig'),
  creator?: SimpleUser(name='Creator'),
  datasetProxyRelations?: [ 
    {
      datasetId?: string(name='DatasetId'),
      datasetType?: string(name='DatasetType'),
      exif?: map[string]any(name='Exif'),
      source?: string(name='Source'),
      sourceBizId?: string(name='SourceBizId'),
      sourceDatasetId?: string(name='SourceDatasetId'),
    }
  ](name='DatasetProxyRelations'),
  exif?: map[string]any(name='Exif'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  labelStyle?: string(name='LabelStyle'),
  mineConfigs?: map[string]any(name='MineConfigs'),
  modifier?: SimpleUser(name='Modifier'),
  noticeConfig?: map[string]any(name='NoticeConfig'),
  periodConfig?: map[string]any(name='PeriodConfig'),
  refTaskId?: string(name='RefTaskId'),
  relateTaskConfig?: map[string]any(name='RelateTaskConfig'),
  remark?: string(name='Remark'),
  resultCallbackConfig?: map[string]any(name='ResultCallbackConfig'),
  stage?: string(name='Stage'),
  status?: string(name='Status'),
  tags?: [ string ](name='Tags'),
  taskId?: string(name='TaskId'),
  taskName?: string(name='TaskName'),
  taskTemplateConfig?: {
    exif?: map[string]any(name='Exif'),
    resourceKey?: string(name='ResourceKey'),
    robotConfig?: map[string]any(name='RobotConfig'),
    selectQuestions?: [ string ](name='SelectQuestions'),
    templateOptionMap?: map[string]any(name='TemplateOptionMap'),
    templateRelationId?: string(name='TemplateRelationId'),
  }(name='TaskTemplateConfig'),
  taskType?: string(name='TaskType'),
  taskWorkflow?: [ 
    {
      exif?: map[string]any(name='Exif'),
      groups?: [ string ](name='Groups'),
      nodeName?: string(name='NodeName'),
      users?: [
        SimpleUser
      ](name='Users'),
    }
  ](name='TaskWorkflow'),
  templateId?: string(name='TemplateId'),
  tenantId?: string(name='TenantId'),
  tenantName?: string(name='TenantName'),
  UUID?: string(name='UUID'),
  voteConfigs?: map[string]any(name='VoteConfigs'),
  workflowNodes?: [ string ](name='WorkflowNodes'),
  runMsg?: string(name='runMsg'),
}

model TaskStatistic {
  acceptItemCount?: float(name='AcceptItemCount'),
  checkAbandon?: float(name='CheckAbandon'),
  checkAccuracy?: float(name='CheckAccuracy', minimum=0),
  checkEfficiency?: float(name='CheckEfficiency', minimum=0),
  checkedAccuracy?: float(name='CheckedAccuracy', minimum=0),
  checkedError?: float(name='CheckedError'),
  checkedRejectCount?: float(name='CheckedRejectCount'),
  finalAbandonCount?: float(name='FinalAbandonCount'),
  finishedItemCount?: long(name='FinishedItemCount'),
  finishedSubtaskCount?: long(name='FinishedSubtaskCount'),
  markEfficiency?: float(name='MarkEfficiency'),
  preMarkFixedCount?: float(name='PreMarkFixedCount', minimum=0),
  sampledAccuracy?: float(name='SampledAccuracy', minimum=0),
  sampledErrorCount?: float(name='SampledErrorCount'),
  sampledRejectCount?: float(name='SampledRejectCount'),
  samplingAccuracy?: float(name='SamplingAccuracy', minimum=0),
  totalCheckCount?: float(name='TotalCheckCount'),
  totalCheckTime?: float(name='TotalCheckTime'),
  totalCheckedCount?: float(name='TotalCheckedCount'),
  totalItemCount?: long(name='TotalItemCount'),
  totalMarkTime?: float(name='TotalMarkTime', minimum=0),
  totalSampledCount?: float(name='TotalSampledCount'),
  totalSamplingCount?: float(name='TotalSamplingCount'),
  totalSubtaskCount?: long(name='TotalSubtaskCount', minimum=0),
  totalWorkTime?: float(name='TotalWorkTime'),
}

model TaskTemplateConfig {
  exif?: map[string]string(name='Exif'),
  resourceKey?: string(name='ResourceKey'),
  selectQuestions?: [ string ](name='SelectQuestions'),
  templateOptionMap?: map[string]TaskTemplateOptionConfig(name='TemplateOptionMap'),
  templateRelationId?: string(name='TemplateRelationId'),
}

model TaskTemplateOptionConfig {
  defaultResult?: string(name='DefaultResult'),
  options?: [
    QuestionOption
  ](name='Options'),
  preOptions?: [ string ](name='PreOptions'),
  rule?: string(name='Rule'),
}

model TemplateDTO {
  classify?: string(name='Classify'),
  description?: string(name='Description'),
  exif?: map[string]any(name='Exif'),
  questionConfigs: [
    QuestionPlugin
  ](name='QuestionConfigs'),
  robotConfigs?: [  map[string]any ](name='RobotConfigs'),
  sharedMode?: string(name='SharedMode'),
  tags?: [ string ](name='Tags'),
  templateId?: string(name='TemplateId'),
  templateName: string(name='TemplateName'),
  viewConfigs: {
    viewPlugins?: [
      ViewPlugin
    ](name='ViewPlugins'),
  }(name='ViewConfigs'),
}

model TemplateDetail {
  abandonReasons?: [ string ](name='AbandonReasons'),
  classify?: string(name='Classify'),
  creator?: SimpleUser(name='Creator'),
  description?: string(name='Description'),
  exif?: map[string]any(name='Exif'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  modifier?: SimpleUser(name='Modifier'),
  questionConfigs?: [
    QuestionPlugin
  ](name='QuestionConfigs'),
  sharedMode?: string(name='SharedMode'),
  status?: string(name='Status'),
  tags?: [ string ](name='Tags'),
  templateId?: string(name='TemplateId'),
  templateName?: string(name='TemplateName'),
  tenantId?: string(name='TenantId'),
  type?: string(name='Type'),
  viewConfigs?: {
    viewPlugins?: [
      ViewPlugin
    ](name='ViewPlugins'),
  }(name='ViewConfigs'),
}

model TemplateQuestion {
  children?: [
    TemplateQuestion
  ](name='Children'),
  exif?: map[string]any(name='Exif'),
  markTitle?: string(name='MarkTitle', example='题目1'),
  options?: [
    QuestionOption
  ](name='Options'),
  preOptions?: [ string ](name='PreOptions'),
  questionId?: long(name='QuestionId', example='1'),
  type?: string(name='Type', example='RADIO/GROUP'),
}

model TemplateView {
  fields?: [ 
    {
      displayOriImg?: boolean(name='DisplayOriImg', example='True'),
      fieldName?: string(name='FieldName', example='url'),
      type?: string(name='Type', example='IMG'),
      visitInfo?: {
        aftsConf?: map[string]any(name='AftsConf'),
        ossConf?: map[string]any(name='OssConf'),
      }(name='VisitInfo'),
    }
  ](name='Fields'),
}

model UpdateTaskDTO {
  exif?: map[string]string(name='Exif'),
  remark?: string(name='Remark'),
  tags?: [ string ](name='Tags'),
  taskName?: string(name='TaskName'),
}

model UserStatistic {
  acceptedMarkItemsCount?: float(name='AcceptedMarkItemsCount'),
  checkCount?: float(name='CheckCount'),
  checkedAcceptedCount?: float(name='CheckedAcceptedCount'),
  checkedAccuracy?: float(name='CheckedAccuracy'),
  markEfficiency?: float(name='MarkEfficiency'),
  markTime?: float(name='MarkTime'),
  samplingAccuracy?: float(name='SamplingAccuracy'),
  samplingCount?: float(name='SamplingCount'),
  samplingErrorCount?: float(name='SamplingErrorCount'),
  totalMarkItemsCount?: float(name='TotalMarkItemsCount'),
  userId?: string(name='UserId'),
}

model ViewPlugin {
  bindField: string(name='BindField'),
  convertor?: string(name='Convertor'),
  corsProxy: boolean(name='CorsProxy'),
  displayOriImg: boolean(name='DisplayOriImg'),
  exif?: map[string]any(name='Exif'),
  hide?: boolean(name='Hide'),
  plugins?: map[string]any(name='Plugins'),
  relationQuestionIds?: [ string ](name='RelationQuestionIds'),
  type: string(name='Type'),
  visitInfo?: {
    aftsConf?: map[string]any(name='aftsConf'),
    ossConf?: map[string]any(name='ossConf'),
  }(name='VisitInfo'),
}

model Workforce {
  nodeType?: string(name='NodeType'),
  users?: [
    SimpleUser
  ](name='Users'),
  workNodeId?: int32(name='WorkNodeId'),
}

model AddWorkNodeWorkforceRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
  taskId: long(name='TaskId', example='1543***518306500608', position='Path'),
  workNodeId: int32(name='WorkNodeId', example='0', position='Path'),
  userIds?: [ long ](name='UserIds', position='Body'),
}

model AddWorkNodeWorkforceResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
}

model AddWorkNodeWorkforceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddWorkNodeWorkforceResponseBody(name='body'),
}

async function addWorkNodeWorkforce(request: AddWorkNodeWorkforceRequest): AddWorkNodeWorkforceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddWorkNodeWorkforce', 'POST', '/openapi/api/v1/tenants/{TenantId}/tasks/{TaskId}/worknodes/{WorkNodeId}/workforce', 'json', false, 'json', request);
}

model AppendAllDataToTaskRequest {
  tenantId: string(name='TenantId', example='GAR***134', position='Path'),
  taskId: string(name='TaskId', example='154***518306500608', position='Path'),
  body?: OpenDatasetProxyAppendDataRequest(name='body', position='Body'),
}

model AppendAllDataToTaskResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
}

model AppendAllDataToTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AppendAllDataToTaskResponseBody(name='body'),
}

async function appendAllDataToTask(request: AppendAllDataToTaskRequest): AppendAllDataToTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AppendAllDataToTask', 'PUT', '/openapi/api/v1/tenants/{TenantId}/tasks/{TaskId}/appendAllDataToTask', 'json', false, 'json', request);
}

model CreateTaskRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
  body: CreateTaskDetail(name='body', position='Body'),
}

model CreateTaskResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='154***2518306500608'),
}

model CreateTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTaskResponseBody(name='body'),
}

async function createTask(request: CreateTaskRequest): CreateTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTask', 'POST', '/openapi/api/v1/tenants/{TenantId}/tasks', 'json', false, 'json', request);
}

model CreateTemplateRequest {
  tenantId: string(name='TenantId', example='GAR***134', position='Path'),
  body: TemplateDTO(name='body', position='Body'),
}

model CreateTemplateResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='-'),
  errorCode?: string(name='ErrorCode', example='-'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
  templateId?: string(name='TemplateId', example='152***0348342353920'),
}

model CreateTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTemplateResponseBody(name='body'),
}

async function createTemplate(request: CreateTemplateRequest): CreateTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTemplate', 'POST', '/openapi/api/v1/tenants/{TenantId}/templates', 'json', false, 'json', request);
}

model CreateUserRequest {
  tenantId: string(name='TenantId', example='GAR***W134', position='Path'),
  accountNo: string(name='AccountNo', example='166***980757310', position='Body'),
  accountType: string(name='AccountType', example='ALIYUN', position='Body'),
  role: string(name='Role', example='ADMIN', position='Body'),
  userName?: string(name='UserName', example='user1', position='Body'),
}

model CreateUserResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
  userId?: long(name='UserId', example='1662339980757311'),
}

model CreateUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUserResponseBody(name='body'),
}

async function createUser(request: CreateUserRequest): CreateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateUser', 'POST', '/openapi/api/v1/tenants/{TenantId}/users', 'json', false, 'json', request);
}

model DeleteTaskRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
  taskId: string(name='TaskId', example='15***2518306500608', position='Path'),
}

model DeleteTaskResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
}

model DeleteTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTaskResponseBody(name='body'),
}

async function deleteTask(request: DeleteTaskRequest): DeleteTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTask', 'DELETE', '/openapi/api/v1/tenants/{TenantId}/tasks/{TaskId}', 'json', false, 'json', request);
}

model DeleteTemplateRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
  templateId: string(name='TemplateId', example='1529***348342353920', position='Path'),
}

model DeleteTemplateResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='""'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
  templateId?: string(name='TemplateId', example='152***348342353920'),
}

model DeleteTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTemplateResponseBody(name='body'),
}

async function deleteTemplate(request: DeleteTemplateRequest): DeleteTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTemplate', 'DELETE', '/openapi/api/v1/tenants/{TenantId}/templates/{TemplateId}', 'json', false, 'json', request);
}

model DeleteUserRequest {
  tenantId: string(name='TenantId', example='GAR***W134', position='Path'),
  userId: string(name='UserId', example='166***980757311', position='Path'),
}

model DeleteUserResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
}

model DeleteUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserResponseBody(name='body'),
}

async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteUser', 'DELETE', '/openapi/api/v1/tenants/{TenantId}/users/{UserId}', 'json', false, 'json', request);
}

model ExportAnnotationsRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
  taskId: string(name='TaskId', example='15***02518306500608', position='Path'),
  ossPath: string(name='OssPath', example='oss://***-hz-oss.oss-cn-hangzhou.aliyuncs.com/output/', position='Query'),
  registerDataset?: string(name='RegisterDataset', example='true', position='Query'),
  target?: string(name='Target', example='PAI', position='Query'),
}

model ExportAnnotationsResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  flowJob?: FlowJobInfo(name='FlowJob'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
}

model ExportAnnotationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportAnnotationsResponseBody(name='body'),
}

async function exportAnnotations(request: ExportAnnotationsRequest): ExportAnnotationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExportAnnotations', 'GET', '/openapi/api/v1/tenants/{TenantId}/tasks/{TaskId}/annotations/export', 'json', false, 'json', request);
}

model GetJobRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
  jobId: string(name='JobId', example='147***441221943296', position='Path'),
  jobType?: string(name='JobType', example='DOWNLOWD_MARKRESULT_FLOW', position='Query'),
}

model GetJobResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  job?: Job(name='Job'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
}

model GetJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobResponseBody(name='body'),
}

async function getJob(request: GetJobRequest): GetJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetJob', 'GET', '/openapi/api/v1/tenants/{TenantId}/jobs/{JobId}', 'json', false, 'json', request);
}

model GetSubtaskRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
  taskID: string(name='TaskID', example='154***2518306500608', position='Path'),
  subtaskId: string(name='SubtaskId', example='150***502979956736', position='Path'),
}

model GetSubtaskResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  subtask?: SimpleSubtask(name='Subtask'),
  success?: boolean(name='Success', example='true'),
}

model GetSubtaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSubtaskResponseBody(name='body'),
}

async function getSubtask(request: GetSubtaskRequest): GetSubtaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSubtask', 'GET', '/openapi/api/v1/tenants/{TenantId}/tasks/{TaskID}/subtasks/{SubtaskId}', 'json', false, 'json', request);
}

model GetSubtaskItemRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
  taskId: string(name='TaskId', example='154***518306500608', position='Path'),
  subtaskId: string(name='SubtaskId', example='15***82502979956736', position='Path'),
  itemId: string(name='ItemId', example='15***2994667356160', position='Path'),
}

model GetSubtaskItemResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  item?: SubtaskItemDetail(name='Item'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
}

model GetSubtaskItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSubtaskItemResponseBody(name='body'),
}

async function getSubtaskItem(request: GetSubtaskItemRequest): GetSubtaskItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSubtaskItem', 'GET', '/openapi/api/v1/tenants/{TenantId}/tasks/{TaskId}/subtasks/{SubtaskId}/items/{ItemId}', 'json', false, 'json', request);
}

model GetTaskRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
  taskId: string(name='TaskId', example='15***2518306500608', position='Path'),
}

model GetTaskResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0F01E603-8A9F-18ED-AD43-D52B5030AFA2'),
  success?: boolean(name='Success', example='true'),
  task?: TaskDetail(name='Task'),
}

model GetTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskResponseBody(name='body'),
}

async function getTask(request: GetTaskRequest): GetTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTask', 'GET', '/openapi/api/v1/tenants/{TenantId}/tasks/{TaskId}', 'json', false, 'json', request);
}

model GetTaskStatisticsRequest {
  tenantId: string(name='TenantId', example='GAR***134', position='Path'),
  taskId: string(name='TaskId', example='154***2518306500608', position='Path'),
  statType?: string(name='StatType', example='Item', position='Query'),
}

model GetTaskStatisticsResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
  taskStatistics?: TaskStatistic(name='TaskStatistics'),
}

model GetTaskStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskStatisticsResponseBody(name='body'),
}

async function getTaskStatistics(request: GetTaskStatisticsRequest): GetTaskStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTaskStatistics', 'GET', '/openapi/api/v1/tenants/{TenantId}/tasks/{TaskId}/statistics', 'json', false, 'json', request);
}

model GetTaskStatusRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
  taskId: string(name='TaskId', example='154***518306500608', position='Path'),
}

model GetTaskStatusResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='""'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
  taskStatus?: string(name='TaskStatus', example='SUCCESS'),
}

model GetTaskStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskStatusResponseBody(name='body'),
}

async function getTaskStatus(request: GetTaskStatusRequest): GetTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTaskStatus', 'GET', '/openapi/api/v1/tenants/{TenantId}/tasks/{TaskId}/status', 'json', false, 'json', request);
}

model GetTaskTemplateRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
  taskId: string(name='TaskId', example='154***518306500608', position='Path'),
}

model GetTaskTemplateResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='""'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
  template?: TemplateDetail(name='Template'),
}

model GetTaskTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskTemplateResponseBody(name='body'),
}

async function getTaskTemplate(request: GetTaskTemplateRequest): GetTaskTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTaskTemplate', 'GET', '/openapi/api/v1/tenants/{TenantId}/tasks/{TaskId}/template', 'json', false, 'json', request);
}

model GetTaskTemplateQuestionsRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
  taskId: string(name='TaskId', example='154***518306500608', position='Path'),
}

model GetTaskTemplateQuestionsResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  questions?: [
    QuestionPlugin
  ](name='Questions'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
}

model GetTaskTemplateQuestionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskTemplateQuestionsResponseBody(name='body'),
}

async function getTaskTemplateQuestions(request: GetTaskTemplateQuestionsRequest): GetTaskTemplateQuestionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTaskTemplateQuestions', 'GET', '/openapi/api/v1/tenants/{TenantId}/tasks/{TaskId}/template/questions', 'json', false, 'json', request);
}

model GetTaskTemplateViewsRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
  taskId: string(name='TaskId', example='154***2518306500608', position='Path'),
}

model GetTaskTemplateViewsResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
  views?: {
    viewPlugins?: [
      ViewPlugin
    ](name='ViewPlugins'),
  }(name='Views'),
}

model GetTaskTemplateViewsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskTemplateViewsResponseBody(name='body'),
}

async function getTaskTemplateViews(request: GetTaskTemplateViewsRequest): GetTaskTemplateViewsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTaskTemplateViews', 'GET', '/openapi/api/v1/tenants/{TenantId}/tasks/{TaskId}/template/views', 'json', false, 'json', request);
}

model GetTaskWorkforceRequest {
  tenantId: string(name='TenantId', example='G***W134', position='Path'),
  taskId: long(name='TaskId', example='154***518306500608', position='Path'),
}

model GetTaskWorkforceResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
  workforce?: [
    Workforce
  ](name='Workforce'),
}

model GetTaskWorkforceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskWorkforceResponseBody(name='body'),
}

async function getTaskWorkforce(request: GetTaskWorkforceRequest): GetTaskWorkforceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTaskWorkforce', 'GET', '/openapi/api/v1/tenants/{TenantId}/tasks/{TaskId}/workforce', 'json', false, 'json', request);
}

model GetTaskWorkforceStatisticRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
  taskId: string(name='TaskId', example='154****8306500608', position='Path'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  statType?: string(name='StatType', example='Item', position='Query'),
}

model GetTaskWorkforceStatisticResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='22'),
  totalPage?: int32(name='TotalPage', example='2'),
  usersStatistic?: [
    UserStatistic
  ](name='UsersStatistic'),
}

model GetTaskWorkforceStatisticResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskWorkforceStatisticResponseBody(name='body'),
}

async function getTaskWorkforceStatistic(request: GetTaskWorkforceStatisticRequest): GetTaskWorkforceStatisticResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTaskWorkforceStatistic', 'GET', '/openapi/api/v1/tenants/{TenantId}/tasks/{TaskId}/workforce/statistic', 'json', false, 'json', request);
}

model GetTemplateRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
  templateId: string(name='TemplateId', example='1529***348342353920', position='Path'),
}

model GetTemplateResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
  template?: TemplateDetail(name='Template'),
}

model GetTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTemplateResponseBody(name='body'),
}

async function getTemplate(request: GetTemplateRequest): GetTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTemplate', 'GET', '/openapi/api/v1/tenants/{TenantId}/templates/{TemplateId}', 'json', false, 'json', request);
}

model GetTemplateQuestionsRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
  templateId: string(name='TemplateId', example='1529***348342353920', position='Path'),
}

model GetTemplateQuestionsResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  questionConfigs?: [
    QuestionPlugin
  ](name='QuestionConfigs'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
}

model GetTemplateQuestionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTemplateQuestionsResponseBody(name='body'),
}

async function getTemplateQuestions(request: GetTemplateQuestionsRequest): GetTemplateQuestionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTemplateQuestions', 'GET', '/openapi/api/v1/tenants/{TenantId}/templates/{TemplateId}/questions', 'json', false, 'json', request);
}

model GetTemplateViewRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
  templateId: string(name='TemplateId', example='1529***348342353920', position='Path'),
}

model GetTemplateViewResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='""'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
  viewConfigs?: {
    viewPlugins?: [
      ViewPlugin
    ](name='ViewPlugins'),
  }(name='ViewConfigs'),
}

model GetTemplateViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTemplateViewResponseBody(name='body'),
}

async function getTemplateView(request: GetTemplateViewRequest): GetTemplateViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTemplateView', 'GET', '/openapi/api/v1/tenants/{TenantId}/templates/{TemplateId}/views', 'json', false, 'json', request);
}

model GetTenantRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
}

model GetTenantResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='-'),
  errorCode?: string(name='ErrorCode', example='-'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
  tenant?: SingleTenant(name='Tenant'),
}

model GetTenantResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTenantResponseBody(name='body'),
}

async function getTenant(request: GetTenantRequest): GetTenantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTenant', 'GET', '/openapi/api/v1/tenants/{TenantId}', 'json', false, 'json', request);
}

model GetUserRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
  userId: long(name='UserId', example='166***9980757311', position='Path'),
}

model GetUserResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
  user?: SimpleUser(name='User'),
}

model GetUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserResponseBody(name='body'),
}

async function getUser(request: GetUserRequest): GetUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUser', 'GET', '/openapi/api/v1/tenants/{TenantId}/users/{UserId}', 'json', false, 'json', request);
}

model ListJobsRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
  jobType?: string(name='JobType', example='DOWNLOWD_MARKRESULT_FLOW', position='Query'),
  pageNumber?: int32(name='PageNumber', example='20', position='Query'),
  pageSize?: int32(name='PageSize', example='1', position='Query'),
}

model ListJobsResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  jobs?: [
    Job
  ](name='Jobs'),
  message: string(name='Message', example='success'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='22'),
  totalPage?: int32(name='TotalPage', example='2'),
}

model ListJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListJobsResponseBody(name='body'),
}

async function listJobs(request: ListJobsRequest): ListJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListJobs', 'GET', '/openapi/api/v1/tenants/{TenantId}/jobs', 'json', false, 'json', request);
}

model ListSubtaskItemsRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
  taskID: string(name='TaskID', example='154***18306500608', position='Path'),
  subtaskId: string(name='SubtaskId', example='1500***2979956736', position='Path'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=0, position='Query'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, maximum=20, position='Query'),
}

model ListSubtaskItemsResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='""'),
  errorCode?: string(name='ErrorCode', example='""'),
  items?: [
    SubtaskItemDetail
  ](name='Items'),
  message: string(name='Message', example='success'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='22'),
  totalPage?: int32(name='TotalPage', example='2'),
}

model ListSubtaskItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSubtaskItemsResponseBody(name='body'),
}

async function listSubtaskItems(request: ListSubtaskItemsRequest): ListSubtaskItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSubtaskItems', 'GET', '/openapi/api/v1/tenants/{TenantId}/tasks/{TaskID}/subtasks/{SubtaskId}/items', 'json', false, 'json', request);
}

model ListSubtasksRequest {
  tenantId: string(name='TenantId', example='GAR***134', position='Path'),
  taskID: string(name='TaskID', example='154***2518306500608', position='Path'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=0, position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
}

model ListSubtasksResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  subtasks?: [
    SubtaskDetail
  ](name='Subtasks'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='22'),
  totalPage?: int32(name='TotalPage', example='2'),
}

model ListSubtasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSubtasksResponseBody(name='body'),
}

async function listSubtasks(request: ListSubtasksRequest): ListSubtasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSubtasks', 'GET', '/openapi/api/v1/tenants/{TenantId}/tasks/{TaskID}/subtasks', 'json', false, 'json', request);
}

model ListTasksRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=0, position='Query'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, maximum=10, position='Query'),
}

model ListTasksResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=0),
  pageSize?: int32(name='PageSize', example='20', minimum=1, maximum=20),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
  tasks?: [
    SimpleTask
  ](name='Tasks'),
  totalCount?: int32(name='TotalCount', example='22'),
  totalPage?: int32(name='TotalPage', example='2'),
}

model ListTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTasksResponseBody(name='body'),
}

async function listTasks(request: ListTasksRequest): ListTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTasks', 'GET', '/openapi/api/v1/tenants/{TenantId}/tasks', 'json', false, 'json', request);
}

model ListTemplatesRequest {
  tenantId: string(name='TenantId', example='GAR***134', position='Path'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=0, position='Query'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, maximum=20, position='Query'),
  searchKey?: string(name='SearchKey', example='demo', position='Query'),
  types?: [ string ](name='Types', shrink='simple', position='Query'),
}

model ListTemplatesResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
  templates?: [
    SimpleTemplate
  ](name='Templates'),
  totalCount?: int32(name='TotalCount', example='22'),
  totalPage?: int32(name='TotalPage', example='2'),
}

model ListTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTemplatesResponseBody(name='body'),
}

async function listTemplates(request: ListTemplatesRequest): ListTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTemplates', 'GET', '/openapi/api/v1/tenants/{TenantId}/templates', 'json', false, 'json', request);
}

model ListTenantsRequest {
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
}

model ListTenantsResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='-'),
  errorCode?: string(name='ErrorCode', example='-'),
  message: string(name='Message', example='success'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
  tenants?: [
    SimpleTenant
  ](name='Tenants'),
  totalCount?: int32(name='TotalCount', example='22'),
  totalPage?: int32(name='TotalPage', example='2'),
}

model ListTenantsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTenantsResponseBody(name='body'),
}

async function listTenants(request: ListTenantsRequest): ListTenantsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTenants', 'GET', '/openapi/api/v1/tenants', 'json', false, 'json', request);
}

model ListUsersRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
  pageNumber?: int32(name='PageNumber', example='20', position='Query'),
  pageSize?: int32(name='PageSize', example='1', position='Query'),
}

model ListUsersResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='22'),
  totalPage?: int32(name='TotalPage', example='2'),
  users?: [
    SimpleUser
  ](name='Users'),
}

model ListUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUsersResponseBody(name='body'),
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListUsers', 'GET', '/openapi/api/v1/tenants/{TenantId}/users', 'json', false, 'json', request);
}

model RemoveWorkNodeWorkforceRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
  taskId: string(name='TaskId', example='154***518306500608', position='Path'),
  workNodeId: int32(name='WorkNodeId', example='0', minimum=0, position='Path'),
  userIds?: [ long ](name='UserIds', position='Body'),
}

model RemoveWorkNodeWorkforceResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='""'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
}

model RemoveWorkNodeWorkforceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveWorkNodeWorkforceResponseBody(name='body'),
}

async function removeWorkNodeWorkforce(request: RemoveWorkNodeWorkforceRequest): RemoveWorkNodeWorkforceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveWorkNodeWorkforce', 'PUT', '/openapi/api/v1/tenants/{TenantId}/tasks/{TaskId}/worknodes/{WorkNodeId}/workforce', 'json', false, 'json', request);
}

model UpdateTaskRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
  taskId: string(name='TaskId', example='15***518306500608', position='Path'),
  body: UpdateTaskDTO(name='body', position='Body'),
}

model UpdateTaskResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTaskResponseBody(name='body'),
}

async function updateTask(request: UpdateTaskRequest): UpdateTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTask', 'PUT', '/openapi/api/v1/tenants/{TenantId}/tasks/{TaskId}', 'json', false, 'json', request);
}

model UpdateTaskWorkforceRequest {
  tenantId: string(name='TenantId', example='G***W134', position='Path'),
  taskId: string(name='TaskId', example='15***518306500608', position='Path'),
  workforce?: [
    SimpleWorkforce
  ](name='Workforce', position='Body'),
}

model UpdateTaskWorkforceResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='""'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTaskWorkforceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTaskWorkforceResponseBody(name='body'),
}

async function updateTaskWorkforce(request: UpdateTaskWorkforceRequest): UpdateTaskWorkforceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTaskWorkforce', 'PUT', '/openapi/api/v1/tenants/{TenantId}/tasks/{TaskId}/workforce', 'json', false, 'json', request);
}

model UpdateTemplateRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
  templateId: string(name='TemplateId', example='152***0348342353920', position='Path'),
  body?: TemplateDTO(name='body', position='Body'),
}

model UpdateTemplateResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
  templateId?: string(name='TemplateId', example='1529360348342353920'),
}

model UpdateTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTemplateResponseBody(name='body'),
}

async function updateTemplate(request: UpdateTemplateRequest): UpdateTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTemplate', 'PUT', '/openapi/api/v1/tenants/{TenantId}/templates/{TemplateId}', 'json', false, 'json', request);
}

model UpdateTenantRequest {
  tenantId: string(name='TenantId', example='GA***W134', position='Path'),
  description?: string(name='Description', example='demo', position='Body'),
  tenantName?: string(name='TenantName', position='Body'),
}

model UpdateTenantResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTenantResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTenantResponseBody(name='body'),
}

async function updateTenant(request: UpdateTenantRequest): UpdateTenantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTenant', 'PUT', '/openapi/api/v1/tenants/{TenantId}', 'json', false, 'json', request);
}

model UpdateUserRequest {
  tenantId: string(name='TenantId', example='GA**W134', position='Path'),
  userId: string(name='UserId', example='166***80757311', position='Path'),
  role: string(name='Role', example='ADMIN', position='Body'),
  userName: string(name='UserName', example='user1', position='Body'),
}

model UpdateUserResponseBody = {
  code?: int32(name='Code', example='0'),
  details?: string(name='Details', example='null'),
  errorCode?: string(name='ErrorCode', example='""'),
  message: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='90ABA848-AD74-1F6E-84BC-4182A7F1F29E'),
  success?: boolean(name='Success', example='true'),
  userId?: string(name='UserId', example='166***980757311'),
}

model UpdateUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserResponseBody(name='body'),
}

async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateUser', 'PUT', '/openapi/api/v1/tenants/{TenantId}/users/{UserId}', 'json', false, 'json', request);
}

