/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ICE';
  @version = '2020-11-09';
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-1' = 'ice.aliyuncs.com',
    'ap-northeast-2-pop' = 'ice.aliyuncs.com',
    'ap-south-1' = 'ice.aliyuncs.com',
    'ap-southeast-1' = 'ice.aliyuncs.com',
    'ap-southeast-2' = 'ice.aliyuncs.com',
    'ap-southeast-3' = 'ice.aliyuncs.com',
    'ap-southeast-5' = 'ice.aliyuncs.com',
    'cn-beijing' = 'ice.aliyuncs.com',
    'cn-beijing-finance-1' = 'ice.aliyuncs.com',
    'cn-beijing-finance-pop' = 'ice.aliyuncs.com',
    'cn-beijing-gov-1' = 'ice.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'ice.aliyuncs.com',
    'cn-chengdu' = 'ice.aliyuncs.com',
    'cn-edge-1' = 'ice.aliyuncs.com',
    'cn-fujian' = 'ice.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'ice.aliyuncs.com',
    'cn-hangzhou' = 'ice.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'ice.aliyuncs.com',
    'cn-hangzhou-finance' = 'ice.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'ice.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'ice.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'ice.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'ice.aliyuncs.com',
    'cn-hangzhou-test-306' = 'ice.aliyuncs.com',
    'cn-hongkong' = 'ice.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'ice.aliyuncs.com',
    'cn-huhehaote' = 'ice.aliyuncs.com',
    'cn-huhehaote-nebula-1' = 'ice.aliyuncs.com',
    'cn-north-2-gov-1' = 'ice.aliyuncs.com',
    'cn-qingdao' = 'ice.aliyuncs.com',
    'cn-qingdao-nebula' = 'ice.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'ice.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'ice.aliyuncs.com',
    'cn-shanghai-finance-1' = 'ice.aliyuncs.com',
    'cn-shanghai-inner' = 'ice.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'ice.aliyuncs.com',
    'cn-shenzhen' = 'ice.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'ice.aliyuncs.com',
    'cn-shenzhen-inner' = 'ice.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'ice.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'ice.aliyuncs.com',
    'cn-wuhan' = 'ice.aliyuncs.com',
    'cn-wulanchabu' = 'ice.aliyuncs.com',
    'cn-yushanfang' = 'ice.aliyuncs.com',
    'cn-zhangbei' = 'ice.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'ice.aliyuncs.com',
    'cn-zhangjiakou' = 'ice.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'ice.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'ice.aliyuncs.com',
    'eu-central-1' = 'ice.aliyuncs.com',
    'eu-west-1' = 'ice.aliyuncs.com',
    'eu-west-1-oxs' = 'ice.aliyuncs.com',
    'me-east-1' = 'ice.aliyuncs.com',
    'rus-west-1-pop' = 'ice.aliyuncs.com',
    'us-east-1' = 'ice.aliyuncs.com',
    'us-west-1' = 'ice.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddCategoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  cateName: string(name='CateName', position='Query'),
  parentId?: long(name='ParentId', example='5', position='Query'),
  type?: string(name='Type', example='default', position='Query'),
}

model AddCategoryResponseBody = {
  category?: {
    cateId?: long(name='CateId', example='45'),
    cateName?: string(name='CateName'),
    level?: long(name='Level', example='0'),
    parentId?: long(name='ParentId', example='-1'),
    type?: string(name='Type', example='default'),
  }(name='Category'),
  requestId?: string(name='RequestId', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
}

model AddCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddCategoryResponseBody(name='body'),
}

async function addCategory(request: AddCategoryRequest): AddCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCategory', 'POST', '/', 'json', false, 'json', request);
}

model AddEditingProjectMaterialsRequest {
  materialMaps: string(name='MaterialMaps', example='{"video":"*****2e057304fcd9b145c5cafc*****", "image":"****8021a8d493da643c8acd98*****,*****cb6307a4edea614d8b3f3c*****", "liveStream": "[{\\"appName\\":\\"testrecord\\",\\"domainName\\":\\"test.alivecdn.com\\",\\"liveUrl\\":\\"rtmp://test.alivecdn.com/testrecord/teststream\\",\\"streamName\\":\\"teststream\\"}]", "editingProject": "*****9b145c5cafc2e057304fcd*****"}', position='Query'),
  projectId: string(name='ProjectId', example='*****b2101cb318c*****', position='Query'),
}

model AddEditingProjectMaterialsResponseBody = {
  liveMaterials?: [ 
    {
      appName?: string(name='AppName', example='testrecord'),
      domainName?: string(name='DomainName', example='test.alivecdn.com'),
      liveUrl?: string(name='LiveUrl', example='rtmp://test.alivecdn.com/testrecord/teststream'),
      streamName?: string(name='StreamName', example='teststream'),
    }
  ](name='LiveMaterials'),
  mediaInfos?: [ 
    {
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', example='1132.68'),
            duration?: string(name='Duration', example='216.206667'),
            fileName?: string(name='FileName', example='example.mp4'),
            fileSize?: string(name='FileSize', example='30611502'),
            fileStatus?: string(name='FileStatus', example='Normal'),
            fileType?: string(name='FileType', example='source_file'),
            fileUrl?: string(name='FileUrl', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
            formatName?: string(name='FormatName', example='mov,mp4,m4a,3gp,3g2,mj2'),
            height?: string(name='Height', example='540'),
            region?: string(name='Region', example='cn-shanghai'),
            width?: string(name='Width', example='960'),
          }(name='FileBasicInfo'),
        }
      ](name='FileInfoList', description='FileInfos'),
      mediaBasicInfo?: {
        businessType?: string(name='BusinessType', example='general'),
        category?: string(name='Category', example='audio'),
        coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
        createTime?: string(name='CreateTime', example='2020-12-23T03:32:59Z'),
        deletedTime?: string(name='DeletedTime', example='2020-12-23T03:32:59Z'),
        description?: string(name='Description', example='sample_description'),
        inputURL?: string(name='InputURL', example='http://bucket.oss-cn-shanghai.aliyuncs.com/file.mp4'),
        mediaId?: string(name='MediaId', example='*****5cb2e35433198daae94a72*****'),
        mediaTags?: string(name='MediaTags', example='sample_tag'),
        mediaType?: string(name='MediaType', example='Video'),
        modifiedTime?: string(name='ModifiedTime', example='2020-12-23T03:32:59Z'),
        snapshots?: string(name='Snapshots', example='null'),
        source?: string(name='Source', example='oss'),
        spriteImages?: string(name='SpriteImages', example='http://outin-example.oss-cn-shanghai.aliyuncs.com/test.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
        status?: string(name='Status', example='Normal'),
        title?: string(name='Title', example='default_title_2020-12-23T03:32:59Z'),
        transcodeStatus?: string(name='TranscodeStatus', example='Init'),
        userData?: string(name='UserData', example='userData'),
      }(name='MediaBasicInfo'),
      mediaId?: string(name='MediaId', example='*****5cb2e35433198daae94a72*****'),
    }
  ](name='MediaInfos'),
  projectId?: string(name='ProjectId', example='*****67ae06542b9b93e0d1c387*****'),
  projectMaterials?: [ string ](name='ProjectMaterials', example='*****9b145c5cafc2e057304fcd*****'),
  requestId?: string(name='RequestId', example='*****ACB-44F2-5F2D-88D7-1283E70*****'),
}

model AddEditingProjectMaterialsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddEditingProjectMaterialsResponseBody(name='body'),
}

async function addEditingProjectMaterials(request: AddEditingProjectMaterialsRequest): AddEditingProjectMaterialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddEditingProjectMaterials', 'POST', '/', 'json', false, 'json', request);
}

model AddFavoritePublicMediaRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaIds?: string(name='MediaIds', example='icepublic-****7213c6050cbc66750b469701****,icepublic-****0b4697017213c6050cbc6675****', position='Query'),
}

model AddFavoritePublicMediaResponseBody = {
  ignoredList?: [ string ](name='IgnoredList'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model AddFavoritePublicMediaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddFavoritePublicMediaResponseBody(name='body'),
}

async function addFavoritePublicMedia(request: AddFavoritePublicMediaRequest): AddFavoritePublicMediaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddFavoritePublicMedia', 'POST', '/', 'json', false, 'json', request);
}

model AddMediaMarksRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaId: string(name='MediaId', example='53afdf003a2171ed9c6a16b5feac6402', position='Query'),
  mediaMarks: string(name='MediaMarks', position='Query'),
}

model AddMediaMarksResponseBody = {
  mediaId?: string(name='MediaId', example='53afdf003a******6a16b5feac6402'),
  mediaMarkIds?: string(name='MediaMarkIds', example='mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60'),
  requestId?: string(name='RequestId', example='771A1414-27BF-53E6-AB73-EFCB*****ACF'),
}

model AddMediaMarksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddMediaMarksResponseBody(name='body'),
}

async function addMediaMarks(request: AddMediaMarksRequest): AddMediaMarksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddMediaMarks', 'POST', '/', 'json', false, 'json', request);
}

model AddTemplateRequest {
  config?: string(name='Config', example='参见Timeline模板Config文档', position='Body'),
  coverUrl?: string(name='CoverUrl', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg', position='Query'),
  name?: string(name='Name', example='视频添加水印模板', position='Query'),
  previewMedia?: string(name='PreviewMedia', example='****01bf24bf41c78b2754cb3187****', position='Query'),
  relatedMediaids?: string(name='RelatedMediaids', example='{"video":["1805a0c6ca544fb395a06ca683619655"]}', position='Query'),
  source?: string(name='Source', example='OpenAPI', position='Query'),
  status?: string(name='Status', example='Available', position='Query'),
  type?: string(name='Type', example='Timeline', position='Query'),
}

model AddTemplateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='****2876-6263-4B75-8F2C-CD0F7FCF****'),
  template?: {
    config?: string(name='Config', example='参见Timeline模板Config文档'),
    coverUrl?: string(name='CoverUrl', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg'),
    createSource?: string(name='CreateSource', example='OpenAPI'),
    modifiedSource?: string(name='ModifiedSource', example='OpenAPI'),
    name?: string(name='Name', example='视频添加水印模板'),
    previewMedia?: string(name='PreviewMedia', example='****01bf24bf41c78b2754cb3187****'),
    status?: string(name='Status', example='Available'),
    templateId?: string(name='TemplateId', example='****01bf24bf41c78b2754cb3187****'),
    type?: string(name='Type', example='Timeline'),
  }(name='Template'),
}

model AddTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddTemplateResponseBody(name='body'),
}

async function addTemplate(request: AddTemplateRequest): AddTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTemplate', 'POST', '/', 'json', true, 'form', request);
}

model AlterSearchIndexRequest {
  regionId?: string(name='RegionId', position='Host'),
  indexConfig?: string(name='IndexConfig', example='{}', position='Query'),
  indexStatus?: string(name='IndexStatus', position='Query'),
  indexType: string(name='IndexType', example='mm', position='Query'),
  searchLibName?: string(name='SearchLibName', example='test1', position='Query'),
}

model AlterSearchIndexResponseBody = {
  code?: string(name='Code'),
  requestId?: string(name='RequestId', description='Id of the request', example='******3B-0E1A-586A-AC29-742247******'),
  success?: string(name='Success'),
}

model AlterSearchIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AlterSearchIndexResponseBody(name='body'),
}

async function alterSearchIndex(request: AlterSearchIndexRequest): AlterSearchIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AlterSearchIndex', 'POST', '/', 'json', false, 'json', request);
}

model BatchGetMediaInfosRequest {
  regionId?: string(name='RegionId', position='Host'),
  additionType?: string(name='AdditionType', example='FileInfo,DynamicMetaData', position='Query'),
  mediaIds?: string(name='MediaIds', example='******b48fb04483915d4f2cd8******,******c48fb37407365d4f2cd8******', position='Query'),
}

model BatchGetMediaInfosResponseBody = {
  mediaInfos?: [ 
    {
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', example='1132.68'),
            duration?: string(name='Duration', example='200'),
            fileName?: string(name='FileName', example='example'),
            fileSize?: string(name='FileSize', example='30611502'),
            fileStatus?: string(name='FileStatus', example='Normal'),
            fileType?: string(name='FileType', example='source_file'),
            fileUrl?: string(name='FileUrl', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
            formatName?: string(name='FormatName', example='mov,mp4,m4a,3gp,3g2,mj2'),
            height?: string(name='Height', example='1080'),
            region?: string(name='Region', example='cn-shanghai'),
            width?: string(name='Width', example='1920'),
          }(name='FileBasicInfo'),
        }
      ](name='FileInfoList', description='FileInfos'),
      mediaBasicInfo?: {
        businessType?: string(name='BusinessType', example='general'),
        category?: string(name='Category'),
        coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
        createTime?: string(name='CreateTime', example='2020-12-26T04:11:10Z'),
        deletedTime?: string(name='DeletedTime', example='2020-12-26T04:11:10Z'),
        description?: string(name='Description'),
        inputURL?: string(name='InputURL', example='https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4'),
        mediaId?: string(name='MediaId', description='MediaId', example='******c48fb37407365d4f2cd8******'),
        mediaTags?: string(name='MediaTags'),
        mediaType?: string(name='MediaType', example='video'),
        modifiedTime?: string(name='ModifiedTime', example='2020-12-26T04:11:12Z'),
        snapshots?: string(name='Snapshots', example='[{"bucket":"example-bucket","count":"3","iceJobId":"******f48f0e4154976b2b8c45******","location":"oss-cn-beijing","snapshotRegular":"example.jpg","templateId":"******e6a6440b29eb60bd7c******"}]'),
        source?: string(name='Source', example='oss'),
        spriteImages?: string(name='SpriteImages', example='[{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]'),
        status?: string(name='Status', example='Normal'),
        title?: string(name='Title'),
        transcodeStatus?: string(name='TranscodeStatus', example='Init'),
        userData?: string(name='UserData', example='userDataTest'),
      }(name='MediaBasicInfo'),
      mediaId?: string(name='MediaId', example='******c48fb37407365d4f2cd8******'),
    }
  ](name='MediaInfos'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model BatchGetMediaInfosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchGetMediaInfosResponseBody(name='body'),
}

async function batchGetMediaInfos(request: BatchGetMediaInfosRequest): BatchGetMediaInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchGetMediaInfos', 'POST', '/', 'json', false, 'json', request);
}

model CancelDNAJobRequest {
  jobId: string(name='JobId', example='2288c6ca184c0e47098a5b665e2a12****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CancelDNAJobResponseBody = {
  jobId?: string(name='JobId', example='2288c6ca184c0e47098a5b665e2a12****'),
  requestId?: string(name='RequestId', example='25818875-5F78-4A13-BEF6-D7393642CA58'),
}

model CancelDNAJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelDNAJobResponseBody(name='body'),
}

async function cancelDNAJob(request: CancelDNAJobRequest): CancelDNAJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelDNAJob', 'POST', '/', 'json', false, 'json', request);
}

model CancelFavoritePublicMediaRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaIds?: string(name='MediaIds', example='icepublic-****7213c6050cbc66750b469701****,icepublic-****0b4697017213c6050cbc6675****', position='Query'),
}

model CancelFavoritePublicMediaResponseBody = {
  ignoredList?: [ string ](name='IgnoredList'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model CancelFavoritePublicMediaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelFavoritePublicMediaResponseBody(name='body'),
}

async function cancelFavoritePublicMedia(request: CancelFavoritePublicMediaRequest): CancelFavoritePublicMediaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelFavoritePublicMedia', 'POST', '/', 'json', false, 'json', request);
}

model CreateAuditRequest {
  regionId?: string(name='RegionId', position='Host'),
  auditContent: string(name='AuditContent', example='[
      {
            "MediaId": "93ab850b4f*****b54b6e91d24d81d4",
            "Status": "Normal"
      },
      {
            "MediaId": "f867fbfb58*****8bbab65c4480ae1d",
            "Status": "Blocked",
            "Reason": "xxxx",
            "Comment": "xxxx"
      }
]', position='Query'),
}

model CreateAuditResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model CreateAuditResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAuditResponseBody(name='body'),
}

async function createAudit(request: CreateAuditRequest): CreateAuditResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAudit', 'POST', '/', 'json', false, 'json', request);
}

model CreateAvatarTrainingJobRequest {
  avatarDescription?: string(name='AvatarDescription', maxLength=1027, position='Query'),
  avatarName: string(name='AvatarName', maxLength=7, position='Query'),
  avatarType?: string(name='AvatarType', example='2DAvatar', position='Query'),
  portrait?: string(name='Portrait', example='****571c704445f9a0ee011406c2****', minLength=32, maxLength=32, position='Query'),
  thumbnail?: string(name='Thumbnail', example='https://your-bucket.oss-cn-hangzhou.aliyuncs.com/thumbnail.png', maxLength=512, position='Query'),
  transparent?: boolean(name='Transparent', example='True', position='Query'),
  video?: string(name='Video', example='****571c704445f9a0ee011406c2****', minLength=32, maxLength=32, position='Query'),
}

model CreateAvatarTrainingJobResponseBody = {
  data?: {
    jobId?: string(name='JobId', example='****d718e2ff4f018ccf419a7b71****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model CreateAvatarTrainingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAvatarTrainingJobResponseBody(name='body'),
}

async function createAvatarTrainingJob(request: CreateAvatarTrainingJobRequest): CreateAvatarTrainingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAvatarTrainingJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateCustomTemplateRequest {
  name: string(name='Name', example='test-template', position='Query'),
  subtype?: int32(name='Subtype', example='1', position='Query'),
  templateConfig: string(name='TemplateConfig', example='{"Container":{"Format":"flv"},"Video":{},"Audio":{}}', position='Query'),
  type: int32(name='Type', example='1', position='Query'),
}

model CreateCustomTemplateResponseBody = {
  customTemplate?: {
    createTime?: string(name='CreateTime', example='2022-04-19T02:04:31Z'),
    isDefault?: boolean(name='IsDefault', example='true'),
    modifiedTime?: string(name='ModifiedTime', example='2022-04-19T02:04:31Z'),
    status?: string(name='Status', example='Normal'),
    subtype?: string(name='Subtype', example='Remux'),
    templateConfig?: string(name='TemplateConfig', example='{"Container":{"Format":"flv"},"Video":{},"Audio":{}}'),
    templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
    templateName?: string(name='TemplateName', example='test-template'),
    type?: int32(name='Type', example='1'),
    typeName?: string(name='TypeName', example='TranscodeTemplate'),
  }(name='CustomTemplate'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model CreateCustomTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCustomTemplateResponseBody(name='body'),
}

async function createCustomTemplate(request: CreateCustomTemplateRequest): CreateCustomTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustomTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CreateCustomizedVoiceJobRequest {
  gender: string(name='Gender', example='female', position='Query'),
  scenario: string(name='Scenario', example='story', position='Query'),
  voiceDesc?: string(name='VoiceDesc', maxLength=256, position='Query'),
  voiceId: string(name='VoiceId', example='xiaozhuan', maxLength=32, position='Query'),
  voiceName?: string(name='VoiceName', maxLength=32, position='Query'),
}

model CreateCustomizedVoiceJobResponseBody = {
  data?: {
    jobId?: string(name='JobId', example='****29faef8144638ba42eb8e037****'),
    voiceId?: string(name='VoiceId', example='xiaozhuan'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model CreateCustomizedVoiceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCustomizedVoiceJobResponseBody(name='body'),
}

async function createCustomizedVoiceJob(request: CreateCustomizedVoiceJobRequest): CreateCustomizedVoiceJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustomizedVoiceJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateDNADBRequest {
  description?: string(name='Description', position='Query'),
  model?: string(name='Model', example='Video', position='Query'),
  name: string(name='Name', example='example name', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateDNADBResponseBody = {
  DBInfo?: {
    DBId?: string(name='DBId', example='88c6ca184c0e47098a5b665e2a12****'),
    description?: string(name='Description'),
    model?: string(name='Model', example='Video'),
    name?: string(name='Name', example='example name'),
    status?: string(name='Status', example='offline'),
  }(name='DBInfo'),
  requestId?: string(name='RequestId', example='25818875-5F78-4A13-BEF6-D7393642CA58'),
}

model CreateDNADBResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDNADBResponseBody(name='body'),
}

async function createDNADB(request: CreateDNADBRequest): CreateDNADBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDNADB', 'POST', '/', 'json', false, 'json', request);
}

model CreateEditingProjectRequest {
  businessConfig?: string(name='BusinessConfig', example='{ "OutputMediaConfig" : { "StorageLocation": "test-bucket.oss-cn-shanghai.aliyuncs.com", "Path": "test-path" }, "OutputMediaTarget": "oss-object", "ReservationTime": "2021-06-21T08:05:00Z" }', position='Query'),
  clipsParam?: string(name='ClipsParam', position='Query'),
  coverURL?: string(name='CoverURL', example='https://example.com/example.png', position='Query'),
  description?: string(name='Description', example='描述', position='Query'),
  materialMaps?: string(name='MaterialMaps', example='{"video":"*****2e057304fcd9b145c5cafc*****", "image":"****8021a8d493da643c8acd98*****,*****cb6307a4edea614d8b3f3c*****", "liveStream": "[{\\"appName\\":\\"testrecord\\",\\"domainName\\":\\"test.alivecdn.com\\",\\"liveUrl\\":\\"rtmp://test.alivecdn.com/testrecord/teststream\\",\\"streamName\\":\\"teststream\\"}]", "editingProject": "*****9b145c5cafc2e057304fcd*****"}', position='Query'),
  projectType?: string(name='ProjectType', example='LiveEditingProject', position='Query'),
  templateId?: string(name='TemplateId', example='****96e8864746a0b6f3****', position='Query'),
  templateType?: string(name='TemplateType', position='Query'),
  timeline?: string(name='Timeline', example='{"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****4d7cf14dc7b83b0e801c****"},{"MediaId":"****4d7cf14dc7b83b0e801c****"}]}]}', position='Body'),
  title: string(name='Title', example='example', position='Query'),
}

model CreateEditingProjectResponseBody = {
  project?: {
    businessConfig?: string(name='BusinessConfig', example='{ "OutputMediaConfig" :    { "StorageLocation": "test-bucket.oss-cn-shanghai.aliyuncs.com", "Path": "test-path"   }, "OutputMediaTarget": "oss-object", "ReservationTime": "2021-06-21T08:05:00Z" }'),
    businessStatus?: string(name='BusinessStatus', example='Reserving'),
    clipsParam?: string(name='ClipsParam'),
    coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
    createSource?: string(name='CreateSource', example='WebSDK'),
    createTime?: string(name='CreateTime', example='2021-01-08T16:52:07Z'),
    description?: string(name='Description', example='example_description'),
    duration?: float(name='Duration', example='3.4200000'),
    modifiedSource?: string(name='ModifiedSource', example='WebSDK'),
    modifiedTime?: string(name='ModifiedTime', example='2021-01-08T16:52:07Z'),
    projectId?: string(name='ProjectId', example='****01bf24bf41c78b2754cb3187****'),
    projectType?: string(name='ProjectType', example='LiveEditingProject'),
    status?: long(name='Status', example='2'),
    statusName?: string(name='StatusName', example='Editing'),
    templateId?: string(name='TemplateId', example='****96e8864746a0b6f3****'),
    templateType?: string(name='TemplateType', example='Timeline'),
    timeline?: string(name='Timeline', example='{"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****4d7cf14dc7b83b0e801c****"},{"MediaId":"****4d7cf14dc7b83b0e801c****"}]}]}'),
    title?: string(name='Title', example='example_title'),
  }(name='Project'),
  requestId?: string(name='RequestId', description='Id of the request', example='******3B-0E1A-586A-AC29-742247******'),
}

model CreateEditingProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEditingProjectResponseBody(name='body'),
}

async function createEditingProject(request: CreateEditingProjectRequest): CreateEditingProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEditingProject', 'POST', '/', 'json', true, 'form', request);
}

model CreateLiveRecordTemplateRequest {
  name: string(name='Name', description='代表资源名称的资源属性字段', position='Body'),
  recordFormat: [ 
    {
      cycleDuration?: int32(name='CycleDuration', example='3600'),
      format: string(name='Format', description='格式', example='m3u8'),
      ossObjectPrefix?: string(name='OssObjectPrefix', description='Oss对象名，不包含后缀', example='record/{JobId}/{Sequence}_{EscapedStartTime}_{EscapedEndTime}'),
      sliceDuration?: int32(name='SliceDuration', description='切片时长', example='30'),
      sliceOssObjectPrefix?: string(name='SliceOssObjectPrefix', description='切片Oss对象名，不包含后缀', example='record/{JobId}/{UnixTimestamp}_{Sequence}'),
    }
  ](name='RecordFormat', description='录制格式', shrink='json', position='Body'),
}

model CreateLiveRecordTemplateResponseBody = {
  requestId?: string(name='RequestId', example='0622C702-41BE-467E-AF2E-883D4517962E'),
  templateId?: string(name='TemplateId', description='代表资源一级ID的资源属性字段', example='****96e8864746a0b6f3****'),
}

model CreateLiveRecordTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLiveRecordTemplateResponseBody(name='body'),
}

async function createLiveRecordTemplate(request: CreateLiveRecordTemplateRequest): CreateLiveRecordTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLiveRecordTemplate', 'POST', '/', 'json', true, 'form', request);
}

model CreateLiveSnapshotTemplateRequest {
  overwriteFormat?: string(name='OverwriteFormat', example='snapshot/{JobId}.jpg', position='Body'),
  sequenceFormat?: string(name='SequenceFormat', example='snapshot/{JobId}/{UnixTimestamp}.jpg', position='Body'),
  templateName: string(name='TemplateName', position='Body'),
  timeInterval: int32(name='TimeInterval', example='5', position='Body'),
}

model CreateLiveSnapshotTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  templateId?: string(name='TemplateId', example='****a046-263c-3560-978a-fb287782****'),
}

model CreateLiveSnapshotTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLiveSnapshotTemplateResponseBody(name='body'),
}

async function createLiveSnapshotTemplate(request: CreateLiveSnapshotTemplateRequest): CreateLiveSnapshotTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLiveSnapshotTemplate', 'POST', '/', 'json', true, 'form', request);
}

model CreateLiveTranscodeTemplateRequest {
  name: string(name='Name', example='my template', minLength=1, maxLength=20, position='Query'),
  templateConfig?: {
    audioParams?: {
      bitrate?: string(name='Bitrate', example='100'),
      channels?: string(name='Channels', example='2'),
      codec?: string(name='Codec', example='AAC'),
      profile?: string(name='Profile', example='aaclow'),
      samplerate?: string(name='Samplerate', example='44100'),
    }(name='AudioParams'),
    videoParams?: {
      bitrate?: string(name='Bitrate', example='2500'),
      codec?: string(name='Codec', example='H.264'),
      fps?: string(name='Fps', example='25'),
      gop?: string(name='Gop', example='1000'),
      height?: string(name='Height', example='720'),
      profile?: string(name='Profile', example='2'),
      width?: string(name='Width', example='1280'),
    }(name='VideoParams'),
  }(name='TemplateConfig', shrink='json', position='Query'),
  type: string(name='Type', example='normal', position='Query'),
}

model CreateLiveTranscodeTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
  templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
}

model CreateLiveTranscodeTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLiveTranscodeTemplateResponseBody(name='body'),
}

async function createLiveTranscodeTemplate(request: CreateLiveTranscodeTemplateRequest): CreateLiveTranscodeTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLiveTranscodeTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CreatePipelineRequest {
  name: string(name='Name', example='test-pipeline', position='Query'),
  priority?: int32(name='Priority', example='6', position='Query'),
  speed: string(name='Speed', example='Standard', position='Query'),
}

model CreatePipelineResponseBody = {
  pipeline?: {
    createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
    modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:17:54Z'),
    name?: string(name='Name', example='test-pipeline'),
    pipelineId?: string(name='PipelineId', example='****20b48fb04483915d4f2cd8ac****'),
    priority?: int32(name='Priority', example='6'),
    speed?: string(name='Speed', example='Standard'),
    status?: string(name='Status', example='Active'),
  }(name='Pipeline'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model CreatePipelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePipelineResponseBody(name='body'),
}

async function createPipeline(request: CreatePipelineRequest): CreatePipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePipeline', 'POST', '/', 'json', false, 'json', request);
}

model CreateSearchIndexRequest {
  regionId?: string(name='RegionId', position='Host'),
  indexConfig?: string(name='IndexConfig', example='{}', position='Query'),
  indexStatus?: string(name='IndexStatus', position='Query'),
  indexType: string(name='IndexType', example='mm', position='Query'),
  searchLibName?: string(name='SearchLibName', example='test1', position='Query'),
}

model CreateSearchIndexResponseBody = {
  code?: string(name='Code'),
  requestId?: string(name='RequestId', example='*****ACB-44F2-5F2D-88D7-1283E70*****'),
  success?: string(name='Success'),
}

model CreateSearchIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSearchIndexResponseBody(name='body'),
}

async function createSearchIndex(request: CreateSearchIndexRequest): CreateSearchIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSearchIndex', 'POST', '/', 'json', false, 'json', request);
}

model CreateSearchLibRequest {
  regionId?: string(name='RegionId', position='Host'),
  searchLibName: string(name='SearchLibName', example='test1', position='Query'),
}

model CreateSearchLibResponseBody = {
  code?: string(name='Code'),
  requestId?: string(name='RequestId', description='Id of the request', example='******3B-0E1A-586A-AC29-742247******'),
  searchLibName?: string(name='SearchLibName', example='test1'),
  success?: string(name='Success'),
}

model CreateSearchLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSearchLibResponseBody(name='body'),
}

async function createSearchLib(request: CreateSearchLibRequest): CreateSearchLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSearchLib', 'POST', '/', 'json', false, 'json', request);
}

model CreateUploadMediaRequest {
  regionId?: string(name='RegionId', position='Host'),
  appId?: string(name='AppId', example='app-1000000', position='Query'),
  entityId?: string(name='EntityId', example='9e177cac2fb44f8b8c67b199fcc7bffd', position='Query'),
  fileInfo?: string(name='FileInfo', example='{\\"Type\\":\\"video\\",\\"Name\\":\\"test.mp4\\",\\"Size\\":108078336,\\"Ext\\":\\"mp4\\"}', position='Query'),
  mediaMetaData?: string(name='MediaMetaData', example='{\\"Title\\": \\"UploadTest\\", \\"Description\\": \\"UploadImageTest\\", \\"Tags\\": \\"tag1,tag2\\",\\"BusinessType\\":\\"cover\\"}', position='Query'),
  postProcessConfig?: string(name='PostProcessConfig', example='{\\"ProcessType\\":\\"Workflow\\",\\"ProcessID\\":\\"74ba870f1a4873a3ba238e0bf6fa9***\\"}', position='Query'),
  uploadTargetConfig?: string(name='UploadTargetConfig', example='{\\"StorageType\\":\\"oss\\",\\"StorageLocation\\":\\"outin-***.oss-cn-shanghai.aliyuncs.com\\"}', position='Query'),
  userData?: string(name='UserData', example='{"MessageCallback":{"CallbackURL":"http://example.aliyundoc.com"},"Extend":{"localId":"*****","test":"www"}}', position='Query'),
}

model CreateUploadMediaResponseBody = {
  fileURL?: string(name='FileURL', example='http://outin-***.oss-cn-north-2-gov-1.aliyuncs.com/sv/40360f05-181f63c3110-0004-cd8e-27f-de3c9.mp4'),
  mediaId?: string(name='MediaId', example='****20b48fb04483915d4f2cd8ac****'),
  mediaURL?: string(name='MediaURL', example='https://xxq-live-playback.oss-cn-shanghai.aliyuncs.com/capture/5d96d2b4-111b-4e5d-a0e5-20f44405bb55.mp4'),
  requestId?: string(name='RequestId', example='4E84BE44-58A7-****-****-FBEBEA16EF94'),
  uploadAddress?: string(name='UploadAddress', example='eyJFbmRwb2ludCI6Imh0dHBzOi8vb3NzLWNuLXNoYW5naGFpLmFsaXl1bmNzLmNvbSIsIkJ1Y2tldCI6InN6aGQtdmlkZW8iLCJGaWxlTmFtZSI6InZvZC0yOTYzMWEvc3YvNTBmYTJlODQtMTgxMjdhZGRiMTcvNTBmYTJlODQtMTgxMjdhZGRiM***'),
  uploadAuth?: string(name='UploadAuth', example='eyJBY2Nlc3NLZXlJZCI6IkxUQUk0Rm53bTk1dHdxQjMxR3IzSE5hRCIsIkFjY2Vzc0tleVNlY3JldCI6Ik9lWllKR0dTMTlkNkZaM1E3UVpJQmdmSVdnM3BPaiIsIkV4cGlyYXRpb24iOiI***'),
}

model CreateUploadMediaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUploadMediaResponseBody(name='body'),
}

async function createUploadMedia(request: CreateUploadMediaRequest): CreateUploadMediaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUploadMedia', 'POST', '/', 'json', false, 'json', request);
}

model CreateUploadStreamRequest {
  regionId?: string(name='RegionId', position='Host'),
  definition?: string(name='Definition', example='HD', position='Query'),
  fileExtension?: string(name='FileExtension', example='MP4', position='Query'),
  HDRType?: string(name='HDRType', example='HDR10', position='Query'),
  mediaId?: string(name='MediaId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  userData?: string(name='UserData', example='{"MessageCallback":{"CallbackURL":"http://aliyundoc.com"}, "Extend":{"localId":"xxx","test":"www"}}', position='Query'),
}

model CreateUploadStreamResponseBody = {
  fileURL?: string(name='FileURL', example='http://outin-***.oss-cn-shanghai.aliyuncs.com/stream/48555e8b-181dd5a8c07/48555e8b-181dd5a8c07.mp4'),
  mediaId?: string(name='MediaId', example='****c469e944b5a856828dc2****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  uploadAddress?: string(name='UploadAddress', example='eyJFbmRwb2ludCI6Imh0dHBzOi8vb3NzLWNuLXNoYW5naGFpLmFsaXl1bmNzLmNvbSIsIkJ1Y2tldCI6InN6aGQtdmlkZW8iLCJGaWxlTmFtZSI6InZvZC0yOTYzMWEvc3YvNTBmYTJlODQtMTgxMjdhZGRiMTcvNTBmYTJlODQtMTgxMjdhZGRiM***'),
  uploadAuth?: string(name='UploadAuth', example='eyJBY2Nlc3NLZXlJZCI6IkxUQUk0Rm53bTk1dHdxQjMxR3IzSE5hRCIsIkFjY2Vzc0tleVNlY3JldCI6Ik9lWllKR0dTMTlkNkZaM1E3UVpJQmdmSVdnM3BPaiIsIkV4cGlyYXRpb24iOiI***'),
}

model CreateUploadStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUploadStreamResponseBody(name='body'),
}

async function createUploadStream(request: CreateUploadStreamRequest): CreateUploadStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUploadStream', 'POST', '/', 'json', false, 'json', request);
}

model DecryptKMSDataKeyRequest {
  ciphertextBlob: string(name='CiphertextBlob', example='ODZhOWVmZDktM2QxNi00ODk0LWJkNGYtMWZjNDNmM2YyYWJmS7FmDBBQ0BkKsQrtRnidtPwirmDcS0ZuJCU41xxAAWk4Z8qsADfbV0b+i6kQmlvj79dJdGOvtX69Uycs901qOjop4bTS****', position='Query'),
}

model DecryptKMSDataKeyResponseBody = {
  dataKey?: {
    keyId?: string(name='KeyId', example='202b9877-5a25-46e3-a763-e20791b5****'),
    plaintext?: string(name='Plaintext', example='tRYXuCwgja12xxO1N/gZERDDCLw9doZEQiPDk/Bv****'),
  }(name='DataKey'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model DecryptKMSDataKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DecryptKMSDataKeyResponseBody(name='body'),
}

async function decryptKMSDataKey(request: DecryptKMSDataKeyRequest): DecryptKMSDataKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DecryptKMSDataKey', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAvatarTrainingJobRequest {
  jobId: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model DeleteAvatarTrainingJobResponseBody = {
  data?: {
    jobId?: string(name='JobId', example='****d718e2ff4f018ccf419a7b71****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model DeleteAvatarTrainingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAvatarTrainingJobResponseBody(name='body'),
}

async function deleteAvatarTrainingJob(request: DeleteAvatarTrainingJobRequest): DeleteAvatarTrainingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAvatarTrainingJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCategoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  cateId: long(name='CateId', example='46', position='Query'),
}

model DeleteCategoryResponseBody = {
  requestId?: string(name='RequestId', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
}

model DeleteCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCategoryResponseBody(name='body'),
}

async function deleteCategory(request: DeleteCategoryRequest): DeleteCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCategory', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomTemplateRequest {
  templateId: string(name='TemplateId', example='****96e8864746a0b6f3****', position='Query'),
}

model DeleteCustomTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model DeleteCustomTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustomTemplateResponseBody(name='body'),
}

async function deleteCustomTemplate(request: DeleteCustomTemplateRequest): DeleteCustomTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomizedVoiceJobRequest {
  jobId: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model DeleteCustomizedVoiceJobResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model DeleteCustomizedVoiceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustomizedVoiceJobResponseBody(name='body'),
}

async function deleteCustomizedVoiceJob(request: DeleteCustomizedVoiceJobRequest): DeleteCustomizedVoiceJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomizedVoiceJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDNADBRequest {
  DBId: string(name='DBId', example='fb712a6890464059b1b2ea7c8647****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDNADBResponseBody = {
  requestId?: string(name='RequestId', example='25818875-5F78-4A13-BEF6-D7393642CA58'),
}

model DeleteDNADBResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDNADBResponseBody(name='body'),
}

async function deleteDNADB(request: DeleteDNADBRequest): DeleteDNADBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDNADB', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDNAFilesRequest {
  DBId: string(name='DBId', example='fb712a6890464059b1b2ea7c8647****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  primaryKeys: string(name='PrimaryKeys', example='41e6536e4f2250e2e9bf26cdea19****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDNAFilesResponseBody = {
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model DeleteDNAFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDNAFilesResponseBody(name='body'),
}

async function deleteDNAFiles(request: DeleteDNAFilesRequest): DeleteDNAFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDNAFiles', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEditingProjectMaterialsRequest {
  materialIds: string(name='MaterialIds', example='*****cbd721b418a89a7dafb1dc*****,*****86f5d534c95997c55c96f*****', position='Query'),
  materialType: string(name='MaterialType', example='video', position='Query'),
  projectId: string(name='ProjectId', example='*****fb2101cb318*****', position='Query'),
}

model DeleteEditingProjectMaterialsResponseBody = {
  requestId?: string(name='RequestId', example='******36-3C1E-4417-BDB2-1E034F******'),
}

model DeleteEditingProjectMaterialsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEditingProjectMaterialsResponseBody(name='body'),
}

async function deleteEditingProjectMaterials(request: DeleteEditingProjectMaterialsRequest): DeleteEditingProjectMaterialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEditingProjectMaterials', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEditingProjectsRequest {
  projectIds?: string(name='ProjectIds', example='****fb2101bf24bf41cb318787dc****,****87dcfb2101bf24bf41cb3187****', position='Query'),
}

model DeleteEditingProjectsResponseBody = {
  requestId?: string(name='RequestId', example='****25818875-5F78-4AF6-D7393642CA58****'),
}

model DeleteEditingProjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEditingProjectsResponseBody(name='body'),
}

async function deleteEditingProjects(request: DeleteEditingProjectsRequest): DeleteEditingProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEditingProjects', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveRecordFilesRequest {
  recordIds: [ string ](name='RecordIds', position='Query'),
  removeFile?: boolean(name='RemoveFile', example='true', position='Query'),
}

model DeleteLiveRecordFilesResponseBody = {
  deleteFileInfoList?: [ 
    {
      code?: string(name='Code', example='OK'),
      message?: string(name='Message', example='OK'),
      recordId?: string(name='RecordId', example='13cbb83e-043c-4728-ac35-*****'),
    }
  ](name='DeleteFileInfoList'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='13cbb83e-043c-4728-ac35-*****'),
}

model DeleteLiveRecordFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLiveRecordFilesResponseBody(name='body'),
}

async function deleteLiveRecordFiles(request: DeleteLiveRecordFilesRequest): DeleteLiveRecordFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveRecordFiles', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveRecordTemplateRequest {
  templateId: string(name='TemplateId', description='代表资源一级ID的资源属性字段', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66', position='Query'),
}

model DeleteLiveRecordTemplateResponseBody = {
  requestId?: string(name='RequestId', example='3E5330CF-B4C8-5BEF-AA6B-8E70BD20FAEE'),
}

model DeleteLiveRecordTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLiveRecordTemplateResponseBody(name='body'),
}

async function deleteLiveRecordTemplate(request: DeleteLiveRecordTemplateRequest): DeleteLiveRecordTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveRecordTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveSnapshotFilesRequest {
  createTimestampList: [ long ](name='CreateTimestampList', shrink='json', position='Query'),
  deleteOriginalFile?: boolean(name='DeleteOriginalFile', example='true', position='Query'),
  jobId: string(name='JobId', example='****a046-263c-3560-978a-fb287782****', position='Query'),
}

model DeleteLiveSnapshotFilesResponseBody = {
  deleteFileResultList?: [ 
    {
      createTimestamp?: long(name='CreateTimestamp', example='1660638613798'),
      result?: string(name='Result', example='OK'),
    }
  ](name='DeleteFileResultList'),
  requestId?: string(name='RequestId', example='****2876-6263-4B75-8F2C-CD0F7FCF****'),
}

model DeleteLiveSnapshotFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLiveSnapshotFilesResponseBody(name='body'),
}

async function deleteLiveSnapshotFiles(request: DeleteLiveSnapshotFilesRequest): DeleteLiveSnapshotFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveSnapshotFiles', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveSnapshotTemplateRequest {
  templateId: string(name='TemplateId', example='****a046-263c-3560-978a-fb287782****', position='Body'),
}

model DeleteLiveSnapshotTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model DeleteLiveSnapshotTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLiveSnapshotTemplateResponseBody(name='body'),
}

async function deleteLiveSnapshotTemplate(request: DeleteLiveSnapshotTemplateRequest): DeleteLiveSnapshotTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveSnapshotTemplate', 'POST', '/', 'json', true, 'form', request);
}

model DeleteLiveTranscodeJobRequest {
  jobId: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model DeleteLiveTranscodeJobResponseBody = {
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
}

model DeleteLiveTranscodeJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLiveTranscodeJobResponseBody(name='body'),
}

async function deleteLiveTranscodeJob(request: DeleteLiveTranscodeJobRequest): DeleteLiveTranscodeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveTranscodeJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveTranscodeTemplateRequest {
  templateId: string(name='TemplateId', example='****d80e4e4044975745c14b****', position='Query'),
}

model DeleteLiveTranscodeTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
}

model DeleteLiveTranscodeTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLiveTranscodeTemplateResponseBody(name='body'),
}

async function deleteLiveTranscodeTemplate(request: DeleteLiveTranscodeTemplateRequest): DeleteLiveTranscodeTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveTranscodeTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMediaFromSearchLibRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaId: string(name='MediaId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  msgBody?: string(name='MsgBody', example='{}', position='Query'),
  searchLibName?: string(name='SearchLibName', example='test1', position='Query'),
}

model DeleteMediaFromSearchLibResponseBody = {
  code?: string(name='Code'),
  mediaId?: string(name='MediaId', example='******b48fb04483915d4f2cd8******'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: string(name='Success'),
}

model DeleteMediaFromSearchLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMediaFromSearchLibResponseBody(name='body'),
}

async function deleteMediaFromSearchLib(request: DeleteMediaFromSearchLibRequest): DeleteMediaFromSearchLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMediaFromSearchLib', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMediaInfosRequest {
  regionId?: string(name='RegionId', position='Host'),
  deletePhysicalFiles?: boolean(name='DeletePhysicalFiles', example='false', position='Query'),
  inputURLs?: string(name='InputURLs', position='Query'),
  mediaIds?: string(name='MediaIds', example='****20b48fb04483915d4f2cd8ac****,****15d4a4b0448391508f2cb486****', position='Query'),
}

model DeleteMediaInfosResponseBody = {
  forbiddenList?: [ string ](name='ForbiddenList'),
  ignoredList?: [ string ](name='IgnoredList'),
  requestId?: string(name='RequestId', example='0622C702-41BE-467E-AF2E-883D4517962E'),
}

model DeleteMediaInfosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMediaInfosResponseBody(name='body'),
}

async function deleteMediaInfos(request: DeleteMediaInfosRequest): DeleteMediaInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMediaInfos', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMediaMarksRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaId?: string(name='MediaId', example='****c469e944b5a856828dc2****', position='Query'),
  mediaMarkIds?: string(name='MediaMarkIds', example='mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60', position='Query'),
}

model DeleteMediaMarksResponseBody = {
  mediaId?: string(name='MediaId', example='****019b82e24b37a1c2958dec38****'),
  mediaMarkIds?: string(name='MediaMarkIds', example='mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model DeleteMediaMarksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMediaMarksResponseBody(name='body'),
}

async function deleteMediaMarks(request: DeleteMediaMarksRequest): DeleteMediaMarksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMediaMarks', 'POST', '/', 'json', false, 'json', request);
}

model DeletePipelineRequest {
  pipelineId: string(name='PipelineId', example='****96e8864746a0b6f3****', position='Query'),
}

model DeletePipelineResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model DeletePipelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePipelineResponseBody(name='body'),
}

async function deletePipeline(request: DeletePipelineRequest): DeletePipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePipeline', 'POST', '/', 'json', false, 'json', request);
}

model DeletePlayInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  deletePhysicalFiles?: boolean(name='DeletePhysicalFiles', example='false', position='Query'),
  fileURLs?: string(name='FileURLs', example='https://ice-test001.oss-cn-shanghai.aliyuncs.com/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%E5%B0%8F%E7%8C%AA%E4%BD%A9%E5%A5%87640*360.mp4', position='Query'),
  mediaId?: string(name='MediaId', example='1d3518e0027d71ed80cd909598416303', position='Query'),
}

model DeletePlayInfoResponseBody = {
  forbiddenList?: [ string ](name='ForbiddenList'),
  ignoredList?: [ string ](name='IgnoredList'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model DeletePlayInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePlayInfoResponseBody(name='body'),
}

async function deletePlayInfo(request: DeletePlayInfoRequest): DeletePlayInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePlayInfo', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSmartJobRequest {
  jobId?: string(name='JobId', example='******b48fb04483915d4f2cd8******,******042d5e4db6866f6289d1******', position='Query'),
}

model DeleteSmartJobResponseBody = {
  requestId?: string(name='RequestId', description='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model DeleteSmartJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSmartJobResponseBody(name='body'),
}

async function deleteSmartJob(request: DeleteSmartJobRequest): DeleteSmartJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSmartJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTemplateRequest {
  templateIds?: string(name='TemplateIds', example='****20b48fb04483915d4f2cd8ac****,****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model DeleteTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model DeleteTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTemplateResponseBody(name='body'),
}

async function deleteTemplate(request: DeleteTemplateRequest): DeleteTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTemplate', 'GET', '/', 'json', false, 'json', request);
}

model DescribeMeterImsEditUsageRequest {
  endTs: long(name='EndTs', example='1656995036', position='Query'),
  interval: long(name='Interval', example='86400', position='Query'),
  region?: string(name='Region', example='cn-shanghai', position='Query'),
  startTs: long(name='StartTs', example='1654403036', position='Query'),
}

model DescribeMeterImsEditUsageResponseBody = {
  data?: [ 
    {
      duration?: long(name='Duration', example='1.23'),
      profile?: string(name='Profile', example='1080P'),
      time?: long(name='Time', example='1656950400'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='7F3AE2C6-5CC6-5712-BAC5-5A735A157687'),
}

model DescribeMeterImsEditUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeterImsEditUsageResponseBody(name='body'),
}

async function describeMeterImsEditUsage(request: DescribeMeterImsEditUsageRequest): DescribeMeterImsEditUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterImsEditUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterImsMediaConvertUHDUsageRequest {
  endTs: long(name='EndTs', example='1656995036', position='Query'),
  interval: string(name='Interval', example='3600', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  startTs: long(name='StartTs', example='1654403036', position='Query'),
}

model DescribeMeterImsMediaConvertUHDUsageResponseBody = {
  data?: [ 
    {
      duration?: long(name='Duration', example='308028'),
      specification?: string(name='Specification', example='SuperResolution.Standard.1080P'),
      time?: long(name='Time', example='1656950400'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='BEA98A0C-7870-15FE-B96F-8880BB600A2C'),
}

model DescribeMeterImsMediaConvertUHDUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeterImsMediaConvertUHDUsageResponseBody(name='body'),
}

async function describeMeterImsMediaConvertUHDUsage(request: DescribeMeterImsMediaConvertUHDUsageRequest): DescribeMeterImsMediaConvertUHDUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterImsMediaConvertUHDUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterImsMediaConvertUsageRequest {
  endTs: long(name='EndTs', example='1656995036', position='Query'),
  interval: long(name='Interval', example='86400', position='Query'),
  region?: string(name='Region', example='cn-shanghai', position='Query'),
  startTs: long(name='StartTs', example='1654403036', position='Query'),
}

model DescribeMeterImsMediaConvertUsageResponseBody = {
  data?: [ 
    {
      duration?: long(name='Duration', example='20'),
      specification?: string(name='Specification', example='H264.HD'),
      time?: long(name='Time', example='1656950400'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='FBBB5210-2B78-58FB-A6FE-9DD887BB2C61'),
}

model DescribeMeterImsMediaConvertUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeterImsMediaConvertUsageResponseBody(name='body'),
}

async function describeMeterImsMediaConvertUsage(request: DescribeMeterImsMediaConvertUsageRequest): DescribeMeterImsMediaConvertUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterImsMediaConvertUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterImsMpsAiUsageRequest {
  endTs: long(name='EndTs', example='1656995036', position='Query'),
  interval: long(name='Interval', example='86400', position='Query'),
  region?: string(name='Region', example='cn-shanghai', position='Query'),
  startTs: long(name='StartTs', example='1654403036', position='Query'),
}

model DescribeMeterImsMpsAiUsageResponseBody = {
  data?: [ 
    {
      duration?: long(name='Duration', example='644'),
      time?: long(name='Time', example='1656950400'),
      type?: string(name='Type'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='0622C702-41BE-467E-AF2E-883D4517962E'),
}

model DescribeMeterImsMpsAiUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeterImsMpsAiUsageResponseBody(name='body'),
}

async function describeMeterImsMpsAiUsage(request: DescribeMeterImsMpsAiUsageRequest): DescribeMeterImsMpsAiUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterImsMpsAiUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterImsSummaryRequest {
  endTs: long(name='EndTs', example='1656995036', position='Query'),
  region?: string(name='Region', example='cn-shanghai', position='Query'),
  startTs: long(name='StartTs', example='1654403036', position='Query'),
}

model DescribeMeterImsSummaryResponseBody = {
  data?: [ 
    {
      editingDuration?: string(name='EditingDuration', example='8722'),
      liveEditDuration?: string(name='LiveEditDuration'),
      liveRecordDuration?: string(name='LiveRecordDuration'),
      liveSnapshotCount?: string(name='LiveSnapshotCount'),
      liveTranscodeDuration?: long(name='LiveTranscodeDuration', example='12356'),
      mpsAiDuration?: long(name='MpsAiDuration', example='0'),
      mpsTranscodeDuration?: long(name='MpsTranscodeDuration', example='17337'),
      mpsTranscodeUHDDuration?: long(name='MpsTranscodeUHDDuration', example='300'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='BEA98A0C-7870-15FE-B96F-8880BB600A2C'),
}

model DescribeMeterImsSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeterImsSummaryResponseBody(name='body'),
}

async function describeMeterImsSummary(request: DescribeMeterImsSummaryRequest): DescribeMeterImsSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterImsSummary', 'POST', '/', 'json', false, 'json', request);
}

model DescribePlayListRequest {
  beginTs: string(name='BeginTs', example='1676170500011', position='Query'),
  endTs: string(name='EndTs', example='1682474405173', position='Query'),
  orderName?: string(name='OrderName', example='FirstFrameDuration', position='Query'),
  orderType?: string(name='OrderType', example='DESC', position='Query'),
  pageNo: int32(name='PageNo', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  playType?: string(name='PlayType', example='vod', position='Query'),
  status?: string(name='Status', example='complete', position='Query'),
  traceId?: string(name='TraceId', example='0bc5e70516766285805381012d271e', position='Query'),
}

model DescribePlayListResponseBody = {
  pageNum?: long(name='PageNum', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  playList?: [ 
    {
      firstFrameDuration?: string(name='FirstFrameDuration', example='200'),
      playDuration?: string(name='PlayDuration', example='1000'),
      playTs?: string(name='PlayTs', example='1675922209572'),
      playType?: string(name='PlayType', example='vod'),
      sessionId?: string(name='SessionId', example='91488be2-8381-40c9-8494-e8afe22c4a2d'),
      status?: string(name='Status', example='complete'),
      stuckDuration?: string(name='StuckDuration', example='20'),
      traceId?: string(name='TraceId', example='0b736abf16724820210842673d9543'),
      videoDuration?: string(name='VideoDuration', example='2000'),
      videoId?: string(name='VideoId', example='250314203f0171eebff17035d0b20102'),
    }
  ](name='PlayList'),
  requestId?: string(name='RequestId', description='Id', example='B960580D-26FA-5547-8AFC-3CDC812DBF27'),
  totalNum?: long(name='TotalNum', example='49'),
}

model DescribePlayListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePlayListResponseBody(name='body'),
}

async function describePlayList(request: DescribePlayListRequest): DescribePlayListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePlayList', 'POST', '/', 'json', false, 'json', request);
}

model DetectAudioForCustomizedVoiceJobRequest {
  audioRecordId: int32(name='AudioRecordId', example='1', minimum=1, maximum=20, position='Query'),
  recordUrl: string(name='RecordUrl', example='https://your-bucket.oss-cn-hangzhou.aliyuncs.com/record1.wav', position='Query'),
  voiceId: string(name='VoiceId', example='xiaozhuan', position='Query'),
}

model DetectAudioForCustomizedVoiceJobResponseBody = {
  data?: {
    pass?: boolean(name='Pass', example='false'),
    reason?: string(name='Reason'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model DetectAudioForCustomizedVoiceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetectAudioForCustomizedVoiceJobResponseBody(name='body'),
}

async function detectAudioForCustomizedVoiceJob(request: DetectAudioForCustomizedVoiceJobRequest): DetectAudioForCustomizedVoiceJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetectAudioForCustomizedVoiceJob', 'POST', '/', 'json', false, 'json', request);
}

model DropSearchIndexRequest {
  regionId?: string(name='RegionId', position='Host'),
  indexType: string(name='IndexType', example='mm', position='Query'),
  searchLibName?: string(name='SearchLibName', example='test1', position='Query'),
}

model DropSearchIndexResponseBody = {
  code?: string(name='Code'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: string(name='Success'),
}

model DropSearchIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DropSearchIndexResponseBody(name='body'),
}

async function dropSearchIndex(request: DropSearchIndexRequest): DropSearchIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DropSearchIndex', 'POST', '/', 'json', false, 'json', request);
}

model DropSearchLibRequest {
  regionId?: string(name='RegionId', position='Host'),
  searchLibName: string(name='SearchLibName', example='test1', position='Query'),
}

model DropSearchLibResponseBody = {
  code?: string(name='Code'),
  requestId?: string(name='RequestId', description='Id of the request', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
  success?: string(name='Success'),
}

model DropSearchLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DropSearchLibResponseBody(name='body'),
}

async function dropSearchLib(request: DropSearchLibRequest): DropSearchLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DropSearchLib', 'POST', '/', 'json', false, 'json', request);
}

model GenerateKMSDataKeyRequest {
}

model GenerateKMSDataKeyResponseBody = {
  dataKey?: {
    ciphertextBlob?: string(name='CiphertextBlob', example='ODZhOWVmZDktM2QxNi00ODk0LWJkNGYtMWZjNDNmM2YyYWJmS7FmDBBQ0BkKsQrtRnidtPwirmDcS0ZuJCU41xxAAWk4Z8qsADfbV0b+i6kQmlvj79dJdGOvtX69Uycs901qOjop4bTS****'),
    keyId?: string(name='KeyId', example='7906979c-8e06-46a2-be2d-68e3ccbc****'),
    plaintext?: string(name='Plaintext', example='QmFzZTY0IGVuY29kZWQgcGxhaW50****'),
  }(name='DataKey'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model GenerateKMSDataKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateKMSDataKeyResponseBody(name='body'),
}

async function generateKMSDataKey(request: GenerateKMSDataKeyRequest): GenerateKMSDataKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateKMSDataKey', 'POST', '/', 'json', false, 'json', request);
}

model GetAvatarRequest {
  avatarId: string(name='AvatarId', example='Avatar-XXXX', position='Query'),
}

model GetAvatarResponseBody = {
  data?: {
    avatar?: {
      avatarDescription?: string(name='AvatarDescription'),
      avatarId?: string(name='AvatarId', example='Avatar-XXXX'),
      avatarName?: string(name='AvatarName'),
      avatarType?: string(name='AvatarType', example='2DAvatar'),
      height?: int32(name='Height'),
      portrait?: string(name='Portrait', example='****571c704445f9a0ee011406c2****'),
      thumbnail?: string(name='Thumbnail', example='https://your-bucket.oss-cn-hangzhou.aliyuncs.com/thumbnail.png'),
      transparent?: boolean(name='Transparent', example='true'),
      width?: int32(name='Width'),
    }(name='Avatar'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model GetAvatarResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAvatarResponseBody(name='body'),
}

async function getAvatar(request: GetAvatarRequest): GetAvatarResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAvatar', 'POST', '/', 'json', false, 'json', request);
}

model GetAvatarTrainingJobRequest {
  jobId: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model GetAvatarTrainingJobResponseBody = {
  data?: {
    avatarTrainingJob?: {
      avatarDescription?: string(name='AvatarDescription'),
      avatarId?: string(name='AvatarId', example='Avatar-XXXX'),
      avatarName?: string(name='AvatarName'),
      avatarType?: string(name='AvatarType', example='2DAvatar'),
      firstTrainingTime?: string(name='FirstTrainingTime', example='2020-12-23T13:33:40Z'),
      jobId?: string(name='JobId', example='****55d86f7f4587943ce7734d6b****'),
      lastTrainingTime?: string(name='LastTrainingTime', example='2020-12-23T13:33:40Z'),
      message?: string(name='Message'),
      portrait?: string(name='Portrait', example='****571c704445f9a0ee011406c2****'),
      status?: string(name='Status', example='Success'),
      thumbnail?: string(name='Thumbnail', example='https://your-bucket.oss-cn-hangzhou.aliyuncs.com/thumbnail.png'),
      transparent?: boolean(name='Transparent', example='true'),
      video?: string(name='Video', example='****571c704445f9a0ee011406c2****'),
    }(name='AvatarTrainingJob'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model GetAvatarTrainingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAvatarTrainingJobResponseBody(name='body'),
}

async function getAvatarTrainingJob(request: GetAvatarTrainingJobRequest): GetAvatarTrainingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAvatarTrainingJob', 'POST', '/', 'json', false, 'json', request);
}

model GetBatchMediaProducingJobRequest {
  jobId?: string(name='JobId', example='****b4549d46c88681030f6e****', position='Query'),
  signature?: string(name='Signature', position='Query'),
  signatureMehtod?: string(name='SignatureMehtod', position='Query'),
  signatureNonce?: string(name='SignatureNonce', position='Query'),
  signatureType?: string(name='SignatureType', position='Query'),
  signatureVersion?: string(name='SignatureVersion', position='Query'),
}

model GetBatchMediaProducingJobResponseBody = {
  editingBatchJob?: {
    completeTime?: string(name='CompleteTime'),
    createTime?: string(name='CreateTime'),
    editingConfig?: string(name='EditingConfig', example='{
  "MediaConfig": {
      "Volume": 0
  },
  "SpeechConfig": {
      "Volume": 1
  },
 "BackgroundMusicConfig": {
      "Volume": 0.3
  }
}'),
    extend?: string(name='Extend', example='{
	"ErrorCode": "InvalidMaterial.NotFound",
	"ErrorMessage": "The specified clips id not found:[\\"****30d0b5e871eebb2ff7f6c75a****\\"]"
}'),
    inputConfig?: string(name='InputConfig'),
    jobId?: string(name='JobId', example='****b6b2750d4308892ac3330238****'),
    jobType?: string(name='JobType'),
    modifiedTime?: string(name='ModifiedTime'),
    outputConfig?: string(name='OutputConfig', example='{
  "MediaURL": "http://xxx.oss-cn-shanghai.aliyuncs.com/xxx_{index}.mp4",
  "Count": 20,
  "MaxDuration": 15,
  "Width": 1080,
  "Height": 1920,
  "Video": {"Crf": 27}
}'),
    status?: string(name='Status', example='Finished'),
    subJobList?: [ 
      {
        errorCode?: string(name='ErrorCode', example='InvalidMaterial.NotFound'),
        errorMessage?: string(name='ErrorMessage', example='The specified clips id not found:["****30d0b5e871eebb2ff7f6c75a****"]'),
        jobId?: string(name='JobId', example='****8e81933d44e3ae69e2f81485****'),
        mediaId?: string(name='MediaId', example='****1470b11171ee9d19e7e6c66a****'),
        mediaURL?: string(name='MediaURL', example='http:/xxx.oss-cn-shanghai.aliyuncs.com/xxx_0.mp4'),
        status?: string(name='Status', example='Success'),
      }
    ](name='SubJobList'),
    userData?: string(name='UserData', example='{"NotifyAddress":"http://xx.xx.xxx"}'),
  }(name='EditingBatchJob'),
  requestId?: string(name='RequestId', example='****36-3C1E-4417-BDB2-1E034F****'),
}

model GetBatchMediaProducingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBatchMediaProducingJobResponseBody(name='body'),
}

async function getBatchMediaProducingJob(request: GetBatchMediaProducingJobRequest): GetBatchMediaProducingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBatchMediaProducingJob', 'POST', '/', 'json', false, 'json', request);
}

model GetCategoriesRequest {
  regionId?: string(name='RegionId', position='Host'),
  cateId?: long(name='CateId', example='33', position='Query'),
  pageNo?: long(name='PageNo', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  sortBy?: string(name='SortBy', example='CreationTime:Desc', position='Query'),
  type?: string(name='Type', example='default', position='Query'),
}

model GetCategoriesResponseBody = {
  category?: {
    cateId?: long(name='CateId', example='46'),
    cateName?: string(name='CateName'),
    level?: long(name='Level', example='0'),
    parentId?: long(name='ParentId', example='-1'),
    type?: string(name='Type', example='default'),
  }(name='Category'),
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
  subCategories?: {
    category?: [ 
    {
      cateId?: long(name='CateId', example='129'),
      cateName?: string(name='CateName'),
      level?: long(name='Level', example='1'),
      parentId?: long(name='ParentId', example='46'),
      subTotal?: long(name='SubTotal', example='100'),
      type?: string(name='Type', example='default'),
    }
  ](name='Category')
  }(name='SubCategories'),
  subTotal?: long(name='SubTotal', example='100'),
}

model GetCategoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCategoriesResponseBody(name='body'),
}

async function getCategories(request: GetCategoriesRequest): GetCategoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCategories', 'POST', '/', 'json', false, 'json', request);
}

model GetContentAnalyzeConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model GetContentAnalyzeConfigResponseBody = {
  contentAnalyzeConfig?: {
    auto?: boolean(name='Auto', example='true'),
    saveType?: string(name='SaveType', example='TEXT,FACE'),
    templateId?: string(name='TemplateId', example='S00000101-100070'),
  }(name='ContentAnalyzeConfig'),
  requestId?: string(name='RequestId', example='31FEC819-2344-5771-9366-9172DB0D26C9'),
}

model GetContentAnalyzeConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetContentAnalyzeConfigResponseBody(name='body'),
}

async function getContentAnalyzeConfig(request: GetContentAnalyzeConfigRequest): GetContentAnalyzeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetContentAnalyzeConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetCustomTemplateRequest {
  subtype?: int32(name='Subtype', example='1', position='Query'),
  templateId?: string(name='TemplateId', example='****96e8864746a0b6f3****', position='Query'),
  type?: int32(name='Type', example='1', position='Query'),
}

model GetCustomTemplateResponseBody = {
  customTemplate?: {
    createTime?: string(name='CreateTime', example='2022-01-01T10:00:00Z'),
    isDefault?: boolean(name='IsDefault', example='true'),
    modifiedTime?: string(name='ModifiedTime', example='2022-01-01T11:00:00Z'),
    status?: string(name='Status', example='Normal'),
    subtype?: int32(name='Subtype', example='1'),
    subtypeName?: string(name='SubtypeName', example='Normal'),
    templateConfig?: string(name='TemplateConfig', example='{"Type":"Normal","FrameType":"normal","Time":0,"Count":10}'),
    templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
    templateName?: string(name='TemplateName', example='测试转码模板'),
    type?: int32(name='Type', example='2'),
    typeName?: string(name='TypeName', example='SnapshotTemplate'),
  }(name='CustomTemplate'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetCustomTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCustomTemplateResponseBody(name='body'),
}

async function getCustomTemplate(request: GetCustomTemplateRequest): GetCustomTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCustomTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetCustomizedVoiceRequest {
  voiceId?: string(name='VoiceId', example='xiaozhuan', position='Query'),
}

model GetCustomizedVoiceResponseBody = {
  data?: {
    customizedVoice?: {
      demoAudioMediaId?: string(name='DemoAudioMediaId', example='****42d3c312402982be65975f5b****'),
      gender?: string(name='Gender', example='female'),
      scenario?: string(name='Scenario', example='interaction'),
      voiceDesc?: string(name='VoiceDesc'),
      voiceId?: string(name='VoiceId', example='xiaozhuan'),
      voiceName?: string(name='VoiceName'),
    }(name='CustomizedVoice'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
  success?: boolean(name='Success', example='true'),
}

model GetCustomizedVoiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCustomizedVoiceResponseBody(name='body'),
}

async function getCustomizedVoice(request: GetCustomizedVoiceRequest): GetCustomizedVoiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCustomizedVoice', 'POST', '/', 'json', false, 'json', request);
}

model GetCustomizedVoiceJobRequest {
  jobId: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model GetCustomizedVoiceJobResponseBody = {
  data?: {
    customizedVoiceJob?: {
      createTime?: string(name='CreateTime'),
      gender?: string(name='Gender'),
      jobId?: string(name='JobId', example='****571c704445f9a0ee011406c2****'),
      message?: string(name='Message'),
      scenario?: string(name='Scenario'),
      status?: string(name='Status', example='Fail'),
      type?: string(name='Type'),
      voiceDesc?: string(name='VoiceDesc'),
      voiceId?: string(name='VoiceId', example='xiaozhuan'),
      voiceName?: string(name='VoiceName'),
    }(name='CustomizedVoiceJob'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
  success?: boolean(name='Success', example='true'),
}

model GetCustomizedVoiceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCustomizedVoiceJobResponseBody(name='body'),
}

async function getCustomizedVoiceJob(request: GetCustomizedVoiceJobRequest): GetCustomizedVoiceJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCustomizedVoiceJob', 'POST', '/', 'json', false, 'json', request);
}

model GetDefaultStorageLocationRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model GetDefaultStorageLocationResponseBody = {
  bucket?: string(name='Bucket', example='oss-test-bucket'),
  path?: string(name='Path', example='ice/dir'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  status?: string(name='Status', example='normal'),
  storageType?: string(name='StorageType', example='user_oss_bucket'),
}

model GetDefaultStorageLocationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDefaultStorageLocationResponseBody(name='body'),
}

async function getDefaultStorageLocation(request: GetDefaultStorageLocationRequest): GetDefaultStorageLocationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDefaultStorageLocation', 'POST', '/', 'json', false, 'json', request);
}

model GetDemonstrationForCustomizedVoiceJobRequest {
  scenario: string(name='Scenario', example='story', position='Query'),
}

model GetDemonstrationForCustomizedVoiceJobResponseBody = {
  data?: {
    demonstrationList?: [ 
      {
        audioId?: int32(name='AudioId', example='2'),
        demoAudio?: string(name='DemoAudio', example='http://bucket.oss-cn-shanghai.aliyuncs.com/1.wav'),
        text?: string(name='Text'),
      }
    ](name='DemonstrationList'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model GetDemonstrationForCustomizedVoiceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDemonstrationForCustomizedVoiceJobResponseBody(name='body'),
}

async function getDemonstrationForCustomizedVoiceJob(request: GetDemonstrationForCustomizedVoiceJobRequest): GetDemonstrationForCustomizedVoiceJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDemonstrationForCustomizedVoiceJob', 'POST', '/', 'json', false, 'json', request);
}

model GetDynamicImageJobRequest {
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****', position='Query'),
}

model GetDynamicImageJobResponseBody = {
  dynamicImageJob?: {
    code?: string(name='Code', example='ResourceNotFound'),
    createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
    finishTime?: string(name='FinishTime', example='2022-07-12T16:30:54Z'),
    input?: {
      media?: string(name='Media', example='oss://test-bucket/sample-input.mp4'),
      ossFile?: {
        bucket?: string(name='Bucket', description='OSS Bucket', example='test-bucket'),
        location?: string(name='Location', description='OSS Location', example='oss-cn-shanghai'),
        object?: string(name='Object', description='OSS Object', example='sample-input.mp4'),
      }(name='OssFile'),
      type?: string(name='Type', example='OSS'),
    }(name='Input'),
    jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
    message?: string(name='Message', example='The specified resource for "CustomTemplate" could not be found.'),
    modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:30:54Z'),
    name?: string(name='Name', example='SampleJob'),
    output?: {
      media?: string(name='Media', example='****d80e4e4044975745c14b****'),
      ossFile?: {
        bucket?: string(name='Bucket', description='OSS Bucket', example='sample-bucket'),
        location?: string(name='Location', description='OSS Location', example='oss-cn-shanghai'),
        object?: string(name='Object', description='OSS Object', example='path/to/object'),
      }(name='OssFile'),
      type?: string(name='Type', example='Media'),
    }(name='Output'),
    outputUrl?: string(name='OutputUrl', example='http://test-bucket.oss-cn-shanghai.aliyuncs.com/output.gif'),
    pipelineId?: string(name='PipelineId', example='****d80e4e4044975745c14b****'),
    status?: string(name='Status', example='Success'),
    submitTime?: string(name='SubmitTime', example='2022-07-12T16:17:54Z'),
    templateConfig?: string(name='TemplateConfig', example='{"Format":"gif","Fps":5,"Height":1080,"Width":1920}'),
    templateId?: string(name='TemplateId', example='****d80e4e4044975745c14b****'),
    triggerSource?: string(name='TriggerSource', example='API'),
    userData?: string(name='UserData', example='{"sampleParam": "sampleValue"}'),
  }(name='DynamicImageJob'),
  requestId?: string(name='RequestId', example='******36-3C1E-4417-BDB2-1E034F******'),
}

model GetDynamicImageJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDynamicImageJobResponseBody(name='body'),
}

async function getDynamicImageJob(request: GetDynamicImageJobRequest): GetDynamicImageJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDynamicImageJob', 'POST', '/', 'json', false, 'json', request);
}

model GetEditingProjectRequest {
  regionId?: string(name='RegionId', position='Host'),
  projectId: string(name='ProjectId', example='****fb2101bf24b2754cb318787dc****', position='Query'),
  requestSource?: string(name='RequestSource', position='Query'),
}

model GetEditingProjectResponseBody = {
  project?: {
    businessConfig?: string(name='BusinessConfig', example='{ "OutputMediaConfig" : { "StorageLocation": "test-bucket.oss-cn-shanghai.aliyuncs.com", "Path": "test-path" }, "OutputMediaTarget": "oss-object", "ReservationTime": "2021-06-21T08:05:00Z" }'),
    businessStatus?: string(name='BusinessStatus', example='Reserving'),
    clipsParam?: string(name='ClipsParam'),
    coverURL?: string(name='CoverURL', example='oss://example-bucket/example.jpg'),
    createSource?: string(name='CreateSource', example='OpenAPI'),
    createTime?: string(name='CreateTime', example='2020-12-20T12:00:00Z'),
    description?: string(name='Description'),
    duration?: long(name='Duration', example='24.120000'),
    modifiedSource?: string(name='ModifiedSource', example='OpenAPI'),
    modifiedTime?: string(name='ModifiedTime', example='2020-12-20T13:00:00Z'),
    projectId?: string(name='ProjectId', example='****fb2101bf24b2754cb318787dc****'),
    projectType?: string(name='ProjectType', example='EditingProject'),
    status?: string(name='Status', example='Editing'),
    templateId?: string(name='TemplateId', example='****96e8864746a0b6f3****'),
    templateType?: string(name='TemplateType', example='Timeline'),
    timeline?: string(name='Timeline', example='{"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****9b4d7cf14dc7b83b0e801cbe****"},{"MediaId":"****9b4d7cf14dc7b83b0e801cbe****"},{"MediaId":"****1656bca4474999c961a6d2a2****"}]}]}'),
    timelineConvertErrorMessage?: string(name='TimelineConvertErrorMessage'),
    timelineConvertStatus?: string(name='TimelineConvertStatus'),
    title?: string(name='Title'),
  }(name='Project'),
  requestId?: string(name='RequestId', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
}

model GetEditingProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEditingProjectResponseBody(name='body'),
}

async function getEditingProject(request: GetEditingProjectRequest): GetEditingProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEditingProject', 'POST', '/', 'json', false, 'json', request);
}

model GetEditingProjectMaterialsRequest {
  regionId?: string(name='RegionId', position='Host'),
  projectId: string(name='ProjectId', example='*****fb2101cb318*****', position='Query'),
}

model GetEditingProjectMaterialsResponseBody = {
  liveMaterials?: [ 
    {
      appName?: string(name='AppName', example='testrecord'),
      domainName?: string(name='DomainName', example='test.alivecdn.com'),
      liveUrl?: string(name='LiveUrl', example='rtmp://test.alivecdn.com/testrecord/teststream'),
      streamName?: string(name='StreamName', example='testrecord'),
    }
  ](name='LiveMaterials'),
  mediaInfos?: [ 
    {
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', example='1132.68'),
            duration?: string(name='Duration', example='216.206667'),
            fileName?: string(name='FileName', example='example.mp4'),
            fileSize?: string(name='FileSize', example='30611502'),
            fileStatus?: string(name='FileStatus', example='Normal'),
            fileType?: string(name='FileType', example='source_file'),
            fileUrl?: string(name='FileUrl', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
            formatName?: string(name='FormatName', example='mov,mp4,m4a,3gp,3g2,mj2'),
            height?: string(name='Height', example='540'),
            region?: string(name='Region', example='cn-shanghai'),
            width?: string(name='Width', example='960'),
          }(name='FileBasicInfo'),
        }
      ](name='FileInfoList', description='FileInfos'),
      mediaBasicInfo?: {
        businessType?: string(name='BusinessType', example='general'),
        category?: string(name='Category', example='video'),
        coverURL?: string(name='CoverURL', example='http://sample-bucket.oss-cn-shanghai.aliyuncs.com/sample-corver.jpg?Expires=1628670610&OSSAccessKeyId=AK&Signature=signature'),
        createTime?: string(name='CreateTime', example='2020-12-26T04:11:08Z'),
        deletedTime?: string(name='DeletedTime', example='2020-12-26T04:11:08Z'),
        description?: string(name='Description', example='sample_description'),
        inputURL?: string(name='InputURL', example='http://bucket.oss-cn-shanghai.aliyuncs.com/file.mp4'),
        mediaId?: string(name='MediaId', description='MediaId', example='*****64623a94eca8516569c8f*****'),
        mediaTags?: string(name='MediaTags'),
        mediaType?: string(name='MediaType', example='video'),
        modifiedTime?: string(name='ModifiedTime', example='2020-12-26T04:11:08Z'),
        snapshots?: string(name='Snapshots', example='null'),
        source?: string(name='Source', example='oss'),
        spriteImages?: string(name='SpriteImages', example='null'),
        status?: string(name='Status', example='Normal'),
        title?: string(name='Title', example='file.mp4'),
        transcodeStatus?: string(name='TranscodeStatus', example='Init'),
        userData?: string(name='UserData', example='userData'),
      }(name='MediaBasicInfo', description='BasicInfo'),
      mediaId?: string(name='MediaId', example='*****64623a94eca8516569c8fe*****'),
    }
  ](name='MediaInfos'),
  projectId?: string(name='ProjectId', example='*****67ae06542b9b93e0d1c387*****'),
  projectMaterials?: [ string ](name='ProjectMaterials', example='*****9b145c5cafc2e057304fcd*****'),
  requestId?: string(name='RequestId', example='******89-C21D-4B78-AE24-3788B8******'),
}

model GetEditingProjectMaterialsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEditingProjectMaterialsResponseBody(name='body'),
}

async function getEditingProjectMaterials(request: GetEditingProjectMaterialsRequest): GetEditingProjectMaterialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEditingProjectMaterials', 'POST', '/', 'json', false, 'json', request);
}

model GetEventCallbackRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model GetEventCallbackResponseBody = {
  authKey?: string(name='AuthKey', example='TestKey001'),
  authSwitch?: string(name='AuthSwitch', example='on'),
  callbackQueueName?: string(name='CallbackQueueName', example='ice-callback-queue'),
  callbackType?: string(name='CallbackType', example='HTTP'),
  callbackURL?: string(name='CallbackURL', example='http://xxx.yyy/callback'),
  eventTypeList?: string(name='EventTypeList', example='ProduceMediaComplete,TranscodeComplete'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetEventCallbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEventCallbackResponseBody(name='body'),
}

async function getEventCallback(request: GetEventCallbackRequest): GetEventCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEventCallback', 'POST', '/', 'json', false, 'json', request);
}

model GetLiveEditingIndexFileRequest {
  appName?: string(name='AppName', example='testrecord', position='Query'),
  domainName?: string(name='DomainName', example='test.alivecdn.com', position='Query'),
  projectId?: string(name='ProjectId', example='*****cb6307a4edea614d8b3f3c*****', position='Query'),
  streamName?: string(name='StreamName', example='teststream', position='Query'),
}

model GetLiveEditingIndexFileResponseBody = {
  indexFile?: string(name='IndexFile'),
  requestId?: string(name='RequestId', example='4E84BE44-58A7-****-****-FBEBEA16EF94'),
}

model GetLiveEditingIndexFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLiveEditingIndexFileResponseBody(name='body'),
}

async function getLiveEditingIndexFile(request: GetLiveEditingIndexFileRequest): GetLiveEditingIndexFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveEditingIndexFile', 'POST', '/', 'json', false, 'json', request);
}

model GetLiveEditingJobRequest {
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****', position='Query'),
}

model GetLiveEditingJobResponseBody = {
  liveEditingJob?: {
    clips?: string(name='Clips', example='[{\\"StartTime\\": \\" 2021-06-21T08:01:00Z\\",  \\"EndTime\\": \\" 2021-06-21T08:03:00Z\\" }]'),
    code?: string(name='Code', example='InvalidParameter'),
    completeTime?: string(name='CompleteTime', example='2020-12-23T13:33:52Z'),
    creationTime?: string(name='CreationTime', example='2020-12-23T13:33:40Z'),
    jobId?: string(name='JobId', example='****cdb3e74639973036bc84****'),
    liveStreamConfig?: {
      appName?: string(name='AppName', example='app'),
      domainName?: string(name='DomainName', example='domain.com'),
      streamName?: string(name='StreamName', example='streamName'),
    }(name='LiveStreamConfig'),
    mediaId?: string(name='MediaId', example='****0cc6ba49eab379332c5b****'),
    mediaProduceConfig?: {
      mode?: string(name='Mode', example='Accurate'),
    }(name='MediaProduceConfig'),
    mediaURL?: string(name='MediaURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example2.mp4'),
    message?: string(name='Message', example='The specific parameter LiveStreamConfig is not valid.'),
    modifiedTime?: string(name='ModifiedTime', example='2020-12-23T13:33:49Z'),
    outputMediaConfig?: {
      bitrate?: long(name='Bitrate', example='1000'),
      fileName?: string(name='FileName', example='test.mp4'),
      height?: int32(name='Height', example='480'),
      mediaURL?: string(name='MediaURL', example='https://testice-testbucket.oss-cn-shanghai.aliyuncs.com/test.mp4'),
      storageLocation?: string(name='StorageLocation', example='outin-xxxxxx.oss-cn-shanghai.aliyuncs.com'),
      vodTemplateGroupId?: string(name='VodTemplateGroupId', example='VOD_NO_TRANSCODE'),
      width?: int32(name='Width', example='640'),
    }(name='OutputMediaConfig'),
    projectId?: string(name='ProjectId', example='****fddd7748b58bf1d47e95****'),
    status?: string(name='Status', example='Success'),
    userData?: string(name='UserData', example='{"key": "value\\"}'),
  }(name='LiveEditingJob'),
  requestId?: string(name='RequestId', example='****36-3C1E-4417-BDB2-1E034F****'),
}

model GetLiveEditingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLiveEditingJobResponseBody(name='body'),
}

async function getLiveEditingJob(request: GetLiveEditingJobRequest): GetLiveEditingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveEditingJob', 'POST', '/', 'json', false, 'json', request);
}

model GetLiveRecordJobRequest {
  jobId: string(name='JobId', example='ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66', position='Query'),
}

model GetLiveRecordJobResponseBody = {
  recordJob?: {
    createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段', example='2022-07-20T02:48:58Z'),
    jobId?: string(name='JobId', description='代表资源名称的资源属性字段', example='ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66'),
    name?: string(name='Name', description='代表资源名称的资源属性字段'),
    notifyUrl?: string(name='NotifyUrl', description='回调地址', example='https://example.com/imsnotify'),
    recordOutput?: {
      bucket?: string(name='Bucket', example='imsbucket1'),
      endpoint?: string(name='Endpoint', example='oss-cn-shanghai.aliyuncs.com'),
      type?: string(name='Type', example='oss'),
    }(name='RecordOutput'),
    status?: string(name='Status', description='代表资源名称的资源属性字段', example='paused'),
    streamInput?: {
      type?: string(name='Type', example='rtmp'),
      url?: string(name='Url', example='rtmp://example.com/app/stream'),
    }(name='StreamInput'),
    templateId?: string(name='TemplateId', description='录制模板ID', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66'),
    templateName?: string(name='TemplateName', description='录制模板ID', example='test template'),
  }(name='RecordJob', description='录制任务'),
  requestId?: string(name='RequestId', example='B57A046C-CE33-5FBB-B57A-D2B89ACF6907'),
}

model GetLiveRecordJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLiveRecordJobResponseBody(name='body'),
}

async function getLiveRecordJob(request: GetLiveRecordJobRequest): GetLiveRecordJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveRecordJob', 'GET', '/', 'json', false, 'json', request);
}

model GetLiveRecordTemplateRequest {
  jobId?: string(name='JobId', example='ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66', position='Query'),
  templateId: string(name='TemplateId', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66', position='Query'),
}

model GetLiveRecordTemplateResponseBody = {
  recordTemplate?: {
    createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段', example='2022-07-20T03:26:36Z'),
    lastModified?: string(name='LastModified', description='代表创建时间的资源属性字段', example='2022-07-20T03:26:36Z'),
    name?: string(name='Name', description='代表资源名称的资源属性字段', example='test template'),
    recordFormatList?: [ 
      {
        cycleDuration?: int32(name='CycleDuration', example='7200'),
        format?: string(name='Format', description='格式', example='m3u8'),
        ossObjectPrefix?: string(name='OssObjectPrefix', description='Oss对象名，不包含后缀', example='record/{JobId}/{Sequence}{EscapedStartTime}{EscapedEndTime}'),
        sliceDuration?: int32(name='SliceDuration', example='30'),
        sliceOssObjectPrefix?: string(name='SliceOssObjectPrefix', description='切片Oss对象名，不包含后缀', example='record/{JobId}/{UnixTimestamp}_{Sequence}'),
      }
    ](name='RecordFormatList', description='录制格式'),
    templateId?: string(name='TemplateId', description='代表资源一级ID的资源属性字段', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66'),
    type?: string(name='Type', description='代表资源名称的资源属性字段', example='custom'),
  }(name='RecordTemplate', description='录制模板'),
  requestId?: string(name='RequestId', example='C892855F-95DF-50D6-A28C-279ABDB76810'),
}

model GetLiveRecordTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLiveRecordTemplateResponseBody(name='body'),
}

async function getLiveRecordTemplate(request: GetLiveRecordTemplateRequest): GetLiveRecordTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveRecordTemplate', 'GET', '/', 'json', false, 'json', request);
}

model GetLiveSnapshotJobRequest {
  jobId: string(name='JobId', example='****a046-263c-3560-978a-fb287782****', position='Query'),
}

model GetLiveSnapshotJobResponseBody = {
  callbackUrl?: string(name='CallbackUrl', example='http://www.aliyun.com/snapshot/callback'),
  createTime?: string(name='CreateTime', example='2022-02-02T22:22:22Z'),
  jobId?: string(name='JobId', example='****a046-263c-3560-978a-fb287782****'),
  jobName?: string(name='JobName'),
  lastModified?: string(name='LastModified', example='2022-02-02T22:22:22Z'),
  overwriteFormat?: string(name='OverwriteFormat', example='snapshot/{JobId}.jpg'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  sequenceFormat?: string(name='SequenceFormat', example='snapshot/{JobId}/{UnixTimestamp}.jpg'),
  snapshotOutput?: {
    bucket?: string(name='Bucket', example='testbucket'),
    endpoint?: string(name='Endpoint', example='oss-cn-shanghai.aliyuncs.com'),
    storageType?: string(name='StorageType', example='oss'),
  }(name='SnapshotOutput'),
  status?: string(name='Status', example='started'),
  streamInput?: {
    type?: string(name='Type', example='rtmp'),
    url?: string(name='Url', example='rtmp://www.aliyun.com/stream'),
  }(name='StreamInput'),
  templateId?: string(name='TemplateId', example='****a046-263c-3560-978a-fb287666****'),
  templateName?: string(name='TemplateName'),
  timeInterval?: int32(name='TimeInterval', example='5'),
}

model GetLiveSnapshotJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLiveSnapshotJobResponseBody(name='body'),
}

async function getLiveSnapshotJob(request: GetLiveSnapshotJobRequest): GetLiveSnapshotJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveSnapshotJob', 'GET', '/', 'json', false, 'json', request);
}

model GetLiveSnapshotTemplateRequest {
  templateId: string(name='TemplateId', example='****a046-263c-3560-978a-fb287782****', position='Query'),
}

model GetLiveSnapshotTemplateResponseBody = {
  createTime?: string(name='CreateTime', example='2022-02-02T22:22:22Z'),
  lastModified?: string(name='LastModified', example='2022-02-02T22:22:22Z'),
  overwriteFormat?: string(name='OverwriteFormat', example='snapshot/{JobId}.jpg'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  sequenceFormat?: string(name='SequenceFormat', example='snapshot/{JobId}/{UnixTimestamp}.jpg'),
  templateId?: string(name='TemplateId', example='****a046-263c-3560-978a-fb287782****'),
  templateName?: string(name='TemplateName'),
  timeInterval?: int32(name='TimeInterval', example='5'),
  type?: string(name='Type', example='custom'),
}

model GetLiveSnapshotTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLiveSnapshotTemplateResponseBody(name='body'),
}

async function getLiveSnapshotTemplate(request: GetLiveSnapshotTemplateRequest): GetLiveSnapshotTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveSnapshotTemplate', 'GET', '/', 'json', false, 'json', request);
}

model GetLiveTranscodeJobRequest {
  jobId: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model GetLiveTranscodeJobResponseBody = {
  job?: {
    createTime?: string(name='CreateTime', example='2022-07-20T02:48:58Z'),
    jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
    name?: string(name='Name', example='task1'),
    outputStream?: {
      streamInfos?: [ 
        {
          outputUrl?: string(name='OutputUrl', example='rtmp://mydomain/app/mytranscode1'),
          type?: string(name='Type', example='rtmp'),
        }
      ](name='StreamInfos'),
    }(name='OutputStream'),
    startMode?: int32(name='StartMode', example='0'),
    status?: int32(name='Status', example='1'),
    streamInput?: {
      inputUrl?: string(name='InputUrl', example='rtmp://mydomain/app/stream1'),
      type?: string(name='Type', example='rtmp'),
    }(name='StreamInput'),
    templateId?: string(name='TemplateId', example='b6491d5b3e514b7d895d14b5453ea119'),
    templateName?: string(name='TemplateName', example='basic'),
    templateType?: string(name='TemplateType', example='normal'),
  }(name='Job'),
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
}

model GetLiveTranscodeJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLiveTranscodeJobResponseBody(name='body'),
}

async function getLiveTranscodeJob(request: GetLiveTranscodeJobRequest): GetLiveTranscodeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveTranscodeJob', 'POST', '/', 'json', false, 'json', request);
}

model GetLiveTranscodeTemplateRequest {
  templateId: string(name='TemplateId', example='****a046-263c-3560-978a-fb287666****', position='Query'),
}

model GetLiveTranscodeTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
  templateContent?: {
    category?: string(name='Category', example='customized'),
    createTime?: string(name='CreateTime', example='2022-07-25T06:15:14Z'),
    name?: string(name='Name', example='my-template'),
    templateConfig?: {
      audioParams?: {
        bitrate?: string(name='Bitrate', example='1000'),
        channels?: string(name='Channels', example='2'),
        codec?: string(name='Codec', example='AAC'),
        profile?: string(name='Profile', example='1'),
        samplerate?: string(name='Samplerate', example='44100'),
      }(name='AudioParams'),
      videoParams?: {
        bitrate?: string(name='Bitrate', example='2500'),
        codec?: string(name='Codec', example='H.264'),
        fps?: string(name='Fps', example='30'),
        gop?: string(name='Gop', example='1000'),
        height?: string(name='Height', example='720'),
        profile?: string(name='Profile', example='2'),
        width?: string(name='Width', example='1280'),
      }(name='VideoParams'),
    }(name='TemplateConfig'),
    templateId?: string(name='TemplateId', example='bcfa57950bc649b2abfb476ecd36ea4f'),
    type?: string(name='Type', example='normal'),
  }(name='TemplateContent'),
}

model GetLiveTranscodeTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLiveTranscodeTemplateResponseBody(name='body'),
}

async function getLiveTranscodeTemplate(request: GetLiveTranscodeTemplateRequest): GetLiveTranscodeTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveTranscodeTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetMediaInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  inputURL?: string(name='InputURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4', position='Query'),
  mediaId?: string(name='MediaId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  outputType?: string(name='OutputType', example='cdn', position='Query'),
  returnDetailedInfo?: string(name='ReturnDetailedInfo', position='Query'),
}

model GetMediaInfoResponseBody = {
  mediaInfo?: {
    aiRoughData?: {
      aiCategory?: string(name='AiCategory'),
      aiJobId?: string(name='AiJobId', example='****483915d4f2cd8ac20b48fb04****'),
      result?: string(name='Result', example='https://sample-bucket.cn-shanghai.aliyuncs.com/result.json'),
      saveType?: string(name='SaveType', example='TEXT'),
      standardSmartTagJob?: {
        aiJobId?: string(name='AiJobId'),
        resultUrl?: string(name='ResultUrl'),
        results?: [ 
          {
            data?: string(name='Data'),
            type?: string(name='Type'),
          }
        ](name='Results'),
        status?: string(name='Status'),
      }(name='StandardSmartTagJob'),
      status?: string(name='Status', example='Analyzing'),
    }(name='AiRoughData'),
    fileInfoList?: [ 
      {
        audioStreamInfoList?: [ 
          {
            bitrate?: string(name='Bitrate', example='127.794'),
            channelLayout?: string(name='ChannelLayout', example='stereo'),
            channels?: string(name='Channels', example='2'),
            codecLongName?: string(name='CodecLongName', example='AAC (Advanced Audio Coding)'),
            codecName?: string(name='CodecName', example='aac'),
            codecTag?: string(name='CodecTag', example='0x6134706d'),
            codecTagString?: string(name='CodecTagString', example='mp4a'),
            codecTimeBase?: string(name='CodecTimeBase', example='1/24000'),
            duration?: string(name='Duration', example='16.200998'),
            fps?: string(name='Fps', example='8'),
            index?: string(name='Index', example='1'),
            lang?: string(name='Lang', example='und'),
            numFrames?: string(name='NumFrames', example='10'),
            profile?: string(name='Profile', example='High'),
            sampleFmt?: string(name='SampleFmt', example='fltp'),
            sampleRate?: string(name='SampleRate', example='44100'),
            startTime?: string(name='StartTime', example='0.000000'),
            timebase?: string(name='Timebase', example='1/44100'),
          }
        ](name='AudioStreamInfoList'),
        fileBasicInfo?: {
          bitrate?: string(name='Bitrate', example='1132.68'),
          createTime?: string(name='CreateTime', example='2020-12-26T04:11:08Z'),
          duration?: string(name='Duration', example='216.206667'),
          fileName?: string(name='FileName', example='example.mp4'),
          fileSize?: string(name='FileSize', example='30611502'),
          fileStatus?: string(name='FileStatus', example='Normal'),
          fileType?: string(name='FileType', example='source_file'),
          fileUrl?: string(name='FileUrl', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
          formatName?: string(name='FormatName', example='mov,mp4,m4a,3gp,3g2,mj2'),
          height?: string(name='Height', example='540'),
          modifiedTime?: string(name='ModifiedTime', example='2020-12-26T04:11:10Z'),
          region?: string(name='Region', example='cn-shanghai'),
          width?: string(name='Width', example='960'),
        }(name='FileBasicInfo'),
        subtitleStreamInfoList?: [ 
          {
            codecLongName?: string(name='CodecLongName', example='SubRip Text'),
            codecName?: string(name='CodecName', example='srt'),
            codecTag?: string(name='CodecTag', example='unicode'),
            codecTagString?: string(name='CodecTagString', example='unicode'),
            codecTimeBase?: string(name='CodecTimeBase', example='29.97'),
            duration?: string(name='Duration', example='1'),
            index?: string(name='Index', example='1'),
            lang?: string(name='Lang', example='und'),
            startTime?: string(name='StartTime', example='0'),
            timebase?: string(name='Timebase', example='30'),
          }
        ](name='SubtitleStreamInfoList'),
        videoStreamInfoList?: [ 
          {
            avgFPS?: string(name='AvgFPS', example='24.0'),
            bitrate?: string(name='Bitrate', example='1001.594'),
            codecLongName?: string(name='CodecLongName', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
            codecName?: string(name='CodecName', example='h264'),
            codecTag?: string(name='CodecTag', example='0x0000'),
            codecTagString?: string(name='CodecTagString', example='[0][0][0][0]'),
            codecTimeBase?: string(name='CodecTimeBase', example='1/48'),
            dar?: string(name='Dar', example='0:1'),
            duration?: string(name='Duration', example='216.206706'),
            fps?: string(name='Fps', example='24.0'),
            hasBFrames?: string(name='HasBFrames', example='2'),
            height?: string(name='Height', example='540'),
            index?: string(name='Index', example='0'),
            lang?: string(name='Lang', example='und'),
            level?: string(name='Level', example='30'),
            nbFrames?: string(name='Nb_frames', example='5184'),
            numFrames?: string(name='NumFrames', example='5184'),
            pixFmt?: string(name='PixFmt', example='yuv420p'),
            profile?: string(name='Profile', example='High'),
            rotate?: string(name='Rotate', example='0'),
            sar?: string(name='Sar', example='0:1'),
            startTime?: string(name='StartTime', example='0.081706'),
            timebase?: string(name='Timebase', example='1/12288'),
            width?: string(name='Width', example='960'),
          }
        ](name='VideoStreamInfoList'),
      }
    ](name='FileInfoList'),
    mediaBasicInfo?: {
      biz?: string(name='Biz', example='ICE'),
      businessType?: string(name='BusinessType', example='general'),
      cateId?: long(name='CateId', example='3048'),
      cateName?: string(name='CateName', example='cateName'),
      category?: string(name='Category'),
      coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
      createTime?: string(name='CreateTime', example='2020-12-26T04:11:08Z'),
      deletedTime?: string(name='DeletedTime', example='2020-12-26T04:11:15Z'),
      description?: string(name='Description'),
      inputURL?: string(name='InputURL', example='https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4'),
      mediaId?: string(name='MediaId', description='MediaId', example='****20b48fb04483915d4f2cd8ac****'),
      mediaTags?: string(name='MediaTags'),
      mediaType?: string(name='MediaType', example='video'),
      modifiedTime?: string(name='ModifiedTime', example='2020-12-26T04:11:10Z'),
      referenceId?: string(name='ReferenceId', example='123-1234'),
      source?: string(name='Source', example='oss'),
      spriteImages?: string(name='SpriteImages', example='[{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]'),
      status?: string(name='Status', example='Normal'),
      title?: string(name='Title'),
      uploadSource?: string(name='UploadSource', example='general'),
      userData?: string(name='UserData', example='userDataTest'),
    }(name='MediaBasicInfo', description='BasicInfo'),
    mediaId?: string(name='MediaId', example='****20b48fb04483915d4f2cd8ac****'),
  }(name='MediaInfo'),
  requestId?: string(name='RequestId', example='2FDE2411-DB8D-4A9A-875B-275798F14A5E'),
}

model GetMediaInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMediaInfoResponseBody(name='body'),
}

async function getMediaInfo(request: GetMediaInfoRequest): GetMediaInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMediaInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetMediaInfoJobRequest {
  jobId?: string(name='JobId', example='ab4802364a2e49208c99efab82dfa8e8', position='Query'),
}

model GetMediaInfoJobResponseBody = {
  mediaInfoJob?: {
    async?: boolean(name='Async', example='true'),
    finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
    input?: {
      media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
      type?: string(name='Type', example='OSS'),
    }(name='Input'),
    jobId?: string(name='JobId', example='ab4802364a2e49208c99efab82dfa8e8'),
    mediaInfoProperty?: {
      audioStreamInfoList?: [ 
        {
          bitrate?: string(name='Bitrate', example='0.f'),
          channelLayout?: string(name='ChannelLayout', example='stereo'),
          channels?: string(name='Channels', example='2'),
          codecLongName?: string(name='CodecLongName', example='AAC (Advanced Audio Coding)'),
          codecName?: string(name='CodecName', example='aac'),
          codecTag?: string(name='CodecTag', example='0x000f'),
          codecTagString?: string(name='CodecTagString', example='[15][0][0][0]'),
          codecTimeBase?: string(name='CodecTimeBase', example='1/44100'),
          duration?: string(name='Duration', example='403.039989'),
          index?: string(name='Index', example='1'),
          lang?: string(name='Lang', example='us'),
          sampleFmt?: string(name='SampleFmt', example='fltp'),
          sampleRate?: string(name='SampleRate', example='44100'),
          startTime?: string(name='StartTime', example='1.473556'),
          timebase?: string(name='Timebase', example='1/90000'),
        }
      ](name='AudioStreamInfoList'),
      fileBasicInfo?: {
        bitrate?: string(name='Bitrate', example='888.563'),
        duration?: string(name='Duration', example='403.039999'),
        fileName?: string(name='FileName', example='file.m3u8'),
        fileSize?: string(name='FileSize', example='31737'),
        fileStatus?: string(name='FileStatus', example='Normal'),
        fileType?: string(name='FileType', example='source_file'),
        fileUrl?: string(name='FileUrl', example='http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8'),
        formatName?: string(name='FormatName', example='hls,applehttp'),
        height?: string(name='Height', example='478'),
        mediaId?: string(name='MediaId', example='e520090207114cc7a392d44f0b211574'),
        region?: string(name='Region', example='cn-shanghai'),
        width?: string(name='Width', example='848'),
      }(name='FileBasicInfo'),
      videoStreamInfoList?: [ 
        {
          avgFps?: string(name='Avg_fps', example='25.0'),
          bitRate?: string(name='Bit_rate', example='888.563'),
          codecLongName?: string(name='Codec_long_name', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
          codecName?: string(name='Codec_name', example='h264'),
          codecTag?: string(name='Codec_tag', example='0x001b'),
          codecTagString?: string(name='Codec_tag_string', example='[27][0][0][0]'),
          codecTimeBase?: string(name='Codec_time_base', example='1/50'),
          dar?: string(name='Dar', example='16:9'),
          duration?: string(name='Duration', example='403.039989'),
          fps?: string(name='Fps', example='25.0'),
          hasBFrames?: string(name='Has_b_frames', example='2'),
          height?: string(name='Height', example='478'),
          index?: string(name='Index', example='0'),
          lang?: string(name='Lang', example='zh'),
          level?: string(name='Level', example='31'),
          numFrames?: string(name='NumFrames', example='10040'),
          pixFmt?: string(name='PixFmt', example='yuv420p'),
          profile?: string(name='Profile', example='High'),
          rotate?: string(name='Rotate', example='0'),
          sar?: string(name='Sar', example='478:477'),
          startTime?: string(name='Start_time', example='1.473556'),
          timeBase?: string(name='Time_base', example='1/90000'),
          width?: string(name='Width', example='848'),
        }
      ](name='VideoStreamInfoList'),
    }(name='MediaInfoProperty'),
    name?: string(name='Name', example='job-name'),
    requestId?: string(name='RequestId', example='4879B9DE-E4B6-19DC-91F5-9D5F4DCE4168'),
    scheduleConfig?: {
      pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
      priority?: int32(name='Priority', example='5'),
    }(name='ScheduleConfig'),
    status?: string(name='Status', example='Init'),
    submitResultJson?: map[string]any(name='SubmitResultJson'),
    submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
    triggerSource?: string(name='TriggerSource', example='API'),
    userData?: string(name='UserData', example='user-data'),
  }(name='MediaInfoJob', description='MediaInfoJobDTO'),
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model GetMediaInfoJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMediaInfoJobResponseBody(name='body'),
}

async function getMediaInfoJob(request: GetMediaInfoJobRequest): GetMediaInfoJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMediaInfoJob', 'POST', '/', 'json', false, 'json', request);
}

model GetMediaMarksRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaId?: string(name='MediaId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  mediaMarkIds?: string(name='MediaMarkIds', example='mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60', position='Query'),
}

model GetMediaMarksResponseBody = {
  mediaId?: string(name='MediaId', example='****20b48fb04483915d4f2cd8ac****'),
  mediaMarks?: string(name='MediaMarks'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetMediaMarksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMediaMarksResponseBody(name='body'),
}

async function getMediaMarks(request: GetMediaMarksRequest): GetMediaMarksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMediaMarks', 'POST', '/', 'json', false, 'json', request);
}

model GetMediaProducingJobRequest {
  jobId?: string(name='JobId', example='****cdb3e74639973036bc84****', position='Query'),
}

model GetMediaProducingJobResponseBody = {
  mediaProducingJob?: {
    clipsParam?: string(name='ClipsParam', example='{"VideoArray":["****05512043f49f697f7425****","****05512043f49f697f7425****","****05512043f49f697f7425****"]}'),
    code?: string(name='Code', example='ExceededMaximumValue'),
    completeTime?: string(name='CompleteTime', example='2020-12-23T13:33:52Z'),
    createTime?: string(name='CreateTime', example='2020-12-23T13:33:40Z'),
    duration?: float(name='Duration', example='30.500000'),
    jobId?: string(name='JobId', example='****cdb3e74639973036bc84****'),
    mediaId?: string(name='MediaId', example='****0cc6ba49eab379332c5b****'),
    mediaURL?: string(name='MediaURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example2.mp4'),
    message?: string(name='Message', example='The specified "Width_Height" has exceeded maximum value.'),
    modifiedTime?: string(name='ModifiedTime', example='2020-12-23T13:33:49Z'),
    projectId?: string(name='ProjectId', example='****fddd7748b58bf1d47e95****'),
    status?: string(name='Status', example='Failed'),
    subJobMaterials?: string(name='SubJobMaterials'),
    templateId?: string(name='TemplateId', example='****6e76134d739cc3e85d3e****'),
    timeline?: string(name='Timeline', example='{"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****4d7cf14dc7b83b0e801c****"},{"MediaId":"****4d7cf14dc7b83b0e801c****"}]}]}'),
    userData?: string(name='UserData'),
    vodMediaId?: string(name='VodMediaId', example='****332c5b0cc6ba49eab379****'),
  }(name='MediaProducingJob'),
  requestId?: string(name='RequestId', example='****83B7-7F87-4792-BFE9-63CD2137****'),
}

model GetMediaProducingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMediaProducingJobResponseBody(name='body'),
}

async function getMediaProducingJob(request: GetMediaProducingJobRequest): GetMediaProducingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMediaProducingJob', 'GET', '/', 'json', false, 'json', request);
}

model GetPackageJobRequest {
  jobId: string(name='JobId', example='ab4802364a2e49208c99efab82dfa8e8', position='Query'),
}

model GetPackageJobResponseBody = {
  packageJob?: {
    code?: string(name='Code', example='InvalidParameter'),
    createTime?: string(name='CreateTime', example='2022-09-08T11:34:05Z'),
    finishTime?: string(name='FinishTime', example='2022-09-08T11:44:05Z'),
    inputs?: [ 
      {
        input?: {
          media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
          type?: string(name='Type', example='OSS'),
        }(name='Input'),
      }
    ](name='Inputs'),
    jobId?: string(name='JobId', example='ab4802364a2e49208c99efab82dfa8e8'),
    message?: string(name='Message', example='Resource content bad.'),
    modifiedTime?: string(name='ModifiedTime', example='2022-09-08T11:44:05Z'),
    name?: string(name='Name', example='job-name'),
    output?: {
      media?: string(name='Media', example='oss://bucket/path/to/video.m3u8'),
      type?: string(name='Type', example='OSS'),
    }(name='Output'),
    outputUrl?: string(name='OutputUrl', example='http://bucket.oss-cn-shanghai.aliyuncs.com/output.m3u8'),
    pipelineId?: string(name='PipelineId', example='36f3fee40aa047c0b067d0fb85edc12b'),
    priority?: int32(name='Priority', example='6'),
    status?: string(name='Status', example='Init'),
    submitTime?: string(name='SubmitTime', example='2022-09-08T11:34:05Z'),
    triggerSource?: string(name='TriggerSource'),
    userData?: string(name='UserData', example='{"param": "value"}'),
  }(name='PackageJob'),
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model GetPackageJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPackageJobResponseBody(name='body'),
}

async function getPackageJob(request: GetPackageJobRequest): GetPackageJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPackageJob', 'POST', '/', 'json', false, 'json', request);
}

model GetPipelineRequest {
  pipelineId: string(name='PipelineId', example='****96e8864746a0b6f3****', position='Query'),
}

model GetPipelineResponseBody = {
  pipeline?: {
    createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
    modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:17:54Z'),
    name?: string(name='Name', example='test-pipeline'),
    pipelineId?: string(name='PipelineId', example='****20b48fb04483915d4f2cd8ac****'),
    priority?: int32(name='Priority', example='6'),
    speed?: string(name='Speed', example='Standard'),
    status?: string(name='Status', example='Active'),
  }(name='Pipeline'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetPipelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPipelineResponseBody(name='body'),
}

async function getPipeline(request: GetPipelineRequest): GetPipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPipeline', 'POST', '/', 'json', false, 'json', request);
}

model GetPlayInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  inputURL?: string(name='InputURL', position='Query'),
  mediaId?: string(name='MediaId', example='86434e152b7d4f20be480574439fe***', position='Query'),
}

model GetPlayInfoResponseBody = {
  mediaBase?: {
    cateId?: long(name='CateId'),
    coverURL?: string(name='CoverURL', example='https://***.oss-cn-shanghai.aliyuncs.com/cover/281c64d6-b5fb-4c57-97cd-84da56a8b151_large_cover_url.jpg'),
    creationTime?: string(name='CreationTime', example='2021-09-22T10:07:31+08:00'),
    description?: string(name='Description'),
    mediaId?: string(name='MediaId', example='2eea77a61c7b4ddd95bec34a6f65b***'),
    mediaTags?: string(name='MediaTags'),
    mediaType?: string(name='MediaType', example='video'),
    status?: string(name='Status', example='Normal'),
    title?: string(name='Title', example='testTitle'),
  }(name='MediaBase'),
  playInfoList?: [ 
    {
      bitDepth?: int32(name='BitDepth', example='8'),
      bitrate?: string(name='Bitrate', example='20'),
      creationTime?: string(name='CreationTime', example='2022-05-10T02:28:49Z'),
      definition?: string(name='Definition', example='HD'),
      duration?: string(name='Duration', example='9.0464'),
      encrypt?: long(name='Encrypt', example='0'),
      encryptType?: string(name='EncryptType', example='AliyunVoDEncryption'),
      fileURL?: string(name='FileURL', example='http://outin-***.oss-cn-shanghai.aliyuncs.com/sv/43a68ee9-181809b6aba/43a68ee9-181809b6aba.mpeg'),
      format?: string(name='Format', example='mp4'),
      fps?: string(name='Fps', example='25'),
      HDRType?: string(name='HDRType', example='HDR'),
      height?: long(name='Height', example='1080'),
      jobId?: string(name='JobId', example='36c9d38e70bf43ed9f7f8f48d6356***'),
      modificationTime?: string(name='ModificationTime', example='2022-05-13T11:39:41.714+08:00'),
      narrowBandType?: string(name='NarrowBandType', example='0'),
      playURL?: string(name='PlayURL', example='https://***.aliyuncdn.com/sv/756bee1-17f980f0945/756bee1-17f980f0945.mp4'),
      size?: long(name='Size', example='418112'),
      status?: string(name='Status', example='Normal'),
      streamTags?: string(name='StreamTags', example='"{\\"ims.audioServiceType\\": \\"AudioEnhancement\\"}"'),
      streamType?: string(name='StreamType', example='video'),
      transTemplateType?: string(name='TransTemplateType', example='Normal'),
      watermarkId?: string(name='WatermarkId', example='5bed88672b1e2520ead228935ed51***'),
      width?: long(name='Width', example='1024'),
    }
  ](name='PlayInfoList'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetPlayInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPlayInfoResponseBody(name='body'),
}

async function getPlayInfo(request: GetPlayInfoRequest): GetPlayInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPlayInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetPublicMediaInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaId?: string(name='MediaId', example='icepublic-****14e501538aeef0a3140176f6****', position='Query'),
}

model GetPublicMediaInfoResponseBody = {
  mediaInfo?: {
    dynamicMetaData?: {
      data?: string(name='Data', example='{"AuditionUrl": "http://example-bucket.cdn.domain.com/example.mp4", "AuditionCount": 3}'),
      type?: string(name='Type', example='system'),
    }(name='DynamicMetaData'),
    fileInfoList?: [ 
      {
        audioStreamInfoList?: [ 
          {
            bitrate?: string(name='Bitrate', example='192.0'),
            channelLayout?: string(name='ChannelLayout', example='stereo'),
            channels?: string(name='Channels', example='2'),
            codecLongName?: string(name='CodecLongName', example='AAC (Advanced Audio Coding)'),
            codecName?: string(name='CodecName', example='aac'),
            codecTag?: string(name='CodecTag', example='0x6134706d'),
            codecTagString?: string(name='CodecTagString', example='mp4a'),
            codecTimeBase?: string(name='CodecTimeBase', example='1/44100'),
            duration?: string(name='Duration', example='16.2'),
            fps?: string(name='Fps', example='10'),
            index?: string(name='Index', example='1'),
            lang?: string(name='Lang', example='und'),
            numFrames?: string(name='NumFrames', example='162'),
            profile?: string(name='Profile', example='High'),
            sampleFmt?: string(name='SampleFmt', example='fltp'),
            sampleRate?: string(name='SampleRate', example='44100'),
            startTime?: string(name='StartTime', example='0.000000'),
            timebase?: string(name='Timebase', example='1/44100'),
          }
        ](name='AudioStreamInfoList'),
        fileBasicInfo?: {
          bitrate?: string(name='Bitrate', example='192.0'),
          duration?: string(name='Duration', example='16.2'),
          fileName?: string(name='FileName', example='example.mp4'),
          fileSize?: string(name='FileSize', example='27007'),
          fileStatus?: string(name='FileStatus', example='Normal'),
          fileType?: string(name='FileType', example='source_file'),
          fileUrl?: string(name='FileUrl', example='http://example-bucket.cdn.domain.com/example.mp4'),
          formatName?: string(name='FormatName', example='mp4'),
          height?: string(name='Height', example='0'),
          region?: string(name='Region', example='cn-shanghai'),
          width?: string(name='Width', example='0'),
        }(name='FileBasicInfo'),
        subtitleStreamInfoList?: [ 
          {
            codecLongName?: string(name='CodecLongName', example='SubRip Text'),
            codecName?: string(name='CodecName', example='srt'),
            codecTag?: string(name='CodecTag', example='unicode'),
            codecTagString?: string(name='CodecTagString', example='unicode'),
            codecTimeBase?: string(name='CodecTimeBase', example='29.97'),
            duration?: string(name='Duration', example='1'),
            index?: string(name='Index', example='1'),
            lang?: string(name='Lang', example='und'),
            startTime?: string(name='StartTime', example='0'),
            timebase?: string(name='Timebase', example='30'),
          }
        ](name='SubtitleStreamInfoList'),
        videoStreamInfoList?: [ 
          {
            avgFPS?: string(name='AvgFPS', example='24.0'),
            bitrate?: string(name='Bitrate', example='1001.594'),
            codecLongName?: string(name='CodecLongName', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
            codecName?: string(name='CodecName', example='h264'),
            codecTag?: string(name='CodecTag', example='0x0000'),
            codecTagString?: string(name='CodecTagString', example='[0][0][0][0]'),
            codecTimeBase?: string(name='CodecTimeBase', example='1/48'),
            dar?: string(name='Dar', example='0:1'),
            duration?: string(name='Duration', example='216.206706'),
            fps?: string(name='Fps', example='24.0'),
            hasBFrames?: string(name='HasBFrames', example='2'),
            height?: string(name='Height', example='540'),
            index?: string(name='Index', example='0'),
            lang?: string(name='Lang', example='und'),
            level?: string(name='Level', example='30'),
            nbFrames?: string(name='Nb_frames', example='5184'),
            numFrames?: string(name='NumFrames', example='5184'),
            pixFmt?: string(name='PixFmt', example='yuv420p'),
            profile?: string(name='Profile', example='High'),
            rotate?: string(name='Rotate', example='0'),
            sar?: string(name='Sar', example='0:1'),
            startTime?: string(name='StartTime', example='0.081706'),
            timebase?: string(name='Timebase', example='1/12288'),
            width?: string(name='Width', example='960'),
          }
        ](name='VideoStreamInfoList'),
      }
    ](name='FileInfoList', description='FileInfos'),
    mediaBasicInfo?: {
      businessType?: string(name='BusinessType', example='general'),
      category?: string(name='Category', example='category'),
      coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
      createTime?: string(name='CreateTime', example='2020-12-26T04:11:08Z'),
      deletedTime?: string(name='DeletedTime', example='2020-12-26T04:11:15Z'),
      description?: string(name='Description', example='description'),
      mediaId?: string(name='MediaId', description='MediaId', example='icepublic-****14e501538aeef0a3140176f6****'),
      mediaTags?: string(name='MediaTags'),
      mediaType?: string(name='MediaType', example='video'),
      modifiedTime?: string(name='ModifiedTime', example='2020-12-26T04:11:10Z'),
      source?: string(name='Source', example='oss'),
      spriteImages?: string(name='SpriteImages', example='[{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]'),
      status?: string(name='Status', example='Normal'),
      title?: string(name='Title', example='title'),
      userData?: string(name='UserData', example='{"key":"value"}'),
    }(name='MediaBasicInfo', description='BasicInfo'),
    mediaId?: string(name='MediaId', example='icepublic-****14e501538aeef0a3140176f6****'),
  }(name='MediaInfo'),
  requestId?: string(name='RequestId', description='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetPublicMediaInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPublicMediaInfoResponseBody(name='body'),
}

async function getPublicMediaInfo(request: GetPublicMediaInfoRequest): GetPublicMediaInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPublicMediaInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetSmartHandleJobRequest {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model GetSmartHandleJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  jobResult?: {
    aiResult?: string(name='AiResult', description='智能分析结果', example='拆条或智能标签信息'),
    mediaId?: string(name='MediaId', description='媒资Id', example='****20b48fb04483915d4f2cd8ac****'),
    usage?: string(name='Usage'),
  }(name='JobResult'),
  output?: string(name='Output', example='{}'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  smartJobInfo?: {
    createTime?: string(name='CreateTime', example='2020-12-26T04:11:10Z'),
    description?: string(name='Description', example='测试描述'),
    inputConfig?: {
      inputFile?: string(name='InputFile', example='oss://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4 或 ******11-DB8D-4A9A-875B-275798******'),
    }(name='InputConfig'),
    jobType?: string(name='JobType', example='ASR'),
    modifiedTime?: string(name='ModifiedTime', example='2020-12-26T04:11:10Z'),
    outputConfig?: {
      bucket?: string(name='Bucket', description='OSS Bucket', example='test-bucket'),
      object?: string(name='Object', description='OSS Object', example='test-object'),
    }(name='OutputConfig'),
    title?: string(name='Title', example='测试标题'),
    userId?: string(name='UserId', description='userid。', example='1974526429******'),
  }(name='SmartJobInfo'),
  state?: string(name='State', example='Finished'),
  userData?: string(name='UserData', example='{"user":"data"}'),
}

model GetSmartHandleJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSmartHandleJobResponseBody(name='body'),
}

async function getSmartHandleJob(request: GetSmartHandleJobRequest): GetSmartHandleJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSmartHandleJob', 'POST', '/', 'json', false, 'json', request);
}

model GetSnapshotJobRequest {
  jobId: string(name='JobId', example='****d80e4e4044975745c14b****', position='Query'),
}

model GetSnapshotJobResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  snapshotJob?: {
    async?: boolean(name='Async', example='true'),
    code?: string(name='Code', example='ResourceNotFound'),
    count?: int32(name='Count', example='8'),
    createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
    finishTime?: string(name='FinishTime', example='2022-07-12T16:30:54Z'),
    input?: {
      media?: string(name='Media', example='oss://test-bucket/object.mp4'),
      ossFile?: {
        bucket?: string(name='Bucket', description='OSS Bucket', example='test-bucket'),
        location?: string(name='Location', description='OSS Location', example='oss-cn-shanghai'),
        object?: string(name='Object', description='OSS Object', example='object.mp4'),
      }(name='OssFile'),
      type?: string(name='Type', example='OSS'),
    }(name='Input'),
    jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
    message?: string(name='Message', example='The specified resource for "Pipeline" could not be found.'),
    modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:30:54Z'),
    name?: string(name='Name'),
    output?: {
      media?: string(name='Media', example='http://test-bucket.oss-cn-shanghai.aliyuncs.com/output-{Count}.jpg'),
      ossFile?: {
        bucket?: string(name='Bucket', description='OSS Bucket', example='test-bucket'),
        location?: string(name='Location', description='OSS Location', example='oss-cn-shanghai'),
        object?: string(name='Object', description='OSS Object', example='output-{Count}.jpg'),
      }(name='OssFile'),
      type?: string(name='Type', example='OSS'),
    }(name='Output'),
    pipelineId?: string(name='PipelineId', example='****d80e4e4044975745c14b****'),
    status?: string(name='Status', example='Success'),
    submitTime?: string(name='SubmitTime', example='2022-07-12T16:17:54Z'),
    templateConfig?: string(name='TemplateConfig', example='{"Type":"Normal","FrameType":"normal","Time":0,"Count":10}'),
    templateId?: string(name='TemplateId', example='****d80e4e4044975745c14b****'),
    triggerSource?: string(name='TriggerSource', example='API'),
    type?: string(name='Type', example='Sprite'),
    userData?: string(name='UserData', example='{"test parameter": "test value"}'),
  }(name='SnapshotJob'),
}

model GetSnapshotJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSnapshotJobResponseBody(name='body'),
}

async function getSnapshotJob(request: GetSnapshotJobRequest): GetSnapshotJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSnapshotJob', 'POST', '/', 'json', false, 'json', request);
}

model GetSnapshotUrlsRequest {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  orderBy?: string(name='OrderBy', example='Asc', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  timeout?: long(name='Timeout', example='3600', position='Query'),
}

model GetSnapshotUrlsResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  snapshotUrls?: [ string ](name='SnapshotUrls'),
  total?: int32(name='Total', example='30'),
  webVTTUrl?: string(name='WebVTTUrl', example='http://test-bucket.oss-cn-shanghai.aliyuncs.com/ouoput.vtt'),
}

model GetSnapshotUrlsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSnapshotUrlsResponseBody(name='body'),
}

async function getSnapshotUrls(request: GetSnapshotUrlsRequest): GetSnapshotUrlsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSnapshotUrls', 'POST', '/', 'json', false, 'json', request);
}

model GetSystemTemplateRequest {
  templateId: string(name='TemplateId', example='S00000001-100060', position='Query'),
}

model GetSystemTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  systemTemplate?: {
    status?: string(name='Status', example='Normal'),
    subtype?: int32(name='Subtype', example='1'),
    subtypeName?: string(name='SubtypeName', example='Normal'),
    templateConfig?: string(name='TemplateConfig', example='{"Container":{"Format":"m3u8"},"TransConfig":{"TransMode":"onepass"},"Video":{"Codec":"H.264","Maxrate":8000,"Preset":"medium","PixFmt":"yuv420p","Width":2048,"Bitrate":3500},"Audio":{"Codec":"aac","Bitrate":160,"Samplerate":44100,"Channels":2}}'),
    templateId?: string(name='TemplateId', example='S00000001-100060'),
    templateName?: string(name='TemplateName', example='M3U8-2K'),
    type?: int32(name='Type', example='1'),
    typeName?: string(name='TypeName', example='TranscodeTemplate'),
  }(name='SystemTemplate'),
}

model GetSystemTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSystemTemplateResponseBody(name='body'),
}

async function getSystemTemplate(request: GetSystemTemplateRequest): GetSystemTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSystemTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetTemplateRequest {
  relatedMediaidFlag?: string(name='RelatedMediaidFlag', example='0', position='Query'),
  templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model GetTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  template?: {
    clipsParam?: string(name='ClipsParam', example='{"Media1":"mediaId","Text1":"text"}'),
    config?: string(name='Config', example='参考Timeline模板配置详解'),
    coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg'),
    createSource?: string(name='CreateSource', example='OpenAPI'),
    creationTime?: string(name='CreationTime', example='2020-12-26T04:11:10Z'),
    modifiedSource?: string(name='ModifiedSource', example='OpenAPI'),
    modifiedTime?: string(name='ModifiedTime', example='2020-12-26T04:11:10Z'),
    name?: string(name='Name', example='视频添加水印模板'),
    previewMedia?: string(name='PreviewMedia', example='****20b48fb04483915d4f2cd8ac****'),
    previewMediaStatus?: string(name='PreviewMediaStatus', example='Normal'),
    relatedMediaids?: string(name='RelatedMediaids', example='{"video":["******c04f1d4a06996144cc1a******"],"audio":["******c04f1d4a06996144cc1a******"],"image":["******c04f1d4a06996144cc1a******"]}'),
    status?: string(name='Status', example='Available'),
    templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
    type?: string(name='Type', example='Timeline'),
  }(name='Template'),
}

model GetTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTemplateResponseBody(name='body'),
}

async function getTemplate(request: GetTemplateRequest): GetTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetTemplateMaterialsRequest {
  fileList?: string(name='FileList', example='["music.mp3","config.json","assets/1.jpg"]', position='Query'),
  templateId: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model GetTemplateMaterialsResponseBody = {
  materialUrls?: string(name='MaterialUrls', example='{"music.mp3":"https://bucket.oss-cn-shanghai.aliyuncs.com/music.mp3?sign=xxx","config.json":"https://bucket.oss-cn-shanghai.aliyuncs.com/config.json?sign=xxx","assets/1.jpg":"https://bucket.oss-cn-shanghai.aliyuncs.com/assets/1.jpg?sign=xxx"}'),
  requestId?: string(name='RequestId', description='Id of the request', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetTemplateMaterialsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTemplateMaterialsResponseBody(name='body'),
}

async function getTemplateMaterials(request: GetTemplateMaterialsRequest): GetTemplateMaterialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTemplateMaterials', 'POST', '/', 'json', false, 'json', request);
}

model GetTemplateParamsRequest {
  templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model GetTemplateParamsResponseBody = {
  paramList?: [ 
    {
      content?: string(name='Content'),
      coverUrl?: string(name='CoverUrl', example='https://ice-materials-***.alicdn.com/***/********20221****.jpg'),
      key?: string(name='Key', example='video1'),
      mediaUrl?: string(name='MediaUrl', example='https://ice-materials-***.alicdn.com/***/********2022111618012453120c2a81*******.mp4'),
      type?: string(name='Type', example='Image'),
    }
  ](name='ParamList'),
  requestId?: string(name='RequestId', description='Id of the request', example='****2876-6263-4B75-8F2C-CD0F7FCF****'),
  templateId?: string(name='TemplateId', example='******419c8741c1b4325f035b******'),
}

model GetTemplateParamsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTemplateParamsResponseBody(name='body'),
}

async function getTemplateParams(request: GetTemplateParamsRequest): GetTemplateParamsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTemplateParams', 'GET', '/', 'json', false, 'json', request);
}

model GetTranscodeJobRequest {
  parentJobId?: string(name='ParentJobId', example='ab4802364a2e49208c99efab82dfa8e8', position='Query'),
}

model GetTranscodeJobResponseBody = {
  requestId?: string(name='RequestId', example='9EDC30DC-0050-5459-B788-F761B2BE359B'),
  transcodeParentJob?: {
    createTime?: string(name='CreateTime', example='2022-01-12T08:49:41Z'),
    finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
    inputGroup?: [ 
      {
        media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
        type?: string(name='Type', example='OSS'),
      }
    ](name='InputGroup'),
    jobCount?: int32(name='JobCount', example='1'),
    name?: string(name='Name', example='transcode-job'),
    outputGroup?: [ 
      {
        output?: {
          media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
          outputUrl?: string(name='OutputUrl'),
          type?: string(name='Type', example='OSS'),
        }(name='Output'),
        processConfig?: {
          combineConfigs?: [ 
            {
              audioIndex: string(name='AudioIndex', example='0 或 exclude'),
              duration?: double(name='Duration', example='20.0'),
              start?: double(name='Start', example='0.0'),
              videoIndex: string(name='VideoIndex', example='0 或 exclude'),
            }
          ](name='CombineConfigs'),
          encryption?: {
            cipherText?: string(name='CipherText', example='MTYi00NDU0LTg5O****'),
            decryptKeyUri?: string(name='DecryptKeyUri', example='https://sample.com/path?CipherText=MTYi00NDU0LTg5O****'),
            encryptType?: string(name='EncryptType', example='PrivateEncryption'),
            keyServiceType?: string(name='KeyServiceType', example='KMS'),
          }(name='Encryption'),
          imageWatermarks?: [ 
            {
              overwriteParams?: {
                dx?: string(name='Dx', example='10'),
                dy?: string(name='Dy', example='10'),
                file?: {
                  media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', example='OSS'),
                }(name='File'),
                height?: string(name='Height', example='32'),
                referPos?: string(name='ReferPos', example='TopLeft'),
                timeline?: {
                  duration?: string(name='Duration', example='ToEND'),
                  start?: string(name='Start', example='00:00:05'),
                }(name='Timeline'),
                width?: string(name='Width', example='32'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='ImageWatermarks'),
          subtitles?: [ 
            {
              overwriteParams?: {
                charEnc?: string(name='CharEnc', example='UTF-8'),
                file?: {
                  media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', example='OSS'),
                }(name='File'),
                format?: string(name='Format', example='vtt'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='Subtitles'),
          textWatermarks?: [ 
            {
              overwriteParams?: {
                adaptive?: string(name='Adaptive', example='false'),
                borderColor?: string(name='BorderColor', example='#006400'),
                borderWidth?: int32(name='BorderWidth', example='0'),
                content?: string(name='Content', example='测试水印'),
                fontAlpha?: string(name='FontAlpha', example='1.0'),
                fontColor?: string(name='FontColor', example='#006400'),
                fontName?: string(name='FontName', example='SimSun'),
                fontSize?: int32(name='FontSize', example='16'),
                left?: string(name='Left', example='10'),
                top?: string(name='Top', example='10'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='TextWatermarks'),
          transcode?: {
            overwriteParams?: {
              audio?: {
                bitrate?: string(name='Bitrate', example='128'),
                channels?: string(name='Channels', example='2'),
                codec?: string(name='Codec', example='AAC'),
                profile?: string(name='Profile', example='aac_low'),
                remove?: string(name='Remove', example='false'),
                samplerate?: string(name='Samplerate', example='44100'),
                volume?: {
                  integratedLoudnessTarget?: string(name='IntegratedLoudnessTarget', example='-6'),
                  loudnessRangeTarget?: string(name='LoudnessRangeTarget', example='8'),
                  method?: string(name='Method', example='auto'),
                  truePeak?: string(name='TruePeak', example='-1'),
                }(name='Volume'),
              }(name='Audio'),
              container?: {
                format?: string(name='Format', example='mp4'),
              }(name='Container'),
              muxConfig?: {
                segment?: {
                  duration?: string(name='Duration', example='10'),
                  forceSegTime?: string(name='ForceSegTime', example='2,3'),
                }(name='Segment'),
              }(name='MuxConfig'),
              transConfig?: {
                adjDarMethod?: string(name='AdjDarMethod'),
                isCheckAudioBitrate?: string(name='IsCheckAudioBitrate'),
                isCheckAudioBitrateFail?: string(name='IsCheckAudioBitrateFail'),
                isCheckReso?: string(name='IsCheckReso'),
                isCheckResoFail?: string(name='IsCheckResoFail'),
                isCheckVideoBitrate?: string(name='IsCheckVideoBitrate'),
                isCheckVideoBitrateFail?: string(name='IsCheckVideoBitrateFail'),
                transMode?: string(name='TransMode'),
              }(name='TransConfig'),
              video?: {
                abrMax?: string(name='AbrMax', example='6000'),
                bitrate?: string(name='Bitrate', example='3000'),
                bufsize?: string(name='Bufsize', example='6000'),
                codec?: string(name='Codec', example='H.264'),
                crf?: string(name='Crf', example='23'),
                crop?: string(name='Crop', example='1280:800:0:140'),
                fps?: string(name='Fps', example='25'),
                gop?: string(name='Gop', example='250'),
                height?: string(name='Height', example='1080'),
                longShortMode?: string(name='LongShortMode', example='false'),
                maxrate?: string(name='Maxrate', example='9000'),
                pad?: string(name='Pad', example='1280:800:0:140'),
                pixFmt?: string(name='PixFmt', example='yuv420p'),
                preset?: string(name='Preset', example='medium'),
                profile?: string(name='Profile', example='Main'),
                remove?: string(name='Remove', example='false'),
                scanMode?: string(name='ScanMode', example='progressive'),
                width?: string(name='Width', example='1920'),
              }(name='Video'),
            }(name='OverwriteParams'),
            templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }(name='Transcode'),
        }(name='ProcessConfig'),
      }
    ](name='OutputGroup'),
    parentJobId?: string(name='ParentJobId', example='8b2198504dd340b7b3c9842a74fc9baa'),
    percent?: int32(name='Percent', example='0'),
    requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
    scheduleConfig?: {
      pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
      priority?: int32(name='Priority', example='5'),
    }(name='ScheduleConfig'),
    status?: string(name='Status', example='Success'),
    submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
    transcodeJobList?: [ 
      {
        createTime?: string(name='CreateTime', example='2022-01-12T08:49:41Z'),
        finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
        inputGroup?: [ 
          {
            inputUrl?: string(name='InputUrl'),
            media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
            type?: string(name='Type', example='OSS'),
          }
        ](name='InputGroup'),
        jobId?: string(name='JobId', example='7d6a7e0d4db2457a8d45ff5d43e1bf0a'),
        jobIndex?: int32(name='JobIndex', example='0'),
        name?: string(name='Name', example='transcode-job'),
        outFileMeta?: {
          audioStreamInfoList?: [ 
            {
              bitrate?: string(name='Bitrate', example='0.f'),
              channelLayout?: string(name='ChannelLayout', example='stereo'),
              channels?: string(name='Channels', example='2'),
              codecLongName?: string(name='CodecLongName', example='AAC (Advanced Audio Coding)'),
              codecName?: string(name='CodecName', example='aac'),
              codecTag?: string(name='CodecTag', example='0x000f'),
              codecTagString?: string(name='CodecTagString', example='[15][0][0][0]'),
              codecTimeBase?: string(name='CodecTimeBase', example='1/44100'),
              duration?: string(name='Duration', example='403.039989'),
              index?: string(name='Index', example='1'),
              lang?: string(name='Lang', example='cn'),
              sampleFmt?: string(name='SampleFmt', example='fltp'),
              sampleRate?: string(name='SampleRate', example='44100'),
              startTime?: string(name='StartTime', example='1.473556'),
              timebase?: string(name='Timebase', example='1/90000'),
            }
          ](name='AudioStreamInfoList'),
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', example='888.563'),
            duration?: string(name='Duration', example='403.039999'),
            fileName?: string(name='FileName', example='file.m3u8'),
            fileSize?: string(name='FileSize', example='31737'),
            fileStatus?: string(name='FileStatus', example='Normal'),
            fileType?: string(name='FileType', example='source_file'),
            fileUrl?: string(name='FileUrl', example='http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8'),
            formatName?: string(name='FormatName', example='hls,applehttp'),
            height?: string(name='Height', example='478'),
            mediaId?: string(name='MediaId', example='486c2890096871edba6f81848c016303'),
            region?: string(name='Region', example='cn-shanghai'),
            width?: string(name='Width', example='848'),
          }(name='FileBasicInfo'),
          videoStreamInfoList?: [ 
            {
              avgFps?: string(name='Avg_fps', example='25.0'),
              bitRate?: string(name='Bit_rate', example='888.563'),
              codecLongName?: string(name='Codec_long_name', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
              codecName?: string(name='Codec_name', example='h264'),
              codecTag?: string(name='Codec_tag', example='0x001b'),
              codecTagString?: string(name='Codec_tag_string', example='[27][0][0][0]'),
              codecTimeBase?: string(name='Codec_time_base', example='1/50'),
              dar?: string(name='Dar', example='16:9'),
              duration?: string(name='Duration', example='403.039989'),
              fps?: string(name='Fps', example='25.0'),
              hasBFrames?: string(name='Has_b_frames', example='2'),
              height?: string(name='Height', example='478'),
              index?: string(name='Index', example='0'),
              lang?: string(name='Lang', example='cn'),
              level?: string(name='Level', example='31'),
              numFrames?: string(name='NumFrames', example='10040'),
              pixFmt?: string(name='PixFmt', example='yuv420p'),
              profile?: string(name='Profile', example='High'),
              rotate?: string(name='Rotate', example='0'),
              sar?: string(name='Sar', example='478:477'),
              startTime?: string(name='Start_time', example='1.473556'),
              timeBase?: string(name='Time_base', example='1/90000'),
              width?: string(name='Width', example='848'),
            }
          ](name='VideoStreamInfoList'),
        }(name='OutFileMeta'),
        output?: {
          media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
          outputUrl?: string(name='OutputUrl'),
          type?: string(name='Type', example='OSS'),
        }(name='Output'),
        parentJobId?: string(name='ParentJobId', example='8b2198504dd340b7b3c9842a74fc9baa'),
        processConfig?: {
          combineConfigs?: [ 
            {
              audioIndex: string(name='AudioIndex', example='0 或 exclude'),
              duration?: double(name='Duration', example='20.0'),
              start?: double(name='Start', example='0.0'),
              videoIndex: string(name='VideoIndex', example='0 或 exclude'),
            }
          ](name='CombineConfigs'),
          encryption?: {
            cipherText?: string(name='CipherText', example='MTYi00NDU0LTg5O****'),
            decryptKeyUri?: string(name='DecryptKeyUri', example='https://sample.com/path?CipherText=MTYi00NDU0LTg5O****'),
            encryptType?: string(name='EncryptType', example='PrivateEncryption'),
            keyServiceType?: string(name='KeyServiceType', example='KMS'),
          }(name='Encryption'),
          imageWatermarks?: [ 
            {
              overwriteParams?: {
                dx?: string(name='Dx', example='10'),
                dy?: string(name='Dy', example='10'),
                file?: {
                  media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', example='OSS'),
                }(name='File'),
                height?: string(name='Height', example='32'),
                referPos?: string(name='ReferPos', example='TopLeft'),
                timeline?: {
                  duration?: string(name='Duration', example='ToEND'),
                  start?: string(name='Start', example='00:00:05'),
                }(name='Timeline'),
                width?: string(name='Width', example='32'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='ImageWatermarks'),
          isInheritTags?: boolean(name='IsInheritTags'),
          subtitles?: [ 
            {
              overwriteParams?: {
                charEnc?: string(name='CharEnc', example='UTF-8'),
                file?: {
                  media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', example='OSS'),
                }(name='File'),
                format?: string(name='Format', example='vtt'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='Subtitles'),
          textWatermarks?: [ 
            {
              overwriteParams?: {
                adaptive?: string(name='Adaptive', example='false'),
                borderColor?: string(name='BorderColor', example='#006400'),
                borderWidth?: int32(name='BorderWidth', example='0'),
                content?: string(name='Content', example='测试水印'),
                fontAlpha?: string(name='FontAlpha', example='1.0'),
                fontColor?: string(name='FontColor', example='#006400'),
                fontName?: string(name='FontName', example='SimSun'),
                fontSize?: int32(name='FontSize', example='16'),
                left?: string(name='Left', example='10'),
                top?: string(name='Top', example='10'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='TextWatermarks'),
          transcode?: {
            overwriteParams?: {
              audio?: {
                bitrate?: string(name='Bitrate', example='128'),
                channels?: string(name='Channels', example='2'),
                codec?: string(name='Codec', example='AAC'),
                profile?: string(name='Profile', example='aac_low'),
                remove?: string(name='Remove', example='false'),
                samplerate?: string(name='Samplerate', example='44100'),
                volume?: {
                  integratedLoudnessTarget?: string(name='IntegratedLoudnessTarget', example='-6'),
                  loudnessRangeTarget?: string(name='LoudnessRangeTarget', example='8'),
                  method?: string(name='Method', example='auto'),
                  truePeak?: string(name='TruePeak', example='-1'),
                }(name='Volume'),
              }(name='Audio'),
              container?: {
                format?: string(name='Format', example='mp4'),
              }(name='Container'),
              muxConfig?: {
                segment?: {
                  duration?: string(name='Duration', example='10'),
                  forceSegTime?: string(name='ForceSegTime', example='2,3'),
                }(name='Segment'),
              }(name='MuxConfig'),
              tags?: map[string]string(name='Tags'),
              transConfig?: {
                adjDarMethod?: string(name='AdjDarMethod'),
                isCheckAudioBitrate?: string(name='IsCheckAudioBitrate'),
                isCheckAudioBitrateFail?: string(name='IsCheckAudioBitrateFail'),
                isCheckReso?: string(name='IsCheckReso'),
                isCheckResoFail?: string(name='IsCheckResoFail'),
                isCheckVideoBitrate?: string(name='IsCheckVideoBitrate'),
                isCheckVideoBitrateFail?: string(name='IsCheckVideoBitrateFail'),
                transMode?: string(name='TransMode'),
              }(name='TransConfig'),
              video?: {
                abrMax?: string(name='AbrMax', example='6000'),
                bitrate?: string(name='Bitrate', example='3000'),
                bufsize?: string(name='Bufsize', example='6000'),
                codec?: string(name='Codec', example='H.264'),
                crf?: string(name='Crf', example='23'),
                crop?: string(name='Crop', example='1280:800:0:140'),
                fps?: string(name='Fps', example='25'),
                gop?: string(name='Gop', example='250'),
                height?: string(name='Height', example='1080'),
                longShortMode?: string(name='LongShortMode', example='false'),
                maxrate?: string(name='Maxrate', example='9000'),
                pad?: string(name='Pad', example='1280:800:0:140'),
                pixFmt?: string(name='PixFmt', example='yuv420p'),
                preset?: string(name='Preset', example='medium'),
                profile?: string(name='Profile', example='Main'),
                remove?: string(name='Remove', example='false'),
                scanMode?: string(name='ScanMode', example='progressive'),
                width?: string(name='Width', example='1920'),
              }(name='Video'),
            }(name='OverwriteParams'),
            templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }(name='Transcode'),
        }(name='ProcessConfig'),
        requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
        scheduleConfig?: {
          pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
          priority?: int32(name='Priority', example='5'),
        }(name='ScheduleConfig'),
        status?: string(name='Status', example='Init'),
        submitResultJson?: map[string]any(name='SubmitResultJson', example='{}'),
        submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
        userData?: string(name='UserData', example='user-data'),
      }
    ](name='TranscodeJobList'),
    triggerSource?: string(name='TriggerSource', example='API'),
    userData?: string(name='UserData', example='user-data'),
  }(name='TranscodeParentJob', description='TranscodeParentJobWithSubJobDTO'),
}

model GetTranscodeJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTranscodeJobResponseBody(name='body'),
}

async function getTranscodeJob(request: GetTranscodeJobRequest): GetTranscodeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTranscodeJob', 'POST', '/', 'json', false, 'json', request);
}

model GetUrlUploadInfosRequest {
  regionId?: string(name='RegionId', position='Host'),
  jobIds?: string(name='JobIds', example='df2ac80b481346daa1db6a7c40edc7f8', position='Query'),
  uploadURLs?: string(name='UploadURLs', example='https://media.w3.org/2010/05/sintel/trailer.mp4', position='Query'),
}

model GetUrlUploadInfosResponseBody = {
  nonExists?: [ string ](name='NonExists'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  URLUploadInfoList?: [ 
    {
      completeTime?: string(name='CompleteTime', example='2021-11-26 21:47:37'),
      creationTime?: string(name='CreationTime', example='2021-11-07T10:03:37Z'),
      errorCode?: string(name='ErrorCode', example='200'),
      errorMessage?: string(name='ErrorMessage', example='Success'),
      fileSize?: string(name='FileSize', example='64610'),
      jobId?: string(name='JobId', example='3829500c0fef429fa4ec1680b122d***'),
      mediaId?: string(name='MediaId', example='5014ca70f08171ecbf940764a0fd6***'),
      status?: string(name='Status', example='Normal'),
      uploadURL?: string(name='UploadURL', example='http://****.mp4'),
      userData?: string(name='UserData', example='{"MessageCallback":"{"CallbackURL":"http://example.aliyundoc.com"}", "Extend":"{"localId":"***", "test":"www"}"}'),
    }
  ](name='URLUploadInfoList'),
}

model GetUrlUploadInfosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUrlUploadInfosResponseBody(name='body'),
}

async function getUrlUploadInfos(request: GetUrlUploadInfosRequest): GetUrlUploadInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUrlUploadInfos', 'POST', '/', 'json', false, 'json', request);
}

model GetVideoListRequest {
  regionId?: string(name='RegionId', position='Host'),
  cateId?: long(name='CateId', example='781111', position='Query'),
  endTime?: string(name='EndTime', example='2017-01-11T12:59:00Z', position='Query'),
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  sortBy?: string(name='SortBy', example='CreationTime:Asc', position='Query'),
  startTime?: string(name='StartTime', example='2017-01-11T12:00:00Z', position='Query'),
  status?: string(name='Status', example='Uploading,Normal', position='Query'),
}

model GetVideoListResponseBody = {
  code?: string(name='Code', example='200'),
  mediaList?: [ 
    {
      appId?: string(name='AppId', example='app-1000000'),
      cateId?: long(name='CateId', example='3679'),
      cateName?: string(name='CateName'),
      coverUrl?: string(name='CoverUrl', example='http://example.aliyundoc.com/snapshot/****.jpg?auth_key=1498476426-0-0-f00b9455c49a423ce69cf4e27333****'),
      creationTime?: string(name='CreationTime', example='2017-11-14T09:15:50Z'),
      description?: string(name='Description'),
      duration?: float(name='Duration', example='135.6'),
      mediaId?: string(name='MediaId', example='1c6ce34007d571ed94667630a6bc****'),
      modificationTime?: string(name='ModificationTime', example='2017-11-14T09:16:50Z'),
      size?: long(name='Size', example='10897890'),
      snapshots?: [ string ](name='Snapshots'),
      status?: string(name='Status', example='Normal'),
      storageLocation?: string(name='StorageLocation', example='out-****.oss-cn-shanghai.aliyuncs.com'),
      tags?: string(name='Tags'),
      title?: string(name='Title'),
    }
  ](name='MediaList'),
  requestId?: string(name='RequestId', description='Id of the request。', example='******11-DB8D-4A9A-875B-275798******'),
  success?: string(name='Success', example='true'),
  total?: long(name='Total', example='163'),
}

model GetVideoListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVideoListResponseBody(name='body'),
}

async function getVideoList(request: GetVideoListRequest): GetVideoListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVideoList', 'POST', '/', 'json', false, 'json', request);
}

model GetWorkflowTaskRequest {
  taskId?: string(name='TaskId', example='******4215e042b3966ca5441e******', position='Query'),
}

model GetWorkflowTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='******0C-7870-15FE-B96F-8880BB******'),
  workflowTask?: {
    activityResults?: string(name='ActivityResults'),
    createTime?: string(name='CreateTime', example='2023-01-04T02:05:17Z'),
    finishTime?: string(name='FinishTime', example='2023-01-04T02:06:19Z'),
    status?: string(name='Status', example='Succeed'),
    taskId?: string(name='TaskId', example='******4215e042b3966ca5441e******'),
    taskInput?: string(name='TaskInput', example='{
      "Type": "Media",
      "Media": "******30706071edbfe290b488******"
}'),
    userData?: string(name='UserData', example='{"NotifyAddress":"http://xx.xx.xxx"}'),
    workflow?: {
      createTime?: string(name='CreateTime', example='2022-11-27T10:02:12Z'),
      modifiedTime?: string(name='ModifiedTime', example='2022-11-29T02:06:19Z'),
      name?: string(name='Name'),
      status?: string(name='Status', example='Active'),
      type?: string(name='Type', example='Common'),
      workflowId?: string(name='WorkflowId', example='******63dca94c609de02ac0d1******'),
    }(name='Workflow'),
  }(name='WorkflowTask'),
}

model GetWorkflowTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWorkflowTaskResponseBody(name='body'),
}

async function getWorkflowTask(request: GetWorkflowTaskRequest): GetWorkflowTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWorkflowTask', 'POST', '/', 'json', false, 'json', request);
}

model InsertMediaToSearchLibRequest {
  regionId?: string(name='RegionId', position='Host'),
  input: string(name='Input', example='http://example-test-****.mp4', position='Query'),
  mediaId?: string(name='MediaId', example='411bed50018971edb60b0764a0ec6***', position='Query'),
  mediaType?: string(name='MediaType', example='video', position='Query'),
  msgBody?: string(name='MsgBody', example='{}', position='Query'),
  searchLibName?: string(name='SearchLibName', example='test1', position='Query'),
}

model InsertMediaToSearchLibResponseBody = {
  code?: string(name='Code'),
  mediaId?: string(name='MediaId', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', description='Id of the request', example='*****ACB-44F2-5F2D-88D7-1283E70*****'),
  success?: string(name='Success'),
}

model InsertMediaToSearchLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InsertMediaToSearchLibResponseBody(name='body'),
}

async function insertMediaToSearchLib(request: InsertMediaToSearchLibRequest): InsertMediaToSearchLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InsertMediaToSearchLib', 'POST', '/', 'json', false, 'json', request);
}

model ListAllPublicMediaTagsRequest {
  regionId?: string(name='RegionId', position='Host'),
  businessType?: string(name='BusinessType', example='"sticker"', position='Query'),
  entityId?: string(name='EntityId', example='Copyright_Music', position='Query'),
}

model ListAllPublicMediaTagsResponseBody = {
  mediaTagList?: [ 
    {
      mediaTagId?: string(name='MediaTagId', example='sticker-gif'),
      mediaTagNameChinese?: string(name='MediaTagNameChinese', example='Gif'),
      mediaTagNameEnglish?: string(name='MediaTagNameEnglish'),
      options?: [ 
        {
          optionChineseName?: string(name='OptionChineseName'),
          optionEnglishName?: string(name='OptionEnglishName', example='Angry'),
          optionId?: string(name='OptionId', example='Angry'),
        }
      ](name='Options'),
    }
  ](name='MediaTagList'),
  requestId?: string(name='RequestId', example='B45F83B7-7F87-4792-BFE9-63CD2137CAF0'),
}

model ListAllPublicMediaTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAllPublicMediaTagsResponseBody(name='body'),
}

async function listAllPublicMediaTags(request: ListAllPublicMediaTagsRequest): ListAllPublicMediaTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAllPublicMediaTags', 'POST', '/', 'json', false, 'json', request);
}

model ListAvatarTrainingJobsRequest {
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', maximum=100, position='Query'),
  status?: string(name='Status', example='Success', position='Query'),
}

model ListAvatarTrainingJobsResponseBody = {
  data?: {
    avatarTrainingJobList?: [ 
      {
        avatarDescription?: string(name='AvatarDescription'),
        avatarId?: string(name='AvatarId', example='Avatar-XXX'),
        avatarName?: string(name='AvatarName'),
        avatarType?: string(name='AvatarType', example='2DAvatar'),
        createTime?: string(name='CreateTime', example='2020-12-23T13:33:40Z'),
        firstTrainingTime?: string(name='FirstTrainingTime', example='2020-12-23T13:33:40Z'),
        jobId?: string(name='JobId', example='*****aded114489ea02e0addf93*****'),
        lastTrainingTime?: string(name='LastTrainingTime', example='2020-12-23T13:33:40Z'),
        message?: string(name='Message'),
        portrait?: string(name='Portrait', example='*****aded114489ea02e0addf93*****'),
        status?: string(name='Status', example='Normal'),
      }
    ](name='AvatarTrainingJobList'),
    totalCount?: long(name='TotalCount', example='3'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
  success?: boolean(name='Success', example='true'),
}

model ListAvatarTrainingJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAvatarTrainingJobsResponseBody(name='body'),
}

async function listAvatarTrainingJobs(request: ListAvatarTrainingJobsRequest): ListAvatarTrainingJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAvatarTrainingJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListAvatarsRequest {
  avatarType?: string(name='AvatarType', example='2DAvatar', position='Query'),
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', maximum=100, position='Query'),
}

model ListAvatarsResponseBody = {
  data?: {
    avatarList?: [ 
      {
        avatarDescription?: string(name='AvatarDescription'),
        avatarId?: string(name='AvatarId', example='Avatar-XXX'),
        avatarName?: string(name='AvatarName'),
        avatarType?: string(name='AvatarType', example='2DAvatar'),
        portrait?: string(name='Portrait', example='****571c704445f9a0ee011406c2****'),
        thumbnail?: string(name='Thumbnail', example='https://your-bucket.oss-cn-hangzhou.aliyuncs.com/thumbnail.png'),
        transparent?: boolean(name='Transparent'),
      }
    ](name='AvatarList'),
    totalCount?: long(name='TotalCount', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model ListAvatarsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAvatarsResponseBody(name='body'),
}

async function listAvatars(request: ListAvatarsRequest): ListAvatarsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAvatars', 'POST', '/', 'json', false, 'json', request);
}

model ListBatchMediaProducingJobsRequest {
  endTime?: string(name='EndTime', example='2023-06-05T15:59:59Z', position='Query'),
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****', position='Query'),
  jobType?: string(name='JobType', example='Script', position='Query'),
  maxResults?: int32(name='MaxResults', example='100', position='Query'),
  nextToken?: string(name='NextToken', example='mRZkKAovub0xWVfH14he4Q==', position='Query'),
  sortBy?: string(name='SortBy', example='desc', position='Query'),
  startTime?: string(name='StartTime', example='2022-02-02T00:00:00Z', position='Query'),
  status?: string(name='Status', example='Finished', position='Query'),
}

model ListBatchMediaProducingJobsResponseBody = {
  editingBatchJobList?: [ 
    {
      completeTime?: string(name='CompleteTime', example='2023-06-09T06:38:09Z'),
      createTime?: string(name='CreateTime', example='2023-06-09T06:36:48Z'),
      editingConfig?: string(name='EditingConfig', example='{
  "MediaConfig": {
      "Volume": 0
  },
  "SpeechConfig": {
      "Volume": 1
  },
 "BackgroundMusicConfig": {
      "Volume": 0.3
  }
}'),
      extend?: string(name='Extend'),
      inputConfig?: string(name='InputConfig'),
      jobId?: string(name='JobId', example='******7ecbee4c6d9b8474498e******'),
      jobType?: string(name='JobType', example='Script'),
      modifiedTime?: string(name='ModifiedTime', example='2023-06-09T06:37:58Z'),
      outputConfig?: string(name='OutputConfig', example='{
  "MediaURL": "http://xxx.oss-cn-shanghai.aliyuncs.com/xxx_{index}.mp4",
  "Count": 20,
  "MaxDuration": 15,
  "Width": 1080,
  "Height": 1920,
  "Video": {"Crf": 27}
}'),
      status?: string(name='Status', example='Finished'),
      userData?: string(name='UserData'),
    }
  ](name='EditingBatchJobList'),
  maxResults?: int32(name='MaxResults', example='100'),
  nextToken?: string(name='NextToken', example='8EqYpQbZ6Eh7+Zz8DxVYoQ=='),
  requestId?: string(name='RequestId', description='Id of the request', example='******3B-0E1A-586A-AC29-742247******'),
}

model ListBatchMediaProducingJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBatchMediaProducingJobsResponseBody(name='body'),
}

async function listBatchMediaProducingJobs(request: ListBatchMediaProducingJobsRequest): ListBatchMediaProducingJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBatchMediaProducingJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListCustomTemplatesRequest {
  name?: string(name='Name', example='test-template', position='Query'),
  orderBy?: string(name='OrderBy', example='CreateTimeDesc', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  subtype?: string(name='Subtype', example='2', position='Query'),
  templateId?: string(name='TemplateId', example='****96e8864746a0b6f3****', position='Query'),
  type: string(name='Type', example='1', position='Query'),
}

model ListCustomTemplatesResponseBody = {
  customTemplateList?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
      isDefault?: boolean(name='IsDefault', example='true'),
      modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:17:54Z'),
      status?: string(name='Status', example='Normal'),
      subtype?: int32(name='Subtype', example='2'),
      subtypeName?: string(name='SubtypeName', example='AudioTranscode'),
      templateConfig?: string(name='TemplateConfig', example='{"Container":{"Format":"mp3"},"Audio":{"Codec":"mp3","Bitrate":"64","Samplerate":"22050","Channels":"2"}}'),
      templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
      templateName?: string(name='TemplateName', example='test-template'),
      type?: int32(name='Type', example='1'),
      typeName?: string(name='TypeName', example='TranscodeTemplate'),
    }
  ](name='CustomTemplateList'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  total?: int32(name='Total', example='20'),
}

model ListCustomTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCustomTemplatesResponseBody(name='body'),
}

async function listCustomTemplates(request: ListCustomTemplatesRequest): ListCustomTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCustomTemplates', 'POST', '/', 'json', false, 'json', request);
}

model ListCustomizedVoiceJobsRequest {
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  type?: string(name='Type', position='Query'),
}

model ListCustomizedVoiceJobsResponseBody = {
  data?: {
    customizedVoiceJobList?: [ 
      {
        createTime?: string(name='CreateTime'),
        gender?: string(name='Gender', example='female'),
        gmtCreate?: string(name='GmtCreate', example='2022-06-27T02:42:28Z'),
        jobId?: string(name='JobId', example='2245ab99a7fd4116a4fd3f499b7a56c5'),
        message?: string(name='Message'),
        scenario?: string(name='Scenario', example='story'),
        status?: string(name='Status', example='Success'),
        type?: string(name='Type'),
        voiceDesc?: string(name='VoiceDesc'),
        voiceId?: string(name='VoiceId', example='xiaozhuan'),
        voiceName?: string(name='VoiceName'),
      }
    ](name='CustomizedVoiceJobList'),
    totalCount?: int32(name='TotalCount', example='271'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
  success?: boolean(name='Success', example='true'),
}

model ListCustomizedVoiceJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCustomizedVoiceJobsResponseBody(name='body'),
}

async function listCustomizedVoiceJobs(request: ListCustomizedVoiceJobsRequest): ListCustomizedVoiceJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCustomizedVoiceJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListCustomizedVoicesRequest {
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  type?: string(name='Type', position='Query'),
}

model ListCustomizedVoicesResponseBody = {
  data?: {
    customizedVoiceList?: [ 
      {
        demoAudioMediaId?: string(name='DemoAudioMediaId', example='****4d5e829d498aaf966b119348****'),
        gender?: string(name='Gender', example='male'),
        scenario?: string(name='Scenario', example='story'),
        type?: string(name='Type'),
        voiceDesc?: string(name='VoiceDesc'),
        voiceId?: string(name='VoiceId', example='xiaozhuan'),
        voiceName?: string(name='VoiceName'),
      }
    ](name='CustomizedVoiceList'),
    totalCount?: int32(name='TotalCount', example='41'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model ListCustomizedVoicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCustomizedVoicesResponseBody(name='body'),
}

async function listCustomizedVoices(request: ListCustomizedVoicesRequest): ListCustomizedVoicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCustomizedVoices', 'POST', '/', 'json', false, 'json', request);
}

model ListDNADBRequest {
  DBIds?: string(name='DBIds', example='2288c6ca184c0e47098a5b665e2a12****,78dc866518b843259669df58ed30****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListDNADBResponseBody = {
  DBList?: [ 
    {
      DBId?: string(name='DBId', example='88c6ca184c0e47098a5b665e2a12****'),
      description?: string(name='Description'),
      model?: int32(name='Model', example='Video'),
      name?: string(name='Name', example='example-name'),
      status?: string(name='Status', example='active'),
    }
  ](name='DBList'),
  requestId?: string(name='RequestId', example='25818875-5F78-4A13-BEF6-D7393642CA58'),
}

model ListDNADBResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDNADBResponseBody(name='body'),
}

async function listDNADB(request: ListDNADBRequest): ListDNADBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDNADB', 'POST', '/', 'json', false, 'json', request);
}

model ListDNAFilesRequest {
  DBId: string(name='DBId', example='2288c6ca184c0e47098a5b665e2a12****', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='ae0fd49c0840e14daf0d66a75b83****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListDNAFilesResponseBody = {
  fileList?: [ 
    {
      inputFile?: {
        bucket?: string(name='Bucket', example='example-bucket'),
        location?: string(name='Location', example='oss-cn-beijing'),
        object?: string(name='Object', example='example-****.mp4'),
      }(name='InputFile'),
      primaryKey?: string(name='PrimaryKey', example='ae0fd49c0840e14daf0d66a75b83****'),
    }
  ](name='FileList'),
  nextPageToken?: string(name='NextPageToken', example='ae0fd49c0840e14daf0d66a75b83****'),
  requestId?: string(name='RequestId', example='2AE89FA5-E620-56C7-9B80-75D09757385A'),
}

model ListDNAFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDNAFilesResponseBody(name='body'),
}

async function listDNAFiles(request: ListDNAFilesRequest): ListDNAFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDNAFiles', 'POST', '/', 'json', false, 'json', request);
}

model ListDynamicImageJobsRequest {
  endOfCreateTime?: string(name='EndOfCreateTime', example='2022-07-14T00:00:00Z', position='Query'),
  jobId?: string(name='JobId', example='****cdb3e74639973036bc84****', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='cdb3e74639973036bc84', position='Query'),
  orderBy?: string(name='OrderBy', example='CreateTimeDesc', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  startOfCreateTime?: string(name='StartOfCreateTime', example='2022-07-12T00:00:00Z', position='Query'),
  status?: string(name='Status', example='Success', position='Query'),
}

model ListDynamicImageJobsResponseBody = {
  jobs?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
      finishTime?: string(name='FinishTime', example='2022-07-12T16:30:54Z'),
      input?: {
        media?: string(name='Media', example='oss://bucket/object'),
        type?: string(name='Type', example='OSS'),
      }(name='Input'),
      jobId?: string(name='JobId', example='****cdb3e74639973036bc84****'),
      modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:30:54Z'),
      name?: string(name='Name', example='SampleJob'),
      output?: {
        media?: string(name='Media', example='****cdb3e74639973036bc84****'),
        type?: string(name='Type', example='Media'),
      }(name='Output'),
      pipelineId?: string(name='PipelineId', example='****cdb3e74639973036bc84****'),
      status?: string(name='Status', example='Success'),
      submitTime?: string(name='SubmitTime', example='2022-07-12T16:17:54Z'),
      templateId?: string(name='TemplateId', example='****cdb3e74639973036bc84****'),
      triggerSource?: string(name='TriggerSource', example='API'),
    }
  ](name='Jobs'),
  nextPageToken?: string(name='NextPageToken', example='****cdb3e74639973036bc84****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model ListDynamicImageJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDynamicImageJobsResponseBody(name='body'),
}

async function listDynamicImageJobs(request: ListDynamicImageJobsRequest): ListDynamicImageJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDynamicImageJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListLiveRecordFilesRequest {
  endTime?: string(name='EndTime', example='2017-12-22T08:00:00Z', position='Query'),
  jobIds?: [ string ](name='JobIds', position='Query'),
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  recordFormat?: string(name='RecordFormat', example='m3u8', position='Query'),
  sortBy?: string(name='SortBy', example='asc', position='Query'),
  startTime?: string(name='StartTime', example='2017-12-21T08:00:01Z', position='Query'),
}

model ListLiveRecordFilesResponseBody = {
  files?: [ 
    {
      createTime?: string(name='CreateTime', example='2016-05-27T09:40:56Z'),
      duration?: float(name='Duration', example='100.0'),
      endTime?: string(name='EndTime', example='2015-12-01T07:36:10Z'),
      format?: string(name='Format', example='m3u8'),
      height?: int32(name='Height', example='640'),
      jobId?: string(name='JobId', example='c4d7f0a4-b506-43f9-8de3-07732c3f****'),
      jobName?: string(name='JobName', example='LiveRecordJob***'),
      recordId?: string(name='RecordId', example='c4d7f0a4-b506-43f9-8de3-07732c3f****'),
      recordOutput?: string(name='RecordOutput', example='{ "Type": "oss", "Endpoint":"oss-cn-shanghai.aliyuncs.com", "Bucket": "test-bucket" }'),
      recordUrl?: string(name='RecordUrl', example='http://****/atestObject****.m3u8'),
      startTime?: string(name='StartTime', example='2015-12-01T07:36:00Z'),
      streamUrl?: string(name='StreamUrl', example='LiveStream***'),
      width?: int32(name='Width', example='480'),
    }
  ](name='Files'),
  pageNo?: long(name='PageNo', example='1'),
  pageSize?: string(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='DE24625C-7C0F-4020-8448-****'),
  sortBy?: string(name='SortBy', example='asc'),
  totalCount?: string(name='TotalCount', example='100'),
}

model ListLiveRecordFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLiveRecordFilesResponseBody(name='body'),
}

async function listLiveRecordFiles(request: ListLiveRecordFilesRequest): ListLiveRecordFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveRecordFiles', 'GET', '/', 'json', false, 'json', request);
}

model ListLiveRecordJobsRequest {
  endTime?: string(name='EndTime', example='2022-07-11T08:00:00Z', position='Query'),
  keyword?: string(name='Keyword', example='ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66', position='Query'),
  pageNo?: long(name='PageNo', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
  sortBy?: string(name='SortBy', example='desc', position='Query'),
  startTime?: string(name='StartTime', example='2022-07-15T08:00:00Z', position='Query'),
  status?: string(name='Status', example='started', position='Query'),
}

model ListLiveRecordJobsResponseBody = {
  liveRecordJobs?: [ 
    {
      createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段', example='2022-07-20T03:26:36Z'),
      jobId?: string(name='JobId', example='ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66'),
      name?: string(name='Name', description='代表资源名称的资源属性字段'),
      notifyUrl?: string(name='NotifyUrl', description='回调地址', example='https://example.com/imsnotify'),
      recordOutput?: {
        bucket?: string(name='Bucket', example='imsbucket1'),
        endpoint?: string(name='Endpoint', example='oss-cn-hangzhou.aliyuncs.com'),
        type?: string(name='Type', example='oss'),
      }(name='RecordOutput'),
      status?: string(name='Status', example='paused'),
      streamInput?: {
        type?: string(name='Type', example='rtmp'),
        url?: string(name='Url', example='rtmp://example-live.com/live/stream1'),
      }(name='StreamInput'),
      templateId?: string(name='TemplateId', description='录制模板ID', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66'),
      templateName?: string(name='TemplateName', example='test template'),
    }
  ](name='LiveRecordJobs'),
  pageNo?: long(name='PageNo', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='A27DFFA4-F272-5563-8363-CB0BC42740BA'),
  sortBy?: string(name='SortBy', example='desc'),
  totalCount?: long(name='TotalCount', example='180'),
}

model ListLiveRecordJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLiveRecordJobsResponseBody(name='body'),
}

async function listLiveRecordJobs(request: ListLiveRecordJobsRequest): ListLiveRecordJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveRecordJobs', 'GET', '/', 'json', false, 'json', request);
}

model ListLiveRecordTemplatesRequest {
  keyword?: string(name='Keyword', example='test template', position='Query'),
  pageNo?: long(name='PageNo', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  sortBy?: string(name='SortBy', example='desc', position='Query'),
  templateIds?: [ string ](name='TemplateIds', position='Query'),
  type?: string(name='Type', example='custom', position='Query'),
}

model ListLiveRecordTemplatesResponseBody = {
  pageNo?: long(name='PageNo', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  recordTemplateList?: [ 
    {
      createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段', example='2022-07-20T02:48:58Z'),
      lastModified?: string(name='LastModified', description='最后修改时间', example='2022-07-20T03:26:36Z'),
      name?: string(name='Name', description='代表资源名称的资源属性字段', example='test template'),
      recordFormatList?: [ 
        {
          cycleDuration?: int32(name='CycleDuration', example='21600'),
          format?: string(name='Format', description='格式', example='m3u8'),
          ossObjectPrefix?: string(name='OssObjectPrefix', description='Oss对象名，不包含后缀', example='record/{JobId}/{Sequence}_{EscapedStartTime}_{EscapedEndTime}'),
          sliceDuration?: int32(name='SliceDuration', description='切片时长', example='30'),
          sliceOssObjectPrefix?: string(name='SliceOssObjectPrefix', description='切片Oss对象名，不包含后缀', example='record/{JobId}/{UnixTimestamp}_{Sequence}'),
        }
      ](name='RecordFormatList', description='录制格式'),
      templateId?: string(name='TemplateId', description='代表资源一级ID的资源属性字段', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66'),
      type?: string(name='Type', description='代表资源名称的资源属性字段', example='custom'),
    }
  ](name='RecordTemplateList'),
  requestId?: string(name='RequestId', example='BEA98A0C-7870-15FE-B96F-8880BB600A2C'),
  sortBy?: string(name='SortBy', example='desc'),
  totalCount?: long(name='TotalCount', example='5'),
}

model ListLiveRecordTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLiveRecordTemplatesResponseBody(name='body'),
}

async function listLiveRecordTemplates(request: ListLiveRecordTemplatesRequest): ListLiveRecordTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveRecordTemplates', 'GET', '/', 'json', false, 'json', request);
}

model ListLiveSnapshotFilesRequest {
  endTime: string(name='EndTime', example='2022-02-02T23:59:59Z', position='Query'),
  jobId: string(name='JobId', example='****a046-263c-3560-978a-fb287782****', position='Query'),
  limit?: int32(name='Limit', example='10', position='Query'),
  sortBy?: string(name='SortBy', example='desc', position='Query'),
  startTime: string(name='StartTime', example='2022-02-02T00:00:00Z', position='Query'),
}

model ListLiveSnapshotFilesResponseBody = {
  fileList?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-02-02T22:22:22Z'),
      createTimestamp?: long(name='CreateTimestamp', example='1619503516000'),
      isOverlay?: boolean(name='IsOverlay', example='true'),
      ossBucket?: string(name='OssBucket', description='OSS bucket。', example='testbucket'),
      ossEndpoint?: string(name='OssEndpoint', example='oss-cn-shanghai.aliyuncs.com'),
      ossObject?: string(name='OssObject', example='snapshot/****a046-263c-3560-978a-fb287782****/1660638613798.jpg'),
    }
  ](name='FileList'),
  nextStartTime?: string(name='NextStartTime', example='2022-02-02T22:22:22Z'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model ListLiveSnapshotFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLiveSnapshotFilesResponseBody(name='body'),
}

async function listLiveSnapshotFiles(request: ListLiveSnapshotFilesRequest): ListLiveSnapshotFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveSnapshotFiles', 'GET', '/', 'json', false, 'json', request);
}

model ListLiveSnapshotJobsRequest {
  endTime?: string(name='EndTime', example='2022-02-02T23:59:59Z', position='Query'),
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  searchKeyWord?: string(name='SearchKeyWord', example='****a046-263c-3560-978a-fb287782****', position='Query'),
  sortBy?: string(name='SortBy', example='desc', position='Query'),
  startTime?: string(name='StartTime', example='2022-02-02T00:00:00Z', position='Query'),
  status?: string(name='Status', position='Query'),
}

model ListLiveSnapshotJobsResponseBody = {
  jobList?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-07-20T02:48:58Z'),
      jobId?: string(name='JobId', example='****a046-263c-3560-978a-fb287782****'),
      jobName?: string(name='JobName'),
      snapshotOutput?: {
        bucket?: string(name='Bucket', example='testbucket'),
        endpoint?: string(name='Endpoint', example='oss-cn-shanghai.aliyuncs.com'),
        storageType?: string(name='StorageType', example='oss'),
      }(name='SnapshotOutput'),
      status?: string(name='Status', example='started'),
      templateId?: string(name='TemplateId', example='****a046-263c-3560-978a-fb287666****'),
      templateName?: string(name='TemplateName'),
      timeInterval?: int32(name='TimeInterval', example='5'),
    }
  ](name='JobList'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  sortBy?: string(name='SortBy', example='desc'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListLiveSnapshotJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLiveSnapshotJobsResponseBody(name='body'),
}

async function listLiveSnapshotJobs(request: ListLiveSnapshotJobsRequest): ListLiveSnapshotJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveSnapshotJobs', 'GET', '/', 'json', false, 'json', request);
}

model ListLiveSnapshotTemplatesRequest {
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  searchKeyWord?: string(name='SearchKeyWord', example='****a046-263c-3560-978a-fb287782****', position='Query'),
  sortBy?: string(name='SortBy', example='desc', position='Query'),
  templateIds?: [ string ](name='TemplateIds', position='Query'),
  type?: string(name='Type', example='custom', position='Query'),
}

model ListLiveSnapshotTemplatesResponseBody = {
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  sortBy?: string(name='SortBy', example='desc'),
  templateList?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-07-20T02:48:58Z'),
      templateId?: string(name='TemplateId', example='****a046-263c-3560-978a-fb287782****'),
      templateName?: string(name='TemplateName'),
      timeInterval?: int32(name='TimeInterval', example='10'),
      type?: string(name='Type', example='custom'),
    }
  ](name='TemplateList'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListLiveSnapshotTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLiveSnapshotTemplatesResponseBody(name='body'),
}

async function listLiveSnapshotTemplates(request: ListLiveSnapshotTemplatesRequest): ListLiveSnapshotTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveSnapshotTemplates', 'GET', '/', 'json', false, 'json', request);
}

model ListLiveTranscodeJobsRequest {
  keyWord?: string(name='KeyWord', example='24ecbb5c-4f98-4194-9400-f17102e27fc5', position='Query'),
  pageNo?: int32(name='PageNo', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, position='Query'),
  sortBy?: string(name='SortBy', example='asc', position='Query'),
  startMode?: int32(name='StartMode', example='0', position='Query'),
  status?: int32(name='Status', example='1', position='Query'),
  type?: string(name='Type', example='normal', position='Query'),
}

model ListLiveTranscodeJobsResponseBody = {
  jobList?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-07-20T02:48:58Z'),
      jobId?: string(name='JobId', example='****a046-263c-3560-978a-fb287782****'),
      name?: string(name='Name', example='mytask'),
      outputStream?: {
        streamInfos?: [ 
          {
            outputUrl?: string(name='OutputUrl', example='rtmp://mydomain/app/mytranscode1'),
            type?: string(name='Type', example='rtmp'),
          }
        ](name='StreamInfos'),
      }(name='OutputStream'),
      startMode?: int32(name='StartMode', example='0'),
      status?: int32(name='Status', example='1'),
      streamInput?: {
        inputUrl?: string(name='InputUrl', example='rtmp://mydomain/app/stream1'),
        type?: string(name='Type', example='rtmp'),
      }(name='StreamInput'),
      templateId?: string(name='TemplateId', example='****a046-263c-3560-978a-fb287666****'),
      templateName?: string(name='TemplateName'),
      templateType?: string(name='TemplateType', example='normal'),
    }
  ](name='JobList'),
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListLiveTranscodeJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLiveTranscodeJobsResponseBody(name='body'),
}

async function listLiveTranscodeJobs(request: ListLiveTranscodeJobsRequest): ListLiveTranscodeJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveTranscodeJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListLiveTranscodeTemplatesRequest {
  category?: string(name='Category', example='customized', position='Query'),
  keyWord?: string(name='KeyWord', example='my_template', position='Query'),
  pageNo?: int32(name='PageNo', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, position='Query'),
  sortBy?: string(name='SortBy', example='asc', position='Query'),
  type?: string(name='Type', example='normal', position='Query'),
  videoCodec?: string(name='VideoCodec', example='H.264', position='Query'),
}

model ListLiveTranscodeTemplatesResponseBody = {
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
  templateContentList?: [ 
    {
      category?: string(name='Category', example='system'),
      createTime?: string(name='CreateTime', example='2022-07-20T03:26:36Z'),
      name?: string(name='Name', example='my_template'),
      templateConfig?: {
        audioParams?: {
          bitrate?: string(name='Bitrate', example='1000'),
          channels?: string(name='Channels', example='2'),
          codec?: string(name='Codec', example='AAC'),
          profile?: string(name='Profile', example='aac_low'),
          samplerate?: string(name='Samplerate', example='44100'),
        }(name='AudioParams'),
        videoParams?: {
          bitrate?: string(name='Bitrate', example='2500'),
          codec?: string(name='Codec', example='264'),
          fps?: string(name='Fps', example='30'),
          gop?: string(name='Gop', example='1000'),
          height?: string(name='Height', example='1280'),
          profile?: string(name='Profile', example='3'),
          width?: string(name='Width', example='720'),
        }(name='VideoParams'),
      }(name='TemplateConfig'),
      templateId?: string(name='TemplateId', example='9b1571b513cb44f7a1ba6ae561ff46f7'),
      type?: string(name='Type', example='normal'),
    }
  ](name='TemplateContentList'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListLiveTranscodeTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLiveTranscodeTemplatesResponseBody(name='body'),
}

async function listLiveTranscodeTemplates(request: ListLiveTranscodeTemplatesRequest): ListLiveTranscodeTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveTranscodeTemplates', 'POST', '/', 'json', false, 'json', request);
}

model ListMediaBasicInfosRequest {
  regionId?: string(name='RegionId', position='Host'),
  businessType?: string(name='BusinessType', example='opening', position='Query'),
  endTime?: string(name='EndTime', example='2020-12-20T13:00:00Z', position='Query'),
  includeFileBasicInfo?: boolean(name='IncludeFileBasicInfo', example='true', position='Query'),
  maxResults?: int32(name='MaxResults', example='5', minimum=1, maximum=100, position='Query'),
  mediaId?: string(name='MediaId', example='****019b82e24b37a1c2958dec38****', position='Query'),
  mediaType?: string(name='MediaType', example='video', position='Query'),
  nextToken?: string(name='NextToken', example='pSa1SQ0wCe5pzVrQ6mWZEw==', position='Query'),
  sortBy?: string(name='SortBy', example='desc', position='Query'),
  source?: string(name='Source', example='oss', position='Query'),
  startTime?: string(name='StartTime', example='2020-12-20T12:00:00Z', position='Query'),
  status?: string(name='Status', example='Normal', position='Query'),
}

model ListMediaBasicInfosResponseBody = {
  maxResults?: int32(name='MaxResults', example='2'),
  mediaInfos?: [ 
    {
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', example='1912.13'),
            createTime?: string(name='CreateTime', example='2021-01-08T16:52:04Z'),
            duration?: string(name='Duration', example='60.00000'),
            fileName?: string(name='FileName', example='example.mp4'),
            fileSize?: string(name='FileSize', example='14340962'),
            fileStatus?: string(name='FileStatus', example='Normal'),
            fileType?: string(name='FileType', example='source_file'),
            fileUrl?: string(name='FileUrl', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example2.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
            formatName?: string(name='FormatName', example='mov,mp4,m4a,3gp,3g2,mj2'),
            height?: string(name='Height', example='720'),
            modifiedTime?: string(name='ModifiedTime', example='2021-01-08T16:52:07Z'),
            region?: string(name='Region', example='cn-shanghai'),
            width?: string(name='Width', example='1280'),
          }(name='FileBasicInfo'),
        }
      ](name='FileInfoList', description='FileInfos'),
      mediaBasicInfo?: {
        biz?: string(name='Biz', example='ICE'),
        businessType?: string(name='BusinessType', example='opening'),
        cateId?: long(name='CateId', example='3049'),
        category?: string(name='Category'),
        coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
        createTime?: string(name='CreateTime', example='2021-01-08T16:52:04Z'),
        deletedTime?: string(name='DeletedTime', example='2021-01-08T16:52:07Z'),
        description?: string(name='Description'),
        inputURL?: string(name='InputURL', example='https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4'),
        mediaId?: string(name='MediaId', example='****019b82e24b37a1c2958dec38****'),
        mediaTags?: string(name='MediaTags', example='tags,tags2'),
        mediaType?: string(name='MediaType', example='video'),
        modifiedTime?: string(name='ModifiedTime', example='2021-01-08T16:52:07Z'),
        referenceId?: string(name='ReferenceId', example='123-123'),
        snapshots?: string(name='Snapshots', example='[{"bucket":"example-bucket","count":"3","iceJobId":"******f48f0e4154976b2b8c45******","location":"oss-cn-beijing","snapshotRegular":"example.jpg","templateId":"******e6a6440b29eb60bd7c******"}]'),
        source?: string(name='Source', example='oss'),
        spriteImages?: string(name='SpriteImages', example='[{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]'),
        status?: string(name='Status', example='Normal'),
        title?: string(name='Title'),
        transcodeStatus?: string(name='TranscodeStatus', example='Init'),
        uploadSource?: string(name='UploadSource', example='general'),
        userData?: string(name='UserData', example='userData'),
      }(name='MediaBasicInfo', description='BasicInfo'),
      mediaId?: string(name='MediaId', example='****019b82e24b37a1c2958dec38****'),
    }
  ](name='MediaInfos'),
  nextToken?: string(name='NextToken', example='8EqYpQbZ6Eh7+Zz8DxVYoQ=='),
  requestId?: string(name='RequestId', example='******B7-7F87-4792-BFE9-63CD21******'),
  totalCount?: long(name='TotalCount', example='4'),
}

model ListMediaBasicInfosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMediaBasicInfosResponseBody(name='body'),
}

async function listMediaBasicInfos(request: ListMediaBasicInfosRequest): ListMediaBasicInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMediaBasicInfos', 'POST', '/', 'json', false, 'json', request);
}

model ListMediaInfoJobsRequest {
  endOfCreateTime?: string(name='EndOfCreateTime', example='2022-07-15T00:00:00Z', position='Query'),
  jobId?: string(name='JobId', example='7b38a5d86f1e47838927b6e7ccb11cbe', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='ab4802364a2e49208c99efab82dfa8e8', position='Query'),
  orderBy?: string(name='OrderBy', example='CreateTimeDesc', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  startOfCreateTime?: string(name='StartOfCreateTime', example='2022-07-01T00:00:00Z', position='Query'),
  status?: string(name='Status', example='Success', position='Query'),
}

model ListMediaInfoJobsResponseBody = {
  jobs?: [ 
    {
      async?: boolean(name='Async', example='true'),
      finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
      input?: {
        media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
        type?: string(name='Type', example='OSS'),
      }(name='Input'),
      jobId?: string(name='JobId', example='ab4802364a2e49208c99efab82dfa8e8'),
      mediaInfoProperty?: {
        audioStreamInfoList?: [ 
          {
            bitrate?: string(name='Bitrate', example='0.f'),
            channelLayout?: string(name='ChannelLayout', example='stereo'),
            channels?: string(name='Channels', example='2'),
            codecLongName?: string(name='CodecLongName', example='AAC (Advanced Audio Coding)'),
            codecName?: string(name='CodecName', example='aac'),
            codecTag?: string(name='CodecTag', example='0x000f'),
            codecTagString?: string(name='CodecTagString', example='[15][0][0][0]'),
            codecTimeBase?: string(name='CodecTimeBase', example='1/44100'),
            duration?: string(name='Duration', example='403.039989'),
            index?: string(name='Index', example='1'),
            lang?: string(name='Lang', example='cn'),
            sampleFmt?: string(name='SampleFmt', example='fltp'),
            sampleRate?: string(name='SampleRate', example='44100'),
            startTime?: string(name='StartTime', example='1.473556'),
            timebase?: string(name='Timebase', example='1/90000'),
          }
        ](name='AudioStreamInfoList'),
        fileBasicInfo?: {
          bitrate?: string(name='Bitrate', example='888.563'),
          duration?: string(name='Duration', example='403.039999'),
          fileName?: string(name='FileName', example='file.m3u8'),
          fileSize?: string(name='FileSize', example='31737'),
          fileStatus?: string(name='FileStatus', example='Normal'),
          fileType?: string(name='FileType', example='source_file'),
          fileUrl?: string(name='FileUrl', example='http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8'),
          formatName?: string(name='FormatName', example='hls,applehttp'),
          height?: string(name='Height', example='478'),
          mediaId?: string(name='MediaId', example='4765337007f571edbfdf81848c016303'),
          region?: string(name='Region', example='cn-shanghai'),
          width?: string(name='Width', example='848'),
        }(name='FileBasicInfo'),
        videoStreamInfoList?: [ 
          {
            avgFps?: string(name='Avg_fps', example='25.0'),
            bitRate?: string(name='Bit_rate', example='888.563'),
            codecLongName?: string(name='Codec_long_name', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
            codecName?: string(name='Codec_name', example='h264'),
            codecTag?: string(name='Codec_tag', example='0x001b'),
            codecTagString?: string(name='Codec_tag_string', example='[27][0][0][0]'),
            codecTimeBase?: string(name='Codec_time_base', example='1/50'),
            dar?: string(name='Dar', example='16:9'),
            duration?: string(name='Duration', example='403.039989'),
            fps?: string(name='Fps', example='25.0'),
            hasBFrames?: string(name='Has_b_frames', example='2'),
            height?: string(name='Height', example='478'),
            index?: string(name='Index', example='0'),
            lang?: string(name='Lang', example='cn'),
            level?: string(name='Level', example='31'),
            numFrames?: string(name='NumFrames', example='10040'),
            pixFmt?: string(name='PixFmt', example='yuv420p'),
            profile?: string(name='Profile', example='High'),
            rotate?: string(name='Rotate', example='0'),
            sar?: string(name='Sar', example='478:477'),
            startTime?: string(name='Start_time', example='1.473556'),
            timeBase?: string(name='Time_base', example='1/90000'),
            width?: string(name='Width', example='848'),
          }
        ](name='VideoStreamInfoList'),
      }(name='MediaInfoProperty'),
      name?: string(name='Name', example='job-name'),
      requestId?: string(name='RequestId', example='4879B9DE-E4B6-19DC-91F5-9D5F4DCE4168'),
      scheduleConfig?: {
        pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
        priority?: int32(name='Priority', example='5'),
      }(name='ScheduleConfig'),
      status?: string(name='Status', example='Init'),
      submitResultJson?: map[string]any(name='SubmitResultJson'),
      submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
      triggerSource?: string(name='TriggerSource', example='API'),
      userData?: string(name='UserData', example='user-data'),
    }
  ](name='Jobs'),
  nextPageToken?: string(name='NextPageToken', example='019daf5780f74831b0e1a767c9f1c178'),
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model ListMediaInfoJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMediaInfoJobsResponseBody(name='body'),
}

async function listMediaInfoJobs(request: ListMediaInfoJobsRequest): ListMediaInfoJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMediaInfoJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListMediaMarksRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaId?: string(name='MediaId', example='411bed50018971edb60b0764a0ec6***', position='Query'),
  mediaMarkIds?: string(name='MediaMarkIds', example='mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60', position='Query'),
}

model ListMediaMarksResponseBody = {
  mediaId?: string(name='MediaId', example='******b48fb04483915d4f2cd8******'),
  mediaMarks?: string(name='MediaMarks'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model ListMediaMarksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMediaMarksResponseBody(name='body'),
}

async function listMediaMarks(request: ListMediaMarksRequest): ListMediaMarksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMediaMarks', 'POST', '/', 'json', false, 'json', request);
}

model ListMediaProducingJobsRequest {
  regionId?: string(name='RegionId', position='Host'),
  endTime?: string(name='EndTime', example='2022-02-02T23:59:59Z', position='Query'),
  jobType?: string(name='JobType', example='EditingJob', position='Query'),
  keyword?: string(name='Keyword', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  masterJobId?: string(name='MasterJobId', example='******8750b54e3c976a47da6f******', position='Query'),
  maxResults?: int32(name='MaxResults', example='100', position='Query'),
  nextToken?: string(name='NextToken', example='8EqYpQbZ6Eh7+Zz8DxVYoQ==', position='Query'),
  sortBy?: string(name='SortBy', example='CreationTime:Desc', position='Query'),
  startTime?: string(name='StartTime', example='2017-01-11T12:00:00Z', position='Query'),
  status?: string(name='Status', example='Success', position='Query'),
}

model ListMediaProducingJobsResponseBody = {
  maxResults?: string(name='MaxResults', example='100'),
  mediaProducingJobList?: [ 
    {
      clipsParam?: string(name='ClipsParam'),
      code?: string(name='Code', example='Success'),
      completeTime?: string(name='CompleteTime', example='2022-03-21T16:40:30Z'),
      createTime?: string(name='CreateTime', example='2022-03-21T16:40:00Z'),
      duration?: float(name='Duration', example='15.5'),
      jobId?: string(name='JobId', example='******8750b54e3c976a47da6f******'),
      mediaId?: string(name='MediaId', example='0ce4ea70f52471edab61f7e7d6786302'),
      mediaURL?: string(name='MediaURL', example='http://your-bucket.oss-cn-shanghai.aliyuncs.com/your-video.mp4'),
      message?: string(name='Message'),
      modifiedTime?: string(name='ModifiedTime', example='2022-03-21T16:41:00Z'),
      projectId?: string(name='ProjectId', example='******faa3b542f5a6135217e3******'),
      status?: string(name='Status', example='Sucess'),
      templateId?: string(name='TemplateId', example='cb786a39c5d44cecb23d8c864facffc1'),
      userData?: string(name='UserData'),
    }
  ](name='MediaProducingJobList'),
  nextToken?: string(name='NextToken', example='8EqYpQbZ6Eh7+Zz8DxVYoQ=='),
  requestId?: string(name='RequestId', description='Id of the request', example='******11-DB8D-4A9A-875B-275798******'),
}

model ListMediaProducingJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMediaProducingJobsResponseBody(name='body'),
}

async function listMediaProducingJobs(request: ListMediaProducingJobsRequest): ListMediaProducingJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMediaProducingJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListPackageJobsRequest {
  endOfCreateTime?: string(name='EndOfCreateTime', example='2022-07-15T00:00:00Z', position='Query'),
  jobId?: string(name='JobId', example='7b38a5d86f1e47838927b6e7ccb11cbe', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='ab4802364a2e49208c99efab82dfa8e8', position='Query'),
  orderBy?: string(name='OrderBy', example='CreateTimeDesc', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  startOfCreateTime?: string(name='StartOfCreateTime', example='2022-07-01T00:00:00Z', position='Query'),
  status?: string(name='Status', example='Success', position='Query'),
}

model ListPackageJobsResponseBody = {
  packageJobList?: {
    nextPageToken?: string(name='NextPageToken', example='019daf5780f74831b0e1a767c9f1c178'),
    packageJobs?: [ 
      {
        code?: string(name='Code', example='InvalidParameter'),
        createTime?: string(name='CreateTime', example='2022-07-07T14:00:32Z'),
        finishTime?: string(name='FinishTime', example='2022-07-07T15:00:32Z'),
        inputs?: [ 
          {
            input?: {
              media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
              type?: string(name='Type', example='OSS'),
            }(name='Input'),
          }
        ](name='Inputs'),
        jobId?: string(name='JobId', example='7b38a5d86f1e47838927b6e7ccb11cbe'),
        message?: string(name='Message', example='Resource content bad.'),
        modifiedTime?: string(name='ModifiedTime', example='2022-07-07T15:00:32Z'),
        name?: string(name='Name', example='job-name'),
        output?: {
          media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
          type?: string(name='Type', example='OSS'),
        }(name='Output'),
        pipelineId?: string(name='PipelineId', example='5b40833e4c3e4d4e95a866abb9a42510'),
        priority?: int32(name='Priority', example='6'),
        status?: string(name='Status', example='Success'),
        submitTime?: string(name='SubmitTime', example='2022-07-07T14:00:32Z'),
        triggerSource?: string(name='TriggerSource', example='API'),
        userData?: string(name='UserData', example='{"param": "value"}'),
      }
    ](name='PackageJobs'),
  }(name='PackageJobList'),
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model ListPackageJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPackageJobsResponseBody(name='body'),
}

async function listPackageJobs(request: ListPackageJobsRequest): ListPackageJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPackageJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListPipelinesRequest {
  speed?: string(name='Speed', example='Standard', position='Query'),
}

model ListPipelinesResponseBody = {
  pipelineList?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
      modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:17:54Z'),
      name?: string(name='Name', example='test-pipeline'),
      pipelineId?: string(name='PipelineId', example='****20b48fb04483915d4f2cd8ac****'),
      priority?: int32(name='Priority', example='6'),
      speed?: string(name='Speed', example='Standard'),
      status?: string(name='Status', example='Active'),
    }
  ](name='PipelineList'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model ListPipelinesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPipelinesResponseBody(name='body'),
}

async function listPipelines(request: ListPipelinesRequest): ListPipelinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPipelines', 'POST', '/', 'json', false, 'json', request);
}

model ListPublicMediaBasicInfosRequest {
  regionId?: string(name='RegionId', position='Host'),
  businessType?: string(name='BusinessType', position='Query'),
  includeFileBasicInfo?: boolean(name='IncludeFileBasicInfo', example='true', position='Query'),
  maxResults?: int32(name='MaxResults', example='5', minimum=1, maximum=100, position='Query'),
  mediaTagId?: string(name='MediaTagId', example='ticker-atmosphere', position='Query'),
  nextToken?: string(name='NextToken', example='pSa1SQ0wCe5pzVrQ6mWZEw==', position='Query'),
  pageNo?: int32(name='PageNo', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
}

model ListPublicMediaBasicInfosResponseBody = {
  maxResults?: int32(name='MaxResults', example='2'),
  mediaInfos?: [ 
    {
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', example='270112.12'),
            duration?: string(name='Duration', example='10.040000'),
            fileName?: string(name='FileName', example='example.mp4'),
            fileSize?: string(name='FileSize', example='338990717'),
            fileStatus?: string(name='FileStatus', example='Normal'),
            fileType?: string(name='FileType', example='source_file'),
            fileUrl?: string(name='FileUrl', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
            formatName?: string(name='FormatName', example='mov,mp4,m4a,3gp,3g2,mj2'),
            height?: string(name='Height', example='1080'),
            region?: string(name='Region', example='cn-shanghai'),
            width?: string(name='Width', example='1920'),
          }(name='FileBasicInfo'),
        }
      ](name='FileInfoList', description='FileInfos'),
      mediaBasicInfo?: {
        businessType?: string(name='BusinessType', example='general'),
        category?: string(name='Category', example='video'),
        coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
        createTime?: string(name='CreateTime', example='2021-01-08T16:52:04Z'),
        deletedTime?: string(name='DeletedTime', example='2021-01-08T16:52:04Z'),
        description?: string(name='Description', example='description'),
        inputURL?: string(name='InputURL', example='https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4'),
        mediaId?: string(name='MediaId', description='MediaId', example='****019b82e24b37a1c2958dec38****'),
        mediaTags?: string(name='MediaTags', example='sticker-daily'),
        mediaType?: string(name='MediaType', example='video'),
        modifiedTime?: string(name='ModifiedTime', example='2021-01-08T16:52:04Z'),
        snapshots?: string(name='Snapshots', example='null'),
        source?: string(name='Source', example='oss'),
        status?: string(name='Status', example='Normal'),
        title?: string(name='Title'),
        transcodeStatus?: string(name='TranscodeStatus', example='Init'),
        userData?: string(name='UserData', example='userData'),
      }(name='MediaBasicInfo', description='BasicInfo'),
      mediaId?: string(name='MediaId', example='****019b82e24b37a1c2958dec38****'),
    }
  ](name='MediaInfos'),
  nextToken?: string(name='NextToken', example='8EqYpQbZ6Eh7+Zz8DxVYoQ=='),
  requestId?: string(name='RequestId', example='******B7-7F87-4792-BFE9-63CD21******'),
  totalCount?: long(name='TotalCount', example='2'),
}

model ListPublicMediaBasicInfosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPublicMediaBasicInfosResponseBody(name='body'),
}

async function listPublicMediaBasicInfos(request: ListPublicMediaBasicInfosRequest): ListPublicMediaBasicInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPublicMediaBasicInfos', 'POST', '/', 'json', false, 'json', request);
}

model ListSmartJobsRequest {
  jobState?: string(name='JobState', example='Finished', position='Query'),
  jobType?: string(name='JobType', example='ASR', position='Query'),
  maxResults?: long(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='****73f33c91-d59383e8280b****', position='Query'),
  pageNo?: long(name='PageNo', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  sortBy?: string(name='SortBy', example='CreationTime:Desc', position='Query'),
}

model ListSmartJobsResponseBody = {
  maxResults?: string(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='CBB6BC61D08'),
  requestId?: string(name='RequestId', example='****9262E3DA-07FA-4862-FCBB6BC61D08*****'),
  smartJobList?: [ 
    {
      createTime?: string(name='CreateTime', example='2020-12-26T04:11:10Z'),
      description?: string(name='Description', example='测试描述'),
      editingConfig?: string(name='EditingConfig', example='{"AudioConfig":{},"InputConfig":""}'),
      inputConfig?: {
        inputFile?: string(name='InputFile', example='oss://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4'),
        keyword?: string(name='Keyword', example='测试关键词'),
      }(name='InputConfig'),
      jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
      jobState?: string(name='JobState', example='Finished'),
      jobType?: string(name='JobType', example='ASR'),
      modifiedTime?: string(name='ModifiedTime', example='2020-12-26T04:11:10Z'),
      outputConfig?: {
        bucket?: string(name='Bucket', description='OSS Bucket', example='test-bucket'),
        object?: string(name='Object', description='OSS Object', example='test-object'),
      }(name='OutputConfig'),
      title?: string(name='Title', example='测试标题'),
      userData?: string(name='UserData', example='{"user":"data"}'),
      userId?: long(name='UserId', example='1084506228******'),
    }
  ](name='SmartJobList'),
  totalCount?: string(name='TotalCount', example='110'),
}

model ListSmartJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSmartJobsResponseBody(name='body'),
}

async function listSmartJobs(request: ListSmartJobsRequest): ListSmartJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSmartJobs', 'GET', '/', 'json', false, 'json', request);
}

model ListSmartSysAvatarModelsRequest {
  pageNo?: long(name='PageNo', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  sdkVersion?: string(name='SdkVersion', position='Query'),
}

model ListSmartSysAvatarModelsResponseBody = {
  requestId?: string(name='RequestId', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
  smartSysAvatarModelList?: [ 
    {
      avatarId?: string(name='AvatarId', example='yunqiao'),
      avatarName?: string(name='AvatarName'),
      bitrate?: int32(name='Bitrate'),
      coverUrl?: string(name='CoverUrl', example='http://ice-pub-media.myalicdn.com/smart/avatarModel/coverDemo/yunqiao.mp4'),
      height?: int32(name='Height'),
      outputMask?: boolean(name='OutputMask'),
      videoUrl?: string(name='VideoUrl', example='http://ice-pub-media.myalicdn.com/smart/avatarModel/videoDemo/yunqiao.mp4'),
      width?: int32(name='Width'),
    }
  ](name='SmartSysAvatarModelList'),
  totalCount?: int32(name='TotalCount', example='4'),
}

model ListSmartSysAvatarModelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSmartSysAvatarModelsResponseBody(name='body'),
}

async function listSmartSysAvatarModels(request: ListSmartSysAvatarModelsRequest): ListSmartSysAvatarModelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSmartSysAvatarModels', 'POST', '/', 'json', false, 'json', request);
}

model ListSmartVoiceGroupsRequest {
}

model ListSmartVoiceGroupsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  voiceGroups?: [ 
    {
      type?: string(name='Type'),
      voiceList?: [ 
        {
          desc?: string(name='Desc'),
          name?: string(name='Name'),
          remark?: string(name='Remark'),
          tag?: string(name='Tag'),
          voice?: string(name='Voice', example='zhitian'),
          voiceType?: string(name='VoiceType', example='Female'),
          voiceUrl?: string(name='VoiceUrl', example='https://***.com/zhiqing.mp3'),
        }
      ](name='VoiceList'),
    }
  ](name='VoiceGroups'),
}

model ListSmartVoiceGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSmartVoiceGroupsResponseBody(name='body'),
}

async function listSmartVoiceGroups(request: ListSmartVoiceGroupsRequest): ListSmartVoiceGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSmartVoiceGroups', 'GET', '/', 'json', false, 'json', request);
}

model ListSnapshotJobsRequest {
  endOfCreateTime?: string(name='EndOfCreateTime', example='2022-07-14T00:00:00Z', position='Query'),
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  orderBy?: string(name='OrderBy', example='CreateTimeDesc', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  startOfCreateTime?: string(name='StartOfCreateTime', example='2022-07-12T00:00:00Z', position='Query'),
  status?: string(name='Status', example='Success', position='Query'),
}

model ListSnapshotJobsResponseBody = {
  jobs?: [ 
    {
      async?: boolean(name='Async', example='true'),
      count?: int32(name='Count', example='10'),
      createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
      finishTime?: string(name='FinishTime', example='2022-07-12T16:30:54Z'),
      input?: {
        media?: string(name='Media', example='oss://bucket/object.mp4'),
        type?: string(name='Type', example='OSS'),
      }(name='Input'),
      jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
      modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:30:54Z'),
      name?: string(name='Name', example='SampleJob'),
      output?: {
        media?: string(name='Media', example='http://test-bucket.oss-cn-shanghai.aliyuncs.com/output-{Count}.jpg'),
        type?: string(name='Type', example='OSS'),
      }(name='Output'),
      pipelineId?: string(name='PipelineId', example='****20b48fb04483915d4f2cd8ac****'),
      status?: string(name='Status', example='Success'),
      submitTime?: string(name='SubmitTime', example='2022-07-12T16:17:54Z'),
      templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
      triggerSource?: string(name='TriggerSource', example='API'),
      type?: string(name='Type', example='Sprite'),
    }
  ](name='Jobs'),
  nextPageToken?: string(name='NextPageToken', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model ListSnapshotJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSnapshotJobsResponseBody(name='body'),
}

async function listSnapshotJobs(request: ListSnapshotJobsRequest): ListSnapshotJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSnapshotJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListSystemTemplatesRequest {
  name?: string(name='Name', example='SampleTemplate', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  status?: string(name='Status', example='Normal', position='Query'),
  subtype?: string(name='Subtype', example='1', position='Query'),
  templateId?: string(name='TemplateId', example='****96e8864746a0b6f3****', position='Query'),
  type: string(name='Type', example='1,2', position='Query'),
}

model ListSystemTemplatesResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  systemTemplateList?: [ 
    {
      status?: string(name='Status', example='Normal'),
      subtype?: int32(name='Subtype', example='1'),
      subtypeName?: string(name='SubtypeName', example='Remux'),
      templateConfig?: string(name='TemplateConfig', example='{"Container":{"Format":"flv"},"Video":{},"Audio":{}}'),
      templateId?: string(name='TemplateId', example='S00000001-000000'),
      templateName?: string(name='TemplateName', example='FLV-COPY'),
      type?: int32(name='Type', example='1'),
      typeName?: string(name='TypeName', example='TranscodeTemplate'),
    }
  ](name='SystemTemplateList'),
  total?: int32(name='Total', example='20'),
}

model ListSystemTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSystemTemplatesResponseBody(name='body'),
}

async function listSystemTemplates(request: ListSystemTemplatesRequest): ListSystemTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSystemTemplates', 'POST', '/', 'json', false, 'json', request);
}

model ListTemplatesRequest {
  createSource?: string(name='CreateSource', example='OpenAPI', position='Query'),
  keyword?: string(name='Keyword', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  pageNo?: long(name='PageNo', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
  sortType?: string(name='SortType', example='CreationTime:Desc', position='Query'),
  status?: string(name='Status', example='Available', position='Query'),
  type?: string(name='Type', example='Timeline', position='Query'),
}

model ListTemplatesResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  templates?: [ 
    {
      clipsParam?: string(name='ClipsParam', description='ClipsParam', example='{"Media1":"mediaId","Text1":"text"}'),
      config?: string(name='Config', example='参考Timeline模板配置详解'),
      coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg'),
      createSource?: string(name='CreateSource', example='OpenAPI'),
      creationTime?: string(name='CreationTime', example='2020-12-26T04:11:10Z'),
      modifiedSource?: string(name='ModifiedSource', example='OpenAPI'),
      modifiedTime?: string(name='ModifiedTime', example='2020-12-26T04:11:10Z'),
      name?: string(name='Name', example='视频添加水印模板'),
      previewMedia?: string(name='PreviewMedia', example='****20b48fb04483915d4f2cd8ac****'),
      previewMediaStatus?: string(name='PreviewMediaStatus', example='Normal'),
      status?: string(name='Status', example='Available'),
      templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
      type?: string(name='Type', example='Timeline'),
    }
  ](name='Templates'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTemplatesResponseBody(name='body'),
}

async function listTemplates(request: ListTemplatesRequest): ListTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTemplates', 'POST', '/', 'json', false, 'json', request);
}

model ListTranscodeJobsRequest {
  endOfCreateTime?: string(name='EndOfCreateTime', example='2022-07-15T00:00:00Z', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='ab4802364a2e49208c99efab82dfa8e8', position='Query'),
  orderBy?: string(name='OrderBy', example='CreateTimeDesc', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  parentJobId?: string(name='ParentJobId', example='7b38a5d86f1e47838927b6e7ccb11cbe', position='Query'),
  startOfCreateTime?: string(name='StartOfCreateTime', example='2022-07-01T00:00:00Z', position='Query'),
  status?: string(name='Status', example='Success', position='Query'),
}

model ListTranscodeJobsResponseBody = {
  jobs?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-01-12T08:49:41Z'),
      finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
      inputGroup?: [ 
        {
          inputUrl?: string(name='InputUrl'),
          media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
          type?: string(name='Type', example='OSS'),
        }
      ](name='InputGroup'),
      jobCount?: int32(name='JobCount', example='1'),
      name?: string(name='Name', example='transcode-job'),
      outputGroup?: [ 
        {
          output?: {
            media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
            outputUrl?: string(name='OutputUrl'),
            type?: string(name='Type', example='OSS'),
          }(name='Output'),
          processConfig?: {
            combineConfigs?: [ 
              {
                audioIndex: string(name='AudioIndex', example='0 或 exclude'),
                duration?: double(name='Duration', example='20.0'),
                start?: double(name='Start', example='0.0'),
                videoIndex: string(name='VideoIndex', example='0 或 exclude'),
              }
            ](name='CombineConfigs'),
            encryption?: {
              cipherText?: string(name='CipherText', example='MTYi00NDU0LTg5O****'),
              decryptKeyUri?: string(name='DecryptKeyUri', example='https://sample.com/path?CipherText=MTYi00NDU0LTg5O****'),
              encryptType?: string(name='EncryptType', example='PrivateEncryption'),
            }(name='Encryption'),
            imageWatermarks?: [ 
              {
                overwriteParams?: {
                  dx?: string(name='Dx', example='10'),
                  dy?: string(name='Dy', example='10'),
                  file?: {
                    media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                    type?: string(name='Type', example='OSS'),
                  }(name='File'),
                  height?: string(name='Height', example='32'),
                  referPos?: string(name='ReferPos', example='TopLeft'),
                  timeline?: {
                    duration?: string(name='Duration', example='ToEND'),
                    start?: string(name='Start', example='00:00:05'),
                  }(name='Timeline'),
                  width?: string(name='Width', example='32'),
                }(name='OverwriteParams'),
                templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
              }
            ](name='ImageWatermarks'),
            isInheritTags?: boolean(name='IsInheritTags'),
            subtitles?: [ 
              {
                overwriteParams?: {
                  charEnc?: string(name='CharEnc', example='UTF-8'),
                  file?: {
                    media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                    type?: string(name='Type', example='OSS'),
                  }(name='File'),
                  format?: string(name='Format', example='vtt'),
                }(name='OverwriteParams'),
                templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
              }
            ](name='Subtitles'),
            textWatermarks?: [ 
              {
                overwriteParams?: {
                  adaptive?: string(name='Adaptive', example='false'),
                  borderColor?: string(name='BorderColor', example='#006400'),
                  borderWidth?: int32(name='BorderWidth', example='0'),
                  content?: string(name='Content', example='测试水印'),
                  fontAlpha?: string(name='FontAlpha', example='1.0'),
                  fontColor?: string(name='FontColor', example='#006400'),
                  fontName?: string(name='FontName', example='SimSun'),
                  fontSize?: int32(name='FontSize', example='16'),
                  left?: string(name='Left', example='10'),
                  top?: string(name='Top', example='10'),
                }(name='OverwriteParams'),
                templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
              }
            ](name='TextWatermarks'),
            transcode?: {
              overwriteParams?: {
                audio?: {
                  bitrate?: string(name='Bitrate', example='128'),
                  channels?: string(name='Channels', example='2'),
                  codec?: string(name='Codec', example='AAC'),
                  profile?: string(name='Profile', example='aac_low'),
                  remove?: string(name='Remove', example='false'),
                  samplerate?: string(name='Samplerate', example='44100'),
                  volume?: {
                    integratedLoudnessTarget?: string(name='IntegratedLoudnessTarget', example='-6'),
                    loudnessRangeTarget?: string(name='LoudnessRangeTarget', example='8'),
                    method?: string(name='Method', example='auto'),
                    truePeak?: string(name='TruePeak', example='-1'),
                  }(name='Volume'),
                }(name='Audio'),
                container?: {
                  format?: string(name='Format', example='mp4'),
                }(name='Container'),
                muxConfig?: {
                  segment?: {
                    duration?: string(name='Duration', example='10'),
                    forceSegTime?: string(name='ForceSegTime', example='2,3'),
                  }(name='Segment'),
                }(name='MuxConfig'),
                tags?: map[string]string(name='Tags'),
                video?: {
                  abrMax?: string(name='AbrMax', example='6000'),
                  bitrate?: string(name='Bitrate', example='3000'),
                  bufsize?: string(name='Bufsize', example='6000'),
                  codec?: string(name='Codec', example='H.264'),
                  crf?: string(name='Crf', example='23'),
                  crop?: string(name='Crop', example='1280:800:0:140'),
                  fps?: string(name='Fps', example='25'),
                  gop?: string(name='Gop', example='250'),
                  height?: string(name='Height', example='1080'),
                  longShortMode?: string(name='LongShortMode', example='false'),
                  maxrate?: string(name='Maxrate', example='9000'),
                  pad?: string(name='Pad', example='1280:800:0:140'),
                  pixFmt?: string(name='PixFmt', example='yuv420p'),
                  preset?: string(name='Preset', example='medium'),
                  profile?: string(name='Profile', example='Main'),
                  remove?: string(name='Remove', example='false'),
                  scanMode?: string(name='ScanMode', example='progressive'),
                  width?: string(name='Width', example='1920'),
                }(name='Video'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }(name='Transcode'),
          }(name='ProcessConfig'),
        }
      ](name='OutputGroup'),
      parentJobId?: string(name='ParentJobId', example='8b2198504dd340b7b3c9842a74fc9baa'),
      percent?: int32(name='Percent', example='0'),
      requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
      scheduleConfig?: {
        pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
        priority?: int32(name='Priority', example='5'),
      }(name='ScheduleConfig'),
      status?: string(name='Status', example='Success'),
      submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
      triggerSource?: string(name='TriggerSource', example='API'),
      userData?: string(name='UserData', example='user-data'),
    }
  ](name='Jobs'),
  nextPageToken?: string(name='NextPageToken', example='019daf5780f74831b0e1a767c9f1c178'),
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model ListTranscodeJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTranscodeJobsResponseBody(name='body'),
}

async function listTranscodeJobs(request: ListTranscodeJobsRequest): ListTranscodeJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTranscodeJobs', 'POST', '/', 'json', false, 'json', request);
}

model QueryDNAJobListRequest {
  jobIds?: string(name='JobIds', example='88c6ca184c0e47098a5b665e2a12****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryDNAJobListResponseBody = {
  jobList?: [ 
    {
      code?: string(name='Code', example='"InvalidParameter.ResourceNotFound"'),
      config?: string(name='Config', example='{"SaveType": "save","MediaType"":"video"}'),
      creationTime?: string(name='CreationTime', example='2022-12-28T03:21:37Z'),
      DBId?: string(name='DBId', example='2288c6ca184c0e47098a5b665e2a12****'),
      DNAResult?: string(name='DNAResult', example='http://test_bucket.oss-cn-shanghai.aliyuncs.com/fingerprint/video/search_result/5/5.txt'),
      finishTime?: string(name='FinishTime', example='2022-12-28T03:21:44Z'),
      id?: string(name='Id', example='88c6ca184c0e47098a5b665e2a12****'),
      input?: {
        media?: string(name='Media', example='1b1b9cd148034739af413150fded****'),
        type?: string(name='Type', example='Media'),
      }(name='Input'),
      message?: string(name='Message', example='"The resource operated \\"a887d0b***d805ef6f7f6786302\\" cannot be found"'),
      primaryKey?: string(name='PrimaryKey', example='3ca84a39a9024f19853b21be9cf9****'),
      status?: string(name='Status', example='Queuing'),
      userData?: string(name='UserData', example='testdna'),
    }
  ](name='JobList'),
  requestId?: string(name='RequestId', example='25818875-5F78-4A13-BEF6-D7393642CA58'),
}

model QueryDNAJobListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDNAJobListResponseBody(name='body'),
}

async function queryDNAJobList(request: QueryDNAJobListRequest): QueryDNAJobListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDNAJobList', 'POST', '/', 'json', false, 'json', request);
}

model QueryIProductionJobRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  jobId: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model QueryIProductionJobResponseBody = {
  createTime?: string(name='CreateTime', example='2022-07-07T07:16:11Z'),
  finishTime?: string(name='FinishTime', example='2021-11-26T14:50:25Z'),
  functionName?: string(name='FunctionName', example='Cover'),
  input?: {
    media?: string(name='Media', example='oss://bucket/object'),
    type?: string(name='Type', example='OSS'),
  }(name='Input'),
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  jobParams?: string(name='JobParams', example='{"Model":"gif"}'),
  name?: string(name='Name'),
  output?: {
    media?: string(name='Media', example='oss://bucket/object'),
    type?: string(name='Type', example='OSS'),
  }(name='Output'),
  outputFiles?: [ string ](name='OutputFiles'),
  outputUrls?: [ string ](name='OutputUrls'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result', example='{}'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='a54fdc9c9aab413caef0d1150f565e86'),
    priority?: int32(name='Priority', example='6'),
  }(name='ScheduleConfig'),
  status?: string(name='Status', example='Success'),
  templateId?: string(name='TemplateId', example='****96e8864746a0b6f3****'),
  userData?: string(name='UserData', example='{"test":1}'),
}

model QueryIProductionJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryIProductionJobResponseBody(name='body'),
}

async function queryIProductionJob(request: QueryIProductionJobRequest): QueryIProductionJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryIProductionJob', 'POST', '/', 'json', false, 'json', request);
}

model QueryMediaCensorJobDetailRequest {
  jobId: string(name='JobId', example='2288c6ca184c0e47098a5b665e2a12****', position='Query'),
  maximumPageSize?: long(name='MaximumPageSize', example='30', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='ae0fd49c0840e14daf0d66a75b83****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryMediaCensorJobDetailResponseBody = {
  mediaCensorJobDetail?: {
    barrageCensorResult?: {
      label?: string(name='Label', example='normal'),
      rate?: string(name='Rate', example='99.91'),
      scene?: string(name='Scene', example='antispam'),
      suggestion?: string(name='Suggestion', example='pass'),
    }(name='BarrageCensorResult'),
    code?: string(name='Code', example='InvalidParameter.ResourceNotFound'),
    coverImageCensorResults?: {
      coverImageCensorResult?: [ 
      {
        bucket?: string(name='Bucket', example='bucket-out-test-****'),
        location?: string(name='Location', example='oss-cn-shanghai'),
        object?: string(name='Object', example='test/ai/censor/v2/vme-****.jpg'),
        results?: {
          result?: [ 
          {
            label?: string(name='Label', example='Normal'),
            rate?: string(name='Rate', example='100'),
            scene?: string(name='Scene', example='Antispam'),
            suggestion?: string(name='Suggestion', example='pass'),
          }
        ](name='Result')
        }(name='Results'),
      }
    ](name='CoverImageCensorResult')
    }(name='CoverImageCensorResults'),
    creationTime?: string(name='CreationTime', example='2018-09-13T16:32:24Z'),
    descCensorResult?: {
      label?: string(name='Label', example='terrorism'),
      rate?: string(name='Rate', example='100'),
      scene?: string(name='Scene', example='antispam'),
      suggestion?: string(name='Suggestion', example='review'),
    }(name='DescCensorResult'),
    finishTime?: string(name='FinishTime', example='2018-09-13T16:38:24Z'),
    input?: {
      bucket?: string(name='Bucket', example='bucket-test-in-****'),
      location?: string(name='Location', example='oss-cn-shanghai'),
      object?: string(name='Object', example='test/ai/censor/test-****.mp4'),
    }(name='Input'),
    jobId?: string(name='JobId', example='f8f166eea7a44e9bb0a4aecf9543****'),
    message?: string(name='Message', example='The resource operated cannot be found'),
    pipelineId?: string(name='PipelineId', example='c5b30b7c0d0e4a0abde1d5f9e751****'),
    state?: string(name='State', example='Success'),
    suggestion?: string(name='Suggestion', example='block'),
    titleCensorResult?: {
      label?: string(name='Label', example='meaningless'),
      rate?: string(name='Rate', example='99.91'),
      scene?: string(name='Scene', example='antispam'),
      suggestion?: string(name='Suggestion', example='block'),
    }(name='TitleCensorResult'),
    userData?: string(name='UserData', example='example userdata ****'),
    vensorCensorResult?: {
      censorResults?: {
        censorResult?: [ 
        {
          label?: string(name='Label', example='meaningless'),
          rate?: string(name='Rate', example='100'),
          scene?: string(name='Scene', example='terrorism'),
          suggestion?: string(name='Suggestion', example='review'),
        }
      ](name='CensorResult')
      }(name='CensorResults'),
      nextPageToken?: string(name='NextPageToken', example='ea04afcca7cd4e80b9ece8fbb251****'),
      videoTimelines?: {
        videoTimeline?: [ 
        {
          censorResults?: {
            censorResult?: [ 
            {
              label?: string(name='Label', example='flood'),
              rate?: string(name='Rate', example='99.99'),
              scene?: string(name='Scene', example='porn'),
              suggestion?: string(name='Suggestion', example='block'),
            }
          ](name='CensorResult')
          }(name='CensorResults'),
          object?: string(name='Object', example='output{Count}.jpg'),
          timestamp?: string(name='Timestamp', example='00:02:59.999'),
        }
      ](name='VideoTimeline')
      }(name='VideoTimelines'),
    }(name='VensorCensorResult'),
    videoCensorConfig?: {
      bizType?: string(name='BizType', example='common'),
      outputFile?: {
        bucket?: string(name='Bucket', example='test-bucket-****'),
        location?: string(name='Location', example='oss-cn-shanghai'),
        object?: string(name='Object', example='output{Count}.jpg'),
      }(name='OutputFile'),
      videoCensor?: string(name='VideoCensor', example='true'),
    }(name='VideoCensorConfig'),
  }(name='MediaCensorJobDetail'),
  requestId?: string(name='RequestId', example='B42299E6-F71F-465F-8FE9-4FC2E3D3C2CA'),
}

model QueryMediaCensorJobDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMediaCensorJobDetailResponseBody(name='body'),
}

async function queryMediaCensorJobDetail(request: QueryMediaCensorJobDetailRequest): QueryMediaCensorJobDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMediaCensorJobDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryMediaCensorJobListRequest {
  endOfJobCreatedTimeRange?: string(name='EndOfJobCreatedTimeRange', example='2022-02-14T02:16:07Z', position='Query'),
  jobIds?: string(name='JobIds', example='fa9c34be3bcf42919ac4d1775239****,78dc866518b843259669df58ed30****', position='Query'),
  maximumPageSize?: long(name='MaximumPageSize', example='20', minimum=1, maximum=100, position='Query'),
  nextPageToken?: string(name='NextPageToken', example='79aff3eee82242e092899db5f669', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pipelineId?: string(name='PipelineId', example='c5b30b7c0d0e4a0abde1d5f9e751****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startOfJobCreatedTimeRange?: string(name='StartOfJobCreatedTimeRange', example='2021-12-22T03:48:05Z', position='Query'),
  state?: string(name='State', example='All', position='Query'),
}

model QueryMediaCensorJobListResponseBody = {
  mediaCensorJobList?: {
    mediaCensorJob?: [ 
    {
      barrageCensorResult?: {
        label?: string(name='Label', example='normal'),
        rate?: string(name='Rate', example='99.91'),
        scene?: string(name='Scene', example='antispam'),
        suggestion?: string(name='Suggestion', example='pass'),
      }(name='BarrageCensorResult'),
      code?: string(name='Code', example='InvalidParameter.ResourceNotFound'),
      coverImageCensorResults?: {
        coverImageCensorResult?: [ 
        {
          bucket?: string(name='Bucket', example='example-Bucket-****'),
          location?: string(name='Location', example='oss-cn-shanghai'),
          object?: string(name='Object', example='test/ai/censor/v2/vme-****.jpg'),
          results?: {
            result?: [ 
            {
              label?: string(name='Label', example='normal'),
              rate?: string(name='Rate', example='100'),
              scene?: string(name='Scene', example='live'),
              suggestion?: string(name='Suggestion', example='pass'),
            }
          ](name='Result')
          }(name='Results'),
        }
      ](name='CoverImageCensorResult')
      }(name='CoverImageCensorResults'),
      creationTime?: string(name='CreationTime', example='2021-11-04T07:25:48Z'),
      descCensorResult?: {
        label?: string(name='Label', example='normal'),
        rate?: string(name='Rate', example='100'),
        scene?: string(name='Scene', example='antispam'),
        suggestion?: string(name='Suggestion', example='pass'),
      }(name='DescCensorResult'),
      finishTime?: string(name='FinishTime', example='2021-11-04T07:25:50Z'),
      input?: {
        bucket?: string(name='Bucket', example='bucket-test-in-****'),
        location?: string(name='Location', example='oss-cn-shanghai'),
        object?: string(name='Object', example='test/ai/censor/test-****.mp4'),
      }(name='Input'),
      jobId?: string(name='JobId', example='f8f166eea7a44e9bb0a4aecf9543'),
      message?: string(name='Message', example='The resource operated cannot be found'),
      pipelineId?: string(name='PipelineId', example='c5b30b7c0d0e4a0abde1d5f9e751****'),
      state?: string(name='State', example='Success'),
      suggestion?: string(name='Suggestion', example='pass'),
      titleCensorResult?: {
        label?: string(name='Label', example='meaningless'),
        rate?: string(name='Rate', example='100'),
        scene?: string(name='Scene', example='antispam'),
        suggestion?: string(name='Suggestion', example='block'),
      }(name='TitleCensorResult'),
      userData?: string(name='UserData', example='example userdata ****'),
      vensorCensorResult?: {
        censorResults?: {
          censorResult?: [ 
          {
            label?: string(name='Label', example='meaningless'),
            rate?: string(name='Rate', example='100'),
            scene?: string(name='Scene', example='ad'),
            suggestion?: string(name='Suggestion', example='pass'),
          }
        ](name='CensorResult')
        }(name='CensorResults'),
        nextPageToken?: string(name='NextPageToken', example='ea04afcca7cd4e80b9ece8fbb251'),
        videoTimelines?: {
          videoTimeline?: [ 
          {
            censorResults?: {
              censorResult?: [ 
              {
                label?: string(name='Label', example='normal'),
                rate?: string(name='Rate', example='100'),
                scene?: string(name='Scene', example='porn'),
                suggestion?: string(name='Suggestion', example='block'),
              }
            ](name='CensorResult')
            }(name='CensorResults'),
            object?: string(name='Object', example='output{Count}.jpg'),
            timestamp?: string(name='Timestamp', example='00:02:59.999'),
          }
        ](name='VideoTimeline')
        }(name='VideoTimelines'),
      }(name='VensorCensorResult'),
      videoCensorConfig?: {
        bizType?: string(name='BizType', example='common'),
        outputFile?: {
          bucket?: string(name='Bucket', example='test-bucket-****'),
          location?: string(name='Location', example='oss-cn-shanghai'),
          object?: string(name='Object', example='output{Count}.jpg'),
        }(name='OutputFile'),
        videoCensor?: string(name='VideoCensor', example='true'),
      }(name='VideoCensorConfig'),
    }
  ](name='MediaCensorJob')
  }(name='MediaCensorJobList'),
  nextPageToken?: string(name='NextPageToken', example='9b1a42bc6e8d46e6a1383b7e7f01****'),
  nonExistIds?: {
    string?: [ string ](name='String')
  }(name='NonExistIds'),
  requestId?: string(name='RequestId', example='D1D5C080-8E2F-5030-8AB4-13092F17631B'),
}

model QueryMediaCensorJobListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMediaCensorJobListResponseBody(name='body'),
}

async function queryMediaCensorJobList(request: QueryMediaCensorJobListRequest): QueryMediaCensorJobListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMediaCensorJobList', 'POST', '/', 'json', false, 'json', request);
}

model QueryMediaIndexJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaId: string(name='MediaId', example='c2e77390f75271ec802f0674a2ce6***', position='Query'),
  searchLibName?: string(name='SearchLibName', example='test1', position='Query'),
}

model QueryMediaIndexJobResponseBody = {
  code?: string(name='Code', example='200'),
  indexJobInfoList?: [ 
    {
      gmtFinish?: string(name='GmtFinish', example='2023-11-21 11:33:51'),
      gmtSubmit?: string(name='GmtSubmit', example='2023-11-21 11:33:50'),
      indexType?: string(name='IndexType', example='mm'),
      status?: string(name='Status', example='Success'),
    }
  ](name='IndexJobInfoList'),
  requestId?: string(name='RequestId', example='4E84BE44-58A7-****-****-FBEBEA16EF94'),
  success?: string(name='Success', example='true'),
}

model QueryMediaIndexJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMediaIndexJobResponseBody(name='body'),
}

async function queryMediaIndexJob(request: QueryMediaIndexJobRequest): QueryMediaIndexJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMediaIndexJob', 'POST', '/', 'json', false, 'json', request);
}

model QuerySearchIndexRequest {
  regionId?: string(name='RegionId', position='Host'),
  indexType: string(name='IndexType', example='mm', position='Query'),
  searchLibName?: string(name='SearchLibName', example='test1', position='Query'),
}

model QuerySearchIndexResponseBody = {
  code?: string(name='Code'),
  indexStatus?: string(name='IndexStatus'),
  indexType?: string(name='IndexType', example='mm'),
  mediaTotal?: string(name='MediaTotal'),
  requestId?: string(name='RequestId', description='Id of the request', example='4E84BE44-58A7-****-****-FBEBEA16EF94'),
  searchLibName?: string(name='SearchLibName', example='test1'),
  success?: string(name='Success'),
}

model QuerySearchIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySearchIndexResponseBody(name='body'),
}

async function querySearchIndex(request: QuerySearchIndexRequest): QuerySearchIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySearchIndex', 'POST', '/', 'json', false, 'json', request);
}

model QuerySearchLibRequest {
  regionId?: string(name='RegionId', position='Host'),
  searchLibName: string(name='SearchLibName', example='test1', position='Query'),
}

model QuerySearchLibResponseBody = {
  code?: string(name='Code'),
  requestId?: string(name='RequestId', description='Id of the request', example='******11-DB8D-4A9A-875B-275798******'),
  searchLibName?: string(name='SearchLibName', example='test1'),
  status?: string(name='Status', example='normal'),
  success?: string(name='Success'),
}

model QuerySearchLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySearchLibResponseBody(name='body'),
}

async function querySearchLib(request: QuerySearchLibRequest): QuerySearchLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySearchLib', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmarttagJobRequest {
  jobId: string(name='JobId', example='88c6ca184c0e47098a5b665e2****', position='Query'),
  params?: string(name='Params', example='{"labelResultType":"auto"}', position='Query'),
}

model QuerySmarttagJobResponseBody = {
  jobStatus?: string(name='JobStatus', example='Success'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  results?: {
    result?: [ 
    {
      data?: string(name='Data', example='{"title":"example-title-****"}'),
      type?: string(name='Type', example='Meta'),
    }
  ](name='Result')
  }(name='Results'),
  userData?: string(name='UserData', example='{"userId":"123432412831"}'),
}

model QuerySmarttagJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmarttagJobResponseBody(name='body'),
}

async function querySmarttagJob(request: QuerySmarttagJobRequest): QuerySmarttagJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmarttagJob', 'POST', '/', 'json', false, 'json', request);
}

model RefreshUploadMediaRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaId?: string(name='MediaId', example='411bed50018971edb60b0764a0ec6***', position='Query'),
}

model RefreshUploadMediaResponseBody = {
  mediaId?: string(name='MediaId', example='c2e77390f75271ec802f0674a2ce6***'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  uploadAddress?: string(name='UploadAddress', example='eyJFbmRwb2ludCI6Imh0dHBzOi8vb3NzLWNuLXNoYW5naGFpLmFsaXl1bmNzLmNvbSIsIkJ1Y2tldCI6InN6aGQtdmlkZW8iLCJGaWxlTmFtZSI6InZvZC0yOTYzMWEvc3YvNTBmYTJlODQtMTgxMjdhZGRiMTcvNTBmYTJlODQtMTgxMjdhZGRiM***'),
  uploadAuth?: string(name='UploadAuth', example='eyJBY2Nlc3NLZXlJZCI6IkxUQUk0Rm53bTk1dHdxQjMxR3IzSE5hRCIsIkFjY2Vzc0tleVNlY3JldCI6Ik9lWllKR0dTMTlkNkZaM1E3UVpJQmdmSVdnM3BPaiIsIkV4cGlyYXRpb24iOiI***'),
}

model RefreshUploadMediaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefreshUploadMediaResponseBody(name='body'),
}

async function refreshUploadMedia(request: RefreshUploadMediaRequest): RefreshUploadMediaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshUploadMedia', 'POST', '/', 'json', false, 'json', request);
}

model RegisterMediaInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  businessType?: string(name='BusinessType', example='opening', position='Query'),
  cateId?: long(name='CateId', example='3048', position='Query'),
  clientToken?: string(name='ClientToken', example='****0311a423d11a5f7dee713535****', position='Query'),
  coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png', position='Query'),
  description?: string(name='Description', example='defaultDescription', position='Query'),
  inputURL: string(name='InputURL', position='Query'),
  mediaTags?: string(name='MediaTags', example='tag1,tag2', position='Query'),
  mediaType?: string(name='MediaType', example='video', position='Query'),
  overwrite?: boolean(name='Overwrite', example='true', position='Query'),
  referenceId?: string(name='ReferenceId', example='123-123', position='Query'),
  registerConfig?: string(name='RegisterConfig', position='Query'),
  smartTagTemplateId?: string(name='SmartTagTemplateId', position='Query'),
  title?: string(name='Title', example='defaultTitle', position='Query'),
  userData?: string(name='UserData', position='Query'),
  workflowId?: string(name='WorkflowId', example='******b4fb044839815d4f2cd8******', position='Query'),
}

model RegisterMediaInfoResponseBody = {
  mediaId?: string(name='MediaId', example='******b48fb04483915d4f2cd8******'),
  requestId?: string(name='RequestId', example='******5A-CAAC-4850-A3AF-B74606******'),
}

model RegisterMediaInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterMediaInfoResponseBody(name='body'),
}

async function registerMediaInfo(request: RegisterMediaInfoRequest): RegisterMediaInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterMediaInfo', 'POST', '/', 'json', false, 'json', request);
}

model RegisterMediaStreamRequest {
  regionId?: string(name='RegionId', position='Host'),
  inputURL?: string(name='InputURL', position='Query'),
  mediaId?: string(name='MediaId', example='5e778ec0027b71ed80a8909598506***', position='Query'),
  userData?: string(name='UserData', example='{"MessageCallback":{"CallbackURL":"http://test.test.com"}, "Extend":{"localId":"xxx","test":"www"}}', position='Query'),
}

model RegisterMediaStreamResponseBody = {
  mediaId?: string(name='MediaId', example='5e778ec0027b71ed80a8909598506302'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model RegisterMediaStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterMediaStreamResponseBody(name='body'),
}

async function registerMediaStream(request: RegisterMediaStreamRequest): RegisterMediaStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterMediaStream', 'POST', '/', 'json', false, 'json', request);
}

model SearchEditingProjectRequest {
  createSource?: string(name='CreateSource', example='WebSDK', position='Query'),
  endTime?: string(name='EndTime', example='2017-01-11T12:00:00Z', position='Query'),
  pageNo?: long(name='PageNo', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  projectType?: string(name='ProjectType', example='EditingProject', position='Query'),
  sortBy?: string(name='SortBy', example='CreationTime:Desc', position='Query'),
  startTime?: string(name='StartTime', example='2017-01-11T12:00:00Z', position='Query'),
  status?: string(name='Status', example='Producing', position='Query'),
  templateType?: string(name='TemplateType', example='Timeline', position='Query'),
}

model SearchEditingProjectResponseBody = {
  maxResults?: long(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='null'),
  projectList?: [ 
    {
      businessConfig?: string(name='BusinessConfig', example='{ "OutputMediaConfig" : { "StorageLocation": "test-bucket.oss-cn-shanghai.aliyuncs.com", "Path": "test-path" }, "OutputMediaTarget": "oss-object", "ReservationTime": "2021-06-21T08:05:00Z" }'),
      businessStatus?: string(name='BusinessStatus', example='Reserving'),
      coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example-cover.jpg'),
      createSource?: string(name='CreateSource', example='OpenAPI'),
      createTime?: string(name='CreateTime', example='2017-01-11T12:00:00Z'),
      description?: string(name='Description', example='sample description'),
      duration?: long(name='Duration', example='30.100000'),
      errorCode?: string(name='ErrorCode', example='InvalidParameter'),
      errorMessage?: string(name='ErrorMessage', example='"EventTime":"2021-08-12T10:04:15Z","ErrorCode":"InvalidParameter","ErrorMessage":"The specified parameter \\"LiveStreamConfig\\" is not valid. specified parameter example is not valid.'),
      modifiedSource?: string(name='ModifiedSource', example='2017-01-11T12:00:00Z'),
      modifiedTime?: string(name='ModifiedTime', example='2017-01-11T12:00:00Z'),
      projectId?: string(name='ProjectId', example='****fddd7748b58bf1d47e95****'),
      projectType?: string(name='ProjectType', example='EditingProject'),
      status?: string(name='Status', example='PRODUCE_FAILED'),
      templateType?: string(name='TemplateType', example='Timeline'),
      timeline?: string(name='Timeline', example='{"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****4d7cf14dc7b83b0e801c****"},{"MediaId":"****4d7cf14dc7b83b0e801c****"}]}]}'),
      title?: string(name='Title', example='title'),
    }
  ](name='ProjectList'),
  requestId?: string(name='RequestId', example='****9262E3DA-07FA-4862-FCBB6BC61D08*****'),
  totalCount?: long(name='TotalCount', example='110'),
}

model SearchEditingProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchEditingProjectResponseBody(name='body'),
}

async function searchEditingProject(request: SearchEditingProjectRequest): SearchEditingProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchEditingProject', 'POST', '/', 'json', false, 'json', request);
}

model SearchMediaRequest {
  regionId?: string(name='RegionId', position='Host'),
  entityId?: string(name='EntityId', example='2d3bf1e35a1e42b5ab338d701efa7603', position='Query'),
  match?: string(name='Match', position='Query'),
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  scrollToken?: string(name='ScrollToken', position='Query'),
  searchLibName?: string(name='SearchLibName', position='Query'),
  sortBy?: string(name='SortBy', example='utcCreate:Desc, utcModified:Desc', position='Query'),
}

model SearchMediaResponseBody = {
  code?: string(name='Code', example='200'),
  mediaInfoList?: [ 
    {
      aiData?: {
        aiLabelInfo?: [ 
          {
            category?: string(name='Category'),
            faceId?: string(name='FaceId', example='5FE19530C7A422197535FE74F5DB2B9F'),
            labelId?: string(name='LabelId', example='10310250338'),
            labelName?: string(name='LabelName'),
            labelType?: string(name='LabelType'),
            occurrences?: [ 
              {
                content?: string(name='Content'),
                finegrainId?: string(name='FinegrainId', example='10310250338'),
                finegrainName?: string(name='FinegrainName'),
                from?: double(name='From', example='1.4'),
                image?: string(name='Image', example='99C64F6287'),
                score?: double(name='Score', example='0.75287705'),
                tableBatchSeqId?: string(name='TableBatchSeqId', example='85010D1'),
                to?: double(name='To', example='2.5'),
                tracks?: [ 
                  {
                    position?: string(name='Position', example='468.0;67.0;615.0;267.0'),
                    size?: double(name='Size', example='50.2'),
                    timestamp?: double(name='Timestamp', example='1.4'),
                  }
                ](name='Tracks'),
                clipId?: string(name='clipId', example='5FE19530C7A422197535FE74F5DB2B9F'),
              }
            ](name='Occurrences'),
            source?: string(name='Source', example='vision'),
          }
        ](name='AiLabelInfo'),
        asrInfo?: [ 
          {
            clipId?: string(name='ClipId', example='5FE19530C7A422197535FE74F5DB2B9F'),
            content?: string(name='Content'),
            from?: double(name='From', example='1.4'),
            timestamp?: double(name='Timestamp', example='1.4'),
            to?: double(name='To', example='2.5'),
          }
        ](name='AsrInfo'),
        ocrInfo?: [ 
          {
            clipId?: string(name='ClipId', example='5FE19530C7A422197535FE74F5DB2B9F'),
            content?: string(name='Content'),
            from?: double(name='From', example='1.4'),
            timestamp?: double(name='Timestamp', example='1.4'),
            to?: double(name='To', example='2.5'),
          }
        ](name='OcrInfo'),
      }(name='AiData'),
      aiRoughData?: {
        aiCategory?: string(name='AiCategory', description='电视剧', example='视频AI分类'),
        aiJobId?: string(name='AiJobId', example='cd35b0b0025f71edbfcb472190a9xxxx'),
        result?: string(name='Result', example='http://xxxx.json'),
        saveType?: string(name='SaveType', example='TEXT'),
        status?: string(name='Status', example='SaveSuccess'),
      }(name='AiRoughData'),
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', example='1912.13'),
            createTime?: string(name='CreateTime', example='2022-05-30T02:02:17Z'),
            duration?: string(name='Duration', example='60.00000'),
            fileName?: string(name='FileName', example='164265080291300080527050.wav'),
            fileSize?: string(name='FileSize', example='324784'),
            fileStatus?: string(name='FileStatus', example='Normal'),
            fileType?: string(name='FileType', example='source_file'),
            fileUrl?: string(name='FileUrl', example='https://outin-d3f4681ddfd911ec99a600163e1403e7.oss-cn-shanghai.aliyuncs.com/sv/23d5cdd1-18180984899/23d5cdd1-18180984899.mp4'),
            formatName?: string(name='FormatName', example='mov,mp4,m4a,3gp,3g2,mj2'),
            height?: string(name='Height', example='480'),
            modifiedTime?: string(name='ModifiedTime', example='2021-12-10T12:19Z'),
            region?: string(name='Region', example='cn-beijing'),
            width?: string(name='Width', example='1920'),
          }(name='FileBasicInfo'),
        }
      ](name='FileInfoList', description='FileInfos。'),
      mediaBasicInfo?: {
        biz?: string(name='Biz', example='IMS'),
        businessType?: string(name='BusinessType', example='opening'),
        cateId?: long(name='CateId', example='44'),
        cateName?: string(name='CateName'),
        category?: string(name='Category', example='image'),
        coverURL?: string(name='CoverURL', example='https://dtlive-bj.oss-cn-beijing.aliyuncs.com/cover/e694372e-4f5b-4821-ae09-efd064f27b63_large_cover_url.jpg'),
        createTime?: string(name='CreateTime', example='2020-12-01T19:48Z'),
        deletedTime?: string(name='DeletedTime', example='2020-12-01T19:48Z'),
        description?: string(name='Description'),
        inputURL?: string(name='InputURL', example='oss://clipres/longvideo/material/voice/prod/20220418/07d7c799f6054dc3bbef250854cf84981650248140427'),
        mediaId?: string(name='MediaId', example='132bd600fc3c71ec99476732a78f6402'),
        mediaTags?: string(name='MediaTags', example='tags,tags2'),
        mediaType?: string(name='MediaType', example='video'),
        modifiedTime?: string(name='ModifiedTime', example='2020-12-01T19:48Z'),
        referenceId?: string(name='ReferenceId', example='123-123'),
        snapshots?: string(name='Snapshots', example='[{"bucket":"example-bucket","count":"3","iceJobId":"******f48f0e4154976b2b8c45******","location":"oss-cn-beijing","snapshotRegular":"example.jpg","templateId":"******e6a6440b29eb60bd7c******"}]'),
        source?: string(name='Source', example='oss'),
        spriteImages?: string(name='SpriteImages', example='[{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]'),
        status?: string(name='Status', example='Normal'),
        title?: string(name='Title'),
        transcodeStatus?: string(name='TranscodeStatus', example='Init'),
        uploadSource?: string(name='UploadSource', example='general'),
        userData?: string(name='UserData', example='userData'),
      }(name='MediaBasicInfo'),
      mediaId?: string(name='MediaId', example='3b187b3620c8490886cfc2a9578c3ce6'),
    }
  ](name='MediaInfoList'),
  requestId?: string(name='RequestId', example='6F61C357-ACC0-57FB-876E-D58795335E59'),
  scrollToken?: string(name='ScrollToken'),
  success?: string(name='Success', example='True'),
  total?: long(name='Total', example='163'),
}

model SearchMediaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchMediaResponseBody(name='body'),
}

async function searchMedia(request: SearchMediaRequest): SearchMediaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchMedia', 'POST', '/', 'json', false, 'json', request);
}

model SearchMediaByAILabelRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaId?: string(name='MediaId', example='****c469e944b5a856828dc2****', position='Query'),
  mediaType?: string(name='MediaType', example='video', position='Query'),
  multimodalSearchType?: string(name='MultimodalSearchType', example='Ocr', position='Query'),
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  searchLibName?: string(name='SearchLibName', position='Query'),
  sortBy?: string(name='SortBy', example='CreationTime:Desc', position='Query'),
  specificSearch?: boolean(name='SpecificSearch', example='true', position='Query'),
  text?: string(name='Text', position='Query'),
}

model SearchMediaByAILabelResponseBody = {
  code?: string(name='Code', example='200'),
  mediaList?: [ 
    {
      aiData?: {
        aiLabelInfo?: [ 
          {
            category?: string(name='Category'),
            faceId?: string(name='FaceId', example='5FE19530C7A422197535FE74F5DB****'),
            labelId?: string(name='LabelId', example='103102503**'),
            labelName?: string(name='LabelName'),
            labelType?: string(name='LabelType'),
            occurrences?: [ 
              {
                clipId?: string(name='ClipId', example='158730355E4B82257D8AA1583A58****'),
                content?: string(name='Content'),
                finegrainId?: string(name='FinegrainId', example='103102503**'),
                finegrainName?: string(name='FinegrainName'),
                from?: double(name='From', example='1.4'),
                image?: string(name='Image', example='https://service-****-public.oss-cn-hangzhou.aliyuncs.com/1563457****438522/service-image/f788974f-9595-43b2-a478-7c7a1afb****.jpg'),
                score?: double(name='Score', example='0.75287705'),
                tableBatchSeqId?: string(name='TableBatchSeqId', example='85010D1**'),
                to?: double(name='To', example='2.5'),
                tracks?: [ 
                  {
                    position?: string(name='Position', example='468.0;67.0;615.0;267.0'),
                    size?: double(name='Size', example='50'),
                    timestamp?: double(name='Timestamp', example='1.4'),
                  }
                ](name='Tracks'),
              }
            ](name='Occurrences'),
            source?: string(name='Source', example='vision'),
          }
        ](name='AiLabelInfo'),
        asrInfo?: [ 
          {
            clipId?: string(name='ClipId', example='5FE19530C7A422197535FE74F5DB****'),
            content?: string(name='Content'),
            from?: double(name='From', example='1.4'),
            timestamp?: double(name='Timestamp', example='1.4'),
            to?: double(name='To', example='2.5'),
          }
        ](name='AsrInfo'),
        ocrInfo?: [ 
          {
            clipId?: string(name='ClipId', example='5FE19530C7A422197535FE74F5DB****'),
            content?: string(name='Content'),
            from?: double(name='From', example='1.4'),
            timestamp?: double(name='Timestamp', example='1.4'),
            to?: double(name='To', example='2.5'),
          }
        ](name='OcrInfo'),
      }(name='AiData'),
      appId?: string(name='AppId', example='app-1000000'),
      coverUrl?: string(name='CoverUrl', example='http://example.aliyundoc.com/snapshot/****.jpg?auth_key=1498476426-0-0-f00b9455c49a423ce69cf4e27333****'),
      creationTime?: string(name='CreationTime', example='2017-11-14T09:15:50Z'),
      description?: string(name='Description'),
      duration?: float(name='Duration', example='12.2'),
      mediaId?: string(name='MediaId', example='1c6ce34007d571ed94667630a6bc****'),
      modificationTime?: string(name='ModificationTime', example='2017-11-14T09:15:50Z'),
      size?: long(name='Size', example='10897890'),
      snapshots?: [ string ](name='Snapshots'),
      status?: string(name='Status', example='Normal'),
      storageLocation?: string(name='StorageLocation', example='out-****.oss-cn-shanghai.aliyuncs.com'),
      tags?: string(name='Tags'),
      title?: string(name='Title'),
    }
  ](name='MediaList'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: string(name='Success', example='true'),
  total?: long(name='Total', example='30'),
}

model SearchMediaByAILabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchMediaByAILabelResponseBody(name='body'),
}

async function searchMediaByAILabel(request: SearchMediaByAILabelRequest): SearchMediaByAILabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchMediaByAILabel', 'POST', '/', 'json', false, 'json', request);
}

model SearchMediaByFaceRequest {
  regionId?: string(name='RegionId', position='Host'),
  entityId?: string(name='EntityId', example='2d3bf1e35a1e42b5ab338d701efa****', position='Query'),
  faceSearchToken: string(name='FaceSearchToken', example='zxtest-huangxuan-2023-3-7-V1', position='Query'),
  mediaType?: string(name='MediaType', position='Query'),
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  personImageUrl: string(name='PersonImageUrl', example='https://****.oss-cn-shanghai.aliyuncs.com/input/huangxuan****.jpg', position='Query'),
  searchLibName?: string(name='SearchLibName', position='Query'),
}

model SearchMediaByFaceResponseBody = {
  code?: string(name='Code', example='200'),
  mediaInfoList?: [ 
    {
      mediaId?: string(name='MediaId', example='3b187b3620c8490886cfc2a9578c****'),
    }
  ](name='MediaInfoList'),
  requestId?: string(name='RequestId', example='7CA7D615-CFB1-5437-9A12-2D185C3EE6CB'),
  success?: string(name='Success', example='true'),
  total?: long(name='Total', example='163'),
}

model SearchMediaByFaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchMediaByFaceResponseBody(name='body'),
}

async function searchMediaByFace(request: SearchMediaByFaceRequest): SearchMediaByFaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchMediaByFace', 'POST', '/', 'json', false, 'json', request);
}

model SearchMediaByMultimodalRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaType?: string(name='MediaType', example='video', position='Query'),
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  searchLibName?: string(name='SearchLibName', example='test-1', position='Query'),
  text?: string(name='Text', position='Query'),
}

model SearchMediaByMultimodalResponseBody = {
  code?: string(name='Code', example='200'),
  mediaList?: [ 
    {
      clipInfo?: [ 
        {
          from?: double(name='From', example='2'),
          score?: double(name='Score', example='1.2'),
          to?: double(name='To', example='4'),
        }
      ](name='ClipInfo'),
      mediaId?: string(name='MediaId', example='a18936e0e28771edb59ae6f6f47a****'),
    }
  ](name='MediaList'),
  requestId?: string(name='RequestId', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
  success?: string(name='Success', example='true'),
  total?: long(name='Total', example='20'),
}

model SearchMediaByMultimodalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchMediaByMultimodalResponseBody(name='body'),
}

async function searchMediaByMultimodal(request: SearchMediaByMultimodalRequest): SearchMediaByMultimodalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchMediaByMultimodal', 'POST', '/', 'json', false, 'json', request);
}

model SearchMediaClipByFaceRequest {
  regionId?: string(name='RegionId', position='Host'),
  entityId?: string(name='EntityId', example='2d3bf1e35a1e42b5ab338d701efa****', position='Query'),
  faceSearchToken: string(name='FaceSearchToken', example='zxtest-huangxuan-2023-3-7-V1', position='Query'),
  mediaId: string(name='MediaId', example='3b187b3620c8490886cfc2a9578c****', position='Query'),
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  searchLibName?: string(name='SearchLibName', position='Query'),
}

model SearchMediaClipByFaceResponseBody = {
  code?: string(name='Code', example='200'),
  mediaClipList?: [ 
    {
      category?: string(name='Category', example='celebrity'),
      entityId?: string(name='EntityId', example='1031025****'),
      labelName?: string(name='LabelName'),
      occurrencesInfos?: [ 
        {
          endTime?: float(name='EndTime', example='69.06635'),
          startTime?: float(name='StartTime', example='61.066353'),
          trackData?: [ 
            {
              boxPosition?: {
                h?: int32(name='H', example='168'),
                w?: int32(name='W', example='128'),
                x?: int32(name='X', example='517'),
                y?: int32(name='Y', example='409'),
              }(name='BoxPosition'),
              timestamp?: float(name='Timestamp', example='62.03302'),
            }
          ](name='TrackData'),
        }
      ](name='OccurrencesInfos'),
      score?: float(name='Score', example='0.99041677'),
    }
  ](name='MediaClipList'),
  requestId?: string(name='RequestId', example='E44FFACD-9E90-555A-A09A-6FD3B7335E39'),
  success?: string(name='Success', example='true'),
  total?: long(name='Total', example='5'),
}

model SearchMediaClipByFaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchMediaClipByFaceResponseBody(name='body'),
}

async function searchMediaClipByFace(request: SearchMediaClipByFaceRequest): SearchMediaClipByFaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchMediaClipByFace', 'POST', '/', 'json', false, 'json', request);
}

model SearchPublicMediaInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  authorized?: boolean(name='Authorized', example='true', position='Query'),
  dynamicMetaDataMatchFields?: string(name='DynamicMetaDataMatchFields', example='"ApprovalStatus=\\"Available\\"&amp;MaterialBags=\\"boutiquemusic\\"&amp;Mood=\\"Nervous\\""', position='Query'),
  entityId?: string(name='EntityId', example='Copyright_Music', position='Query'),
  favorite?: boolean(name='Favorite', example='true', position='Query'),
  mediaIds?: string(name='MediaIds', example='****20b48fb04483915d4f2cd8ac****,****15d4a4b0448391508f2cb486****', position='Query'),
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  sortBy?: string(name='SortBy', example='UsageCount:Desc,UnitPrice:Asc', position='Query'),
}

model SearchPublicMediaInfoResponseBody = {
  publicMediaInfos?: [ 
    {
      authorized?: boolean(name='Authorized', example='true'),
      favorite?: boolean(name='Favorite', example='true'),
      mediaInfo?: {
        dynamicMetaData?: {
          data?: string(name='Data', example='"{\\"AuditionUrl\\": \\"http://xxx\\", \\"AuditionCount\\": 3...}"'),
          type?: string(name='Type', example='system'),
        }(name='DynamicMetaData'),
        mediaBasicInfo?: {
          businessType?: string(name='BusinessType', example='general'),
          category?: string(name='Category', example='category'),
          coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
          createTime?: string(name='CreateTime', example='2020-12-26T06:04:49Z'),
          deletedTime?: string(name='DeletedTime', example='2020-12-29T06:04:49Z'),
          description?: string(name='Description', example='description'),
          mediaId?: string(name='MediaId', description='MediaId', example='icepublic-****87b921bb4a55908a72a0537e****'),
          mediaTags?: string(name='MediaTags'),
          mediaType?: string(name='MediaType', example='audio'),
          modifiedTime?: string(name='ModifiedTime', example='2020-12-26T06:04:50Z'),
          source?: string(name='Source', example='oss'),
          spriteImages?: string(name='SpriteImages', example='[{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]'),
          status?: string(name='Status', example='Normal'),
          title?: string(name='Title', example='title'),
          userData?: string(name='UserData', example='userDataTest'),
        }(name='MediaBasicInfo', description='BasicInfo'),
        mediaId?: string(name='MediaId', example='icepublic-****87b921bb4a55908a72a0537e****'),
      }(name='MediaInfo'),
      remainingAuthTime?: string(name='RemainingAuthTime', example='100'),
    }
  ](name='PublicMediaInfos'),
  requestId?: string(name='RequestId', example='****3CFB-2767-54FD-B311-BD15A4C1****'),
  totalCount?: long(name='TotalCount', example='100'),
}

model SearchPublicMediaInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchPublicMediaInfoResponseBody(name='body'),
}

async function searchPublicMediaInfo(request: SearchPublicMediaInfoRequest): SearchPublicMediaInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchPublicMediaInfo', 'POST', '/', 'json', false, 'json', request);
}

model SendLiveSnapshotJobCommandRequest {
  command: string(name='Command', example='start', position='Body'),
  jobId: string(name='JobId', example='****a046-263c-3560-978a-fb287782****', position='Body'),
}

model SendLiveSnapshotJobCommandResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model SendLiveSnapshotJobCommandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendLiveSnapshotJobCommandResponseBody(name='body'),
}

async function sendLiveSnapshotJobCommand(request: SendLiveSnapshotJobCommandRequest): SendLiveSnapshotJobCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendLiveSnapshotJobCommand', 'POST', '/', 'json', true, 'form', request);
}

model SendLiveTranscodeJobCommandRequest {
  command: string(name='Command', example='stop', position='Query'),
  jobId: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model SendLiveTranscodeJobCommandResponseBody = {
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
}

model SendLiveTranscodeJobCommandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendLiveTranscodeJobCommandResponseBody(name='body'),
}

async function sendLiveTranscodeJobCommand(request: SendLiveTranscodeJobCommandRequest): SendLiveTranscodeJobCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendLiveTranscodeJobCommand', 'POST', '/', 'json', false, 'json', request);
}

model SetContentAnalyzeConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  auto?: boolean(name='Auto', example='true', position='Query'),
  saveType?: string(name='SaveType', example='TEXT,FACE', position='Query'),
  templateId?: string(name='TemplateId', example='S00000101-100070', position='Query'),
}

model SetContentAnalyzeConfigResponseBody = {
  requestId?: string(name='RequestId', example='953CFD27-4A2C-54AD-857F-B79EF3A338E0'),
  success?: boolean(name='Success', example='true'),
}

model SetContentAnalyzeConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetContentAnalyzeConfigResponseBody(name='body'),
}

async function setContentAnalyzeConfig(request: SetContentAnalyzeConfigRequest): SetContentAnalyzeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetContentAnalyzeConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetDefaultCustomTemplateRequest {
  templateId: string(name='TemplateId', example='****d80e4e4044975745c14b****', position='Query'),
}

model SetDefaultCustomTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model SetDefaultCustomTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDefaultCustomTemplateResponseBody(name='body'),
}

async function setDefaultCustomTemplate(request: SetDefaultCustomTemplateRequest): SetDefaultCustomTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDefaultCustomTemplate', 'POST', '/', 'json', false, 'json', request);
}

model SetDefaultStorageLocationRequest {
  regionId?: string(name='RegionId', position='Host'),
  bucket?: string(name='Bucket', example='oss-test-bucket', position='Query'),
  path?: string(name='Path', example='ims/dir', position='Query'),
  storageType?: string(name='StorageType', example='user_oss_bucket', position='Query'),
}

model SetDefaultStorageLocationResponseBody = {
  requestId?: string(name='RequestId', example='******5A-CAAC-4850-A3AF-B74606******'),
  success?: boolean(name='Success', example='true'),
}

model SetDefaultStorageLocationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDefaultStorageLocationResponseBody(name='body'),
}

async function setDefaultStorageLocation(request: SetDefaultStorageLocationRequest): SetDefaultStorageLocationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDefaultStorageLocation', 'POST', '/', 'json', false, 'json', request);
}

model SetEventCallbackRequest {
  regionId?: string(name='RegionId', position='Host'),
  authKey?: string(name='AuthKey', example='TestKey001', position='Query'),
  authSwitch?: string(name='AuthSwitch', example='on', position='Query'),
  callbackQueueName?: string(name='CallbackQueueName', example='ice-callback-queue', position='Query'),
  callbackType?: string(name='CallbackType', example='HTTP', position='Query'),
  callbackURL?: string(name='CallbackURL', example='http://xxx.yyy/callback', position='Query'),
  eventTypeList?: string(name='EventTypeList', example='ProduceMediaComplete', position='Query'),
}

model SetEventCallbackResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model SetEventCallbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetEventCallbackResponseBody(name='body'),
}

async function setEventCallback(request: SetEventCallbackRequest): SetEventCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetEventCallback', 'POST', '/', 'json', false, 'json', request);
}

model StartWorkflowRequest {
  taskInput?: string(name='TaskInput', example='{
      "Type": "Media",
      "Media": "******30706071edbfe290b488******"
}', position='Query'),
  userData?: string(name='UserData', position='Query'),
  workflowId?: string(name='WorkflowId', example='******f0e54971ecbffd472190******', position='Query'),
}

model StartWorkflowResponseBody = {
  requestId?: string(name='RequestId', example='******42-E8E1-4FBB-8E52-F4225C******'),
  taskId?: string(name='TaskId', example='******22dad741d086a50325f9******'),
}

model StartWorkflowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartWorkflowResponseBody(name='body'),
}

async function startWorkflow(request: StartWorkflowRequest): StartWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartWorkflow', 'POST', '/', 'json', false, 'json', request);
}

model SubmitASRJobRequest {
  description?: string(name='Description', example='测试描述', position='Query'),
  duration?: string(name='Duration', example='00:00:10', position='Query'),
  inputFile?: string(name='InputFile', example='oss://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4 或 ****20b48fb04483915d4f2cd8ac****', position='Query'),
  startTime?: string(name='StartTime', example='00:00:00', position='Query'),
  title?: string(name='Title', example='测试标题', position='Query'),
  userData?: string(name='UserData', example='{"user":"data"}', position='Query'),
}

model SubmitASRJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  state?: string(name='State', example='Finished'),
}

model SubmitASRJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitASRJobResponseBody(name='body'),
}

async function submitASRJob(request: SubmitASRJobRequest): SubmitASRJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitASRJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitAudioProduceJobRequest {
  description?: string(name='Description', example='任务描述  长度不超过1024字节  UTF8编码', position='Query'),
  editingConfig: string(name='EditingConfig', example='{"voice":"Siqi","format":"MP3","volume":50}', position='Query'),
  inputConfig: string(name='InputConfig', example='测试文本', position='Query'),
  outputConfig: string(name='OutputConfig', example='{"bucket":"bucket","object":"objeck"}', position='Query'),
  overwrite?: boolean(name='Overwrite', example='true', position='Query'),
  title?: string(name='Title', example='任务标题。若不提供，根据日期自动生成默认title  长度不超过128字节  UTF8编码', position='Query'),
  userData?: string(name='UserData', example='{"user":"data"}', position='Query'),
}

model SubmitAudioProduceJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  mediaId?: string(name='MediaId', example='****2bcbfcfa30fccb36f72dca22****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  state?: string(name='State', example='Created'),
}

model SubmitAudioProduceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitAudioProduceJobResponseBody(name='body'),
}

async function submitAudioProduceJob(request: SubmitAudioProduceJobRequest): SubmitAudioProduceJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitAudioProduceJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitAvatarTrainingJobRequest {
  jobId: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model SubmitAvatarTrainingJobResponseBody = {
  data?: {
    jobId?: string(name='JobId', example='****29faef8144638ba42eb8e037****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='*****ACB-44F2-5F2D-88D7-1283E70*****'),
  success?: boolean(name='Success', example='true'),
}

model SubmitAvatarTrainingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitAvatarTrainingJobResponseBody(name='body'),
}

async function submitAvatarTrainingJob(request: SubmitAvatarTrainingJobRequest): SubmitAvatarTrainingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitAvatarTrainingJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitAvatarVideoJobRequest {
  description?: string(name='Description', example='测试描述', position='Query'),
  editingConfig?: string(name='EditingConfig', example='{"AvatarId":"yunqiao"}', position='Query'),
  inputConfig?: string(name='InputConfig', position='Query'),
  outputConfig?: string(name='OutputConfig', example='{"MediaURL":"https://your-bucket.oss-cn-shanghai.aliyuncs.com/xxx.mp4","Width":1920,"Height":1080}', position='Query'),
  title?: string(name='Title', example='测试标题', position='Query'),
  userData?: string(name='UserData', example='{"user":"data","env":"prod"}', position='Query'),
}

model SubmitAvatarVideoJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  mediaId?: string(name='MediaId', example='******70dcc471edaf00e6f6f4******'),
  requestId?: string(name='RequestId', description='Id of the request', example='******11-DB8D-4A9A-875B-275798******'),
}

model SubmitAvatarVideoJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitAvatarVideoJobResponseBody(name='body'),
}

async function submitAvatarVideoJob(request: SubmitAvatarVideoJobRequest): SubmitAvatarVideoJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitAvatarVideoJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitBatchMediaProducingJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  clientToken?: string(name='ClientToken', example='****12e8864746a0a398****', position='Query'),
  editingConfig?: string(name='EditingConfig', example='{
  "MediaConfig": {
      "Volume": 0
  },
  "SpeechConfig": {
      "Volume": 1
  },
 "BackgroundMusicConfig": {
      "Volume": 0.3
  }
}', position='Body'),
  inputConfig?: string(name='InputConfig', position='Body'),
  outputConfig?: string(name='OutputConfig', example='{
  "MediaURL": "http://xxx.oss-cn-shanghai.aliyuncs.com/xxx_{index}.mp4",
  "Count": 20,
  "MaxDuration": 15,
  "Width": 1080,
  "Height": 1920,
  "Video": {"Crf": 27}
}', position='Query'),
  userData?: string(name='UserData', position='Query'),
}

model SubmitBatchMediaProducingJobResponseBody = {
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
  requestId?: string(name='RequestId', example='****36-3C1E-4417-BDB2-1E034F****'),
}

model SubmitBatchMediaProducingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitBatchMediaProducingJobResponseBody(name='body'),
}

async function submitBatchMediaProducingJob(request: SubmitBatchMediaProducingJobRequest): SubmitBatchMediaProducingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitBatchMediaProducingJob', 'POST', '/', 'json', true, 'form', request);
}

model SubmitCustomizedVoiceJobRequest {
  demoAudioMediaURL?: string(name='DemoAudioMediaURL', example='https://your-bucket.oss-cn-shanghai.aliyuncs.com/demo.MP3', position='Query'),
  voiceId: string(name='VoiceId', example='xiaozhuan', maxLength=32, position='Query'),
}

model SubmitCustomizedVoiceJobResponseBody = {
  data?: {
    jobId?: string(name='JobId', example='****d718e2ff4f018ccf419a7b71****'),
    voiceId?: string(name='VoiceId', example='xiaozhuan'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model SubmitCustomizedVoiceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitCustomizedVoiceJobResponseBody(name='body'),
}

async function submitCustomizedVoiceJob(request: SubmitCustomizedVoiceJobRequest): SubmitCustomizedVoiceJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitCustomizedVoiceJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitDNAJobRequest {
  config?: string(name='Config', example='{"SaveType": "save","MediaType"":"video"}', position='Query'),
  DBId: string(name='DBId', example='2288c6ca184c0e47098a5b665e2a12****', position='Query'),
  input: {
    media: string(name='Media', example='1b1b9cd148034739af413150fded****'),
    type: string(name='Type', example='Media'),
  }(name='Input', shrink='json', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pipelineId?: string(name='PipelineId', example='5246b8d12a62433ab77845074039****', position='Query'),
  primaryKey: string(name='PrimaryKey', example='3ca84a39a9024f19853b21be9cf9****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateId?: string(name='TemplateId', example='S00000101-100060', position='Query'),
  userData?: string(name='UserData', example='userData', position='Query'),
}

model SubmitDNAJobResponseBody = {
  jobId?: string(name='JobId', example='88c6ca184c0e47098a5b665e2****'),
  requestId?: string(name='RequestId', example='25818875-5F78-4A13-BEF6-D7393642CA58'),
}

model SubmitDNAJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitDNAJobResponseBody(name='body'),
}

async function submitDNAJob(request: SubmitDNAJobRequest): SubmitDNAJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitDNAJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitDynamicChartJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  axisParams?: string(name='AxisParams', example='{"FontFile":"Microsoft YaHei","XAxisFontSize":"30","YAxisFontSize":"30","XAxisFontInterval":"30","AxisColor":"30"}', position='Query'),
  background?: string(name='Background', example='{"Color":"#000000","ImageUrl":"http://your-bucket.oss-cn-shanghai.aliyuncs.com/obj.jpg"}', position='Query'),
  chartConfig?: string(name='ChartConfig', example='{"Style":"Normal","TitleStartTime":"3000","ChartStartTime":"3000","VideoDuration":"15000"}', position='Query'),
  chartTitle?: string(name='ChartTitle', position='Query'),
  chartType: string(name='ChartType', example='Line', position='Query'),
  dataSource?: string(name='DataSource', position='Query'),
  description?: string(name='Description', position='Query'),
  input: string(name='Input', example='{"XlsFile":"https://your-bucket.oss-cn-shanghai.aliyuncs.com/obj.xls"}', position='Query'),
  outputConfig: string(name='OutputConfig', example='{"MediaURL":"https://your-bucket.oss-cn-shanghai.aliyuncs.com/obj.mp4","Bitrate":2000,"Width":800,"Height":680}', position='Query'),
  subtitle?: string(name='Subtitle', position='Query'),
  title?: string(name='Title', position='Query'),
  unit?: string(name='Unit', position='Query'),
  userData?: string(name='UserData', example='{"user":"data"}', position='Query'),
}

model SubmitDynamicChartJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model SubmitDynamicChartJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitDynamicChartJobResponseBody(name='body'),
}

async function submitDynamicChartJob(request: SubmitDynamicChartJobRequest): SubmitDynamicChartJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitDynamicChartJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitDynamicImageJobRequest {
  input: {
    media: string(name='Media', example='oss://bucket/object.mp4'),
    type: string(name='Type', example='OSS'),
  }(name='Input', shrink='json', position='Query'),
  name?: string(name='Name', example='SampleJob', position='Query'),
  output: {
    media: string(name='Media', example='****96e8864746a0b6f3****'),
    type: string(name='Type', example='Media'),
  }(name='Output', shrink='json', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='****96e8864746a0b6f3****'),
    priority?: int32(name='Priority', example='6'),
  }(name='ScheduleConfig', shrink='json', position='Query'),
  templateConfig: {
    overwriteParams?: {
      format?: string(name='Format', example='gif'),
      fps?: int32(name='Fps', example='15'),
      height?: int32(name='Height', example='720'),
      longShortMode?: boolean(name='LongShortMode', example='false'),
      scanMode?: string(name='ScanMode', example='progressive'),
      timeSpan?: {
        duration?: string(name='Duration'),
        end?: string(name='End'),
        seek?: string(name='Seek'),
      }(name='TimeSpan'),
      width?: int32(name='Width', example='1024'),
    }(name='OverwriteParams'),
    templateId: string(name='TemplateId', example='****96e8864746a0b6f3****'),
  }(name='TemplateConfig', shrink='json', position='Query'),
  userData?: string(name='UserData', example='{"SampleKey": "SampleValue"}', position='Query'),
}

model SubmitDynamicImageJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model SubmitDynamicImageJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitDynamicImageJobResponseBody(name='body'),
}

async function submitDynamicImageJob(request: SubmitDynamicImageJobRequest): SubmitDynamicImageJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitDynamicImageJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitIProductionJobRequest {
  functionName: string(name='FunctionName', example='Cover', position='Query'),
  input: {
    media: string(name='Media', example='oss://bucket/object'),
    type: string(name='Type', example='OSS'),
  }(name='Input', shrink='json', position='Query'),
  jobParams?: string(name='JobParams', example='{"Model":"gif"}', position='Query'),
  name?: string(name='Name', position='Query'),
  output: {
    media: string(name='Media', example='oss://bucket/object'),
    type: string(name='Type', example='OSS'),
  }(name='Output', shrink='json', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='5246b8d12a62433ab77845074039c3dc'),
    priority?: int32(name='Priority', example='6'),
  }(name='ScheduleConfig', shrink='json', position='Query'),
  templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  userData?: string(name='UserData', example='{"test":1}', position='Query'),
}

model SubmitIProductionJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', example='C1849434-FC47-5DC1-92B6-F7EAAFE3851E'),
}

model SubmitIProductionJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitIProductionJobResponseBody(name='body'),
}

async function submitIProductionJob(request: SubmitIProductionJobRequest): SubmitIProductionJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitIProductionJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitLiveEditingJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  clips: string(name='Clips', example='[{\\"StartTime\\": \\" 2021-06-21T08:01:00Z\\",  \\"EndTime\\": \\" 2021-06-21T08:03:00Z\\" ,  "AppName": "app", "DomainName": "domain.com", "StreamName": "stream"},  {\\"StartTime\\": \\" 2021-06-21T08:05:00Z\\",  \\"EndTime\\": \\" 2021-06-21T08:09:00Z\\" }]', position='Query'),
  liveStreamConfig?: string(name='LiveStreamConfig', example='{ "AppName": "app", "DomainName": "domain.com", "StreamName": "stream"  }', position='Query'),
  mediaProduceConfig?: string(name='MediaProduceConfig', example='{ "Mode": "AccurateFast"}', position='Query'),
  outputMediaConfig?: string(name='OutputMediaConfig', position='Query'),
  outputMediaTarget?: string(name='OutputMediaTarget', position='Query'),
  projectId?: string(name='ProjectId', example='****fddd7748b58bf1d47e95****', position='Query'),
  userData?: string(name='UserData', example='{"key": "value"}', position='Query'),
}

model SubmitLiveEditingJobResponseBody = {
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
  mediaId?: string(name='MediaId', example='****c469e944b5a856828dc2****'),
  mediaURL?: string(name='MediaURL', example='http://test-bucket.cn-shanghai.aliyuncs.com/test.mp4'),
  projectId?: string(name='ProjectId', example='****fddd7748b58bf1d47e95****'),
  requestId?: string(name='RequestId', example='****36-3C1E-4417-BDB2-1E034F****'),
  vodMediaId?: string(name='VodMediaId', example='****d7578s4h75ci945c14b****'),
}

model SubmitLiveEditingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitLiveEditingJobResponseBody(name='body'),
}

async function submitLiveEditingJob(request: SubmitLiveEditingJobRequest): SubmitLiveEditingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitLiveEditingJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitLiveRecordJobRequest {
  name: string(name='Name', description='代表资源名称的资源属性字段', example='live stream record 1', position='Body'),
  notifyUrl?: string(name='NotifyUrl', description='回调地址', example='https://example.com/imsnotify', position='Body'),
  recordOutput: {
    bucket?: string(name='Bucket', example='imsbucket1'),
    endpoint?: string(name='Endpoint', example='oss-cn-hangzhou.aliyuncs.com'),
    type: string(name='Type', example='oss'),
  }(name='RecordOutput', shrink='json', position='Body'),
  streamInput: {
    type: string(name='Type', example='rtmp'),
    url?: string(name='Url', example='rtmp://example.com/live/stream1'),
  }(name='StreamInput', shrink='json', position='Body'),
  templateId: string(name='TemplateId', description='录制模板ID', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66', position='Body'),
}

model SubmitLiveRecordJobResponseBody = {
  jobId?: string(name='JobId', example='ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66'),
  requestId?: string(name='RequestId', example='BEA98A0C-7870-15FE-B96F-8880BB600A2C'),
}

model SubmitLiveRecordJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitLiveRecordJobResponseBody(name='body'),
}

async function submitLiveRecordJob(request: SubmitLiveRecordJobRequest): SubmitLiveRecordJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitLiveRecordJob', 'POST', '/', 'json', true, 'form', request);
}

model SubmitLiveSnapshotJobRequest {
  callbackUrl?: string(name='CallbackUrl', example='http://www.aliyun.com/snapshot/callback', position='Body'),
  jobName: string(name='JobName', position='Body'),
  snapshotOutput: {
    bucket: string(name='Bucket', example='testbucket'),
    endpoint: string(name='Endpoint', example='oss-cn-shanghai.aliyuncs.com'),
    storageType: string(name='StorageType', example='oss'),
  }(name='SnapshotOutput', shrink='json', position='Body'),
  streamInput: {
    type: string(name='Type', example='rtmp'),
    url: string(name='Url', example='rtmp://www.aliyun.com/stream'),
  }(name='StreamInput', shrink='json', position='Body'),
  templateId: string(name='TemplateId', example='****a046-263c-3560-978a-fb287782****', position='Body'),
}

model SubmitLiveSnapshotJobResponseBody = {
  jobId?: string(name='JobId', example='****a046-263c-3560-978a-fb287666****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model SubmitLiveSnapshotJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitLiveSnapshotJobResponseBody(name='body'),
}

async function submitLiveSnapshotJob(request: SubmitLiveSnapshotJobRequest): SubmitLiveSnapshotJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitLiveSnapshotJob', 'POST', '/', 'json', true, 'form', request);
}

model SubmitLiveTranscodeJobRequest {
  name: string(name='Name', example='task1', minLength=1, maxLength=128, position='Query'),
  startMode: int32(name='StartMode', example='0', position='Query'),
  streamInput: {
    inputUrl: string(name='InputUrl', example='rtmp://mydomain/app/stream1'),
    type: string(name='Type', example='rtmp'),
  }(name='StreamInput', shrink='json', position='Query'),
  templateId: string(name='TemplateId', example='****96e8864746a0b6f3****', position='Query'),
  timedConfig?: {
    endTime?: string(name='EndTime', example='2022-07-20T08:20:32Z'),
    startTime?: string(name='StartTime', example='2022-02-21T00:00:00Z'),
  }(name='TimedConfig', shrink='json', position='Query'),
  transcodeOutput: {
    domainName?: string(name='DomainName', example='mydomain'),
    type: string(name='Type', example='LiveCenter'),
  }(name='TranscodeOutput', shrink='json', position='Query'),
}

model SubmitLiveTranscodeJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
}

model SubmitLiveTranscodeJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitLiveTranscodeJobResponseBody(name='body'),
}

async function submitLiveTranscodeJob(request: SubmitLiveTranscodeJobRequest): SubmitLiveTranscodeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitLiveTranscodeJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitMediaCensorJobRequest {
  barrages?: string(name='Barrages', example='hello world', position='Query'),
  coverImages?: string(name='CoverImages', example='[{"Bucket":"example-bucket-****","Location":"oss-cn-shanghai","Object":"example-****.jpeg","RoleArn":"acs:ram::1997018457688683:role/AliyunICEDefaultRole"}]', position='Query'),
  description?: string(name='Description', example='example description', position='Query'),
  input?: {
    media?: string(name='Media', example='1b1b9cd148034739af413150fded****'),
    type?: string(name='Type', example='Media'),
  }(name='Input', shrink='json', position='Query'),
  notifyUrl?: string(name='NotifyUrl', example='mns://125340688170****.oss-cn-shanghai.aliyuncs.com/queues/example-pipeline', position='Query'),
  output?: string(name='Output', example='oss://sashimi-cn-shanghai/censor/snapshot-{Count}.jpg', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='5246b8d12a62433ab77845074039****'),
    priority?: int32(name='Priority', example='6'),
  }(name='ScheduleConfig', shrink='json', position='Query'),
  templateId?: string(name='TemplateId', example='S00000001-100060', position='Query'),
  title?: string(name='Title', example='Hello World', position='Query'),
  userData?: string(name='UserData', example='UserDatatestid-001-****', position='Query'),
}

model SubmitMediaCensorJobResponseBody = {
  jobId?: string(name='JobId', example='88c6ca184c0e47098a5b665e2****'),
  requestId?: string(name='RequestId', example='25818875-5F78-4A13-BEF6-D7393642CA58'),
}

model SubmitMediaCensorJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitMediaCensorJobResponseBody(name='body'),
}

async function submitMediaCensorJob(request: SubmitMediaCensorJobRequest): SubmitMediaCensorJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitMediaCensorJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitMediaInfoJobRequest {
  input: {
    media: string(name='Media', example='oss://bucket/path/to/video.mp4'),
    type: string(name='Type', example='OSS'),
  }(name='Input', shrink='json', position='Query'),
  name?: string(name='Name', example='job-name', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
    priority?: int32(name='Priority', example='5'),
  }(name='ScheduleConfig', shrink='json', position='Query'),
  userData?: string(name='UserData', example='user-data', position='Query'),
}

model SubmitMediaInfoJobResponseBody = {
  mediaInfoJob?: {
    async?: boolean(name='Async', example='true'),
    finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
    input?: {
      media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
      type?: string(name='Type', example='OSS'),
    }(name='Input'),
    jobId?: string(name='JobId', example='ab4802364a2e49208c99efab82dfa8e8'),
    mediaInfoProperty?: {
      audioStreamInfoList?: [ 
        {
          bitrate?: string(name='Bitrate', example='0.f'),
          channelLayout?: string(name='ChannelLayout', example='stereo'),
          channels?: string(name='Channels', example='2'),
          codecLongName?: string(name='CodecLongName', example='AAC (Advanced Audio Coding)'),
          codecName?: string(name='CodecName', example='aac'),
          codecTag?: string(name='CodecTag', example='0x000f'),
          codecTagString?: string(name='CodecTagString', example='[15][0][0][0]'),
          codecTimeBase?: string(name='CodecTimeBase', example='1/44100'),
          duration?: string(name='Duration', example='403.039989'),
          index?: string(name='Index', example='1'),
          lang?: string(name='Lang', example='us'),
          sampleFmt?: string(name='SampleFmt', example='fltp'),
          sampleRate?: string(name='SampleRate', example='44100'),
          startTime?: string(name='StartTime', example='1.473556'),
          timebase?: string(name='Timebase', example='1/90000'),
        }
      ](name='AudioStreamInfoList'),
      fileBasicInfo?: {
        bitrate?: string(name='Bitrate', example='888.563'),
        duration?: string(name='Duration', example='403.039999'),
        fileName?: string(name='FileName', example='file.m3u8'),
        fileSize?: string(name='FileSize', example='31737'),
        fileStatus?: string(name='FileStatus', example='Normal'),
        fileType?: string(name='FileType', example='source_file'),
        fileUrl?: string(name='FileUrl', example='http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8'),
        formatName?: string(name='FormatName', example='hls,applehttp'),
        height?: string(name='Height', example='478'),
        mediaId?: string(name='MediaId', example='2b36bd19c13f4145b094c0cad80dbce5'),
        region?: string(name='Region', example='cn-shanghai'),
        width?: string(name='Width', example='848'),
      }(name='FileBasicInfo'),
      videoStreamInfoList?: [ 
        {
          avgFps?: string(name='Avg_fps', example='25.0'),
          bitRate?: string(name='Bit_rate', example='888.563'),
          codecLongName?: string(name='Codec_long_name', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
          codecName?: string(name='Codec_name', example='h264'),
          codecTag?: string(name='Codec_tag', example='0x001b'),
          codecTagString?: string(name='Codec_tag_string', example='[27][0][0][0]'),
          codecTimeBase?: string(name='Codec_time_base', example='1/50'),
          dar?: string(name='Dar', example='16:9'),
          duration?: string(name='Duration', example='403.039989'),
          fps?: string(name='Fps', example='25.0'),
          hasBFrames?: string(name='Has_b_frames', example='2'),
          height?: string(name='Height', example='478'),
          index?: string(name='Index', example='0'),
          lang?: string(name='Lang', example='zh'),
          level?: string(name='Level', example='31'),
          numFrames?: string(name='NumFrames', example='10040'),
          pixFmt?: string(name='PixFmt', example='yuv420p'),
          profile?: string(name='Profile', example='High'),
          rotate?: string(name='Rotate', example='0'),
          sar?: string(name='Sar', example='478:477'),
          startTime?: string(name='Start_time', example='1.473556'),
          timeBase?: string(name='Time_base', example='1/90000'),
          width?: string(name='Width', example='848'),
        }
      ](name='VideoStreamInfoList'),
    }(name='MediaInfoProperty'),
    name?: string(name='Name', example='job-name'),
    requestId?: string(name='RequestId', example='4879B9DE-E4B6-19DC-91F5-9D5F4DCE4168'),
    scheduleConfig?: {
      pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
      priority?: int32(name='Priority', example='5'),
    }(name='ScheduleConfig'),
    status?: string(name='Status', example='Init'),
    submitResultJson?: map[string]any(name='SubmitResultJson', example='{}'),
    submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
    triggerSource?: string(name='TriggerSource', example='API'),
    userData?: string(name='UserData', example='user-data'),
  }(name='MediaInfoJob', description='MediaInfoJobDTO'),
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model SubmitMediaInfoJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitMediaInfoJobResponseBody(name='body'),
}

async function submitMediaInfoJob(request: SubmitMediaInfoJobRequest): SubmitMediaInfoJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitMediaInfoJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitMediaProducingJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  clientToken?: string(name='ClientToken', example='****12e8864746a0a398****', position='Query'),
  clipsParam?: string(name='ClipsParam', position='Query'),
  editingProduceConfig?: string(name='EditingProduceConfig', position='Query'),
  mediaMetadata?: string(name='MediaMetadata', example='{
      "Title":"test-title",
      "Tags":"test-tags1,tags2"
}', position='Query'),
  outputMediaConfig: string(name='OutputMediaConfig', example='{"MediaURL":"https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4"}', position='Query'),
  outputMediaTarget?: string(name='OutputMediaTarget', example='oss-object', position='Query'),
  projectId?: string(name='ProjectId', example='xxxxxfb2101cb318xxxxx', position='Query'),
  projectMetadata?: string(name='ProjectMetadata', position='Query'),
  source?: string(name='Source', example='OPENAPI', position='Query'),
  templateId?: string(name='TemplateId', example='****96e8864746a0b6f3****', position='Query'),
  timeline?: string(name='Timeline', position='Body'),
  userData?: string(name='UserData', position='Query'),
}

model SubmitMediaProducingJobResponseBody = {
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
  mediaId?: string(name='MediaId', example='****c469e944b5a856828dc2****'),
  projectId?: string(name='ProjectId', example='****b4549d46c88681030f6e****'),
  requestId?: string(name='RequestId', example='****36-3C1E-4417-BDB2-1E034F****'),
  vodMediaId?: string(name='VodMediaId', example='****d8s4h75ci975745c14b****'),
}

model SubmitMediaProducingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitMediaProducingJobResponseBody(name='body'),
}

async function submitMediaProducingJob(request: SubmitMediaProducingJobRequest): SubmitMediaProducingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitMediaProducingJob', 'POST', '/', 'json', true, 'form', request);
}

model SubmitPackageJobRequest {
  inputs: [ 
    {
      input: {
        media: string(name='Media', example='oss://bucket/path/to/video.mp4'),
        type: string(name='Type', example='OSS'),
      }(name='Input'),
    }
  ](name='Inputs', shrink='json', position='Query'),
  name?: string(name='Name', example='job-name', position='Query'),
  output: {
    media: string(name='Media', example='oss://bucket/path/to/video.mp4'),
    type: string(name='Type', example='OSS'),
  }(name='Output', shrink='json', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
    priority?: int32(name='Priority', example='5'),
  }(name='ScheduleConfig', shrink='json', position='Query'),
  userData?: string(name='UserData', example='{"param": "value"}', position='Query'),
}

model SubmitPackageJobResponseBody = {
  jobId?: string(name='JobId', example='2d705f385b704ee5b*******a36d93e0'),
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model SubmitPackageJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitPackageJobResponseBody(name='body'),
}

async function submitPackageJob(request: SubmitPackageJobRequest): SubmitPackageJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitPackageJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitSmarttagJobRequest {
  content?: string(name='Content', example='example content ****', position='Query'),
  contentAddr?: string(name='ContentAddr', example='http://123.com/testVideo.mp4', position='Query'),
  contentType?: string(name='ContentType', example='application/zip', position='Query'),
  input?: {
    media?: string(name='Media', example='c5c62d8f0361337cab312dce8e77dc6d'),
    type?: string(name='Type', example='Media'),
  }(name='Input', description='input', shrink='json', position='Query'),
  notifyUrl?: string(name='NotifyUrl', example='https://example.com/endpoint/aliyun/ai?id=76401125000***', position='Query'),
  params?: string(name='Params', example='{"needAsrData":true, "needOcrData":false}', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='acdbfe4323bcfdae'),
    priority?: string(name='Priority', example='4'),
  }(name='ScheduleConfig', description='scheduleConfig', shrink='json', position='Query'),
  templateId?: string(name='TemplateId', example='39f8e0bc005e4f309379701645f4', position='Query'),
  title?: string(name='Title', example='example-title-****', position='Query'),
  userData?: string(name='UserData', example='{“a”:"test"}', position='Query'),
}

model SubmitSmarttagJobResponseBody = {
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model SubmitSmarttagJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitSmarttagJobResponseBody(name='body'),
}

async function submitSmarttagJob(request: SubmitSmarttagJobRequest): SubmitSmarttagJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitSmarttagJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitSnapshotJobRequest {
  input: {
    media: string(name='Media', example='oss://bucket/object.mp4'),
    type: string(name='Type', example='Media'),
  }(name='Input', shrink='json', position='Query'),
  name?: string(name='Name', example='SampleJob', position='Query'),
  output: {
    media: string(name='Media', example='oss://test-bucket/output-{Count}.jpg'),
    type: string(name='Type', example='OSS'),
  }(name='Output', shrink='json', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='****96e8864746a0b6f3****'),
  }(name='ScheduleConfig', shrink='json', position='Query'),
  templateConfig: {
    overwriteParams?: {
      blackLevel?: int32(name='BlackLevel', example='30'),
      count?: long(name='Count', example='5'),
      frameType?: string(name='FrameType', example='intra'),
      height?: int32(name='Height', example='480'),
      interval?: long(name='Interval', example='10'),
      isSptFrag?: boolean(name='IsSptFrag', example='true'),
      pixelBlackThreshold?: int32(name='PixelBlackThreshold', example='70'),
      spriteSnapshotConfig?: {
        cellHeight?: int32(name='CellHeight', example='480'),
        cellWidth?: int32(name='CellWidth', example='720'),
        color?: string(name='Color', example='#000000'),
        columns?: int32(name='Columns', example='20'),
        lines?: int32(name='Lines', example='20'),
        margin?: int32(name='Margin', example='20'),
        padding?: int32(name='Padding', example='20'),
      }(name='SpriteSnapshotConfig'),
      time?: long(name='Time', example='1000'),
      type?: string(name='Type', example='Sprite'),
      width?: int32(name='Width', example='720'),
    }(name='OverwriteParams'),
    templateId: string(name='TemplateId', example='****96e8864746a0b6f3****'),
  }(name='TemplateConfig', shrink='json', position='Query'),
  userData?: string(name='UserData', example='{"test parameter": "test value"}', position='Query'),
}

model SubmitSnapshotJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model SubmitSnapshotJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitSnapshotJobResponseBody(name='body'),
}

async function submitSnapshotJob(request: SubmitSnapshotJobRequest): SubmitSnapshotJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitSnapshotJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitStandardCustomizedVoiceJobRequest {
  audios?: string(name='Audios', example='****571c704445f9a0ee011406c2****,****571c704445f9a0ee011406c2****,****571c704445f9a0ee011406c2****', position='Query'),
  authentication?: string(name='Authentication', example='****571c704445f9a0ee011406c2****', position='Query'),
  demoAudioMediaURL?: string(name='DemoAudioMediaURL', example='https://your-bucket.oss-cn-shanghai.aliyuncs.com/demo.mp3', position='Query'),
  gender?: string(name='Gender', example='female', position='Query'),
  voiceName?: string(name='VoiceName', position='Query'),
}

model SubmitStandardCustomizedVoiceJobResponseBody = {
  data?: {
    jobId?: string(name='JobId', example='****d718e2ff4f018ccf419a7b71****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
  success?: boolean(name='Success', example='true'),
}

model SubmitStandardCustomizedVoiceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitStandardCustomizedVoiceJobResponseBody(name='body'),
}

async function submitStandardCustomizedVoiceJob(request: SubmitStandardCustomizedVoiceJobRequest): SubmitStandardCustomizedVoiceJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitStandardCustomizedVoiceJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitSyncMediaInfoJobRequest {
  input: {
    media: string(name='Media', example='oss://bucket/path/to/video.mp4'),
    type: string(name='Type', example='OSS'),
  }(name='Input', shrink='json', position='Query'),
  name?: string(name='Name', example='job-name', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
    priority?: int32(name='Priority', example='5'),
  }(name='ScheduleConfig', shrink='json', position='Query'),
  userData?: string(name='UserData', example='user-data', position='Query'),
}

model SubmitSyncMediaInfoJobResponseBody = {
  mediaInfoJob?: {
    async?: boolean(name='Async', example='true'),
    finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
    input?: {
      media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
      type?: string(name='Type', example='OSS'),
    }(name='Input'),
    jobId?: string(name='JobId', example='ab4802364a2e49208c99efab82dfa8e8'),
    mediaInfoProperty?: {
      audioStreamInfoList?: [ 
        {
          bitrate?: string(name='Bitrate', example='0.f'),
          channelLayout?: string(name='ChannelLayout', example='stereo'),
          channels?: string(name='Channels', example='2'),
          codecLongName?: string(name='CodecLongName', example='AAC (Advanced Audio Coding)'),
          codecName?: string(name='CodecName', example='aac'),
          codecTag?: string(name='CodecTag', example='0x000f'),
          codecTagString?: string(name='CodecTagString', example='[15][0][0][0]'),
          codecTimeBase?: string(name='CodecTimeBase', example='1/44100'),
          duration?: string(name='Duration', example='403.039989'),
          index?: string(name='Index', example='1'),
          lang?: string(name='Lang', example='us'),
          sampleFmt?: string(name='SampleFmt', example='fltp'),
          sampleRate?: string(name='SampleRate', example='44100'),
          startTime?: string(name='StartTime', example='1.473556'),
          timebase?: string(name='Timebase', example='1/90000'),
        }
      ](name='AudioStreamInfoList'),
      fileBasicInfo?: {
        bitrate?: string(name='Bitrate', example='888.563'),
        duration?: string(name='Duration', example='403.039999'),
        fileName?: string(name='FileName', example='file.m3u8'),
        fileSize?: string(name='FileSize', example='31737'),
        fileStatus?: string(name='FileStatus', example='Normal'),
        fileType?: string(name='FileType', example='source_file'),
        fileUrl?: string(name='FileUrl', example='http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8'),
        formatName?: string(name='FormatName', example='hls,applehttp'),
        height?: string(name='Height', example='478'),
        mediaId?: string(name='MediaId', example='999e68259c924f52a6be603cbb3f91cc'),
        region?: string(name='Region', example='cn-shanghai'),
        width?: string(name='Width', example='848'),
      }(name='FileBasicInfo'),
      videoStreamInfoList?: [ 
        {
          avgFps?: string(name='Avg_fps', example='25.0'),
          bitRate?: string(name='Bit_rate', example='888.563'),
          codecLongName?: string(name='Codec_long_name', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
          codecName?: string(name='Codec_name', example='h264'),
          codecTag?: string(name='Codec_tag', example='0x001b'),
          codecTagString?: string(name='Codec_tag_string', example='[27][0][0][0]'),
          codecTimeBase?: string(name='Codec_time_base', example='1/50'),
          dar?: string(name='Dar', example='16:9'),
          duration?: string(name='Duration', example='403.039989'),
          fps?: string(name='Fps', example='25.0'),
          hasBFrames?: string(name='Has_b_frames', example='2'),
          height?: string(name='Height', example='478'),
          index?: string(name='Index', example='0'),
          lang?: string(name='Lang', example='zh'),
          level?: string(name='Level', example='31'),
          numFrames?: string(name='NumFrames', example='10040'),
          pixFmt?: string(name='PixFmt', example='yuv420p'),
          profile?: string(name='Profile', example='High'),
          rotate?: string(name='Rotate', example='0'),
          sar?: string(name='Sar', example='478:477'),
          startTime?: string(name='Start_time', example='1.473556'),
          timeBase?: string(name='Time_base', example='1/90000'),
          width?: string(name='Width', example='848'),
        }
      ](name='VideoStreamInfoList'),
    }(name='MediaInfoProperty'),
    name?: string(name='Name', example='job-name'),
    requestId?: string(name='RequestId', example='4879B9DE-E4B6-19DC-91F5-9D5F4DCE4168'),
    scheduleConfig?: {
      pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
      priority?: int32(name='Priority', example='5'),
    }(name='ScheduleConfig'),
    status?: string(name='Status', example='Init'),
    submitResultJson?: map[string]any(name='SubmitResultJson', example='{}'),
    submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
    triggerSource?: string(name='TriggerSource', example='API'),
    userData?: string(name='UserData', example='user-data'),
  }(name='MediaInfoJob', description='MediaInfoJobDTO'),
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model SubmitSyncMediaInfoJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitSyncMediaInfoJobResponseBody(name='body'),
}

async function submitSyncMediaInfoJob(request: SubmitSyncMediaInfoJobRequest): SubmitSyncMediaInfoJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitSyncMediaInfoJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitTextGenerateJobRequest {
  description?: string(name='Description', position='Query'),
  generateConfig?: string(name='GenerateConfig', position='Query'),
  title?: string(name='Title', position='Query'),
  type?: string(name='Type', example='MarketingCopy', position='Query'),
  userData?: string(name='UserData', position='Query'),
}

model SubmitTextGenerateJobResponseBody = {
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
  requestId?: string(name='RequestId', description='Id of the request', example='******11-DB8D-4A9A-875B-275798******'),
}

model SubmitTextGenerateJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitTextGenerateJobResponseBody(name='body'),
}

async function submitTextGenerateJob(request: SubmitTextGenerateJobRequest): SubmitTextGenerateJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitTextGenerateJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitTranscodeJobRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  inputGroup: [ 
    {
      inputUrl?: string(name='InputUrl', example='oss://bucket/path/to/video.mp4'),
      media: string(name='Media', example='oss://bucket/path/to/video.mp4'),
      type: string(name='Type', example='OSS'),
    }
  ](name='InputGroup', shrink='json', position='Query'),
  name?: string(name='Name', example='job-name', position='Query'),
  outputGroup: [ 
    {
      output: {
        media: string(name='Media', example='oss://bucket/path/to/video.mp4'),
        outputUrl?: string(name='OutputUrl', example='oss://bucket/path/to/{MediaId}/{JobId}.mp4'),
        type: string(name='Type', example='OSS'),
      }(name='Output'),
      processConfig: {
        combineConfigs?: [ 
          {
            audioIndex: string(name='AudioIndex', example='0 或 exclude'),
            duration?: double(name='Duration', example='20.0'),
            start?: double(name='Start', example='0.0'),
            videoIndex: string(name='VideoIndex', example='0 或 exclude'),
          }
        ](name='CombineConfigs'),
        encryption?: {
          cipherText?: string(name='CipherText', example='MTYi00NDU0LTg5O****'),
          decryptKeyUri?: string(name='DecryptKeyUri', example='https://sample.com/path?CipherText=MTYi00NDU0LTg5O****'),
          encryptType?: string(name='EncryptType', example='PrivateEncryption'),
          keyServiceType?: string(name='KeyServiceType', example='KMS'),
        }(name='Encryption'),
        imageWatermarks?: [ 
          {
            overwriteParams?: {
              dx?: string(name='Dx', example='10'),
              dy?: string(name='Dy', example='10'),
              file?: {
                media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                type?: string(name='Type', example='OSS'),
              }(name='File'),
              height?: string(name='Height', example='32'),
              referPos?: string(name='ReferPos', example='TopLeft'),
              timeline?: {
                duration?: string(name='Duration', example='ToEND'),
                start?: string(name='Start', example='00:00:05'),
              }(name='Timeline'),
              width?: string(name='Width', example='32'),
            }(name='OverwriteParams'),
            templateId: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }
        ](name='ImageWatermarks'),
        subtitles?: [ 
          {
            overwriteParams?: {
              charEnc?: string(name='CharEnc', example='UTF-8'),
              file?: {
                media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                type?: string(name='Type', example='OSS'),
              }(name='File'),
              format?: string(name='Format', example='vtt'),
            }(name='OverwriteParams'),
            templateId: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }
        ](name='Subtitles'),
        textWatermarks?: [ 
          {
            overwriteParams?: {
              adaptive?: string(name='Adaptive', example='false'),
              borderColor?: string(name='BorderColor', example='#006400'),
              borderWidth?: int32(name='BorderWidth', example='0'),
              content?: string(name='Content', example='测试水印'),
              fontAlpha?: string(name='FontAlpha', example='1.0'),
              fontColor?: string(name='FontColor', example='#006400'),
              fontName?: string(name='FontName', example='SimSun'),
              fontSize?: int32(name='FontSize', example='16'),
              left?: string(name='Left', example='10'),
              top?: string(name='Top', example='10'),
            }(name='OverwriteParams'),
            templateId: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }
        ](name='TextWatermarks'),
        transcode: {
          overwriteParams?: {
            audio?: {
              bitrate?: string(name='Bitrate', example='128'),
              channels?: string(name='Channels', example='2'),
              codec?: string(name='Codec', example='AAC'),
              profile?: string(name='Profile', example='aac_low'),
              remove?: string(name='Remove', example='false'),
              samplerate?: string(name='Samplerate', example='44100'),
              volume?: {
                integratedLoudnessTarget?: string(name='IntegratedLoudnessTarget', example='-6'),
                loudnessRangeTarget?: string(name='LoudnessRangeTarget', example='8'),
                method?: string(name='Method', example='auto'),
                truePeak?: string(name='TruePeak', example='-1'),
              }(name='Volume'),
            }(name='Audio'),
            container?: {
              format?: string(name='Format', example='mp4'),
            }(name='Container'),
            muxConfig?: {
              segment?: {
                duration?: string(name='Duration', example='10'),
                forceSegTime?: string(name='ForceSegTime', example='2,3'),
              }(name='Segment'),
            }(name='MuxConfig'),
            transConfig?: {
              adjDarMethod?: string(name='AdjDarMethod'),
              isCheckAudioBitrate?: string(name='IsCheckAudioBitrate'),
              isCheckAudioBitrateFail?: string(name='IsCheckAudioBitrateFail'),
              isCheckReso?: string(name='IsCheckReso'),
              isCheckResoFail?: string(name='IsCheckResoFail'),
              isCheckVideoBitrate?: string(name='IsCheckVideoBitrate'),
              isCheckVideoBitrateFail?: string(name='IsCheckVideoBitrateFail'),
              transMode?: string(name='TransMode'),
            }(name='TransConfig'),
            video?: {
              abrMax?: string(name='AbrMax', example='6000'),
              bitrate?: string(name='Bitrate', example='3000'),
              bufsize?: string(name='Bufsize', example='6000'),
              codec?: string(name='Codec', example='H.264'),
              crf?: string(name='Crf', example='23'),
              crop?: string(name='Crop', example='1280:800:0:140'),
              fps?: string(name='Fps', example='25'),
              gop?: string(name='Gop', example='250'),
              height?: string(name='Height', example='1080'),
              longShortMode?: string(name='LongShortMode', example='false'),
              maxrate?: string(name='Maxrate', example='9000'),
              pad?: string(name='Pad', example='1280:800:0:140'),
              pixFmt?: string(name='PixFmt', example='yuv420p'),
              preset?: string(name='Preset', example='medium'),
              profile?: string(name='Profile', example='Main'),
              remove?: string(name='Remove', example='false'),
              scanMode?: string(name='ScanMode', example='progressive'),
              width?: string(name='Width', example='1920'),
            }(name='Video'),
          }(name='OverwriteParams'),
          templateId: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
        }(name='Transcode'),
      }(name='ProcessConfig'),
    }
  ](name='OutputGroup', shrink='json', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
    priority?: int32(name='Priority', example='5'),
  }(name='ScheduleConfig', example='job-name', shrink='json', position='Query'),
  userData?: string(name='UserData', example='user-data', position='Query'),
}

model SubmitTranscodeJobResponseBody = {
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
  transcodeParentJob?: {
    createTime?: string(name='CreateTime', example='2022-01-12T08:49:41Z'),
    finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
    inputGroup?: [ 
      {
        media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
        type?: string(name='Type', example='OSS'),
      }
    ](name='InputGroup'),
    jobCount?: int32(name='JobCount', example='1'),
    name?: string(name='Name', example='transcode-job'),
    outputGroup?: [ 
      {
        output?: {
          media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
          type?: string(name='Type', example='OSS'),
        }(name='Output'),
        processConfig?: {
          combineConfigs?: [ 
            {
              audioIndex: string(name='AudioIndex', example='0 或 exclude'),
              duration?: double(name='Duration', example='20.0'),
              start?: double(name='Start', example='0.0'),
              videoIndex: string(name='VideoIndex', example='0 或 exclude'),
            }
          ](name='CombineConfigs'),
          encryption?: {
            cipherText?: string(name='CipherText', example='MTYi00NDU0LTg5O****'),
            decryptKeyUri?: string(name='DecryptKeyUri', example='https://sample.com/path?CipherText=MTYi00NDU0LTg5O****'),
            encryptType?: string(name='EncryptType', example='PrivateEncryption'),
            keyServiceType?: string(name='KeyServiceType', example='KMS'),
          }(name='Encryption'),
          imageWatermarks?: [ 
            {
              overwriteParams?: {
                dx?: string(name='Dx', example='10'),
                dy?: string(name='Dy', example='10'),
                file?: {
                  media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', example='OSS'),
                }(name='File'),
                height?: string(name='Height', example='32'),
                referPos?: string(name='ReferPos', example='TopLeft'),
                timeline?: {
                  duration?: string(name='Duration', example='ToEND'),
                  start?: string(name='Start', example='00:00:05'),
                }(name='Timeline'),
                width?: string(name='Width', example='32'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='ImageWatermarks'),
          subtitles?: [ 
            {
              overwriteParams?: {
                charEnc?: string(name='CharEnc', example='UTF-8'),
                file?: {
                  media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', example='OSS'),
                }(name='File'),
                format?: string(name='Format', example='vtt'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='Subtitles'),
          textWatermarks?: [ 
            {
              overwriteParams?: {
                adaptive?: string(name='Adaptive', example='false'),
                borderColor?: string(name='BorderColor', example='#006400'),
                borderWidth?: int32(name='BorderWidth', example='0'),
                content?: string(name='Content', example='测试水印'),
                fontAlpha?: string(name='FontAlpha', example='1.0'),
                fontColor?: string(name='FontColor', example='#006400'),
                fontName?: string(name='FontName', example='SimSun'),
                fontSize?: int32(name='FontSize', example='16'),
                left?: string(name='Left', example='10'),
                top?: string(name='Top', example='10'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='TextWatermarks'),
          transcode?: {
            overwriteParams?: {
              audio?: {
                bitrate?: string(name='Bitrate', example='128'),
                channels?: string(name='Channels', example='2'),
                codec?: string(name='Codec', example='AAC'),
                profile?: string(name='Profile', example='aac_low'),
                remove?: string(name='Remove', example='false'),
                samplerate?: string(name='Samplerate', example='44100'),
                volume?: {
                  integratedLoudnessTarget?: string(name='IntegratedLoudnessTarget', example='-6'),
                  loudnessRangeTarget?: string(name='LoudnessRangeTarget', example='8'),
                  method?: string(name='Method', example='auto'),
                  truePeak?: string(name='TruePeak', example='-1'),
                }(name='Volume'),
              }(name='Audio'),
              container?: {
                format?: string(name='Format', example='mp4'),
              }(name='Container'),
              muxConfig?: {
                segment?: {
                  duration?: string(name='Duration', example='10'),
                  forceSegTime?: string(name='ForceSegTime', example='2,3'),
                }(name='Segment'),
              }(name='MuxConfig'),
              transConfig?: {
                adjDarMethod?: string(name='AdjDarMethod'),
                isCheckAudioBitrate?: string(name='IsCheckAudioBitrate'),
                isCheckAudioBitrateFail?: string(name='IsCheckAudioBitrateFail'),
                isCheckReso?: string(name='IsCheckReso'),
                isCheckResoFail?: string(name='IsCheckResoFail'),
                isCheckVideoBitrate?: string(name='IsCheckVideoBitrate'),
                isCheckVideoBitrateFail?: string(name='IsCheckVideoBitrateFail'),
                transMode?: string(name='TransMode'),
              }(name='TransConfig'),
              video?: {
                abrMax?: string(name='AbrMax', example='6000'),
                bitrate?: string(name='Bitrate', example='3000'),
                bufsize?: string(name='Bufsize', example='6000'),
                codec?: string(name='Codec', example='H.264'),
                crf?: string(name='Crf', example='23'),
                crop?: string(name='Crop', example='1280:800:0:140'),
                fps?: string(name='Fps', example='25'),
                gop?: string(name='Gop', example='250'),
                height?: string(name='Height', example='1080'),
                longShortMode?: string(name='LongShortMode', example='false'),
                maxrate?: string(name='Maxrate', example='9000'),
                pad?: string(name='Pad', example='1280:800:0:140'),
                pixFmt?: string(name='PixFmt', example='yuv420p'),
                preset?: string(name='Preset', example='medium'),
                profile?: string(name='Profile', example='Main'),
                remove?: string(name='Remove', example='false'),
                scanMode?: string(name='ScanMode', example='progressive'),
                width?: string(name='Width', example='1920'),
              }(name='Video'),
            }(name='OverwriteParams'),
            templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }(name='Transcode'),
        }(name='ProcessConfig'),
      }
    ](name='OutputGroup'),
    parentJobId?: string(name='ParentJobId', example='8b2198504dd340b7b3c9842a74fc9baa'),
    percent?: int32(name='Percent', example='0'),
    requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
    scheduleConfig?: {
      pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
      priority?: int32(name='Priority', example='5'),
    }(name='ScheduleConfig'),
    status?: string(name='Status', example='Success'),
    submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
    transcodeJobList?: [ 
      {
        createTime?: string(name='CreateTime', example='2022-01-12T08:49:41Z'),
        finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
        inputGroup?: [ 
          {
            inputUrl?: string(name='InputUrl', example='oss://bucket/path/to/video.mp4'),
            media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
            type?: string(name='Type', example='OSS'),
          }
        ](name='InputGroup'),
        jobId?: string(name='JobId', example='7d6a7e0d4db2457a8d45ff5d43e1bf0a'),
        jobIndex?: int32(name='JobIndex', example='0'),
        name?: string(name='Name', example='transcode-job'),
        outFileMeta?: {
          audioStreamInfoList?: [ 
            {
              bitrate?: string(name='Bitrate', example='0.f'),
              channelLayout?: string(name='ChannelLayout', example='stereo'),
              channels?: string(name='Channels', example='2'),
              codecLongName?: string(name='CodecLongName', example='AAC (Advanced Audio Coding)'),
              codecName?: string(name='CodecName', example='aac'),
              codecTag?: string(name='CodecTag', example='0x000f'),
              codecTagString?: string(name='CodecTagString', example='[15][0][0][0]'),
              codecTimeBase?: string(name='CodecTimeBase', example='1/44100'),
              duration?: string(name='Duration', example='403.039989'),
              index?: string(name='Index', example='1'),
              lang?: string(name='Lang', example='cn'),
              sampleFmt?: string(name='SampleFmt', example='fltp'),
              sampleRate?: string(name='SampleRate', example='44100'),
              startTime?: string(name='StartTime', example='1.473556'),
              timebase?: string(name='Timebase', example='1/90000'),
            }
          ](name='AudioStreamInfoList'),
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', example='888.563'),
            duration?: string(name='Duration', example='403.039999'),
            fileName?: string(name='FileName', example='file.m3u8'),
            fileSize?: string(name='FileSize', example='31737'),
            fileStatus?: string(name='FileStatus', example='Normal'),
            fileType?: string(name='FileType', example='source_file'),
            fileUrl?: string(name='FileUrl', example='http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8'),
            formatName?: string(name='FormatName', example='hls,applehttp'),
            height?: string(name='Height', example='478'),
            mediaId?: string(name='MediaId', example='73e07de0f77171eca3fc7035d0b26402'),
            region?: string(name='Region', example='cn-shanghai'),
            width?: string(name='Width', example='848'),
          }(name='FileBasicInfo'),
          videoStreamInfoList?: [ 
            {
              avgFps?: string(name='Avg_fps', example='25.0'),
              bitRate?: string(name='Bit_rate', example='888.563'),
              codecLongName?: string(name='Codec_long_name', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
              codecName?: string(name='Codec_name', example='h264'),
              codecTag?: string(name='Codec_tag', example='0x001b'),
              codecTagString?: string(name='Codec_tag_string', example='[27][0][0][0]'),
              codecTimeBase?: string(name='Codec_time_base', example='1/50'),
              dar?: string(name='Dar', example='16:9'),
              duration?: string(name='Duration', example='403.039989'),
              fps?: string(name='Fps', example='25.0'),
              hasBFrames?: string(name='Has_b_frames', example='2'),
              height?: string(name='Height', example='478'),
              index?: string(name='Index', example='0'),
              lang?: string(name='Lang', example='cn'),
              level?: string(name='Level', example='31'),
              numFrames?: string(name='NumFrames', example='10040'),
              pixFmt?: string(name='PixFmt', example='yuv420p'),
              profile?: string(name='Profile', example='High'),
              rotate?: string(name='Rotate', example='0'),
              sar?: string(name='Sar', example='478:477'),
              startTime?: string(name='Start_time', example='1.473556'),
              timeBase?: string(name='Time_base', example='1/90000'),
              width?: string(name='Width', example='848'),
            }
          ](name='VideoStreamInfoList'),
        }(name='OutFileMeta'),
        output?: {
          media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
          outputUrl?: string(name='OutputUrl', example='oss://bucket/path/to/{MediaId}/{JobId}.mp4'),
          type?: string(name='Type', example='OSS'),
        }(name='Output'),
        parentJobId?: string(name='ParentJobId', example='8b2198504dd340b7b3c9842a74fc9baa'),
        processConfig?: {
          combineConfigs?: [ 
            {
              audioIndex: string(name='AudioIndex', example='0 或 exclude'),
              duration?: double(name='Duration', example='20.0'),
              start?: double(name='Start', example='0.0'),
              videoIndex: string(name='VideoIndex', example='0 或 exclude'),
            }
          ](name='CombineConfigs'),
          encryption?: {
            cipherText?: string(name='CipherText', example='MTYi00NDU0LTg5O****'),
            decryptKeyUri?: string(name='DecryptKeyUri', example='https://sample.com/path?CipherText=MTYi00NDU0LTg5O****'),
            encryptType?: string(name='EncryptType', example='PrivateEncryption'),
            keyServiceType?: string(name='KeyServiceType', example='KMS'),
          }(name='Encryption'),
          imageWatermarks?: [ 
            {
              overwriteParams?: {
                dx?: string(name='Dx', example='10'),
                dy?: string(name='Dy', example='10'),
                file?: {
                  media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', example='OSS'),
                }(name='File'),
                height?: string(name='Height', example='32'),
                referPos?: string(name='ReferPos', example='TopLeft'),
                timeline?: {
                  duration?: string(name='Duration', example='ToEND'),
                  start?: string(name='Start', example='00:00:05'),
                }(name='Timeline'),
                width?: string(name='Width', example='32'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='ImageWatermarks'),
          subtitles?: [ 
            {
              overwriteParams?: {
                charEnc?: string(name='CharEnc', example='UTF-8'),
                file?: {
                  media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', example='OSS'),
                }(name='File'),
                format?: string(name='Format', example='vtt'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='Subtitles'),
          textWatermarks?: [ 
            {
              overwriteParams?: {
                adaptive?: string(name='Adaptive', example='false'),
                borderColor?: string(name='BorderColor', example='#006400'),
                borderWidth?: int32(name='BorderWidth', example='0'),
                content?: string(name='Content', example='测试水印'),
                fontAlpha?: string(name='FontAlpha', example='1.0'),
                fontColor?: string(name='FontColor', example='#006400'),
                fontName?: string(name='FontName', example='SimSun'),
                fontSize?: int32(name='FontSize', example='16'),
                left?: string(name='Left', example='10'),
                top?: string(name='Top', example='10'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='TextWatermarks'),
          transcode?: {
            overwriteParams?: {
              audio?: {
                bitrate?: string(name='Bitrate', example='128'),
                channels?: string(name='Channels', example='2'),
                codec?: string(name='Codec', example='AAC'),
                profile?: string(name='Profile', example='aac_low'),
                remove?: string(name='Remove', example='false'),
                samplerate?: string(name='Samplerate', example='44100'),
                volume?: {
                  integratedLoudnessTarget?: string(name='IntegratedLoudnessTarget', example='-6'),
                  loudnessRangeTarget?: string(name='LoudnessRangeTarget', example='8'),
                  method?: string(name='Method', example='auto'),
                  truePeak?: string(name='TruePeak', example='-1'),
                }(name='Volume'),
              }(name='Audio'),
              container?: {
                format?: string(name='Format', example='mp4'),
              }(name='Container'),
              muxConfig?: {
                segment?: {
                  duration?: string(name='Duration', example='10'),
                  forceSegTime?: string(name='ForceSegTime', example='2,3'),
                }(name='Segment'),
              }(name='MuxConfig'),
              transConfig?: {
                adjDarMethod?: string(name='AdjDarMethod'),
                isCheckAudioBitrate?: string(name='IsCheckAudioBitrate'),
                isCheckAudioBitrateFail?: string(name='IsCheckAudioBitrateFail'),
                isCheckReso?: string(name='IsCheckReso'),
                isCheckResoFail?: string(name='IsCheckResoFail'),
                isCheckVideoBitrate?: string(name='IsCheckVideoBitrate'),
                isCheckVideoBitrateFail?: string(name='IsCheckVideoBitrateFail'),
                transMode?: string(name='TransMode'),
              }(name='TransConfig'),
              video?: {
                abrMax?: string(name='AbrMax', example='6000'),
                bitrate?: string(name='Bitrate', example='3000'),
                bufsize?: string(name='Bufsize', example='6000'),
                codec?: string(name='Codec', example='H.264'),
                crf?: string(name='Crf', example='23'),
                crop?: string(name='Crop', example='1280:800:0:140'),
                fps?: string(name='Fps', example='25'),
                gop?: string(name='Gop', example='250'),
                height?: string(name='Height', example='1080'),
                longShortMode?: string(name='LongShortMode', example='false'),
                maxrate?: string(name='Maxrate', example='9000'),
                pad?: string(name='Pad', example='1280:800:0:140'),
                pixFmt?: string(name='PixFmt', example='yuv420p'),
                preset?: string(name='Preset', example='medium'),
                profile?: string(name='Profile', example='Main'),
                remove?: string(name='Remove', example='false'),
                scanMode?: string(name='ScanMode', example='progressive'),
                width?: string(name='Width', example='1920'),
              }(name='Video'),
            }(name='OverwriteParams'),
            templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }(name='Transcode'),
        }(name='ProcessConfig'),
        requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
        scheduleConfig?: {
          pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
          priority?: int32(name='Priority', example='5'),
        }(name='ScheduleConfig'),
        status?: string(name='Status', example='Init'),
        submitResultJson?: map[string]any(name='SubmitResultJson', example='{}'),
        submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
        userData?: string(name='UserData', example='user-data'),
      }
    ](name='TranscodeJobList'),
    triggerSource?: string(name='TriggerSource', example='API'),
    userData?: string(name='UserData', example='user-data'),
  }(name='TranscodeParentJob', description='TranscodeParentJobWithSubJobDTO'),
}

model SubmitTranscodeJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitTranscodeJobResponseBody(name='body'),
}

async function submitTranscodeJob(request: SubmitTranscodeJobRequest): SubmitTranscodeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitTranscodeJob', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAvatarTrainingJobRequest {
  avatarDescription?: string(name='AvatarDescription', maxLength=1024, position='Query'),
  avatarName?: string(name='AvatarName', maxLength=7, position='Query'),
  jobId: string(name='JobId', example='****cdb3e74639973036bc84****', position='Query'),
  portrait?: string(name='Portrait', example='****571c704445f9a0ee011406c2****', minLength=32, maxLength=32, position='Query'),
  thumbnail?: string(name='Thumbnail', example='https://your-bucket.oss-cn-hangzhou.aliyuncs.com/thumbnail.png', maxLength=512, position='Query'),
  transparent?: boolean(name='Transparent', example='True', position='Query'),
  video?: string(name='Video', example='****571c704445f9a0ee011406c2****', minLength=32, maxLength=32, position='Query'),
}

model UpdateAvatarTrainingJobResponseBody = {
  data?: {
    jobId?: string(name='JobId', example='****d718e2ff4f018ccf419a7b71****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model UpdateAvatarTrainingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAvatarTrainingJobResponseBody(name='body'),
}

async function updateAvatarTrainingJob(request: UpdateAvatarTrainingJobRequest): UpdateAvatarTrainingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAvatarTrainingJob', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCategoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  cateId: long(name='CateId', example='43', position='Query'),
  cateName: string(name='CateName', position='Query'),
}

model UpdateCategoryResponseBody = {
  requestId?: string(name='RequestId', example='4E84BE44-58A7-****-****-FBEBEA16EF94'),
}

model UpdateCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCategoryResponseBody(name='body'),
}

async function updateCategory(request: UpdateCategoryRequest): UpdateCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCategory', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCustomTemplateRequest {
  name?: string(name='Name', example='test-template', position='Query'),
  templateConfig?: string(name='TemplateConfig', example='{"param": "sample"}', position='Query'),
  templateId: string(name='TemplateId', example='****96e8864746a0b6f3****', position='Query'),
}

model UpdateCustomTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model UpdateCustomTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCustomTemplateResponseBody(name='body'),
}

async function updateCustomTemplate(request: UpdateCustomTemplateRequest): UpdateCustomTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCustomTemplate', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCustomizedVoiceRequest {
  demoAudioMediaId?: string(name='DemoAudioMediaId', example='****4d5e829d498aaf966b119348****', position='Query'),
  voiceId: string(name='VoiceId', example='xiaozhuan', position='Query'),
}

model UpdateCustomizedVoiceResponseBody = {
  requestId?: string(name='RequestId', example='4E84BE44-58A7-****-****-FBEBEA16EF94'),
  success?: boolean(name='Success', example='true'),
}

model UpdateCustomizedVoiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCustomizedVoiceResponseBody(name='body'),
}

async function updateCustomizedVoice(request: UpdateCustomizedVoiceRequest): UpdateCustomizedVoiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCustomizedVoice', 'POST', '/', 'json', false, 'json', request);
}

model UpdateEditingProjectRequest {
  businessStatus?: string(name='BusinessStatus', example='Reserving', position='Query'),
  clipsParam?: string(name='ClipsParam', position='Query'),
  coverURL?: string(name='CoverURL', example='https://****.com/6AB4D0E1E1C7446888****.png', position='Query'),
  description?: string(name='Description', example='testtimeline001desciption', position='Query'),
  projectId: string(name='ProjectId', example='****4ee4b97e27b525142a6b2****', position='Query'),
  templateId?: string(name='TemplateId', example='****96e8864746a0b6f3****', position='Query'),
  timeline?: string(name='Timeline', position='Body'),
  title?: string(name='Title', example='testtimeline', position='Query'),
}

model UpdateEditingProjectResponseBody = {
  requestId?: string(name='RequestId', example='****25818875-5F78-4AF6-D7393642CA58****'),
}

model UpdateEditingProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEditingProjectResponseBody(name='body'),
}

async function updateEditingProject(request: UpdateEditingProjectRequest): UpdateEditingProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEditingProject', 'POST', '/', 'json', true, 'form', request);
}

model UpdateLiveRecordTemplateRequest {
  name: string(name='Name', description='代表资源名称的资源属性字段', example='test template', position='Body'),
  recordFormat: [ 
    {
      cycleDuration?: int32(name='CycleDuration', example='3600'),
      format: string(name='Format', description='格式', example='m3u8'),
      ossObjectPrefix?: string(name='OssObjectPrefix', description='Oss对象名，不包含后缀', example='record/{JobId}/{Sequence}_{EscapedStartTime}_{EscapedEndTime}'),
      sliceDuration?: int32(name='SliceDuration', description='切片时长', example='30'),
      sliceOssObjectPrefix?: string(name='SliceOssObjectPrefix', description='切片Oss对象名，不包含后缀', example='record/{JobId}/{UnixTimestamp}_{Sequence}'),
    }
  ](name='RecordFormat', description='录制格式', shrink='json', position='Body'),
  templateId: string(name='TemplateId', description='代表资源一级ID的资源属性字段', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66', position='Body'),
}

model UpdateLiveRecordTemplateResponseBody = {
  requestId?: string(name='RequestId', description='代表资源一级ID的资源属性字段', example='0F3D5C03-4B6E-5F40-B7F6-B1956776E7D3'),
}

model UpdateLiveRecordTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLiveRecordTemplateResponseBody(name='body'),
}

async function updateLiveRecordTemplate(request: UpdateLiveRecordTemplateRequest): UpdateLiveRecordTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLiveRecordTemplate', 'POST', '/', 'json', true, 'form', request);
}

model UpdateLiveSnapshotTemplateRequest {
  overwriteFormat?: string(name='OverwriteFormat', example='snapshot/{JobId}.jpg', position='Body'),
  sequenceFormat?: string(name='SequenceFormat', example='snapshot/{JobId}/{UnixTimestamp}.jpg', position='Body'),
  templateId: string(name='TemplateId', example='****a046-263c-3560-978a-fb287782****', position='Body'),
  templateName: string(name='TemplateName', position='Body'),
  timeInterval: int32(name='TimeInterval', example='5', position='Body'),
}

model UpdateLiveSnapshotTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model UpdateLiveSnapshotTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLiveSnapshotTemplateResponseBody(name='body'),
}

async function updateLiveSnapshotTemplate(request: UpdateLiveSnapshotTemplateRequest): UpdateLiveSnapshotTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLiveSnapshotTemplate', 'POST', '/', 'json', true, 'form', request);
}

model UpdateLiveTranscodeJobRequest {
  jobId: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  name?: string(name='Name', example='mytest3', minLength=1, maxLength=128, position='Query'),
  streamInput?: {
    inputUrl: string(name='InputUrl', example='rtmp://mydomain/app/stream1'),
    type: string(name='Type', example='rtmp'),
  }(name='StreamInput', shrink='json', position='Query'),
  timedConfig?: {
    endTime?: string(name='EndTime', example='2022-08-05T06:08:31Z'),
    startTime?: string(name='StartTime', example='2022-06-19T02:16:41Z'),
  }(name='TimedConfig', shrink='json', position='Query'),
  transcodeOutput?: {
    domainName: string(name='DomainName', example='mydomain'),
    type: string(name='Type', example='LiveCenter'),
  }(name='TranscodeOutput', shrink='json', position='Query'),
}

model UpdateLiveTranscodeJobResponseBody = {
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
}

model UpdateLiveTranscodeJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLiveTranscodeJobResponseBody(name='body'),
}

async function updateLiveTranscodeJob(request: UpdateLiveTranscodeJobRequest): UpdateLiveTranscodeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLiveTranscodeJob', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLiveTranscodeTemplateRequest {
  name?: string(name='Name', position='Query'),
  templateConfig?: {
    audioParams?: {
      bitrate?: string(name='Bitrate', example='100'),
      channels?: string(name='Channels', example='2'),
      codec?: string(name='Codec', example='AAC'),
      profile?: string(name='Profile', example='aac_low'),
      samplerate?: string(name='Samplerate', example='44100'),
    }(name='AudioParams'),
    videoParams?: {
      bitrate?: string(name='Bitrate', example='2500'),
      codec?: string(name='Codec', example='H.264'),
      fps?: string(name='Fps', example='30'),
      gop?: string(name='Gop', example='1000'),
      height?: string(name='Height', example='720'),
      profile?: string(name='Profile', example='2'),
      width?: string(name='Width', example='1280'),
    }(name='VideoParams'),
  }(name='TemplateConfig', shrink='json', position='Query'),
  templateId: string(name='TemplateId', example='****96e8864746a0b6f3****', position='Query'),
}

model UpdateLiveTranscodeTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
}

model UpdateLiveTranscodeTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLiveTranscodeTemplateResponseBody(name='body'),
}

async function updateLiveTranscodeTemplate(request: UpdateLiveTranscodeTemplateRequest): UpdateLiveTranscodeTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLiveTranscodeTemplate', 'POST', '/', 'json', false, 'json', request);
}

model UpdateMediaInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  appendTags?: boolean(name='AppendTags', example='true', position='Query'),
  businessType?: string(name='BusinessType', example='video', position='Query'),
  cateId?: long(name='CateId', example='3048', position='Query'),
  category?: string(name='Category', example='defaultCategory', position='Query'),
  coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png', position='Query'),
  description?: string(name='Description', example='defaultDescription', position='Query'),
  inputURL?: string(name='InputURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4', position='Query'),
  mediaId?: string(name='MediaId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  mediaTags?: string(name='MediaTags', example='updateTags1,updateTags2', position='Query'),
  referenceId?: string(name='ReferenceId', example='123-123', position='Query'),
  title?: string(name='Title', example='defaultTitle', position='Query'),
  userData?: string(name='UserData', example='userData', position='Query'),
}

model UpdateMediaInfoResponseBody = {
  mediaId?: string(name='MediaId', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model UpdateMediaInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMediaInfoResponseBody(name='body'),
}

async function updateMediaInfo(request: UpdateMediaInfoRequest): UpdateMediaInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMediaInfo', 'POST', '/', 'json', false, 'json', request);
}

model UpdateMediaMarksRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaId: string(name='MediaId', example='53afdf003a******6a16b5feac6402', position='Query'),
  mediaMarks: string(name='MediaMarks', position='Query'),
}

model UpdateMediaMarksResponseBody = {
  mediaId?: string(name='MediaId', example='53afdf003a******6a16b5feac6402'),
  mediaMarkIds?: string(name='MediaMarkIds', example='mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model UpdateMediaMarksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMediaMarksResponseBody(name='body'),
}

async function updateMediaMarks(request: UpdateMediaMarksRequest): UpdateMediaMarksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMediaMarks', 'POST', '/', 'json', false, 'json', request);
}

model UpdateMediaToSearchLibRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaId: string(name='MediaId', example='****019b82e24b37a1c2958dec38****', position='Query'),
  msgBody: string(name='MsgBody', example='{}', position='Query'),
  searchLibName?: string(name='SearchLibName', example='test1', position='Query'),
}

model UpdateMediaToSearchLibResponseBody = {
  code?: string(name='Code'),
  mediaId?: string(name='MediaId', example='******b48fb04483915d4f2cd8******'),
  requestId?: string(name='RequestId', example='4E84BE44-58A7-****-****-FBEBEA16EF94'),
  success?: string(name='Success'),
}

model UpdateMediaToSearchLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMediaToSearchLibResponseBody(name='body'),
}

async function updateMediaToSearchLib(request: UpdateMediaToSearchLibRequest): UpdateMediaToSearchLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMediaToSearchLib', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePipelineRequest {
  name?: string(name='Name', example='test-pipeline', position='Query'),
  pipelineId: string(name='PipelineId', example='****d80e4e4044975745c14b****', position='Query'),
  priority?: int32(name='Priority', example='6', position='Query'),
  status?: string(name='Status', example='Paused', position='Query'),
}

model UpdatePipelineResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model UpdatePipelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePipelineResponseBody(name='body'),
}

async function updatePipeline(request: UpdatePipelineRequest): UpdatePipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePipeline', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTemplateRequest {
  config?: string(name='Config', example='参见模板Config文档', position='Body'),
  coverUrl?: string(name='CoverUrl', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg', position='Query'),
  name?: string(name='Name', example='视频添加水印模板', position='Query'),
  previewMedia?: string(name='PreviewMedia', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  relatedMediaids?: string(name='RelatedMediaids', example='{"video":["******c04f1d4a06996144cc1a******","******cb7db64841b159b4f2ea******"],"audio":["******c04f1d4a06996144cc1a******"],"image":["******c04f1d4a06996144cc1a******"]}', position='Query'),
  source?: string(name='Source', example='OpenAPI', position='Query'),
  status?: string(name='Status', example='Available', position='Query'),
  templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model UpdateTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model UpdateTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTemplateResponseBody(name='body'),
}

async function updateTemplate(request: UpdateTemplateRequest): UpdateTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTemplate', 'POST', '/', 'json', true, 'form', request);
}

model UploadMediaByURLRequest {
  regionId?: string(name='RegionId', position='Host'),
  appId?: string(name='AppId', example='app-1000000', position='Query'),
  entityId?: string(name='EntityId', example='d67281da3c8743b8823ad12976187***', position='Query'),
  mediaMetaData?: string(name='MediaMetaData', example='[{"SourceURL":"https://example.aliyundoc.com/video01.mp4","Title":"urlUploadTest"}]', position='Query'),
  postProcessConfig?: string(name='PostProcessConfig', example='{"ProcessType": "Workflow","ProcessID":"b72a06c6beeb4dcdb898feef067b1***"}', position='Query'),
  uploadTargetConfig?: string(name='UploadTargetConfig', example='{"StorageType":"oss","StorageLocation":"outin-***.oss-cn-shanghai.aliyuncs.com"}', position='Query'),
  uploadURLs?: string(name='UploadURLs', example='https://diffurl.mp4', position='Query'),
  userData?: string(name='UserData', example='{"MessageCallback":{"CallbackURL":"http://example.aliyundoc.com"},"Extend":{"localId":"xxx","test":"www"}}', position='Query'),
}

model UploadMediaByURLResponseBody = {
  requestId?: string(name='RequestId', example='****83B7-7F87-4792-BFE9-63CD2137****'),
  uploadJobs?: [ 
    {
      jobId?: string(name='JobId', example='20ce1e05dba64576b96e9683879f0***'),
      mediaId?: string(name='MediaId', example='f476988629f54a7b8a4ba90d1a6c7***'),
      sourceURL?: string(name='SourceURL', example='http://example****.mp4'),
    }
  ](name='UploadJobs'),
}

model UploadMediaByURLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadMediaByURLResponseBody(name='body'),
}

async function uploadMediaByURL(request: UploadMediaByURLRequest): UploadMediaByURLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadMediaByURL', 'POST', '/', 'json', false, 'json', request);
}

model UploadStreamByURLRequest {
  regionId?: string(name='RegionId', position='Host'),
  definition?: string(name='Definition', example='HD', position='Query'),
  fileExtension?: string(name='FileExtension', example='mp4', position='Query'),
  HDRType?: string(name='HDRType', example='HDR10', position='Query'),
  mediaId?: string(name='MediaId', example='411bed50018971edb60b0764a0ec6***', position='Query'),
  streamURL?: string(name='StreamURL', example='https://example.com/sample-stream.mp4', position='Query'),
  userData?: string(name='UserData', example='{"MessageCallback":{"CallbackURL":"http://test.test.com"}, "Extend":{"localId":"xxx","test":"www"}}', position='Query'),
}

model UploadStreamByURLResponseBody = {
  fileURL?: string(name='FileURL', example='http://outin-***.oss-cn-shanghai.aliyuncs.com/stream/48555e8b-181dd5a8c07/48555e8b-181dd5a8c07.mp4'),
  jobId?: string(name='JobId', example='****cdb3e74639973036bc84****'),
  mediaId?: string(name='MediaId', example='411bed50018971edb60b0764a0ec6***'),
  requestId?: string(name='RequestId', example='******89-C21D-4B78-AE24-3788B8******'),
  sourceURL?: string(name='SourceURL', example='https://example.com/sample-stream.mp4'),
}

model UploadStreamByURLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadStreamByURLResponseBody(name='body'),
}

async function uploadStreamByURL(request: UploadStreamByURLRequest): UploadStreamByURLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadStreamByURL', 'POST', '/', 'json', false, 'json', request);
}

