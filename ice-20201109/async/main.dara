/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ICE';
  @version = '2020-11-09';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'ice.aliyuncs.com',
    ap-northeast-2-pop = 'ice.aliyuncs.com',
    ap-south-1 = 'ice.aliyuncs.com',
    ap-southeast-1 = 'ice.aliyuncs.com',
    ap-southeast-2 = 'ice.aliyuncs.com',
    ap-southeast-3 = 'ice.aliyuncs.com',
    ap-southeast-5 = 'ice.aliyuncs.com',
    cn-beijing = 'ice.aliyuncs.com',
    cn-beijing-finance-1 = 'ice.aliyuncs.com',
    cn-beijing-finance-pop = 'ice.aliyuncs.com',
    cn-beijing-gov-1 = 'ice.aliyuncs.com',
    cn-beijing-nu16-b01 = 'ice.aliyuncs.com',
    cn-chengdu = 'ice.aliyuncs.com',
    cn-edge-1 = 'ice.aliyuncs.com',
    cn-fujian = 'ice.aliyuncs.com',
    cn-haidian-cm12-c01 = 'ice.aliyuncs.com',
    cn-hangzhou = 'ice.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'ice.aliyuncs.com',
    cn-hangzhou-finance = 'ice.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'ice.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'ice.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'ice.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'ice.aliyuncs.com',
    cn-hangzhou-test-306 = 'ice.aliyuncs.com',
    cn-hongkong = 'ice.aliyuncs.com',
    cn-hongkong-finance-pop = 'ice.aliyuncs.com',
    cn-huhehaote = 'ice.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'ice.aliyuncs.com',
    cn-north-2-gov-1 = 'ice.aliyuncs.com',
    cn-qingdao = 'ice.aliyuncs.com',
    cn-qingdao-nebula = 'ice.aliyuncs.com',
    cn-shanghai-et15-b01 = 'ice.aliyuncs.com',
    cn-shanghai-et2-b01 = 'ice.aliyuncs.com',
    cn-shanghai-finance-1 = 'ice.aliyuncs.com',
    cn-shanghai-inner = 'ice.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'ice.aliyuncs.com',
    cn-shenzhen = 'ice.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ice.aliyuncs.com',
    cn-shenzhen-inner = 'ice.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'ice.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'ice.aliyuncs.com',
    cn-wuhan = 'ice.aliyuncs.com',
    cn-wulanchabu = 'ice.aliyuncs.com',
    cn-yushanfang = 'ice.aliyuncs.com',
    cn-zhangbei = 'ice.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'ice.aliyuncs.com',
    cn-zhangjiakou = 'ice.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'ice.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'ice.aliyuncs.com',
    eu-central-1 = 'ice.aliyuncs.com',
    eu-west-1 = 'ice.aliyuncs.com',
    eu-west-1-oxs = 'ice.aliyuncs.com',
    me-east-1 = 'ice.aliyuncs.com',
    rus-west-1-pop = 'ice.aliyuncs.com',
    us-east-1 = 'ice.aliyuncs.com',
    us-west-1 = 'ice.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddCategoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  cateName: string(name='CateName', position='Query'),
  parentId?: long(name='ParentId', example='5', position='Query'),
  type?: string(name='Type', example='default', position='Query'),
}

model AddCategoryResponseBody = {
  category?: {
    cateId?: long(name='CateId', example='45'),
    cateName?: string(name='CateName'),
    level?: long(name='Level', example='0'),
    parentId?: long(name='ParentId', example='-1'),
    type?: string(name='Type', example='default'),
  }(name='Category'),
  requestId?: string(name='RequestId', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
}

model AddCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: AddCategoryResponseBody(name='body'),
}

async function addCategory(request: AddCategoryRequest): AddCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCategory', 'POST', '/', 'json', false, 'json', request);
}

model AddEditingProjectMaterialsRequest {
  materialMaps: string(name='MaterialMaps', description='素材ID', example='{"video":"*****2e057304fcd9b145c5cafc*****", "image":"****8021a8d493da643c8acd98*****,*****cb6307a4edea614d8b3f3c*****", "liveStream": "[{\\"appName\\":\\"testrecord\\",\\"domainName\\":\\"test.alivecdn.com\\",\\"liveUrl\\":\\"rtmp://test.alivecdn.com/testrecord/teststream\\",\\"streamName\\":\\"teststream\\"}]", "editingProject": "*****9b145c5cafc2e057304fcd*****"}', position='Query'),
  projectId: string(name='ProjectId', description='云剪辑工程ID', example='*****b2101cb318c*****', position='Query'),
}

model AddEditingProjectMaterialsResponseBody = {
  liveMaterials?: [ 
    {
      appName?: string(name='AppName', example='testrecord'),
      domainName?: string(name='DomainName', example='test.alivecdn.com'),
      liveUrl?: string(name='LiveUrl', example='rtmp://test.alivecdn.com/testrecord/teststream'),
      streamName?: string(name='StreamName', example='teststream'),
    }
  ](name='LiveMaterials'),
  mediaInfos?: [ 
    {
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', description='码率', example='1132.68'),
            duration?: string(name='Duration', description='时长', example='216.206667'),
            fileName?: string(name='FileName', description='文件名', example='example.mp4'),
            fileSize?: string(name='FileSize', description='文件大小（字节）', example='30611502'),
            fileStatus?: string(name='FileStatus', description='文件状态', example='Normal'),
            fileType?: string(name='FileType', description='文件类型', example='source_file'),
            fileUrl?: string(name='FileUrl', description='文件oss地址', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
            formatName?: string(name='FormatName', description='封装格式', example='mov,mp4,m4a,3gp,3g2,mj2'),
            height?: string(name='Height', description='高', example='540'),
            region?: string(name='Region', description='文件存储区域', example='cn-shanghai'),
            width?: string(name='Width', description='宽', example='960'),
          }(name='FileBasicInfo', description='文件基础信息，包含时长，大小等'),
        }
      ](name='FileInfoList', description='FileInfos'),
      mediaBasicInfo?: {
        businessType?: string(name='BusinessType', description='媒资业务类型', example='general'),
        category?: string(name='Category', description='分类', example='audio'),
        coverURL?: string(name='CoverURL', description='封面地址', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
        createTime?: string(name='CreateTime', description='媒资创建时间', example='2020-12-23T03:32:59Z'),
        deletedTime?: string(name='DeletedTime', description='媒资删除时间', example='2020-12-23T03:32:59Z'),
        description?: string(name='Description', description='内容描述', example='sample_description'),
        inputURL?: string(name='InputURL', description='待注册的媒资在相应系统中的地址', example='http://bucket.oss-cn-shanghai.aliyuncs.com/file.mp4'),
        mediaId?: string(name='MediaId', description='MediaId', example='*****5cb2e35433198daae94a72*****'),
        mediaTags?: string(name='MediaTags', description='标签', example='sample_tag'),
        mediaType?: string(name='MediaType', description='媒资媒体类型', example='Video'),
        modifiedTime?: string(name='ModifiedTime', description='媒资修改时间', example='2020-12-23T03:32:59Z'),
        snapshots?: string(name='Snapshots', description='截图', example='null'),
        source?: string(name='Source', description='来源', example='oss'),
        spriteImages?: string(name='SpriteImages', description='雪碧图', example='http://outin-example.oss-cn-shanghai.aliyuncs.com/test.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
        status?: string(name='Status', description='资源状态', example='Normal'),
        title?: string(name='Title', description='标题', example='default_title_2020-12-23T03:32:59Z'),
        transcodeStatus?: string(name='TranscodeStatus', description='转码状态', example='Init'),
        userData?: string(name='UserData', description='用户数据', example='userData'),
      }(name='MediaBasicInfo', description='BasicInfo'),
      mediaId?: string(name='MediaId', description='媒资ID', example='*****5cb2e35433198daae94a72*****'),
    }
  ](name='MediaInfos', description='符合要求的媒资集合'),
  projectId?: string(name='ProjectId', example='*****67ae06542b9b93e0d1c387*****'),
  projectMaterials?: [ string ](name='ProjectMaterials', example='*****9b145c5cafc2e057304fcd*****'),
  requestId?: string(name='RequestId', description='Id of the request', example='*****ACB-44F2-5F2D-88D7-1283E70*****'),
}

model AddEditingProjectMaterialsResponse = {
  headers: map[string]string(name='headers'),
  body: AddEditingProjectMaterialsResponseBody(name='body'),
}

async function addEditingProjectMaterials(request: AddEditingProjectMaterialsRequest): AddEditingProjectMaterialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddEditingProjectMaterials', 'POST', '/', 'json', false, 'json', request);
}

model AddFavoritePublicMediaRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaIds?: string(name='MediaIds', example='icepublic-****7213c6050cbc66750b469701****,icepublic-****0b4697017213c6050cbc6675****', position='Query'),
}

model AddFavoritePublicMediaResponseBody = {
  ignoredList?: [ string ](name='IgnoredList'),
  requestId?: string(name='RequestId', description='Id of the request', example='******11-DB8D-4A9A-875B-275798******'),
}

model AddFavoritePublicMediaResponse = {
  headers: map[string]string(name='headers'),
  body: AddFavoritePublicMediaResponseBody(name='body'),
}

async function addFavoritePublicMedia(request: AddFavoritePublicMediaRequest): AddFavoritePublicMediaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddFavoritePublicMedia', 'POST', '/', 'json', false, 'json', request);
}

model AddTemplateRequest {
  config?: string(name='Config', description='参见Timeline模板Config文档', example='参见Timeline模板Config文档', position='Query'),
  coverUrl?: string(name='CoverUrl', description='模板封面', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg', position='Query'),
  name?: string(name='Name', description='模板名称', example='视频添加水印模板', position='Query'),
  previewMedia?: string(name='PreviewMedia', description='预览视频媒资id', example='****01bf24bf41c78b2754cb3187****', position='Query'),
  relatedMediaids?: string(name='RelatedMediaids', description='模板相关素材，模板编辑器使用', example='{"video":["1805a0c6ca544fb395a06ca683619655"]}', position='Query'),
  source?: string(name='Source', description='模板创建来源，默认OpenAPI', example='OpenAPI', position='Query'),
  status?: string(name='Status', description='模板状态', example='Normal', position='Query'),
  type?: string(name='Type', description='模板类型，取值范围：Timeline', example='Timeline', position='Query'),
}

model AddTemplateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='****2876-6263-4B75-8F2C-CD0F7FCF****'),
  template?: {
    config?: string(name='Config', description='参见Timeline模板Config文档', example='参见Timeline模板Config文档'),
    coverUrl?: string(name='CoverUrl', description='模板封面', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg'),
    createSource?: string(name='CreateSource', description='模板创建来源', example='OpenAPI'),
    modifiedSource?: string(name='ModifiedSource', description='模板修改来源', example='OpenAPI'),
    name?: string(name='Name', description='模板名称', example='视频添加水印模板'),
    previewMedia?: string(name='PreviewMedia', description='预览视频媒资id', example='****01bf24bf41c78b2754cb3187****'),
    status?: string(name='Status', description='模板状态', example='Normal'),
    templateId?: string(name='TemplateId', description='模板Id', example='****01bf24bf41c78b2754cb3187****'),
    type?: string(name='Type', description='模板类型', example='Timeline'),
  }(name='Template', description='模板信息'),
}

model AddTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: AddTemplateResponseBody(name='body'),
}

async function addTemplate(request: AddTemplateRequest): AddTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTemplate', 'POST', '/', 'json', false, 'json', request);
}

model BatchGetMediaInfosRequest {
  regionId?: string(name='RegionId', position='Host'),
  additionType?: string(name='AdditionType', example='FileInfo,DynamicMetaData', position='Query'),
  mediaIds?: string(name='MediaIds', example='******b48fb04483915d4f2cd8******,******c48fb37407365d4f2cd8******', position='Query'),
}

model BatchGetMediaInfosResponseBody = {
  mediaInfos?: [ 
    {
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', description='码率', example='1132.68'),
            duration?: string(name='Duration', description='时长', example='200'),
            fileName?: string(name='FileName', description='文件名', example='example'),
            fileSize?: string(name='FileSize', description='文件大小（字节）', example='30611502'),
            fileStatus?: string(name='FileStatus', description='文件状态', example='Normal'),
            fileType?: string(name='FileType', description='文件类型', example='source_file'),
            fileUrl?: string(name='FileUrl', description='文件oss地址', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
            formatName?: string(name='FormatName', description='封装格式', example='mov,mp4,m4a,3gp,3g2,mj2'),
            height?: string(name='Height', description='高', example='1080'),
            region?: string(name='Region', description='文件存储区域', example='cn-shanghai'),
            width?: string(name='Width', description='宽', example='1920'),
          }(name='FileBasicInfo', description='文件基础信息，包含时长，大小等'),
        }
      ](name='FileInfoList', description='FileInfos'),
      mediaBasicInfo?: {
        businessType?: string(name='BusinessType', description='媒资业务类型', example='general'),
        category?: string(name='Category', description='分类'),
        coverURL?: string(name='CoverURL', description='封面地址', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
        createTime?: string(name='CreateTime', description='媒资创建时间', example='2020-12-26T04:11:10Z'),
        deletedTime?: string(name='DeletedTime', description='媒资删除时间', example='2020-12-26T04:11:10Z'),
        description?: string(name='Description', description='内容描述'),
        inputURL?: string(name='InputURL', description='待注册的媒资在相应系统中的地址', example='https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4'),
        mediaId?: string(name='MediaId', description='MediaId', example='******c48fb37407365d4f2cd8******'),
        mediaTags?: string(name='MediaTags', description='标签'),
        mediaType?: string(name='MediaType', description='媒资媒体类型', example='video'),
        modifiedTime?: string(name='ModifiedTime', description='媒资修改时间', example='2020-12-26T04:11:12Z'),
        snapshots?: string(name='Snapshots', description='截图', example='[{"bucket":"example-bucket","count":"3","iceJobId":"******f48f0e4154976b2b8c45******","location":"oss-cn-beijing","snapshotRegular":"example.jpg","templateId":"******e6a6440b29eb60bd7c******"}]'),
        source?: string(name='Source', description='来源', example='oss'),
        spriteImages?: string(name='SpriteImages', description='雪碧图', example='[{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]'),
        status?: string(name='Status', description='资源状态', example='Normal'),
        title?: string(name='Title', description='标题'),
        transcodeStatus?: string(name='TranscodeStatus', description='转码状态', example='Init'),
        userData?: string(name='UserData', description='用户数据', example='userDataTest'),
      }(name='MediaBasicInfo', description='BasicInfo'),
      mediaId?: string(name='MediaId', description='媒资ID', example='******c48fb37407365d4f2cd8******'),
    }
  ](name='MediaInfos', description='符合要求的媒资集合'),
  requestId?: string(name='RequestId', description='Id of the request', example='******11-DB8D-4A9A-875B-275798******'),
}

model BatchGetMediaInfosResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetMediaInfosResponseBody(name='body'),
}

async function batchGetMediaInfos(request: BatchGetMediaInfosRequest): BatchGetMediaInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchGetMediaInfos', 'POST', '/', 'json', false, 'json', request);
}

model CancelFavoritePublicMediaRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaIds?: string(name='MediaIds', example='icepublic-****7213c6050cbc66750b469701****,icepublic-****0b4697017213c6050cbc6675****', position='Query'),
}

model CancelFavoritePublicMediaResponseBody = {
  ignoredList?: [ string ](name='IgnoredList'),
  requestId?: string(name='RequestId', description='Id of the request', example='******11-DB8D-4A9A-875B-275798******'),
}

model CancelFavoritePublicMediaResponse = {
  headers: map[string]string(name='headers'),
  body: CancelFavoritePublicMediaResponseBody(name='body'),
}

async function cancelFavoritePublicMedia(request: CancelFavoritePublicMediaRequest): CancelFavoritePublicMediaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelFavoritePublicMedia', 'POST', '/', 'json', false, 'json', request);
}

model CreateAuditRequest {
  regionId?: string(name='RegionId', position='Host'),
  appId?: string(name='AppId', position='Query'),
  auditContent?: string(name='AuditContent', position='Query'),
}

model CreateAuditResponseBody = {
  requestId?: string(name='RequestId', description='RequestId'),
}

model CreateAuditResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAuditResponseBody(name='body'),
}

async function createAudit(request: CreateAuditRequest): CreateAuditResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAudit', 'POST', '/', 'json', false, 'json', request);
}

model CreateCustomTemplateRequest {
  name: string(name='Name', description='模板名称', example='test-template', position='Query'),
  subtype?: int32(name='Subtype', description='模板子类型。', example='1', position='Query'),
  templateConfig: string(name='TemplateConfig', description='模板参数', example='{"Container":{"Format":"flv"},"Video":{},"Audio":{}}', position='Query'),
  type: int32(name='Type', description='模板类型。', example='1', position='Query'),
}

model CreateCustomTemplateResponseBody = {
  customTemplate?: {
    createTime?: string(name='CreateTime', description='模板创建时间', example='2022-04-19T02:04:31Z'),
    isDefault?: boolean(name='IsDefault', description='是否默认模板', example='true'),
    modifiedTime?: string(name='ModifiedTime', description='模板修改时间', example='2022-04-19T02:04:31Z'),
    status?: string(name='Status', description='模板状态', example='Normal'),
    subtype?: string(name='Subtype', description='模板子类型名称', example='Remux'),
    templateConfig?: string(name='TemplateConfig', description='模板参数', example='{"Container":{"Format":"flv"},"Video":{},"Audio":{}}'),
    templateId?: string(name='TemplateId', description='模板Id', example='****20b48fb04483915d4f2cd8ac****'),
    templateName?: string(name='TemplateName', description='模板名称', example='test-template'),
    type?: int32(name='Type', description='模板类型ID', example='1'),
    typeName?: string(name='TypeName', description='模板类型名称', example='TranscodeTemplate'),
  }(name='CustomTemplate', description='模板信息'),
  requestId?: string(name='RequestId', description='请求ID', example='******11-DB8D-4A9A-875B-275798******'),
}

model CreateCustomTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCustomTemplateResponseBody(name='body'),
}

async function createCustomTemplate(request: CreateCustomTemplateRequest): CreateCustomTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustomTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CreateEditingProjectRequest {
  businessConfig?: string(name='BusinessConfig', description='工程业务配置。如果是直播剪辑工程必填OutputMediaConfig.StorageLocation,   Path 不填默认合成的直播片段存储在根路径下 OutputMediaTarget 不填默认oss-object，可以填vod-media 表示存储到vod  OutputMediaTarget 为vod-media 时，Path不生效。', example='{ "OutputMediaConfig" : { "StorageLocation": "test-bucket.oss-cn-shanghai.aliyuncs.com", "Path": "test-path" }, "OutputMediaTarget": "oss-object", "ReservationTime": "2021-06-21T08:05:00Z" }', position='Query'),
  clipsParam?: string(name='ClipsParam', description='模板素材参数', position='Query'),
  coverURL?: string(name='CoverURL', description='云剪辑工程封面', example='https://example.com/example.png', position='Query'),
  description?: string(name='Description', description='云剪辑工程描述', example='描述', position='Query'),
  materialMaps?: string(name='MaterialMaps', description='工程关联素材，多个素材以逗号（,）分隔；每种类型最多支持10个素材ID', example='{"video":"*****2e057304fcd9b145c5cafc*****", "image":"****8021a8d493da643c8acd98*****,*****cb6307a4edea614d8b3f3c*****", "liveStream": "[{\\"appName\\":\\"testrecord\\",\\"domainName\\":\\"test.alivecdn.com\\",\\"liveUrl\\":\\"rtmp://test.alivecdn.com/testrecord/teststream\\",\\"streamName\\":\\"teststream\\"}]", "editingProject": "*****9b145c5cafc2e057304fcd*****"}', position='Query'),
  projectType?: string(name='ProjectType', description='剪辑工程类型，EditingProject: 普通剪辑工程；LiveEditingProject: 直播剪辑工程', example='LiveEditingProject', position='Query'),
  templateId?: string(name='TemplateId', description='模板Id', example='****96e8864746a0b6f3****', position='Query'),
  timeline?: string(name='Timeline', description='云剪辑工程时间线，Json格式', example='{"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****4d7cf14dc7b83b0e801c****"},{"MediaId":"****4d7cf14dc7b83b0e801c****"}]}]}', position='Query'),
  title: string(name='Title', description='云剪辑工程标题', example='example', position='Query'),
}

model CreateEditingProjectResponseBody = {
  project?: {
    businessConfig?: string(name='BusinessConfig', description='工程业务配置', example='{ "OutputMediaConfig" :    { "StorageLocation": "test-bucket.oss-cn-shanghai.aliyuncs.com", "Path": "test-path"   }, "OutputMediaTarget": "oss-object", "ReservationTime": "2021-06-21T08:05:00Z" }'),
    businessStatus?: string(name='BusinessStatus', description='业务状态，业务状态 /** 预约中 **/ RESERVING(0, "Reserving"), /** 预约取消 **/ RESERVATION_CANCELED(1, "ReservationCanceled"), /** 直播中 **/ BROADCASTING(3, "BroadCasting"), /** 加载失败 **/ LOADING_FAILED(4, "LoadingFailed"), /** 直播结束 **/ LIVE_FINISHED(5, "LiveFinished");', example='Reserving'),
    clipsParam?: string(name='ClipsParam', description='模板素材参数'),
    coverURL?: string(name='CoverURL', description='云剪辑工程封面。', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
    createSource?: string(name='CreateSource', description='云剪辑工程创建方式  -OpenAPI  -AliyunConsole  -WebSDK -LiveEditingOpenAPI -LiveEditingConsole', example='WebSDK'),
    createTime?: string(name='CreateTime', description='云剪辑工程创建时间', example='2021-01-08T16:52:07Z'),
    description?: string(name='Description', description='云剪辑工程描述', example='example_description'),
    duration?: float(name='Duration', description='云剪辑工程时长', example='3.4200000'),
    modifiedSource?: string(name='ModifiedSource', description='云剪辑工程创建方式  -OpenAPI  -AliyunConsole  -WebSDK -LiveEditingOpenAPI -LiveEditingConsole', example='WebSDK'),
    modifiedTime?: string(name='ModifiedTime', description='云剪辑工程编辑时间', example='2021-01-08T16:52:07Z'),
    projectId?: string(name='ProjectId', description='云剪辑工程ID', example='****01bf24bf41c78b2754cb3187****'),
    projectType?: string(name='ProjectType', description='剪辑工程类型，EditingProject: 普通剪辑工程；LiveEditingProject: 直播剪辑工程', example='LiveEditingProject'),
    status?: long(name='Status', description='云剪辑工程状态。  所有云剪辑工程状态列表：  -1:Draft  -2:Editing  -3:Producing  -4:Produced  -5:ProduceFailed  -7:Deleted', example='2'),
    statusName?: string(name='StatusName', description='云剪辑状态名称，对应状态列表中状态名称。', example='Editing'),
    templateId?: string(name='TemplateId', description='模板Id', example='****96e8864746a0b6f3****'),
    templateType?: string(name='TemplateType', example='Timeline'),
    timeline?: string(name='Timeline', description='云剪辑工程时间线，Json格式', example='{"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****4d7cf14dc7b83b0e801c****"},{"MediaId":"****4d7cf14dc7b83b0e801c****"}]}]}'),
    title?: string(name='Title', description='云剪辑工程标题', example='example_title'),
  }(name='Project'),
  requestId?: string(name='RequestId', description='Id of the request', example='******3B-0E1A-586A-AC29-742247******'),
}

model CreateEditingProjectResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEditingProjectResponseBody(name='body'),
}

async function createEditingProject(request: CreateEditingProjectRequest): CreateEditingProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEditingProject', 'POST', '/', 'json', false, 'json', request);
}

model CreateLiveRecordTemplateRequest {
  name: string(name='Name', description='代表资源名称的资源属性字段', position='Body'),
  recordFormat: [ 
    {
      cycleDuration?: int32(name='CycleDuration', example='3600'),
      format: string(name='Format', description='格式', example='m3u8'),
      ossObjectPrefix?: string(name='OssObjectPrefix', description='Oss对象名，不包含后缀', example='record/{JobId}/{Sequence}_{EscapedStartTime}_{EscapedEndTime}'),
      sliceDuration?: int32(name='SliceDuration', description='切片时长', example='30'),
      sliceOssObjectPrefix?: string(name='SliceOssObjectPrefix', description='切片Oss对象名，不包含后缀', example='record/{JobId}/{UnixTimestamp}_{Sequence}'),
    }
  ](name='RecordFormat', description='录制格式', shrink='json', position='Body'),
}

model CreateLiveRecordTemplateResponseBody = {
  requestId?: string(name='RequestId', example='0622C702-41BE-467E-AF2E-883D4517962E'),
  templateId?: string(name='TemplateId', description='代表资源一级ID的资源属性字段', example='****96e8864746a0b6f3****'),
}

model CreateLiveRecordTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLiveRecordTemplateResponseBody(name='body'),
}

async function createLiveRecordTemplate(request: CreateLiveRecordTemplateRequest): CreateLiveRecordTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLiveRecordTemplate', 'POST', '/', 'json', true, 'form', request);
}

model CreateLiveSnapshotTemplateRequest {
  overwriteFormat?: string(name='OverwriteFormat', description='覆盖截图文件格式，不能以“/”开头，目前只支持.jpg后缀，最大长度为255。
支持占位符：
{JobId}：截图任务ID
不允许填写{UnixTimestamp}、{Sequence}、{Date}等占位符
覆盖截图和序列截图的文件格式至少要设置一个。', example='snapshot/{JobId}.jpg', position='Body'),
  sequenceFormat?: string(name='SequenceFormat', description='序列截图文件格式，不能以“/”开头，目前只支持.jpg后缀，最大长度为255。
支持占位符：
{JobId}：截图任务ID
{Date}：截图日期
{UnixTimestamp}：时间戳
{Sequence}：序列号
其中{UnixTimestamp}、{Sequence}至少要填写一个。
覆盖截图和序列截图的文件格式至少要设置一个。', example='snapshot/{JobId}/{UnixTimestamp}.jpg', position='Body'),
  templateName: string(name='TemplateName', description='模板名称。', position='Body'),
  timeInterval: int32(name='TimeInterval', description='截图时间间隔，取值范围是[5, 3600]。', example='5', position='Body'),
}

model CreateLiveSnapshotTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。', example='******11-DB8D-4A9A-875B-275798******'),
  templateId?: string(name='TemplateId', description='模板ID。', example='****a046-263c-3560-978a-fb287782****'),
}

model CreateLiveSnapshotTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLiveSnapshotTemplateResponseBody(name='body'),
}

async function createLiveSnapshotTemplate(request: CreateLiveSnapshotTemplateRequest): CreateLiveSnapshotTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLiveSnapshotTemplate', 'POST', '/', 'json', true, 'form', request);
}

model CreateLiveTranscodeTemplateRequest {
  name: string(name='Name', example='my template', minLength=1, maxLength=20, position='Query'),
  templateConfig?: {
    audioParams?: {
      bitrate?: string(name='Bitrate', example='100'),
      channels?: string(name='Channels', example='2'),
      codec?: string(name='Codec', example='AAC'),
      profile?: string(name='Profile', example='aaclow'),
      samplerate?: string(name='Samplerate', example='44100'),
    }(name='AudioParams'),
    videoParams?: {
      bitrate?: string(name='Bitrate', example='2500'),
      codec?: string(name='Codec', example='H.264'),
      fps?: string(name='Fps', example='25'),
      gop?: string(name='Gop', example='1000'),
      height?: string(name='Height', example='720'),
      profile?: string(name='Profile', example='2'),
      width?: string(name='Width', example='1280'),
    }(name='VideoParams'),
  }(name='TemplateConfig', shrink='json', position='Query'),
  type: string(name='Type', description='模板Id', example='normal', position='Query'),
}

model CreateLiveTranscodeTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID', example='******3B-0E1A-586A-AC29-742247******'),
  templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
}

model CreateLiveTranscodeTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLiveTranscodeTemplateResponseBody(name='body'),
}

async function createLiveTranscodeTemplate(request: CreateLiveTranscodeTemplateRequest): CreateLiveTranscodeTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLiveTranscodeTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CreatePipelineRequest {
  name: string(name='Name', description='管道名称', example='test-pipeline', position='Query'),
  priority?: int32(name='Priority', description='优先级，1-10，默认6。数值越大，优先级越高', example='6', position='Query'),
  speed: string(name='Speed', description='管道类型。', example='Standard', position='Query'),
}

model CreatePipelineResponseBody = {
  pipeline?: {
    createTime?: string(name='CreateTime', description='模板创建时间', example='2022-07-12T16:17:54Z'),
    modifiedTime?: string(name='ModifiedTime', description='模板修改时间', example='2022-07-12T16:17:54Z'),
    name?: string(name='Name', description='管道名称', example='test-pipeline'),
    pipelineId?: string(name='PipelineId', description='管道Id', example='****20b48fb04483915d4f2cd8ac****'),
    priority?: int32(name='Priority', description='管道优先级', example='6'),
    speed?: string(name='Speed', description='管道类型', example='Standard'),
    status?: string(name='Status', description='管道状态', example='Active'),
  }(name='Pipeline', description='管道信息'),
  requestId?: string(name='RequestId', description='请求ID', example='******11-DB8D-4A9A-875B-275798******'),
}

model CreatePipelineResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePipelineResponseBody(name='body'),
}

async function createPipeline(request: CreatePipelineRequest): CreatePipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePipeline', 'POST', '/', 'json', false, 'json', request);
}

model CreateUploadMediaRequest {
  regionId?: string(name='RegionId', position='Host'),
  appId?: string(name='AppId', example='app-1000000', position='Query'),
  entityId?: string(name='EntityId', example='9e177cac2fb44f8b8c67b199fcc7bffd', position='Query'),
  fileInfo?: string(name='FileInfo', example='{\\"Type\\":\\"video\\",\\"Name\\":\\"test.mp4\\",\\"Size\\":108078336,\\"Ext\\":\\"mp4\\"}', position='Query'),
  mediaMetaData?: string(name='MediaMetaData', example='{\\"Title\\": \\"UploadTest\\", \\"Description\\": \\"UploadImageTest\\", \\"Tags\\": \\"tag1,tag2\\",\\"BusinessType\\":\\"cover\\"}', position='Query'),
  postProcessConfig?: string(name='PostProcessConfig', example='{\\"ProcessType\\":\\"Workflow\\",\\"ProcessID\\":\\"74ba870f1a4873a3ba238e0bf6fa9***\\"}', position='Query'),
  uploadTargetConfig?: string(name='UploadTargetConfig', example='{\\"StorageType\\":\\"oss\\",\\"StorageLocation\\":\\"outin-***.oss-cn-shanghai.aliyuncs.com\\"}', position='Query'),
  userData?: string(name='UserData', example='{"MessageCallback":{"CallbackURL":"http://example.aliyundoc.com"},"Extend":{"localId":"*****","test":"www"}}', position='Query'),
}

model CreateUploadMediaResponseBody = {
  fileURL?: string(name='FileURL', example='http://outin-***.oss-cn-north-2-gov-1.aliyuncs.com/sv/40360f05-181f63c3110-0004-cd8e-27f-de3c9.mp4'),
  mediaId?: string(name='MediaId', example='****20b48fb04483915d4f2cd8ac****'),
  mediaURL?: string(name='MediaURL', example='https://xxq-live-playback.oss-cn-shanghai.aliyuncs.com/capture/5d96d2b4-111b-4e5d-a0e5-20f44405bb55.mp4'),
  requestId?: string(name='RequestId', description='RequestId', example='4E84BE44-58A7-****-****-FBEBEA16EF94'),
  uploadAddress?: string(name='UploadAddress', example='eyJFbmRwb2ludCI6Imh0dHBzOi8vb3NzLWNuLXNoYW5naGFpLmFsaXl1bmNzLmNvbSIsIkJ1Y2tldCI6InN6aGQtdmlkZW8iLCJGaWxlTmFtZSI6InZvZC0yOTYzMWEvc3YvNTBmYTJlODQtMTgxMjdhZGRiMTcvNTBmYTJlODQtMTgxMjdhZGRiM***'),
  uploadAuth?: string(name='UploadAuth', example='eyJBY2Nlc3NLZXlJZCI6IkxUQUk0Rm53bTk1dHdxQjMxR3IzSE5hRCIsIkFjY2Vzc0tleVNlY3JldCI6Ik9lWllKR0dTMTlkNkZaM1E3UVpJQmdmSVdnM3BPaiIsIkV4cGlyYXRpb24iOiI***'),
}

model CreateUploadMediaResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUploadMediaResponseBody(name='body'),
}

async function createUploadMedia(request: CreateUploadMediaRequest): CreateUploadMediaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUploadMedia', 'POST', '/', 'json', false, 'json', request);
}

model CreateUploadStreamRequest {
  regionId?: string(name='RegionId', position='Host'),
  definition?: string(name='Definition', example='HD', position='Query'),
  fileExtension?: string(name='FileExtension', example='MP4', position='Query'),
  HDRType?: string(name='HDRType', example='HDR10', position='Query'),
  mediaId?: string(name='MediaId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  userData?: string(name='UserData', example='{"MessageCallback":{"CallbackURL":"http://aliyundoc.com"}, "Extend":{"localId":"xxx","test":"www"}}', position='Query'),
}

model CreateUploadStreamResponseBody = {
  fileURL?: string(name='FileURL', example='http://outin-***.oss-cn-shanghai.aliyuncs.com/stream/48555e8b-181dd5a8c07/48555e8b-181dd5a8c07.mp4'),
  mediaId?: string(name='MediaId', example='****c469e944b5a856828dc2****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  uploadAddress?: string(name='UploadAddress', example='eyJFbmRwb2ludCI6Imh0dHBzOi8vb3NzLWNuLXNoYW5naGFpLmFsaXl1bmNzLmNvbSIsIkJ1Y2tldCI6InN6aGQtdmlkZW8iLCJGaWxlTmFtZSI6InZvZC0yOTYzMWEvc3YvNTBmYTJlODQtMTgxMjdhZGRiMTcvNTBmYTJlODQtMTgxMjdhZGRiM***'),
  uploadAuth?: string(name='UploadAuth', example='eyJBY2Nlc3NLZXlJZCI6IkxUQUk0Rm53bTk1dHdxQjMxR3IzSE5hRCIsIkFjY2Vzc0tleVNlY3JldCI6Ik9lWllKR0dTMTlkNkZaM1E3UVpJQmdmSVdnM3BPaiIsIkV4cGlyYXRpb24iOiI***'),
}

model CreateUploadStreamResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUploadStreamResponseBody(name='body'),
}

async function createUploadStream(request: CreateUploadStreamRequest): CreateUploadStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUploadStream', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCategoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  cateId: long(name='CateId', example='46', position='Query'),
}

model DeleteCategoryResponseBody = {
  requestId?: string(name='RequestId', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
}

model DeleteCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCategoryResponseBody(name='body'),
}

async function deleteCategory(request: DeleteCategoryRequest): DeleteCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCategory', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomTemplateRequest {
  templateId: string(name='TemplateId', description='模板ID', example='****96e8864746a0b6f3****', position='Query'),
}

model DeleteCustomTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', description='是否成功', example='true'),
}

model DeleteCustomTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCustomTemplateResponseBody(name='body'),
}

async function deleteCustomTemplate(request: DeleteCustomTemplateRequest): DeleteCustomTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEditingProjectMaterialsRequest {
  materialIds: string(name='MaterialIds', description='素材ID', example='*****cbd721b418a89a7dafb1dc*****,*****86f5d534c95997c55c96f*****', position='Query'),
  materialType: string(name='MaterialType', description='素材类型', example='video', position='Query'),
  projectId: string(name='ProjectId', description='云剪辑工程ID', example='*****fb2101cb318*****', position='Query'),
}

model DeleteEditingProjectMaterialsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='******36-3C1E-4417-BDB2-1E034F******'),
}

model DeleteEditingProjectMaterialsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEditingProjectMaterialsResponseBody(name='body'),
}

async function deleteEditingProjectMaterials(request: DeleteEditingProjectMaterialsRequest): DeleteEditingProjectMaterialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEditingProjectMaterials', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEditingProjectsRequest {
  projectIds?: string(name='ProjectIds', description='云剪辑工程ID。支持多个云剪辑工程，以逗号分隔。', example='****fb2101bf24bf41cb318787dc****,****87dcfb2101bf24bf41cb3187****', position='Query'),
}

model DeleteEditingProjectsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='****25818875-5F78-4AF6-D7393642CA58****'),
}

model DeleteEditingProjectsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEditingProjectsResponseBody(name='body'),
}

async function deleteEditingProjects(request: DeleteEditingProjectsRequest): DeleteEditingProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEditingProjects', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveRecordFilesRequest {
  recordIds: [ string ](name='RecordIds', position='Query'),
  removeFile?: boolean(name='RemoveFile', example='true', position='Query'),
}

model DeleteLiveRecordFilesResponseBody = {
  deleteFileInfoList?: [ 
    {
      code?: string(name='Code', example='OK'),
      message?: string(name='Message', example='OK'),
      recordId?: string(name='RecordId', example='13cbb83e-043c-4728-ac35-*****'),
    }
  ](name='DeleteFileInfoList'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='13cbb83e-043c-4728-ac35-*****'),
}

model DeleteLiveRecordFilesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveRecordFilesResponseBody(name='body'),
}

async function deleteLiveRecordFiles(request: DeleteLiveRecordFilesRequest): DeleteLiveRecordFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveRecordFiles', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveRecordTemplateRequest {
  templateId: string(name='TemplateId', description='代表资源一级ID的资源属性字段', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66', position='Query'),
}

model DeleteLiveRecordTemplateResponseBody = {
  requestId?: string(name='RequestId', example='3E5330CF-B4C8-5BEF-AA6B-8E70BD20FAEE'),
}

model DeleteLiveRecordTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveRecordTemplateResponseBody(name='body'),
}

async function deleteLiveRecordTemplate(request: DeleteLiveRecordTemplateRequest): DeleteLiveRecordTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveRecordTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveSnapshotFilesRequest {
  createTimestampList: [ long ](name='CreateTimestampList', description='创建时间戳列表。', shrink='json', position='Query'),
  deleteOriginalFile?: boolean(name='DeleteOriginalFile', description='是否删除原始文件，默认是false。', example='true', position='Query'),
  jobId: string(name='JobId', description='截图任务ID。', example='****a046-263c-3560-978a-fb287782****', position='Query'),
}

model DeleteLiveSnapshotFilesResponseBody = {
  deleteFileResultList?: [ 
    {
      createTimestamp?: long(name='CreateTimestamp', description='创建时间戳。', example='1660638613798'),
      result?: string(name='Result', description='OK表示删除成功，其他表示删除失败。', example='OK'),
    }
  ](name='DeleteFileResultList', description='删除结果列表。'),
  requestId?: string(name='RequestId', description='请求ID。', example='****2876-6263-4B75-8F2C-CD0F7FCF****'),
}

model DeleteLiveSnapshotFilesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveSnapshotFilesResponseBody(name='body'),
}

async function deleteLiveSnapshotFiles(request: DeleteLiveSnapshotFilesRequest): DeleteLiveSnapshotFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveSnapshotFiles', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveSnapshotTemplateRequest {
  templateId: string(name='TemplateId', description='模板ID。', example='****a046-263c-3560-978a-fb287782****', position='Body'),
}

model DeleteLiveSnapshotTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。', example='******11-DB8D-4A9A-875B-275798******'),
}

model DeleteLiveSnapshotTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveSnapshotTemplateResponseBody(name='body'),
}

async function deleteLiveSnapshotTemplate(request: DeleteLiveSnapshotTemplateRequest): DeleteLiveSnapshotTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveSnapshotTemplate', 'POST', '/', 'json', true, 'form', request);
}

model DeleteLiveTranscodeJobRequest {
  jobId: string(name='JobId', description='模板Id', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model DeleteLiveTranscodeJobResponseBody = {
  requestId?: string(name='RequestId', description='请求ID', example='******3B-0E1A-586A-AC29-742247******'),
}

model DeleteLiveTranscodeJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveTranscodeJobResponseBody(name='body'),
}

async function deleteLiveTranscodeJob(request: DeleteLiveTranscodeJobRequest): DeleteLiveTranscodeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveTranscodeJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveTranscodeTemplateRequest {
  templateId: string(name='TemplateId', description='模板Id', example='****d80e4e4044975745c14b****', position='Query'),
}

model DeleteLiveTranscodeTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID', example='******3B-0E1A-586A-AC29-742247******'),
}

model DeleteLiveTranscodeTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveTranscodeTemplateResponseBody(name='body'),
}

async function deleteLiveTranscodeTemplate(request: DeleteLiveTranscodeTemplateRequest): DeleteLiveTranscodeTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveTranscodeTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMediaInfosRequest {
  regionId?: string(name='RegionId', position='Host'),
  deletePhysicalFiles?: boolean(name='DeletePhysicalFiles', example='false', position='Query'),
  inputURLs?: string(name='InputURLs', description='待注册的媒资在相应系统中的地址', position='Query'),
  mediaIds?: string(name='MediaIds', description='ICE 媒资ID', example='****20b48fb04483915d4f2cd8ac****,****15d4a4b0448391508f2cb486****', position='Query'),
}

model DeleteMediaInfosResponseBody = {
  forbiddenList?: [ string ](name='ForbiddenList'),
  ignoredList?: [ string ](name='IgnoredList', description='出现获取错误的ID或inputUr'),
  requestId?: string(name='RequestId', description='请求ID', example='0622C702-41BE-467E-AF2E-883D4517962E'),
}

model DeleteMediaInfosResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMediaInfosResponseBody(name='body'),
}

async function deleteMediaInfos(request: DeleteMediaInfosRequest): DeleteMediaInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMediaInfos', 'POST', '/', 'json', false, 'json', request);
}

model DeletePipelineRequest {
  pipelineId: string(name='PipelineId', description='管道ID', example='****96e8864746a0b6f3****', position='Query'),
}

model DeletePipelineResponseBody = {
  requestId?: string(name='RequestId', description='请求ID', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', description='是否成功', example='true'),
}

model DeletePipelineResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePipelineResponseBody(name='body'),
}

async function deletePipeline(request: DeletePipelineRequest): DeletePipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePipeline', 'POST', '/', 'json', false, 'json', request);
}

model DeletePlayInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  deletePhysicalFiles?: boolean(name='DeletePhysicalFiles', example='false', position='Query'),
  fileURLs?: string(name='FileURLs', example='https://ice-test001.oss-cn-shanghai.aliyuncs.com/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%E5%B0%8F%E7%8C%AA%E4%BD%A9%E5%A5%87640*360.mp4', position='Query'),
  mediaId?: string(name='MediaId', example='1d3518e0027d71ed80cd909598416303', position='Query'),
}

model DeletePlayInfoResponseBody = {
  forbiddenList?: [ string ](name='ForbiddenList'),
  ignoredList?: [ string ](name='IgnoredList'),
  requestId?: string(name='RequestId', description='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model DeletePlayInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePlayInfoResponseBody(name='body'),
}

async function deletePlayInfo(request: DeletePlayInfoRequest): DeletePlayInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePlayInfo', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSmartJobRequest {
  jobId?: string(name='JobId', description='任务id，多个任务id用英文逗号分割', example='******b48fb04483915d4f2cd8******,******042d5e4db6866f6289d1******', position='Query'),
}

model DeleteSmartJobResponseBody = {
  requestId?: string(name='RequestId', description='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model DeleteSmartJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSmartJobResponseBody(name='body'),
}

async function deleteSmartJob(request: DeleteSmartJobRequest): DeleteSmartJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSmartJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTemplateRequest {
  templateIds?: string(name='TemplateIds', description='模板id，多个id用英文逗号隔开', example='****20b48fb04483915d4f2cd8ac****,****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model DeleteTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID', example='******11-DB8D-4A9A-875B-275798******'),
}

model DeleteTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTemplateResponseBody(name='body'),
}

async function deleteTemplate(request: DeleteTemplateRequest): DeleteTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTemplate', 'GET', '/', 'json', false, 'json', request);
}

model DescribeFilterConfigsRequest {
  type?: string(name='Type', position='Query'),
}

model DescribeFilterConfigsResponseBody = {
  filterConfigs?: [ 
    {
      filterName?: string(name='FilterName'),
      itemConfigs?: string(name='ItemConfigs'),
      type?: string(name='Type'),
      uuId?: string(name='UuId'),
    }
  ](name='FilterConfigs'),
  requestId?: string(name='RequestId', description='Id'),
}

model DescribeFilterConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFilterConfigsResponseBody(name='body'),
}

async function describeFilterConfigs(request: DescribeFilterConfigsRequest): DescribeFilterConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFilterConfigs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterIceEditUsageRequest {
  endTs: long(name='EndTs', example='1656995036', position='Query'),
  interval: long(name='Interval', example='86400', position='Query'),
  region?: string(name='Region', example='cn-shanghai', position='Query'),
  startTs: long(name='StartTs', example='1654403036', position='Query'),
}

model DescribeMeterIceEditUsageResponseBody = {
  data?: [ 
    {
      duration?: long(name='Duration', example='1.23'),
      profile?: string(name='Profile', example='1080P'),
      time?: long(name='Time', example='1656950400'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', description='Id', example='BEA98A0C-7870-15FE-B96F-8880BB600A2C'),
}

model DescribeMeterIceEditUsageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMeterIceEditUsageResponseBody(name='body'),
}

async function describeMeterIceEditUsage(request: DescribeMeterIceEditUsageRequest): DescribeMeterIceEditUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterIceEditUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterIceLiveMediaConvertUsageRequest {
  endTs: long(name='EndTs', example='1656995036', position='Query'),
  interval: long(name='Interval', example='cn-shanghai', position='Query'),
  region?: string(name='Region', example='86400', position='Query'),
  startTs: long(name='StartTs', example='1654403036', position='Query'),
}

model DescribeMeterIceLiveMediaConvertUsageResponseBody = {
  data?: [ 
    {
      duration?: long(name='Duration', example='0'),
      specification?: string(name='Specification', example='H265 LD'),
      time?: long(name='Time', example='1656950400'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', description='Id', example='BEA98A0C-7870-15FE-B96F-8880BB600A2C'),
}

model DescribeMeterIceLiveMediaConvertUsageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMeterIceLiveMediaConvertUsageResponseBody(name='body'),
}

async function describeMeterIceLiveMediaConvertUsage(request: DescribeMeterIceLiveMediaConvertUsageRequest): DescribeMeterIceLiveMediaConvertUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterIceLiveMediaConvertUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterIceMediaConvertUHDUsageRequest {
  endTs: long(name='EndTs', example='1656995036', position='Query'),
  interval: string(name='Interval', example='cn-shanghai', position='Query'),
  regionId?: string(name='RegionId', example='86400', position='Query'),
  startTs: long(name='StartTs', example='1654403036', position='Query'),
}

model DescribeMeterIceMediaConvertUHDUsageResponseBody = {
  data?: [ 
    {
      duration?: long(name='Duration', example='308028'),
      specification?: string(name='Specification', example='SuperResolution.Standard.1080P'),
      time?: long(name='Time', example='1656950400'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', description='Id', example='BEA98A0C-7870-15FE-B96F-8880BB600A2C'),
}

model DescribeMeterIceMediaConvertUHDUsageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMeterIceMediaConvertUHDUsageResponseBody(name='body'),
}

async function describeMeterIceMediaConvertUHDUsage(request: DescribeMeterIceMediaConvertUHDUsageRequest): DescribeMeterIceMediaConvertUHDUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterIceMediaConvertUHDUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterIceMediaConvertUsageRequest {
  endTs: long(name='EndTs', example='1656995036', position='Query'),
  interval: long(name='Interval', example='cn-shanghai', position='Query'),
  region?: string(name='Region', example='86400', position='Query'),
  startTs: long(name='StartTs', example='1654403036', position='Query'),
}

model DescribeMeterIceMediaConvertUsageResponseBody = {
  data?: [ 
    {
      duration?: long(name='Duration', example='20'),
      specification?: string(name='Specification', example='H264.HD'),
      time?: long(name='Time', example='1656950400'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', description='Id', example='BEA98A0C-7870-15FE-B96F-8880BB600A2C'),
}

model DescribeMeterIceMediaConvertUsageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMeterIceMediaConvertUsageResponseBody(name='body'),
}

async function describeMeterIceMediaConvertUsage(request: DescribeMeterIceMediaConvertUsageRequest): DescribeMeterIceMediaConvertUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterIceMediaConvertUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterIceMpsAiUsageRequest {
  endTs: long(name='EndTs', example='1656995036', position='Query'),
  interval: long(name='Interval', example='86400', position='Query'),
  region?: string(name='Region', example='cn-shanghai', position='Query'),
  startTs: long(name='StartTs', example='1654403036', position='Query'),
}

model DescribeMeterIceMpsAiUsageResponseBody = {
  data?: [ 
    {
      duration?: long(name='Duration', example='644'),
      time?: long(name='Time', example='1656950400'),
      type?: string(name='Type', example='Product'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', description='Id', example='BEA98A0C-7870-15FE-B96F-8880BB600A2C'),
}

model DescribeMeterIceMpsAiUsageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMeterIceMpsAiUsageResponseBody(name='body'),
}

async function describeMeterIceMpsAiUsage(request: DescribeMeterIceMpsAiUsageRequest): DescribeMeterIceMpsAiUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterIceMpsAiUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterImsEditUsageRequest {
  endTs: long(name='EndTs', example='1656995036', position='Query'),
  interval: long(name='Interval', example='86400', position='Query'),
  region?: string(name='Region', example='cn-shanghai', position='Query'),
  startTs: long(name='StartTs', example='1654403036', position='Query'),
}

model DescribeMeterImsEditUsageResponseBody = {
  data?: [ 
    {
      duration?: long(name='Duration', example='1.23'),
      profile?: string(name='Profile', example='1080P'),
      time?: long(name='Time', example='1656950400'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', description='Id', example='7F3AE2C6-5CC6-5712-BAC5-5A735A157687'),
}

model DescribeMeterImsEditUsageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMeterImsEditUsageResponseBody(name='body'),
}

async function describeMeterImsEditUsage(request: DescribeMeterImsEditUsageRequest): DescribeMeterImsEditUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterImsEditUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterImsLiveEditUsageRequest {
  endTs: long(name='EndTs', position='Query'),
  interval: long(name='Interval', position='Query'),
  region?: string(name='Region', position='Query'),
  startTs: long(name='StartTs', position='Query'),
}

model DescribeMeterImsLiveEditUsageResponseBody = {
  data?: [ 
    {
      duration?: long(name='Duration'),
      profile?: string(name='Profile'),
      time?: long(name='Time'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', description='Id'),
}

model DescribeMeterImsLiveEditUsageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMeterImsLiveEditUsageResponseBody(name='body'),
}

async function describeMeterImsLiveEditUsage(request: DescribeMeterImsLiveEditUsageRequest): DescribeMeterImsLiveEditUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterImsLiveEditUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterImsLiveMediaConvertUsageRequest {
  endTs: long(name='EndTs', position='Query'),
  interval: long(name='Interval', position='Query'),
  region?: string(name='Region', position='Query'),
  startTs: long(name='StartTs', position='Query'),
}

model DescribeMeterImsLiveMediaConvertUsageResponseBody = {
  data?: [ 
    {
      duration?: long(name='Duration'),
      specification?: string(name='Specification'),
      time?: long(name='Time'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', description='Id'),
}

model DescribeMeterImsLiveMediaConvertUsageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMeterImsLiveMediaConvertUsageResponseBody(name='body'),
}

async function describeMeterImsLiveMediaConvertUsage(request: DescribeMeterImsLiveMediaConvertUsageRequest): DescribeMeterImsLiveMediaConvertUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterImsLiveMediaConvertUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterImsLiveRecordUsageRequest {
  endTs: long(name='EndTs', position='Query'),
  interval: long(name='Interval', position='Query'),
  region?: string(name='Region', position='Query'),
  startTs: long(name='StartTs', position='Query'),
}

model DescribeMeterImsLiveRecordUsageResponseBody = {
  data?: [ 
    {
      channels?: double(name='Channels'),
      duration?: long(name='Duration'),
      time?: long(name='Time'),
      type?: string(name='Type'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', description='Id'),
}

model DescribeMeterImsLiveRecordUsageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMeterImsLiveRecordUsageResponseBody(name='body'),
}

async function describeMeterImsLiveRecordUsage(request: DescribeMeterImsLiveRecordUsageRequest): DescribeMeterImsLiveRecordUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterImsLiveRecordUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterImsLiveSnapshotUsageRequest {
  endTs: long(name='EndTs', position='Query'),
  interval: long(name='Interval', position='Query'),
  region?: string(name='Region', position='Query'),
  startTs: long(name='StartTs', position='Query'),
}

model DescribeMeterImsLiveSnapshotUsageResponseBody = {
  data?: [ 
    {
      count?: long(name='Count'),
      time?: long(name='Time'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', description='Id'),
}

model DescribeMeterImsLiveSnapshotUsageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMeterImsLiveSnapshotUsageResponseBody(name='body'),
}

async function describeMeterImsLiveSnapshotUsage(request: DescribeMeterImsLiveSnapshotUsageRequest): DescribeMeterImsLiveSnapshotUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterImsLiveSnapshotUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterImsMediaConvertUHDUsageRequest {
  endTs: long(name='EndTs', example='1656995036', position='Query'),
  interval: string(name='Interval', example='3600', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  startTs: long(name='StartTs', example='1654403036', position='Query'),
}

model DescribeMeterImsMediaConvertUHDUsageResponseBody = {
  data?: [ 
    {
      duration?: long(name='Duration', example='308028'),
      specification?: string(name='Specification', example='SuperResolution.Standard.1080P'),
      time?: long(name='Time', example='1656950400'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', description='Id', example='BEA98A0C-7870-15FE-B96F-8880BB600A2C'),
}

model DescribeMeterImsMediaConvertUHDUsageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMeterImsMediaConvertUHDUsageResponseBody(name='body'),
}

async function describeMeterImsMediaConvertUHDUsage(request: DescribeMeterImsMediaConvertUHDUsageRequest): DescribeMeterImsMediaConvertUHDUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterImsMediaConvertUHDUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterImsMediaConvertUsageRequest {
  endTs: long(name='EndTs', example='1656995036', position='Query'),
  interval: long(name='Interval', example='86400', position='Query'),
  region?: string(name='Region', example='cn-shanghai', position='Query'),
  startTs: long(name='StartTs', example='1654403036', position='Query'),
}

model DescribeMeterImsMediaConvertUsageResponseBody = {
  data?: [ 
    {
      duration?: long(name='Duration', example='20'),
      specification?: string(name='Specification', example='H264.HD'),
      time?: long(name='Time', example='1656950400'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', description='Id', example='FBBB5210-2B78-58FB-A6FE-9DD887BB2C61'),
}

model DescribeMeterImsMediaConvertUsageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMeterImsMediaConvertUsageResponseBody(name='body'),
}

async function describeMeterImsMediaConvertUsage(request: DescribeMeterImsMediaConvertUsageRequest): DescribeMeterImsMediaConvertUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterImsMediaConvertUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterImsMpsAiUsageRequest {
  endTs: long(name='EndTs', example='1656995036', position='Query'),
  interval: long(name='Interval', example='86400', position='Query'),
  region?: string(name='Region', example='cn-shanghai', position='Query'),
  startTs: long(name='StartTs', example='1654403036', position='Query'),
}

model DescribeMeterImsMpsAiUsageResponseBody = {
  data?: [ 
    {
      duration?: long(name='Duration', example='644'),
      time?: long(name='Time', example='1656950400'),
      type?: string(name='Type'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', description='Id', example='0622C702-41BE-467E-AF2E-883D4517962E'),
}

model DescribeMeterImsMpsAiUsageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMeterImsMpsAiUsageResponseBody(name='body'),
}

async function describeMeterImsMpsAiUsage(request: DescribeMeterImsMpsAiUsageRequest): DescribeMeterImsMpsAiUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterImsMpsAiUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterImsSummaryRequest {
  endTs: long(name='EndTs', example='1656995036', position='Query'),
  region?: string(name='Region', example='cn-shanghai', position='Query'),
  startTs: long(name='StartTs', example='1654403036', position='Query'),
}

model DescribeMeterImsSummaryResponseBody = {
  data?: [ 
    {
      editingDuration?: string(name='EditingDuration', example='8722'),
      liveEditDuration?: string(name='LiveEditDuration'),
      liveRecordDuration?: string(name='LiveRecordDuration'),
      liveSnapshotCount?: string(name='LiveSnapshotCount'),
      liveTranscodeDuration?: long(name='LiveTranscodeDuration', example='12356'),
      mpsAiDuration?: long(name='MpsAiDuration', example='0'),
      mpsTranscodeDuration?: long(name='MpsTranscodeDuration', example='17337'),
      mpsTranscodeUHDDuration?: long(name='MpsTranscodeUHDDuration', example='300'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', description='Id', example='BEA98A0C-7870-15FE-B96F-8880BB600A2C'),
}

model DescribeMeterImsSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMeterImsSummaryResponseBody(name='body'),
}

async function describeMeterImsSummary(request: DescribeMeterImsSummaryRequest): DescribeMeterImsSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterImsSummary', 'POST', '/', 'json', false, 'json', request);
}

model DescribePlayDetailRequest {
  playTs?: string(name='PlayTs', position='Query'),
  sessionId: string(name='SessionId', position='Query'),
}

model DescribePlayDetailResponseBody = {
  baseInfos?: [ 
    {
      appName?: string(name='AppName'),
      bps?: string(name='Bps'),
      broadcastPace?: string(name='BroadcastPace'),
      clientIP?: string(name='ClientIP'),
      codec?: string(name='Codec'),
      decodeStuckTime?: string(name='DecodeStuckTime'),
      definition?: string(name='Definition'),
      firstFrameDuration?: string(name='FirstFrameDuration'),
      fps?: string(name='Fps'),
      isHardDecode?: string(name='IsHardDecode'),
      mdat?: string(name='Mdat'),
      moov?: string(name='Moov'),
      network?: string(name='Network'),
      networkDuration?: string(name='NetworkDuration'),
      networkStuckTime?: string(name='NetworkStuckTime'),
      os?: string(name='Os'),
      playTs?: string(name='PlayTs'),
      playerLoadDuration?: string(name='PlayerLoadDuration'),
      playerPreDealDuration?: string(name='PlayerPreDealDuration'),
      playerReadyDuration?: string(name='PlayerReadyDuration'),
      sdkVersion?: string(name='SdkVersion'),
      sessionId?: string(name='SessionId'),
      status?: string(name='Status'),
      terminalType?: string(name='TerminalType'),
    }
  ](name='BaseInfos'),
  requestId?: string(name='RequestId', description='Id'),
}

model DescribePlayDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePlayDetailResponseBody(name='body'),
}

async function describePlayDetail(request: DescribePlayDetailRequest): DescribePlayDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePlayDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribePlayEventListRequest {
  pageNo: int32(name='PageNo', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  playTs?: string(name='PlayTs', position='Query'),
  sessionId: string(name='SessionId', position='Query'),
}

model DescribePlayEventListResponseBody = {
  eventList?: [ 
    {
      description?: string(name='Description'),
      duration?: float(name='Duration'),
      eventName?: string(name='EventName'),
      time?: long(name='Time'),
      topic?: string(name='Topic'),
    }
  ](name='EventList'),
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId', description='Id'),
  totalCount?: long(name='TotalCount'),
}

model DescribePlayEventListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePlayEventListResponseBody(name='body'),
}

async function describePlayEventList(request: DescribePlayEventListRequest): DescribePlayEventListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePlayEventList', 'POST', '/', 'json', false, 'json', request);
}

model DescribePlayFirstFrameDurationMetricDataRequest {
  beginTs: string(name='BeginTs', position='Query'),
  endTs: string(name='EndTs', position='Query'),
  traceId?: string(name='TraceId', position='Query'),
}

model DescribePlayFirstFrameDurationMetricDataResponseBody = {
  nodes?: [ 
    {
      x?: long(name='X'),
      y?: long(name='Y'),
    }
  ](name='Nodes'),
  requestId?: string(name='RequestId', description='Id'),
}

model DescribePlayFirstFrameDurationMetricDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePlayFirstFrameDurationMetricDataResponseBody(name='body'),
}

async function describePlayFirstFrameDurationMetricData(request: DescribePlayFirstFrameDurationMetricDataRequest): DescribePlayFirstFrameDurationMetricDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePlayFirstFrameDurationMetricData', 'POST', '/', 'json', false, 'json', request);
}

model DescribePlayListRequest {
  beginTs: string(name='BeginTs', position='Query'),
  endTs: string(name='EndTs', position='Query'),
  orderName?: string(name='OrderName', position='Query'),
  orderType?: string(name='OrderType', position='Query'),
  pageNo: int32(name='PageNo', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  playType?: string(name='PlayType', position='Query'),
  status?: string(name='Status', position='Query'),
  traceId?: string(name='TraceId', position='Query'),
}

model DescribePlayListResponseBody = {
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  playList?: [ 
    {
      firstFrameDuration?: string(name='FirstFrameDuration'),
      playDuration?: string(name='PlayDuration'),
      playTs?: string(name='PlayTs'),
      playType?: string(name='PlayType'),
      sessionId?: string(name='SessionId'),
      status?: string(name='Status'),
      stuckDuration?: string(name='StuckDuration'),
      traceId?: string(name='TraceId'),
      videoDuration?: string(name='VideoDuration'),
      videoId?: string(name='VideoId'),
    }
  ](name='PlayList'),
  requestId?: string(name='RequestId', description='Id'),
  totalNum?: long(name='TotalNum'),
}

model DescribePlayListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePlayListResponseBody(name='body'),
}

async function describePlayList(request: DescribePlayListRequest): DescribePlayListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePlayList', 'POST', '/', 'json', false, 'json', request);
}

model DescribePlayMetricDataRequest {
  appName: string(name='AppName', position='Query'),
  beginTs: long(name='BeginTs', position='Query'),
  definition?: string(name='Definition', position='Query'),
  endTs: long(name='EndTs', position='Query'),
  experienceLevel?: string(name='ExperienceLevel', position='Query'),
  itemConfigs?: string(name='ItemConfigs', position='Query'),
  metricType: string(name='MetricType', position='Query'),
  network?: string(name='Network', position='Query'),
  os?: string(name='Os', position='Query'),
  sdkVersion?: string(name='SdkVersion', position='Query'),
  terminalType?: string(name='TerminalType', position='Query'),
}

model DescribePlayMetricDataResponseBody = {
  nodes?: [ 
    {
      x?: string(name='X'),
      y?: string(name='Y'),
    }
  ](name='Nodes'),
  requestId?: string(name='RequestId', description='Id'),
  summaryData?: string(name='SummaryData'),
}

model DescribePlayMetricDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePlayMetricDataResponseBody(name='body'),
}

async function describePlayMetricData(request: DescribePlayMetricDataRequest): DescribePlayMetricDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePlayMetricData', 'POST', '/', 'json', false, 'json', request);
}

model DescribePlayQoeListRequest {
  appName: string(name='AppName', position='Query'),
  beginTs: long(name='BeginTs', position='Query'),
  definition?: string(name='Definition', position='Query'),
  endTs: long(name='EndTs', position='Query'),
  itemConfigs?: string(name='ItemConfigs', position='Query'),
  metricTypes?: [ string ](name='MetricTypes', shrink='json', position='Query'),
  network?: string(name='Network', position='Query'),
  orderName?: string(name='OrderName', position='Query'),
  orderType?: string(name='OrderType', position='Query'),
  os?: string(name='Os', position='Query'),
  pageNo: int32(name='PageNo', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  terminalType?: string(name='TerminalType', position='Query'),
}

model DescribePlayQoeListResponseBody = {
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
  qoeInfoList?: [ 
    {
      qoeFinishedVV?: float(name='QoeFinishedVV'),
      qoeFinishedVVRate?: float(name='QoeFinishedVVRate'),
      qoeUFinishedVVTime?: float(name='QoeUFinishedVVTime'),
      qoeUV?: float(name='QoeUV'),
      qoeUVVDuration?: float(name='QoeUVVDuration'),
      qoeUVVTime?: float(name='QoeUVVTime'),
      qoeVDuration?: float(name='QoeVDuration'),
      qoeVVDuration?: float(name='QoeVVDuration'),
      traceId?: string(name='TraceId'),
    }
  ](name='QoeInfoList'),
  requestId?: string(name='RequestId', description='Id'),
  totalCount?: long(name='TotalCount'),
}

model DescribePlayQoeListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePlayQoeListResponseBody(name='body'),
}

async function describePlayQoeList(request: DescribePlayQoeListRequest): DescribePlayQoeListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePlayQoeList', 'POST', '/', 'json', false, 'json', request);
}

model DescribePlayQosListRequest {
  appName: string(name='AppName', position='Query'),
  beginTs: string(name='BeginTs', position='Query'),
  definition?: string(name='Definition', position='Query'),
  endTs: string(name='EndTs', position='Query'),
  itemConfigs?: string(name='ItemConfigs', position='Query'),
  metricTypes?: [ string ](name='MetricTypes', shrink='json', position='Query'),
  network?: string(name='Network', position='Query'),
  orderName?: string(name='OrderName', position='Query'),
  orderType?: string(name='OrderType', position='Query'),
  os?: string(name='Os', position='Query'),
  pageNo: int32(name='PageNo', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  terminalType?: string(name='TerminalType', position='Query'),
}

model DescribePlayQosListResponseBody = {
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
  qosInfoList?: [ 
    {
      qosFirstFrame?: string(name='QosFirstFrame'),
      qosKbps?: string(name='QosKbps'),
      qosPlay?: string(name='QosPlay'),
      qosPlayFail?: string(name='QosPlayFail'),
      qosRealPlay?: string(name='QosRealPlay'),
      qosSeedFailRate?: string(name='QosSeedFailRate'),
      qosStuckRate?: string(name='QosStuckRate'),
      traceId?: string(name='TraceId'),
    }
  ](name='QosInfoList'),
  requestId?: string(name='RequestId', description='Id'),
  totalCount?: long(name='TotalCount'),
}

model DescribePlayQosListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePlayQosListResponseBody(name='body'),
}

async function describePlayQosList(request: DescribePlayQosListRequest): DescribePlayQosListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePlayQosList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeQueryConfigsRequest {
  type: string(name='Type', position='Query'),
}

model DescribeQueryConfigsResponseBody = {
  configs?: [ 
    {
      value?: string(name='Value'),
    }
  ](name='Configs'),
  requestId?: string(name='RequestId', description='Id'),
}

model DescribeQueryConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeQueryConfigsResponseBody(name='body'),
}

async function describeQueryConfigs(request: DescribeQueryConfigsRequest): DescribeQueryConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeQueryConfigs', 'POST', '/', 'json', false, 'json', request);
}

model GetCategoriesRequest {
  regionId?: string(name='RegionId', position='Host'),
  cateId?: long(name='CateId', example='33', position='Query'),
  pageNo?: long(name='PageNo', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  sortBy?: string(name='SortBy', example='CreationTime:Desc', position='Query'),
  type?: string(name='Type', example='default', position='Query'),
}

model GetCategoriesResponseBody = {
  category?: {
    cateId?: long(name='CateId', example='46'),
    cateName?: string(name='CateName'),
    level?: long(name='Level', example='0'),
    parentId?: long(name='ParentId', example='-1'),
    type?: string(name='Type', example='default'),
  }(name='Category'),
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
  subCategories?: {
    category?: [ 
    {
      cateId?: long(name='CateId', example='129'),
      cateName?: string(name='CateName'),
      level?: long(name='Level', example='1'),
      parentId?: long(name='ParentId', example='46'),
      subTotal?: long(name='SubTotal', example='100'),
      type?: string(name='Type', example='default'),
    }
  ](name='Category')
  }(name='SubCategories'),
  subTotal?: long(name='SubTotal', example='100'),
}

model GetCategoriesResponse = {
  headers: map[string]string(name='headers'),
  body: GetCategoriesResponseBody(name='body'),
}

async function getCategories(request: GetCategoriesRequest): GetCategoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCategories', 'POST', '/', 'json', false, 'json', request);
}

model GetCustomTemplateRequest {
  subtype?: int32(name='Subtype', example='1', position='Query'),
  templateId?: string(name='TemplateId', description='模板ID', example='****96e8864746a0b6f3****', position='Query'),
  type?: int32(name='Type', example='1', position='Query'),
}

model GetCustomTemplateResponseBody = {
  customTemplate?: {
    createTime?: string(name='CreateTime', description='模板创建时间', example='2022-01-01T10:00:00Z'),
    isDefault?: boolean(name='IsDefault', description='是否默认模板', example='true'),
    modifiedTime?: string(name='ModifiedTime', description='模板修改时间', example='2022-01-01T11:00:00Z'),
    status?: string(name='Status', description='模板状态', example='Normal'),
    subtype?: int32(name='Subtype', description='模板子类型ID', example='1'),
    subtypeName?: string(name='SubtypeName', description='模板子类型名称', example='Normal'),
    templateConfig?: string(name='TemplateConfig', description='模板参数', example='{"Type":"Normal","FrameType":"normal","Time":0,"Count":10}'),
    templateId?: string(name='TemplateId', description='模板Id', example='****20b48fb04483915d4f2cd8ac****'),
    templateName?: string(name='TemplateName', description='模板名称', example='测试转码模板'),
    type?: int32(name='Type', description='模板类型ID', example='2'),
    typeName?: string(name='TypeName', description='模板类型名称', example='SnapshotTemplate'),
  }(name='CustomTemplate', description='模板信息'),
  requestId?: string(name='RequestId', description='请求ID', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetCustomTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetCustomTemplateResponseBody(name='body'),
}

async function getCustomTemplate(request: GetCustomTemplateRequest): GetCustomTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCustomTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetDefaultStorageLocationRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model GetDefaultStorageLocationResponseBody = {
  bucket?: string(name='Bucket', description='oss bucket 名称', example='oss-test-bucket'),
  path?: string(name='Path', description='路径', example='ice/dir'),
  requestId?: string(name='RequestId', description='Id of the request', example='******11-DB8D-4A9A-875B-275798******'),
  status?: string(name='Status', description='状态', example='normal'),
  storageType?: string(name='StorageType', description='存储类型', example='user_oss_bucket'),
}

model GetDefaultStorageLocationResponse = {
  headers: map[string]string(name='headers'),
  body: GetDefaultStorageLocationResponseBody(name='body'),
}

async function getDefaultStorageLocation(request: GetDefaultStorageLocationRequest): GetDefaultStorageLocationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDefaultStorageLocation', 'POST', '/', 'json', false, 'json', request);
}

model GetDynamicImageJobRequest {
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****', position='Query'),
}

model GetDynamicImageJobResponseBody = {
  dynamicImageJob?: {
    code?: string(name='Code', example='ResourceNotFound'),
    createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
    finishTime?: string(name='FinishTime', example='2022-07-12T16:30:54Z'),
    input?: {
      media?: string(name='Media', example='oss://test-bucket/sample-input.mp4'),
      ossFile?: {
        bucket?: string(name='Bucket', description='OSS Bucket', example='test-bucket'),
        location?: string(name='Location', description='OSS Location', example='oss-cn-shanghai'),
        object?: string(name='Object', description='OSS Object', example='sample-input.mp4'),
      }(name='OssFile', description='输入类型为媒资ID时的OSS地址'),
      type?: string(name='Type', example='OSS'),
    }(name='Input'),
    jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
    message?: string(name='Message', example='The specified resource for "CustomTemplate" could not be found.'),
    modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:30:54Z'),
    name?: string(name='Name', example='SampleJob'),
    output?: {
      media?: string(name='Media', example='****d80e4e4044975745c14b****'),
      ossFile?: {
        bucket?: string(name='Bucket', description='OSS Bucket', example='sample-bucket'),
        location?: string(name='Location', description='OSS Location', example='oss-cn-shanghai'),
        object?: string(name='Object', description='OSS Object', example='path/to/object'),
      }(name='OssFile', description='输出类型为媒资ID时的OSS地址'),
      type?: string(name='Type', example='Media'),
    }(name='Output'),
    outputUrl?: string(name='OutputUrl', example='http://test-bucket.oss-cn-shanghai.aliyuncs.com/output.gif'),
    pipelineId?: string(name='PipelineId', example='****d80e4e4044975745c14b****'),
    status?: string(name='Status', example='Success'),
    submitTime?: string(name='SubmitTime', example='2022-07-12T16:17:54Z'),
    templateConfig?: string(name='TemplateConfig', example='{"Format":"gif","Fps":5,"Height":1080,"Width":1920}'),
    templateId?: string(name='TemplateId', example='****d80e4e4044975745c14b****'),
    triggerSource?: string(name='TriggerSource', example='API'),
    userData?: string(name='UserData', example='{"sampleParam": "sampleValue"}'),
  }(name='DynamicImageJob', description='截图任务信息'),
  requestId?: string(name='RequestId', example='******36-3C1E-4417-BDB2-1E034F******'),
}

model GetDynamicImageJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetDynamicImageJobResponseBody(name='body'),
}

async function getDynamicImageJob(request: GetDynamicImageJobRequest): GetDynamicImageJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDynamicImageJob', 'POST', '/', 'json', false, 'json', request);
}

model GetEditingProjectRequest {
  regionId?: string(name='RegionId', position='Host'),
  projectId: string(name='ProjectId', description='云剪辑工程ID', example='****fb2101bf24b2754cb318787dc****', position='Query'),
  requestSource?: string(name='RequestSource', position='Query'),
}

model GetEditingProjectResponseBody = {
  project?: {
    businessConfig?: string(name='BusinessConfig', example='{ "OutputMediaConfig" : { "StorageLocation": "test-bucket.oss-cn-shanghai.aliyuncs.com", "Path": "test-path" }, "OutputMediaTarget": "oss-object", "ReservationTime": "2021-06-21T08:05:00Z" }'),
    businessStatus?: string(name='BusinessStatus', example='Reserving'),
    clipsParam?: string(name='ClipsParam', description='模板素材参数'),
    coverURL?: string(name='CoverURL', description='云剪辑工程封面', example='oss://example-bucket/example.jpg'),
    createSource?: string(name='CreateSource', description='云剪辑工程创建来源', example='OpenAPI'),
    createTime?: string(name='CreateTime', description='云剪辑工程创建时间', example='2020-12-20T12:00:00Z'),
    description?: string(name='Description', description='云剪辑工程描述'),
    duration?: long(name='Duration', description='云剪辑工程总时长', example='24.120000'),
    modifiedSource?: string(name='ModifiedSource', description='云剪辑工程修改来源', example='OpenAPI'),
    modifiedTime?: string(name='ModifiedTime', description='云剪辑工程最新修改时间', example='2020-12-20T13:00:00Z'),
    projectId?: string(name='ProjectId', description='云剪辑工程ID', example='****fb2101bf24b2754cb318787dc****'),
    projectType?: string(name='ProjectType', example='EditingProject'),
    status?: string(name='Status', description='云剪辑工程状态', example='Editing'),
    templateId?: string(name='TemplateId', description='模板Id', example='****96e8864746a0b6f3****'),
    templateType?: string(name='TemplateType', description='云剪辑工程模板类型', example='Timeline'),
    timeline?: string(name='Timeline', description='云剪辑工程时间线', example='{"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****9b4d7cf14dc7b83b0e801cbe****"},{"MediaId":"****9b4d7cf14dc7b83b0e801cbe****"},{"MediaId":"****1656bca4474999c961a6d2a2****"}]}]}'),
    timelineConvertErrorMessage?: string(name='TimelineConvertErrorMessage'),
    timelineConvertStatus?: string(name='TimelineConvertStatus'),
    title?: string(name='Title', description='云剪辑工程标题'),
  }(name='Project'),
  requestId?: string(name='RequestId', description='Id of the request', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
}

model GetEditingProjectResponse = {
  headers: map[string]string(name='headers'),
  body: GetEditingProjectResponseBody(name='body'),
}

async function getEditingProject(request: GetEditingProjectRequest): GetEditingProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEditingProject', 'POST', '/', 'json', false, 'json', request);
}

model GetEditingProjectMaterialsRequest {
  regionId?: string(name='RegionId', position='Host'),
  projectId: string(name='ProjectId', description='云剪辑工程ID', example='*****fb2101cb318*****', position='Query'),
}

model GetEditingProjectMaterialsResponseBody = {
  liveMaterials?: [ 
    {
      appName?: string(name='AppName', example='testrecord'),
      domainName?: string(name='DomainName', example='test.alivecdn.com'),
      liveUrl?: string(name='LiveUrl', example='rtmp://test.alivecdn.com/testrecord/teststream'),
      streamName?: string(name='StreamName', example='testrecord'),
    }
  ](name='LiveMaterials'),
  mediaInfos?: [ 
    {
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', description='码率', example='1132.68'),
            duration?: string(name='Duration', description='时长', example='216.206667'),
            fileName?: string(name='FileName', description='文件名', example='example.mp4'),
            fileSize?: string(name='FileSize', description='文件大小（字节）', example='30611502'),
            fileStatus?: string(name='FileStatus', description='文件状态', example='Normal'),
            fileType?: string(name='FileType', description='文件类型', example='source_file'),
            fileUrl?: string(name='FileUrl', description='文件oss地址', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
            formatName?: string(name='FormatName', description='封装格式', example='mov,mp4,m4a,3gp,3g2,mj2'),
            height?: string(name='Height', description='高', example='540'),
            region?: string(name='Region', description='文件存储区域', example='cn-shanghai'),
            width?: string(name='Width', description='宽', example='960'),
          }(name='FileBasicInfo', description='文件基础信息，包含时长，大小等'),
        }
      ](name='FileInfoList', description='FileInfos'),
      mediaBasicInfo?: {
        businessType?: string(name='BusinessType', description='媒资业务类型', example='general'),
        category?: string(name='Category', description='分类', example='video'),
        coverURL?: string(name='CoverURL', description='封面地址', example='http://sample-bucket.oss-cn-shanghai.aliyuncs.com/sample-corver.jpg?Expires=1628670610&OSSAccessKeyId=AK&Signature=signature'),
        createTime?: string(name='CreateTime', description='媒资创建时间', example='2020-12-26T04:11:08Z'),
        deletedTime?: string(name='DeletedTime', description='媒资删除时间', example='2020-12-26T04:11:08Z'),
        description?: string(name='Description', description='内容描述', example='sample_description'),
        inputURL?: string(name='InputURL', description='待注册的媒资在相应系统中的地址', example='http://bucket.oss-cn-shanghai.aliyuncs.com/file.mp4'),
        mediaId?: string(name='MediaId', description='MediaId', example='*****64623a94eca8516569c8f*****'),
        mediaTags?: string(name='MediaTags', description='标签'),
        mediaType?: string(name='MediaType', description='媒资媒体类型', example='video'),
        modifiedTime?: string(name='ModifiedTime', description='媒资修改时间', example='2020-12-26T04:11:08Z'),
        snapshots?: string(name='Snapshots', description='截图', example='null'),
        source?: string(name='Source', description='来源', example='oss'),
        spriteImages?: string(name='SpriteImages', description='雪碧图', example='null'),
        status?: string(name='Status', description='资源状态', example='Normal'),
        title?: string(name='Title', description='标题', example='file.mp4'),
        transcodeStatus?: string(name='TranscodeStatus', description='转码状态', example='Init'),
        userData?: string(name='UserData', description='用户数据', example='userData'),
      }(name='MediaBasicInfo', description='BasicInfo'),
      mediaId?: string(name='MediaId', description='媒资ID', example='*****64623a94eca8516569c8fe*****'),
    }
  ](name='MediaInfos', description='符合要求的媒资集合'),
  projectId?: string(name='ProjectId', example='*****67ae06542b9b93e0d1c387*****'),
  projectMaterials?: [ string ](name='ProjectMaterials', example='*****9b145c5cafc2e057304fcd*****'),
  requestId?: string(name='RequestId', description='Id of the request', example='******89-C21D-4B78-AE24-3788B8******'),
}

model GetEditingProjectMaterialsResponse = {
  headers: map[string]string(name='headers'),
  body: GetEditingProjectMaterialsResponseBody(name='body'),
}

async function getEditingProjectMaterials(request: GetEditingProjectMaterialsRequest): GetEditingProjectMaterialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEditingProjectMaterials', 'POST', '/', 'json', false, 'json', request);
}

model GetEventCallbackRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model GetEventCallbackResponseBody = {
  authKey?: string(name='AuthKey', example='TestKey001'),
  authSwitch?: string(name='AuthSwitch', example='on'),
  callbackQueueName?: string(name='CallbackQueueName', example='ice-callback-queue'),
  callbackType?: string(name='CallbackType', example='HTTP'),
  callbackURL?: string(name='CallbackURL', example='http://xxx.yyy/callback'),
  eventTypeList?: string(name='EventTypeList', example='ProduceMediaComplete,TranscodeComplete'),
  requestId?: string(name='RequestId', description='Id of the request', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetEventCallbackResponse = {
  headers: map[string]string(name='headers'),
  body: GetEventCallbackResponseBody(name='body'),
}

async function getEventCallback(request: GetEventCallbackRequest): GetEventCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEventCallback', 'POST', '/', 'json', false, 'json', request);
}

model GetLiveEditingIndexFileRequest {
  appName?: string(name='AppName', example='testrecord', position='Query'),
  domainName?: string(name='DomainName', example='test.alivecdn.com', position='Query'),
  projectId?: string(name='ProjectId', example='*****cb6307a4edea614d8b3f3c*****', position='Query'),
  streamName?: string(name='StreamName', example='teststream', position='Query'),
}

model GetLiveEditingIndexFileResponseBody = {
  indexFile?: string(name='IndexFile'),
  requestId?: string(name='RequestId', description='Id of the request', example='4E84BE44-58A7-****-****-FBEBEA16EF94'),
}

model GetLiveEditingIndexFileResponse = {
  headers: map[string]string(name='headers'),
  body: GetLiveEditingIndexFileResponseBody(name='body'),
}

async function getLiveEditingIndexFile(request: GetLiveEditingIndexFileRequest): GetLiveEditingIndexFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveEditingIndexFile', 'GET', '/', 'json', false, 'json', request);
}

model GetLiveEditingJobRequest {
  jobId?: string(name='JobId', description='直播剪辑JobId', example='****d80e4e4044975745c14b****', position='Query'),
}

model GetLiveEditingJobResponseBody = {
  liveEditingJob?: {
    clips?: string(name='Clips', description='剪辑片段列表', example='[{\\"StartTime\\": \\" 2021-06-21T08:01:00Z\\",  \\"EndTime\\": \\" 2021-06-21T08:03:00Z\\" }]'),
    code?: string(name='Code', description='剪辑合成作业错误码  注：作业失败时关注该字段', example='InvalidParameter'),
    completeTime?: string(name='CompleteTime', description='直播剪辑作业完成时间，格式为utc时间。  格式为："2021-06-21T08:01:00Z"。', example='2020-12-23T13:33:52Z'),
    creationTime?: string(name='CreationTime', description='直播剪辑作业创建时间，格式为utc时间。  格式为："2021-06-21T08:01:00Z"。', example='2020-12-23T13:33:40Z'),
    jobId?: string(name='JobId', description='直播剪辑任务ID', example='****cdb3e74639973036bc84****'),
    liveStreamConfig?: {
      appName?: string(name='AppName', description='播流所属应用名称', example='app'),
      domainName?: string(name='DomainName', description='播流所属域名', example='domain.com'),
      streamName?: string(name='StreamName', description='播流所属流名', example='streamName'),
    }(name='LiveStreamConfig', description='直播剪辑配置'),
    mediaId?: string(name='MediaId', description='输出成品的资源Id', example='****0cc6ba49eab379332c5b****'),
    mediaProduceConfig?: {
      mode?: string(name='Mode', description='剪辑模式，默认Accurate', example='Accurate'),
    }(name='MediaProduceConfig', description='直播剪辑合成配置'),
    mediaURL?: string(name='MediaURL', description='输出成品的资源文件URL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example2.mp4'),
    message?: string(name='Message', description='剪辑合成作业错误信息  注：作业失败时关注该字段', example='The specific parameter LiveStreamConfig is not valid.'),
    modifiedTime?: string(name='ModifiedTime', description='直播剪辑作业修改时间，格式为utc时间。  格式为："2021-06-21T08:01:00Z"。', example='2020-12-23T13:33:49Z'),
    outputMediaConfig?: {
      bitrate?: long(name='Bitrate', description='输出成品的码率，单位为Kbps。可以不填，默认值是多个素材的最高码率', example='1000'),
      fileName?: string(name='FileName', description='当 OutputMediaTarget 的目标为 vod-media 时，指定 fileName(包含文件后缀，不含路径）作为输出文件名', example='test.mp4'),
      height?: int32(name='Height', description='输出成品的高。可以不填，默认值是多个素材的最大高', example='480'),
      mediaURL?: string(name='MediaURL', description='输出成片的文件地址', example='https://testice-testbucket.oss-cn-shanghai.aliyuncs.com/test.mp4'),
      storageLocation?: string(name='StorageLocation', description='当 OutputMediaTarget 的目标为 vod-media 时， 指定 storage location 来存储媒资到 VOD; storage location 是 VOD 中的文件存储位置， 不包含 http:// 的前缀， 如:  outin-xxxxxx.oss-cn-shanghai.aliyuncs.com', example='outin-xxxxxx.oss-cn-shanghai.aliyuncs.com'),
      vodTemplateGroupId?: string(name='VodTemplateGroupId', description='合成成片输出到vod，指定vod转码模板组。如不需要VOD转码，请填写 "VOD_NO_TRANSCODE".', example='VOD_NO_TRANSCODE'),
      width?: int32(name='Width', description='输出成品的宽。可以不填，默认值是多个素材的最大宽', example='640'),
    }(name='OutputMediaConfig', description='输出成片的存储配置'),
    projectId?: string(name='ProjectId', description='直播剪辑工程ID', example='****fddd7748b58bf1d47e95****'),
    status?: string(name='Status', description='直播剪辑作业状态，取值可能为如下值：  -Init （初始状态）  -Queuing（排队中）  -Processing（处理中）  -Success（成功）  -Failed（失败）', example='Success'),
    userData?: string(name='UserData', description='用户数据', example='{"key": "value\\"}'),
  }(name='LiveEditingJob', description='直播剪辑任务'),
  requestId?: string(name='RequestId', description='请求ID', example='****36-3C1E-4417-BDB2-1E034F****'),
}

model GetLiveEditingJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetLiveEditingJobResponseBody(name='body'),
}

async function getLiveEditingJob(request: GetLiveEditingJobRequest): GetLiveEditingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveEditingJob', 'POST', '/', 'json', false, 'json', request);
}

model GetLiveRecordJobRequest {
  jobId: string(name='JobId', description='A short description of struct', example='ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66', position='Query'),
}

model GetLiveRecordJobResponseBody = {
  recordJob?: {
    createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段', example='2022-07-20T02:48:58Z'),
    jobId?: string(name='JobId', description='代表资源名称的资源属性字段', example='ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66'),
    name?: string(name='Name', description='代表资源名称的资源属性字段'),
    notifyUrl?: string(name='NotifyUrl', description='回调地址', example='https://example.com/imsnotify'),
    recordOutput?: {
      bucket?: string(name='Bucket', example='imsbucket1'),
      endpoint?: string(name='Endpoint', example='oss-cn-shanghai.aliyuncs.com'),
      type?: string(name='Type', example='oss'),
    }(name='RecordOutput'),
    status?: string(name='Status', description='代表资源名称的资源属性字段', example='paused'),
    streamInput?: {
      type?: string(name='Type', example='rtmp'),
      url?: string(name='Url', example='rtmp://example.com/app/stream'),
    }(name='StreamInput'),
    templateId?: string(name='TemplateId', description='录制模板ID', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66'),
    templateName?: string(name='TemplateName', description='录制模板ID', example='test template'),
  }(name='RecordJob', description='录制任务'),
  requestId?: string(name='RequestId', example='B57A046C-CE33-5FBB-B57A-D2B89ACF6907'),
}

model GetLiveRecordJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetLiveRecordJobResponseBody(name='body'),
}

async function getLiveRecordJob(request: GetLiveRecordJobRequest): GetLiveRecordJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveRecordJob', 'GET', '/', 'json', false, 'json', request);
}

model GetLiveRecordTemplateRequest {
  jobId?: string(name='JobId', example='ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66', position='Query'),
  templateId: string(name='TemplateId', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66', position='Query'),
}

model GetLiveRecordTemplateResponseBody = {
  recordTemplate?: {
    createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段', example='2022-07-20T03:26:36Z'),
    lastModified?: string(name='LastModified', description='代表创建时间的资源属性字段', example='2022-07-20T03:26:36Z'),
    name?: string(name='Name', description='代表资源名称的资源属性字段', example='test template'),
    recordFormatList?: [ 
      {
        cycleDuration?: int32(name='CycleDuration', example='7200'),
        format?: string(name='Format', description='格式', example='m3u8'),
        ossObjectPrefix?: string(name='OssObjectPrefix', description='Oss对象名，不包含后缀', example='record/{JobId}/{Sequence}{EscapedStartTime}{EscapedEndTime}'),
        sliceDuration?: int32(name='SliceDuration', example='30'),
        sliceOssObjectPrefix?: string(name='SliceOssObjectPrefix', description='切片Oss对象名，不包含后缀', example='record/{JobId}/{UnixTimestamp}_{Sequence}'),
      }
    ](name='RecordFormatList', description='录制格式'),
    templateId?: string(name='TemplateId', description='代表资源一级ID的资源属性字段', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66'),
    type?: string(name='Type', description='代表资源名称的资源属性字段', example='custom'),
  }(name='RecordTemplate', description='录制模板'),
  requestId?: string(name='RequestId', example='C892855F-95DF-50D6-A28C-279ABDB76810'),
}

model GetLiveRecordTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetLiveRecordTemplateResponseBody(name='body'),
}

async function getLiveRecordTemplate(request: GetLiveRecordTemplateRequest): GetLiveRecordTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveRecordTemplate', 'GET', '/', 'json', false, 'json', request);
}

model GetLiveSnapshotJobRequest {
  jobId: string(name='JobId', description='任务ID。', example='****a046-263c-3560-978a-fb287782****', position='Query'),
}

model GetLiveSnapshotJobResponseBody = {
  callbackUrl?: string(name='CallbackUrl', description='截图回调地址。', example='http://www.aliyun.com/snapshot/callback'),
  createTime?: string(name='CreateTime', description='创建时间。', example='2022-02-02T22:22:22Z'),
  jobId?: string(name='JobId', description='任务ID。', example='****a046-263c-3560-978a-fb287782****'),
  jobName?: string(name='JobName', description='任务名称。'),
  lastModified?: string(name='LastModified', description='最后修改时间。', example='2022-02-02T22:22:22Z'),
  overwriteFormat?: string(name='OverwriteFormat', description='覆盖截图格式。', example='snapshot/{JobId}.jpg'),
  requestId?: string(name='RequestId', description='请求ID。', example='******11-DB8D-4A9A-875B-275798******'),
  sequenceFormat?: string(name='SequenceFormat', description='序列截图格式。', example='snapshot/{JobId}/{UnixTimestamp}.jpg'),
  snapshotOutput?: {
    bucket?: string(name='Bucket', description='输出终端的Bucket，type=oss时返回OSS Bucket。', example='testbucket'),
    endpoint?: string(name='Endpoint', description='输出终端，type=oss时返回OSS域名。', example='oss-cn-shanghai.aliyuncs.com'),
    storageType?: string(name='StorageType', description='存储类型，目前只支持oss。', example='oss'),
  }(name='SnapshotOutput', description='输出信息。'),
  status?: string(name='Status', description='任务状态。
init：未启动
started：执行中
paused：已停止', example='started'),
  streamInput?: {
    type?: string(name='Type', description='输入类型，rtmp、hls、flv。', example='rtmp'),
    url?: string(name='Url', description='输入地址。', example='rtmp://www.aliyun.com/stream'),
  }(name='StreamInput', description='输入信息。'),
  templateId?: string(name='TemplateId', description='模板ID。', example='****a046-263c-3560-978a-fb287666****'),
  templateName?: string(name='TemplateName', description='模板名称。'),
  timeInterval?: int32(name='TimeInterval', description='截图时间间隔。', example='5'),
}

model GetLiveSnapshotJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetLiveSnapshotJobResponseBody(name='body'),
}

async function getLiveSnapshotJob(request: GetLiveSnapshotJobRequest): GetLiveSnapshotJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveSnapshotJob', 'GET', '/', 'json', false, 'json', request);
}

model GetLiveSnapshotTemplateRequest {
  templateId: string(name='TemplateId', description='模板ID。', example='****a046-263c-3560-978a-fb287782****', position='Query'),
}

model GetLiveSnapshotTemplateResponseBody = {
  createTime?: string(name='CreateTime', description='修改时间。', example='2022-02-02T22:22:22Z'),
  lastModified?: string(name='LastModified', description='创建时间。', example='2022-02-02T22:22:22Z'),
  overwriteFormat?: string(name='OverwriteFormat', description='覆盖截图文件格式。', example='snapshot/{JobId}.jpg'),
  requestId?: string(name='RequestId', description='请求ID。', example='******11-DB8D-4A9A-875B-275798******'),
  sequenceFormat?: string(name='SequenceFormat', description='序列截图文件格式。', example='snapshot/{JobId}/{UnixTimestamp}.jpg'),
  templateId?: string(name='TemplateId', description='模板ID。', example='****a046-263c-3560-978a-fb287782****'),
  templateName?: string(name='TemplateName', description='模板名称。'),
  timeInterval?: int32(name='TimeInterval', description='截图时间间隔。', example='5'),
  type?: string(name='Type', description='模板类型。
custom：自定义
system：系统预置', example='custom'),
}

model GetLiveSnapshotTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetLiveSnapshotTemplateResponseBody(name='body'),
}

async function getLiveSnapshotTemplate(request: GetLiveSnapshotTemplateRequest): GetLiveSnapshotTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveSnapshotTemplate', 'GET', '/', 'json', false, 'json', request);
}

model GetLiveTranscodeJobRequest {
  jobId: string(name='JobId', description='模板Id', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model GetLiveTranscodeJobResponseBody = {
  job?: {
    createTime?: string(name='CreateTime', example='2022-07-20T02:48:58Z'),
    jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
    name?: string(name='Name', example='task1'),
    outputStream?: {
      streamInfos?: [ 
        {
          outputUrl?: string(name='OutputUrl', example='rtmp://mydomain/app/mytranscode1'),
          type?: string(name='Type', example='rtmp'),
        }
      ](name='StreamInfos'),
    }(name='OutputStream'),
    startMode?: int32(name='StartMode', example='0'),
    status?: int32(name='Status', example='1'),
    streamInput?: {
      inputUrl?: string(name='InputUrl', example='rtmp://mydomain/app/stream1'),
      type?: string(name='Type', example='rtmp'),
    }(name='StreamInput'),
    templateId?: string(name='TemplateId', example='b6491d5b3e514b7d895d14b5453ea119'),
    templateName?: string(name='TemplateName', example='basic'),
    templateType?: string(name='TemplateType', example='normal'),
  }(name='Job'),
  requestId?: string(name='RequestId', description='请求ID', example='******3B-0E1A-586A-AC29-742247******'),
}

model GetLiveTranscodeJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetLiveTranscodeJobResponseBody(name='body'),
}

async function getLiveTranscodeJob(request: GetLiveTranscodeJobRequest): GetLiveTranscodeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveTranscodeJob', 'POST', '/', 'json', false, 'json', request);
}

model GetLiveTranscodeTemplateRequest {
  templateId: string(name='TemplateId', example='****a046-263c-3560-978a-fb287666****', position='Query'),
}

model GetLiveTranscodeTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID', example='******3B-0E1A-586A-AC29-742247******'),
  templateContent?: {
    category?: string(name='Category', example='customized'),
    createTime?: string(name='CreateTime', example='2022-07-25T06:15:14Z'),
    name?: string(name='Name', example='my-template'),
    templateConfig?: {
      audioParams?: {
        bitrate?: string(name='Bitrate', example='1000'),
        channels?: string(name='Channels', example='2'),
        codec?: string(name='Codec', example='AAC'),
        profile?: string(name='Profile', example='1'),
        samplerate?: string(name='Samplerate', example='44100'),
      }(name='AudioParams'),
      videoParams?: {
        bitrate?: string(name='Bitrate', example='2500'),
        codec?: string(name='Codec', example='H.264'),
        fps?: string(name='Fps', example='30'),
        gop?: string(name='Gop', example='1000'),
        height?: string(name='Height', example='720'),
        profile?: string(name='Profile', example='2'),
        width?: string(name='Width', example='1280'),
      }(name='VideoParams'),
    }(name='TemplateConfig'),
    templateId?: string(name='TemplateId', example='bcfa57950bc649b2abfb476ecd36ea4f'),
    type?: string(name='Type', example='normal'),
  }(name='TemplateContent'),
}

model GetLiveTranscodeTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetLiveTranscodeTemplateResponseBody(name='body'),
}

async function getLiveTranscodeTemplate(request: GetLiveTranscodeTemplateRequest): GetLiveTranscodeTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveTranscodeTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetMediaInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  inputURL?: string(name='InputURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4', position='Query'),
  mediaId?: string(name='MediaId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  outputType?: string(name='OutputType', example='cdn', position='Query'),
}

model GetMediaInfoResponseBody = {
  mediaInfo?: {
    aiRoughData?: {
      aiCategory?: string(name='AiCategory'),
      aiJobId?: string(name='AiJobId'),
      result?: string(name='Result'),
      saveType?: string(name='SaveType'),
      status?: string(name='Status'),
    }(name='AiRoughData'),
    fileInfoList?: [ 
      {
        audioStreamInfoList?: [ 
          {
            bitrate?: string(name='Bitrate', description='码率', example='127.794'),
            channelLayout?: string(name='ChannelLayout', description='声道输出样式', example='stereo'),
            channels?: string(name='Channels', description='声道数', example='2'),
            codecLongName?: string(name='CodecLongName', description='编码格式长述名', example='AAC (Advanced Audio Coding)'),
            codecName?: string(name='CodecName', description='编码格式简述名', example='aac'),
            codecTag?: string(name='CodecTag', description='编码格式标记', example='0x6134706d'),
            codecTagString?: string(name='CodecTagString', description='编码格式标记文本', example='mp4a'),
            codecTimeBase?: string(name='CodecTimeBase', description='编码时基', example='1/24000'),
            duration?: string(name='Duration', description='时长', example='16.200998'),
            fps?: string(name='Fps', description='音频帧率', example='8'),
            index?: string(name='Index', description='音频流序号', example='1'),
            lang?: string(name='Lang', description='语言', example='und'),
            numFrames?: string(name='NumFrames', description='总帧数', example='10'),
            profile?: string(name='Profile', description='编码预置', example='High'),
            sampleFmt?: string(name='SampleFmt', description='采样格式', example='fltp'),
            sampleRate?: string(name='SampleRate', description='采样率', example='44100'),
            startTime?: string(name='StartTime', description='起始时间', example='0.000000'),
            timebase?: string(name='Timebase', description='时基', example='1/44100'),
          }
        ](name='AudioStreamInfoList', description='音频流信息，一个媒资可能有多条音频流'),
        fileBasicInfo?: {
          bitrate?: string(name='Bitrate', description='码率', example='1132.68'),
          createTime?: string(name='CreateTime', example='2020-12-26T04:11:08Z'),
          duration?: string(name='Duration', description='时长', example='216.206667'),
          fileName?: string(name='FileName', description='文件名', example='example.mp4'),
          fileSize?: string(name='FileSize', description='文件大小（字节）', example='30611502'),
          fileStatus?: string(name='FileStatus', description='文件状态', example='Normal'),
          fileType?: string(name='FileType', description='文件类型', example='source_file'),
          fileUrl?: string(name='FileUrl', description='文件oss地址', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
          formatName?: string(name='FormatName', description='封装格式', example='mov,mp4,m4a,3gp,3g2,mj2'),
          height?: string(name='Height', description='高', example='540'),
          modifiedTime?: string(name='ModifiedTime', example='2020-12-26T04:11:10Z'),
          region?: string(name='Region', description='文件存储区域', example='cn-shanghai'),
          width?: string(name='Width', description='宽', example='960'),
        }(name='FileBasicInfo', description='文件基础信息，包含时长，大小等'),
        subtitleStreamInfoList?: [ 
          {
            codecLongName?: string(name='CodecLongName', description='编码格式长述名', example='SubRip Text'),
            codecName?: string(name='CodecName', description='编码格式简述名', example='srt'),
            codecTag?: string(name='CodecTag', description='编码格式标记', example='unicode'),
            codecTagString?: string(name='CodecTagString', description='编码格式标记文本', example='unicode'),
            codecTimeBase?: string(name='CodecTimeBase', description='编码时基', example='29.97'),
            duration?: string(name='Duration', description='时长', example='1'),
            index?: string(name='Index', description='音频流序号', example='1'),
            lang?: string(name='Lang', description='语言', example='und'),
            startTime?: string(name='StartTime', description='起始时间', example='0'),
            timebase?: string(name='Timebase', description='时基', example='30'),
          }
        ](name='SubtitleStreamInfoList', description='字幕流信息，一个媒资可能有多条字幕流'),
        videoStreamInfoList?: [ 
          {
            avgFPS?: string(name='AvgFPS', description='平均帧率', example='24.0'),
            bitrate?: string(name='Bitrate', description='码率', example='1001.594'),
            codecLongName?: string(name='CodecLongName', description='编码格式长述名', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
            codecName?: string(name='CodecName', description='编码格式简述名', example='h264'),
            codecTag?: string(name='CodecTag', description='编码格式标记', example='0x0000'),
            codecTagString?: string(name='CodecTagString', description='编码格式标记文本', example='[0][0][0][0]'),
            codecTimeBase?: string(name='CodecTimeBase', description='编码时基', example='1/48'),
            dar?: string(name='Dar', description='编码显示分辨率比', example='0:1'),
            duration?: string(name='Duration', description='时长', example='216.206706'),
            fps?: string(name='Fps', description='视频帧率', example='24.0'),
            hasBFrames?: string(name='HasBFrames', description='是否有B帧', example='2'),
            height?: string(name='Height', description='高', example='540'),
            index?: string(name='Index', description='视频流序号', example='0'),
            lang?: string(name='Lang', description='语言', example='und'),
            level?: string(name='Level', description='编码等级', example='30'),
            nbFrames?: string(name='Nb_frames', description='总帧数', example='5184'),
            numFrames?: string(name='NumFrames', description='总帧数', example='5184'),
            pixFmt?: string(name='PixFmt', description='像素格式', example='yuv420p'),
            profile?: string(name='Profile', description='编码预置', example='High'),
            rotate?: string(name='Rotate', description='旋转', example='0'),
            sar?: string(name='Sar', description='编码信号分辨率比', example='0:1'),
            startTime?: string(name='StartTime', description='起始时间', example='0.081706'),
            timebase?: string(name='Timebase', description='时基', example='1/12288'),
            width?: string(name='Width', description='宽', example='960'),
          }
        ](name='VideoStreamInfoList', description='视频流信息，一个媒资可能有多条视频流'),
      }
    ](name='FileInfoList', description='FileInfos'),
    mediaBasicInfo?: {
      biz?: string(name='Biz', example='ICE'),
      businessType?: string(name='BusinessType', description='媒资业务类型', example='general'),
      cateId?: long(name='CateId', example='3048'),
      cateName?: string(name='CateName', example='cateName'),
      category?: string(name='Category', description='分类'),
      coverURL?: string(name='CoverURL', description='封面地址', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
      createTime?: string(name='CreateTime', description='媒资创建时间', example='2020-12-26T04:11:08Z'),
      deletedTime?: string(name='DeletedTime', description='媒资删除时间', example='2020-12-26T04:11:15Z'),
      description?: string(name='Description', description='内容描述'),
      inputURL?: string(name='InputURL', description='待注册的媒资在相应系统中的地址', example='https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4'),
      mediaId?: string(name='MediaId', description='MediaId', example='****20b48fb04483915d4f2cd8ac****'),
      mediaTags?: string(name='MediaTags', description='标签'),
      mediaType?: string(name='MediaType', description='媒资媒体类型', example='video'),
      modifiedTime?: string(name='ModifiedTime', description='媒资修改时间', example='2020-12-26T04:11:10Z'),
      referenceId?: string(name='ReferenceId', example='123-1234'),
      source?: string(name='Source', description='来源', example='oss'),
      spriteImages?: string(name='SpriteImages', description='雪碧图', example='[{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]'),
      status?: string(name='Status', description='资源状态', example='Normal'),
      title?: string(name='Title', description='标题'),
      uploadSource?: string(name='UploadSource', example='general'),
      userData?: string(name='UserData', description='用户数据', example='userDataTest'),
    }(name='MediaBasicInfo', description='BasicInfo'),
    mediaId?: string(name='MediaId', description='媒资ID', example='****20b48fb04483915d4f2cd8ac****'),
  }(name='MediaInfo'),
  requestId?: string(name='RequestId', description='RequestId', example='2FDE2411-DB8D-4A9A-875B-275798F14A5E'),
}

model GetMediaInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetMediaInfoResponseBody(name='body'),
}

async function getMediaInfo(request: GetMediaInfoRequest): GetMediaInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMediaInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetMediaInfoJobRequest {
  jobId?: string(name='JobId', description='任务 ID', example='ab4802364a2e49208c99efab82dfa8e8', position='Query'),
}

model GetMediaInfoJobResponseBody = {
  mediaInfoJob?: {
    async?: boolean(name='Async', description='是否异步处理', example='true'),
    finishTime?: string(name='FinishTime', description='任务完成时间', example='2022-01-12T08:49:41Z'),
    input?: {
      media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
      type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
    }(name='Input', description='任务输入'),
    jobId?: string(name='JobId', description='任务 id', example='ab4802364a2e49208c99efab82dfa8e8'),
    mediaInfoProperty?: {
      audioStreamInfoList?: [ 
        {
          bitrate?: string(name='Bitrate', description='码率。', example='0.f'),
          channelLayout?: string(name='ChannelLayout', description='声道布局。', example='stereo'),
          channels?: string(name='Channels', description='声道数。', example='2'),
          codecLongName?: string(name='CodecLongName', description='编码格式名。', example='AAC (Advanced Audio Coding)'),
          codecName?: string(name='CodecName', description='编码格式。', example='aac'),
          codecTag?: string(name='CodecTag', description='编码器标签。', example='0x000f'),
          codecTagString?: string(name='CodecTagString', description='编码器标签名。', example='[15][0][0][0]'),
          codecTimeBase?: string(name='CodecTimeBase', description='编码器时间基。', example='1/44100'),
          duration?: string(name='Duration', description='时长（单位: 秒）。', example='403.039989'),
          index?: string(name='Index', description='流序号。', example='1'),
          lang?: string(name='Lang', description='语言。', example='us'),
          sampleFmt?: string(name='SampleFmt', description='采样格式。', example='fltp'),
          sampleRate?: string(name='SampleRate', description='采样率（单位: Hz）。', example='44100'),
          startTime?: string(name='StartTime', description='开始时间。', example='1.473556'),
          timebase?: string(name='Timebase', description='时间基。', example='1/90000'),
        }
      ](name='AudioStreamInfoList', description='音频流信息'),
      fileBasicInfo?: {
        bitrate?: string(name='Bitrate', description='视频码率。', example='888.563'),
        duration?: string(name='Duration', description='视频时长（单位: 秒）。', example='403.039999'),
        fileName?: string(name='FileName', description='文件名。', example='file.m3u8'),
        fileSize?: string(name='FileSize', description='文件大小。单位：Byte。', example='31737'),
        fileStatus?: string(name='FileStatus', description='文件状态。', example='Normal'),
        fileType?: string(name='FileType', description='文件类型。取值: source_file, transcode_file', example='source_file'),
        fileUrl?: string(name='FileUrl', description='文件 URL。', example='http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8'),
        formatName?: string(name='FormatName', description='视频格式名称。', example='hls,applehttp'),
        height?: string(name='Height', description='高。', example='478'),
        mediaId?: string(name='MediaId', description='媒资 ID。', example='e520090207114cc7a392d44f0b211574'),
        region?: string(name='Region', description='文件所在区域。', example='cn-shanghai'),
        width?: string(name='Width', description='宽。', example='848'),
      }(name='FileBasicInfo', description='基础文件信息'),
      videoStreamInfoList?: [ 
        {
          avgFps?: string(name='Avg_fps', description='平均帧率。', example='25.0'),
          bitRate?: string(name='Bit_rate', description='码率。', example='888.563'),
          codecLongName?: string(name='Codec_long_name', description='编码格式名。', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
          codecName?: string(name='Codec_name', description='编码格式。', example='h264'),
          codecTag?: string(name='Codec_tag', description='编码格式标记。', example='0x001b'),
          codecTagString?: string(name='Codec_tag_string', description='编码格式标记文本。', example='[27][0][0][0]'),
          codecTimeBase?: string(name='Codec_time_base', example='1/50'),
          dar?: string(name='Dar', description='图像显示宽高比。', example='16:9'),
          duration?: string(name='Duration', description='时长（单位: 秒）。', example='403.039989'),
          fps?: string(name='Fps', description='帧率。', example='25.0'),
          hasBFrames?: string(name='Has_b_frames', description='是否有B帧。
取值: 
- 0: 没有 B 帧, 
- 1: 有一个 B 帧, 
- 2: 有多个连续 B 帧。', example='2'),
          height?: string(name='Height', description='高。', example='478'),
          index?: string(name='Index', description='流序号。', example='0'),
          lang?: string(name='Lang', description='语言。', example='zh'),
          level?: string(name='Level', description='编码等级。', example='31'),
          numFrames?: string(name='NumFrames', description='总帧数。', example='10040'),
          pixFmt?: string(name='PixFmt', description='颜色存储格式。', example='yuv420p'),
          profile?: string(name='Profile', description='编码器预设。', example='High'),
          rotate?: string(name='Rotate', description='视频画面旋转角度。
取值 0, 90, 180, 270。
默认值 0', example='0'),
          sar?: string(name='Sar', description='采集点数宽高比。', example='478:477'),
          startTime?: string(name='Start_time', description='起始时间。', example='1.473556'),
          timeBase?: string(name='Time_base', description='时基。', example='1/90000'),
          width?: string(name='Width', description='宽。', example='848'),
        }
      ](name='VideoStreamInfoList', description='视频流信息'),
    }(name='MediaInfoProperty', description='媒体信息详情'),
    name?: string(name='Name', description='任务名字', example='job-name'),
    requestId?: string(name='RequestId', description='请求 id', example='4879B9DE-E4B6-19DC-91F5-9D5F4DCE4168'),
    scheduleConfig?: {
      pipelineId?: string(name='PipelineId', description='管道 ID。', example='e37ebee5d98b4781897f6086e89f9c56'),
      priority?: int32(name='Priority', description='任务优先级。数字越大优先级越高，取值范围：1~10', example='5'),
    }(name='ScheduleConfig', description='调度信息'),
    status?: string(name='Status', description='任务状态 - Init: 已提交, Success: 成功, Fail: 失败', example='Init'),
    submitResultJson?: map[string]any(name='SubmitResultJson', description='任务提交信息'),
    submitTime?: string(name='SubmitTime', description='任务提交时间', example='2022-01-12T08:49:41Z'),
    triggerSource?: string(name='TriggerSource', description='任务来源 - API, WorkFlow, Console', example='API'),
    userData?: string(name='UserData', description='用户数据', example='user-data'),
  }(name='MediaInfoJob', description='MediaInfoJobDTO'),
  requestId?: string(name='RequestId', description='请求 id', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model GetMediaInfoJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetMediaInfoJobResponseBody(name='body'),
}

async function getMediaInfoJob(request: GetMediaInfoJobRequest): GetMediaInfoJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMediaInfoJob', 'POST', '/', 'json', false, 'json', request);
}

model GetMediaProducingJobRequest {
  jobId?: string(name='JobId', example='****cdb3e74639973036bc84****', position='Query'),
}

model GetMediaProducingJobResponseBody = {
  mediaProducingJob?: {
    clipsParam?: string(name='ClipsParam', example='{"VideoArray":["****05512043f49f697f7425****","****05512043f49f697f7425****","****05512043f49f697f7425****"]}'),
    code?: string(name='Code', example='ExceededMaximumValue'),
    completeTime?: string(name='CompleteTime', example='2020-12-23T13:33:52Z'),
    createTime?: string(name='CreateTime', example='2020-12-23T13:33:40Z'),
    duration?: float(name='Duration', example='30.500000'),
    jobId?: string(name='JobId', example='****cdb3e74639973036bc84****'),
    mediaId?: string(name='MediaId', example='****0cc6ba49eab379332c5b****'),
    mediaURL?: string(name='MediaURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example2.mp4'),
    message?: string(name='Message', example='The specified "Width_Height" has exceeded maximum value.'),
    modifiedTime?: string(name='ModifiedTime', example='2020-12-23T13:33:49Z'),
    projectId?: string(name='ProjectId', example='****fddd7748b58bf1d47e95****'),
    status?: string(name='Status', example='Failed'),
    templateId?: string(name='TemplateId', example='****6e76134d739cc3e85d3e****'),
    timeline?: string(name='Timeline', example='{"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****4d7cf14dc7b83b0e801c****"},{"MediaId":"****4d7cf14dc7b83b0e801c****"}]}]}'),
    vodMediaId?: string(name='VodMediaId', example='****332c5b0cc6ba49eab379****'),
  }(name='MediaProducingJob'),
  requestId?: string(name='RequestId', description='Id of the request', example='****83B7-7F87-4792-BFE9-63CD2137****'),
}

model GetMediaProducingJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetMediaProducingJobResponseBody(name='body'),
}

async function getMediaProducingJob(request: GetMediaProducingJobRequest): GetMediaProducingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMediaProducingJob', 'GET', '/', 'json', false, 'json', request);
}

model GetPackageJobRequest {
  jobId: string(name='JobId', description='任务 ID', example='ab4802364a2e49208c99efab82dfa8e8', position='Query'),
}

model GetPackageJobResponseBody = {
  packageJob?: {
    code?: string(name='Code', example='InvalidParameter'),
    createTime?: string(name='CreateTime', example='2022-09-08T11:34:05Z'),
    finishTime?: string(name='FinishTime', example='2022-09-08T11:44:05Z'),
    inputs?: [ 
      {
        input?: {
          media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
          type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
        }(name='Input', description='打包播放流文件信息'),
      }
    ](name='Inputs'),
    jobId?: string(name='JobId', example='ab4802364a2e49208c99efab82dfa8e8'),
    message?: string(name='Message', example='Resource content bad.'),
    modifiedTime?: string(name='ModifiedTime', example='2022-09-08T11:44:05Z'),
    name?: string(name='Name', example='job-name'),
    output?: {
      media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.m3u8'),
      type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
    }(name='Output'),
    outputUrl?: string(name='OutputUrl', example='http://bucket.oss-cn-shanghai.aliyuncs.com/output.m3u8'),
    pipelineId?: string(name='PipelineId', example='36f3fee40aa047c0b067d0fb85edc12b'),
    priority?: int32(name='Priority', example='6'),
    status?: string(name='Status', example='Init'),
    submitTime?: string(name='SubmitTime', example='2022-09-08T11:34:05Z'),
    triggerSource?: string(name='TriggerSource'),
    userData?: string(name='UserData', example='{"param": "value"}'),
  }(name='PackageJob', description='打包任务信息'),
  requestId?: string(name='RequestId', description='请求 id', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model GetPackageJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetPackageJobResponseBody(name='body'),
}

async function getPackageJob(request: GetPackageJobRequest): GetPackageJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPackageJob', 'POST', '/', 'json', false, 'json', request);
}

model GetPipelineRequest {
  pipelineId: string(name='PipelineId', description='管道ID', example='****96e8864746a0b6f3****', position='Query'),
}

model GetPipelineResponseBody = {
  pipeline?: {
    createTime?: string(name='CreateTime', description='模板创建时间', example='2022-07-12T16:17:54Z'),
    modifiedTime?: string(name='ModifiedTime', description='模板修改时间', example='2022-07-12T16:17:54Z'),
    name?: string(name='Name', description='管道名称', example='test-pipeline'),
    pipelineId?: string(name='PipelineId', description='管道Id', example='****20b48fb04483915d4f2cd8ac****'),
    priority?: int32(name='Priority', description='管道优先级', example='6'),
    speed?: string(name='Speed', description='管道类型', example='Standard'),
    status?: string(name='Status', description='管道状态', example='Active'),
  }(name='Pipeline', description='管道信息'),
  requestId?: string(name='RequestId', description='请求ID', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetPipelineResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineResponseBody(name='body'),
}

async function getPipeline(request: GetPipelineRequest): GetPipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPipeline', 'POST', '/', 'json', false, 'json', request);
}

model GetPlayInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  inputURL?: string(name='InputURL', position='Query'),
  mediaId?: string(name='MediaId', example='86434e152b7d4f20be480574439fe***', position='Query'),
}

model GetPlayInfoResponseBody = {
  mediaBase?: {
    coverURL?: string(name='CoverURL', example='https://***.oss-cn-shanghai.aliyuncs.com/cover/281c64d6-b5fb-4c57-97cd-84da56a8b151_large_cover_url.jpg'),
    creationTime?: string(name='CreationTime', example='2021-09-22T10:07:31+08:00'),
    mediaId?: string(name='MediaId', example='2eea77a61c7b4ddd95bec34a6f65b***'),
    mediaType?: string(name='MediaType', example='video'),
    status?: string(name='Status', example='Normal'),
    title?: string(name='Title', example='testTitle'),
  }(name='MediaBase'),
  playInfoList?: [ 
    {
      bitDepth?: int32(name='BitDepth', description='颜色位深', example='8'),
      bitrate?: string(name='Bitrate', example='20'),
      creationTime?: string(name='CreationTime', example='2022-05-10T02:28:49Z'),
      definition?: string(name='Definition', example='HD'),
      duration?: string(name='Duration', example='9.0464'),
      encrypt?: long(name='Encrypt', example='0'),
      encryptType?: string(name='EncryptType', example='AliyunVoDEncryption'),
      fileURL?: string(name='FileURL', example='http://outin-***.oss-cn-shanghai.aliyuncs.com/sv/43a68ee9-181809b6aba/43a68ee9-181809b6aba.mpeg'),
      format?: string(name='Format', example='mp4'),
      fps?: string(name='Fps', example='25'),
      HDRType?: string(name='HDRType', description='视频流HDR类型', example='HDR'),
      height?: long(name='Height', example='1080'),
      jobId?: string(name='JobId'),
      modificationTime?: string(name='ModificationTime', example='2022-05-13T11:39:41.714+08:00'),
      narrowBandType?: string(name='NarrowBandType', example='0'),
      playURL?: string(name='PlayURL', example='https://***.aliyuncdn.com/sv/756bee1-17f980f0945/756bee1-17f980f0945.mp4'),
      size?: long(name='Size', example='418112'),
      status?: string(name='Status', example='Normal'),
      streamTags?: string(name='StreamTags'),
      streamType?: string(name='StreamType', example='video'),
      transTemplateType?: string(name='TransTemplateType', example='Normal'),
      watermarkId?: string(name='WatermarkId', example='5bed88672b1e2520ead228935ed51***'),
      width?: long(name='Width', example='1024'),
    }
  ](name='PlayInfoList'),
  requestId?: string(name='RequestId', description='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetPlayInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetPlayInfoResponseBody(name='body'),
}

async function getPlayInfo(request: GetPlayInfoRequest): GetPlayInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPlayInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetPublicMediaInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaId?: string(name='MediaId', example='icepublic-****14e501538aeef0a3140176f6****', position='Query'),
}

model GetPublicMediaInfoResponseBody = {
  mediaInfo?: {
    dynamicMetaData?: {
      data?: string(name='Data', description='元数据json', example='{"AuditionUrl": "http://example-bucket.cdn.domain.com/example.mp4", "AuditionCount": 3}'),
      type?: string(name='Type', description='类型', example='system'),
    }(name='DynamicMetaData', description='公共媒资动态元数据'),
    fileInfoList?: [ 
      {
        audioStreamInfoList?: [ 
          {
            bitrate?: string(name='Bitrate', description='码率', example='192.0'),
            channelLayout?: string(name='ChannelLayout', description='声道输出样式', example='stereo'),
            channels?: string(name='Channels', description='声道数', example='2'),
            codecLongName?: string(name='CodecLongName', description='编码格式长述名', example='AAC (Advanced Audio Coding)'),
            codecName?: string(name='CodecName', description='编码格式简述名', example='aac'),
            codecTag?: string(name='CodecTag', description='编码格式标记', example='0x6134706d'),
            codecTagString?: string(name='CodecTagString', description='编码格式标记文本', example='mp4a'),
            codecTimeBase?: string(name='CodecTimeBase', description='编码时基', example='1/44100'),
            duration?: string(name='Duration', description='时长', example='16.2'),
            fps?: string(name='Fps', description='音频帧率', example='10'),
            index?: string(name='Index', description='音频流序号', example='1'),
            lang?: string(name='Lang', description='语言', example='und'),
            numFrames?: string(name='NumFrames', description='总帧数', example='162'),
            profile?: string(name='Profile', description='编码预置', example='High'),
            sampleFmt?: string(name='SampleFmt', description='采样格式', example='fltp'),
            sampleRate?: string(name='SampleRate', description='采样率', example='44100'),
            startTime?: string(name='StartTime', description='起始时间', example='0.000000'),
            timebase?: string(name='Timebase', description='时基', example='1/44100'),
          }
        ](name='AudioStreamInfoList', description='音频流信息，一个媒资可能有多条音频流'),
        fileBasicInfo?: {
          bitrate?: string(name='Bitrate', description='码率', example='192.0'),
          duration?: string(name='Duration', description='时长', example='16.2'),
          fileName?: string(name='FileName', description='文件名', example='example.mp4'),
          fileSize?: string(name='FileSize', description='文件大小（字节）', example='27007'),
          fileStatus?: string(name='FileStatus', description='文件状态', example='Normal'),
          fileType?: string(name='FileType', description='文件类型', example='source_file'),
          fileUrl?: string(name='FileUrl', description='文件oss地址', example='http://example-bucket.cdn.domain.com/example.mp4'),
          formatName?: string(name='FormatName', description='封装格式', example='mp4'),
          height?: string(name='Height', description='高', example='0'),
          region?: string(name='Region', description='文件存储区域', example='cn-shanghai'),
          width?: string(name='Width', description='宽', example='0'),
        }(name='FileBasicInfo', description='文件基础信息，包含时长，大小等'),
        subtitleStreamInfoList?: [ 
          {
            codecLongName?: string(name='CodecLongName', description='编码格式长述名', example='SubRip Text'),
            codecName?: string(name='CodecName', description='编码格式简述名', example='srt'),
            codecTag?: string(name='CodecTag', description='编码格式标记', example='unicode'),
            codecTagString?: string(name='CodecTagString', description='编码格式标记文本', example='unicode'),
            codecTimeBase?: string(name='CodecTimeBase', description='编码时基', example='29.97'),
            duration?: string(name='Duration', description='时长', example='1'),
            index?: string(name='Index', description='音频流序号', example='1'),
            lang?: string(name='Lang', description='语言', example='und'),
            startTime?: string(name='StartTime', description='起始时间', example='0'),
            timebase?: string(name='Timebase', description='时基', example='30'),
          }
        ](name='SubtitleStreamInfoList', description='字幕流信息，一个媒资可能有多条字幕流'),
        videoStreamInfoList?: [ 
          {
            avgFPS?: string(name='AvgFPS', description='平均帧率', example='24.0'),
            bitrate?: string(name='Bitrate', description='码率', example='1001.594'),
            codecLongName?: string(name='CodecLongName', description='编码格式长述名', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
            codecName?: string(name='CodecName', description='编码格式简述名', example='h264'),
            codecTag?: string(name='CodecTag', description='编码格式标记', example='0x0000'),
            codecTagString?: string(name='CodecTagString', description='编码格式标记文本', example='[0][0][0][0]'),
            codecTimeBase?: string(name='CodecTimeBase', description='编码时基', example='1/48'),
            dar?: string(name='Dar', description='编码显示分辨率比', example='0:1'),
            duration?: string(name='Duration', description='时长', example='216.206706'),
            fps?: string(name='Fps', description='视频帧率', example='24.0'),
            hasBFrames?: string(name='HasBFrames', description='是否有B帧', example='2'),
            height?: string(name='Height', description='高', example='540'),
            index?: string(name='Index', description='视频流序号', example='0'),
            lang?: string(name='Lang', description='语言', example='und'),
            level?: string(name='Level', description='编码等级', example='30'),
            nbFrames?: string(name='Nb_frames', description='总帧数', example='5184'),
            numFrames?: string(name='NumFrames', description='总帧数', example='5184'),
            pixFmt?: string(name='PixFmt', description='像素格式', example='yuv420p'),
            profile?: string(name='Profile', description='编码预置', example='High'),
            rotate?: string(name='Rotate', description='旋转', example='0'),
            sar?: string(name='Sar', description='编码信号分辨率比', example='0:1'),
            startTime?: string(name='StartTime', description='起始时间', example='0.081706'),
            timebase?: string(name='Timebase', description='时基', example='1/12288'),
            width?: string(name='Width', description='宽', example='960'),
          }
        ](name='VideoStreamInfoList', description='视频流信息，一个媒资可能有多条视频流'),
      }
    ](name='FileInfoList', description='FileInfos'),
    mediaBasicInfo?: {
      businessType?: string(name='BusinessType', description='媒资业务类型', example='general'),
      category?: string(name='Category', description='分类', example='category'),
      coverURL?: string(name='CoverURL', description='封面地址', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
      createTime?: string(name='CreateTime', description='媒资创建时间', example='2020-12-26T04:11:08Z'),
      deletedTime?: string(name='DeletedTime', description='媒资删除时间', example='2020-12-26T04:11:15Z'),
      description?: string(name='Description', description='内容描述', example='description'),
      mediaId?: string(name='MediaId', description='MediaId', example='icepublic-****14e501538aeef0a3140176f6****'),
      mediaTags?: string(name='MediaTags', description='标签'),
      mediaType?: string(name='MediaType', description='媒资媒体类型', example='video'),
      modifiedTime?: string(name='ModifiedTime', description='媒资修改时间', example='2020-12-26T04:11:10Z'),
      source?: string(name='Source', description='来源', example='oss'),
      spriteImages?: string(name='SpriteImages', description='雪碧图', example='[{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]'),
      status?: string(name='Status', description='资源状态', example='Normal'),
      title?: string(name='Title', description='标题', example='title'),
      userData?: string(name='UserData', description='用户数据', example='{"key":"value"}'),
    }(name='MediaBasicInfo', description='BasicInfo'),
    mediaId?: string(name='MediaId', description='媒资ID', example='icepublic-****14e501538aeef0a3140176f6****'),
  }(name='MediaInfo'),
  requestId?: string(name='RequestId', description='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetPublicMediaInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetPublicMediaInfoResponseBody(name='body'),
}

async function getPublicMediaInfo(request: GetPublicMediaInfoRequest): GetPublicMediaInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPublicMediaInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetSmartHandleJobRequest {
  jobId?: string(name='JobId', description='任务Id', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model GetSmartHandleJobResponseBody = {
  jobId?: string(name='JobId', description='任务Id', example='****20b48fb04483915d4f2cd8ac****'),
  output?: string(name='Output', description='任务结果', example='{}'),
  requestId?: string(name='RequestId', description='请求Id', example='******11-DB8D-4A9A-875B-275798******'),
  smartJobInfo?: {
    createTime?: string(name='CreateTime', description='创建时间', example='2020-12-26T04:11:10Z'),
    description?: string(name='Description', description='任务描述', example='测试描述'),
    inputConfig?: {
      inputFile?: string(name='InputFile', description='OSS地址 或 内容库素材ID', example='oss://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4 或 ******11-DB8D-4A9A-875B-275798******'),
    }(name='InputConfig', description='输入参数'),
    jobType?: string(name='JobType', description='任务类型', example='ASR'),
    modifiedTime?: string(name='ModifiedTime', description='修改时间', example='2020-12-26T04:11:10Z'),
    outputConfig?: {
      bucket?: string(name='Bucket', description='OSS Bucket', example='test-bucket'),
      object?: string(name='Object', description='OSS Object', example='test-object'),
    }(name='OutputConfig', description='输出配置'),
    title?: string(name='Title', description='任务标题', example='测试标题'),
    userId?: string(name='UserId', description='userid。', example='1974526429******'),
  }(name='SmartJobInfo', description='智能任务信息'),
  state?: string(name='State', description='任务状态', example='Finished'),
  userData?: string(name='UserData', description='用户自定义信息', example='{"user":"data"}'),
}

model GetSmartHandleJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetSmartHandleJobResponseBody(name='body'),
}

async function getSmartHandleJob(request: GetSmartHandleJobRequest): GetSmartHandleJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSmartHandleJob', 'GET', '/', 'json', false, 'json', request);
}

model GetSnapshotJobRequest {
  jobId: string(name='JobId', example='****d80e4e4044975745c14b****', position='Query'),
}

model GetSnapshotJobResponseBody = {
  requestId?: string(name='RequestId', description='请求ID', example='******11-DB8D-4A9A-875B-275798******'),
  snapshotJob?: {
    async?: boolean(name='Async', example='true'),
    code?: string(name='Code', example='ResourceNotFound'),
    count?: int32(name='Count', example='8'),
    createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
    finishTime?: string(name='FinishTime', example='2022-07-12T16:30:54Z'),
    input?: {
      media?: string(name='Media', example='oss://test-bucket/object.mp4'),
      ossFile?: {
        bucket?: string(name='Bucket', description='OSS Bucket', example='test-bucket'),
        location?: string(name='Location', description='OSS Location', example='oss-cn-shanghai'),
        object?: string(name='Object', description='OSS Object', example='object.mp4'),
      }(name='OssFile', description='输入类型为媒资ID时的OSS地址'),
      type?: string(name='Type', example='OSS'),
    }(name='Input'),
    jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
    message?: string(name='Message', example='The specified resource for "Pipeline" could not be found.'),
    modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:30:54Z'),
    name?: string(name='Name'),
    output?: {
      media?: string(name='Media', example='http://test-bucket.oss-cn-shanghai.aliyuncs.com/output-{Count}.jpg'),
      ossFile?: {
        bucket?: string(name='Bucket', description='OSS Bucket', example='test-bucket'),
        location?: string(name='Location', description='OSS Location', example='oss-cn-shanghai'),
        object?: string(name='Object', description='OSS Object', example='output-{Count}.jpg'),
      }(name='OssFile', description='输出类型为媒资ID时的OSS地址'),
      type?: string(name='Type', example='OSS'),
    }(name='Output'),
    pipelineId?: string(name='PipelineId', example='****d80e4e4044975745c14b****'),
    status?: string(name='Status', example='Success'),
    submitTime?: string(name='SubmitTime', example='2022-07-12T16:17:54Z'),
    templateConfig?: string(name='TemplateConfig', example='{"Type":"Normal","FrameType":"normal","Time":0,"Count":10}'),
    templateId?: string(name='TemplateId', example='****d80e4e4044975745c14b****'),
    triggerSource?: string(name='TriggerSource', example='API'),
    type?: string(name='Type', example='Sprite'),
    userData?: string(name='UserData', example='{"test parameter": "test value"}'),
  }(name='SnapshotJob', description='截图任务信息'),
}

model GetSnapshotJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetSnapshotJobResponseBody(name='body'),
}

async function getSnapshotJob(request: GetSnapshotJobRequest): GetSnapshotJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSnapshotJob', 'POST', '/', 'json', false, 'json', request);
}

model GetSnapshotUrlsRequest {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  orderBy?: string(name='OrderBy', description='排列顺序。取值：Asc，Desc', example='Asc', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  timeout?: long(name='Timeout', description='鉴权超时时间', example='3600', position='Query'),
}

model GetSnapshotUrlsResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  snapshotUrls?: [ string ](name='SnapshotUrls', description='截图URL'),
  total?: int32(name='Total', description='截图总数量', example='30'),
  webVTTUrl?: string(name='WebVTTUrl', description='WebVTT文件URL', example='http://test-bucket.oss-cn-shanghai.aliyuncs.com/ouoput.vtt'),
}

model GetSnapshotUrlsResponse = {
  headers: map[string]string(name='headers'),
  body: GetSnapshotUrlsResponseBody(name='body'),
}

async function getSnapshotUrls(request: GetSnapshotUrlsRequest): GetSnapshotUrlsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSnapshotUrls', 'POST', '/', 'json', false, 'json', request);
}

model GetSystemTemplateRequest {
  templateId: string(name='TemplateId', description='模板ID', example='S00000001-100060', position='Query'),
}

model GetSystemTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID', example='******11-DB8D-4A9A-875B-275798******'),
  systemTemplate?: {
    status?: string(name='Status', description='模板状态', example='Normal'),
    subtype?: int32(name='Subtype', description='模板子类型ID', example='1'),
    subtypeName?: string(name='SubtypeName', description='模板子类型名称', example='Normal'),
    templateConfig?: string(name='TemplateConfig', description='模板参数', example='{"Container":{"Format":"m3u8"},"TransConfig":{"TransMode":"onepass"},"Video":{"Codec":"H.264","Maxrate":8000,"Preset":"medium","PixFmt":"yuv420p","Width":2048,"Bitrate":3500},"Audio":{"Codec":"aac","Bitrate":160,"Samplerate":44100,"Channels":2}}'),
    templateId?: string(name='TemplateId', description='模板Id', example='S00000001-100060'),
    templateName?: string(name='TemplateName', description='模板名称', example='M3U8-2K'),
    type?: int32(name='Type', description='模板类型ID', example='1'),
    typeName?: string(name='TypeName', description='模板类型名称', example='TranscodeTemplate'),
  }(name='SystemTemplate', description='模板信息'),
}

model GetSystemTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetSystemTemplateResponseBody(name='body'),
}

async function getSystemTemplate(request: GetSystemTemplateRequest): GetSystemTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSystemTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetTemplateRequest {
  relatedMediaidFlag?: string(name='RelatedMediaidFlag', description='是否返回模板关联素材，1返回，默认0，不返回', example='0', position='Query'),
  templateId?: string(name='TemplateId', description='模板Id', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model GetTemplateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='******11-DB8D-4A9A-875B-275798******'),
  template?: {
    clipsParam?: string(name='ClipsParam', description='提交合成任务的ClipsParam参数', example='{"Media1":"mediaId","Text1":"text"}'),
    config?: string(name='Config', description='模板配置', example='参考Timeline模板配置详解'),
    coverURL?: string(name='CoverURL', description='封面URL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg'),
    createSource?: string(name='CreateSource', description='创建来源', example='OpenAPI'),
    creationTime?: string(name='CreationTime', description='创建时间', example='2020-12-26T04:11:10Z'),
    modifiedSource?: string(name='ModifiedSource', description='修改来源', example='OpenAPI'),
    modifiedTime?: string(name='ModifiedTime', description='修改时间', example='2020-12-26T04:11:10Z'),
    name?: string(name='Name', description='模板名称', example='视频添加水印模板'),
    previewMedia?: string(name='PreviewMedia', description='预览素材', example='****20b48fb04483915d4f2cd8ac****'),
    previewMediaStatus?: string(name='PreviewMediaStatus', description='预览素材状态', example='Normal'),
    relatedMediaids?: string(name='RelatedMediaids', description='模板关联素材', example='{"video":["******c04f1d4a06996144cc1a******"],"audio":["******c04f1d4a06996144cc1a******"],"image":["******c04f1d4a06996144cc1a******"]}'),
    status?: string(name='Status', description='模板状态', example='Available'),
    templateId?: string(name='TemplateId', description='模板ID', example='****20b48fb04483915d4f2cd8ac****'),
    type?: string(name='Type', description='模板类型', example='Timeline'),
  }(name='Template'),
}

model GetTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetTemplateResponseBody(name='body'),
}

async function getTemplate(request: GetTemplateRequest): GetTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetTemplateMaterialsRequest {
  fileList?: string(name='FileList', description='所需文件列表', example='["music.mp3","config.json","assets/1.jpg"]', position='Query'),
  templateId: string(name='TemplateId', description='模板Id', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model GetTemplateMaterialsResponseBody = {
  materialUrls?: string(name='MaterialUrls', description='关联素材地址', example='{"music.mp3":"https://bucket.oss-cn-shanghai.aliyuncs.com/music.mp3?sign=xxx","config.json":"https://bucket.oss-cn-shanghai.aliyuncs.com/config.json?sign=xxx","assets/1.jpg":"https://bucket.oss-cn-shanghai.aliyuncs.com/assets/1.jpg?sign=xxx"}'),
  requestId?: string(name='RequestId', description='Id of the request', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetTemplateMaterialsResponse = {
  headers: map[string]string(name='headers'),
  body: GetTemplateMaterialsResponseBody(name='body'),
}

async function getTemplateMaterials(request: GetTemplateMaterialsRequest): GetTemplateMaterialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTemplateMaterials', 'POST', '/', 'json', false, 'json', request);
}

model GetTranscodeJobRequest {
  parentJobId?: string(name='ParentJobId', description='任务 ID', example='ab4802364a2e49208c99efab82dfa8e8', position='Query'),
}

model GetTranscodeJobResponseBody = {
  requestId?: string(name='RequestId', description='请求 id', example='9EDC30DC-0050-5459-B788-F761B2BE359B'),
  transcodeParentJob?: {
    createTime?: string(name='CreateTime', description='任务创建时间。格式为: yyyy-MM-ddTHH:mm:ssZ 。', example='2022-01-12T08:49:41Z'),
    finishTime?: string(name='FinishTime', description='任务结束时间。格式为: yyyy-MM-ddTHH:mm:ssZ 。', example='2022-01-12T08:49:41Z'),
    inputGroup?: [ 
      {
        media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
        type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
      }
    ](name='InputGroup', description='任务输入组。单输入时为转码任务，多输入时为合流任务。'),
    jobCount?: int32(name='JobCount', description='子任务数量。', example='1'),
    name?: string(name='Name', description='任务名。', example='transcode-job'),
    outputGroup?: [ 
      {
        output?: {
          media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
          outputUrl?: string(name='OutputUrl'),
          type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
        }(name='Output', description='输出媒体配置'),
        processConfig?: {
          combineConfigs?: [ 
            {
              audioIndex: string(name='AudioIndex', description='音频流Index', example='0 或 exclude'),
              duration?: double(name='Duration', description='输入流的持续时间。 默认为视频时长。', example='20.0'),
              start?: double(name='Start', description='输入流的开始时间。 默认为0', example='0.0'),
              videoIndex: string(name='VideoIndex', description='视频流Index', example='0 或 exclude'),
            }
          ](name='CombineConfigs', description='多输入合流配置'),
          encryption?: {
            cipherText?: string(name='CipherText', description='标准加密的密钥密文。', example='MTYi00NDU0LTg5O****'),
            decryptKeyUri?: string(name='DecryptKeyUri', description='标准加密的解密服务地址。', example='https://sample.com/path?CipherText=MTYi00NDU0LTg5O****'),
            encryptType?: string(name='EncryptType', description='加密类型。', example='PrivateEncryption'),
          }(name='Encryption', description='加密配置。'),
          imageWatermarks?: [ 
            {
              overwriteParams?: {
                dx?: string(name='Dx', description='水印位置，x', example='10'),
                dy?: string(name='Dy', description='水印位置，y', example='10'),
                file?: {
                  media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
                }(name='File', description='水印图片文件'),
                height?: string(name='Height', description='高', example='32'),
                referPos?: string(name='ReferPos', description='参考位置: TopLeft, TopRight, BottomLeft, BottomRight  default: TopLeft', example='TopLeft'),
                timeline?: {
                  duration?: string(name='Duration', description='显示时长，秒数 或者 "ToEND"', example='ToEND'),
                  start?: string(name='Start', description='开始时间', example='00:00:05'),
                }(name='Timeline', description='显示时间设置'),
                width?: string(name='Width', description='宽', example='32'),
              }(name='OverwriteParams', description='覆盖参数, 若填写会覆盖模板对应参数'),
              templateId?: string(name='TemplateId', description='模板 ID。', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='ImageWatermarks', description='图片水印配置'),
          subtitles?: [ 
            {
              overwriteParams?: {
                charEnc?: string(name='CharEnc', description='文件 encoding 格式', example='UTF-8'),
                file?: {
                  media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
                }(name='File', description='字幕文件'),
                format?: string(name='Format', description='字幕文件格式', example='vtt'),
              }(name='OverwriteParams', description='覆盖参数, 若填写会覆盖模板对应参数'),
              templateId?: string(name='TemplateId', description='模板 ID。', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='Subtitles', description='字幕压制配置'),
          textWatermarks?: [ 
            {
              overwriteParams?: {
                adaptive?: string(name='Adaptive', description='根据输出视频大小调整字体 size。 true / false, default: false', example='false'),
                borderColor?: string(name='BorderColor', description='边框颜色', example='#006400'),
                borderWidth?: int32(name='BorderWidth', description='边框宽度', example='0'),
                content?: string(name='Content', description='水印文本，不需要 base64 encode，字符串需要 utf-8 编码', example='测试水印'),
                fontAlpha?: string(name='FontAlpha', description='透明度', example='1.0'),
                fontColor?: string(name='FontColor', description='颜色', example='#006400'),
                fontName?: string(name='FontName', description='字体', example='SimSun'),
                fontSize?: int32(name='FontSize', description='字体大小', example='16'),
                left?: string(name='Left', description='水印位置，距离左边距离', example='10'),
                top?: string(name='Top', description='水印位置，距离上边距离', example='10'),
              }(name='OverwriteParams', description='覆盖参数, 若填写会覆盖模板对应参数'),
              templateId?: string(name='TemplateId', description='模板 ID。', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='TextWatermarks', description='文字水印配置'),
          transcode?: {
            overwriteParams?: {
              audio?: {
                bitrate?: string(name='Bitrate', description='输出文件的音频码率。
         值范围：[8，1000]
         单位：Kbps
         默认值：128', example='128'),
                channels?: string(name='Channels', description='声道数。
         默认值：2', example='2'),
                codec?: string(name='Codec', description='音频编解码格式，AAC、MP3、VORBIS、FLAC。
         默认值：AAC', example='AAC'),
                profile?: string(name='Profile', description='音频编码预置。
         当Codec为 AAC时，范围aac_low、aac_he、aac_he_v2、aac_ld、aac_eld。', example='aac_low'),
                remove?: string(name='Remove', description='是否删除音频流。', example='false'),
                samplerate?: string(name='Samplerate', description='采样率。
         默认值：44100
         支持22050、32000、44100、48000、96000，
         单位：Hz', example='44100'),
                volume?: {
                  integratedLoudnessTarget?: string(name='IntegratedLoudnessTarget', description='目标音量', example='-6'),
                  loudnessRangeTarget?: string(name='LoudnessRangeTarget', description='音量范围', example='8'),
                  method?: string(name='Method', description='音量调整方式', example='auto'),
                  truePeak?: string(name='TruePeak', description='最大峰值', example='-1'),
                }(name='Volume', description='音量控制'),
              }(name='Audio', description='audio 设置'),
              container?: {
                format?: string(name='Format', description='容器格式', example='mp4'),
              }(name='Container', description='封装格式设置'),
              muxConfig?: {
                segment?: {
                  duration?: string(name='Duration', description='切片时长', example='10'),
                  forceSegTime?: string(name='ForceSegTime', description='强制切片时间点', example='2,3'),
                }(name='Segment', description='切片设置'),
              }(name='MuxConfig', description='封装设置'),
              video?: {
                abrMax?: string(name='AbrMax', description='abr 最大码率(只有窄高1有效)
值范围[10，50000]，单位Kbps。', example='6000'),
                bitrate?: string(name='Bitrate', description='视频平均码率。
         取值范围：[10，50000]。
         单位：Kbps。', example='3000'),
                bufsize?: string(name='Bufsize', description='缓冲区大小
          值范围：[1000，128000]
          默认值：6000
          单位：Kb', example='6000'),
                codec?: string(name='Codec', description='编码格式', example='H.264'),
                crf?: string(name='Crf', description='码率-质量控制因子。
         取值范围：[0，51]。
         默认值：编码格式为H264，默认值为23。编码格式为H265，默认值为26。
         如果设置了Crf，则Bitrate的设置失效。', example='23'),
                crop?: string(name='Crop', description='视频画面裁切
         支持2种方式。
         自动检测黑边并裁切，设置为“border”
         自定义裁切，参数格式：width:height:left:top。
         示例：1280:800:0:140', example='1280:800:0:140'),
                fps?: string(name='Fps', description='帧率。
         取值范围：(0,60]。
         当输入文件帧率超过60时取60。
         默认值：取输入文件帧率', example='25'),
                gop?: string(name='Gop', description='关键帧间最大帧数。
         取值范围：[1，1080000]。
         默认值：250。', example='250'),
                height?: string(name='Height', description='高。
         取值范围：[128,4096]。
         单位：px。
         默认值：视频原始高度。', example='1080'),
                longShortMode?: string(name='LongShortMode', description='是否开启横竖屏自适应（即：长短边模式）', example='false'),
                maxrate?: string(name='Maxrate', description='视频码率峰值
         值范围[10，50000]，单位Kbps。', example='9000'),
                pad?: string(name='Pad', description='视频贴黑边
         参数格式：width:height:left:top。
         示例：1280:800:0:140', example='1280:800:0:140'),
                pixFmt?: string(name='PixFmt', description='视频颜色格式。
         范围：yuv420p，yuvj420p等标准颜色格式。', example='yuv420p'),
                preset?: string(name='Preset', description='视频算法器预置。只有H264支持该参数。
支持veryfast、fast、medium、slow、slower。
默认值：medium。', example='medium'),
                profile?: string(name='Profile', description='编码级别。
         支持baseline、main、high。
         baseline：针对移动设备。
         main：针对标准分辨率设备。
         high：针对高分辨率设备。
         默认值：high。', example='Main'),
                remove?: string(name='Remove', description='是否去掉视频', example='false'),
                scanMode?: string(name='ScanMode', description='扫描模式。
支持interlaced、progressive。', example='progressive'),
                width?: string(name='Width', description='宽。
         取值范围：[128,4096]。
         单位：px。
         默认值：视频原始宽度。', example='1920'),
              }(name='Video', description='video 设置'),
            }(name='OverwriteParams', description='覆盖参数, 若填写会覆盖模板对应参数'),
            templateId?: string(name='TemplateId', description='模板 ID。', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }(name='Transcode', description='转码配置'),
        }(name='ProcessConfig', description='任务处理配置'),
      }
    ](name='OutputGroup', description='任务输出组。'),
    parentJobId?: string(name='ParentJobId', description='主任务 ID。', example='8b2198504dd340b7b3c9842a74fc9baa'),
    percent?: int32(name='Percent', description='任务完成百分比。', example='0'),
    requestId?: string(name='RequestId', description='提交任务时请求 ID。', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
    scheduleConfig?: {
      pipelineId?: string(name='PipelineId', description='管道 ID。', example='e37ebee5d98b4781897f6086e89f9c56'),
      priority?: int32(name='Priority', description='任务优先级。数字越大优先级越高，取值范围：1~10', example='5'),
    }(name='ScheduleConfig', description='任务调度配置。'),
    status?: string(name='Status', description='任务状态。 Success: 所有子任务完成后，有一个子任务则为成功, Fail: 所有子任务失败', example='Success'),
    submitTime?: string(name='SubmitTime', description='任务提交时间。格式为: yyyy-MM-ddTHH:mm:ssZ 。', example='2022-01-12T08:49:41Z'),
    transcodeJobList?: [ 
      {
        createTime?: string(name='CreateTime', description='任务创建时间', example='2022-01-12T08:49:41Z'),
        finishTime?: string(name='FinishTime', description='任务结束时间', example='2022-01-12T08:49:41Z'),
        inputGroup?: [ 
          {
            inputUrl?: string(name='InputUrl'),
            media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
            type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
          }
        ](name='InputGroup', description='任务输入组。单输入时为转码任务，多输入时为合流任务。'),
        jobId?: string(name='JobId', description='子任务 ID', example='7d6a7e0d4db2457a8d45ff5d43e1bf0a'),
        jobIndex?: int32(name='JobIndex', description='子任务在整个任务中的索引号', example='0'),
        name?: string(name='Name', description='任务名', example='transcode-job'),
        outFileMeta?: {
          audioStreamInfoList?: [ 
            {
              bitrate?: string(name='Bitrate', description='码率。', example='0.f'),
              channelLayout?: string(name='ChannelLayout', description='声道布局。', example='stereo'),
              channels?: string(name='Channels', description='声道数。', example='2'),
              codecLongName?: string(name='CodecLongName', description='编码格式名。', example='AAC (Advanced Audio Coding)'),
              codecName?: string(name='CodecName', description='编码格式。', example='aac'),
              codecTag?: string(name='CodecTag', description='编码器标签。', example='0x000f'),
              codecTagString?: string(name='CodecTagString', description='编码器标签名。', example='[15][0][0][0]'),
              codecTimeBase?: string(name='CodecTimeBase', description='编码器时间基。', example='1/44100'),
              duration?: string(name='Duration', description='时长（单位: 秒）。', example='403.039989'),
              index?: string(name='Index', description='流序号。', example='1'),
              lang?: string(name='Lang', description='语言。', example='cn'),
              sampleFmt?: string(name='SampleFmt', description='采样格式。', example='fltp'),
              sampleRate?: string(name='SampleRate', description='采样率（单位: Hz）。', example='44100'),
              startTime?: string(name='StartTime', description='开始时间。', example='1.473556'),
              timebase?: string(name='Timebase', description='时间基。', example='1/90000'),
            }
          ](name='AudioStreamInfoList', description='音频流信息'),
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', description='视频码率。', example='888.563'),
            duration?: string(name='Duration', description='视频时长（单位: 秒）。', example='403.039999'),
            fileName?: string(name='FileName', description='文件名。', example='file.m3u8'),
            fileSize?: string(name='FileSize', description='文件大小。单位：Byte。', example='31737'),
            fileStatus?: string(name='FileStatus', description='文件状态。', example='Normal'),
            fileType?: string(name='FileType', description='文件类型。取值: source_file, transcode_file', example='source_file'),
            fileUrl?: string(name='FileUrl', description='文件 URL。', example='http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8'),
            formatName?: string(name='FormatName', description='视频格式名称。', example='hls,applehttp'),
            height?: string(name='Height', description='高。', example='478'),
            mediaId?: string(name='MediaId', description='媒资 ID。', example='486c2890096871edba6f81848c016303'),
            region?: string(name='Region', description='文件所在区域。', example='cn-shanghai'),
            width?: string(name='Width', description='宽。', example='848'),
          }(name='FileBasicInfo', description='基础文件信息'),
          videoStreamInfoList?: [ 
            {
              avgFps?: string(name='Avg_fps', description='平均帧率。', example='25.0'),
              bitRate?: string(name='Bit_rate', description='码率。', example='888.563'),
              codecLongName?: string(name='Codec_long_name', description='编码格式名。', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
              codecName?: string(name='Codec_name', description='编码格式。', example='h264'),
              codecTag?: string(name='Codec_tag', description='编码格式标记。', example='0x001b'),
              codecTagString?: string(name='Codec_tag_string', description='编码格式标记文本。', example='[27][0][0][0]'),
              codecTimeBase?: string(name='Codec_time_base', example='1/50'),
              dar?: string(name='Dar', description='图像显示宽高比。', example='16:9'),
              duration?: string(name='Duration', description='时长（单位: 秒）。', example='403.039989'),
              fps?: string(name='Fps', description='帧率。', example='25.0'),
              hasBFrames?: string(name='Has_b_frames', description='是否有B帧。
取值: 
- 0: 没有 B 帧, 
- 1: 有一个 B 帧, 
- 2: 有多个连续 B 帧。', example='2'),
              height?: string(name='Height', description='高。', example='478'),
              index?: string(name='Index', description='流序号。', example='0'),
              lang?: string(name='Lang', description='语言。', example='cn'),
              level?: string(name='Level', description='编码等级。', example='31'),
              numFrames?: string(name='NumFrames', description='总帧数。', example='10040'),
              pixFmt?: string(name='PixFmt', description='颜色存储格式。', example='yuv420p'),
              profile?: string(name='Profile', description='编码器预设。', example='High'),
              rotate?: string(name='Rotate', description='视频画面旋转角度。
取值 0, 90, 180, 270。
默认值 0', example='0'),
              sar?: string(name='Sar', description='采集点数宽高比。', example='478:477'),
              startTime?: string(name='Start_time', description='起始时间。', example='1.473556'),
              timeBase?: string(name='Time_base', description='时基。', example='1/90000'),
              width?: string(name='Width', description='宽。', example='848'),
            }
          ](name='VideoStreamInfoList', description='视频流信息'),
        }(name='OutFileMeta', description='任务生成视频 Media 信息'),
        output?: {
          media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
          outputUrl?: string(name='OutputUrl'),
          type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
        }(name='Output', description='输出媒体配置'),
        parentJobId?: string(name='ParentJobId', description='主任务 ID', example='8b2198504dd340b7b3c9842a74fc9baa'),
        processConfig?: {
          combineConfigs?: [ 
            {
              audioIndex: string(name='AudioIndex', description='音频流Index', example='0 或 exclude'),
              duration?: double(name='Duration', description='输入流的持续时间。 默认为视频时长。', example='20.0'),
              start?: double(name='Start', description='输入流的开始时间。 默认为0', example='0.0'),
              videoIndex: string(name='VideoIndex', description='视频流Index', example='0 或 exclude'),
            }
          ](name='CombineConfigs', description='多输入合流配置'),
          encryption?: {
            cipherText?: string(name='CipherText', description='标准加密的密钥密文。', example='MTYi00NDU0LTg5O****'),
            decryptKeyUri?: string(name='DecryptKeyUri', description='标准加密的解密服务地址。', example='https://sample.com/path?CipherText=MTYi00NDU0LTg5O****'),
            encryptType?: string(name='EncryptType', description='加密类型。', example='PrivateEncryption'),
          }(name='Encryption', description='加密配置。'),
          imageWatermarks?: [ 
            {
              overwriteParams?: {
                dx?: string(name='Dx', description='水印位置，x', example='10'),
                dy?: string(name='Dy', description='水印位置，y', example='10'),
                file?: {
                  media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
                }(name='File', description='水印图片文件'),
                height?: string(name='Height', description='高', example='32'),
                referPos?: string(name='ReferPos', description='参考位置: TopLeft, TopRight, BottomLeft, BottomRight  default: TopLeft', example='TopLeft'),
                timeline?: {
                  duration?: string(name='Duration', description='显示时长，秒数 或者 "ToEND"', example='ToEND'),
                  start?: string(name='Start', description='开始时间', example='00:00:05'),
                }(name='Timeline', description='显示时间设置'),
                width?: string(name='Width', description='宽', example='32'),
              }(name='OverwriteParams', description='覆盖参数, 若填写会覆盖模板对应参数'),
              templateId?: string(name='TemplateId', description='模板 ID。', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='ImageWatermarks', description='图片水印配置'),
          isInheritTags?: boolean(name='IsInheritTags'),
          subtitles?: [ 
            {
              overwriteParams?: {
                charEnc?: string(name='CharEnc', description='文件 encoding 格式', example='UTF-8'),
                file?: {
                  media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
                }(name='File', description='字幕文件'),
                format?: string(name='Format', description='字幕文件格式', example='vtt'),
              }(name='OverwriteParams', description='覆盖参数, 若填写会覆盖模板对应参数'),
              templateId?: string(name='TemplateId', description='模板 ID。', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='Subtitles', description='字幕压制配置'),
          textWatermarks?: [ 
            {
              overwriteParams?: {
                adaptive?: string(name='Adaptive', description='根据输出视频大小调整字体 size。 true / false, default: false', example='false'),
                borderColor?: string(name='BorderColor', description='边框颜色', example='#006400'),
                borderWidth?: int32(name='BorderWidth', description='边框宽度', example='0'),
                content?: string(name='Content', description='水印文本，不需要 base64 encode，字符串需要 utf-8 编码', example='测试水印'),
                fontAlpha?: string(name='FontAlpha', description='透明度', example='1.0'),
                fontColor?: string(name='FontColor', description='颜色', example='#006400'),
                fontName?: string(name='FontName', description='字体', example='SimSun'),
                fontSize?: int32(name='FontSize', description='字体大小', example='16'),
                left?: string(name='Left', description='水印位置，距离左边距离', example='10'),
                top?: string(name='Top', description='水印位置，距离上边距离', example='10'),
              }(name='OverwriteParams', description='覆盖参数, 若填写会覆盖模板对应参数'),
              templateId?: string(name='TemplateId', description='模板 ID。', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='TextWatermarks', description='文字水印配置'),
          transcode?: {
            overwriteParams?: {
              audio?: {
                bitrate?: string(name='Bitrate', description='输出文件的音频码率。
         值范围：[8，1000]
         单位：Kbps
         默认值：128', example='128'),
                channels?: string(name='Channels', description='声道数。
         默认值：2', example='2'),
                codec?: string(name='Codec', description='音频编解码格式，AAC、MP3、VORBIS、FLAC。
         默认值：AAC', example='AAC'),
                profile?: string(name='Profile', description='音频编码预置。
         当Codec为 AAC时，范围aac_low、aac_he、aac_he_v2、aac_ld、aac_eld。', example='aac_low'),
                remove?: string(name='Remove', description='是否删除音频流。', example='false'),
                samplerate?: string(name='Samplerate', description='采样率。
         默认值：44100
         支持22050、32000、44100、48000、96000，
         单位：Hz', example='44100'),
                volume?: {
                  integratedLoudnessTarget?: string(name='IntegratedLoudnessTarget', description='目标音量', example='-6'),
                  loudnessRangeTarget?: string(name='LoudnessRangeTarget', description='音量范围', example='8'),
                  method?: string(name='Method', description='音量调整方式', example='auto'),
                  truePeak?: string(name='TruePeak', description='最大峰值', example='-1'),
                }(name='Volume', description='音量控制'),
              }(name='Audio', description='audio 设置'),
              container?: {
                format?: string(name='Format', description='容器格式', example='mp4'),
              }(name='Container', description='封装格式设置'),
              muxConfig?: {
                segment?: {
                  duration?: string(name='Duration', description='切片时长', example='10'),
                  forceSegTime?: string(name='ForceSegTime', description='强制切片时间点', example='2,3'),
                }(name='Segment', description='切片设置'),
              }(name='MuxConfig', description='封装设置'),
              tags?: map[string]string(name='Tags'),
              video?: {
                abrMax?: string(name='AbrMax', description='abr 最大码率(只有窄高1有效)
值范围[10，50000]，单位Kbps。', example='6000'),
                bitrate?: string(name='Bitrate', description='视频平均码率。
         取值范围：[10，50000]。
         单位：Kbps。', example='3000'),
                bufsize?: string(name='Bufsize', description='缓冲区大小
          值范围：[1000，128000]
          默认值：6000
          单位：Kb', example='6000'),
                codec?: string(name='Codec', description='编码格式', example='H.264'),
                crf?: string(name='Crf', description='码率-质量控制因子。
         取值范围：[0，51]。
         默认值：编码格式为H264，默认值为23。编码格式为H265，默认值为26。
         如果设置了Crf，则Bitrate的设置失效。', example='23'),
                crop?: string(name='Crop', description='视频画面裁切
         支持2种方式。
         自动检测黑边并裁切，设置为“border”
         自定义裁切，参数格式：width:height:left:top。
         示例：1280:800:0:140', example='1280:800:0:140'),
                fps?: string(name='Fps', description='帧率。
         取值范围：(0,60]。
         当输入文件帧率超过60时取60。
         默认值：取输入文件帧率', example='25'),
                gop?: string(name='Gop', description='关键帧间最大帧数。
         取值范围：[1，1080000]。
         默认值：250。', example='250'),
                height?: string(name='Height', description='高。
         取值范围：[128,4096]。
         单位：px。
         默认值：视频原始高度。', example='1080'),
                longShortMode?: string(name='LongShortMode', description='是否开启横竖屏自适应（即：长短边模式）', example='false'),
                maxrate?: string(name='Maxrate', description='视频码率峰值
         值范围[10，50000]，单位Kbps。', example='9000'),
                pad?: string(name='Pad', description='视频贴黑边
         参数格式：width:height:left:top。
         示例：1280:800:0:140', example='1280:800:0:140'),
                pixFmt?: string(name='PixFmt', description='视频颜色格式。
         范围：yuv420p，yuvj420p等标准颜色格式。', example='yuv420p'),
                preset?: string(name='Preset', description='视频算法器预置。只有H264支持该参数。
支持veryfast、fast、medium、slow、slower。
默认值：medium。', example='medium'),
                profile?: string(name='Profile', description='编码级别。
         支持baseline、main、high。
         baseline：针对移动设备。
         main：针对标准分辨率设备。
         high：针对高分辨率设备。
         默认值：high。', example='Main'),
                remove?: string(name='Remove', description='是否去掉视频', example='false'),
                scanMode?: string(name='ScanMode', description='扫描模式。
支持interlaced、progressive。', example='progressive'),
                width?: string(name='Width', description='宽。
         取值范围：[128,4096]。
         单位：px。
         默认值：视频原始宽度。', example='1920'),
              }(name='Video', description='video 设置'),
            }(name='OverwriteParams', description='覆盖参数, 若填写会覆盖模板对应参数'),
            templateId?: string(name='TemplateId', description='模板 ID。', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }(name='Transcode', description='转码配置'),
        }(name='ProcessConfig', description='转码处理配置'),
        requestId?: string(name='RequestId', description='提交任务时请求 ID', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
        scheduleConfig?: {
          pipelineId?: string(name='PipelineId', description='管道 ID。', example='e37ebee5d98b4781897f6086e89f9c56'),
          priority?: int32(name='Priority', description='任务优先级。数字越大优先级越高，取值范围：1~10', example='5'),
        }(name='ScheduleConfig', description='任务调度信息'),
        status?: string(name='Status', description='转码任务任务状态 - Init: 已提交, Processing: 转码中, Success: 转码成功, Fail: 转码失败, Deleted: 已删除', example='Init'),
        submitResultJson?: map[string]any(name='SubmitResultJson', description='任务提交结果', example='{}'),
        submitTime?: string(name='SubmitTime', description='任务提交时间', example='2022-01-12T08:49:41Z'),
        userData?: string(name='UserData', description='用户数据', example='user-data'),
      }
    ](name='TranscodeJobList', description='子任务列表'),
    triggerSource?: string(name='TriggerSource', description='任务来源。 API: API, WorkFlow: 工作流, Console: 控制台', example='API'),
    userData?: string(name='UserData', description='用户数据。', example='user-data'),
  }(name='TranscodeParentJob', description='TranscodeParentJobWithSubJobDTO'),
}

model GetTranscodeJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetTranscodeJobResponseBody(name='body'),
}

async function getTranscodeJob(request: GetTranscodeJobRequest): GetTranscodeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTranscodeJob', 'POST', '/', 'json', false, 'json', request);
}

model GetUrlUploadInfosRequest {
  regionId?: string(name='RegionId', position='Host'),
  jobIds?: string(name='JobIds', example='df2ac80b481346daa1db6a7c40edc7f8', position='Query'),
  uploadURLs?: string(name='UploadURLs', example='https://media.w3.org/2010/05/sintel/trailer.mp4', position='Query'),
}

model GetUrlUploadInfosResponseBody = {
  nonExists?: [ string ](name='NonExists'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  URLUploadInfoList?: [ 
    {
      completeTime?: string(name='CompleteTime', example='2021-11-26 21:47:37'),
      creationTime?: string(name='CreationTime', example='2021-11-07T10:03:37Z'),
      errorCode?: string(name='ErrorCode', example='200'),
      errorMessage?: string(name='ErrorMessage', example='Success'),
      fileSize?: string(name='FileSize', example='64610'),
      jobId?: string(name='JobId', example='3829500c0fef429fa4ec1680b122d***'),
      mediaId?: string(name='MediaId', example='5014ca70f08171ecbf940764a0fd6***'),
      status?: string(name='Status', example='Normal'),
      uploadURL?: string(name='UploadURL', example='http://****.mp4'),
      userData?: string(name='UserData', example='{"MessageCallback":"{"CallbackURL":"http://example.aliyundoc.com"}", "Extend":"{"localId":"***", "test":"www"}"}'),
    }
  ](name='URLUploadInfoList'),
}

model GetUrlUploadInfosResponse = {
  headers: map[string]string(name='headers'),
  body: GetUrlUploadInfosResponseBody(name='body'),
}

async function getUrlUploadInfos(request: GetUrlUploadInfosRequest): GetUrlUploadInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUrlUploadInfos', 'POST', '/', 'json', false, 'json', request);
}

model ListAllPublicMediaTagsRequest {
  regionId?: string(name='RegionId', description='区域标识', position='Host'),
  businessType?: string(name='BusinessType', description='媒资业务类型', example='"sticker"', position='Query'),
  entityId?: string(name='EntityId', example='Copyright_Music', position='Query'),
}

model ListAllPublicMediaTagsResponseBody = {
  mediaTagList?: [ 
    {
      mediaTagId?: string(name='MediaTagId', description='素材标签id', example='sticker-gif'),
      mediaTagNameChinese?: string(name='MediaTagNameChinese', description='素材标签中文名', example='Gif'),
      mediaTagNameEnglish?: string(name='MediaTagNameEnglish', description='素材标签英文名'),
      options?: [ 
        {
          optionChineseName?: string(name='OptionChineseName'),
          optionEnglishName?: string(name='OptionEnglishName', example='Angry'),
          optionId?: string(name='OptionId', example='Angry'),
        }
      ](name='Options'),
    }
  ](name='MediaTagList', description='公共素材库标签列表'),
  requestId?: string(name='RequestId', description='Id of the request', example='B45F83B7-7F87-4792-BFE9-63CD2137CAF0'),
}

model ListAllPublicMediaTagsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAllPublicMediaTagsResponseBody(name='body'),
}

async function listAllPublicMediaTags(request: ListAllPublicMediaTagsRequest): ListAllPublicMediaTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAllPublicMediaTags', 'POST', '/', 'json', false, 'json', request);
}

model ListCustomTemplatesRequest {
  name?: string(name='Name', description='模板名称', example='test-template', position='Query'),
  orderBy?: string(name='OrderBy', description='排序顺序：CreateTimeDesc 和 CreateTimeAsc', example='CreateTimeDesc', position='Query'),
  pageNumber?: int32(name='PageNumber', description='分页数目', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='分页大小', example='20', position='Query'),
  subtype?: string(name='Subtype', description='模板子类型ID', example='2', position='Query'),
  templateId?: string(name='TemplateId', description='模板ID', example='****96e8864746a0b6f3****', position='Query'),
  type: string(name='Type', description='模板类型。逗号分隔', example='1', position='Query'),
}

model ListCustomTemplatesResponseBody = {
  customTemplateList?: [ 
    {
      createTime?: string(name='CreateTime', description='模板创建时间', example='2022-07-12T16:17:54Z'),
      isDefault?: boolean(name='IsDefault', description='是否默认模板', example='true'),
      modifiedTime?: string(name='ModifiedTime', description='模板修改时间', example='2022-07-12T16:17:54Z'),
      status?: string(name='Status', description='模板状态', example='Normal'),
      subtype?: int32(name='Subtype', description='模板子类型ID', example='2'),
      subtypeName?: string(name='SubtypeName', description='模板子类型名称', example='AudioTranscode'),
      templateConfig?: string(name='TemplateConfig', description='模板参数', example='{"Container":{"Format":"mp3"},"Audio":{"Codec":"mp3","Bitrate":"64","Samplerate":"22050","Channels":"2"}}'),
      templateId?: string(name='TemplateId', description='模板Id', example='****20b48fb04483915d4f2cd8ac****'),
      templateName?: string(name='TemplateName', description='模板名称', example='test-template'),
      type?: int32(name='Type', description='模板类型ID', example='1'),
      typeName?: string(name='TypeName', description='模板类型名称', example='TranscodeTemplate'),
    }
  ](name='CustomTemplateList', description='模板信息列表'),
  requestId?: string(name='RequestId', description='请求ID', example='******11-DB8D-4A9A-875B-275798******'),
  total?: int32(name='Total', description='模板总数', example='20'),
}

model ListCustomTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListCustomTemplatesResponseBody(name='body'),
}

async function listCustomTemplates(request: ListCustomTemplatesRequest): ListCustomTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCustomTemplates', 'POST', '/', 'json', false, 'json', request);
}

model ListDynamicImageJobsRequest {
  endOfCreateTime?: string(name='EndOfCreateTime', example='2022-07-14T00:00:00Z', position='Query'),
  jobId?: string(name='JobId', description='任务ID', example='****cdb3e74639973036bc84****', position='Query'),
  nextPageToken?: string(name='NextPageToken', description='连续分页查询时下一页的标记', example='cdb3e74639973036bc84', position='Query'),
  orderBy?: string(name='OrderBy', description='排序顺序：CreateTimeDesc 和 CreateTimeAsc', example='CreateTimeDesc', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  startOfCreateTime?: string(name='StartOfCreateTime', example='2022-07-12T00:00:00Z', position='Query'),
  status?: string(name='Status', example='Success', position='Query'),
}

model ListDynamicImageJobsResponseBody = {
  jobs?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
      finishTime?: string(name='FinishTime', example='2022-07-12T16:30:54Z'),
      input?: {
        media?: string(name='Media', example='oss://bucket/object'),
        type?: string(name='Type', example='OSS'),
      }(name='Input'),
      jobId?: string(name='JobId', example='****cdb3e74639973036bc84****'),
      modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:30:54Z'),
      name?: string(name='Name', example='SampleJob'),
      output?: {
        media?: string(name='Media', example='****cdb3e74639973036bc84****'),
        type?: string(name='Type', example='Media'),
      }(name='Output'),
      pipelineId?: string(name='PipelineId', example='****cdb3e74639973036bc84****'),
      status?: string(name='Status', example='Success'),
      submitTime?: string(name='SubmitTime', example='2022-07-12T16:17:54Z'),
      templateId?: string(name='TemplateId', example='****cdb3e74639973036bc84****'),
      triggerSource?: string(name='TriggerSource', example='API'),
    }
  ](name='Jobs'),
  nextPageToken?: string(name='NextPageToken', example='****cdb3e74639973036bc84****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model ListDynamicImageJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDynamicImageJobsResponseBody(name='body'),
}

async function listDynamicImageJobs(request: ListDynamicImageJobsRequest): ListDynamicImageJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDynamicImageJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListLiveRecordFilesRequest {
  endTime?: string(name='EndTime', example='2017-12-22T08:00:00Z', position='Query'),
  jobIds?: [ string ](name='JobIds', position='Query'),
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  recordFormat?: string(name='RecordFormat', example='m3u8', position='Query'),
  sortBy?: string(name='SortBy', example='asc', position='Query'),
  startTime?: string(name='StartTime', example='2017-12-21T08:00:01Z', position='Query'),
}

model ListLiveRecordFilesResponseBody = {
  files?: [ 
    {
      createTime?: string(name='CreateTime', example='2016-05-27T09:40:56Z'),
      duration?: float(name='Duration', example='100.0'),
      endTime?: string(name='EndTime', example='2015-12-01T07:36:10Z'),
      format?: string(name='Format', example='m3u8'),
      height?: int32(name='Height', example='640'),
      jobId?: string(name='JobId', example='c4d7f0a4-b506-43f9-8de3-07732c3f****'),
      jobName?: string(name='JobName', example='LiveRecordJob***'),
      recordId?: string(name='RecordId', example='c4d7f0a4-b506-43f9-8de3-07732c3f****'),
      recordOutput?: string(name='RecordOutput', example='{ "Type": "oss", "Endpoint":"oss-cn-shanghai.aliyuncs.com", "Bucket": "test-bucket" }'),
      recordUrl?: string(name='RecordUrl', example='http://****/atestObject****.m3u8'),
      startTime?: string(name='StartTime', example='2015-12-01T07:36:00Z'),
      streamUrl?: string(name='StreamUrl', example='LiveStream***'),
      width?: int32(name='Width', example='480'),
    }
  ](name='Files'),
  pageNo?: long(name='PageNo', example='1'),
  pageSize?: string(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='DE24625C-7C0F-4020-8448-****'),
  sortBy?: string(name='SortBy', example='asc'),
  totalCount?: string(name='TotalCount', example='100'),
}

model ListLiveRecordFilesResponse = {
  headers: map[string]string(name='headers'),
  body: ListLiveRecordFilesResponseBody(name='body'),
}

async function listLiveRecordFiles(request: ListLiveRecordFilesRequest): ListLiveRecordFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveRecordFiles', 'GET', '/', 'json', false, 'json', request);
}

model ListLiveRecordJobsRequest {
  endTime?: string(name='EndTime', example='2022-07-11T08:00:00Z', position='Query'),
  keyword?: string(name='Keyword', example='ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66', position='Query'),
  pageNo?: long(name='PageNo', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
  sortBy?: string(name='SortBy', example='desc', position='Query'),
  startTime?: string(name='StartTime', example='2022-07-15T08:00:00Z', position='Query'),
  status?: string(name='Status', example='started', position='Query'),
}

model ListLiveRecordJobsResponseBody = {
  liveRecordJobs?: [ 
    {
      createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段', example='2022-07-20T03:26:36Z'),
      jobId?: string(name='JobId', example='ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66'),
      name?: string(name='Name', description='代表资源名称的资源属性字段'),
      notifyUrl?: string(name='NotifyUrl', description='回调地址', example='https://example.com/imsnotify'),
      recordOutput?: {
        bucket?: string(name='Bucket', example='imsbucket1'),
        endpoint?: string(name='Endpoint', example='oss-cn-hangzhou.aliyuncs.com'),
        type?: string(name='Type', example='oss'),
      }(name='RecordOutput'),
      status?: string(name='Status', example='paused'),
      streamInput?: {
        type?: string(name='Type', example='rtmp'),
        url?: string(name='Url', example='rtmp://example-live.com/live/stream1'),
      }(name='StreamInput'),
      templateId?: string(name='TemplateId', description='录制模板ID', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66'),
      templateName?: string(name='TemplateName', example='test template'),
    }
  ](name='LiveRecordJobs', description='数组，返回示例目录。'),
  pageNo?: long(name='PageNo', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', description='Id of the request', example='A27DFFA4-F272-5563-8363-CB0BC42740BA'),
  sortBy?: string(name='SortBy', example='desc'),
  totalCount?: long(name='TotalCount', description='总记录数。', example='180'),
}

model ListLiveRecordJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListLiveRecordJobsResponseBody(name='body'),
}

async function listLiveRecordJobs(request: ListLiveRecordJobsRequest): ListLiveRecordJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveRecordJobs', 'GET', '/', 'json', false, 'json', request);
}

model ListLiveRecordTemplatesRequest {
  keyword?: string(name='Keyword', example='test template', position='Query'),
  pageNo?: long(name='PageNo', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  sortBy?: string(name='SortBy', example='desc', position='Query'),
  templateIds?: [ string ](name='TemplateIds', position='Query'),
  type?: string(name='Type', example='custom', position='Query'),
}

model ListLiveRecordTemplatesResponseBody = {
  pageNo?: long(name='PageNo', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  recordTemplateList?: [ 
    {
      createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段', example='2022-07-20T02:48:58Z'),
      lastModified?: string(name='LastModified', description='最后修改时间', example='2022-07-20T03:26:36Z'),
      name?: string(name='Name', description='代表资源名称的资源属性字段', example='test template'),
      recordFormatList?: [ 
        {
          cycleDuration?: int32(name='CycleDuration', example='21600'),
          format?: string(name='Format', description='格式', example='m3u8'),
          ossObjectPrefix?: string(name='OssObjectPrefix', description='Oss对象名，不包含后缀', example='record/{JobId}/{Sequence}_{EscapedStartTime}_{EscapedEndTime}'),
          sliceDuration?: int32(name='SliceDuration', description='切片时长', example='30'),
          sliceOssObjectPrefix?: string(name='SliceOssObjectPrefix', description='切片Oss对象名，不包含后缀', example='record/{JobId}/{UnixTimestamp}_{Sequence}'),
        }
      ](name='RecordFormatList', description='录制格式'),
      templateId?: string(name='TemplateId', description='代表资源一级ID的资源属性字段', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66'),
      type?: string(name='Type', description='代表资源名称的资源属性字段', example='custom'),
    }
  ](name='RecordTemplateList', description='数组，返回示例目录。'),
  requestId?: string(name='RequestId', description='Id of the request', example='BEA98A0C-7870-15FE-B96F-8880BB600A2C'),
  sortBy?: string(name='SortBy', example='desc'),
  totalCount?: long(name='TotalCount', description='总记录数。', example='5'),
}

model ListLiveRecordTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListLiveRecordTemplatesResponseBody(name='body'),
}

async function listLiveRecordTemplates(request: ListLiveRecordTemplatesRequest): ListLiveRecordTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveRecordTemplates', 'GET', '/', 'json', false, 'json', request);
}

model ListLiveSnapshotFilesRequest {
  endTime: string(name='EndTime', description='结束时间。UTC时间，格式：yyyy-MM-ddTHH:mm:ssZ（UTC时间）。EndTime和StartTime之间的间隔不能超过1天。', example='2022-02-02T23:59:59Z', position='Query'),
  jobId: string(name='JobId', description='截图任务ID。', example='****a046-263c-3560-978a-fb287782****', position='Query'),
  limit?: int32(name='Limit', description='每次获取数量，[1, 100]，默认为10。', example='10', position='Query'),
  sortBy?: string(name='SortBy', description='排序，默认为asc。
asc：按时间升序
desc：按时间倒序', example='desc', position='Query'),
  startTime: string(name='StartTime', description='开始时间。UTC时间，格式：yyyy-MM-ddTHH:mm:ssZ。', example='2022-02-02T00:00:00Z', position='Query'),
}

model ListLiveSnapshotFilesResponseBody = {
  fileList?: [ 
    {
      createTime?: string(name='CreateTime', description='创建时间。', example='2022-02-02T22:22:22Z'),
      createTimestamp?: long(name='CreateTimestamp', description='创建时间戳，用于删除传参。', example='1619503516000'),
      isOverlay?: boolean(name='IsOverlay', description='是否覆盖截图。', example='true'),
      ossBucket?: string(name='OssBucket', description='OSS bucket。', example='testbucket'),
      ossEndpoint?: string(name='OssEndpoint', description='OSS域名。', example='oss-cn-shanghai.aliyuncs.com'),
      ossObject?: string(name='OssObject', description='OSS存储对象位置。', example='snapshot/****a046-263c-3560-978a-fb287782****/1660638613798.jpg'),
    }
  ](name='FileList', description='文件列表。'),
  nextStartTime?: string(name='NextStartTime', description='下一页的开始时间，没有返回则表示结束翻页。', example='2022-02-02T22:22:22Z'),
  requestId?: string(name='RequestId', description='请求ID。', example='******11-DB8D-4A9A-875B-275798******'),
}

model ListLiveSnapshotFilesResponse = {
  headers: map[string]string(name='headers'),
  body: ListLiveSnapshotFilesResponseBody(name='body'),
}

async function listLiveSnapshotFiles(request: ListLiveSnapshotFilesRequest): ListLiveSnapshotFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveSnapshotFiles', 'GET', '/', 'json', false, 'json', request);
}

model ListLiveSnapshotJobsRequest {
  endTime?: string(name='EndTime', description='查询结束时间。UTC时间，格式：yyyy-MM-ddTHH:mm:ssZ。默认为StartTime+7天，StartTime与EndTime间隔不能超过30天。', example='2022-02-02T23:59:59Z', position='Query'),
  pageNo?: int32(name='PageNo', description='页码，[1, n)，默认是1。', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='页宽，[1, 100]，默认是10。', example='10', position='Query'),
  searchKeyWord?: string(name='SearchKeyWord', description='搜索关键词，任务ID/名称，名称支持模糊搜索。', example='****a046-263c-3560-978a-fb287782****', position='Query'),
  sortBy?: string(name='SortBy', description='排序，默认按CreateTime排序，默认是desc。
asc：升序
desc：倒序', example='desc', position='Query'),
  startTime?: string(name='StartTime', description='查询开始时间。UTC时间，格式：yyyy-MM-ddTHH:mm:ssZ。默认为7天前，StartTime与EndTime间隔不能超过30天。', example='2022-02-02T00:00:00Z', position='Query'),
  status?: string(name='Status', description='任务状态过滤，默认查询全部。
init：未启动
started：执行中
paused：已停止', position='Query'),
}

model ListLiveSnapshotJobsResponseBody = {
  jobList?: [ 
    {
      createTime?: string(name='CreateTime', description='创建时间。', example='2022-07-20T02:48:58Z'),
      jobId?: string(name='JobId', description='任务ID。', example='****a046-263c-3560-978a-fb287782****'),
      jobName?: string(name='JobName', description='任务名称。'),
      snapshotOutput?: {
        bucket?: string(name='Bucket', description='输出终端的Bucket，type=oss时返回OSS Bucket。', example='testbucket'),
        endpoint?: string(name='Endpoint', description='输出终端，type=oss时返回OSS域名。', example='oss-cn-shanghai.aliyuncs.com'),
        storageType?: string(name='StorageType', description='存储类型，目前只支持oss。', example='oss'),
      }(name='SnapshotOutput', description='输出信息。'),
      status?: string(name='Status', description='任务状态。
init：未启动
started：执行中
paused：已停止', example='started'),
      templateId?: string(name='TemplateId', description='模板ID。', example='****a046-263c-3560-978a-fb287666****'),
      templateName?: string(name='TemplateName', description='模板名称。'),
      timeInterval?: int32(name='TimeInterval', description='截图时间间隔。', example='5'),
    }
  ](name='JobList', description='任务列表。'),
  pageNo?: int32(name='PageNo', description='页码。', example='1'),
  pageSize?: int32(name='PageSize', description='页宽。', example='10'),
  requestId?: string(name='RequestId', description='请求ID。', example='******11-DB8D-4A9A-875B-275798******'),
  sortBy?: string(name='SortBy', description='排序。', example='desc'),
  totalCount?: long(name='TotalCount', description='总数。', example='100'),
}

model ListLiveSnapshotJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListLiveSnapshotJobsResponseBody(name='body'),
}

async function listLiveSnapshotJobs(request: ListLiveSnapshotJobsRequest): ListLiveSnapshotJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveSnapshotJobs', 'GET', '/', 'json', false, 'json', request);
}

model ListLiveSnapshotTemplatesRequest {
  pageNo?: int32(name='PageNo', description='页码，[1, n)，默认是1。', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='页宽，[1, 100]，默认是10。', example='10', position='Query'),
  searchKeyWord?: string(name='SearchKeyWord', description='搜索关键词，模板ID/名称，名称支持模糊搜索。', example='****a046-263c-3560-978a-fb287782****', position='Query'),
  sortBy?: string(name='SortBy', description='排序，默认按CreateTime排序，默认是desc。
asc：升序
desc：倒序', example='desc', position='Query'),
  templateIds?: [ string ](name='TemplateIds', description='指定模板ID查询，如果指定SearchKeyWord，该条件不生效。', position='Query'),
  type?: string(name='Type', description='模板类型，默认是查询全部。
custom：自定义
system：系统预置', example='custom', position='Query'),
}

model ListLiveSnapshotTemplatesResponseBody = {
  pageNo?: int32(name='PageNo', description='页码。', example='1'),
  pageSize?: int32(name='PageSize', description='页宽。', example='10'),
  requestId?: string(name='RequestId', description='请求ID。', example='******11-DB8D-4A9A-875B-275798******'),
  sortBy?: string(name='SortBy', description='排序。', example='desc'),
  templateList?: [ 
    {
      createTime?: string(name='CreateTime', description='创建时间。', example='2022-07-20T02:48:58Z'),
      templateId?: string(name='TemplateId', description='模板ID。', example='****a046-263c-3560-978a-fb287782****'),
      templateName?: string(name='TemplateName', description='模板名称。'),
      timeInterval?: int32(name='TimeInterval', description='截图时间间隔。', example='10'),
      type?: string(name='Type', description='模板类型。
custom：自定义
system：系统预置', example='custom'),
    }
  ](name='TemplateList', description='模板列表。'),
  totalCount?: long(name='TotalCount', description='总数。', example='100'),
}

model ListLiveSnapshotTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListLiveSnapshotTemplatesResponseBody(name='body'),
}

async function listLiveSnapshotTemplates(request: ListLiveSnapshotTemplatesRequest): ListLiveSnapshotTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveSnapshotTemplates', 'GET', '/', 'json', false, 'json', request);
}

model ListLiveTranscodeJobsRequest {
  keyWord?: string(name='KeyWord', example='24ecbb5c-4f98-4194-9400-f17102e27fc5', position='Query'),
  pageNo?: int32(name='PageNo', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, position='Query'),
  sortBy?: string(name='SortBy', example='asc', position='Query'),
  startMode?: int32(name='StartMode', example='0', position='Query'),
  status?: int32(name='Status', example='1', position='Query'),
  type?: string(name='Type', description='模板Id', example='normal', position='Query'),
}

model ListLiveTranscodeJobsResponseBody = {
  jobList?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-07-20T02:48:58Z'),
      jobId?: string(name='JobId', example='****a046-263c-3560-978a-fb287782****'),
      name?: string(name='Name', example='mytask'),
      outputStream?: {
        streamInfos?: [ 
          {
            outputUrl?: string(name='OutputUrl', example='rtmp://mydomain/app/mytranscode1'),
            type?: string(name='Type', example='rtmp'),
          }
        ](name='StreamInfos'),
      }(name='OutputStream'),
      startMode?: int32(name='StartMode', example='0'),
      status?: int32(name='Status', example='1'),
      streamInput?: {
        inputUrl?: string(name='InputUrl', example='rtmp://mydomain/app/stream1'),
        type?: string(name='Type', example='rtmp'),
      }(name='StreamInput'),
      templateId?: string(name='TemplateId', example='****a046-263c-3560-978a-fb287666****'),
      templateName?: string(name='TemplateName'),
      templateType?: string(name='TemplateType', example='normal'),
    }
  ](name='JobList'),
  requestId?: string(name='RequestId', description='请求ID', example='******3B-0E1A-586A-AC29-742247******'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListLiveTranscodeJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListLiveTranscodeJobsResponseBody(name='body'),
}

async function listLiveTranscodeJobs(request: ListLiveTranscodeJobsRequest): ListLiveTranscodeJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveTranscodeJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListLiveTranscodeTemplatesRequest {
  category?: string(name='Category', example='customized', position='Query'),
  keyWord?: string(name='KeyWord', example='my_template', position='Query'),
  pageNo?: int32(name='PageNo', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, position='Query'),
  sortBy?: string(name='SortBy', example='asc', position='Query'),
  type?: string(name='Type', description='模板Id', example='normal', position='Query'),
  videoCodec?: string(name='VideoCodec', example='H.264', position='Query'),
}

model ListLiveTranscodeTemplatesResponseBody = {
  requestId?: string(name='RequestId', description='请求ID', example='******3B-0E1A-586A-AC29-742247******'),
  templateContentList?: [ 
    {
      category?: string(name='Category', example='system'),
      createTime?: string(name='CreateTime', example='2022-07-20T03:26:36Z'),
      name?: string(name='Name', example='my_template'),
      templateConfig?: {
        audioParams?: {
          bitrate?: string(name='Bitrate', example='1000'),
          channels?: string(name='Channels', example='2'),
          codec?: string(name='Codec', example='AAC'),
          profile?: string(name='Profile', example='aac_low'),
          samplerate?: string(name='Samplerate', example='44100'),
        }(name='AudioParams'),
        videoParams?: {
          bitrate?: string(name='Bitrate', example='2500'),
          codec?: string(name='Codec', example='264'),
          fps?: string(name='Fps', example='30'),
          gop?: string(name='Gop', example='1000'),
          height?: string(name='Height', example='1280'),
          profile?: string(name='Profile', example='3'),
          width?: string(name='Width', example='720'),
        }(name='VideoParams'),
      }(name='TemplateConfig'),
      templateId?: string(name='TemplateId', example='9b1571b513cb44f7a1ba6ae561ff46f7'),
      type?: string(name='Type', example='normal'),
    }
  ](name='TemplateContentList'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListLiveTranscodeTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListLiveTranscodeTemplatesResponseBody(name='body'),
}

async function listLiveTranscodeTemplates(request: ListLiveTranscodeTemplatesRequest): ListLiveTranscodeTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveTranscodeTemplates', 'POST', '/', 'json', false, 'json', request);
}

model ListMediaBasicInfosRequest {
  regionId?: string(name='RegionId', position='Host'),
  businessType?: string(name='BusinessType', description='媒资业务类型', example='opening', position='Query'),
  endTime?: string(name='EndTime', description='结束时间', example='2020-12-20T13:00:00Z', position='Query'),
  includeFileBasicInfo?: boolean(name='IncludeFileBasicInfo', description='返回值中是否包含文件基础信息', example='true', position='Query'),
  maxResults?: int32(name='MaxResults', description='分页大小', example='5', minimum=1, maximum=100, position='Query'),
  mediaId?: string(name='MediaId', description='媒资ID，单个媒资ID支持前缀匹配', example='****019b82e24b37a1c2958dec38****', position='Query'),
  mediaType?: string(name='MediaType', description='媒资媒体类型', example='video', position='Query'),
  nextToken?: string(name='NextToken', description='页号', example='pSa1SQ0wCe5pzVrQ6mWZEw==', position='Query'),
  sortBy?: string(name='SortBy', description='排序', example='desc', position='Query'),
  source?: string(name='Source', description='来源', example='oss', position='Query'),
  startTime?: string(name='StartTime', description='创建时间', example='2020-12-20T12:00:00Z', position='Query'),
  status?: string(name='Status', description='资源状态', example='Normal', position='Query'),
}

model ListMediaBasicInfosResponseBody = {
  maxResults?: int32(name='MaxResults', example='2'),
  mediaInfos?: [ 
    {
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', description='码率', example='1912.13'),
            createTime?: string(name='CreateTime', example='2021-01-08T16:52:04Z'),
            duration?: string(name='Duration', description='时长', example='60.00000'),
            fileName?: string(name='FileName', description='文件名', example='example.mp4'),
            fileSize?: string(name='FileSize', description='文件大小（字节）', example='14340962'),
            fileStatus?: string(name='FileStatus', description='文件状态', example='Normal'),
            fileType?: string(name='FileType', example='source_file'),
            fileUrl?: string(name='FileUrl', description='文件oss地址', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example2.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
            formatName?: string(name='FormatName', description='封装格式', example='mov,mp4,m4a,3gp,3g2,mj2'),
            height?: string(name='Height', description='高', example='720'),
            modifiedTime?: string(name='ModifiedTime', example='2021-01-08T16:52:07Z'),
            region?: string(name='Region', description='文件存储区域', example='cn-shanghai'),
            width?: string(name='Width', description='宽', example='1280'),
          }(name='FileBasicInfo', description='文件基础信息，包含时长，大小等'),
        }
      ](name='FileInfoList', description='FileInfos'),
      mediaBasicInfo?: {
        biz?: string(name='Biz', example='ICE'),
        businessType?: string(name='BusinessType', description='媒资业务类型', example='opening'),
        cateId?: long(name='CateId', example='3049'),
        category?: string(name='Category', description='分类'),
        coverURL?: string(name='CoverURL', description='封面地址', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
        createTime?: string(name='CreateTime', description='媒资创建时间', example='2021-01-08T16:52:04Z'),
        deletedTime?: string(name='DeletedTime', description='媒资删除时间', example='2021-01-08T16:52:07Z'),
        description?: string(name='Description', description='内容描述'),
        inputURL?: string(name='InputURL', description='待注册的媒资在相应系统中的地址', example='https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4'),
        mediaId?: string(name='MediaId', description='MediaId', example='****019b82e24b37a1c2958dec38****'),
        mediaTags?: string(name='MediaTags', description='标签', example='tags,tags2'),
        mediaType?: string(name='MediaType', description='媒资媒体类型', example='video'),
        modifiedTime?: string(name='ModifiedTime', description='媒资修改时间', example='2021-01-08T16:52:07Z'),
        referenceId?: string(name='ReferenceId'),
        snapshots?: string(name='Snapshots', description='截图', example='[{"bucket":"example-bucket","count":"3","iceJobId":"******f48f0e4154976b2b8c45******","location":"oss-cn-beijing","snapshotRegular":"example.jpg","templateId":"******e6a6440b29eb60bd7c******"}]'),
        source?: string(name='Source', description='来源', example='oss'),
        spriteImages?: string(name='SpriteImages', description='雪碧图', example='[{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]'),
        status?: string(name='Status', description='资源状态', example='Normal'),
        title?: string(name='Title', description='标题'),
        transcodeStatus?: string(name='TranscodeStatus', description='转码状态', example='Init'),
        uploadSource?: string(name='UploadSource', example='general'),
        userData?: string(name='UserData', description='用户数据', example='userData'),
      }(name='MediaBasicInfo', description='BasicInfo'),
      mediaId?: string(name='MediaId', description='媒资ID', example='****019b82e24b37a1c2958dec38****'),
    }
  ](name='MediaInfos', description='符合要求的媒资集合'),
  nextToken?: string(name='NextToken', example='8EqYpQbZ6Eh7+Zz8DxVYoQ=='),
  requestId?: string(name='RequestId', description='Id of the request', example='******B7-7F87-4792-BFE9-63CD21******'),
  totalCount?: long(name='TotalCount', description='符合要求的媒资总数', example='4'),
}

model ListMediaBasicInfosResponse = {
  headers: map[string]string(name='headers'),
  body: ListMediaBasicInfosResponseBody(name='body'),
}

async function listMediaBasicInfos(request: ListMediaBasicInfosRequest): ListMediaBasicInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMediaBasicInfos', 'POST', '/', 'json', false, 'json', request);
}

model ListMediaInfoJobsRequest {
  endOfCreateTime?: string(name='EndOfCreateTime', description='任务创建时间筛选条件的结束时间。格式为: yyyy-MM-ddTHH:mm:ssZ。', example='2022-07-15T00:00:00Z', position='Query'),
  jobId?: string(name='JobId', description='按 jobId 筛选。', example='7b38a5d86f1e47838927b6e7ccb11cbe', position='Query'),
  nextPageToken?: string(name='NextPageToken', description='连续分页查询时下一页的标记 (第一页没有)。', example='ab4802364a2e49208c99efab82dfa8e8', position='Query'),
  orderBy?: string(name='OrderBy', description='排序顺序。目前只支持两种：CreateTimeDesc: 按创建时间降序 和 CreateTimeAsc: 按创建时间升序', example='CreateTimeDesc', position='Query'),
  pageSize?: int32(name='PageSize', description='分页大小。范围: 0~100，默认值：20。', example='10', position='Query'),
  startOfCreateTime?: string(name='StartOfCreateTime', description='任务创建时间筛选条件的起始时间。格式为: yyyy-MM-ddTHH:mm:ssZ。', example='2022-07-01T00:00:00Z', position='Query'),
  status?: string(name='Status', description='任务状态 - Init: 已提交, Success: 成功, Fail: 失败', example='Success', position='Query'),
}

model ListMediaInfoJobsResponseBody = {
  jobs?: [ 
    {
      async?: boolean(name='Async', description='是否异步处理。', example='true'),
      finishTime?: string(name='FinishTime', description='任务完成时间。格式为: yyyy-MM-ddTHH:mm:ssZ 。', example='2022-01-12T08:49:41Z'),
      input?: {
        media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
        type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
      }(name='Input', description='任务输入。'),
      jobId?: string(name='JobId', description='任务 ID。', example='ab4802364a2e49208c99efab82dfa8e8'),
      mediaInfoProperty?: {
        audioStreamInfoList?: [ 
          {
            bitrate?: string(name='Bitrate', description='码率。', example='0.f'),
            channelLayout?: string(name='ChannelLayout', description='声道布局。', example='stereo'),
            channels?: string(name='Channels', description='声道数。', example='2'),
            codecLongName?: string(name='CodecLongName', description='编码格式名。', example='AAC (Advanced Audio Coding)'),
            codecName?: string(name='CodecName', description='编码格式。', example='aac'),
            codecTag?: string(name='CodecTag', description='编码器标签。', example='0x000f'),
            codecTagString?: string(name='CodecTagString', description='编码器标签名。', example='[15][0][0][0]'),
            codecTimeBase?: string(name='CodecTimeBase', description='编码器时间基。', example='1/44100'),
            duration?: string(name='Duration', description='时长（单位: 秒）。', example='403.039989'),
            index?: string(name='Index', description='流序号。', example='1'),
            lang?: string(name='Lang', description='语言。', example='cn'),
            sampleFmt?: string(name='SampleFmt', description='采样格式。', example='fltp'),
            sampleRate?: string(name='SampleRate', description='采样率（单位: Hz）。', example='44100'),
            startTime?: string(name='StartTime', description='开始时间。', example='1.473556'),
            timebase?: string(name='Timebase', description='时间基。', example='1/90000'),
          }
        ](name='AudioStreamInfoList', description='音频流信息'),
        fileBasicInfo?: {
          bitrate?: string(name='Bitrate', description='视频码率。', example='888.563'),
          duration?: string(name='Duration', description='视频时长（单位: 秒）。', example='403.039999'),
          fileName?: string(name='FileName', description='文件名。', example='file.m3u8'),
          fileSize?: string(name='FileSize', description='文件大小。单位：Byte。', example='31737'),
          fileStatus?: string(name='FileStatus', description='文件状态。', example='Normal'),
          fileType?: string(name='FileType', description='文件类型。取值: source_file, transcode_file', example='source_file'),
          fileUrl?: string(name='FileUrl', description='文件 URL。', example='http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8'),
          formatName?: string(name='FormatName', description='视频格式名称。', example='hls,applehttp'),
          height?: string(name='Height', description='高。', example='478'),
          mediaId?: string(name='MediaId', description='媒资 ID。', example='4765337007f571edbfdf81848c016303'),
          region?: string(name='Region', description='文件所在区域。', example='cn-shanghai'),
          width?: string(name='Width', description='宽。', example='848'),
        }(name='FileBasicInfo', description='基础文件信息'),
        videoStreamInfoList?: [ 
          {
            avgFps?: string(name='Avg_fps', description='平均帧率。', example='25.0'),
            bitRate?: string(name='Bit_rate', description='码率。', example='888.563'),
            codecLongName?: string(name='Codec_long_name', description='编码格式名。', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
            codecName?: string(name='Codec_name', description='编码格式。', example='h264'),
            codecTag?: string(name='Codec_tag', description='编码格式标记。', example='0x001b'),
            codecTagString?: string(name='Codec_tag_string', description='编码格式标记文本。', example='[27][0][0][0]'),
            codecTimeBase?: string(name='Codec_time_base', example='1/50'),
            dar?: string(name='Dar', description='图像显示宽高比。', example='16:9'),
            duration?: string(name='Duration', description='时长（单位: 秒）。', example='403.039989'),
            fps?: string(name='Fps', description='帧率。', example='25.0'),
            hasBFrames?: string(name='Has_b_frames', description='是否有B帧。
取值: 
- 0: 没有 B 帧, 
- 1: 有一个 B 帧, 
- 2: 有多个连续 B 帧。', example='2'),
            height?: string(name='Height', description='高。', example='478'),
            index?: string(name='Index', description='流序号。', example='0'),
            lang?: string(name='Lang', description='语言。', example='cn'),
            level?: string(name='Level', description='编码等级。', example='31'),
            numFrames?: string(name='NumFrames', description='总帧数。', example='10040'),
            pixFmt?: string(name='PixFmt', description='颜色存储格式。', example='yuv420p'),
            profile?: string(name='Profile', description='编码器预设。', example='High'),
            rotate?: string(name='Rotate', description='视频画面旋转角度。
取值 0, 90, 180, 270。
默认值 0', example='0'),
            sar?: string(name='Sar', description='采集点数宽高比。', example='478:477'),
            startTime?: string(name='Start_time', description='起始时间。', example='1.473556'),
            timeBase?: string(name='Time_base', description='时基。', example='1/90000'),
            width?: string(name='Width', description='宽。', example='848'),
          }
        ](name='VideoStreamInfoList', description='视频流信息'),
      }(name='MediaInfoProperty', description='媒体信息详情。'),
      name?: string(name='Name', description='任务名字。', example='job-name'),
      requestId?: string(name='RequestId', description='请求 ID。', example='4879B9DE-E4B6-19DC-91F5-9D5F4DCE4168'),
      scheduleConfig?: {
        pipelineId?: string(name='PipelineId', description='管道 ID。', example='e37ebee5d98b4781897f6086e89f9c56'),
        priority?: int32(name='Priority', description='任务优先级。数字越大优先级越高，取值范围：1~10', example='5'),
      }(name='ScheduleConfig', description='调度信息。'),
      status?: string(name='Status', description='任务状态 - Init: 已提交, Success: 成功, Fail: 失败', example='Init'),
      submitResultJson?: map[string]any(name='SubmitResultJson', description='任务提交信息。'),
      submitTime?: string(name='SubmitTime', description='任务提交时间。格式为: yyyy-MM-ddTHH:mm:ssZ 。', example='2022-01-12T08:49:41Z'),
      triggerSource?: string(name='TriggerSource', description='任务来源。 API: API, WorkFlow: 工作流, Console: 控制台', example='API'),
      userData?: string(name='UserData', description='用户数据。', example='user-data'),
    }
  ](name='Jobs'),
  nextPageToken?: string(name='NextPageToken', description='下一页标识，第一次提交时为空即可。下一页标识将在第一次查询后返回。', example='019daf5780f74831b0e1a767c9f1c178'),
  requestId?: string(name='RequestId', description='请求 id', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model ListMediaInfoJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListMediaInfoJobsResponseBody(name='body'),
}

async function listMediaInfoJobs(request: ListMediaInfoJobsRequest): ListMediaInfoJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMediaInfoJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListPackageJobsRequest {
  endOfCreateTime?: string(name='EndOfCreateTime', description='任务创建时间筛选条件的结束时间。格式为: yyyy-MM-ddTHH:mm:ssZ。', example='2022-07-15T00:00:00Z', position='Query'),
  jobId?: string(name='JobId', description='按 jobId 筛选。', example='7b38a5d86f1e47838927b6e7ccb11cbe', position='Query'),
  nextPageToken?: string(name='NextPageToken', description='连续分页查询时下一页的标记 (第一页没有)。', example='ab4802364a2e49208c99efab82dfa8e8', position='Query'),
  orderBy?: string(name='OrderBy', description='排序顺序。目前只支持两种：CreateTimeDesc: 按创建时间降序 和 CreateTimeAsc: 按创建时间升序', example='CreateTimeDesc', position='Query'),
  pageSize?: int32(name='PageSize', description='分页大小。范围: 0~100，默认值：20。', example='10', position='Query'),
  startOfCreateTime?: string(name='StartOfCreateTime', description='任务创建时间筛选条件的起始时间。格式为: yyyy-MM-ddTHH:mm:ssZ。', example='2022-07-01T00:00:00Z', position='Query'),
  status?: string(name='Status', description='任务状态 - Init: 已提交, Success: 成功, Fail: 失败', example='Success', position='Query'),
}

model ListPackageJobsResponseBody = {
  packageJobList?: {
    nextPageToken?: string(name='NextPageToken', description='下一页标识，第一次提交时为空即可。下一页标识将在第一次查询后返回。', example='019daf5780f74831b0e1a767c9f1c178'),
    packageJobs?: [ 
      {
        code?: string(name='Code', example='InvalidParameter'),
        createTime?: string(name='CreateTime', example='2022-07-07T14:00:32Z'),
        finishTime?: string(name='FinishTime', example='2022-07-07T15:00:32Z'),
        inputs?: [ 
          {
            input?: {
              media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
              type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
            }(name='Input', description='打包播放流文件信息'),
          }
        ](name='Inputs'),
        jobId?: string(name='JobId', example='7b38a5d86f1e47838927b6e7ccb11cbe'),
        message?: string(name='Message', example='Resource content bad.'),
        modifiedTime?: string(name='ModifiedTime', example='2022-07-07T15:00:32Z'),
        name?: string(name='Name', example='job-name'),
        output?: {
          media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
          type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
        }(name='Output'),
        pipelineId?: string(name='PipelineId', example='5b40833e4c3e4d4e95a866abb9a42510'),
        priority?: int32(name='Priority', example='6'),
        status?: string(name='Status', example='Success'),
        submitTime?: string(name='SubmitTime', example='2022-07-07T14:00:32Z'),
        triggerSource?: string(name='TriggerSource', example='API'),
        userData?: string(name='UserData', example='{"param": "value"}'),
      }
    ](name='PackageJobs'),
  }(name='PackageJobList', description='打包任务列表'),
  requestId?: string(name='RequestId', description='请求 id', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model ListPackageJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPackageJobsResponseBody(name='body'),
}

async function listPackageJobs(request: ListPackageJobsRequest): ListPackageJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPackageJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListPipelinesRequest {
  speed?: string(name='Speed', description='管道类型。', example='Standard', position='Query'),
}

model ListPipelinesResponseBody = {
  pipelineList?: [ 
    {
      createTime?: string(name='CreateTime', description='模板创建时间', example='2022-07-12T16:17:54Z'),
      modifiedTime?: string(name='ModifiedTime', description='模板修改时间', example='2022-07-12T16:17:54Z'),
      name?: string(name='Name', description='管道名称', example='test-pipeline'),
      pipelineId?: string(name='PipelineId', description='管道Id', example='****20b48fb04483915d4f2cd8ac****'),
      priority?: int32(name='Priority', description='管道优先级', example='6'),
      speed?: string(name='Speed', description='管道类型', example='Standard'),
      status?: string(name='Status', description='管道状态', example='Active'),
    }
  ](name='PipelineList'),
  requestId?: string(name='RequestId', description='请求ID', example='******11-DB8D-4A9A-875B-275798******'),
}

model ListPipelinesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPipelinesResponseBody(name='body'),
}

async function listPipelines(request: ListPipelinesRequest): ListPipelinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPipelines', 'POST', '/', 'json', false, 'json', request);
}

model ListPublicMediaBasicInfosRequest {
  regionId?: string(name='RegionId', description='区域标识', position='Host'),
  includeFileBasicInfo?: boolean(name='IncludeFileBasicInfo', description='返回值中是否包含文件基础信息', example='true', position='Query'),
  maxResults?: int32(name='MaxResults', description='分页大小', example='5', minimum=1, maximum=100, position='Query'),
  mediaTagId?: string(name='MediaTagId', description='标签', example='ticker-atmosphere', position='Query'),
  nextToken?: string(name='NextToken', description='下一次读取的位置', example='pSa1SQ0wCe5pzVrQ6mWZEw==', position='Query'),
  pageNo?: int32(name='PageNo', description='页数', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='分页大小', example='10', minimum=1, maximum=100, position='Query'),
}

model ListPublicMediaBasicInfosResponseBody = {
  maxResults?: int32(name='MaxResults', example='2'),
  mediaInfos?: [ 
    {
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', description='码率', example='270112.12'),
            duration?: string(name='Duration', description='时长', example='10.040000'),
            fileName?: string(name='FileName', description='文件名', example='example.mp4'),
            fileSize?: string(name='FileSize', description='文件大小（字节）', example='338990717'),
            fileStatus?: string(name='FileStatus', description='文件状态', example='Normal'),
            fileType?: string(name='FileType', description='文件类型', example='source_file'),
            fileUrl?: string(name='FileUrl', description='文件oss地址', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
            formatName?: string(name='FormatName', description='封装格式', example='mov,mp4,m4a,3gp,3g2,mj2'),
            height?: string(name='Height', description='高', example='1080'),
            region?: string(name='Region', description='文件存储区域', example='cn-shanghai'),
            width?: string(name='Width', description='宽', example='1920'),
          }(name='FileBasicInfo', description='文件基础信息，包含时长，大小等'),
        }
      ](name='FileInfoList', description='FileInfos'),
      mediaBasicInfo?: {
        businessType?: string(name='BusinessType', description='媒资业务类型', example='general'),
        category?: string(name='Category', description='分类', example='video'),
        coverURL?: string(name='CoverURL', description='封面地址', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
        createTime?: string(name='CreateTime', description='媒资创建时间', example='2021-01-08T16:52:04Z'),
        deletedTime?: string(name='DeletedTime', description='媒资删除时间', example='2021-01-08T16:52:04Z'),
        description?: string(name='Description', description='内容描述', example='description'),
        inputURL?: string(name='InputURL', description='待注册的媒资在相应系统中的地址', example='https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4'),
        mediaId?: string(name='MediaId', description='MediaId', example='****019b82e24b37a1c2958dec38****'),
        mediaTags?: string(name='MediaTags', description='标签', example='sticker-daily'),
        mediaType?: string(name='MediaType', description='媒资媒体类型', example='video'),
        modifiedTime?: string(name='ModifiedTime', description='媒资修改时间', example='2021-01-08T16:52:04Z'),
        snapshots?: string(name='Snapshots', description='截图', example='null'),
        source?: string(name='Source', description='来源', example='oss'),
        status?: string(name='Status', description='资源状态', example='Normal'),
        title?: string(name='Title', description='标题'),
        transcodeStatus?: string(name='TranscodeStatus', description='转码状态', example='Init'),
        userData?: string(name='UserData', description='用户数据', example='userData'),
      }(name='MediaBasicInfo', description='BasicInfo'),
      mediaId?: string(name='MediaId', description='媒资ID', example='****019b82e24b37a1c2958dec38****'),
    }
  ](name='MediaInfos', description='符合要求的媒资集合'),
  nextToken?: string(name='NextToken', example='8EqYpQbZ6Eh7+Zz8DxVYoQ=='),
  requestId?: string(name='RequestId', description='Id of the request', example='******B7-7F87-4792-BFE9-63CD21******'),
  totalCount?: long(name='TotalCount', description='符合要求的媒资总数', example='2'),
}

model ListPublicMediaBasicInfosResponse = {
  headers: map[string]string(name='headers'),
  body: ListPublicMediaBasicInfosResponseBody(name='body'),
}

async function listPublicMediaBasicInfos(request: ListPublicMediaBasicInfosRequest): ListPublicMediaBasicInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPublicMediaBasicInfos', 'POST', '/', 'json', false, 'json', request);
}

model ListSmartJobsRequest {
  jobState?: string(name='JobState', description='任务状态', example='Finished', position='Query'),
  jobType?: string(name='JobType', description='任务类型', example='ASR', position='Query'),
  maxResults?: long(name='MaxResults', description='分页大小。最大不超过100。  默认值：10', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='当前开始读取的位置', example='****73f33c91-d59383e8280b****', position='Query'),
  pageNo?: long(name='PageNo', description='当前页码。默认值为1。', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='分页大小，每页显示条数。默认值为10，最大值为100。', example='10', position='Query'),
  sortBy?: string(name='SortBy', description='排序参数，默认根据创建时间倒序', example='CreationTime:Desc', position='Query'),
}

model ListSmartJobsResponseBody = {
  maxResults?: string(name='MaxResults', description='本次请求所返回的最大记录条数，最后一页前每页记录条数为MaxResults取值。  例如：  正例：10,10,5，反例：10,5,10', example='10'),
  nextToken?: string(name='NextToken', description='用来表示当前调用返回读取到的位置，空代表数据已经读取完毕。', example='CBB6BC61D08'),
  requestId?: string(name='RequestId', description='请求ID。', example='****9262E3DA-07FA-4862-FCBB6BC61D08*****'),
  smartJobList?: [ 
    {
      createTime?: string(name='CreateTime', description='创建时间', example='2020-12-26T04:11:10Z'),
      description?: string(name='Description', description='任务描述', example='测试描述'),
      editingConfig?: string(name='EditingConfig', description='输入配置', example='{"AudioConfig":{},"InputConfig":""}'),
      inputConfig?: {
        inputFile?: string(name='InputFile', description='文件信息', example='oss://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4'),
        keyword?: string(name='Keyword', description='关键词信息', example='测试关键词'),
      }(name='InputConfig', description='任务输入配置'),
      jobId?: string(name='JobId', description='任务Id', example='****20b48fb04483915d4f2cd8ac****'),
      jobState?: string(name='JobState', description='任务状态', example='Finished'),
      jobType?: string(name='JobType', description='任务类型', example='ASR'),
      modifiedTime?: string(name='ModifiedTime', description='最后修改时间', example='2020-12-26T04:11:10Z'),
      outputConfig?: {
        bucket?: string(name='Bucket', description='OSS Bucket', example='test-bucket'),
        object?: string(name='Object', description='OSS Object', example='test-object'),
      }(name='OutputConfig', description='任务输出配置'),
      title?: string(name='Title', description='任务标题', example='测试标题'),
      userData?: string(name='UserData', description='用户自定义字段', example='{"user":"data"}'),
      userId?: long(name='UserId', description='用户Id', example='1084506228******'),
    }
  ](name='SmartJobList'),
  totalCount?: string(name='TotalCount', description='本次请求条件下的数据总量，此参数为可选参数，默认可不返回。', example='110'),
}

model ListSmartJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSmartJobsResponseBody(name='body'),
}

async function listSmartJobs(request: ListSmartJobsRequest): ListSmartJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSmartJobs', 'GET', '/', 'json', false, 'json', request);
}

model ListSnapshotJobsRequest {
  endOfCreateTime?: string(name='EndOfCreateTime', example='2022-07-14T00:00:00Z', position='Query'),
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  nextPageToken?: string(name='NextPageToken', description='连续分页查询时下一页的标记', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  orderBy?: string(name='OrderBy', description='排序顺序：CreateTimeDesc 和 CreateTimeAsc', example='CreateTimeDesc', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  startOfCreateTime?: string(name='StartOfCreateTime', example='2022-07-12T00:00:00Z', position='Query'),
  status?: string(name='Status', example='Success', position='Query'),
}

model ListSnapshotJobsResponseBody = {
  jobs?: [ 
    {
      async?: boolean(name='Async', example='true'),
      count?: int32(name='Count', example='10'),
      createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
      finishTime?: string(name='FinishTime', example='2022-07-12T16:30:54Z'),
      input?: {
        media?: string(name='Media', example='oss://bucket/object.mp4'),
        type?: string(name='Type', example='OSS'),
      }(name='Input'),
      jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
      modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:30:54Z'),
      name?: string(name='Name', example='SampleJob'),
      output?: {
        media?: string(name='Media', example='http://test-bucket.oss-cn-shanghai.aliyuncs.com/output-{Count}.jpg'),
        type?: string(name='Type', example='OSS'),
      }(name='Output'),
      pipelineId?: string(name='PipelineId', example='****20b48fb04483915d4f2cd8ac****'),
      status?: string(name='Status', example='Success'),
      submitTime?: string(name='SubmitTime', example='2022-07-12T16:17:54Z'),
      templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
      triggerSource?: string(name='TriggerSource', example='API'),
      type?: string(name='Type', example='Sprite'),
    }
  ](name='Jobs'),
  nextPageToken?: string(name='NextPageToken', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', description='请求ID', example='******11-DB8D-4A9A-875B-275798******'),
}

model ListSnapshotJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSnapshotJobsResponseBody(name='body'),
}

async function listSnapshotJobs(request: ListSnapshotJobsRequest): ListSnapshotJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSnapshotJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListSystemTemplatesRequest {
  name?: string(name='Name', description='模板名称', example='SampleTemplate', position='Query'),
  pageNumber?: int32(name='PageNumber', description='分页数目', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='分页大小', example='20', position='Query'),
  status?: string(name='Status', description='模板状态：Normal正常，Invisible不可见，ALL全部', example='Normal', position='Query'),
  subtype?: string(name='Subtype', description='模板子类型ID', example='1', position='Query'),
  templateId?: string(name='TemplateId', description='模板ID', example='****96e8864746a0b6f3****', position='Query'),
  type: string(name='Type', description='模板类型。逗号分隔', example='1,2', position='Query'),
}

model ListSystemTemplatesResponseBody = {
  requestId?: string(name='RequestId', description='请求ID', example='******11-DB8D-4A9A-875B-275798******'),
  systemTemplateList?: [ 
    {
      status?: string(name='Status', description='模板状态', example='Normal'),
      subtype?: int32(name='Subtype', description='模板子类型ID', example='1'),
      subtypeName?: string(name='SubtypeName', description='模板子类型名称', example='Remux'),
      templateConfig?: string(name='TemplateConfig', description='模板参数', example='{"Container":{"Format":"flv"},"Video":{},"Audio":{}}'),
      templateId?: string(name='TemplateId', description='模板Id', example='S00000001-000000'),
      templateName?: string(name='TemplateName', description='模板名称', example='FLV-COPY'),
      type?: int32(name='Type', description='模板类型ID', example='1'),
      typeName?: string(name='TypeName', description='模板类型名称', example='TranscodeTemplate'),
    }
  ](name='SystemTemplateList', description='模板信息列表'),
  total?: int32(name='Total', description='模板总数', example='20'),
}

model ListSystemTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSystemTemplatesResponseBody(name='body'),
}

async function listSystemTemplates(request: ListSystemTemplatesRequest): ListSystemTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSystemTemplates', 'POST', '/', 'json', false, 'json', request);
}

model ListTemplatesRequest {
  createSource?: string(name='CreateSource', description='创建来源', example='OpenAPI', position='Query'),
  keyword?: string(name='Keyword', description='搜索关键词，可以根据模板id和title搜索', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  pageNo?: long(name='PageNo', description='当前页码。默认值为1。', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='分页大小，每页显示条数。默认值为10，最大值为100。', example='20', position='Query'),
  sortType?: string(name='SortType', description='排序参数，默认根据创建时间倒序', example='CreationTime:Desc', position='Query'),
  status?: string(name='Status', description='模板状态', example='Available', position='Query'),
  type?: string(name='Type', description='模板类型', example='Timeline', position='Query'),
}

model ListTemplatesResponseBody = {
  requestId?: string(name='RequestId', description='请求ID', example='******11-DB8D-4A9A-875B-275798******'),
  templates?: [ 
    {
      clipsParam?: string(name='ClipsParam', description='ClipsParam', example='{"Media1":"mediaId","Text1":"text"}'),
      config?: string(name='Config', description='模板配置', example='参考Timeline模板配置详解'),
      coverURL?: string(name='CoverURL', description='封面URL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg'),
      createSource?: string(name='CreateSource', description='创建来源', example='OpenAPI'),
      creationTime?: string(name='CreationTime', description='创建时间', example='2020-12-26T04:11:10Z'),
      modifiedSource?: string(name='ModifiedSource', description='修改来源', example='OpenAPI'),
      modifiedTime?: string(name='ModifiedTime', description='修改时间', example='2020-12-26T04:11:10Z'),
      name?: string(name='Name', description='模板名称', example='视频添加水印模板'),
      previewMedia?: string(name='PreviewMedia', description='预览素材', example='****20b48fb04483915d4f2cd8ac****'),
      previewMediaStatus?: string(name='PreviewMediaStatus', description='预览素材状态', example='Normal'),
      status?: string(name='Status', description='模板状态', example='Available'),
      templateId?: string(name='TemplateId', description='模板ID', example='****20b48fb04483915d4f2cd8ac****'),
      type?: string(name='Type', description='模板类型', example='Timeline'),
    }
  ](name='Templates'),
  totalCount?: int32(name='TotalCount', description='本次请求条件下的数据总量。', example='100'),
}

model ListTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTemplatesResponseBody(name='body'),
}

async function listTemplates(request: ListTemplatesRequest): ListTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTemplates', 'POST', '/', 'json', false, 'json', request);
}

model ListTranscodeJobsRequest {
  endOfCreateTime?: string(name='EndOfCreateTime', description='任务创建时间筛选条件的结束时间。格式为: yyyy-MM-ddTHH:mm:ssZ。', example='2022-07-15T00:00:00Z', position='Query'),
  nextPageToken?: string(name='NextPageToken', description='连续分页查询时下一页的标记 (第一页没有)。', example='ab4802364a2e49208c99efab82dfa8e8', position='Query'),
  orderBy?: string(name='OrderBy', description='排序顺序。目前只支持两种：CreateTimeDesc: 按创建时间降序 和 CreateTimeAsc: 按创建时间升序', example='CreateTimeDesc', position='Query'),
  pageSize?: int32(name='PageSize', description='分页大小。范围: 0~100，默认值：20。', example='10', position='Query'),
  parentJobId?: string(name='ParentJobId', description='按 jobId 筛选。', example='7b38a5d86f1e47838927b6e7ccb11cbe', position='Query'),
  startOfCreateTime?: string(name='StartOfCreateTime', description='任务创建时间筛选条件的起始时间。格式为: yyyy-MM-ddTHH:mm:ssZ。', example='2022-07-01T00:00:00Z', position='Query'),
  status?: string(name='Status', description='任务状态 - Init: 已提交, Success: 成功, Fail: 失败', example='Success', position='Query'),
}

model ListTranscodeJobsResponseBody = {
  jobs?: [ 
    {
      createTime?: string(name='CreateTime', description='任务创建时间。格式为: yyyy-MM-ddTHH:mm:ssZ 。', example='2022-01-12T08:49:41Z'),
      finishTime?: string(name='FinishTime', description='任务结束时间。格式为: yyyy-MM-ddTHH:mm:ssZ 。', example='2022-01-12T08:49:41Z'),
      inputGroup?: [ 
        {
          inputUrl?: string(name='InputUrl'),
          media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
          type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
        }
      ](name='InputGroup', description='任务输入组。单输入时为转码任务，多输入时为合流任务。'),
      jobCount?: int32(name='JobCount', description='子任务数量。', example='1'),
      name?: string(name='Name', description='任务名。', example='transcode-job'),
      outputGroup?: [ 
        {
          output?: {
            media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
            outputUrl?: string(name='OutputUrl'),
            type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
          }(name='Output', description='输出媒体配置'),
          processConfig?: {
            combineConfigs?: [ 
              {
                audioIndex: string(name='AudioIndex', description='音频流Index', example='0 或 exclude'),
                duration?: double(name='Duration', description='输入流的持续时间。 默认为视频时长。', example='20.0'),
                start?: double(name='Start', description='输入流的开始时间。 默认为0', example='0.0'),
                videoIndex: string(name='VideoIndex', description='视频流Index', example='0 或 exclude'),
              }
            ](name='CombineConfigs', description='多输入合流配置'),
            encryption?: {
              cipherText?: string(name='CipherText', description='标准加密的密钥密文。', example='MTYi00NDU0LTg5O****'),
              decryptKeyUri?: string(name='DecryptKeyUri', description='标准加密的解密服务地址。', example='https://sample.com/path?CipherText=MTYi00NDU0LTg5O****'),
              encryptType?: string(name='EncryptType', description='加密类型。', example='PrivateEncryption'),
            }(name='Encryption', description='加密配置。'),
            imageWatermarks?: [ 
              {
                overwriteParams?: {
                  dx?: string(name='Dx', description='水印位置，x', example='10'),
                  dy?: string(name='Dy', description='水印位置，y', example='10'),
                  file?: {
                    media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
                    type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
                  }(name='File', description='水印图片文件'),
                  height?: string(name='Height', description='高', example='32'),
                  referPos?: string(name='ReferPos', description='参考位置: TopLeft, TopRight, BottomLeft, BottomRight  default: TopLeft', example='TopLeft'),
                  timeline?: {
                    duration?: string(name='Duration', description='显示时长，秒数 或者 "ToEND"', example='ToEND'),
                    start?: string(name='Start', description='开始时间', example='00:00:05'),
                  }(name='Timeline', description='显示时间设置'),
                  width?: string(name='Width', description='宽', example='32'),
                }(name='OverwriteParams', description='覆盖参数, 若填写会覆盖模板对应参数'),
                templateId?: string(name='TemplateId', description='模板 ID。', example='9547c6ad97cb4f2aaa29683ebd18d410'),
              }
            ](name='ImageWatermarks', description='图片水印配置'),
            isInheritTags?: boolean(name='IsInheritTags'),
            subtitles?: [ 
              {
                overwriteParams?: {
                  charEnc?: string(name='CharEnc', description='文件 encoding 格式', example='UTF-8'),
                  file?: {
                    media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
                    type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
                  }(name='File', description='字幕文件'),
                  format?: string(name='Format', description='字幕文件格式', example='vtt'),
                }(name='OverwriteParams', description='覆盖参数, 若填写会覆盖模板对应参数'),
                templateId?: string(name='TemplateId', description='模板 ID。', example='9547c6ad97cb4f2aaa29683ebd18d410'),
              }
            ](name='Subtitles', description='字幕压制配置'),
            textWatermarks?: [ 
              {
                overwriteParams?: {
                  adaptive?: string(name='Adaptive', description='根据输出视频大小调整字体 size。 true / false, default: false', example='false'),
                  borderColor?: string(name='BorderColor', description='边框颜色', example='#006400'),
                  borderWidth?: int32(name='BorderWidth', description='边框宽度', example='0'),
                  content?: string(name='Content', description='水印文本，不需要 base64 encode，字符串需要 utf-8 编码', example='测试水印'),
                  fontAlpha?: string(name='FontAlpha', description='透明度', example='1.0'),
                  fontColor?: string(name='FontColor', description='颜色', example='#006400'),
                  fontName?: string(name='FontName', description='字体', example='SimSun'),
                  fontSize?: int32(name='FontSize', description='字体大小', example='16'),
                  left?: string(name='Left', description='水印位置，距离左边距离', example='10'),
                  top?: string(name='Top', description='水印位置，距离上边距离', example='10'),
                }(name='OverwriteParams', description='覆盖参数, 若填写会覆盖模板对应参数'),
                templateId?: string(name='TemplateId', description='模板 ID。', example='9547c6ad97cb4f2aaa29683ebd18d410'),
              }
            ](name='TextWatermarks', description='文字水印配置'),
            transcode?: {
              overwriteParams?: {
                audio?: {
                  bitrate?: string(name='Bitrate', description='输出文件的音频码率。
         值范围：[8，1000]
         单位：Kbps
         默认值：128', example='128'),
                  channels?: string(name='Channels', description='声道数。
         默认值：2', example='2'),
                  codec?: string(name='Codec', description='音频编解码格式，AAC、MP3、VORBIS、FLAC。
         默认值：AAC', example='AAC'),
                  profile?: string(name='Profile', description='音频编码预置。
         当Codec为 AAC时，范围aac_low、aac_he、aac_he_v2、aac_ld、aac_eld。', example='aac_low'),
                  remove?: string(name='Remove', description='是否删除音频流。', example='false'),
                  samplerate?: string(name='Samplerate', description='采样率。
         默认值：44100
         支持22050、32000、44100、48000、96000，
         单位：Hz', example='44100'),
                  volume?: {
                    integratedLoudnessTarget?: string(name='IntegratedLoudnessTarget', description='目标音量', example='-6'),
                    loudnessRangeTarget?: string(name='LoudnessRangeTarget', description='音量范围', example='8'),
                    method?: string(name='Method', description='音量调整方式', example='auto'),
                    truePeak?: string(name='TruePeak', description='最大峰值', example='-1'),
                  }(name='Volume', description='音量控制'),
                }(name='Audio', description='audio 设置'),
                container?: {
                  format?: string(name='Format', description='容器格式', example='mp4'),
                }(name='Container', description='封装格式设置'),
                muxConfig?: {
                  segment?: {
                    duration?: string(name='Duration', description='切片时长', example='10'),
                    forceSegTime?: string(name='ForceSegTime', description='强制切片时间点', example='2,3'),
                  }(name='Segment', description='切片设置'),
                }(name='MuxConfig', description='封装设置'),
                tags?: map[string]string(name='Tags'),
                video?: {
                  abrMax?: string(name='AbrMax', description='abr 最大码率(只有窄高1有效)
值范围[10，50000]，单位Kbps。', example='6000'),
                  bitrate?: string(name='Bitrate', description='视频平均码率。
         取值范围：[10，50000]。
         单位：Kbps。', example='3000'),
                  bufsize?: string(name='Bufsize', description='缓冲区大小
          值范围：[1000，128000]
          默认值：6000
          单位：Kb', example='6000'),
                  codec?: string(name='Codec', description='编码格式', example='H.264'),
                  crf?: string(name='Crf', description='码率-质量控制因子。
         取值范围：[0，51]。
         默认值：编码格式为H264，默认值为23。编码格式为H265，默认值为26。
         如果设置了Crf，则Bitrate的设置失效。', example='23'),
                  crop?: string(name='Crop', description='视频画面裁切
         支持2种方式。
         自动检测黑边并裁切，设置为“border”
         自定义裁切，参数格式：width:height:left:top。
         示例：1280:800:0:140', example='1280:800:0:140'),
                  fps?: string(name='Fps', description='帧率。
         取值范围：(0,60]。
         当输入文件帧率超过60时取60。
         默认值：取输入文件帧率', example='25'),
                  gop?: string(name='Gop', description='关键帧间最大帧数。
         取值范围：[1，1080000]。
         默认值：250。', example='250'),
                  height?: string(name='Height', description='高。
         取值范围：[128,4096]。
         单位：px。
         默认值：视频原始高度。', example='1080'),
                  longShortMode?: string(name='LongShortMode', description='是否开启横竖屏自适应（即：长短边模式）', example='false'),
                  maxrate?: string(name='Maxrate', description='视频码率峰值
         值范围[10，50000]，单位Kbps。', example='9000'),
                  pad?: string(name='Pad', description='视频贴黑边
         参数格式：width:height:left:top。
         示例：1280:800:0:140', example='1280:800:0:140'),
                  pixFmt?: string(name='PixFmt', description='视频颜色格式。
         范围：yuv420p，yuvj420p等标准颜色格式。', example='yuv420p'),
                  preset?: string(name='Preset', description='视频算法器预置。只有H264支持该参数。
支持veryfast、fast、medium、slow、slower。
默认值：medium。', example='medium'),
                  profile?: string(name='Profile', description='编码级别。
         支持baseline、main、high。
         baseline：针对移动设备。
         main：针对标准分辨率设备。
         high：针对高分辨率设备。
         默认值：high。', example='Main'),
                  remove?: string(name='Remove', description='是否去掉视频', example='false'),
                  scanMode?: string(name='ScanMode', description='扫描模式。
支持interlaced、progressive。', example='progressive'),
                  width?: string(name='Width', description='宽。
         取值范围：[128,4096]。
         单位：px。
         默认值：视频原始宽度。', example='1920'),
                }(name='Video', description='video 设置'),
              }(name='OverwriteParams', description='覆盖参数, 若填写会覆盖模板对应参数'),
              templateId?: string(name='TemplateId', description='模板 ID。', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }(name='Transcode', description='转码配置'),
          }(name='ProcessConfig', description='任务处理配置'),
        }
      ](name='OutputGroup', description='任务输出组。'),
      parentJobId?: string(name='ParentJobId', description='主任务 ID。', example='8b2198504dd340b7b3c9842a74fc9baa'),
      percent?: int32(name='Percent', description='任务完成百分比。', example='0'),
      requestId?: string(name='RequestId', description='提交任务时请求 ID。', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
      scheduleConfig?: {
        pipelineId?: string(name='PipelineId', description='管道 ID。', example='e37ebee5d98b4781897f6086e89f9c56'),
        priority?: int32(name='Priority', description='任务优先级。数字越大优先级越高，取值范围：1~10', example='5'),
      }(name='ScheduleConfig', description='任务调度配置。'),
      status?: string(name='Status', description='任务状态。 Success: 所有子任务完成后，有一个子任务则为成功, Fail: 所有子任务失败', example='Success'),
      submitTime?: string(name='SubmitTime', description='任务提交时间。格式为: yyyy-MM-ddTHH:mm:ssZ 。', example='2022-01-12T08:49:41Z'),
      triggerSource?: string(name='TriggerSource', description='任务来源。 API: API, WorkFlow: 工作流, Console: 控制台', example='API'),
      userData?: string(name='UserData', description='用户数据。', example='user-data'),
    }
  ](name='Jobs'),
  nextPageToken?: string(name='NextPageToken', description='下一页标识，第一次提交时为空即可。下一页标识将在第一次查询后返回。', example='019daf5780f74831b0e1a767c9f1c178'),
  requestId?: string(name='RequestId', description='请求 id', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model ListTranscodeJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTranscodeJobsResponseBody(name='body'),
}

async function listTranscodeJobs(request: ListTranscodeJobsRequest): ListTranscodeJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTranscodeJobs', 'POST', '/', 'json', false, 'json', request);
}

model QueryIProductionJobRequest {
  clientToken?: string(name='ClientToken', description='幂等参数', position='Query'),
  jobId: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model QueryIProductionJobResponseBody = {
  createTime?: string(name='CreateTime', example='2022-07-07T07:16:11Z'),
  finishTime?: string(name='FinishTime', example='2021-11-26T14:50:25Z'),
  functionName?: string(name='FunctionName', example='Cover'),
  input?: {
    media?: string(name='Media', example='oss://bucket/object'),
    type?: string(name='Type', example='OSS'),
  }(name='Input'),
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  jobParams?: string(name='JobParams', example='{"Model":"gif"}'),
  name?: string(name='Name'),
  output?: {
    media?: string(name='Media', example='oss://bucket/object'),
    type?: string(name='Type', example='OSS'),
  }(name='Output'),
  outputFiles?: [ string ](name='OutputFiles'),
  outputUrls?: [ string ](name='OutputUrls'),
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: string(name='Result', example='{}'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='a54fdc9c9aab413caef0d1150f565e86'),
    priority?: int32(name='Priority', example='6'),
  }(name='ScheduleConfig'),
  status?: string(name='Status', example='Success'),
  templateId?: string(name='TemplateId', example='****96e8864746a0b6f3****'),
  userData?: string(name='UserData', example='{"test":1}'),
}

model QueryIProductionJobResponse = {
  headers: map[string]string(name='headers'),
  body: QueryIProductionJobResponseBody(name='body'),
}

async function queryIProductionJob(request: QueryIProductionJobRequest): QueryIProductionJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryIProductionJob', 'POST', '/', 'json', false, 'json', request);
}

model QueryMediaCensorJobDetailRequest {
  jobId: string(name='JobId', example='2288c6ca184c0e47098a5b665e2a12****', position='Query'),
  maximumPageSize?: long(name='MaximumPageSize', example='30', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='ae0fd49c0840e14daf0d66a75b83****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryMediaCensorJobDetailResponseBody = {
  mediaCensorJobDetail?: {
    barrageCensorResult?: {
      label?: string(name='Label', example='normal'),
      rate?: string(name='Rate', example='99.91'),
      scene?: string(name='Scene', example='antispam'),
      suggestion?: string(name='Suggestion', example='pass'),
    }(name='BarrageCensorResult'),
    code?: string(name='Code', example='InvalidParameter.ResourceNotFound'),
    coverImageCensorResults?: {
      coverImageCensorResult?: [ 
      {
        bucket?: string(name='Bucket', example='bucket-out-test-****'),
        location?: string(name='Location', example='oss-cn-shanghai'),
        object?: string(name='Object', example='test/ai/censor/v2/vme-****.jpg'),
        results?: {
          result?: [ 
          {
            label?: string(name='Label', example='Normal'),
            rate?: string(name='Rate', example='100'),
            scene?: string(name='Scene', example='Antispam'),
            suggestion?: string(name='Suggestion', example='pass'),
          }
        ](name='Result')
        }(name='Results'),
      }
    ](name='CoverImageCensorResult')
    }(name='CoverImageCensorResults'),
    creationTime?: string(name='CreationTime', example='2018-09-13T16:32:24Z'),
    descCensorResult?: {
      label?: string(name='Label', example='terrorism'),
      rate?: string(name='Rate', example='100'),
      scene?: string(name='Scene', example='antispam'),
      suggestion?: string(name='Suggestion', example='review'),
    }(name='DescCensorResult'),
    finishTime?: string(name='FinishTime', example='2018-09-13T16:38:24Z'),
    input?: {
      bucket?: string(name='Bucket', example='bucket-test-in-****'),
      location?: string(name='Location', example='oss-cn-shanghai'),
      object?: string(name='Object', example='test/ai/censor/test-****.mp4'),
    }(name='Input'),
    jobId?: string(name='JobId', example='f8f166eea7a44e9bb0a4aecf9543****'),
    message?: string(name='Message', example='The resource operated cannot be found'),
    pipelineId?: string(name='PipelineId', example='c5b30b7c0d0e4a0abde1d5f9e751****'),
    state?: string(name='State', example='Success'),
    suggestion?: string(name='Suggestion', example='block'),
    titleCensorResult?: {
      label?: string(name='Label', example='meaningless'),
      rate?: string(name='Rate', example='99.91'),
      scene?: string(name='Scene', example='antispam'),
      suggestion?: string(name='Suggestion', example='block'),
    }(name='TitleCensorResult'),
    userData?: string(name='UserData', example='example userdata ****'),
    vensorCensorResult?: {
      censorResults?: {
        censorResult?: [ 
        {
          label?: string(name='Label', example='meaningless'),
          rate?: string(name='Rate', example='100'),
          scene?: string(name='Scene', example='terrorism'),
          suggestion?: string(name='Suggestion', example='review'),
        }
      ](name='CensorResult')
      }(name='CensorResults'),
      nextPageToken?: string(name='NextPageToken', example='ea04afcca7cd4e80b9ece8fbb251****'),
      videoTimelines?: {
        videoTimeline?: [ 
        {
          censorResults?: {
            censorResult?: [ 
            {
              label?: string(name='Label', example='flood'),
              rate?: string(name='Rate', example='99.99'),
              scene?: string(name='Scene', example='porn'),
              suggestion?: string(name='Suggestion', example='block'),
            }
          ](name='CensorResult')
          }(name='CensorResults'),
          object?: string(name='Object', example='output{Count}.jpg'),
          timestamp?: string(name='Timestamp', example='00:02:59.999'),
        }
      ](name='VideoTimeline')
      }(name='VideoTimelines'),
    }(name='VensorCensorResult'),
    videoCensorConfig?: {
      bizType?: string(name='BizType', example='common'),
      outputFile?: {
        bucket?: string(name='Bucket', example='test-bucket-****'),
        location?: string(name='Location', example='oss-cn-shanghai'),
        object?: string(name='Object', example='output{Count}.jpg'),
      }(name='OutputFile'),
      videoCensor?: string(name='VideoCensor', example='true'),
    }(name='VideoCensorConfig'),
  }(name='MediaCensorJobDetail'),
  requestId?: string(name='RequestId', example='B42299E6-F71F-465F-8FE9-4FC2E3D3C2CA'),
}

model QueryMediaCensorJobDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryMediaCensorJobDetailResponseBody(name='body'),
}

async function queryMediaCensorJobDetail(request: QueryMediaCensorJobDetailRequest): QueryMediaCensorJobDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMediaCensorJobDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryMediaCensorJobListRequest {
  endOfJobCreatedTimeRange?: string(name='EndOfJobCreatedTimeRange', example='2022-02-14T02:16:07Z', position='Query'),
  jobIds?: string(name='JobIds', example='fa9c34be3bcf42919ac4d1775239****,78dc866518b843259669df58ed30****', position='Query'),
  maximumPageSize?: long(name='MaximumPageSize', example='20', minimum=1, maximum=100, position='Query'),
  nextPageToken?: string(name='NextPageToken', example='79aff3eee82242e092899db5f669', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pipelineId?: string(name='PipelineId', example='c5b30b7c0d0e4a0abde1d5f9e751****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startOfJobCreatedTimeRange?: string(name='StartOfJobCreatedTimeRange', example='2021-12-22T03:48:05Z', position='Query'),
  state?: string(name='State', example='All', position='Query'),
}

model QueryMediaCensorJobListResponseBody = {
  mediaCensorJobList?: {
    mediaCensorJob?: [ 
    {
      barrageCensorResult?: {
        label?: string(name='Label', example='normal'),
        rate?: string(name='Rate', example='99.91'),
        scene?: string(name='Scene', example='antispam'),
        suggestion?: string(name='Suggestion', example='pass'),
      }(name='BarrageCensorResult'),
      code?: string(name='Code', example='InvalidParameter.ResourceNotFound'),
      coverImageCensorResults?: {
        coverImageCensorResult?: [ 
        {
          bucket?: string(name='Bucket', example='example-Bucket-****'),
          location?: string(name='Location', example='oss-cn-shanghai'),
          object?: string(name='Object', example='test/ai/censor/v2/vme-****.jpg'),
          results?: {
            result?: [ 
            {
              label?: string(name='Label', example='normal'),
              rate?: string(name='Rate', example='100'),
              scene?: string(name='Scene', example='live'),
              suggestion?: string(name='Suggestion', example='pass'),
            }
          ](name='Result')
          }(name='Results'),
        }
      ](name='CoverImageCensorResult')
      }(name='CoverImageCensorResults'),
      creationTime?: string(name='CreationTime', example='2021-11-04T07:25:48Z'),
      descCensorResult?: {
        label?: string(name='Label', example='normal'),
        rate?: string(name='Rate', example='100'),
        scene?: string(name='Scene', example='antispam'),
        suggestion?: string(name='Suggestion', example='pass'),
      }(name='DescCensorResult'),
      finishTime?: string(name='FinishTime', example='2021-11-04T07:25:50Z'),
      input?: {
        bucket?: string(name='Bucket', example='bucket-test-in-****'),
        location?: string(name='Location', example='oss-cn-shanghai'),
        object?: string(name='Object', example='test/ai/censor/test-****.mp4'),
      }(name='Input'),
      jobId?: string(name='JobId', example='f8f166eea7a44e9bb0a4aecf9543'),
      message?: string(name='Message', example='The resource operated cannot be found'),
      pipelineId?: string(name='PipelineId', example='c5b30b7c0d0e4a0abde1d5f9e751****'),
      state?: string(name='State', example='Success'),
      suggestion?: string(name='Suggestion', example='pass'),
      titleCensorResult?: {
        label?: string(name='Label', example='meaningless'),
        rate?: string(name='Rate', example='100'),
        scene?: string(name='Scene', example='antispam'),
        suggestion?: string(name='Suggestion', example='block'),
      }(name='TitleCensorResult'),
      userData?: string(name='UserData', example='example userdata ****'),
      vensorCensorResult?: {
        censorResults?: {
          censorResult?: [ 
          {
            label?: string(name='Label', example='meaningless'),
            rate?: string(name='Rate', example='100'),
            scene?: string(name='Scene', example='ad'),
            suggestion?: string(name='Suggestion', example='pass'),
          }
        ](name='CensorResult')
        }(name='CensorResults'),
        nextPageToken?: string(name='NextPageToken', example='ea04afcca7cd4e80b9ece8fbb251'),
        videoTimelines?: {
          videoTimeline?: [ 
          {
            censorResults?: {
              censorResult?: [ 
              {
                label?: string(name='Label', example='normal'),
                rate?: string(name='Rate', example='100'),
                scene?: string(name='Scene', example='porn'),
                suggestion?: string(name='Suggestion', example='block'),
              }
            ](name='CensorResult')
            }(name='CensorResults'),
            object?: string(name='Object', example='output{Count}.jpg'),
            timestamp?: string(name='Timestamp', example='00:02:59.999'),
          }
        ](name='VideoTimeline')
        }(name='VideoTimelines'),
      }(name='VensorCensorResult'),
      videoCensorConfig?: {
        bizType?: string(name='BizType', example='common'),
        outputFile?: {
          bucket?: string(name='Bucket', example='test-bucket-****'),
          location?: string(name='Location', example='oss-cn-shanghai'),
          object?: string(name='Object', example='output{Count}.jpg'),
        }(name='OutputFile'),
        videoCensor?: string(name='VideoCensor', example='true'),
      }(name='VideoCensorConfig'),
    }
  ](name='MediaCensorJob')
  }(name='MediaCensorJobList'),
  nextPageToken?: string(name='NextPageToken', example='9b1a42bc6e8d46e6a1383b7e7f01****'),
  nonExistIds?: {
    string?: [ string ](name='String')
  }(name='NonExistIds'),
  requestId?: string(name='RequestId', example='D1D5C080-8E2F-5030-8AB4-13092F17631B'),
}

model QueryMediaCensorJobListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryMediaCensorJobListResponseBody(name='body'),
}

async function queryMediaCensorJobList(request: QueryMediaCensorJobListRequest): QueryMediaCensorJobListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMediaCensorJobList', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmarttagJobRequest {
  jobId: string(name='JobId', position='Query'),
  params?: string(name='Params', position='Query'),
}

model QuerySmarttagJobResponseBody = {
  jobStatus?: string(name='JobStatus'),
  requestId?: string(name='RequestId'),
  results?: {
    result?: [ 
    {
      data?: string(name='Data'),
      type?: string(name='Type'),
    }
  ](name='Result')
  }(name='Results'),
  userData?: string(name='UserData'),
}

model QuerySmarttagJobResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySmarttagJobResponseBody(name='body'),
}

async function querySmarttagJob(request: QuerySmarttagJobRequest): QuerySmarttagJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmarttagJob', 'POST', '/', 'json', false, 'json', request);
}

model RefreshUploadMediaRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaId?: string(name='MediaId', example='411bed50018971edb60b0764a0ec6***', position='Query'),
}

model RefreshUploadMediaResponseBody = {
  mediaId?: string(name='MediaId', example='c2e77390f75271ec802f0674a2ce6***'),
  requestId?: string(name='RequestId', description='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  uploadAddress?: string(name='UploadAddress', example='eyJFbmRwb2ludCI6Imh0dHBzOi8vb3NzLWNuLXNoYW5naGFpLmFsaXl1bmNzLmNvbSIsIkJ1Y2tldCI6InN6aGQtdmlkZW8iLCJGaWxlTmFtZSI6InZvZC0yOTYzMWEvc3YvNTBmYTJlODQtMTgxMjdhZGRiMTcvNTBmYTJlODQtMTgxMjdhZGRiM***'),
  uploadAuth?: string(name='UploadAuth', example='eyJBY2Nlc3NLZXlJZCI6IkxUQUk0Rm53bTk1dHdxQjMxR3IzSE5hRCIsIkFjY2Vzc0tleVNlY3JldCI6Ik9lWllKR0dTMTlkNkZaM1E3UVpJQmdmSVdnM3BPaiIsIkV4cGlyYXRpb24iOiI***'),
}

model RefreshUploadMediaResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshUploadMediaResponseBody(name='body'),
}

async function refreshUploadMedia(request: RefreshUploadMediaRequest): RefreshUploadMediaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshUploadMedia', 'POST', '/', 'json', false, 'json', request);
}

model RegisterMediaInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  businessType?: string(name='BusinessType', description='媒资业务类型', example='opening', position='Query'),
  cateId?: long(name='CateId', example='3048', position='Query'),
  clientToken?: string(name='ClientToken', description='客户端token', example='****0311a423d11a5f7dee713535****', position='Query'),
  coverURL?: string(name='CoverURL', description='封面图，仅视频媒资有效', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png', position='Query'),
  description?: string(name='Description', description='描述', example='defaultDescription', position='Query'),
  inputURL: string(name='InputURL', description='媒资媒体url', position='Query'),
  mediaTags?: string(name='MediaTags', description='标签,如果有多个标签用逗号隔开', example='tag1,tag2', position='Query'),
  mediaType: string(name='MediaType', description='媒资媒体类型', example='video', position='Query'),
  overwrite?: boolean(name='Overwrite', description='是否覆盖已有媒资', example='true', position='Query'),
  referenceId?: string(name='ReferenceId', example='123-123', position='Query'),
  registerConfig?: string(name='RegisterConfig', description='注册媒资的配置', example='{"NeedSprite": "false"}', position='Query'),
  title?: string(name='Title', description='标题', example='defaultTitle', position='Query'),
  userData?: string(name='UserData', description='用户数据，最大1024字节', example='userData', position='Query'),
  workflowId?: string(name='WorkflowId', example='******b4fb044839815d4f2cd8******', position='Query'),
}

model RegisterMediaInfoResponseBody = {
  mediaId?: string(name='MediaId', description='ICE媒资ID', example='******b48fb04483915d4f2cd8******'),
  requestId?: string(name='RequestId', description='请求ID', example='******5A-CAAC-4850-A3AF-B74606******'),
}

model RegisterMediaInfoResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterMediaInfoResponseBody(name='body'),
}

async function registerMediaInfo(request: RegisterMediaInfoRequest): RegisterMediaInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterMediaInfo', 'POST', '/', 'json', false, 'json', request);
}

model RegisterMediaStreamRequest {
  regionId?: string(name='RegionId', position='Host'),
  inputURL?: string(name='InputURL', position='Query'),
  mediaId?: string(name='MediaId', example='5e778ec0027b71ed80a8909598506***', position='Query'),
  userData?: string(name='UserData', example='{"MessageCallback":{"CallbackURL":"http://test.test.com"}, "Extend":{"localId":"xxx","test":"www"}}', position='Query'),
}

model RegisterMediaStreamResponseBody = {
  mediaId?: string(name='MediaId', example='5e778ec0027b71ed80a8909598506302'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model RegisterMediaStreamResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterMediaStreamResponseBody(name='body'),
}

async function registerMediaStream(request: RegisterMediaStreamRequest): RegisterMediaStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterMediaStream', 'POST', '/', 'json', false, 'json', request);
}

model SearchEditingProjectRequest {
  createSource?: string(name='CreateSource', description='创建来源', example='WebSDK', position='Query'),
  endTime?: string(name='EndTime', description='CreationTime（创建时间）的结束时间', example='2017-01-11T12:00:00Z', position='Query'),
  maxResults?: long(name='MaxResults', description='分页参数', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='分页参数', example='CBB6BC61D08', position='Query'),
  projectType?: string(name='ProjectType', example='EditingProject', position='Query'),
  sortBy?: string(name='SortBy', description='结果排序方式', example='CreationTime:Desc', position='Query'),
  startTime?: string(name='StartTime', description='CreateTime（创建时间）的开始时间', example='2017-01-11T12:00:00Z', position='Query'),
  status?: string(name='Status', description='云剪辑工程状态。多个用逗号分隔', example='Producing', position='Query'),
  templateType?: string(name='TemplateType', description='模板类型', example='Timeline', position='Query'),
}

model SearchEditingProjectResponseBody = {
  maxResults?: long(name='MaxResults', description='云剪辑工程总数', example='10'),
  nextToken?: string(name='NextToken', example='null'),
  projectList?: [ 
    {
      businessConfig?: string(name='BusinessConfig', example='{ "OutputMediaConfig" : { "StorageLocation": "test-bucket.oss-cn-shanghai.aliyuncs.com", "Path": "test-path" }, "OutputMediaTarget": "oss-object", "ReservationTime": "2021-06-21T08:05:00Z" }'),
      businessStatus?: string(name='BusinessStatus', example='Reserving'),
      coverURL?: string(name='CoverURL', description='云剪辑工程封面', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example-cover.jpg'),
      createSource?: string(name='CreateSource', description='创建来源', example='OpenAPI'),
      createTime?: string(name='CreateTime', description='云剪辑工程创建时间', example='2017-01-11T12:00:00Z'),
      description?: string(name='Description', description='云剪辑工程描述', example='sample description'),
      duration?: long(name='Duration', description='云剪辑工程总时长', example='30.100000'),
      errorCode?: string(name='ErrorCode', description='云剪辑工程合成失败的错误码', example='InvalidParameter'),
      errorMessage?: string(name='ErrorMessage', description='云剪辑工程合成失败的消息', example='"EventTime":"2021-08-12T10:04:15Z","ErrorCode":"InvalidParameter","ErrorMessage":"The specified parameter \\"LiveStreamConfig\\" is not valid. specified parameter example is not valid.'),
      modifiedSource?: string(name='ModifiedSource', description='最后一次修改来源', example='2017-01-11T12:00:00Z'),
      modifiedTime?: string(name='ModifiedTime', description='云剪辑工程最新修改时间', example='2017-01-11T12:00:00Z'),
      projectId?: string(name='ProjectId', description='云剪辑工程ID', example='****fddd7748b58bf1d47e95****'),
      projectType?: string(name='ProjectType', example='EditingProject'),
      status?: string(name='Status', description='云剪辑工程状态', example='PRODUCE_FAILED'),
      templateType?: string(name='TemplateType', description='模板类型', example='Timeline'),
      timeline?: string(name='Timeline', description='云剪辑工程时间线', example='{"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****4d7cf14dc7b83b0e801c****"},{"MediaId":"****4d7cf14dc7b83b0e801c****"}]}]}'),
      title?: string(name='Title', description='云剪辑工程标题', example='title'),
    }
  ](name='ProjectList', description='云剪辑工程列表'),
  requestId?: string(name='RequestId', description='Id of the request', example='****9262E3DA-07FA-4862-FCBB6BC61D08*****'),
  totalCount?: long(name='TotalCount', example='110'),
}

model SearchEditingProjectResponse = {
  headers: map[string]string(name='headers'),
  body: SearchEditingProjectResponseBody(name='body'),
}

async function searchEditingProject(request: SearchEditingProjectRequest): SearchEditingProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchEditingProject', 'POST', '/', 'json', false, 'json', request);
}

model SearchMediaRequest {
  regionId?: string(name='RegionId', position='Host'),
  entityId?: string(name='EntityId', description='实体Id', example='2d3bf1e35a1e42b5ab338d701efa7603', position='Query'),
  match?: string(name='Match', description='过滤条件', position='Query'),
  pageNo?: int32(name='PageNo', description='当前页码。默认值为1', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='每页返回的数据条数。默认值为10，最大值为50', example='20', position='Query'),
  sortBy?: string(name='SortBy', description='排序字段和排序顺序。多个使用英文逗号（,）分隔', example='utcCreate:Desc, utcModified:Desc', position='Query'),
}

model SearchMediaResponseBody = {
  code?: string(name='Code', example='200'),
  mediaInfoList?: [ 
    {
      aiData?: {
        aiLabelInfo?: [ 
          {
            category?: string(name='Category'),
            faceId?: string(name='FaceId'),
            labelId?: string(name='LabelId'),
            labelName?: string(name='LabelName'),
            labelType?: string(name='LabelType'),
            occurrences?: [ 
              {
                content?: string(name='Content'),
                finegrainId?: string(name='FinegrainId'),
                finegrainName?: string(name='FinegrainName'),
                from?: double(name='From'),
                image?: string(name='Image'),
                score?: double(name='Score'),
                tableBatchSeqId?: string(name='TableBatchSeqId'),
                to?: double(name='To'),
                tracks?: [ 
                  {
                    position?: string(name='Position'),
                    size?: double(name='Size'),
                    timestamp?: double(name='Timestamp'),
                  }
                ](name='Tracks'),
                clipId?: string(name='clipId'),
              }
            ](name='Occurrences'),
            source?: string(name='Source'),
          }
        ](name='AiLabelInfo'),
        asrInfo?: [ 
          {
            clipId?: string(name='ClipId'),
            content?: string(name='Content'),
            from?: double(name='From'),
            timestamp?: double(name='Timestamp'),
            to?: double(name='To'),
          }
        ](name='AsrInfo'),
        ocrInfo?: [ 
          {
            clipId?: string(name='ClipId'),
            content?: string(name='Content'),
            from?: double(name='From'),
            timestamp?: double(name='Timestamp'),
            to?: double(name='To'),
          }
        ](name='OcrInfo'),
      }(name='AiData'),
      aiRoughData?: {
        aiCategory?: string(name='AiCategory'),
        aiJobId?: string(name='AiJobId'),
        result?: string(name='Result'),
        saveType?: string(name='SaveType'),
        status?: string(name='Status'),
      }(name='AiRoughData'),
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', description='码率', example='1912.13'),
            createTime?: string(name='CreateTime', example='2022-05-30T02:02:17Z'),
            duration?: string(name='Duration', description='时长', example='60.00000'),
            fileName?: string(name='FileName', description='文件名', example='164265080291300080527050.wav'),
            fileSize?: string(name='FileSize', description='文件大小（字节）', example='324784'),
            fileStatus?: string(name='FileStatus', description='文件状态', example='Normal'),
            fileType?: string(name='FileType', example='source_file'),
            fileUrl?: string(name='FileUrl', description='文件oss地址', example='https://outin-d3f4681ddfd911ec99a600163e1403e7.oss-cn-shanghai.aliyuncs.com/sv/23d5cdd1-18180984899/23d5cdd1-18180984899.mp4'),
            formatName?: string(name='FormatName', description='封装格式', example='mov,mp4,m4a,3gp,3g2,mj2'),
            height?: string(name='Height', description='高', example='480'),
            modifiedTime?: string(name='ModifiedTime', example='2021-12-10T12:19Z'),
            region?: string(name='Region', description='文件存储区域', example='cn-beijing'),
            width?: string(name='Width', description='宽', example='1920'),
          }(name='FileBasicInfo', description='文件基础信息，包含时长，大小等'),
        }
      ](name='FileInfoList', description='FileInfos。'),
      mediaBasicInfo?: {
        biz?: string(name='Biz', example='IMS'),
        businessType?: string(name='BusinessType', description='媒资业务类型', example='opening'),
        cateId?: long(name='CateId', example='44'),
        cateName?: string(name='CateName'),
        category?: string(name='Category', description='分类', example='image'),
        coverURL?: string(name='CoverURL', description='封面地址', example='https://dtlive-bj.oss-cn-beijing.aliyuncs.com/cover/e694372e-4f5b-4821-ae09-efd064f27b63_large_cover_url.jpg'),
        createTime?: string(name='CreateTime', description='媒资创建时间', example='2020-12-01T19:48Z'),
        deletedTime?: string(name='DeletedTime', description='媒资删除时间', example='2020-12-01T19:48Z'),
        description?: string(name='Description', description='内容描述'),
        inputURL?: string(name='InputURL', description='待注册的媒资在相应系统中的地址', example='oss://clipres/longvideo/material/voice/prod/20220418/07d7c799f6054dc3bbef250854cf84981650248140427'),
        mediaId?: string(name='MediaId', description='MediaId', example='132bd600fc3c71ec99476732a78f6402'),
        mediaTags?: string(name='MediaTags', description='标签', example='tags,tags2'),
        mediaType?: string(name='MediaType', description='媒资媒体类型', example='video'),
        modifiedTime?: string(name='ModifiedTime', description='媒资修改时间', example='2020-12-01T19:48Z'),
        referenceId?: string(name='ReferenceId', example='123-123'),
        snapshots?: string(name='Snapshots', description='截图', example='[{"bucket":"example-bucket","count":"3","iceJobId":"******f48f0e4154976b2b8c45******","location":"oss-cn-beijing","snapshotRegular":"example.jpg","templateId":"******e6a6440b29eb60bd7c******"}]'),
        source?: string(name='Source', description='来源', example='oss'),
        spriteImages?: string(name='SpriteImages', description='雪碧图', example='[{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]'),
        status?: string(name='Status', description='资源状态', example='Normal'),
        title?: string(name='Title', description='标题'),
        transcodeStatus?: string(name='TranscodeStatus', description='转码状态', example='Init'),
        uploadSource?: string(name='UploadSource', example='general'),
        userData?: string(name='UserData', description='用户数据', example='userData'),
      }(name='MediaBasicInfo', description='BasicInfo'),
      mediaId?: string(name='MediaId', description='媒资ID', example='3b187b3620c8490886cfc2a9578c3ce6'),
    }
  ](name='MediaInfoList', description='符合要求的媒资集合'),
  requestId?: string(name='RequestId', example='6F61C357-ACC0-57FB-876E-D58795335E59'),
  success?: string(name='Success', example='True'),
  total?: long(name='Total', example='163'),
}

model SearchMediaResponse = {
  headers: map[string]string(name='headers'),
  body: SearchMediaResponseBody(name='body'),
}

async function searchMedia(request: SearchMediaRequest): SearchMediaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchMedia', 'POST', '/', 'json', false, 'json', request);
}

model SearchPublicMediaInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  authorized?: boolean(name='Authorized', example='true', position='Query'),
  dynamicMetaDataMatchFields?: string(name='DynamicMetaDataMatchFields', example='"ApprovalStatus=\\"Available\\"&amp;MaterialBags=\\"boutiquemusic\\"&amp;Mood=\\"Nervous\\""', position='Query'),
  entityId?: string(name='EntityId', example='Copyright_Music', position='Query'),
  favorite?: boolean(name='Favorite', example='true', position='Query'),
  mediaIds?: string(name='MediaIds', example='****20b48fb04483915d4f2cd8ac****,****15d4a4b0448391508f2cb486****', position='Query'),
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  sortBy?: string(name='SortBy', example='UsageCount:Desc,UnitPrice:Asc', position='Query'),
}

model SearchPublicMediaInfoResponseBody = {
  publicMediaInfos?: [ 
    {
      authorized?: boolean(name='Authorized', example='true'),
      favorite?: boolean(name='Favorite', example='true'),
      mediaInfo?: {
        dynamicMetaData?: {
          data?: string(name='Data', example='"{\\"AuditionUrl\\": \\"http://xxx\\", \\"AuditionCount\\": 3...}"'),
          type?: string(name='Type', example='system'),
        }(name='DynamicMetaData'),
        mediaBasicInfo?: {
          businessType?: string(name='BusinessType', description='媒资业务类型', example='general'),
          category?: string(name='Category', description='分类', example='category'),
          coverURL?: string(name='CoverURL', description='封面地址', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
          createTime?: string(name='CreateTime', description='媒资创建时间', example='2020-12-26T06:04:49Z'),
          deletedTime?: string(name='DeletedTime', description='媒资删除时间', example='2020-12-29T06:04:49Z'),
          description?: string(name='Description', description='内容描述', example='description'),
          mediaId?: string(name='MediaId', description='MediaId', example='icepublic-****87b921bb4a55908a72a0537e****'),
          mediaTags?: string(name='MediaTags', description='标签'),
          mediaType?: string(name='MediaType', description='媒资媒体类型', example='audio'),
          modifiedTime?: string(name='ModifiedTime', description='媒资修改时间', example='2020-12-26T06:04:50Z'),
          source?: string(name='Source', description='来源', example='oss'),
          spriteImages?: string(name='SpriteImages', description='雪碧图', example='[{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]'),
          status?: string(name='Status', description='资源状态', example='Normal'),
          title?: string(name='Title', description='标题', example='title'),
          userData?: string(name='UserData', description='用户数据', example='userDataTest'),
        }(name='MediaBasicInfo', description='BasicInfo'),
        mediaId?: string(name='MediaId', description='媒资ID', example='icepublic-****87b921bb4a55908a72a0537e****'),
      }(name='MediaInfo'),
      remainingAuthTime?: string(name='RemainingAuthTime', example='100'),
    }
  ](name='PublicMediaInfos'),
  requestId?: string(name='RequestId', description='Id of the request', example='****3CFB-2767-54FD-B311-BD15A4C1****'),
  totalCount?: long(name='TotalCount', example='100'),
}

model SearchPublicMediaInfoResponse = {
  headers: map[string]string(name='headers'),
  body: SearchPublicMediaInfoResponseBody(name='body'),
}

async function searchPublicMediaInfo(request: SearchPublicMediaInfoRequest): SearchPublicMediaInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchPublicMediaInfo', 'POST', '/', 'json', false, 'json', request);
}

model SendLiveSnapshotJobCommandRequest {
  command: string(name='Command', description='操作指令：start，stop，restart。', example='start', position='Body'),
  jobId: string(name='JobId', description='截图任务ID。', example='****a046-263c-3560-978a-fb287782****', position='Body'),
}

model SendLiveSnapshotJobCommandResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。', example='******11-DB8D-4A9A-875B-275798******'),
}

model SendLiveSnapshotJobCommandResponse = {
  headers: map[string]string(name='headers'),
  body: SendLiveSnapshotJobCommandResponseBody(name='body'),
}

async function sendLiveSnapshotJobCommand(request: SendLiveSnapshotJobCommandRequest): SendLiveSnapshotJobCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendLiveSnapshotJobCommand', 'POST', '/', 'json', true, 'form', request);
}

model SendLiveTranscodeJobCommandRequest {
  command: string(name='Command', example='stop', position='Query'),
  jobId: string(name='JobId', description='模板Id', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model SendLiveTranscodeJobCommandResponseBody = {
  requestId?: string(name='RequestId', description='请求ID', example='******3B-0E1A-586A-AC29-742247******'),
}

model SendLiveTranscodeJobCommandResponse = {
  headers: map[string]string(name='headers'),
  body: SendLiveTranscodeJobCommandResponseBody(name='body'),
}

async function sendLiveTranscodeJobCommand(request: SendLiveTranscodeJobCommandRequest): SendLiveTranscodeJobCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendLiveTranscodeJobCommand', 'POST', '/', 'json', false, 'json', request);
}

model SetDefaultCustomTemplateRequest {
  templateId: string(name='TemplateId', description='模板ID', example='****d80e4e4044975745c14b****', position='Query'),
}

model SetDefaultCustomTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', description='是否成功', example='true'),
}

model SetDefaultCustomTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: SetDefaultCustomTemplateResponseBody(name='body'),
}

async function setDefaultCustomTemplate(request: SetDefaultCustomTemplateRequest): SetDefaultCustomTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDefaultCustomTemplate', 'POST', '/', 'json', false, 'json', request);
}

model SetDefaultStorageLocationRequest {
  regionId?: string(name='RegionId', position='Host'),
  bucket?: string(name='Bucket', example='oss-test-bucket', position='Query'),
  path?: string(name='Path', example='ims/dir', position='Query'),
  storageType?: string(name='StorageType', example='user_oss_bucket', position='Query'),
}

model SetDefaultStorageLocationResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='******5A-CAAC-4850-A3AF-B74606******'),
  success?: boolean(name='Success', example='true'),
}

model SetDefaultStorageLocationResponse = {
  headers: map[string]string(name='headers'),
  body: SetDefaultStorageLocationResponseBody(name='body'),
}

async function setDefaultStorageLocation(request: SetDefaultStorageLocationRequest): SetDefaultStorageLocationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDefaultStorageLocation', 'POST', '/', 'json', false, 'json', request);
}

model SetEventCallbackRequest {
  regionId?: string(name='RegionId', position='Host'),
  authKey?: string(name='AuthKey', example='TestKey001', position='Query'),
  authSwitch?: string(name='AuthSwitch', example='on', position='Query'),
  callbackQueueName?: string(name='CallbackQueueName', example='ice-callback-queue', position='Query'),
  callbackType?: string(name='CallbackType', example='HTTP', position='Query'),
  callbackURL?: string(name='CallbackURL', example='http://xxx.yyy/callback', position='Query'),
  eventTypeList?: string(name='EventTypeList', example='ProduceMediaComplete', position='Query'),
}

model SetEventCallbackResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', description='是否设置成功', example='true'),
}

model SetEventCallbackResponse = {
  headers: map[string]string(name='headers'),
  body: SetEventCallbackResponseBody(name='body'),
}

async function setEventCallback(request: SetEventCallbackRequest): SetEventCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetEventCallback', 'POST', '/', 'json', false, 'json', request);
}

model SubmitASRJobRequest {
  description?: string(name='Description', description='任务描述', example='测试描述', position='Query'),
  duration?: string(name='Duration', description='持续时间', example='00:00:10', position='Query'),
  inputFile?: string(name='InputFile', description='输入配置，支持OSS地址和内容库素材ID', example='oss://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4 或 ****20b48fb04483915d4f2cd8ac****', position='Query'),
  startTime?: string(name='StartTime', description='开始时间', example='00:00:00', position='Query'),
  title?: string(name='Title', description='任务标题', example='测试标题', position='Query'),
  userData?: string(name='UserData', description='自定义设置，为JSON字符串', example='{"your-key":"your-value"}', position='Query'),
}

model SubmitASRJobResponseBody = {
  jobId?: string(name='JobId', description='智能任务Id', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', description='请求Id', example='******11-DB8D-4A9A-875B-275798******'),
  state?: string(name='State', description='任务状态', example='Finished'),
}

model SubmitASRJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitASRJobResponseBody(name='body'),
}

async function submitASRJob(request: SubmitASRJobRequest): SubmitASRJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitASRJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitAudioProduceJobRequest {
  description?: string(name='Description', description='任务描述', example='任务描述  长度不超过1024字节  UTF8编码', position='Query'),
  editingConfig: string(name='EditingConfig', description='音频生产配置', example='{"voice":"Siqi","format":"MP3","volume":50}', position='Query'),
  inputConfig: string(name='InputConfig', description='文本内容。  最大支持300个汉字', example='测试文本', position='Query'),
  outputConfig: string(name='OutputConfig', description='音频输出配置', example='{"bucket":"bucket","object":"object"}', position='Query'),
  overwrite?: boolean(name='Overwrite', description='是否覆盖现有OSS文件', example='true', position='Query'),
  title?: string(name='Title', description='任务标题', example='任务标题。若不提供，根据日期自动生成默认title  长度不超过128字节  UTF8编码', position='Query'),
  userData?: string(name='UserData', description='自定义数据', example='{"user":"data"}', position='Query'),
}

model SubmitAudioProduceJobResponseBody = {
  jobId?: string(name='JobId', description='任务ID', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', description='请求Id', example='******11-DB8D-4A9A-875B-275798******'),
  state?: string(name='State', description='任务状态', example='Created'),
}

model SubmitAudioProduceJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitAudioProduceJobResponseBody(name='body'),
}

async function submitAudioProduceJob(request: SubmitAudioProduceJobRequest): SubmitAudioProduceJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitAudioProduceJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitDynamicChartJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  axisParams?: string(name='AxisParams', description='坐标样式。XAxisFontInterval不传或为0则算法自动计算间距', example='{"FontFile":"Microsoft YaHei","XAxisFontSize":"30","YAxisFontSize":"30","XAxisFontInterval":"30","AxisColor":"30"}', position='Query'),
  background?: string(name='Background', description='图表背景', example='{"Color":"#000000","ImageUrl":"http://your-bucket.oss-cn-shanghai.aliyuncs.com/obj.jpg"}', position='Query'),
  chartConfig?: string(name='ChartConfig', description='图表配置', example='{"Style":"Normal","TitleStartTime":"3000","ChartStartTime":"3000","VideoDuration":"15000"}', position='Query'),
  chartTitle?: string(name='ChartTitle', description='主标题', position='Query'),
  chartType: string(name='ChartType', description='图表类型', example='Line', position='Query'),
  dataSource?: string(name='DataSource', description='数据来源', position='Query'),
  description?: string(name='Description', description='任务描述', position='Query'),
  input: string(name='Input', description='图表输入数据', example='{"XlsFile":"https://your-bucket.oss-cn-shanghai.aliyuncs.com/obj.xls"}', position='Query'),
  outputConfig: string(name='OutputConfig', description='输出设置', example='{"MediaURL":"https://your-bucket.oss-cn-shanghai.aliyuncs.com/obj.mp4","Bitrate":2000,"Width":800,"Height":680}', position='Query'),
  subtitle?: string(name='Subtitle', description='副标题', position='Query'),
  title?: string(name='Title', description='任务标题', position='Query'),
  unit?: string(name='Unit', description='单位', position='Query'),
  userData?: string(name='UserData', description='自定义数据，JSON格式', example='{"user":"data"}', position='Query'),
}

model SubmitDynamicChartJobResponseBody = {
  jobId?: string(name='JobId', description='任务Id', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', description='请求Id', example='******11-DB8D-4A9A-875B-275798******'),
}

model SubmitDynamicChartJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitDynamicChartJobResponseBody(name='body'),
}

async function submitDynamicChartJob(request: SubmitDynamicChartJobRequest): SubmitDynamicChartJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitDynamicChartJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitDynamicImageJobRequest {
  input: {
    media: string(name='Media', example='oss://bucket/object.mp4'),
    type: string(name='Type', example='OSS'),
  }(name='Input', shrink='json', position='Query'),
  name?: string(name='Name', example='SampleJob', position='Query'),
  output: {
    media: string(name='Media', example='****96e8864746a0b6f3****'),
    type: string(name='Type', example='Media'),
  }(name='Output', shrink='json', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='****96e8864746a0b6f3****'),
    priority?: int32(name='Priority', example='6'),
  }(name='ScheduleConfig', shrink='json', position='Query'),
  templateConfig: {
    overwriteParams?: {
      format?: string(name='Format', example='gif'),
      fps?: int32(name='Fps', example='15'),
      height?: int32(name='Height', example='720'),
      longShortMode?: boolean(name='LongShortMode', example='false'),
      scanMode?: string(name='ScanMode', example='progressive'),
      timeSpan?: {
        duration?: string(name='Duration'),
        end?: string(name='End'),
        seek?: string(name='Seek'),
      }(name='TimeSpan', description='时间线参数'),
      width?: int32(name='Width', example='1024'),
    }(name='OverwriteParams'),
    templateId: string(name='TemplateId', example='****96e8864746a0b6f3****'),
  }(name='TemplateConfig', shrink='json', position='Query'),
  userData?: string(name='UserData', example='{"SampleKey": "SampleValue"}', position='Query'),
}

model SubmitDynamicImageJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', description='请求ID', example='******11-DB8D-4A9A-875B-275798******'),
}

model SubmitDynamicImageJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitDynamicImageJobResponseBody(name='body'),
}

async function submitDynamicImageJob(request: SubmitDynamicImageJobRequest): SubmitDynamicImageJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitDynamicImageJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitIProductionJobRequest {
  functionName: string(name='FunctionName', example='Cover', position='Query'),
  input: {
    media: string(name='Media', example='oss://bucket/object'),
    type: string(name='Type', example='OSS'),
  }(name='Input', shrink='json', position='Query'),
  jobParams?: string(name='JobParams', example='{"Model":"gif"}', position='Query'),
  name?: string(name='Name', position='Query'),
  output: {
    media: string(name='Media', example='oss://bucket/object'),
    type: string(name='Type', example='OSS'),
  }(name='Output', shrink='json', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='5246b8d12a62433ab77845074039c3dc'),
    priority?: int32(name='Priority', example='6'),
  }(name='ScheduleConfig', shrink='json', position='Query'),
  templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  userData?: string(name='UserData', example='{"test":1}', position='Query'),
}

model SubmitIProductionJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', description='Id of the request', example='C1849434-FC47-5DC1-92B6-F7EAAFE3851E'),
}

model SubmitIProductionJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitIProductionJobResponseBody(name='body'),
}

async function submitIProductionJob(request: SubmitIProductionJobRequest): SubmitIProductionJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitIProductionJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitLiveEditingJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  clips: string(name='Clips', example='[{\\"StartTime\\": \\" 2021-06-21T08:01:00Z\\",  \\"EndTime\\": \\" 2021-06-21T08:03:00Z\\" ,  "AppName": "app", "DomainName": "domain.com", "StreamName": "stream"},  {\\"StartTime\\": \\" 2021-06-21T08:05:00Z\\",  \\"EndTime\\": \\" 2021-06-21T08:09:00Z\\" }]', position='Query'),
  liveStreamConfig?: string(name='LiveStreamConfig', example='{ "AppName": "app", "DomainName": "domain.com", "StreamName": "stream"  }', position='Query'),
  mediaProduceConfig?: string(name='MediaProduceConfig', example='{ "Mode": "AccurateFast"}', position='Query'),
  outputMediaConfig?: string(name='OutputMediaConfig', position='Query'),
  outputMediaTarget?: string(name='OutputMediaTarget', position='Query'),
  projectId?: string(name='ProjectId', example='****fddd7748b58bf1d47e95****', position='Query'),
  userData?: string(name='UserData', example='{"key": "value"}', position='Query'),
}

model SubmitLiveEditingJobResponseBody = {
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
  mediaId?: string(name='MediaId', example='****c469e944b5a856828dc2****'),
  mediaURL?: string(name='MediaURL', example='http://test-bucket.cn-shanghai.aliyuncs.com/test.mp4'),
  projectId?: string(name='ProjectId', example='****fddd7748b58bf1d47e95****'),
  requestId?: string(name='RequestId', description='Id of the request', example='****36-3C1E-4417-BDB2-1E034F****'),
  vodMediaId?: string(name='VodMediaId', example='****d7578s4h75ci945c14b****'),
}

model SubmitLiveEditingJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitLiveEditingJobResponseBody(name='body'),
}

async function submitLiveEditingJob(request: SubmitLiveEditingJobRequest): SubmitLiveEditingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitLiveEditingJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitLiveRecordJobRequest {
  name: string(name='Name', description='代表资源名称的资源属性字段', example='live stream record 1', position='Body'),
  notifyUrl?: string(name='NotifyUrl', description='回调地址', example='https://example.com/imsnotify', position='Body'),
  recordOutput: {
    bucket?: string(name='Bucket', example='imsbucket1'),
    endpoint?: string(name='Endpoint', example='oss-cn-hangzhou.aliyuncs.com'),
    type: string(name='Type', example='oss'),
  }(name='RecordOutput', shrink='json', position='Body'),
  streamInput: {
    type: string(name='Type', example='rtmp'),
    url?: string(name='Url', example='rtmp://example.com/live/stream1'),
  }(name='StreamInput', shrink='json', position='Body'),
  templateId: string(name='TemplateId', description='录制模板ID', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66', position='Body'),
}

model SubmitLiveRecordJobResponseBody = {
  jobId?: string(name='JobId', description='若创建接口为异步实现，则需返回明确的JobId。', example='ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66'),
  requestId?: string(name='RequestId', description='Id of the request', example='BEA98A0C-7870-15FE-B96F-8880BB600A2C'),
}

model SubmitLiveRecordJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitLiveRecordJobResponseBody(name='body'),
}

async function submitLiveRecordJob(request: SubmitLiveRecordJobRequest): SubmitLiveRecordJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitLiveRecordJob', 'POST', '/', 'json', true, 'form', request);
}

model SubmitLiveSnapshotJobRequest {
  callbackUrl?: string(name='CallbackUrl', description='截图回调地址。', example='http://www.aliyun.com/snapshot/callback', position='Body'),
  jobName: string(name='JobName', description='任务名称。', position='Body'),
  snapshotOutput: {
    bucket: string(name='Bucket', description='截图输出终端的Bucket。', example='testbucket'),
    endpoint: string(name='Endpoint', description='截图输出终端。', example='oss-cn-shanghai.aliyuncs.com'),
    storageType: string(name='StorageType', description='截图存储类型。', example='oss'),
  }(name='SnapshotOutput', description='截图输出信息。', shrink='json', position='Body'),
  streamInput: {
    type: string(name='Type', description='流输入类型。', example='rtmp'),
    url: string(name='Url', description='流输入地址。', example='rtmp://www.aliyun.com/stream'),
  }(name='StreamInput', description='流输入信息。', shrink='json', position='Body'),
  templateId: string(name='TemplateId', description='模板ID。', example='****a046-263c-3560-978a-fb287782****', position='Body'),
}

model SubmitLiveSnapshotJobResponseBody = {
  jobId?: string(name='JobId', description='任务ID。', example='****a046-263c-3560-978a-fb287666****'),
  requestId?: string(name='RequestId', description='请求ID。', example='******11-DB8D-4A9A-875B-275798******'),
}

model SubmitLiveSnapshotJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitLiveSnapshotJobResponseBody(name='body'),
}

async function submitLiveSnapshotJob(request: SubmitLiveSnapshotJobRequest): SubmitLiveSnapshotJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitLiveSnapshotJob', 'POST', '/', 'json', true, 'form', request);
}

model SubmitLiveTranscodeJobRequest {
  name: string(name='Name', example='task1', minLength=1, maxLength=128, position='Query'),
  startMode: int32(name='StartMode', example='0', position='Query'),
  streamInput: {
    inputUrl: string(name='InputUrl', example='rtmp://mydomain/app/stream1'),
    type: string(name='Type', example='rtmp'),
  }(name='StreamInput', shrink='json', position='Query'),
  templateId: string(name='TemplateId', example='****96e8864746a0b6f3****', position='Query'),
  timedConfig?: {
    endTime?: string(name='EndTime', example='2022-07-20T08:20:32Z'),
    startTime?: string(name='StartTime', example='2022-02-21T00:00:00Z'),
  }(name='TimedConfig', shrink='json', position='Query'),
  transcodeOutput: {
    domainName?: string(name='DomainName', example='mydomain'),
    type: string(name='Type', example='LiveCenter'),
  }(name='TranscodeOutput', shrink='json', position='Query'),
}

model SubmitLiveTranscodeJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', description='请求ID', example='******3B-0E1A-586A-AC29-742247******'),
}

model SubmitLiveTranscodeJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitLiveTranscodeJobResponseBody(name='body'),
}

async function submitLiveTranscodeJob(request: SubmitLiveTranscodeJobRequest): SubmitLiveTranscodeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitLiveTranscodeJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitMediaCensorJobRequest {
  barrages?: string(name='Barrages', example='hello world', position='Query'),
  coverImages?: string(name='CoverImages', example='[{"Bucket":"example-bucket-****","Location":"oss-cn-shanghai","Object":"example-****.jpeg","RoleArn":"acs:ram::1997018457688683:role/AliyunICEDefaultRole"}]', position='Query'),
  description?: string(name='Description', example='example description', position='Query'),
  input?: {
    media?: string(name='Media', example='1b1b9cd148034739af413150fded****'),
    type?: string(name='Type', example='Media'),
  }(name='Input', shrink='json', position='Query'),
  notifyUrl?: string(name='NotifyUrl', example='mns://125340688170****.oss-cn-shanghai.aliyuncs.com/queues/example-pipeline', position='Query'),
  output?: string(name='Output', example='oss://sashimi-cn-shanghai/censor/snapshot-{Count}.jpg', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='5246b8d12a62433ab77845074039****'),
    priority?: int32(name='Priority', example='6'),
  }(name='ScheduleConfig', shrink='json', position='Query'),
  templateId?: string(name='TemplateId', example='S00000001-100060', position='Query'),
  title?: string(name='Title', example='Hello World', position='Query'),
  userData?: string(name='UserData', example='UserDatatestid-001-****', position='Query'),
}

model SubmitMediaCensorJobResponseBody = {
  jobId?: string(name='JobId', example='88c6ca184c0e47098a5b665e2****'),
  requestId?: string(name='RequestId', example='25818875-5F78-4A13-BEF6-D7393642CA58'),
}

model SubmitMediaCensorJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitMediaCensorJobResponseBody(name='body'),
}

async function submitMediaCensorJob(request: SubmitMediaCensorJobRequest): SubmitMediaCensorJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitMediaCensorJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitMediaInfoJobRequest {
  input: {
    media: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
    type: string(name='Type', description='媒体对象类型。取值： OSS: OSS文件, Media: 媒资 ID', example='OSS'),
  }(name='Input', description='任务输入', shrink='json', position='Query'),
  name?: string(name='Name', description='任务名字', example='job-name', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', description='管道 ID。', example='e37ebee5d98b4781897f6086e89f9c56'),
    priority?: int32(name='Priority', description='任务优先级。数字越大优先级越高，取值范围：1~10', example='5'),
  }(name='ScheduleConfig', description='调度参数', shrink='json', position='Query'),
  userData?: string(name='UserData', description='用户数据', example='user-data', position='Query'),
}

model SubmitMediaInfoJobResponseBody = {
  mediaInfoJob?: {
    async?: boolean(name='Async', description='是否异步处理', example='true'),
    finishTime?: string(name='FinishTime', description='任务完成时间', example='2022-01-12T08:49:41Z'),
    input?: {
      media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
      type?: string(name='Type', description='媒体对象类型。取值： OSS: OSS文件, Media: 媒资 ID', example='OSS'),
    }(name='Input', description='任务输入'),
    jobId?: string(name='JobId', description='任务 id', example='ab4802364a2e49208c99efab82dfa8e8'),
    mediaInfoProperty?: {
      audioStreamInfoList?: [ 
        {
          bitrate?: string(name='Bitrate', description='码率。', example='0.f'),
          channelLayout?: string(name='ChannelLayout', description='声道布局。', example='stereo'),
          channels?: string(name='Channels', description='声道数。', example='2'),
          codecLongName?: string(name='CodecLongName', description='编码格式名。', example='AAC (Advanced Audio Coding)'),
          codecName?: string(name='CodecName', description='编码格式。', example='aac'),
          codecTag?: string(name='CodecTag', description='编码器标签。', example='0x000f'),
          codecTagString?: string(name='CodecTagString', description='编码器标签名。', example='[15][0][0][0]'),
          codecTimeBase?: string(name='CodecTimeBase', description='编码器时间基。', example='1/44100'),
          duration?: string(name='Duration', description='时长（单位: 秒）。', example='403.039989'),
          index?: string(name='Index', description='流序号。', example='1'),
          lang?: string(name='Lang', description='语言。', example='us'),
          sampleFmt?: string(name='SampleFmt', description='采样格式。', example='fltp'),
          sampleRate?: string(name='SampleRate', description='采样率（单位: Hz）。', example='44100'),
          startTime?: string(name='StartTime', description='开始时间。', example='1.473556'),
          timebase?: string(name='Timebase', description='时间基。', example='1/90000'),
        }
      ](name='AudioStreamInfoList', description='音频流信息'),
      fileBasicInfo?: {
        bitrate?: string(name='Bitrate', description='视频码率。', example='888.563'),
        duration?: string(name='Duration', description='视频时长（单位: 秒）。', example='403.039999'),
        fileName?: string(name='FileName', description='文件名。', example='file.m3u8'),
        fileSize?: string(name='FileSize', description='文件大小。单位：Byte。', example='31737'),
        fileStatus?: string(name='FileStatus', description='文件状态。', example='Normal'),
        fileType?: string(name='FileType', description='文件类型。取值: source_file, transcode_file', example='source_file'),
        fileUrl?: string(name='FileUrl', description='文件url。', example='http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8'),
        formatName?: string(name='FormatName', description='视频格式名称。', example='hls,applehttp'),
        height?: string(name='Height', description='高。', example='478'),
        mediaId?: string(name='MediaId', description='媒资 ID。', example='2b36bd19c13f4145b094c0cad80dbce5'),
        region?: string(name='Region', description='文件所在区域。', example='cn-shanghai'),
        width?: string(name='Width', description='宽。', example='848'),
      }(name='FileBasicInfo', description='基础文件信息'),
      videoStreamInfoList?: [ 
        {
          avgFps?: string(name='Avg_fps', example='25.0'),
          bitRate?: string(name='Bit_rate', example='888.563'),
          codecLongName?: string(name='Codec_long_name', description='编码格式名。', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
          codecName?: string(name='Codec_name', description='编码格式。', example='h264'),
          codecTag?: string(name='Codec_tag', description='编码格式标记。', example='0x001b'),
          codecTagString?: string(name='Codec_tag_string', description='编码格式标记文本。', example='[27][0][0][0]'),
          codecTimeBase?: string(name='Codec_time_base', example='1/50'),
          dar?: string(name='Dar', description='图像显示宽高比。', example='16:9'),
          duration?: string(name='Duration', description='时长（单位: 秒）。', example='403.039989'),
          fps?: string(name='Fps', description='帧率。', example='25.0'),
          hasBFrames?: string(name='Has_b_frames', example='2'),
          height?: string(name='Height', description='高。', example='478'),
          index?: string(name='Index', description='流序号。', example='0'),
          lang?: string(name='Lang', description='语言。', example='zh'),
          level?: string(name='Level', description='编码等级。', example='31'),
          numFrames?: string(name='NumFrames', description='总帧数。', example='10040'),
          pixFmt?: string(name='PixFmt', description='颜色存储格式。', example='yuv420p'),
          profile?: string(name='Profile', description='编码器预设。', example='High'),
          rotate?: string(name='Rotate', description='视频画面旋转角度。取值 0, 90, 180, 270。默认值 0', example='0'),
          sar?: string(name='Sar', description='采集点数宽高比。', example='478:477'),
          startTime?: string(name='Start_time', description='起始时间。', example='1.473556'),
          timeBase?: string(name='Time_base', example='1/90000'),
          width?: string(name='Width', description='宽。', example='848'),
        }
      ](name='VideoStreamInfoList', description='视频流信息'),
    }(name='MediaInfoProperty', description='媒体信息详情'),
    name?: string(name='Name', description='任务名字', example='job-name'),
    requestId?: string(name='RequestId', description='请求 id', example='4879B9DE-E4B6-19DC-91F5-9D5F4DCE4168'),
    scheduleConfig?: {
      pipelineId?: string(name='PipelineId', description='管道 ID。', example='e37ebee5d98b4781897f6086e89f9c56'),
      priority?: int32(name='Priority', description='任务优先级。数字越大优先级越高，取值范围：1~10', example='5'),
    }(name='ScheduleConfig', description='调度信息'),
    status?: string(name='Status', description='任务状态 - Init: 已提交, Success: 成功, Fail: 失败', example='Init'),
    submitResultJson?: map[string]any(name='SubmitResultJson', description='任务提交信息', example='{}'),
    submitTime?: string(name='SubmitTime', description='任务提交时间', example='2022-01-12T08:49:41Z'),
    triggerSource?: string(name='TriggerSource', description='任务来源 - API, WorkFlow, Console', example='API'),
    userData?: string(name='UserData', description='用户数据', example='user-data'),
  }(name='MediaInfoJob', description='MediaInfoJobDTO'),
  requestId?: string(name='RequestId', description='请求 id', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model SubmitMediaInfoJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitMediaInfoJobResponseBody(name='body'),
}

async function submitMediaInfoJob(request: SubmitMediaInfoJobRequest): SubmitMediaInfoJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitMediaInfoJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitMediaProducingJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  clientToken?: string(name='ClientToken', example='****12e8864746a0a398****', position='Query'),
  clipsParam?: string(name='ClipsParam', position='Query'),
  editingProduceConfig?: string(name='EditingProduceConfig', example='{ 	"AutoRegisterInputVodMedia": "true", 	"OutputWebmTransparentChannel": "true" }', position='Query'),
  outputMediaConfig: string(name='OutputMediaConfig', example='{"MediaURL":"https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4"}', position='Query'),
  outputMediaTarget?: string(name='OutputMediaTarget', example='oss-object', position='Query'),
  projectId?: string(name='ProjectId', example='xxxxxfb2101cb318xxxxx', position='Query'),
  projectMetadata?: string(name='ProjectMetadata', position='Query'),
  source?: string(name='Source', example='OPENAPI', position='Query'),
  templateId?: string(name='TemplateId', example='****96e8864746a0b6f3****', position='Query'),
  timeline?: string(name='Timeline', example='{"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****4d7cf14dc7b83b0e801c****"},{"MediaId":"****4d7cf14dc7b83b0e801c****"}]}]}', position='Query'),
  userData?: string(name='UserData', position='Query'),
}

model SubmitMediaProducingJobResponseBody = {
  jobId?: string(name='JobId', description='合成作业Id', example='****d80e4e4044975745c14b****'),
  mediaId?: string(name='MediaId', description='合成ICE媒资Id', example='****c469e944b5a856828dc2****'),
  projectId?: string(name='ProjectId', description='剪辑工程Id', example='****b4549d46c88681030f6e****'),
  requestId?: string(name='RequestId', description='Id of the request', example='****36-3C1E-4417-BDB2-1E034F****'),
  vodMediaId?: string(name='VodMediaId', description='vod媒资id', example='****d8s4h75ci975745c14b****'),
}

model SubmitMediaProducingJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitMediaProducingJobResponseBody(name='body'),
}

async function submitMediaProducingJob(request: SubmitMediaProducingJobRequest): SubmitMediaProducingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitMediaProducingJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitPackageJobRequest {
  inputs: [ 
    {
      input: {
        media: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
        type: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
      }(name='Input', description='打包播放流文件信息'),
    }
  ](name='Inputs', shrink='json', position='Query'),
  name?: string(name='Name', example='job-name', position='Query'),
  output: {
    media: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
    type: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
  }(name='Output', shrink='json', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', description='管道 ID。', example='e37ebee5d98b4781897f6086e89f9c56'),
    priority?: int32(name='Priority', description='任务优先级。数字越大优先级越高，取值范围：1~10', example='5'),
  }(name='ScheduleConfig', shrink='json', position='Query'),
  userData?: string(name='UserData', example='{"param": "value"}', position='Query'),
}

model SubmitPackageJobResponseBody = {
  jobId?: string(name='JobId', description='打包任务ID', example='2d705f385b704ee5b*******a36d93e0'),
  requestId?: string(name='RequestId', description='请求 id', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model SubmitPackageJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitPackageJobResponseBody(name='body'),
}

async function submitPackageJob(request: SubmitPackageJobRequest): SubmitPackageJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitPackageJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitSmarttagJobRequest {
  content?: string(name='Content', example='example content ****', position='Query'),
  contentAddr?: string(name='ContentAddr', example='http://123.com/testVideo.mp4', position='Query'),
  contentType?: string(name='ContentType', example='application/zip', position='Query'),
  input?: {
    media?: string(name='Media', example='c5c62d8f0361337cab312dce8e77dc6d'),
    type?: string(name='Type', example='Media'),
  }(name='Input', description='input', shrink='json', position='Query'),
  notifyUrl?: string(name='NotifyUrl', example='https://example.com/endpoint/aliyun/ai?id=76401125000***', position='Query'),
  params?: string(name='Params', example='{"needAsrData":true, "needOcrData":false}', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='acdbfe4323bcfdae'),
    priority?: string(name='Priority', example='4'),
  }(name='ScheduleConfig', description='scheduleConfig', shrink='json', position='Query'),
  templateId?: string(name='TemplateId', example='39f8e0bc005e4f309379701645f4', position='Query'),
  title?: string(name='Title', example='example-title-****', position='Query'),
  userData?: string(name='UserData', example='{“a”:"test"}', position='Query'),
}

model SubmitSmarttagJobResponseBody = {
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model SubmitSmarttagJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitSmarttagJobResponseBody(name='body'),
}

async function submitSmarttagJob(request: SubmitSmarttagJobRequest): SubmitSmarttagJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitSmarttagJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitSnapshotJobRequest {
  input: {
    media: string(name='Media', example='oss://bucket/object.mp4'),
    type: string(name='Type', example='Media'),
  }(name='Input', shrink='json', position='Query'),
  name?: string(name='Name', example='SampleJob', position='Query'),
  output: {
    media: string(name='Media', example='oss://test-bucket/output-{Count}.jpg'),
    type: string(name='Type', example='OSS'),
  }(name='Output', shrink='json', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='****96e8864746a0b6f3****'),
  }(name='ScheduleConfig', shrink='json', position='Query'),
  templateConfig: {
    overwriteParams?: {
      blackLevel?: int32(name='BlackLevel', example='30'),
      count?: long(name='Count', example='5'),
      frameType?: string(name='FrameType', description='截图公共参数', example='intra'),
      height?: int32(name='Height', example='480'),
      interval?: long(name='Interval', example='10'),
      isSptFrag?: boolean(name='IsSptFrag', description='Webvtt截图配置:是否拼合输出', example='true'),
      pixelBlackThreshold?: int32(name='PixelBlackThreshold', example='70'),
      spriteSnapshotConfig?: {
        cellHeight?: int32(name='CellHeight', example='480'),
        cellWidth?: int32(name='CellWidth', example='720'),
        color?: string(name='Color', example='#000000'),
        columns?: int32(name='Columns', example='20'),
        lines?: int32(name='Lines', example='20'),
        margin?: int32(name='Margin', example='20'),
        padding?: int32(name='Padding', example='20'),
      }(name='SpriteSnapshotConfig', description='雪碧图配置'),
      time?: long(name='Time', example='1000'),
      type?: string(name='Type', example='Sprite'),
      width?: int32(name='Width', example='720'),
    }(name='OverwriteParams'),
    templateId: string(name='TemplateId', example='****96e8864746a0b6f3****'),
  }(name='TemplateConfig', shrink='json', position='Query'),
  userData?: string(name='UserData', example='{"test parameter": "test value"}', position='Query'),
}

model SubmitSnapshotJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', description='请求ID', example='******11-DB8D-4A9A-875B-275798******'),
}

model SubmitSnapshotJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitSnapshotJobResponseBody(name='body'),
}

async function submitSnapshotJob(request: SubmitSnapshotJobRequest): SubmitSnapshotJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitSnapshotJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitSubtitleProduceJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', position='Query'),
  editingConfig?: string(name='EditingConfig', position='Query'),
  inputConfig?: string(name='InputConfig', position='Query'),
  isAsync?: long(name='IsAsync', position='Query'),
  outputConfig?: string(name='OutputConfig', position='Query'),
  title?: string(name='Title', position='Query'),
  type?: string(name='Type', position='Query'),
  userData?: string(name='UserData', position='Query'),
}

model SubmitSubtitleProduceJobResponseBody = {
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model SubmitSubtitleProduceJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitSubtitleProduceJobResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function submitSubtitleProduceJob(request: SubmitSubtitleProduceJobRequest): SubmitSubtitleProduceJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitSubtitleProduceJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitSyncMediaInfoJobRequest {
  input: {
    media: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
    type: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
  }(name='Input', description='任务输入', shrink='json', position='Query'),
  name?: string(name='Name', description='任务名字', example='job-name', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', description='管道 ID。', example='e37ebee5d98b4781897f6086e89f9c56'),
    priority?: int32(name='Priority', description='任务优先级。数字越大优先级越高，取值范围：1~10', example='5'),
  }(name='ScheduleConfig', description='调度参数', shrink='json', position='Query'),
  userData?: string(name='UserData', description='用户数据', example='user-data', position='Query'),
}

model SubmitSyncMediaInfoJobResponseBody = {
  mediaInfoJob?: {
    async?: boolean(name='Async', description='是否异步处理。', example='true'),
    finishTime?: string(name='FinishTime', description='任务完成时间。格式为: yyyy-MM-ddTHH:mm:ssZ 。', example='2022-01-12T08:49:41Z'),
    input?: {
      media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
      type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
    }(name='Input', description='任务输入。'),
    jobId?: string(name='JobId', description='任务 ID。', example='ab4802364a2e49208c99efab82dfa8e8'),
    mediaInfoProperty?: {
      audioStreamInfoList?: [ 
        {
          bitrate?: string(name='Bitrate', description='码率。', example='0.f'),
          channelLayout?: string(name='ChannelLayout', description='声道布局。', example='stereo'),
          channels?: string(name='Channels', description='声道数。', example='2'),
          codecLongName?: string(name='CodecLongName', description='编码格式名。', example='AAC (Advanced Audio Coding)'),
          codecName?: string(name='CodecName', description='编码格式。', example='aac'),
          codecTag?: string(name='CodecTag', description='编码器标签。', example='0x000f'),
          codecTagString?: string(name='CodecTagString', description='编码器标签名。', example='[15][0][0][0]'),
          codecTimeBase?: string(name='CodecTimeBase', description='编码器时间基。', example='1/44100'),
          duration?: string(name='Duration', description='时长（单位: 秒）。', example='403.039989'),
          index?: string(name='Index', description='流序号。', example='1'),
          lang?: string(name='Lang', description='语言。', example='us'),
          sampleFmt?: string(name='SampleFmt', description='采样格式。', example='fltp'),
          sampleRate?: string(name='SampleRate', description='采样率（单位: Hz）。', example='44100'),
          startTime?: string(name='StartTime', description='开始时间。', example='1.473556'),
          timebase?: string(name='Timebase', description='时间基。', example='1/90000'),
        }
      ](name='AudioStreamInfoList', description='音频流信息'),
      fileBasicInfo?: {
        bitrate?: string(name='Bitrate', description='视频码率。', example='888.563'),
        duration?: string(name='Duration', description='视频时长（单位: 秒）。', example='403.039999'),
        fileName?: string(name='FileName', description='文件名。', example='file.m3u8'),
        fileSize?: string(name='FileSize', description='文件大小。单位：Byte。', example='31737'),
        fileStatus?: string(name='FileStatus', description='文件状态。', example='Normal'),
        fileType?: string(name='FileType', description='文件类型。取值: source_file, transcode_file', example='source_file'),
        fileUrl?: string(name='FileUrl', description='文件 URL。', example='http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8'),
        formatName?: string(name='FormatName', description='视频格式名称。', example='hls,applehttp'),
        height?: string(name='Height', description='高。', example='478'),
        mediaId?: string(name='MediaId', description='媒资 ID。', example='999e68259c924f52a6be603cbb3f91cc'),
        region?: string(name='Region', description='文件所在区域。', example='cn-shanghai'),
        width?: string(name='Width', description='宽。', example='848'),
      }(name='FileBasicInfo', description='基础文件信息'),
      videoStreamInfoList?: [ 
        {
          avgFps?: string(name='Avg_fps', description='平均帧率。', example='25.0'),
          bitRate?: string(name='Bit_rate', description='码率。', example='888.563'),
          codecLongName?: string(name='Codec_long_name', description='编码格式名。', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
          codecName?: string(name='Codec_name', description='编码格式。', example='h264'),
          codecTag?: string(name='Codec_tag', description='编码格式标记。', example='0x001b'),
          codecTagString?: string(name='Codec_tag_string', description='编码格式标记文本。', example='[27][0][0][0]'),
          codecTimeBase?: string(name='Codec_time_base', example='1/50'),
          dar?: string(name='Dar', description='图像显示宽高比。', example='16:9'),
          duration?: string(name='Duration', description='时长（单位: 秒）。', example='403.039989'),
          fps?: string(name='Fps', description='帧率。', example='25.0'),
          hasBFrames?: string(name='Has_b_frames', description='是否有B帧。
取值: 
- 0: 没有 B 帧, 
- 1: 有一个 B 帧, 
- 2: 有多个连续 B 帧。', example='2'),
          height?: string(name='Height', description='高。', example='478'),
          index?: string(name='Index', description='流序号。', example='0'),
          lang?: string(name='Lang', description='语言。', example='zh'),
          level?: string(name='Level', description='编码等级。', example='31'),
          numFrames?: string(name='NumFrames', description='总帧数。', example='10040'),
          pixFmt?: string(name='PixFmt', description='颜色存储格式。', example='yuv420p'),
          profile?: string(name='Profile', description='编码器预设。', example='High'),
          rotate?: string(name='Rotate', description='视频画面旋转角度。
取值 0, 90, 180, 270。
默认值 0', example='0'),
          sar?: string(name='Sar', description='采集点数宽高比。', example='478:477'),
          startTime?: string(name='Start_time', description='起始时间。', example='1.473556'),
          timeBase?: string(name='Time_base', description='时基。', example='1/90000'),
          width?: string(name='Width', description='宽。', example='848'),
        }
      ](name='VideoStreamInfoList', description='视频流信息'),
    }(name='MediaInfoProperty', description='媒体信息详情。'),
    name?: string(name='Name', description='任务名字。', example='job-name'),
    requestId?: string(name='RequestId', description='请求 ID。', example='4879B9DE-E4B6-19DC-91F5-9D5F4DCE4168'),
    scheduleConfig?: {
      pipelineId?: string(name='PipelineId', description='管道 ID。', example='e37ebee5d98b4781897f6086e89f9c56'),
      priority?: int32(name='Priority', description='任务优先级。数字越大优先级越高，取值范围：1~10', example='5'),
    }(name='ScheduleConfig', description='调度信息。'),
    status?: string(name='Status', description='任务状态 - Init: 已提交, Success: 成功, Fail: 失败', example='Init'),
    submitResultJson?: map[string]any(name='SubmitResultJson', description='任务提交信息。', example='{}'),
    submitTime?: string(name='SubmitTime', description='任务提交时间。格式为: yyyy-MM-ddTHH:mm:ssZ 。', example='2022-01-12T08:49:41Z'),
    triggerSource?: string(name='TriggerSource', description='任务来源。 API: API, WorkFlow: 工作流, Console: 控制台', example='API'),
    userData?: string(name='UserData', description='用户数据。', example='user-data'),
  }(name='MediaInfoJob', description='MediaInfoJobDTO'),
  requestId?: string(name='RequestId', description='请求 id', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model SubmitSyncMediaInfoJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitSyncMediaInfoJobResponseBody(name='body'),
}

async function submitSyncMediaInfoJob(request: SubmitSyncMediaInfoJobRequest): SubmitSyncMediaInfoJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitSyncMediaInfoJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitTranscodeJobRequest {
  inputGroup: [ 
    {
      inputUrl?: string(name='InputUrl', description='输入流路径：       仅当 type 为 Media 是才生效，让用户可以选择该媒资下的特定文件作为输入。       - 系统会检查该媒资下是否存在这个 inputUrl。', example='oss://bucket/path/to/video.mp4'),
      media: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
      type: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
    }
  ](name='InputGroup', description='任务输入组 (目前只支持一个)。', shrink='json', position='Query'),
  name?: string(name='Name', description='任务名字。', example='job-name', position='Query'),
  outputGroup: [ 
    {
      output: {
        media: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
        outputUrl?: string(name='OutputUrl', description='输入流路径：       仅当 Type 为 Media时才生效，让用户可以选择该媒资下特定文件作为输出。       支持的占位符：       - {MediaId}：媒资ID。       - {JobId}：转码子任务ID。       - {ExtName}：文件后缀，取转码模板的输出格式。       - {DestMd5}：转码输出文件的MD5值。  说明：       1、该参数必须包含{MediaId} 和 {JobId} 两个占位符。       2、输出的Bucket与MediaId所在Bucket相同。', example='oss://bucket/path/to/{MediaId}/{JobId}.mp4'),
        type: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
      }(name='Output', description='输出媒体配置'),
      processConfig: {
        combineConfigs?: [ 
          {
            audioIndex: string(name='AudioIndex', description='音频流Index', example='0 或 exclude'),
            duration?: double(name='Duration', description='输入流的持续时间。 默认为视频时长。', example='20.0'),
            start?: double(name='Start', description='输入流的开始时间。 默认为0', example='0.0'),
            videoIndex: string(name='VideoIndex', description='视频流Index', example='0 或 exclude'),
          }
        ](name='CombineConfigs', description='多输入合流配置'),
        encryption?: {
          cipherText?: string(name='CipherText', description='标准加密的密钥密文。', example='MTYi00NDU0LTg5O****'),
          decryptKeyUri?: string(name='DecryptKeyUri', description='标准加密的解密服务地址。', example='https://sample.com/path?CipherText=MTYi00NDU0LTg5O****'),
          encryptType?: string(name='EncryptType', description='加密类型。', example='PrivateEncryption'),
        }(name='Encryption', description='加密配置。'),
        imageWatermarks?: [ 
          {
            overwriteParams?: {
              dx?: string(name='Dx', description='水印图片相对输出视频的水平偏移量。
默认值：0

值有两种形式：
- 整数型代表偏移像素。
  - 范围：[8，4096]
  - 单位：px
- 小数型代表水平偏移量与输出分辨率宽的比率。
  - 范围：(0，1)
  - 支持4位小数，如0.9999，超出部分系统自动丢弃', example='10'),
              dy?: string(name='Dy', description='水印图片相对输出视频的垂直偏移量。
默认值：0

值有两种形式：
- 整数型代表偏移像素。
  - 范围[8，4096]
  - 单位：px
- 小数型代表垂直偏移量与输出分辨率高的比率。
  - 范围：(0，1)
  - 支持4位小数，如0.9999，超出部分系统自动丢弃', example='10'),
              file?: {
                media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
                type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
              }(name='File', description='水印图片文件。'),
              height?: string(name='Height', description='输出视频上水印图片高。
值有两种形式：

- 整数型代水印图片高的像素值。
  - 范围：[8,4096]
  - 单位：px
- 小数型代表相对输出视频分辨率高的比率。
  - 范围：(0，1)
  - 支持4位小数，如0.9999，超出部分系统自动丢弃。', example='32'),
              referPos?: string(name='ReferPos', description='水印的位置。
- 可取值：TopRight（右上）、TopLeft（左上）、BottomRight（右下）、BottomLeft（左下）
- 默认值：TopRight', example='TopLeft'),
              timeline?: {
                duration?: string(name='Duration', description='水印持续时间。
- 取值范围：[数字，ToEND]
- 默认值：ToEND', example='ToEND'),
                start?: string(name='Start', description='水印开始出现时间。
- 单位：秒
- 取值范围：数字
- 默认值：0', example='00:00:05'),
              }(name='Timeline', description='动态水印，显示时间设置。'),
              width?: string(name='Width', description='输出视频上水印图片宽。
值有两种形式：

- 整数型代水印图片宽的像素值。
  - 范围：[8,4096]
  - 单位：px
- 小数型代表相对输出视频分辨率宽的比率。
  - 范围：(0，1)
  - 支持4位小数，如0.9999，超出部分系统自动丢弃。', example='32'),
            }(name='OverwriteParams', description='覆盖参数, 若填写会覆盖模板对应参数'),
            templateId: string(name='TemplateId', description='模板 ID。', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }
        ](name='ImageWatermarks', description='图片水印配置'),
        isInheritTags?: boolean(name='IsInheritTags', description='是否继承输入流的 tag', example='true'),
        subtitles?: [ 
          {
            overwriteParams?: {
              charEnc?: string(name='CharEnc', description='文件 encoding 格式。', example='UTF-8'),
              file?: {
                media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
                type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
              }(name='File', description='字幕文件。'),
              format?: string(name='Format', description='字幕文件格式。', example='vtt'),
            }(name='OverwriteParams', description='覆盖参数, 若填写会覆盖模板对应参数'),
            templateId: string(name='TemplateId', description='模板 ID。', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }
        ](name='Subtitles', description='字幕压制配置'),
        textWatermarks?: [ 
          {
            overwriteParams?: {
              adaptive?: string(name='Adaptive', description='根据输出视频大小调整字体 size。 true / false, default: false', example='false'),
              borderColor?: string(name='BorderColor', description='描边颜色。
默认：Black
更多取值请参见BorderColor。', example='#006400'),
              borderWidth?: int32(name='BorderWidth', description='描边宽度。
- 默认：0
- 范围：(0,4096]', example='0'),
              content?: string(name='Content', description='水印文本，不需要 base64 encode，字符串需要 utf-8 编码。', example='测试水印'),
              fontAlpha?: string(name='FontAlpha', description='字体透明度。
- 范围：(0, 1]
- 默认：1.0', example='1.0'),
              fontColor?: string(name='FontColor', description='颜色。', example='#006400'),
              fontName?: string(name='FontName', description='字体。默认：SimSun。', example='SimSun'),
              fontSize?: int32(name='FontSize', description='字体大小。
- 默认值：16
- 范围：(4, 120)', example='16'),
              left?: string(name='Left', description='文本左边距。
- 默认：0
- 范围：[0,4096]', example='10'),
              top?: string(name='Top', description='文本上边距。
- 默认：0
- 范围：[0,4096]', example='10'),
            }(name='OverwriteParams', description='覆盖参数, 若填写会覆盖模板对应参数'),
            templateId: string(name='TemplateId', description='模板 ID。', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }
        ](name='TextWatermarks', description='文字水印配置'),
        transcode: {
          overwriteParams?: {
            audio?: {
              bitrate?: string(name='Bitrate', description='输出文件的音频码率。
         值范围：[8，1000]
         单位：Kbps
         默认值：128', example='128'),
              channels?: string(name='Channels', description='声道数。
         默认值：2', example='2'),
              codec?: string(name='Codec', description='音频编解码格式，AAC、MP3、VORBIS、FLAC。
         默认值：AAC', example='AAC'),
              profile?: string(name='Profile', description='音频编码预置。
         当Codec为 AAC时，范围aac_low、aac_he、aac_he_v2、aac_ld、aac_eld。', example='aac_low'),
              remove?: string(name='Remove', description='是否删除音频流。', example='false'),
              samplerate?: string(name='Samplerate', description='采样率。
         默认值：44100
         支持22050、32000、44100、48000、96000，
         单位：Hz', example='44100'),
              volume?: {
                integratedLoudnessTarget?: string(name='IntegratedLoudnessTarget', description='目标音量', example='-6'),
                loudnessRangeTarget?: string(name='LoudnessRangeTarget', description='音量范围', example='8'),
                method?: string(name='Method', description='音量调整方式', example='auto'),
                truePeak?: string(name='TruePeak', description='最大峰值', example='-1'),
              }(name='Volume', description='音量控制'),
            }(name='Audio', description='audio 设置'),
            container?: {
              format?: string(name='Format', description='容器格式', example='mp4'),
            }(name='Container', description='封装格式设置'),
            muxConfig?: {
              segment?: {
                duration?: string(name='Duration', description='切片时长', example='10'),
                forceSegTime?: string(name='ForceSegTime', description='强制切片时间点', example='2,3'),
              }(name='Segment', description='切片设置'),
            }(name='MuxConfig', description='封装设置'),
            tags?: map[string]string(name='Tags'),
            video?: {
              abrMax?: string(name='AbrMax', description='abr 最大码率(只有窄高1有效)
值范围[10，50000]，单位Kbps。', example='6000'),
              bitrate?: string(name='Bitrate', description='视频平均码率。
         取值范围：[10，50000]。
         单位：Kbps。', example='3000'),
              bufsize?: string(name='Bufsize', description='缓冲区大小
          值范围：[1000，128000]
          默认值：6000
          单位：Kb', example='6000'),
              codec?: string(name='Codec', description='编码格式', example='H.264'),
              crf?: string(name='Crf', description='码率-质量控制因子。
         取值范围：[0，51]。
         默认值：编码格式为H264，默认值为23。编码格式为H265，默认值为26。
         如果设置了Crf，则Bitrate的设置失效。', example='23'),
              crop?: string(name='Crop', description='视频画面裁切
         支持2种方式。
         自动检测黑边并裁切，设置为“border”
         自定义裁切，参数格式：width:height:left:top。
         示例：1280:800:0:140', example='1280:800:0:140'),
              fps?: string(name='Fps', description='帧率。
         取值范围：(0,60]。
         当输入文件帧率超过60时取60。
         默认值：取输入文件帧率', example='25'),
              gop?: string(name='Gop', description='关键帧间最大帧数。
         取值范围：[1，1080000]。
         默认值：250。', example='250'),
              height?: string(name='Height', description='高。
         取值范围：[128,4096]。
         单位：px。
         默认值：视频原始高度。', example='1080'),
              longShortMode?: string(name='LongShortMode', description='是否开启横竖屏自适应（即：长短边模式）', example='false'),
              maxrate?: string(name='Maxrate', description='视频码率峰值
         值范围[10，50000]，单位Kbps。', example='9000'),
              pad?: string(name='Pad', description='视频贴黑边
         参数格式：width:height:left:top。
         示例：1280:800:0:140', example='1280:800:0:140'),
              pixFmt?: string(name='PixFmt', description='视频颜色格式。
         范围：yuv420p，yuvj420p等标准颜色格式。', example='yuv420p'),
              preset?: string(name='Preset', description='视频算法器预置。只有H264支持该参数。
支持veryfast、fast、medium、slow、slower。
默认值：medium。', example='medium'),
              profile?: string(name='Profile', description='编码级别。
         支持baseline、main、high。
         baseline：针对移动设备。
         main：针对标准分辨率设备。
         high：针对高分辨率设备。
         默认值：high。', example='Main'),
              remove?: string(name='Remove', description='是否去掉视频', example='false'),
              scanMode?: string(name='ScanMode', description='扫描模式。
支持interlaced、progressive。', example='progressive'),
              width?: string(name='Width', description='宽。
         取值范围：[128,4096]。
         单位：px。
         默认值：视频原始宽度。', example='1920'),
            }(name='Video', description='video 设置'),
          }(name='OverwriteParams', description='覆盖参数, 若填写会覆盖模板对应参数'),
          templateId: string(name='TemplateId', description='模板 ID。', example='9547c6ad97cb4f2aaa29683ebd18d410'),
        }(name='Transcode', description='转码配置'),
      }(name='ProcessConfig', description='任务处理配置'),
    }
  ](name='OutputGroup', description='任务输出组。', shrink='json', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', description='管道 ID。', example='e37ebee5d98b4781897f6086e89f9c56'),
    priority?: int32(name='Priority', description='任务优先级。数字越大优先级越高，取值范围：1~10', example='5'),
  }(name='ScheduleConfig', description='任务调度信息。', example='job-name', shrink='json', position='Query'),
  userData?: string(name='UserData', description='用户数据。', example='user-data', position='Query'),
}

model SubmitTranscodeJobResponseBody = {
  requestId?: string(name='RequestId', description='请求 id', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
  transcodeParentJob?: {
    createTime?: string(name='CreateTime', description='任务创建时间。格式为: yyyy-MM-ddTHH:mm:ssZ 。', example='2022-01-12T08:49:41Z'),
    finishTime?: string(name='FinishTime', description='任务结束时间。格式为: yyyy-MM-ddTHH:mm:ssZ 。', example='2022-01-12T08:49:41Z'),
    inputGroup?: [ 
      {
        media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
        type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
      }
    ](name='InputGroup', description='任务输入组 (目前只支持单个输入)。'),
    jobCount?: int32(name='JobCount', description='子任务数量。', example='1'),
    name?: string(name='Name', description='任务名。', example='transcode-job'),
    outputGroup?: [ 
      {
        output?: {
          media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
          type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
        }(name='Output', description='输出媒体配置'),
        processConfig?: {
          combineConfigs?: [ 
            {
              audioIndex: string(name='AudioIndex', description='音频流Index', example='0 或 exclude'),
              duration?: double(name='Duration', description='输入流的持续时间。 默认为视频时长。', example='20.0'),
              start?: double(name='Start', description='输入流的开始时间。 默认为0', example='0.0'),
              videoIndex: string(name='VideoIndex', description='视频流Index', example='0 或 exclude'),
            }
          ](name='CombineConfigs', description='多输入合流配置'),
          encryption?: {
            cipherText?: string(name='CipherText', description='标准加密的密钥密文。', example='MTYi00NDU0LTg5O****'),
            decryptKeyUri?: string(name='DecryptKeyUri', description='标准加密的解密服务地址。', example='https://sample.com/path?CipherText=MTYi00NDU0LTg5O****'),
            encryptType?: string(name='EncryptType', description='加密类型。', example='PrivateEncryption'),
          }(name='Encryption', description='加密配置。'),
          imageWatermarks?: [ 
            {
              overwriteParams?: {
                dx?: string(name='Dx', description='水印图片相对输出视频的水平偏移量。
默认值：0

值有两种形式：
- 整数型代表偏移像素。
  - 范围：[8，4096]
  - 单位：px
- 小数型代表水平偏移量与输出分辨率宽的比率。
  - 范围：(0，1)
  - 支持4位小数，如0.9999，超出部分系统自动丢弃', example='10'),
                dy?: string(name='Dy', description='水印图片相对输出视频的垂直偏移量。
默认值：0

值有两种形式：
- 整数型代表偏移像素。
  - 范围[8，4096]
  - 单位：px
- 小数型代表垂直偏移量与输出分辨率高的比率。
  - 范围：(0，1)
  - 支持4位小数，如0.9999，超出部分系统自动丢弃', example='10'),
                file?: {
                  media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
                }(name='File', description='水印图片文件。'),
                height?: string(name='Height', description='输出视频上水印图片高。
值有两种形式：

- 整数型代水印图片高的像素值。
  - 范围：[8,4096]
  - 单位：px
- 小数型代表相对输出视频分辨率高的比率。
  - 范围：(0，1)
  - 支持4位小数，如0.9999，超出部分系统自动丢弃。', example='32'),
                referPos?: string(name='ReferPos', description='水印的位置。
- 可取值：TopRight（右上）、TopLeft（左上）、BottomRight（右下）、BottomLeft（左下）
- 默认值：TopRight', example='TopLeft'),
                timeline?: {
                  duration?: string(name='Duration', description='水印持续时间。
- 取值范围：[数字，ToEND]
- 默认值：ToEND', example='ToEND'),
                  start?: string(name='Start', description='水印开始出现时间。
- 单位：秒
- 取值范围：数字
- 默认值：0', example='00:00:05'),
                }(name='Timeline', description='动态水印，显示时间设置。'),
                width?: string(name='Width', description='输出视频上水印图片宽。
值有两种形式：

- 整数型代水印图片宽的像素值。
  - 范围：[8,4096]
  - 单位：px
- 小数型代表相对输出视频分辨率宽的比率。
  - 范围：(0，1)
  - 支持4位小数，如0.9999，超出部分系统自动丢弃。', example='32'),
              }(name='OverwriteParams', description='覆盖参数, 若填写会覆盖模板对应参数'),
              templateId?: string(name='TemplateId', description='模板 ID。', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='ImageWatermarks', description='图片水印配置'),
          subtitles?: [ 
            {
              overwriteParams?: {
                charEnc?: string(name='CharEnc', description='文件 encoding 格式。', example='UTF-8'),
                file?: {
                  media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
                }(name='File', description='字幕文件。'),
                format?: string(name='Format', description='字幕文件格式。', example='vtt'),
              }(name='OverwriteParams', description='覆盖参数, 若填写会覆盖模板对应参数'),
              templateId?: string(name='TemplateId', description='模板 ID。', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='Subtitles', description='字幕压制配置'),
          textWatermarks?: [ 
            {
              overwriteParams?: {
                adaptive?: string(name='Adaptive', description='根据输出视频大小调整字体 size。 true / false, default: false', example='false'),
                borderColor?: string(name='BorderColor', description='描边颜色。
默认：Black
更多取值请参见BorderColor。', example='#006400'),
                borderWidth?: int32(name='BorderWidth', description='描边宽度。
- 默认：0
- 范围：(0,4096]', example='0'),
                content?: string(name='Content', description='水印文本，不需要 base64 encode，字符串需要 utf-8 编码。', example='测试水印'),
                fontAlpha?: string(name='FontAlpha', description='字体透明度。
- 范围：(0, 1]
- 默认：1.0', example='1.0'),
                fontColor?: string(name='FontColor', description='颜色。', example='#006400'),
                fontName?: string(name='FontName', description='字体。默认：SimSun。', example='SimSun'),
                fontSize?: int32(name='FontSize', description='字体大小。
- 默认值：16
- 范围：(4, 120)', example='16'),
                left?: string(name='Left', description='文本左边距。
- 默认：0
- 范围：[0,4096]', example='10'),
                top?: string(name='Top', description='文本上边距。
- 默认：0
- 范围：[0,4096]', example='10'),
              }(name='OverwriteParams', description='覆盖参数, 若填写会覆盖模板对应参数'),
              templateId?: string(name='TemplateId', description='模板 ID。', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='TextWatermarks', description='文字水印配置'),
          transcode?: {
            overwriteParams?: {
              audio?: {
                bitrate?: string(name='Bitrate', description='输出文件的音频码率。
         值范围：[8，1000]
         单位：Kbps
         默认值：128', example='128'),
                channels?: string(name='Channels', description='声道数。
         默认值：2', example='2'),
                codec?: string(name='Codec', description='音频编解码格式，AAC、MP3、VORBIS、FLAC。
         默认值：AAC', example='AAC'),
                profile?: string(name='Profile', description='音频编码预置。
         当Codec为 AAC时，范围aac_low、aac_he、aac_he_v2、aac_ld、aac_eld。', example='aac_low'),
                remove?: string(name='Remove', description='是否删除音频流。', example='false'),
                samplerate?: string(name='Samplerate', description='采样率。
         默认值：44100
         支持22050、32000、44100、48000、96000，
         单位：Hz', example='44100'),
                volume?: {
                  integratedLoudnessTarget?: string(name='IntegratedLoudnessTarget', description='目标音量', example='-6'),
                  loudnessRangeTarget?: string(name='LoudnessRangeTarget', description='音量范围', example='8'),
                  method?: string(name='Method', description='音量调整方式', example='auto'),
                  truePeak?: string(name='TruePeak', description='最大峰值', example='-1'),
                }(name='Volume', description='音量控制'),
              }(name='Audio', description='audio 设置'),
              container?: {
                format?: string(name='Format', description='容器格式', example='mp4'),
              }(name='Container', description='封装格式设置'),
              muxConfig?: {
                segment?: {
                  duration?: string(name='Duration', description='切片时长', example='10'),
                  forceSegTime?: string(name='ForceSegTime', description='强制切片时间点', example='2,3'),
                }(name='Segment', description='切片设置'),
              }(name='MuxConfig', description='封装设置'),
              video?: {
                abrMax?: string(name='AbrMax', description='abr 最大码率(只有窄高1有效)
值范围[10，50000]，单位Kbps。', example='6000'),
                bitrate?: string(name='Bitrate', description='视频平均码率。
         取值范围：[10，50000]。
         单位：Kbps。', example='3000'),
                bufsize?: string(name='Bufsize', description='缓冲区大小
          值范围：[1000，128000]
          默认值：6000
          单位：Kb', example='6000'),
                codec?: string(name='Codec', description='编码格式', example='H.264'),
                crf?: string(name='Crf', description='码率-质量控制因子。
         取值范围：[0，51]。
         默认值：编码格式为H264，默认值为23。编码格式为H265，默认值为26。
         如果设置了Crf，则Bitrate的设置失效。', example='23'),
                crop?: string(name='Crop', description='视频画面裁切
         支持2种方式。
         自动检测黑边并裁切，设置为“border”
         自定义裁切，参数格式：width:height:left:top。
         示例：1280:800:0:140', example='1280:800:0:140'),
                fps?: string(name='Fps', description='帧率。
         取值范围：(0,60]。
         当输入文件帧率超过60时取60。
         默认值：取输入文件帧率', example='25'),
                gop?: string(name='Gop', description='关键帧间最大帧数。
         取值范围：[1，1080000]。
         默认值：250。', example='250'),
                height?: string(name='Height', description='高。
         取值范围：[128,4096]。
         单位：px。
         默认值：视频原始高度。', example='1080'),
                longShortMode?: string(name='LongShortMode', description='是否开启横竖屏自适应（即：长短边模式）', example='false'),
                maxrate?: string(name='Maxrate', description='视频码率峰值
         值范围[10，50000]，单位Kbps。', example='9000'),
                pad?: string(name='Pad', description='视频贴黑边
         参数格式：width:height:left:top。
         示例：1280:800:0:140', example='1280:800:0:140'),
                pixFmt?: string(name='PixFmt', description='视频颜色格式。
         范围：yuv420p，yuvj420p等标准颜色格式。', example='yuv420p'),
                preset?: string(name='Preset', description='视频算法器预置。只有H264支持该参数。
支持veryfast、fast、medium、slow、slower。
默认值：medium。', example='medium'),
                profile?: string(name='Profile', description='编码级别。
         支持baseline、main、high。
         baseline：针对移动设备。
         main：针对标准分辨率设备。
         high：针对高分辨率设备。
         默认值：high。', example='Main'),
                remove?: string(name='Remove', description='是否去掉视频', example='false'),
                scanMode?: string(name='ScanMode', description='扫描模式。
支持interlaced、progressive。', example='progressive'),
                width?: string(name='Width', description='宽。
         取值范围：[128,4096]。
         单位：px。
         默认值：视频原始宽度。', example='1920'),
              }(name='Video', description='video 设置'),
            }(name='OverwriteParams', description='覆盖参数, 若填写会覆盖模板对应参数'),
            templateId?: string(name='TemplateId', description='模板 ID。', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }(name='Transcode', description='转码配置'),
        }(name='ProcessConfig', description='任务处理配置'),
      }
    ](name='OutputGroup', description='任务输出组。'),
    parentJobId?: string(name='ParentJobId', description='主任务 ID。', example='8b2198504dd340b7b3c9842a74fc9baa'),
    percent?: int32(name='Percent', description='任务完成百分比。', example='0'),
    requestId?: string(name='RequestId', description='提交任务时请求 ID。', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
    scheduleConfig?: {
      pipelineId?: string(name='PipelineId', description='管道 ID。', example='e37ebee5d98b4781897f6086e89f9c56'),
      priority?: int32(name='Priority', description='任务优先级。数字越大优先级越高，取值范围：1~10', example='5'),
    }(name='ScheduleConfig', description='任务调度配置。'),
    status?: string(name='Status', description='任务状态。 Success: 所有子任务完成后，有一个子任务则为成功, Fail: 所有子任务失败', example='Success'),
    submitTime?: string(name='SubmitTime', description='任务提交时间。格式为: yyyy-MM-ddTHH:mm:ssZ 。', example='2022-01-12T08:49:41Z'),
    transcodeJobList?: [ 
      {
        createTime?: string(name='CreateTime', description='任务创建时间', example='2022-01-12T08:49:41Z'),
        finishTime?: string(name='FinishTime', description='任务结束时间', example='2022-01-12T08:49:41Z'),
        inputGroup?: [ 
          {
            inputUrl?: string(name='InputUrl', example='oss://bucket/path/to/video.mp4'),
            media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
            type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
          }
        ](name='InputGroup', description='任务输入组 (目前只支持单个输入)'),
        jobId?: string(name='JobId', description='子任务 ID', example='7d6a7e0d4db2457a8d45ff5d43e1bf0a'),
        jobIndex?: int32(name='JobIndex', description='子任务在整个任务中的索引号', example='0'),
        name?: string(name='Name', description='任务名', example='transcode-job'),
        outFileMeta?: {
          audioStreamInfoList?: [ 
            {
              bitrate?: string(name='Bitrate', description='码率。', example='0.f'),
              channelLayout?: string(name='ChannelLayout', description='声道布局。', example='stereo'),
              channels?: string(name='Channels', description='声道数。', example='2'),
              codecLongName?: string(name='CodecLongName', description='编码格式名。', example='AAC (Advanced Audio Coding)'),
              codecName?: string(name='CodecName', description='编码格式。', example='aac'),
              codecTag?: string(name='CodecTag', description='编码器标签。', example='0x000f'),
              codecTagString?: string(name='CodecTagString', description='编码器标签名。', example='[15][0][0][0]'),
              codecTimeBase?: string(name='CodecTimeBase', description='编码器时间基。', example='1/44100'),
              duration?: string(name='Duration', description='时长（单位: 秒）。', example='403.039989'),
              index?: string(name='Index', description='流序号。', example='1'),
              lang?: string(name='Lang', description='语言。', example='cn'),
              sampleFmt?: string(name='SampleFmt', description='采样格式。', example='fltp'),
              sampleRate?: string(name='SampleRate', description='采样率（单位: Hz）。', example='44100'),
              startTime?: string(name='StartTime', description='开始时间。', example='1.473556'),
              timebase?: string(name='Timebase', description='时间基。', example='1/90000'),
            }
          ](name='AudioStreamInfoList', description='音频流信息'),
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', description='视频码率。', example='888.563'),
            duration?: string(name='Duration', description='视频时长（单位: 秒）。', example='403.039999'),
            fileName?: string(name='FileName', description='文件名。', example='file.m3u8'),
            fileSize?: string(name='FileSize', description='文件大小。单位：Byte。', example='31737'),
            fileStatus?: string(name='FileStatus', description='文件状态。', example='Normal'),
            fileType?: string(name='FileType', description='文件类型。取值: source_file, transcode_file', example='source_file'),
            fileUrl?: string(name='FileUrl', description='文件 URL。', example='http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8'),
            formatName?: string(name='FormatName', description='视频格式名称。', example='hls,applehttp'),
            height?: string(name='Height', description='高。', example='478'),
            mediaId?: string(name='MediaId', description='媒资 ID。', example='73e07de0f77171eca3fc7035d0b26402'),
            region?: string(name='Region', description='文件所在区域。', example='cn-shanghai'),
            width?: string(name='Width', description='宽。', example='848'),
          }(name='FileBasicInfo', description='基础文件信息'),
          videoStreamInfoList?: [ 
            {
              avgFps?: string(name='Avg_fps', description='平均帧率。', example='25.0'),
              bitRate?: string(name='Bit_rate', description='码率。', example='888.563'),
              codecLongName?: string(name='Codec_long_name', description='编码格式名。', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
              codecName?: string(name='Codec_name', description='编码格式。', example='h264'),
              codecTag?: string(name='Codec_tag', description='编码格式标记。', example='0x001b'),
              codecTagString?: string(name='Codec_tag_string', description='编码格式标记文本。', example='[27][0][0][0]'),
              codecTimeBase?: string(name='Codec_time_base', example='1/50'),
              dar?: string(name='Dar', description='图像显示宽高比。', example='16:9'),
              duration?: string(name='Duration', description='时长（单位: 秒）。', example='403.039989'),
              fps?: string(name='Fps', description='帧率。', example='25.0'),
              hasBFrames?: string(name='Has_b_frames', description='是否有B帧。
取值: 
- 0: 没有 B 帧, 
- 1: 有一个 B 帧, 
- 2: 有多个连续 B 帧。', example='2'),
              height?: string(name='Height', description='高。', example='478'),
              index?: string(name='Index', description='流序号。', example='0'),
              lang?: string(name='Lang', description='语言。', example='cn'),
              level?: string(name='Level', description='编码等级。', example='31'),
              numFrames?: string(name='NumFrames', description='总帧数。', example='10040'),
              pixFmt?: string(name='PixFmt', description='颜色存储格式。', example='yuv420p'),
              profile?: string(name='Profile', description='编码器预设。', example='High'),
              rotate?: string(name='Rotate', description='视频画面旋转角度。
取值 0, 90, 180, 270。
默认值 0', example='0'),
              sar?: string(name='Sar', description='采集点数宽高比。', example='478:477'),
              startTime?: string(name='Start_time', description='起始时间。', example='1.473556'),
              timeBase?: string(name='Time_base', description='时基。', example='1/90000'),
              width?: string(name='Width', description='宽。', example='848'),
            }
          ](name='VideoStreamInfoList', description='视频流信息'),
        }(name='OutFileMeta', description='任务生成视频 Media 信息'),
        output?: {
          media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
          outputUrl?: string(name='OutputUrl', example='oss://bucket/path/to/{MediaId}/{JobId}.mp4'),
          type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
        }(name='Output', description='输出媒体配置'),
        parentJobId?: string(name='ParentJobId', description='主任务 ID', example='8b2198504dd340b7b3c9842a74fc9baa'),
        processConfig?: {
          combineConfigs?: [ 
            {
              audioIndex: string(name='AudioIndex', description='音频流Index', example='0 或 exclude'),
              duration?: double(name='Duration', description='输入流的持续时间。 默认为视频时长。', example='20.0'),
              start?: double(name='Start', description='输入流的开始时间。 默认为0', example='0.0'),
              videoIndex: string(name='VideoIndex', description='视频流Index', example='0 或 exclude'),
            }
          ](name='CombineConfigs', description='多输入合流配置'),
          encryption?: {
            cipherText?: string(name='CipherText', description='标准加密的密钥密文。', example='MTYi00NDU0LTg5O****'),
            decryptKeyUri?: string(name='DecryptKeyUri', description='标准加密的解密服务地址。', example='https://sample.com/path?CipherText=MTYi00NDU0LTg5O****'),
            encryptType?: string(name='EncryptType', description='加密类型。', example='PrivateEncryption'),
          }(name='Encryption', description='加密配置。'),
          imageWatermarks?: [ 
            {
              overwriteParams?: {
                dx?: string(name='Dx', description='水印图片相对输出视频的水平偏移量。
默认值：0

值有两种形式：
- 整数型代表偏移像素。
  - 范围：[8，4096]
  - 单位：px
- 小数型代表水平偏移量与输出分辨率宽的比率。
  - 范围：(0，1)
  - 支持4位小数，如0.9999，超出部分系统自动丢弃', example='10'),
                dy?: string(name='Dy', description='水印图片相对输出视频的垂直偏移量。
默认值：0

值有两种形式：
- 整数型代表偏移像素。
  - 范围[8，4096]
  - 单位：px
- 小数型代表垂直偏移量与输出分辨率高的比率。
  - 范围：(0，1)
  - 支持4位小数，如0.9999，超出部分系统自动丢弃', example='10'),
                file?: {
                  media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
                }(name='File', description='水印图片文件。'),
                height?: string(name='Height', description='输出视频上水印图片高。
值有两种形式：

- 整数型代水印图片高的像素值。
  - 范围：[8,4096]
  - 单位：px
- 小数型代表相对输出视频分辨率高的比率。
  - 范围：(0，1)
  - 支持4位小数，如0.9999，超出部分系统自动丢弃。', example='32'),
                referPos?: string(name='ReferPos', description='水印的位置。
- 可取值：TopRight（右上）、TopLeft（左上）、BottomRight（右下）、BottomLeft（左下）
- 默认值：TopRight', example='TopLeft'),
                timeline?: {
                  duration?: string(name='Duration', description='水印持续时间。
- 取值范围：[数字，ToEND]
- 默认值：ToEND', example='ToEND'),
                  start?: string(name='Start', description='水印开始出现时间。
- 单位：秒
- 取值范围：数字
- 默认值：0', example='00:00:05'),
                }(name='Timeline', description='动态水印，显示时间设置。'),
                width?: string(name='Width', description='输出视频上水印图片宽。
值有两种形式：

- 整数型代水印图片宽的像素值。
  - 范围：[8,4096]
  - 单位：px
- 小数型代表相对输出视频分辨率宽的比率。
  - 范围：(0，1)
  - 支持4位小数，如0.9999，超出部分系统自动丢弃。', example='32'),
              }(name='OverwriteParams', description='覆盖参数, 若填写会覆盖模板对应参数'),
              templateId?: string(name='TemplateId', description='模板 ID。', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='ImageWatermarks', description='图片水印配置'),
          isInheritTags?: string(name='IsInheritTags', example='true'),
          subtitles?: [ 
            {
              overwriteParams?: {
                charEnc?: string(name='CharEnc', description='文件 encoding 格式。', example='UTF-8'),
                file?: {
                  media?: string(name='Media', description='媒体值：
      type 为 OSS 时，为 URL, 支持 OSS 协议和 HTTP 协议；
      type 为 Media 时，为媒资 ID。', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', description='媒体对象类型。
取值： 
- OSS: OSS文件。
- Media: 媒资 ID。', example='OSS'),
                }(name='File', description='字幕文件。'),
                format?: string(name='Format', description='字幕文件格式。', example='vtt'),
              }(name='OverwriteParams', description='覆盖参数, 若填写会覆盖模板对应参数'),
              templateId?: string(name='TemplateId', description='模板 ID。', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='Subtitles', description='字幕压制配置'),
          textWatermarks?: [ 
            {
              overwriteParams?: {
                adaptive?: string(name='Adaptive', description='根据输出视频大小调整字体 size。 true / false, default: false', example='false'),
                borderColor?: string(name='BorderColor', description='描边颜色。
默认：Black
更多取值请参见BorderColor。', example='#006400'),
                borderWidth?: int32(name='BorderWidth', description='描边宽度。
- 默认：0
- 范围：(0,4096]', example='0'),
                content?: string(name='Content', description='水印文本，不需要 base64 encode，字符串需要 utf-8 编码。', example='测试水印'),
                fontAlpha?: string(name='FontAlpha', description='字体透明度。
- 范围：(0, 1]
- 默认：1.0', example='1.0'),
                fontColor?: string(name='FontColor', description='颜色。', example='#006400'),
                fontName?: string(name='FontName', description='字体。默认：SimSun。', example='SimSun'),
                fontSize?: int32(name='FontSize', description='字体大小。
- 默认值：16
- 范围：(4, 120)', example='16'),
                left?: string(name='Left', description='文本左边距。
- 默认：0
- 范围：[0,4096]', example='10'),
                top?: string(name='Top', description='文本上边距。
- 默认：0
- 范围：[0,4096]', example='10'),
              }(name='OverwriteParams', description='覆盖参数, 若填写会覆盖模板对应参数'),
              templateId?: string(name='TemplateId', description='模板 ID。', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='TextWatermarks', description='文字水印配置'),
          transcode?: {
            overwriteParams?: {
              audio?: {
                bitrate?: string(name='Bitrate', description='输出文件的音频码率。
         值范围：[8，1000]
         单位：Kbps
         默认值：128', example='128'),
                channels?: string(name='Channels', description='声道数。
         默认值：2', example='2'),
                codec?: string(name='Codec', description='音频编解码格式，AAC、MP3、VORBIS、FLAC。
         默认值：AAC', example='AAC'),
                profile?: string(name='Profile', description='音频编码预置。
         当Codec为 AAC时，范围aac_low、aac_he、aac_he_v2、aac_ld、aac_eld。', example='aac_low'),
                remove?: string(name='Remove', description='是否删除音频流。', example='false'),
                samplerate?: string(name='Samplerate', description='采样率。
         默认值：44100
         支持22050、32000、44100、48000、96000，
         单位：Hz', example='44100'),
                volume?: {
                  integratedLoudnessTarget?: string(name='IntegratedLoudnessTarget', description='目标音量', example='-6'),
                  loudnessRangeTarget?: string(name='LoudnessRangeTarget', description='音量范围', example='8'),
                  method?: string(name='Method', description='音量调整方式', example='auto'),
                  truePeak?: string(name='TruePeak', description='最大峰值', example='-1'),
                }(name='Volume', description='音量控制'),
              }(name='Audio', description='audio 设置'),
              container?: {
                format?: string(name='Format', description='容器格式', example='mp4'),
              }(name='Container', description='封装格式设置'),
              muxConfig?: {
                segment?: {
                  duration?: string(name='Duration', description='切片时长', example='10'),
                  forceSegTime?: string(name='ForceSegTime', description='强制切片时间点', example='2,3'),
                }(name='Segment', description='切片设置'),
              }(name='MuxConfig', description='封装设置'),
              tags?: map[string]any(name='Tags'),
              video?: {
                abrMax?: string(name='AbrMax', description='abr 最大码率(只有窄高1有效)
值范围[10，50000]，单位Kbps。', example='6000'),
                bitrate?: string(name='Bitrate', description='视频平均码率。
         取值范围：[10，50000]。
         单位：Kbps。', example='3000'),
                bufsize?: string(name='Bufsize', description='缓冲区大小
          值范围：[1000，128000]
          默认值：6000
          单位：Kb', example='6000'),
                codec?: string(name='Codec', description='编码格式', example='H.264'),
                crf?: string(name='Crf', description='码率-质量控制因子。
         取值范围：[0，51]。
         默认值：编码格式为H264，默认值为23。编码格式为H265，默认值为26。
         如果设置了Crf，则Bitrate的设置失效。', example='23'),
                crop?: string(name='Crop', description='视频画面裁切
         支持2种方式。
         自动检测黑边并裁切，设置为“border”
         自定义裁切，参数格式：width:height:left:top。
         示例：1280:800:0:140', example='1280:800:0:140'),
                fps?: string(name='Fps', description='帧率。
         取值范围：(0,60]。
         当输入文件帧率超过60时取60。
         默认值：取输入文件帧率', example='25'),
                gop?: string(name='Gop', description='关键帧间最大帧数。
         取值范围：[1，1080000]。
         默认值：250。', example='250'),
                height?: string(name='Height', description='高。
         取值范围：[128,4096]。
         单位：px。
         默认值：视频原始高度。', example='1080'),
                longShortMode?: string(name='LongShortMode', description='是否开启横竖屏自适应（即：长短边模式）', example='false'),
                maxrate?: string(name='Maxrate', description='视频码率峰值
         值范围[10，50000]，单位Kbps。', example='9000'),
                pad?: string(name='Pad', description='视频贴黑边
         参数格式：width:height:left:top。
         示例：1280:800:0:140', example='1280:800:0:140'),
                pixFmt?: string(name='PixFmt', description='视频颜色格式。
         范围：yuv420p，yuvj420p等标准颜色格式。', example='yuv420p'),
                preset?: string(name='Preset', description='视频算法器预置。只有H264支持该参数。
支持veryfast、fast、medium、slow、slower。
默认值：medium。', example='medium'),
                profile?: string(name='Profile', description='编码级别。
         支持baseline、main、high。
         baseline：针对移动设备。
         main：针对标准分辨率设备。
         high：针对高分辨率设备。
         默认值：high。', example='Main'),
                remove?: string(name='Remove', description='是否去掉视频', example='false'),
                scanMode?: string(name='ScanMode', description='扫描模式。
支持interlaced、progressive。', example='progressive'),
                width?: string(name='Width', description='宽。
         取值范围：[128,4096]。
         单位：px。
         默认值：视频原始宽度。', example='1920'),
              }(name='Video', description='video 设置'),
            }(name='OverwriteParams', description='覆盖参数, 若填写会覆盖模板对应参数'),
            templateId?: string(name='TemplateId', description='模板 ID。', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }(name='Transcode', description='转码配置'),
        }(name='ProcessConfig', description='转码处理配置'),
        requestId?: string(name='RequestId', description='提交任务时请求 ID', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
        scheduleConfig?: {
          pipelineId?: string(name='PipelineId', description='管道 ID。', example='e37ebee5d98b4781897f6086e89f9c56'),
          priority?: int32(name='Priority', description='任务优先级。数字越大优先级越高，取值范围：1~10', example='5'),
        }(name='ScheduleConfig', description='任务调度信息'),
        status?: string(name='Status', description='转码任务任务状态 - Init: 已提交, Processing: 转码中, Success: 转码成功, Fail: 转码失败, Deleted: 已删除', example='Init'),
        submitResultJson?: map[string]any(name='SubmitResultJson', description='任务提交结果', example='{}'),
        submitTime?: string(name='SubmitTime', description='任务提交时间', example='2022-01-12T08:49:41Z'),
        userData?: string(name='UserData', description='用户数据', example='user-data'),
      }
    ](name='TranscodeJobList', description='子任务列表'),
    triggerSource?: string(name='TriggerSource', description='任务来源。 API: API, WorkFlow: 工作流, Console: 控制台', example='API'),
    userData?: string(name='UserData', description='用户数据。', example='user-data'),
  }(name='TranscodeParentJob', description='TranscodeParentJobWithSubJobDTO'),
}

model SubmitTranscodeJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitTranscodeJobResponseBody(name='body'),
}

async function submitTranscodeJob(request: SubmitTranscodeJobRequest): SubmitTranscodeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitTranscodeJob', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCategoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  cateId: long(name='CateId', example='43', position='Query'),
  cateName: string(name='CateName', position='Query'),
}

model UpdateCategoryResponseBody = {
  requestId?: string(name='RequestId', example='4E84BE44-58A7-****-****-FBEBEA16EF94'),
}

model UpdateCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCategoryResponseBody(name='body'),
}

async function updateCategory(request: UpdateCategoryRequest): UpdateCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCategory', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCustomTemplateRequest {
  name?: string(name='Name', description='模板名称', example='test-template', position='Query'),
  templateConfig?: string(name='TemplateConfig', description='模板参数', example='{"param": "sample"}', position='Query'),
  templateId: string(name='TemplateId', description='模板ID', example='****96e8864746a0b6f3****', position='Query'),
}

model UpdateCustomTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', description='是否成功', example='true'),
}

model UpdateCustomTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCustomTemplateResponseBody(name='body'),
}

async function updateCustomTemplate(request: UpdateCustomTemplateRequest): UpdateCustomTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCustomTemplate', 'POST', '/', 'json', false, 'json', request);
}

model UpdateEditingProjectRequest {
  businessStatus?: string(name='BusinessStatus', example='Reserving', position='Query'),
  clipsParam?: string(name='ClipsParam', description='模板对应的素材参数', position='Query'),
  coverURL?: string(name='CoverURL', description='云剪辑工程封面', example='https://****.com/6AB4D0E1E1C7446888****.png', position='Query'),
  description?: string(name='Description', description='云剪辑工程描述', example='testtimeline001desciption', position='Query'),
  projectId: string(name='ProjectId', description='云剪辑工程ID', example='****4ee4b97e27b525142a6b2****', position='Query'),
  templateId?: string(name='TemplateId', description='模板Id', example='****96e8864746a0b6f3****', position='Query'),
  timeline?: string(name='Timeline', description='云剪辑工程时间线，Json格式', example='{"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****cc3308ac500ca54328bc3443****"},{"MediaId":"****da87a9cff64*d88bc6d8326e4****"}]}]}', position='Query'),
  title?: string(name='Title', description='云剪辑工程标题', example='testtimeline', position='Query'),
}

model UpdateEditingProjectResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='****25818875-5F78-4AF6-D7393642CA58****'),
}

model UpdateEditingProjectResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEditingProjectResponseBody(name='body'),
}

async function updateEditingProject(request: UpdateEditingProjectRequest): UpdateEditingProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEditingProject', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLiveRecordTemplateRequest {
  name: string(name='Name', description='代表资源名称的资源属性字段', example='test template', position='Body'),
  recordFormat: [ 
    {
      cycleDuration?: int32(name='CycleDuration', example='3600'),
      format: string(name='Format', description='格式', example='m3u8'),
      ossObjectPrefix?: string(name='OssObjectPrefix', description='Oss对象名，不包含后缀', example='record/{JobId}/{Sequence}_{EscapedStartTime}_{EscapedEndTime}'),
      sliceDuration?: int32(name='SliceDuration', description='切片时长', example='30'),
      sliceOssObjectPrefix?: string(name='SliceOssObjectPrefix', description='切片Oss对象名，不包含后缀', example='record/{JobId}/{UnixTimestamp}_{Sequence}'),
    }
  ](name='RecordFormat', description='录制格式', shrink='json', position='Body'),
  templateId: string(name='TemplateId', description='代表资源一级ID的资源属性字段', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66', position='Body'),
}

model UpdateLiveRecordTemplateResponseBody = {
  requestId?: string(name='RequestId', description='代表资源一级ID的资源属性字段', example='0F3D5C03-4B6E-5F40-B7F6-B1956776E7D3'),
}

model UpdateLiveRecordTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveRecordTemplateResponseBody(name='body'),
}

async function updateLiveRecordTemplate(request: UpdateLiveRecordTemplateRequest): UpdateLiveRecordTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLiveRecordTemplate', 'POST', '/', 'json', true, 'form', request);
}

model UpdateLiveSnapshotTemplateRequest {
  overwriteFormat?: string(name='OverwriteFormat', description='覆盖截图文件格式，不能以“/”开头，目前只支持.jpg后缀，最大长度为255。
支持占位符：
{JobId}：截图任务ID
不允许填写{UnixTimestamp}、{Sequence}等占位符
覆盖截图和序列截图的文件格式至少要设置一个。', example='snapshot/{JobId}.jpg', position='Body'),
  sequenceFormat?: string(name='SequenceFormat', description='序列截图文件格式，不能以“/”开头，目前只支持.jpg后缀，最大长度为255。
支持占位符：
{JobId}：截图任务ID
{Date}：截图日期
{UnixTimestamp}：时间戳
{Sequence}：序列号
其中{UnixTimestamp}、{Sequence}至少要填写一个。
覆盖截图和序列截图的文件格式至少要设置一个。', example='snapshot/{JobId}/{UnixTimestamp}.jpg', position='Body'),
  templateId: string(name='TemplateId', description='模板ID。', example='****a046-263c-3560-978a-fb287782****', position='Body'),
  templateName: string(name='TemplateName', description='模板名称。', position='Body'),
  timeInterval: int32(name='TimeInterval', description='截图时间间隔，[5, 3600]。', example='5', position='Body'),
}

model UpdateLiveSnapshotTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。', example='******11-DB8D-4A9A-875B-275798******'),
}

model UpdateLiveSnapshotTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveSnapshotTemplateResponseBody(name='body'),
}

async function updateLiveSnapshotTemplate(request: UpdateLiveSnapshotTemplateRequest): UpdateLiveSnapshotTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLiveSnapshotTemplate', 'POST', '/', 'json', true, 'form', request);
}

model UpdateLiveTranscodeJobRequest {
  jobId: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  name?: string(name='Name', example='mytest3', minLength=1, maxLength=128, position='Query'),
  streamInput?: {
    inputUrl: string(name='InputUrl', example='rtmp://mydomain/app/stream1'),
    type: string(name='Type', example='rtmp'),
  }(name='StreamInput', shrink='json', position='Query'),
  timedConfig?: {
    endTime?: string(name='EndTime', example='2022-08-05T06:08:31Z'),
    startTime?: string(name='StartTime', example='2022-06-19T02:16:41Z'),
  }(name='TimedConfig', shrink='json', position='Query'),
  transcodeOutput?: {
    domainName: string(name='DomainName', example='mydomain'),
    type: string(name='Type', example='LiveCenter'),
  }(name='TranscodeOutput', shrink='json', position='Query'),
}

model UpdateLiveTranscodeJobResponseBody = {
  requestId?: string(name='RequestId', description='请求ID', example='******3B-0E1A-586A-AC29-742247******'),
}

model UpdateLiveTranscodeJobResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveTranscodeJobResponseBody(name='body'),
}

async function updateLiveTranscodeJob(request: UpdateLiveTranscodeJobRequest): UpdateLiveTranscodeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLiveTranscodeJob', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLiveTranscodeTemplateRequest {
  name?: string(name='Name', position='Query'),
  templateConfig?: {
    audioParams?: {
      bitrate?: string(name='Bitrate', example='100'),
      channels?: string(name='Channels', example='2'),
      codec?: string(name='Codec', example='AAC'),
      profile?: string(name='Profile', example='aac_low'),
      samplerate?: string(name='Samplerate', example='44100'),
    }(name='AudioParams'),
    videoParams?: {
      bitrate?: string(name='Bitrate', example='2500'),
      codec?: string(name='Codec', example='H.264'),
      fps?: string(name='Fps', example='30'),
      gop?: string(name='Gop', example='1000'),
      height?: string(name='Height', example='720'),
      profile?: string(name='Profile', example='2'),
      width?: string(name='Width', example='1280'),
    }(name='VideoParams'),
  }(name='TemplateConfig', shrink='json', position='Query'),
  templateId: string(name='TemplateId', example='****96e8864746a0b6f3****', position='Query'),
}

model UpdateLiveTranscodeTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID', example='******3B-0E1A-586A-AC29-742247******'),
}

model UpdateLiveTranscodeTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveTranscodeTemplateResponseBody(name='body'),
}

async function updateLiveTranscodeTemplate(request: UpdateLiveTranscodeTemplateRequest): UpdateLiveTranscodeTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLiveTranscodeTemplate', 'POST', '/', 'json', false, 'json', request);
}

model UpdateMediaInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  appendTags?: boolean(name='AppendTags', description='是否以append的形式更新Tags字段', example='true', position='Query'),
  businessType?: string(name='BusinessType', description='媒资业务类型', example='video', position='Query'),
  cateId?: long(name='CateId', example='3048', position='Query'),
  category?: string(name='Category', description='分类', example='defaultCategory', position='Query'),
  coverURL?: string(name='CoverURL', description='封面图，仅视频媒资有效', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png', position='Query'),
  description?: string(name='Description', description='描述', example='defaultDescription', position='Query'),
  inputURL?: string(name='InputURL', description='媒资媒体类型', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4', position='Query'),
  mediaId?: string(name='MediaId', description='媒资Id', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  mediaTags?: string(name='MediaTags', description='标签,如果有多个标签用逗号隔开', example='updateTags1,updateTags2', position='Query'),
  referenceId?: string(name='ReferenceId', example='123-123', position='Query'),
  title?: string(name='Title', description='标题', example='defaultTitle', position='Query'),
  userData?: string(name='UserData', description='用户数据，最大1024字节', example='userData', position='Query'),
}

model UpdateMediaInfoResponseBody = {
  mediaId?: string(name='MediaId', description='ICE媒资ID', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', description='请求ID', example='******11-DB8D-4A9A-875B-275798******'),
}

model UpdateMediaInfoResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateMediaInfoResponseBody(name='body'),
}

async function updateMediaInfo(request: UpdateMediaInfoRequest): UpdateMediaInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMediaInfo', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePipelineRequest {
  name?: string(name='Name', description='管道名称', example='test-pipeline', position='Query'),
  pipelineId: string(name='PipelineId', description='管道ID', example='****d80e4e4044975745c14b****', position='Query'),
  priority?: int32(name='Priority', description='优先级', example='6', position='Query'),
  status?: string(name='Status', description='管道状态。', example='Paused', position='Query'),
}

model UpdatePipelineResponseBody = {
  requestId?: string(name='RequestId', description='请求ID', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', description='是否成功', example='true'),
}

model UpdatePipelineResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePipelineResponseBody(name='body'),
}

async function updatePipeline(request: UpdatePipelineRequest): UpdatePipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePipeline', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSmartJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  FEExtend?: string(name='FEExtend', position='Query'),
  jobId?: string(name='JobId', position='Query'),
}

model UpdateSmartJobResponseBody = {
  FEExtend?: string(name='FEExtend'),
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateSmartJobResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSmartJobResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function updateSmartJob(request: UpdateSmartJobRequest): UpdateSmartJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSmartJob', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTemplateRequest {
  config?: string(name='Config', description='参见模板Config文档', example='参见模板Config文档', position='Query'),
  coverUrl?: string(name='CoverUrl', description='模板封面', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg', position='Query'),
  name?: string(name='Name', description='模板名称', example='视频添加水印模板', position='Query'),
  previewMedia?: string(name='PreviewMedia', description='预览视频媒资id', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  relatedMediaids?: string(name='RelatedMediaids', description='模板相关素材，模板编辑器使用', example='{"video":["******c04f1d4a06996144cc1a******","******cb7db64841b159b4f2ea******"],"audio":["******c04f1d4a06996144cc1a******"],"image":["******c04f1d4a06996144cc1a******"]}', position='Query'),
  source?: string(name='Source', description='修改来源，默认OpenAPI', example='OpenAPI', position='Query'),
  status?: string(name='Status', description='模板状态', example='Available', position='Query'),
  templateId?: string(name='TemplateId', description='模板ID', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model UpdateTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID', example='******11-DB8D-4A9A-875B-275798******'),
}

model UpdateTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTemplateResponseBody(name='body'),
}

async function updateTemplate(request: UpdateTemplateRequest): UpdateTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTemplate', 'POST', '/', 'json', false, 'json', request);
}

model UploadMediaByURLRequest {
  regionId?: string(name='RegionId', position='Host'),
  appId?: string(name='AppId', example='app-1000000', position='Query'),
  entityId?: string(name='EntityId', example='d67281da3c8743b8823ad12976187***', position='Query'),
  mediaMetaData?: string(name='MediaMetaData', example='[{"SourceURL":"https://example.aliyundoc.com/video01.mp4","Title":"urlUploadTest"}]', position='Query'),
  postProcessConfig?: string(name='PostProcessConfig', example='{"ProcessType": "Workflow","ProcessID":"b72a06c6beeb4dcdb898feef067b1***"}', position='Query'),
  uploadTargetConfig?: string(name='UploadTargetConfig', example='{"StorageType":"oss","StorageLocation":"outin-***.oss-cn-shanghai.aliyuncs.com"}', position='Query'),
  uploadURLs?: string(name='UploadURLs', example='https://diffurl.mp4', position='Query'),
  userData?: string(name='UserData', example='{"MessageCallback":{"CallbackURL":"http://example.aliyundoc.com"},"Extend":{"localId":"xxx","test":"www"}}', position='Query'),
}

model UploadMediaByURLResponseBody = {
  requestId?: string(name='RequestId', description='RequestId', example='****83B7-7F87-4792-BFE9-63CD2137****'),
  uploadJobs?: [ 
    {
      jobId?: string(name='JobId', example='20ce1e05dba64576b96e9683879f0***'),
      mediaId?: string(name='MediaId', example='f476988629f54a7b8a4ba90d1a6c7***'),
      sourceURL?: string(name='SourceURL', example='http://example****.mp4'),
    }
  ](name='UploadJobs'),
}

model UploadMediaByURLResponse = {
  headers: map[string]string(name='headers'),
  body: UploadMediaByURLResponseBody(name='body'),
}

async function uploadMediaByURL(request: UploadMediaByURLRequest): UploadMediaByURLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadMediaByURL', 'POST', '/', 'json', false, 'json', request);
}

model UploadStreamByURLRequest {
  regionId?: string(name='RegionId', position='Host'),
  definition?: string(name='Definition', example='HD', position='Query'),
  fileExtension?: string(name='FileExtension', example='mp4', position='Query'),
  HDRType?: string(name='HDRType', example='HDR10', position='Query'),
  mediaId?: string(name='MediaId', example='411bed50018971edb60b0764a0ec6***', position='Query'),
  streamURL?: string(name='StreamURL', example='https://example.com/sample-stream.mp4', position='Query'),
  userData?: string(name='UserData', example='{"MessageCallback":{"CallbackURL":"http://test.test.com"}, "Extend":{"localId":"xxx","test":"www"}}', position='Query'),
}

model UploadStreamByURLResponseBody = {
  fileURL?: string(name='FileURL', example='http://outin-***.oss-cn-shanghai.aliyuncs.com/stream/48555e8b-181dd5a8c07/48555e8b-181dd5a8c07.mp4'),
  jobId?: string(name='JobId', example='****cdb3e74639973036bc84****'),
  mediaId?: string(name='MediaId', example='411bed50018971edb60b0764a0ec6***'),
  requestId?: string(name='RequestId', example='******89-C21D-4B78-AE24-3788B8******'),
  sourceURL?: string(name='SourceURL', example='https://example.com/sample-stream.mp4'),
}

model UploadStreamByURLResponse = {
  headers: map[string]string(name='headers'),
  body: UploadStreamByURLResponseBody(name='body'),
}

async function uploadStreamByURL(request: UploadStreamByURLRequest): UploadStreamByURLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadStreamByURL', 'POST', '/', 'json', false, 'json', request);
}

