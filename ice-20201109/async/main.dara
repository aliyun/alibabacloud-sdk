/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ICE';
  @version = '2020-11-09';
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-1' = 'ice.aliyuncs.com',
    'ap-northeast-2-pop' = 'ice.aliyuncs.com',
    'ap-south-1' = 'ice.aliyuncs.com',
    'ap-southeast-1' = 'ice.aliyuncs.com',
    'ap-southeast-2' = 'ice.aliyuncs.com',
    'ap-southeast-3' = 'ice.aliyuncs.com',
    'ap-southeast-5' = 'ice.aliyuncs.com',
    'cn-beijing' = 'ice.aliyuncs.com',
    'cn-beijing-finance-1' = 'ice.aliyuncs.com',
    'cn-beijing-finance-pop' = 'ice.aliyuncs.com',
    'cn-beijing-gov-1' = 'ice.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'ice.aliyuncs.com',
    'cn-chengdu' = 'ice.aliyuncs.com',
    'cn-edge-1' = 'ice.aliyuncs.com',
    'cn-fujian' = 'ice.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'ice.aliyuncs.com',
    'cn-hangzhou' = 'ice.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'ice.aliyuncs.com',
    'cn-hangzhou-finance' = 'ice.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'ice.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'ice.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'ice.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'ice.aliyuncs.com',
    'cn-hangzhou-test-306' = 'ice.aliyuncs.com',
    'cn-hongkong' = 'ice.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'ice.aliyuncs.com',
    'cn-huhehaote' = 'ice.aliyuncs.com',
    'cn-huhehaote-nebula-1' = 'ice.aliyuncs.com',
    'cn-north-2-gov-1' = 'ice.aliyuncs.com',
    'cn-qingdao' = 'ice.aliyuncs.com',
    'cn-qingdao-nebula' = 'ice.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'ice.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'ice.aliyuncs.com',
    'cn-shanghai-finance-1' = 'ice.aliyuncs.com',
    'cn-shanghai-inner' = 'ice.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'ice.aliyuncs.com',
    'cn-shenzhen' = 'ice.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'ice.aliyuncs.com',
    'cn-shenzhen-inner' = 'ice.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'ice.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'ice.aliyuncs.com',
    'cn-wuhan' = 'ice.aliyuncs.com',
    'cn-wulanchabu' = 'ice.aliyuncs.com',
    'cn-yushanfang' = 'ice.aliyuncs.com',
    'cn-zhangbei' = 'ice.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'ice.aliyuncs.com',
    'cn-zhangjiakou' = 'ice.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'ice.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'ice.aliyuncs.com',
    'eu-central-1' = 'ice.aliyuncs.com',
    'eu-west-1' = 'ice.aliyuncs.com',
    'eu-west-1-oxs' = 'ice.aliyuncs.com',
    'me-east-1' = 'ice.aliyuncs.com',
    'rus-west-1-pop' = 'ice.aliyuncs.com',
    'us-east-1' = 'ice.aliyuncs.com',
    'us-west-1' = 'ice.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AIAgentRuntimeConfig {
  avatarChat3D?: {
    agentUserId?: string(name='AgentUserId'),
    authToken?: string(name='AuthToken'),
    channelId?: string(name='ChannelId'),
  }(name='AvatarChat3D'),
  visionChat?: {
    agentUserId?: string(name='AgentUserId'),
    authToken?: string(name='AuthToken'),
    channelId?: string(name='ChannelId'),
  }(name='VisionChat'),
  voiceChat?: {
    agentUserId?: string(name='AgentUserId'),
    authToken?: string(name='AuthToken'),
    channelId?: string(name='ChannelId'),
  }(name='VoiceChat'),
}

model AIAgentTemplateConfig {
  avatarChat3D?: {
    asrMaxSilence?: int32(name='AsrMaxSilence'),
    avatarId?: string(name='AvatarId'),
    bailianAppParams?: string(name='BailianAppParams'),
    enablePushToTalk?: boolean(name='EnablePushToTalk'),
    enableVoiceInterrupt?: boolean(name='EnableVoiceInterrupt'),
    gracefulShutdown?: boolean(name='GracefulShutdown'),
    greeting?: string(name='Greeting'),
    useVoiceprint?: boolean(name='UseVoiceprint'),
    userOfflineTimeout?: int32(name='UserOfflineTimeout'),
    userOnlineTimeout?: int32(name='UserOnlineTimeout'),
    voiceId?: string(name='VoiceId'),
    voiceprintId?: string(name='VoiceprintId'),
    volume?: long(name='Volume'),
  }(name='AvatarChat3D'),
  visionChat?: {
    asrMaxSilence?: int32(name='AsrMaxSilence'),
    bailianAppParams?: string(name='BailianAppParams'),
    enableIntelligentSegment?: boolean(name='EnableIntelligentSegment'),
    enablePushToTalk?: boolean(name='EnablePushToTalk'),
    enableVoiceInterrupt?: boolean(name='EnableVoiceInterrupt'),
    gracefulShutdown?: boolean(name='GracefulShutdown'),
    greeting?: string(name='Greeting'),
    useVoiceprint?: boolean(name='UseVoiceprint'),
    userOfflineTimeout?: int32(name='UserOfflineTimeout'),
    userOnlineTimeout?: int32(name='UserOnlineTimeout'),
    voiceId?: string(name='VoiceId'),
    voiceprintId?: string(name='VoiceprintId'),
    volume?: long(name='Volume'),
  }(name='VisionChat'),
  voiceChat?: {
    asrMaxSilence?: int32(name='AsrMaxSilence'),
    bailianAppParams?: string(name='BailianAppParams'),
    enablePushToTalk?: boolean(name='EnablePushToTalk'),
    enableVoiceInterrupt?: boolean(name='EnableVoiceInterrupt'),
    gracefulShutdown?: boolean(name='GracefulShutdown'),
    greeting?: string(name='Greeting'),
    useVoiceprint?: boolean(name='UseVoiceprint'),
    userOfflineTimeout?: int32(name='UserOfflineTimeout'),
    userOnlineTimeout?: int32(name='UserOnlineTimeout'),
    voiceId?: string(name='VoiceId'),
    voiceprintId?: string(name='VoiceprintId'),
    volume?: long(name='Volume'),
  }(name='VoiceChat'),
}

model AppInfoDTO {
  appName?: string(name='AppName'),
  appType?: int32(name='AppType', example='1-普通应用，2-内嵌SDK.'),
  gmtCreate?: string(name='GmtCreate'),
  itemId?: string(name='ItemId'),
  platforms?: [ 
    {
      itemId?: string(name='ItemId'),
      licenseItemIds?: [ string ](name='LicenseItemIds'),
      pkgName?: string(name='PkgName'),
      pkgSignature?: string(name='PkgSignature'),
      platformType?: long(name='PlatformType'),
      type?: long(name='Type'),
    }
  ](name='Platforms'),
  userId?: long(name='UserId'),
}

model LicenseInstanceAppDTO {
  appId?: string(name='AppId'),
  beginOn?: string(name='BeginOn'),
  contractNo?: string(name='ContractNo'),
  creationTime?: string(name='CreationTime'),
  expiredOn?: string(name='ExpiredOn'),
  instanceId?: string(name='InstanceId'),
  itemId?: string(name='ItemId'),
  licenseConfigs?: [ 
    {
      businessType?: string(name='BusinessType'),
      featureIds?: string(name='FeatureIds'),
      sdkId?: int32(name='SdkId'),
      sdkName?: string(name='SdkName'),
      subscription?: string(name='Subscription'),
      subscriptionImp?: string(name='SubscriptionImp'),
      subscriptionPkg?: string(name='SubscriptionPkg'),
    }
  ](name='LicenseConfigs'),
  modificationTime?: string(name='ModificationTime'),
  status?: string(name='Status'),
  userId?: long(name='UserId'),
}

model AddCategoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  cateName: string(name='CateName', description='The category name.

*   The value can be up to 64 bytes in length.
*   The value must be encoded in UTF-8.

This parameter is required.', position='Query'),
  parentId?: long(name='ParentId', description='The ID of the parent category.', example='5', position='Query'),
  type?: string(name='Type', description='The type of the category. Valid values:

*   default: audio, video, and image files. This is the default value.
*   material: short video materials.', example='default', position='Query'),
}

model AddCategoryResponseBody = {
  category?: {
    cateId?: long(name='CateId', description='The ID of the created category.', example='45'),
    cateName?: string(name='CateName', description='The category name.'),
    level?: long(name='Level', description='The level of the category. A value of **0** indicates a level-1 category, a value of **1** indicates a level-2 category, and a value of **2** indicates a level-3 category.', example='0'),
    parentId?: long(name='ParentId', description='The ID of the parent category. By default, if ParentId is left empty or less than 1, -1 is returned, which indicates that the created category is the root directory.', example='-1'),
    type?: string(name='Type', description='The type of the category. Valid values:

*   **default**: audio, video, and image files. This is the default value.
*   **material**: short video materials.', example='default'),
  }(name='Category', description='The information about the category.'),
  requestId?: string(name='RequestId', description='The request ID.', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
}

model AddCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddCategoryResponseBody(name='body'),
}

/**
  * @description You can create at most three levels of categories. Each category level can contain a maximum of 100 subcategories.
  * @param request  the request parameters of AddCategory  AddCategoryRequest
  * @return AddCategoryResponse
 */
async function addCategory(request: AddCategoryRequest): AddCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCategory', 'POST', '/', 'json', false, 'json', request);
}

model AddEditingProjectMaterialsRequest {
  materialMaps: string(name='MaterialMaps', description='The material ID. Separate multiple material IDs with commas (,). Each type supports up to 10 material IDs. The following material types are supported:

*   video
*   audio
*   image
*   liveStream
*   editingProject

This parameter is required.', example='{"video":"*****2e057304fcd9b145c5cafc*****", "image":"****8021a8d493da643c8acd98*****,*****cb6307a4edea614d8b3f3c*****", "liveStream": "[{\\"appName\\":\\"testrecord\\",\\"domainName\\":\\"test.alivecdn.com\\",\\"liveUrl\\":\\"rtmp://test.alivecdn.com/testrecord/teststream\\",\\"streamName\\":\\"teststream\\"}]", "editingProject": "*****9b145c5cafc2e057304fcd*****"}', position='Query'),
  projectId: string(name='ProjectId', description='The ID of the online editing project.

This parameter is required.', example='*****b2101cb318c*****', position='Query'),
}

model AddEditingProjectMaterialsResponseBody = {
  liveMaterials?: [ 
    {
      appName?: string(name='AppName', description='The application name of the live stream.', example='testrecord'),
      domainName?: string(name='DomainName', description='The domain name of the live stream.', example='test.alivecdn.com'),
      liveUrl?: string(name='LiveUrl', description='The URL of the live stream.', example='rtmp://test.alivecdn.com/testrecord/teststream'),
      streamName?: string(name='StreamName', description='The name of the live stream.', example='teststream'),
    }
  ](name='LiveMaterials', description='The materials associated with the live stream.'),
  mediaInfos?: [ 
    {
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', description='The bitrate.', example='1132.68'),
            duration?: string(name='Duration', description='The duration.', example='216.206667'),
            fileName?: string(name='FileName', description='The file name.', example='example.mp4'),
            fileSize?: string(name='FileSize', description='The file size. Unit: bytes.', example='30611502'),
            fileStatus?: string(name='FileStatus', description='The file status.

\\-Uploading

\\-Normal

\\-UploadFail

\\-Disable

\\-Deleted', example='Normal'),
            fileType?: string(name='FileType', description='The file type.', example='source_file'),
            fileUrl?: string(name='FileUrl', description='The Object Storage Service (OSS) URL of the file.', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
            formatName?: string(name='FormatName', description='The container format.', example='mov,mp4,m4a,3gp,3g2,mj2'),
            height?: string(name='Height', description='The height.', example='540'),
            region?: string(name='Region', description='The region in which the file resides.', example='cn-shanghai'),
            width?: string(name='Width', description='The width.', example='960'),
          }(name='FileBasicInfo', description='The basic information of the file, including the duration and size.'),
        }
      ](name='FileInfoList', description='FileInfos'),
      mediaBasicInfo?: {
        businessType?: string(name='BusinessType', description='The business type of the media asset.', example='general'),
        category?: string(name='Category', description='The category of the media asset.', example='audio'),
        coverURL?: string(name='CoverURL', description='The thumbnail URL of the media asset.', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
        createTime?: string(name='CreateTime', description='The time when the media asset was created.', example='2020-12-23T03:32:59Z'),
        deletedTime?: string(name='DeletedTime', description='The time when the media asset was deleted.', example='2020-12-23T03:32:59Z'),
        description?: string(name='Description', description='The description of the media asset.', example='sample_description'),
        inputURL?: string(name='InputURL', description='The URL of the media asset in another service.', example='http://bucket.oss-cn-shanghai.aliyuncs.com/file.mp4'),
        mediaId?: string(name='MediaId', description='The ID of the media asset.', example='*****5cb2e35433198daae94a72*****'),
        mediaTags?: string(name='MediaTags', description='The tags of the media asset.', example='sample_tag'),
        mediaType?: string(name='MediaType', description='The type of the media asset.', example='Video'),
        modifiedTime?: string(name='ModifiedTime', description='The time when the media asset was last modified.', example='2020-12-23T03:32:59Z'),
        snapshots?: string(name='Snapshots', description='The snapshots of the media asset.', example='null'),
        source?: string(name='Source', description='The source of the media asset.', example='oss'),
        spriteImages?: string(name='SpriteImages', description='The sprite of the media asset.', example='http://outin-example.oss-cn-shanghai.aliyuncs.com/test.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
        status?: string(name='Status', description='The status of the media asset. Valid values:

\\- Init

\\- Preparing

\\- PrepareFail

\\- Normal', example='Normal'),
        title?: string(name='Title', description='The title of the media asset.', example='default_title_2020-12-23T03:32:59Z'),
        transcodeStatus?: string(name='TranscodeStatus', description='The transcoding status of the media asset.', example='Init'),
        userData?: string(name='UserData', description='The user data.', example='userData'),
      }(name='MediaBasicInfo', description='The basic information of the media assets.'),
      mediaId?: string(name='MediaId', description='The ID of the media asset.', example='*****5cb2e35433198daae94a72*****'),
    }
  ](name='MediaInfos', description='The media assets that meet the specified conditions.'),
  projectId?: string(name='ProjectId', description='The ID of the online editing project.', example='*****67ae06542b9b93e0d1c387*****'),
  projectMaterials?: [ string ](name='ProjectMaterials', description='The materials associated with the editing project. A live stream editing project will be associated with a regular editing project after the live streaming ends.', example='*****9b145c5cafc2e057304fcd*****'),
  requestId?: string(name='RequestId', description='The request ID.', example='*****ACB-44F2-5F2D-88D7-1283E70*****'),
}

model AddEditingProjectMaterialsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddEditingProjectMaterialsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddEditingProjectMaterials  AddEditingProjectMaterialsRequest
  * @return AddEditingProjectMaterialsResponse
 */
async function addEditingProjectMaterials(request: AddEditingProjectMaterialsRequest): AddEditingProjectMaterialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddEditingProjectMaterials', 'POST', '/', 'json', false, 'json', request);
}

model AddFavoritePublicMediaRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaIds?: string(name='MediaIds', example='icepublic-****7213c6050cbc66750b469701****,icepublic-****0b4697017213c6050cbc6675****', position='Query'),
}

model AddFavoritePublicMediaResponseBody = {
  ignoredList?: [ string ](name='IgnoredList'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model AddFavoritePublicMediaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddFavoritePublicMediaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddFavoritePublicMedia  AddFavoritePublicMediaRequest
  * @return AddFavoritePublicMediaResponse
 */
async function addFavoritePublicMedia(request: AddFavoritePublicMediaRequest): AddFavoritePublicMediaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddFavoritePublicMedia', 'POST', '/', 'json', false, 'json', request);
}

model AddMediaMarksRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaId: string(name='MediaId', description='The ID of the media asset.

This parameter is required.', example='53afdf003a2171ed9c6a16b5feac6402', position='Query'),
  mediaMarks: string(name='MediaMarks', description='The mark information. The value must be a JSONArray.

This parameter is required.', position='Query'),
}

model AddMediaMarksResponseBody = {
  mediaId?: string(name='MediaId', description='The ID of the media asset.', example='53afdf003a******6a16b5feac6402'),
  mediaMarkIds?: string(name='MediaMarkIds', description='The IDs of the marks that are added.', example='mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60'),
  requestId?: string(name='RequestId', description='The request ID.', example='771A1414-27BF-53E6-AB73-EFCB*****ACF'),
}

model AddMediaMarksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddMediaMarksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddMediaMarks  AddMediaMarksRequest
  * @return AddMediaMarksResponse
 */
async function addMediaMarks(request: AddMediaMarksRequest): AddMediaMarksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddMediaMarks', 'POST', '/', 'json', false, 'json', request);
}

model AddTemplateRequest {
  config?: string(name='Config', example='参见Timeline模板Config文档', position='Body'),
  coverUrl?: string(name='CoverUrl', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg', position='Query'),
  name?: string(name='Name', example='视频添加水印模板', position='Query'),
  previewMedia?: string(name='PreviewMedia', example='****01bf24bf41c78b2754cb3187****', position='Query'),
  relatedMediaids?: string(name='RelatedMediaids', example='{"video":["1805a0c6ca544fb395a06ca683619655"]}', position='Query'),
  source?: string(name='Source', example='OpenAPI', position='Query'),
  status?: string(name='Status', example='Available', position='Query'),
  type?: string(name='Type', example='Timeline', position='Query'),
}

model AddTemplateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='****2876-6263-4B75-8F2C-CD0F7FCF****'),
  template?: {
    config?: string(name='Config', example='参见Timeline模板Config文档'),
    coverUrl?: string(name='CoverUrl', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg'),
    createSource?: string(name='CreateSource', example='OpenAPI'),
    modifiedSource?: string(name='ModifiedSource', example='OpenAPI'),
    name?: string(name='Name', example='视频添加水印模板'),
    previewMedia?: string(name='PreviewMedia', example='****01bf24bf41c78b2754cb3187****'),
    status?: string(name='Status', example='Available'),
    templateId?: string(name='TemplateId', example='****01bf24bf41c78b2754cb3187****'),
    type?: string(name='Type', example='Timeline'),
  }(name='Template'),
}

model AddTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddTemplate  AddTemplateRequest
  * @return AddTemplateResponse
 */
async function addTemplate(request: AddTemplateRequest): AddTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTemplate', 'POST', '/', 'json', true, 'form', request);
}

model AlterSearchIndexRequest {
  regionId?: string(name='RegionId', position='Host'),
  indexConfig?: string(name='IndexConfig', description='The configurations of the index.

>  You must specify either IndexStatus or IndexConfig.', example='{}', position='Query'),
  indexStatus?: string(name='IndexStatus', description='The state of the index. Valid values:

*   active (default): the index is enabled.
*   Deactive: the index is not enabled.

>  You must specify either IndexStatus or IndexConfig.', example='Active', position='Query'),
  indexType: string(name='IndexType', description='The category of the index. Valid values:

*   mm: large visual model.
*   face: face recognition.
*   aiLabel: smart tagging.

This parameter is required.', example='mm', position='Query'),
  searchLibName?: string(name='SearchLibName', description='The name of the search library.

*   If you leave this parameter empty, the search index is created in the default search library of Intelligent Media Service (IMS). Default value: ims-default-search-lib.
*   To query information about an existing search library, call the [QuerySearchLib](https://help.aliyun.com/document_detail/2584455.html) API operation.', example='test1', position='Query'),
}

model AlterSearchIndexResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='******3B-0E1A-586A-AC29-742247******'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model AlterSearchIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AlterSearchIndexResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AlterSearchIndex  AlterSearchIndexRequest
  * @return AlterSearchIndexResponse
 */
async function alterSearchIndex(request: AlterSearchIndexRequest): AlterSearchIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AlterSearchIndex', 'POST', '/', 'json', false, 'json', request);
}

model BatchGetMediaInfosRequest {
  regionId?: string(name='RegionId', position='Host'),
  additionType?: string(name='AdditionType', description='The additional information that you want to query about the media assets. By default, only BasicInfo is returned. The following additional information can be queried:

\\- FileInfo

\\- DynamicMetaData', example='FileInfo,DynamicMetaData', position='Query'),
  mediaIds?: string(name='MediaIds', description='The IDs of the media assets that you want to query. Separate the IDs with commas (,).', example='******b48fb04483915d4f2cd8******,******c48fb37407365d4f2cd8******', position='Query'),
}

model BatchGetMediaInfosResponseBody = {
  mediaInfos?: [ 
    {
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', description='The bitrate.', example='1132.68'),
            duration?: string(name='Duration', description='The duration.', example='200'),
            fileName?: string(name='FileName', description='The file name.', example='example'),
            fileSize?: string(name='FileSize', description='The file size. Unit: bytes.', example='30611502'),
            fileStatus?: string(name='FileStatus', description='The file status.', example='Normal'),
            fileType?: string(name='FileType', description='The file type.', example='source_file'),
            fileUrl?: string(name='FileUrl', description='The Object Storage Service (OSS) URL of the file.', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
            formatName?: string(name='FormatName', description='The container format.', example='mov,mp4,m4a,3gp,3g2,mj2'),
            height?: string(name='Height', description='The height.', example='1080'),
            region?: string(name='Region', description='The region in which the file resides.', example='cn-shanghai'),
            width?: string(name='Width', description='The width.', example='1920'),
          }(name='FileBasicInfo', description='The basic information of the file, including the duration and size.'),
        }
      ](name='FileInfoList', description='FileInfos'),
      mediaBasicInfo?: {
        businessType?: string(name='BusinessType', description='The business type of the media asset.', example='general'),
        category?: string(name='Category', description='The category of the media asset.'),
        coverURL?: string(name='CoverURL', description='The thumbnail URL of the media asset.', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
        createTime?: string(name='CreateTime', description='The time when the media asset was created.', example='2020-12-26T04:11:10Z'),
        deletedTime?: string(name='DeletedTime', description='The time when the media asset was deleted.', example='2020-12-26T04:11:10Z'),
        description?: string(name='Description', description='The description of the media asset.'),
        inputURL?: string(name='InputURL', description='The URL of the media asset in another service.', example='https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4'),
        mediaId?: string(name='MediaId', description='MediaId', example='******c48fb37407365d4f2cd8******'),
        mediaTags?: string(name='MediaTags', description='The tags of the media asset.'),
        mediaType?: string(name='MediaType', description='The type of the media asset. Valid values:

\\- image

\\- video

\\- audio

\\- text', example='video'),
        modifiedTime?: string(name='ModifiedTime', description='The time when the media asset was last modified.', example='2020-12-26T04:11:12Z'),
        snapshots?: string(name='Snapshots', description='The snapshots of the media asset.', example='[{"bucket":"example-bucket","count":"3","iceJobId":"******f48f0e4154976b2b8c45******","location":"oss-cn-beijing","snapshotRegular":"example.jpg","templateId":"******e6a6440b29eb60bd7c******"}]'),
        source?: string(name='Source', description='The source of the media asset. Valid values:

\\- oss

\\- vod', example='oss'),
        spriteImages?: string(name='SpriteImages', description='The sprite.', example='[{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]'),
        status?: string(name='Status', description='The status of the media asset.', example='Normal'),
        title?: string(name='Title', description='The title of the media asset.'),
        transcodeStatus?: string(name='TranscodeStatus', description='The transcoding status of the media asset.', example='Init'),
        userData?: string(name='UserData', description='The user data.', example='userDataTest'),
      }(name='MediaBasicInfo', description='The basic information of the media asset.'),
      mediaId?: string(name='MediaId', description='The ID of the media asset.', example='******c48fb37407365d4f2cd8******'),
    }
  ](name='MediaInfos', description='The queried media assets.'),
  requestId?: string(name='RequestId', description='The request ID.', example='******11-DB8D-4A9A-875B-275798******'),
}

model BatchGetMediaInfosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchGetMediaInfosResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchGetMediaInfos  BatchGetMediaInfosRequest
  * @return BatchGetMediaInfosResponse
 */
async function batchGetMediaInfos(request: BatchGetMediaInfosRequest): BatchGetMediaInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchGetMediaInfos', 'POST', '/', 'json', false, 'json', request);
}

model CancelDNAJobRequest {
  jobId: string(name='JobId', description='This parameter is required.', example='2288c6ca184c0e47098a5b665e2a12****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CancelDNAJobResponseBody = {
  jobId?: string(name='JobId', example='2288c6ca184c0e47098a5b665e2a12****'),
  requestId?: string(name='RequestId', example='25818875-5F78-4A13-BEF6-D7393642CA58'),
}

model CancelDNAJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelDNAJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelDNAJob  CancelDNAJobRequest
  * @return CancelDNAJobResponse
 */
async function cancelDNAJob(request: CancelDNAJobRequest): CancelDNAJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelDNAJob', 'POST', '/', 'json', false, 'json', request);
}

model CancelFavoritePublicMediaRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaIds?: string(name='MediaIds', example='icepublic-****7213c6050cbc66750b469701****,icepublic-****0b4697017213c6050cbc6675****', position='Query'),
}

model CancelFavoritePublicMediaResponseBody = {
  ignoredList?: [ string ](name='IgnoredList'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model CancelFavoritePublicMediaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelFavoritePublicMediaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelFavoritePublicMedia  CancelFavoritePublicMediaRequest
  * @return CancelFavoritePublicMediaResponse
 */
async function cancelFavoritePublicMedia(request: CancelFavoritePublicMediaRequest): CancelFavoritePublicMediaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelFavoritePublicMedia', 'POST', '/', 'json', false, 'json', request);
}

model CreateAuditRequest {
  regionId?: string(name='RegionId', position='Host'),
  auditContent: string(name='AuditContent', description='This parameter is required.', example='[
      {
            "MediaId": "93ab850b4f*****b54b6e91d24d81d4",
            "Status": "Normal"
      },
      {
            "MediaId": "f867fbfb58*****8bbab65c4480ae1d",
            "Status": "Blocked",
            "Reason": "xxxx",
            "Comment": "xxxx"
      }
]', position='Query'),
}

model CreateAuditResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model CreateAuditResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAuditResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAudit  CreateAuditRequest
  * @return CreateAuditResponse
 */
async function createAudit(request: CreateAuditRequest): CreateAuditResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAudit', 'POST', '/', 'json', false, 'json', request);
}

model CreateAvatarTrainingJobRequest {
  avatarDescription?: string(name='AvatarDescription', maxLength=1027, position='Query'),
  avatarName: string(name='AvatarName', description='This parameter is required.', maxLength=7, position='Query'),
  avatarType?: string(name='AvatarType', example='2DAvatar', position='Query'),
  portrait?: string(name='Portrait', example='****571c704445f9a0ee011406c2****', minLength=32, maxLength=32, position='Query'),
  thumbnail?: string(name='Thumbnail', example='https://your-bucket.oss-cn-hangzhou.aliyuncs.com/thumbnail.png', maxLength=512, position='Query'),
  transparent?: boolean(name='Transparent', example='True', position='Query'),
  video?: string(name='Video', example='****571c704445f9a0ee011406c2****', minLength=32, maxLength=32, position='Query'),
}

model CreateAvatarTrainingJobResponseBody = {
  data?: {
    jobId?: string(name='JobId', example='****d718e2ff4f018ccf419a7b71****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model CreateAvatarTrainingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAvatarTrainingJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAvatarTrainingJob  CreateAvatarTrainingJobRequest
  * @return CreateAvatarTrainingJobResponse
 */
async function createAvatarTrainingJob(request: CreateAvatarTrainingJobRequest): CreateAvatarTrainingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAvatarTrainingJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateCustomTemplateRequest {
  name: string(name='Name', description='This parameter is required.', example='test-template', position='Query'),
  subtype?: int32(name='Subtype', example='1', position='Query'),
  templateConfig: string(name='TemplateConfig', description='This parameter is required.', example='{"Container":{"Format":"flv"},"Video":{},"Audio":{}}', position='Query'),
  type: int32(name='Type', description='This parameter is required.', example='1', position='Query'),
}

model CreateCustomTemplateResponseBody = {
  customTemplate?: {
    createTime?: string(name='CreateTime', example='2022-04-19T02:04:31Z'),
    isDefault?: boolean(name='IsDefault', example='true'),
    modifiedTime?: string(name='ModifiedTime', example='2022-04-19T02:04:31Z'),
    status?: string(name='Status', example='Normal'),
    subtype?: string(name='Subtype', example='Remux'),
    templateConfig?: string(name='TemplateConfig', example='{"Container":{"Format":"flv"},"Video":{},"Audio":{}}'),
    templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
    templateName?: string(name='TemplateName', example='test-template'),
    type?: int32(name='Type', example='1'),
    typeName?: string(name='TypeName', example='TranscodeTemplate'),
  }(name='CustomTemplate'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model CreateCustomTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCustomTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateCustomTemplate  CreateCustomTemplateRequest
  * @return CreateCustomTemplateResponse
 */
async function createCustomTemplate(request: CreateCustomTemplateRequest): CreateCustomTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustomTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CreateCustomizedVoiceJobRequest {
  gender: string(name='Gender', description='This parameter is required.', example='female', position='Query'),
  scenario: string(name='Scenario', description='This parameter is required.', example='story', position='Query'),
  voiceDesc?: string(name='VoiceDesc', maxLength=256, position='Query'),
  voiceId: string(name='VoiceId', description='This parameter is required.', example='xiaozhuan', maxLength=32, position='Query'),
  voiceName?: string(name='VoiceName', maxLength=32, position='Query'),
}

model CreateCustomizedVoiceJobResponseBody = {
  data?: {
    jobId?: string(name='JobId', example='****29faef8144638ba42eb8e037****'),
    voiceId?: string(name='VoiceId', example='xiaozhuan'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model CreateCustomizedVoiceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCustomizedVoiceJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateCustomizedVoiceJob  CreateCustomizedVoiceJobRequest
  * @return CreateCustomizedVoiceJobResponse
 */
async function createCustomizedVoiceJob(request: CreateCustomizedVoiceJobRequest): CreateCustomizedVoiceJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustomizedVoiceJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateDNADBRequest {
  description?: string(name='Description', position='Query'),
  model?: string(name='Model', example='Video', position='Query'),
  name: string(name='Name', description='This parameter is required.', example='example name', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateDNADBResponseBody = {
  DBInfo?: {
    DBId?: string(name='DBId', example='88c6ca184c0e47098a5b665e2a12****'),
    description?: string(name='Description'),
    model?: string(name='Model', example='Video'),
    name?: string(name='Name', example='example name'),
    status?: string(name='Status', example='offline'),
  }(name='DBInfo'),
  requestId?: string(name='RequestId', example='25818875-5F78-4A13-BEF6-D7393642CA58'),
}

model CreateDNADBResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDNADBResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDNADB  CreateDNADBRequest
  * @return CreateDNADBResponse
 */
async function createDNADB(request: CreateDNADBRequest): CreateDNADBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDNADB', 'POST', '/', 'json', false, 'json', request);
}

model CreateEditingProjectRequest {
  businessConfig?: string(name='BusinessConfig', description='The business configuration of the project. This parameter can be ignored for general editing projects.

For a live stream editing project, observe the following rules: OutputMediaConfig.StorageLocation is required. OutputMediaConfig.Path is optional. If you do not specify this option, the live streaming clips are stored in the root directory by default.

Valid values of OutputMediaTarget include vod-media and oss-object. If you do not specify OutputMediaTarget, the default value oss-object is used.

If you set OutputMediaTarget to vod-media, the setting of OutputMediaConfig.Path does not take effect.', example='{ "OutputMediaConfig" : { "StorageLocation": "test-bucket.oss-cn-shanghai.aliyuncs.com", "Path": "test-path" }, "OutputMediaTarget": "oss-object", "ReservationTime": "2021-06-21T08:05:00Z" }', position='Query'),
  clipsParam?: string(name='ClipsParam', description='The material parameter corresponding to the template, in the JSON format. If TemplateId is specified, ClipsParam must also be specified. For more information<props="china">, see [Create and use a regular template](https://help.aliyun.com/document_detail/328557.html) and [Create and use an advanced template](https://help.aliyun.com/document_detail/291418.html).', position='Query'),
  coverURL?: string(name='CoverURL', description='The thumbnail URL of the online editing project.', example='https://example.com/example.png', position='Query'),
  description?: string(name='Description', description='The description of the online editing project.', example='描述', position='Query'),
  materialMaps?: string(name='MaterialMaps', description='The material associated with the project. Separate multiple material IDs with commas (,). Each type supports up to 10 material IDs.', example='{"video":"*****2e057304fcd9b145c5cafc*****", "image":"****8021a8d493da643c8acd98*****,*****cb6307a4edea614d8b3f3c*****", "liveStream": "[{\\"appName\\":\\"testrecord\\",\\"domainName\\":\\"test.alivecdn.com\\",\\"liveUrl\\":\\"rtmp://test.alivecdn.com/testrecord/teststream\\",\\"streamName\\":\\"teststream\\"}]", "editingProject": "*****9b145c5cafc2e057304fcd*****"}', position='Query'),
  projectType?: string(name='ProjectType', description='The type of the editing project. Valid values: EditingProject and LiveEditingProject. A value of EditingProject indicates a regular editing project, and a value of LiveEditingProject indicates a live stream editing project.', example='LiveEditingProject', position='Query'),
  templateId?: string(name='TemplateId', description='The template ID. This parameter is used to quickly build a timeline with ease. Note: Only one of Timeline and TemplateId can be specified. If TemplateId is specified, ClipsParam must also be specified.', example='****96e8864746a0b6f3****', position='Query'),
  templateType?: string(name='TemplateType', description='The template type. This parameter is required if you create a template-based online editing project. Default value: Timeline. Valid values:

*   Timeline: a regular template.
*   VETemplate: an advanced template.', example='Timeline', position='Query'),
  timeline?: string(name='Timeline', example='{"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****4d7cf14dc7b83b0e801c****"},{"MediaId":"****4d7cf14dc7b83b0e801c****"}]}]}', position='Body'),
  title: string(name='Title', description='The title of the online editing project.

This parameter is required.', example='example', position='Query'),
}

model CreateEditingProjectResponseBody = {
  project?: {
    businessConfig?: string(name='BusinessConfig', description='The business configuration of the project. This parameter can be ignored for general editing projects.', example='{ "OutputMediaConfig" :    { "StorageLocation": "test-bucket.oss-cn-shanghai.aliyuncs.com", "Path": "test-path"   }, "OutputMediaTarget": "oss-object", "ReservationTime": "2021-06-21T08:05:00Z" }'),
    businessStatus?: string(name='BusinessStatus', description='The business status of the project. This parameter can be ignored for general editing projects. Valid values:

*   Reserving
*   ReservationCanceled
*   BroadCasting
*   LoadingFailed
*   LiveFinished', example='Reserving'),
    clipsParam?: string(name='ClipsParam', description='The template material parameters.'),
    coverURL?: string(name='CoverURL', description='The thumbnail URL of the online editing project.', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
    createSource?: string(name='CreateSource', description='The method for creating the online editing project. Valid values:

\\- OpenAPI

\\- AliyunConsole

\\- WebSDK

\\- LiveEditingOpenAPI

\\- LiveEditingConsole', example='WebSDK'),
    createTime?: string(name='CreateTime', description='The time when the online editing project was created.', example='2021-01-08T16:52:07Z'),
    description?: string(name='Description', description='The description of the online editing project.', example='example_description'),
    duration?: float(name='Duration', description='The duration of the online editing project.', example='3.4200000'),
    modifiedSource?: string(name='ModifiedSource', description='The method for editing the online editing project. Valid values:

\\- OpenAPI

\\- AliyunConsole

\\- WebSDK

\\- LiveEditingOpenAPI

\\- LiveEditingConsole', example='WebSDK'),
    modifiedTime?: string(name='ModifiedTime', description='The time when the online editing project was last edited.', example='2021-01-08T16:52:07Z'),
    projectId?: string(name='ProjectId', description='The ID of the online editing project.', example='****01bf24bf41c78b2754cb3187****'),
    projectType?: string(name='ProjectType', description='The type of the editing project. Default value: EditingProject. Valid values:

\\- EditingProject: a regular editing project.

\\- LiveEditingProject: a live stream editing project.', example='LiveEditingProject'),
    status?: long(name='Status', description='The status of the online editing project.

Valid values:

\\- 1: Draft

\\- 2: Editing

\\- 3: Producing

\\- 4: Produced

\\- 5: ProduceFailed

\\- 7: Deleted', example='2'),
    statusName?: string(name='StatusName', description='The status of the online editing project. For more information, see the status list.', example='Editing'),
    templateId?: string(name='TemplateId', description='The template ID.', example='****96e8864746a0b6f3****'),
    templateType?: string(name='TemplateType', description='The template type of the online editing project. Valid values:

\\- Timeline

\\- VETemplate', example='Timeline'),
    timeline?: string(name='Timeline', description='The timeline of the online editing project, in the JSON format.<props="china">For more information about objects in a timeline, see [Timeline configurations](https://help.aliyun.com/document_detail/198823.htm?spm=a2c4g.11186623.2.9.90dc653dF67srN#topic-2024662).  If you leave this parameter empty, an empty timeline is created and the duration of the online editing project is zero.', example='{"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****4d7cf14dc7b83b0e801c****"},{"MediaId":"****4d7cf14dc7b83b0e801c****"}]}]}'),
    title?: string(name='Title', description='The title of the online editing project.', example='example_title'),
  }(name='Project', description='The information about the online editing project.'),
  requestId?: string(name='RequestId', description='The request ID.', example='******3B-0E1A-586A-AC29-742247******'),
}

model CreateEditingProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEditingProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateEditingProject  CreateEditingProjectRequest
  * @return CreateEditingProjectResponse
 */
async function createEditingProject(request: CreateEditingProjectRequest): CreateEditingProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEditingProject', 'POST', '/', 'json', true, 'form', request);
}

model CreateLiveRecordTemplateRequest {
  name: string(name='Name', description='代表资源名称的资源属性字段

This parameter is required.', position='Body'),
  recordFormat: [ 
    {
      cycleDuration?: int32(name='CycleDuration', example='3600'),
      format: string(name='Format', description='格式

This parameter is required.', example='m3u8'),
      ossObjectPrefix?: string(name='OssObjectPrefix', description='Oss对象名，不包含后缀', example='record/{JobId}/{Sequence}_{EscapedStartTime}_{EscapedEndTime}'),
      sliceDuration?: int32(name='SliceDuration', description='切片时长', example='30'),
      sliceOssObjectPrefix?: string(name='SliceOssObjectPrefix', description='切片Oss对象名，不包含后缀', example='record/{JobId}/{UnixTimestamp}_{Sequence}'),
    }
  ](name='RecordFormat', description='录制格式

This parameter is required.', shrink='json', position='Body'),
}

model CreateLiveRecordTemplateResponseBody = {
  requestId?: string(name='RequestId', example='0622C702-41BE-467E-AF2E-883D4517962E'),
  templateId?: string(name='TemplateId', description='代表资源一级ID的资源属性字段', example='****96e8864746a0b6f3****'),
}

model CreateLiveRecordTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLiveRecordTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateLiveRecordTemplate  CreateLiveRecordTemplateRequest
  * @return CreateLiveRecordTemplateResponse
 */
async function createLiveRecordTemplate(request: CreateLiveRecordTemplateRequest): CreateLiveRecordTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLiveRecordTemplate', 'POST', '/', 'json', true, 'form', request);
}

model CreateLiveSnapshotTemplateRequest {
  overwriteFormat?: string(name='OverwriteFormat', example='snapshot/{JobId}.jpg', position='Body'),
  sequenceFormat?: string(name='SequenceFormat', example='snapshot/{JobId}/{UnixTimestamp}.jpg', position='Body'),
  templateName: string(name='TemplateName', description='This parameter is required.', position='Body'),
  timeInterval: int32(name='TimeInterval', description='This parameter is required.', example='5', position='Body'),
}

model CreateLiveSnapshotTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  templateId?: string(name='TemplateId', example='****a046-263c-3560-978a-fb287782****'),
}

model CreateLiveSnapshotTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLiveSnapshotTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateLiveSnapshotTemplate  CreateLiveSnapshotTemplateRequest
  * @return CreateLiveSnapshotTemplateResponse
 */
async function createLiveSnapshotTemplate(request: CreateLiveSnapshotTemplateRequest): CreateLiveSnapshotTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLiveSnapshotTemplate', 'POST', '/', 'json', true, 'form', request);
}

model CreateLiveTranscodeTemplateRequest {
  name: string(name='Name', description='This parameter is required.', example='my template', minLength=1, maxLength=20, position='Query'),
  templateConfig?: {
    audioParams?: {
      bitrate?: string(name='Bitrate', example='100'),
      channels?: string(name='Channels', example='2'),
      codec?: string(name='Codec', example='AAC'),
      profile?: string(name='Profile', example='aaclow'),
      samplerate?: string(name='Samplerate', example='44100'),
    }(name='AudioParams'),
    videoParams?: {
      bitrate?: string(name='Bitrate', example='2500'),
      codec?: string(name='Codec', example='H.264'),
      fps?: string(name='Fps', example='25'),
      gop?: string(name='Gop', example='1000'),
      height?: string(name='Height', example='720'),
      profile?: string(name='Profile', example='2'),
      width?: string(name='Width', example='1280'),
    }(name='VideoParams'),
  }(name='TemplateConfig', shrink='json', position='Query'),
  type: string(name='Type', description='This parameter is required.', example='normal', position='Query'),
}

model CreateLiveTranscodeTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
  templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
}

model CreateLiveTranscodeTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLiveTranscodeTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateLiveTranscodeTemplate  CreateLiveTranscodeTemplateRequest
  * @return CreateLiveTranscodeTemplateResponse
 */
async function createLiveTranscodeTemplate(request: CreateLiveTranscodeTemplateRequest): CreateLiveTranscodeTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLiveTranscodeTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CreatePipelineRequest {
  name: string(name='Name', description='This parameter is required.', example='test-pipeline', position='Query'),
  priority?: int32(name='Priority', example='6', position='Query'),
  speed: string(name='Speed', description='This parameter is required.', example='Standard', position='Query'),
}

model CreatePipelineResponseBody = {
  pipeline?: {
    createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
    modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:17:54Z'),
    name?: string(name='Name', example='test-pipeline'),
    pipelineId?: string(name='PipelineId', example='****20b48fb04483915d4f2cd8ac****'),
    priority?: int32(name='Priority', example='6'),
    speed?: string(name='Speed', example='Standard'),
    status?: string(name='Status', example='Active'),
  }(name='Pipeline'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model CreatePipelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePipelineResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePipeline  CreatePipelineRequest
  * @return CreatePipelineResponse
 */
async function createPipeline(request: CreatePipelineRequest): CreatePipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePipeline', 'POST', '/', 'json', false, 'json', request);
}

model CreateSearchIndexRequest {
  regionId?: string(name='RegionId', position='Host'),
  indexConfig?: string(name='IndexConfig', example='{}', position='Query'),
  indexStatus?: string(name='IndexStatus', example='Active', position='Query'),
  indexType: string(name='IndexType', description='The category of the index. Valid values:

*   mm: large visual model. You can use this model to describe complex visual features and identify and search for specific actions, movements, and events in videos, such as when athletes score a goal or get injured.

>  This feature is in the public preview phase. You can use this feature for free for 1,000 hours of videos.

*   face: face recognition. You can use the face recognition technology to describe face characteristics and automatically mark or search for faces in videos.
*   aiLabel: smart tagging. The smart tagging category is used to describe content such as subtitles and audio in videos. You can use the speech recognition technology to automatically extract, mark, and search for subtitles and dialog content from videos. This helps you quickly locate the video content that is related to specific topics or keywords.

This parameter is required.', example='mm', position='Query'),
  searchLibName?: string(name='SearchLibName', example='test1', position='Query'),
}

model CreateSearchIndexResponseBody = {
  code?: string(name='Code', example='200'),
  requestId?: string(name='RequestId', example='*****ACB-44F2-5F2D-88D7-1283E70*****'),
  success?: string(name='Success', example='true'),
}

model CreateSearchIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSearchIndexResponseBody(name='body'),
}

/**
  * @description The large visual model feature is still in the public preview phase. You can use this feature for free for 1,000 hours of videos.
  * @param request  the request parameters of CreateSearchIndex  CreateSearchIndexRequest
  * @return CreateSearchIndexResponse
 */
async function createSearchIndex(request: CreateSearchIndexRequest): CreateSearchIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSearchIndex', 'POST', '/', 'json', false, 'json', request);
}

model CreateSearchLibRequest {
  regionId?: string(name='RegionId', position='Host'),
  searchLibName: string(name='SearchLibName', description='The name of the search library. The name can contain letters and digits and must start with a letter.

This parameter is required.', example='test1', position='Query'),
}

model CreateSearchLibResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='******3B-0E1A-586A-AC29-742247******'),
  searchLibName?: string(name='SearchLibName', description='The name of the search library.', example='test1'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model CreateSearchLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSearchLibResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSearchLib  CreateSearchLibRequest
  * @return CreateSearchLibResponse
 */
async function createSearchLib(request: CreateSearchLibRequest): CreateSearchLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSearchLib', 'POST', '/', 'json', false, 'json', request);
}

model CreateUploadMediaRequest {
  regionId?: string(name='RegionId', position='Host'),
  appId?: string(name='AppId', description='The application ID. Default value: app-1000000.', example='app-1000000', position='Query'),
  entityId?: string(name='EntityId', description='The entity ID. You can call the CreateEntity operation to create an entity and specify a dynamic metadata structure.', example='9e177cac2fb44f8b8c67b199fcc7bffd', position='Query'),
  fileInfo?: string(name='FileInfo', description='The file information, which is in the JSON format and contains the following fields:

*   Type: required. The file type. Valid values: video, image, audio, text, and other.
*   Name: required. The file name without the extension.
*   Size: optional. The file size.
*   Ext: required. The file name extension.', example='{\\"Type\\":\\"video\\",\\"Name\\":\\"test.mp4\\",\\"Size\\":108078336,\\"Ext\\":\\"mp4\\"}', position='Query'),
  mediaMetaData?: string(name='MediaMetaData', description='The metadata of the media asset, which is a JSON string that contains the following fields:

Title: required.

*   The value can be up to 128 characters in length.
*   The value must be encoded in UTF-8.

Description: optional.

*   The value can be up to 1,024 characters in length.
*   The value must be encoded in UTF-8.

CateId: optional.

Tags: optional.

BusinessType: required. Valid values:

*   opening or ending if Type is set to video
*   default or cover if Type is set to image
*   subtitles or font if Type is set to text
*   watermark if Type is set to material
*   general CoverURL: optional.

DynamicMetaData: The value is a string.', example='{\\"Title\\": \\"UploadTest\\", \\"Description\\": \\"UploadImageTest\\", \\"Tags\\": \\"tag1,tag2\\",\\"BusinessType\\":\\"cover\\"}', position='Query'),
  postProcessConfig?: string(name='PostProcessConfig', description='The postprocessing configurations. You can specify this parameter if Type is set to video or audio.

Set ProcessType to Workflow.', example='{\\"ProcessType\\":\\"Workflow\\",\\"ProcessID\\":\\"74ba870f1a4873a3ba238e0bf6fa9***\\"}', position='Query'),
  uploadTargetConfig?: string(name='UploadTargetConfig', description='The destination storage address.

Set StorageType to oss.

Set StorageLocation to an address in ApsaraVideo VOD. You cannot set this field to an OSS URL.', example='{\\"StorageType\\":\\"oss\\",\\"StorageLocation\\":\\"outin-***.oss-cn-shanghai.aliyuncs.com\\"}', position='Query'),
  userData?: string(name='UserData', description='The user data. The value must be a JSON string. You can configure settings such as message callbacks.', example='{"MessageCallback":{"CallbackURL":"http://example.aliyundoc.com"},"Extend":{"localId":"*****","test":"www"}}', position='Query'),
}

model CreateUploadMediaResponseBody = {
  fileURL?: string(name='FileURL', description='The OSS URL of the file. The URL does not contain the information used for authentication.', example='http://outin-***.oss-cn-north-2-gov-1.aliyuncs.com/sv/40360f05-181f63c3110-0004-cd8e-27f-de3c9.mp4'),
  mediaId?: string(name='MediaId', description='The ID of the media asset.', example='****20b48fb04483915d4f2cd8ac****'),
  mediaURL?: string(name='MediaURL', description='The URL of the media asset.

>  If a domain name for Alibaba Cloud CDN (CDN) is specified, a CDN URL is returned. Otherwise, an OSS URL is returned. If the HTTP status code 403 is returned when you access the URL from your browser, the URL authentication feature of ApsaraVideo VOD is enabled. To resolve this issue, disable URL authentication or generate an authentication signature.', example='https://xxq-live-playback.oss-cn-shanghai.aliyuncs.com/capture/5d96d2b4-111b-4e5d-a0e5-20f44405bb55.mp4'),
  requestId?: string(name='RequestId', description='The request ID.', example='4E84BE44-58A7-****-****-FBEBEA16EF94'),
  uploadAddress?: string(name='UploadAddress', description='The upload URL.

>  The returned upload URL is a Base64-encoded URL. You must decode the Base64-encoded upload URL before you use an SDK or call an API operation to upload media files. You need to parse UploadAddress only if you use OSS SDK or call an OSS API operation to upload media files.', example='eyJFbmRwb2ludCI6Imh0dHBzOi8vb3NzLWNuLXNoYW5naGFpLmFsaXl1bmNzLmNvbSIsIkJ1Y2tldCI6InN6aGQtdmlkZW8iLCJGaWxlTmFtZSI6InZvZC0yOTYzMWEvc3YvNTBmYTJlODQtMTgxMjdhZGRiMTcvNTBmYTJlODQtMTgxMjdhZGRiM***'),
  uploadAuth?: string(name='UploadAuth', description='The upload credential.

>  The returned upload credential is a Base64-encoded value. You must decode the Base64-encoded upload URL before you use an SDK or call an API operation to upload media files. You need to parse UploadAuth only if you use OSS SDK or call an OSS API operation to upload media files.', example='eyJBY2Nlc3NLZXlJZCI6IkxUQUk0Rm53bTk1dHdxQjMxR3IzSE5hRCIsIkFjY2Vzc0tleVNlY3JldCI6Ik9lWllKR0dTMTlkNkZaM1E3UVpJQmdmSVdnM3BPaiIsIkV4cGlyYXRpb24iOiI***'),
}

model CreateUploadMediaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUploadMediaResponseBody(name='body'),
}

/**
  * @description *   You can call this operation to obtain the upload URLs and credentials of audio and video files. You can also call this operation to obtain the upload URLs and credentials of images and auxiliary media assets.
  * *   Obtaining an upload URL and credential is essential for Intelligent Media Services (IMS) and is required in each upload operation.
  * *   If the video upload credential expires, you can call the RefreshUploadMedia operation to obtain a new upload credential. The default validity period of a video upload credential is 3,000 seconds.
  * *   After you upload a media asset, you can configure a callback to receive upload event notifications or call the GetMediaInfo operation to determine whether the media asset is uploaded based on the returned status.
  * *   The MediaId parameter returned by this operation can be used for media asset lifecycle management or media processing.
  * *   You can call this operation to upload media assets only to ApsaraVideo VOD, but not to your own Object Storage Service (OSS) buckets. To upload a media asset to your own OSS bucket, you can upload the file to your OSS bucket by using [OSS SDK](https://help.aliyun.com/document_detail/32006.html), and then call the [RegisterMediaInfo](https://help.aliyun.com/document_detail/441152.html) operation to register the file in the OSS bucket with the media asset library.
  * *   This operation is available only in the China (Shanghai), China (Beijing), and China (Shenzhen) regions.
  * @param request  the request parameters of CreateUploadMedia  CreateUploadMediaRequest
  * @return CreateUploadMediaResponse
 */
async function createUploadMedia(request: CreateUploadMediaRequest): CreateUploadMediaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUploadMedia', 'POST', '/', 'json', false, 'json', request);
}

model CreateUploadStreamRequest {
  regionId?: string(name='RegionId', position='Host'),
  definition?: string(name='Definition', description='The quality of the media stream. Valid values:

*   FD: low definition.
*   LD: standard definition.
*   SD: high definition.
*   HD: ultra-high definition.
*   OD: original quality.
*   2K: 2K resolution.
*   4K: 4K resolution.
*   SQ: standard sound quality.
*   HQ: high sound quality.', example='HD', position='Query'),
  fileExtension?: string(name='FileExtension', description='The file name extension of the media stream.', example='MP4', position='Query'),
  HDRType?: string(name='HDRType', description='The high dynamic range (HDR) format of the transcoded stream. Valid values:

*   HDR
*   HDR10
*   HLG
*   DolbyVision
*   HDRVivid
*   SDR+

> 

*   The value is not case-sensitive,

*   You can leave this parameter empty for non-HDR streams.', example='HDR10', position='Query'),
  mediaId?: string(name='MediaId', description='The ID of the media asset.', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  userData?: string(name='UserData', description='The user data.', example='{"MessageCallback":{"CallbackURL":"http://aliyundoc.com"}, "Extend":{"localId":"xxx","test":"www"}}', position='Query'),
}

model CreateUploadStreamResponseBody = {
  fileURL?: string(name='FileURL', description='The Object Storage Service (OSS) URL of the file. The URL does not contain the information used for authentication.', example='http://outin-***.oss-cn-shanghai.aliyuncs.com/stream/48555e8b-181dd5a8c07/48555e8b-181dd5a8c07.mp4'),
  mediaId?: string(name='MediaId', description='The ID of the media asset.', example='****c469e944b5a856828dc2****'),
  requestId?: string(name='RequestId', description='The request ID.', example='******11-DB8D-4A9A-875B-275798******'),
  uploadAddress?: string(name='UploadAddress', description='The upload URL.

>  The returned upload URL is a Base64-encoded URL. You must decode the Base64-encoded upload URL before you use an SDK or call an API operation to upload media files. You need to parse UploadAddress only if you use OSS SDK or call an OSS API operation to upload media files.', example='eyJFbmRwb2ludCI6Imh0dHBzOi8vb3NzLWNuLXNoYW5naGFpLmFsaXl1bmNzLmNvbSIsIkJ1Y2tldCI6InN6aGQtdmlkZW8iLCJGaWxlTmFtZSI6InZvZC0yOTYzMWEvc3YvNTBmYTJlODQtMTgxMjdhZGRiMTcvNTBmYTJlODQtMTgxMjdhZGRiM***'),
  uploadAuth?: string(name='UploadAuth', description='The upload credential.

>  The returned upload credential is a Base64-encoded value. You must decode the Base64-encoded upload URL before you use an SDK or call an API operation to upload media files. You need to parse UploadAuth only if you use OSS SDK or call an OSS API operation to upload media files.', example='eyJBY2Nlc3NLZXlJZCI6IkxUQUk0Rm53bTk1dHdxQjMxR3IzSE5hRCIsIkFjY2Vzc0tleVNlY3JldCI6Ik9lWllKR0dTMTlkNkZaM1E3UVpJQmdmSVdnM3BPaiIsIkV4cGlyYXRpb24iOiI***'),
}

model CreateUploadStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUploadStreamResponseBody(name='body'),
}

/**
  * @description *   You can call this operation to upload only a local media stream. After the media stream is uploaded, it is associated with the specified media asset ID.
  * *   You can call this operation to upload media streams only to ApsaraVideo VOD, but not to your own Object Storage Service (OSS) buckets. To upload a media stream to your own OSS bucket, you can upload the file to your OSS bucket by using [OSS SDK](https://help.aliyun.com/document_detail/32006.html), and then call the [RegisterMediaStream](https://help.aliyun.com/document_detail/440765.html) operation to associate the media stream with the specified media asset ID.
  * *   This operation is available only in the China (Shanghai), China (Beijing), and China (Shenzhen) regions.
  * @param request  the request parameters of CreateUploadStream  CreateUploadStreamRequest
  * @return CreateUploadStreamResponse
 */
async function createUploadStream(request: CreateUploadStreamRequest): CreateUploadStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUploadStream', 'POST', '/', 'json', false, 'json', request);
}

model DecryptKMSDataKeyRequest {
  ciphertextBlob: string(name='CiphertextBlob', description='This parameter is required.', example='ODZhOWVmZDktM2QxNi00ODk0LWJkNGYtMWZjNDNmM2YyYWJmS7FmDBBQ0BkKsQrtRnidtPwirmDcS0ZuJCU41xxAAWk4Z8qsADfbV0b+i6kQmlvj79dJdGOvtX69Uycs901qOjop4bTS****', position='Query'),
}

model DecryptKMSDataKeyResponseBody = {
  dataKey?: {
    keyId?: string(name='KeyId', example='202b9877-5a25-46e3-a763-e20791b5****'),
    plaintext?: string(name='Plaintext', example='tRYXuCwgja12xxO1N/gZERDDCLw9doZEQiPDk/Bv****'),
  }(name='DataKey'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model DecryptKMSDataKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DecryptKMSDataKeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DecryptKMSDataKey  DecryptKMSDataKeyRequest
  * @return DecryptKMSDataKeyResponse
 */
async function decryptKMSDataKey(request: DecryptKMSDataKeyRequest): DecryptKMSDataKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DecryptKMSDataKey', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAvatarTrainingJobRequest {
  jobId: string(name='JobId', description='This parameter is required.', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model DeleteAvatarTrainingJobResponseBody = {
  data?: {
    jobId?: string(name='JobId', example='****d718e2ff4f018ccf419a7b71****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model DeleteAvatarTrainingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAvatarTrainingJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAvatarTrainingJob  DeleteAvatarTrainingJobRequest
  * @return DeleteAvatarTrainingJobResponse
 */
async function deleteAvatarTrainingJob(request: DeleteAvatarTrainingJobRequest): DeleteAvatarTrainingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAvatarTrainingJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCategoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  cateId: long(name='CateId', description='The category ID. You can use one of the following methods to obtain the ID:

*   Log on to the [Intelligent Media Services (IMS) console](https://ims.console.aliyun.com) and choose **Media Asset Management** > **Category Management** to view the category ID.
*   View the value of CateId returned by the AddCategory operation that you called to create a category.
*   View the value of CateId returned by the GetCategories operation that you called to query a category.

This parameter is required.', example='46', position='Query'),
}

model DeleteCategoryResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
}

model DeleteCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCategoryResponseBody(name='body'),
}

/**
  * @description This operation also deletes the subcategories, including the level-2 and level-3 categories, of the category.
  * @param request  the request parameters of DeleteCategory  DeleteCategoryRequest
  * @return DeleteCategoryResponse
 */
async function deleteCategory(request: DeleteCategoryRequest): DeleteCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCategory', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomTemplateRequest {
  templateId: string(name='TemplateId', description='This parameter is required.', example='****96e8864746a0b6f3****', position='Query'),
}

model DeleteCustomTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model DeleteCustomTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustomTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCustomTemplate  DeleteCustomTemplateRequest
  * @return DeleteCustomTemplateResponse
 */
async function deleteCustomTemplate(request: DeleteCustomTemplateRequest): DeleteCustomTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomizedVoiceJobRequest {
  jobId: string(name='JobId', description='This parameter is required.', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model DeleteCustomizedVoiceJobResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model DeleteCustomizedVoiceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustomizedVoiceJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCustomizedVoiceJob  DeleteCustomizedVoiceJobRequest
  * @return DeleteCustomizedVoiceJobResponse
 */
async function deleteCustomizedVoiceJob(request: DeleteCustomizedVoiceJobRequest): DeleteCustomizedVoiceJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomizedVoiceJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDNADBRequest {
  DBId: string(name='DBId', description='This parameter is required.', example='fb712a6890464059b1b2ea7c8647****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDNADBResponseBody = {
  requestId?: string(name='RequestId', example='25818875-5F78-4A13-BEF6-D7393642CA58'),
}

model DeleteDNADBResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDNADBResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDNADB  DeleteDNADBRequest
  * @return DeleteDNADBResponse
 */
async function deleteDNADB(request: DeleteDNADBRequest): DeleteDNADBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDNADB', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDNAFilesRequest {
  DBId: string(name='DBId', description='This parameter is required.', example='fb712a6890464059b1b2ea7c8647****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  primaryKeys: string(name='PrimaryKeys', description='This parameter is required.', example='41e6536e4f2250e2e9bf26cdea19****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDNAFilesResponseBody = {
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model DeleteDNAFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDNAFilesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDNAFiles  DeleteDNAFilesRequest
  * @return DeleteDNAFilesResponse
 */
async function deleteDNAFiles(request: DeleteDNAFilesRequest): DeleteDNAFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDNAFiles', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEditingProjectMaterialsRequest {
  materialIds: string(name='MaterialIds', description='The material ID. Separate multiple material IDs with commas (,). You can specify up to 10 IDs.

This parameter is required.', example='*****cbd721b418a89a7dafb1dc*****,*****86f5d534c95997c55c96f*****', position='Query'),
  materialType: string(name='MaterialType', description='The material type. Valid values:

\\- video

\\- image

\\- audio

\\- subtitle

\\- text

This parameter is required.', example='video', position='Query'),
  projectId: string(name='ProjectId', description='The ID of the online editing project.

This parameter is required.', example='*****fb2101cb318*****', position='Query'),
}

model DeleteEditingProjectMaterialsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='******36-3C1E-4417-BDB2-1E034F******'),
}

model DeleteEditingProjectMaterialsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEditingProjectMaterialsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteEditingProjectMaterials  DeleteEditingProjectMaterialsRequest
  * @return DeleteEditingProjectMaterialsResponse
 */
async function deleteEditingProjectMaterials(request: DeleteEditingProjectMaterialsRequest): DeleteEditingProjectMaterialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEditingProjectMaterials', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEditingProjectsRequest {
  projectIds?: string(name='ProjectIds', description='The ID of the online editing project. You can specify multiple IDs separated with commas (,).', example='****fb2101bf24bf41cb318787dc****,****87dcfb2101bf24bf41cb3187****', position='Query'),
}

model DeleteEditingProjectsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='****25818875-5F78-4AF6-D7393642CA58****'),
}

model DeleteEditingProjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEditingProjectsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteEditingProjects  DeleteEditingProjectsRequest
  * @return DeleteEditingProjectsResponse
 */
async function deleteEditingProjects(request: DeleteEditingProjectsRequest): DeleteEditingProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEditingProjects', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveRecordFilesRequest {
  recordIds: [ string ](name='RecordIds', description='This parameter is required.', position='Query'),
  removeFile?: boolean(name='RemoveFile', example='true', position='Query'),
}

model DeleteLiveRecordFilesResponseBody = {
  deleteFileInfoList?: [ 
    {
      code?: string(name='Code', example='OK'),
      message?: string(name='Message', example='OK'),
      recordId?: string(name='RecordId', example='13cbb83e-043c-4728-ac35-*****'),
    }
  ](name='DeleteFileInfoList'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='13cbb83e-043c-4728-ac35-*****'),
}

model DeleteLiveRecordFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLiveRecordFilesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteLiveRecordFiles  DeleteLiveRecordFilesRequest
  * @return DeleteLiveRecordFilesResponse
 */
async function deleteLiveRecordFiles(request: DeleteLiveRecordFilesRequest): DeleteLiveRecordFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveRecordFiles', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveRecordTemplateRequest {
  templateId: string(name='TemplateId', description='代表资源一级ID的资源属性字段

This parameter is required.', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66', position='Query'),
}

model DeleteLiveRecordTemplateResponseBody = {
  requestId?: string(name='RequestId', example='3E5330CF-B4C8-5BEF-AA6B-8E70BD20FAEE'),
}

model DeleteLiveRecordTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLiveRecordTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteLiveRecordTemplate  DeleteLiveRecordTemplateRequest
  * @return DeleteLiveRecordTemplateResponse
 */
async function deleteLiveRecordTemplate(request: DeleteLiveRecordTemplateRequest): DeleteLiveRecordTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveRecordTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveSnapshotFilesRequest {
  createTimestampList: [ long ](name='CreateTimestampList', description='This parameter is required.', shrink='json', position='Query'),
  deleteOriginalFile?: boolean(name='DeleteOriginalFile', example='true', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='****a046-263c-3560-978a-fb287782****', position='Query'),
}

model DeleteLiveSnapshotFilesResponseBody = {
  deleteFileResultList?: [ 
    {
      createTimestamp?: long(name='CreateTimestamp', example='1660638613798'),
      result?: string(name='Result', example='OK'),
    }
  ](name='DeleteFileResultList'),
  requestId?: string(name='RequestId', example='****2876-6263-4B75-8F2C-CD0F7FCF****'),
}

model DeleteLiveSnapshotFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLiveSnapshotFilesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteLiveSnapshotFiles  DeleteLiveSnapshotFilesRequest
  * @return DeleteLiveSnapshotFilesResponse
 */
async function deleteLiveSnapshotFiles(request: DeleteLiveSnapshotFilesRequest): DeleteLiveSnapshotFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveSnapshotFiles', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveSnapshotTemplateRequest {
  templateId: string(name='TemplateId', description='This parameter is required.', example='****a046-263c-3560-978a-fb287782****', position='Body'),
}

model DeleteLiveSnapshotTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model DeleteLiveSnapshotTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLiveSnapshotTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteLiveSnapshotTemplate  DeleteLiveSnapshotTemplateRequest
  * @return DeleteLiveSnapshotTemplateResponse
 */
async function deleteLiveSnapshotTemplate(request: DeleteLiveSnapshotTemplateRequest): DeleteLiveSnapshotTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveSnapshotTemplate', 'POST', '/', 'json', true, 'form', request);
}

model DeleteLiveTranscodeJobRequest {
  jobId: string(name='JobId', description='This parameter is required.', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model DeleteLiveTranscodeJobResponseBody = {
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
}

model DeleteLiveTranscodeJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLiveTranscodeJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteLiveTranscodeJob  DeleteLiveTranscodeJobRequest
  * @return DeleteLiveTranscodeJobResponse
 */
async function deleteLiveTranscodeJob(request: DeleteLiveTranscodeJobRequest): DeleteLiveTranscodeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveTranscodeJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveTranscodeTemplateRequest {
  templateId: string(name='TemplateId', description='This parameter is required.', example='****d80e4e4044975745c14b****', position='Query'),
}

model DeleteLiveTranscodeTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
}

model DeleteLiveTranscodeTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLiveTranscodeTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteLiveTranscodeTemplate  DeleteLiveTranscodeTemplateRequest
  * @return DeleteLiveTranscodeTemplateResponse
 */
async function deleteLiveTranscodeTemplate(request: DeleteLiveTranscodeTemplateRequest): DeleteLiveTranscodeTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveTranscodeTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMediaFromSearchLibRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaId: string(name='MediaId', description='The ID of the media asset.

This parameter is required.', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  msgBody?: string(name='MsgBody', description='The message body.', example='{}', position='Query'),
  searchLibName?: string(name='SearchLibName', description='The name of the search library. Default value: ims-default-search-lib.', example='test1', position='Query'),
}

model DeleteMediaFromSearchLibResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  mediaId?: string(name='MediaId', description='The ID of the media asset.', example='******b48fb04483915d4f2cd8******'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='******11-DB8D-4A9A-875B-275798******'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteMediaFromSearchLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMediaFromSearchLibResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteMediaFromSearchLib  DeleteMediaFromSearchLibRequest
  * @return DeleteMediaFromSearchLibResponse
 */
async function deleteMediaFromSearchLib(request: DeleteMediaFromSearchLibRequest): DeleteMediaFromSearchLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMediaFromSearchLib', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMediaInfosRequest {
  regionId?: string(name='RegionId', position='Host'),
  deletePhysicalFiles?: boolean(name='DeletePhysicalFiles', description='Specifies whether to delete the physical file of the media asset.

If the media asset is stored in your own OSS bucket, you must authorize the service role AliyunICEDefaultRole in advance. For more information<props="china">, see [Authorize IMS to delete recording files in OSS](https://help.aliyun.com/zh/ims/user-guide/record?spm=a2c4g.11186623.0.i8#0737d9c437bmn).', example='false', position='Query'),
  inputURLs?: string(name='InputURLs', description='The URL of the media asset that you want to delete. The file corresponding to the URL must be registered with IMS. Separate multiple URLs with commas (,). The following two formats are supported:

1.  http(s)://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?
2.  OSS://example-bucket/example.mp4?\\
    In this format, it is considered by default that the region of the OSS bucket in which the media asset resides is the same as the region in which IMS is activated.', position='Query'),
  mediaIds?: string(name='MediaIds', description='The ID of the media asset that you want to delete from Intelligent Media Services (IMS).

*   Separate multiple IDs with commas (,).

If you leave MediaIds empty, you must specify InputURLs.', example='****20b48fb04483915d4f2cd8ac****,****15d4a4b0448391508f2cb486****', position='Query'),
}

model DeleteMediaInfosResponseBody = {
  forbiddenList?: [ string ](name='ForbiddenList', description='The IDs or URLs of media assets that cannot be deleted. Generally, media assets cannot be deleted if you do not have the required permissions.'),
  ignoredList?: [ string ](name='IgnoredList', description='The IDs or URLs of ignored media assets. An error occurred while obtaining such media assets.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0622C702-41BE-467E-AF2E-883D4517962E'),
}

model DeleteMediaInfosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMediaInfosResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteMediaInfos  DeleteMediaInfosRequest
  * @return DeleteMediaInfosResponse
 */
async function deleteMediaInfos(request: DeleteMediaInfosRequest): DeleteMediaInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMediaInfos', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMediaMarksRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaId?: string(name='MediaId', description='The ID of the media asset.', example='****c469e944b5a856828dc2****', position='Query'),
  mediaMarkIds?: string(name='MediaMarkIds', description='The mark ID. You can specify multiple mark IDs separated with commas (,).

If you do not specify MediaMarkIds, all the marks of the media asset are deleted.', example='mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60', position='Query'),
}

model DeleteMediaMarksResponseBody = {
  mediaId?: string(name='MediaId', description='The ID of the media asset.', example='****019b82e24b37a1c2958dec38****'),
  mediaMarkIds?: string(name='MediaMarkIds', description='The IDs of the deleted marks separated with commas (,).', example='mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60'),
  requestId?: string(name='RequestId', description='The request ID.', example='******11-DB8D-4A9A-875B-275798******'),
}

model DeleteMediaMarksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMediaMarksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteMediaMarks  DeleteMediaMarksRequest
  * @return DeleteMediaMarksResponse
 */
async function deleteMediaMarks(request: DeleteMediaMarksRequest): DeleteMediaMarksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMediaMarks', 'POST', '/', 'json', false, 'json', request);
}

model DeletePipelineRequest {
  pipelineId: string(name='PipelineId', description='This parameter is required.', example='****96e8864746a0b6f3****', position='Query'),
}

model DeletePipelineResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model DeletePipelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePipelineResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeletePipeline  DeletePipelineRequest
  * @return DeletePipelineResponse
 */
async function deletePipeline(request: DeletePipelineRequest): DeletePipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePipeline', 'POST', '/', 'json', false, 'json', request);
}

model DeletePlayInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  deletePhysicalFiles?: boolean(name='DeletePhysicalFiles', description='Specifies whether to delete the physical file of the media stream.

If the media asset is stored in your own Object Storage Service (OSS) bucket, you must authorize the service role AliyunICEDefaultRole in advance. <props="china">For more information, see [Authorize IMS to delete recording files in OSS](https://help.aliyun.com/document_detail/449331.html#p-ko2-wc7-iad).

You can delete only the physical files of transcoded streams, but not the physical files of source files.', example='false', position='Query'),
  fileURLs?: string(name='FileURLs', description='The URL of the media stream file that you want to delete. Separate multiple URLs with commas (,).', example='https://ice-test001.oss-cn-shanghai.aliyuncs.com/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%E5%B0%8F%E7%8C%AA%E4%BD%A9%E5%A5%87640*360.mp4', position='Query'),
  mediaId?: string(name='MediaId', description='The ID of the media asset.', example='1d3518e0027d71ed80cd909598416303', position='Query'),
}

model DeletePlayInfoResponseBody = {
  forbiddenList?: [ string ](name='ForbiddenList', description='The URLs of the media streams that cannot be deleted. Generally, media streams cannot be deleted if you do not have the required permissions.'),
  ignoredList?: [ string ](name='IgnoredList', description='The URLs of ignored media streams. An error occurred while obtaining such media assets because the IDs or URLs of the media assets do not exist.'),
  requestId?: string(name='RequestId', description='The request ID.', example='******11-DB8D-4A9A-875B-275798******'),
}

model DeletePlayInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePlayInfoResponseBody(name='body'),
}

/**
  * @description You can call this operation to delete multiple media streams at a time.
  * @param request  the request parameters of DeletePlayInfo  DeletePlayInfoRequest
  * @return DeletePlayInfoResponse
 */
async function deletePlayInfo(request: DeletePlayInfoRequest): DeletePlayInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePlayInfo', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSmartJobRequest {
  jobId?: string(name='JobId', example='******b48fb04483915d4f2cd8******,******042d5e4db6866f6289d1******', position='Query'),
}

model DeleteSmartJobResponseBody = {
  requestId?: string(name='RequestId', description='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model DeleteSmartJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSmartJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSmartJob  DeleteSmartJobRequest
  * @return DeleteSmartJobResponse
 */
async function deleteSmartJob(request: DeleteSmartJobRequest): DeleteSmartJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSmartJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTemplateRequest {
  templateIds?: string(name='TemplateIds', example='****20b48fb04483915d4f2cd8ac****,****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model DeleteTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model DeleteTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteTemplate  DeleteTemplateRequest
  * @return DeleteTemplateResponse
 */
async function deleteTemplate(request: DeleteTemplateRequest): DeleteTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTemplate', 'GET', '/', 'json', false, 'json', request);
}

model DescribeAIAgentInstanceRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='39f8e0bc005e4f309379701645f4****', position='Query'),
}

model DescribeAIAgentInstanceResponseBody = {
  instance?: {
    callLogUrl?: string(name='CallLogUrl', example='https://example.com/call_logs/12345'),
    runtimeConfig?: AIAgentRuntimeConfig(name='RuntimeConfig', example='{"VoiceChat":{"AgentUserId":"voice_agent_001","ChannelId":"voice_channel_001","AuthToken":"your_voice_chat_auth_token"}}'),
    status?: string(name='Status', example='Finished'),
    templateConfig?: AIAgentTemplateConfig(name='TemplateConfig', example='{"VoiceChat": {"AppId": "your_voice_chat_app_id"}}'),
    userData?: string(name='UserData', example='{"Email":"johndoe@example.com","Preferences":{"Language":"en"}}'),
  }(name='Instance'),
  requestId?: string(name='RequestId', example='7B117AF5-2A16-412C-B127-FA6175ED1AD0'),
}

model DescribeAIAgentInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAIAgentInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAIAgentInstance  DescribeAIAgentInstanceRequest
  * @return DescribeAIAgentInstanceResponse
 */
async function describeAIAgentInstance(request: DescribeAIAgentInstanceRequest): DescribeAIAgentInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAIAgentInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterImsEditUsageRequest {
  endTs: long(name='EndTs', description='This parameter is required.', example='1656995036', position='Query'),
  interval: long(name='Interval', description='This parameter is required.', example='86400', position='Query'),
  region?: string(name='Region', example='cn-shanghai', position='Query'),
  startTs: long(name='StartTs', description='This parameter is required.', example='1654403036', position='Query'),
}

model DescribeMeterImsEditUsageResponseBody = {
  data?: [ 
    {
      duration?: long(name='Duration', example='1.23'),
      profile?: string(name='Profile', example='1080P'),
      time?: long(name='Time', example='1656950400'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='7F3AE2C6-5CC6-5712-BAC5-5A735A157687'),
}

model DescribeMeterImsEditUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeterImsEditUsageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeMeterImsEditUsage  DescribeMeterImsEditUsageRequest
  * @return DescribeMeterImsEditUsageResponse
 */
async function describeMeterImsEditUsage(request: DescribeMeterImsEditUsageRequest): DescribeMeterImsEditUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterImsEditUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterImsMediaConvertUHDUsageRequest {
  endTs: long(name='EndTs', description='This parameter is required.', example='1656995036', position='Query'),
  interval: string(name='Interval', description='This parameter is required.', example='3600', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  startTs: long(name='StartTs', description='This parameter is required.', example='1654403036', position='Query'),
}

model DescribeMeterImsMediaConvertUHDUsageResponseBody = {
  data?: [ 
    {
      duration?: long(name='Duration', example='308028'),
      specification?: string(name='Specification', example='SuperResolution.Standard.1080P'),
      time?: long(name='Time', example='1656950400'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='BEA98A0C-7870-15FE-B96F-8880BB600A2C'),
}

model DescribeMeterImsMediaConvertUHDUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeterImsMediaConvertUHDUsageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeMeterImsMediaConvertUHDUsage  DescribeMeterImsMediaConvertUHDUsageRequest
  * @return DescribeMeterImsMediaConvertUHDUsageResponse
 */
async function describeMeterImsMediaConvertUHDUsage(request: DescribeMeterImsMediaConvertUHDUsageRequest): DescribeMeterImsMediaConvertUHDUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterImsMediaConvertUHDUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterImsMediaConvertUsageRequest {
  endTs: long(name='EndTs', description='This parameter is required.', example='1656995036', position='Query'),
  interval: long(name='Interval', description='This parameter is required.', example='86400', position='Query'),
  region?: string(name='Region', example='cn-shanghai', position='Query'),
  startTs: long(name='StartTs', description='This parameter is required.', example='1654403036', position='Query'),
}

model DescribeMeterImsMediaConvertUsageResponseBody = {
  data?: [ 
    {
      duration?: long(name='Duration', example='20'),
      specification?: string(name='Specification', example='H264.HD'),
      time?: long(name='Time', example='1656950400'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='FBBB5210-2B78-58FB-A6FE-9DD887BB2C61'),
}

model DescribeMeterImsMediaConvertUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeterImsMediaConvertUsageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeMeterImsMediaConvertUsage  DescribeMeterImsMediaConvertUsageRequest
  * @return DescribeMeterImsMediaConvertUsageResponse
 */
async function describeMeterImsMediaConvertUsage(request: DescribeMeterImsMediaConvertUsageRequest): DescribeMeterImsMediaConvertUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterImsMediaConvertUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterImsMpsAiUsageRequest {
  endTs: long(name='EndTs', description='This parameter is required.', example='1656995036', position='Query'),
  interval: long(name='Interval', description='This parameter is required.', example='86400', position='Query'),
  region?: string(name='Region', example='cn-shanghai', position='Query'),
  startTs: long(name='StartTs', description='This parameter is required.', example='1654403036', position='Query'),
}

model DescribeMeterImsMpsAiUsageResponseBody = {
  data?: [ 
    {
      duration?: long(name='Duration', example='644'),
      time?: long(name='Time', example='1656950400'),
      type?: string(name='Type'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='0622C702-41BE-467E-AF2E-883D4517962E'),
}

model DescribeMeterImsMpsAiUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeterImsMpsAiUsageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeMeterImsMpsAiUsage  DescribeMeterImsMpsAiUsageRequest
  * @return DescribeMeterImsMpsAiUsageResponse
 */
async function describeMeterImsMpsAiUsage(request: DescribeMeterImsMpsAiUsageRequest): DescribeMeterImsMpsAiUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterImsMpsAiUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterImsSummaryRequest {
  endTs: long(name='EndTs', description='This parameter is required.', example='1656995036', position='Query'),
  region?: string(name='Region', example='cn-shanghai', position='Query'),
  startTs: long(name='StartTs', description='This parameter is required.', example='1654403036', position='Query'),
}

model DescribeMeterImsSummaryResponseBody = {
  data?: [ 
    {
      editingDuration?: string(name='EditingDuration', example='8722'),
      liveEditDuration?: string(name='LiveEditDuration'),
      liveRecordDuration?: string(name='LiveRecordDuration'),
      liveSnapshotCount?: string(name='LiveSnapshotCount'),
      liveTranscodeDuration?: long(name='LiveTranscodeDuration', example='12356'),
      mpsAiDuration?: long(name='MpsAiDuration', example='0'),
      mpsTranscodeDuration?: long(name='MpsTranscodeDuration', example='17337'),
      mpsTranscodeUHDDuration?: long(name='MpsTranscodeUHDDuration', example='300'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='BEA98A0C-7870-15FE-B96F-8880BB600A2C'),
}

model DescribeMeterImsSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeterImsSummaryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeMeterImsSummary  DescribeMeterImsSummaryRequest
  * @return DescribeMeterImsSummaryResponse
 */
async function describeMeterImsSummary(request: DescribeMeterImsSummaryRequest): DescribeMeterImsSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterImsSummary', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNotifyConfigRequest {
  AIAgentId: string(name='AIAgentId', description='This parameter is required.', example='39f8e0bc005e4f309379701645f4****', position='Query'),
}

model DescribeNotifyConfigResponseBody = {
  callbackUrl?: string(name='CallbackUrl', example='http://customer.com/callback'),
  enableNotify?: boolean(name='EnableNotify', example='true'),
  eventTypes?: string(name='EventTypes', example='agent_start,agent_stop,error'),
  requestId?: string(name='RequestId', example='7B117AF5-2A16-412C-B127-FA6175ED1AD0'),
  token?: string(name='Token', example='eyJhcHBpZCI6ICIxMjM0MTIzNxxxxx'),
}

model DescribeNotifyConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNotifyConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeNotifyConfig  DescribeNotifyConfigRequest
  * @return DescribeNotifyConfigResponse
 */
async function describeNotifyConfig(request: DescribeNotifyConfigRequest): DescribeNotifyConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNotifyConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribePlayListRequest {
  beginTs: string(name='BeginTs', description='This parameter is required.', example='1676170500011', position='Query'),
  endTs: string(name='EndTs', description='This parameter is required.', example='1682474405173', position='Query'),
  orderName?: string(name='OrderName', example='FirstFrameDuration', position='Query'),
  orderType?: string(name='OrderType', example='DESC', position='Query'),
  pageNo: int32(name='PageNo', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  playType?: string(name='PlayType', example='vod', position='Query'),
  status?: string(name='Status', example='complete', position='Query'),
  traceId?: string(name='TraceId', example='0bc5e70516766285805381012d271e', position='Query'),
}

model DescribePlayListResponseBody = {
  pageNum?: long(name='PageNum', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  playList?: [ 
    {
      firstFrameDuration?: string(name='FirstFrameDuration', example='200'),
      playDuration?: string(name='PlayDuration', example='1000'),
      playTs?: string(name='PlayTs', example='1675922209572'),
      playType?: string(name='PlayType', example='vod'),
      sessionId?: string(name='SessionId', example='91488be2-8381-40c9-8494-e8afe22c4a2d'),
      status?: string(name='Status', example='complete'),
      stuckDuration?: string(name='StuckDuration', example='20'),
      traceId?: string(name='TraceId', example='0b736abf16724820210842673d9543'),
      videoDuration?: string(name='VideoDuration', example='2000'),
      videoId?: string(name='VideoId', example='250314203f0171eebff17035d0b20102'),
    }
  ](name='PlayList'),
  requestId?: string(name='RequestId', description='Id', example='B960580D-26FA-5547-8AFC-3CDC812DBF27'),
  totalNum?: long(name='TotalNum', example='49'),
}

model DescribePlayListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePlayListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribePlayList  DescribePlayListRequest
  * @return DescribePlayListResponse
 */
async function describePlayList(request: DescribePlayListRequest): DescribePlayListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePlayList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRtcRobotInstanceRequest {
  instanceId?: string(name='InstanceId', example='727dc0e296014bb58670940a3da95592', position='Query'),
}

model DescribeRtcRobotInstanceResponseBody = {
  authToken?: string(name='AuthToken', example='**********'),
  channelId?: string(name='ChannelId', example='testId'),
  config?: {
    enableVoiceInterrupt?: boolean(name='EnableVoiceInterrupt', example='true'),
    greeting?: string(name='Greeting'),
    voiceId?: string(name='VoiceId', example='zhixiaoxia'),
  }(name='Config'),
  requestId?: string(name='RequestId', description='Id of the request', example='20B3A1B6-4BD2-5DE6-BCBC-098C9B4F4E91'),
  status?: string(name='Status', example='Executing'),
  userData?: string(name='UserData', example='{}'),
  userId?: string(name='UserId', example='my-robot'),
}

model DescribeRtcRobotInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRtcRobotInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRtcRobotInstance  DescribeRtcRobotInstanceRequest
  * @return DescribeRtcRobotInstanceResponse
 */
async function describeRtcRobotInstance(request: DescribeRtcRobotInstanceRequest): DescribeRtcRobotInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRtcRobotInstance', 'POST', '/', 'json', false, 'json', request);
}

model DetectAudioForCustomizedVoiceJobRequest {
  audioRecordId: int32(name='AudioRecordId', description='This parameter is required.', example='1', minimum=1, maximum=20, position='Query'),
  recordUrl: string(name='RecordUrl', description='This parameter is required.', example='https://your-bucket.oss-cn-hangzhou.aliyuncs.com/record1.wav', position='Query'),
  voiceId: string(name='VoiceId', description='This parameter is required.', example='xiaozhuan', position='Query'),
}

model DetectAudioForCustomizedVoiceJobResponseBody = {
  data?: {
    pass?: boolean(name='Pass', example='false'),
    reason?: string(name='Reason'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model DetectAudioForCustomizedVoiceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetectAudioForCustomizedVoiceJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DetectAudioForCustomizedVoiceJob  DetectAudioForCustomizedVoiceJobRequest
  * @return DetectAudioForCustomizedVoiceJobResponse
 */
async function detectAudioForCustomizedVoiceJob(request: DetectAudioForCustomizedVoiceJobRequest): DetectAudioForCustomizedVoiceJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetectAudioForCustomizedVoiceJob', 'POST', '/', 'json', false, 'json', request);
}

model DropSearchIndexRequest {
  regionId?: string(name='RegionId', position='Host'),
  indexType: string(name='IndexType', description='The category of the index. Valid values:

*   mm: large visual model.
*   face: face recognition.
*   aiLabel: smart tagging.

This parameter is required.', example='mm', position='Query'),
  searchLibName?: string(name='SearchLibName', description='The name of the search library.

*   If you leave this parameter empty, the search index is created in the default search library of Intelligent Media Service (IMS). Default value: ims-default-search-lib.
*   To query information about an existing search library, call the [QuerySearchLib](https://help.aliyun.com/document_detail/2584455.html) API operation.', example='test1', position='Query'),
}

model DropSearchIndexResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='******11-DB8D-4A9A-875B-275798******'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model DropSearchIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DropSearchIndexResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DropSearchIndex  DropSearchIndexRequest
  * @return DropSearchIndexResponse
 */
async function dropSearchIndex(request: DropSearchIndexRequest): DropSearchIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DropSearchIndex', 'POST', '/', 'json', false, 'json', request);
}

model DropSearchLibRequest {
  regionId?: string(name='RegionId', position='Host'),
  searchLibName: string(name='SearchLibName', description='The name of the search library.

This parameter is required.', example='test1', position='Query'),
}

model DropSearchLibResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DropSearchLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DropSearchLibResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DropSearchLib  DropSearchLibRequest
  * @return DropSearchLibResponse
 */
async function dropSearchLib(request: DropSearchLibRequest): DropSearchLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DropSearchLib', 'POST', '/', 'json', false, 'json', request);
}

model GenerateAIAgentCallRequest {
  AIAgentId: string(name='AIAgentId', description='This parameter is required.', example='39f8e0bc005e4f309379701645f4****', position='Query'),
  expire?: long(name='Expire', example='3600', position='Query'),
  templateConfig?: AIAgentTemplateConfig(name='TemplateConfig', shrink='json', position='Query'),
  userId?: string(name='UserId', example='877ae632caae49b1afc81c2e8194ffb4', position='Query'),
}

model GenerateAIAgentCallResponseBody = {
  AIAgentUserId?: string(name='AIAgentUserId', example='877ae632caae49b1afc81c2e8194ffb4'),
  channelId?: string(name='ChannelId', example='70f22d5784194938a7e387052f2b3208'),
  instanceId?: string(name='InstanceId', example='39f8e0bc005e4f309379701645f4****'),
  requestId?: string(name='RequestId', example='7B117AF5-2A16-412C-B127-FA6175ED1AD0'),
  token?: string(name='Token', example='eyJhcHBpZCI6ICIxMjM0MTIzNxxxxx'),
  userId?: string(name='UserId', example='user123'),
}

model GenerateAIAgentCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateAIAgentCallResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenerateAIAgentCall  GenerateAIAgentCallRequest
  * @return GenerateAIAgentCallResponse
 */
async function generateAIAgentCall(request: GenerateAIAgentCallRequest): GenerateAIAgentCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateAIAgentCall', 'POST', '/', 'json', false, 'json', request);
}

model GenerateKMSDataKeyRequest {
}

model GenerateKMSDataKeyResponseBody = {
  dataKey?: {
    ciphertextBlob?: string(name='CiphertextBlob', example='ODZhOWVmZDktM2QxNi00ODk0LWJkNGYtMWZjNDNmM2YyYWJmS7FmDBBQ0BkKsQrtRnidtPwirmDcS0ZuJCU41xxAAWk4Z8qsADfbV0b+i6kQmlvj79dJdGOvtX69Uycs901qOjop4bTS****'),
    keyId?: string(name='KeyId', example='7906979c-8e06-46a2-be2d-68e3ccbc****'),
    plaintext?: string(name='Plaintext', example='QmFzZTY0IGVuY29kZWQgcGxhaW50****'),
  }(name='DataKey'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model GenerateKMSDataKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateKMSDataKeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenerateKMSDataKey  GenerateKMSDataKeyRequest
  * @return GenerateKMSDataKeyResponse
 */
async function generateKMSDataKey(request: GenerateKMSDataKeyRequest): GenerateKMSDataKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateKMSDataKey', 'POST', '/', 'json', false, 'json', request);
}

model GetAvatarRequest {
  avatarId: string(name='AvatarId', description='This parameter is required.', example='Avatar-XXXX', position='Query'),
}

model GetAvatarResponseBody = {
  data?: {
    avatar?: {
      avatarDescription?: string(name='AvatarDescription'),
      avatarId?: string(name='AvatarId', example='Avatar-XXXX'),
      avatarName?: string(name='AvatarName'),
      avatarType?: string(name='AvatarType', example='2DAvatar'),
      height?: int32(name='Height'),
      portrait?: string(name='Portrait', example='****571c704445f9a0ee011406c2****'),
      thumbnail?: string(name='Thumbnail', example='https://your-bucket.oss-cn-hangzhou.aliyuncs.com/thumbnail.png'),
      transparent?: boolean(name='Transparent', example='true'),
      width?: int32(name='Width'),
    }(name='Avatar'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model GetAvatarResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAvatarResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAvatar  GetAvatarRequest
  * @return GetAvatarResponse
 */
async function getAvatar(request: GetAvatarRequest): GetAvatarResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAvatar', 'POST', '/', 'json', false, 'json', request);
}

model GetAvatarTrainingJobRequest {
  jobId: string(name='JobId', description='This parameter is required.', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model GetAvatarTrainingJobResponseBody = {
  data?: {
    avatarTrainingJob?: {
      avatarDescription?: string(name='AvatarDescription'),
      avatarId?: string(name='AvatarId', example='Avatar-XXXX'),
      avatarName?: string(name='AvatarName'),
      avatarType?: string(name='AvatarType', example='2DAvatar'),
      firstTrainingTime?: string(name='FirstTrainingTime', example='2020-12-23T13:33:40Z'),
      jobId?: string(name='JobId', example='****55d86f7f4587943ce7734d6b****'),
      lastTrainingTime?: string(name='LastTrainingTime', example='2020-12-23T13:33:40Z'),
      message?: string(name='Message'),
      portrait?: string(name='Portrait', example='****571c704445f9a0ee011406c2****'),
      status?: string(name='Status', example='Success'),
      thumbnail?: string(name='Thumbnail', example='https://your-bucket.oss-cn-hangzhou.aliyuncs.com/thumbnail.png'),
      transparent?: boolean(name='Transparent', example='true'),
      video?: string(name='Video', example='****571c704445f9a0ee011406c2****'),
    }(name='AvatarTrainingJob'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model GetAvatarTrainingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAvatarTrainingJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAvatarTrainingJob  GetAvatarTrainingJobRequest
  * @return GetAvatarTrainingJobResponse
 */
async function getAvatarTrainingJob(request: GetAvatarTrainingJobRequest): GetAvatarTrainingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAvatarTrainingJob', 'POST', '/', 'json', false, 'json', request);
}

model GetBatchMediaProducingJobRequest {
  jobId?: string(name='JobId', example='****b4549d46c88681030f6e****', position='Query'),
}

model GetBatchMediaProducingJobResponseBody = {
  editingBatchJob?: {
    completeTime?: string(name='CompleteTime'),
    createTime?: string(name='CreateTime'),
    editingConfig?: string(name='EditingConfig', example='{
  "MediaConfig": {
      "Volume": 0
  },
  "SpeechConfig": {
      "Volume": 1
  },
 "BackgroundMusicConfig": {
      "Volume": 0.3
  }
}'),
    extend?: string(name='Extend', example='{
	"ErrorCode": "InvalidMaterial.NotFound",
	"ErrorMessage": "The specified clips id not found:[\\"****30d0b5e871eebb2ff7f6c75a****\\"]"
}'),
    inputConfig?: string(name='InputConfig'),
    jobId?: string(name='JobId', example='****b6b2750d4308892ac3330238****'),
    jobType?: string(name='JobType'),
    modifiedTime?: string(name='ModifiedTime'),
    outputConfig?: string(name='OutputConfig', example='{
  "MediaURL": "http://xxx.oss-cn-shanghai.aliyuncs.com/xxx_{index}.mp4",
  "Count": 20,
  "MaxDuration": 15,
  "Width": 1080,
  "Height": 1920,
  "Video": {"Crf": 27}
}'),
    status?: string(name='Status', example='Finished'),
    subJobList?: [ 
      {
        errorCode?: string(name='ErrorCode', example='InvalidMaterial.NotFound'),
        errorMessage?: string(name='ErrorMessage', example='The specified clips id not found:["****30d0b5e871eebb2ff7f6c75a****"]'),
        jobId?: string(name='JobId', example='****8e81933d44e3ae69e2f81485****'),
        mediaId?: string(name='MediaId', example='****1470b11171ee9d19e7e6c66a****'),
        mediaURL?: string(name='MediaURL', example='http:/xxx.oss-cn-shanghai.aliyuncs.com/xxx_0.mp4'),
        projectId?: string(name='ProjectId'),
        status?: string(name='Status', example='Success'),
      }
    ](name='SubJobList'),
    userData?: string(name='UserData', example='{"NotifyAddress":"http://xx.xx.xxx"}'),
  }(name='EditingBatchJob'),
  requestId?: string(name='RequestId', example='****36-3C1E-4417-BDB2-1E034F****'),
}

model GetBatchMediaProducingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBatchMediaProducingJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetBatchMediaProducingJob  GetBatchMediaProducingJobRequest
  * @return GetBatchMediaProducingJobResponse
 */
async function getBatchMediaProducingJob(request: GetBatchMediaProducingJobRequest): GetBatchMediaProducingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBatchMediaProducingJob', 'POST', '/', 'json', false, 'json', request);
}

model GetCategoriesRequest {
  regionId?: string(name='RegionId', position='Host'),
  cateId?: long(name='CateId', description='The category ID. You can use one of the following methods to obtain the ID:

*   Log on to the [Intelligent Media Services (IMS) console](https://ims.console.aliyun.com) and choose **Media Asset Management** > **Category Management** to view the category ID.
*   View the value of CateId returned by the AddCategory operation that you called to create a category.
*   View the value of CateId returned by the GetCategories operation that you called to query a category.', example='33', position='Query'),
  pageNo?: long(name='PageNo', description='The page number. Default value: 1', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Valid values: 10 to 100.', example='10', position='Query'),
  sortBy?: string(name='SortBy', description='The sorting rule of results. Valid values:

\\- CreationTime:Desc (default): The results are sorted in reverse chronological order based on the creation time.

\\- CreationTime:Asc: The results are sorted in chronological order based on the creation time.', example='CreationTime:Desc', position='Query'),
  type?: string(name='Type', description='The type of the category. Valid values: default and material. A value of default indicates audio, video, and image files. This is the default value. A value of material indicates short video materials.', example='default', position='Query'),
}

model GetCategoriesResponseBody = {
  category?: {
    cateId?: long(name='CateId', description='The category ID.', example='46'),
    cateName?: string(name='CateName', description='The category name.'),
    level?: long(name='Level', description='The level of the category. A value of **0** indicates a level-1 category, a value of **1** indicates a level-2 category, and a value of **2** indicates a level-3 category.', example='0'),
    parentId?: long(name='ParentId', description='The ID of the parent category.', example='-1'),
    type?: string(name='Type', description='The type of the category. Valid values:

*   **default**: audio, video, and image files. This is the default value.
*   **material**: short video materials.', example='default'),
  }(name='Category', description='The information about the category.'),
  requestId?: string(name='RequestId', description='The request ID.', example='******3B-0E1A-586A-AC29-742247******'),
  subCategories?: {
    category?: [ 
    {
      cateId?: long(name='CateId', description='The category ID.', example='129'),
      cateName?: string(name='CateName', description='The category name.

*   The value can be up to 64 bytes in length.
*   The value is encoded in UTF-8.'),
      level?: long(name='Level', description='The level of the category. A value of **0** indicates a level-1 category, a value of **1** indicates a level-2 category, and a value of **2** indicates a level-3 category.', example='1'),
      parentId?: long(name='ParentId', description='The ID of the parent category.', example='46'),
      subTotal?: long(name='SubTotal', description='The total number of subcategories.', example='100'),
      type?: string(name='Type', description='The type of the category. Valid values:

*   **default**: audio, video, and image files. This is the default value.
*   **material**: short video materials.', example='default'),
    }
  ](name='Category')
  }(name='SubCategories', description='The subcategories in the category.'),
  subTotal?: long(name='SubTotal', description='The total number of subcategories.', example='100'),
}

model GetCategoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCategoriesResponseBody(name='body'),
}

/**
  * @description You can call this operation to query the information about a category and its subcategories based on the category ID and category type.
  * @param request  the request parameters of GetCategories  GetCategoriesRequest
  * @return GetCategoriesResponse
 */
async function getCategories(request: GetCategoriesRequest): GetCategoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCategories', 'POST', '/', 'json', false, 'json', request);
}

model GetContentAnalyzeConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model GetContentAnalyzeConfigResponseBody = {
  contentAnalyzeConfig?: {
    auto?: boolean(name='Auto', example='true'),
    saveType?: string(name='SaveType', example='TEXT,FACE'),
    templateId?: string(name='TemplateId', example='S00000101-100070'),
  }(name='ContentAnalyzeConfig'),
  requestId?: string(name='RequestId', example='31FEC819-2344-5771-9366-9172DB0D26C9'),
}

model GetContentAnalyzeConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetContentAnalyzeConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetContentAnalyzeConfig  GetContentAnalyzeConfigRequest
  * @return GetContentAnalyzeConfigResponse
 */
async function getContentAnalyzeConfig(request: GetContentAnalyzeConfigRequest): GetContentAnalyzeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetContentAnalyzeConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetCustomTemplateRequest {
  subtype?: int32(name='Subtype', example='1', position='Query'),
  templateId?: string(name='TemplateId', example='****96e8864746a0b6f3****', position='Query'),
  type?: int32(name='Type', example='1', position='Query'),
}

model GetCustomTemplateResponseBody = {
  customTemplate?: {
    createTime?: string(name='CreateTime', example='2022-01-01T10:00:00Z'),
    frontendHint?: {
      transcodeTemplateHint?: {
        bitrateControlType?: string(name='BitrateControlType'),
      }(name='TranscodeTemplateHint'),
    }(name='FrontendHint'),
    isDefault?: boolean(name='IsDefault', example='true'),
    modifiedTime?: string(name='ModifiedTime', example='2022-01-01T11:00:00Z'),
    status?: string(name='Status', example='Normal'),
    subtype?: int32(name='Subtype', example='1'),
    subtypeName?: string(name='SubtypeName', example='Normal'),
    templateConfig?: string(name='TemplateConfig', example='{"Type":"Normal","FrameType":"normal","Time":0,"Count":10}'),
    templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
    templateName?: string(name='TemplateName', example='测试转码模板'),
    type?: int32(name='Type', example='2'),
    typeName?: string(name='TypeName', example='SnapshotTemplate'),
  }(name='CustomTemplate'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetCustomTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCustomTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCustomTemplate  GetCustomTemplateRequest
  * @return GetCustomTemplateResponse
 */
async function getCustomTemplate(request: GetCustomTemplateRequest): GetCustomTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCustomTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetCustomizedVoiceRequest {
  voiceId?: string(name='VoiceId', example='xiaozhuan', position='Query'),
}

model GetCustomizedVoiceResponseBody = {
  data?: {
    customizedVoice?: {
      demoAudioMediaId?: string(name='DemoAudioMediaId', example='****42d3c312402982be65975f5b****'),
      gender?: string(name='Gender', example='female'),
      scenario?: string(name='Scenario', example='interaction'),
      voiceDesc?: string(name='VoiceDesc'),
      voiceId?: string(name='VoiceId', example='xiaozhuan'),
      voiceName?: string(name='VoiceName'),
    }(name='CustomizedVoice'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
  success?: boolean(name='Success', example='true'),
}

model GetCustomizedVoiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCustomizedVoiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCustomizedVoice  GetCustomizedVoiceRequest
  * @return GetCustomizedVoiceResponse
 */
async function getCustomizedVoice(request: GetCustomizedVoiceRequest): GetCustomizedVoiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCustomizedVoice', 'POST', '/', 'json', false, 'json', request);
}

model GetCustomizedVoiceJobRequest {
  jobId: string(name='JobId', description='This parameter is required.', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model GetCustomizedVoiceJobResponseBody = {
  data?: {
    customizedVoiceJob?: {
      createTime?: string(name='CreateTime'),
      gender?: string(name='Gender'),
      jobId?: string(name='JobId', example='****571c704445f9a0ee011406c2****'),
      message?: string(name='Message'),
      scenario?: string(name='Scenario'),
      status?: string(name='Status', example='Fail'),
      type?: string(name='Type'),
      voiceDesc?: string(name='VoiceDesc'),
      voiceId?: string(name='VoiceId', example='xiaozhuan'),
      voiceName?: string(name='VoiceName'),
    }(name='CustomizedVoiceJob'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
  success?: boolean(name='Success', example='true'),
}

model GetCustomizedVoiceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCustomizedVoiceJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCustomizedVoiceJob  GetCustomizedVoiceJobRequest
  * @return GetCustomizedVoiceJobResponse
 */
async function getCustomizedVoiceJob(request: GetCustomizedVoiceJobRequest): GetCustomizedVoiceJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCustomizedVoiceJob', 'POST', '/', 'json', false, 'json', request);
}

model GetDefaultStorageLocationRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model GetDefaultStorageLocationResponseBody = {
  bucket?: string(name='Bucket', example='oss-test-bucket'),
  path?: string(name='Path', example='ice/dir'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  status?: string(name='Status', example='normal'),
  storageType?: string(name='StorageType', example='user_oss_bucket'),
}

model GetDefaultStorageLocationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDefaultStorageLocationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDefaultStorageLocation  GetDefaultStorageLocationRequest
  * @return GetDefaultStorageLocationResponse
 */
async function getDefaultStorageLocation(request: GetDefaultStorageLocationRequest): GetDefaultStorageLocationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDefaultStorageLocation', 'POST', '/', 'json', false, 'json', request);
}

model GetDemonstrationForCustomizedVoiceJobRequest {
  scenario: string(name='Scenario', description='This parameter is required.', example='story', position='Query'),
}

model GetDemonstrationForCustomizedVoiceJobResponseBody = {
  data?: {
    demonstrationList?: [ 
      {
        audioId?: int32(name='AudioId', example='2'),
        demoAudio?: string(name='DemoAudio', example='http://bucket.oss-cn-shanghai.aliyuncs.com/1.wav'),
        text?: string(name='Text'),
      }
    ](name='DemonstrationList'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model GetDemonstrationForCustomizedVoiceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDemonstrationForCustomizedVoiceJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDemonstrationForCustomizedVoiceJob  GetDemonstrationForCustomizedVoiceJobRequest
  * @return GetDemonstrationForCustomizedVoiceJobResponse
 */
async function getDemonstrationForCustomizedVoiceJob(request: GetDemonstrationForCustomizedVoiceJobRequest): GetDemonstrationForCustomizedVoiceJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDemonstrationForCustomizedVoiceJob', 'POST', '/', 'json', false, 'json', request);
}

model GetDynamicImageJobRequest {
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****', position='Query'),
}

model GetDynamicImageJobResponseBody = {
  dynamicImageJob?: {
    code?: string(name='Code', example='ResourceNotFound'),
    createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
    finishTime?: string(name='FinishTime', example='2022-07-12T16:30:54Z'),
    input?: {
      media?: string(name='Media', example='oss://test-bucket/sample-input.mp4'),
      ossFile?: {
        bucket?: string(name='Bucket', description='OSS Bucket', example='test-bucket'),
        location?: string(name='Location', description='OSS Location', example='oss-cn-shanghai'),
        object?: string(name='Object', description='OSS Object', example='sample-input.mp4'),
      }(name='OssFile'),
      type?: string(name='Type', example='OSS'),
    }(name='Input'),
    jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
    message?: string(name='Message', example='The specified resource for "CustomTemplate" could not be found.'),
    modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:30:54Z'),
    name?: string(name='Name', example='SampleJob'),
    output?: {
      media?: string(name='Media', example='****d80e4e4044975745c14b****'),
      ossFile?: {
        bucket?: string(name='Bucket', description='OSS Bucket', example='sample-bucket'),
        location?: string(name='Location', description='OSS Location', example='oss-cn-shanghai'),
        object?: string(name='Object', description='OSS Object', example='path/to/object'),
      }(name='OssFile'),
      type?: string(name='Type', example='Media'),
    }(name='Output'),
    outputUrl?: string(name='OutputUrl', example='http://test-bucket.oss-cn-shanghai.aliyuncs.com/output.gif'),
    pipelineId?: string(name='PipelineId', example='****d80e4e4044975745c14b****'),
    status?: string(name='Status', example='Success'),
    submitTime?: string(name='SubmitTime', example='2022-07-12T16:17:54Z'),
    templateConfig?: string(name='TemplateConfig', example='{"Format":"gif","Fps":5,"Height":1080,"Width":1920}'),
    templateId?: string(name='TemplateId', example='****d80e4e4044975745c14b****'),
    triggerSource?: string(name='TriggerSource', example='API'),
    userData?: string(name='UserData', example='{"sampleParam": "sampleValue"}'),
  }(name='DynamicImageJob'),
  requestId?: string(name='RequestId', example='******36-3C1E-4417-BDB2-1E034F******'),
}

model GetDynamicImageJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDynamicImageJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDynamicImageJob  GetDynamicImageJobRequest
  * @return GetDynamicImageJobResponse
 */
async function getDynamicImageJob(request: GetDynamicImageJobRequest): GetDynamicImageJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDynamicImageJob', 'POST', '/', 'json', false, 'json', request);
}

model GetEditingProjectRequest {
  regionId?: string(name='RegionId', position='Host'),
  projectId: string(name='ProjectId', description='The ID of the online editing project.

This parameter is required.', example='****fb2101bf24b2754cb318787dc****', position='Query'),
  requestSource?: string(name='RequestSource', description='The ID of the request source. Valid values:

\\- OpenAPI (default): Timeline conversion is not performed.

\\- WebSDK: If you specify this value, the project timeline is automatically converted into the frontend style, and the materials in the timeline are associated with the project to enable preview by using frontend web SDKs.', example='WebSDK', position='Query'),
}

model GetEditingProjectResponseBody = {
  project?: {
    businessConfig?: string(name='BusinessConfig', description='The business configuration of the project. This parameter can be ignored for general editing projects.', example='{ "OutputMediaConfig" : { "StorageLocation": "test-bucket.oss-cn-shanghai.aliyuncs.com", "Path": "test-path" }, "OutputMediaTarget": "oss-object", "ReservationTime": "2021-06-21T08:05:00Z" }'),
    businessStatus?: string(name='BusinessStatus', description='The business status of the project. This parameter can be ignored for general editing projects. Valid values:

Reserving

ReservationCanceled

BroadCasting

LoadingFailed

LiveFinished', example='Reserving'),
    clipsParam?: string(name='ClipsParam', description='The material parameter corresponding to the template, in the JSON format. If TemplateId is specified, ClipsParam must also be specified. For more information<props="china">, see [Create and use a regular template](https://help.aliyun.com/document_detail/328557.html) and [Create and use an advanced template](https://help.aliyun.com/document_detail/291418.html).'),
    coverURL?: string(name='CoverURL', description='The thumbnail URL of the online editing project.', example='oss://example-bucket/example.jpg'),
    createSource?: string(name='CreateSource', description='The method for creating the online editing project. Valid values:

\\- OpenAPI

\\- AliyunConsole

\\- WebSDK

\\- LiveEditingOpenAPI

\\- LiveEditingConsole', example='OpenAPI'),
    createTime?: string(name='CreateTime', description='The time when the online editing project was created.', example='2020-12-20T12:00:00Z'),
    description?: string(name='Description', description='The description of the online editing project.'),
    duration?: long(name='Duration', description='The total duration of the online editing project.', example='24.120000'),
    modifiedSource?: string(name='ModifiedSource', description='The method for editing the online editing project. Valid values:

\\- OpenAPI

\\- AliyunConsole

\\- WebSDK

\\- LiveEditingOpenAPI

\\- LiveEditingConsole', example='OpenAPI'),
    modifiedTime?: string(name='ModifiedTime', description='The time when the online editing project was last modified.', example='2020-12-20T13:00:00Z'),
    projectId?: string(name='ProjectId', description='The ID of the online editing project.', example='****fb2101bf24b2754cb318787dc****'),
    projectType?: string(name='ProjectType', description='The type of the editing project. Default value: EditingProject. Valid values:

\\- EditingProject: a regular editing project.

\\- LiveEditingProject: a live stream editing project.', example='EditingProject'),
    status?: string(name='Status', description='The status of the online editing project. Valid values:

\\- Draft

\\- Editing

\\- Producing

\\- Produced

\\- ProduceFailed

\\- Deleted', example='Editing'),
    templateId?: string(name='TemplateId', description='The template ID.', example='****96e8864746a0b6f3****'),
    templateType?: string(name='TemplateType', description='The template type of the online editing project. Valid values:

\\- Timeline

\\- VETemplate', example='Timeline'),
    timeline?: string(name='Timeline', description='The timeline of the online editing project.', example='{"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****9b4d7cf14dc7b83b0e801cbe****"},{"MediaId":"****9b4d7cf14dc7b83b0e801cbe****"},{"MediaId":"****1656bca4474999c961a6d2a2****"}]}]}'),
    timelineConvertErrorMessage?: string(name='TimelineConvertErrorMessage', description='The error message returned if the project conversion failed. The error message displays the detailed information about the failure, and is returned only if the value of TimelineConvertStatus is ConvertFailed.', example='The StorageLocation must be in the same division(apiRegion) as ICE service access point.'),
    timelineConvertStatus?: string(name='TimelineConvertStatus', description='The project conversion status. Conversion of an API-style timeline into a frontend-style timeline is an asynchronous process and takes effect only if RequestSource:WebSDK is specified.

\\- Unconverted

\\- Converting

\\- Converted

\\- ConvertFailed', example='Converted'),
    title?: string(name='Title', description='The title of the online editing project.'),
  }(name='Project', description='The information about the online editing project.'),
  requestId?: string(name='RequestId', description='The request ID.', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
}

model GetEditingProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEditingProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetEditingProject  GetEditingProjectRequest
  * @return GetEditingProjectResponse
 */
async function getEditingProject(request: GetEditingProjectRequest): GetEditingProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEditingProject', 'POST', '/', 'json', false, 'json', request);
}

model GetEditingProjectMaterialsRequest {
  regionId?: string(name='RegionId', position='Host'),
  projectId: string(name='ProjectId', description='The ID of the online editing project.

This parameter is required.', example='*****fb2101cb318*****', position='Query'),
}

model GetEditingProjectMaterialsResponseBody = {
  liveMaterials?: [ 
    {
      appName?: string(name='AppName', description='The application name of the live stream.', example='testrecord'),
      domainName?: string(name='DomainName', description='The domain name of the live stream.', example='test.alivecdn.com'),
      liveUrl?: string(name='LiveUrl', description='The URL of the live stream.', example='rtmp://test.alivecdn.com/testrecord/teststream'),
      streamName?: string(name='StreamName', description='The name of the live stream.', example='testrecord'),
    }
  ](name='LiveMaterials', description='The materials associated with the live stream.'),
  mediaInfos?: [ 
    {
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', description='The bitrate.', example='1132.68'),
            duration?: string(name='Duration', description='The duration.', example='216.206667'),
            fileName?: string(name='FileName', description='The file name.', example='example.mp4'),
            fileSize?: string(name='FileSize', description='The file size. Unit: bytes.', example='30611502'),
            fileStatus?: string(name='FileStatus', description='The file status.', example='Normal'),
            fileType?: string(name='FileType', description='The file type.', example='source_file'),
            fileUrl?: string(name='FileUrl', description='The Object Storage Service (OSS) URL of the file.', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
            formatName?: string(name='FormatName', description='The container format.', example='mov,mp4,m4a,3gp,3g2,mj2'),
            height?: string(name='Height', description='The height.', example='540'),
            region?: string(name='Region', description='The region in which the file resides.', example='cn-shanghai'),
            width?: string(name='Width', description='The width.', example='960'),
          }(name='FileBasicInfo', description='The basic information of the file, such as the duration and size.'),
        }
      ](name='FileInfoList', description='The information about the file.'),
      mediaBasicInfo?: {
        businessType?: string(name='BusinessType', description='The business type of the media asset.', example='general'),
        category?: string(name='Category', description='The category of the media asset.', example='video'),
        coverURL?: string(name='CoverURL', description='The thumbnail URL of the media asset.', example='http://sample-bucket.oss-cn-shanghai.aliyuncs.com/sample-corver.jpg?Expires=1628670610&OSSAccessKeyId=AK&Signature=signature'),
        createTime?: string(name='CreateTime', description='The time when the media asset was created.', example='2020-12-26T04:11:08Z'),
        deletedTime?: string(name='DeletedTime', description='The time when the media asset was deleted.', example='2020-12-26T04:11:08Z'),
        description?: string(name='Description', description='The description of the media asset.', example='sample_description'),
        inputURL?: string(name='InputURL', description='The URL of the media asset in another service.', example='http://bucket.oss-cn-shanghai.aliyuncs.com/file.mp4'),
        mediaId?: string(name='MediaId', description='The ID of the media asset.', example='*****64623a94eca8516569c8f*****'),
        mediaTags?: string(name='MediaTags', description='The tags of the media asset.'),
        mediaType?: string(name='MediaType', description='The type of the media asset.', example='video'),
        modifiedTime?: string(name='ModifiedTime', description='The time when the media asset was last modified.', example='2020-12-26T04:11:08Z'),
        snapshots?: string(name='Snapshots', description='The snapshots of the media asset.', example='null'),
        source?: string(name='Source', description='The source of the media asset.', example='oss'),
        spriteImages?: string(name='SpriteImages', description='The sprite of the media asset', example='null'),
        status?: string(name='Status', description='The status of the media asset.', example='Normal'),
        title?: string(name='Title', description='The title of the media asset.', example='file.mp4'),
        transcodeStatus?: string(name='TranscodeStatus', description='The transcoding status of the media asset.

Valid values:

*   TranscodeSuccess: transcoding completed.
*   TranscodeFailed: transcoding failed.
*   Init: initializing.
*   Transcoding: transcoding in progress.', example='Init'),
        userData?: string(name='UserData', description='The user data.', example='userData'),
      }(name='MediaBasicInfo', description='The basic information of the media asset.'),
      mediaId?: string(name='MediaId', description='The ID of the media asset.', example='*****64623a94eca8516569c8fe*****'),
    }
  ](name='MediaInfos', description='The media assets that meet the specified conditions.'),
  projectId?: string(name='ProjectId', description='The project ID.', example='*****67ae06542b9b93e0d1c387*****'),
  projectMaterials?: [ string ](name='ProjectMaterials', description='The materials associated with the editing project. A live stream editing project will be associated with a regular editing project after the live streaming ends.', example='*****9b145c5cafc2e057304fcd*****'),
  requestId?: string(name='RequestId', description='The request ID.', example='******89-C21D-4B78-AE24-3788B8******'),
}

model GetEditingProjectMaterialsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEditingProjectMaterialsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetEditingProjectMaterials  GetEditingProjectMaterialsRequest
  * @return GetEditingProjectMaterialsResponse
 */
async function getEditingProjectMaterials(request: GetEditingProjectMaterialsRequest): GetEditingProjectMaterialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEditingProjectMaterials', 'POST', '/', 'json', false, 'json', request);
}

model GetEventCallbackRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model GetEventCallbackResponseBody = {
  authKey?: string(name='AuthKey', example='TestKey001'),
  authSwitch?: string(name='AuthSwitch', example='on'),
  callbackQueueName?: string(name='CallbackQueueName', example='ice-callback-queue'),
  callbackType?: string(name='CallbackType', example='HTTP'),
  callbackURL?: string(name='CallbackURL', example='http://xxx.yyy/callback'),
  eventTypeList?: string(name='EventTypeList', example='ProduceMediaComplete,TranscodeComplete'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetEventCallbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEventCallbackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetEventCallback  GetEventCallbackRequest
  * @return GetEventCallbackResponse
 */
async function getEventCallback(request: GetEventCallbackRequest): GetEventCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEventCallback', 'POST', '/', 'json', false, 'json', request);
}

model GetLiveEditingIndexFileRequest {
  appName?: string(name='AppName', description='The application name of the live stream.', example='testrecord', position='Query'),
  domainName?: string(name='DomainName', description='The domain name of the live stream.', example='test.alivecdn.com', position='Query'),
  projectId?: string(name='ProjectId', description='The ID of the live stream editing project.', example='*****cb6307a4edea614d8b3f3c*****', position='Query'),
  streamName?: string(name='StreamName', description='The name of the live stream.', example='teststream', position='Query'),
}

model GetLiveEditingIndexFileResponseBody = {
  indexFile?: string(name='IndexFile', description='The URL of the index file.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4E84BE44-58A7-****-****-FBEBEA16EF94'),
}

model GetLiveEditingIndexFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLiveEditingIndexFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLiveEditingIndexFile  GetLiveEditingIndexFileRequest
  * @return GetLiveEditingIndexFileResponse
 */
async function getLiveEditingIndexFile(request: GetLiveEditingIndexFileRequest): GetLiveEditingIndexFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveEditingIndexFile', 'POST', '/', 'json', false, 'json', request);
}

model GetLiveEditingJobRequest {
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****', position='Query'),
}

model GetLiveEditingJobResponseBody = {
  liveEditingJob?: {
    clips?: string(name='Clips', example='[{\\"StartTime\\": \\" 2021-06-21T08:01:00Z\\",  \\"EndTime\\": \\" 2021-06-21T08:03:00Z\\" }]'),
    code?: string(name='Code', example='InvalidParameter'),
    completeTime?: string(name='CompleteTime', example='2020-12-23T13:33:52Z'),
    creationTime?: string(name='CreationTime', example='2020-12-23T13:33:40Z'),
    jobId?: string(name='JobId', example='****cdb3e74639973036bc84****'),
    liveStreamConfig?: {
      appName?: string(name='AppName', example='app'),
      domainName?: string(name='DomainName', example='domain.com'),
      streamName?: string(name='StreamName', example='streamName'),
    }(name='LiveStreamConfig'),
    mediaId?: string(name='MediaId', example='****0cc6ba49eab379332c5b****'),
    mediaProduceConfig?: {
      mode?: string(name='Mode', example='Accurate'),
    }(name='MediaProduceConfig'),
    mediaURL?: string(name='MediaURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example2.mp4'),
    message?: string(name='Message', example='The specific parameter LiveStreamConfig is not valid.'),
    modifiedTime?: string(name='ModifiedTime', example='2020-12-23T13:33:49Z'),
    outputMediaConfig?: {
      bitrate?: long(name='Bitrate', example='1000'),
      fileName?: string(name='FileName', example='test.mp4'),
      height?: int32(name='Height', example='480'),
      mediaURL?: string(name='MediaURL', example='https://testice-testbucket.oss-cn-shanghai.aliyuncs.com/test.mp4'),
      storageLocation?: string(name='StorageLocation', example='outin-xxxxxx.oss-cn-shanghai.aliyuncs.com'),
      vodTemplateGroupId?: string(name='VodTemplateGroupId', example='VOD_NO_TRANSCODE'),
      width?: int32(name='Width', example='640'),
    }(name='OutputMediaConfig'),
    projectId?: string(name='ProjectId', example='****fddd7748b58bf1d47e95****'),
    status?: string(name='Status', example='Success'),
    userData?: string(name='UserData', example='{"key": "value\\"}'),
  }(name='LiveEditingJob'),
  requestId?: string(name='RequestId', example='****36-3C1E-4417-BDB2-1E034F****'),
}

model GetLiveEditingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLiveEditingJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLiveEditingJob  GetLiveEditingJobRequest
  * @return GetLiveEditingJobResponse
 */
async function getLiveEditingJob(request: GetLiveEditingJobRequest): GetLiveEditingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveEditingJob', 'POST', '/', 'json', false, 'json', request);
}

model GetLiveRecordJobRequest {
  jobId: string(name='JobId', description='This parameter is required.', example='ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66', position='Query'),
}

model GetLiveRecordJobResponseBody = {
  recordJob?: {
    createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段

Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-07-20T02:48:58Z'),
    jobId?: string(name='JobId', description='代表资源名称的资源属性字段', example='ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66'),
    name?: string(name='Name', description='代表资源名称的资源属性字段'),
    notifyUrl?: string(name='NotifyUrl', description='回调地址', example='https://example.com/imsnotify'),
    recordOutput?: {
      bucket?: string(name='Bucket', example='imsbucket1'),
      endpoint?: string(name='Endpoint', example='oss-cn-shanghai.aliyuncs.com'),
      type?: string(name='Type', example='oss'),
    }(name='RecordOutput'),
    status?: string(name='Status', description='代表资源名称的资源属性字段', example='paused'),
    streamInput?: {
      type?: string(name='Type', example='rtmp'),
      url?: string(name='Url', example='rtmp://example.com/app/stream'),
    }(name='StreamInput'),
    templateId?: string(name='TemplateId', description='录制模板ID', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66'),
    templateName?: string(name='TemplateName', description='录制模板ID', example='test template'),
  }(name='RecordJob', description='录制任务'),
  requestId?: string(name='RequestId', example='B57A046C-CE33-5FBB-B57A-D2B89ACF6907'),
}

model GetLiveRecordJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLiveRecordJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLiveRecordJob  GetLiveRecordJobRequest
  * @return GetLiveRecordJobResponse
 */
async function getLiveRecordJob(request: GetLiveRecordJobRequest): GetLiveRecordJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveRecordJob', 'GET', '/', 'json', false, 'json', request);
}

model GetLiveRecordTemplateRequest {
  jobId?: string(name='JobId', example='ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66', position='Query'),
  templateId: string(name='TemplateId', description='This parameter is required.', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66', position='Query'),
}

model GetLiveRecordTemplateResponseBody = {
  recordTemplate?: {
    createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段

Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-07-20T03:26:36Z'),
    lastModified?: string(name='LastModified', description='代表创建时间的资源属性字段

Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-07-20T03:26:36Z'),
    name?: string(name='Name', description='代表资源名称的资源属性字段', example='test template'),
    recordFormatList?: [ 
      {
        cycleDuration?: int32(name='CycleDuration', example='7200'),
        format?: string(name='Format', description='格式', example='m3u8'),
        ossObjectPrefix?: string(name='OssObjectPrefix', description='Oss对象名，不包含后缀', example='record/{JobId}/{Sequence}{EscapedStartTime}{EscapedEndTime}'),
        sliceDuration?: int32(name='SliceDuration', example='30'),
        sliceOssObjectPrefix?: string(name='SliceOssObjectPrefix', description='切片Oss对象名，不包含后缀', example='record/{JobId}/{UnixTimestamp}_{Sequence}'),
      }
    ](name='RecordFormatList', description='录制格式'),
    templateId?: string(name='TemplateId', description='代表资源一级ID的资源属性字段', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66'),
    type?: string(name='Type', description='代表资源名称的资源属性字段', example='custom'),
  }(name='RecordTemplate', description='录制模板'),
  requestId?: string(name='RequestId', example='C892855F-95DF-50D6-A28C-279ABDB76810'),
}

model GetLiveRecordTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLiveRecordTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLiveRecordTemplate  GetLiveRecordTemplateRequest
  * @return GetLiveRecordTemplateResponse
 */
async function getLiveRecordTemplate(request: GetLiveRecordTemplateRequest): GetLiveRecordTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveRecordTemplate', 'GET', '/', 'json', false, 'json', request);
}

model GetLiveSnapshotJobRequest {
  jobId: string(name='JobId', description='This parameter is required.', example='****a046-263c-3560-978a-fb287782****', position='Query'),
}

model GetLiveSnapshotJobResponseBody = {
  callbackUrl?: string(name='CallbackUrl', example='http://www.aliyun.com/snapshot/callback'),
  createTime?: string(name='CreateTime', example='2022-02-02T22:22:22Z'),
  jobId?: string(name='JobId', example='****a046-263c-3560-978a-fb287782****'),
  jobName?: string(name='JobName'),
  lastModified?: string(name='LastModified', example='2022-02-02T22:22:22Z'),
  overwriteFormat?: string(name='OverwriteFormat', example='snapshot/{JobId}.jpg'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  sequenceFormat?: string(name='SequenceFormat', example='snapshot/{JobId}/{UnixTimestamp}.jpg'),
  snapshotOutput?: {
    bucket?: string(name='Bucket', example='testbucket'),
    endpoint?: string(name='Endpoint', example='oss-cn-shanghai.aliyuncs.com'),
    storageType?: string(name='StorageType', example='oss'),
  }(name='SnapshotOutput'),
  status?: string(name='Status', example='started'),
  streamInput?: {
    type?: string(name='Type', example='rtmp'),
    url?: string(name='Url', example='rtmp://www.aliyun.com/stream'),
  }(name='StreamInput'),
  templateId?: string(name='TemplateId', example='****a046-263c-3560-978a-fb287666****'),
  templateName?: string(name='TemplateName'),
  timeInterval?: int32(name='TimeInterval', example='5'),
}

model GetLiveSnapshotJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLiveSnapshotJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLiveSnapshotJob  GetLiveSnapshotJobRequest
  * @return GetLiveSnapshotJobResponse
 */
async function getLiveSnapshotJob(request: GetLiveSnapshotJobRequest): GetLiveSnapshotJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveSnapshotJob', 'GET', '/', 'json', false, 'json', request);
}

model GetLiveSnapshotTemplateRequest {
  templateId: string(name='TemplateId', description='This parameter is required.', example='****a046-263c-3560-978a-fb287782****', position='Query'),
}

model GetLiveSnapshotTemplateResponseBody = {
  createTime?: string(name='CreateTime', example='2022-02-02T22:22:22Z'),
  lastModified?: string(name='LastModified', example='2022-02-02T22:22:22Z'),
  overwriteFormat?: string(name='OverwriteFormat', example='snapshot/{JobId}.jpg'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  sequenceFormat?: string(name='SequenceFormat', example='snapshot/{JobId}/{UnixTimestamp}.jpg'),
  templateId?: string(name='TemplateId', example='****a046-263c-3560-978a-fb287782****'),
  templateName?: string(name='TemplateName'),
  timeInterval?: int32(name='TimeInterval', example='5'),
  type?: string(name='Type', example='custom'),
}

model GetLiveSnapshotTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLiveSnapshotTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLiveSnapshotTemplate  GetLiveSnapshotTemplateRequest
  * @return GetLiveSnapshotTemplateResponse
 */
async function getLiveSnapshotTemplate(request: GetLiveSnapshotTemplateRequest): GetLiveSnapshotTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveSnapshotTemplate', 'GET', '/', 'json', false, 'json', request);
}

model GetLiveTranscodeJobRequest {
  jobId: string(name='JobId', description='This parameter is required.', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model GetLiveTranscodeJobResponseBody = {
  job?: {
    createTime?: string(name='CreateTime', example='2022-07-20T02:48:58Z'),
    jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
    name?: string(name='Name', example='task1'),
    outputStream?: {
      streamInfos?: [ 
        {
          outputUrl?: string(name='OutputUrl', example='rtmp://mydomain/app/mytranscode1'),
          type?: string(name='Type', example='rtmp'),
        }
      ](name='StreamInfos'),
    }(name='OutputStream'),
    startMode?: int32(name='StartMode', example='0'),
    status?: int32(name='Status', example='1'),
    streamInput?: {
      inputUrl?: string(name='InputUrl', example='rtmp://mydomain/app/stream1'),
      type?: string(name='Type', example='rtmp'),
    }(name='StreamInput'),
    templateId?: string(name='TemplateId', example='b6491d5b3e514b7d895d14b5453ea119'),
    templateName?: string(name='TemplateName', example='basic'),
    templateType?: string(name='TemplateType', example='normal'),
  }(name='Job'),
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
}

model GetLiveTranscodeJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLiveTranscodeJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLiveTranscodeJob  GetLiveTranscodeJobRequest
  * @return GetLiveTranscodeJobResponse
 */
async function getLiveTranscodeJob(request: GetLiveTranscodeJobRequest): GetLiveTranscodeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveTranscodeJob', 'POST', '/', 'json', false, 'json', request);
}

model GetLiveTranscodeTemplateRequest {
  templateId: string(name='TemplateId', description='This parameter is required.', example='****a046-263c-3560-978a-fb287666****', position='Query'),
}

model GetLiveTranscodeTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
  templateContent?: {
    category?: string(name='Category', example='customized'),
    createTime?: string(name='CreateTime', example='2022-07-25T06:15:14Z'),
    name?: string(name='Name', example='my-template'),
    templateConfig?: {
      audioParams?: {
        bitrate?: string(name='Bitrate', example='1000'),
        channels?: string(name='Channels', example='2'),
        codec?: string(name='Codec', example='AAC'),
        profile?: string(name='Profile', example='1'),
        samplerate?: string(name='Samplerate', example='44100'),
      }(name='AudioParams'),
      videoParams?: {
        bitrate?: string(name='Bitrate', example='2500'),
        codec?: string(name='Codec', example='H.264'),
        fps?: string(name='Fps', example='30'),
        gop?: string(name='Gop', example='1000'),
        height?: string(name='Height', example='720'),
        profile?: string(name='Profile', example='2'),
        width?: string(name='Width', example='1280'),
      }(name='VideoParams'),
    }(name='TemplateConfig'),
    templateId?: string(name='TemplateId', example='bcfa57950bc649b2abfb476ecd36ea4f'),
    type?: string(name='Type', example='normal'),
  }(name='TemplateContent'),
}

model GetLiveTranscodeTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLiveTranscodeTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLiveTranscodeTemplate  GetLiveTranscodeTemplateRequest
  * @return GetLiveTranscodeTemplateResponse
 */
async function getLiveTranscodeTemplate(request: GetLiveTranscodeTemplateRequest): GetLiveTranscodeTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveTranscodeTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetMediaInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  inputURL?: string(name='InputURL', description='The input URL of the media asset in another service. The URL must be registered in the IMS content library and bound to the ID of the media asset in IMS.

*   For a media asset from Object Storage Service (OSS), the URL may have one of the following formats:

http(s)://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4 or

oss://example-bucket/example.mp4. The second format indicates that the region in which the OSS bucket of the media asset resides is the same as the region in which OSS is activated.', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4', position='Query'),
  mediaId?: string(name='MediaId', description='The ID of the media asset in IMS. If this parameter is left empty, the InputURL parameter must be specified.', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  outputType?: string(name='OutputType', description='The type of the URL of the media asset to return in the response. Valid values:

*   oss (default): an OSS URL.
*   cdn: a CDN URL. A CDN URL is returned only if the media asset is imported from ApsaraVideo VOD and the relevant domain name is an accelerated domain name in ApsaraVideo VOD.', example='cdn', position='Query'),
  returnDetailedInfo?: string(name='ReturnDetailedInfo', description='Specifies whether to return detailed information for specific media asset attributes. Supported attributes: AiRoughData.StandardSmartTagJob, which specifies whether to return detailed tag information if a tagging job has been submitted for the media asset. Valid values for the attribute:

*   false (default): The job result is returned as a URL.
*   true: The job result is returned as text.', example='{"AiRoughData.StandardSmartTagJob": false}', position='Query'),
}

model GetMediaInfoResponseBody = {
  mediaInfo?: {
    aiRoughData?: {
      aiCategory?: string(name='AiCategory', description='The AI category. Valid values:

*   Life
*   Good-looking
*   Cute pets
*   News
*   Ads
*   Environmental resources
*   Automobile'),
      aiJobId?: string(name='AiJobId', description='The ID of the AI task.', example='****483915d4f2cd8ac20b48fb04****'),
      result?: string(name='Result', description='The analysis result.', example='https://sample-bucket.cn-shanghai.aliyuncs.com/result.json'),
      saveType?: string(name='SaveType', description='The storage type. This parameter indicates the library in which the analysis data is stored. Valid values:

*   TEXT: the text library.', example='TEXT'),
      standardSmartTagJob?: {
        aiJobId?: string(name='AiJobId', description='The ID of the AI task.', example='****483915d4f2cd8ac20b48fb04****'),
        resultUrl?: string(name='ResultUrl', description='The URL of the tagging result.', example='http://xx.oss-cn-shanghai.aliyuncs.com/result2.txt'),
        results?: [ 
          {
            data?: string(name='Data', description='The result data. The value is a JSON string. For information about the data structures of different data types<props="china">, see [Description of the Results parameter](https://help.aliyun.com/zh/ims/developer-reference/api-ice-2020-11-09-querysmarttagjob?spm=a2c4g.11186623.0.0.521d48b7KfapOL#api-detail-40).', example='{"autoChapters": [...]}'),
            type?: string(name='Type', description='The tagging type. Valid values:

*   NLP: natural language processing (NLP)-based tagging', example='NLP'),
          }
        ](name='Results', description='The recognized tags.'),
        status?: string(name='Status', description='The analysis status. Valid values:

*   Analyzing
*   AnalyzeSuccess
*   AnalyzeFailed', example='Analyzing'),
      }(name='StandardSmartTagJob', description='The information about the tagging job.'),
      status?: string(name='Status', description='The analysis status. Valid values:

*   Analyzing
*   AnalyzeSuccess
*   AnalyzeFailed
*   Saving
*   SaveSuccess
*   SaveFailed
*   Deleting
*   DeleteSuccess
*   DeleteFailed', example='Analyzing'),
    }(name='AiRoughData', description='The original AI analysis data.'),
    fileInfoList?: [ 
      {
        audioStreamInfoList?: [ 
          {
            bitrate?: string(name='Bitrate', description='The bitrate.', example='127.794'),
            channelLayout?: string(name='ChannelLayout', description='The output layout of sound channels.', example='stereo'),
            channels?: string(name='Channels', description='The number of sound channels.', example='2'),
            codecLongName?: string(name='CodecLongName', description='The full name of the codec.', example='AAC (Advanced Audio Coding)'),
            codecName?: string(name='CodecName', description='The short name of the codec.', example='aac'),
            codecTag?: string(name='CodecTag', description='The tag of the codec.', example='0x6134706d'),
            codecTagString?: string(name='CodecTagString', description='The tag string of the codec.', example='mp4a'),
            codecTimeBase?: string(name='CodecTimeBase', description='The time base of the codec.', example='1/24000'),
            duration?: string(name='Duration', description='The duration.', example='16.200998'),
            fps?: string(name='Fps', description='The audio frame rate.', example='8'),
            index?: string(name='Index', description='The sequence number of the audio track.', example='1'),
            lang?: string(name='Lang', description='The language.', example='und'),
            numFrames?: string(name='NumFrames', description='The number of frames.', example='10'),
            profile?: string(name='Profile', description='The codec profile.', example='High'),
            sampleFmt?: string(name='SampleFmt', description='The sampling format.', example='fltp'),
            sampleRate?: string(name='SampleRate', description='The sampling rate.', example='44100'),
            startTime?: string(name='StartTime', description='The start time.', example='0.000000'),
            timebase?: string(name='Timebase', description='The time base.', example='1/44100'),
          }
        ](name='AudioStreamInfoList', description='The information about the audio tracks. A media asset may have multiple audio tracks.'),
        fileBasicInfo?: {
          bitrate?: string(name='Bitrate', description='The bitrate.', example='1132.68'),
          createTime?: string(name='CreateTime', description='The time when the file was created.', example='2020-12-26T04:11:08Z'),
          duration?: string(name='Duration', description='The duration.', example='216.206667'),
          fileName?: string(name='FileName', description='The file name.', example='example.mp4'),
          fileSize?: string(name='FileSize', description='The file size. Unit: bytes.', example='30611502'),
          fileStatus?: string(name='FileStatus', description='The file status.', example='Normal'),
          fileType?: string(name='FileType', description='The file type.', example='source_file'),
          fileUrl?: string(name='FileUrl', description='The OSS URL of the file.', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
          formatName?: string(name='FormatName', description='The container format.', example='mov,mp4,m4a,3gp,3g2,mj2'),
          height?: string(name='Height', description='The height.', example='540'),
          modifiedTime?: string(name='ModifiedTime', description='The time when the file was last modified.', example='2020-12-26T04:11:10Z'),
          region?: string(name='Region', description='The region in which the file is stored.', example='cn-shanghai'),
          width?: string(name='Width', description='The width.', example='960'),
        }(name='FileBasicInfo', description='The basic information about the file, including the duration and size.'),
        subtitleStreamInfoList?: [ 
          {
            codecLongName?: string(name='CodecLongName', description='The full name of the codec.', example='SubRip Text'),
            codecName?: string(name='CodecName', description='The short name of the codec.', example='srt'),
            codecTag?: string(name='CodecTag', description='The tag of the codec.', example='unicode'),
            codecTagString?: string(name='CodecTagString', description='The tag string of the codec.', example='unicode'),
            codecTimeBase?: string(name='CodecTimeBase', description='The time base of the codec.', example='29.97'),
            duration?: string(name='Duration', description='The duration.', example='1'),
            index?: string(name='Index', description='The sequence number of the subtitle track.', example='1'),
            lang?: string(name='Lang', description='The language.', example='und'),
            startTime?: string(name='StartTime', description='The start time.', example='0'),
            timebase?: string(name='Timebase', description='The time base.', example='30'),
          }
        ](name='SubtitleStreamInfoList', description='The information about the subtitle tracks. A media asset may have multiple subtitle tracks.'),
        videoStreamInfoList?: [ 
          {
            avgFPS?: string(name='AvgFPS', description='The average video frame rate.', example='24.0'),
            bitrate?: string(name='Bitrate', description='The bitrate.', example='1001.594'),
            codecLongName?: string(name='CodecLongName', description='The full name of the codec.', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
            codecName?: string(name='CodecName', description='The short name of the codec.', example='h264'),
            codecTag?: string(name='CodecTag', description='The tag of the codec.', example='0x0000'),
            codecTagString?: string(name='CodecTagString', description='The tag string of the codec.', example='[0][0][0][0]'),
            codecTimeBase?: string(name='CodecTimeBase', description='The time base of the codec.', example='1/48'),
            dar?: string(name='Dar', description='The display aspect ratio (DAR).', example='0:1'),
            duration?: string(name='Duration', description='The duration.', example='216.206706'),
            fps?: string(name='Fps', description='The video frame rate.', example='24.0'),
            hasBFrames?: string(name='HasBFrames', description='Indicates whether the video track contains bidirectional frames (B-frames).', example='2'),
            height?: string(name='Height', description='The height.', example='540'),
            index?: string(name='Index', description='The sequence number of the video track.', example='0'),
            lang?: string(name='Lang', description='The language.', example='und'),
            level?: string(name='Level', description='The codec level.', example='30'),
            nbFrames?: string(name='Nb_frames', description='The total number of frames.', example='5184'),
            numFrames?: string(name='NumFrames', description='The number of frames.', example='5184'),
            pixFmt?: string(name='PixFmt', description='The pixel format.', example='yuv420p'),
            profile?: string(name='Profile', description='The codec profile.', example='High'),
            rotate?: string(name='Rotate', description='The rotation angle.', example='0'),
            sar?: string(name='Sar', description='The sample aspect ratio (SAR).', example='0:1'),
            startTime?: string(name='StartTime', description='The start time.', example='0.081706'),
            timebase?: string(name='Timebase', description='The time base.', example='1/12288'),
            width?: string(name='Width', description='The width.', example='960'),
          }
        ](name='VideoStreamInfoList', description='The information about the video tracks. A media asset may have multiple video tracks.'),
      }
    ](name='FileInfoList', description='The file information.'),
    mediaBasicInfo?: {
      biz?: string(name='Biz', description='The service to which the media asset belongs.', example='ICE'),
      businessType?: string(name='BusinessType', description='The business type.', example='general'),
      cateId?: long(name='CateId', description='The category ID.', example='3048'),
      cateName?: string(name='CateName', description='The category name.', example='cateName'),
      category?: string(name='Category', description='The category.'),
      coverURL?: string(name='CoverURL', description='The URL of the thumbnail.', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
      createTime?: string(name='CreateTime', description='The time when the media asset was created.', example='2020-12-26T04:11:08Z'),
      deletedTime?: string(name='DeletedTime', description='The time when the media asset was deleted.', example='2020-12-26T04:11:15Z'),
      description?: string(name='Description', description='The content description.'),
      inputURL?: string(name='InputURL', description='The input URL of the media asset in another service.', example='https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4'),
      mediaId?: string(name='MediaId', description='The ID of the media asset.', example='****20b48fb04483915d4f2cd8ac****'),
      mediaTags?: string(name='MediaTags', description='The tags.'),
      mediaType?: string(name='MediaType', description='The type of the media asset.', example='video'),
      modifiedTime?: string(name='ModifiedTime', description='The time when the media asset was last modified.', example='2020-12-26T04:11:10Z'),
      referenceId?: string(name='ReferenceId', description='The custom ID. The ID can be 6 to 64 characters in length and can contain only letters, digits, hyphens (-), and underscores (_). The ID is unique among users.', example='123-1234'),
      snapshots?: string(name='Snapshots', description='The snapshots.', example='[
    "http://example-bucket.oss-cn-shanghai.aliyuncs.com/snapshot-00001.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>",
    "http://example-bucket.oss-cn-shanghai.aliyuncs.com/snapshot-00002.jpg?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>",
    "http://example-bucket.oss-cn-shanghai.aliyuncs.com/snapshot-00003.jpg?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>"
]'),
      source?: string(name='Source', description='The source.', example='oss'),
      spriteImages?: string(name='SpriteImages', description='The sprite.', example='[{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]'),
      status?: string(name='Status', description='The resource status.', example='Normal'),
      title?: string(name='Title', description='The title.'),
      uploadSource?: string(name='UploadSource', description='The upload source of the media asset.', example='general'),
      userData?: string(name='UserData', description='The user data.', example='userDataTest'),
    }(name='MediaBasicInfo', description='The basic information about the media asset.'),
    mediaId?: string(name='MediaId', description='The ID of the media asset.', example='****20b48fb04483915d4f2cd8ac****'),
  }(name='MediaInfo', description='The information about the media asset.'),
  requestId?: string(name='RequestId', description='The request ID.', example='2FDE2411-DB8D-4A9A-875B-275798F14A5E'),
}

model GetMediaInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMediaInfoResponseBody(name='body'),
}

/**
  * @description If the MediaId parameter is specified, the MediaId parameter is preferentially used for the query. If the MediaId parameter is left empty, the InputURL parameter must be specified.
  * @param request  the request parameters of GetMediaInfo  GetMediaInfoRequest
  * @return GetMediaInfoResponse
 */
async function getMediaInfo(request: GetMediaInfoRequest): GetMediaInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMediaInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetMediaInfoJobRequest {
  jobId?: string(name='JobId', example='ab4802364a2e49208c99efab82dfa8e8', position='Query'),
}

model GetMediaInfoJobResponseBody = {
  mediaInfoJob?: {
    async?: boolean(name='Async', example='true'),
    finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
    input?: {
      media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
      type?: string(name='Type', example='OSS'),
    }(name='Input'),
    jobId?: string(name='JobId', example='ab4802364a2e49208c99efab82dfa8e8'),
    mediaInfoProperty?: {
      audioStreamInfoList?: [ 
        {
          bitrate?: string(name='Bitrate', example='0.f'),
          channelLayout?: string(name='ChannelLayout', example='stereo'),
          channels?: string(name='Channels', example='2'),
          codecLongName?: string(name='CodecLongName', example='AAC (Advanced Audio Coding)'),
          codecName?: string(name='CodecName', example='aac'),
          codecTag?: string(name='CodecTag', example='0x000f'),
          codecTagString?: string(name='CodecTagString', example='[15][0][0][0]'),
          codecTimeBase?: string(name='CodecTimeBase', example='1/44100'),
          duration?: string(name='Duration', example='403.039989'),
          index?: string(name='Index', example='1'),
          lang?: string(name='Lang', example='us'),
          sampleFmt?: string(name='SampleFmt', example='fltp'),
          sampleRate?: string(name='SampleRate', example='44100'),
          startTime?: string(name='StartTime', example='1.473556'),
          timebase?: string(name='Timebase', example='1/90000'),
        }
      ](name='AudioStreamInfoList'),
      fileBasicInfo?: {
        bitrate?: string(name='Bitrate', example='888.563'),
        duration?: string(name='Duration', example='403.039999'),
        fileName?: string(name='FileName', example='file.m3u8'),
        fileSize?: string(name='FileSize', example='31737'),
        fileStatus?: string(name='FileStatus', example='Normal'),
        fileType?: string(name='FileType', example='source_file'),
        fileUrl?: string(name='FileUrl', example='http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8'),
        formatName?: string(name='FormatName', example='hls,applehttp'),
        height?: string(name='Height', example='478'),
        mediaId?: string(name='MediaId', example='e520090207114cc7a392d44f0b211574'),
        region?: string(name='Region', example='cn-shanghai'),
        width?: string(name='Width', example='848'),
      }(name='FileBasicInfo'),
      videoStreamInfoList?: [ 
        {
          avgFps?: string(name='Avg_fps', example='25.0'),
          bitRate?: string(name='Bit_rate', example='888.563'),
          codecLongName?: string(name='Codec_long_name', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
          codecName?: string(name='Codec_name', example='h264'),
          codecTag?: string(name='Codec_tag', example='0x001b'),
          codecTagString?: string(name='Codec_tag_string', example='[27][0][0][0]'),
          codecTimeBase?: string(name='Codec_time_base', example='1/50'),
          dar?: string(name='Dar', example='16:9'),
          duration?: string(name='Duration', example='403.039989'),
          fps?: string(name='Fps', example='25.0'),
          hasBFrames?: string(name='Has_b_frames', example='2'),
          height?: string(name='Height', example='478'),
          index?: string(name='Index', example='0'),
          lang?: string(name='Lang', example='zh'),
          level?: string(name='Level', example='31'),
          numFrames?: string(name='NumFrames', example='10040'),
          pixFmt?: string(name='PixFmt', example='yuv420p'),
          profile?: string(name='Profile', example='High'),
          rotate?: string(name='Rotate', example='0'),
          sar?: string(name='Sar', example='478:477'),
          startTime?: string(name='Start_time', example='1.473556'),
          timeBase?: string(name='Time_base', example='1/90000'),
          width?: string(name='Width', example='848'),
        }
      ](name='VideoStreamInfoList'),
    }(name='MediaInfoProperty'),
    name?: string(name='Name', example='job-name'),
    requestId?: string(name='RequestId', example='4879B9DE-E4B6-19DC-91F5-9D5F4DCE4168'),
    scheduleConfig?: {
      pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
      priority?: int32(name='Priority', example='5'),
    }(name='ScheduleConfig'),
    status?: string(name='Status', example='Init'),
    submitResultJson?: map[string]any(name='SubmitResultJson'),
    submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
    triggerSource?: string(name='TriggerSource', example='API'),
    userData?: string(name='UserData', example='user-data'),
  }(name='MediaInfoJob', description='MediaInfoJobDTO'),
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model GetMediaInfoJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMediaInfoJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMediaInfoJob  GetMediaInfoJobRequest
  * @return GetMediaInfoJobResponse
 */
async function getMediaInfoJob(request: GetMediaInfoJobRequest): GetMediaInfoJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMediaInfoJob', 'POST', '/', 'json', false, 'json', request);
}

model GetMediaMarksRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaId?: string(name='MediaId', description='The ID of the media asset.', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  mediaMarkIds?: string(name='MediaMarkIds', description='The mark ID. You can specify multiple mark IDs separated with commas (,).', example='mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60', position='Query'),
}

model GetMediaMarksResponseBody = {
  mediaId?: string(name='MediaId', description='The ID of the media asset.', example='****20b48fb04483915d4f2cd8ac****'),
  mediaMarks?: string(name='MediaMarks', description='The queried marks.

*   The value is in the JSONArray format.'),
  requestId?: string(name='RequestId', description='The request ID.', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetMediaMarksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMediaMarksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMediaMarks  GetMediaMarksRequest
  * @return GetMediaMarksResponse
 */
async function getMediaMarks(request: GetMediaMarksRequest): GetMediaMarksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMediaMarks', 'POST', '/', 'json', false, 'json', request);
}

model GetMediaProducingJobRequest {
  jobId?: string(name='JobId', example='****cdb3e74639973036bc84****', position='Query'),
}

model GetMediaProducingJobResponseBody = {
  mediaProducingJob?: {
    clipsParam?: string(name='ClipsParam', example='{"VideoArray":["****05512043f49f697f7425****","****05512043f49f697f7425****","****05512043f49f697f7425****"]}'),
    code?: string(name='Code', example='ExceededMaximumValue'),
    completeTime?: string(name='CompleteTime', example='2020-12-23T13:33:52Z'),
    createTime?: string(name='CreateTime', example='2020-12-23T13:33:40Z'),
    duration?: float(name='Duration', example='30.500000'),
    jobId?: string(name='JobId', example='****cdb3e74639973036bc84****'),
    mediaId?: string(name='MediaId', example='****0cc6ba49eab379332c5b****'),
    mediaURL?: string(name='MediaURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example2.mp4'),
    message?: string(name='Message', example='The specified "Width_Height" has exceeded maximum value.'),
    modifiedTime?: string(name='ModifiedTime', example='2020-12-23T13:33:49Z'),
    projectId?: string(name='ProjectId', example='****fddd7748b58bf1d47e95****'),
    status?: string(name='Status', example='Failed'),
    subJobMaterials?: string(name='SubJobMaterials'),
    templateId?: string(name='TemplateId', example='****6e76134d739cc3e85d3e****'),
    timeline?: string(name='Timeline', example='{"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****4d7cf14dc7b83b0e801c****"},{"MediaId":"****4d7cf14dc7b83b0e801c****"}]}]}'),
    userData?: string(name='UserData'),
    vodMediaId?: string(name='VodMediaId', example='****332c5b0cc6ba49eab379****'),
  }(name='MediaProducingJob'),
  requestId?: string(name='RequestId', example='****83B7-7F87-4792-BFE9-63CD2137****'),
}

model GetMediaProducingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMediaProducingJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMediaProducingJob  GetMediaProducingJobRequest
  * @return GetMediaProducingJobResponse
 */
async function getMediaProducingJob(request: GetMediaProducingJobRequest): GetMediaProducingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMediaProducingJob', 'GET', '/', 'json', false, 'json', request);
}

model GetPackageJobRequest {
  jobId: string(name='JobId', description='This parameter is required.', example='ab4802364a2e49208c99efab82dfa8e8', position='Query'),
}

model GetPackageJobResponseBody = {
  packageJob?: {
    code?: string(name='Code', example='InvalidParameter'),
    createTime?: string(name='CreateTime', example='2022-09-08T11:34:05Z'),
    finishTime?: string(name='FinishTime', example='2022-09-08T11:44:05Z'),
    inputs?: [ 
      {
        input?: {
          media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
          type?: string(name='Type', example='OSS'),
        }(name='Input'),
      }
    ](name='Inputs'),
    jobId?: string(name='JobId', example='ab4802364a2e49208c99efab82dfa8e8'),
    message?: string(name='Message', example='Resource content bad.'),
    modifiedTime?: string(name='ModifiedTime', example='2022-09-08T11:44:05Z'),
    name?: string(name='Name', example='job-name'),
    output?: {
      media?: string(name='Media', example='oss://bucket/path/to/video.m3u8'),
      type?: string(name='Type', example='OSS'),
    }(name='Output'),
    outputUrl?: string(name='OutputUrl', example='http://bucket.oss-cn-shanghai.aliyuncs.com/output.m3u8'),
    pipelineId?: string(name='PipelineId', example='36f3fee40aa047c0b067d0fb85edc12b'),
    priority?: int32(name='Priority', example='6'),
    status?: string(name='Status', example='Init'),
    submitTime?: string(name='SubmitTime', example='2022-09-08T11:34:05Z'),
    triggerSource?: string(name='TriggerSource'),
    userData?: string(name='UserData', example='{"param": "value"}'),
  }(name='PackageJob'),
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model GetPackageJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPackageJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPackageJob  GetPackageJobRequest
  * @return GetPackageJobResponse
 */
async function getPackageJob(request: GetPackageJobRequest): GetPackageJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPackageJob', 'POST', '/', 'json', false, 'json', request);
}

model GetPipelineRequest {
  pipelineId: string(name='PipelineId', description='This parameter is required.', example='****96e8864746a0b6f3****', position='Query'),
}

model GetPipelineResponseBody = {
  pipeline?: {
    createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
    modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:17:54Z'),
    name?: string(name='Name', example='test-pipeline'),
    pipelineId?: string(name='PipelineId', example='****20b48fb04483915d4f2cd8ac****'),
    priority?: int32(name='Priority', example='6'),
    speed?: string(name='Speed', example='Standard'),
    status?: string(name='Status', example='Active'),
  }(name='Pipeline'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetPipelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPipelineResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPipeline  GetPipelineRequest
  * @return GetPipelineResponse
 */
async function getPipeline(request: GetPipelineRequest): GetPipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPipeline', 'POST', '/', 'json', false, 'json', request);
}

model GetPlayInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  inputURL?: string(name='InputURL', description='The input URL that you specified for the media asset when you registered the media asset. For more information, see [RegisterMediaInfo](https://help.aliyun.com/document_detail/441152.html).

>  You must specify at least one of the MediaId and InputURL parameters.', position='Query'),
  mediaId?: string(name='MediaId', description='The ID of the media asset.

>  You must specify at least one of the MediaId and InputURL parameters.', example='86434e152b7d4f20be480574439fe***', position='Query'),
}

model GetPlayInfoResponseBody = {
  mediaBase?: {
    cateId?: long(name='CateId', description='The category ID. You can use one of the following methods to obtain the ID:

*   Log on to the [Intelligent Media Services (IMS) console](https://ims.console.aliyun.com) and choose **Media Asset Management** > **Category Management** to view the category ID.
*   View the value of the CateId parameter returned by the AddCategory operation that you called to create a category.
*   View the value of the CateId parameter returned by the GetCategories operation that you called to query a category.', example='4220'),
    coverURL?: string(name='CoverURL', description='The URL of the thumbnail.', example='https://***.oss-cn-shanghai.aliyuncs.com/cover/281c64d6-b5fb-4c57-97cd-84da56a8b151_large_cover_url.jpg'),
    creationTime?: string(name='CreationTime', description='The time when the media asset was created.', example='2021-09-22T10:07:31+08:00'),
    description?: string(name='Description', description='The content description.', example='desc'),
    mediaId?: string(name='MediaId', description='The ID of the media asset.', example='2eea77a61c7b4ddd95bec34a6f65b***'),
    mediaTags?: string(name='MediaTags', description='The tags.

*   Up to 16 tags are supported.
*   Multiple tags are separated by commas (,).
*   Each tag can be up to 32 bytes in length.
*   The value is encoded in UTF-8.', example='test,ccc'),
    mediaType?: string(name='MediaType', description='The type of the media asset. Valid values:

video audio', example='video'),
    status?: string(name='Status', description='The resource status. Valid values:

Init: the initial state, which indicates that the source file is not ready.

Preparing: The source file is being prepared. For example, the file is being uploaded or edited.

PrepareFail: The source file failed to be prepared. For example, the information of the source file failed to be obtained.

Normal: The source file is ready.', example='Normal'),
    title?: string(name='Title', description='The title.', example='testTitle'),
  }(name='MediaBase', description='The information about the media asset.'),
  playInfoList?: [ 
    {
      bitDepth?: int32(name='BitDepth', description='The color depth.', example='8'),
      bitrate?: string(name='Bitrate', description='The bitrate of the media stream. Unit: Kbit/s.', example='20'),
      creationTime?: string(name='CreationTime', description='The time when the media stream was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2022-05-10T02:28:49Z'),
      definition?: string(name='Definition', description='The quality of the media stream. Valid values:

*   **FD**: low definition
*   **LD**: standard definition
*   **SD**: high definition
*   **HD**: ultra-high definition
*   **OD**: original definition
*   **2K**
*   **4K**
*   **SQ**: standard sound quality
*   **HQ**: high sound quality
*   **AUTO**: adaptive bitrate', example='HD'),
      duration?: string(name='Duration', description='The duration of the media stream. Unit: seconds.', example='9.0464'),
      encrypt?: long(name='Encrypt', description='Indicates whether the media stream is encrypted. Valid values:

*   **0**: The media stream is not encrypted.
*   **1**: The media stream is encrypted.', example='0'),
      encryptType?: string(name='EncryptType', description='The encryption type of the media stream. Valid values:

*   **AliyunVoDEncryption**: Alibaba Cloud proprietary cryptography
*   **HLSEncryption**: HTTP Live Streaming (HLS) encryption

>  If the encryption type is AliyunVoDEncryption, only ApsaraVideo Player SDK can be used to play videos.', example='AliyunVoDEncryption'),
      fileURL?: string(name='FileURL', description='The OSS URL of the file.', example='http://outin-***.oss-cn-shanghai.aliyuncs.com/sv/43a68ee9-181809b6aba/43a68ee9-181809b6aba.mpeg'),
      format?: string(name='Format', description='The format of the media stream.

*   If the media asset is a video file, the valid values are **mp4** and **m3u8**.
*   If the media asset is an audio-only file, the value is **mp3**.', example='mp4'),
      fps?: string(name='Fps', description='The frame rate of the media stream. Unit: frames per second (FPS).', example='25'),
      HDRType?: string(name='HDRType', description='The high dynamic range (HDR) type of the media stream. Valid values:

*   HDR
*   HDR10
*   HLG
*   DolbyVision
*   HDRVivid
*   SDR+', example='HDR'),
      height?: long(name='Height', description='The height of the media stream. Unit: pixels.', example='1080'),
      jobId?: string(name='JobId', description='The task ID.', example='36c9d38e70bf43ed9f7f8f48d6356***'),
      modificationTime?: string(name='ModificationTime', description='The time when the media stream was updated. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2022-05-13T11:39:41.714+08:00'),
      narrowBandType?: string(name='NarrowBandType', description='The type of Narrowband HD™ transcoding. Valid values:

*   **0**: standard transcoding
*   **1.0**: Narrowband HD™ 1.0 transcoding
*   **2.0**: Narrowband HD™ 2.0 transcoding

This parameter is returned only when a definition that is available in the built-in Narrowband HD™ 1.0 transcoding template is specified. For more information, see the [Definition parameter in TranscodeTemplate](https://help.aliyun.com/document_detail/52839.html) table.', example='0'),
      playURL?: string(name='PlayURL', description='The playback URL of the media stream.', example='https://***.aliyuncdn.com/sv/756bee1-17f980f0945/756bee1-17f980f0945.mp4'),
      size?: long(name='Size', description='The size of the media stream. Unit: bytes.', example='418112'),
      status?: string(name='Status', description='The status of the media stream. Valid values:

*   **Normal**
*   **Invisible**', example='Normal'),
      streamTags?: string(name='StreamTags', description='The tags of the media stream, which are used to identify the transcoding type.', example='"{\\"ims.audioServiceType\\": \\"AudioEnhancement\\"}"'),
      streamType?: string(name='StreamType', description='The type of the media stream. If the media stream is a video stream, the value is **video**. If the media stream is an audio-only stream, the value is **audio**.', example='video'),
      transTemplateType?: string(name='TransTemplateType', description='The type of the transcoding template. Valid values:

*   Normal: standard transcoding
*   AudioTranscode: audio transcoding
*   Remux: container format conversion
*   NarrowBandV1: Narrowband HD™ 1.0
*   NarrowBandV2: Narrowband HD™ 2.0
*   UHD: audio and video enhancement (ultra-high definition)', example='Normal'),
      watermarkId?: string(name='WatermarkId', description='The ID of the watermark that is associated with the media stream.', example='5bed88672b1e2520ead228935ed51***'),
      width?: long(name='Width', description='The width of the media stream. Unit: pixels.', example='1024'),
    }
  ](name='PlayInfoList', description='The information about the audio or video stream.'),
  requestId?: string(name='RequestId', description='The request ID.', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetPlayInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPlayInfoResponseBody(name='body'),
}

/**
  * @description You use the ID of a video or audio file to query the playback URL of the file. Then, you can use the playback URL to play the audio or video in ApsaraVideo Player SDK (for URL-based playback) or a third-party player.
  * @param request  the request parameters of GetPlayInfo  GetPlayInfoRequest
  * @return GetPlayInfoResponse
 */
async function getPlayInfo(request: GetPlayInfoRequest): GetPlayInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPlayInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetPublicMediaInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaId?: string(name='MediaId', example='icepublic-****14e501538aeef0a3140176f6****', position='Query'),
}

model GetPublicMediaInfoResponseBody = {
  mediaInfo?: {
    dynamicMetaData?: {
      data?: string(name='Data', example='{"AuditionUrl": "http://example-bucket.cdn.domain.com/example.mp4", "AuditionCount": 3}'),
      type?: string(name='Type', example='system'),
    }(name='DynamicMetaData'),
    fileInfoList?: [ 
      {
        audioStreamInfoList?: [ 
          {
            bitrate?: string(name='Bitrate', example='192.0'),
            channelLayout?: string(name='ChannelLayout', example='stereo'),
            channels?: string(name='Channels', example='2'),
            codecLongName?: string(name='CodecLongName', example='AAC (Advanced Audio Coding)'),
            codecName?: string(name='CodecName', example='aac'),
            codecTag?: string(name='CodecTag', example='0x6134706d'),
            codecTagString?: string(name='CodecTagString', example='mp4a'),
            codecTimeBase?: string(name='CodecTimeBase', example='1/44100'),
            duration?: string(name='Duration', example='16.2'),
            fps?: string(name='Fps', example='10'),
            index?: string(name='Index', example='1'),
            lang?: string(name='Lang', example='und'),
            numFrames?: string(name='NumFrames', example='162'),
            profile?: string(name='Profile', example='High'),
            sampleFmt?: string(name='SampleFmt', example='fltp'),
            sampleRate?: string(name='SampleRate', example='44100'),
            startTime?: string(name='StartTime', example='0.000000'),
            timebase?: string(name='Timebase', example='1/44100'),
          }
        ](name='AudioStreamInfoList'),
        fileBasicInfo?: {
          bitrate?: string(name='Bitrate', example='192.0'),
          duration?: string(name='Duration', example='16.2'),
          fileName?: string(name='FileName', example='example.mp4'),
          fileSize?: string(name='FileSize', example='27007'),
          fileStatus?: string(name='FileStatus', example='Normal'),
          fileType?: string(name='FileType', example='source_file'),
          fileUrl?: string(name='FileUrl', example='http://example-bucket.cdn.domain.com/example.mp4'),
          formatName?: string(name='FormatName', example='mp4'),
          height?: string(name='Height', example='0'),
          region?: string(name='Region', example='cn-shanghai'),
          width?: string(name='Width', example='0'),
        }(name='FileBasicInfo'),
        subtitleStreamInfoList?: [ 
          {
            codecLongName?: string(name='CodecLongName', example='SubRip Text'),
            codecName?: string(name='CodecName', example='srt'),
            codecTag?: string(name='CodecTag', example='unicode'),
            codecTagString?: string(name='CodecTagString', example='unicode'),
            codecTimeBase?: string(name='CodecTimeBase', example='29.97'),
            duration?: string(name='Duration', example='1'),
            index?: string(name='Index', example='1'),
            lang?: string(name='Lang', example='und'),
            startTime?: string(name='StartTime', example='0'),
            timebase?: string(name='Timebase', example='30'),
          }
        ](name='SubtitleStreamInfoList'),
        videoStreamInfoList?: [ 
          {
            avgFPS?: string(name='AvgFPS', example='24.0'),
            bitrate?: string(name='Bitrate', example='1001.594'),
            codecLongName?: string(name='CodecLongName', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
            codecName?: string(name='CodecName', example='h264'),
            codecTag?: string(name='CodecTag', example='0x0000'),
            codecTagString?: string(name='CodecTagString', example='[0][0][0][0]'),
            codecTimeBase?: string(name='CodecTimeBase', example='1/48'),
            dar?: string(name='Dar', example='0:1'),
            duration?: string(name='Duration', example='216.206706'),
            fps?: string(name='Fps', example='24.0'),
            hasBFrames?: string(name='HasBFrames', example='2'),
            height?: string(name='Height', example='540'),
            index?: string(name='Index', example='0'),
            lang?: string(name='Lang', example='und'),
            level?: string(name='Level', example='30'),
            nbFrames?: string(name='Nb_frames', example='5184'),
            numFrames?: string(name='NumFrames', example='5184'),
            pixFmt?: string(name='PixFmt', example='yuv420p'),
            profile?: string(name='Profile', example='High'),
            rotate?: string(name='Rotate', example='0'),
            sar?: string(name='Sar', example='0:1'),
            startTime?: string(name='StartTime', example='0.081706'),
            timebase?: string(name='Timebase', example='1/12288'),
            width?: string(name='Width', example='960'),
          }
        ](name='VideoStreamInfoList'),
      }
    ](name='FileInfoList', description='FileInfos'),
    mediaBasicInfo?: {
      businessType?: string(name='BusinessType', example='general'),
      category?: string(name='Category', example='category'),
      coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
      createTime?: string(name='CreateTime', example='2020-12-26T04:11:08Z'),
      deletedTime?: string(name='DeletedTime', example='2020-12-26T04:11:15Z'),
      description?: string(name='Description', example='description'),
      mediaId?: string(name='MediaId', description='MediaId', example='icepublic-****14e501538aeef0a3140176f6****'),
      mediaTags?: string(name='MediaTags'),
      mediaType?: string(name='MediaType', example='video'),
      modifiedTime?: string(name='ModifiedTime', example='2020-12-26T04:11:10Z'),
      source?: string(name='Source', example='oss'),
      spriteImages?: string(name='SpriteImages', example='[{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]'),
      status?: string(name='Status', example='Normal'),
      title?: string(name='Title', example='title'),
      userData?: string(name='UserData', example='{"key":"value"}'),
    }(name='MediaBasicInfo', description='BasicInfo'),
    mediaId?: string(name='MediaId', example='icepublic-****14e501538aeef0a3140176f6****'),
  }(name='MediaInfo'),
  requestId?: string(name='RequestId', description='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetPublicMediaInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPublicMediaInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPublicMediaInfo  GetPublicMediaInfoRequest
  * @return GetPublicMediaInfoResponse
 */
async function getPublicMediaInfo(request: GetPublicMediaInfoRequest): GetPublicMediaInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPublicMediaInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetSmartHandleJobRequest {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model GetSmartHandleJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  jobResult?: {
    aiResult?: string(name='AiResult', description='智能分析结果', example='拆条或智能标签信息'),
    mediaId?: string(name='MediaId', description='媒资Id', example='****20b48fb04483915d4f2cd8ac****'),
    usage?: string(name='Usage'),
  }(name='JobResult'),
  output?: string(name='Output', example='{}'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  smartJobInfo?: {
    createTime?: string(name='CreateTime', example='2020-12-26T04:11:10Z'),
    description?: string(name='Description', example='测试描述'),
    inputConfig?: {
      inputFile?: string(name='InputFile', example='oss://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4 或 ******11-DB8D-4A9A-875B-275798******'),
    }(name='InputConfig'),
    jobType?: string(name='JobType', example='ASR'),
    modifiedTime?: string(name='ModifiedTime', example='2020-12-26T04:11:10Z'),
    outputConfig?: {
      bucket?: string(name='Bucket', description='OSS Bucket', example='test-bucket'),
      object?: string(name='Object', description='OSS Object', example='test-object'),
    }(name='OutputConfig'),
    title?: string(name='Title', example='测试标题'),
    userId?: string(name='UserId', description='userid。', example='1974526429******'),
  }(name='SmartJobInfo'),
  state?: string(name='State', example='Finished'),
  userData?: string(name='UserData', example='{"user":"data"}'),
}

model GetSmartHandleJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSmartHandleJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSmartHandleJob  GetSmartHandleJobRequest
  * @return GetSmartHandleJobResponse
 */
async function getSmartHandleJob(request: GetSmartHandleJobRequest): GetSmartHandleJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSmartHandleJob', 'POST', '/', 'json', false, 'json', request);
}

model GetSnapshotJobRequest {
  jobId: string(name='JobId', description='This parameter is required.', example='****d80e4e4044975745c14b****', position='Query'),
}

model GetSnapshotJobResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  snapshotJob?: {
    async?: boolean(name='Async', example='true'),
    code?: string(name='Code', example='ResourceNotFound'),
    count?: int32(name='Count', example='8'),
    createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
    finishTime?: string(name='FinishTime', example='2022-07-12T16:30:54Z'),
    input?: {
      media?: string(name='Media', example='oss://test-bucket/object.mp4'),
      ossFile?: {
        bucket?: string(name='Bucket', description='OSS Bucket', example='test-bucket'),
        location?: string(name='Location', description='OSS Location', example='oss-cn-shanghai'),
        object?: string(name='Object', description='OSS Object', example='object.mp4'),
      }(name='OssFile'),
      type?: string(name='Type', example='OSS'),
    }(name='Input'),
    jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
    message?: string(name='Message', example='The specified resource for "Pipeline" could not be found.'),
    modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:30:54Z'),
    name?: string(name='Name'),
    output?: {
      media?: string(name='Media', example='http://test-bucket.oss-cn-shanghai.aliyuncs.com/output-{Count}.jpg'),
      ossFile?: {
        bucket?: string(name='Bucket', description='OSS Bucket', example='test-bucket'),
        location?: string(name='Location', description='OSS Location', example='oss-cn-shanghai'),
        object?: string(name='Object', description='OSS Object', example='output-{Count}.jpg'),
      }(name='OssFile'),
      type?: string(name='Type', example='OSS'),
    }(name='Output'),
    pipelineId?: string(name='PipelineId', example='****d80e4e4044975745c14b****'),
    status?: string(name='Status', example='Success'),
    submitTime?: string(name='SubmitTime', example='2022-07-12T16:17:54Z'),
    templateConfig?: string(name='TemplateConfig', example='{"Type":"Normal","FrameType":"normal","Time":0,"Count":10}'),
    templateId?: string(name='TemplateId', example='****d80e4e4044975745c14b****'),
    triggerSource?: string(name='TriggerSource', example='API'),
    type?: string(name='Type', example='Sprite'),
    userData?: string(name='UserData', example='{"test parameter": "test value"}'),
  }(name='SnapshotJob'),
}

model GetSnapshotJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSnapshotJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSnapshotJob  GetSnapshotJobRequest
  * @return GetSnapshotJobResponse
 */
async function getSnapshotJob(request: GetSnapshotJobRequest): GetSnapshotJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSnapshotJob', 'POST', '/', 'json', false, 'json', request);
}

model GetSnapshotUrlsRequest {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  orderBy?: string(name='OrderBy', example='Asc', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  timeout?: long(name='Timeout', example='3600', position='Query'),
}

model GetSnapshotUrlsResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  snapshotUrls?: [ string ](name='SnapshotUrls'),
  total?: int32(name='Total', example='30'),
  webVTTUrl?: string(name='WebVTTUrl', example='http://test-bucket.oss-cn-shanghai.aliyuncs.com/ouoput.vtt'),
}

model GetSnapshotUrlsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSnapshotUrlsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSnapshotUrls  GetSnapshotUrlsRequest
  * @return GetSnapshotUrlsResponse
 */
async function getSnapshotUrls(request: GetSnapshotUrlsRequest): GetSnapshotUrlsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSnapshotUrls', 'POST', '/', 'json', false, 'json', request);
}

model GetStorageListRequest {
  regionId?: string(name='RegionId', position='Host'),
  appId?: string(name='AppId', example='app-****', position='Query'),
  status?: string(name='Status', example='Normal', position='Query'),
  storageType?: string(name='StorageType', example='vod_oss_bucket', position='Query'),
}

model GetStorageListResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='******73-8B78-5D86-A50C-49B96C******'),
  storageInfoList?: [ 
    {
      appId?: string(name='AppId', example='app-****'),
      creationTime?: string(name='CreationTime', example='2024-06-06T01:55:07Z'),
      defaultStorage?: boolean(name='DefaultStorage', example='true'),
      editingTempFileStorage?: boolean(name='EditingTempFileStorage', example='false'),
      modifiedTime?: string(name='ModifiedTime', example='2024-06-06T03:07:07Z'),
      path?: string(name='Path', example='your-path/'),
      status?: string(name='Status', example='Normal'),
      storageLocation?: string(name='StorageLocation', example='your-bucket'),
      storageType?: string(name='StorageType', example='vod_oss_bucket'),
    }
  ](name='StorageInfoList'),
}

model GetStorageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetStorageListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetStorageList  GetStorageListRequest
  * @return GetStorageListResponse
 */
async function getStorageList(request: GetStorageListRequest): GetStorageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStorageList', 'POST', '/', 'json', false, 'json', request);
}

model GetSystemTemplateRequest {
  templateId: string(name='TemplateId', description='This parameter is required.', example='S00000001-100060', position='Query'),
}

model GetSystemTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  systemTemplate?: {
    status?: string(name='Status', example='Normal'),
    subtype?: int32(name='Subtype', example='1'),
    subtypeName?: string(name='SubtypeName', example='Normal'),
    templateConfig?: string(name='TemplateConfig', example='{"Container":{"Format":"m3u8"},"TransConfig":{"TransMode":"onepass"},"Video":{"Codec":"H.264","Maxrate":8000,"Preset":"medium","PixFmt":"yuv420p","Width":2048,"Bitrate":3500},"Audio":{"Codec":"aac","Bitrate":160,"Samplerate":44100,"Channels":2}}'),
    templateId?: string(name='TemplateId', example='S00000001-100060'),
    templateName?: string(name='TemplateName', example='M3U8-2K'),
    type?: int32(name='Type', example='1'),
    typeName?: string(name='TypeName', example='TranscodeTemplate'),
  }(name='SystemTemplate'),
}

model GetSystemTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSystemTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSystemTemplate  GetSystemTemplateRequest
  * @return GetSystemTemplateResponse
 */
async function getSystemTemplate(request: GetSystemTemplateRequest): GetSystemTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSystemTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetTemplateRequest {
  relatedMediaidFlag?: string(name='RelatedMediaidFlag', example='0', position='Query'),
  templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model GetTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  template?: {
    clipsParam?: string(name='ClipsParam', example='{"Media1":"mediaId","Text1":"text"}'),
    config?: string(name='Config', example='参考Timeline模板配置详解'),
    coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg'),
    createSource?: string(name='CreateSource', example='OpenAPI'),
    creationTime?: string(name='CreationTime', example='2020-12-26T04:11:10Z'),
    modifiedSource?: string(name='ModifiedSource', example='OpenAPI'),
    modifiedTime?: string(name='ModifiedTime', example='2020-12-26T04:11:10Z'),
    name?: string(name='Name', example='视频添加水印模板'),
    previewMedia?: string(name='PreviewMedia', example='****20b48fb04483915d4f2cd8ac****'),
    previewMediaStatus?: string(name='PreviewMediaStatus', example='Normal'),
    relatedMediaids?: string(name='RelatedMediaids', example='{"video":["******c04f1d4a06996144cc1a******"],"audio":["******c04f1d4a06996144cc1a******"],"image":["******c04f1d4a06996144cc1a******"]}'),
    status?: string(name='Status', example='Available'),
    templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
    type?: string(name='Type', example='Timeline'),
  }(name='Template'),
}

model GetTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTemplate  GetTemplateRequest
  * @return GetTemplateResponse
 */
async function getTemplate(request: GetTemplateRequest): GetTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetTemplateMaterialsRequest {
  fileList?: string(name='FileList', example='["music.mp3","config.json","assets/1.jpg"]', position='Query'),
  templateId: string(name='TemplateId', description='This parameter is required.', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model GetTemplateMaterialsResponseBody = {
  materialUrls?: string(name='MaterialUrls', example='{"music.mp3":"https://bucket.oss-cn-shanghai.aliyuncs.com/music.mp3?sign=xxx","config.json":"https://bucket.oss-cn-shanghai.aliyuncs.com/config.json?sign=xxx","assets/1.jpg":"https://bucket.oss-cn-shanghai.aliyuncs.com/assets/1.jpg?sign=xxx"}'),
  requestId?: string(name='RequestId', description='Id of the request', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetTemplateMaterialsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTemplateMaterialsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTemplateMaterials  GetTemplateMaterialsRequest
  * @return GetTemplateMaterialsResponse
 */
async function getTemplateMaterials(request: GetTemplateMaterialsRequest): GetTemplateMaterialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTemplateMaterials', 'POST', '/', 'json', false, 'json', request);
}

model GetTemplateParamsRequest {
  templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model GetTemplateParamsResponseBody = {
  paramList?: [ 
    {
      content?: string(name='Content'),
      coverUrl?: string(name='CoverUrl'),
      key?: string(name='Key', example='video1'),
      mediaUrl?: string(name='MediaUrl'),
      type?: string(name='Type', example='Image'),
    }
  ](name='ParamList'),
  requestId?: string(name='RequestId', description='Id of the request', example='****2876-6263-4B75-8F2C-CD0F7FCF****'),
  templateId?: string(name='TemplateId', example='******419c8741c1b4325f035b******'),
}

model GetTemplateParamsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTemplateParamsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTemplateParams  GetTemplateParamsRequest
  * @return GetTemplateParamsResponse
 */
async function getTemplateParams(request: GetTemplateParamsRequest): GetTemplateParamsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTemplateParams', 'GET', '/', 'json', false, 'json', request);
}

model GetTranscodeJobRequest {
  parentJobId?: string(name='ParentJobId', example='ab4802364a2e49208c99efab82dfa8e8', position='Query'),
}

model GetTranscodeJobResponseBody = {
  requestId?: string(name='RequestId', example='9EDC30DC-0050-5459-B788-F761B2BE359B'),
  transcodeParentJob?: {
    createTime?: string(name='CreateTime', example='2022-01-12T08:49:41Z'),
    finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
    inputGroup?: [ 
      {
        media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
        type?: string(name='Type', example='OSS'),
      }
    ](name='InputGroup'),
    jobCount?: int32(name='JobCount', example='1'),
    name?: string(name='Name', example='transcode-job'),
    outputGroup?: [ 
      {
        output?: {
          media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
          outputUrl?: string(name='OutputUrl'),
          type?: string(name='Type', example='OSS'),
        }(name='Output'),
        processConfig?: {
          combineConfigs?: [ 
            {
              audioIndex: string(name='AudioIndex', description='This parameter is required.', example='0 或 exclude'),
              duration?: double(name='Duration', example='20.0'),
              start?: double(name='Start', example='0.0'),
              videoIndex: string(name='VideoIndex', description='This parameter is required.', example='0 或 exclude'),
            }
          ](name='CombineConfigs'),
          encryption?: {
            cipherText?: string(name='CipherText', example='MTYi00NDU0LTg5O****'),
            decryptKeyUri?: string(name='DecryptKeyUri', example='https://sample.com/path?CipherText=MTYi00NDU0LTg5O****'),
            encryptType?: string(name='EncryptType', example='PrivateEncryption'),
            keyServiceType?: string(name='KeyServiceType', example='KMS'),
          }(name='Encryption'),
          imageWatermarks?: [ 
            {
              overwriteParams?: {
                dx?: string(name='Dx', example='10'),
                dy?: string(name='Dy', example='10'),
                file?: {
                  media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', example='OSS'),
                }(name='File'),
                height?: string(name='Height', example='32'),
                referPos?: string(name='ReferPos', example='TopLeft'),
                timeline?: {
                  duration?: string(name='Duration', example='ToEND'),
                  start?: string(name='Start', example='00:00:05'),
                }(name='Timeline'),
                width?: string(name='Width', example='32'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='ImageWatermarks'),
          subtitles?: [ 
            {
              overwriteParams?: {
                charEnc?: string(name='CharEnc', example='UTF-8'),
                file?: {
                  media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', example='OSS'),
                }(name='File'),
                format?: string(name='Format', example='vtt'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='Subtitles'),
          textWatermarks?: [ 
            {
              overwriteParams?: {
                adaptive?: string(name='Adaptive', example='false'),
                borderColor?: string(name='BorderColor', example='#006400'),
                borderWidth?: int32(name='BorderWidth', example='0'),
                content?: string(name='Content', example='测试水印'),
                fontAlpha?: string(name='FontAlpha', example='1.0'),
                fontColor?: string(name='FontColor', example='#006400'),
                fontName?: string(name='FontName', example='SimSun'),
                fontSize?: int32(name='FontSize', example='16'),
                left?: string(name='Left', example='10'),
                top?: string(name='Top', example='10'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='TextWatermarks'),
          transcode?: {
            overwriteParams?: {
              audio?: {
                bitrate?: string(name='Bitrate', example='128'),
                channels?: string(name='Channels', example='2'),
                codec?: string(name='Codec', example='AAC'),
                profile?: string(name='Profile', example='aac_low'),
                remove?: string(name='Remove', example='false'),
                samplerate?: string(name='Samplerate', example='44100'),
                volume?: {
                  integratedLoudnessTarget?: string(name='IntegratedLoudnessTarget', example='-6'),
                  loudnessRangeTarget?: string(name='LoudnessRangeTarget', example='8'),
                  method?: string(name='Method', example='auto'),
                  truePeak?: string(name='TruePeak', example='-1'),
                }(name='Volume'),
              }(name='Audio'),
              container?: {
                format?: string(name='Format', example='mp4'),
              }(name='Container'),
              muxConfig?: {
                segment?: {
                  duration?: string(name='Duration', example='10'),
                  forceSegTime?: string(name='ForceSegTime', example='2,3'),
                }(name='Segment'),
              }(name='MuxConfig'),
              transConfig?: {
                adjDarMethod?: string(name='AdjDarMethod'),
                isCheckAudioBitrate?: string(name='IsCheckAudioBitrate'),
                isCheckAudioBitrateFail?: string(name='IsCheckAudioBitrateFail'),
                isCheckReso?: string(name='IsCheckReso'),
                isCheckResoFail?: string(name='IsCheckResoFail'),
                isCheckVideoBitrate?: string(name='IsCheckVideoBitrate'),
                isCheckVideoBitrateFail?: string(name='IsCheckVideoBitrateFail'),
                transMode?: string(name='TransMode'),
              }(name='TransConfig'),
              video?: {
                abrMax?: string(name='AbrMax', example='6000'),
                bitrate?: string(name='Bitrate', example='3000'),
                bufsize?: string(name='Bufsize', example='6000'),
                codec?: string(name='Codec', example='H.264'),
                crf?: string(name='Crf', example='23'),
                crop?: string(name='Crop', example='1280:800:0:140'),
                fps?: string(name='Fps', example='25'),
                gop?: string(name='Gop', example='250'),
                height?: string(name='Height', example='1080'),
                longShortMode?: string(name='LongShortMode', example='false'),
                maxrate?: string(name='Maxrate', example='9000'),
                pad?: string(name='Pad', example='1280:800:0:140'),
                pixFmt?: string(name='PixFmt', example='yuv420p'),
                preset?: string(name='Preset', example='medium'),
                profile?: string(name='Profile', example='Main'),
                remove?: string(name='Remove', example='false'),
                scanMode?: string(name='ScanMode', example='progressive'),
                width?: string(name='Width', example='1920'),
              }(name='Video'),
            }(name='OverwriteParams'),
            templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }(name='Transcode'),
        }(name='ProcessConfig'),
      }
    ](name='OutputGroup'),
    parentJobId?: string(name='ParentJobId', example='8b2198504dd340b7b3c9842a74fc9baa'),
    percent?: int32(name='Percent', example='0'),
    requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
    scheduleConfig?: {
      pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
      priority?: int32(name='Priority', example='5'),
    }(name='ScheduleConfig'),
    status?: string(name='Status', example='Success'),
    submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
    transcodeJobList?: [ 
      {
        createTime?: string(name='CreateTime', example='2022-01-12T08:49:41Z'),
        finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
        inputGroup?: [ 
          {
            inputUrl?: string(name='InputUrl'),
            media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
            type?: string(name='Type', example='OSS'),
          }
        ](name='InputGroup'),
        jobId?: string(name='JobId', example='7d6a7e0d4db2457a8d45ff5d43e1bf0a'),
        jobIndex?: int32(name='JobIndex', example='0'),
        name?: string(name='Name', example='transcode-job'),
        outFileMeta?: {
          audioStreamInfoList?: [ 
            {
              bitrate?: string(name='Bitrate', example='0.f'),
              channelLayout?: string(name='ChannelLayout', example='stereo'),
              channels?: string(name='Channels', example='2'),
              codecLongName?: string(name='CodecLongName', example='AAC (Advanced Audio Coding)'),
              codecName?: string(name='CodecName', example='aac'),
              codecTag?: string(name='CodecTag', example='0x000f'),
              codecTagString?: string(name='CodecTagString', example='[15][0][0][0]'),
              codecTimeBase?: string(name='CodecTimeBase', example='1/44100'),
              duration?: string(name='Duration', example='403.039989'),
              index?: string(name='Index', example='1'),
              lang?: string(name='Lang', example='cn'),
              sampleFmt?: string(name='SampleFmt', example='fltp'),
              sampleRate?: string(name='SampleRate', example='44100'),
              startTime?: string(name='StartTime', example='1.473556'),
              timebase?: string(name='Timebase', example='1/90000'),
            }
          ](name='AudioStreamInfoList'),
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', example='888.563'),
            duration?: string(name='Duration', example='403.039999'),
            fileName?: string(name='FileName', example='file.m3u8'),
            fileSize?: string(name='FileSize', example='31737'),
            fileStatus?: string(name='FileStatus', example='Normal'),
            fileType?: string(name='FileType', example='source_file'),
            fileUrl?: string(name='FileUrl', example='http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8'),
            formatName?: string(name='FormatName', example='hls,applehttp'),
            height?: string(name='Height', example='478'),
            mediaId?: string(name='MediaId', example='486c2890096871edba6f81848c016303'),
            region?: string(name='Region', example='cn-shanghai'),
            width?: string(name='Width', example='848'),
          }(name='FileBasicInfo'),
          videoStreamInfoList?: [ 
            {
              avgFps?: string(name='Avg_fps', example='25.0'),
              bitRate?: string(name='Bit_rate', example='888.563'),
              codecLongName?: string(name='Codec_long_name', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
              codecName?: string(name='Codec_name', example='h264'),
              codecTag?: string(name='Codec_tag', example='0x001b'),
              codecTagString?: string(name='Codec_tag_string', example='[27][0][0][0]'),
              codecTimeBase?: string(name='Codec_time_base', example='1/50'),
              dar?: string(name='Dar', example='16:9'),
              duration?: string(name='Duration', example='403.039989'),
              fps?: string(name='Fps', example='25.0'),
              hasBFrames?: string(name='Has_b_frames', example='2'),
              height?: string(name='Height', example='478'),
              index?: string(name='Index', example='0'),
              lang?: string(name='Lang', example='cn'),
              level?: string(name='Level', example='31'),
              numFrames?: string(name='NumFrames', example='10040'),
              pixFmt?: string(name='PixFmt', example='yuv420p'),
              profile?: string(name='Profile', example='High'),
              rotate?: string(name='Rotate', example='0'),
              sar?: string(name='Sar', example='478:477'),
              startTime?: string(name='Start_time', example='1.473556'),
              timeBase?: string(name='Time_base', example='1/90000'),
              width?: string(name='Width', example='848'),
            }
          ](name='VideoStreamInfoList'),
        }(name='OutFileMeta'),
        output?: {
          media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
          outputUrl?: string(name='OutputUrl'),
          type?: string(name='Type', example='OSS'),
        }(name='Output'),
        parentJobId?: string(name='ParentJobId', example='8b2198504dd340b7b3c9842a74fc9baa'),
        processConfig?: {
          combineConfigs?: [ 
            {
              audioIndex: string(name='AudioIndex', description='This parameter is required.', example='0 或 exclude'),
              duration?: double(name='Duration', example='20.0'),
              start?: double(name='Start', example='0.0'),
              videoIndex: string(name='VideoIndex', description='This parameter is required.', example='0 或 exclude'),
            }
          ](name='CombineConfigs'),
          encryption?: {
            cipherText?: string(name='CipherText', example='MTYi00NDU0LTg5O****'),
            decryptKeyUri?: string(name='DecryptKeyUri', example='https://sample.com/path?CipherText=MTYi00NDU0LTg5O****'),
            encryptType?: string(name='EncryptType', example='PrivateEncryption'),
            keyServiceType?: string(name='KeyServiceType', example='KMS'),
          }(name='Encryption'),
          imageWatermarks?: [ 
            {
              overwriteParams?: {
                dx?: string(name='Dx', example='10'),
                dy?: string(name='Dy', example='10'),
                file?: {
                  media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', example='OSS'),
                }(name='File'),
                height?: string(name='Height', example='32'),
                referPos?: string(name='ReferPos', example='TopLeft'),
                timeline?: {
                  duration?: string(name='Duration', example='ToEND'),
                  start?: string(name='Start', example='00:00:05'),
                }(name='Timeline'),
                width?: string(name='Width', example='32'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='ImageWatermarks'),
          isInheritTags?: boolean(name='IsInheritTags'),
          subtitles?: [ 
            {
              overwriteParams?: {
                charEnc?: string(name='CharEnc', example='UTF-8'),
                file?: {
                  media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', example='OSS'),
                }(name='File'),
                format?: string(name='Format', example='vtt'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='Subtitles'),
          textWatermarks?: [ 
            {
              overwriteParams?: {
                adaptive?: string(name='Adaptive', example='false'),
                borderColor?: string(name='BorderColor', example='#006400'),
                borderWidth?: int32(name='BorderWidth', example='0'),
                content?: string(name='Content', example='测试水印'),
                fontAlpha?: string(name='FontAlpha', example='1.0'),
                fontColor?: string(name='FontColor', example='#006400'),
                fontName?: string(name='FontName', example='SimSun'),
                fontSize?: int32(name='FontSize', example='16'),
                left?: string(name='Left', example='10'),
                top?: string(name='Top', example='10'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='TextWatermarks'),
          transcode?: {
            overwriteParams?: {
              audio?: {
                bitrate?: string(name='Bitrate', example='128'),
                channels?: string(name='Channels', example='2'),
                codec?: string(name='Codec', example='AAC'),
                profile?: string(name='Profile', example='aac_low'),
                remove?: string(name='Remove', example='false'),
                samplerate?: string(name='Samplerate', example='44100'),
                volume?: {
                  integratedLoudnessTarget?: string(name='IntegratedLoudnessTarget', example='-6'),
                  loudnessRangeTarget?: string(name='LoudnessRangeTarget', example='8'),
                  method?: string(name='Method', example='auto'),
                  truePeak?: string(name='TruePeak', example='-1'),
                }(name='Volume'),
              }(name='Audio'),
              container?: {
                format?: string(name='Format', example='mp4'),
              }(name='Container'),
              muxConfig?: {
                segment?: {
                  duration?: string(name='Duration', example='10'),
                  forceSegTime?: string(name='ForceSegTime', example='2,3'),
                }(name='Segment'),
              }(name='MuxConfig'),
              tags?: map[string]string(name='Tags'),
              transConfig?: {
                adjDarMethod?: string(name='AdjDarMethod'),
                isCheckAudioBitrate?: string(name='IsCheckAudioBitrate'),
                isCheckAudioBitrateFail?: string(name='IsCheckAudioBitrateFail'),
                isCheckReso?: string(name='IsCheckReso'),
                isCheckResoFail?: string(name='IsCheckResoFail'),
                isCheckVideoBitrate?: string(name='IsCheckVideoBitrate'),
                isCheckVideoBitrateFail?: string(name='IsCheckVideoBitrateFail'),
                transMode?: string(name='TransMode'),
              }(name='TransConfig'),
              video?: {
                abrMax?: string(name='AbrMax', example='6000'),
                bitrate?: string(name='Bitrate', example='3000'),
                bufsize?: string(name='Bufsize', example='6000'),
                codec?: string(name='Codec', example='H.264'),
                crf?: string(name='Crf', example='23'),
                crop?: string(name='Crop', example='1280:800:0:140'),
                fps?: string(name='Fps', example='25'),
                gop?: string(name='Gop', example='250'),
                height?: string(name='Height', example='1080'),
                longShortMode?: string(name='LongShortMode', example='false'),
                maxrate?: string(name='Maxrate', example='9000'),
                pad?: string(name='Pad', example='1280:800:0:140'),
                pixFmt?: string(name='PixFmt', example='yuv420p'),
                preset?: string(name='Preset', example='medium'),
                profile?: string(name='Profile', example='Main'),
                remove?: string(name='Remove', example='false'),
                scanMode?: string(name='ScanMode', example='progressive'),
                width?: string(name='Width', example='1920'),
              }(name='Video'),
            }(name='OverwriteParams'),
            templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }(name='Transcode'),
        }(name='ProcessConfig'),
        requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
        scheduleConfig?: {
          pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
          priority?: int32(name='Priority', example='5'),
        }(name='ScheduleConfig'),
        status?: string(name='Status', example='Init'),
        submitResultJson?: map[string]any(name='SubmitResultJson', example='{}'),
        submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
        userData?: string(name='UserData', example='user-data'),
      }
    ](name='TranscodeJobList'),
    triggerSource?: string(name='TriggerSource', example='API'),
    userData?: string(name='UserData', example='user-data'),
  }(name='TranscodeParentJob', description='TranscodeParentJobWithSubJobDTO'),
}

model GetTranscodeJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTranscodeJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTranscodeJob  GetTranscodeJobRequest
  * @return GetTranscodeJobResponse
 */
async function getTranscodeJob(request: GetTranscodeJobRequest): GetTranscodeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTranscodeJob', 'POST', '/', 'json', false, 'json', request);
}

model GetUrlUploadInfosRequest {
  regionId?: string(name='RegionId', position='Host'),
  jobIds?: string(name='JobIds', description='The IDs of the upload jobs. You can specify one or more job IDs. You can obtain the job IDs from the response parameter JobId of the [UploadMediaByURL](https://help.aliyun.com/document_detail/86311.html) operation.

*   You can specify a maximum of 10 job IDs.
*   Separate the job IDs with commas (,).

>  You must specify either JobIds or UploadURLs. If you specify both parameters, only the value of JobIds takes effect.', example='df2ac80b481346daa1db6a7c40edc7f8', position='Query'),
  uploadURLs?: string(name='UploadURLs', description='The upload URLs of the source files. You can specify a maximum of 10 URLs. Separate the URLs with commas (,).

> 

*   The URLs must be encoded.

*   If a media file is uploaded multiple times, we recommend that you specify the URL of the media file only once in this parameter.

*   You must specify either JobIds or UploadURLs. If you specify both parameters, only the value of JobIds takes effect.', example='https://media.w3.org/2010/05/sintel/trailer.mp4', position='Query'),
}

model GetUrlUploadInfosResponseBody = {
  nonExists?: [ string ](name='NonExists', description='The job IDs or upload URLs that do not exist.'),
  requestId?: string(name='RequestId', description='The request ID.', example='******11-DB8D-4A9A-875B-275798******'),
  URLUploadInfoList?: [ 
    {
      completeTime?: string(name='CompleteTime', description='The time when the upload job was complete. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2021-11-26 21:47:37'),
      creationTime?: string(name='CreationTime', description='The time when the upload job was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2021-11-07T10:03:37Z'),
      errorCode?: string(name='ErrorCode', description='The error code returned if the upload job failed.', example='200'),
      errorMessage?: string(name='ErrorMessage', description='The error message returned if the upload job failed.', example='Success'),
      fileSize?: string(name='FileSize', description='The file size. Unit: bytes.', example='64610'),
      jobId?: string(name='JobId', description='The ID of the upload job.', example='3829500c0fef429fa4ec1680b122d***'),
      mediaId?: string(name='MediaId', description='The ID of the uploaded media file.', example='5014ca70f08171ecbf940764a0fd6***'),
      status?: string(name='Status', description='The status of the upload job. For more information about the valid values of the parameter, see the "Status: the status of a URL-based upload job" section of the [Basic data types](https://help.aliyun.com/document_detail/52839.html) topic.', example='Normal'),
      uploadURL?: string(name='UploadURL', description='The upload URL of the source file.

>  A maximum of 100 URLs can be returned.', example='http://****.mp4'),
      userData?: string(name='UserData', description='The user data. The value is a JSON string.', example='{"MessageCallback":"{"CallbackURL":"http://example.aliyundoc.com"}", "Extend":"{"localId":"***", "test":"www"}"}'),
    }
  ](name='URLUploadInfoList', description='The details about URL-based upload jobs.'),
}

model GetUrlUploadInfosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUrlUploadInfosResponseBody(name='body'),
}

/**
  * @description You can call this operation to query the information, including the upload status, user data, creation time, and completion time, about URL-based upload jobs based on the returned job IDs or the URLs used during the upload.
  * If an upload job fails, you can view the error code and error message. If an upload job is successful, you can obtain the video ID.
  * @param request  the request parameters of GetUrlUploadInfos  GetUrlUploadInfosRequest
  * @return GetUrlUploadInfosResponse
 */
async function getUrlUploadInfos(request: GetUrlUploadInfosRequest): GetUrlUploadInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUrlUploadInfos', 'POST', '/', 'json', false, 'json', request);
}

model GetVideoListRequest {
  regionId?: string(name='RegionId', position='Host'),
  cateId?: long(name='CateId', description='The ID of the category.', example='781111', position='Query'),
  endTime?: string(name='EndTime', description='The end of the time range to query. The end time must be later than the start time. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2017-01-11T12:59:00Z', position='Query'),
  pageNo?: int32(name='PageNo', description='The page number. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 50.', example='20', position='Query'),
  sortBy?: string(name='SortBy', description='The sorting method of the results. Valid values:

*   CreationTime:Desc (default): sorts results in reverse chronological order.
*   CreationTime:Asc: sorts results in chronological order.', example='CreationTime:Asc', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2017-01-11T12:00:00Z', position='Query'),
  status?: string(name='Status', description='The status of the video. You can specify multiple video statuses and separate them with commas (,).

Valid values:

*   PrepareFail: The file is abnormal.
*   UploadFail: The video failed to be uploaded.
*   UploadSucc: The video is uploaded.
*   Transcoding: The video is being transcoded.
*   TranscodeFail: The video failed to be transcoded.
*   ProduceFail: The video failed to be produced.
*   Normal: The video is normal.
*   Uploading: The video is being uploaded.
*   Preparing: The file is being generated.
*   Blocked: The video is blocked.
*   checking: The video is being reviewed.', example='Uploading,Normal', position='Query'),
}

model GetVideoListResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  mediaList?: [ 
    {
      appId?: string(name='AppId', description='The ID of the application. Default value: app-1000000.', example='app-1000000'),
      cateId?: long(name='CateId', description='The ID of the category.', example='3679'),
      cateName?: string(name='CateName', description='The name of the category.'),
      coverUrl?: string(name='CoverUrl', description='The URL of the thumbnail.', example='http://example.aliyundoc.com/snapshot/****.jpg?auth_key=1498476426-0-0-f00b9455c49a423ce69cf4e27333****'),
      creationTime?: string(name='CreationTime', description='The time when the audio or video file was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2017-11-14T09:15:50Z'),
      description?: string(name='Description', description='The description of the audio or video file.'),
      duration?: float(name='Duration', description='The duration. Unit: seconds.', example='135.6'),
      mediaId?: string(name='MediaId', description='The ID of the audio or video file.', example='1c6ce34007d571ed94667630a6bc****'),
      modificationTime?: string(name='ModificationTime', description='The time when the audio or video file was updated. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2017-11-14T09:16:50Z'),
      size?: long(name='Size', description='The size of the source file. Unit: bytes.', example='10897890'),
      snapshots?: [ string ](name='Snapshots', description='The array of video snapshot URLs.'),
      status?: string(name='Status', description='The status of the video.

Valid values:

*   PrepareFail: The file is abnormal.
*   UploadFail: The video failed to be uploaded.
*   UploadSucc: The video is uploaded.
*   Transcoding: The video is being transcoded.
*   TranscodeFail: The video failed to be transcoded.
*   ProduceFail: The video failed to be produced.
*   Normal: The video is normal.
*   Uploading: The video is being uploaded.
*   Preparing: The file is being generated.
*   Blocked: The video is blocked.
*   checking: The video is being reviewed.', example='Normal'),
      storageLocation?: string(name='StorageLocation', description='The storage address.', example='out-****.oss-cn-shanghai.aliyuncs.com'),
      tags?: string(name='Tags', description='The tags of the audio or video file.'),
      title?: string(name='Title', description='The title of the audio or video file.'),
    }
  ](name='MediaList', description='The information about the audio and video files.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='******11-DB8D-4A9A-875B-275798******'),
  success?: string(name='Success', description='Indicates whether the request is successful. Valid values:

*   true
*   false', example='true'),
  total?: long(name='Total', description='The total number of audio and video files that meet the conditions.', example='163'),
}

model GetVideoListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVideoListResponseBody(name='body'),
}

/**
  * @description You can call this operation to query information about up to the first 5,000 audio and video files based on the filter condition, such as the status or category ID of the file. We recommend that you set the StartTime and EndTime parameters to narrow down the time range and perform multiple queries to obtain data.
  * @param request  the request parameters of GetVideoList  GetVideoListRequest
  * @return GetVideoListResponse
 */
async function getVideoList(request: GetVideoListRequest): GetVideoListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVideoList', 'POST', '/', 'json', false, 'json', request);
}

model GetWorkflowTaskRequest {
  taskId?: string(name='TaskId', example='******4215e042b3966ca5441e******', position='Query'),
}

model GetWorkflowTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='******0C-7870-15FE-B96F-8880BB******'),
  workflowTask?: {
    activityResults?: string(name='ActivityResults'),
    createTime?: string(name='CreateTime', example='2023-01-04T02:05:17Z'),
    finishTime?: string(name='FinishTime', example='2023-01-04T02:06:19Z'),
    status?: string(name='Status', example='Succeed'),
    taskId?: string(name='TaskId', example='******4215e042b3966ca5441e******'),
    taskInput?: string(name='TaskInput', example='{
      "Type": "Media",
      "Media": "******30706071edbfe290b488******"
}'),
    userData?: string(name='UserData', example='{"NotifyAddress":"http://xx.xx.xxx"}'),
    workflow?: {
      createTime?: string(name='CreateTime', example='2022-11-27T10:02:12Z'),
      modifiedTime?: string(name='ModifiedTime', example='2022-11-29T02:06:19Z'),
      name?: string(name='Name'),
      status?: string(name='Status', example='Active'),
      type?: string(name='Type', example='Common'),
      workflowId?: string(name='WorkflowId', example='******63dca94c609de02ac0d1******'),
    }(name='Workflow'),
  }(name='WorkflowTask'),
}

model GetWorkflowTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWorkflowTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetWorkflowTask  GetWorkflowTaskRequest
  * @return GetWorkflowTaskResponse
 */
async function getWorkflowTask(request: GetWorkflowTaskRequest): GetWorkflowTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWorkflowTask', 'POST', '/', 'json', false, 'json', request);
}

model InsertMediaToSearchLibRequest {
  regionId?: string(name='RegionId', position='Host'),
  input: string(name='Input', description='The URL of the video, audio, or image file that you want to import to the search library.

Note: Make sure that you specify a correct file name and the bucket in which the file resides is in the same region where this operation is called. Otherwise, the file cannot be found or the operation may fail.

Specify an Object Storage Service (OSS) URL in the following format: oss://[Bucket name]/[File path]. For example, you can specify oss://[example-bucket-****]/[object_path-****].

Specify an HTTP URL in the following format: public endpoint. For example, you can specify http://example-test-\\*\\*\\*\\*.mp4.

This parameter is required.', example='http://example-test-****.mp4', position='Query'),
  mediaId?: string(name='MediaId', description='The ID of the media asset. Each media ID is unique. If you leave this parameter empty, a media ID is automatically generated for this parameter.', example='411bed50018971edb60b0764a0ec6***', position='Query'),
  mediaType?: string(name='MediaType', description='The type of the media asset. Valid values:

*   video (default)
*   image
*   audio', example='video', position='Query'),
  msgBody?: string(name='MsgBody', description='The message body.', example='{}', position='Query'),
  searchLibName?: string(name='SearchLibName', description='The name of the search library. Default value: ims-default-search-lib.', example='test1', position='Query'),
}

model InsertMediaToSearchLibResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  mediaId?: string(name='MediaId', description='The ID of the media asset.', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='*****ACB-44F2-5F2D-88D7-1283E70*****'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model InsertMediaToSearchLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InsertMediaToSearchLibResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InsertMediaToSearchLib  InsertMediaToSearchLibRequest
  * @return InsertMediaToSearchLibResponse
 */
async function insertMediaToSearchLib(request: InsertMediaToSearchLibRequest): InsertMediaToSearchLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InsertMediaToSearchLib', 'POST', '/', 'json', false, 'json', request);
}

model ListAIAgentInstanceRequest {
  AIAgentId: string(name='AIAgentId', description='This parameter is required.', example='39f8e0bc005e4f309379701645f4***', position='Query'),
  endTime?: string(name='EndTime', example='2023-01-02T00:00:00Z', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  startTime?: string(name='StartTime', example='2023-01-01T00:00:00Z', position='Query'),
}

model ListAIAgentInstanceResponseBody = {
  instances?: [ 
    {
      callLogUrl?: string(name='CallLogUrl', example='https://example.com/call_logs/12345.json'),
      runtimeConfig?: AIAgentRuntimeConfig(name='RuntimeConfig', example='{"VoiceChat":{"AgentUserId":"voice_agent_001","ChannelId":"voice_channel_001","AuthToken":"your_voice_chat_auth_token"}}'),
      status?: string(name='Status', example='Finished'),
      templateConfig?: AIAgentTemplateConfig(name='TemplateConfig', example='{"VoiceChat": {"VoiceId": "zhixiaoxia"}}'),
      userData?: string(name='UserData', example='{"Email":"johndoe@example.com","Preferences":{"Language":"en"}}'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId', example='7B117AF5-2A16-412C-B127-FA6175ED1AD0'),
}

model ListAIAgentInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAIAgentInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAIAgentInstance  ListAIAgentInstanceRequest
  * @return ListAIAgentInstanceResponse
 */
async function listAIAgentInstance(request: ListAIAgentInstanceRequest): ListAIAgentInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAIAgentInstance', 'POST', '/', 'json', false, 'json', request);
}

model ListAllPublicMediaTagsRequest {
  regionId?: string(name='RegionId', position='Host'),
  businessType?: string(name='BusinessType', description='The business type of the media asset.', example='"sticker"', position='Query'),
  entityId?: string(name='EntityId', description='The entity ID, which is used to distinguish between media assets of different types in the public domain.

Set this parameter to Copyright_Music, which indicates music in the public domain.', example='Copyright_Music', position='Query'),
}

model ListAllPublicMediaTagsResponseBody = {
  mediaTagList?: [ 
    {
      mediaTagId?: string(name='MediaTagId', description='The ID of the media tag.', example='sticker-gif'),
      mediaTagNameChinese?: string(name='MediaTagNameChinese', description='The name of the media tag in Chinese.', example='Gif'),
      mediaTagNameEnglish?: string(name='MediaTagNameEnglish', description='The name of the material tag in English.'),
      options?: [ 
        {
          optionChineseName?: string(name='OptionChineseName', description='The option name in Chinese.'),
          optionEnglishName?: string(name='OptionEnglishName', description='The option name in English.', example='Angry'),
          optionId?: string(name='OptionId', description='The option ID.', example='Angry'),
        }
      ](name='Options', description='The options.'),
    }
  ](name='MediaTagList', description='The tags of media assets in the public media library.'),
  requestId?: string(name='RequestId', description='The request ID.', example='B45F83B7-7F87-4792-BFE9-63CD2137CAF0'),
}

model ListAllPublicMediaTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAllPublicMediaTagsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAllPublicMediaTags  ListAllPublicMediaTagsRequest
  * @return ListAllPublicMediaTagsResponse
 */
async function listAllPublicMediaTags(request: ListAllPublicMediaTagsRequest): ListAllPublicMediaTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAllPublicMediaTags', 'POST', '/', 'json', false, 'json', request);
}

model ListAvatarTrainingJobsRequest {
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', maximum=100, position='Query'),
  status?: string(name='Status', example='Success', position='Query'),
}

model ListAvatarTrainingJobsResponseBody = {
  data?: {
    avatarTrainingJobList?: [ 
      {
        avatarDescription?: string(name='AvatarDescription'),
        avatarId?: string(name='AvatarId', example='Avatar-XXX'),
        avatarName?: string(name='AvatarName'),
        avatarType?: string(name='AvatarType', example='2DAvatar'),
        createTime?: string(name='CreateTime', example='2020-12-23T13:33:40Z'),
        firstTrainingTime?: string(name='FirstTrainingTime', example='2020-12-23T13:33:40Z'),
        jobId?: string(name='JobId', example='*****aded114489ea02e0addf93*****'),
        lastTrainingTime?: string(name='LastTrainingTime', example='2020-12-23T13:33:40Z'),
        message?: string(name='Message'),
        portrait?: string(name='Portrait', example='*****aded114489ea02e0addf93*****'),
        status?: string(name='Status', example='Normal'),
      }
    ](name='AvatarTrainingJobList'),
    totalCount?: long(name='TotalCount', example='3'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
  success?: boolean(name='Success', example='true'),
}

model ListAvatarTrainingJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAvatarTrainingJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAvatarTrainingJobs  ListAvatarTrainingJobsRequest
  * @return ListAvatarTrainingJobsResponse
 */
async function listAvatarTrainingJobs(request: ListAvatarTrainingJobsRequest): ListAvatarTrainingJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAvatarTrainingJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListAvatarsRequest {
  avatarType?: string(name='AvatarType', example='2DAvatar', position='Query'),
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', maximum=100, position='Query'),
}

model ListAvatarsResponseBody = {
  data?: {
    avatarList?: [ 
      {
        avatarDescription?: string(name='AvatarDescription'),
        avatarId?: string(name='AvatarId', example='Avatar-XXX'),
        avatarName?: string(name='AvatarName'),
        avatarType?: string(name='AvatarType', example='2DAvatar'),
        portrait?: string(name='Portrait', example='****571c704445f9a0ee011406c2****'),
        thumbnail?: string(name='Thumbnail', example='https://your-bucket.oss-cn-hangzhou.aliyuncs.com/thumbnail.png'),
        transparent?: boolean(name='Transparent'),
      }
    ](name='AvatarList'),
    totalCount?: long(name='TotalCount', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model ListAvatarsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAvatarsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAvatars  ListAvatarsRequest
  * @return ListAvatarsResponse
 */
async function listAvatars(request: ListAvatarsRequest): ListAvatarsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAvatars', 'POST', '/', 'json', false, 'json', request);
}

model ListBatchMediaProducingJobsRequest {
  endTime?: string(name='EndTime', example='2023-06-05T15:59:59Z', position='Query'),
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****', position='Query'),
  jobType?: string(name='JobType', example='Script', position='Query'),
  maxResults?: int32(name='MaxResults', example='100', position='Query'),
  nextToken?: string(name='NextToken', example='mRZkKAovub0xWVfH14he4Q==', position='Query'),
  sortBy?: string(name='SortBy', example='desc', position='Query'),
  startTime?: string(name='StartTime', example='2022-02-02T00:00:00Z', position='Query'),
  status?: string(name='Status', example='Finished', position='Query'),
}

model ListBatchMediaProducingJobsResponseBody = {
  editingBatchJobList?: [ 
    {
      completeTime?: string(name='CompleteTime', example='2023-06-09T06:38:09Z'),
      createTime?: string(name='CreateTime', example='2023-06-09T06:36:48Z'),
      editingConfig?: string(name='EditingConfig', example='{
  "MediaConfig": {
      "Volume": 0
  },
  "SpeechConfig": {
      "Volume": 1
  },
 "BackgroundMusicConfig": {
      "Volume": 0.3
  }
}'),
      extend?: string(name='Extend'),
      inputConfig?: string(name='InputConfig'),
      jobId?: string(name='JobId', example='******7ecbee4c6d9b8474498e******'),
      jobType?: string(name='JobType', example='Script'),
      modifiedTime?: string(name='ModifiedTime', example='2023-06-09T06:37:58Z'),
      outputConfig?: string(name='OutputConfig', example='{
  "MediaURL": "http://xxx.oss-cn-shanghai.aliyuncs.com/xxx_{index}.mp4",
  "Count": 20,
  "MaxDuration": 15,
  "Width": 1080,
  "Height": 1920,
  "Video": {"Crf": 27}
}'),
      status?: string(name='Status', example='Finished'),
      userData?: string(name='UserData'),
    }
  ](name='EditingBatchJobList'),
  maxResults?: int32(name='MaxResults', example='100'),
  nextToken?: string(name='NextToken', example='8EqYpQbZ6Eh7+Zz8DxVYoQ=='),
  requestId?: string(name='RequestId', description='Id of the request', example='******3B-0E1A-586A-AC29-742247******'),
}

model ListBatchMediaProducingJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBatchMediaProducingJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListBatchMediaProducingJobs  ListBatchMediaProducingJobsRequest
  * @return ListBatchMediaProducingJobsResponse
 */
async function listBatchMediaProducingJobs(request: ListBatchMediaProducingJobsRequest): ListBatchMediaProducingJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBatchMediaProducingJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListCustomTemplatesRequest {
  name?: string(name='Name', example='test-template', position='Query'),
  orderBy?: string(name='OrderBy', example='CreateTimeDesc', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  subtype?: string(name='Subtype', example='2', position='Query'),
  templateId?: string(name='TemplateId', example='****96e8864746a0b6f3****', position='Query'),
  type: string(name='Type', description='This parameter is required.', example='1', position='Query'),
}

model ListCustomTemplatesResponseBody = {
  customTemplateList?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
      frontendHint?: {
        transcodeTemplateHint?: {
          bitrateControlType?: string(name='BitrateControlType'),
        }(name='TranscodeTemplateHint'),
      }(name='FrontendHint'),
      isDefault?: boolean(name='IsDefault', example='true'),
      modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:17:54Z'),
      status?: string(name='Status', example='Normal'),
      subtype?: int32(name='Subtype', example='2'),
      subtypeName?: string(name='SubtypeName', example='AudioTranscode'),
      templateConfig?: string(name='TemplateConfig', example='{"Container":{"Format":"mp3"},"Audio":{"Codec":"mp3","Bitrate":"64","Samplerate":"22050","Channels":"2"}}'),
      templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
      templateName?: string(name='TemplateName', example='test-template'),
      type?: int32(name='Type', example='1'),
      typeName?: string(name='TypeName', example='TranscodeTemplate'),
    }
  ](name='CustomTemplateList'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  total?: int32(name='Total', example='20'),
}

model ListCustomTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCustomTemplatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCustomTemplates  ListCustomTemplatesRequest
  * @return ListCustomTemplatesResponse
 */
async function listCustomTemplates(request: ListCustomTemplatesRequest): ListCustomTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCustomTemplates', 'POST', '/', 'json', false, 'json', request);
}

model ListCustomizedVoiceJobsRequest {
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  type?: string(name='Type', position='Query'),
}

model ListCustomizedVoiceJobsResponseBody = {
  data?: {
    customizedVoiceJobList?: [ 
      {
        createTime?: string(name='CreateTime'),
        gender?: string(name='Gender', example='female'),
        gmtCreate?: string(name='GmtCreate', example='2022-06-27T02:42:28Z'),
        jobId?: string(name='JobId', example='2245ab99a7fd4116a4fd3f499b7a56c5'),
        message?: string(name='Message'),
        scenario?: string(name='Scenario', example='story'),
        status?: string(name='Status', example='Success'),
        type?: string(name='Type'),
        voiceDesc?: string(name='VoiceDesc'),
        voiceId?: string(name='VoiceId', example='xiaozhuan'),
        voiceName?: string(name='VoiceName'),
      }
    ](name='CustomizedVoiceJobList'),
    totalCount?: int32(name='TotalCount', example='271'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
  success?: boolean(name='Success', example='true'),
}

model ListCustomizedVoiceJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCustomizedVoiceJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCustomizedVoiceJobs  ListCustomizedVoiceJobsRequest
  * @return ListCustomizedVoiceJobsResponse
 */
async function listCustomizedVoiceJobs(request: ListCustomizedVoiceJobsRequest): ListCustomizedVoiceJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCustomizedVoiceJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListCustomizedVoicesRequest {
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  type?: string(name='Type', position='Query'),
}

model ListCustomizedVoicesResponseBody = {
  data?: {
    customizedVoiceList?: [ 
      {
        demoAudioMediaId?: string(name='DemoAudioMediaId', example='****4d5e829d498aaf966b119348****'),
        gender?: string(name='Gender', example='male'),
        scenario?: string(name='Scenario', example='story'),
        type?: string(name='Type'),
        voiceDesc?: string(name='VoiceDesc'),
        voiceId?: string(name='VoiceId', example='xiaozhuan'),
        voiceName?: string(name='VoiceName'),
      }
    ](name='CustomizedVoiceList'),
    totalCount?: int32(name='TotalCount', example='41'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model ListCustomizedVoicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCustomizedVoicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCustomizedVoices  ListCustomizedVoicesRequest
  * @return ListCustomizedVoicesResponse
 */
async function listCustomizedVoices(request: ListCustomizedVoicesRequest): ListCustomizedVoicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCustomizedVoices', 'POST', '/', 'json', false, 'json', request);
}

model ListDNADBRequest {
  DBIds?: string(name='DBIds', example='2288c6ca184c0e47098a5b665e2a12****,78dc866518b843259669df58ed30****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListDNADBResponseBody = {
  DBList?: [ 
    {
      DBId?: string(name='DBId', example='88c6ca184c0e47098a5b665e2a12****'),
      description?: string(name='Description'),
      model?: string(name='Model', example='Video'),
      name?: string(name='Name', example='example-name'),
      status?: string(name='Status', example='active'),
    }
  ](name='DBList'),
  requestId?: string(name='RequestId', example='25818875-5F78-4A13-BEF6-D7393642CA58'),
}

model ListDNADBResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDNADBResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDNADB  ListDNADBRequest
  * @return ListDNADBResponse
 */
async function listDNADB(request: ListDNADBRequest): ListDNADBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDNADB', 'POST', '/', 'json', false, 'json', request);
}

model ListDNAFilesRequest {
  DBId: string(name='DBId', description='This parameter is required.', example='2288c6ca184c0e47098a5b665e2a12****', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='ae0fd49c0840e14daf0d66a75b83****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListDNAFilesResponseBody = {
  fileList?: [ 
    {
      inputFile?: {
        bucket?: string(name='Bucket', example='example-bucket'),
        location?: string(name='Location', example='oss-cn-beijing'),
        object?: string(name='Object', example='example-****.mp4'),
      }(name='InputFile'),
      primaryKey?: string(name='PrimaryKey', example='ae0fd49c0840e14daf0d66a75b83****'),
    }
  ](name='FileList'),
  nextPageToken?: string(name='NextPageToken', example='ae0fd49c0840e14daf0d66a75b83****'),
  requestId?: string(name='RequestId', example='2AE89FA5-E620-56C7-9B80-75D09757385A'),
}

model ListDNAFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDNAFilesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDNAFiles  ListDNAFilesRequest
  * @return ListDNAFilesResponse
 */
async function listDNAFiles(request: ListDNAFilesRequest): ListDNAFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDNAFiles', 'POST', '/', 'json', false, 'json', request);
}

model ListDynamicImageJobsRequest {
  endOfCreateTime?: string(name='EndOfCreateTime', example='2022-07-14T00:00:00Z', position='Query'),
  jobId?: string(name='JobId', example='****cdb3e74639973036bc84****', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='cdb3e74639973036bc84', position='Query'),
  orderBy?: string(name='OrderBy', example='CreateTimeDesc', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  startOfCreateTime?: string(name='StartOfCreateTime', example='2022-07-12T00:00:00Z', position='Query'),
  status?: string(name='Status', example='Success', position='Query'),
}

model ListDynamicImageJobsResponseBody = {
  jobs?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
      finishTime?: string(name='FinishTime', example='2022-07-12T16:30:54Z'),
      input?: {
        media?: string(name='Media', example='oss://bucket/object'),
        type?: string(name='Type', example='OSS'),
      }(name='Input'),
      jobId?: string(name='JobId', example='****cdb3e74639973036bc84****'),
      modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:30:54Z'),
      name?: string(name='Name', example='SampleJob'),
      output?: {
        media?: string(name='Media', example='****cdb3e74639973036bc84****'),
        type?: string(name='Type', example='Media'),
      }(name='Output'),
      pipelineId?: string(name='PipelineId', example='****cdb3e74639973036bc84****'),
      status?: string(name='Status', example='Success'),
      submitTime?: string(name='SubmitTime', example='2022-07-12T16:17:54Z'),
      templateId?: string(name='TemplateId', example='****cdb3e74639973036bc84****'),
      triggerSource?: string(name='TriggerSource', example='API'),
    }
  ](name='Jobs'),
  nextPageToken?: string(name='NextPageToken', example='****cdb3e74639973036bc84****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model ListDynamicImageJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDynamicImageJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDynamicImageJobs  ListDynamicImageJobsRequest
  * @return ListDynamicImageJobsResponse
 */
async function listDynamicImageJobs(request: ListDynamicImageJobsRequest): ListDynamicImageJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDynamicImageJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListEditingProjectsRequest {
  regionId?: string(name='RegionId', position='Host'),
  createSource?: string(name='CreateSource', description='The method for creating the online editing project. Valid values:

\\- OpenAPI

\\- AliyunConsole

\\- WebSDK', example='OpenAPI', position='Query'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2022-02-02T23:59:59Z', position='Query'),
  keyword?: string(name='Keyword', description='The search keyword. You can search by job ID.', example='******6f36bc45d09a9d5cde49******', position='Query'),
  maxResults?: string(name='MaxResults', description='The number of entries per page. A maximum of 100 entries can be returned on each page.

Default value: 10.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='8EqYpQbZ6Eh7+Zz8DxVYoQ==', position='Query'),
  projectType?: string(name='ProjectType', description='The type of the editing project. Valid values:

*   EditingProject: a regular editing project.
*   LiveEditingProject: a live stream editing project.', example='EditingProject', position='Query'),
  sortBy?: string(name='SortBy', description='The order of sorting of the results. Valid values:

*   CreationTime:Desc (default): sorts the results in reverse chronological order.
*   CreationTime:Asc: sorts the results in chronological order.', example='CreationTime:Desc', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2017-12-21T08:00:01Z', position='Query'),
  status?: string(name='Status', description='The status of the online editing project. By default, online editing projects in all states are queried.', example='Produced', position='Query'),
  templateType?: string(name='TemplateType', description='The template type. This parameter is required if you create a template-based online editing project. Default value: Timeline.

*
*

Valid values:

*   Timeline: a regular template.
*   VETemplate: an advanced template.
*   None: general editing.', example='None', position='Query'),
}

model ListEditingProjectsResponseBody = {
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned.', example='10'),
  nextToken: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.

This parameter is required.', example='Nzv3rcKla9wHUGua9YXHNA=='),
  projectList?: [ 
    {
      businessConfig?: string(name='BusinessConfig', description='The business configuration of the project. This parameter can be ignored for general editing projects.', example='{}'),
      businessStatus?: string(name='BusinessStatus', description='The business status of the project. This parameter can be ignored for general editing projects.', example='{}'),
      coverURL?: string(name='CoverURL', description='The thumbnail URL of the online editing project.', example='https://xxx.com/cover/xxx.jpg'),
      createSource?: string(name='CreateSource', description='The method for editing the online editing project. Valid values:

\\- OpenAPI

\\- AliyunConsole

\\- WebSDK', example='OpenAPI'),
      createTime?: string(name='CreateTime', description='The time when the online editing project was created.', example='2017-01-11T12:00:00Z'),
      description?: string(name='Description', description='The description of the online editing project.'),
      errorCode?: string(name='ErrorCode', description='The error code returned if the production of the online editing project failed.', example='InvalidParameter'),
      errorMessage?: string(name='ErrorMessage', description='The error message returned if the production of the online editing project failed.', example='The specified parameter \\"LiveStreamConfig\\" is not valid. specified parameter example is not valid.'),
      modifiedSource?: string(name='ModifiedSource', description='The method for modifying the online editing project last time.', example='OpenAPI'),
      modifiedTime?: string(name='ModifiedTime', description='The time when the online editing project was last modified.', example='2017-01-11T12:00:00Z'),
      projectId?: string(name='ProjectId', description='The ID of the online editing project.', example='****fddd7748b58bf1d47e95****'),
      projectType?: string(name='ProjectType', description='The type of the editing project. Valid values:

*   EditingProject: a regular editing project.
*   LiveEditingProject: a live stream editing project.', example='EditingProject'),
      status?: string(name='Status', description='The status of the online editing project. Valid values:

\\- Draft

\\- Editing

\\- Producing

\\- Produced

\\- ProduceFailed', example='Produced'),
      templateType?: string(name='TemplateType', description='The template type. Valid values:

*   Timeline: a regular template.
*   VETemplate: an advanced template.', example='Timeline'),
      title?: string(name='Title', description='The title of the online editing project.'),
    }
  ](name='ProjectList', description='The queried online editing projects.'),
  requestId?: string(name='RequestId', description='The request ID.', example='*****ACB-44F2-5F2D-88D7-1283E70*****'),
}

model ListEditingProjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEditingProjectsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEditingProjects  ListEditingProjectsRequest
  * @return ListEditingProjectsResponse
 */
async function listEditingProjects(request: ListEditingProjectsRequest): ListEditingProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEditingProjects', 'POST', '/', 'json', false, 'json', request);
}

model ListLiveRecordFilesRequest {
  endTime?: string(name='EndTime', example='2017-12-22T08:00:00Z', position='Query'),
  jobIds?: [ string ](name='JobIds', position='Query'),
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  recordFormat?: string(name='RecordFormat', example='m3u8', position='Query'),
  sortBy?: string(name='SortBy', example='asc', position='Query'),
  startTime?: string(name='StartTime', example='2017-12-21T08:00:01Z', position='Query'),
}

model ListLiveRecordFilesResponseBody = {
  files?: [ 
    {
      createTime?: string(name='CreateTime', example='2016-05-27T09:40:56Z'),
      duration?: float(name='Duration', example='100.0'),
      endTime?: string(name='EndTime', example='2015-12-01T07:36:10Z'),
      format?: string(name='Format', example='m3u8'),
      height?: int32(name='Height', example='640'),
      jobId?: string(name='JobId', example='c4d7f0a4-b506-43f9-8de3-07732c3f****'),
      jobName?: string(name='JobName', example='LiveRecordJob***'),
      recordId?: string(name='RecordId', example='c4d7f0a4-b506-43f9-8de3-07732c3f****'),
      recordOutput?: string(name='RecordOutput', example='{ "Type": "oss", "Endpoint":"oss-cn-shanghai.aliyuncs.com", "Bucket": "test-bucket" }'),
      recordUrl?: string(name='RecordUrl'),
      startTime?: string(name='StartTime', example='2015-12-01T07:36:00Z'),
      streamUrl?: string(name='StreamUrl', example='LiveStream***'),
      width?: int32(name='Width', example='480'),
    }
  ](name='Files'),
  pageNo?: long(name='PageNo', example='1'),
  pageSize?: string(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='DE24625C-7C0F-4020-8448-****'),
  sortBy?: string(name='SortBy', example='asc'),
  totalCount?: string(name='TotalCount', example='100'),
}

model ListLiveRecordFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLiveRecordFilesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLiveRecordFiles  ListLiveRecordFilesRequest
  * @return ListLiveRecordFilesResponse
 */
async function listLiveRecordFiles(request: ListLiveRecordFilesRequest): ListLiveRecordFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveRecordFiles', 'GET', '/', 'json', false, 'json', request);
}

model ListLiveRecordJobsRequest {
  endTime?: string(name='EndTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-07-11T08:00:00Z', position='Query'),
  keyword?: string(name='Keyword', example='ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66', position='Query'),
  pageNo?: long(name='PageNo', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
  sortBy?: string(name='SortBy', example='desc', position='Query'),
  startTime?: string(name='StartTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-07-15T08:00:00Z', position='Query'),
  status?: string(name='Status', example='started', position='Query'),
}

model ListLiveRecordJobsResponseBody = {
  liveRecordJobs?: [ 
    {
      createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段

Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-07-20T03:26:36Z'),
      jobId?: string(name='JobId', example='ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66'),
      name?: string(name='Name', description='代表资源名称的资源属性字段'),
      notifyUrl?: string(name='NotifyUrl', description='回调地址', example='https://example.com/imsnotify'),
      recordOutput?: {
        bucket?: string(name='Bucket', example='imsbucket1'),
        endpoint?: string(name='Endpoint', example='oss-cn-hangzhou.aliyuncs.com'),
        type?: string(name='Type', example='oss'),
      }(name='RecordOutput'),
      status?: string(name='Status', example='paused'),
      streamInput?: {
        type?: string(name='Type', example='rtmp'),
        url?: string(name='Url', example='rtmp://example-live.com/live/stream1'),
      }(name='StreamInput'),
      templateId?: string(name='TemplateId', description='录制模板ID', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66'),
      templateName?: string(name='TemplateName', example='test template'),
    }
  ](name='LiveRecordJobs'),
  pageNo?: long(name='PageNo', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='A27DFFA4-F272-5563-8363-CB0BC42740BA'),
  sortBy?: string(name='SortBy', example='desc'),
  totalCount?: long(name='TotalCount', example='180'),
}

model ListLiveRecordJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLiveRecordJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLiveRecordJobs  ListLiveRecordJobsRequest
  * @return ListLiveRecordJobsResponse
 */
async function listLiveRecordJobs(request: ListLiveRecordJobsRequest): ListLiveRecordJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveRecordJobs', 'GET', '/', 'json', false, 'json', request);
}

model ListLiveRecordTemplatesRequest {
  keyword?: string(name='Keyword', example='test template', position='Query'),
  pageNo?: long(name='PageNo', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  sortBy?: string(name='SortBy', example='desc', position='Query'),
  templateIds?: [ string ](name='TemplateIds', position='Query'),
  type?: string(name='Type', example='custom', position='Query'),
}

model ListLiveRecordTemplatesResponseBody = {
  pageNo?: long(name='PageNo', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  recordTemplateList?: [ 
    {
      createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段

Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-07-20T02:48:58Z'),
      lastModified?: string(name='LastModified', description='最后修改时间

Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-07-20T03:26:36Z'),
      name?: string(name='Name', description='代表资源名称的资源属性字段', example='test template'),
      recordFormatList?: [ 
        {
          cycleDuration?: int32(name='CycleDuration', example='21600'),
          format?: string(name='Format', description='格式', example='m3u8'),
          ossObjectPrefix?: string(name='OssObjectPrefix', description='Oss对象名，不包含后缀', example='record/{JobId}/{Sequence}_{EscapedStartTime}_{EscapedEndTime}'),
          sliceDuration?: int32(name='SliceDuration', description='切片时长', example='30'),
          sliceOssObjectPrefix?: string(name='SliceOssObjectPrefix', description='切片Oss对象名，不包含后缀', example='record/{JobId}/{UnixTimestamp}_{Sequence}'),
        }
      ](name='RecordFormatList', description='录制格式'),
      templateId?: string(name='TemplateId', description='代表资源一级ID的资源属性字段', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66'),
      type?: string(name='Type', description='代表资源名称的资源属性字段', example='custom'),
    }
  ](name='RecordTemplateList'),
  requestId?: string(name='RequestId', example='BEA98A0C-7870-15FE-B96F-8880BB600A2C'),
  sortBy?: string(name='SortBy', example='desc'),
  totalCount?: long(name='TotalCount', example='5'),
}

model ListLiveRecordTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLiveRecordTemplatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLiveRecordTemplates  ListLiveRecordTemplatesRequest
  * @return ListLiveRecordTemplatesResponse
 */
async function listLiveRecordTemplates(request: ListLiveRecordTemplatesRequest): ListLiveRecordTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveRecordTemplates', 'GET', '/', 'json', false, 'json', request);
}

model ListLiveSnapshotFilesRequest {
  endTime: string(name='EndTime', description='This parameter is required.', example='2022-02-02T23:59:59Z', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='****a046-263c-3560-978a-fb287782****', position='Query'),
  limit?: int32(name='Limit', example='10', position='Query'),
  sortBy?: string(name='SortBy', example='desc', position='Query'),
  startTime: string(name='StartTime', description='This parameter is required.', example='2022-02-02T00:00:00Z', position='Query'),
}

model ListLiveSnapshotFilesResponseBody = {
  fileList?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-02-02T22:22:22Z'),
      createTimestamp?: long(name='CreateTimestamp', example='1619503516000'),
      isOverlay?: boolean(name='IsOverlay', example='true'),
      ossBucket?: string(name='OssBucket', description='OSS bucket。', example='testbucket'),
      ossEndpoint?: string(name='OssEndpoint', example='oss-cn-shanghai.aliyuncs.com'),
      ossObject?: string(name='OssObject'),
    }
  ](name='FileList'),
  nextStartTime?: string(name='NextStartTime', example='2022-02-02T22:22:22Z'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model ListLiveSnapshotFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLiveSnapshotFilesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLiveSnapshotFiles  ListLiveSnapshotFilesRequest
  * @return ListLiveSnapshotFilesResponse
 */
async function listLiveSnapshotFiles(request: ListLiveSnapshotFilesRequest): ListLiveSnapshotFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveSnapshotFiles', 'GET', '/', 'json', false, 'json', request);
}

model ListLiveSnapshotJobsRequest {
  endTime?: string(name='EndTime', example='2022-02-02T23:59:59Z', position='Query'),
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  searchKeyWord?: string(name='SearchKeyWord', example='****a046-263c-3560-978a-fb287782****', position='Query'),
  sortBy?: string(name='SortBy', example='desc', position='Query'),
  startTime?: string(name='StartTime', example='2022-02-02T00:00:00Z', position='Query'),
  status?: string(name='Status', position='Query'),
}

model ListLiveSnapshotJobsResponseBody = {
  jobList?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-07-20T02:48:58Z'),
      jobId?: string(name='JobId', example='****a046-263c-3560-978a-fb287782****'),
      jobName?: string(name='JobName'),
      snapshotOutput?: {
        bucket?: string(name='Bucket', example='testbucket'),
        endpoint?: string(name='Endpoint', example='oss-cn-shanghai.aliyuncs.com'),
        storageType?: string(name='StorageType', example='oss'),
      }(name='SnapshotOutput'),
      status?: string(name='Status', example='started'),
      templateId?: string(name='TemplateId', example='****a046-263c-3560-978a-fb287666****'),
      templateName?: string(name='TemplateName'),
      timeInterval?: int32(name='TimeInterval', example='5'),
    }
  ](name='JobList'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  sortBy?: string(name='SortBy', example='desc'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListLiveSnapshotJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLiveSnapshotJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLiveSnapshotJobs  ListLiveSnapshotJobsRequest
  * @return ListLiveSnapshotJobsResponse
 */
async function listLiveSnapshotJobs(request: ListLiveSnapshotJobsRequest): ListLiveSnapshotJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveSnapshotJobs', 'GET', '/', 'json', false, 'json', request);
}

model ListLiveSnapshotTemplatesRequest {
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  searchKeyWord?: string(name='SearchKeyWord', example='****a046-263c-3560-978a-fb287782****', position='Query'),
  sortBy?: string(name='SortBy', example='desc', position='Query'),
  templateIds?: [ string ](name='TemplateIds', position='Query'),
  type?: string(name='Type', example='custom', position='Query'),
}

model ListLiveSnapshotTemplatesResponseBody = {
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  sortBy?: string(name='SortBy', example='desc'),
  templateList?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-07-20T02:48:58Z'),
      templateId?: string(name='TemplateId', example='****a046-263c-3560-978a-fb287782****'),
      templateName?: string(name='TemplateName'),
      timeInterval?: int32(name='TimeInterval', example='10'),
      type?: string(name='Type', example='custom'),
    }
  ](name='TemplateList'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListLiveSnapshotTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLiveSnapshotTemplatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLiveSnapshotTemplates  ListLiveSnapshotTemplatesRequest
  * @return ListLiveSnapshotTemplatesResponse
 */
async function listLiveSnapshotTemplates(request: ListLiveSnapshotTemplatesRequest): ListLiveSnapshotTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveSnapshotTemplates', 'GET', '/', 'json', false, 'json', request);
}

model ListLiveTranscodeJobsRequest {
  keyWord?: string(name='KeyWord', example='24ecbb5c-4f98-4194-9400-f17102e27fc5', position='Query'),
  pageNo?: int32(name='PageNo', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, position='Query'),
  sortBy?: string(name='SortBy', example='asc', position='Query'),
  startMode?: int32(name='StartMode', example='0', position='Query'),
  status?: int32(name='Status', example='1', position='Query'),
  type?: string(name='Type', example='normal', position='Query'),
}

model ListLiveTranscodeJobsResponseBody = {
  jobList?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-07-20T02:48:58Z'),
      jobId?: string(name='JobId', example='****a046-263c-3560-978a-fb287782****'),
      name?: string(name='Name', example='mytask'),
      outputStream?: {
        streamInfos?: [ 
          {
            outputUrl?: string(name='OutputUrl', example='rtmp://mydomain/app/mytranscode1'),
            type?: string(name='Type', example='rtmp'),
          }
        ](name='StreamInfos'),
      }(name='OutputStream'),
      startMode?: int32(name='StartMode', example='0'),
      status?: int32(name='Status', example='1'),
      streamInput?: {
        inputUrl?: string(name='InputUrl', example='rtmp://mydomain/app/stream1'),
        type?: string(name='Type', example='rtmp'),
      }(name='StreamInput'),
      templateId?: string(name='TemplateId', example='****a046-263c-3560-978a-fb287666****'),
      templateName?: string(name='TemplateName'),
      templateType?: string(name='TemplateType', example='normal'),
    }
  ](name='JobList'),
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListLiveTranscodeJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLiveTranscodeJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLiveTranscodeJobs  ListLiveTranscodeJobsRequest
  * @return ListLiveTranscodeJobsResponse
 */
async function listLiveTranscodeJobs(request: ListLiveTranscodeJobsRequest): ListLiveTranscodeJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveTranscodeJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListLiveTranscodeTemplatesRequest {
  category?: string(name='Category', example='customized', position='Query'),
  keyWord?: string(name='KeyWord', example='my_template', position='Query'),
  pageNo?: int32(name='PageNo', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, position='Query'),
  sortBy?: string(name='SortBy', example='asc', position='Query'),
  type?: string(name='Type', example='normal', position='Query'),
  videoCodec?: string(name='VideoCodec', example='H.264', position='Query'),
}

model ListLiveTranscodeTemplatesResponseBody = {
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
  templateContentList?: [ 
    {
      category?: string(name='Category', example='system'),
      createTime?: string(name='CreateTime', example='2022-07-20T03:26:36Z'),
      name?: string(name='Name', example='my_template'),
      templateConfig?: {
        audioParams?: {
          bitrate?: string(name='Bitrate', example='1000'),
          channels?: string(name='Channels', example='2'),
          codec?: string(name='Codec', example='AAC'),
          profile?: string(name='Profile', example='aac_low'),
          samplerate?: string(name='Samplerate', example='44100'),
        }(name='AudioParams'),
        videoParams?: {
          bitrate?: string(name='Bitrate', example='2500'),
          codec?: string(name='Codec', example='264'),
          fps?: string(name='Fps', example='30'),
          gop?: string(name='Gop', example='1000'),
          height?: string(name='Height', example='1280'),
          profile?: string(name='Profile', example='3'),
          width?: string(name='Width', example='720'),
        }(name='VideoParams'),
      }(name='TemplateConfig'),
      templateId?: string(name='TemplateId', example='9b1571b513cb44f7a1ba6ae561ff46f7'),
      type?: string(name='Type', example='normal'),
    }
  ](name='TemplateContentList'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListLiveTranscodeTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLiveTranscodeTemplatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLiveTranscodeTemplates  ListLiveTranscodeTemplatesRequest
  * @return ListLiveTranscodeTemplatesResponse
 */
async function listLiveTranscodeTemplates(request: ListLiveTranscodeTemplatesRequest): ListLiveTranscodeTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveTranscodeTemplates', 'POST', '/', 'json', false, 'json', request);
}

model ListMediaBasicInfosRequest {
  regionId?: string(name='RegionId', position='Host'),
  businessType?: string(name='BusinessType', description='The business type of the media asset. Valid values:

\\- subtitles

\\- watermark

\\- opening

\\- ending

\\- general', example='opening', position='Query'),
  endTime?: string(name='EndTime', description='The end time of utcCreated.

\\- The value is the end of the left-open right-closed interval.

\\- Specify the time in the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. For example, 2017-01-11T12:00:00Z indicates 20:00:00 on January 11, 2017 (UTC +8).', example='2020-12-20T13:00:00Z', position='Query'),
  includeFileBasicInfo?: boolean(name='IncludeFileBasicInfo', description='Specifies whether to return the basic information of the source file.', example='true', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return.

Maximum value: 100. Default value: 10.', example='5', minimum=1, maximum=100, position='Query'),
  mediaId?: string(name='MediaId', description='The ID of the media asset.', example='****019b82e24b37a1c2958dec38****', position='Query'),
  mediaType?: string(name='MediaType', description='The type of the media asset. Valid values:

\\- image

\\- video

\\- audio

\\- text', example='video', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.', example='pSa1SQ0wCe5pzVrQ6mWZEw==', position='Query'),
  sortBy?: string(name='SortBy', description='The order of sorting by utcCreated. Default value: desc. Valid values:

\\- desc

\\- asc', example='desc', position='Query'),
  source?: string(name='Source', description='The source of the media asset. Valid values:

\\- oss: Object Storage Service (OSS).

\\- vod: ApsaraVideo VOD.

\\- live: ApsaraVideo Live.

\\- general: other sources. This is the default value.', example='oss', position='Query'),
  startTime?: string(name='StartTime', description='The start time of utcCreated.

\\- The value is the beginning of a left-open right-closed interval.

\\- Specify the time in the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. For example, 2017-01-11T12:00:00Z indicates 20:00:00 on January 11, 2017 (UTC +8).', example='2020-12-20T12:00:00Z', position='Query'),
  status?: string(name='Status', description='The status of the media asset. Valid values:

\\- Init: the initial state, which indicates that the source file is not ready.

\\- Preparing: The source file is being prepared. For example, the file is being uploaded or edited.

\\- PrepareFail: The source file failed to be prepared. For example, the information of the source file failed to be obtained.

\\- Normal: The source file is ready.', example='Normal', position='Query'),
}

model ListMediaBasicInfosResponseBody = {
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned in the query.', example='2'),
  mediaInfos?: [ 
    {
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', description='The bitrate.', example='1912.13'),
            createTime?: string(name='CreateTime', description='The time when the file was created.', example='2021-01-08T16:52:04Z'),
            duration?: string(name='Duration', description='The duration.', example='60.00000'),
            fileName?: string(name='FileName', description='The file name.', example='example.mp4'),
            fileSize?: string(name='FileSize', description='The file size. Unit: bytes.', example='14340962'),
            fileStatus?: string(name='FileStatus', description='The file status.', example='Normal'),
            fileType?: string(name='FileType', description='The file type.', example='source_file'),
            fileUrl?: string(name='FileUrl', description='The OSS URL of the file.', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example2.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
            formatName?: string(name='FormatName', description='The container format.', example='mov,mp4,m4a,3gp,3g2,mj2'),
            height?: string(name='Height', description='The height.', example='720'),
            modifiedTime?: string(name='ModifiedTime', description='The time when the file was last modified.', example='2021-01-08T16:52:07Z'),
            region?: string(name='Region', description='The region in which the file resides.', example='cn-shanghai'),
            width?: string(name='Width', description='The width.', example='1280'),
          }(name='FileBasicInfo', description='The basic information of the file, including the duration and size.'),
        }
      ](name='FileInfoList', description='FileInfos'),
      mediaBasicInfo?: {
        biz?: string(name='Biz', description='The service to which the media asset belongs.', example='ICE'),
        businessType?: string(name='BusinessType', description='The business type of the media asset.', example='opening'),
        cateId?: long(name='CateId', description='The category ID.', example='3049'),
        category?: string(name='Category', description='The category of the media asset.'),
        coverURL?: string(name='CoverURL', description='The thumbnail URL of the media asset.', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
        createTime?: string(name='CreateTime', description='The time when the media asset was created.', example='2021-01-08T16:52:04Z'),
        deletedTime?: string(name='DeletedTime', description='The time when the media asset was deleted.', example='2021-01-08T16:52:07Z'),
        description?: string(name='Description', description='The description of the media asset.'),
        inputURL?: string(name='InputURL', description='The URL of the media asset in another service.', example='https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4'),
        mediaId?: string(name='MediaId', description='The ID of the media asset.', example='****019b82e24b37a1c2958dec38****'),
        mediaTags?: string(name='MediaTags', description='The tags of the media asset.', example='tags,tags2'),
        mediaType?: string(name='MediaType', description='The type of the media asset.', example='video'),
        modifiedTime?: string(name='ModifiedTime', description='The time when the media asset was last modified.', example='2021-01-08T16:52:07Z'),
        referenceId?: string(name='ReferenceId', description='The custom ID of the media asset. The ID is a string that contains 6 to 64 characters. Only letters, digits, hyphens (-), and underscores (_) are supported. The ID is unique among users.', example='123-123'),
        snapshots?: string(name='Snapshots', description='The snapshots of the media asset.', example='[{"bucket":"example-bucket","count":"3","iceJobId":"******f48f0e4154976b2b8c45******","location":"oss-cn-beijing","snapshotRegular":"example.jpg","templateId":"******e6a6440b29eb60bd7c******"}]'),
        source?: string(name='Source', description='The source of the media asset.', example='oss'),
        spriteImages?: string(name='SpriteImages', description='The sprite.', example='[{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]'),
        status?: string(name='Status', description='The status of the media asset.', example='Normal'),
        title?: string(name='Title', description='The title of the media asset.'),
        transcodeStatus?: string(name='TranscodeStatus', description='The transcoding status of the media asset.', example='Init'),
        uploadSource?: string(name='UploadSource', description='The upload source of the media asset.', example='general'),
        userData?: string(name='UserData', description='The user data.', example='userData'),
      }(name='MediaBasicInfo', description='BasicInfo'),
      mediaId?: string(name='MediaId', description='The ID of the media asset.', example='****019b82e24b37a1c2958dec38****'),
    }
  ](name='MediaInfos', description='The media assets that meet the specified conditions.'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.', example='8EqYpQbZ6Eh7+Zz8DxVYoQ=='),
  requestId?: string(name='RequestId', description='The request ID.', example='******B7-7F87-4792-BFE9-63CD21******'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='4'),
}

model ListMediaBasicInfosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMediaBasicInfosResponseBody(name='body'),
}

/**
  * @description If includeFileBasicInfo is set to true, the basic information, such as the duration and file size, of the source file is also returned. At most the first 100 entries that meet the specified conditions are returned. All media assets must exactly match all non-empty fields. The fields that support exact match include MediaType, Source, BusinessType, Category, and Status. If all information cannot be returned at a time, you can use NextToken to initiate a request to retrieve a new page of results.
  * @param request  the request parameters of ListMediaBasicInfos  ListMediaBasicInfosRequest
  * @return ListMediaBasicInfosResponse
 */
async function listMediaBasicInfos(request: ListMediaBasicInfosRequest): ListMediaBasicInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMediaBasicInfos', 'POST', '/', 'json', false, 'json', request);
}

model ListMediaInfoJobsRequest {
  endOfCreateTime?: string(name='EndOfCreateTime', example='2022-07-15T00:00:00Z', position='Query'),
  jobId?: string(name='JobId', example='7b38a5d86f1e47838927b6e7ccb11cbe', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='ab4802364a2e49208c99efab82dfa8e8', position='Query'),
  orderBy?: string(name='OrderBy', example='CreateTimeDesc', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  startOfCreateTime?: string(name='StartOfCreateTime', example='2022-07-01T00:00:00Z', position='Query'),
  status?: string(name='Status', example='Success', position='Query'),
}

model ListMediaInfoJobsResponseBody = {
  jobs?: [ 
    {
      async?: boolean(name='Async', example='true'),
      finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
      input?: {
        media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
        type?: string(name='Type', example='OSS'),
      }(name='Input'),
      jobId?: string(name='JobId', example='ab4802364a2e49208c99efab82dfa8e8'),
      mediaInfoProperty?: {
        audioStreamInfoList?: [ 
          {
            bitrate?: string(name='Bitrate', example='0.f'),
            channelLayout?: string(name='ChannelLayout', example='stereo'),
            channels?: string(name='Channels', example='2'),
            codecLongName?: string(name='CodecLongName', example='AAC (Advanced Audio Coding)'),
            codecName?: string(name='CodecName', example='aac'),
            codecTag?: string(name='CodecTag', example='0x000f'),
            codecTagString?: string(name='CodecTagString', example='[15][0][0][0]'),
            codecTimeBase?: string(name='CodecTimeBase', example='1/44100'),
            duration?: string(name='Duration', example='403.039989'),
            index?: string(name='Index', example='1'),
            lang?: string(name='Lang', example='cn'),
            sampleFmt?: string(name='SampleFmt', example='fltp'),
            sampleRate?: string(name='SampleRate', example='44100'),
            startTime?: string(name='StartTime', example='1.473556'),
            timebase?: string(name='Timebase', example='1/90000'),
          }
        ](name='AudioStreamInfoList'),
        fileBasicInfo?: {
          bitrate?: string(name='Bitrate', example='888.563'),
          duration?: string(name='Duration', example='403.039999'),
          fileName?: string(name='FileName', example='file.m3u8'),
          fileSize?: string(name='FileSize', example='31737'),
          fileStatus?: string(name='FileStatus', example='Normal'),
          fileType?: string(name='FileType', example='source_file'),
          fileUrl?: string(name='FileUrl', example='http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8'),
          formatName?: string(name='FormatName', example='hls,applehttp'),
          height?: string(name='Height', example='478'),
          mediaId?: string(name='MediaId', example='4765337007f571edbfdf81848c016303'),
          region?: string(name='Region', example='cn-shanghai'),
          width?: string(name='Width', example='848'),
        }(name='FileBasicInfo'),
        videoStreamInfoList?: [ 
          {
            avgFps?: string(name='Avg_fps', example='25.0'),
            bitRate?: string(name='Bit_rate', example='888.563'),
            codecLongName?: string(name='Codec_long_name', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
            codecName?: string(name='Codec_name', example='h264'),
            codecTag?: string(name='Codec_tag', example='0x001b'),
            codecTagString?: string(name='Codec_tag_string', example='[27][0][0][0]'),
            codecTimeBase?: string(name='Codec_time_base', example='1/50'),
            dar?: string(name='Dar', example='16:9'),
            duration?: string(name='Duration', example='403.039989'),
            fps?: string(name='Fps', example='25.0'),
            hasBFrames?: string(name='Has_b_frames', example='2'),
            height?: string(name='Height', example='478'),
            index?: string(name='Index', example='0'),
            lang?: string(name='Lang', example='cn'),
            level?: string(name='Level', example='31'),
            numFrames?: string(name='NumFrames', example='10040'),
            pixFmt?: string(name='PixFmt', example='yuv420p'),
            profile?: string(name='Profile', example='High'),
            rotate?: string(name='Rotate', example='0'),
            sar?: string(name='Sar', example='478:477'),
            startTime?: string(name='Start_time', example='1.473556'),
            timeBase?: string(name='Time_base', example='1/90000'),
            width?: string(name='Width', example='848'),
          }
        ](name='VideoStreamInfoList'),
      }(name='MediaInfoProperty'),
      name?: string(name='Name', example='job-name'),
      requestId?: string(name='RequestId', example='4879B9DE-E4B6-19DC-91F5-9D5F4DCE4168'),
      scheduleConfig?: {
        pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
        priority?: int32(name='Priority', example='5'),
      }(name='ScheduleConfig'),
      status?: string(name='Status', example='Init'),
      submitResultJson?: map[string]any(name='SubmitResultJson'),
      submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
      triggerSource?: string(name='TriggerSource', example='API'),
      userData?: string(name='UserData', example='user-data'),
    }
  ](name='Jobs'),
  nextPageToken?: string(name='NextPageToken', example='019daf5780f74831b0e1a767c9f1c178'),
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model ListMediaInfoJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMediaInfoJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMediaInfoJobs  ListMediaInfoJobsRequest
  * @return ListMediaInfoJobsResponse
 */
async function listMediaInfoJobs(request: ListMediaInfoJobsRequest): ListMediaInfoJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMediaInfoJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListMediaMarksRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaId?: string(name='MediaId', description='The ID of the media asset.', example='411bed50018971edb60b0764a0ec6***', position='Query'),
  mediaMarkIds?: string(name='MediaMarkIds', description='The mark ID. You can specify multiple IDs separated with commas (,). This parameter is discontinued.', example='mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60', position='Query'),
}

model ListMediaMarksResponseBody = {
  mediaId?: string(name='MediaId', description='The ID of the media asset.', example='******b48fb04483915d4f2cd8******'),
  mediaMarks?: string(name='MediaMarks', description='The marks of the media asset, in the JSONArray format.'),
  requestId?: string(name='RequestId', description='The request ID.', example='******11-DB8D-4A9A-875B-275798******'),
}

model ListMediaMarksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMediaMarksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMediaMarks  ListMediaMarksRequest
  * @return ListMediaMarksResponse
 */
async function listMediaMarks(request: ListMediaMarksRequest): ListMediaMarksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMediaMarks', 'POST', '/', 'json', false, 'json', request);
}

model ListMediaProducingJobsRequest {
  regionId?: string(name='RegionId', position='Host'),
  endTime?: string(name='EndTime', example='2022-02-02T23:59:59Z', position='Query'),
  jobType?: string(name='JobType', example='EditingJob', position='Query'),
  keyword?: string(name='Keyword', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  masterJobId?: string(name='MasterJobId', example='******8750b54e3c976a47da6f******', position='Query'),
  maxResults?: int32(name='MaxResults', example='100', position='Query'),
  nextToken?: string(name='NextToken', example='8EqYpQbZ6Eh7+Zz8DxVYoQ==', position='Query'),
  projectId?: string(name='ProjectId', position='Query'),
  sortBy?: string(name='SortBy', example='CreationTime:Desc', position='Query'),
  startTime?: string(name='StartTime', example='2017-01-11T12:00:00Z', position='Query'),
  status?: string(name='Status', example='Success', position='Query'),
}

model ListMediaProducingJobsResponseBody = {
  maxResults?: string(name='MaxResults', example='100'),
  mediaProducingJobList?: [ 
    {
      clipsParam?: string(name='ClipsParam'),
      code?: string(name='Code', example='Success'),
      completeTime?: string(name='CompleteTime', example='2022-03-21T16:40:30Z'),
      createTime?: string(name='CreateTime', example='2022-03-21T16:40:00Z'),
      duration?: float(name='Duration', example='15.5'),
      jobId?: string(name='JobId', example='******8750b54e3c976a47da6f******'),
      mediaId?: string(name='MediaId', example='0ce4ea70f52471edab61f7e7d6786302'),
      mediaURL?: string(name='MediaURL', example='http://your-bucket.oss-cn-shanghai.aliyuncs.com/your-video.mp4'),
      message?: string(name='Message'),
      modifiedTime?: string(name='ModifiedTime', example='2022-03-21T16:41:00Z'),
      projectId?: string(name='ProjectId', example='******faa3b542f5a6135217e3******'),
      status?: string(name='Status', example='Sucess'),
      templateId?: string(name='TemplateId', example='cb786a39c5d44cecb23d8c864facffc1'),
      userData?: string(name='UserData'),
    }
  ](name='MediaProducingJobList'),
  nextToken?: string(name='NextToken', example='8EqYpQbZ6Eh7+Zz8DxVYoQ=='),
  requestId?: string(name='RequestId', description='Id of the request', example='******11-DB8D-4A9A-875B-275798******'),
}

model ListMediaProducingJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMediaProducingJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMediaProducingJobs  ListMediaProducingJobsRequest
  * @return ListMediaProducingJobsResponse
 */
async function listMediaProducingJobs(request: ListMediaProducingJobsRequest): ListMediaProducingJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMediaProducingJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListPackageJobsRequest {
  endOfCreateTime?: string(name='EndOfCreateTime', example='2022-07-15T00:00:00Z', position='Query'),
  jobId?: string(name='JobId', example='7b38a5d86f1e47838927b6e7ccb11cbe', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='ab4802364a2e49208c99efab82dfa8e8', position='Query'),
  orderBy?: string(name='OrderBy', example='CreateTimeDesc', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  startOfCreateTime?: string(name='StartOfCreateTime', example='2022-07-01T00:00:00Z', position='Query'),
  status?: string(name='Status', example='Success', position='Query'),
}

model ListPackageJobsResponseBody = {
  packageJobList?: {
    nextPageToken?: string(name='NextPageToken', example='019daf5780f74831b0e1a767c9f1c178'),
    packageJobs?: [ 
      {
        code?: string(name='Code', example='InvalidParameter'),
        createTime?: string(name='CreateTime', example='2022-07-07T14:00:32Z'),
        finishTime?: string(name='FinishTime', example='2022-07-07T15:00:32Z'),
        inputs?: [ 
          {
            input?: {
              media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
              type?: string(name='Type', example='OSS'),
            }(name='Input'),
          }
        ](name='Inputs'),
        jobId?: string(name='JobId', example='7b38a5d86f1e47838927b6e7ccb11cbe'),
        message?: string(name='Message', example='Resource content bad.'),
        modifiedTime?: string(name='ModifiedTime', example='2022-07-07T15:00:32Z'),
        name?: string(name='Name', example='job-name'),
        output?: {
          media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
          type?: string(name='Type', example='OSS'),
        }(name='Output'),
        pipelineId?: string(name='PipelineId', example='5b40833e4c3e4d4e95a866abb9a42510'),
        priority?: int32(name='Priority', example='6'),
        status?: string(name='Status', example='Success'),
        submitTime?: string(name='SubmitTime', example='2022-07-07T14:00:32Z'),
        triggerSource?: string(name='TriggerSource', example='API'),
        userData?: string(name='UserData', example='{"param": "value"}'),
      }
    ](name='PackageJobs'),
  }(name='PackageJobList'),
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model ListPackageJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPackageJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPackageJobs  ListPackageJobsRequest
  * @return ListPackageJobsResponse
 */
async function listPackageJobs(request: ListPackageJobsRequest): ListPackageJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPackageJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListPipelinesRequest {
  speed?: string(name='Speed', example='Standard', position='Query'),
}

model ListPipelinesResponseBody = {
  pipelineList?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
      modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:17:54Z'),
      name?: string(name='Name', example='test-pipeline'),
      pipelineId?: string(name='PipelineId', example='****20b48fb04483915d4f2cd8ac****'),
      priority?: int32(name='Priority', example='6'),
      speed?: string(name='Speed', example='Standard'),
      status?: string(name='Status', example='Active'),
    }
  ](name='PipelineList'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model ListPipelinesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPipelinesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPipelines  ListPipelinesRequest
  * @return ListPipelinesResponse
 */
async function listPipelines(request: ListPipelinesRequest): ListPipelinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPipelines', 'POST', '/', 'json', false, 'json', request);
}

model ListPublicMediaBasicInfosRequest {
  regionId?: string(name='RegionId', position='Host'),
  businessType?: string(name='BusinessType', description='The business type of the media asset. Valid values:

*   sticker
*   bgm
*   bgi', example='sticker', position='Query'),
  includeFileBasicInfo?: boolean(name='IncludeFileBasicInfo', description='Specifies whether to return the basic information of the media asset.', example='true', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return.

Maximum value: 100. Default value: 10.', example='5', minimum=1, maximum=100, position='Query'),
  mediaTagId?: string(name='MediaTagId', description='The media tag. All media assets that contain the specified media tag are returned. Valid values:

*   Sticker tags:

    *   sticker-atmosphere
    *   sticker-bubble
    *   sticker-cute
    *   sticker-daily
    *   sticker-expression
    *   sticker-gif

*   Background music (BGM) tags:

    *   bgm-romantic
    *   bgm-cuisine
    *   bgm-chinese-style
    *   bgm-upbeat
    *   bgm-dynamic
    *   bgm-relaxing
    *   bgm-quirky
    *   bgm-beauty

*   Background image (BGI) tags:

    *   bgi-grad
    *   bgi-solid
    *   bgi-pic', example='ticker-atmosphere', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.', example='pSa1SQ0wCe5pzVrQ6mWZEw==', position='Query'),
  pageNo?: int32(name='PageNo', description='The page number. Default value: 1', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10', minimum=1, maximum=100, position='Query'),
}

model ListPublicMediaBasicInfosResponseBody = {
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned.', example='2'),
  mediaInfos?: [ 
    {
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', description='The bitrate.', example='270112.12'),
            duration?: string(name='Duration', description='The duration.', example='10.040000'),
            fileName?: string(name='FileName', description='The file name.', example='example.mp4'),
            fileSize?: string(name='FileSize', description='The file size. Unit: bytes.', example='338990717'),
            fileStatus?: string(name='FileStatus', description='The file status.', example='Normal'),
            fileType?: string(name='FileType', description='The file type.', example='source_file'),
            fileUrl?: string(name='FileUrl', description='The Object Storage Service (OSS) URL of the file.', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
            formatName?: string(name='FormatName', description='The container format.', example='mov,mp4,m4a,3gp,3g2,mj2'),
            height?: string(name='Height', description='The height.', example='1080'),
            region?: string(name='Region', description='The region in which the file resides.', example='cn-shanghai'),
            width?: string(name='Width', description='The width.', example='1920'),
          }(name='FileBasicInfo', description='The basic information of the file, such as the duration and size.'),
        }
      ](name='FileInfoList', description='The file information of the media asset.'),
      mediaBasicInfo?: {
        businessType?: string(name='BusinessType', description='The business type of the media asset.', example='general'),
        category?: string(name='Category', description='The category of the media asset.', example='video'),
        coverURL?: string(name='CoverURL', description='The thumbnail URL of the media asset.', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
        createTime?: string(name='CreateTime', description='The time when the media asset was created.', example='2021-01-08T16:52:04Z'),
        deletedTime?: string(name='DeletedTime', description='The time when the media asset was deleted.', example='2021-01-08T16:52:04Z'),
        description?: string(name='Description', description='The description of the media asset.', example='description'),
        inputURL?: string(name='InputURL', description='The URL of the media asset in another service.', example='https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4'),
        mediaId?: string(name='MediaId', description='The ID of the media asset.', example='****019b82e24b37a1c2958dec38****'),
        mediaTags?: string(name='MediaTags', description='The tags of the media asset.', example='sticker-daily'),
        mediaType?: string(name='MediaType', description='The type of the media asset.', example='video'),
        modifiedTime?: string(name='ModifiedTime', description='The time when the media asset was last modified.', example='2021-01-08T16:52:04Z'),
        snapshots?: string(name='Snapshots', description='The snapshots of the media asset.', example='null'),
        source?: string(name='Source', description='The source of the media asset.', example='oss'),
        status?: string(name='Status', description='The status of the media asset.', example='Normal'),
        title?: string(name='Title', description='The title of the media asset.'),
        transcodeStatus?: string(name='TranscodeStatus', description='The transcoding status of the media asset.', example='Init'),
        userData?: string(name='UserData', description='The user data.', example='userData'),
      }(name='MediaBasicInfo', description='The basic information of the media asset.'),
      mediaId?: string(name='MediaId', description='The ID of the media asset.', example='****019b82e24b37a1c2958dec38****'),
    }
  ](name='MediaInfos', description='The media assets that meet the specified conditions.'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.', example='8EqYpQbZ6Eh7+Zz8DxVYoQ=='),
  requestId?: string(name='RequestId', description='The request ID.', example='******B7-7F87-4792-BFE9-63CD21******'),
  totalCount?: long(name='TotalCount', description='The total number of media assets that meet the specified conditions.', example='2'),
}

model ListPublicMediaBasicInfosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPublicMediaBasicInfosResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPublicMediaBasicInfos  ListPublicMediaBasicInfosRequest
  * @return ListPublicMediaBasicInfosResponse
 */
async function listPublicMediaBasicInfos(request: ListPublicMediaBasicInfosRequest): ListPublicMediaBasicInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPublicMediaBasicInfos', 'POST', '/', 'json', false, 'json', request);
}

model ListSearchLibRequest {
  regionId?: string(name='RegionId', position='Host'),
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model ListSearchLibResponseBody = {
  code?: string(name='Code', example='200'),
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
  searchLibInfoList?: [ 
    {
      searchLibName?: string(name='SearchLibName', example='faceSearchLib'),
      status?: string(name='Status', example='normal'),
    }
  ](name='SearchLibInfoList'),
  success?: string(name='Success', example='true'),
}

model ListSearchLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSearchLibResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSearchLib  ListSearchLibRequest
  * @return ListSearchLibResponse
 */
async function listSearchLib(request: ListSearchLibRequest): ListSearchLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSearchLib', 'POST', '/', 'json', false, 'json', request);
}

model ListSmartJobsRequest {
  jobState?: string(name='JobState', example='Finished', position='Query'),
  jobType?: string(name='JobType', example='ASR', position='Query'),
  maxResults?: long(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='****73f33c91-d59383e8280b****', position='Query'),
  pageNo?: long(name='PageNo', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  sortBy?: string(name='SortBy', example='CreationTime:Desc', position='Query'),
}

model ListSmartJobsResponseBody = {
  maxResults?: string(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='CBB6BC61D08'),
  requestId?: string(name='RequestId', example='****9262E3DA-07FA-4862-FCBB6BC61D08*****'),
  smartJobList?: [ 
    {
      createTime?: string(name='CreateTime', example='2020-12-26T04:11:10Z'),
      description?: string(name='Description', example='测试描述'),
      editingConfig?: string(name='EditingConfig', example='{"AudioConfig":{},"InputConfig":""}'),
      inputConfig?: {
        inputFile?: string(name='InputFile', example='oss://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4'),
        keyword?: string(name='Keyword', example='测试关键词'),
      }(name='InputConfig'),
      jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
      jobState?: string(name='JobState', example='Finished'),
      jobType?: string(name='JobType', example='ASR'),
      modifiedTime?: string(name='ModifiedTime', example='2020-12-26T04:11:10Z'),
      outputConfig?: {
        bucket?: string(name='Bucket', description='OSS Bucket', example='test-bucket'),
        object?: string(name='Object', description='OSS Object', example='test-object'),
      }(name='OutputConfig'),
      title?: string(name='Title', example='测试标题'),
      userData?: string(name='UserData', example='{"user":"data"}'),
      userId?: long(name='UserId', example='1084506228******'),
    }
  ](name='SmartJobList'),
  totalCount?: string(name='TotalCount', example='110'),
}

model ListSmartJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSmartJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSmartJobs  ListSmartJobsRequest
  * @return ListSmartJobsResponse
 */
async function listSmartJobs(request: ListSmartJobsRequest): ListSmartJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSmartJobs', 'GET', '/', 'json', false, 'json', request);
}

model ListSmartSysAvatarModelsRequest {
  pageNo?: long(name='PageNo', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  sdkVersion?: string(name='SdkVersion', position='Query'),
}

model ListSmartSysAvatarModelsResponseBody = {
  requestId?: string(name='RequestId', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
  smartSysAvatarModelList?: [ 
    {
      avatarId?: string(name='AvatarId', example='yunqiao'),
      avatarName?: string(name='AvatarName'),
      bitrate?: int32(name='Bitrate'),
      coverUrl?: string(name='CoverUrl', example='http://ice-pub-media.myalicdn.com/smart/avatarModel/coverDemo/yunqiao.mp4'),
      height?: int32(name='Height'),
      outputMask?: boolean(name='OutputMask'),
      videoUrl?: string(name='VideoUrl', example='http://ice-pub-media.myalicdn.com/smart/avatarModel/videoDemo/yunqiao.mp4'),
      width?: int32(name='Width'),
    }
  ](name='SmartSysAvatarModelList'),
  totalCount?: int32(name='TotalCount', example='4'),
}

model ListSmartSysAvatarModelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSmartSysAvatarModelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSmartSysAvatarModels  ListSmartSysAvatarModelsRequest
  * @return ListSmartSysAvatarModelsResponse
 */
async function listSmartSysAvatarModels(request: ListSmartSysAvatarModelsRequest): ListSmartSysAvatarModelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSmartSysAvatarModels', 'POST', '/', 'json', false, 'json', request);
}

model ListSmartVoiceGroupsRequest {
}

model ListSmartVoiceGroupsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  voiceGroups?: [ 
    {
      type?: string(name='Type'),
      voiceList?: [ 
        {
          desc?: string(name='Desc'),
          name?: string(name='Name'),
          remark?: string(name='Remark'),
          supportSampleRate?: string(name='SupportSampleRate'),
          tag?: string(name='Tag'),
          voice?: string(name='Voice', example='zhitian'),
          voiceType?: string(name='VoiceType', example='Female'),
          voiceUrl?: string(name='VoiceUrl', example='https://***.com/zhiqing.mp3'),
        }
      ](name='VoiceList'),
    }
  ](name='VoiceGroups'),
}

model ListSmartVoiceGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSmartVoiceGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSmartVoiceGroups  ListSmartVoiceGroupsRequest
  * @return ListSmartVoiceGroupsResponse
 */
async function listSmartVoiceGroups(request: ListSmartVoiceGroupsRequest): ListSmartVoiceGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSmartVoiceGroups', 'GET', '/', 'json', false, 'json', request);
}

model ListSnapshotJobsRequest {
  endOfCreateTime?: string(name='EndOfCreateTime', example='2022-07-14T00:00:00Z', position='Query'),
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  orderBy?: string(name='OrderBy', example='CreateTimeDesc', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  startOfCreateTime?: string(name='StartOfCreateTime', example='2022-07-12T00:00:00Z', position='Query'),
  status?: string(name='Status', example='Success', position='Query'),
}

model ListSnapshotJobsResponseBody = {
  jobs?: [ 
    {
      async?: boolean(name='Async', example='true'),
      count?: int32(name='Count', example='10'),
      createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
      finishTime?: string(name='FinishTime', example='2022-07-12T16:30:54Z'),
      input?: {
        media?: string(name='Media', example='oss://bucket/object.mp4'),
        type?: string(name='Type', example='OSS'),
      }(name='Input'),
      jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
      modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:30:54Z'),
      name?: string(name='Name', example='SampleJob'),
      output?: {
        media?: string(name='Media', example='http://test-bucket.oss-cn-shanghai.aliyuncs.com/output-{Count}.jpg'),
        type?: string(name='Type', example='OSS'),
      }(name='Output'),
      pipelineId?: string(name='PipelineId', example='****20b48fb04483915d4f2cd8ac****'),
      status?: string(name='Status', example='Success'),
      submitTime?: string(name='SubmitTime', example='2022-07-12T16:17:54Z'),
      templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
      triggerSource?: string(name='TriggerSource', example='API'),
      type?: string(name='Type', example='Sprite'),
    }
  ](name='Jobs'),
  nextPageToken?: string(name='NextPageToken', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model ListSnapshotJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSnapshotJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSnapshotJobs  ListSnapshotJobsRequest
  * @return ListSnapshotJobsResponse
 */
async function listSnapshotJobs(request: ListSnapshotJobsRequest): ListSnapshotJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSnapshotJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListSystemTemplatesRequest {
  name?: string(name='Name', example='SampleTemplate', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  status?: string(name='Status', example='Normal', position='Query'),
  subtype?: string(name='Subtype', example='1', position='Query'),
  templateId?: string(name='TemplateId', example='****96e8864746a0b6f3****', position='Query'),
  type: string(name='Type', description='This parameter is required.', example='1,2', position='Query'),
}

model ListSystemTemplatesResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  systemTemplateList?: [ 
    {
      status?: string(name='Status', example='Normal'),
      subtype?: int32(name='Subtype', example='1'),
      subtypeName?: string(name='SubtypeName', example='Remux'),
      templateConfig?: string(name='TemplateConfig', example='{"Container":{"Format":"flv"},"Video":{},"Audio":{}}'),
      templateId?: string(name='TemplateId', example='S00000001-000000'),
      templateName?: string(name='TemplateName', example='FLV-COPY'),
      type?: int32(name='Type', example='1'),
      typeName?: string(name='TypeName', example='TranscodeTemplate'),
    }
  ](name='SystemTemplateList'),
  total?: int32(name='Total', example='20'),
}

model ListSystemTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSystemTemplatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSystemTemplates  ListSystemTemplatesRequest
  * @return ListSystemTemplatesResponse
 */
async function listSystemTemplates(request: ListSystemTemplatesRequest): ListSystemTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSystemTemplates', 'POST', '/', 'json', false, 'json', request);
}

model ListTemplatesRequest {
  createSource?: string(name='CreateSource', example='OpenAPI', position='Query'),
  keyword?: string(name='Keyword', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  pageNo?: long(name='PageNo', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
  sortType?: string(name='SortType', example='CreationTime:Desc', position='Query'),
  status?: string(name='Status', example='Available', position='Query'),
  type?: string(name='Type', example='Timeline', position='Query'),
}

model ListTemplatesResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  templates?: [ 
    {
      clipsParam?: string(name='ClipsParam', description='ClipsParam', example='{"Media1":"mediaId","Text1":"text"}'),
      config?: string(name='Config', example='参考Timeline模板配置详解'),
      coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg'),
      createSource?: string(name='CreateSource', example='OpenAPI'),
      creationTime?: string(name='CreationTime', example='2020-12-26T04:11:10Z'),
      modifiedSource?: string(name='ModifiedSource', example='OpenAPI'),
      modifiedTime?: string(name='ModifiedTime', example='2020-12-26T04:11:10Z'),
      name?: string(name='Name', example='视频添加水印模板'),
      previewMedia?: string(name='PreviewMedia', example='****20b48fb04483915d4f2cd8ac****'),
      previewMediaStatus?: string(name='PreviewMediaStatus', example='Normal'),
      status?: string(name='Status', example='Available'),
      templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
      type?: string(name='Type', example='Timeline'),
    }
  ](name='Templates'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTemplatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTemplates  ListTemplatesRequest
  * @return ListTemplatesResponse
 */
async function listTemplates(request: ListTemplatesRequest): ListTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTemplates', 'POST', '/', 'json', false, 'json', request);
}

model ListTranscodeJobsRequest {
  endOfCreateTime?: string(name='EndOfCreateTime', example='2022-07-15T00:00:00Z', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='ab4802364a2e49208c99efab82dfa8e8', position='Query'),
  orderBy?: string(name='OrderBy', example='CreateTimeDesc', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  parentJobId?: string(name='ParentJobId', example='7b38a5d86f1e47838927b6e7ccb11cbe', position='Query'),
  startOfCreateTime?: string(name='StartOfCreateTime', example='2022-07-01T00:00:00Z', position='Query'),
  status?: string(name='Status', example='Success', position='Query'),
}

model ListTranscodeJobsResponseBody = {
  jobs?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-01-12T08:49:41Z'),
      finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
      inputGroup?: [ 
        {
          inputUrl?: string(name='InputUrl'),
          media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
          type?: string(name='Type', example='OSS'),
        }
      ](name='InputGroup'),
      jobCount?: int32(name='JobCount', example='1'),
      name?: string(name='Name', example='transcode-job'),
      outputGroup?: [ 
        {
          output?: {
            media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
            outputUrl?: string(name='OutputUrl'),
            type?: string(name='Type', example='OSS'),
          }(name='Output'),
          processConfig?: {
            combineConfigs?: [ 
              {
                audioIndex: string(name='AudioIndex', description='This parameter is required.', example='0 或 exclude'),
                duration?: double(name='Duration', example='20.0'),
                start?: double(name='Start', example='0.0'),
                videoIndex: string(name='VideoIndex', description='This parameter is required.', example='0 或 exclude'),
              }
            ](name='CombineConfigs'),
            encryption?: {
              cipherText?: string(name='CipherText', example='MTYi00NDU0LTg5O****'),
              decryptKeyUri?: string(name='DecryptKeyUri', example='https://sample.com/path?CipherText=MTYi00NDU0LTg5O****'),
              encryptType?: string(name='EncryptType', example='PrivateEncryption'),
            }(name='Encryption'),
            imageWatermarks?: [ 
              {
                overwriteParams?: {
                  dx?: string(name='Dx', example='10'),
                  dy?: string(name='Dy', example='10'),
                  file?: {
                    media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                    type?: string(name='Type', example='OSS'),
                  }(name='File'),
                  height?: string(name='Height', example='32'),
                  referPos?: string(name='ReferPos', example='TopLeft'),
                  timeline?: {
                    duration?: string(name='Duration', example='ToEND'),
                    start?: string(name='Start', example='00:00:05'),
                  }(name='Timeline'),
                  width?: string(name='Width', example='32'),
                }(name='OverwriteParams'),
                templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
              }
            ](name='ImageWatermarks'),
            isInheritTags?: boolean(name='IsInheritTags'),
            subtitles?: [ 
              {
                overwriteParams?: {
                  charEnc?: string(name='CharEnc', example='UTF-8'),
                  file?: {
                    media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                    type?: string(name='Type', example='OSS'),
                  }(name='File'),
                  format?: string(name='Format', example='vtt'),
                }(name='OverwriteParams'),
                templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
              }
            ](name='Subtitles'),
            textWatermarks?: [ 
              {
                overwriteParams?: {
                  adaptive?: string(name='Adaptive', example='false'),
                  borderColor?: string(name='BorderColor', example='#006400'),
                  borderWidth?: int32(name='BorderWidth', example='0'),
                  content?: string(name='Content', example='测试水印'),
                  fontAlpha?: string(name='FontAlpha', example='1.0'),
                  fontColor?: string(name='FontColor', example='#006400'),
                  fontName?: string(name='FontName', example='SimSun'),
                  fontSize?: int32(name='FontSize', example='16'),
                  left?: string(name='Left', example='10'),
                  top?: string(name='Top', example='10'),
                }(name='OverwriteParams'),
                templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
              }
            ](name='TextWatermarks'),
            transcode?: {
              overwriteParams?: {
                audio?: {
                  bitrate?: string(name='Bitrate', example='128'),
                  channels?: string(name='Channels', example='2'),
                  codec?: string(name='Codec', example='AAC'),
                  profile?: string(name='Profile', example='aac_low'),
                  remove?: string(name='Remove', example='false'),
                  samplerate?: string(name='Samplerate', example='44100'),
                  volume?: {
                    integratedLoudnessTarget?: string(name='IntegratedLoudnessTarget', example='-6'),
                    loudnessRangeTarget?: string(name='LoudnessRangeTarget', example='8'),
                    method?: string(name='Method', example='auto'),
                    truePeak?: string(name='TruePeak', example='-1'),
                  }(name='Volume'),
                }(name='Audio'),
                container?: {
                  format?: string(name='Format', example='mp4'),
                }(name='Container'),
                muxConfig?: {
                  segment?: {
                    duration?: string(name='Duration', example='10'),
                    forceSegTime?: string(name='ForceSegTime', example='2,3'),
                  }(name='Segment'),
                }(name='MuxConfig'),
                tags?: map[string]string(name='Tags'),
                video?: {
                  abrMax?: string(name='AbrMax', example='6000'),
                  bitrate?: string(name='Bitrate', example='3000'),
                  bufsize?: string(name='Bufsize', example='6000'),
                  codec?: string(name='Codec', example='H.264'),
                  crf?: string(name='Crf', example='23'),
                  crop?: string(name='Crop', example='1280:800:0:140'),
                  fps?: string(name='Fps', example='25'),
                  gop?: string(name='Gop', example='250'),
                  height?: string(name='Height', example='1080'),
                  longShortMode?: string(name='LongShortMode', example='false'),
                  maxrate?: string(name='Maxrate', example='9000'),
                  pad?: string(name='Pad', example='1280:800:0:140'),
                  pixFmt?: string(name='PixFmt', example='yuv420p'),
                  preset?: string(name='Preset', example='medium'),
                  profile?: string(name='Profile', example='Main'),
                  remove?: string(name='Remove', example='false'),
                  scanMode?: string(name='ScanMode', example='progressive'),
                  width?: string(name='Width', example='1920'),
                }(name='Video'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }(name='Transcode'),
          }(name='ProcessConfig'),
        }
      ](name='OutputGroup'),
      parentJobId?: string(name='ParentJobId', example='8b2198504dd340b7b3c9842a74fc9baa'),
      percent?: int32(name='Percent', example='0'),
      requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
      scheduleConfig?: {
        pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
        priority?: int32(name='Priority', example='5'),
      }(name='ScheduleConfig'),
      status?: string(name='Status', example='Success'),
      submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
      triggerSource?: string(name='TriggerSource', example='API'),
      userData?: string(name='UserData', example='user-data'),
    }
  ](name='Jobs'),
  nextPageToken?: string(name='NextPageToken', example='019daf5780f74831b0e1a767c9f1c178'),
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model ListTranscodeJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTranscodeJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTranscodeJobs  ListTranscodeJobsRequest
  * @return ListTranscodeJobsResponse
 */
async function listTranscodeJobs(request: ListTranscodeJobsRequest): ListTranscodeJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTranscodeJobs', 'POST', '/', 'json', false, 'json', request);
}

model QueryDNAJobListRequest {
  jobIds?: string(name='JobIds', example='88c6ca184c0e47098a5b665e2a12****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryDNAJobListResponseBody = {
  jobList?: [ 
    {
      code?: string(name='Code', example='"InvalidParameter.ResourceNotFound"'),
      config?: string(name='Config', example='{"SaveType": "save","MediaType"":"video"}'),
      creationTime?: string(name='CreationTime', example='2022-12-28T03:21:37Z'),
      DBId?: string(name='DBId', example='2288c6ca184c0e47098a5b665e2a12****'),
      DNAResult?: string(name='DNAResult', example='http://test_bucket.oss-cn-shanghai.aliyuncs.com/fingerprint/video/search_result/5/5.txt'),
      finishTime?: string(name='FinishTime', example='2022-12-28T03:21:44Z'),
      id?: string(name='Id', example='88c6ca184c0e47098a5b665e2a12****'),
      input?: {
        media?: string(name='Media', example='1b1b9cd148034739af413150fded****'),
        type?: string(name='Type', example='Media'),
      }(name='Input'),
      message?: string(name='Message', example='"The resource operated \\"a887d0b***d805ef6f7f6786302\\" cannot be found"'),
      primaryKey?: string(name='PrimaryKey', example='3ca84a39a9024f19853b21be9cf9****'),
      status?: string(name='Status', example='Queuing'),
      userData?: string(name='UserData', example='testdna'),
    }
  ](name='JobList'),
  requestId?: string(name='RequestId', example='25818875-5F78-4A13-BEF6-D7393642CA58'),
}

model QueryDNAJobListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDNAJobListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDNAJobList  QueryDNAJobListRequest
  * @return QueryDNAJobListResponse
 */
async function queryDNAJobList(request: QueryDNAJobListRequest): QueryDNAJobListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDNAJobList', 'POST', '/', 'json', false, 'json', request);
}

model QueryIProductionJobRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model QueryIProductionJobResponseBody = {
  createTime?: string(name='CreateTime', example='2022-07-07T07:16:11Z'),
  finishTime?: string(name='FinishTime', example='2021-11-26T14:50:25Z'),
  functionName?: string(name='FunctionName', example='Cover'),
  input?: {
    media?: string(name='Media', example='oss://bucket/object'),
    type?: string(name='Type', example='OSS'),
  }(name='Input'),
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  jobParams?: string(name='JobParams', example='{"Model":"gif"}'),
  name?: string(name='Name'),
  output?: {
    media?: string(name='Media', example='oss://bucket/object'),
    type?: string(name='Type', example='OSS'),
  }(name='Output'),
  outputFiles?: [ string ](name='OutputFiles'),
  outputUrls?: [ string ](name='OutputUrls'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result', example='{}'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='a54fdc9c9aab413caef0d1150f565e86'),
    priority?: int32(name='Priority', example='6'),
  }(name='ScheduleConfig'),
  status?: string(name='Status', example='Success'),
  templateId?: string(name='TemplateId', example='****96e8864746a0b6f3****'),
  userData?: string(name='UserData', example='{"test":1}'),
}

model QueryIProductionJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryIProductionJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryIProductionJob  QueryIProductionJobRequest
  * @return QueryIProductionJobResponse
 */
async function queryIProductionJob(request: QueryIProductionJobRequest): QueryIProductionJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryIProductionJob', 'POST', '/', 'json', false, 'json', request);
}

model QueryMediaCensorJobDetailRequest {
  jobId: string(name='JobId', description='This parameter is required.', example='2288c6ca184c0e47098a5b665e2a12****', position='Query'),
  maximumPageSize?: long(name='MaximumPageSize', example='30', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='ae0fd49c0840e14daf0d66a75b83****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryMediaCensorJobDetailResponseBody = {
  mediaCensorJobDetail?: {
    barrageCensorResult?: {
      label?: string(name='Label', example='normal'),
      rate?: string(name='Rate', example='99.91'),
      scene?: string(name='Scene', example='antispam'),
      suggestion?: string(name='Suggestion', example='pass'),
    }(name='BarrageCensorResult'),
    code?: string(name='Code', example='InvalidParameter.ResourceNotFound'),
    coverImageCensorResults?: {
      coverImageCensorResult?: [ 
      {
        bucket?: string(name='Bucket', example='bucket-out-test-****'),
        location?: string(name='Location', example='oss-cn-shanghai'),
        object?: string(name='Object', example='test/ai/censor/v2/vme-****.jpg'),
        results?: {
          result?: [ 
          {
            label?: string(name='Label', example='Normal'),
            rate?: string(name='Rate', example='100'),
            scene?: string(name='Scene', example='Antispam'),
            suggestion?: string(name='Suggestion', example='pass'),
          }
        ](name='Result')
        }(name='Results'),
      }
    ](name='CoverImageCensorResult')
    }(name='CoverImageCensorResults'),
    creationTime?: string(name='CreationTime', example='2018-09-13T16:32:24Z'),
    descCensorResult?: {
      label?: string(name='Label', example='terrorism'),
      rate?: string(name='Rate', example='100'),
      scene?: string(name='Scene', example='antispam'),
      suggestion?: string(name='Suggestion', example='review'),
    }(name='DescCensorResult'),
    finishTime?: string(name='FinishTime', example='2018-09-13T16:38:24Z'),
    input?: {
      bucket?: string(name='Bucket', example='bucket-test-in-****'),
      location?: string(name='Location', example='oss-cn-shanghai'),
      object?: string(name='Object', example='test/ai/censor/test-****.mp4'),
    }(name='Input'),
    jobId?: string(name='JobId', example='f8f166eea7a44e9bb0a4aecf9543****'),
    message?: string(name='Message', example='The resource operated cannot be found'),
    pipelineId?: string(name='PipelineId', example='c5b30b7c0d0e4a0abde1d5f9e751****'),
    state?: string(name='State', example='Success'),
    suggestion?: string(name='Suggestion', example='block'),
    titleCensorResult?: {
      label?: string(name='Label', example='meaningless'),
      rate?: string(name='Rate', example='99.91'),
      scene?: string(name='Scene', example='antispam'),
      suggestion?: string(name='Suggestion', example='block'),
    }(name='TitleCensorResult'),
    userData?: string(name='UserData', example='example userdata ****'),
    vensorCensorResult?: {
      censorResults?: {
        censorResult?: [ 
        {
          label?: string(name='Label', example='meaningless'),
          rate?: string(name='Rate', example='100'),
          scene?: string(name='Scene', example='terrorism'),
          suggestion?: string(name='Suggestion', example='review'),
        }
      ](name='CensorResult')
      }(name='CensorResults'),
      nextPageToken?: string(name='NextPageToken', example='ea04afcca7cd4e80b9ece8fbb251****'),
      videoTimelines?: {
        videoTimeline?: [ 
        {
          censorResults?: {
            censorResult?: [ 
            {
              label?: string(name='Label', example='flood'),
              rate?: string(name='Rate', example='99.99'),
              scene?: string(name='Scene', example='porn'),
              suggestion?: string(name='Suggestion', example='block'),
            }
          ](name='CensorResult')
          }(name='CensorResults'),
          object?: string(name='Object', example='output{Count}.jpg'),
          timestamp?: string(name='Timestamp', example='00:02:59.999'),
        }
      ](name='VideoTimeline')
      }(name='VideoTimelines'),
    }(name='VensorCensorResult'),
    videoCensorConfig?: {
      bizType?: string(name='BizType', example='common'),
      outputFile?: {
        bucket?: string(name='Bucket', example='test-bucket-****'),
        location?: string(name='Location', example='oss-cn-shanghai'),
        object?: string(name='Object', example='output{Count}.jpg'),
      }(name='OutputFile'),
      videoCensor?: string(name='VideoCensor', example='true'),
    }(name='VideoCensorConfig'),
  }(name='MediaCensorJobDetail'),
  requestId?: string(name='RequestId', example='B42299E6-F71F-465F-8FE9-4FC2E3D3C2CA'),
}

model QueryMediaCensorJobDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMediaCensorJobDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryMediaCensorJobDetail  QueryMediaCensorJobDetailRequest
  * @return QueryMediaCensorJobDetailResponse
 */
async function queryMediaCensorJobDetail(request: QueryMediaCensorJobDetailRequest): QueryMediaCensorJobDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMediaCensorJobDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryMediaCensorJobListRequest {
  endOfJobCreatedTimeRange?: string(name='EndOfJobCreatedTimeRange', example='2022-02-14T02:16:07Z', position='Query'),
  jobIds?: string(name='JobIds', example='fa9c34be3bcf42919ac4d1775239****,78dc866518b843259669df58ed30****', position='Query'),
  maximumPageSize?: long(name='MaximumPageSize', example='20', minimum=1, maximum=100, position='Query'),
  nextPageToken?: string(name='NextPageToken', example='79aff3eee82242e092899db5f669', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pipelineId?: string(name='PipelineId', example='c5b30b7c0d0e4a0abde1d5f9e751****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startOfJobCreatedTimeRange?: string(name='StartOfJobCreatedTimeRange', example='2021-12-22T03:48:05Z', position='Query'),
  state?: string(name='State', example='All', position='Query'),
}

model QueryMediaCensorJobListResponseBody = {
  mediaCensorJobList?: {
    mediaCensorJob?: [ 
    {
      barrageCensorResult?: {
        label?: string(name='Label', example='normal'),
        rate?: string(name='Rate', example='99.91'),
        scene?: string(name='Scene', example='antispam'),
        suggestion?: string(name='Suggestion', example='pass'),
      }(name='BarrageCensorResult'),
      code?: string(name='Code', example='InvalidParameter.ResourceNotFound'),
      coverImageCensorResults?: {
        coverImageCensorResult?: [ 
        {
          bucket?: string(name='Bucket', example='example-Bucket-****'),
          location?: string(name='Location', example='oss-cn-shanghai'),
          object?: string(name='Object', example='test/ai/censor/v2/vme-****.jpg'),
          results?: {
            result?: [ 
            {
              label?: string(name='Label', example='normal'),
              rate?: string(name='Rate', example='100'),
              scene?: string(name='Scene', example='live'),
              suggestion?: string(name='Suggestion', example='pass'),
            }
          ](name='Result')
          }(name='Results'),
        }
      ](name='CoverImageCensorResult')
      }(name='CoverImageCensorResults'),
      creationTime?: string(name='CreationTime', example='2021-11-04T07:25:48Z'),
      descCensorResult?: {
        label?: string(name='Label', example='normal'),
        rate?: string(name='Rate', example='100'),
        scene?: string(name='Scene', example='antispam'),
        suggestion?: string(name='Suggestion', example='pass'),
      }(name='DescCensorResult'),
      finishTime?: string(name='FinishTime', example='2021-11-04T07:25:50Z'),
      input?: {
        bucket?: string(name='Bucket', example='bucket-test-in-****'),
        location?: string(name='Location', example='oss-cn-shanghai'),
        object?: string(name='Object', example='test/ai/censor/test-****.mp4'),
      }(name='Input'),
      jobId?: string(name='JobId', example='f8f166eea7a44e9bb0a4aecf9543'),
      message?: string(name='Message', example='The resource operated cannot be found'),
      pipelineId?: string(name='PipelineId', example='c5b30b7c0d0e4a0abde1d5f9e751****'),
      state?: string(name='State', example='Success'),
      suggestion?: string(name='Suggestion', example='pass'),
      titleCensorResult?: {
        label?: string(name='Label', example='meaningless'),
        rate?: string(name='Rate', example='100'),
        scene?: string(name='Scene', example='antispam'),
        suggestion?: string(name='Suggestion', example='block'),
      }(name='TitleCensorResult'),
      userData?: string(name='UserData', example='example userdata ****'),
      vensorCensorResult?: {
        censorResults?: {
          censorResult?: [ 
          {
            label?: string(name='Label', example='meaningless'),
            rate?: string(name='Rate', example='100'),
            scene?: string(name='Scene', example='ad'),
            suggestion?: string(name='Suggestion', example='pass'),
          }
        ](name='CensorResult')
        }(name='CensorResults'),
        nextPageToken?: string(name='NextPageToken', example='ea04afcca7cd4e80b9ece8fbb251'),
        videoTimelines?: {
          videoTimeline?: [ 
          {
            censorResults?: {
              censorResult?: [ 
              {
                label?: string(name='Label', example='normal'),
                rate?: string(name='Rate', example='100'),
                scene?: string(name='Scene', example='porn'),
                suggestion?: string(name='Suggestion', example='block'),
              }
            ](name='CensorResult')
            }(name='CensorResults'),
            object?: string(name='Object', example='output{Count}.jpg'),
            timestamp?: string(name='Timestamp', example='00:02:59.999'),
          }
        ](name='VideoTimeline')
        }(name='VideoTimelines'),
      }(name='VensorCensorResult'),
      videoCensorConfig?: {
        bizType?: string(name='BizType', example='common'),
        outputFile?: {
          bucket?: string(name='Bucket', example='test-bucket-****'),
          location?: string(name='Location', example='oss-cn-shanghai'),
          object?: string(name='Object', example='output{Count}.jpg'),
        }(name='OutputFile'),
        videoCensor?: string(name='VideoCensor', example='true'),
      }(name='VideoCensorConfig'),
    }
  ](name='MediaCensorJob')
  }(name='MediaCensorJobList'),
  nextPageToken?: string(name='NextPageToken', example='9b1a42bc6e8d46e6a1383b7e7f01****'),
  nonExistIds?: {
    string?: [ string ](name='String')
  }(name='NonExistIds'),
  requestId?: string(name='RequestId', example='D1D5C080-8E2F-5030-8AB4-13092F17631B'),
}

model QueryMediaCensorJobListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMediaCensorJobListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryMediaCensorJobList  QueryMediaCensorJobListRequest
  * @return QueryMediaCensorJobListResponse
 */
async function queryMediaCensorJobList(request: QueryMediaCensorJobListRequest): QueryMediaCensorJobListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMediaCensorJobList', 'POST', '/', 'json', false, 'json', request);
}

model QueryMediaIndexJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaId: string(name='MediaId', description='The ID of the media asset.

This parameter is required.', example='c2e77390f75271ec802f0674a2ce6***', position='Query'),
  searchLibName?: string(name='SearchLibName', description='The name of the search library. Default value: ims-default-search-lib.', example='test1', position='Query'),
}

model QueryMediaIndexJobResponseBody = {
  code?: string(name='Code', description='The response code.', example='200'),
  indexJobInfoList?: [ 
    {
      gmtFinish?: string(name='GmtFinish', description='The end time of the indexing job.', example='2023-11-21 11:33:51'),
      gmtSubmit?: string(name='GmtSubmit', description='The time when the index job was submitted.', example='2023-11-21 11:33:50'),
      indexType?: string(name='IndexType', description='The index type. Valid values:

*   mm: large visual model.
*   face: face recognition.
*   aiLabel: smart tagging.', example='mm'),
      status?: string(name='Status', description='The job status. Valid values:

*   Running
*   Success
*   Fail', example='Success'),
    }
  ](name='IndexJobInfoList', description='The indexing jobs enabled for the media asset.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4E84BE44-58A7-****-****-FBEBEA16EF94'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model QueryMediaIndexJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMediaIndexJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryMediaIndexJob  QueryMediaIndexJobRequest
  * @return QueryMediaIndexJobResponse
 */
async function queryMediaIndexJob(request: QueryMediaIndexJobRequest): QueryMediaIndexJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMediaIndexJob', 'POST', '/', 'json', false, 'json', request);
}

model QuerySearchIndexRequest {
  regionId?: string(name='RegionId', position='Host'),
  indexType: string(name='IndexType', description='The category of the index. Valid values:

*   mm: large visual model.
*   face: face recognition.
*   aiLabel: smart tagging.

This parameter is required.', example='mm', position='Query'),
  searchLibName?: string(name='SearchLibName', description='The name of the search library.

*   If you leave this parameter empty, the search index is created in the default search library of Intelligent Media Service (IMS). Default value: ims-default-search-lib.
*   To query information about an existing search library, call the [QuerySearchLib](https://help.aliyun.com/document_detail/2584455.html) API operation.', example='test1', position='Query'),
}

model QuerySearchIndexResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  indexStatus?: string(name='IndexStatus', description='The state of the index. Valid values:

*   active: the index is enabled.
*   Deactive: the index is not enabled.', example='Active'),
  indexType?: string(name='IndexType', description='The category of the index. Valid values:

*   mm: large visual model.
*   face: face recognition.
*   aiLabel: smart tagging.', example='mm'),
  mediaTotal?: string(name='MediaTotal', description='The total number of media assets.', example='12'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E84BE44-58A7-****-****-FBEBEA16EF94'),
  searchLibName?: string(name='SearchLibName', description='The name of the search library.', example='test1'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model QuerySearchIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySearchIndexResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySearchIndex  QuerySearchIndexRequest
  * @return QuerySearchIndexResponse
 */
async function querySearchIndex(request: QuerySearchIndexRequest): QuerySearchIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySearchIndex', 'POST', '/', 'json', false, 'json', request);
}

model QuerySearchLibRequest {
  regionId?: string(name='RegionId', position='Host'),
  searchLibName: string(name='SearchLibName', description='The name of the search library.

This parameter is required.', example='test1', position='Query'),
}

model QuerySearchLibResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='******11-DB8D-4A9A-875B-275798******'),
  searchLibName?: string(name='SearchLibName', description='The name of the search library.', example='test1'),
  status?: string(name='Status', description='The status of the search library.

Valid values:

*   normal
*   deleting
*   deleteFail', example='normal'),
  success?: string(name='Success', description='Indicates whether the call was successful. Valid values:

*   true
*   false', example='true'),
}

model QuerySearchLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySearchLibResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySearchLib  QuerySearchLibRequest
  * @return QuerySearchLibResponse
 */
async function querySearchLib(request: QuerySearchLibRequest): QuerySearchLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySearchLib', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmarttagJobRequest {
  jobId: string(name='JobId', description='This parameter is required.', example='88c6ca184c0e47098a5b665e2****', position='Query'),
  params?: string(name='Params', example='{"labelResultType":"auto"}', position='Query'),
}

model QuerySmarttagJobResponseBody = {
  jobStatus?: string(name='JobStatus', example='Success'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  results?: {
    result?: [ 
    {
      data?: string(name='Data', example='{"title":"example-title-****"}'),
      type?: string(name='Type', example='Meta'),
    }
  ](name='Result')
  }(name='Results'),
  userData?: string(name='UserData', example='{"userId":"123432412831"}'),
}

model QuerySmarttagJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmarttagJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmarttagJob  QuerySmarttagJobRequest
  * @return QuerySmarttagJobResponse
 */
async function querySmarttagJob(request: QuerySmarttagJobRequest): QuerySmarttagJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmarttagJob', 'POST', '/', 'json', false, 'json', request);
}

model RefreshUploadMediaRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaId?: string(name='MediaId', description='The ID of the media asset.', example='411bed50018971edb60b0764a0ec6***', position='Query'),
}

model RefreshUploadMediaResponseBody = {
  mediaId?: string(name='MediaId', description='The ID of the media asset.', example='c2e77390f75271ec802f0674a2ce6***'),
  requestId?: string(name='RequestId', description='The request ID.', example='******11-DB8D-4A9A-875B-275798******'),
  uploadAddress?: string(name='UploadAddress', description='The upload URL.

>  The returned upload URL is a Base64-encoded URL. You must decode the Base64-encoded upload URL before you use an SDK or call an API operation to upload media files. You need to parse UploadAddress only if you use Object Storage Service (OSS) SDK or call an OSS API operation to upload media files.', example='eyJFbmRwb2ludCI6Imh0dHBzOi8vb3NzLWNuLXNoYW5naGFpLmFsaXl1bmNzLmNvbSIsIkJ1Y2tldCI6InN6aGQtdmlkZW8iLCJGaWxlTmFtZSI6InZvZC0yOTYzMWEvc3YvNTBmYTJlODQtMTgxMjdhZGRiMTcvNTBmYTJlODQtMTgxMjdhZGRiM***'),
  uploadAuth?: string(name='UploadAuth', description='The upload credential.

>  The returned upload credential is a Base64-encoded value. You must decode the Base64-encoded upload credential before you use an SDK or call an API operation to upload media files. You need to parse UploadAuth only if you use OSS SDK or call an OSS API operation to upload media files.', example='eyJBY2Nlc3NLZXlJZCI6IkxUQUk0Rm53bTk1dHdxQjMxR3IzSE5hRCIsIkFjY2Vzc0tleVNlY3JldCI6Ik9lWllKR0dTMTlkNkZaM1E3UVpJQmdmSVdnM3BPaiIsIkV4cGlyYXRpb24iOiI***'),
}

model RefreshUploadMediaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefreshUploadMediaResponseBody(name='body'),
}

/**
  * @description You can also call this operation to overwrite media files. After you obtain the upload URL of a media file, you can upload the media file again without changing the audio or video ID.
  * @param request  the request parameters of RefreshUploadMedia  RefreshUploadMediaRequest
  * @return RefreshUploadMediaResponse
 */
async function refreshUploadMedia(request: RefreshUploadMediaRequest): RefreshUploadMediaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshUploadMedia', 'POST', '/', 'json', false, 'json', request);
}

model RegisterMediaInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  businessType?: string(name='BusinessType', description='The business type of the media asset. Valid values:

*   subtitles
*   watermark
*   opening
*   ending
*   general', example='opening', position='Query'),
  cateId?: long(name='CateId', description='The category ID.', example='3048', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. The value must be a UUID that contains 32 characters.', example='****0311a423d11a5f7dee713535****', position='Query'),
  coverURL?: string(name='CoverURL', description='The thumbnail URL of the media asset.

*   The value can be up to 128 bytes in length.
*   The value must be encoded in UTF-8.', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png', position='Query'),
  description?: string(name='Description', description='The description of the media asset.

*   The value can be up to 1,024 bytes in length.
*   The value must be encoded in UTF-8.', example='defaultDescription', position='Query'),
  inputURL: string(name='InputURL', description='The URL of the media asset in another service. The URL is associated with the ID of the media asset in IMS. The URL cannot be modified once registered. The following types of URLs are supported:

*   OSS URL in one of the following formats:

http(s)://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4

oss://example-bucket/example.mp4: In this format, it is considered by default that the region of the OSS bucket in which the media asset resides is the same as the region in which IMS is activated.

*   URL of an ApsaraVideo VOD media asset

vod://\\*\\*\\*20b48fb04483915d4f2cd8ac\\*\\*\\*\\*

This parameter is required.', position='Query'),
  mediaTags?: string(name='MediaTags', description='The tags of the media asset.

*   Up to 16 tags are supported.
*   Separate multiple tags with commas (,).
*   Each tag can be up to 32 bytes in length.
*   The value must be encoded in UTF-8.', example='tag1,tag2', position='Query'),
  mediaType?: string(name='MediaType', description='The type of the media asset. Valid values:

*   image
*   video
*   audio
*   text

We recommend that you specify this parameter based on your business requirements. If you set InputURL to an OSS URL, the media asset type can be automatically determined based on the file name extension. For more information
<props="china">, see [File formats](https://help.aliyun.com/document_detail/466207.html).', example='video', position='Query'),
  overwrite?: boolean(name='Overwrite', description='Specifies whether to overwrite the media asset that has been registered by using the same URL. Default value: false. Valid values:

\\- true: If a media asset has been registered by using the same URL, the original media asset is deleted and the new media asset is registered.

\\- false: If a media asset has been registered by using the same URL, the new media asset is not registered. A URL cannot be used to register multiple media assets.', example='true', position='Query'),
  referenceId?: string(name='ReferenceId', description='The custom ID. The ID can be 6 to 64 characters in length and can contain only letters, digits, hyphens (-), and underscores (_). Make sure that the ID is unique among users.', example='123-123', position='Query'),
  registerConfig?: string(name='RegisterConfig', description='The registration configurations.

By default, a sprite is generated for the media asset. You can set NeedSprite to false to disable automatic sprite generation.

By default, a snapshot is generated for the media asset. You can set NeedSnapshot to false to disable automatic snapshot generation.', example='{
      "NeedSprite": "false"
}', position='Query'),
  smartTagTemplateId?: string(name='SmartTagTemplateId', description='The ID of the smart tagging template. Valid values:

*   S00000101-300080: the system template that supports natural language processing (NLP) for content recognition.
*   S00000103-000001: the system template that supports NLP for content recognition and all tagging capabilities.
*   S00000103-000002: the system template that supports all tagging capabilities but does not support NLP for content recognition.

After you configure this parameter, a smart tag analysis task is automatically initiated after the media asset is registered. For more information about the billable items<props="china">, see [Smart tagging](https://help.aliyun.com/zh/ims/media-ai-billing?spm=a2c4g.11186623.0.0.3147392dWwlSjL#p-k38-3rb-dug).', example='S00000101-300080', position='Query'),
  title?: string(name='Title', description='The title. If you do not specify this parameter, a default title is automatically generated based on the date.

*   The value can be up to 128 bytes in length.
*   The value must be encoded in UTF-8.', example='defaultTitle', position='Query'),
  userData?: string(name='UserData', description='The user data. You can specify a custom callback URL. For more information<props="china"> ,see [Configure a callback upon editing completion](https://help.aliyun.com/document_detail/451631.html).

*   The value can be up to 1,024 bytes in length.
*   The value must be encoded in UTF-8.
*   The value must be in the JSON format.', position='Query'),
  workflowId?: string(name='WorkflowId', description='The workflow ID.', example='******b4fb044839815d4f2cd8******', position='Query'),
}

model RegisterMediaInfoResponseBody = {
  mediaId?: string(name='MediaId', description='The ID of the media asset in IMS.', example='******b48fb04483915d4f2cd8******'),
  requestId?: string(name='RequestId', description='The request ID.', example='******5A-CAAC-4850-A3AF-B74606******'),
}

model RegisterMediaInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterMediaInfoResponseBody(name='body'),
}

/**
  * @description Registering a media asset is an asynchronous job that takes 2 to 3 seconds. When the operation returns the ID of the media asset, the registration may have not be completed. If you call the GetMediaInfo operation at this time, you may fail to obtain the information about the media asset.
  * @param request  the request parameters of RegisterMediaInfo  RegisterMediaInfoRequest
  * @return RegisterMediaInfoResponse
 */
async function registerMediaInfo(request: RegisterMediaInfoRequest): RegisterMediaInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterMediaInfo', 'POST', '/', 'json', false, 'json', request);
}

model RegisterMediaStreamRequest {
  regionId?: string(name='RegionId', position='Host'),
  inputURL?: string(name='InputURL', description='The URL of the media asset in another service. The URL is associated with the ID of the media asset in IMS. The URL cannot be modified once registered.

Set this parameter to the OSS URL of the media asset. The following formats are supported:

http(s)://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4

oss://example-bucket/example.mp4: In this format, it is considered by default that the region of the OSS bucket in which the media asset resides is the same as the region in which IMS is activated.', position='Query'),
  mediaId?: string(name='MediaId', description='The ID of the media asset.', example='5e778ec0027b71ed80a8909598506***', position='Query'),
  userData?: string(name='UserData', description='The user data.', example='{"MessageCallback":{"CallbackURL":"http://test.test.com"}, "Extend":{"localId":"xxx","test":"www"}}', position='Query'),
}

model RegisterMediaStreamResponseBody = {
  mediaId?: string(name='MediaId', description='The ID of the media asset.', example='5e778ec0027b71ed80a8909598506302'),
  requestId?: string(name='RequestId', description='The request ID.', example='******11-DB8D-4A9A-875B-275798******'),
}

model RegisterMediaStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterMediaStreamResponseBody(name='body'),
}

/**
  * @description You can call this operation to register a media stream file in an Object Storage Service (OSS) bucket with Intelligent Media Services (IMS) and associate the media stream with the specified media asset ID.
  * @param request  the request parameters of RegisterMediaStream  RegisterMediaStreamRequest
  * @return RegisterMediaStreamResponse
 */
async function registerMediaStream(request: RegisterMediaStreamRequest): RegisterMediaStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterMediaStream', 'POST', '/', 'json', false, 'json', request);
}

model SearchEditingProjectRequest {
  createSource?: string(name='CreateSource', example='WebSDK', position='Query'),
  endTime?: string(name='EndTime', example='2017-01-11T12:00:00Z', position='Query'),
  pageNo?: long(name='PageNo', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  projectType?: string(name='ProjectType', example='EditingProject', position='Query'),
  sortBy?: string(name='SortBy', example='CreationTime:Desc', position='Query'),
  startTime?: string(name='StartTime', example='2017-01-11T12:00:00Z', position='Query'),
  status?: string(name='Status', example='Producing', position='Query'),
  templateType?: string(name='TemplateType', example='Timeline', position='Query'),
}

model SearchEditingProjectResponseBody = {
  maxResults?: long(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='null'),
  projectList?: [ 
    {
      businessConfig?: string(name='BusinessConfig', example='{ "OutputMediaConfig" : { "StorageLocation": "test-bucket.oss-cn-shanghai.aliyuncs.com", "Path": "test-path" }, "OutputMediaTarget": "oss-object", "ReservationTime": "2021-06-21T08:05:00Z" }'),
      businessStatus?: string(name='BusinessStatus', example='Reserving'),
      coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example-cover.jpg'),
      createSource?: string(name='CreateSource', example='OpenAPI'),
      createTime?: string(name='CreateTime', example='2017-01-11T12:00:00Z'),
      description?: string(name='Description', example='sample description'),
      duration?: long(name='Duration', example='30.100000'),
      errorCode?: string(name='ErrorCode', example='InvalidParameter'),
      errorMessage?: string(name='ErrorMessage', example='"EventTime":"2021-08-12T10:04:15Z","ErrorCode":"InvalidParameter","ErrorMessage":"The specified parameter \\"LiveStreamConfig\\" is not valid. specified parameter example is not valid.'),
      modifiedSource?: string(name='ModifiedSource', example='2017-01-11T12:00:00Z'),
      modifiedTime?: string(name='ModifiedTime', example='2017-01-11T12:00:00Z'),
      projectId?: string(name='ProjectId', example='****fddd7748b58bf1d47e95****'),
      projectType?: string(name='ProjectType', example='EditingProject'),
      status?: string(name='Status', example='PRODUCE_FAILED'),
      templateType?: string(name='TemplateType', example='Timeline'),
      timeline?: string(name='Timeline', example='{"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****4d7cf14dc7b83b0e801c****"},{"MediaId":"****4d7cf14dc7b83b0e801c****"}]}]}'),
      title?: string(name='Title', example='title'),
    }
  ](name='ProjectList'),
  requestId?: string(name='RequestId', example='****9262E3DA-07FA-4862-FCBB6BC61D08*****'),
  totalCount?: long(name='TotalCount', example='110'),
}

model SearchEditingProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchEditingProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SearchEditingProject  SearchEditingProjectRequest
  * @return SearchEditingProjectResponse
 */
async function searchEditingProject(request: SearchEditingProjectRequest): SearchEditingProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchEditingProject', 'POST', '/', 'json', false, 'json', request);
}

model SearchIndexJobRerunRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaIds: string(name='MediaIds', description='This parameter is required.', example='******b48fb04483915d4f2cd8******,******c48fb37407365d4f2cd8******', position='Query'),
  searchLibName?: string(name='SearchLibName', example='test-1', position='Query'),
  task?: string(name='Task', example='AiLabel,Face,Mm', position='Query'),
}

model SearchIndexJobRerunResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    mediaIdsNoExist?: [ string ](name='MediaIdsNoExist'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: string(name='Success', example='true'),
}

model SearchIndexJobRerunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchIndexJobRerunResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SearchIndexJobRerun  SearchIndexJobRerunRequest
  * @return SearchIndexJobRerunResponse
 */
async function searchIndexJobRerun(request: SearchIndexJobRerunRequest): SearchIndexJobRerunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchIndexJobRerun', 'POST', '/', 'json', false, 'json', request);
}

model SearchMediaRequest {
  regionId?: string(name='RegionId', position='Host'),
  entityId?: string(name='EntityId', description='The ID of the entity.', example='2d3bf1e35a1e42b5ab338d701efa7603', position='Query'),
  match?: string(name='Match', description='The filter conditions. For more information about the parameter syntax
<props="china">, see [Media asset search protocols](https://help.aliyun.com/document_detail/2584256.html).', position='Query'),
  pageNo?: int32(name='PageNo', description='The page number. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 50.', example='20', position='Query'),
  scrollToken?: string(name='ScrollToken', description='The pagination identifier. The value can be up to 32 characters in length. The first time you call this operation for each new search, you do not need to specify this parameter. The value of this parameter is returned each time data records that meet the specified filter condition are found. The value is used to record the current position of queried data. Record the returned parameter value and set this parameter according to the following requirements during the next search: If you need to traverse all data that meets the filter criteria, you must set the ScrollToken parameter. If the value of the PageNo parameter exceeds 200, we recommend that you set this parameter to optimize search performance. You can only page backward. You can page a maximum of 1,000 entries in an operation.', example='F8C4F642184DBDA5D93907A70AAE****', position='Query'),
  searchLibName?: string(name='SearchLibName', description='The search library.', example='test-1', position='Query'),
  sortBy?: string(name='SortBy', description='The sort field and order. Separate multiple parameters with commas (,).', example='utcCreate:Desc, utcModified:Desc', position='Query'),
}

model SearchMediaResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  mediaInfoList?: [ 
    {
      aiData?: {
        aiLabelInfo?: [ 
          {
            category?: string(name='Category', description='The category.'),
            faceId?: string(name='FaceId', description='The face ID.', example='5FE19530C7A422197535FE74F5DB2B9F'),
            labelId?: string(name='LabelId', description='The ID of the entity.', example='10310250338'),
            labelName?: string(name='LabelName', description='The name of the entity.'),
            labelType?: string(name='LabelType', description='The type of the tag.'),
            occurrences?: [ 
              {
                content?: string(name='Content', description='The text content.'),
                finegrainId?: string(name='FinegrainId', description='The fine-grained ID of the entity.', example='10310250338'),
                finegrainName?: string(name='FinegrainName', description='The fine-grained name of the entity.'),
                from?: double(name='From', description='The start time of the clip.', example='1.4'),
                image?: string(name='Image', description='The optimal face image encoded in Base64.', example='99C64F6287'),
                score?: double(name='Score', description='The score.', example='0.75287705'),
                tableBatchSeqId?: string(name='TableBatchSeqId', description='The sequence ID of the vector table.', example='85010D1'),
                to?: double(name='To', description='The end time of the clip.', example='2.5'),
                tracks?: [ 
                  {
                    position?: string(name='Position', description='The coordinates of the bounding box.', example='468.0;67.0;615.0;267.0'),
                    size?: double(name='Size', description='The size of the bounding box.', example='50.2'),
                    timestamp?: double(name='Timestamp', description='The timestamp of the track.', example='1.4'),
                  }
                ](name='Tracks', description='The track sequence.'),
                clipId?: string(name='clipId', description='The ID of the clip.', example='5FE19530C7A422197535FE74F5DB2B9F'),
              }
            ](name='Occurrences', description='The clips.'),
            source?: string(name='Source', description='The source.', example='vision'),
          }
        ](name='AiLabelInfo', description='The tags of the intelligent AI job.'),
        asrInfo?: [ 
          {
            clipId?: string(name='ClipId', description='The ID of the clip.', example='5FE19530C7A422197535FE74F5DB2B9F'),
            content?: string(name='Content', description='The text content.'),
            from?: double(name='From', description='The start time of the clip.', example='1.4'),
            timestamp?: double(name='Timestamp', description='The timestamp of the clip.', example='1.4'),
            to?: double(name='To', description='The end time of the clip.', example='2.5'),
          }
        ](name='AsrInfo', description='The information about audio files.'),
        ocrInfo?: [ 
          {
            clipId?: string(name='ClipId', description='The ID of the clip.', example='5FE19530C7A422197535FE74F5DB2B9F'),
            content?: string(name='Content', description='The text content.'),
            from?: double(name='From', description='The start time of the clip.', example='1.4'),
            timestamp?: double(name='Timestamp', description='The timestamp of the clip.', example='1.4'),
            to?: double(name='To', description='The end time of the clip.', example='2.5'),
          }
        ](name='OcrInfo', description='The subtitles.'),
      }(name='AiData', description='The details of the intelligent AI job.'),
      aiRoughData?: {
        aiCategory?: string(name='AiCategory', description='TV Series', example='TV series'),
        aiJobId?: string(name='AiJobId', description='The ID of the AI job.', example='cd35b0b0025f71edbfcb472190a9xxxx'),
        result?: string(name='Result', description='The results of the AI job.', example='http://xxxx.json'),
        saveType?: string(name='SaveType', description='The save type.', example='TEXT'),
        status?: string(name='Status', description='The data status.', example='SaveSuccess'),
      }(name='AiRoughData', description='The description of the AI job.'),
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', description='The bitrate of the file.', example='1912.13'),
            createTime?: string(name='CreateTime', description='The time when the file was created.', example='2022-05-30T02:02:17Z'),
            duration?: string(name='Duration', description='The duration of the file.', example='60.00000'),
            fileName?: string(name='FileName', description='The name of the file.', example='164265080291300080527050.wav'),
            fileSize?: string(name='FileSize', description='The size of the file in bytes.', example='324784'),
            fileStatus?: string(name='FileStatus', description='The status of the file.', example='Normal'),
            fileType?: string(name='FileType', description='The type of the file.', example='source_file'),
            fileUrl?: string(name='FileUrl', description='The Object Storage Service (OSS) URL of the file.', example='https://outin-d3f4681ddfd911ec99a600163e1403e7.oss-cn-shanghai.aliyuncs.com/sv/23d5cdd1-18180984899/23d5cdd1-18180984899.mp4'),
            formatName?: string(name='FormatName', description='The encapsulation format of the file.', example='mov,mp4,m4a,3gp,3g2,mj2'),
            height?: string(name='Height', description='The height of the file.', example='480'),
            modifiedTime?: string(name='ModifiedTime', description='The time when the file was last modified.', example='2021-12-10T12:19Z'),
            region?: string(name='Region', description='The region in which the file is stored.', example='cn-beijing'),
            width?: string(name='Width', description='The width of the file.', example='1920'),
          }(name='FileBasicInfo', description='The basic information about the file, such as the duration and size.'),
        }
      ](name='FileInfoList', description='The information about the files.'),
      indexStatusList?: [ 
        {
          indexStatus?: string(name='IndexStatus', example='Success'),
          indexType?: string(name='IndexType', example='mm'),
        }
      ](name='IndexStatusList'),
      mediaBasicInfo?: {
        biz?: string(name='Biz', description='The business to which the media asset belongs.', example='IMS'),
        businessType?: string(name='BusinessType', description='The business type of the media asset.', example='opening'),
        cateId?: long(name='CateId', description='The ID of the category.', example='44'),
        cateName?: string(name='CateName', description='The name of the category.'),
        category?: string(name='Category', description='The category of the media asset.', example='image'),
        coverURL?: string(name='CoverURL', description='The thumbnail URL of the media asset.', example='https://dtlive-bj.oss-cn-beijing.aliyuncs.com/cover/e694372e-4f5b-4821-ae09-efd064f27b63_large_cover_url.jpg'),
        createTime?: string(name='CreateTime', description='The time when the media asset was created.', example='2020-12-01T19:48Z'),
        deletedTime?: string(name='DeletedTime', description='The time when the media asset was deleted.', example='2020-12-01T19:48Z'),
        description?: string(name='Description', description='The description of the media asset.'),
        inputURL?: string(name='InputURL', description='The address of the media asset that is waiting to be registered.', example='oss://clipres/longvideo/material/voice/prod/20220418/07d7c799f6054dc3bbef250854cf84981650248140427'),
        mediaId?: string(name='MediaId', description='The ID of the media asset.', example='132bd600fc3c71ec99476732a78f6402'),
        mediaTags?: string(name='MediaTags', description='The tags of the media asset.', example='tags,tags2'),
        mediaType?: string(name='MediaType', description='The type of the media asset.', example='video'),
        modifiedTime?: string(name='ModifiedTime', description='The time when the media asset was modified.', example='2020-12-01T19:48Z'),
        referenceId?: string(name='ReferenceId', description='The custom ID of the media asset. The ID is a string that contains 6 to 64 characters. Only letters, digits, hyphens (-), and underscores (_) are supported. Each custom ID is unique.', example='123-123'),
        snapshots?: string(name='Snapshots', description='The snapshots of the media asset.', example='[{"bucket":"example-bucket","count":"3","iceJobId":"******f48f0e4154976b2b8c45******","location":"oss-cn-beijing","snapshotRegular":"example.jpg","templateId":"******e6a6440b29eb60bd7c******"}]'),
        source?: string(name='Source', description='The source of the media asset.', example='oss'),
        spriteImages?: string(name='SpriteImages', description='The image sprite of the media asset', example='[{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]'),
        status?: string(name='Status', description='The state of the media asset.', example='Normal'),
        title?: string(name='Title', description='The title of the media asset.'),
        transcodeStatus?: string(name='TranscodeStatus', description='The transcoding status of the media asset.', example='Init'),
        uploadSource?: string(name='UploadSource', description='The upload source of the media asset.', example='general'),
        userData?: string(name='UserData', description='The user data.', example='userData'),
      }(name='MediaBasicInfo', description='The basic information about the media asset.'),
      mediaId?: string(name='MediaId', description='The ID of the media asset.', example='3b187b3620c8490886cfc2a9578c3ce6'),
    }
  ](name='MediaInfoList', description='The media assets that meet the requirements.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6F61C357-ACC0-57FB-876E-D58795335E59'),
  scrollToken?: string(name='ScrollToken', description='The pagination identifier.', example='F8C4F642184DBDA5D93907A70AAE****'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='True'),
  total?: long(name='Total', description='The total number of media assets that meet the conditions.', example='163'),
}

model SearchMediaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchMediaResponseBody(name='body'),
}

/**
  * @description If you have questions about how to use the media asset search feature in Intelligent Media Services (IMS), contact technical support in the DingTalk group (ID 30415005038).
  * @param request  the request parameters of SearchMedia  SearchMediaRequest
  * @return SearchMediaResponse
 */
async function searchMedia(request: SearchMediaRequest): SearchMediaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchMedia', 'POST', '/', 'json', false, 'json', request);
}

model SearchMediaByAILabelRequest {
  regionId?: string(name='RegionId', position='Host'),
  matchingMode?: string(name='MatchingMode', position='Query'),
  mediaId?: string(name='MediaId', description='The ID of the media asset. This parameter is required if you want to query media asset clips.', example='****c469e944b5a856828dc2****', position='Query'),
  mediaType?: string(name='MediaType', description='The type of the media assets. Valid values:

*   image
*   video
*   audio', example='video', position='Query'),
  multimodalSearchType?: string(name='MultimodalSearchType', description='The type of query. Valid values:

*   PersonName: queries media assets based on character names.
*   Ocr: queries media assets based on subtitles.
*   AiCategory: queries media assets based on AI categories.
*   FullSearch (default): queries all media assets.', example='Ocr', position='Query'),
  pageNo?: int32(name='PageNo', description='The page number. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 50.', example='20', position='Query'),
  searchLibName?: string(name='SearchLibName', description='The name of the search library.', example='test-1', position='Query'),
  sortBy?: string(name='SortBy', description='The sorting method of the results. Valid values:

*   CreationTime:Desc (default): sorts results in reverse chronological order.
*   CreationTime:Asc: sorts results in chronological order.', example='CreationTime:Desc', position='Query'),
  specificSearch?: boolean(name='SpecificSearch', description='Specifies whether to query media asset clips. Valid values:

*   true
*   false', example='true', position='Query'),
  text?: string(name='Text', description='The content that you want to query.', position='Query'),
}

model SearchMediaByAILabelResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  mediaList?: [ 
    {
      aiData?: {
        aiLabelInfo?: [ 
          {
            category?: string(name='Category', description='The category.'),
            faceId?: string(name='FaceId', description='The ID of the face.', example='5FE19530C7A422197535FE74F5DB****'),
            labelId?: string(name='LabelId', description='The ID of the entity.', example='103102503**'),
            labelName?: string(name='LabelName', description='The name of the entity.'),
            labelType?: string(name='LabelType', description='The type of the tag.'),
            occurrences?: [ 
              {
                clipId?: string(name='ClipId', description='The ID of the clip.', example='158730355E4B82257D8AA1583A58****'),
                content?: string(name='Content', description='The content of the text.'),
                finegrainId?: string(name='FinegrainId', description='The fine-grained ID of the entity.', example='103102503**'),
                finegrainName?: string(name='FinegrainName', description='The fine-grained name of the entity.'),
                from?: double(name='From', description='The start time of the clip.', example='1.4'),
                image?: string(name='Image', description='The image that contains the most face information.', example='https://service-****-public.oss-cn-hangzhou.aliyuncs.com/1563457****438522/service-image/f788974f-9595-43b2-a478-7c7a1afb****.jpg'),
                score?: double(name='Score', description='The score.', example='0.75287705'),
                tableBatchSeqId?: string(name='TableBatchSeqId', description='The sequence ID of the vector table.', example='85010D1**'),
                to?: double(name='To', description='The end time of the clip.', example='2.5'),
                tracks?: [ 
                  {
                    position?: string(name='Position', description='The coordinates of the bounding box.', example='468.0;67.0;615.0;267.0'),
                    size?: double(name='Size', description='The size of the bounding box.', example='50'),
                    timestamp?: double(name='Timestamp', description='The timestamp of the track.', example='1.4'),
                  }
                ](name='Tracks', description='The tracks.'),
              }
            ](name='Occurrences', description='The information about the clips.'),
            source?: string(name='Source', description='The source.', example='vision'),
          }
        ](name='AiLabelInfo', description='The tags of the AI job.'),
        asrInfo?: [ 
          {
            clipId?: string(name='ClipId', description='The ID of the clip.', example='5FE19530C7A422197535FE74F5DB****'),
            content?: string(name='Content', description='The content of the audio.'),
            from?: double(name='From', description='The start time of the clip.', example='1.4'),
            timestamp?: double(name='Timestamp', description='The timestamp of the clip.', example='1.4'),
            to?: double(name='To', description='The end time of the clip.', example='2.5'),
          }
        ](name='AsrInfo', description='The information about audio files.'),
        ocrInfo?: [ 
          {
            clipId?: string(name='ClipId', description='The ID of the clip.', example='5FE19530C7A422197535FE74F5DB****'),
            content?: string(name='Content', description='The content of the text.'),
            from?: double(name='From', description='The start time of the clip.', example='1.4'),
            timestamp?: double(name='Timestamp', description='The timestamp of the clip.', example='1.4'),
            to?: double(name='To', description='The end time of the clip.', example='2.5'),
          }
        ](name='OcrInfo', description='The information about subtitle files.'),
      }(name='AiData', description='The details of the AI job.'),
      appId?: string(name='AppId', description='The ID of the application. Default value: app-1000000.', example='app-1000000'),
      coverUrl?: string(name='CoverUrl', description='The URL of the thumbnail.', example='http://example.aliyundoc.com/snapshot/****.jpg?auth_key=1498476426-0-0-f00b9455c49a423ce69cf4e27333****'),
      creationTime?: string(name='CreationTime', description='The time when the media asset was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2017-11-14T09:15:50Z'),
      description?: string(name='Description', description='The description of the media asset.'),
      duration?: float(name='Duration', description='The duration. Unit: seconds.', example='12.2'),
      mediaId?: string(name='MediaId', description='The ID of the media asset.', example='1c6ce34007d571ed94667630a6bc****'),
      modificationTime?: string(name='ModificationTime', description='The time when the media asset was updated. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2017-11-14T09:15:50Z'),
      size?: long(name='Size', description='The size of the source file. Unit: bytes.', example='10897890'),
      snapshots?: [ string ](name='Snapshots', description='The array of video snapshot URLs.'),
      status?: string(name='Status', description='The status of the video.

Valid values:

*   PrepareFail
*   UploadFail
*   Init
*   UploadSucc
*   Transcoding
*   TranscodeFail
*   Deleted
*   Normal
*   Uploading
*   Preparing
*   Blocked
*   Checking', example='Normal'),
      storageLocation?: string(name='StorageLocation', description='The storage address.', example='out-****.oss-cn-shanghai.aliyuncs.com'),
      tags?: string(name='Tags', description='The tags of the media asset.'),
      title?: string(name='Title', description='The title of the media asset.'),
    }
  ](name='MediaList', description='The media assets that contain the specified content.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='******11-DB8D-4A9A-875B-275798******'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
  total?: long(name='Total', description='The total number of audio and video files that meet the conditions.', example='30'),
}

model SearchMediaByAILabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchMediaByAILabelResponseBody(name='body'),
}

/**
  * @description You can call this operation to query media assets or media asset clips based on character names, subtitles, or AI categories.
  * @param request  the request parameters of SearchMediaByAILabel  SearchMediaByAILabelRequest
  * @return SearchMediaByAILabelResponse
 */
async function searchMediaByAILabel(request: SearchMediaByAILabelRequest): SearchMediaByAILabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchMediaByAILabel', 'POST', '/', 'json', false, 'json', request);
}

model SearchMediaByFaceRequest {
  regionId?: string(name='RegionId', position='Host'),
  entityId?: string(name='EntityId', description='The ID of the entity.', example='2d3bf1e35a1e42b5ab338d701efa****', position='Query'),
  faceSearchToken: string(name='FaceSearchToken', description='The token that is used to identify the query. You can use this parameter in the SearchMediaClipByFace operation to specify the same query conditions.

This parameter is required.', example='zxtest-huangxuan-2023-3-7-V1', position='Query'),
  mediaType?: string(name='MediaType', description='The type of the media asset. Valid values:

*   image
*   video', example='video', position='Query'),
  pageNo?: int32(name='PageNo', description='The page number. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 50.', example='10', position='Query'),
  personImageUrl: string(name='PersonImageUrl', description='The URL of the face image.

This parameter is required.', example='https://****.oss-cn-shanghai.aliyuncs.com/input/huangxuan****.jpg', position='Query'),
  searchLibName?: string(name='SearchLibName', description='The name of the search library.', example='test1', position='Query'),
}

model SearchMediaByFaceResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  mediaInfoList?: [ 
    {
      mediaId?: string(name='MediaId', description='The ID of the media asset.', example='3b187b3620c8490886cfc2a9578c****'),
    }
  ](name='MediaInfoList', description='The media assets that meet the conditions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7CA7D615-CFB1-5437-9A12-2D185C3EE6CB'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values: true false', example='true'),
  total?: long(name='Total', description='The total number of data records that meet the specified filter condition.', example='163'),
}

model SearchMediaByFaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchMediaByFaceResponseBody(name='body'),
}

/**
  * @description If you have questions about how to use the media asset search feature in Intelligent Media Services (IMS), contact technical support in the DingTalk group (ID 30415005038).
  * @param request  the request parameters of SearchMediaByFace  SearchMediaByFaceRequest
  * @return SearchMediaByFaceResponse
 */
async function searchMediaByFace(request: SearchMediaByFaceRequest): SearchMediaByFaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchMediaByFace', 'POST', '/', 'json', false, 'json', request);
}

model SearchMediaByHybridRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaId?: string(name='MediaId', description='The ID of the media asset. The details of the media asset are returned.', example='****c469e944b5a856828dc2****', position='Query'),
  mediaType?: string(name='MediaType', example='video', position='Query'),
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  searchLibName?: string(name='SearchLibName', example='test-1', position='Query'),
  text?: string(name='Text', position='Query'),
}

model SearchMediaByHybridResponseBody = {
  code?: string(name='Code', example='200'),
  mediaList?: [ 
    {
      clipInfo?: [ 
        {
          from?: double(name='From', example='2'),
          score?: double(name='Score', example='0.99'),
          to?: double(name='To', example='4'),
        }
      ](name='ClipInfo'),
      mediaId?: string(name='MediaId', example='a18936e0e28771edb59ae6f6f47a****'),
    }
  ](name='MediaList'),
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
  success?: string(name='Success', example='true'),
  total?: long(name='Total', example='30'),
}

model SearchMediaByHybridResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchMediaByHybridResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SearchMediaByHybrid  SearchMediaByHybridRequest
  * @return SearchMediaByHybridResponse
 */
async function searchMediaByHybrid(request: SearchMediaByHybridRequest): SearchMediaByHybridResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchMediaByHybrid', 'POST', '/', 'json', false, 'json', request);
}

model SearchMediaByMultimodalRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaType?: string(name='MediaType', description='The type of the media assets.

Valid values:

*   image
*   video (default)', example='video', position='Query'),
  pageNo?: int32(name='PageNo', description='The page number. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 50.', example='10', position='Query'),
  searchLibName?: string(name='SearchLibName', description='The search library.', example='test-1', position='Query'),
  text?: string(name='Text', description='The content that you want to query. You can describe the content in natural language.', position='Query'),
}

model SearchMediaByMultimodalResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  mediaList?: [ 
    {
      clipInfo?: [ 
        {
          from?: double(name='From', description='The start time of the clip.', example='2'),
          score?: double(name='Score', description='The score.', example='1.2'),
          to?: double(name='To', description='The end time of the clip.', example='4'),
        }
      ](name='ClipInfo', description='The information about the clip.'),
      mediaId?: string(name='MediaId', description='The ID of the media asset.', example='a18936e0e28771edb59ae6f6f47a****'),
    }
  ](name='MediaList', description='The media assets that contain the specified content.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values: true false', example='true'),
  total?: long(name='Total', description='The total number of data records that meet the specified filter condition.', example='20'),
}

model SearchMediaByMultimodalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchMediaByMultimodalResponseBody(name='body'),
}

/**
  * @description If you have questions about how to use the media asset search feature in Intelligent Media Services (IMS), contact technical support in the DingTalk group (ID 30415005038).
  * @param request  the request parameters of SearchMediaByMultimodal  SearchMediaByMultimodalRequest
  * @return SearchMediaByMultimodalResponse
 */
async function searchMediaByMultimodal(request: SearchMediaByMultimodalRequest): SearchMediaByMultimodalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchMediaByMultimodal', 'POST', '/', 'json', false, 'json', request);
}

model SearchMediaClipByFaceRequest {
  regionId?: string(name='RegionId', position='Host'),
  entityId?: string(name='EntityId', description='The ID of the entity.', example='2d3bf1e35a1e42b5ab338d701efa****', position='Query'),
  faceSearchToken: string(name='FaceSearchToken', description='The value of this parameter is the same as that of the FaceSearchToken parameter in the SearchMediaByFace request. This specifies to return media asset clips that meet the same query conditions.

This parameter is required.', example='zxtest-huangxuan-2023-3-7-V1', position='Query'),
  mediaId: string(name='MediaId', description='The ID of the media asset.

This parameter is required.', example='3b187b3620c8490886cfc2a9578c****', position='Query'),
  pageNo?: int32(name='PageNo', description='The page number. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 50.', example='10', position='Query'),
  searchLibName?: string(name='SearchLibName', description='The name of the search library.', example='test1', position='Query'),
}

model SearchMediaClipByFaceResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  mediaClipList?: [ 
    {
      category?: string(name='Category', description='The type of the character. Valid values: celebrity sensitive politician custom unknown', example='celebrity'),
      entityId?: string(name='EntityId', description='The ID of the entity, which is the same as the entity ID returned in tag analysis.', example='1031025****'),
      labelName?: string(name='LabelName', description='The name of the entity.'),
      occurrencesInfos?: [ 
        {
          endTime?: float(name='EndTime', description='The end time of the clip. Unit: seconds. The value is of the Float type.', example='69.06635'),
          startTime?: float(name='StartTime', description='The start time of the clip. Unit: seconds. The value is of the Float type.', example='61.066353'),
          trackData?: [ 
            {
              boxPosition?: {
                h?: int32(name='H', description='The height of the rectangle frame. Unit: pixels.', example='168'),
                w?: int32(name='W', description='The width of the rectangle frame. Unit: pixels.', example='128'),
                x?: int32(name='X', description='The x-axis coordinate of the upper-left corner. Unit: pixels.', example='517'),
                y?: int32(name='Y', description='The y-axis coordinate of the upper-left corner. Unit: pixels.', example='409'),
              }(name='BoxPosition', description='The coordinates of the face.'),
              timestamp?: float(name='Timestamp', description='The timestamp when the face appears in the clip. Unit: seconds. The value is of the Float type.', example='62.03302'),
            }
          ](name='TrackData', description='The information about the face in the clip.'),
        }
      ](name='OccurrencesInfos', description='The information about clips related to the face.'),
      score?: float(name='Score', description='The score of the clip. The value is of the Float type. The value is in the range of [0,1].', example='0.99041677'),
    }
  ](name='MediaClipList', description='The media asset clips that meet the requirements.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E44FFACD-9E90-555A-A09A-6FD3B7335E39'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
  total?: long(name='Total', description='The total number of media asset clips that meet the conditions.', example='5'),
}

model SearchMediaClipByFaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchMediaClipByFaceResponseBody(name='body'),
}

/**
  * @description If you have questions about how to use the media asset search feature in Intelligent Media Services (IMS), contact technical support in the DingTalk group (ID 30415005038).
  * @param request  the request parameters of SearchMediaClipByFace  SearchMediaClipByFaceRequest
  * @return SearchMediaClipByFaceResponse
 */
async function searchMediaClipByFace(request: SearchMediaClipByFaceRequest): SearchMediaClipByFaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchMediaClipByFace', 'POST', '/', 'json', false, 'json', request);
}

model SearchPublicMediaInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  authorized?: boolean(name='Authorized', example='true', position='Query'),
  dynamicMetaDataMatchFields?: string(name='DynamicMetaDataMatchFields', example='"ApprovalStatus=\\"Available\\"&amp;MaterialBags=\\"boutiquemusic\\"&amp;Mood=\\"Nervous\\""', position='Query'),
  entityId?: string(name='EntityId', example='Copyright_Music', position='Query'),
  favorite?: boolean(name='Favorite', example='true', position='Query'),
  mediaIds?: string(name='MediaIds', example='****20b48fb04483915d4f2cd8ac****,****15d4a4b0448391508f2cb486****', position='Query'),
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  sortBy?: string(name='SortBy', example='UsageCount:Desc,UnitPrice:Asc', position='Query'),
}

model SearchPublicMediaInfoResponseBody = {
  publicMediaInfos?: [ 
    {
      authorized?: boolean(name='Authorized', example='true'),
      favorite?: boolean(name='Favorite', example='true'),
      mediaInfo?: {
        dynamicMetaData?: {
          data?: string(name='Data', example='"{\\"AuditionUrl\\": \\"http://xxx\\", \\"AuditionCount\\": 3...}"'),
          type?: string(name='Type', example='system'),
        }(name='DynamicMetaData'),
        mediaBasicInfo?: {
          businessType?: string(name='BusinessType', example='general'),
          category?: string(name='Category', example='category'),
          coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
          createTime?: string(name='CreateTime', example='2020-12-26T06:04:49Z'),
          deletedTime?: string(name='DeletedTime', example='2020-12-29T06:04:49Z'),
          description?: string(name='Description', example='description'),
          mediaId?: string(name='MediaId', description='MediaId', example='icepublic-****87b921bb4a55908a72a0537e****'),
          mediaTags?: string(name='MediaTags'),
          mediaType?: string(name='MediaType', example='audio'),
          modifiedTime?: string(name='ModifiedTime', example='2020-12-26T06:04:50Z'),
          source?: string(name='Source', example='oss'),
          spriteImages?: string(name='SpriteImages', example='[{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]'),
          status?: string(name='Status', example='Normal'),
          title?: string(name='Title', example='title'),
          userData?: string(name='UserData', example='userDataTest'),
        }(name='MediaBasicInfo', description='BasicInfo'),
        mediaId?: string(name='MediaId', example='icepublic-****87b921bb4a55908a72a0537e****'),
      }(name='MediaInfo'),
      remainingAuthTime?: string(name='RemainingAuthTime', example='100'),
    }
  ](name='PublicMediaInfos'),
  requestId?: string(name='RequestId', example='****3CFB-2767-54FD-B311-BD15A4C1****'),
  totalCount?: long(name='TotalCount', example='100'),
}

model SearchPublicMediaInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchPublicMediaInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SearchPublicMediaInfo  SearchPublicMediaInfoRequest
  * @return SearchPublicMediaInfoResponse
 */
async function searchPublicMediaInfo(request: SearchPublicMediaInfoRequest): SearchPublicMediaInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchPublicMediaInfo', 'POST', '/', 'json', false, 'json', request);
}

model SendAIAgentSpeechRequest {
  enableInterrupt?: boolean(name='EnableInterrupt', example='true', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='39f8e0bc005e4f309379701645f4****', position='Query'),
  text: string(name='Text', description='This parameter is required.', position='Query'),
}

model SendAIAgentSpeechResponseBody = {
  requestId?: string(name='RequestId', example='7B117AF5-2A16-412C-B127-FA6175ED1AD0'),
}

model SendAIAgentSpeechResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendAIAgentSpeechResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SendAIAgentSpeech  SendAIAgentSpeechRequest
  * @return SendAIAgentSpeechResponse
 */
async function sendAIAgentSpeech(request: SendAIAgentSpeechRequest): SendAIAgentSpeechResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendAIAgentSpeech', 'POST', '/', 'json', false, 'json', request);
}

model SendLiveSnapshotJobCommandRequest {
  command: string(name='Command', description='This parameter is required.', example='start', position='Body'),
  jobId: string(name='JobId', description='This parameter is required.', example='****a046-263c-3560-978a-fb287782****', position='Body'),
}

model SendLiveSnapshotJobCommandResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model SendLiveSnapshotJobCommandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendLiveSnapshotJobCommandResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SendLiveSnapshotJobCommand  SendLiveSnapshotJobCommandRequest
  * @return SendLiveSnapshotJobCommandResponse
 */
async function sendLiveSnapshotJobCommand(request: SendLiveSnapshotJobCommandRequest): SendLiveSnapshotJobCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendLiveSnapshotJobCommand', 'POST', '/', 'json', true, 'form', request);
}

model SendLiveTranscodeJobCommandRequest {
  command: string(name='Command', description='This parameter is required.', example='stop', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model SendLiveTranscodeJobCommandResponseBody = {
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
}

model SendLiveTranscodeJobCommandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendLiveTranscodeJobCommandResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SendLiveTranscodeJobCommand  SendLiveTranscodeJobCommandRequest
  * @return SendLiveTranscodeJobCommandResponse
 */
async function sendLiveTranscodeJobCommand(request: SendLiveTranscodeJobCommandRequest): SendLiveTranscodeJobCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendLiveTranscodeJobCommand', 'POST', '/', 'json', false, 'json', request);
}

model SetContentAnalyzeConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  auto?: boolean(name='Auto', example='true', position='Query'),
  saveType?: string(name='SaveType', example='TEXT,FACE', position='Query'),
  templateId?: string(name='TemplateId', example='S00000101-100070', position='Query'),
}

model SetContentAnalyzeConfigResponseBody = {
  requestId?: string(name='RequestId', example='953CFD27-4A2C-54AD-857F-B79EF3A338E0'),
  success?: boolean(name='Success', example='true'),
}

model SetContentAnalyzeConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetContentAnalyzeConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetContentAnalyzeConfig  SetContentAnalyzeConfigRequest
  * @return SetContentAnalyzeConfigResponse
 */
async function setContentAnalyzeConfig(request: SetContentAnalyzeConfigRequest): SetContentAnalyzeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetContentAnalyzeConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetDefaultCustomTemplateRequest {
  templateId: string(name='TemplateId', description='This parameter is required.', example='****d80e4e4044975745c14b****', position='Query'),
}

model SetDefaultCustomTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model SetDefaultCustomTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDefaultCustomTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetDefaultCustomTemplate  SetDefaultCustomTemplateRequest
  * @return SetDefaultCustomTemplateResponse
 */
async function setDefaultCustomTemplate(request: SetDefaultCustomTemplateRequest): SetDefaultCustomTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDefaultCustomTemplate', 'POST', '/', 'json', false, 'json', request);
}

model SetDefaultStorageLocationRequest {
  regionId?: string(name='RegionId', position='Host'),
  bucket?: string(name='Bucket', example='oss-test-bucket', position='Query'),
  path?: string(name='Path', example='ims/dir', position='Query'),
  storageType?: string(name='StorageType', example='user_oss_bucket', position='Query'),
}

model SetDefaultStorageLocationResponseBody = {
  requestId?: string(name='RequestId', example='******5A-CAAC-4850-A3AF-B74606******'),
  success?: boolean(name='Success', example='true'),
}

model SetDefaultStorageLocationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDefaultStorageLocationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetDefaultStorageLocation  SetDefaultStorageLocationRequest
  * @return SetDefaultStorageLocationResponse
 */
async function setDefaultStorageLocation(request: SetDefaultStorageLocationRequest): SetDefaultStorageLocationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDefaultStorageLocation', 'POST', '/', 'json', false, 'json', request);
}

model SetEventCallbackRequest {
  regionId?: string(name='RegionId', position='Host'),
  authKey?: string(name='AuthKey', example='TestKey001', position='Query'),
  authSwitch?: string(name='AuthSwitch', example='on', position='Query'),
  callbackQueueName?: string(name='CallbackQueueName', example='ice-callback-queue', position='Query'),
  callbackType?: string(name='CallbackType', example='HTTP', position='Query'),
  callbackURL?: string(name='CallbackURL', example='http://xxx.yyy/callback', position='Query'),
  eventTypeList?: string(name='EventTypeList', example='ProduceMediaComplete', position='Query'),
}

model SetEventCallbackResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model SetEventCallbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetEventCallbackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetEventCallback  SetEventCallbackRequest
  * @return SetEventCallbackResponse
 */
async function setEventCallback(request: SetEventCallbackRequest): SetEventCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetEventCallback', 'POST', '/', 'json', false, 'json', request);
}

model SetNotifyConfigRequest {
  AIAgentId: string(name='AIAgentId', description='This parameter is required.', example='39f8e0bc005e4f309379701645f4****', position='Query'),
  callbackUrl?: string(name='CallbackUrl', example='http://customer.com/callback', position='Query'),
  enableNotify: boolean(name='EnableNotify', description='This parameter is required.', example='true', position='Query'),
  eventTypes?: string(name='EventTypes', example='agent_start,agent_stop,error', position='Query'),
  token?: string(name='Token', example='eyJhcHBpZCI6ICIxMjM0MTIzNxxxxx', position='Query'),
}

model SetNotifyConfigResponseBody = {
  requestId?: string(name='RequestId', example='771A1414-27BF-53E6-AB73-EFCB*****ACF'),
}

model SetNotifyConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetNotifyConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetNotifyConfig  SetNotifyConfigRequest
  * @return SetNotifyConfigResponse
 */
async function setNotifyConfig(request: SetNotifyConfigRequest): SetNotifyConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetNotifyConfig', 'POST', '/', 'json', false, 'json', request);
}

model StartAIAgentInstanceRequest {
  AIAgentId: string(name='AIAgentId', description='This parameter is required.', example='39f8e0bc005e4f309379701645f4****', position='Query'),
  runtimeConfig: AIAgentRuntimeConfig(name='RuntimeConfig', description='This parameter is required.', shrink='json', position='Query'),
  templateConfig?: AIAgentTemplateConfig(name='TemplateConfig', shrink='json', position='Query'),
  userData?: string(name='UserData', example='{"Email":"johndoe@example.com","Preferences":{"Language":"en"}}', position='Query'),
}

model StartAIAgentInstanceResponseBody = {
  instanceId?: string(name='InstanceId', example='39f8e0bc005e4f309379701645f4****'),
  requestId?: string(name='RequestId', example='7B117AF5-2A16-412C-B127-FA6175ED1AD0'),
}

model StartAIAgentInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartAIAgentInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartAIAgentInstance  StartAIAgentInstanceRequest
  * @return StartAIAgentInstanceResponse
 */
async function startAIAgentInstance(request: StartAIAgentInstanceRequest): StartAIAgentInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartAIAgentInstance', 'POST', '/', 'json', false, 'json', request);
}

model StartRtcRobotInstanceRequest {
  authToken: string(name='AuthToken', description='This parameter is required.', example='**********', position='Query'),
  channelId: string(name='ChannelId', description='This parameter is required.', example='testId', position='Query'),
  config?: {
    asrMaxSilence?: int32(name='AsrMaxSilence'),
    enableVoiceInterrupt?: boolean(name='EnableVoiceInterrupt', example='true'),
    greeting?: string(name='Greeting'),
    useVoiceprint?: boolean(name='UseVoiceprint'),
    userOfflineTimeout?: int32(name='UserOfflineTimeout'),
    userOnlineTimeout?: int32(name='UserOnlineTimeout'),
    voiceId?: string(name='VoiceId', example='zhixiaoxia'),
    voiceprintId?: string(name='VoiceprintId'),
  }(name='Config', shrink='json', position='Query'),
  robotId: string(name='RobotId', description='This parameter is required.', example='ca28b08ad3464ebcb42e5c0f7c6d2e89', position='Query'),
  userData?: string(name='UserData', example='{}', position='Query'),
  userId: string(name='UserId', description='This parameter is required.', example='my-robot', position='Query'),
}

model StartRtcRobotInstanceResponseBody = {
  instanceId?: string(name='InstanceId', example='727dc0e296014bb58670940a3da95592'),
  requestId?: string(name='RequestId', description='Id of the request', example='11DE0AB3-603B-5055-8A72-9C424854F983'),
}

model StartRtcRobotInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartRtcRobotInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartRtcRobotInstance  StartRtcRobotInstanceRequest
  * @return StartRtcRobotInstanceResponse
 */
async function startRtcRobotInstance(request: StartRtcRobotInstanceRequest): StartRtcRobotInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartRtcRobotInstance', 'POST', '/', 'json', false, 'json', request);
}

model StartWorkflowRequest {
  taskInput?: string(name='TaskInput', example='{
      "Type": "Media",
      "Media": "******30706071edbfe290b488******"
}', position='Query'),
  userData?: string(name='UserData', position='Query'),
  workflowId?: string(name='WorkflowId', example='******f0e54971ecbffd472190******', position='Query'),
}

model StartWorkflowResponseBody = {
  requestId?: string(name='RequestId', example='******42-E8E1-4FBB-8E52-F4225C******'),
  taskId?: string(name='TaskId', example='******22dad741d086a50325f9******'),
}

model StartWorkflowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartWorkflowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartWorkflow  StartWorkflowRequest
  * @return StartWorkflowResponse
 */
async function startWorkflow(request: StartWorkflowRequest): StartWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartWorkflow', 'POST', '/', 'json', false, 'json', request);
}

model StopAIAgentInstanceRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='39f8e0bc005e4f309379701645f4****', position='Query'),
}

model StopAIAgentInstanceResponseBody = {
  requestId?: string(name='RequestId', example='7B117AF5-2A16-412C-B127-FA6175ED1AD0'),
}

model StopAIAgentInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopAIAgentInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopAIAgentInstance  StopAIAgentInstanceRequest
  * @return StopAIAgentInstanceResponse
 */
async function stopAIAgentInstance(request: StopAIAgentInstanceRequest): StopAIAgentInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopAIAgentInstance', 'POST', '/', 'json', false, 'json', request);
}

model StopRtcRobotInstanceRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='727dc0e296014bb58670940a3da95592', position='Query'),
}

model StopRtcRobotInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='AC84E5DD-AB56-56C0-A992-07ECB82008CA'),
}

model StopRtcRobotInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopRtcRobotInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopRtcRobotInstance  StopRtcRobotInstanceRequest
  * @return StopRtcRobotInstanceResponse
 */
async function stopRtcRobotInstance(request: StopRtcRobotInstanceRequest): StopRtcRobotInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopRtcRobotInstance', 'POST', '/', 'json', false, 'json', request);
}

model SubmitASRJobRequest {
  description?: string(name='Description', example='测试描述', position='Query'),
  duration?: string(name='Duration', example='00:00:10', position='Query'),
  inputFile?: string(name='InputFile', example='oss://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4 或 ****20b48fb04483915d4f2cd8ac****', position='Query'),
  startTime?: string(name='StartTime', example='00:00:00', position='Query'),
  title?: string(name='Title', example='测试标题', position='Query'),
  userData?: string(name='UserData', example='{"user":"data"}', position='Query'),
}

model SubmitASRJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  state?: string(name='State', example='Finished'),
}

model SubmitASRJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitASRJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitASRJob  SubmitASRJobRequest
  * @return SubmitASRJobResponse
 */
async function submitASRJob(request: SubmitASRJobRequest): SubmitASRJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitASRJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitAudioProduceJobRequest {
  description?: string(name='Description', example='任务描述  长度不超过1024字节  UTF8编码', position='Query'),
  editingConfig: string(name='EditingConfig', description='This parameter is required.', example='{"voice":"Siqi","format":"MP3","volume":50}', position='Query'),
  inputConfig: string(name='InputConfig', description='This parameter is required.', example='测试文本', position='Query'),
  outputConfig: string(name='OutputConfig', description='This parameter is required.', example='{"bucket":"bucket","object":"objeck"}', position='Query'),
  overwrite?: boolean(name='Overwrite', example='true', position='Query'),
  title?: string(name='Title', example='任务标题。若不提供，根据日期自动生成默认title  长度不超过128字节  UTF8编码', position='Query'),
  userData?: string(name='UserData', example='{"user":"data"}', position='Query'),
}

model SubmitAudioProduceJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  mediaId?: string(name='MediaId', example='****2bcbfcfa30fccb36f72dca22****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  state?: string(name='State', example='Created'),
}

model SubmitAudioProduceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitAudioProduceJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitAudioProduceJob  SubmitAudioProduceJobRequest
  * @return SubmitAudioProduceJobResponse
 */
async function submitAudioProduceJob(request: SubmitAudioProduceJobRequest): SubmitAudioProduceJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitAudioProduceJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitAvatarTrainingJobRequest {
  jobId: string(name='JobId', description='This parameter is required.', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model SubmitAvatarTrainingJobResponseBody = {
  data?: {
    jobId?: string(name='JobId', example='****29faef8144638ba42eb8e037****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='*****ACB-44F2-5F2D-88D7-1283E70*****'),
  success?: boolean(name='Success', example='true'),
}

model SubmitAvatarTrainingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitAvatarTrainingJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitAvatarTrainingJob  SubmitAvatarTrainingJobRequest
  * @return SubmitAvatarTrainingJobResponse
 */
async function submitAvatarTrainingJob(request: SubmitAvatarTrainingJobRequest): SubmitAvatarTrainingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitAvatarTrainingJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitAvatarVideoJobRequest {
  description?: string(name='Description', example='测试描述', position='Query'),
  editingConfig?: string(name='EditingConfig', example='{"AvatarId":"yunqiao"}', position='Query'),
  inputConfig?: string(name='InputConfig', position='Query'),
  outputConfig?: string(name='OutputConfig', example='{"MediaURL":"https://your-bucket.oss-cn-shanghai.aliyuncs.com/xxx.mp4","Width":1920,"Height":1080}', position='Query'),
  title?: string(name='Title', example='测试标题', position='Query'),
  userData?: string(name='UserData', example='{"user":"data","env":"prod"}', position='Query'),
}

model SubmitAvatarVideoJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  mediaId?: string(name='MediaId', example='******70dcc471edaf00e6f6f4******'),
  requestId?: string(name='RequestId', description='Id of the request', example='******11-DB8D-4A9A-875B-275798******'),
}

model SubmitAvatarVideoJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitAvatarVideoJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitAvatarVideoJob  SubmitAvatarVideoJobRequest
  * @return SubmitAvatarVideoJobResponse
 */
async function submitAvatarVideoJob(request: SubmitAvatarVideoJobRequest): SubmitAvatarVideoJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitAvatarVideoJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitBatchMediaProducingJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  clientToken?: string(name='ClientToken', example='****12e8864746a0a398****', position='Query'),
  editingConfig?: string(name='EditingConfig', example='{
  "MediaConfig": {
      "Volume": 0
  },
  "SpeechConfig": {
      "Volume": 1
  },
 "BackgroundMusicConfig": {
      "Volume": 0.3
  }
}', position='Body'),
  inputConfig?: string(name='InputConfig', position='Body'),
  outputConfig?: string(name='OutputConfig', example='{
  "MediaURL": "http://xxx.oss-cn-shanghai.aliyuncs.com/xxx_{index}.mp4",
  "Count": 20,
  "MaxDuration": 15,
  "Width": 1080,
  "Height": 1920,
  "Video": {"Crf": 27}
}', position='Query'),
  userData?: string(name='UserData', position='Query'),
}

model SubmitBatchMediaProducingJobResponseBody = {
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
  requestId?: string(name='RequestId', example='****36-3C1E-4417-BDB2-1E034F****'),
}

model SubmitBatchMediaProducingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitBatchMediaProducingJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitBatchMediaProducingJob  SubmitBatchMediaProducingJobRequest
  * @return SubmitBatchMediaProducingJobResponse
 */
async function submitBatchMediaProducingJob(request: SubmitBatchMediaProducingJobRequest): SubmitBatchMediaProducingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitBatchMediaProducingJob', 'POST', '/', 'json', true, 'form', request);
}

model SubmitCustomizedVoiceJobRequest {
  demoAudioMediaURL?: string(name='DemoAudioMediaURL', example='https://your-bucket.oss-cn-shanghai.aliyuncs.com/demo.MP3', position='Query'),
  voiceId: string(name='VoiceId', description='This parameter is required.', example='xiaozhuan', maxLength=32, position='Query'),
}

model SubmitCustomizedVoiceJobResponseBody = {
  data?: {
    jobId?: string(name='JobId', example='****d718e2ff4f018ccf419a7b71****'),
    voiceId?: string(name='VoiceId', example='xiaozhuan'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model SubmitCustomizedVoiceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitCustomizedVoiceJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitCustomizedVoiceJob  SubmitCustomizedVoiceJobRequest
  * @return SubmitCustomizedVoiceJobResponse
 */
async function submitCustomizedVoiceJob(request: SubmitCustomizedVoiceJobRequest): SubmitCustomizedVoiceJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitCustomizedVoiceJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitDNAJobRequest {
  config?: string(name='Config', example='{"SaveType": "save","MediaType"":"video"}', position='Query'),
  DBId: string(name='DBId', description='This parameter is required.', example='2288c6ca184c0e47098a5b665e2a12****', position='Query'),
  input: {
    media: string(name='Media', description='This parameter is required.', example='1b1b9cd148034739af413150fded****'),
    type: string(name='Type', description='This parameter is required.', example='Media'),
  }(name='Input', description='This parameter is required.', shrink='json', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pipelineId?: string(name='PipelineId', example='5246b8d12a62433ab77845074039****', position='Query'),
  primaryKey: string(name='PrimaryKey', description='This parameter is required.', example='3ca84a39a9024f19853b21be9cf9****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateId?: string(name='TemplateId', example='S00000101-100060', position='Query'),
  userData?: string(name='UserData', example='userData', position='Query'),
}

model SubmitDNAJobResponseBody = {
  jobId?: string(name='JobId', example='88c6ca184c0e47098a5b665e2****'),
  requestId?: string(name='RequestId', example='25818875-5F78-4A13-BEF6-D7393642CA58'),
}

model SubmitDNAJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitDNAJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitDNAJob  SubmitDNAJobRequest
  * @return SubmitDNAJobResponse
 */
async function submitDNAJob(request: SubmitDNAJobRequest): SubmitDNAJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitDNAJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitDynamicChartJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  axisParams?: string(name='AxisParams', example='{"FontFile":"Microsoft YaHei","XAxisFontSize":"30","YAxisFontSize":"30","XAxisFontInterval":"30","AxisColor":"30"}', position='Query'),
  background?: string(name='Background', example='{"Color":"#000000","ImageUrl":"http://your-bucket.oss-cn-shanghai.aliyuncs.com/obj.jpg"}', position='Query'),
  chartConfig?: string(name='ChartConfig', example='{"Style":"Normal","TitleStartTime":"3000","ChartStartTime":"3000","VideoDuration":"15000"}', position='Query'),
  chartTitle?: string(name='ChartTitle', position='Query'),
  chartType: string(name='ChartType', description='This parameter is required.', example='Line', position='Query'),
  dataSource?: string(name='DataSource', position='Query'),
  description?: string(name='Description', position='Query'),
  input: string(name='Input', description='This parameter is required.', example='{"XlsFile":"https://your-bucket.oss-cn-shanghai.aliyuncs.com/obj.xls"}', position='Query'),
  outputConfig: string(name='OutputConfig', description='This parameter is required.', example='{"MediaURL":"https://your-bucket.oss-cn-shanghai.aliyuncs.com/obj.mp4","Bitrate":2000,"Width":800,"Height":680}', position='Query'),
  subtitle?: string(name='Subtitle', position='Query'),
  title?: string(name='Title', position='Query'),
  unit?: string(name='Unit', position='Query'),
  userData?: string(name='UserData', example='{"user":"data"}', position='Query'),
}

model SubmitDynamicChartJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model SubmitDynamicChartJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitDynamicChartJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitDynamicChartJob  SubmitDynamicChartJobRequest
  * @return SubmitDynamicChartJobResponse
 */
async function submitDynamicChartJob(request: SubmitDynamicChartJobRequest): SubmitDynamicChartJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitDynamicChartJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitDynamicImageJobRequest {
  input: {
    media: string(name='Media', description='This parameter is required.', example='oss://bucket/object.mp4'),
    type: string(name='Type', description='This parameter is required.', example='OSS'),
  }(name='Input', description='This parameter is required.', shrink='json', position='Query'),
  name?: string(name='Name', example='SampleJob', position='Query'),
  output: {
    media: string(name='Media', description='This parameter is required.', example='****96e8864746a0b6f3****'),
    type: string(name='Type', description='This parameter is required.', example='Media'),
  }(name='Output', description='This parameter is required.', shrink='json', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='****96e8864746a0b6f3****'),
    priority?: int32(name='Priority', example='6'),
  }(name='ScheduleConfig', shrink='json', position='Query'),
  templateConfig: {
    overwriteParams?: {
      format?: string(name='Format', example='gif'),
      fps?: int32(name='Fps', example='15'),
      height?: int32(name='Height', example='720'),
      longShortMode?: boolean(name='LongShortMode', example='false'),
      scanMode?: string(name='ScanMode', example='progressive'),
      timeSpan?: {
        duration?: string(name='Duration'),
        end?: string(name='End'),
        seek?: string(name='Seek'),
      }(name='TimeSpan'),
      width?: int32(name='Width', example='1024'),
    }(name='OverwriteParams'),
    templateId: string(name='TemplateId', description='This parameter is required.', example='****96e8864746a0b6f3****'),
  }(name='TemplateConfig', description='This parameter is required.', shrink='json', position='Query'),
  userData?: string(name='UserData', example='{"SampleKey": "SampleValue"}', position='Query'),
}

model SubmitDynamicImageJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model SubmitDynamicImageJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitDynamicImageJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitDynamicImageJob  SubmitDynamicImageJobRequest
  * @return SubmitDynamicImageJobResponse
 */
async function submitDynamicImageJob(request: SubmitDynamicImageJobRequest): SubmitDynamicImageJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitDynamicImageJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitIProductionJobRequest {
  functionName: string(name='FunctionName', description='This parameter is required.', example='Cover', position='Query'),
  input: {
    media: string(name='Media', description='This parameter is required.', example='oss://bucket/object'),
    type: string(name='Type', description='This parameter is required.', example='OSS'),
  }(name='Input', description='This parameter is required.', shrink='json', position='Query'),
  jobParams?: string(name='JobParams', example='{"Model":"gif"}', position='Query'),
  modelId?: string(name='ModelId', position='Query'),
  name?: string(name='Name', position='Query'),
  output: {
    media: string(name='Media', description='This parameter is required.', example='oss://bucket/object'),
    type: string(name='Type', description='This parameter is required.', example='OSS'),
  }(name='Output', description='This parameter is required.', shrink='json', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='5246b8d12a62433ab77845074039c3dc'),
    priority?: int32(name='Priority', example='6'),
  }(name='ScheduleConfig', shrink='json', position='Query'),
  templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  userData?: string(name='UserData', example='{"test":1}', position='Query'),
}

model SubmitIProductionJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', example='C1849434-FC47-5DC1-92B6-F7EAAFE3851E'),
}

model SubmitIProductionJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitIProductionJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitIProductionJob  SubmitIProductionJobRequest
  * @return SubmitIProductionJobResponse
 */
async function submitIProductionJob(request: SubmitIProductionJobRequest): SubmitIProductionJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitIProductionJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitLiveEditingJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  clips: string(name='Clips', description='This parameter is required.', example='[{\\"StartTime\\": \\" 2021-06-21T08:01:00Z\\",  \\"EndTime\\": \\" 2021-06-21T08:03:00Z\\" ,  "AppName": "app", "DomainName": "domain.com", "StreamName": "stream"},  {\\"StartTime\\": \\" 2021-06-21T08:05:00Z\\",  \\"EndTime\\": \\" 2021-06-21T08:09:00Z\\" }]', position='Query'),
  liveStreamConfig?: string(name='LiveStreamConfig', example='{ "AppName": "app", "DomainName": "domain.com", "StreamName": "stream"  }', position='Query'),
  mediaProduceConfig?: string(name='MediaProduceConfig', example='{ "Mode": "AccurateFast"}', position='Query'),
  outputMediaConfig?: string(name='OutputMediaConfig', position='Query'),
  outputMediaTarget?: string(name='OutputMediaTarget', position='Query'),
  projectId?: string(name='ProjectId', example='****fddd7748b58bf1d47e95****', position='Query'),
  userData?: string(name='UserData', example='{"key": "value"}', position='Query'),
}

model SubmitLiveEditingJobResponseBody = {
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
  mediaId?: string(name='MediaId', example='****c469e944b5a856828dc2****'),
  mediaURL?: string(name='MediaURL', example='http://test-bucket.cn-shanghai.aliyuncs.com/test.mp4'),
  projectId?: string(name='ProjectId', example='****fddd7748b58bf1d47e95****'),
  requestId?: string(name='RequestId', example='****36-3C1E-4417-BDB2-1E034F****'),
  vodMediaId?: string(name='VodMediaId', example='****d7578s4h75ci945c14b****'),
}

model SubmitLiveEditingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitLiveEditingJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitLiveEditingJob  SubmitLiveEditingJobRequest
  * @return SubmitLiveEditingJobResponse
 */
async function submitLiveEditingJob(request: SubmitLiveEditingJobRequest): SubmitLiveEditingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitLiveEditingJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitLiveRecordJobRequest {
  name: string(name='Name', description='代表资源名称的资源属性字段

This parameter is required.', example='live stream record 1', position='Body'),
  notifyUrl?: string(name='NotifyUrl', description='回调地址', example='https://example.com/imsnotify', position='Body'),
  recordOutput: {
    bucket?: string(name='Bucket', example='imsbucket1'),
    endpoint?: string(name='Endpoint', example='oss-cn-hangzhou.aliyuncs.com'),
    type: string(name='Type', description='This parameter is required.', example='oss'),
  }(name='RecordOutput', description='This parameter is required.', shrink='json', position='Body'),
  streamInput: {
    type: string(name='Type', description='This parameter is required.', example='rtmp'),
    url?: string(name='Url', example='rtmp://example.com/live/stream1'),
  }(name='StreamInput', description='This parameter is required.', shrink='json', position='Body'),
  templateId: string(name='TemplateId', description='录制模板ID

This parameter is required.', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66', position='Body'),
}

model SubmitLiveRecordJobResponseBody = {
  jobId?: string(name='JobId', example='ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66'),
  requestId?: string(name='RequestId', example='BEA98A0C-7870-15FE-B96F-8880BB600A2C'),
}

model SubmitLiveRecordJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitLiveRecordJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitLiveRecordJob  SubmitLiveRecordJobRequest
  * @return SubmitLiveRecordJobResponse
 */
async function submitLiveRecordJob(request: SubmitLiveRecordJobRequest): SubmitLiveRecordJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitLiveRecordJob', 'POST', '/', 'json', true, 'form', request);
}

model SubmitLiveSnapshotJobRequest {
  callbackUrl?: string(name='CallbackUrl', example='http://www.aliyun.com/snapshot/callback', position='Body'),
  jobName: string(name='JobName', description='This parameter is required.', position='Body'),
  snapshotOutput: {
    bucket: string(name='Bucket', description='This parameter is required.', example='testbucket'),
    endpoint: string(name='Endpoint', description='This parameter is required.', example='oss-cn-shanghai.aliyuncs.com'),
    storageType: string(name='StorageType', description='This parameter is required.', example='oss'),
  }(name='SnapshotOutput', description='This parameter is required.', shrink='json', position='Body'),
  streamInput: {
    type: string(name='Type', description='This parameter is required.', example='rtmp'),
    url: string(name='Url', description='This parameter is required.', example='rtmp://www.aliyun.com/stream'),
  }(name='StreamInput', description='This parameter is required.', shrink='json', position='Body'),
  templateId: string(name='TemplateId', description='This parameter is required.', example='****a046-263c-3560-978a-fb287782****', position='Body'),
}

model SubmitLiveSnapshotJobResponseBody = {
  jobId?: string(name='JobId', example='****a046-263c-3560-978a-fb287666****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model SubmitLiveSnapshotJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitLiveSnapshotJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitLiveSnapshotJob  SubmitLiveSnapshotJobRequest
  * @return SubmitLiveSnapshotJobResponse
 */
async function submitLiveSnapshotJob(request: SubmitLiveSnapshotJobRequest): SubmitLiveSnapshotJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitLiveSnapshotJob', 'POST', '/', 'json', true, 'form', request);
}

model SubmitLiveTranscodeJobRequest {
  name: string(name='Name', description='This parameter is required.', example='task1', minLength=1, maxLength=128, position='Query'),
  startMode: int32(name='StartMode', description='This parameter is required.', example='0', position='Query'),
  streamInput: {
    inputUrl: string(name='InputUrl', description='This parameter is required.', example='rtmp://mydomain/app/stream1'),
    type: string(name='Type', description='This parameter is required.', example='rtmp'),
  }(name='StreamInput', description='This parameter is required.', shrink='json', position='Query'),
  templateId: string(name='TemplateId', description='This parameter is required.', example='****96e8864746a0b6f3****', position='Query'),
  timedConfig?: {
    endTime?: string(name='EndTime', example='2022-07-20T08:20:32Z'),
    startTime?: string(name='StartTime', example='2022-02-21T00:00:00Z'),
  }(name='TimedConfig', shrink='json', position='Query'),
  transcodeOutput: {
    domainName?: string(name='DomainName', example='mydomain'),
    type: string(name='Type', description='This parameter is required.', example='LiveCenter'),
  }(name='TranscodeOutput', description='This parameter is required.', shrink='json', position='Query'),
}

model SubmitLiveTranscodeJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
}

model SubmitLiveTranscodeJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitLiveTranscodeJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitLiveTranscodeJob  SubmitLiveTranscodeJobRequest
  * @return SubmitLiveTranscodeJobResponse
 */
async function submitLiveTranscodeJob(request: SubmitLiveTranscodeJobRequest): SubmitLiveTranscodeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitLiveTranscodeJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitMediaAiAnalysisJobRequest {
  analysisParams?: string(name='AnalysisParams', description='The analysis parameters.', example='{"nlpParams":{"sourceLanguage":"cn","diarizationEnabled":true,"speakerCount":0,"summarizationEnabled":false,"translationEnabled":false}}', position='Query'),
  input?: string(name='Input', description='The media asset that you want to analyze. You can specify an Object Storage Service (OSS) URL, a media asset ID, or an external URL.', example='{"MediaType":"video","Media":"https://xxx.com/your_movie.mp4"}', position='Query'),
}

model SubmitMediaAiAnalysisJobResponseBody = {
  mediaId?: string(name='MediaId', description='The ID of the media asset.', example='******b48fb04483915d4f2cd8******'),
  requestId?: string(name='RequestId', description='The request ID.', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
}

model SubmitMediaAiAnalysisJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitMediaAiAnalysisJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitMediaAiAnalysisJob  SubmitMediaAiAnalysisJobRequest
  * @return SubmitMediaAiAnalysisJobResponse
 */
async function submitMediaAiAnalysisJob(request: SubmitMediaAiAnalysisJobRequest): SubmitMediaAiAnalysisJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitMediaAiAnalysisJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitMediaCensorJobRequest {
  barrages?: string(name='Barrages', example='hello world', position='Query'),
  coverImages?: string(name='CoverImages', example='[{"Bucket":"example-bucket-****","Location":"oss-cn-shanghai","Object":"example-****.jpeg","RoleArn":"acs:ram::1997018457688683:role/AliyunICEDefaultRole"}]', position='Query'),
  description?: string(name='Description', example='example description', position='Query'),
  input?: {
    media?: string(name='Media', example='1b1b9cd148034739af413150fded****'),
    type?: string(name='Type', example='Media'),
  }(name='Input', shrink='json', position='Query'),
  notifyUrl?: string(name='NotifyUrl', example='mns://125340688170****.oss-cn-shanghai.aliyuncs.com/queues/example-pipeline', position='Query'),
  output?: string(name='Output', example='oss://sashimi-cn-shanghai/censor/snapshot-{Count}.jpg', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='5246b8d12a62433ab77845074039****'),
    priority?: int32(name='Priority', example='6'),
  }(name='ScheduleConfig', shrink='json', position='Query'),
  templateId?: string(name='TemplateId', example='S00000001-100060', position='Query'),
  title?: string(name='Title', example='Hello World', position='Query'),
  userData?: string(name='UserData', example='UserDatatestid-001-****', position='Query'),
}

model SubmitMediaCensorJobResponseBody = {
  jobId?: string(name='JobId', example='88c6ca184c0e47098a5b665e2****'),
  requestId?: string(name='RequestId', example='25818875-5F78-4A13-BEF6-D7393642CA58'),
}

model SubmitMediaCensorJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitMediaCensorJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitMediaCensorJob  SubmitMediaCensorJobRequest
  * @return SubmitMediaCensorJobResponse
 */
async function submitMediaCensorJob(request: SubmitMediaCensorJobRequest): SubmitMediaCensorJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitMediaCensorJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitMediaInfoJobRequest {
  input: {
    media: string(name='Media', description='This parameter is required.', example='oss://bucket/path/to/video.mp4'),
    type: string(name='Type', description='This parameter is required.', example='OSS'),
  }(name='Input', description='This parameter is required.', shrink='json', position='Query'),
  name?: string(name='Name', example='job-name', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
    priority?: int32(name='Priority', example='5'),
  }(name='ScheduleConfig', shrink='json', position='Query'),
  userData?: string(name='UserData', example='user-data', position='Query'),
}

model SubmitMediaInfoJobResponseBody = {
  mediaInfoJob?: {
    async?: boolean(name='Async', example='true'),
    finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
    input?: {
      media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
      type?: string(name='Type', example='OSS'),
    }(name='Input'),
    jobId?: string(name='JobId', example='ab4802364a2e49208c99efab82dfa8e8'),
    mediaInfoProperty?: {
      audioStreamInfoList?: [ 
        {
          bitrate?: string(name='Bitrate', example='0.f'),
          channelLayout?: string(name='ChannelLayout', example='stereo'),
          channels?: string(name='Channels', example='2'),
          codecLongName?: string(name='CodecLongName', example='AAC (Advanced Audio Coding)'),
          codecName?: string(name='CodecName', example='aac'),
          codecTag?: string(name='CodecTag', example='0x000f'),
          codecTagString?: string(name='CodecTagString', example='[15][0][0][0]'),
          codecTimeBase?: string(name='CodecTimeBase', example='1/44100'),
          duration?: string(name='Duration', example='403.039989'),
          index?: string(name='Index', example='1'),
          lang?: string(name='Lang', example='us'),
          sampleFmt?: string(name='SampleFmt', example='fltp'),
          sampleRate?: string(name='SampleRate', example='44100'),
          startTime?: string(name='StartTime', example='1.473556'),
          timebase?: string(name='Timebase', example='1/90000'),
        }
      ](name='AudioStreamInfoList'),
      fileBasicInfo?: {
        bitrate?: string(name='Bitrate', example='888.563'),
        duration?: string(name='Duration', example='403.039999'),
        fileName?: string(name='FileName', example='file.m3u8'),
        fileSize?: string(name='FileSize', example='31737'),
        fileStatus?: string(name='FileStatus', example='Normal'),
        fileType?: string(name='FileType', example='source_file'),
        fileUrl?: string(name='FileUrl', example='http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8'),
        formatName?: string(name='FormatName', example='hls,applehttp'),
        height?: string(name='Height', example='478'),
        mediaId?: string(name='MediaId', example='2b36bd19c13f4145b094c0cad80dbce5'),
        region?: string(name='Region', example='cn-shanghai'),
        width?: string(name='Width', example='848'),
      }(name='FileBasicInfo'),
      videoStreamInfoList?: [ 
        {
          avgFps?: string(name='Avg_fps', example='25.0'),
          bitRate?: string(name='Bit_rate', example='888.563'),
          codecLongName?: string(name='Codec_long_name', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
          codecName?: string(name='Codec_name', example='h264'),
          codecTag?: string(name='Codec_tag', example='0x001b'),
          codecTagString?: string(name='Codec_tag_string', example='[27][0][0][0]'),
          codecTimeBase?: string(name='Codec_time_base', example='1/50'),
          dar?: string(name='Dar', example='16:9'),
          duration?: string(name='Duration', example='403.039989'),
          fps?: string(name='Fps', example='25.0'),
          hasBFrames?: string(name='Has_b_frames', example='2'),
          height?: string(name='Height', example='478'),
          index?: string(name='Index', example='0'),
          lang?: string(name='Lang', example='zh'),
          level?: string(name='Level', example='31'),
          numFrames?: string(name='NumFrames', example='10040'),
          pixFmt?: string(name='PixFmt', example='yuv420p'),
          profile?: string(name='Profile', example='High'),
          rotate?: string(name='Rotate', example='0'),
          sar?: string(name='Sar', example='478:477'),
          startTime?: string(name='Start_time', example='1.473556'),
          timeBase?: string(name='Time_base', example='1/90000'),
          width?: string(name='Width', example='848'),
        }
      ](name='VideoStreamInfoList'),
    }(name='MediaInfoProperty'),
    name?: string(name='Name', example='job-name'),
    requestId?: string(name='RequestId', example='4879B9DE-E4B6-19DC-91F5-9D5F4DCE4168'),
    scheduleConfig?: {
      pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
      priority?: int32(name='Priority', example='5'),
    }(name='ScheduleConfig'),
    status?: string(name='Status', example='Init'),
    submitResultJson?: map[string]any(name='SubmitResultJson', example='{}'),
    submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
    triggerSource?: string(name='TriggerSource', example='API'),
    userData?: string(name='UserData', example='user-data'),
  }(name='MediaInfoJob', description='MediaInfoJobDTO'),
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model SubmitMediaInfoJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitMediaInfoJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitMediaInfoJob  SubmitMediaInfoJobRequest
  * @return SubmitMediaInfoJobResponse
 */
async function submitMediaInfoJob(request: SubmitMediaInfoJobRequest): SubmitMediaInfoJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitMediaInfoJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitMediaProducingJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  clientToken?: string(name='ClientToken', example='****12e8864746a0a398****', position='Query'),
  clipsParam?: string(name='ClipsParam', position='Query'),
  editingProduceConfig?: string(name='EditingProduceConfig', position='Query'),
  mediaMetadata?: string(name='MediaMetadata', example='{
      "Title":"test-title",
      "Tags":"test-tags1,tags2"
}', position='Query'),
  outputMediaConfig: string(name='OutputMediaConfig', description='This parameter is required.', example='{"MediaURL":"https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4"}', position='Query'),
  outputMediaTarget?: string(name='OutputMediaTarget', example='oss-object', position='Query'),
  projectId?: string(name='ProjectId', example='xxxxxfb2101cb318xxxxx', position='Query'),
  projectMetadata?: string(name='ProjectMetadata', position='Query'),
  source?: string(name='Source', example='OPENAPI', position='Query'),
  templateId?: string(name='TemplateId', example='****96e8864746a0b6f3****', position='Query'),
  timeline?: string(name='Timeline', position='Body'),
  userData?: string(name='UserData', position='Query'),
}

model SubmitMediaProducingJobResponseBody = {
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
  mediaId?: string(name='MediaId', example='****c469e944b5a856828dc2****'),
  projectId?: string(name='ProjectId', example='****b4549d46c88681030f6e****'),
  requestId?: string(name='RequestId', example='****36-3C1E-4417-BDB2-1E034F****'),
  vodMediaId?: string(name='VodMediaId', example='****d8s4h75ci975745c14b****'),
}

model SubmitMediaProducingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitMediaProducingJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitMediaProducingJob  SubmitMediaProducingJobRequest
  * @return SubmitMediaProducingJobResponse
 */
async function submitMediaProducingJob(request: SubmitMediaProducingJobRequest): SubmitMediaProducingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitMediaProducingJob', 'POST', '/', 'json', true, 'form', request);
}

model SubmitPackageJobRequest {
  inputs: [ 
    {
      input: {
        media: string(name='Media', description='This parameter is required.', example='oss://bucket/path/to/video.mp4'),
        type: string(name='Type', description='This parameter is required.', example='OSS'),
      }(name='Input', description='This parameter is required.'),
    }
  ](name='Inputs', description='This parameter is required.', shrink='json', position='Query'),
  name?: string(name='Name', example='job-name', position='Query'),
  output: {
    media: string(name='Media', description='This parameter is required.', example='oss://bucket/path/to/video.mp4'),
    type: string(name='Type', description='This parameter is required.', example='OSS'),
  }(name='Output', description='This parameter is required.', shrink='json', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
    priority?: int32(name='Priority', example='5'),
  }(name='ScheduleConfig', shrink='json', position='Query'),
  userData?: string(name='UserData', example='{"param": "value"}', position='Query'),
}

model SubmitPackageJobResponseBody = {
  jobId?: string(name='JobId', example='2d705f385b704ee5b*******a36d93e0'),
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model SubmitPackageJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitPackageJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitPackageJob  SubmitPackageJobRequest
  * @return SubmitPackageJobResponse
 */
async function submitPackageJob(request: SubmitPackageJobRequest): SubmitPackageJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitPackageJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitSmarttagJobRequest {
  content?: string(name='Content', example='example content ****', position='Query'),
  contentAddr?: string(name='ContentAddr', example='http://123.com/testVideo.mp4', position='Query'),
  contentType?: string(name='ContentType', example='application/zip', position='Query'),
  input?: {
    media?: string(name='Media', example='c5c62d8f0361337cab312dce8e77dc6d'),
    type?: string(name='Type', example='Media'),
  }(name='Input', description='input', shrink='json', position='Query'),
  notifyUrl?: string(name='NotifyUrl', example='https://example.com/endpoint/aliyun/ai?id=76401125000***', position='Query'),
  params?: string(name='Params', example='{"needAsrData":true, "needOcrData":false}', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='acdbfe4323bcfdae'),
    priority?: string(name='Priority', example='4'),
  }(name='ScheduleConfig', description='scheduleConfig', shrink='json', position='Query'),
  templateId?: string(name='TemplateId', example='39f8e0bc005e4f309379701645f4', position='Query'),
  title?: string(name='Title', example='example-title-****', position='Query'),
  userData?: string(name='UserData', example='{“a”:"test"}', position='Query'),
}

model SubmitSmarttagJobResponseBody = {
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model SubmitSmarttagJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitSmarttagJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitSmarttagJob  SubmitSmarttagJobRequest
  * @return SubmitSmarttagJobResponse
 */
async function submitSmarttagJob(request: SubmitSmarttagJobRequest): SubmitSmarttagJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitSmarttagJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitSnapshotJobRequest {
  input: {
    media: string(name='Media', description='This parameter is required.', example='oss://bucket/object.mp4'),
    type: string(name='Type', description='This parameter is required.', example='Media'),
  }(name='Input', description='This parameter is required.', shrink='json', position='Query'),
  name?: string(name='Name', example='SampleJob', position='Query'),
  output: {
    media: string(name='Media', description='This parameter is required.', example='oss://test-bucket/output-{Count}.jpg'),
    type: string(name='Type', description='This parameter is required.', example='OSS'),
  }(name='Output', description='This parameter is required.', shrink='json', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='****96e8864746a0b6f3****'),
  }(name='ScheduleConfig', shrink='json', position='Query'),
  templateConfig: {
    overwriteParams?: {
      blackLevel?: int32(name='BlackLevel', example='30'),
      count?: long(name='Count', example='5'),
      frameType?: string(name='FrameType', example='intra'),
      height?: int32(name='Height', example='480'),
      interval?: long(name='Interval', example='10'),
      isSptFrag?: boolean(name='IsSptFrag', example='true'),
      pixelBlackThreshold?: int32(name='PixelBlackThreshold', example='70'),
      spriteSnapshotConfig?: {
        cellHeight?: int32(name='CellHeight', example='480'),
        cellWidth?: int32(name='CellWidth', example='720'),
        color?: string(name='Color', example='#000000'),
        columns?: int32(name='Columns', example='20'),
        lines?: int32(name='Lines', example='20'),
        margin?: int32(name='Margin', example='20'),
        padding?: int32(name='Padding', example='20'),
      }(name='SpriteSnapshotConfig'),
      time?: long(name='Time', example='1000'),
      type?: string(name='Type', example='Sprite'),
      width?: int32(name='Width', example='720'),
    }(name='OverwriteParams'),
    templateId: string(name='TemplateId', description='This parameter is required.', example='****96e8864746a0b6f3****'),
  }(name='TemplateConfig', description='This parameter is required.', shrink='json', position='Query'),
  userData?: string(name='UserData', example='{"test parameter": "test value"}', position='Query'),
}

model SubmitSnapshotJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model SubmitSnapshotJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitSnapshotJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitSnapshotJob  SubmitSnapshotJobRequest
  * @return SubmitSnapshotJobResponse
 */
async function submitSnapshotJob(request: SubmitSnapshotJobRequest): SubmitSnapshotJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitSnapshotJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitSportsHighlightsJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  clientToken?: string(name='ClientToken', example='****12e8864746a0a398****', position='Query'),
  inputConfig?: string(name='InputConfig', position='Body'),
  outputConfig?: string(name='OutputConfig', example='{
  "MediaURL": "http://xxx.oss-cn-shanghai.aliyuncs.com/xxx_{index}.mp4",
  "Count": 1,
  "Width": 1080,
  "Height": 1920
}', position='Query'),
  userData?: string(name='UserData', position='Query'),
}

model SubmitSportsHighlightsJobResponseBody = {
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
  requestId?: string(name='RequestId', example='****36-3C1E-4417-BDB2-1E034F****'),
}

model SubmitSportsHighlightsJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitSportsHighlightsJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitSportsHighlightsJob  SubmitSportsHighlightsJobRequest
  * @return SubmitSportsHighlightsJobResponse
 */
async function submitSportsHighlightsJob(request: SubmitSportsHighlightsJobRequest): SubmitSportsHighlightsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitSportsHighlightsJob', 'POST', '/', 'json', true, 'form', request);
}

model SubmitStandardCustomizedVoiceJobRequest {
  audios?: string(name='Audios', example='****571c704445f9a0ee011406c2****,****571c704445f9a0ee011406c2****,****571c704445f9a0ee011406c2****', position='Query'),
  authentication?: string(name='Authentication', example='****571c704445f9a0ee011406c2****', position='Query'),
  demoAudioMediaURL?: string(name='DemoAudioMediaURL', example='https://your-bucket.oss-cn-shanghai.aliyuncs.com/demo.mp3', position='Query'),
  gender?: string(name='Gender', example='female', position='Query'),
  voiceName?: string(name='VoiceName', position='Query'),
}

model SubmitStandardCustomizedVoiceJobResponseBody = {
  data?: {
    jobId?: string(name='JobId', example='****d718e2ff4f018ccf419a7b71****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
  success?: boolean(name='Success', example='true'),
}

model SubmitStandardCustomizedVoiceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitStandardCustomizedVoiceJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitStandardCustomizedVoiceJob  SubmitStandardCustomizedVoiceJobRequest
  * @return SubmitStandardCustomizedVoiceJobResponse
 */
async function submitStandardCustomizedVoiceJob(request: SubmitStandardCustomizedVoiceJobRequest): SubmitStandardCustomizedVoiceJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitStandardCustomizedVoiceJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitSyncMediaInfoJobRequest {
  input: {
    media: string(name='Media', description='This parameter is required.', example='oss://bucket/path/to/video.mp4'),
    type: string(name='Type', description='This parameter is required.', example='OSS'),
  }(name='Input', description='This parameter is required.', shrink='json', position='Query'),
  name?: string(name='Name', example='job-name', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
    priority?: int32(name='Priority', example='5'),
  }(name='ScheduleConfig', shrink='json', position='Query'),
  userData?: string(name='UserData', example='user-data', position='Query'),
}

model SubmitSyncMediaInfoJobResponseBody = {
  mediaInfoJob?: {
    async?: boolean(name='Async', example='true'),
    finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
    input?: {
      media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
      type?: string(name='Type', example='OSS'),
    }(name='Input'),
    jobId?: string(name='JobId', example='ab4802364a2e49208c99efab82dfa8e8'),
    mediaInfoProperty?: {
      audioStreamInfoList?: [ 
        {
          bitrate?: string(name='Bitrate', example='0.f'),
          channelLayout?: string(name='ChannelLayout', example='stereo'),
          channels?: string(name='Channels', example='2'),
          codecLongName?: string(name='CodecLongName', example='AAC (Advanced Audio Coding)'),
          codecName?: string(name='CodecName', example='aac'),
          codecTag?: string(name='CodecTag', example='0x000f'),
          codecTagString?: string(name='CodecTagString', example='[15][0][0][0]'),
          codecTimeBase?: string(name='CodecTimeBase', example='1/44100'),
          duration?: string(name='Duration', example='403.039989'),
          index?: string(name='Index', example='1'),
          lang?: string(name='Lang', example='us'),
          sampleFmt?: string(name='SampleFmt', example='fltp'),
          sampleRate?: string(name='SampleRate', example='44100'),
          startTime?: string(name='StartTime', example='1.473556'),
          timebase?: string(name='Timebase', example='1/90000'),
        }
      ](name='AudioStreamInfoList'),
      fileBasicInfo?: {
        bitrate?: string(name='Bitrate', example='888.563'),
        duration?: string(name='Duration', example='403.039999'),
        fileName?: string(name='FileName', example='file.m3u8'),
        fileSize?: string(name='FileSize', example='31737'),
        fileStatus?: string(name='FileStatus', example='Normal'),
        fileType?: string(name='FileType', example='source_file'),
        fileUrl?: string(name='FileUrl', example='http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8'),
        formatName?: string(name='FormatName', example='hls,applehttp'),
        height?: string(name='Height', example='478'),
        mediaId?: string(name='MediaId', example='999e68259c924f52a6be603cbb3f91cc'),
        region?: string(name='Region', example='cn-shanghai'),
        width?: string(name='Width', example='848'),
      }(name='FileBasicInfo'),
      videoStreamInfoList?: [ 
        {
          avgFps?: string(name='Avg_fps', example='25.0'),
          bitRate?: string(name='Bit_rate', example='888.563'),
          codecLongName?: string(name='Codec_long_name', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
          codecName?: string(name='Codec_name', example='h264'),
          codecTag?: string(name='Codec_tag', example='0x001b'),
          codecTagString?: string(name='Codec_tag_string', example='[27][0][0][0]'),
          codecTimeBase?: string(name='Codec_time_base', example='1/50'),
          dar?: string(name='Dar', example='16:9'),
          duration?: string(name='Duration', example='403.039989'),
          fps?: string(name='Fps', example='25.0'),
          hasBFrames?: string(name='Has_b_frames', example='2'),
          height?: string(name='Height', example='478'),
          index?: string(name='Index', example='0'),
          lang?: string(name='Lang', example='zh'),
          level?: string(name='Level', example='31'),
          numFrames?: string(name='NumFrames', example='10040'),
          pixFmt?: string(name='PixFmt', example='yuv420p'),
          profile?: string(name='Profile', example='High'),
          rotate?: string(name='Rotate', example='0'),
          sar?: string(name='Sar', example='478:477'),
          startTime?: string(name='Start_time', example='1.473556'),
          timeBase?: string(name='Time_base', example='1/90000'),
          width?: string(name='Width', example='848'),
        }
      ](name='VideoStreamInfoList'),
    }(name='MediaInfoProperty'),
    name?: string(name='Name', example='job-name'),
    requestId?: string(name='RequestId', example='4879B9DE-E4B6-19DC-91F5-9D5F4DCE4168'),
    scheduleConfig?: {
      pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
      priority?: int32(name='Priority', example='5'),
    }(name='ScheduleConfig'),
    status?: string(name='Status', example='Init'),
    submitResultJson?: map[string]any(name='SubmitResultJson', example='{}'),
    submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
    triggerSource?: string(name='TriggerSource', example='API'),
    userData?: string(name='UserData', example='user-data'),
  }(name='MediaInfoJob', description='MediaInfoJobDTO'),
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model SubmitSyncMediaInfoJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitSyncMediaInfoJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitSyncMediaInfoJob  SubmitSyncMediaInfoJobRequest
  * @return SubmitSyncMediaInfoJobResponse
 */
async function submitSyncMediaInfoJob(request: SubmitSyncMediaInfoJobRequest): SubmitSyncMediaInfoJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitSyncMediaInfoJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitTextGenerateJobRequest {
  description?: string(name='Description', position='Query'),
  generateConfig?: string(name='GenerateConfig', position='Query'),
  title?: string(name='Title', position='Query'),
  type?: string(name='Type', example='MarketingCopy', position='Query'),
  userData?: string(name='UserData', position='Query'),
}

model SubmitTextGenerateJobResponseBody = {
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
  requestId?: string(name='RequestId', description='Id of the request', example='******11-DB8D-4A9A-875B-275798******'),
}

model SubmitTextGenerateJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitTextGenerateJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitTextGenerateJob  SubmitTextGenerateJobRequest
  * @return SubmitTextGenerateJobResponse
 */
async function submitTextGenerateJob(request: SubmitTextGenerateJobRequest): SubmitTextGenerateJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitTextGenerateJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitTranscodeJobRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  inputGroup: [ 
    {
      inputUrl?: string(name='InputUrl', example='oss://bucket/path/to/video.mp4'),
      media: string(name='Media', description='This parameter is required.', example='oss://bucket/path/to/video.mp4'),
      type: string(name='Type', description='This parameter is required.', example='OSS'),
    }
  ](name='InputGroup', description='This parameter is required.', shrink='json', position='Query'),
  name?: string(name='Name', example='job-name', position='Query'),
  outputGroup: [ 
    {
      output: {
        media: string(name='Media', description='This parameter is required.', example='oss://bucket/path/to/video.mp4'),
        outputUrl?: string(name='OutputUrl', example='oss://bucket/path/to/{MediaId}/{JobId}.mp4'),
        type: string(name='Type', description='This parameter is required.', example='OSS'),
      }(name='Output', description='This parameter is required.'),
      processConfig: {
        combineConfigs?: [ 
          {
            audioIndex: string(name='AudioIndex', description='This parameter is required.', example='0 或 exclude'),
            duration?: double(name='Duration', example='20.0'),
            start?: double(name='Start', example='0.0'),
            videoIndex: string(name='VideoIndex', description='This parameter is required.', example='0 或 exclude'),
          }
        ](name='CombineConfigs'),
        encryption?: {
          cipherText?: string(name='CipherText', example='MTYi00NDU0LTg5O****'),
          decryptKeyUri?: string(name='DecryptKeyUri', example='https://sample.com/path?CipherText=MTYi00NDU0LTg5O****'),
          encryptType?: string(name='EncryptType', example='PrivateEncryption'),
          keyServiceType?: string(name='KeyServiceType', example='KMS'),
        }(name='Encryption'),
        imageWatermarks?: [ 
          {
            overwriteParams?: {
              dx?: string(name='Dx', example='10'),
              dy?: string(name='Dy', example='10'),
              file?: {
                media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                type?: string(name='Type', example='OSS'),
              }(name='File'),
              height?: string(name='Height', example='32'),
              referPos?: string(name='ReferPos', example='TopLeft'),
              timeline?: {
                duration?: string(name='Duration', example='ToEND'),
                start?: string(name='Start', example='00:00:05'),
              }(name='Timeline'),
              width?: string(name='Width', example='32'),
            }(name='OverwriteParams'),
            templateId: string(name='TemplateId', description='This parameter is required.', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }
        ](name='ImageWatermarks'),
        subtitles?: [ 
          {
            overwriteParams?: {
              charEnc?: string(name='CharEnc', example='UTF-8'),
              file?: {
                media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                type?: string(name='Type', example='OSS'),
              }(name='File'),
              format?: string(name='Format', example='vtt'),
            }(name='OverwriteParams'),
            templateId: string(name='TemplateId', description='This parameter is required.', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }
        ](name='Subtitles'),
        textWatermarks?: [ 
          {
            overwriteParams?: {
              adaptive?: string(name='Adaptive', example='false'),
              borderColor?: string(name='BorderColor', example='#006400'),
              borderWidth?: int32(name='BorderWidth', example='0'),
              content?: string(name='Content', example='测试水印'),
              fontAlpha?: string(name='FontAlpha', example='1.0'),
              fontColor?: string(name='FontColor', example='#006400'),
              fontName?: string(name='FontName', example='SimSun'),
              fontSize?: int32(name='FontSize', example='16'),
              left?: string(name='Left', example='10'),
              top?: string(name='Top', example='10'),
            }(name='OverwriteParams'),
            templateId: string(name='TemplateId', description='This parameter is required.', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }
        ](name='TextWatermarks'),
        transcode: {
          overwriteParams?: {
            audio?: {
              bitrate?: string(name='Bitrate', example='128'),
              channels?: string(name='Channels', example='2'),
              codec?: string(name='Codec', example='AAC'),
              profile?: string(name='Profile', example='aac_low'),
              remove?: string(name='Remove', example='false'),
              samplerate?: string(name='Samplerate', example='44100'),
              volume?: {
                integratedLoudnessTarget?: string(name='IntegratedLoudnessTarget', example='-6'),
                loudnessRangeTarget?: string(name='LoudnessRangeTarget', example='8'),
                method?: string(name='Method', example='auto'),
                truePeak?: string(name='TruePeak', example='-1'),
              }(name='Volume'),
            }(name='Audio'),
            container?: {
              format?: string(name='Format', example='mp4'),
            }(name='Container'),
            muxConfig?: {
              segment?: {
                duration?: string(name='Duration', example='10'),
                forceSegTime?: string(name='ForceSegTime', example='2,3'),
              }(name='Segment'),
            }(name='MuxConfig'),
            transConfig?: {
              adjDarMethod?: string(name='AdjDarMethod'),
              isCheckAudioBitrate?: string(name='IsCheckAudioBitrate'),
              isCheckAudioBitrateFail?: string(name='IsCheckAudioBitrateFail'),
              isCheckReso?: string(name='IsCheckReso'),
              isCheckResoFail?: string(name='IsCheckResoFail'),
              isCheckVideoBitrate?: string(name='IsCheckVideoBitrate'),
              isCheckVideoBitrateFail?: string(name='IsCheckVideoBitrateFail'),
              transMode?: string(name='TransMode'),
            }(name='TransConfig'),
            video?: {
              abrMax?: string(name='AbrMax', example='6000'),
              bitrate?: string(name='Bitrate', example='3000'),
              bufsize?: string(name='Bufsize', example='6000'),
              codec?: string(name='Codec', example='H.264'),
              crf?: string(name='Crf', example='23'),
              crop?: string(name='Crop', example='1280:800:0:140'),
              fps?: string(name='Fps', example='25'),
              gop?: string(name='Gop', example='250'),
              height?: string(name='Height', example='1080'),
              longShortMode?: string(name='LongShortMode', example='false'),
              maxrate?: string(name='Maxrate', example='9000'),
              pad?: string(name='Pad', example='1280:800:0:140'),
              pixFmt?: string(name='PixFmt', example='yuv420p'),
              preset?: string(name='Preset', example='medium'),
              profile?: string(name='Profile', example='Main'),
              remove?: string(name='Remove', example='false'),
              scanMode?: string(name='ScanMode', example='progressive'),
              width?: string(name='Width', example='1920'),
            }(name='Video'),
          }(name='OverwriteParams'),
          templateId: string(name='TemplateId', description='This parameter is required.', example='9547c6ad97cb4f2aaa29683ebd18d410'),
        }(name='Transcode', description='This parameter is required.'),
      }(name='ProcessConfig', description='This parameter is required.'),
    }
  ](name='OutputGroup', description='This parameter is required.', shrink='json', position='Query'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
    priority?: int32(name='Priority', example='5'),
  }(name='ScheduleConfig', example='job-name', shrink='json', position='Query'),
  userData?: string(name='UserData', example='user-data', position='Query'),
}

model SubmitTranscodeJobResponseBody = {
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
  transcodeParentJob?: {
    createTime?: string(name='CreateTime', example='2022-01-12T08:49:41Z'),
    finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
    inputGroup?: [ 
      {
        media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
        type?: string(name='Type', example='OSS'),
      }
    ](name='InputGroup'),
    jobCount?: int32(name='JobCount', example='1'),
    name?: string(name='Name', example='transcode-job'),
    outputGroup?: [ 
      {
        output?: {
          media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
          type?: string(name='Type', example='OSS'),
        }(name='Output'),
        processConfig?: {
          combineConfigs?: [ 
            {
              audioIndex: string(name='AudioIndex', description='This parameter is required.', example='0 或 exclude'),
              duration?: double(name='Duration', example='20.0'),
              start?: double(name='Start', example='0.0'),
              videoIndex: string(name='VideoIndex', description='This parameter is required.', example='0 或 exclude'),
            }
          ](name='CombineConfigs'),
          encryption?: {
            cipherText?: string(name='CipherText', example='MTYi00NDU0LTg5O****'),
            decryptKeyUri?: string(name='DecryptKeyUri', example='https://sample.com/path?CipherText=MTYi00NDU0LTg5O****'),
            encryptType?: string(name='EncryptType', example='PrivateEncryption'),
            keyServiceType?: string(name='KeyServiceType', example='KMS'),
          }(name='Encryption'),
          imageWatermarks?: [ 
            {
              overwriteParams?: {
                dx?: string(name='Dx', example='10'),
                dy?: string(name='Dy', example='10'),
                file?: {
                  media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', example='OSS'),
                }(name='File'),
                height?: string(name='Height', example='32'),
                referPos?: string(name='ReferPos', example='TopLeft'),
                timeline?: {
                  duration?: string(name='Duration', example='ToEND'),
                  start?: string(name='Start', example='00:00:05'),
                }(name='Timeline'),
                width?: string(name='Width', example='32'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='ImageWatermarks'),
          subtitles?: [ 
            {
              overwriteParams?: {
                charEnc?: string(name='CharEnc', example='UTF-8'),
                file?: {
                  media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', example='OSS'),
                }(name='File'),
                format?: string(name='Format', example='vtt'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='Subtitles'),
          textWatermarks?: [ 
            {
              overwriteParams?: {
                adaptive?: string(name='Adaptive', example='false'),
                borderColor?: string(name='BorderColor', example='#006400'),
                borderWidth?: int32(name='BorderWidth', example='0'),
                content?: string(name='Content', example='测试水印'),
                fontAlpha?: string(name='FontAlpha', example='1.0'),
                fontColor?: string(name='FontColor', example='#006400'),
                fontName?: string(name='FontName', example='SimSun'),
                fontSize?: int32(name='FontSize', example='16'),
                left?: string(name='Left', example='10'),
                top?: string(name='Top', example='10'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='TextWatermarks'),
          transcode?: {
            overwriteParams?: {
              audio?: {
                bitrate?: string(name='Bitrate', example='128'),
                channels?: string(name='Channels', example='2'),
                codec?: string(name='Codec', example='AAC'),
                profile?: string(name='Profile', example='aac_low'),
                remove?: string(name='Remove', example='false'),
                samplerate?: string(name='Samplerate', example='44100'),
                volume?: {
                  integratedLoudnessTarget?: string(name='IntegratedLoudnessTarget', example='-6'),
                  loudnessRangeTarget?: string(name='LoudnessRangeTarget', example='8'),
                  method?: string(name='Method', example='auto'),
                  truePeak?: string(name='TruePeak', example='-1'),
                }(name='Volume'),
              }(name='Audio'),
              container?: {
                format?: string(name='Format', example='mp4'),
              }(name='Container'),
              muxConfig?: {
                segment?: {
                  duration?: string(name='Duration', example='10'),
                  forceSegTime?: string(name='ForceSegTime', example='2,3'),
                }(name='Segment'),
              }(name='MuxConfig'),
              transConfig?: {
                adjDarMethod?: string(name='AdjDarMethod'),
                isCheckAudioBitrate?: string(name='IsCheckAudioBitrate'),
                isCheckAudioBitrateFail?: string(name='IsCheckAudioBitrateFail'),
                isCheckReso?: string(name='IsCheckReso'),
                isCheckResoFail?: string(name='IsCheckResoFail'),
                isCheckVideoBitrate?: string(name='IsCheckVideoBitrate'),
                isCheckVideoBitrateFail?: string(name='IsCheckVideoBitrateFail'),
                transMode?: string(name='TransMode'),
              }(name='TransConfig'),
              video?: {
                abrMax?: string(name='AbrMax', example='6000'),
                bitrate?: string(name='Bitrate', example='3000'),
                bufsize?: string(name='Bufsize', example='6000'),
                codec?: string(name='Codec', example='H.264'),
                crf?: string(name='Crf', example='23'),
                crop?: string(name='Crop', example='1280:800:0:140'),
                fps?: string(name='Fps', example='25'),
                gop?: string(name='Gop', example='250'),
                height?: string(name='Height', example='1080'),
                longShortMode?: string(name='LongShortMode', example='false'),
                maxrate?: string(name='Maxrate', example='9000'),
                pad?: string(name='Pad', example='1280:800:0:140'),
                pixFmt?: string(name='PixFmt', example='yuv420p'),
                preset?: string(name='Preset', example='medium'),
                profile?: string(name='Profile', example='Main'),
                remove?: string(name='Remove', example='false'),
                scanMode?: string(name='ScanMode', example='progressive'),
                width?: string(name='Width', example='1920'),
              }(name='Video'),
            }(name='OverwriteParams'),
            templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }(name='Transcode'),
        }(name='ProcessConfig'),
      }
    ](name='OutputGroup'),
    parentJobId?: string(name='ParentJobId', example='8b2198504dd340b7b3c9842a74fc9baa'),
    percent?: int32(name='Percent', example='0'),
    requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
    scheduleConfig?: {
      pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
      priority?: int32(name='Priority', example='5'),
    }(name='ScheduleConfig'),
    status?: string(name='Status', example='Success'),
    submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
    transcodeJobList?: [ 
      {
        createTime?: string(name='CreateTime', example='2022-01-12T08:49:41Z'),
        finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
        inputGroup?: [ 
          {
            inputUrl?: string(name='InputUrl', example='oss://bucket/path/to/video.mp4'),
            media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
            type?: string(name='Type', example='OSS'),
          }
        ](name='InputGroup'),
        jobId?: string(name='JobId', example='7d6a7e0d4db2457a8d45ff5d43e1bf0a'),
        jobIndex?: int32(name='JobIndex', example='0'),
        name?: string(name='Name', example='transcode-job'),
        outFileMeta?: {
          audioStreamInfoList?: [ 
            {
              bitrate?: string(name='Bitrate', example='0.f'),
              channelLayout?: string(name='ChannelLayout', example='stereo'),
              channels?: string(name='Channels', example='2'),
              codecLongName?: string(name='CodecLongName', example='AAC (Advanced Audio Coding)'),
              codecName?: string(name='CodecName', example='aac'),
              codecTag?: string(name='CodecTag', example='0x000f'),
              codecTagString?: string(name='CodecTagString', example='[15][0][0][0]'),
              codecTimeBase?: string(name='CodecTimeBase', example='1/44100'),
              duration?: string(name='Duration', example='403.039989'),
              index?: string(name='Index', example='1'),
              lang?: string(name='Lang', example='cn'),
              sampleFmt?: string(name='SampleFmt', example='fltp'),
              sampleRate?: string(name='SampleRate', example='44100'),
              startTime?: string(name='StartTime', example='1.473556'),
              timebase?: string(name='Timebase', example='1/90000'),
            }
          ](name='AudioStreamInfoList'),
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', example='888.563'),
            duration?: string(name='Duration', example='403.039999'),
            fileName?: string(name='FileName', example='file.m3u8'),
            fileSize?: string(name='FileSize', example='31737'),
            fileStatus?: string(name='FileStatus', example='Normal'),
            fileType?: string(name='FileType', example='source_file'),
            fileUrl?: string(name='FileUrl', example='http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8'),
            formatName?: string(name='FormatName', example='hls,applehttp'),
            height?: string(name='Height', example='478'),
            mediaId?: string(name='MediaId', example='73e07de0f77171eca3fc7035d0b26402'),
            region?: string(name='Region', example='cn-shanghai'),
            width?: string(name='Width', example='848'),
          }(name='FileBasicInfo'),
          videoStreamInfoList?: [ 
            {
              avgFps?: string(name='Avg_fps', example='25.0'),
              bitRate?: string(name='Bit_rate', example='888.563'),
              codecLongName?: string(name='Codec_long_name', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
              codecName?: string(name='Codec_name', example='h264'),
              codecTag?: string(name='Codec_tag', example='0x001b'),
              codecTagString?: string(name='Codec_tag_string', example='[27][0][0][0]'),
              codecTimeBase?: string(name='Codec_time_base', example='1/50'),
              dar?: string(name='Dar', example='16:9'),
              duration?: string(name='Duration', example='403.039989'),
              fps?: string(name='Fps', example='25.0'),
              hasBFrames?: string(name='Has_b_frames', example='2'),
              height?: string(name='Height', example='478'),
              index?: string(name='Index', example='0'),
              lang?: string(name='Lang', example='cn'),
              level?: string(name='Level', example='31'),
              numFrames?: string(name='NumFrames', example='10040'),
              pixFmt?: string(name='PixFmt', example='yuv420p'),
              profile?: string(name='Profile', example='High'),
              rotate?: string(name='Rotate', example='0'),
              sar?: string(name='Sar', example='478:477'),
              startTime?: string(name='Start_time', example='1.473556'),
              timeBase?: string(name='Time_base', example='1/90000'),
              width?: string(name='Width', example='848'),
            }
          ](name='VideoStreamInfoList'),
        }(name='OutFileMeta'),
        output?: {
          media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
          outputUrl?: string(name='OutputUrl', example='oss://bucket/path/to/{MediaId}/{JobId}.mp4'),
          type?: string(name='Type', example='OSS'),
        }(name='Output'),
        parentJobId?: string(name='ParentJobId', example='8b2198504dd340b7b3c9842a74fc9baa'),
        processConfig?: {
          combineConfigs?: [ 
            {
              audioIndex: string(name='AudioIndex', description='This parameter is required.', example='0 或 exclude'),
              duration?: double(name='Duration', example='20.0'),
              start?: double(name='Start', example='0.0'),
              videoIndex: string(name='VideoIndex', description='This parameter is required.', example='0 或 exclude'),
            }
          ](name='CombineConfigs'),
          encryption?: {
            cipherText?: string(name='CipherText', example='MTYi00NDU0LTg5O****'),
            decryptKeyUri?: string(name='DecryptKeyUri', example='https://sample.com/path?CipherText=MTYi00NDU0LTg5O****'),
            encryptType?: string(name='EncryptType', example='PrivateEncryption'),
            keyServiceType?: string(name='KeyServiceType', example='KMS'),
          }(name='Encryption'),
          imageWatermarks?: [ 
            {
              overwriteParams?: {
                dx?: string(name='Dx', example='10'),
                dy?: string(name='Dy', example='10'),
                file?: {
                  media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', example='OSS'),
                }(name='File'),
                height?: string(name='Height', example='32'),
                referPos?: string(name='ReferPos', example='TopLeft'),
                timeline?: {
                  duration?: string(name='Duration', example='ToEND'),
                  start?: string(name='Start', example='00:00:05'),
                }(name='Timeline'),
                width?: string(name='Width', example='32'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='ImageWatermarks'),
          subtitles?: [ 
            {
              overwriteParams?: {
                charEnc?: string(name='CharEnc', example='UTF-8'),
                file?: {
                  media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', example='OSS'),
                }(name='File'),
                format?: string(name='Format', example='vtt'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='Subtitles'),
          textWatermarks?: [ 
            {
              overwriteParams?: {
                adaptive?: string(name='Adaptive', example='false'),
                borderColor?: string(name='BorderColor', example='#006400'),
                borderWidth?: int32(name='BorderWidth', example='0'),
                content?: string(name='Content', example='测试水印'),
                fontAlpha?: string(name='FontAlpha', example='1.0'),
                fontColor?: string(name='FontColor', example='#006400'),
                fontName?: string(name='FontName', example='SimSun'),
                fontSize?: int32(name='FontSize', example='16'),
                left?: string(name='Left', example='10'),
                top?: string(name='Top', example='10'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='TextWatermarks'),
          transcode?: {
            overwriteParams?: {
              audio?: {
                bitrate?: string(name='Bitrate', example='128'),
                channels?: string(name='Channels', example='2'),
                codec?: string(name='Codec', example='AAC'),
                profile?: string(name='Profile', example='aac_low'),
                remove?: string(name='Remove', example='false'),
                samplerate?: string(name='Samplerate', example='44100'),
                volume?: {
                  integratedLoudnessTarget?: string(name='IntegratedLoudnessTarget', example='-6'),
                  loudnessRangeTarget?: string(name='LoudnessRangeTarget', example='8'),
                  method?: string(name='Method', example='auto'),
                  truePeak?: string(name='TruePeak', example='-1'),
                }(name='Volume'),
              }(name='Audio'),
              container?: {
                format?: string(name='Format', example='mp4'),
              }(name='Container'),
              muxConfig?: {
                segment?: {
                  duration?: string(name='Duration', example='10'),
                  forceSegTime?: string(name='ForceSegTime', example='2,3'),
                }(name='Segment'),
              }(name='MuxConfig'),
              transConfig?: {
                adjDarMethod?: string(name='AdjDarMethod'),
                isCheckAudioBitrate?: string(name='IsCheckAudioBitrate'),
                isCheckAudioBitrateFail?: string(name='IsCheckAudioBitrateFail'),
                isCheckReso?: string(name='IsCheckReso'),
                isCheckResoFail?: string(name='IsCheckResoFail'),
                isCheckVideoBitrate?: string(name='IsCheckVideoBitrate'),
                isCheckVideoBitrateFail?: string(name='IsCheckVideoBitrateFail'),
                transMode?: string(name='TransMode'),
              }(name='TransConfig'),
              video?: {
                abrMax?: string(name='AbrMax', example='6000'),
                bitrate?: string(name='Bitrate', example='3000'),
                bufsize?: string(name='Bufsize', example='6000'),
                codec?: string(name='Codec', example='H.264'),
                crf?: string(name='Crf', example='23'),
                crop?: string(name='Crop', example='1280:800:0:140'),
                fps?: string(name='Fps', example='25'),
                gop?: string(name='Gop', example='250'),
                height?: string(name='Height', example='1080'),
                longShortMode?: string(name='LongShortMode', example='false'),
                maxrate?: string(name='Maxrate', example='9000'),
                pad?: string(name='Pad', example='1280:800:0:140'),
                pixFmt?: string(name='PixFmt', example='yuv420p'),
                preset?: string(name='Preset', example='medium'),
                profile?: string(name='Profile', example='Main'),
                remove?: string(name='Remove', example='false'),
                scanMode?: string(name='ScanMode', example='progressive'),
                width?: string(name='Width', example='1920'),
              }(name='Video'),
            }(name='OverwriteParams'),
            templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }(name='Transcode'),
        }(name='ProcessConfig'),
        requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
        scheduleConfig?: {
          pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
          priority?: int32(name='Priority', example='5'),
        }(name='ScheduleConfig'),
        status?: string(name='Status', example='Init'),
        submitResultJson?: map[string]any(name='SubmitResultJson', example='{}'),
        submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
        userData?: string(name='UserData', example='user-data'),
      }
    ](name='TranscodeJobList'),
    triggerSource?: string(name='TriggerSource', example='API'),
    userData?: string(name='UserData', example='user-data'),
  }(name='TranscodeParentJob', description='TranscodeParentJobWithSubJobDTO'),
}

model SubmitTranscodeJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitTranscodeJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitTranscodeJob  SubmitTranscodeJobRequest
  * @return SubmitTranscodeJobResponse
 */
async function submitTranscodeJob(request: SubmitTranscodeJobRequest): SubmitTranscodeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitTranscodeJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitVideoTranslationJobRequest {
  clientToken?: string(name='ClientToken', description='*   The client token.', position='Query'),
  description?: string(name='Description', description='*   The job description.', position='Query'),
  editingConfig?: string(name='EditingConfig', description='*   The configuration parameters of the video translation job.
*   The value must be in the JSON format.', example='{"SourceLanguage":"zh","TargetLanguage":"en","DetextArea":"Auto"}', position='Query'),
  inputConfig?: string(name='InputConfig', description='*   The input parameters of the video translation job.
*   A video translation job takes a video or subtitle file as the input.
*   The value must be in the JSON format.', example='{"Type":"Video","Media":"https://your-bucket.oss-cn-shanghai.aliyuncs.com/xxx.mp4"}', position='Query'),
  outputConfig?: string(name='OutputConfig', description='*   The output parameters of the video translation job.
*   A video translation job can generate a video or subtitle file as the output.', example='{"MediaURL": "https://your-bucket.oss-cn-shanghai.aliyuncs.com/your-object.mp4"}', position='Query'),
  title?: string(name='Title', description='*   The job title.', position='Query'),
  userData?: string(name='UserData', description='*   The user data.', position='Query'),
}

model SubmitVideoTranslationJobResponseBody = {
  data?: {
    jobId?: string(name='JobId', description='The ID of the video translation job.', example='****d718e2ff4f018ccf419a7b71****'),
  }(name='Data', description='The data returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='******3B-0E1A-586A-AC29-742247******'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

Valid values:

*   true
*   false', example='true'),
}

model SubmitVideoTranslationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitVideoTranslationJobResponseBody(name='body'),
}

/**
  * @description After you call this operation to submit a video translation job, the system returns a job ID. You can call the GetSmartHandleJob operation based on the job ID to obtain the status and result information of the job.
  * @param request  the request parameters of SubmitVideoTranslationJob  SubmitVideoTranslationJobRequest
  * @return SubmitVideoTranslationJobResponse
 */
async function submitVideoTranslationJob(request: SubmitVideoTranslationJobRequest): SubmitVideoTranslationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitVideoTranslationJob', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAIAgentInstanceRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='39f8e0bc005e4f309379701645f4****', position='Query'),
  templateConfig?: AIAgentTemplateConfig(name='TemplateConfig', shrink='json', position='Query'),
  userData?: string(name='UserData', position='Query'),
}

model UpdateAIAgentInstanceResponseBody = {
  requestId?: string(name='RequestId', example='7B117AF5-2A16-412C-B127-FA6175ED1AD0'),
}

model UpdateAIAgentInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAIAgentInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateAIAgentInstance  UpdateAIAgentInstanceRequest
  * @return UpdateAIAgentInstanceResponse
 */
async function updateAIAgentInstance(request: UpdateAIAgentInstanceRequest): UpdateAIAgentInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAIAgentInstance', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAvatarTrainingJobRequest {
  avatarDescription?: string(name='AvatarDescription', maxLength=1024, position='Query'),
  avatarName?: string(name='AvatarName', maxLength=7, position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='****cdb3e74639973036bc84****', position='Query'),
  portrait?: string(name='Portrait', example='****571c704445f9a0ee011406c2****', minLength=32, maxLength=32, position='Query'),
  thumbnail?: string(name='Thumbnail', example='https://your-bucket.oss-cn-hangzhou.aliyuncs.com/thumbnail.png', maxLength=512, position='Query'),
  transparent?: boolean(name='Transparent', example='True', position='Query'),
  video?: string(name='Video', example='****571c704445f9a0ee011406c2****', minLength=32, maxLength=32, position='Query'),
}

model UpdateAvatarTrainingJobResponseBody = {
  data?: {
    jobId?: string(name='JobId', example='****d718e2ff4f018ccf419a7b71****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model UpdateAvatarTrainingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAvatarTrainingJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateAvatarTrainingJob  UpdateAvatarTrainingJobRequest
  * @return UpdateAvatarTrainingJobResponse
 */
async function updateAvatarTrainingJob(request: UpdateAvatarTrainingJobRequest): UpdateAvatarTrainingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAvatarTrainingJob', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCategoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  cateId: long(name='CateId', description='The category ID. You can use one of the following methods to obtain the ID:

*   Log on to the [Intelligent Media Services (IMS) console](https://ims.console.aliyun.com) and choose **Media Asset Management** > **Category Management** to view the category ID.
*   View the value of CateId returned by the AddCategory operation that you called to create a category.
*   View the value of CateId returned by the GetCategories operation that you called to query a category.

This parameter is required.', example='43', position='Query'),
  cateName: string(name='CateName', description='The category name.

This parameter is required.', position='Query'),
}

model UpdateCategoryResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4E84BE44-58A7-****-****-FBEBEA16EF94'),
}

model UpdateCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCategoryResponseBody(name='body'),
}

/**
  * @description After you create a media asset category, you can call this operation to find the category based on the category ID and change the name of the category.
  * @param request  the request parameters of UpdateCategory  UpdateCategoryRequest
  * @return UpdateCategoryResponse
 */
async function updateCategory(request: UpdateCategoryRequest): UpdateCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCategory', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCustomTemplateRequest {
  name?: string(name='Name', example='test-template', position='Query'),
  templateConfig?: string(name='TemplateConfig', example='{"param": "sample"}', position='Query'),
  templateId: string(name='TemplateId', description='This parameter is required.', example='****96e8864746a0b6f3****', position='Query'),
}

model UpdateCustomTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model UpdateCustomTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCustomTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateCustomTemplate  UpdateCustomTemplateRequest
  * @return UpdateCustomTemplateResponse
 */
async function updateCustomTemplate(request: UpdateCustomTemplateRequest): UpdateCustomTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCustomTemplate', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCustomizedVoiceRequest {
  demoAudioMediaId?: string(name='DemoAudioMediaId', example='****4d5e829d498aaf966b119348****', position='Query'),
  voiceId: string(name='VoiceId', description='This parameter is required.', example='xiaozhuan', position='Query'),
}

model UpdateCustomizedVoiceResponseBody = {
  requestId?: string(name='RequestId', example='4E84BE44-58A7-****-****-FBEBEA16EF94'),
  success?: boolean(name='Success', example='true'),
}

model UpdateCustomizedVoiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCustomizedVoiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateCustomizedVoice  UpdateCustomizedVoiceRequest
  * @return UpdateCustomizedVoiceResponse
 */
async function updateCustomizedVoice(request: UpdateCustomizedVoiceRequest): UpdateCustomizedVoiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCustomizedVoice', 'POST', '/', 'json', false, 'json', request);
}

model UpdateEditingProjectRequest {
  businessStatus?: string(name='BusinessStatus', description='The business status of the project. This parameter can be ignored for general editing projects. Valid values:

*   Reserving
*   ReservationCanceled', example='Reserving', position='Query'),
  clipsParam?: string(name='ClipsParam', description='The material parameter corresponding to the template, in the JSON format. If TemplateId is specified, ClipsParam must also be specified. For more information<props="china">, see [Create and use a regular template](https://help.aliyun.com/document_detail/328557.html) and [Create and use an advanced template](https://help.aliyun.com/document_detail/291418.html).', position='Query'),
  coverURL?: string(name='CoverURL', description='The thumbnail URL of the online editing project.', example='https://****.com/6AB4D0E1E1C7446888****.png', position='Query'),
  description?: string(name='Description', description='The description of the online editing project.', example='testtimeline001desciption', position='Query'),
  projectId: string(name='ProjectId', description='The ID of the online editing project.

This parameter is required.', example='****4ee4b97e27b525142a6b2****', position='Query'),
  templateId?: string(name='TemplateId', description='The template ID. This parameter is used to quickly build a timeline with ease. Note: Only one of ProjectId, Timeline, and TemplateId can be specified. If TemplateId is specified, ClipsParam must also be specified.', example='****96e8864746a0b6f3****', position='Query'),
  timeline?: string(name='Timeline', position='Body'),
  title?: string(name='Title', description='The title of the online editing project.', example='testtimeline', position='Query'),
}

model UpdateEditingProjectResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='****25818875-5F78-4AF6-D7393642CA58****'),
}

model UpdateEditingProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEditingProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateEditingProject  UpdateEditingProjectRequest
  * @return UpdateEditingProjectResponse
 */
async function updateEditingProject(request: UpdateEditingProjectRequest): UpdateEditingProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEditingProject', 'POST', '/', 'json', true, 'form', request);
}

model UpdateLiveRecordTemplateRequest {
  name: string(name='Name', description='代表资源名称的资源属性字段

This parameter is required.', example='test template', position='Body'),
  recordFormat: [ 
    {
      cycleDuration?: int32(name='CycleDuration', example='3600'),
      format: string(name='Format', description='格式

This parameter is required.', example='m3u8'),
      ossObjectPrefix?: string(name='OssObjectPrefix', description='Oss对象名，不包含后缀', example='record/{JobId}/{Sequence}_{EscapedStartTime}_{EscapedEndTime}'),
      sliceDuration?: int32(name='SliceDuration', description='切片时长', example='30'),
      sliceOssObjectPrefix?: string(name='SliceOssObjectPrefix', description='切片Oss对象名，不包含后缀', example='record/{JobId}/{UnixTimestamp}_{Sequence}'),
    }
  ](name='RecordFormat', description='录制格式

This parameter is required.', shrink='json', position='Body'),
  templateId: string(name='TemplateId', description='代表资源一级ID的资源属性字段

This parameter is required.', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66', position='Body'),
}

model UpdateLiveRecordTemplateResponseBody = {
  requestId?: string(name='RequestId', description='代表资源一级ID的资源属性字段', example='0F3D5C03-4B6E-5F40-B7F6-B1956776E7D3'),
}

model UpdateLiveRecordTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLiveRecordTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateLiveRecordTemplate  UpdateLiveRecordTemplateRequest
  * @return UpdateLiveRecordTemplateResponse
 */
async function updateLiveRecordTemplate(request: UpdateLiveRecordTemplateRequest): UpdateLiveRecordTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLiveRecordTemplate', 'POST', '/', 'json', true, 'form', request);
}

model UpdateLiveSnapshotTemplateRequest {
  overwriteFormat?: string(name='OverwriteFormat', example='snapshot/{JobId}.jpg', position='Body'),
  sequenceFormat?: string(name='SequenceFormat', example='snapshot/{JobId}/{UnixTimestamp}.jpg', position='Body'),
  templateId: string(name='TemplateId', description='This parameter is required.', example='****a046-263c-3560-978a-fb287782****', position='Body'),
  templateName: string(name='TemplateName', description='This parameter is required.', position='Body'),
  timeInterval: int32(name='TimeInterval', description='This parameter is required.', example='5', position='Body'),
}

model UpdateLiveSnapshotTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model UpdateLiveSnapshotTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLiveSnapshotTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateLiveSnapshotTemplate  UpdateLiveSnapshotTemplateRequest
  * @return UpdateLiveSnapshotTemplateResponse
 */
async function updateLiveSnapshotTemplate(request: UpdateLiveSnapshotTemplateRequest): UpdateLiveSnapshotTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLiveSnapshotTemplate', 'POST', '/', 'json', true, 'form', request);
}

model UpdateLiveTranscodeJobRequest {
  jobId: string(name='JobId', description='This parameter is required.', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  name?: string(name='Name', example='mytest3', minLength=1, maxLength=128, position='Query'),
  streamInput?: {
    inputUrl: string(name='InputUrl', description='This parameter is required.', example='rtmp://mydomain/app/stream1'),
    type: string(name='Type', description='This parameter is required.', example='rtmp'),
  }(name='StreamInput', shrink='json', position='Query'),
  timedConfig?: {
    endTime?: string(name='EndTime', example='2022-08-05T06:08:31Z'),
    startTime?: string(name='StartTime', example='2022-06-19T02:16:41Z'),
  }(name='TimedConfig', shrink='json', position='Query'),
  transcodeOutput?: {
    domainName: string(name='DomainName', description='This parameter is required.', example='mydomain'),
    type: string(name='Type', description='This parameter is required.', example='LiveCenter'),
  }(name='TranscodeOutput', shrink='json', position='Query'),
}

model UpdateLiveTranscodeJobResponseBody = {
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
}

model UpdateLiveTranscodeJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLiveTranscodeJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateLiveTranscodeJob  UpdateLiveTranscodeJobRequest
  * @return UpdateLiveTranscodeJobResponse
 */
async function updateLiveTranscodeJob(request: UpdateLiveTranscodeJobRequest): UpdateLiveTranscodeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLiveTranscodeJob', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLiveTranscodeTemplateRequest {
  name?: string(name='Name', position='Query'),
  templateConfig?: {
    audioParams?: {
      bitrate?: string(name='Bitrate', example='100'),
      channels?: string(name='Channels', example='2'),
      codec?: string(name='Codec', example='AAC'),
      profile?: string(name='Profile', example='aac_low'),
      samplerate?: string(name='Samplerate', example='44100'),
    }(name='AudioParams'),
    videoParams?: {
      bitrate?: string(name='Bitrate', example='2500'),
      codec?: string(name='Codec', example='H.264'),
      fps?: string(name='Fps', example='30'),
      gop?: string(name='Gop', example='1000'),
      height?: string(name='Height', example='720'),
      profile?: string(name='Profile', example='2'),
      width?: string(name='Width', example='1280'),
    }(name='VideoParams'),
  }(name='TemplateConfig', shrink='json', position='Query'),
  templateId: string(name='TemplateId', description='This parameter is required.', example='****96e8864746a0b6f3****', position='Query'),
}

model UpdateLiveTranscodeTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
}

model UpdateLiveTranscodeTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLiveTranscodeTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateLiveTranscodeTemplate  UpdateLiveTranscodeTemplateRequest
  * @return UpdateLiveTranscodeTemplateResponse
 */
async function updateLiveTranscodeTemplate(request: UpdateLiveTranscodeTemplateRequest): UpdateLiveTranscodeTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLiveTranscodeTemplate', 'POST', '/', 'json', false, 'json', request);
}

model UpdateMediaInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  appendTags?: boolean(name='AppendTags', description='Specifies whether to append tags. Default value: false. Valid values:

*   true: updates the MediaTags parameter by appending new tags.
*   false: updates the MediaTags parameter by overwriting existing tags with new tags.', example='true', position='Query'),
  businessType?: string(name='BusinessType', description='The business type. Valid values:

*   subtitles
*   watermark
*   opening
*   ending
*   general', example='video', position='Query'),
  cateId?: long(name='CateId', description='The category ID.', example='3048', position='Query'),
  category?: string(name='Category', description='The category.

*   The value can be up to 64 bytes in length.
*   The value must be encoded in UTF-8.', example='defaultCategory', position='Query'),
  coverURL?: string(name='CoverURL', description='The URL of the thumbnail.

*   The value can be up to 128 bytes in length.
*   The value must be encoded in UTF-8.', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png', position='Query'),
  description?: string(name='Description', description='The content description.

*   The value can be up to 1,024 bytes in length.
*   The value must be encoded in UTF-8.', example='defaultDescription', position='Query'),
  inputURL?: string(name='InputURL', description='The input URL of the media asset in another service. The URL must be bound to the ID of the media asset in IMS. The URL cannot be modified once registered.

For a media asset from Object Storage Service (OSS), the URL may have one of the following formats:

1\\. http(s)://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4

2\\. oss://example-bucket/example.mp4. This format indicates that the region in which the OSS bucket of the media asset resides is the same as the region in which OSS is activated.', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4', position='Query'),
  mediaId?: string(name='MediaId', description='The ID of the media asset. If this parameter is left empty, you must specify the input URL of the media asset, which has been registered in the IMS content library.', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  mediaTags?: string(name='MediaTags', description='The tags.

*   Up to 16 tags are supported.
*   Separate multiple tags with commas (,).
*   Each tag can be up to 32 bytes in length.
*   The value must be encoded in UTF-8.', example='updateTags1,updateTags2', position='Query'),
  referenceId?: string(name='ReferenceId', description='The custom ID. The ID can be 6 to 64 characters in length and can contain only letters, digits, hyphens (-), and underscores (_). Make sure that the ID is unique among users.', example='123-123', position='Query'),
  title?: string(name='Title', description='The title.

*   The value can be up to 128 bytes in length.
*   The value must be encoded in UTF-8.', example='defaultTitle', position='Query'),
  userData?: string(name='UserData', description='The user data. It can be up to 1,024 bytes in size.', example='userData', position='Query'),
}

model UpdateMediaInfoResponseBody = {
  mediaId?: string(name='MediaId', description='The ID of the media asset in IMS.', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', description='The request ID.', example='******11-DB8D-4A9A-875B-275798******'),
}

model UpdateMediaInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMediaInfoResponseBody(name='body'),
}

/**
  * @description If the MediaId parameter is specified, the MediaId parameter is preferentially used for the query. If the MediaId parameter is left empty, the InputURL parameter must be specified. The request ID and media asset ID are returned. You cannot modify the input URL of a media asset by specifying the ID of the media asset.
  * @param request  the request parameters of UpdateMediaInfo  UpdateMediaInfoRequest
  * @return UpdateMediaInfoResponse
 */
async function updateMediaInfo(request: UpdateMediaInfoRequest): UpdateMediaInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMediaInfo', 'POST', '/', 'json', false, 'json', request);
}

model UpdateMediaMarksRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaId: string(name='MediaId', description='The ID of the media asset.

This parameter is required.', example='53afdf003a******6a16b5feac6402', position='Query'),
  mediaMarks: string(name='MediaMarks', description='The marks of the media asset.

This parameter is required.', position='Query'),
}

model UpdateMediaMarksResponseBody = {
  mediaId?: string(name='MediaId', description='The ID of the media asset.', example='53afdf003a******6a16b5feac6402'),
  mediaMarkIds?: string(name='MediaMarkIds', description='The IDs of the successfully modified marks.', example='mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60'),
  requestId?: string(name='RequestId', description='The request ID.', example='******11-DB8D-4A9A-875B-275798******'),
}

model UpdateMediaMarksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMediaMarksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateMediaMarks  UpdateMediaMarksRequest
  * @return UpdateMediaMarksResponse
 */
async function updateMediaMarks(request: UpdateMediaMarksRequest): UpdateMediaMarksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMediaMarks', 'POST', '/', 'json', false, 'json', request);
}

model UpdateMediaToSearchLibRequest {
  regionId?: string(name='RegionId', position='Host'),
  mediaId: string(name='MediaId', description='The ID of the media asset.

This parameter is required.', example='****019b82e24b37a1c2958dec38****', position='Query'),
  msgBody: string(name='MsgBody', description='The message body.

This parameter is required.', example='{}', position='Query'),
  searchLibName?: string(name='SearchLibName', description='The name of the search library. Default value: ims-default-search-lib.', example='test1', position='Query'),
}

model UpdateMediaToSearchLibResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  mediaId?: string(name='MediaId', description='The ID of the media asset.', example='******b48fb04483915d4f2cd8******'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E84BE44-58A7-****-****-FBEBEA16EF94'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateMediaToSearchLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMediaToSearchLibResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateMediaToSearchLib  UpdateMediaToSearchLibRequest
  * @return UpdateMediaToSearchLibResponse
 */
async function updateMediaToSearchLib(request: UpdateMediaToSearchLibRequest): UpdateMediaToSearchLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMediaToSearchLib', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePipelineRequest {
  name?: string(name='Name', example='test-pipeline', position='Query'),
  pipelineId: string(name='PipelineId', description='This parameter is required.', example='****d80e4e4044975745c14b****', position='Query'),
  priority?: int32(name='Priority', example='6', position='Query'),
  status?: string(name='Status', example='Paused', position='Query'),
}

model UpdatePipelineResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model UpdatePipelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePipelineResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdatePipeline  UpdatePipelineRequest
  * @return UpdatePipelineResponse
 */
async function updatePipeline(request: UpdatePipelineRequest): UpdatePipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePipeline', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRtcRobotInstanceRequest {
  config?: {
    enableVoiceInterrupt?: boolean(name='EnableVoiceInterrupt', example='false'),
    greeting?: string(name='Greeting'),
    voiceId?: string(name='VoiceId', example='zhixiaoxia'),
  }(name='Config', shrink='json', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='727dc0e296014bb58670940a3da95592', position='Query'),
}

model UpdateRtcRobotInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='7707F0A2-C6FD-5959-87EB-7C4D02384FD4'),
}

model UpdateRtcRobotInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRtcRobotInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateRtcRobotInstance  UpdateRtcRobotInstanceRequest
  * @return UpdateRtcRobotInstanceResponse
 */
async function updateRtcRobotInstance(request: UpdateRtcRobotInstanceRequest): UpdateRtcRobotInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRtcRobotInstance', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTemplateRequest {
  config?: string(name='Config', example='参见模板Config文档', position='Body'),
  coverUrl?: string(name='CoverUrl', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg', position='Query'),
  name?: string(name='Name', example='视频添加水印模板', position='Query'),
  previewMedia?: string(name='PreviewMedia', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
  relatedMediaids?: string(name='RelatedMediaids', example='{"video":["******c04f1d4a06996144cc1a******","******cb7db64841b159b4f2ea******"],"audio":["******c04f1d4a06996144cc1a******"],"image":["******c04f1d4a06996144cc1a******"]}', position='Query'),
  source?: string(name='Source', example='OpenAPI', position='Query'),
  status?: string(name='Status', example='Available', position='Query'),
  templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****', position='Query'),
}

model UpdateTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model UpdateTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTemplate  UpdateTemplateRequest
  * @return UpdateTemplateResponse
 */
async function updateTemplate(request: UpdateTemplateRequest): UpdateTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTemplate', 'POST', '/', 'json', true, 'form', request);
}

model UploadMediaByURLRequest {
  regionId?: string(name='RegionId', position='Host'),
  appId?: string(name='AppId', description='The application ID.', example='app-1000000', position='Query'),
  entityId?: string(name='EntityId', description='The entity ID. You can call the CreateEntity operation to create an entity and specify a dynamic metadata structure.', example='d67281da3c8743b8823ad12976187***', position='Query'),
  mediaMetaData?: string(name='MediaMetaData', description='The metadata of the media file that you want to upload. The value must be a JSON string.

*   This parameter takes effect only if its value matches a URL that is specified in UploadURLs.
*   You must convert the JSON-formatted data, such as [UploadMetadata, UploadMetadata,…], into a JSON string.
*   For more information, see the "UploadMetadata" section of this topic.', example='[{"SourceURL":"https://example.aliyundoc.com/video01.mp4","Title":"urlUploadTest"}]', position='Query'),
  postProcessConfig?: string(name='PostProcessConfig', description='The postprocessing configurations. You can specify this parameter if Type is set to video or audio.

Set ProcessType to Workflow.', example='{"ProcessType": "Workflow","ProcessID":"b72a06c6beeb4dcdb898feef067b1***"}', position='Query'),
  uploadTargetConfig?: string(name='UploadTargetConfig', description='The destination storage address.

Set StorageType to oss.

Set StorageLocation to an address in ApsaraVideo VOD. You cannot set this field to an OSS URL.', example='{"StorageType":"oss","StorageLocation":"outin-***.oss-cn-shanghai.aliyuncs.com"}', position='Query'),
  uploadURLs?: string(name='UploadURLs', description='The URL of the source file.

*   The URL must contain a file name extension, such as mp4 in `https://****.mp4`.

    *   If the URL does not contain a file name extension, you can specify one by setting `FileExtension` in `UploadMetadata`.
    *   If the URL contains a file name extension and `FileExtension` is also specified, the value of `FileExtension` prevails.

*   URL encoding is required. Separate multiple URLs with commas (,). You can specify a maximum of 20 URLs.

*   Special characters may cause upload failures. Therefore, you must encode URLs before you separate them with commas (,).', example='https://diffurl.mp4', position='Query'),
  userData?: string(name='UserData', description='The user data. The value must be a JSON string. You can configure settings such as message callbacks.', example='{"MessageCallback":{"CallbackURL":"http://example.aliyundoc.com"},"Extend":{"localId":"xxx","test":"www"}}', position='Query'),
}

model UploadMediaByURLResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='****83B7-7F87-4792-BFE9-63CD2137****'),
  uploadJobs?: [ 
    {
      jobId?: string(name='JobId', description='The ID of the upload job.', example='20ce1e05dba64576b96e9683879f0***'),
      mediaId?: string(name='MediaId', description='The ID of the media asset.', example='f476988629f54a7b8a4ba90d1a6c7***'),
      sourceURL?: string(name='SourceURL', description='The URL of the source file that is uploaded in the upload job.', example='http://example****.mp4'),
    }
  ](name='UploadJobs', description='The information about upload jobs.'),
}

model UploadMediaByURLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadMediaByURLResponseBody(name='body'),
}

/**
  * @description *   If a callback is configured, you will receive an UploadByURLComplete event notification after the file is uploaded. You can query the upload status by calling the GetURLUploadInfos operation.
  * *   After a request is submitted, the upload job is queued as an asynchronous job in the cloud. You can query the status of the upload job based on information such as the URL and media asset ID that are returned in the event notification.
  * *   You can call this operation to upload media files that are not stored on a local server or device and must be uploaded by using URLs that are accessible over the Internet.
  * *   You can call this operation to upload media files only to ApsaraVideo VOD, but not to your own Object Storage Service (OSS) buckets. To upload a media file to an OSS bucket, pull the file to a local directory, use [OSS SDK](https://help.aliyun.com/document_detail/32006.html) to upload the file to an OSS bucket, and then call the [RegisterMediaInfo](https://help.aliyun.com/document_detail/441152.html) operation to register the file in the OSS bucket with the media asset library.
  * *   This operation is available only in the China (Shanghai), China (Beijing), and China (Shenzhen) regions.
  * *   You can call this operation to upload only audio and video files.
  * @param request  the request parameters of UploadMediaByURL  UploadMediaByURLRequest
  * @return UploadMediaByURLResponse
 */
async function uploadMediaByURL(request: UploadMediaByURLRequest): UploadMediaByURLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadMediaByURL', 'POST', '/', 'json', false, 'json', request);
}

model UploadStreamByURLRequest {
  regionId?: string(name='RegionId', position='Host'),
  definition?: string(name='Definition', description='The quality of the media stream. Valid values:

*   FD: low definition.
*   LD: standard definition.
*   SD: high definition.
*   HD: ultra-high definition.
*   OD: original quality.
*   2K: 2K resolution.
*   4K: 4K resolution.
*   SQ: standard sound quality.
*   HQ: high sound quality.', example='HD', position='Query'),
  fileExtension?: string(name='FileExtension', description='The file name extension of the media stream.', example='mp4', position='Query'),
  HDRType?: string(name='HDRType', description='The high dynamic range (HDR) format of the transcoded stream. Valid values:

*   HDR
*   HDR10
*   HLG
*   DolbyVision
*   HDRVivid
*   SDR+

> 

*   The value is not case-sensitive,

*   You can leave this parameter empty for non-HDR streams.', example='HDR10', position='Query'),
  mediaId?: string(name='MediaId', description='The ID of the media asset.', example='411bed50018971edb60b0764a0ec6***', position='Query'),
  streamURL?: string(name='StreamURL', description='The URL of the transcoded stream file.

If the URL of the transcoded stream requires authentication, you must specify the authentication parameters in the stream URL and make sure that the URL can be accessed over the Internet.', example='https://example.com/sample-stream.mp4', position='Query'),
  userData?: string(name='UserData', description='The user data.', example='{"MessageCallback":{"CallbackURL":"http://test.test.com"}, "Extend":{"localId":"xxx","test":"www"}}', position='Query'),
}

model UploadStreamByURLResponseBody = {
  fileURL?: string(name='FileURL', description='The OSS URL of the file.', example='http://outin-***.oss-cn-shanghai.aliyuncs.com/stream/48555e8b-181dd5a8c07/48555e8b-181dd5a8c07.mp4'),
  jobId?: string(name='JobId', description='The ID of the upload job.', example='****cdb3e74639973036bc84****'),
  mediaId?: string(name='MediaId', description='The ID of the media asset.', example='411bed50018971edb60b0764a0ec6***'),
  requestId?: string(name='RequestId', description='The request ID.', example='******89-C21D-4B78-AE24-3788B8******'),
  sourceURL?: string(name='SourceURL', description='The URL of the source file that is uploaded in the upload job.', example='https://example.com/sample-stream.mp4'),
}

model UploadStreamByURLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadStreamByURLResponseBody(name='body'),
}

/**
  * @description *   You can call this operation to pull a media stream file based on a URL and upload the file. After the media stream file is uploaded, the media stream is associated with the specified media asset ID.
  * *   You can call this operation to upload media stream files only to ApsaraVideo VOD, but not to your own Object Storage Service (OSS) buckets. To upload a media stream file to an OSS bucket, pull the file to a local directory, use [OSS SDK](https://help.aliyun.com/document_detail/32006.html) to upload the file to an OSS bucket, and then call the [RegisterMediaStream](https://help.aliyun.com/document_detail/440765.html) operation to associate the media stream with the specified media asset ID.
  * *   This operation is available only in the China (Shanghai), China (Beijing), and China (Shenzhen) regions.
  * @param request  the request parameters of UploadStreamByURL  UploadStreamByURLRequest
  * @return UploadStreamByURLResponse
 */
async function uploadStreamByURL(request: UploadStreamByURLRequest): UploadStreamByURLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadStreamByURL', 'POST', '/', 'json', false, 'json', request);
}

