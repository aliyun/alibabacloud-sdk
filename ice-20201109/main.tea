/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    ap-northeast-1 = 'ice.aliyuncs.com',
    ap-northeast-2-pop = 'ice.aliyuncs.com',
    ap-south-1 = 'ice.aliyuncs.com',
    ap-southeast-1 = 'ice.aliyuncs.com',
    ap-southeast-2 = 'ice.aliyuncs.com',
    ap-southeast-3 = 'ice.aliyuncs.com',
    ap-southeast-5 = 'ice.aliyuncs.com',
    cn-beijing = 'ice.aliyuncs.com',
    cn-beijing-finance-1 = 'ice.aliyuncs.com',
    cn-beijing-finance-pop = 'ice.aliyuncs.com',
    cn-beijing-gov-1 = 'ice.aliyuncs.com',
    cn-beijing-nu16-b01 = 'ice.aliyuncs.com',
    cn-chengdu = 'ice.aliyuncs.com',
    cn-edge-1 = 'ice.aliyuncs.com',
    cn-fujian = 'ice.aliyuncs.com',
    cn-haidian-cm12-c01 = 'ice.aliyuncs.com',
    cn-hangzhou = 'ice.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'ice.aliyuncs.com',
    cn-hangzhou-finance = 'ice.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'ice.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'ice.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'ice.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'ice.aliyuncs.com',
    cn-hangzhou-test-306 = 'ice.aliyuncs.com',
    cn-hongkong = 'ice.aliyuncs.com',
    cn-hongkong-finance-pop = 'ice.aliyuncs.com',
    cn-huhehaote = 'ice.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'ice.aliyuncs.com',
    cn-north-2-gov-1 = 'ice.aliyuncs.com',
    cn-qingdao = 'ice.aliyuncs.com',
    cn-qingdao-nebula = 'ice.aliyuncs.com',
    cn-shanghai-et15-b01 = 'ice.aliyuncs.com',
    cn-shanghai-et2-b01 = 'ice.aliyuncs.com',
    cn-shanghai-finance-1 = 'ice.aliyuncs.com',
    cn-shanghai-inner = 'ice.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'ice.aliyuncs.com',
    cn-shenzhen = 'ice.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ice.aliyuncs.com',
    cn-shenzhen-inner = 'ice.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'ice.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'ice.aliyuncs.com',
    cn-wuhan = 'ice.aliyuncs.com',
    cn-wulanchabu = 'ice.aliyuncs.com',
    cn-yushanfang = 'ice.aliyuncs.com',
    cn-zhangbei = 'ice.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'ice.aliyuncs.com',
    cn-zhangjiakou = 'ice.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'ice.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'ice.aliyuncs.com',
    eu-central-1 = 'ice.aliyuncs.com',
    eu-west-1 = 'ice.aliyuncs.com',
    eu-west-1-oxs = 'ice.aliyuncs.com',
    me-east-1 = 'ice.aliyuncs.com',
    rus-west-1-pop = 'ice.aliyuncs.com',
    us-east-1 = 'ice.aliyuncs.com',
    us-west-1 = 'ice.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('ice', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ListSmartJobsRequest {
  status?: long(name='Status'),
  nextToken?: string(name='NextToken'),
  maxResults?: long(name='MaxResults'),
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
  jobType?: string(name='JobType'),
  sortBy?: string(name='SortBy'),
  jobState?: string(name='JobState'),
}

model ListSmartJobsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  smartJobList?: [ 
    {
      jobId?: string(name='JobId'),
      title?: string(name='Title'),
      description?: string(name='Description'),
      userId?: long(name='UserId'),
      jobType?: string(name='JobType'),
      editingConfig?: string(name='EditingConfig'),
      userData?: string(name='UserData'),
      jobState?: string(name='JobState'),
      createTime?: string(name='CreateTime'),
      modifiedTime?: string(name='ModifiedTime'),
      inputConfig?: {
        inputFile?: string(name='InputFile'),
        keyword?: string(name='Keyword'),
      }(name='InputConfig'),
      outputConfig?: {
        bucket?: string(name='Bucket'),
        object?: string(name='Object'),
      }(name='OutputConfig'),
    }
  ](name='SmartJobList'),
  nextToken?: string(name='NextToken'),
  maxResults?: string(name='MaxResults'),
  totalCount?: string(name='TotalCount'),
}

model ListSmartJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSmartJobsResponseBody(name='body'),
}

async function listSmartJobsWithOptions(request: ListSmartJobsRequest, runtime: Util.RuntimeOptions): ListSmartJobsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListSmartJobs', '2020-11-09', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listSmartJobs(request: ListSmartJobsRequest): ListSmartJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSmartJobsWithOptions(request, runtime);
}

model DescribeRelatedAuthorizationStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  OSSAuthorized?: boolean(name='OSSAuthorized'),
  MTSAuthorized?: boolean(name='MTSAuthorized'),
  MNSAuthorized?: boolean(name='MNSAuthorized'),
  authorized?: boolean(name='Authorized'),
}

model DescribeRelatedAuthorizationStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRelatedAuthorizationStatusResponseBody(name='body'),
}

async function describeRelatedAuthorizationStatusWithOptions(runtime: Util.RuntimeOptions): DescribeRelatedAuthorizationStatusResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeRelatedAuthorizationStatus', '2020-11-09', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeRelatedAuthorizationStatus(): DescribeRelatedAuthorizationStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRelatedAuthorizationStatusWithOptions(runtime);
}

model DeleteSmartJobRequest {
  jobId?: string(name='JobId'),
}

model DeleteSmartJobResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  state?: string(name='State'),
  jobId?: string(name='JobId'),
}

model DeleteSmartJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSmartJobResponseBody(name='body'),
}

async function deleteSmartJobWithOptions(request: DeleteSmartJobRequest, runtime: Util.RuntimeOptions): DeleteSmartJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSmartJob', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSmartJob(request: DeleteSmartJobRequest): DeleteSmartJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSmartJobWithOptions(request, runtime);
}

model AddTemplateRequest {
  name?: string(name='Name', description='模板名称'),
  type?: string(name='Type', description='模板类型，取值范围：Timeline'),
  config?: string(name='Config', description='参见Timeline模板Config文档'),
  coverUrl?: string(name='CoverUrl', description='模板封面'),
  previewMedia?: string(name='PreviewMedia', description='预览视频媒资id'),
  status?: string(name='Status', description='模板状态'),
  source?: string(name='Source', description='模板创建来源，默认OpenAPI'),
  relatedMediaids?: string(name='RelatedMediaids', description='模板相关素材，模板编辑器使用'),
}

model AddTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  template?: {
    templateId?: string(name='TemplateId', description='模板Id'),
    name?: string(name='Name', description='模板名称'),
    type?: string(name='Type', description='模板类型'),
    config?: string(name='Config', description='参见Timeline模板Config文档'),
    coverUrl?: string(name='CoverUrl', description='模板封面'),
    previewMedia?: string(name='PreviewMedia', description='预览视频媒资id'),
    status?: string(name='Status', description='模板状态'),
    createSource?: string(name='CreateSource', description='模板创建来源'),
    modifiedSource?: string(name='ModifiedSource', description='模板修改来源'),
  }(name='Template', description='模板信息'),
}

model AddTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: AddTemplateResponseBody(name='body'),
}

async function addTemplateWithOptions(request: AddTemplateRequest, runtime: Util.RuntimeOptions): AddTemplateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('AddTemplate', '2020-11-09', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function addTemplate(request: AddTemplateRequest): AddTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTemplateWithOptions(request, runtime);
}

model UpdateEditingProjectRequest {
  title?: string(name='Title', description='云剪辑工程标题'),
  description?: string(name='Description', description='云剪辑工程描述'),
  timeline?: string(name='Timeline', description='云剪辑工程时间线，Json格式'),
  coverURL?: string(name='CoverURL', description='云剪辑工程封面'),
  projectId?: string(name='ProjectId', description='云剪辑工程ID'),
}

model UpdateEditingProjectResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateEditingProjectResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEditingProjectResponseBody(name='body'),
}

async function updateEditingProjectWithOptions(request: UpdateEditingProjectRequest, runtime: Util.RuntimeOptions): UpdateEditingProjectResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateEditingProject', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateEditingProject(request: UpdateEditingProjectRequest): UpdateEditingProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEditingProjectWithOptions(request, runtime);
}

model ListMediaProducingJobsRequest {
  status?: string(name='Status', description='查询以下状态的合成任务，支持多值，以英文逗号分隔'),
}

model ListMediaProducingJobsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  mediaProducingJobList?: [ 
    {
      jobId?: string(name='JobId'),
      projectId?: string(name='ProjectId'),
      mediaId?: string(name='MediaId'),
      mediaURL?: string(name='MediaURL'),
      templateId?: string(name='TemplateId'),
      clipsParam?: string(name='ClipsParam'),
      duration?: float(name='Duration'),
      createTime?: string(name='CreateTime'),
      completeTime?: string(name='CompleteTime'),
      modifiedTime?: string(name='ModifiedTime'),
      status?: string(name='Status'),
      code?: string(name='Code'),
      message?: string(name='Message'),
    }
  ](name='MediaProducingJobList'),
}

model ListMediaProducingJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListMediaProducingJobsResponseBody(name='body'),
}

async function listMediaProducingJobsWithOptions(request: ListMediaProducingJobsRequest, runtime: Util.RuntimeOptions): ListMediaProducingJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListMediaProducingJobs', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listMediaProducingJobs(request: ListMediaProducingJobsRequest): ListMediaProducingJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMediaProducingJobsWithOptions(request, runtime);
}

model GetEditingProjectMaterialsRequest {
  projectId?: string(name='ProjectId', description='云剪辑工程ID'),
}

model GetEditingProjectMaterialsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  projectId?: string(name='ProjectId'),
  mediaInfos?: [ 
    {
      mediaId?: string(name='MediaId', description='媒资ID'),
      mediaBasicInfo?: {
        mediaId?: string(name='MediaId', description='MediaId'),
        inputURL?: string(name='InputURL', description='待注册的媒资在相应系统中的地址'),
        mediaType?: string(name='MediaType', description='媒资媒体类型'),
        businessType?: string(name='BusinessType', description='媒资业务类型'),
        source?: string(name='Source', description='来源'),
        title?: string(name='Title', description='标题'),
        description?: string(name='Description', description='内容描述'),
        category?: string(name='Category', description='分类'),
        mediaTags?: string(name='MediaTags', description='标签'),
        coverURL?: string(name='CoverURL', description='封面地址'),
        userData?: string(name='UserData', description='用户数据'),
        snapshots?: string(name='Snapshots', description='截图'),
        status?: string(name='Status', description='资源状态'),
        transcodeStatus?: string(name='TranscodeStatus', description='转码状态'),
        createTime?: string(name='CreateTime', description='媒资创建时间'),
        modifiedTime?: string(name='ModifiedTime', description='媒资修改时间'),
        deletedTime?: string(name='DeletedTime', description='媒资删除时间'),
        spriteImages?: string(name='SpriteImages', description='雪碧图'),
      }(name='MediaBasicInfo', description='BasicInfo'),
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            fileName?: string(name='FileName', description='文件名'),
            fileStatus?: string(name='FileStatus', description='文件状态'),
            fileType?: string(name='FileType', description='文件类型'),
            fileSize?: string(name='FileSize', description='文件大小（字节）'),
            fileUrl?: string(name='FileUrl', description='文件oss地址'),
            region?: string(name='Region', description='文件存储区域'),
            formatName?: string(name='FormatName', description='封装格式'),
            duration?: string(name='Duration', description='时长'),
            bitrate?: string(name='Bitrate', description='码率'),
            width?: string(name='Width', description='宽'),
            height?: string(name='Height', description='高'),
          }(name='FileBasicInfo', description='文件基础信息，包含时长，大小等'),
        }
      ](name='FileInfoList', description='FileInfos'),
    }
  ](name='MediaInfos', description='符合要求的媒资集合'),
}

model GetEditingProjectMaterialsResponse = {
  headers: map[string]string(name='headers'),
  body: GetEditingProjectMaterialsResponseBody(name='body'),
}

async function getEditingProjectMaterialsWithOptions(request: GetEditingProjectMaterialsRequest, runtime: Util.RuntimeOptions): GetEditingProjectMaterialsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetEditingProjectMaterials', '2020-11-09', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getEditingProjectMaterials(request: GetEditingProjectMaterialsRequest): GetEditingProjectMaterialsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEditingProjectMaterialsWithOptions(request, runtime);
}

model GetDefaultStorageLocationResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  storageType?: string(name='StorageType', description='存储类型'),
  bucket?: string(name='Bucket', description='oss bucket 名称'),
  path?: string(name='Path', description='路径'),
  status?: string(name='Status', description='状态'),
}

model GetDefaultStorageLocationResponse = {
  headers: map[string]string(name='headers'),
  body: GetDefaultStorageLocationResponseBody(name='body'),
}

async function getDefaultStorageLocationWithOptions(runtime: Util.RuntimeOptions): GetDefaultStorageLocationResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('GetDefaultStorageLocation', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDefaultStorageLocation(): GetDefaultStorageLocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDefaultStorageLocationWithOptions(runtime);
}

model DeleteMediaInfosRequest {
  mediaIds?: string(name='MediaIds', description='ICE 媒资ID'),
  inputURLs?: string(name='InputURLs', description='待注册的媒资在相应系统中的地址'),
}

model DeleteMediaInfosResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  ignoredList?: [ string ](name='IgnoredList', description='出现获取错误的ID或inputUr'),
}

model DeleteMediaInfosResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMediaInfosResponseBody(name='body'),
}

async function deleteMediaInfosWithOptions(request: DeleteMediaInfosRequest, runtime: Util.RuntimeOptions): DeleteMediaInfosResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteMediaInfos', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteMediaInfos(request: DeleteMediaInfosRequest): DeleteMediaInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMediaInfosWithOptions(request, runtime);
}

model SetEventCallbackRequest {
  callbackQueueName?: string(name='CallbackQueueName'),
  eventTypeList?: string(name='EventTypeList'),
}

model SetEventCallbackResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success', description='是否设置成功'),
}

model SetEventCallbackResponse = {
  headers: map[string]string(name='headers'),
  body: SetEventCallbackResponseBody(name='body'),
}

async function setEventCallbackWithOptions(request: SetEventCallbackRequest, runtime: Util.RuntimeOptions): SetEventCallbackResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetEventCallback', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setEventCallback(request: SetEventCallbackRequest): SetEventCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return setEventCallbackWithOptions(request, runtime);
}

model GetTemplateRequest {
  templateId?: string(name='TemplateId', description='模板Id'),
}

model GetTemplateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  template?: {
    templateId?: string(name='TemplateId', description='模板ID'),
    name?: string(name='Name', description='模板名称'),
    type?: string(name='Type', description='模板类型'),
    config?: string(name='Config', description='模板配置'),
    previewMedia?: string(name='PreviewMedia', description='预览素材'),
    status?: string(name='Status', description='模板状态'),
    createSource?: string(name='CreateSource', description='创建来源'),
    modifiedSource?: string(name='ModifiedSource', description='修改来源'),
    previewMediaStatus?: string(name='PreviewMediaStatus', description='预览素材状态'),
    creationTime?: string(name='CreationTime', description='创建时间'),
    modifiedTime?: string(name='ModifiedTime', description='修改时间'),
    coverURL?: string(name='CoverURL', description='封面URL'),
    clipsParam?: string(name='ClipsParam', description='提交合成任务的ClipsParam参数'),
  }(name='Template'),
}

model GetTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetTemplateResponseBody(name='body'),
}

async function getTemplateWithOptions(request: GetTemplateRequest, runtime: Util.RuntimeOptions): GetTemplateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetTemplate', '2020-11-09', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getTemplate(request: GetTemplateRequest): GetTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTemplateWithOptions(request, runtime);
}

model RegisterMediaInfoRequest {
  inputURL?: string(name='InputURL', description='媒资媒体url'),
  mediaType?: string(name='MediaType', description='媒资媒体类型'),
  businessType?: string(name='BusinessType', description='媒资业务类型'),
  title?: string(name='Title', description='标题'),
  description?: string(name='Description', description='描述'),
  category?: string(name='Category', description='分类'),
  mediaTags?: string(name='MediaTags', description='标签,如果有多个标签用逗号隔开'),
  coverURL?: string(name='CoverURL', description='封面图，仅视频媒资有效'),
  dynamicMetaDataList?: string(name='DynamicMetaDataList', description='用户自定义元数据'),
  userData?: string(name='UserData', description='用户数据，最大1024字节'),
  overwrite?: boolean(name='Overwrite', description='是否覆盖已有媒资'),
  clientToken?: string(name='ClientToken', description='客户端token'),
  registerConfig?: string(name='RegisterConfig', description='注册媒资的配置'),
}

model RegisterMediaInfoResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  mediaId?: string(name='MediaId', description='ICE媒资ID'),
}

model RegisterMediaInfoResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterMediaInfoResponseBody(name='body'),
}

async function registerMediaInfoWithOptions(request: RegisterMediaInfoRequest, runtime: Util.RuntimeOptions): RegisterMediaInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RegisterMediaInfo', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function registerMediaInfo(request: RegisterMediaInfoRequest): RegisterMediaInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerMediaInfoWithOptions(request, runtime);
}

model CreateEditingProjectRequest {
  title?: string(name='Title', description='云剪辑工程标题'),
  description?: string(name='Description', description='云剪辑工程描述'),
  timeline?: string(name='Timeline', description='云剪辑工程时间线，Json格式'),
  coverURL?: string(name='CoverURL', description='云剪辑工程封面'),
  FEExtend?: string(name='FEExtend', description='FEExtend'),
}

model CreateEditingProjectResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  project?: {
    projectId?: string(name='ProjectId'),
    title?: string(name='Title'),
    description?: string(name='Description'),
    timeline?: string(name='Timeline'),
    coverURL?: string(name='CoverURL'),
    status?: long(name='Status'),
    statusName?: string(name='StatusName'),
    createTime?: string(name='CreateTime'),
    modifiedTime?: string(name='ModifiedTime'),
    duration?: float(name='Duration'),
    createSource?: string(name='CreateSource'),
    modifiedSource?: string(name='ModifiedSource'),
    templateType?: string(name='TemplateType'),
  }(name='Project'),
}

model CreateEditingProjectResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEditingProjectResponseBody(name='body'),
}

async function createEditingProjectWithOptions(request: CreateEditingProjectRequest, runtime: Util.RuntimeOptions): CreateEditingProjectResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateEditingProject', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createEditingProject(request: CreateEditingProjectRequest): CreateEditingProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEditingProjectWithOptions(request, runtime);
}

model BatchGetMediaInfosRequest {
  mediaIds?: string(name='MediaIds'),
  additionType?: string(name='AdditionType'),
}

model BatchGetMediaInfosResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  mediaInfos?: [ 
    {
      mediaId?: string(name='MediaId', description='媒资ID'),
      mediaBasicInfo?: {
        mediaId?: string(name='MediaId', description='MediaId'),
        inputURL?: string(name='InputURL', description='待注册的媒资在相应系统中的地址'),
        mediaType?: string(name='MediaType', description='媒资媒体类型'),
        businessType?: string(name='BusinessType', description='媒资业务类型'),
        source?: string(name='Source', description='来源'),
        title?: string(name='Title', description='标题'),
        description?: string(name='Description', description='内容描述'),
        category?: string(name='Category', description='分类'),
        mediaTags?: string(name='MediaTags', description='标签'),
        coverURL?: string(name='CoverURL', description='封面地址'),
        userData?: string(name='UserData', description='用户数据'),
        snapshots?: string(name='Snapshots', description='截图'),
        status?: string(name='Status', description='资源状态'),
        transcodeStatus?: string(name='TranscodeStatus', description='转码状态'),
        createTime?: string(name='CreateTime', description='媒资创建时间'),
        modifiedTime?: string(name='ModifiedTime', description='媒资修改时间'),
        deletedTime?: string(name='DeletedTime', description='媒资删除时间'),
        spriteImages?: string(name='SpriteImages', description='雪碧图'),
      }(name='MediaBasicInfo', description='BasicInfo'),
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            fileName?: string(name='FileName', description='文件名'),
            fileStatus?: string(name='FileStatus', description='文件状态'),
            fileType?: string(name='FileType', description='文件类型'),
            fileSize?: string(name='FileSize', description='文件大小（字节）'),
            fileUrl?: string(name='FileUrl', description='文件oss地址'),
            region?: string(name='Region', description='文件存储区域'),
            formatName?: string(name='FormatName', description='封装格式'),
            duration?: string(name='Duration', description='时长'),
            bitrate?: string(name='Bitrate', description='码率'),
            width?: string(name='Width', description='宽'),
            height?: string(name='Height', description='高'),
          }(name='FileBasicInfo', description='文件基础信息，包含时长，大小等'),
        }
      ](name='FileInfoList', description='FileInfos'),
    }
  ](name='MediaInfos', description='符合要求的媒资集合'),
}

model BatchGetMediaInfosResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetMediaInfosResponseBody(name='body'),
}

async function batchGetMediaInfosWithOptions(request: BatchGetMediaInfosRequest, runtime: Util.RuntimeOptions): BatchGetMediaInfosResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchGetMediaInfos', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchGetMediaInfos(request: BatchGetMediaInfosRequest): BatchGetMediaInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetMediaInfosWithOptions(request, runtime);
}

model SetDefaultStorageLocationRequest {
  storageType?: string(name='StorageType'),
  bucket?: string(name='Bucket'),
  path?: string(name='Path'),
}

model SetDefaultStorageLocationResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model SetDefaultStorageLocationResponse = {
  headers: map[string]string(name='headers'),
  body: SetDefaultStorageLocationResponseBody(name='body'),
}

async function setDefaultStorageLocationWithOptions(request: SetDefaultStorageLocationRequest, runtime: Util.RuntimeOptions): SetDefaultStorageLocationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetDefaultStorageLocation', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setDefaultStorageLocation(request: SetDefaultStorageLocationRequest): SetDefaultStorageLocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDefaultStorageLocationWithOptions(request, runtime);
}

model UpdateMediaInfoRequest {
  mediaId?: string(name='MediaId', description='媒资Id'),
  inputURL?: string(name='InputURL', description='媒资媒体类型'),
  businessType?: string(name='BusinessType', description='媒资业务类型'),
  title?: string(name='Title', description='标题'),
  description?: string(name='Description', description='描述'),
  category?: string(name='Category', description='分类'),
  mediaTags?: string(name='MediaTags', description='标签,如果有多个标签用逗号隔开'),
  coverURL?: string(name='CoverURL', description='封面图，仅视频媒资有效'),
  dynamicMetaDataList?: string(name='DynamicMetaDataList', description='用户自定义元数据'),
  userData?: string(name='UserData', description='用户数据，最大1024字节'),
  appendTags?: boolean(name='AppendTags', description='是否以append的形式更新Tags字段'),
  appendDynamicMeta?: boolean(name='AppendDynamicMeta', description='是否以append的形式更新DynamicMetaDataList字段'),
}

model UpdateMediaInfoResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  mediaId?: string(name='MediaId', description='ICE媒资ID'),
}

model UpdateMediaInfoResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateMediaInfoResponseBody(name='body'),
}

async function updateMediaInfoWithOptions(request: UpdateMediaInfoRequest, runtime: Util.RuntimeOptions): UpdateMediaInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateMediaInfo', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateMediaInfo(request: UpdateMediaInfoRequest): UpdateMediaInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMediaInfoWithOptions(request, runtime);
}

model GetMediaProducingJobRequest {
  jobId?: string(name='JobId'),
}

model GetMediaProducingJobResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  mediaProducingJob?: {
    jobId?: string(name='JobId'),
    projectId?: string(name='ProjectId'),
    mediaId?: string(name='MediaId'),
    mediaURL?: string(name='MediaURL'),
    timeline?: string(name='Timeline'),
    templateId?: string(name='TemplateId'),
    clipsParam?: string(name='ClipsParam'),
    duration?: float(name='Duration'),
    createTime?: string(name='CreateTime'),
    completeTime?: string(name='CompleteTime'),
    modifiedTime?: string(name='ModifiedTime'),
    status?: string(name='Status'),
    code?: string(name='Code'),
    message?: string(name='Message'),
  }(name='MediaProducingJob'),
}

model GetMediaProducingJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetMediaProducingJobResponseBody(name='body'),
}

async function getMediaProducingJobWithOptions(request: GetMediaProducingJobRequest, runtime: Util.RuntimeOptions): GetMediaProducingJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetMediaProducingJob', '2020-11-09', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getMediaProducingJob(request: GetMediaProducingJobRequest): GetMediaProducingJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMediaProducingJobWithOptions(request, runtime);
}

model DescribeIceProductStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  ICEServiceAvaliable?: boolean(name='ICEServiceAvaliable'),
}

model DescribeIceProductStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIceProductStatusResponseBody(name='body'),
}

async function describeIceProductStatusWithOptions(runtime: Util.RuntimeOptions): DescribeIceProductStatusResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeIceProductStatus', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeIceProductStatus(): DescribeIceProductStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIceProductStatusWithOptions(runtime);
}

model ListMediaBasicInfosRequest {
  startTime?: string(name='StartTime', description='创建时间'),
  endTime?: string(name='EndTime', description='结束时间'),
  mediaType?: string(name='MediaType', description='媒资媒体类型'),
  businessType?: string(name='BusinessType', description='媒资业务类型'),
  source?: string(name='Source', description='来源'),
  category?: string(name='Category', description='分类'),
  status?: string(name='Status', description='资源状态'),
  nextToken?: string(name='NextToken', description='页号'),
  maxResults?: int32(name='MaxResults', description='分页大小'),
  sortBy?: string(name='SortBy', description='排序'),
  includeFileBasicInfo?: boolean(name='IncludeFileBasicInfo', description='返回值中是否包含文件基础信息'),
}

model ListMediaBasicInfosResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: long(name='TotalCount', description='符合要求的媒资总数'),
  mediaInfos?: [ 
    {
      mediaId?: string(name='MediaId', description='媒资ID'),
      mediaBasicInfo?: {
        mediaId?: string(name='MediaId', description='MediaId'),
        inputURL?: string(name='InputURL', description='待注册的媒资在相应系统中的地址'),
        mediaType?: string(name='MediaType', description='媒资媒体类型'),
        businessType?: string(name='BusinessType', description='媒资业务类型'),
        source?: string(name='Source', description='来源'),
        title?: string(name='Title', description='标题'),
        description?: string(name='Description', description='内容描述'),
        category?: string(name='Category', description='分类'),
        mediaTags?: string(name='MediaTags', description='标签'),
        coverURL?: string(name='CoverURL', description='封面地址'),
        userData?: string(name='UserData', description='用户数据'),
        snapshots?: string(name='Snapshots', description='截图'),
        status?: string(name='Status', description='资源状态'),
        transcodeStatus?: string(name='TranscodeStatus', description='转码状态'),
        createTime?: string(name='CreateTime', description='媒资创建时间'),
        modifiedTime?: string(name='ModifiedTime', description='媒资修改时间'),
        deletedTime?: string(name='DeletedTime', description='媒资删除时间'),
        spriteImages?: string(name='SpriteImages', description='雪碧图'),
      }(name='MediaBasicInfo', description='BasicInfo'),
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            fileName?: string(name='FileName', description='文件名'),
            fileStatus?: string(name='FileStatus', description='文件状态'),
            fileType?: string(name='FileType', description='文件类型'),
            fileSize?: string(name='FileSize', description='文件大小（字节）'),
            fileUrl?: string(name='FileUrl', description='文件oss地址'),
            region?: string(name='Region', description='文件存储区域'),
            formatName?: string(name='FormatName', description='封装格式'),
            duration?: string(name='Duration', description='时长'),
            bitrate?: string(name='Bitrate', description='码率'),
            width?: string(name='Width', description='宽'),
            height?: string(name='Height', description='高'),
          }(name='FileBasicInfo', description='文件基础信息，包含时长，大小等'),
        }
      ](name='FileInfoList', description='FileInfos'),
    }
  ](name='MediaInfos', description='符合要求的媒资集合'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
}

model ListMediaBasicInfosResponse = {
  headers: map[string]string(name='headers'),
  body: ListMediaBasicInfosResponseBody(name='body'),
}

async function listMediaBasicInfosWithOptions(request: ListMediaBasicInfosRequest, runtime: Util.RuntimeOptions): ListMediaBasicInfosResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListMediaBasicInfos', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listMediaBasicInfos(request: ListMediaBasicInfosRequest): ListMediaBasicInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMediaBasicInfosWithOptions(request, runtime);
}

model SubmitSubtitleProduceJobRequest {
  editingConfig?: string(name='EditingConfig'),
  type?: string(name='Type'),
  outputConfig?: string(name='OutputConfig'),
  inputConfig?: string(name='InputConfig'),
  isAsync?: long(name='IsAsync'),
  title?: string(name='Title'),
  description?: string(name='Description'),
  userData?: string(name='UserData'),
}

model SubmitSubtitleProduceJobResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  jobId?: string(name='JobId'),
}

model SubmitSubtitleProduceJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitSubtitleProduceJobResponseBody(name='body'),
}

async function submitSubtitleProduceJobWithOptions(request: SubmitSubtitleProduceJobRequest, runtime: Util.RuntimeOptions): SubmitSubtitleProduceJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitSubtitleProduceJob', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitSubtitleProduceJob(request: SubmitSubtitleProduceJobRequest): SubmitSubtitleProduceJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSubtitleProduceJobWithOptions(request, runtime);
}

model SubmitKeyWordCutJobRequest {
  keyword?: string(name='Keyword'),
  inputFile?: string(name='InputFile'),
  userData?: string(name='UserData'),
  title?: string(name='Title'),
  description?: string(name='Description'),
}

model SubmitKeyWordCutJobResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  jobId?: string(name='JobId'),
  output?: string(name='Output'),
  state?: string(name='State'),
  userData?: string(name='UserData'),
}

model SubmitKeyWordCutJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitKeyWordCutJobResponseBody(name='body'),
}

async function submitKeyWordCutJobWithOptions(request: SubmitKeyWordCutJobRequest, runtime: Util.RuntimeOptions): SubmitKeyWordCutJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('SubmitKeyWordCutJob', '2020-11-09', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function submitKeyWordCutJob(request: SubmitKeyWordCutJobRequest): SubmitKeyWordCutJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitKeyWordCutJobWithOptions(request, runtime);
}

model AddEditingProjectMaterialsRequest {
  projectId?: string(name='ProjectId', description='云剪辑工程ID'),
  materialMaps?: string(name='MaterialMaps', description='素材ID'),
}

model AddEditingProjectMaterialsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  projectId?: string(name='ProjectId'),
  mediaInfos?: [ 
    {
      mediaId?: string(name='MediaId', description='媒资ID'),
      mediaBasicInfo?: {
        mediaId?: string(name='MediaId', description='MediaId'),
        inputURL?: string(name='InputURL', description='待注册的媒资在相应系统中的地址'),
        mediaType?: string(name='MediaType', description='媒资媒体类型'),
        businessType?: string(name='BusinessType', description='媒资业务类型'),
        source?: string(name='Source', description='来源'),
        title?: string(name='Title', description='标题'),
        description?: string(name='Description', description='内容描述'),
        category?: string(name='Category', description='分类'),
        mediaTags?: string(name='MediaTags', description='标签'),
        coverURL?: string(name='CoverURL', description='封面地址'),
        userData?: string(name='UserData', description='用户数据'),
        snapshots?: string(name='Snapshots', description='截图'),
        status?: string(name='Status', description='资源状态'),
        transcodeStatus?: string(name='TranscodeStatus', description='转码状态'),
        createTime?: string(name='CreateTime', description='媒资创建时间'),
        modifiedTime?: string(name='ModifiedTime', description='媒资修改时间'),
        deletedTime?: string(name='DeletedTime', description='媒资删除时间'),
        spriteImages?: string(name='SpriteImages', description='雪碧图'),
      }(name='MediaBasicInfo', description='BasicInfo'),
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            fileName?: string(name='FileName', description='文件名'),
            fileStatus?: string(name='FileStatus', description='文件状态'),
            fileType?: string(name='FileType', description='文件类型'),
            fileSize?: string(name='FileSize', description='文件大小（字节）'),
            fileUrl?: string(name='FileUrl', description='文件oss地址'),
            region?: string(name='Region', description='文件存储区域'),
            formatName?: string(name='FormatName', description='封装格式'),
            duration?: string(name='Duration', description='时长'),
            bitrate?: string(name='Bitrate', description='码率'),
            width?: string(name='Width', description='宽'),
            height?: string(name='Height', description='高'),
          }(name='FileBasicInfo', description='文件基础信息，包含时长，大小等'),
        }
      ](name='FileInfoList', description='FileInfos'),
    }
  ](name='MediaInfos', description='符合要求的媒资集合'),
}

model AddEditingProjectMaterialsResponse = {
  headers: map[string]string(name='headers'),
  body: AddEditingProjectMaterialsResponseBody(name='body'),
}

async function addEditingProjectMaterialsWithOptions(request: AddEditingProjectMaterialsRequest, runtime: Util.RuntimeOptions): AddEditingProjectMaterialsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddEditingProjectMaterials', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addEditingProjectMaterials(request: AddEditingProjectMaterialsRequest): AddEditingProjectMaterialsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addEditingProjectMaterialsWithOptions(request, runtime);
}

model SubmitASRJobRequest {
  inputFile?: string(name='InputFile'),
  userData?: string(name='UserData'),
  title?: string(name='Title'),
  description?: string(name='Description'),
  startTime?: string(name='StartTime', description='开始时间'),
  duration?: string(name='Duration', description='持续时间'),
}

model SubmitASRJobResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  jobId?: string(name='JobId'),
  output?: string(name='Output'),
  state?: string(name='State'),
  userData?: string(name='UserData'),
}

model SubmitASRJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitASRJobResponseBody(name='body'),
}

async function submitASRJobWithOptions(request: SubmitASRJobRequest, runtime: Util.RuntimeOptions): SubmitASRJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitASRJob', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitASRJob(request: SubmitASRJobRequest): SubmitASRJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitASRJobWithOptions(request, runtime);
}

model GetEditingProjectRequest {
  projectId?: string(name='ProjectId', description='云剪辑工程ID'),
}

model GetEditingProjectResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  project?: {
    projectId?: string(name='ProjectId', description='云剪辑工程ID'),
    title?: string(name='Title', description='云剪辑工程标题'),
    timeline?: string(name='Timeline', description='云剪辑工程时间线'),
    description?: string(name='Description', description='云剪辑工程描述'),
    coverURL?: string(name='CoverURL', description='云剪辑工程封面'),
    createTime?: string(name='CreateTime', description='云剪辑工程创建时间'),
    modifiedTime?: string(name='ModifiedTime', description='云剪辑工程最新修改时间'),
    duration?: long(name='Duration', description='云剪辑工程总时长'),
    status?: string(name='Status', description='云剪辑工程状态'),
    createSource?: string(name='CreateSource', description='云剪辑工程创建来源'),
    templateType?: string(name='TemplateType', description='云剪辑工程模板类型'),
    modifiedSource?: string(name='ModifiedSource', description='云剪辑工程修改来源'),
  }(name='Project'),
}

model GetEditingProjectResponse = {
  headers: map[string]string(name='headers'),
  body: GetEditingProjectResponseBody(name='body'),
}

async function getEditingProjectWithOptions(request: GetEditingProjectRequest, runtime: Util.RuntimeOptions): GetEditingProjectResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetEditingProject', '2020-11-09', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getEditingProject(request: GetEditingProjectRequest): GetEditingProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEditingProjectWithOptions(request, runtime);
}

model ListSysTemplatesRequest {
  nextToken?: string(name='NextToken', description='标记当前开始读取的位置，置空表示从头开始'),
  maxResults?: int32(name='MaxResults', description='本次读取的最大数据记录数量'),
  type?: string(name='Type'),
}

model ListSysTemplatesResponseBody = {
  totalCount?: int32(name='TotalCount', description='TotalCount本次请求条件下的数据总量，此参数为可选参数，默认可不返回'),
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: string(name='NextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  maxResults?: int32(name='MaxResults', description='MaxResults本次请求所返回的最大记录条数'),
  templates?: [ 
    {
      templateId?: string(name='TemplateId'),
      name?: string(name='Name'),
      type?: string(name='Type'),
      config?: string(name='Config'),
    }
  ](name='Templates'),
}

model ListSysTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSysTemplatesResponseBody(name='body'),
}

async function listSysTemplatesWithOptions(request: ListSysTemplatesRequest, runtime: Util.RuntimeOptions): ListSysTemplatesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListSysTemplates', '2020-11-09', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listSysTemplates(request: ListSysTemplatesRequest): ListSysTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSysTemplatesWithOptions(request, runtime);
}

model DeleteTemplateRequest {
  templateIds?: string(name='TemplateIds', description='模板id，多个id用英文逗号隔开'),
}

model DeleteTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model DeleteTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTemplateResponseBody(name='body'),
}

async function deleteTemplateWithOptions(request: DeleteTemplateRequest, runtime: Util.RuntimeOptions): DeleteTemplateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DeleteTemplate', '2020-11-09', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function deleteTemplate(request: DeleteTemplateRequest): DeleteTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTemplateWithOptions(request, runtime);
}

model SubmitIRJobRequest {
  inputFile?: string(name='InputFile'),
  userData?: string(name='UserData'),
  title?: string(name='Title'),
  description?: string(name='Description'),
}

model SubmitIRJobResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  jobId?: string(name='JobId'),
  output?: string(name='Output'),
  state?: string(name='State'),
  userData?: string(name='UserData'),
}

model SubmitIRJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitIRJobResponseBody(name='body'),
}

async function submitIRJobWithOptions(request: SubmitIRJobRequest, runtime: Util.RuntimeOptions): SubmitIRJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitIRJob', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitIRJob(request: SubmitIRJobRequest): SubmitIRJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitIRJobWithOptions(request, runtime);
}

model DeleteEditingProjectMaterialsRequest {
  projectId?: string(name='ProjectId', description='云剪辑工程ID'),
  materialIds?: string(name='MaterialIds', description='素材ID'),
  materialType?: string(name='MaterialType', description='素材类型'),
}

model DeleteEditingProjectMaterialsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteEditingProjectMaterialsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEditingProjectMaterialsResponseBody(name='body'),
}

async function deleteEditingProjectMaterialsWithOptions(request: DeleteEditingProjectMaterialsRequest, runtime: Util.RuntimeOptions): DeleteEditingProjectMaterialsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DeleteEditingProjectMaterials', '2020-11-09', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function deleteEditingProjectMaterials(request: DeleteEditingProjectMaterialsRequest): DeleteEditingProjectMaterialsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEditingProjectMaterialsWithOptions(request, runtime);
}

model SearchEditingProjectRequest {
  startTime?: string(name='StartTime', description='CreateTime（创建时间）的开始时间'),
  endTime?: string(name='EndTime', description='CreationTime（创建时间）的结束时间'),
  status?: string(name='Status', description='云剪辑工程状态。多个用逗号分隔'),
  sortBy?: string(name='SortBy', description='结果排序方式'),
  nextToken?: string(name='NextToken', description='分页参数'),
  maxResults?: long(name='MaxResults', description='分页参数'),
  createSource?: string(name='CreateSource', description='创建来源'),
  templateType?: string(name='TemplateType', description='模板类型'),
}

model SearchEditingProjectResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  projectList?: [ 
    {
      projectId?: string(name='ProjectId', description='云剪辑工程ID'),
      title?: string(name='Title', description='云剪辑工程标题'),
      timeline?: string(name='Timeline', description='云剪辑工程时间线'),
      description?: string(name='Description', description='云剪辑工程描述'),
      coverURL?: string(name='CoverURL', description='云剪辑工程封面'),
      createTime?: string(name='CreateTime', description='云剪辑工程创建时间'),
      modifiedTime?: string(name='ModifiedTime', description='云剪辑工程最新修改时间'),
      duration?: long(name='Duration', description='云剪辑工程总时长'),
      status?: string(name='Status', description='云剪辑工程状态'),
      errorCode?: string(name='ErrorCode', description='云剪辑工程合成失败的错误码'),
      errorMessage?: string(name='ErrorMessage', description='云剪辑工程合成失败的消息'),
      createSource?: string(name='CreateSource', description='创建来源'),
      modifiedSource?: string(name='ModifiedSource', description='最后一次修改来源'),
      templateType?: string(name='TemplateType', description='模板类型'),
    }
  ](name='ProjectList', description='云剪辑工程列表'),
  maxResults?: long(name='MaxResults', description='云剪辑工程总数'),
  totalCount?: long(name='TotalCount'),
  nextToken?: string(name='NextToken'),
}

model SearchEditingProjectResponse = {
  headers: map[string]string(name='headers'),
  body: SearchEditingProjectResponseBody(name='body'),
}

async function searchEditingProjectWithOptions(request: SearchEditingProjectRequest, runtime: Util.RuntimeOptions): SearchEditingProjectResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SearchEditingProject', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function searchEditingProject(request: SearchEditingProjectRequest): SearchEditingProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchEditingProjectWithOptions(request, runtime);
}

model ListTemplatesRequest {
  type?: string(name='Type', description='模板类型'),
  status?: string(name='Status', description='模板状态'),
  createSource?: string(name='CreateSource', description='创建来源'),
  keyword?: string(name='Keyword', description='搜索关键词，可以根据模板id和title搜索'),
  sortType?: string(name='SortType', description='排序参数，默认根据创建时间倒序'),
}

model ListTemplatesResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  totalCount?: int32(name='TotalCount', description='本次请求条件下的数据总量。'),
  templates?: [ 
    {
      templateId?: string(name='TemplateId', description='模板ID'),
      name?: string(name='Name', description='模板名称'),
      type?: string(name='Type', description='模板类型'),
      config?: string(name='Config', description='模板配置'),
      previewMedia?: string(name='PreviewMedia', description='预览素材'),
      status?: string(name='Status', description='模板状态'),
      createSource?: string(name='CreateSource', description='创建来源'),
      modifiedSource?: string(name='ModifiedSource', description='修改来源'),
      previewMediaStatus?: string(name='PreviewMediaStatus', description='预览素材状态'),
      creationTime?: string(name='CreationTime', description='创建时间'),
      modifiedTime?: string(name='ModifiedTime', description='修改时间'),
      coverURL?: string(name='CoverURL', description='封面URL'),
      clipsParam?: string(name='ClipsParam', description='ClipsParam'),
    }
  ](name='Templates'),
}

model ListTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTemplatesResponseBody(name='body'),
}

async function listTemplatesWithOptions(request: ListTemplatesRequest, runtime: Util.RuntimeOptions): ListTemplatesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTemplates', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTemplates(request: ListTemplatesRequest): ListTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTemplatesWithOptions(request, runtime);
}

model DeleteEditingProjectsRequest {
  projectIds?: string(name='ProjectIds', description='云剪辑工程ID。支持多个云剪辑工程，以逗号分隔。'),
}

model DeleteEditingProjectsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  ignoredList?: string(name='IgnoredList'),
}

model DeleteEditingProjectsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEditingProjectsResponseBody(name='body'),
}

async function deleteEditingProjectsWithOptions(request: DeleteEditingProjectsRequest, runtime: Util.RuntimeOptions): DeleteEditingProjectsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteEditingProjects', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteEditingProjects(request: DeleteEditingProjectsRequest): DeleteEditingProjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEditingProjectsWithOptions(request, runtime);
}

model GetMediaInfoRequest {
  mediaId?: string(name='MediaId'),
  inputURL?: string(name='InputURL'),
  outputType?: string(name='OutputType'),
}

model GetMediaInfoResponseBody = {
  requestId?: string(name='RequestId', description='RequestId'),
  mediaInfo?: {
    mediaId?: string(name='MediaId', description='媒资ID'),
    mediaBasicInfo?: {
      mediaId?: string(name='MediaId', description='MediaId'),
      inputURL?: string(name='InputURL', description='待注册的媒资在相应系统中的地址'),
      mediaType?: string(name='MediaType', description='媒资媒体类型'),
      businessType?: string(name='BusinessType', description='媒资业务类型'),
      source?: string(name='Source', description='来源'),
      title?: string(name='Title', description='标题'),
      description?: string(name='Description', description='内容描述'),
      category?: string(name='Category', description='分类'),
      mediaTags?: string(name='MediaTags', description='标签'),
      coverURL?: string(name='CoverURL', description='封面地址'),
      userData?: string(name='UserData', description='用户数据'),
      status?: string(name='Status', description='资源状态'),
      createTime?: string(name='CreateTime', description='媒资创建时间'),
      modifiedTime?: string(name='ModifiedTime', description='媒资修改时间'),
      deletedTime?: string(name='DeletedTime', description='媒资删除时间'),
      spriteImages?: string(name='SpriteImages', description='雪碧图'),
    }(name='MediaBasicInfo', description='BasicInfo'),
    dynamicMetaDataList?: [ 
      {
        in?: float(name='In', description='开始时间'),
        out?: float(name='Out', description='结束时间'),
        type?: string(name='Type', description='类型'),
        data?: string(name='Data', description='元数据json string'),
      }
    ](name='DynamicMetaDataList', description='其他元数据'),
    aiRoughDataList?: [ 
      {
        type?: string(name='Type', description='AI类型'),
        result?: string(name='Result', description='AI原始结果'),
      }
    ](name='AiRoughDataList', description='AIMetadata'),
    fileInfoList?: [ 
      {
        fileBasicInfo?: {
          fileName?: string(name='FileName', description='文件名'),
          fileStatus?: string(name='FileStatus', description='文件状态'),
          fileType?: string(name='FileType', description='文件类型'),
          fileSize?: string(name='FileSize', description='文件大小（字节）'),
          fileUrl?: string(name='FileUrl', description='文件oss地址'),
          region?: string(name='Region', description='文件存储区域'),
          formatName?: string(name='FormatName', description='封装格式'),
          duration?: string(name='Duration', description='时长'),
          bitrate?: string(name='Bitrate', description='码率'),
          width?: string(name='Width', description='宽'),
          height?: string(name='Height', description='高'),
        }(name='FileBasicInfo', description='文件基础信息，包含时长，大小等'),
        audioStreamInfoList?: [ 
          {
            index?: string(name='Index', description='音频流序号'),
            codecName?: string(name='CodecName', description='编码格式简述名'),
            codecLongName?: string(name='CodecLongName', description='编码格式长述名'),
            codecTimeBase?: string(name='CodecTimeBase', description='编码时基'),
            codecTagString?: string(name='CodecTagString', description='编码格式标记文本'),
            codecTag?: string(name='CodecTag', description='编码格式标记'),
            profile?: string(name='Profile', description='编码预置'),
            sampleFmt?: string(name='SampleFmt', description='采样格式'),
            sampleRate?: string(name='SampleRate', description='采样率'),
            channels?: string(name='Channels', description='声道数'),
            channelLayout?: string(name='ChannelLayout', description='声道输出样式'),
            timebase?: string(name='Timebase', description='时基'),
            startTime?: string(name='StartTime', description='起始时间'),
            duration?: string(name='Duration', description='时长'),
            bitrate?: string(name='Bitrate', description='码率'),
            fps?: string(name='Fps', description='音频帧率'),
            numFrames?: string(name='NumFrames', description='总帧数'),
            lang?: string(name='Lang', description='语言'),
          }
        ](name='AudioStreamInfoList', description='音频流信息，一个媒资可能有多条音频流'),
        videoStreamInfoList?: [ 
          {
            index?: string(name='Index', description='视频流序号'),
            codecName?: string(name='CodecName', description='编码格式简述名'),
            codecLongName?: string(name='CodecLongName', description='编码格式长述名'),
            profile?: string(name='Profile', description='编码预置'),
            codecTimeBase?: string(name='CodecTimeBase', description='编码时基'),
            codecTagString?: string(name='CodecTagString', description='编码格式标记文本'),
            codecTag?: string(name='CodecTag', description='编码格式标记'),
            width?: string(name='Width', description='宽'),
            height?: string(name='Height', description='高'),
            hasBFrames?: string(name='HasBFrames', description='是否有B帧'),
            sar?: string(name='Sar', description='编码信号分辨率比'),
            dar?: string(name='Dar', description='编码显示分辨率比'),
            pixFmt?: string(name='PixFmt', description='像素格式'),
            level?: string(name='Level', description='编码等级'),
            fps?: string(name='Fps', description='视频帧率'),
            avgFPS?: string(name='AvgFPS', description='平均帧率'),
            timebase?: string(name='Timebase', description='时基'),
            startTime?: string(name='StartTime', description='起始时间'),
            duration?: string(name='Duration', description='时长'),
            bitrate?: string(name='Bitrate', description='码率'),
            numFrames?: string(name='NumFrames', description='总帧数'),
            lang?: string(name='Lang', description='语言'),
            rotate?: string(name='Rotate', description='旋转'),
            nbFrames?: string(name='Nb_frames', description='总帧数'),
          }
        ](name='VideoStreamInfoList', description='视频流信息，一个媒资可能有多条视频流'),
        subtitleStreamInfoList?: [ 
          {
            index?: string(name='Index', description='音频流序号'),
            codecName?: string(name='CodecName', description='编码格式简述名'),
            codecLongName?: string(name='CodecLongName', description='编码格式长述名'),
            codecTimeBase?: string(name='CodecTimeBase', description='编码时基'),
            codecTagString?: string(name='CodecTagString', description='编码格式标记文本'),
            codecTag?: string(name='CodecTag', description='编码格式标记'),
            timebase?: string(name='Timebase', description='时基'),
            startTime?: string(name='StartTime', description='起始时间'),
            duration?: string(name='Duration', description='时长'),
            lang?: string(name='Lang', description='语言'),
          }
        ](name='SubtitleStreamInfoList', description='字幕流信息，一个媒资可能有多条字幕流'),
      }
    ](name='FileInfoList', description='FileInfos'),
  }(name='MediaInfo'),
}

model GetMediaInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetMediaInfoResponseBody(name='body'),
}

async function getMediaInfoWithOptions(request: GetMediaInfoRequest, runtime: Util.RuntimeOptions): GetMediaInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetMediaInfo', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getMediaInfo(request: GetMediaInfoRequest): GetMediaInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMediaInfoWithOptions(request, runtime);
}

model SubmitSmartJobRequest {
  editingConfig?: string(name='EditingConfig'),
  outputConfig?: string(name='OutputConfig'),
  inputConfig?: string(name='InputConfig'),
  title?: string(name='Title'),
  description?: string(name='Description'),
  userData?: string(name='UserData'),
  jobType?: string(name='JobType'),
}

model SubmitSmartJobResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  jobId?: string(name='JobId'),
}

model SubmitSmartJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitSmartJobResponseBody(name='body'),
}

async function submitSmartJobWithOptions(request: SubmitSmartJobRequest, runtime: Util.RuntimeOptions): SubmitSmartJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitSmartJob', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitSmartJob(request: SubmitSmartJobRequest): SubmitSmartJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSmartJobWithOptions(request, runtime);
}

model SubmitDelogoJobRequest {
  inputFile?: string(name='InputFile', description='输入文件'),
  userData?: string(name='UserData'),
  title?: string(name='Title'),
  description?: string(name='Description'),
  outputConfig?: string(name='OutputConfig', description='输出bucket'),
  inputType?: string(name='InputType', description='输入文件类型'),
  overwrite?: boolean(name='Overwrite', description='是否强制覆盖现有OSS文件'),
  outputMediaTarget?: string(name='OutputMediaTarget', description='输出类型'),
}

model SubmitDelogoJobResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  jobId?: string(name='JobId'),
  output?: string(name='Output'),
  state?: string(name='State'),
  userData?: string(name='UserData'),
}

model SubmitDelogoJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitDelogoJobResponseBody(name='body'),
}

async function submitDelogoJobWithOptions(request: SubmitDelogoJobRequest, runtime: Util.RuntimeOptions): SubmitDelogoJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitDelogoJob', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitDelogoJob(request: SubmitDelogoJobRequest): SubmitDelogoJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitDelogoJobWithOptions(request, runtime);
}

model UpdateTemplateRequest {
  templateId?: string(name='TemplateId', description='模板ID'),
  name?: string(name='Name', description='模板名称'),
  config?: string(name='Config', description='参见Timeline模板Config文档'),
  coverUrl?: string(name='CoverUrl', description='模板封面'),
  previewMedia?: string(name='PreviewMedia', description='预览视频媒资id'),
  status?: string(name='Status', description='模板状态'),
  source?: string(name='Source', description='修改来源，默认OpenAPI'),
}

model UpdateTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model UpdateTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTemplateResponseBody(name='body'),
}

async function updateTemplateWithOptions(request: UpdateTemplateRequest, runtime: Util.RuntimeOptions): UpdateTemplateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('UpdateTemplate', '2020-11-09', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function updateTemplate(request: UpdateTemplateRequest): UpdateTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTemplateWithOptions(request, runtime);
}

model SubmitAudioProduceJobRequest {
  editingConfig?: string(name='EditingConfig'),
  outputConfig?: string(name='OutputConfig'),
  inputConfig?: string(name='InputConfig'),
  title?: string(name='Title'),
  description?: string(name='Description'),
  userData?: string(name='UserData'),
  overwrite?: boolean(name='Overwrite'),
}

model SubmitAudioProduceJobResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  jobId?: string(name='JobId', description='任务ID'),
  state?: string(name='State', description='任务状态'),
}

model SubmitAudioProduceJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitAudioProduceJobResponseBody(name='body'),
}

async function submitAudioProduceJobWithOptions(request: SubmitAudioProduceJobRequest, runtime: Util.RuntimeOptions): SubmitAudioProduceJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitAudioProduceJob', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitAudioProduceJob(request: SubmitAudioProduceJobRequest): SubmitAudioProduceJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitAudioProduceJobWithOptions(request, runtime);
}

model SubmitMediaProducingJobRequest {
  projectId?: string(name='ProjectId'),
  timeline?: string(name='Timeline'),
  templateId?: string(name='TemplateId'),
  clipsParam?: string(name='ClipsParam'),
  projectMetadata?: string(name='ProjectMetadata'),
  outputMediaTarget?: string(name='OutputMediaTarget'),
  outputMediaConfig?: string(name='OutputMediaConfig'),
  userData?: string(name='UserData'),
  clientToken?: string(name='ClientToken'),
  source?: string(name='Source'),
}

model SubmitMediaProducingJobResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  projectId?: string(name='ProjectId', description='剪辑工程Id'),
  jobId?: string(name='JobId', description='合成作业Id'),
  mediaId?: string(name='MediaId', description='合成媒资Id'),
}

model SubmitMediaProducingJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitMediaProducingJobResponseBody(name='body'),
}

async function submitMediaProducingJobWithOptions(request: SubmitMediaProducingJobRequest, runtime: Util.RuntimeOptions): SubmitMediaProducingJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitMediaProducingJob', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitMediaProducingJob(request: SubmitMediaProducingJobRequest): SubmitMediaProducingJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitMediaProducingJobWithOptions(request, runtime);
}

model UpdateSmartJobRequest {
  jobId?: string(name='JobId'),
  FEExtend?: string(name='FEExtend'),
}

model UpdateSmartJobResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  jobId?: string(name='JobId'),
  FEExtend?: string(name='FEExtend'),
}

model UpdateSmartJobResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSmartJobResponseBody(name='body'),
}

async function updateSmartJobWithOptions(request: UpdateSmartJobRequest, runtime: Util.RuntimeOptions): UpdateSmartJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateSmartJob', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateSmartJob(request: UpdateSmartJobRequest): UpdateSmartJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSmartJobWithOptions(request, runtime);
}

model ListAllPublicMediaTagsRequest {
  businessType?: string(name='BusinessType', description='媒资业务类型'),
}

model ListAllPublicMediaTagsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  mediaTagList?: [ 
    {
      mediaTagId?: string(name='MediaTagId', description='素材标签id'),
      mediaTagNameChinese?: string(name='MediaTagNameChinese', description='素材标签中文名'),
      mediaTagNameEnglish?: string(name='MediaTagNameEnglish', description='素材标签英文名'),
    }
  ](name='MediaTagList', description='公共素材库标签列表'),
}

model ListAllPublicMediaTagsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAllPublicMediaTagsResponseBody(name='body'),
}

async function listAllPublicMediaTagsWithOptions(request: ListAllPublicMediaTagsRequest, runtime: Util.RuntimeOptions): ListAllPublicMediaTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAllPublicMediaTags', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAllPublicMediaTags(request: ListAllPublicMediaTagsRequest): ListAllPublicMediaTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAllPublicMediaTagsWithOptions(request, runtime);
}

model SubmitMattingJobRequest {
  inputFile?: string(name='InputFile', description='输入文件'),
  userData?: string(name='UserData'),
  title?: string(name='Title'),
  description?: string(name='Description'),
  outputConfig?: string(name='OutputConfig', description='输出bucket'),
  inputType?: string(name='InputType', description='输入文件类型'),
  overwrite?: string(name='Overwrite', description='是否强制覆盖现有OSS文件'),
  outputMediaTarget?: string(name='OutputMediaTarget', description='输出类型'),
}

model SubmitMattingJobResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  jobId?: string(name='JobId'),
  output?: string(name='Output'),
  state?: string(name='State'),
  userData?: string(name='UserData'),
}

model SubmitMattingJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitMattingJobResponseBody(name='body'),
}

async function submitMattingJobWithOptions(request: SubmitMattingJobRequest, runtime: Util.RuntimeOptions): SubmitMattingJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitMattingJob', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitMattingJob(request: SubmitMattingJobRequest): SubmitMattingJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitMattingJobWithOptions(request, runtime);
}

model GetEventCallbackResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  callbackQueueName?: string(name='CallbackQueueName'),
  eventTypeList?: string(name='EventTypeList'),
}

model GetEventCallbackResponse = {
  headers: map[string]string(name='headers'),
  body: GetEventCallbackResponseBody(name='body'),
}

async function getEventCallbackWithOptions(runtime: Util.RuntimeOptions): GetEventCallbackResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('GetEventCallback', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getEventCallback(): GetEventCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEventCallbackWithOptions(runtime);
}

model ListPublicMediaBasicInfosRequest {
  mediaTagId?: string(name='MediaTagId', description='标签'),
  nextToken?: string(name='NextToken', description='下一次读取的位置'),
  maxResults?: int32(name='MaxResults', description='分页大小'),
  includeFileBasicInfo?: boolean(name='IncludeFileBasicInfo', description='返回值中是否包含文件基础信息'),
}

model ListPublicMediaBasicInfosResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: long(name='TotalCount', description='符合要求的媒资总数'),
  mediaInfos?: [ 
    {
      mediaId?: string(name='MediaId', description='媒资ID'),
      mediaBasicInfo?: {
        mediaId?: string(name='MediaId', description='MediaId'),
        inputURL?: string(name='InputURL', description='待注册的媒资在相应系统中的地址'),
        mediaType?: string(name='MediaType', description='媒资媒体类型'),
        businessType?: string(name='BusinessType', description='媒资业务类型'),
        source?: string(name='Source', description='来源'),
        title?: string(name='Title', description='标题'),
        description?: string(name='Description', description='内容描述'),
        category?: string(name='Category', description='分类'),
        mediaTags?: string(name='MediaTags', description='标签'),
        coverURL?: string(name='CoverURL', description='封面地址'),
        userData?: string(name='UserData', description='用户数据'),
        snapshots?: string(name='Snapshots', description='截图'),
        status?: string(name='Status', description='资源状态'),
        transcodeStatus?: string(name='TranscodeStatus', description='转码状态'),
        createTime?: string(name='CreateTime', description='媒资创建时间'),
        modifiedTime?: string(name='ModifiedTime', description='媒资修改时间'),
        deletedTime?: string(name='DeletedTime', description='媒资删除时间'),
      }(name='MediaBasicInfo', description='BasicInfo'),
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            fileName?: string(name='FileName', description='文件名'),
            fileStatus?: string(name='FileStatus', description='文件状态'),
            fileType?: string(name='FileType', description='文件类型'),
            fileSize?: string(name='FileSize', description='文件大小（字节）'),
            fileUrl?: string(name='FileUrl', description='文件oss地址'),
            region?: string(name='Region', description='文件存储区域'),
            formatName?: string(name='FormatName', description='封装格式'),
            duration?: string(name='Duration', description='时长'),
            bitrate?: string(name='Bitrate', description='码率'),
            width?: string(name='Width', description='宽'),
            height?: string(name='Height', description='高'),
          }(name='FileBasicInfo', description='文件基础信息，包含时长，大小等'),
        }
      ](name='FileInfoList', description='FileInfos'),
    }
  ](name='MediaInfos', description='符合要求的媒资集合'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
}

model ListPublicMediaBasicInfosResponse = {
  headers: map[string]string(name='headers'),
  body: ListPublicMediaBasicInfosResponseBody(name='body'),
}

async function listPublicMediaBasicInfosWithOptions(request: ListPublicMediaBasicInfosRequest, runtime: Util.RuntimeOptions): ListPublicMediaBasicInfosResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListPublicMediaBasicInfos', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listPublicMediaBasicInfos(request: ListPublicMediaBasicInfosRequest): ListPublicMediaBasicInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPublicMediaBasicInfosWithOptions(request, runtime);
}

model SubmitCoverJobRequest {
  inputFile?: string(name='InputFile', description='输入文件'),
  userData?: string(name='UserData'),
  title?: string(name='Title'),
  description?: string(name='Description'),
  outputConfig?: string(name='OutputConfig', description='输出bucket'),
}

model SubmitCoverJobResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  jobId?: string(name='JobId'),
  output?: string(name='Output'),
  state?: string(name='State'),
  userData?: string(name='UserData'),
}

model SubmitCoverJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitCoverJobResponseBody(name='body'),
}

async function submitCoverJobWithOptions(request: SubmitCoverJobRequest, runtime: Util.RuntimeOptions): SubmitCoverJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitCoverJob', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitCoverJob(request: SubmitCoverJobRequest): SubmitCoverJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitCoverJobWithOptions(request, runtime);
}

model GetSmartHandleJobRequest {
  jobId?: string(name='JobId'),
  withAiResult?: string(name='WithAiResult'),
}

model GetSmartHandleJobResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  jobId?: string(name='JobId'),
  output?: string(name='Output'),
  state?: string(name='State'),
  userData?: string(name='UserData'),
  FEExtend?: string(name='FEExtend'),
  smartJobInfo?: {
    title?: string(name='Title'),
    description?: string(name='Description'),
    userId?: string(name='UserId'),
    editingConfig?: string(name='EditingConfig'),
    inputConfig?: {
      inputFile?: string(name='InputFile'),
      jobParameters?: string(name='JobParameters'),
    }(name='InputConfig'),
    outputConfig?: string(name='outputConfig'),
    createTime?: string(name='CreateTime'),
    modifiedTime?: string(name='ModifiedTime'),
    jobType?: string(name='JobType'),
  }(name='SmartJobInfo'),
}

model GetSmartHandleJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetSmartHandleJobResponseBody(name='body'),
}

async function getSmartHandleJobWithOptions(request: GetSmartHandleJobRequest, runtime: Util.RuntimeOptions): GetSmartHandleJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetSmartHandleJob', '2020-11-09', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getSmartHandleJob(request: GetSmartHandleJobRequest): GetSmartHandleJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSmartHandleJobWithOptions(request, runtime);
}

model SubmitH2VJobRequest {
  inputFile?: string(name='InputFile', description='输入文件'),
  userData?: string(name='UserData'),
  title?: string(name='Title'),
  description?: string(name='Description'),
  outputConfig?: string(name='OutputConfig', description='输出bucket'),
  inputType?: string(name='InputType', description='输入文件类型'),
  overwrite?: boolean(name='Overwrite', description='是否强制覆盖现有OSS文件'),
  outputMediaTarget?: string(name='OutputMediaTarget', description='输出类型'),
}

model SubmitH2VJobResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  jobId?: string(name='JobId'),
  output?: string(name='Output'),
  state?: string(name='State'),
  userData?: string(name='UserData'),
}

model SubmitH2VJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitH2VJobResponseBody(name='body'),
}

async function submitH2VJobWithOptions(request: SubmitH2VJobRequest, runtime: Util.RuntimeOptions): SubmitH2VJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitH2VJob', '2020-11-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitH2VJob(request: SubmitH2VJobRequest): SubmitH2VJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitH2VJobWithOptions(request, runtime);
}

model SubmitPPTCutJobRequest {
  inputFile?: string(name='InputFile'),
  userData?: string(name='UserData'),
  title?: string(name='Title'),
  description?: string(name='Description'),
}

model SubmitPPTCutJobResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  jobId?: string(name='JobId'),
  output?: string(name='Output'),
  state?: string(name='State'),
  userData?: string(name='UserData'),
}

model SubmitPPTCutJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitPPTCutJobResponseBody(name='body'),
}

async function submitPPTCutJobWithOptions(request: SubmitPPTCutJobRequest, runtime: Util.RuntimeOptions): SubmitPPTCutJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('SubmitPPTCutJob', '2020-11-09', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function submitPPTCutJob(request: SubmitPPTCutJobRequest): SubmitPPTCutJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitPPTCutJobWithOptions(request, runtime);
}

