/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @signatureAlgorithm = 'v2';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'ice.aliyuncs.com',
    ap-northeast-2-pop = 'ice.aliyuncs.com',
    ap-south-1 = 'ice.aliyuncs.com',
    ap-southeast-1 = 'ice.aliyuncs.com',
    ap-southeast-2 = 'ice.aliyuncs.com',
    ap-southeast-3 = 'ice.aliyuncs.com',
    ap-southeast-5 = 'ice.aliyuncs.com',
    cn-beijing = 'ice.aliyuncs.com',
    cn-beijing-finance-1 = 'ice.aliyuncs.com',
    cn-beijing-finance-pop = 'ice.aliyuncs.com',
    cn-beijing-gov-1 = 'ice.aliyuncs.com',
    cn-beijing-nu16-b01 = 'ice.aliyuncs.com',
    cn-chengdu = 'ice.aliyuncs.com',
    cn-edge-1 = 'ice.aliyuncs.com',
    cn-fujian = 'ice.aliyuncs.com',
    cn-haidian-cm12-c01 = 'ice.aliyuncs.com',
    cn-hangzhou = 'ice.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'ice.aliyuncs.com',
    cn-hangzhou-finance = 'ice.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'ice.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'ice.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'ice.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'ice.aliyuncs.com',
    cn-hangzhou-test-306 = 'ice.aliyuncs.com',
    cn-hongkong = 'ice.aliyuncs.com',
    cn-hongkong-finance-pop = 'ice.aliyuncs.com',
    cn-huhehaote = 'ice.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'ice.aliyuncs.com',
    cn-north-2-gov-1 = 'ice.aliyuncs.com',
    cn-qingdao = 'ice.aliyuncs.com',
    cn-qingdao-nebula = 'ice.aliyuncs.com',
    cn-shanghai-et15-b01 = 'ice.aliyuncs.com',
    cn-shanghai-et2-b01 = 'ice.aliyuncs.com',
    cn-shanghai-finance-1 = 'ice.aliyuncs.com',
    cn-shanghai-inner = 'ice.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'ice.aliyuncs.com',
    cn-shenzhen = 'ice.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ice.aliyuncs.com',
    cn-shenzhen-inner = 'ice.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'ice.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'ice.aliyuncs.com',
    cn-wuhan = 'ice.aliyuncs.com',
    cn-wulanchabu = 'ice.aliyuncs.com',
    cn-yushanfang = 'ice.aliyuncs.com',
    cn-zhangbei = 'ice.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'ice.aliyuncs.com',
    cn-zhangjiakou = 'ice.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'ice.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'ice.aliyuncs.com',
    eu-central-1 = 'ice.aliyuncs.com',
    eu-west-1 = 'ice.aliyuncs.com',
    eu-west-1-oxs = 'ice.aliyuncs.com',
    me-east-1 = 'ice.aliyuncs.com',
    rus-west-1-pop = 'ice.aliyuncs.com',
    us-east-1 = 'ice.aliyuncs.com',
    us-west-1 = 'ice.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('ice', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddCategoryRequest {
  cateName?: string(name='CateName', description='This parameter is required.'),
  parentId?: long(name='ParentId', example='5'),
  type?: string(name='Type', example='default'),
}

model AddCategoryResponseBody = {
  category?: {
    cateId?: long(name='CateId', example='45'),
    cateName?: string(name='CateName'),
    level?: long(name='Level', example='0'),
    parentId?: long(name='ParentId', example='-1'),
    type?: string(name='Type', example='default'),
  }(name='Category'),
  requestId?: string(name='RequestId', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
}

model AddCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddCategoryResponseBody(name='body'),
}

/**
 * @summary 创建媒资分类
 *
 * @param request AddCategoryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddCategoryResponse
 */
async function addCategoryWithOptions(request: AddCategoryRequest, runtime: Util.RuntimeOptions): AddCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cateName)) {
    query['CateName'] = request.cateName;
  }
  if (!Util.isUnset(request.parentId)) {
    query['ParentId'] = request.parentId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddCategory',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建媒资分类
 *
 * @param request AddCategoryRequest
 * @return AddCategoryResponse
 */
async function addCategory(request: AddCategoryRequest): AddCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCategoryWithOptions(request, runtime);
}

model AddEditingProjectMaterialsRequest {
  materialMaps?: string(name='MaterialMaps', description='This parameter is required.', example='{"video":"*****2e057304fcd9b145c5cafc*****", "image":"****8021a8d493da643c8acd98*****,*****cb6307a4edea614d8b3f3c*****", "liveStream": "[{\\\\"appName\\\\":\\\\"testrecord\\\\",\\\\"domainName\\\\":\\\\"test.alivecdn.com\\\\",\\\\"liveUrl\\\\":\\\\"rtmp://test.alivecdn.com/testrecord/teststream\\\\",\\\\"streamName\\\\":\\\\"teststream\\\\"}]", "editingProject": "*****9b145c5cafc2e057304fcd*****"}'),
  projectId?: string(name='ProjectId', description='This parameter is required.', example='*****b2101cb318c*****'),
}

model AddEditingProjectMaterialsResponseBody = {
  liveMaterials?: [ 
    {
      appName?: string(name='AppName', example='testrecord'),
      domainName?: string(name='DomainName', example='test.alivecdn.com'),
      liveUrl?: string(name='LiveUrl', example='rtmp://test.alivecdn.com/testrecord/teststream'),
      streamName?: string(name='StreamName', example='teststream'),
    }
  ](name='LiveMaterials'),
  mediaInfos?: [ 
    {
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', example='1132.68'),
            duration?: string(name='Duration', example='216.206667'),
            fileName?: string(name='FileName', example='example.mp4'),
            fileSize?: string(name='FileSize', example='30611502'),
            fileStatus?: string(name='FileStatus', example='Normal'),
            fileType?: string(name='FileType', example='source_file'),
            fileUrl?: string(name='FileUrl', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
            formatName?: string(name='FormatName', example='mov,mp4,m4a,3gp,3g2,mj2'),
            height?: string(name='Height', example='540'),
            region?: string(name='Region', example='cn-shanghai'),
            width?: string(name='Width', example='960'),
          }(name='FileBasicInfo'),
        }
      ](name='FileInfoList', description='FileInfos'),
      mediaBasicInfo?: {
        businessType?: string(name='BusinessType', example='general'),
        category?: string(name='Category', example='audio'),
        coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
        createTime?: string(name='CreateTime', example='2020-12-23T03:32:59Z'),
        deletedTime?: string(name='DeletedTime', example='2020-12-23T03:32:59Z'),
        description?: string(name='Description', example='sample_description'),
        inputURL?: string(name='InputURL', example='http://bucket.oss-cn-shanghai.aliyuncs.com/file.mp4'),
        mediaId?: string(name='MediaId', example='*****5cb2e35433198daae94a72*****'),
        mediaTags?: string(name='MediaTags', example='sample_tag'),
        mediaType?: string(name='MediaType', example='Video'),
        modifiedTime?: string(name='ModifiedTime', example='2020-12-23T03:32:59Z'),
        snapshots?: string(name='Snapshots', example='null'),
        source?: string(name='Source', example='oss'),
        spriteImages?: string(name='SpriteImages', example='http://outin-example.oss-cn-shanghai.aliyuncs.com/test.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
        status?: string(name='Status', example='Normal'),
        title?: string(name='Title', example='default_title_2020-12-23T03:32:59Z'),
        transcodeStatus?: string(name='TranscodeStatus', example='Init'),
        userData?: string(name='UserData', example='userData'),
      }(name='MediaBasicInfo'),
      mediaId?: string(name='MediaId', example='*****5cb2e35433198daae94a72*****'),
    }
  ](name='MediaInfos'),
  projectId?: string(name='ProjectId', example='*****67ae06542b9b93e0d1c387*****'),
  projectMaterials?: [ string ](name='ProjectMaterials', example='*****9b145c5cafc2e057304fcd*****'),
  requestId?: string(name='RequestId', example='*****ACB-44F2-5F2D-88D7-1283E70*****'),
}

model AddEditingProjectMaterialsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddEditingProjectMaterialsResponseBody(name='body'),
}

/**
 * @summary 剪辑工程增加素材
 *
 * @param request AddEditingProjectMaterialsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddEditingProjectMaterialsResponse
 */
async function addEditingProjectMaterialsWithOptions(request: AddEditingProjectMaterialsRequest, runtime: Util.RuntimeOptions): AddEditingProjectMaterialsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.materialMaps)) {
    query['MaterialMaps'] = request.materialMaps;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddEditingProjectMaterials',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 剪辑工程增加素材
 *
 * @param request AddEditingProjectMaterialsRequest
 * @return AddEditingProjectMaterialsResponse
 */
async function addEditingProjectMaterials(request: AddEditingProjectMaterialsRequest): AddEditingProjectMaterialsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addEditingProjectMaterialsWithOptions(request, runtime);
}

model AddFavoritePublicMediaRequest {
  mediaIds?: string(name='MediaIds', example='icepublic-****7213c6050cbc66750b469701****,icepublic-****0b4697017213c6050cbc6675****'),
}

model AddFavoritePublicMediaResponseBody = {
  ignoredList?: [ string ](name='IgnoredList'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model AddFavoritePublicMediaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddFavoritePublicMediaResponseBody(name='body'),
}

/**
 * @summary 收藏公共媒资
 *
 * @param request AddFavoritePublicMediaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddFavoritePublicMediaResponse
 */
async function addFavoritePublicMediaWithOptions(request: AddFavoritePublicMediaRequest, runtime: Util.RuntimeOptions): AddFavoritePublicMediaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mediaIds)) {
    query['MediaIds'] = request.mediaIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddFavoritePublicMedia',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 收藏公共媒资
 *
 * @param request AddFavoritePublicMediaRequest
 * @return AddFavoritePublicMediaResponse
 */
async function addFavoritePublicMedia(request: AddFavoritePublicMediaRequest): AddFavoritePublicMediaResponse {
  var runtime = new Util.RuntimeOptions{};
  return addFavoritePublicMediaWithOptions(request, runtime);
}

model AddMediaMarksRequest {
  mediaId?: string(name='MediaId', description='This parameter is required.', example='53afdf003a2171ed9c6a16b5feac6402'),
  mediaMarks?: string(name='MediaMarks', description='This parameter is required.'),
}

model AddMediaMarksResponseBody = {
  mediaId?: string(name='MediaId', example='53afdf003a******6a16b5feac6402'),
  mediaMarkIds?: string(name='MediaMarkIds', example='mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60'),
  requestId?: string(name='RequestId', example='771A1414-27BF-53E6-AB73-EFCB*****ACF'),
}

model AddMediaMarksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddMediaMarksResponseBody(name='body'),
}

/**
 * @summary 为媒资增加标注信息
 *
 * @param request AddMediaMarksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddMediaMarksResponse
 */
async function addMediaMarksWithOptions(request: AddMediaMarksRequest, runtime: Util.RuntimeOptions): AddMediaMarksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mediaId)) {
    query['MediaId'] = request.mediaId;
  }
  if (!Util.isUnset(request.mediaMarks)) {
    query['MediaMarks'] = request.mediaMarks;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddMediaMarks',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 为媒资增加标注信息
 *
 * @param request AddMediaMarksRequest
 * @return AddMediaMarksResponse
 */
async function addMediaMarks(request: AddMediaMarksRequest): AddMediaMarksResponse {
  var runtime = new Util.RuntimeOptions{};
  return addMediaMarksWithOptions(request, runtime);
}

model AddTemplateRequest {
  config?: string(name='Config', example='参见Timeline模板Config文档'),
  coverUrl?: string(name='CoverUrl', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg'),
  name?: string(name='Name', example='视频添加水印模板'),
  previewMedia?: string(name='PreviewMedia', example='****01bf24bf41c78b2754cb3187****'),
  relatedMediaids?: string(name='RelatedMediaids', example='{"video":["1805a0c6ca544fb395a06ca683619655"]}'),
  source?: string(name='Source', example='OpenAPI'),
  status?: string(name='Status', example='Available'),
  type?: string(name='Type', example='Timeline'),
}

model AddTemplateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='****2876-6263-4B75-8F2C-CD0F7FCF****'),
  template?: {
    config?: string(name='Config', example='参见Timeline模板Config文档'),
    coverUrl?: string(name='CoverUrl', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg'),
    createSource?: string(name='CreateSource', example='OpenAPI'),
    modifiedSource?: string(name='ModifiedSource', example='OpenAPI'),
    name?: string(name='Name', example='视频添加水印模板'),
    previewMedia?: string(name='PreviewMedia', example='****01bf24bf41c78b2754cb3187****'),
    status?: string(name='Status', example='Available'),
    templateId?: string(name='TemplateId', example='****01bf24bf41c78b2754cb3187****'),
    type?: string(name='Type', example='Timeline'),
  }(name='Template'),
}

model AddTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddTemplateResponseBody(name='body'),
}

/**
 * @summary AddTemplate
 *
 * @param request AddTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddTemplateResponse
 */
async function addTemplateWithOptions(request: AddTemplateRequest, runtime: Util.RuntimeOptions): AddTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.coverUrl)) {
    query['CoverUrl'] = request.coverUrl;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.previewMedia)) {
    query['PreviewMedia'] = request.previewMedia;
  }
  if (!Util.isUnset(request.relatedMediaids)) {
    query['RelatedMediaids'] = request.relatedMediaids;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.config)) {
    body['Config'] = request.config;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddTemplate',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary AddTemplate
 *
 * @param request AddTemplateRequest
 * @return AddTemplateResponse
 */
async function addTemplate(request: AddTemplateRequest): AddTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTemplateWithOptions(request, runtime);
}

model AlterSearchIndexRequest {
  indexConfig?: string(name='IndexConfig', example='{}'),
  indexStatus?: string(name='IndexStatus'),
  indexType?: string(name='IndexType', description='This parameter is required.', example='mm'),
  searchLibName?: string(name='SearchLibName', example='test1'),
}

model AlterSearchIndexResponseBody = {
  code?: string(name='Code'),
  requestId?: string(name='RequestId', description='Id of the request', example='******3B-0E1A-586A-AC29-742247******'),
  success?: string(name='Success'),
}

model AlterSearchIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AlterSearchIndexResponseBody(name='body'),
}

/**
 * @summary 更新搜索索引
 *
 * @param request AlterSearchIndexRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AlterSearchIndexResponse
 */
async function alterSearchIndexWithOptions(request: AlterSearchIndexRequest, runtime: Util.RuntimeOptions): AlterSearchIndexResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.indexConfig)) {
    query['IndexConfig'] = request.indexConfig;
  }
  if (!Util.isUnset(request.indexStatus)) {
    query['IndexStatus'] = request.indexStatus;
  }
  if (!Util.isUnset(request.indexType)) {
    query['IndexType'] = request.indexType;
  }
  if (!Util.isUnset(request.searchLibName)) {
    query['SearchLibName'] = request.searchLibName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AlterSearchIndex',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新搜索索引
 *
 * @param request AlterSearchIndexRequest
 * @return AlterSearchIndexResponse
 */
async function alterSearchIndex(request: AlterSearchIndexRequest): AlterSearchIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  return alterSearchIndexWithOptions(request, runtime);
}

model BatchGetMediaInfosRequest {
  additionType?: string(name='AdditionType', example='FileInfo,DynamicMetaData'),
  mediaIds?: string(name='MediaIds', example='******b48fb04483915d4f2cd8******,******c48fb37407365d4f2cd8******'),
}

model BatchGetMediaInfosResponseBody = {
  mediaInfos?: [ 
    {
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', example='1132.68'),
            duration?: string(name='Duration', example='200'),
            fileName?: string(name='FileName', example='example'),
            fileSize?: string(name='FileSize', example='30611502'),
            fileStatus?: string(name='FileStatus', example='Normal'),
            fileType?: string(name='FileType', example='source_file'),
            fileUrl?: string(name='FileUrl', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
            formatName?: string(name='FormatName', example='mov,mp4,m4a,3gp,3g2,mj2'),
            height?: string(name='Height', example='1080'),
            region?: string(name='Region', example='cn-shanghai'),
            width?: string(name='Width', example='1920'),
          }(name='FileBasicInfo'),
        }
      ](name='FileInfoList', description='FileInfos'),
      mediaBasicInfo?: {
        businessType?: string(name='BusinessType', example='general'),
        category?: string(name='Category'),
        coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
        createTime?: string(name='CreateTime', example='2020-12-26T04:11:10Z'),
        deletedTime?: string(name='DeletedTime', example='2020-12-26T04:11:10Z'),
        description?: string(name='Description'),
        inputURL?: string(name='InputURL', example='https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4'),
        mediaId?: string(name='MediaId', description='MediaId', example='******c48fb37407365d4f2cd8******'),
        mediaTags?: string(name='MediaTags'),
        mediaType?: string(name='MediaType', example='video'),
        modifiedTime?: string(name='ModifiedTime', example='2020-12-26T04:11:12Z'),
        snapshots?: string(name='Snapshots', example='[{"bucket":"example-bucket","count":"3","iceJobId":"******f48f0e4154976b2b8c45******","location":"oss-cn-beijing","snapshotRegular":"example.jpg","templateId":"******e6a6440b29eb60bd7c******"}]'),
        source?: string(name='Source', example='oss'),
        spriteImages?: string(name='SpriteImages', example='[{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]'),
        status?: string(name='Status', example='Normal'),
        title?: string(name='Title'),
        transcodeStatus?: string(name='TranscodeStatus', example='Init'),
        userData?: string(name='UserData', example='userDataTest'),
      }(name='MediaBasicInfo'),
      mediaId?: string(name='MediaId', example='******c48fb37407365d4f2cd8******'),
    }
  ](name='MediaInfos'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model BatchGetMediaInfosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchGetMediaInfosResponseBody(name='body'),
}

/**
 * @summary 批量获取媒资信息
 *
 * @param request BatchGetMediaInfosRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchGetMediaInfosResponse
 */
async function batchGetMediaInfosWithOptions(request: BatchGetMediaInfosRequest, runtime: Util.RuntimeOptions): BatchGetMediaInfosResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.additionType)) {
    query['AdditionType'] = request.additionType;
  }
  if (!Util.isUnset(request.mediaIds)) {
    query['MediaIds'] = request.mediaIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchGetMediaInfos',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量获取媒资信息
 *
 * @param request BatchGetMediaInfosRequest
 * @return BatchGetMediaInfosResponse
 */
async function batchGetMediaInfos(request: BatchGetMediaInfosRequest): BatchGetMediaInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetMediaInfosWithOptions(request, runtime);
}

model CancelDNAJobRequest {
  jobId?: string(name='JobId', description='This parameter is required.', example='2288c6ca184c0e47098a5b665e2a12****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CancelDNAJobResponseBody = {
  jobId?: string(name='JobId', example='2288c6ca184c0e47098a5b665e2a12****'),
  requestId?: string(name='RequestId', example='25818875-5F78-4A13-BEF6-D7393642CA58'),
}

model CancelDNAJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelDNAJobResponseBody(name='body'),
}

/**
 * @summary 取消DNA作业
 *
 * @param request CancelDNAJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CancelDNAJobResponse
 */
async function cancelDNAJobWithOptions(request: CancelDNAJobRequest, runtime: Util.RuntimeOptions): CancelDNAJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelDNAJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 取消DNA作业
 *
 * @param request CancelDNAJobRequest
 * @return CancelDNAJobResponse
 */
async function cancelDNAJob(request: CancelDNAJobRequest): CancelDNAJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelDNAJobWithOptions(request, runtime);
}

model CancelFavoritePublicMediaRequest {
  mediaIds?: string(name='MediaIds', example='icepublic-****7213c6050cbc66750b469701****,icepublic-****0b4697017213c6050cbc6675****'),
}

model CancelFavoritePublicMediaResponseBody = {
  ignoredList?: [ string ](name='IgnoredList'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model CancelFavoritePublicMediaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelFavoritePublicMediaResponseBody(name='body'),
}

/**
 * @summary 取消收藏公共媒资
 *
 * @param request CancelFavoritePublicMediaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CancelFavoritePublicMediaResponse
 */
async function cancelFavoritePublicMediaWithOptions(request: CancelFavoritePublicMediaRequest, runtime: Util.RuntimeOptions): CancelFavoritePublicMediaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mediaIds)) {
    query['MediaIds'] = request.mediaIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelFavoritePublicMedia',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 取消收藏公共媒资
 *
 * @param request CancelFavoritePublicMediaRequest
 * @return CancelFavoritePublicMediaResponse
 */
async function cancelFavoritePublicMedia(request: CancelFavoritePublicMediaRequest): CancelFavoritePublicMediaResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelFavoritePublicMediaWithOptions(request, runtime);
}

model CreateAuditRequest {
  auditContent?: string(name='AuditContent', description='This parameter is required.', example='[
      {
            "MediaId": "93ab850b4f*****b54b6e91d24d81d4",
            "Status": "Normal"
      },
      {
            "MediaId": "f867fbfb58*****8bbab65c4480ae1d",
            "Status": "Blocked",
            "Reason": "xxxx",
            "Comment": "xxxx"
      }
]'),
}

model CreateAuditResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model CreateAuditResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAuditResponseBody(name='body'),
}

/**
 * @summary 提交人工审核
 *
 * @param request CreateAuditRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAuditResponse
 */
async function createAuditWithOptions(request: CreateAuditRequest, runtime: Util.RuntimeOptions): CreateAuditResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.auditContent)) {
    query['AuditContent'] = request.auditContent;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAudit',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交人工审核
 *
 * @param request CreateAuditRequest
 * @return CreateAuditResponse
 */
async function createAudit(request: CreateAuditRequest): CreateAuditResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAuditWithOptions(request, runtime);
}

model CreateAvatarTrainingJobRequest {
  avatarDescription?: string(name='AvatarDescription'),
  avatarName?: string(name='AvatarName', description='This parameter is required.'),
  avatarType?: string(name='AvatarType', example='2DAvatar'),
  portrait?: string(name='Portrait', example='****571c704445f9a0ee011406c2****'),
  thumbnail?: string(name='Thumbnail', example='https://your-bucket.oss-cn-hangzhou.aliyuncs.com/thumbnail.png'),
  transparent?: boolean(name='Transparent', example='True'),
  video?: string(name='Video', example='****571c704445f9a0ee011406c2****'),
}

model CreateAvatarTrainingJobResponseBody = {
  data?: {
    jobId?: string(name='JobId', example='****d718e2ff4f018ccf419a7b71****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model CreateAvatarTrainingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAvatarTrainingJobResponseBody(name='body'),
}

/**
 * @summary 创建数字人训练任务
 *
 * @param request CreateAvatarTrainingJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAvatarTrainingJobResponse
 */
async function createAvatarTrainingJobWithOptions(request: CreateAvatarTrainingJobRequest, runtime: Util.RuntimeOptions): CreateAvatarTrainingJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.avatarDescription)) {
    query['AvatarDescription'] = request.avatarDescription;
  }
  if (!Util.isUnset(request.avatarName)) {
    query['AvatarName'] = request.avatarName;
  }
  if (!Util.isUnset(request.avatarType)) {
    query['AvatarType'] = request.avatarType;
  }
  if (!Util.isUnset(request.portrait)) {
    query['Portrait'] = request.portrait;
  }
  if (!Util.isUnset(request.thumbnail)) {
    query['Thumbnail'] = request.thumbnail;
  }
  if (!Util.isUnset(request.transparent)) {
    query['Transparent'] = request.transparent;
  }
  if (!Util.isUnset(request.video)) {
    query['Video'] = request.video;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAvatarTrainingJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建数字人训练任务
 *
 * @param request CreateAvatarTrainingJobRequest
 * @return CreateAvatarTrainingJobResponse
 */
async function createAvatarTrainingJob(request: CreateAvatarTrainingJobRequest): CreateAvatarTrainingJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAvatarTrainingJobWithOptions(request, runtime);
}

model CreateCustomTemplateRequest {
  name?: string(name='Name', description='This parameter is required.', example='test-template'),
  subtype?: int32(name='Subtype', example='1'),
  templateConfig?: string(name='TemplateConfig', description='This parameter is required.', example='{"Container":{"Format":"flv"},"Video":{},"Audio":{}}'),
  type?: int32(name='Type', description='This parameter is required.', example='1'),
}

model CreateCustomTemplateResponseBody = {
  customTemplate?: {
    createTime?: string(name='CreateTime', example='2022-04-19T02:04:31Z'),
    isDefault?: boolean(name='IsDefault', example='true'),
    modifiedTime?: string(name='ModifiedTime', example='2022-04-19T02:04:31Z'),
    status?: string(name='Status', example='Normal'),
    subtype?: string(name='Subtype', example='Remux'),
    templateConfig?: string(name='TemplateConfig', example='{"Container":{"Format":"flv"},"Video":{},"Audio":{}}'),
    templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
    templateName?: string(name='TemplateName', example='test-template'),
    type?: int32(name='Type', example='1'),
    typeName?: string(name='TypeName', example='TranscodeTemplate'),
  }(name='CustomTemplate'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model CreateCustomTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCustomTemplateResponseBody(name='body'),
}

/**
 * @summary 创建媒体处理自定义模板
 *
 * @param request CreateCustomTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateCustomTemplateResponse
 */
async function createCustomTemplateWithOptions(request: CreateCustomTemplateRequest, runtime: Util.RuntimeOptions): CreateCustomTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.subtype)) {
    query['Subtype'] = request.subtype;
  }
  if (!Util.isUnset(request.templateConfig)) {
    query['TemplateConfig'] = request.templateConfig;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCustomTemplate',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建媒体处理自定义模板
 *
 * @param request CreateCustomTemplateRequest
 * @return CreateCustomTemplateResponse
 */
async function createCustomTemplate(request: CreateCustomTemplateRequest): CreateCustomTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCustomTemplateWithOptions(request, runtime);
}

model CreateCustomizedVoiceJobRequest {
  gender?: string(name='Gender', description='This parameter is required.', example='female'),
  scenario?: string(name='Scenario', description='This parameter is required.', example='story'),
  voiceDesc?: string(name='VoiceDesc'),
  voiceId?: string(name='VoiceId', description='This parameter is required.', example='xiaozhuan'),
  voiceName?: string(name='VoiceName'),
}

model CreateCustomizedVoiceJobResponseBody = {
  data?: {
    jobId?: string(name='JobId', example='****29faef8144638ba42eb8e037****'),
    voiceId?: string(name='VoiceId', example='xiaozhuan'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model CreateCustomizedVoiceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCustomizedVoiceJobResponseBody(name='body'),
}

/**
 * @summary 创建人声克隆任务
 *
 * @param request CreateCustomizedVoiceJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateCustomizedVoiceJobResponse
 */
async function createCustomizedVoiceJobWithOptions(request: CreateCustomizedVoiceJobRequest, runtime: Util.RuntimeOptions): CreateCustomizedVoiceJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gender)) {
    query['Gender'] = request.gender;
  }
  if (!Util.isUnset(request.scenario)) {
    query['Scenario'] = request.scenario;
  }
  if (!Util.isUnset(request.voiceDesc)) {
    query['VoiceDesc'] = request.voiceDesc;
  }
  if (!Util.isUnset(request.voiceId)) {
    query['VoiceId'] = request.voiceId;
  }
  if (!Util.isUnset(request.voiceName)) {
    query['VoiceName'] = request.voiceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCustomizedVoiceJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建人声克隆任务
 *
 * @param request CreateCustomizedVoiceJobRequest
 * @return CreateCustomizedVoiceJobResponse
 */
async function createCustomizedVoiceJob(request: CreateCustomizedVoiceJobRequest): CreateCustomizedVoiceJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCustomizedVoiceJobWithOptions(request, runtime);
}

model CreateDNADBRequest {
  description?: string(name='Description'),
  model?: string(name='Model', example='Video'),
  name?: string(name='Name', description='This parameter is required.', example='example name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateDNADBResponseBody = {
  DBInfo?: {
    DBId?: string(name='DBId', example='88c6ca184c0e47098a5b665e2a12****'),
    description?: string(name='Description'),
    model?: string(name='Model', example='Video'),
    name?: string(name='Name', example='example name'),
    status?: string(name='Status', example='offline'),
  }(name='DBInfo'),
  requestId?: string(name='RequestId', example='25818875-5F78-4A13-BEF6-D7393642CA58'),
}

model CreateDNADBResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDNADBResponseBody(name='body'),
}

/**
 * @summary 创建指纹库
 *
 * @param request CreateDNADBRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDNADBResponse
 */
async function createDNADBWithOptions(request: CreateDNADBRequest, runtime: Util.RuntimeOptions): CreateDNADBResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.model)) {
    query['Model'] = request.model;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDNADB',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建指纹库
 *
 * @param request CreateDNADBRequest
 * @return CreateDNADBResponse
 */
async function createDNADB(request: CreateDNADBRequest): CreateDNADBResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDNADBWithOptions(request, runtime);
}

model CreateEditingProjectRequest {
  businessConfig?: string(name='BusinessConfig', example='{ "OutputMediaConfig" : { "StorageLocation": "test-bucket.oss-cn-shanghai.aliyuncs.com", "Path": "test-path" }, "OutputMediaTarget": "oss-object", "ReservationTime": "2021-06-21T08:05:00Z" }'),
  clipsParam?: string(name='ClipsParam'),
  coverURL?: string(name='CoverURL', example='https://example.com/example.png'),
  description?: string(name='Description', example='描述'),
  materialMaps?: string(name='MaterialMaps', example='{"video":"*****2e057304fcd9b145c5cafc*****", "image":"****8021a8d493da643c8acd98*****,*****cb6307a4edea614d8b3f3c*****", "liveStream": "[{\\\\"appName\\\\":\\\\"testrecord\\\\",\\\\"domainName\\\\":\\\\"test.alivecdn.com\\\\",\\\\"liveUrl\\\\":\\\\"rtmp://test.alivecdn.com/testrecord/teststream\\\\",\\\\"streamName\\\\":\\\\"teststream\\\\"}]", "editingProject": "*****9b145c5cafc2e057304fcd*****"}'),
  projectType?: string(name='ProjectType', example='LiveEditingProject'),
  templateId?: string(name='TemplateId', example='****96e8864746a0b6f3****'),
  templateType?: string(name='TemplateType'),
  timeline?: string(name='Timeline', example='{"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****4d7cf14dc7b83b0e801c****"},{"MediaId":"****4d7cf14dc7b83b0e801c****"}]}]}'),
  title?: string(name='Title', description='This parameter is required.', example='example'),
}

model CreateEditingProjectResponseBody = {
  project?: {
    businessConfig?: string(name='BusinessConfig', example='{ "OutputMediaConfig" :    { "StorageLocation": "test-bucket.oss-cn-shanghai.aliyuncs.com", "Path": "test-path"   }, "OutputMediaTarget": "oss-object", "ReservationTime": "2021-06-21T08:05:00Z" }'),
    businessStatus?: string(name='BusinessStatus', example='Reserving'),
    clipsParam?: string(name='ClipsParam'),
    coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
    createSource?: string(name='CreateSource', example='WebSDK'),
    createTime?: string(name='CreateTime', example='2021-01-08T16:52:07Z'),
    description?: string(name='Description', example='example_description'),
    duration?: float(name='Duration', example='3.4200000'),
    modifiedSource?: string(name='ModifiedSource', example='WebSDK'),
    modifiedTime?: string(name='ModifiedTime', example='2021-01-08T16:52:07Z'),
    projectId?: string(name='ProjectId', example='****01bf24bf41c78b2754cb3187****'),
    projectType?: string(name='ProjectType', example='LiveEditingProject'),
    status?: long(name='Status', example='2'),
    statusName?: string(name='StatusName', example='Editing'),
    templateId?: string(name='TemplateId', example='****96e8864746a0b6f3****'),
    templateType?: string(name='TemplateType', example='Timeline'),
    timeline?: string(name='Timeline', example='{"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****4d7cf14dc7b83b0e801c****"},{"MediaId":"****4d7cf14dc7b83b0e801c****"}]}]}'),
    title?: string(name='Title', example='example_title'),
  }(name='Project'),
  requestId?: string(name='RequestId', description='Id of the request', example='******3B-0E1A-586A-AC29-742247******'),
}

model CreateEditingProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEditingProjectResponseBody(name='body'),
}

/**
 * @summary 创建云剪辑工程
 *
 * @param request CreateEditingProjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateEditingProjectResponse
 */
async function createEditingProjectWithOptions(request: CreateEditingProjectRequest, runtime: Util.RuntimeOptions): CreateEditingProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessConfig)) {
    query['BusinessConfig'] = request.businessConfig;
  }
  if (!Util.isUnset(request.clipsParam)) {
    query['ClipsParam'] = request.clipsParam;
  }
  if (!Util.isUnset(request.coverURL)) {
    query['CoverURL'] = request.coverURL;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.materialMaps)) {
    query['MaterialMaps'] = request.materialMaps;
  }
  if (!Util.isUnset(request.projectType)) {
    query['ProjectType'] = request.projectType;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.timeline)) {
    body['Timeline'] = request.timeline;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateEditingProject',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建云剪辑工程
 *
 * @param request CreateEditingProjectRequest
 * @return CreateEditingProjectResponse
 */
async function createEditingProject(request: CreateEditingProjectRequest): CreateEditingProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEditingProjectWithOptions(request, runtime);
}

model CreateLiveRecordTemplateRequest {
  name?: string(name='Name', description='代表资源名称的资源属性字段

This parameter is required.'),
  recordFormat?: [ 
    {
      cycleDuration?: int32(name='CycleDuration', example='3600'),
      format?: string(name='Format', description='格式

This parameter is required.', example='m3u8'),
      ossObjectPrefix?: string(name='OssObjectPrefix', description='Oss对象名，不包含后缀', example='record/{JobId}/{Sequence}_{EscapedStartTime}_{EscapedEndTime}'),
      sliceDuration?: int32(name='SliceDuration', description='切片时长', example='30'),
      sliceOssObjectPrefix?: string(name='SliceOssObjectPrefix', description='切片Oss对象名，不包含后缀', example='record/{JobId}/{UnixTimestamp}_{Sequence}'),
    }
  ](name='RecordFormat', description='录制格式

This parameter is required.'),
}

model CreateLiveRecordTemplateShrinkRequest {
  name?: string(name='Name', description='代表资源名称的资源属性字段

This parameter is required.'),
  recordFormatShrink?: string(name='RecordFormat', description='录制格式

This parameter is required.'),
}

model CreateLiveRecordTemplateResponseBody = {
  requestId?: string(name='RequestId', example='0622C702-41BE-467E-AF2E-883D4517962E'),
  templateId?: string(name='TemplateId', description='代表资源一级ID的资源属性字段', example='****96e8864746a0b6f3****'),
}

model CreateLiveRecordTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLiveRecordTemplateResponseBody(name='body'),
}

/**
 * @summary 创建直播录制模板
 *
 * @param tmpReq CreateLiveRecordTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateLiveRecordTemplateResponse
 */
async function createLiveRecordTemplateWithOptions(tmpReq: CreateLiveRecordTemplateRequest, runtime: Util.RuntimeOptions): CreateLiveRecordTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new CreateLiveRecordTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.recordFormat)) {
    request.recordFormatShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.recordFormat, 'RecordFormat', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.recordFormatShrink)) {
    body['RecordFormat'] = request.recordFormatShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateLiveRecordTemplate',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建直播录制模板
 *
 * @param request CreateLiveRecordTemplateRequest
 * @return CreateLiveRecordTemplateResponse
 */
async function createLiveRecordTemplate(request: CreateLiveRecordTemplateRequest): CreateLiveRecordTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLiveRecordTemplateWithOptions(request, runtime);
}

model CreateLiveSnapshotTemplateRequest {
  overwriteFormat?: string(name='OverwriteFormat', example='snapshot/{JobId}.jpg'),
  sequenceFormat?: string(name='SequenceFormat', example='snapshot/{JobId}/{UnixTimestamp}.jpg'),
  templateName?: string(name='TemplateName', description='This parameter is required.'),
  timeInterval?: int32(name='TimeInterval', description='This parameter is required.', example='5'),
}

model CreateLiveSnapshotTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  templateId?: string(name='TemplateId', example='****a046-263c-3560-978a-fb287782****'),
}

model CreateLiveSnapshotTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLiveSnapshotTemplateResponseBody(name='body'),
}

/**
 * @summary 创建直播截图模板
 *
 * @param request CreateLiveSnapshotTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateLiveSnapshotTemplateResponse
 */
async function createLiveSnapshotTemplateWithOptions(request: CreateLiveSnapshotTemplateRequest, runtime: Util.RuntimeOptions): CreateLiveSnapshotTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.overwriteFormat)) {
    body['OverwriteFormat'] = request.overwriteFormat;
  }
  if (!Util.isUnset(request.sequenceFormat)) {
    body['SequenceFormat'] = request.sequenceFormat;
  }
  if (!Util.isUnset(request.templateName)) {
    body['TemplateName'] = request.templateName;
  }
  if (!Util.isUnset(request.timeInterval)) {
    body['TimeInterval'] = request.timeInterval;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateLiveSnapshotTemplate',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建直播截图模板
 *
 * @param request CreateLiveSnapshotTemplateRequest
 * @return CreateLiveSnapshotTemplateResponse
 */
async function createLiveSnapshotTemplate(request: CreateLiveSnapshotTemplateRequest): CreateLiveSnapshotTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLiveSnapshotTemplateWithOptions(request, runtime);
}

model CreateLiveTranscodeTemplateRequest {
  name?: string(name='Name', description='This parameter is required.', example='my template'),
  templateConfig?: {
    audioParams?: {
      bitrate?: string(name='Bitrate', example='100'),
      channels?: string(name='Channels', example='2'),
      codec?: string(name='Codec', example='AAC'),
      profile?: string(name='Profile', example='aaclow'),
      samplerate?: string(name='Samplerate', example='44100'),
    }(name='AudioParams'),
    videoParams?: {
      bitrate?: string(name='Bitrate', example='2500'),
      codec?: string(name='Codec', example='H.264'),
      fps?: string(name='Fps', example='25'),
      gop?: string(name='Gop', example='1000'),
      height?: string(name='Height', example='720'),
      profile?: string(name='Profile', example='2'),
      width?: string(name='Width', example='1280'),
    }(name='VideoParams'),
  }(name='TemplateConfig'),
  type?: string(name='Type', description='This parameter is required.', example='normal'),
}

model CreateLiveTranscodeTemplateShrinkRequest {
  name?: string(name='Name', description='This parameter is required.', example='my template'),
  templateConfigShrink?: string(name='TemplateConfig'),
  type?: string(name='Type', description='This parameter is required.', example='normal'),
}

model CreateLiveTranscodeTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
  templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
}

model CreateLiveTranscodeTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLiveTranscodeTemplateResponseBody(name='body'),
}

/**
 * @summary 创建转码模版
 *
 * @param tmpReq CreateLiveTranscodeTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateLiveTranscodeTemplateResponse
 */
async function createLiveTranscodeTemplateWithOptions(tmpReq: CreateLiveTranscodeTemplateRequest, runtime: Util.RuntimeOptions): CreateLiveTranscodeTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new CreateLiveTranscodeTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.templateConfig)) {
    request.templateConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.templateConfig, 'TemplateConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.templateConfigShrink)) {
    query['TemplateConfig'] = request.templateConfigShrink;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLiveTranscodeTemplate',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建转码模版
 *
 * @param request CreateLiveTranscodeTemplateRequest
 * @return CreateLiveTranscodeTemplateResponse
 */
async function createLiveTranscodeTemplate(request: CreateLiveTranscodeTemplateRequest): CreateLiveTranscodeTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLiveTranscodeTemplateWithOptions(request, runtime);
}

model CreatePipelineRequest {
  name?: string(name='Name', description='This parameter is required.', example='test-pipeline'),
  priority?: int32(name='Priority', example='6'),
  speed?: string(name='Speed', description='This parameter is required.', example='Standard'),
}

model CreatePipelineResponseBody = {
  pipeline?: {
    createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
    modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:17:54Z'),
    name?: string(name='Name', example='test-pipeline'),
    pipelineId?: string(name='PipelineId', example='****20b48fb04483915d4f2cd8ac****'),
    priority?: int32(name='Priority', example='6'),
    speed?: string(name='Speed', example='Standard'),
    status?: string(name='Status', example='Active'),
  }(name='Pipeline'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model CreatePipelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePipelineResponseBody(name='body'),
}

/**
 * @summary 添加用户管道配置
 *
 * @param request CreatePipelineRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreatePipelineResponse
 */
async function createPipelineWithOptions(request: CreatePipelineRequest, runtime: Util.RuntimeOptions): CreatePipelineResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.speed)) {
    query['Speed'] = request.speed;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreatePipeline',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 添加用户管道配置
 *
 * @param request CreatePipelineRequest
 * @return CreatePipelineResponse
 */
async function createPipeline(request: CreatePipelineRequest): CreatePipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPipelineWithOptions(request, runtime);
}

model CreateSearchIndexRequest {
  indexConfig?: string(name='IndexConfig', example='{}'),
  indexStatus?: string(name='IndexStatus'),
  indexType?: string(name='IndexType', description='This parameter is required.', example='mm'),
  searchLibName?: string(name='SearchLibName', example='test1'),
}

model CreateSearchIndexResponseBody = {
  code?: string(name='Code'),
  requestId?: string(name='RequestId', example='*****ACB-44F2-5F2D-88D7-1283E70*****'),
  success?: string(name='Success'),
}

model CreateSearchIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSearchIndexResponseBody(name='body'),
}

/**
 * @summary 创建搜索索引
 *
 * @param request CreateSearchIndexRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSearchIndexResponse
 */
async function createSearchIndexWithOptions(request: CreateSearchIndexRequest, runtime: Util.RuntimeOptions): CreateSearchIndexResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.indexConfig)) {
    query['IndexConfig'] = request.indexConfig;
  }
  if (!Util.isUnset(request.indexStatus)) {
    query['IndexStatus'] = request.indexStatus;
  }
  if (!Util.isUnset(request.indexType)) {
    query['IndexType'] = request.indexType;
  }
  if (!Util.isUnset(request.searchLibName)) {
    query['SearchLibName'] = request.searchLibName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSearchIndex',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建搜索索引
 *
 * @param request CreateSearchIndexRequest
 * @return CreateSearchIndexResponse
 */
async function createSearchIndex(request: CreateSearchIndexRequest): CreateSearchIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSearchIndexWithOptions(request, runtime);
}

model CreateSearchLibRequest {
  searchLibName?: string(name='SearchLibName', description='This parameter is required.', example='test1'),
}

model CreateSearchLibResponseBody = {
  code?: string(name='Code'),
  requestId?: string(name='RequestId', description='Id of the request', example='******3B-0E1A-586A-AC29-742247******'),
  searchLibName?: string(name='SearchLibName', example='test1'),
  success?: string(name='Success'),
}

model CreateSearchLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSearchLibResponseBody(name='body'),
}

/**
 * @summary 创建库
 *
 * @param request CreateSearchLibRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSearchLibResponse
 */
async function createSearchLibWithOptions(request: CreateSearchLibRequest, runtime: Util.RuntimeOptions): CreateSearchLibResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.searchLibName)) {
    query['SearchLibName'] = request.searchLibName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSearchLib',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建库
 *
 * @param request CreateSearchLibRequest
 * @return CreateSearchLibResponse
 */
async function createSearchLib(request: CreateSearchLibRequest): CreateSearchLibResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSearchLibWithOptions(request, runtime);
}

model CreateUploadMediaRequest {
  appId?: string(name='AppId', example='app-1000000'),
  entityId?: string(name='EntityId', example='9e177cac2fb44f8b8c67b199fcc7bffd'),
  fileInfo?: string(name='FileInfo', example='{\\\\"Type\\\\":\\\\"video\\\\",\\\\"Name\\\\":\\\\"test.mp4\\\\",\\\\"Size\\\\":108078336,\\\\"Ext\\\\":\\\\"mp4\\\\"}'),
  mediaMetaData?: string(name='MediaMetaData', example='{\\\\"Title\\\\": \\\\"UploadTest\\\\", \\\\"Description\\\\": \\\\"UploadImageTest\\\\", \\\\"Tags\\\\": \\\\"tag1,tag2\\\\",\\\\"BusinessType\\\\":\\\\"cover\\\\"}'),
  postProcessConfig?: string(name='PostProcessConfig', example='{\\\\"ProcessType\\\\":\\\\"Workflow\\\\",\\\\"ProcessID\\\\":\\\\"74ba870f1a4873a3ba238e0bf6fa9***\\\\"}'),
  uploadTargetConfig?: string(name='UploadTargetConfig', example='{\\\\"StorageType\\\\":\\\\"oss\\\\",\\\\"StorageLocation\\\\":\\\\"outin-***.oss-cn-shanghai.aliyuncs.com\\\\"}'),
  userData?: string(name='UserData', example='{"MessageCallback":{"CallbackURL":"http://example.aliyundoc.com"},"Extend":{"localId":"*****","test":"www"}}'),
}

model CreateUploadMediaResponseBody = {
  fileURL?: string(name='FileURL', example='http://outin-***.oss-cn-north-2-gov-1.aliyuncs.com/sv/40360f05-181f63c3110-0004-cd8e-27f-de3c9.mp4'),
  mediaId?: string(name='MediaId', example='****20b48fb04483915d4f2cd8ac****'),
  mediaURL?: string(name='MediaURL', example='https://xxq-live-playback.oss-cn-shanghai.aliyuncs.com/capture/5d96d2b4-111b-4e5d-a0e5-20f44405bb55.mp4'),
  requestId?: string(name='RequestId', example='4E84BE44-58A7-****-****-FBEBEA16EF94'),
  uploadAddress?: string(name='UploadAddress', example='eyJFbmRwb2ludCI6Imh0dHBzOi8vb3NzLWNuLXNoYW5naGFpLmFsaXl1bmNzLmNvbSIsIkJ1Y2tldCI6InN6aGQtdmlkZW8iLCJGaWxlTmFtZSI6InZvZC0yOTYzMWEvc3YvNTBmYTJlODQtMTgxMjdhZGRiMTcvNTBmYTJlODQtMTgxMjdhZGRiM***'),
  uploadAuth?: string(name='UploadAuth', example='eyJBY2Nlc3NLZXlJZCI6IkxUQUk0Rm53bTk1dHdxQjMxR3IzSE5hRCIsIkFjY2Vzc0tleVNlY3JldCI6Ik9lWllKR0dTMTlkNkZaM1E3UVpJQmdmSVdnM3BPaiIsIkV4cGlyYXRpb24iOiI***'),
}

model CreateUploadMediaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUploadMediaResponseBody(name='body'),
}

/**
 * @summary 本地媒资上传
 *
 * @param request CreateUploadMediaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateUploadMediaResponse
 */
async function createUploadMediaWithOptions(request: CreateUploadMediaRequest, runtime: Util.RuntimeOptions): CreateUploadMediaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.entityId)) {
    query['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.fileInfo)) {
    query['FileInfo'] = request.fileInfo;
  }
  if (!Util.isUnset(request.mediaMetaData)) {
    query['MediaMetaData'] = request.mediaMetaData;
  }
  if (!Util.isUnset(request.postProcessConfig)) {
    query['PostProcessConfig'] = request.postProcessConfig;
  }
  if (!Util.isUnset(request.uploadTargetConfig)) {
    query['UploadTargetConfig'] = request.uploadTargetConfig;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateUploadMedia',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 本地媒资上传
 *
 * @param request CreateUploadMediaRequest
 * @return CreateUploadMediaResponse
 */
async function createUploadMedia(request: CreateUploadMediaRequest): CreateUploadMediaResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUploadMediaWithOptions(request, runtime);
}

model CreateUploadStreamRequest {
  definition?: string(name='Definition', example='HD'),
  fileExtension?: string(name='FileExtension', example='MP4'),
  HDRType?: string(name='HDRType', example='HDR10'),
  mediaId?: string(name='MediaId', example='****20b48fb04483915d4f2cd8ac****'),
  userData?: string(name='UserData', example='{"MessageCallback":{"CallbackURL":"http://aliyundoc.com"}, "Extend":{"localId":"xxx","test":"www"}}'),
}

model CreateUploadStreamResponseBody = {
  fileURL?: string(name='FileURL', example='http://outin-***.oss-cn-shanghai.aliyuncs.com/stream/48555e8b-181dd5a8c07/48555e8b-181dd5a8c07.mp4'),
  mediaId?: string(name='MediaId', example='****c469e944b5a856828dc2****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  uploadAddress?: string(name='UploadAddress', example='eyJFbmRwb2ludCI6Imh0dHBzOi8vb3NzLWNuLXNoYW5naGFpLmFsaXl1bmNzLmNvbSIsIkJ1Y2tldCI6InN6aGQtdmlkZW8iLCJGaWxlTmFtZSI6InZvZC0yOTYzMWEvc3YvNTBmYTJlODQtMTgxMjdhZGRiMTcvNTBmYTJlODQtMTgxMjdhZGRiM***'),
  uploadAuth?: string(name='UploadAuth', example='eyJBY2Nlc3NLZXlJZCI6IkxUQUk0Rm53bTk1dHdxQjMxR3IzSE5hRCIsIkFjY2Vzc0tleVNlY3JldCI6Ik9lWllKR0dTMTlkNkZaM1E3UVpJQmdmSVdnM3BPaiIsIkV4cGlyYXRpb24iOiI***'),
}

model CreateUploadStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUploadStreamResponseBody(name='body'),
}

/**
 * @summary 本地上传媒体流
 *
 * @param request CreateUploadStreamRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateUploadStreamResponse
 */
async function createUploadStreamWithOptions(request: CreateUploadStreamRequest, runtime: Util.RuntimeOptions): CreateUploadStreamResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.definition)) {
    query['Definition'] = request.definition;
  }
  if (!Util.isUnset(request.fileExtension)) {
    query['FileExtension'] = request.fileExtension;
  }
  if (!Util.isUnset(request.HDRType)) {
    query['HDRType'] = request.HDRType;
  }
  if (!Util.isUnset(request.mediaId)) {
    query['MediaId'] = request.mediaId;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateUploadStream',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 本地上传媒体流
 *
 * @param request CreateUploadStreamRequest
 * @return CreateUploadStreamResponse
 */
async function createUploadStream(request: CreateUploadStreamRequest): CreateUploadStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUploadStreamWithOptions(request, runtime);
}

model DecryptKMSDataKeyRequest {
  ciphertextBlob?: string(name='CiphertextBlob', description='This parameter is required.', example='ODZhOWVmZDktM2QxNi00ODk0LWJkNGYtMWZjNDNmM2YyYWJmS7FmDBBQ0BkKsQrtRnidtPwirmDcS0ZuJCU41xxAAWk4Z8qsADfbV0b+i6kQmlvj79dJdGOvtX69Uycs901qOjop4bTS****'),
}

model DecryptKMSDataKeyResponseBody = {
  dataKey?: {
    keyId?: string(name='KeyId', example='202b9877-5a25-46e3-a763-e20791b5****'),
    plaintext?: string(name='Plaintext', example='tRYXuCwgja12xxO1N/gZERDDCLw9doZEQiPDk/Bv****'),
  }(name='DataKey'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model DecryptKMSDataKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DecryptKMSDataKeyResponseBody(name='body'),
}

/**
 * @summary 解密KMS密钥DataKey
 *
 * @param request DecryptKMSDataKeyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DecryptKMSDataKeyResponse
 */
async function decryptKMSDataKeyWithOptions(request: DecryptKMSDataKeyRequest, runtime: Util.RuntimeOptions): DecryptKMSDataKeyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ciphertextBlob)) {
    query['CiphertextBlob'] = request.ciphertextBlob;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DecryptKMSDataKey',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 解密KMS密钥DataKey
 *
 * @param request DecryptKMSDataKeyRequest
 * @return DecryptKMSDataKeyResponse
 */
async function decryptKMSDataKey(request: DecryptKMSDataKeyRequest): DecryptKMSDataKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return decryptKMSDataKeyWithOptions(request, runtime);
}

model DeleteAvatarTrainingJobRequest {
  jobId?: string(name='JobId', description='This parameter is required.', example='****20b48fb04483915d4f2cd8ac****'),
}

model DeleteAvatarTrainingJobResponseBody = {
  data?: {
    jobId?: string(name='JobId', example='****d718e2ff4f018ccf419a7b71****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model DeleteAvatarTrainingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAvatarTrainingJobResponseBody(name='body'),
}

/**
 * @summary 更新数字人训练任务信息
 *
 * @param request DeleteAvatarTrainingJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAvatarTrainingJobResponse
 */
async function deleteAvatarTrainingJobWithOptions(request: DeleteAvatarTrainingJobRequest, runtime: Util.RuntimeOptions): DeleteAvatarTrainingJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAvatarTrainingJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新数字人训练任务信息
 *
 * @param request DeleteAvatarTrainingJobRequest
 * @return DeleteAvatarTrainingJobResponse
 */
async function deleteAvatarTrainingJob(request: DeleteAvatarTrainingJobRequest): DeleteAvatarTrainingJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAvatarTrainingJobWithOptions(request, runtime);
}

model DeleteCategoryRequest {
  cateId?: long(name='CateId', description='This parameter is required.', example='46'),
}

model DeleteCategoryResponseBody = {
  requestId?: string(name='RequestId', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
}

model DeleteCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCategoryResponseBody(name='body'),
}

/**
 * @summary 删除媒资分类
 *
 * @param request DeleteCategoryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteCategoryResponse
 */
async function deleteCategoryWithOptions(request: DeleteCategoryRequest, runtime: Util.RuntimeOptions): DeleteCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cateId)) {
    query['CateId'] = request.cateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCategory',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除媒资分类
 *
 * @param request DeleteCategoryRequest
 * @return DeleteCategoryResponse
 */
async function deleteCategory(request: DeleteCategoryRequest): DeleteCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCategoryWithOptions(request, runtime);
}

model DeleteCustomTemplateRequest {
  templateId?: string(name='TemplateId', description='This parameter is required.', example='****96e8864746a0b6f3****'),
}

model DeleteCustomTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model DeleteCustomTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustomTemplateResponseBody(name='body'),
}

/**
 * @summary 删除媒体处理自定义模板
 *
 * @param request DeleteCustomTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteCustomTemplateResponse
 */
async function deleteCustomTemplateWithOptions(request: DeleteCustomTemplateRequest, runtime: Util.RuntimeOptions): DeleteCustomTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCustomTemplate',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除媒体处理自定义模板
 *
 * @param request DeleteCustomTemplateRequest
 * @return DeleteCustomTemplateResponse
 */
async function deleteCustomTemplate(request: DeleteCustomTemplateRequest): DeleteCustomTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCustomTemplateWithOptions(request, runtime);
}

model DeleteCustomizedVoiceJobRequest {
  jobId?: string(name='JobId', description='This parameter is required.', example='****20b48fb04483915d4f2cd8ac****'),
}

model DeleteCustomizedVoiceJobResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model DeleteCustomizedVoiceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustomizedVoiceJobResponseBody(name='body'),
}

/**
 * @summary 删除用户的专属人声任务
 *
 * @param request DeleteCustomizedVoiceJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteCustomizedVoiceJobResponse
 */
async function deleteCustomizedVoiceJobWithOptions(request: DeleteCustomizedVoiceJobRequest, runtime: Util.RuntimeOptions): DeleteCustomizedVoiceJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCustomizedVoiceJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除用户的专属人声任务
 *
 * @param request DeleteCustomizedVoiceJobRequest
 * @return DeleteCustomizedVoiceJobResponse
 */
async function deleteCustomizedVoiceJob(request: DeleteCustomizedVoiceJobRequest): DeleteCustomizedVoiceJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCustomizedVoiceJobWithOptions(request, runtime);
}

model DeleteDNADBRequest {
  DBId?: string(name='DBId', description='This parameter is required.', example='fb712a6890464059b1b2ea7c8647****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteDNADBResponseBody = {
  requestId?: string(name='RequestId', example='25818875-5F78-4A13-BEF6-D7393642CA58'),
}

model DeleteDNADBResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDNADBResponseBody(name='body'),
}

/**
 * @summary 删除DNA库
 *
 * @param request DeleteDNADBRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDNADBResponse
 */
async function deleteDNADBWithOptions(request: DeleteDNADBRequest, runtime: Util.RuntimeOptions): DeleteDNADBResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBId)) {
    query['DBId'] = request.DBId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDNADB',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除DNA库
 *
 * @param request DeleteDNADBRequest
 * @return DeleteDNADBResponse
 */
async function deleteDNADB(request: DeleteDNADBRequest): DeleteDNADBResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDNADBWithOptions(request, runtime);
}

model DeleteDNAFilesRequest {
  DBId?: string(name='DBId', description='This parameter is required.', example='fb712a6890464059b1b2ea7c8647****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  primaryKeys?: string(name='PrimaryKeys', description='This parameter is required.', example='41e6536e4f2250e2e9bf26cdea19****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteDNAFilesResponseBody = {
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model DeleteDNAFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDNAFilesResponseBody(name='body'),
}

/**
 * @summary 删除DNA文件
 *
 * @param request DeleteDNAFilesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDNAFilesResponse
 */
async function deleteDNAFilesWithOptions(request: DeleteDNAFilesRequest, runtime: Util.RuntimeOptions): DeleteDNAFilesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBId)) {
    query['DBId'] = request.DBId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.primaryKeys)) {
    query['PrimaryKeys'] = request.primaryKeys;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDNAFiles',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除DNA文件
 *
 * @param request DeleteDNAFilesRequest
 * @return DeleteDNAFilesResponse
 */
async function deleteDNAFiles(request: DeleteDNAFilesRequest): DeleteDNAFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDNAFilesWithOptions(request, runtime);
}

model DeleteEditingProjectMaterialsRequest {
  materialIds?: string(name='MaterialIds', description='This parameter is required.', example='*****cbd721b418a89a7dafb1dc*****,*****86f5d534c95997c55c96f*****'),
  materialType?: string(name='MaterialType', description='This parameter is required.', example='video'),
  projectId?: string(name='ProjectId', description='This parameter is required.', example='*****fb2101cb318*****'),
}

model DeleteEditingProjectMaterialsResponseBody = {
  requestId?: string(name='RequestId', example='******36-3C1E-4417-BDB2-1E034F******'),
}

model DeleteEditingProjectMaterialsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEditingProjectMaterialsResponseBody(name='body'),
}

/**
 * @summary 删除剪辑工程关联素材
 *
 * @param request DeleteEditingProjectMaterialsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteEditingProjectMaterialsResponse
 */
async function deleteEditingProjectMaterialsWithOptions(request: DeleteEditingProjectMaterialsRequest, runtime: Util.RuntimeOptions): DeleteEditingProjectMaterialsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.materialIds)) {
    query['MaterialIds'] = request.materialIds;
  }
  if (!Util.isUnset(request.materialType)) {
    query['MaterialType'] = request.materialType;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEditingProjectMaterials',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除剪辑工程关联素材
 *
 * @param request DeleteEditingProjectMaterialsRequest
 * @return DeleteEditingProjectMaterialsResponse
 */
async function deleteEditingProjectMaterials(request: DeleteEditingProjectMaterialsRequest): DeleteEditingProjectMaterialsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEditingProjectMaterialsWithOptions(request, runtime);
}

model DeleteEditingProjectsRequest {
  projectIds?: string(name='ProjectIds', example='****fb2101bf24bf41cb318787dc****,****87dcfb2101bf24bf41cb3187****'),
}

model DeleteEditingProjectsResponseBody = {
  requestId?: string(name='RequestId', example='****25818875-5F78-4AF6-D7393642CA58****'),
}

model DeleteEditingProjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEditingProjectsResponseBody(name='body'),
}

/**
 * @summary 删除云剪辑工程
 *
 * @param request DeleteEditingProjectsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteEditingProjectsResponse
 */
async function deleteEditingProjectsWithOptions(request: DeleteEditingProjectsRequest, runtime: Util.RuntimeOptions): DeleteEditingProjectsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectIds)) {
    query['ProjectIds'] = request.projectIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEditingProjects',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除云剪辑工程
 *
 * @param request DeleteEditingProjectsRequest
 * @return DeleteEditingProjectsResponse
 */
async function deleteEditingProjects(request: DeleteEditingProjectsRequest): DeleteEditingProjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEditingProjectsWithOptions(request, runtime);
}

model DeleteLiveRecordFilesRequest {
  recordIds?: [ string ](name='RecordIds', description='This parameter is required.'),
  removeFile?: boolean(name='RemoveFile', example='true'),
}

model DeleteLiveRecordFilesResponseBody = {
  deleteFileInfoList?: [ 
    {
      code?: string(name='Code', example='OK'),
      message?: string(name='Message', example='OK'),
      recordId?: string(name='RecordId', example='13cbb83e-043c-4728-ac35-*****'),
    }
  ](name='DeleteFileInfoList'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='13cbb83e-043c-4728-ac35-*****'),
}

model DeleteLiveRecordFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLiveRecordFilesResponseBody(name='body'),
}

/**
 * @summary 实时媒体服务-删除录制文件
 *
 * @param request DeleteLiveRecordFilesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteLiveRecordFilesResponse
 */
async function deleteLiveRecordFilesWithOptions(request: DeleteLiveRecordFilesRequest, runtime: Util.RuntimeOptions): DeleteLiveRecordFilesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.recordIds)) {
    query['RecordIds'] = request.recordIds;
  }
  if (!Util.isUnset(request.removeFile)) {
    query['RemoveFile'] = request.removeFile;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLiveRecordFiles',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 实时媒体服务-删除录制文件
 *
 * @param request DeleteLiveRecordFilesRequest
 * @return DeleteLiveRecordFilesResponse
 */
async function deleteLiveRecordFiles(request: DeleteLiveRecordFilesRequest): DeleteLiveRecordFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveRecordFilesWithOptions(request, runtime);
}

model DeleteLiveRecordTemplateRequest {
  templateId?: string(name='TemplateId', description='代表资源一级ID的资源属性字段

This parameter is required.', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66'),
}

model DeleteLiveRecordTemplateResponseBody = {
  requestId?: string(name='RequestId', example='3E5330CF-B4C8-5BEF-AA6B-8E70BD20FAEE'),
}

model DeleteLiveRecordTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLiveRecordTemplateResponseBody(name='body'),
}

/**
 * @summary 删除直播录制模板
 *
 * @param request DeleteLiveRecordTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteLiveRecordTemplateResponse
 */
async function deleteLiveRecordTemplateWithOptions(request: DeleteLiveRecordTemplateRequest, runtime: Util.RuntimeOptions): DeleteLiveRecordTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLiveRecordTemplate',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除直播录制模板
 *
 * @param request DeleteLiveRecordTemplateRequest
 * @return DeleteLiveRecordTemplateResponse
 */
async function deleteLiveRecordTemplate(request: DeleteLiveRecordTemplateRequest): DeleteLiveRecordTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveRecordTemplateWithOptions(request, runtime);
}

model DeleteLiveSnapshotFilesRequest {
  createTimestampList?: [ long ](name='CreateTimestampList', description='This parameter is required.'),
  deleteOriginalFile?: boolean(name='DeleteOriginalFile', example='true'),
  jobId?: string(name='JobId', description='This parameter is required.', example='****a046-263c-3560-978a-fb287782****'),
}

model DeleteLiveSnapshotFilesShrinkRequest {
  createTimestampListShrink?: string(name='CreateTimestampList', description='This parameter is required.'),
  deleteOriginalFile?: boolean(name='DeleteOriginalFile', example='true'),
  jobId?: string(name='JobId', description='This parameter is required.', example='****a046-263c-3560-978a-fb287782****'),
}

model DeleteLiveSnapshotFilesResponseBody = {
  deleteFileResultList?: [ 
    {
      createTimestamp?: long(name='CreateTimestamp', example='1660638613798'),
      result?: string(name='Result', example='OK'),
    }
  ](name='DeleteFileResultList'),
  requestId?: string(name='RequestId', example='****2876-6263-4B75-8F2C-CD0F7FCF****'),
}

model DeleteLiveSnapshotFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLiveSnapshotFilesResponseBody(name='body'),
}

/**
 * @summary 批量删除直播截图文件
 *
 * @param tmpReq DeleteLiveSnapshotFilesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteLiveSnapshotFilesResponse
 */
async function deleteLiveSnapshotFilesWithOptions(tmpReq: DeleteLiveSnapshotFilesRequest, runtime: Util.RuntimeOptions): DeleteLiveSnapshotFilesResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteLiveSnapshotFilesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.createTimestampList)) {
    request.createTimestampListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.createTimestampList, 'CreateTimestampList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.createTimestampListShrink)) {
    query['CreateTimestampList'] = request.createTimestampListShrink;
  }
  if (!Util.isUnset(request.deleteOriginalFile)) {
    query['DeleteOriginalFile'] = request.deleteOriginalFile;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLiveSnapshotFiles',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量删除直播截图文件
 *
 * @param request DeleteLiveSnapshotFilesRequest
 * @return DeleteLiveSnapshotFilesResponse
 */
async function deleteLiveSnapshotFiles(request: DeleteLiveSnapshotFilesRequest): DeleteLiveSnapshotFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveSnapshotFilesWithOptions(request, runtime);
}

model DeleteLiveSnapshotTemplateRequest {
  templateId?: string(name='TemplateId', description='This parameter is required.', example='****a046-263c-3560-978a-fb287782****'),
}

model DeleteLiveSnapshotTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model DeleteLiveSnapshotTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLiveSnapshotTemplateResponseBody(name='body'),
}

/**
 * @summary 删除直播截图模板
 *
 * @param request DeleteLiveSnapshotTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteLiveSnapshotTemplateResponse
 */
async function deleteLiveSnapshotTemplateWithOptions(request: DeleteLiveSnapshotTemplateRequest, runtime: Util.RuntimeOptions): DeleteLiveSnapshotTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLiveSnapshotTemplate',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除直播截图模板
 *
 * @param request DeleteLiveSnapshotTemplateRequest
 * @return DeleteLiveSnapshotTemplateResponse
 */
async function deleteLiveSnapshotTemplate(request: DeleteLiveSnapshotTemplateRequest): DeleteLiveSnapshotTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveSnapshotTemplateWithOptions(request, runtime);
}

model DeleteLiveTranscodeJobRequest {
  jobId?: string(name='JobId', description='This parameter is required.', example='****20b48fb04483915d4f2cd8ac****'),
}

model DeleteLiveTranscodeJobResponseBody = {
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
}

model DeleteLiveTranscodeJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLiveTranscodeJobResponseBody(name='body'),
}

/**
 * @summary 删除指定转码任务
 *
 * @param request DeleteLiveTranscodeJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteLiveTranscodeJobResponse
 */
async function deleteLiveTranscodeJobWithOptions(request: DeleteLiveTranscodeJobRequest, runtime: Util.RuntimeOptions): DeleteLiveTranscodeJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLiveTranscodeJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除指定转码任务
 *
 * @param request DeleteLiveTranscodeJobRequest
 * @return DeleteLiveTranscodeJobResponse
 */
async function deleteLiveTranscodeJob(request: DeleteLiveTranscodeJobRequest): DeleteLiveTranscodeJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveTranscodeJobWithOptions(request, runtime);
}

model DeleteLiveTranscodeTemplateRequest {
  templateId?: string(name='TemplateId', description='This parameter is required.', example='****d80e4e4044975745c14b****'),
}

model DeleteLiveTranscodeTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
}

model DeleteLiveTranscodeTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLiveTranscodeTemplateResponseBody(name='body'),
}

/**
 * @summary 删除指定转码模版
 *
 * @param request DeleteLiveTranscodeTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteLiveTranscodeTemplateResponse
 */
async function deleteLiveTranscodeTemplateWithOptions(request: DeleteLiveTranscodeTemplateRequest, runtime: Util.RuntimeOptions): DeleteLiveTranscodeTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLiveTranscodeTemplate',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除指定转码模版
 *
 * @param request DeleteLiveTranscodeTemplateRequest
 * @return DeleteLiveTranscodeTemplateResponse
 */
async function deleteLiveTranscodeTemplate(request: DeleteLiveTranscodeTemplateRequest): DeleteLiveTranscodeTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveTranscodeTemplateWithOptions(request, runtime);
}

model DeleteMediaFromSearchLibRequest {
  mediaId?: string(name='MediaId', description='This parameter is required.', example='****20b48fb04483915d4f2cd8ac****'),
  msgBody?: string(name='MsgBody', example='{}'),
  searchLibName?: string(name='SearchLibName', example='test1'),
}

model DeleteMediaFromSearchLibResponseBody = {
  code?: string(name='Code'),
  mediaId?: string(name='MediaId', example='******b48fb04483915d4f2cd8******'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: string(name='Success'),
}

model DeleteMediaFromSearchLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMediaFromSearchLibResponseBody(name='body'),
}

/**
 * @summary 删除媒资从搜索
 *
 * @param request DeleteMediaFromSearchLibRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteMediaFromSearchLibResponse
 */
async function deleteMediaFromSearchLibWithOptions(request: DeleteMediaFromSearchLibRequest, runtime: Util.RuntimeOptions): DeleteMediaFromSearchLibResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mediaId)) {
    query['MediaId'] = request.mediaId;
  }
  if (!Util.isUnset(request.msgBody)) {
    query['MsgBody'] = request.msgBody;
  }
  if (!Util.isUnset(request.searchLibName)) {
    query['SearchLibName'] = request.searchLibName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMediaFromSearchLib',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除媒资从搜索
 *
 * @param request DeleteMediaFromSearchLibRequest
 * @return DeleteMediaFromSearchLibResponse
 */
async function deleteMediaFromSearchLib(request: DeleteMediaFromSearchLibRequest): DeleteMediaFromSearchLibResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMediaFromSearchLibWithOptions(request, runtime);
}

model DeleteMediaInfosRequest {
  deletePhysicalFiles?: boolean(name='DeletePhysicalFiles', example='false'),
  inputURLs?: string(name='InputURLs'),
  mediaIds?: string(name='MediaIds', example='****20b48fb04483915d4f2cd8ac****,****15d4a4b0448391508f2cb486****'),
}

model DeleteMediaInfosResponseBody = {
  forbiddenList?: [ string ](name='ForbiddenList'),
  ignoredList?: [ string ](name='IgnoredList'),
  requestId?: string(name='RequestId', example='0622C702-41BE-467E-AF2E-883D4517962E'),
}

model DeleteMediaInfosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMediaInfosResponseBody(name='body'),
}

/**
 * @summary 删除媒资信息
 *
 * @param request DeleteMediaInfosRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteMediaInfosResponse
 */
async function deleteMediaInfosWithOptions(request: DeleteMediaInfosRequest, runtime: Util.RuntimeOptions): DeleteMediaInfosResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deletePhysicalFiles)) {
    query['DeletePhysicalFiles'] = request.deletePhysicalFiles;
  }
  if (!Util.isUnset(request.inputURLs)) {
    query['InputURLs'] = request.inputURLs;
  }
  if (!Util.isUnset(request.mediaIds)) {
    query['MediaIds'] = request.mediaIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMediaInfos',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除媒资信息
 *
 * @param request DeleteMediaInfosRequest
 * @return DeleteMediaInfosResponse
 */
async function deleteMediaInfos(request: DeleteMediaInfosRequest): DeleteMediaInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMediaInfosWithOptions(request, runtime);
}

model DeleteMediaMarksRequest {
  mediaId?: string(name='MediaId', example='****c469e944b5a856828dc2****'),
  mediaMarkIds?: string(name='MediaMarkIds', example='mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60'),
}

model DeleteMediaMarksResponseBody = {
  mediaId?: string(name='MediaId', example='****019b82e24b37a1c2958dec38****'),
  mediaMarkIds?: string(name='MediaMarkIds', example='mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model DeleteMediaMarksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMediaMarksResponseBody(name='body'),
}

/**
 * @summary 删除媒资标注信息
 *
 * @param request DeleteMediaMarksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteMediaMarksResponse
 */
async function deleteMediaMarksWithOptions(request: DeleteMediaMarksRequest, runtime: Util.RuntimeOptions): DeleteMediaMarksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mediaId)) {
    query['MediaId'] = request.mediaId;
  }
  if (!Util.isUnset(request.mediaMarkIds)) {
    query['MediaMarkIds'] = request.mediaMarkIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMediaMarks',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除媒资标注信息
 *
 * @param request DeleteMediaMarksRequest
 * @return DeleteMediaMarksResponse
 */
async function deleteMediaMarks(request: DeleteMediaMarksRequest): DeleteMediaMarksResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMediaMarksWithOptions(request, runtime);
}

model DeletePipelineRequest {
  pipelineId?: string(name='PipelineId', description='This parameter is required.', example='****96e8864746a0b6f3****'),
}

model DeletePipelineResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model DeletePipelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePipelineResponseBody(name='body'),
}

/**
 * @summary 删除管道配置
 *
 * @param request DeletePipelineRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeletePipelineResponse
 */
async function deletePipelineWithOptions(request: DeletePipelineRequest, runtime: Util.RuntimeOptions): DeletePipelineResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pipelineId)) {
    query['PipelineId'] = request.pipelineId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePipeline',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除管道配置
 *
 * @param request DeletePipelineRequest
 * @return DeletePipelineResponse
 */
async function deletePipeline(request: DeletePipelineRequest): DeletePipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePipelineWithOptions(request, runtime);
}

model DeletePlayInfoRequest {
  deletePhysicalFiles?: boolean(name='DeletePhysicalFiles', example='false'),
  fileURLs?: string(name='FileURLs', example='https://ice-test001.oss-cn-shanghai.aliyuncs.com/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%E5%B0%8F%E7%8C%AA%E4%BD%A9%E5%A5%87640*360.mp4'),
  mediaId?: string(name='MediaId', example='1d3518e0027d71ed80cd909598416303'),
}

model DeletePlayInfoResponseBody = {
  forbiddenList?: [ string ](name='ForbiddenList'),
  ignoredList?: [ string ](name='IgnoredList'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model DeletePlayInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePlayInfoResponseBody(name='body'),
}

/**
 * @summary 删除播放信息
 *
 * @param request DeletePlayInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeletePlayInfoResponse
 */
async function deletePlayInfoWithOptions(request: DeletePlayInfoRequest, runtime: Util.RuntimeOptions): DeletePlayInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deletePhysicalFiles)) {
    query['DeletePhysicalFiles'] = request.deletePhysicalFiles;
  }
  if (!Util.isUnset(request.fileURLs)) {
    query['FileURLs'] = request.fileURLs;
  }
  if (!Util.isUnset(request.mediaId)) {
    query['MediaId'] = request.mediaId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePlayInfo',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除播放信息
 *
 * @param request DeletePlayInfoRequest
 * @return DeletePlayInfoResponse
 */
async function deletePlayInfo(request: DeletePlayInfoRequest): DeletePlayInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePlayInfoWithOptions(request, runtime);
}

model DeleteSmartJobRequest {
  jobId?: string(name='JobId', example='******b48fb04483915d4f2cd8******,******042d5e4db6866f6289d1******'),
}

model DeleteSmartJobResponseBody = {
  requestId?: string(name='RequestId', description='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model DeleteSmartJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSmartJobResponseBody(name='body'),
}

/**
 * @summary DeleteSmartJob
 *
 * @param request DeleteSmartJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteSmartJobResponse
 */
async function deleteSmartJobWithOptions(request: DeleteSmartJobRequest, runtime: Util.RuntimeOptions): DeleteSmartJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSmartJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary DeleteSmartJob
 *
 * @param request DeleteSmartJobRequest
 * @return DeleteSmartJobResponse
 */
async function deleteSmartJob(request: DeleteSmartJobRequest): DeleteSmartJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSmartJobWithOptions(request, runtime);
}

model DeleteTemplateRequest {
  templateIds?: string(name='TemplateIds', example='****20b48fb04483915d4f2cd8ac****,****20b48fb04483915d4f2cd8ac****'),
}

model DeleteTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model DeleteTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTemplateResponseBody(name='body'),
}

/**
 * @summary DeleteTemplate
 *
 * @param request DeleteTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteTemplateResponse
 */
async function deleteTemplateWithOptions(request: DeleteTemplateRequest, runtime: Util.RuntimeOptions): DeleteTemplateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTemplate',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary DeleteTemplate
 *
 * @param request DeleteTemplateRequest
 * @return DeleteTemplateResponse
 */
async function deleteTemplate(request: DeleteTemplateRequest): DeleteTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTemplateWithOptions(request, runtime);
}

model DescribeMeterImsEditUsageRequest {
  endTs?: long(name='EndTs', description='This parameter is required.', example='1656995036'),
  interval?: long(name='Interval', description='This parameter is required.', example='86400'),
  region?: string(name='Region', example='cn-shanghai'),
  startTs?: long(name='StartTs', description='This parameter is required.', example='1654403036'),
}

model DescribeMeterImsEditUsageResponseBody = {
  data?: [ 
    {
      duration?: long(name='Duration', example='1.23'),
      profile?: string(name='Profile', example='1080P'),
      time?: long(name='Time', example='1656950400'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='7F3AE2C6-5CC6-5712-BAC5-5A735A157687'),
}

model DescribeMeterImsEditUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeterImsEditUsageResponseBody(name='body'),
}

/**
 * @param request DescribeMeterImsEditUsageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeMeterImsEditUsageResponse
 */
async function describeMeterImsEditUsageWithOptions(request: DescribeMeterImsEditUsageRequest, runtime: Util.RuntimeOptions): DescribeMeterImsEditUsageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTs)) {
    query['EndTs'] = request.endTs;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.startTs)) {
    query['StartTs'] = request.startTs;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMeterImsEditUsage',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DescribeMeterImsEditUsageRequest
 * @return DescribeMeterImsEditUsageResponse
 */
async function describeMeterImsEditUsage(request: DescribeMeterImsEditUsageRequest): DescribeMeterImsEditUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMeterImsEditUsageWithOptions(request, runtime);
}

model DescribeMeterImsMediaConvertUHDUsageRequest {
  endTs?: long(name='EndTs', description='This parameter is required.', example='1656995036'),
  interval?: string(name='Interval', description='This parameter is required.', example='3600'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  startTs?: long(name='StartTs', description='This parameter is required.', example='1654403036'),
}

model DescribeMeterImsMediaConvertUHDUsageResponseBody = {
  data?: [ 
    {
      duration?: long(name='Duration', example='308028'),
      specification?: string(name='Specification', example='SuperResolution.Standard.1080P'),
      time?: long(name='Time', example='1656950400'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='BEA98A0C-7870-15FE-B96F-8880BB600A2C'),
}

model DescribeMeterImsMediaConvertUHDUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeterImsMediaConvertUHDUsageResponseBody(name='body'),
}

/**
 * @param request DescribeMeterImsMediaConvertUHDUsageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeMeterImsMediaConvertUHDUsageResponse
 */
async function describeMeterImsMediaConvertUHDUsageWithOptions(request: DescribeMeterImsMediaConvertUHDUsageRequest, runtime: Util.RuntimeOptions): DescribeMeterImsMediaConvertUHDUsageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTs)) {
    query['EndTs'] = request.endTs;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTs)) {
    query['StartTs'] = request.startTs;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMeterImsMediaConvertUHDUsage',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DescribeMeterImsMediaConvertUHDUsageRequest
 * @return DescribeMeterImsMediaConvertUHDUsageResponse
 */
async function describeMeterImsMediaConvertUHDUsage(request: DescribeMeterImsMediaConvertUHDUsageRequest): DescribeMeterImsMediaConvertUHDUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMeterImsMediaConvertUHDUsageWithOptions(request, runtime);
}

model DescribeMeterImsMediaConvertUsageRequest {
  endTs?: long(name='EndTs', description='This parameter is required.', example='1656995036'),
  interval?: long(name='Interval', description='This parameter is required.', example='86400'),
  region?: string(name='Region', example='cn-shanghai'),
  startTs?: long(name='StartTs', description='This parameter is required.', example='1654403036'),
}

model DescribeMeterImsMediaConvertUsageResponseBody = {
  data?: [ 
    {
      duration?: long(name='Duration', example='20'),
      specification?: string(name='Specification', example='H264.HD'),
      time?: long(name='Time', example='1656950400'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='FBBB5210-2B78-58FB-A6FE-9DD887BB2C61'),
}

model DescribeMeterImsMediaConvertUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeterImsMediaConvertUsageResponseBody(name='body'),
}

/**
 * @summary 智能媒体服务点播转码用量
 *
 * @param request DescribeMeterImsMediaConvertUsageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeMeterImsMediaConvertUsageResponse
 */
async function describeMeterImsMediaConvertUsageWithOptions(request: DescribeMeterImsMediaConvertUsageRequest, runtime: Util.RuntimeOptions): DescribeMeterImsMediaConvertUsageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTs)) {
    query['EndTs'] = request.endTs;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.startTs)) {
    query['StartTs'] = request.startTs;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMeterImsMediaConvertUsage',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 智能媒体服务点播转码用量
 *
 * @param request DescribeMeterImsMediaConvertUsageRequest
 * @return DescribeMeterImsMediaConvertUsageResponse
 */
async function describeMeterImsMediaConvertUsage(request: DescribeMeterImsMediaConvertUsageRequest): DescribeMeterImsMediaConvertUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMeterImsMediaConvertUsageWithOptions(request, runtime);
}

model DescribeMeterImsMpsAiUsageRequest {
  endTs?: long(name='EndTs', description='This parameter is required.', example='1656995036'),
  interval?: long(name='Interval', description='This parameter is required.', example='86400'),
  region?: string(name='Region', example='cn-shanghai'),
  startTs?: long(name='StartTs', description='This parameter is required.', example='1654403036'),
}

model DescribeMeterImsMpsAiUsageResponseBody = {
  data?: [ 
    {
      duration?: long(name='Duration', example='644'),
      time?: long(name='Time', example='1656950400'),
      type?: string(name='Type'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='0622C702-41BE-467E-AF2E-883D4517962E'),
}

model DescribeMeterImsMpsAiUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeterImsMpsAiUsageResponseBody(name='body'),
}

/**
 * @param request DescribeMeterImsMpsAiUsageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeMeterImsMpsAiUsageResponse
 */
async function describeMeterImsMpsAiUsageWithOptions(request: DescribeMeterImsMpsAiUsageRequest, runtime: Util.RuntimeOptions): DescribeMeterImsMpsAiUsageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTs)) {
    query['EndTs'] = request.endTs;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.startTs)) {
    query['StartTs'] = request.startTs;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMeterImsMpsAiUsage',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DescribeMeterImsMpsAiUsageRequest
 * @return DescribeMeterImsMpsAiUsageResponse
 */
async function describeMeterImsMpsAiUsage(request: DescribeMeterImsMpsAiUsageRequest): DescribeMeterImsMpsAiUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMeterImsMpsAiUsageWithOptions(request, runtime);
}

model DescribeMeterImsSummaryRequest {
  endTs?: long(name='EndTs', description='This parameter is required.', example='1656995036'),
  region?: string(name='Region', example='cn-shanghai'),
  startTs?: long(name='StartTs', description='This parameter is required.', example='1654403036'),
}

model DescribeMeterImsSummaryResponseBody = {
  data?: [ 
    {
      editingDuration?: string(name='EditingDuration', example='8722'),
      liveEditDuration?: string(name='LiveEditDuration'),
      liveRecordDuration?: string(name='LiveRecordDuration'),
      liveSnapshotCount?: string(name='LiveSnapshotCount'),
      liveTranscodeDuration?: long(name='LiveTranscodeDuration', example='12356'),
      mpsAiDuration?: long(name='MpsAiDuration', example='0'),
      mpsTranscodeDuration?: long(name='MpsTranscodeDuration', example='17337'),
      mpsTranscodeUHDDuration?: long(name='MpsTranscodeUHDDuration', example='300'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='BEA98A0C-7870-15FE-B96F-8880BB600A2C'),
}

model DescribeMeterImsSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeterImsSummaryResponseBody(name='body'),
}

/**
 * @param request DescribeMeterImsSummaryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeMeterImsSummaryResponse
 */
async function describeMeterImsSummaryWithOptions(request: DescribeMeterImsSummaryRequest, runtime: Util.RuntimeOptions): DescribeMeterImsSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTs)) {
    query['EndTs'] = request.endTs;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.startTs)) {
    query['StartTs'] = request.startTs;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMeterImsSummary',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DescribeMeterImsSummaryRequest
 * @return DescribeMeterImsSummaryResponse
 */
async function describeMeterImsSummary(request: DescribeMeterImsSummaryRequest): DescribeMeterImsSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMeterImsSummaryWithOptions(request, runtime);
}

model DescribePlayListRequest {
  beginTs?: string(name='BeginTs', description='This parameter is required.', example='1676170500011'),
  endTs?: string(name='EndTs', description='This parameter is required.', example='1682474405173'),
  orderName?: string(name='OrderName', example='FirstFrameDuration'),
  orderType?: string(name='OrderType', example='DESC'),
  pageNo?: int32(name='PageNo', description='This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='This parameter is required.', example='10'),
  playType?: string(name='PlayType', example='vod'),
  status?: string(name='Status', example='complete'),
  traceId?: string(name='TraceId', example='0bc5e70516766285805381012d271e'),
}

model DescribePlayListResponseBody = {
  pageNum?: long(name='PageNum', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  playList?: [ 
    {
      firstFrameDuration?: string(name='FirstFrameDuration', example='200'),
      playDuration?: string(name='PlayDuration', example='1000'),
      playTs?: string(name='PlayTs', example='1675922209572'),
      playType?: string(name='PlayType', example='vod'),
      sessionId?: string(name='SessionId', example='91488be2-8381-40c9-8494-e8afe22c4a2d'),
      status?: string(name='Status', example='complete'),
      stuckDuration?: string(name='StuckDuration', example='20'),
      traceId?: string(name='TraceId', example='0b736abf16724820210842673d9543'),
      videoDuration?: string(name='VideoDuration', example='2000'),
      videoId?: string(name='VideoId', example='250314203f0171eebff17035d0b20102'),
    }
  ](name='PlayList'),
  requestId?: string(name='RequestId', description='Id', example='B960580D-26FA-5547-8AFC-3CDC812DBF27'),
  totalNum?: long(name='TotalNum', example='49'),
}

model DescribePlayListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePlayListResponseBody(name='body'),
}

/**
 * @param request DescribePlayListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePlayListResponse
 */
async function describePlayListWithOptions(request: DescribePlayListRequest, runtime: Util.RuntimeOptions): DescribePlayListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.beginTs)) {
    query['BeginTs'] = request.beginTs;
  }
  if (!Util.isUnset(request.endTs)) {
    query['EndTs'] = request.endTs;
  }
  if (!Util.isUnset(request.orderName)) {
    query['OrderName'] = request.orderName;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.playType)) {
    query['PlayType'] = request.playType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.traceId)) {
    query['TraceId'] = request.traceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePlayList',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DescribePlayListRequest
 * @return DescribePlayListResponse
 */
async function describePlayList(request: DescribePlayListRequest): DescribePlayListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePlayListWithOptions(request, runtime);
}

model DescribeRtcRobotInstanceRequest {
  instanceId?: string(name='InstanceId', example='727dc0e296014bb58670940a3da95592'),
}

model DescribeRtcRobotInstanceResponseBody = {
  authToken?: string(name='AuthToken', example='**********'),
  channelId?: string(name='ChannelId', example='testId'),
  config?: {
    enableVoiceInterrupt?: boolean(name='EnableVoiceInterrupt', example='true'),
    greeting?: string(name='Greeting'),
    voiceId?: string(name='VoiceId', example='zhixiaoxia'),
  }(name='Config'),
  requestId?: string(name='RequestId', description='Id of the request', example='20B3A1B6-4BD2-5DE6-BCBC-098C9B4F4E91'),
  status?: string(name='Status', example='Executing'),
  userData?: string(name='UserData', example='{}'),
  userId?: string(name='UserId', example='my-robot'),
}

model DescribeRtcRobotInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRtcRobotInstanceResponseBody(name='body'),
}

/**
 * @summary 查询实例
 *
 * @param request DescribeRtcRobotInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRtcRobotInstanceResponse
 */
async function describeRtcRobotInstanceWithOptions(request: DescribeRtcRobotInstanceRequest, runtime: Util.RuntimeOptions): DescribeRtcRobotInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRtcRobotInstance',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询实例
 *
 * @param request DescribeRtcRobotInstanceRequest
 * @return DescribeRtcRobotInstanceResponse
 */
async function describeRtcRobotInstance(request: DescribeRtcRobotInstanceRequest): DescribeRtcRobotInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRtcRobotInstanceWithOptions(request, runtime);
}

model DetectAudioForCustomizedVoiceJobRequest {
  audioRecordId?: int32(name='AudioRecordId', description='This parameter is required.', example='1'),
  recordUrl?: string(name='RecordUrl', description='This parameter is required.', example='https://your-bucket.oss-cn-hangzhou.aliyuncs.com/record1.wav'),
  voiceId?: string(name='VoiceId', description='This parameter is required.', example='xiaozhuan'),
}

model DetectAudioForCustomizedVoiceJobResponseBody = {
  data?: {
    pass?: boolean(name='Pass', example='false'),
    reason?: string(name='Reason'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model DetectAudioForCustomizedVoiceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetectAudioForCustomizedVoiceJobResponseBody(name='body'),
}

/**
 * @summary 本接口用来检测用户的朗读是否有明显的发音错误、嘈杂的环境等
 *
 * @param request DetectAudioForCustomizedVoiceJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetectAudioForCustomizedVoiceJobResponse
 */
async function detectAudioForCustomizedVoiceJobWithOptions(request: DetectAudioForCustomizedVoiceJobRequest, runtime: Util.RuntimeOptions): DetectAudioForCustomizedVoiceJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.audioRecordId)) {
    query['AudioRecordId'] = request.audioRecordId;
  }
  if (!Util.isUnset(request.recordUrl)) {
    query['RecordUrl'] = request.recordUrl;
  }
  if (!Util.isUnset(request.voiceId)) {
    query['VoiceId'] = request.voiceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetectAudioForCustomizedVoiceJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 本接口用来检测用户的朗读是否有明显的发音错误、嘈杂的环境等
 *
 * @param request DetectAudioForCustomizedVoiceJobRequest
 * @return DetectAudioForCustomizedVoiceJobResponse
 */
async function detectAudioForCustomizedVoiceJob(request: DetectAudioForCustomizedVoiceJobRequest): DetectAudioForCustomizedVoiceJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectAudioForCustomizedVoiceJobWithOptions(request, runtime);
}

model DropSearchIndexRequest {
  indexType?: string(name='IndexType', description='This parameter is required.', example='mm'),
  searchLibName?: string(name='SearchLibName', example='test1'),
}

model DropSearchIndexResponseBody = {
  code?: string(name='Code'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: string(name='Success'),
}

model DropSearchIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DropSearchIndexResponseBody(name='body'),
}

/**
 * @summary 删除搜索索引
 *
 * @param request DropSearchIndexRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DropSearchIndexResponse
 */
async function dropSearchIndexWithOptions(request: DropSearchIndexRequest, runtime: Util.RuntimeOptions): DropSearchIndexResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.indexType)) {
    query['IndexType'] = request.indexType;
  }
  if (!Util.isUnset(request.searchLibName)) {
    query['SearchLibName'] = request.searchLibName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DropSearchIndex',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除搜索索引
 *
 * @param request DropSearchIndexRequest
 * @return DropSearchIndexResponse
 */
async function dropSearchIndex(request: DropSearchIndexRequest): DropSearchIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  return dropSearchIndexWithOptions(request, runtime);
}

model DropSearchLibRequest {
  searchLibName?: string(name='SearchLibName', description='This parameter is required.', example='test1'),
}

model DropSearchLibResponseBody = {
  code?: string(name='Code'),
  requestId?: string(name='RequestId', description='Id of the request', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
  success?: string(name='Success'),
}

model DropSearchLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DropSearchLibResponseBody(name='body'),
}

/**
 * @summary 删除库
 *
 * @param request DropSearchLibRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DropSearchLibResponse
 */
async function dropSearchLibWithOptions(request: DropSearchLibRequest, runtime: Util.RuntimeOptions): DropSearchLibResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.searchLibName)) {
    query['SearchLibName'] = request.searchLibName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DropSearchLib',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除库
 *
 * @param request DropSearchLibRequest
 * @return DropSearchLibResponse
 */
async function dropSearchLib(request: DropSearchLibRequest): DropSearchLibResponse {
  var runtime = new Util.RuntimeOptions{};
  return dropSearchLibWithOptions(request, runtime);
}

model GenerateKMSDataKeyResponseBody = {
  dataKey?: {
    ciphertextBlob?: string(name='CiphertextBlob', example='ODZhOWVmZDktM2QxNi00ODk0LWJkNGYtMWZjNDNmM2YyYWJmS7FmDBBQ0BkKsQrtRnidtPwirmDcS0ZuJCU41xxAAWk4Z8qsADfbV0b+i6kQmlvj79dJdGOvtX69Uycs901qOjop4bTS****'),
    keyId?: string(name='KeyId', example='7906979c-8e06-46a2-be2d-68e3ccbc****'),
    plaintext?: string(name='Plaintext', example='QmFzZTY0IGVuY29kZWQgcGxhaW50****'),
  }(name='DataKey'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model GenerateKMSDataKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateKMSDataKeyResponseBody(name='body'),
}

/**
 * @summary 生成KMS密钥DataKey
 *
 * @param request GenerateKMSDataKeyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GenerateKMSDataKeyResponse
 */
async function generateKMSDataKeyWithOptions(runtime: Util.RuntimeOptions): GenerateKMSDataKeyResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GenerateKMSDataKey',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 生成KMS密钥DataKey
 *
 * @return GenerateKMSDataKeyResponse
 */
async function generateKMSDataKey(): GenerateKMSDataKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateKMSDataKeyWithOptions(runtime);
}

model GetAvatarRequest {
  avatarId?: string(name='AvatarId', description='This parameter is required.', example='Avatar-XXXX'),
}

model GetAvatarResponseBody = {
  data?: {
    avatar?: {
      avatarDescription?: string(name='AvatarDescription'),
      avatarId?: string(name='AvatarId', example='Avatar-XXXX'),
      avatarName?: string(name='AvatarName'),
      avatarType?: string(name='AvatarType', example='2DAvatar'),
      height?: int32(name='Height'),
      portrait?: string(name='Portrait', example='****571c704445f9a0ee011406c2****'),
      thumbnail?: string(name='Thumbnail', example='https://your-bucket.oss-cn-hangzhou.aliyuncs.com/thumbnail.png'),
      transparent?: boolean(name='Transparent', example='true'),
      width?: int32(name='Width'),
    }(name='Avatar'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model GetAvatarResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAvatarResponseBody(name='body'),
}

/**
 * @summary 查询单个数字人
 *
 * @param request GetAvatarRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAvatarResponse
 */
async function getAvatarWithOptions(request: GetAvatarRequest, runtime: Util.RuntimeOptions): GetAvatarResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.avatarId)) {
    query['AvatarId'] = request.avatarId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAvatar',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询单个数字人
 *
 * @param request GetAvatarRequest
 * @return GetAvatarResponse
 */
async function getAvatar(request: GetAvatarRequest): GetAvatarResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAvatarWithOptions(request, runtime);
}

model GetAvatarTrainingJobRequest {
  jobId?: string(name='JobId', description='This parameter is required.', example='****20b48fb04483915d4f2cd8ac****'),
}

model GetAvatarTrainingJobResponseBody = {
  data?: {
    avatarTrainingJob?: {
      avatarDescription?: string(name='AvatarDescription'),
      avatarId?: string(name='AvatarId', example='Avatar-XXXX'),
      avatarName?: string(name='AvatarName'),
      avatarType?: string(name='AvatarType', example='2DAvatar'),
      firstTrainingTime?: string(name='FirstTrainingTime', example='2020-12-23T13:33:40Z'),
      jobId?: string(name='JobId', example='****55d86f7f4587943ce7734d6b****'),
      lastTrainingTime?: string(name='LastTrainingTime', example='2020-12-23T13:33:40Z'),
      message?: string(name='Message'),
      portrait?: string(name='Portrait', example='****571c704445f9a0ee011406c2****'),
      status?: string(name='Status', example='Success'),
      thumbnail?: string(name='Thumbnail', example='https://your-bucket.oss-cn-hangzhou.aliyuncs.com/thumbnail.png'),
      transparent?: boolean(name='Transparent', example='true'),
      video?: string(name='Video', example='****571c704445f9a0ee011406c2****'),
    }(name='AvatarTrainingJob'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model GetAvatarTrainingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAvatarTrainingJobResponseBody(name='body'),
}

/**
 * @summary 查询单个数字人训练任务
 *
 * @param request GetAvatarTrainingJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAvatarTrainingJobResponse
 */
async function getAvatarTrainingJobWithOptions(request: GetAvatarTrainingJobRequest, runtime: Util.RuntimeOptions): GetAvatarTrainingJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAvatarTrainingJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询单个数字人训练任务
 *
 * @param request GetAvatarTrainingJobRequest
 * @return GetAvatarTrainingJobResponse
 */
async function getAvatarTrainingJob(request: GetAvatarTrainingJobRequest): GetAvatarTrainingJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAvatarTrainingJobWithOptions(request, runtime);
}

model GetBatchMediaProducingJobRequest {
  jobId?: string(name='JobId', example='****b4549d46c88681030f6e****'),
}

model GetBatchMediaProducingJobResponseBody = {
  editingBatchJob?: {
    completeTime?: string(name='CompleteTime'),
    createTime?: string(name='CreateTime'),
    editingConfig?: string(name='EditingConfig', example='{
  "MediaConfig": {
      "Volume": 0
  },
  "SpeechConfig": {
      "Volume": 1
  },
 "BackgroundMusicConfig": {
      "Volume": 0.3
  }
}'),
    extend?: string(name='Extend', example='{
	"ErrorCode": "InvalidMaterial.NotFound",
	"ErrorMessage": "The specified clips id not found:[\\\\"****30d0b5e871eebb2ff7f6c75a****\\\\"]"
}'),
    inputConfig?: string(name='InputConfig'),
    jobId?: string(name='JobId', example='****b6b2750d4308892ac3330238****'),
    jobType?: string(name='JobType'),
    modifiedTime?: string(name='ModifiedTime'),
    outputConfig?: string(name='OutputConfig', example='{
  "MediaURL": "http://xxx.oss-cn-shanghai.aliyuncs.com/xxx_{index}.mp4",
  "Count": 20,
  "MaxDuration": 15,
  "Width": 1080,
  "Height": 1920,
  "Video": {"Crf": 27}
}'),
    status?: string(name='Status', example='Finished'),
    subJobList?: [ 
      {
        errorCode?: string(name='ErrorCode', example='InvalidMaterial.NotFound'),
        errorMessage?: string(name='ErrorMessage', example='The specified clips id not found:["****30d0b5e871eebb2ff7f6c75a****"]'),
        jobId?: string(name='JobId', example='****8e81933d44e3ae69e2f81485****'),
        mediaId?: string(name='MediaId', example='****1470b11171ee9d19e7e6c66a****'),
        mediaURL?: string(name='MediaURL', example='http:/xxx.oss-cn-shanghai.aliyuncs.com/xxx_0.mp4'),
        projectId?: string(name='ProjectId'),
        status?: string(name='Status', example='Success'),
      }
    ](name='SubJobList'),
    userData?: string(name='UserData', example='{"NotifyAddress":"http://xx.xx.xxx"}'),
  }(name='EditingBatchJob'),
  requestId?: string(name='RequestId', example='****36-3C1E-4417-BDB2-1E034F****'),
}

model GetBatchMediaProducingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBatchMediaProducingJobResponseBody(name='body'),
}

/**
 * @summary 一键成片-批量获取剪辑任务
 *
 * @param request GetBatchMediaProducingJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetBatchMediaProducingJobResponse
 */
async function getBatchMediaProducingJobWithOptions(request: GetBatchMediaProducingJobRequest, runtime: Util.RuntimeOptions): GetBatchMediaProducingJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetBatchMediaProducingJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 一键成片-批量获取剪辑任务
 *
 * @param request GetBatchMediaProducingJobRequest
 * @return GetBatchMediaProducingJobResponse
 */
async function getBatchMediaProducingJob(request: GetBatchMediaProducingJobRequest): GetBatchMediaProducingJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBatchMediaProducingJobWithOptions(request, runtime);
}

model GetCategoriesRequest {
  cateId?: long(name='CateId', example='33'),
  pageNo?: long(name='PageNo', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  sortBy?: string(name='SortBy', example='CreationTime:Desc'),
  type?: string(name='Type', example='default'),
}

model GetCategoriesResponseBody = {
  category?: {
    cateId?: long(name='CateId', example='46'),
    cateName?: string(name='CateName'),
    level?: long(name='Level', example='0'),
    parentId?: long(name='ParentId', example='-1'),
    type?: string(name='Type', example='default'),
  }(name='Category'),
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
  subCategories?: {
    category?: [ 
    {
      cateId?: long(name='CateId', example='129'),
      cateName?: string(name='CateName'),
      level?: long(name='Level', example='1'),
      parentId?: long(name='ParentId', example='46'),
      subTotal?: long(name='SubTotal', example='100'),
      type?: string(name='Type', example='default'),
    }
  ](name='Category')
  }(name='SubCategories'),
  subTotal?: long(name='SubTotal', example='100'),
}

model GetCategoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCategoriesResponseBody(name='body'),
}

/**
 * @summary 查询媒资分类
 *
 * @param request GetCategoriesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCategoriesResponse
 */
async function getCategoriesWithOptions(request: GetCategoriesRequest, runtime: Util.RuntimeOptions): GetCategoriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cateId)) {
    query['CateId'] = request.cateId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCategories',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询媒资分类
 *
 * @param request GetCategoriesRequest
 * @return GetCategoriesResponse
 */
async function getCategories(request: GetCategoriesRequest): GetCategoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCategoriesWithOptions(request, runtime);
}

model GetContentAnalyzeConfigResponseBody = {
  contentAnalyzeConfig?: {
    auto?: boolean(name='Auto', example='true'),
    saveType?: string(name='SaveType', example='TEXT,FACE'),
    templateId?: string(name='TemplateId', example='S00000101-100070'),
  }(name='ContentAnalyzeConfig'),
  requestId?: string(name='RequestId', example='31FEC819-2344-5771-9366-9172DB0D26C9'),
}

model GetContentAnalyzeConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetContentAnalyzeConfigResponseBody(name='body'),
}

/**
 * @summary 获取内容分析搜索配置
 *
 * @param request GetContentAnalyzeConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetContentAnalyzeConfigResponse
 */
async function getContentAnalyzeConfigWithOptions(runtime: Util.RuntimeOptions): GetContentAnalyzeConfigResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetContentAnalyzeConfig',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取内容分析搜索配置
 *
 * @return GetContentAnalyzeConfigResponse
 */
async function getContentAnalyzeConfig(): GetContentAnalyzeConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getContentAnalyzeConfigWithOptions(runtime);
}

model GetCustomTemplateRequest {
  subtype?: int32(name='Subtype', example='1'),
  templateId?: string(name='TemplateId', example='****96e8864746a0b6f3****'),
  type?: int32(name='Type', example='1'),
}

model GetCustomTemplateResponseBody = {
  customTemplate?: {
    createTime?: string(name='CreateTime', example='2022-01-01T10:00:00Z'),
    isDefault?: boolean(name='IsDefault', example='true'),
    modifiedTime?: string(name='ModifiedTime', example='2022-01-01T11:00:00Z'),
    status?: string(name='Status', example='Normal'),
    subtype?: int32(name='Subtype', example='1'),
    subtypeName?: string(name='SubtypeName', example='Normal'),
    templateConfig?: string(name='TemplateConfig', example='{"Type":"Normal","FrameType":"normal","Time":0,"Count":10}'),
    templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
    templateName?: string(name='TemplateName', example='测试转码模板'),
    type?: int32(name='Type', example='2'),
    typeName?: string(name='TypeName', example='SnapshotTemplate'),
  }(name='CustomTemplate'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetCustomTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCustomTemplateResponseBody(name='body'),
}

/**
 * @summary 获取单个媒体处理自定义模板
 *
 * @param request GetCustomTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCustomTemplateResponse
 */
async function getCustomTemplateWithOptions(request: GetCustomTemplateRequest, runtime: Util.RuntimeOptions): GetCustomTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.subtype)) {
    query['Subtype'] = request.subtype;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCustomTemplate',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取单个媒体处理自定义模板
 *
 * @param request GetCustomTemplateRequest
 * @return GetCustomTemplateResponse
 */
async function getCustomTemplate(request: GetCustomTemplateRequest): GetCustomTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCustomTemplateWithOptions(request, runtime);
}

model GetCustomizedVoiceRequest {
  voiceId?: string(name='VoiceId', example='xiaozhuan'),
}

model GetCustomizedVoiceResponseBody = {
  data?: {
    customizedVoice?: {
      demoAudioMediaId?: string(name='DemoAudioMediaId', example='****42d3c312402982be65975f5b****'),
      gender?: string(name='Gender', example='female'),
      scenario?: string(name='Scenario', example='interaction'),
      voiceDesc?: string(name='VoiceDesc'),
      voiceId?: string(name='VoiceId', example='xiaozhuan'),
      voiceName?: string(name='VoiceName'),
    }(name='CustomizedVoice'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
  success?: boolean(name='Success', example='true'),
}

model GetCustomizedVoiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCustomizedVoiceResponseBody(name='body'),
}

/**
 * @summary 获取用户的专属人声
 *
 * @param request GetCustomizedVoiceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCustomizedVoiceResponse
 */
async function getCustomizedVoiceWithOptions(request: GetCustomizedVoiceRequest, runtime: Util.RuntimeOptions): GetCustomizedVoiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.voiceId)) {
    query['VoiceId'] = request.voiceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCustomizedVoice',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取用户的专属人声
 *
 * @param request GetCustomizedVoiceRequest
 * @return GetCustomizedVoiceResponse
 */
async function getCustomizedVoice(request: GetCustomizedVoiceRequest): GetCustomizedVoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCustomizedVoiceWithOptions(request, runtime);
}

model GetCustomizedVoiceJobRequest {
  jobId?: string(name='JobId', description='This parameter is required.', example='****20b48fb04483915d4f2cd8ac****'),
}

model GetCustomizedVoiceJobResponseBody = {
  data?: {
    customizedVoiceJob?: {
      createTime?: string(name='CreateTime'),
      gender?: string(name='Gender'),
      jobId?: string(name='JobId', example='****571c704445f9a0ee011406c2****'),
      message?: string(name='Message'),
      scenario?: string(name='Scenario'),
      status?: string(name='Status', example='Fail'),
      type?: string(name='Type'),
      voiceDesc?: string(name='VoiceDesc'),
      voiceId?: string(name='VoiceId', example='xiaozhuan'),
      voiceName?: string(name='VoiceName'),
    }(name='CustomizedVoiceJob'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
  success?: boolean(name='Success', example='true'),
}

model GetCustomizedVoiceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCustomizedVoiceJobResponseBody(name='body'),
}

/**
 * @summary 查询单个人声克隆训练任务
 *
 * @param request GetCustomizedVoiceJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCustomizedVoiceJobResponse
 */
async function getCustomizedVoiceJobWithOptions(request: GetCustomizedVoiceJobRequest, runtime: Util.RuntimeOptions): GetCustomizedVoiceJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCustomizedVoiceJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询单个人声克隆训练任务
 *
 * @param request GetCustomizedVoiceJobRequest
 * @return GetCustomizedVoiceJobResponse
 */
async function getCustomizedVoiceJob(request: GetCustomizedVoiceJobRequest): GetCustomizedVoiceJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCustomizedVoiceJobWithOptions(request, runtime);
}

model GetDefaultStorageLocationResponseBody = {
  bucket?: string(name='Bucket', example='oss-test-bucket'),
  path?: string(name='Path', example='ice/dir'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  status?: string(name='Status', example='normal'),
  storageType?: string(name='StorageType', example='user_oss_bucket'),
}

model GetDefaultStorageLocationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDefaultStorageLocationResponseBody(name='body'),
}

/**
 * @summary 获取用户默认存储地址
 *
 * @param request GetDefaultStorageLocationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDefaultStorageLocationResponse
 */
async function getDefaultStorageLocationWithOptions(runtime: Util.RuntimeOptions): GetDefaultStorageLocationResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetDefaultStorageLocation',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取用户默认存储地址
 *
 * @return GetDefaultStorageLocationResponse
 */
async function getDefaultStorageLocation(): GetDefaultStorageLocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDefaultStorageLocationWithOptions(runtime);
}

model GetDemonstrationForCustomizedVoiceJobRequest {
  scenario?: string(name='Scenario', description='This parameter is required.', example='story'),
}

model GetDemonstrationForCustomizedVoiceJobResponseBody = {
  data?: {
    demonstrationList?: [ 
      {
        audioId?: int32(name='AudioId', example='2'),
        demoAudio?: string(name='DemoAudio', example='http://bucket.oss-cn-shanghai.aliyuncs.com/1.wav'),
        text?: string(name='Text'),
      }
    ](name='DemonstrationList'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model GetDemonstrationForCustomizedVoiceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDemonstrationForCustomizedVoiceJobResponseBody(name='body'),
}

/**
 * @summary 通过本接口来获取需要给用户朗读的文本及示例音频
 *
 * @param request GetDemonstrationForCustomizedVoiceJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDemonstrationForCustomizedVoiceJobResponse
 */
async function getDemonstrationForCustomizedVoiceJobWithOptions(request: GetDemonstrationForCustomizedVoiceJobRequest, runtime: Util.RuntimeOptions): GetDemonstrationForCustomizedVoiceJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.scenario)) {
    query['Scenario'] = request.scenario;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDemonstrationForCustomizedVoiceJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 通过本接口来获取需要给用户朗读的文本及示例音频
 *
 * @param request GetDemonstrationForCustomizedVoiceJobRequest
 * @return GetDemonstrationForCustomizedVoiceJobResponse
 */
async function getDemonstrationForCustomizedVoiceJob(request: GetDemonstrationForCustomizedVoiceJobRequest): GetDemonstrationForCustomizedVoiceJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDemonstrationForCustomizedVoiceJobWithOptions(request, runtime);
}

model GetDynamicImageJobRequest {
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
}

model GetDynamicImageJobResponseBody = {
  dynamicImageJob?: {
    code?: string(name='Code', example='ResourceNotFound'),
    createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
    finishTime?: string(name='FinishTime', example='2022-07-12T16:30:54Z'),
    input?: {
      media?: string(name='Media', example='oss://test-bucket/sample-input.mp4'),
      ossFile?: {
        bucket?: string(name='Bucket', description='OSS Bucket', example='test-bucket'),
        location?: string(name='Location', description='OSS Location', example='oss-cn-shanghai'),
        object?: string(name='Object', description='OSS Object', example='sample-input.mp4'),
      }(name='OssFile'),
      type?: string(name='Type', example='OSS'),
    }(name='Input'),
    jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
    message?: string(name='Message', example='The specified resource for "CustomTemplate" could not be found.'),
    modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:30:54Z'),
    name?: string(name='Name', example='SampleJob'),
    output?: {
      media?: string(name='Media', example='****d80e4e4044975745c14b****'),
      ossFile?: {
        bucket?: string(name='Bucket', description='OSS Bucket', example='sample-bucket'),
        location?: string(name='Location', description='OSS Location', example='oss-cn-shanghai'),
        object?: string(name='Object', description='OSS Object', example='path/to/object'),
      }(name='OssFile'),
      type?: string(name='Type', example='Media'),
    }(name='Output'),
    outputUrl?: string(name='OutputUrl', example='http://test-bucket.oss-cn-shanghai.aliyuncs.com/output.gif'),
    pipelineId?: string(name='PipelineId', example='****d80e4e4044975745c14b****'),
    status?: string(name='Status', example='Success'),
    submitTime?: string(name='SubmitTime', example='2022-07-12T16:17:54Z'),
    templateConfig?: string(name='TemplateConfig', example='{"Format":"gif","Fps":5,"Height":1080,"Width":1920}'),
    templateId?: string(name='TemplateId', example='****d80e4e4044975745c14b****'),
    triggerSource?: string(name='TriggerSource', example='API'),
    userData?: string(name='UserData', example='{"sampleParam": "sampleValue"}'),
  }(name='DynamicImageJob'),
  requestId?: string(name='RequestId', example='******36-3C1E-4417-BDB2-1E034F******'),
}

model GetDynamicImageJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDynamicImageJobResponseBody(name='body'),
}

/**
 * @summary 查询动图任务详情接口
 *
 * @param request GetDynamicImageJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDynamicImageJobResponse
 */
async function getDynamicImageJobWithOptions(request: GetDynamicImageJobRequest, runtime: Util.RuntimeOptions): GetDynamicImageJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDynamicImageJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询动图任务详情接口
 *
 * @param request GetDynamicImageJobRequest
 * @return GetDynamicImageJobResponse
 */
async function getDynamicImageJob(request: GetDynamicImageJobRequest): GetDynamicImageJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDynamicImageJobWithOptions(request, runtime);
}

model GetEditingProjectRequest {
  projectId?: string(name='ProjectId', description='This parameter is required.', example='****fb2101bf24b2754cb318787dc****'),
  requestSource?: string(name='RequestSource'),
}

model GetEditingProjectResponseBody = {
  project?: {
    businessConfig?: string(name='BusinessConfig', example='{ "OutputMediaConfig" : { "StorageLocation": "test-bucket.oss-cn-shanghai.aliyuncs.com", "Path": "test-path" }, "OutputMediaTarget": "oss-object", "ReservationTime": "2021-06-21T08:05:00Z" }'),
    businessStatus?: string(name='BusinessStatus', example='Reserving'),
    clipsParam?: string(name='ClipsParam'),
    coverURL?: string(name='CoverURL', example='oss://example-bucket/example.jpg'),
    createSource?: string(name='CreateSource', example='OpenAPI'),
    createTime?: string(name='CreateTime', example='2020-12-20T12:00:00Z'),
    description?: string(name='Description'),
    duration?: long(name='Duration', example='24.120000'),
    modifiedSource?: string(name='ModifiedSource', example='OpenAPI'),
    modifiedTime?: string(name='ModifiedTime', example='2020-12-20T13:00:00Z'),
    projectId?: string(name='ProjectId', example='****fb2101bf24b2754cb318787dc****'),
    projectType?: string(name='ProjectType', example='EditingProject'),
    status?: string(name='Status', example='Editing'),
    templateId?: string(name='TemplateId', example='****96e8864746a0b6f3****'),
    templateType?: string(name='TemplateType', example='Timeline'),
    timeline?: string(name='Timeline', example='{"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****9b4d7cf14dc7b83b0e801cbe****"},{"MediaId":"****9b4d7cf14dc7b83b0e801cbe****"},{"MediaId":"****1656bca4474999c961a6d2a2****"}]}]}'),
    timelineConvertErrorMessage?: string(name='TimelineConvertErrorMessage'),
    timelineConvertStatus?: string(name='TimelineConvertStatus'),
    title?: string(name='Title'),
  }(name='Project'),
  requestId?: string(name='RequestId', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
}

model GetEditingProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEditingProjectResponseBody(name='body'),
}

/**
 * @summary 获取单个云剪辑工程
 *
 * @param request GetEditingProjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEditingProjectResponse
 */
async function getEditingProjectWithOptions(request: GetEditingProjectRequest, runtime: Util.RuntimeOptions): GetEditingProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.requestSource)) {
    query['RequestSource'] = request.requestSource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEditingProject',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取单个云剪辑工程
 *
 * @param request GetEditingProjectRequest
 * @return GetEditingProjectResponse
 */
async function getEditingProject(request: GetEditingProjectRequest): GetEditingProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEditingProjectWithOptions(request, runtime);
}

model GetEditingProjectMaterialsRequest {
  projectId?: string(name='ProjectId', description='This parameter is required.', example='*****fb2101cb318*****'),
}

model GetEditingProjectMaterialsResponseBody = {
  liveMaterials?: [ 
    {
      appName?: string(name='AppName', example='testrecord'),
      domainName?: string(name='DomainName', example='test.alivecdn.com'),
      liveUrl?: string(name='LiveUrl', example='rtmp://test.alivecdn.com/testrecord/teststream'),
      streamName?: string(name='StreamName', example='testrecord'),
    }
  ](name='LiveMaterials'),
  mediaInfos?: [ 
    {
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', example='1132.68'),
            duration?: string(name='Duration', example='216.206667'),
            fileName?: string(name='FileName', example='example.mp4'),
            fileSize?: string(name='FileSize', example='30611502'),
            fileStatus?: string(name='FileStatus', example='Normal'),
            fileType?: string(name='FileType', example='source_file'),
            fileUrl?: string(name='FileUrl', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
            formatName?: string(name='FormatName', example='mov,mp4,m4a,3gp,3g2,mj2'),
            height?: string(name='Height', example='540'),
            region?: string(name='Region', example='cn-shanghai'),
            width?: string(name='Width', example='960'),
          }(name='FileBasicInfo'),
        }
      ](name='FileInfoList', description='FileInfos'),
      mediaBasicInfo?: {
        businessType?: string(name='BusinessType', example='general'),
        category?: string(name='Category', example='video'),
        coverURL?: string(name='CoverURL', example='http://sample-bucket.oss-cn-shanghai.aliyuncs.com/sample-corver.jpg?Expires=1628670610&OSSAccessKeyId=AK&Signature=signature'),
        createTime?: string(name='CreateTime', example='2020-12-26T04:11:08Z'),
        deletedTime?: string(name='DeletedTime', example='2020-12-26T04:11:08Z'),
        description?: string(name='Description', example='sample_description'),
        inputURL?: string(name='InputURL', example='http://bucket.oss-cn-shanghai.aliyuncs.com/file.mp4'),
        mediaId?: string(name='MediaId', description='MediaId', example='*****64623a94eca8516569c8f*****'),
        mediaTags?: string(name='MediaTags'),
        mediaType?: string(name='MediaType', example='video'),
        modifiedTime?: string(name='ModifiedTime', example='2020-12-26T04:11:08Z'),
        snapshots?: string(name='Snapshots', example='null'),
        source?: string(name='Source', example='oss'),
        spriteImages?: string(name='SpriteImages', example='null'),
        status?: string(name='Status', example='Normal'),
        title?: string(name='Title', example='file.mp4'),
        transcodeStatus?: string(name='TranscodeStatus', example='Init'),
        userData?: string(name='UserData', example='userData'),
      }(name='MediaBasicInfo', description='BasicInfo'),
      mediaId?: string(name='MediaId', example='*****64623a94eca8516569c8fe*****'),
    }
  ](name='MediaInfos'),
  projectId?: string(name='ProjectId', example='*****67ae06542b9b93e0d1c387*****'),
  projectMaterials?: [ string ](name='ProjectMaterials', example='*****9b145c5cafc2e057304fcd*****'),
  requestId?: string(name='RequestId', example='******89-C21D-4B78-AE24-3788B8******'),
}

model GetEditingProjectMaterialsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEditingProjectMaterialsResponseBody(name='body'),
}

/**
 * @summary 获取剪辑工程关联素材
 *
 * @param request GetEditingProjectMaterialsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEditingProjectMaterialsResponse
 */
async function getEditingProjectMaterialsWithOptions(request: GetEditingProjectMaterialsRequest, runtime: Util.RuntimeOptions): GetEditingProjectMaterialsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEditingProjectMaterials',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取剪辑工程关联素材
 *
 * @param request GetEditingProjectMaterialsRequest
 * @return GetEditingProjectMaterialsResponse
 */
async function getEditingProjectMaterials(request: GetEditingProjectMaterialsRequest): GetEditingProjectMaterialsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEditingProjectMaterialsWithOptions(request, runtime);
}

model GetEventCallbackResponseBody = {
  authKey?: string(name='AuthKey', example='TestKey001'),
  authSwitch?: string(name='AuthSwitch', example='on'),
  callbackQueueName?: string(name='CallbackQueueName', example='ice-callback-queue'),
  callbackType?: string(name='CallbackType', example='HTTP'),
  callbackURL?: string(name='CallbackURL', example='http://xxx.yyy/callback'),
  eventTypeList?: string(name='EventTypeList', example='ProduceMediaComplete,TranscodeComplete'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetEventCallbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEventCallbackResponseBody(name='body'),
}

/**
 * @summary 获取事件回调地址
 *
 * @param request GetEventCallbackRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEventCallbackResponse
 */
async function getEventCallbackWithOptions(runtime: Util.RuntimeOptions): GetEventCallbackResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetEventCallback',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取事件回调地址
 *
 * @return GetEventCallbackResponse
 */
async function getEventCallback(): GetEventCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEventCallbackWithOptions(runtime);
}

model GetLiveEditingIndexFileRequest {
  appName?: string(name='AppName', example='testrecord'),
  domainName?: string(name='DomainName', example='test.alivecdn.com'),
  projectId?: string(name='ProjectId', example='*****cb6307a4edea614d8b3f3c*****'),
  streamName?: string(name='StreamName', example='teststream'),
}

model GetLiveEditingIndexFileResponseBody = {
  indexFile?: string(name='IndexFile'),
  requestId?: string(name='RequestId', example='4E84BE44-58A7-****-****-FBEBEA16EF94'),
}

model GetLiveEditingIndexFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLiveEditingIndexFileResponseBody(name='body'),
}

/**
 * @summary 获取直播剪辑m3u8索引文件
 *
 * @param request GetLiveEditingIndexFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetLiveEditingIndexFileResponse
 */
async function getLiveEditingIndexFileWithOptions(request: GetLiveEditingIndexFileRequest, runtime: Util.RuntimeOptions): GetLiveEditingIndexFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.streamName)) {
    query['StreamName'] = request.streamName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLiveEditingIndexFile',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取直播剪辑m3u8索引文件
 *
 * @param request GetLiveEditingIndexFileRequest
 * @return GetLiveEditingIndexFileResponse
 */
async function getLiveEditingIndexFile(request: GetLiveEditingIndexFileRequest): GetLiveEditingIndexFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLiveEditingIndexFileWithOptions(request, runtime);
}

model GetLiveEditingJobRequest {
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
}

model GetLiveEditingJobResponseBody = {
  liveEditingJob?: {
    clips?: string(name='Clips', example='[{\\\\"StartTime\\\\": \\\\" 2021-06-21T08:01:00Z\\\\",  \\\\"EndTime\\\\": \\\\" 2021-06-21T08:03:00Z\\\\" }]'),
    code?: string(name='Code', example='InvalidParameter'),
    completeTime?: string(name='CompleteTime', example='2020-12-23T13:33:52Z'),
    creationTime?: string(name='CreationTime', example='2020-12-23T13:33:40Z'),
    jobId?: string(name='JobId', example='****cdb3e74639973036bc84****'),
    liveStreamConfig?: {
      appName?: string(name='AppName', example='app'),
      domainName?: string(name='DomainName', example='domain.com'),
      streamName?: string(name='StreamName', example='streamName'),
    }(name='LiveStreamConfig'),
    mediaId?: string(name='MediaId', example='****0cc6ba49eab379332c5b****'),
    mediaProduceConfig?: {
      mode?: string(name='Mode', example='Accurate'),
    }(name='MediaProduceConfig'),
    mediaURL?: string(name='MediaURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example2.mp4'),
    message?: string(name='Message', example='The specific parameter LiveStreamConfig is not valid.'),
    modifiedTime?: string(name='ModifiedTime', example='2020-12-23T13:33:49Z'),
    outputMediaConfig?: {
      bitrate?: long(name='Bitrate', example='1000'),
      fileName?: string(name='FileName', example='test.mp4'),
      height?: int32(name='Height', example='480'),
      mediaURL?: string(name='MediaURL', example='https://testice-testbucket.oss-cn-shanghai.aliyuncs.com/test.mp4'),
      storageLocation?: string(name='StorageLocation', example='outin-xxxxxx.oss-cn-shanghai.aliyuncs.com'),
      vodTemplateGroupId?: string(name='VodTemplateGroupId', example='VOD_NO_TRANSCODE'),
      width?: int32(name='Width', example='640'),
    }(name='OutputMediaConfig'),
    projectId?: string(name='ProjectId', example='****fddd7748b58bf1d47e95****'),
    status?: string(name='Status', example='Success'),
    userData?: string(name='UserData', example='{"key": "value\\\\"}'),
  }(name='LiveEditingJob'),
  requestId?: string(name='RequestId', example='****36-3C1E-4417-BDB2-1E034F****'),
}

model GetLiveEditingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLiveEditingJobResponseBody(name='body'),
}

/**
 * @summary 获取直播剪辑任务
 *
 * @param request GetLiveEditingJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetLiveEditingJobResponse
 */
async function getLiveEditingJobWithOptions(request: GetLiveEditingJobRequest, runtime: Util.RuntimeOptions): GetLiveEditingJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLiveEditingJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取直播剪辑任务
 *
 * @param request GetLiveEditingJobRequest
 * @return GetLiveEditingJobResponse
 */
async function getLiveEditingJob(request: GetLiveEditingJobRequest): GetLiveEditingJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLiveEditingJobWithOptions(request, runtime);
}

model GetLiveRecordJobRequest {
  jobId?: string(name='JobId', description='This parameter is required.', example='ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66'),
}

model GetLiveRecordJobResponseBody = {
  recordJob?: {
    createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段

Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-07-20T02:48:58Z'),
    jobId?: string(name='JobId', description='代表资源名称的资源属性字段', example='ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66'),
    name?: string(name='Name', description='代表资源名称的资源属性字段'),
    notifyUrl?: string(name='NotifyUrl', description='回调地址', example='https://example.com/imsnotify'),
    recordOutput?: {
      bucket?: string(name='Bucket', example='imsbucket1'),
      endpoint?: string(name='Endpoint', example='oss-cn-shanghai.aliyuncs.com'),
      type?: string(name='Type', example='oss'),
    }(name='RecordOutput'),
    status?: string(name='Status', description='代表资源名称的资源属性字段', example='paused'),
    streamInput?: {
      type?: string(name='Type', example='rtmp'),
      url?: string(name='Url', example='rtmp://example.com/app/stream'),
    }(name='StreamInput'),
    templateId?: string(name='TemplateId', description='录制模板ID', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66'),
    templateName?: string(name='TemplateName', description='录制模板ID', example='test template'),
  }(name='RecordJob', description='录制任务'),
  requestId?: string(name='RequestId', example='B57A046C-CE33-5FBB-B57A-D2B89ACF6907'),
}

model GetLiveRecordJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLiveRecordJobResponseBody(name='body'),
}

/**
 * @summary 查询录制任务明细
 *
 * @param request GetLiveRecordJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetLiveRecordJobResponse
 */
async function getLiveRecordJobWithOptions(request: GetLiveRecordJobRequest, runtime: Util.RuntimeOptions): GetLiveRecordJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLiveRecordJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询录制任务明细
 *
 * @param request GetLiveRecordJobRequest
 * @return GetLiveRecordJobResponse
 */
async function getLiveRecordJob(request: GetLiveRecordJobRequest): GetLiveRecordJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLiveRecordJobWithOptions(request, runtime);
}

model GetLiveRecordTemplateRequest {
  jobId?: string(name='JobId', example='ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66'),
  templateId?: string(name='TemplateId', description='This parameter is required.', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66'),
}

model GetLiveRecordTemplateResponseBody = {
  recordTemplate?: {
    createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段

Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-07-20T03:26:36Z'),
    lastModified?: string(name='LastModified', description='代表创建时间的资源属性字段

Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-07-20T03:26:36Z'),
    name?: string(name='Name', description='代表资源名称的资源属性字段', example='test template'),
    recordFormatList?: [ 
      {
        cycleDuration?: int32(name='CycleDuration', example='7200'),
        format?: string(name='Format', description='格式', example='m3u8'),
        ossObjectPrefix?: string(name='OssObjectPrefix', description='Oss对象名，不包含后缀', example='record/{JobId}/{Sequence}{EscapedStartTime}{EscapedEndTime}'),
        sliceDuration?: int32(name='SliceDuration', example='30'),
        sliceOssObjectPrefix?: string(name='SliceOssObjectPrefix', description='切片Oss对象名，不包含后缀', example='record/{JobId}/{UnixTimestamp}_{Sequence}'),
      }
    ](name='RecordFormatList', description='录制格式'),
    templateId?: string(name='TemplateId', description='代表资源一级ID的资源属性字段', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66'),
    type?: string(name='Type', description='代表资源名称的资源属性字段', example='custom'),
  }(name='RecordTemplate', description='录制模板'),
  requestId?: string(name='RequestId', example='C892855F-95DF-50D6-A28C-279ABDB76810'),
}

model GetLiveRecordTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLiveRecordTemplateResponseBody(name='body'),
}

/**
 * @summary 查询直播录制模板详情
 *
 * @param request GetLiveRecordTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetLiveRecordTemplateResponse
 */
async function getLiveRecordTemplateWithOptions(request: GetLiveRecordTemplateRequest, runtime: Util.RuntimeOptions): GetLiveRecordTemplateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLiveRecordTemplate',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询直播录制模板详情
 *
 * @param request GetLiveRecordTemplateRequest
 * @return GetLiveRecordTemplateResponse
 */
async function getLiveRecordTemplate(request: GetLiveRecordTemplateRequest): GetLiveRecordTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLiveRecordTemplateWithOptions(request, runtime);
}

model GetLiveSnapshotJobRequest {
  jobId?: string(name='JobId', description='This parameter is required.', example='****a046-263c-3560-978a-fb287782****'),
}

model GetLiveSnapshotJobResponseBody = {
  callbackUrl?: string(name='CallbackUrl', example='http://www.aliyun.com/snapshot/callback'),
  createTime?: string(name='CreateTime', example='2022-02-02T22:22:22Z'),
  jobId?: string(name='JobId', example='****a046-263c-3560-978a-fb287782****'),
  jobName?: string(name='JobName'),
  lastModified?: string(name='LastModified', example='2022-02-02T22:22:22Z'),
  overwriteFormat?: string(name='OverwriteFormat', example='snapshot/{JobId}.jpg'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  sequenceFormat?: string(name='SequenceFormat', example='snapshot/{JobId}/{UnixTimestamp}.jpg'),
  snapshotOutput?: {
    bucket?: string(name='Bucket', example='testbucket'),
    endpoint?: string(name='Endpoint', example='oss-cn-shanghai.aliyuncs.com'),
    storageType?: string(name='StorageType', example='oss'),
  }(name='SnapshotOutput'),
  status?: string(name='Status', example='started'),
  streamInput?: {
    type?: string(name='Type', example='rtmp'),
    url?: string(name='Url', example='rtmp://www.aliyun.com/stream'),
  }(name='StreamInput'),
  templateId?: string(name='TemplateId', example='****a046-263c-3560-978a-fb287666****'),
  templateName?: string(name='TemplateName'),
  timeInterval?: int32(name='TimeInterval', example='5'),
}

model GetLiveSnapshotJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLiveSnapshotJobResponseBody(name='body'),
}

/**
 * @summary 查询直播截图任务
 *
 * @param request GetLiveSnapshotJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetLiveSnapshotJobResponse
 */
async function getLiveSnapshotJobWithOptions(request: GetLiveSnapshotJobRequest, runtime: Util.RuntimeOptions): GetLiveSnapshotJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLiveSnapshotJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询直播截图任务
 *
 * @param request GetLiveSnapshotJobRequest
 * @return GetLiveSnapshotJobResponse
 */
async function getLiveSnapshotJob(request: GetLiveSnapshotJobRequest): GetLiveSnapshotJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLiveSnapshotJobWithOptions(request, runtime);
}

model GetLiveSnapshotTemplateRequest {
  templateId?: string(name='TemplateId', description='This parameter is required.', example='****a046-263c-3560-978a-fb287782****'),
}

model GetLiveSnapshotTemplateResponseBody = {
  createTime?: string(name='CreateTime', example='2022-02-02T22:22:22Z'),
  lastModified?: string(name='LastModified', example='2022-02-02T22:22:22Z'),
  overwriteFormat?: string(name='OverwriteFormat', example='snapshot/{JobId}.jpg'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  sequenceFormat?: string(name='SequenceFormat', example='snapshot/{JobId}/{UnixTimestamp}.jpg'),
  templateId?: string(name='TemplateId', example='****a046-263c-3560-978a-fb287782****'),
  templateName?: string(name='TemplateName'),
  timeInterval?: int32(name='TimeInterval', example='5'),
  type?: string(name='Type', example='custom'),
}

model GetLiveSnapshotTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLiveSnapshotTemplateResponseBody(name='body'),
}

/**
 * @summary 查询直播截图模板
 *
 * @param request GetLiveSnapshotTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetLiveSnapshotTemplateResponse
 */
async function getLiveSnapshotTemplateWithOptions(request: GetLiveSnapshotTemplateRequest, runtime: Util.RuntimeOptions): GetLiveSnapshotTemplateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLiveSnapshotTemplate',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询直播截图模板
 *
 * @param request GetLiveSnapshotTemplateRequest
 * @return GetLiveSnapshotTemplateResponse
 */
async function getLiveSnapshotTemplate(request: GetLiveSnapshotTemplateRequest): GetLiveSnapshotTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLiveSnapshotTemplateWithOptions(request, runtime);
}

model GetLiveTranscodeJobRequest {
  jobId?: string(name='JobId', description='This parameter is required.', example='****20b48fb04483915d4f2cd8ac****'),
}

model GetLiveTranscodeJobResponseBody = {
  job?: {
    createTime?: string(name='CreateTime', example='2022-07-20T02:48:58Z'),
    jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
    name?: string(name='Name', example='task1'),
    outputStream?: {
      streamInfos?: [ 
        {
          outputUrl?: string(name='OutputUrl', example='rtmp://mydomain/app/mytranscode1'),
          type?: string(name='Type', example='rtmp'),
        }
      ](name='StreamInfos'),
    }(name='OutputStream'),
    startMode?: int32(name='StartMode', example='0'),
    status?: int32(name='Status', example='1'),
    streamInput?: {
      inputUrl?: string(name='InputUrl', example='rtmp://mydomain/app/stream1'),
      type?: string(name='Type', example='rtmp'),
    }(name='StreamInput'),
    templateId?: string(name='TemplateId', example='b6491d5b3e514b7d895d14b5453ea119'),
    templateName?: string(name='TemplateName', example='basic'),
    templateType?: string(name='TemplateType', example='normal'),
  }(name='Job'),
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
}

model GetLiveTranscodeJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLiveTranscodeJobResponseBody(name='body'),
}

/**
 * @summary 查询转码任务详情
 *
 * @param request GetLiveTranscodeJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetLiveTranscodeJobResponse
 */
async function getLiveTranscodeJobWithOptions(request: GetLiveTranscodeJobRequest, runtime: Util.RuntimeOptions): GetLiveTranscodeJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLiveTranscodeJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询转码任务详情
 *
 * @param request GetLiveTranscodeJobRequest
 * @return GetLiveTranscodeJobResponse
 */
async function getLiveTranscodeJob(request: GetLiveTranscodeJobRequest): GetLiveTranscodeJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLiveTranscodeJobWithOptions(request, runtime);
}

model GetLiveTranscodeTemplateRequest {
  templateId?: string(name='TemplateId', description='This parameter is required.', example='****a046-263c-3560-978a-fb287666****'),
}

model GetLiveTranscodeTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
  templateContent?: {
    category?: string(name='Category', example='customized'),
    createTime?: string(name='CreateTime', example='2022-07-25T06:15:14Z'),
    name?: string(name='Name', example='my-template'),
    templateConfig?: {
      audioParams?: {
        bitrate?: string(name='Bitrate', example='1000'),
        channels?: string(name='Channels', example='2'),
        codec?: string(name='Codec', example='AAC'),
        profile?: string(name='Profile', example='1'),
        samplerate?: string(name='Samplerate', example='44100'),
      }(name='AudioParams'),
      videoParams?: {
        bitrate?: string(name='Bitrate', example='2500'),
        codec?: string(name='Codec', example='H.264'),
        fps?: string(name='Fps', example='30'),
        gop?: string(name='Gop', example='1000'),
        height?: string(name='Height', example='720'),
        profile?: string(name='Profile', example='2'),
        width?: string(name='Width', example='1280'),
      }(name='VideoParams'),
    }(name='TemplateConfig'),
    templateId?: string(name='TemplateId', example='bcfa57950bc649b2abfb476ecd36ea4f'),
    type?: string(name='Type', example='normal'),
  }(name='TemplateContent'),
}

model GetLiveTranscodeTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLiveTranscodeTemplateResponseBody(name='body'),
}

/**
 * @summary 查询转码模版详情
 *
 * @param request GetLiveTranscodeTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetLiveTranscodeTemplateResponse
 */
async function getLiveTranscodeTemplateWithOptions(request: GetLiveTranscodeTemplateRequest, runtime: Util.RuntimeOptions): GetLiveTranscodeTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLiveTranscodeTemplate',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询转码模版详情
 *
 * @param request GetLiveTranscodeTemplateRequest
 * @return GetLiveTranscodeTemplateResponse
 */
async function getLiveTranscodeTemplate(request: GetLiveTranscodeTemplateRequest): GetLiveTranscodeTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLiveTranscodeTemplateWithOptions(request, runtime);
}

model GetMediaInfoRequest {
  inputURL?: string(name='InputURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4'),
  mediaId?: string(name='MediaId', example='****20b48fb04483915d4f2cd8ac****'),
  outputType?: string(name='OutputType', example='cdn'),
  returnDetailedInfo?: string(name='ReturnDetailedInfo'),
}

model GetMediaInfoResponseBody = {
  mediaInfo?: {
    aiRoughData?: {
      aiCategory?: string(name='AiCategory'),
      aiJobId?: string(name='AiJobId', example='****483915d4f2cd8ac20b48fb04****'),
      result?: string(name='Result', example='https://sample-bucket.cn-shanghai.aliyuncs.com/result.json'),
      saveType?: string(name='SaveType', example='TEXT'),
      standardSmartTagJob?: {
        aiJobId?: string(name='AiJobId'),
        resultUrl?: string(name='ResultUrl'),
        results?: [ 
          {
            data?: string(name='Data'),
            type?: string(name='Type'),
          }
        ](name='Results'),
        status?: string(name='Status'),
      }(name='StandardSmartTagJob'),
      status?: string(name='Status', example='Analyzing'),
    }(name='AiRoughData'),
    fileInfoList?: [ 
      {
        audioStreamInfoList?: [ 
          {
            bitrate?: string(name='Bitrate', example='127.794'),
            channelLayout?: string(name='ChannelLayout', example='stereo'),
            channels?: string(name='Channels', example='2'),
            codecLongName?: string(name='CodecLongName', example='AAC (Advanced Audio Coding)'),
            codecName?: string(name='CodecName', example='aac'),
            codecTag?: string(name='CodecTag', example='0x6134706d'),
            codecTagString?: string(name='CodecTagString', example='mp4a'),
            codecTimeBase?: string(name='CodecTimeBase', example='1/24000'),
            duration?: string(name='Duration', example='16.200998'),
            fps?: string(name='Fps', example='8'),
            index?: string(name='Index', example='1'),
            lang?: string(name='Lang', example='und'),
            numFrames?: string(name='NumFrames', example='10'),
            profile?: string(name='Profile', example='High'),
            sampleFmt?: string(name='SampleFmt', example='fltp'),
            sampleRate?: string(name='SampleRate', example='44100'),
            startTime?: string(name='StartTime', example='0.000000'),
            timebase?: string(name='Timebase', example='1/44100'),
          }
        ](name='AudioStreamInfoList'),
        fileBasicInfo?: {
          bitrate?: string(name='Bitrate', example='1132.68'),
          createTime?: string(name='CreateTime', example='2020-12-26T04:11:08Z'),
          duration?: string(name='Duration', example='216.206667'),
          fileName?: string(name='FileName', example='example.mp4'),
          fileSize?: string(name='FileSize', example='30611502'),
          fileStatus?: string(name='FileStatus', example='Normal'),
          fileType?: string(name='FileType', example='source_file'),
          fileUrl?: string(name='FileUrl', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
          formatName?: string(name='FormatName', example='mov,mp4,m4a,3gp,3g2,mj2'),
          height?: string(name='Height', example='540'),
          modifiedTime?: string(name='ModifiedTime', example='2020-12-26T04:11:10Z'),
          region?: string(name='Region', example='cn-shanghai'),
          width?: string(name='Width', example='960'),
        }(name='FileBasicInfo'),
        subtitleStreamInfoList?: [ 
          {
            codecLongName?: string(name='CodecLongName', example='SubRip Text'),
            codecName?: string(name='CodecName', example='srt'),
            codecTag?: string(name='CodecTag', example='unicode'),
            codecTagString?: string(name='CodecTagString', example='unicode'),
            codecTimeBase?: string(name='CodecTimeBase', example='29.97'),
            duration?: string(name='Duration', example='1'),
            index?: string(name='Index', example='1'),
            lang?: string(name='Lang', example='und'),
            startTime?: string(name='StartTime', example='0'),
            timebase?: string(name='Timebase', example='30'),
          }
        ](name='SubtitleStreamInfoList'),
        videoStreamInfoList?: [ 
          {
            avgFPS?: string(name='AvgFPS', example='24.0'),
            bitrate?: string(name='Bitrate', example='1001.594'),
            codecLongName?: string(name='CodecLongName', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
            codecName?: string(name='CodecName', example='h264'),
            codecTag?: string(name='CodecTag', example='0x0000'),
            codecTagString?: string(name='CodecTagString', example='[0][0][0][0]'),
            codecTimeBase?: string(name='CodecTimeBase', example='1/48'),
            dar?: string(name='Dar', example='0:1'),
            duration?: string(name='Duration', example='216.206706'),
            fps?: string(name='Fps', example='24.0'),
            hasBFrames?: string(name='HasBFrames', example='2'),
            height?: string(name='Height', example='540'),
            index?: string(name='Index', example='0'),
            lang?: string(name='Lang', example='und'),
            level?: string(name='Level', example='30'),
            nbFrames?: string(name='Nb_frames', example='5184'),
            numFrames?: string(name='NumFrames', example='5184'),
            pixFmt?: string(name='PixFmt', example='yuv420p'),
            profile?: string(name='Profile', example='High'),
            rotate?: string(name='Rotate', example='0'),
            sar?: string(name='Sar', example='0:1'),
            startTime?: string(name='StartTime', example='0.081706'),
            timebase?: string(name='Timebase', example='1/12288'),
            width?: string(name='Width', example='960'),
          }
        ](name='VideoStreamInfoList'),
      }
    ](name='FileInfoList'),
    mediaBasicInfo?: {
      biz?: string(name='Biz', example='ICE'),
      businessType?: string(name='BusinessType', example='general'),
      cateId?: long(name='CateId', example='3048'),
      cateName?: string(name='CateName', example='cateName'),
      category?: string(name='Category'),
      coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
      createTime?: string(name='CreateTime', example='2020-12-26T04:11:08Z'),
      deletedTime?: string(name='DeletedTime', example='2020-12-26T04:11:15Z'),
      description?: string(name='Description'),
      inputURL?: string(name='InputURL', example='https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4'),
      mediaId?: string(name='MediaId', description='MediaId', example='****20b48fb04483915d4f2cd8ac****'),
      mediaTags?: string(name='MediaTags'),
      mediaType?: string(name='MediaType', example='video'),
      modifiedTime?: string(name='ModifiedTime', example='2020-12-26T04:11:10Z'),
      referenceId?: string(name='ReferenceId', example='123-1234'),
      snapshots?: string(name='Snapshots'),
      source?: string(name='Source', example='oss'),
      spriteImages?: string(name='SpriteImages', example='[{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]'),
      status?: string(name='Status', example='Normal'),
      title?: string(name='Title'),
      uploadSource?: string(name='UploadSource', example='general'),
      userData?: string(name='UserData', example='userDataTest'),
    }(name='MediaBasicInfo', description='BasicInfo'),
    mediaId?: string(name='MediaId', example='****20b48fb04483915d4f2cd8ac****'),
  }(name='MediaInfo'),
  requestId?: string(name='RequestId', example='2FDE2411-DB8D-4A9A-875B-275798F14A5E'),
}

model GetMediaInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMediaInfoResponseBody(name='body'),
}

/**
 * @summary 获取媒资内容信息
 *
 * @param request GetMediaInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMediaInfoResponse
 */
async function getMediaInfoWithOptions(request: GetMediaInfoRequest, runtime: Util.RuntimeOptions): GetMediaInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.inputURL)) {
    query['InputURL'] = request.inputURL;
  }
  if (!Util.isUnset(request.mediaId)) {
    query['MediaId'] = request.mediaId;
  }
  if (!Util.isUnset(request.outputType)) {
    query['OutputType'] = request.outputType;
  }
  if (!Util.isUnset(request.returnDetailedInfo)) {
    query['ReturnDetailedInfo'] = request.returnDetailedInfo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMediaInfo',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取媒资内容信息
 *
 * @param request GetMediaInfoRequest
 * @return GetMediaInfoResponse
 */
async function getMediaInfo(request: GetMediaInfoRequest): GetMediaInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMediaInfoWithOptions(request, runtime);
}

model GetMediaInfoJobRequest {
  jobId?: string(name='JobId', example='ab4802364a2e49208c99efab82dfa8e8'),
}

model GetMediaInfoJobResponseBody = {
  mediaInfoJob?: {
    async?: boolean(name='Async', example='true'),
    finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
    input?: {
      media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
      type?: string(name='Type', example='OSS'),
    }(name='Input'),
    jobId?: string(name='JobId', example='ab4802364a2e49208c99efab82dfa8e8'),
    mediaInfoProperty?: {
      audioStreamInfoList?: [ 
        {
          bitrate?: string(name='Bitrate', example='0.f'),
          channelLayout?: string(name='ChannelLayout', example='stereo'),
          channels?: string(name='Channels', example='2'),
          codecLongName?: string(name='CodecLongName', example='AAC (Advanced Audio Coding)'),
          codecName?: string(name='CodecName', example='aac'),
          codecTag?: string(name='CodecTag', example='0x000f'),
          codecTagString?: string(name='CodecTagString', example='[15][0][0][0]'),
          codecTimeBase?: string(name='CodecTimeBase', example='1/44100'),
          duration?: string(name='Duration', example='403.039989'),
          index?: string(name='Index', example='1'),
          lang?: string(name='Lang', example='us'),
          sampleFmt?: string(name='SampleFmt', example='fltp'),
          sampleRate?: string(name='SampleRate', example='44100'),
          startTime?: string(name='StartTime', example='1.473556'),
          timebase?: string(name='Timebase', example='1/90000'),
        }
      ](name='AudioStreamInfoList'),
      fileBasicInfo?: {
        bitrate?: string(name='Bitrate', example='888.563'),
        duration?: string(name='Duration', example='403.039999'),
        fileName?: string(name='FileName', example='file.m3u8'),
        fileSize?: string(name='FileSize', example='31737'),
        fileStatus?: string(name='FileStatus', example='Normal'),
        fileType?: string(name='FileType', example='source_file'),
        fileUrl?: string(name='FileUrl', example='http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8'),
        formatName?: string(name='FormatName', example='hls,applehttp'),
        height?: string(name='Height', example='478'),
        mediaId?: string(name='MediaId', example='e520090207114cc7a392d44f0b211574'),
        region?: string(name='Region', example='cn-shanghai'),
        width?: string(name='Width', example='848'),
      }(name='FileBasicInfo'),
      videoStreamInfoList?: [ 
        {
          avgFps?: string(name='Avg_fps', example='25.0'),
          bitRate?: string(name='Bit_rate', example='888.563'),
          codecLongName?: string(name='Codec_long_name', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
          codecName?: string(name='Codec_name', example='h264'),
          codecTag?: string(name='Codec_tag', example='0x001b'),
          codecTagString?: string(name='Codec_tag_string', example='[27][0][0][0]'),
          codecTimeBase?: string(name='Codec_time_base', example='1/50'),
          dar?: string(name='Dar', example='16:9'),
          duration?: string(name='Duration', example='403.039989'),
          fps?: string(name='Fps', example='25.0'),
          hasBFrames?: string(name='Has_b_frames', example='2'),
          height?: string(name='Height', example='478'),
          index?: string(name='Index', example='0'),
          lang?: string(name='Lang', example='zh'),
          level?: string(name='Level', example='31'),
          numFrames?: string(name='NumFrames', example='10040'),
          pixFmt?: string(name='PixFmt', example='yuv420p'),
          profile?: string(name='Profile', example='High'),
          rotate?: string(name='Rotate', example='0'),
          sar?: string(name='Sar', example='478:477'),
          startTime?: string(name='Start_time', example='1.473556'),
          timeBase?: string(name='Time_base', example='1/90000'),
          width?: string(name='Width', example='848'),
        }
      ](name='VideoStreamInfoList'),
    }(name='MediaInfoProperty'),
    name?: string(name='Name', example='job-name'),
    requestId?: string(name='RequestId', example='4879B9DE-E4B6-19DC-91F5-9D5F4DCE4168'),
    scheduleConfig?: {
      pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
      priority?: int32(name='Priority', example='5'),
    }(name='ScheduleConfig'),
    status?: string(name='Status', example='Init'),
    submitResultJson?: map[string]any(name='SubmitResultJson'),
    submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
    triggerSource?: string(name='TriggerSource', example='API'),
    userData?: string(name='UserData', example='user-data'),
  }(name='MediaInfoJob', description='MediaInfoJobDTO'),
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model GetMediaInfoJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMediaInfoJobResponseBody(name='body'),
}

/**
 * @param request GetMediaInfoJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMediaInfoJobResponse
 */
async function getMediaInfoJobWithOptions(request: GetMediaInfoJobRequest, runtime: Util.RuntimeOptions): GetMediaInfoJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMediaInfoJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request GetMediaInfoJobRequest
 * @return GetMediaInfoJobResponse
 */
async function getMediaInfoJob(request: GetMediaInfoJobRequest): GetMediaInfoJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMediaInfoJobWithOptions(request, runtime);
}

model GetMediaMarksRequest {
  mediaId?: string(name='MediaId', example='****20b48fb04483915d4f2cd8ac****'),
  mediaMarkIds?: string(name='MediaMarkIds', example='mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60'),
}

model GetMediaMarksResponseBody = {
  mediaId?: string(name='MediaId', example='****20b48fb04483915d4f2cd8ac****'),
  mediaMarks?: string(name='MediaMarks'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetMediaMarksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMediaMarksResponseBody(name='body'),
}

/**
 * @summary 获取媒资标注信息
 *
 * @param request GetMediaMarksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMediaMarksResponse
 */
async function getMediaMarksWithOptions(request: GetMediaMarksRequest, runtime: Util.RuntimeOptions): GetMediaMarksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mediaId)) {
    query['MediaId'] = request.mediaId;
  }
  if (!Util.isUnset(request.mediaMarkIds)) {
    query['MediaMarkIds'] = request.mediaMarkIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMediaMarks',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取媒资标注信息
 *
 * @param request GetMediaMarksRequest
 * @return GetMediaMarksResponse
 */
async function getMediaMarks(request: GetMediaMarksRequest): GetMediaMarksResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMediaMarksWithOptions(request, runtime);
}

model GetMediaProducingJobRequest {
  jobId?: string(name='JobId', example='****cdb3e74639973036bc84****'),
}

model GetMediaProducingJobResponseBody = {
  mediaProducingJob?: {
    clipsParam?: string(name='ClipsParam', example='{"VideoArray":["****05512043f49f697f7425****","****05512043f49f697f7425****","****05512043f49f697f7425****"]}'),
    code?: string(name='Code', example='ExceededMaximumValue'),
    completeTime?: string(name='CompleteTime', example='2020-12-23T13:33:52Z'),
    createTime?: string(name='CreateTime', example='2020-12-23T13:33:40Z'),
    duration?: float(name='Duration', example='30.500000'),
    jobId?: string(name='JobId', example='****cdb3e74639973036bc84****'),
    mediaId?: string(name='MediaId', example='****0cc6ba49eab379332c5b****'),
    mediaURL?: string(name='MediaURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example2.mp4'),
    message?: string(name='Message', example='The specified "Width_Height" has exceeded maximum value.'),
    modifiedTime?: string(name='ModifiedTime', example='2020-12-23T13:33:49Z'),
    projectId?: string(name='ProjectId', example='****fddd7748b58bf1d47e95****'),
    status?: string(name='Status', example='Failed'),
    subJobMaterials?: string(name='SubJobMaterials'),
    templateId?: string(name='TemplateId', example='****6e76134d739cc3e85d3e****'),
    timeline?: string(name='Timeline', example='{"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****4d7cf14dc7b83b0e801c****"},{"MediaId":"****4d7cf14dc7b83b0e801c****"}]}]}'),
    userData?: string(name='UserData'),
    vodMediaId?: string(name='VodMediaId', example='****332c5b0cc6ba49eab379****'),
  }(name='MediaProducingJob'),
  requestId?: string(name='RequestId', example='****83B7-7F87-4792-BFE9-63CD2137****'),
}

model GetMediaProducingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMediaProducingJobResponseBody(name='body'),
}

/**
 * @summary GetMediaProducingJob
 *
 * @param request GetMediaProducingJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMediaProducingJobResponse
 */
async function getMediaProducingJobWithOptions(request: GetMediaProducingJobRequest, runtime: Util.RuntimeOptions): GetMediaProducingJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMediaProducingJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary GetMediaProducingJob
 *
 * @param request GetMediaProducingJobRequest
 * @return GetMediaProducingJobResponse
 */
async function getMediaProducingJob(request: GetMediaProducingJobRequest): GetMediaProducingJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMediaProducingJobWithOptions(request, runtime);
}

model GetPackageJobRequest {
  jobId?: string(name='JobId', description='This parameter is required.', example='ab4802364a2e49208c99efab82dfa8e8'),
}

model GetPackageJobResponseBody = {
  packageJob?: {
    code?: string(name='Code', example='InvalidParameter'),
    createTime?: string(name='CreateTime', example='2022-09-08T11:34:05Z'),
    finishTime?: string(name='FinishTime', example='2022-09-08T11:44:05Z'),
    inputs?: [ 
      {
        input?: {
          media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
          type?: string(name='Type', example='OSS'),
        }(name='Input'),
      }
    ](name='Inputs'),
    jobId?: string(name='JobId', example='ab4802364a2e49208c99efab82dfa8e8'),
    message?: string(name='Message', example='Resource content bad.'),
    modifiedTime?: string(name='ModifiedTime', example='2022-09-08T11:44:05Z'),
    name?: string(name='Name', example='job-name'),
    output?: {
      media?: string(name='Media', example='oss://bucket/path/to/video.m3u8'),
      type?: string(name='Type', example='OSS'),
    }(name='Output'),
    outputUrl?: string(name='OutputUrl', example='http://bucket.oss-cn-shanghai.aliyuncs.com/output.m3u8'),
    pipelineId?: string(name='PipelineId', example='36f3fee40aa047c0b067d0fb85edc12b'),
    priority?: int32(name='Priority', example='6'),
    status?: string(name='Status', example='Init'),
    submitTime?: string(name='SubmitTime', example='2022-09-08T11:34:05Z'),
    triggerSource?: string(name='TriggerSource'),
    userData?: string(name='UserData', example='{"param": "value"}'),
  }(name='PackageJob'),
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model GetPackageJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPackageJobResponseBody(name='body'),
}

/**
 * @summary 获取单个打包任务信息
 *
 * @param request GetPackageJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPackageJobResponse
 */
async function getPackageJobWithOptions(request: GetPackageJobRequest, runtime: Util.RuntimeOptions): GetPackageJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPackageJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取单个打包任务信息
 *
 * @param request GetPackageJobRequest
 * @return GetPackageJobResponse
 */
async function getPackageJob(request: GetPackageJobRequest): GetPackageJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPackageJobWithOptions(request, runtime);
}

model GetPipelineRequest {
  pipelineId?: string(name='PipelineId', description='This parameter is required.', example='****96e8864746a0b6f3****'),
}

model GetPipelineResponseBody = {
  pipeline?: {
    createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
    modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:17:54Z'),
    name?: string(name='Name', example='test-pipeline'),
    pipelineId?: string(name='PipelineId', example='****20b48fb04483915d4f2cd8ac****'),
    priority?: int32(name='Priority', example='6'),
    speed?: string(name='Speed', example='Standard'),
    status?: string(name='Status', example='Active'),
  }(name='Pipeline'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetPipelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPipelineResponseBody(name='body'),
}

/**
 * @summary 获取单个管道配置
 *
 * @param request GetPipelineRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPipelineResponse
 */
async function getPipelineWithOptions(request: GetPipelineRequest, runtime: Util.RuntimeOptions): GetPipelineResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pipelineId)) {
    query['PipelineId'] = request.pipelineId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPipeline',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取单个管道配置
 *
 * @param request GetPipelineRequest
 * @return GetPipelineResponse
 */
async function getPipeline(request: GetPipelineRequest): GetPipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPipelineWithOptions(request, runtime);
}

model GetPlayInfoRequest {
  inputURL?: string(name='InputURL'),
  mediaId?: string(name='MediaId', example='86434e152b7d4f20be480574439fe***'),
}

model GetPlayInfoResponseBody = {
  mediaBase?: {
    cateId?: long(name='CateId'),
    coverURL?: string(name='CoverURL', example='https://***.oss-cn-shanghai.aliyuncs.com/cover/281c64d6-b5fb-4c57-97cd-84da56a8b151_large_cover_url.jpg'),
    creationTime?: string(name='CreationTime', example='2021-09-22T10:07:31+08:00'),
    description?: string(name='Description'),
    mediaId?: string(name='MediaId', example='2eea77a61c7b4ddd95bec34a6f65b***'),
    mediaTags?: string(name='MediaTags'),
    mediaType?: string(name='MediaType', example='video'),
    status?: string(name='Status', example='Normal'),
    title?: string(name='Title', example='testTitle'),
  }(name='MediaBase'),
  playInfoList?: [ 
    {
      bitDepth?: int32(name='BitDepth', example='8'),
      bitrate?: string(name='Bitrate', example='20'),
      creationTime?: string(name='CreationTime', example='2022-05-10T02:28:49Z'),
      definition?: string(name='Definition', example='HD'),
      duration?: string(name='Duration', example='9.0464'),
      encrypt?: long(name='Encrypt', example='0'),
      encryptType?: string(name='EncryptType', example='AliyunVoDEncryption'),
      fileURL?: string(name='FileURL', example='http://outin-***.oss-cn-shanghai.aliyuncs.com/sv/43a68ee9-181809b6aba/43a68ee9-181809b6aba.mpeg'),
      format?: string(name='Format', example='mp4'),
      fps?: string(name='Fps', example='25'),
      HDRType?: string(name='HDRType', example='HDR'),
      height?: long(name='Height', example='1080'),
      jobId?: string(name='JobId', example='36c9d38e70bf43ed9f7f8f48d6356***'),
      modificationTime?: string(name='ModificationTime', example='2022-05-13T11:39:41.714+08:00'),
      narrowBandType?: string(name='NarrowBandType', example='0'),
      playURL?: string(name='PlayURL', example='https://***.aliyuncdn.com/sv/756bee1-17f980f0945/756bee1-17f980f0945.mp4'),
      size?: long(name='Size', example='418112'),
      status?: string(name='Status', example='Normal'),
      streamTags?: string(name='StreamTags', example='"{\\\\"ims.audioServiceType\\\\": \\\\"AudioEnhancement\\\\"}"'),
      streamType?: string(name='StreamType', example='video'),
      transTemplateType?: string(name='TransTemplateType', example='Normal'),
      watermarkId?: string(name='WatermarkId', example='5bed88672b1e2520ead228935ed51***'),
      width?: long(name='Width', example='1024'),
    }
  ](name='PlayInfoList'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetPlayInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPlayInfoResponseBody(name='body'),
}

/**
 * @summary 获取播放信息
 *
 * @param request GetPlayInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPlayInfoResponse
 */
async function getPlayInfoWithOptions(request: GetPlayInfoRequest, runtime: Util.RuntimeOptions): GetPlayInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.inputURL)) {
    query['InputURL'] = request.inputURL;
  }
  if (!Util.isUnset(request.mediaId)) {
    query['MediaId'] = request.mediaId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPlayInfo',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取播放信息
 *
 * @param request GetPlayInfoRequest
 * @return GetPlayInfoResponse
 */
async function getPlayInfo(request: GetPlayInfoRequest): GetPlayInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPlayInfoWithOptions(request, runtime);
}

model GetPublicMediaInfoRequest {
  mediaId?: string(name='MediaId', example='icepublic-****14e501538aeef0a3140176f6****'),
}

model GetPublicMediaInfoResponseBody = {
  mediaInfo?: {
    dynamicMetaData?: {
      data?: string(name='Data', example='{"AuditionUrl": "http://example-bucket.cdn.domain.com/example.mp4", "AuditionCount": 3}'),
      type?: string(name='Type', example='system'),
    }(name='DynamicMetaData'),
    fileInfoList?: [ 
      {
        audioStreamInfoList?: [ 
          {
            bitrate?: string(name='Bitrate', example='192.0'),
            channelLayout?: string(name='ChannelLayout', example='stereo'),
            channels?: string(name='Channels', example='2'),
            codecLongName?: string(name='CodecLongName', example='AAC (Advanced Audio Coding)'),
            codecName?: string(name='CodecName', example='aac'),
            codecTag?: string(name='CodecTag', example='0x6134706d'),
            codecTagString?: string(name='CodecTagString', example='mp4a'),
            codecTimeBase?: string(name='CodecTimeBase', example='1/44100'),
            duration?: string(name='Duration', example='16.2'),
            fps?: string(name='Fps', example='10'),
            index?: string(name='Index', example='1'),
            lang?: string(name='Lang', example='und'),
            numFrames?: string(name='NumFrames', example='162'),
            profile?: string(name='Profile', example='High'),
            sampleFmt?: string(name='SampleFmt', example='fltp'),
            sampleRate?: string(name='SampleRate', example='44100'),
            startTime?: string(name='StartTime', example='0.000000'),
            timebase?: string(name='Timebase', example='1/44100'),
          }
        ](name='AudioStreamInfoList'),
        fileBasicInfo?: {
          bitrate?: string(name='Bitrate', example='192.0'),
          duration?: string(name='Duration', example='16.2'),
          fileName?: string(name='FileName', example='example.mp4'),
          fileSize?: string(name='FileSize', example='27007'),
          fileStatus?: string(name='FileStatus', example='Normal'),
          fileType?: string(name='FileType', example='source_file'),
          fileUrl?: string(name='FileUrl', example='http://example-bucket.cdn.domain.com/example.mp4'),
          formatName?: string(name='FormatName', example='mp4'),
          height?: string(name='Height', example='0'),
          region?: string(name='Region', example='cn-shanghai'),
          width?: string(name='Width', example='0'),
        }(name='FileBasicInfo'),
        subtitleStreamInfoList?: [ 
          {
            codecLongName?: string(name='CodecLongName', example='SubRip Text'),
            codecName?: string(name='CodecName', example='srt'),
            codecTag?: string(name='CodecTag', example='unicode'),
            codecTagString?: string(name='CodecTagString', example='unicode'),
            codecTimeBase?: string(name='CodecTimeBase', example='29.97'),
            duration?: string(name='Duration', example='1'),
            index?: string(name='Index', example='1'),
            lang?: string(name='Lang', example='und'),
            startTime?: string(name='StartTime', example='0'),
            timebase?: string(name='Timebase', example='30'),
          }
        ](name='SubtitleStreamInfoList'),
        videoStreamInfoList?: [ 
          {
            avgFPS?: string(name='AvgFPS', example='24.0'),
            bitrate?: string(name='Bitrate', example='1001.594'),
            codecLongName?: string(name='CodecLongName', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
            codecName?: string(name='CodecName', example='h264'),
            codecTag?: string(name='CodecTag', example='0x0000'),
            codecTagString?: string(name='CodecTagString', example='[0][0][0][0]'),
            codecTimeBase?: string(name='CodecTimeBase', example='1/48'),
            dar?: string(name='Dar', example='0:1'),
            duration?: string(name='Duration', example='216.206706'),
            fps?: string(name='Fps', example='24.0'),
            hasBFrames?: string(name='HasBFrames', example='2'),
            height?: string(name='Height', example='540'),
            index?: string(name='Index', example='0'),
            lang?: string(name='Lang', example='und'),
            level?: string(name='Level', example='30'),
            nbFrames?: string(name='Nb_frames', example='5184'),
            numFrames?: string(name='NumFrames', example='5184'),
            pixFmt?: string(name='PixFmt', example='yuv420p'),
            profile?: string(name='Profile', example='High'),
            rotate?: string(name='Rotate', example='0'),
            sar?: string(name='Sar', example='0:1'),
            startTime?: string(name='StartTime', example='0.081706'),
            timebase?: string(name='Timebase', example='1/12288'),
            width?: string(name='Width', example='960'),
          }
        ](name='VideoStreamInfoList'),
      }
    ](name='FileInfoList', description='FileInfos'),
    mediaBasicInfo?: {
      businessType?: string(name='BusinessType', example='general'),
      category?: string(name='Category', example='category'),
      coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
      createTime?: string(name='CreateTime', example='2020-12-26T04:11:08Z'),
      deletedTime?: string(name='DeletedTime', example='2020-12-26T04:11:15Z'),
      description?: string(name='Description', example='description'),
      mediaId?: string(name='MediaId', description='MediaId', example='icepublic-****14e501538aeef0a3140176f6****'),
      mediaTags?: string(name='MediaTags'),
      mediaType?: string(name='MediaType', example='video'),
      modifiedTime?: string(name='ModifiedTime', example='2020-12-26T04:11:10Z'),
      source?: string(name='Source', example='oss'),
      spriteImages?: string(name='SpriteImages', example='[{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]'),
      status?: string(name='Status', example='Normal'),
      title?: string(name='Title', example='title'),
      userData?: string(name='UserData', example='{"key":"value"}'),
    }(name='MediaBasicInfo', description='BasicInfo'),
    mediaId?: string(name='MediaId', example='icepublic-****14e501538aeef0a3140176f6****'),
  }(name='MediaInfo'),
  requestId?: string(name='RequestId', description='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetPublicMediaInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPublicMediaInfoResponseBody(name='body'),
}

/**
 * @summary 获取公共媒资内容信息
 *
 * @param request GetPublicMediaInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPublicMediaInfoResponse
 */
async function getPublicMediaInfoWithOptions(request: GetPublicMediaInfoRequest, runtime: Util.RuntimeOptions): GetPublicMediaInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mediaId)) {
    query['MediaId'] = request.mediaId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPublicMediaInfo',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取公共媒资内容信息
 *
 * @param request GetPublicMediaInfoRequest
 * @return GetPublicMediaInfoResponse
 */
async function getPublicMediaInfo(request: GetPublicMediaInfoRequest): GetPublicMediaInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPublicMediaInfoWithOptions(request, runtime);
}

model GetSmartHandleJobRequest {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
}

model GetSmartHandleJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  jobResult?: {
    aiResult?: string(name='AiResult', description='智能分析结果', example='拆条或智能标签信息'),
    mediaId?: string(name='MediaId', description='媒资Id', example='****20b48fb04483915d4f2cd8ac****'),
    usage?: string(name='Usage'),
  }(name='JobResult'),
  output?: string(name='Output', example='{}'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  smartJobInfo?: {
    createTime?: string(name='CreateTime', example='2020-12-26T04:11:10Z'),
    description?: string(name='Description', example='测试描述'),
    inputConfig?: {
      inputFile?: string(name='InputFile', example='oss://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4 或 ******11-DB8D-4A9A-875B-275798******'),
    }(name='InputConfig'),
    jobType?: string(name='JobType', example='ASR'),
    modifiedTime?: string(name='ModifiedTime', example='2020-12-26T04:11:10Z'),
    outputConfig?: {
      bucket?: string(name='Bucket', description='OSS Bucket', example='test-bucket'),
      object?: string(name='Object', description='OSS Object', example='test-object'),
    }(name='OutputConfig'),
    title?: string(name='Title', example='测试标题'),
    userId?: string(name='UserId', description='userid。', example='1974526429******'),
  }(name='SmartJobInfo'),
  state?: string(name='State', example='Finished'),
  userData?: string(name='UserData', example='{"user":"data"}'),
}

model GetSmartHandleJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSmartHandleJobResponseBody(name='body'),
}

/**
 * @summary GetSmartHandleJob
 *
 * @param request GetSmartHandleJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSmartHandleJobResponse
 */
async function getSmartHandleJobWithOptions(request: GetSmartHandleJobRequest, runtime: Util.RuntimeOptions): GetSmartHandleJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSmartHandleJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary GetSmartHandleJob
 *
 * @param request GetSmartHandleJobRequest
 * @return GetSmartHandleJobResponse
 */
async function getSmartHandleJob(request: GetSmartHandleJobRequest): GetSmartHandleJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSmartHandleJobWithOptions(request, runtime);
}

model GetSnapshotJobRequest {
  jobId?: string(name='JobId', description='This parameter is required.', example='****d80e4e4044975745c14b****'),
}

model GetSnapshotJobResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  snapshotJob?: {
    async?: boolean(name='Async', example='true'),
    code?: string(name='Code', example='ResourceNotFound'),
    count?: int32(name='Count', example='8'),
    createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
    finishTime?: string(name='FinishTime', example='2022-07-12T16:30:54Z'),
    input?: {
      media?: string(name='Media', example='oss://test-bucket/object.mp4'),
      ossFile?: {
        bucket?: string(name='Bucket', description='OSS Bucket', example='test-bucket'),
        location?: string(name='Location', description='OSS Location', example='oss-cn-shanghai'),
        object?: string(name='Object', description='OSS Object', example='object.mp4'),
      }(name='OssFile'),
      type?: string(name='Type', example='OSS'),
    }(name='Input'),
    jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
    message?: string(name='Message', example='The specified resource for "Pipeline" could not be found.'),
    modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:30:54Z'),
    name?: string(name='Name'),
    output?: {
      media?: string(name='Media', example='http://test-bucket.oss-cn-shanghai.aliyuncs.com/output-{Count}.jpg'),
      ossFile?: {
        bucket?: string(name='Bucket', description='OSS Bucket', example='test-bucket'),
        location?: string(name='Location', description='OSS Location', example='oss-cn-shanghai'),
        object?: string(name='Object', description='OSS Object', example='output-{Count}.jpg'),
      }(name='OssFile'),
      type?: string(name='Type', example='OSS'),
    }(name='Output'),
    pipelineId?: string(name='PipelineId', example='****d80e4e4044975745c14b****'),
    status?: string(name='Status', example='Success'),
    submitTime?: string(name='SubmitTime', example='2022-07-12T16:17:54Z'),
    templateConfig?: string(name='TemplateConfig', example='{"Type":"Normal","FrameType":"normal","Time":0,"Count":10}'),
    templateId?: string(name='TemplateId', example='****d80e4e4044975745c14b****'),
    triggerSource?: string(name='TriggerSource', example='API'),
    type?: string(name='Type', example='Sprite'),
    userData?: string(name='UserData', example='{"test parameter": "test value"}'),
  }(name='SnapshotJob'),
}

model GetSnapshotJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSnapshotJobResponseBody(name='body'),
}

/**
 * @summary 查询单个截图任务
 *
 * @param request GetSnapshotJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSnapshotJobResponse
 */
async function getSnapshotJobWithOptions(request: GetSnapshotJobRequest, runtime: Util.RuntimeOptions): GetSnapshotJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSnapshotJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询单个截图任务
 *
 * @param request GetSnapshotJobRequest
 * @return GetSnapshotJobResponse
 */
async function getSnapshotJob(request: GetSnapshotJobRequest): GetSnapshotJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSnapshotJobWithOptions(request, runtime);
}

model GetSnapshotUrlsRequest {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  orderBy?: string(name='OrderBy', example='Asc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  timeout?: long(name='Timeout', example='3600'),
}

model GetSnapshotUrlsResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  snapshotUrls?: [ string ](name='SnapshotUrls'),
  total?: int32(name='Total', example='30'),
  webVTTUrl?: string(name='WebVTTUrl', example='http://test-bucket.oss-cn-shanghai.aliyuncs.com/ouoput.vtt'),
}

model GetSnapshotUrlsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSnapshotUrlsResponseBody(name='body'),
}

/**
 * @summary 获取截图文件URL
 *
 * @param request GetSnapshotUrlsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSnapshotUrlsResponse
 */
async function getSnapshotUrlsWithOptions(request: GetSnapshotUrlsRequest, runtime: Util.RuntimeOptions): GetSnapshotUrlsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSnapshotUrls',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取截图文件URL
 *
 * @param request GetSnapshotUrlsRequest
 * @return GetSnapshotUrlsResponse
 */
async function getSnapshotUrls(request: GetSnapshotUrlsRequest): GetSnapshotUrlsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSnapshotUrlsWithOptions(request, runtime);
}

model GetStorageListRequest {
  appId?: string(name='AppId', example='app-****'),
  status?: string(name='Status', example='Normal'),
  storageType?: string(name='StorageType', example='vod_oss_bucket'),
}

model GetStorageListResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='******73-8B78-5D86-A50C-49B96C******'),
  storageInfoList?: [ 
    {
      appId?: string(name='AppId', example='app-****'),
      creationTime?: string(name='CreationTime', example='2024-06-06T01:55:07Z'),
      defaultStorage?: boolean(name='DefaultStorage', example='true'),
      editingTempFileStorage?: boolean(name='EditingTempFileStorage', example='false'),
      modifiedTime?: string(name='ModifiedTime', example='2024-06-06T03:07:07Z'),
      path?: string(name='Path', example='your-path/'),
      status?: string(name='Status', example='Normal'),
      storageLocation?: string(name='StorageLocation', example='your-bucket'),
      storageType?: string(name='StorageType', example='vod_oss_bucket'),
    }
  ](name='StorageInfoList'),
}

model GetStorageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetStorageListResponseBody(name='body'),
}

/**
 * @summary 获取存储地址列表
 *
 * @param request GetStorageListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetStorageListResponse
 */
async function getStorageListWithOptions(request: GetStorageListRequest, runtime: Util.RuntimeOptions): GetStorageListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.storageType)) {
    query['StorageType'] = request.storageType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetStorageList',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取存储地址列表
 *
 * @param request GetStorageListRequest
 * @return GetStorageListResponse
 */
async function getStorageList(request: GetStorageListRequest): GetStorageListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStorageListWithOptions(request, runtime);
}

model GetSystemTemplateRequest {
  templateId?: string(name='TemplateId', description='This parameter is required.', example='S00000001-100060'),
}

model GetSystemTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  systemTemplate?: {
    status?: string(name='Status', example='Normal'),
    subtype?: int32(name='Subtype', example='1'),
    subtypeName?: string(name='SubtypeName', example='Normal'),
    templateConfig?: string(name='TemplateConfig', example='{"Container":{"Format":"m3u8"},"TransConfig":{"TransMode":"onepass"},"Video":{"Codec":"H.264","Maxrate":8000,"Preset":"medium","PixFmt":"yuv420p","Width":2048,"Bitrate":3500},"Audio":{"Codec":"aac","Bitrate":160,"Samplerate":44100,"Channels":2}}'),
    templateId?: string(name='TemplateId', example='S00000001-100060'),
    templateName?: string(name='TemplateName', example='M3U8-2K'),
    type?: int32(name='Type', example='1'),
    typeName?: string(name='TypeName', example='TranscodeTemplate'),
  }(name='SystemTemplate'),
}

model GetSystemTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSystemTemplateResponseBody(name='body'),
}

/**
 * @summary 获取单个媒体处理系统模板
 *
 * @param request GetSystemTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSystemTemplateResponse
 */
async function getSystemTemplateWithOptions(request: GetSystemTemplateRequest, runtime: Util.RuntimeOptions): GetSystemTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSystemTemplate',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取单个媒体处理系统模板
 *
 * @param request GetSystemTemplateRequest
 * @return GetSystemTemplateResponse
 */
async function getSystemTemplate(request: GetSystemTemplateRequest): GetSystemTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSystemTemplateWithOptions(request, runtime);
}

model GetTemplateRequest {
  relatedMediaidFlag?: string(name='RelatedMediaidFlag', example='0'),
  templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
}

model GetTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  template?: {
    clipsParam?: string(name='ClipsParam', example='{"Media1":"mediaId","Text1":"text"}'),
    config?: string(name='Config', example='参考Timeline模板配置详解'),
    coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg'),
    createSource?: string(name='CreateSource', example='OpenAPI'),
    creationTime?: string(name='CreationTime', example='2020-12-26T04:11:10Z'),
    modifiedSource?: string(name='ModifiedSource', example='OpenAPI'),
    modifiedTime?: string(name='ModifiedTime', example='2020-12-26T04:11:10Z'),
    name?: string(name='Name', example='视频添加水印模板'),
    previewMedia?: string(name='PreviewMedia', example='****20b48fb04483915d4f2cd8ac****'),
    previewMediaStatus?: string(name='PreviewMediaStatus', example='Normal'),
    relatedMediaids?: string(name='RelatedMediaids', example='{"video":["******c04f1d4a06996144cc1a******"],"audio":["******c04f1d4a06996144cc1a******"],"image":["******c04f1d4a06996144cc1a******"]}'),
    status?: string(name='Status', example='Available'),
    templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
    type?: string(name='Type', example='Timeline'),
  }(name='Template'),
}

model GetTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTemplateResponseBody(name='body'),
}

/**
 * @summary GetTemplate
 *
 * @param request GetTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTemplateResponse
 */
async function getTemplateWithOptions(request: GetTemplateRequest, runtime: Util.RuntimeOptions): GetTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.relatedMediaidFlag)) {
    query['RelatedMediaidFlag'] = request.relatedMediaidFlag;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTemplate',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary GetTemplate
 *
 * @param request GetTemplateRequest
 * @return GetTemplateResponse
 */
async function getTemplate(request: GetTemplateRequest): GetTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTemplateWithOptions(request, runtime);
}

model GetTemplateMaterialsRequest {
  fileList?: string(name='FileList', example='["music.mp3","config.json","assets/1.jpg"]'),
  templateId?: string(name='TemplateId', description='This parameter is required.', example='****20b48fb04483915d4f2cd8ac****'),
}

model GetTemplateMaterialsResponseBody = {
  materialUrls?: string(name='MaterialUrls', example='{"music.mp3":"https://bucket.oss-cn-shanghai.aliyuncs.com/music.mp3?sign=xxx","config.json":"https://bucket.oss-cn-shanghai.aliyuncs.com/config.json?sign=xxx","assets/1.jpg":"https://bucket.oss-cn-shanghai.aliyuncs.com/assets/1.jpg?sign=xxx"}'),
  requestId?: string(name='RequestId', description='Id of the request', example='******11-DB8D-4A9A-875B-275798******'),
}

model GetTemplateMaterialsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTemplateMaterialsResponseBody(name='body'),
}

/**
 * @summary 获取模板关联素材信息
 *
 * @param request GetTemplateMaterialsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTemplateMaterialsResponse
 */
async function getTemplateMaterialsWithOptions(request: GetTemplateMaterialsRequest, runtime: Util.RuntimeOptions): GetTemplateMaterialsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileList)) {
    query['FileList'] = request.fileList;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTemplateMaterials',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取模板关联素材信息
 *
 * @param request GetTemplateMaterialsRequest
 * @return GetTemplateMaterialsResponse
 */
async function getTemplateMaterials(request: GetTemplateMaterialsRequest): GetTemplateMaterialsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTemplateMaterialsWithOptions(request, runtime);
}

model GetTemplateParamsRequest {
  templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
}

model GetTemplateParamsResponseBody = {
  paramList?: [ 
    {
      content?: string(name='Content'),
      coverUrl?: string(name='CoverUrl'),
      key?: string(name='Key', example='video1'),
      mediaUrl?: string(name='MediaUrl'),
      type?: string(name='Type', example='Image'),
    }
  ](name='ParamList'),
  requestId?: string(name='RequestId', description='Id of the request', example='****2876-6263-4B75-8F2C-CD0F7FCF****'),
  templateId?: string(name='TemplateId', example='******419c8741c1b4325f035b******'),
}

model GetTemplateParamsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTemplateParamsResponseBody(name='body'),
}

/**
 * @summary 获取模板参数信息
 *
 * @param request GetTemplateParamsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTemplateParamsResponse
 */
async function getTemplateParamsWithOptions(request: GetTemplateParamsRequest, runtime: Util.RuntimeOptions): GetTemplateParamsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTemplateParams',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取模板参数信息
 *
 * @param request GetTemplateParamsRequest
 * @return GetTemplateParamsResponse
 */
async function getTemplateParams(request: GetTemplateParamsRequest): GetTemplateParamsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTemplateParamsWithOptions(request, runtime);
}

model GetTranscodeJobRequest {
  parentJobId?: string(name='ParentJobId', example='ab4802364a2e49208c99efab82dfa8e8'),
}

model GetTranscodeJobResponseBody = {
  requestId?: string(name='RequestId', example='9EDC30DC-0050-5459-B788-F761B2BE359B'),
  transcodeParentJob?: {
    createTime?: string(name='CreateTime', example='2022-01-12T08:49:41Z'),
    finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
    inputGroup?: [ 
      {
        media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
        type?: string(name='Type', example='OSS'),
      }
    ](name='InputGroup'),
    jobCount?: int32(name='JobCount', example='1'),
    name?: string(name='Name', example='transcode-job'),
    outputGroup?: [ 
      {
        output?: {
          media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
          outputUrl?: string(name='OutputUrl'),
          type?: string(name='Type', example='OSS'),
        }(name='Output'),
        processConfig?: {
          combineConfigs?: [ 
            {
              audioIndex?: string(name='AudioIndex', description='This parameter is required.', example='0 或 exclude'),
              duration?: double(name='Duration', example='20.0'),
              start?: double(name='Start', example='0.0'),
              videoIndex?: string(name='VideoIndex', description='This parameter is required.', example='0 或 exclude'),
            }
          ](name='CombineConfigs'),
          encryption?: {
            cipherText?: string(name='CipherText', example='MTYi00NDU0LTg5O****'),
            decryptKeyUri?: string(name='DecryptKeyUri', example='https://sample.com/path?CipherText=MTYi00NDU0LTg5O****'),
            encryptType?: string(name='EncryptType', example='PrivateEncryption'),
            keyServiceType?: string(name='KeyServiceType', example='KMS'),
          }(name='Encryption'),
          imageWatermarks?: [ 
            {
              overwriteParams?: {
                dx?: string(name='Dx', example='10'),
                dy?: string(name='Dy', example='10'),
                file?: {
                  media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', example='OSS'),
                }(name='File'),
                height?: string(name='Height', example='32'),
                referPos?: string(name='ReferPos', example='TopLeft'),
                timeline?: {
                  duration?: string(name='Duration', example='ToEND'),
                  start?: string(name='Start', example='00:00:05'),
                }(name='Timeline'),
                width?: string(name='Width', example='32'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='ImageWatermarks'),
          subtitles?: [ 
            {
              overwriteParams?: {
                charEnc?: string(name='CharEnc', example='UTF-8'),
                file?: {
                  media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', example='OSS'),
                }(name='File'),
                format?: string(name='Format', example='vtt'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='Subtitles'),
          textWatermarks?: [ 
            {
              overwriteParams?: {
                adaptive?: string(name='Adaptive', example='false'),
                borderColor?: string(name='BorderColor', example='#006400'),
                borderWidth?: int32(name='BorderWidth', example='0'),
                content?: string(name='Content', example='测试水印'),
                fontAlpha?: string(name='FontAlpha', example='1.0'),
                fontColor?: string(name='FontColor', example='#006400'),
                fontName?: string(name='FontName', example='SimSun'),
                fontSize?: int32(name='FontSize', example='16'),
                left?: string(name='Left', example='10'),
                top?: string(name='Top', example='10'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='TextWatermarks'),
          transcode?: {
            overwriteParams?: {
              audio?: {
                bitrate?: string(name='Bitrate', example='128'),
                channels?: string(name='Channels', example='2'),
                codec?: string(name='Codec', example='AAC'),
                profile?: string(name='Profile', example='aac_low'),
                remove?: string(name='Remove', example='false'),
                samplerate?: string(name='Samplerate', example='44100'),
                volume?: {
                  integratedLoudnessTarget?: string(name='IntegratedLoudnessTarget', example='-6'),
                  loudnessRangeTarget?: string(name='LoudnessRangeTarget', example='8'),
                  method?: string(name='Method', example='auto'),
                  truePeak?: string(name='TruePeak', example='-1'),
                }(name='Volume'),
              }(name='Audio'),
              container?: {
                format?: string(name='Format', example='mp4'),
              }(name='Container'),
              muxConfig?: {
                segment?: {
                  duration?: string(name='Duration', example='10'),
                  forceSegTime?: string(name='ForceSegTime', example='2,3'),
                }(name='Segment'),
              }(name='MuxConfig'),
              transConfig?: {
                adjDarMethod?: string(name='AdjDarMethod'),
                isCheckAudioBitrate?: string(name='IsCheckAudioBitrate'),
                isCheckAudioBitrateFail?: string(name='IsCheckAudioBitrateFail'),
                isCheckReso?: string(name='IsCheckReso'),
                isCheckResoFail?: string(name='IsCheckResoFail'),
                isCheckVideoBitrate?: string(name='IsCheckVideoBitrate'),
                isCheckVideoBitrateFail?: string(name='IsCheckVideoBitrateFail'),
                transMode?: string(name='TransMode'),
              }(name='TransConfig'),
              video?: {
                abrMax?: string(name='AbrMax', example='6000'),
                bitrate?: string(name='Bitrate', example='3000'),
                bufsize?: string(name='Bufsize', example='6000'),
                codec?: string(name='Codec', example='H.264'),
                crf?: string(name='Crf', example='23'),
                crop?: string(name='Crop', example='1280:800:0:140'),
                fps?: string(name='Fps', example='25'),
                gop?: string(name='Gop', example='250'),
                height?: string(name='Height', example='1080'),
                longShortMode?: string(name='LongShortMode', example='false'),
                maxrate?: string(name='Maxrate', example='9000'),
                pad?: string(name='Pad', example='1280:800:0:140'),
                pixFmt?: string(name='PixFmt', example='yuv420p'),
                preset?: string(name='Preset', example='medium'),
                profile?: string(name='Profile', example='Main'),
                remove?: string(name='Remove', example='false'),
                scanMode?: string(name='ScanMode', example='progressive'),
                width?: string(name='Width', example='1920'),
              }(name='Video'),
            }(name='OverwriteParams'),
            templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }(name='Transcode'),
        }(name='ProcessConfig'),
      }
    ](name='OutputGroup'),
    parentJobId?: string(name='ParentJobId', example='8b2198504dd340b7b3c9842a74fc9baa'),
    percent?: int32(name='Percent', example='0'),
    requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
    scheduleConfig?: {
      pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
      priority?: int32(name='Priority', example='5'),
    }(name='ScheduleConfig'),
    status?: string(name='Status', example='Success'),
    submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
    transcodeJobList?: [ 
      {
        createTime?: string(name='CreateTime', example='2022-01-12T08:49:41Z'),
        finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
        inputGroup?: [ 
          {
            inputUrl?: string(name='InputUrl'),
            media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
            type?: string(name='Type', example='OSS'),
          }
        ](name='InputGroup'),
        jobId?: string(name='JobId', example='7d6a7e0d4db2457a8d45ff5d43e1bf0a'),
        jobIndex?: int32(name='JobIndex', example='0'),
        name?: string(name='Name', example='transcode-job'),
        outFileMeta?: {
          audioStreamInfoList?: [ 
            {
              bitrate?: string(name='Bitrate', example='0.f'),
              channelLayout?: string(name='ChannelLayout', example='stereo'),
              channels?: string(name='Channels', example='2'),
              codecLongName?: string(name='CodecLongName', example='AAC (Advanced Audio Coding)'),
              codecName?: string(name='CodecName', example='aac'),
              codecTag?: string(name='CodecTag', example='0x000f'),
              codecTagString?: string(name='CodecTagString', example='[15][0][0][0]'),
              codecTimeBase?: string(name='CodecTimeBase', example='1/44100'),
              duration?: string(name='Duration', example='403.039989'),
              index?: string(name='Index', example='1'),
              lang?: string(name='Lang', example='cn'),
              sampleFmt?: string(name='SampleFmt', example='fltp'),
              sampleRate?: string(name='SampleRate', example='44100'),
              startTime?: string(name='StartTime', example='1.473556'),
              timebase?: string(name='Timebase', example='1/90000'),
            }
          ](name='AudioStreamInfoList'),
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', example='888.563'),
            duration?: string(name='Duration', example='403.039999'),
            fileName?: string(name='FileName', example='file.m3u8'),
            fileSize?: string(name='FileSize', example='31737'),
            fileStatus?: string(name='FileStatus', example='Normal'),
            fileType?: string(name='FileType', example='source_file'),
            fileUrl?: string(name='FileUrl', example='http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8'),
            formatName?: string(name='FormatName', example='hls,applehttp'),
            height?: string(name='Height', example='478'),
            mediaId?: string(name='MediaId', example='486c2890096871edba6f81848c016303'),
            region?: string(name='Region', example='cn-shanghai'),
            width?: string(name='Width', example='848'),
          }(name='FileBasicInfo'),
          videoStreamInfoList?: [ 
            {
              avgFps?: string(name='Avg_fps', example='25.0'),
              bitRate?: string(name='Bit_rate', example='888.563'),
              codecLongName?: string(name='Codec_long_name', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
              codecName?: string(name='Codec_name', example='h264'),
              codecTag?: string(name='Codec_tag', example='0x001b'),
              codecTagString?: string(name='Codec_tag_string', example='[27][0][0][0]'),
              codecTimeBase?: string(name='Codec_time_base', example='1/50'),
              dar?: string(name='Dar', example='16:9'),
              duration?: string(name='Duration', example='403.039989'),
              fps?: string(name='Fps', example='25.0'),
              hasBFrames?: string(name='Has_b_frames', example='2'),
              height?: string(name='Height', example='478'),
              index?: string(name='Index', example='0'),
              lang?: string(name='Lang', example='cn'),
              level?: string(name='Level', example='31'),
              numFrames?: string(name='NumFrames', example='10040'),
              pixFmt?: string(name='PixFmt', example='yuv420p'),
              profile?: string(name='Profile', example='High'),
              rotate?: string(name='Rotate', example='0'),
              sar?: string(name='Sar', example='478:477'),
              startTime?: string(name='Start_time', example='1.473556'),
              timeBase?: string(name='Time_base', example='1/90000'),
              width?: string(name='Width', example='848'),
            }
          ](name='VideoStreamInfoList'),
        }(name='OutFileMeta'),
        output?: {
          media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
          outputUrl?: string(name='OutputUrl'),
          type?: string(name='Type', example='OSS'),
        }(name='Output'),
        parentJobId?: string(name='ParentJobId', example='8b2198504dd340b7b3c9842a74fc9baa'),
        processConfig?: {
          combineConfigs?: [ 
            {
              audioIndex?: string(name='AudioIndex', description='This parameter is required.', example='0 或 exclude'),
              duration?: double(name='Duration', example='20.0'),
              start?: double(name='Start', example='0.0'),
              videoIndex?: string(name='VideoIndex', description='This parameter is required.', example='0 或 exclude'),
            }
          ](name='CombineConfigs'),
          encryption?: {
            cipherText?: string(name='CipherText', example='MTYi00NDU0LTg5O****'),
            decryptKeyUri?: string(name='DecryptKeyUri', example='https://sample.com/path?CipherText=MTYi00NDU0LTg5O****'),
            encryptType?: string(name='EncryptType', example='PrivateEncryption'),
            keyServiceType?: string(name='KeyServiceType', example='KMS'),
          }(name='Encryption'),
          imageWatermarks?: [ 
            {
              overwriteParams?: {
                dx?: string(name='Dx', example='10'),
                dy?: string(name='Dy', example='10'),
                file?: {
                  media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', example='OSS'),
                }(name='File'),
                height?: string(name='Height', example='32'),
                referPos?: string(name='ReferPos', example='TopLeft'),
                timeline?: {
                  duration?: string(name='Duration', example='ToEND'),
                  start?: string(name='Start', example='00:00:05'),
                }(name='Timeline'),
                width?: string(name='Width', example='32'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='ImageWatermarks'),
          isInheritTags?: boolean(name='IsInheritTags'),
          subtitles?: [ 
            {
              overwriteParams?: {
                charEnc?: string(name='CharEnc', example='UTF-8'),
                file?: {
                  media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', example='OSS'),
                }(name='File'),
                format?: string(name='Format', example='vtt'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='Subtitles'),
          textWatermarks?: [ 
            {
              overwriteParams?: {
                adaptive?: string(name='Adaptive', example='false'),
                borderColor?: string(name='BorderColor', example='#006400'),
                borderWidth?: int32(name='BorderWidth', example='0'),
                content?: string(name='Content', example='测试水印'),
                fontAlpha?: string(name='FontAlpha', example='1.0'),
                fontColor?: string(name='FontColor', example='#006400'),
                fontName?: string(name='FontName', example='SimSun'),
                fontSize?: int32(name='FontSize', example='16'),
                left?: string(name='Left', example='10'),
                top?: string(name='Top', example='10'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='TextWatermarks'),
          transcode?: {
            overwriteParams?: {
              audio?: {
                bitrate?: string(name='Bitrate', example='128'),
                channels?: string(name='Channels', example='2'),
                codec?: string(name='Codec', example='AAC'),
                profile?: string(name='Profile', example='aac_low'),
                remove?: string(name='Remove', example='false'),
                samplerate?: string(name='Samplerate', example='44100'),
                volume?: {
                  integratedLoudnessTarget?: string(name='IntegratedLoudnessTarget', example='-6'),
                  loudnessRangeTarget?: string(name='LoudnessRangeTarget', example='8'),
                  method?: string(name='Method', example='auto'),
                  truePeak?: string(name='TruePeak', example='-1'),
                }(name='Volume'),
              }(name='Audio'),
              container?: {
                format?: string(name='Format', example='mp4'),
              }(name='Container'),
              muxConfig?: {
                segment?: {
                  duration?: string(name='Duration', example='10'),
                  forceSegTime?: string(name='ForceSegTime', example='2,3'),
                }(name='Segment'),
              }(name='MuxConfig'),
              tags?: map[string]string(name='Tags'),
              transConfig?: {
                adjDarMethod?: string(name='AdjDarMethod'),
                isCheckAudioBitrate?: string(name='IsCheckAudioBitrate'),
                isCheckAudioBitrateFail?: string(name='IsCheckAudioBitrateFail'),
                isCheckReso?: string(name='IsCheckReso'),
                isCheckResoFail?: string(name='IsCheckResoFail'),
                isCheckVideoBitrate?: string(name='IsCheckVideoBitrate'),
                isCheckVideoBitrateFail?: string(name='IsCheckVideoBitrateFail'),
                transMode?: string(name='TransMode'),
              }(name='TransConfig'),
              video?: {
                abrMax?: string(name='AbrMax', example='6000'),
                bitrate?: string(name='Bitrate', example='3000'),
                bufsize?: string(name='Bufsize', example='6000'),
                codec?: string(name='Codec', example='H.264'),
                crf?: string(name='Crf', example='23'),
                crop?: string(name='Crop', example='1280:800:0:140'),
                fps?: string(name='Fps', example='25'),
                gop?: string(name='Gop', example='250'),
                height?: string(name='Height', example='1080'),
                longShortMode?: string(name='LongShortMode', example='false'),
                maxrate?: string(name='Maxrate', example='9000'),
                pad?: string(name='Pad', example='1280:800:0:140'),
                pixFmt?: string(name='PixFmt', example='yuv420p'),
                preset?: string(name='Preset', example='medium'),
                profile?: string(name='Profile', example='Main'),
                remove?: string(name='Remove', example='false'),
                scanMode?: string(name='ScanMode', example='progressive'),
                width?: string(name='Width', example='1920'),
              }(name='Video'),
            }(name='OverwriteParams'),
            templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }(name='Transcode'),
        }(name='ProcessConfig'),
        requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
        scheduleConfig?: {
          pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
          priority?: int32(name='Priority', example='5'),
        }(name='ScheduleConfig'),
        status?: string(name='Status', example='Init'),
        submitResultJson?: map[string]any(name='SubmitResultJson', example='{}'),
        submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
        userData?: string(name='UserData', example='user-data'),
      }
    ](name='TranscodeJobList'),
    triggerSource?: string(name='TriggerSource', example='API'),
    userData?: string(name='UserData', example='user-data'),
  }(name='TranscodeParentJob', description='TranscodeParentJobWithSubJobDTO'),
}

model GetTranscodeJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTranscodeJobResponseBody(name='body'),
}

/**
 * @param request GetTranscodeJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTranscodeJobResponse
 */
async function getTranscodeJobWithOptions(request: GetTranscodeJobRequest, runtime: Util.RuntimeOptions): GetTranscodeJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.parentJobId)) {
    query['ParentJobId'] = request.parentJobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTranscodeJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request GetTranscodeJobRequest
 * @return GetTranscodeJobResponse
 */
async function getTranscodeJob(request: GetTranscodeJobRequest): GetTranscodeJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTranscodeJobWithOptions(request, runtime);
}

model GetUrlUploadInfosRequest {
  jobIds?: string(name='JobIds', example='df2ac80b481346daa1db6a7c40edc7f8'),
  uploadURLs?: string(name='UploadURLs', example='https://media.w3.org/2010/05/sintel/trailer.mp4'),
}

model GetUrlUploadInfosResponseBody = {
  nonExists?: [ string ](name='NonExists'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  URLUploadInfoList?: [ 
    {
      completeTime?: string(name='CompleteTime', example='2021-11-26 21:47:37'),
      creationTime?: string(name='CreationTime', example='2021-11-07T10:03:37Z'),
      errorCode?: string(name='ErrorCode', example='200'),
      errorMessage?: string(name='ErrorMessage', example='Success'),
      fileSize?: string(name='FileSize', example='64610'),
      jobId?: string(name='JobId', example='3829500c0fef429fa4ec1680b122d***'),
      mediaId?: string(name='MediaId', example='5014ca70f08171ecbf940764a0fd6***'),
      status?: string(name='Status', example='Normal'),
      uploadURL?: string(name='UploadURL', example='http://****.mp4'),
      userData?: string(name='UserData', example='{"MessageCallback":"{"CallbackURL":"http://example.aliyundoc.com"}", "Extend":"{"localId":"***", "test":"www"}"}'),
    }
  ](name='URLUploadInfoList'),
}

model GetUrlUploadInfosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUrlUploadInfosResponseBody(name='body'),
}

/**
 * @summary 获取URL上传信息
 *
 * @param request GetUrlUploadInfosRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetUrlUploadInfosResponse
 */
async function getUrlUploadInfosWithOptions(request: GetUrlUploadInfosRequest, runtime: Util.RuntimeOptions): GetUrlUploadInfosResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobIds)) {
    query['JobIds'] = request.jobIds;
  }
  if (!Util.isUnset(request.uploadURLs)) {
    query['UploadURLs'] = request.uploadURLs;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUrlUploadInfos',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取URL上传信息
 *
 * @param request GetUrlUploadInfosRequest
 * @return GetUrlUploadInfosResponse
 */
async function getUrlUploadInfos(request: GetUrlUploadInfosRequest): GetUrlUploadInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUrlUploadInfosWithOptions(request, runtime);
}

model GetVideoListRequest {
  cateId?: long(name='CateId', example='781111'),
  endTime?: string(name='EndTime', example='2017-01-11T12:59:00Z'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  sortBy?: string(name='SortBy', example='CreationTime:Asc'),
  startTime?: string(name='StartTime', example='2017-01-11T12:00:00Z'),
  status?: string(name='Status', example='Uploading,Normal'),
}

model GetVideoListResponseBody = {
  code?: string(name='Code', example='200'),
  mediaList?: [ 
    {
      appId?: string(name='AppId', example='app-1000000'),
      cateId?: long(name='CateId', example='3679'),
      cateName?: string(name='CateName'),
      coverUrl?: string(name='CoverUrl', example='http://example.aliyundoc.com/snapshot/****.jpg?auth_key=1498476426-0-0-f00b9455c49a423ce69cf4e27333****'),
      creationTime?: string(name='CreationTime', example='2017-11-14T09:15:50Z'),
      description?: string(name='Description'),
      duration?: float(name='Duration', example='135.6'),
      mediaId?: string(name='MediaId', example='1c6ce34007d571ed94667630a6bc****'),
      modificationTime?: string(name='ModificationTime', example='2017-11-14T09:16:50Z'),
      size?: long(name='Size', example='10897890'),
      snapshots?: [ string ](name='Snapshots'),
      status?: string(name='Status', example='Normal'),
      storageLocation?: string(name='StorageLocation', example='out-****.oss-cn-shanghai.aliyuncs.com'),
      tags?: string(name='Tags'),
      title?: string(name='Title'),
    }
  ](name='MediaList'),
  requestId?: string(name='RequestId', description='Id of the request。', example='******11-DB8D-4A9A-875B-275798******'),
  success?: string(name='Success', example='true'),
  total?: long(name='Total', example='163'),
}

model GetVideoListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVideoListResponseBody(name='body'),
}

/**
 * @summary 获取媒资新增列表
 *
 * @param request GetVideoListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetVideoListResponse
 */
async function getVideoListWithOptions(request: GetVideoListRequest, runtime: Util.RuntimeOptions): GetVideoListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cateId)) {
    query['CateId'] = request.cateId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetVideoList',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取媒资新增列表
 *
 * @param request GetVideoListRequest
 * @return GetVideoListResponse
 */
async function getVideoList(request: GetVideoListRequest): GetVideoListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVideoListWithOptions(request, runtime);
}

model GetWorkflowTaskRequest {
  taskId?: string(name='TaskId', example='******4215e042b3966ca5441e******'),
}

model GetWorkflowTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='******0C-7870-15FE-B96F-8880BB******'),
  workflowTask?: {
    activityResults?: string(name='ActivityResults'),
    createTime?: string(name='CreateTime', example='2023-01-04T02:05:17Z'),
    finishTime?: string(name='FinishTime', example='2023-01-04T02:06:19Z'),
    status?: string(name='Status', example='Succeed'),
    taskId?: string(name='TaskId', example='******4215e042b3966ca5441e******'),
    taskInput?: string(name='TaskInput', example='{
      "Type": "Media",
      "Media": "******30706071edbfe290b488******"
}'),
    userData?: string(name='UserData', example='{"NotifyAddress":"http://xx.xx.xxx"}'),
    workflow?: {
      createTime?: string(name='CreateTime', example='2022-11-27T10:02:12Z'),
      modifiedTime?: string(name='ModifiedTime', example='2022-11-29T02:06:19Z'),
      name?: string(name='Name'),
      status?: string(name='Status', example='Active'),
      type?: string(name='Type', example='Common'),
      workflowId?: string(name='WorkflowId', example='******63dca94c609de02ac0d1******'),
    }(name='Workflow'),
  }(name='WorkflowTask'),
}

model GetWorkflowTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWorkflowTaskResponseBody(name='body'),
}

/**
 * @summary 获取工作流任务
 *
 * @param request GetWorkflowTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWorkflowTaskResponse
 */
async function getWorkflowTaskWithOptions(request: GetWorkflowTaskRequest, runtime: Util.RuntimeOptions): GetWorkflowTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWorkflowTask',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取工作流任务
 *
 * @param request GetWorkflowTaskRequest
 * @return GetWorkflowTaskResponse
 */
async function getWorkflowTask(request: GetWorkflowTaskRequest): GetWorkflowTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWorkflowTaskWithOptions(request, runtime);
}

model InsertMediaToSearchLibRequest {
  input?: string(name='Input', description='This parameter is required.', example='http://example-test-****.mp4'),
  mediaId?: string(name='MediaId', example='411bed50018971edb60b0764a0ec6***'),
  mediaType?: string(name='MediaType', example='video'),
  msgBody?: string(name='MsgBody', example='{}'),
  searchLibName?: string(name='SearchLibName', example='test1'),
}

model InsertMediaToSearchLibResponseBody = {
  code?: string(name='Code'),
  mediaId?: string(name='MediaId', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', description='Id of the request', example='*****ACB-44F2-5F2D-88D7-1283E70*****'),
  success?: string(name='Success'),
}

model InsertMediaToSearchLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InsertMediaToSearchLibResponseBody(name='body'),
}

/**
 * @summary 插入媒资到搜索
 *
 * @param request InsertMediaToSearchLibRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return InsertMediaToSearchLibResponse
 */
async function insertMediaToSearchLibWithOptions(request: InsertMediaToSearchLibRequest, runtime: Util.RuntimeOptions): InsertMediaToSearchLibResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.input)) {
    query['Input'] = request.input;
  }
  if (!Util.isUnset(request.mediaId)) {
    query['MediaId'] = request.mediaId;
  }
  if (!Util.isUnset(request.mediaType)) {
    query['MediaType'] = request.mediaType;
  }
  if (!Util.isUnset(request.msgBody)) {
    query['MsgBody'] = request.msgBody;
  }
  if (!Util.isUnset(request.searchLibName)) {
    query['SearchLibName'] = request.searchLibName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InsertMediaToSearchLib',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 插入媒资到搜索
 *
 * @param request InsertMediaToSearchLibRequest
 * @return InsertMediaToSearchLibResponse
 */
async function insertMediaToSearchLib(request: InsertMediaToSearchLibRequest): InsertMediaToSearchLibResponse {
  var runtime = new Util.RuntimeOptions{};
  return insertMediaToSearchLibWithOptions(request, runtime);
}

model ListAllPublicMediaTagsRequest {
  businessType?: string(name='BusinessType', example='"sticker"'),
  entityId?: string(name='EntityId', example='Copyright_Music'),
}

model ListAllPublicMediaTagsResponseBody = {
  mediaTagList?: [ 
    {
      mediaTagId?: string(name='MediaTagId', example='sticker-gif'),
      mediaTagNameChinese?: string(name='MediaTagNameChinese', example='Gif'),
      mediaTagNameEnglish?: string(name='MediaTagNameEnglish'),
      options?: [ 
        {
          optionChineseName?: string(name='OptionChineseName'),
          optionEnglishName?: string(name='OptionEnglishName', example='Angry'),
          optionId?: string(name='OptionId', example='Angry'),
        }
      ](name='Options'),
    }
  ](name='MediaTagList'),
  requestId?: string(name='RequestId', example='B45F83B7-7F87-4792-BFE9-63CD2137CAF0'),
}

model ListAllPublicMediaTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAllPublicMediaTagsResponseBody(name='body'),
}

/**
 * @summary 列出公共素材库所有标签
 *
 * @param request ListAllPublicMediaTagsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAllPublicMediaTagsResponse
 */
async function listAllPublicMediaTagsWithOptions(request: ListAllPublicMediaTagsRequest, runtime: Util.RuntimeOptions): ListAllPublicMediaTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.entityId)) {
    query['EntityId'] = request.entityId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAllPublicMediaTags',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列出公共素材库所有标签
 *
 * @param request ListAllPublicMediaTagsRequest
 * @return ListAllPublicMediaTagsResponse
 */
async function listAllPublicMediaTags(request: ListAllPublicMediaTagsRequest): ListAllPublicMediaTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAllPublicMediaTagsWithOptions(request, runtime);
}

model ListAvatarTrainingJobsRequest {
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  status?: string(name='Status', example='Success'),
}

model ListAvatarTrainingJobsResponseBody = {
  data?: {
    avatarTrainingJobList?: [ 
      {
        avatarDescription?: string(name='AvatarDescription'),
        avatarId?: string(name='AvatarId', example='Avatar-XXX'),
        avatarName?: string(name='AvatarName'),
        avatarType?: string(name='AvatarType', example='2DAvatar'),
        createTime?: string(name='CreateTime', example='2020-12-23T13:33:40Z'),
        firstTrainingTime?: string(name='FirstTrainingTime', example='2020-12-23T13:33:40Z'),
        jobId?: string(name='JobId', example='*****aded114489ea02e0addf93*****'),
        lastTrainingTime?: string(name='LastTrainingTime', example='2020-12-23T13:33:40Z'),
        message?: string(name='Message'),
        portrait?: string(name='Portrait', example='*****aded114489ea02e0addf93*****'),
        status?: string(name='Status', example='Normal'),
      }
    ](name='AvatarTrainingJobList'),
    totalCount?: long(name='TotalCount', example='3'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
  success?: boolean(name='Success', example='true'),
}

model ListAvatarTrainingJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAvatarTrainingJobsResponseBody(name='body'),
}

/**
 * @summary 查询数字人训练任务列表，列出当前用户的所有数字人训练任务
 *
 * @param request ListAvatarTrainingJobsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAvatarTrainingJobsResponse
 */
async function listAvatarTrainingJobsWithOptions(request: ListAvatarTrainingJobsRequest, runtime: Util.RuntimeOptions): ListAvatarTrainingJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAvatarTrainingJobs',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询数字人训练任务列表，列出当前用户的所有数字人训练任务
 *
 * @param request ListAvatarTrainingJobsRequest
 * @return ListAvatarTrainingJobsResponse
 */
async function listAvatarTrainingJobs(request: ListAvatarTrainingJobsRequest): ListAvatarTrainingJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAvatarTrainingJobsWithOptions(request, runtime);
}

model ListAvatarsRequest {
  avatarType?: string(name='AvatarType', example='2DAvatar'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListAvatarsResponseBody = {
  data?: {
    avatarList?: [ 
      {
        avatarDescription?: string(name='AvatarDescription'),
        avatarId?: string(name='AvatarId', example='Avatar-XXX'),
        avatarName?: string(name='AvatarName'),
        avatarType?: string(name='AvatarType', example='2DAvatar'),
        portrait?: string(name='Portrait', example='****571c704445f9a0ee011406c2****'),
        thumbnail?: string(name='Thumbnail', example='https://your-bucket.oss-cn-hangzhou.aliyuncs.com/thumbnail.png'),
        transparent?: boolean(name='Transparent'),
      }
    ](name='AvatarList'),
    totalCount?: long(name='TotalCount', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model ListAvatarsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAvatarsResponseBody(name='body'),
}

/**
 * @summary 查询数字人列表，列出当前用户的所有数字人
 *
 * @param request ListAvatarsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAvatarsResponse
 */
async function listAvatarsWithOptions(request: ListAvatarsRequest, runtime: Util.RuntimeOptions): ListAvatarsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.avatarType)) {
    query['AvatarType'] = request.avatarType;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAvatars',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询数字人列表，列出当前用户的所有数字人
 *
 * @param request ListAvatarsRequest
 * @return ListAvatarsResponse
 */
async function listAvatars(request: ListAvatarsRequest): ListAvatarsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAvatarsWithOptions(request, runtime);
}

model ListBatchMediaProducingJobsRequest {
  endTime?: string(name='EndTime', example='2023-06-05T15:59:59Z'),
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
  jobType?: string(name='JobType', example='Script'),
  maxResults?: int32(name='MaxResults', example='100'),
  nextToken?: string(name='NextToken', example='mRZkKAovub0xWVfH14he4Q=='),
  sortBy?: string(name='SortBy', example='desc'),
  startTime?: string(name='StartTime', example='2022-02-02T00:00:00Z'),
  status?: string(name='Status', example='Finished'),
}

model ListBatchMediaProducingJobsResponseBody = {
  editingBatchJobList?: [ 
    {
      completeTime?: string(name='CompleteTime', example='2023-06-09T06:38:09Z'),
      createTime?: string(name='CreateTime', example='2023-06-09T06:36:48Z'),
      editingConfig?: string(name='EditingConfig', example='{
  "MediaConfig": {
      "Volume": 0
  },
  "SpeechConfig": {
      "Volume": 1
  },
 "BackgroundMusicConfig": {
      "Volume": 0.3
  }
}'),
      extend?: string(name='Extend'),
      inputConfig?: string(name='InputConfig'),
      jobId?: string(name='JobId', example='******7ecbee4c6d9b8474498e******'),
      jobType?: string(name='JobType', example='Script'),
      modifiedTime?: string(name='ModifiedTime', example='2023-06-09T06:37:58Z'),
      outputConfig?: string(name='OutputConfig', example='{
  "MediaURL": "http://xxx.oss-cn-shanghai.aliyuncs.com/xxx_{index}.mp4",
  "Count": 20,
  "MaxDuration": 15,
  "Width": 1080,
  "Height": 1920,
  "Video": {"Crf": 27}
}'),
      status?: string(name='Status', example='Finished'),
      userData?: string(name='UserData'),
    }
  ](name='EditingBatchJobList'),
  maxResults?: int32(name='MaxResults', example='100'),
  nextToken?: string(name='NextToken', example='8EqYpQbZ6Eh7+Zz8DxVYoQ=='),
  requestId?: string(name='RequestId', description='Id of the request', example='******3B-0E1A-586A-AC29-742247******'),
}

model ListBatchMediaProducingJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBatchMediaProducingJobsResponseBody(name='body'),
}

/**
 * @summary 获取一键成片任务列表
 *
 * @param request ListBatchMediaProducingJobsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListBatchMediaProducingJobsResponse
 */
async function listBatchMediaProducingJobsWithOptions(request: ListBatchMediaProducingJobsRequest, runtime: Util.RuntimeOptions): ListBatchMediaProducingJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.jobType)) {
    query['JobType'] = request.jobType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListBatchMediaProducingJobs',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取一键成片任务列表
 *
 * @param request ListBatchMediaProducingJobsRequest
 * @return ListBatchMediaProducingJobsResponse
 */
async function listBatchMediaProducingJobs(request: ListBatchMediaProducingJobsRequest): ListBatchMediaProducingJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBatchMediaProducingJobsWithOptions(request, runtime);
}

model ListCustomTemplatesRequest {
  name?: string(name='Name', example='test-template'),
  orderBy?: string(name='OrderBy', example='CreateTimeDesc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  subtype?: string(name='Subtype', example='2'),
  templateId?: string(name='TemplateId', example='****96e8864746a0b6f3****'),
  type?: string(name='Type', description='This parameter is required.', example='1'),
}

model ListCustomTemplatesResponseBody = {
  customTemplateList?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
      isDefault?: boolean(name='IsDefault', example='true'),
      modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:17:54Z'),
      status?: string(name='Status', example='Normal'),
      subtype?: int32(name='Subtype', example='2'),
      subtypeName?: string(name='SubtypeName', example='AudioTranscode'),
      templateConfig?: string(name='TemplateConfig', example='{"Container":{"Format":"mp3"},"Audio":{"Codec":"mp3","Bitrate":"64","Samplerate":"22050","Channels":"2"}}'),
      templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
      templateName?: string(name='TemplateName', example='test-template'),
      type?: int32(name='Type', example='1'),
      typeName?: string(name='TypeName', example='TranscodeTemplate'),
    }
  ](name='CustomTemplateList'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  total?: int32(name='Total', example='20'),
}

model ListCustomTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCustomTemplatesResponseBody(name='body'),
}

/**
 * @summary 获取媒体处理自定义模板列表
 *
 * @param request ListCustomTemplatesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCustomTemplatesResponse
 */
async function listCustomTemplatesWithOptions(request: ListCustomTemplatesRequest, runtime: Util.RuntimeOptions): ListCustomTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.subtype)) {
    query['Subtype'] = request.subtype;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCustomTemplates',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取媒体处理自定义模板列表
 *
 * @param request ListCustomTemplatesRequest
 * @return ListCustomTemplatesResponse
 */
async function listCustomTemplates(request: ListCustomTemplatesRequest): ListCustomTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCustomTemplatesWithOptions(request, runtime);
}

model ListCustomizedVoiceJobsRequest {
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  type?: string(name='Type'),
}

model ListCustomizedVoiceJobsResponseBody = {
  data?: {
    customizedVoiceJobList?: [ 
      {
        createTime?: string(name='CreateTime'),
        gender?: string(name='Gender', example='female'),
        gmtCreate?: string(name='GmtCreate', example='2022-06-27T02:42:28Z'),
        jobId?: string(name='JobId', example='2245ab99a7fd4116a4fd3f499b7a56c5'),
        message?: string(name='Message'),
        scenario?: string(name='Scenario', example='story'),
        status?: string(name='Status', example='Success'),
        type?: string(name='Type'),
        voiceDesc?: string(name='VoiceDesc'),
        voiceId?: string(name='VoiceId', example='xiaozhuan'),
        voiceName?: string(name='VoiceName'),
      }
    ](name='CustomizedVoiceJobList'),
    totalCount?: int32(name='TotalCount', example='271'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
  success?: boolean(name='Success', example='true'),
}

model ListCustomizedVoiceJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCustomizedVoiceJobsResponseBody(name='body'),
}

/**
 * @summary 查询人声克隆训练任务列表，列出当前用户的所有人声克隆训练任务
 *
 * @param request ListCustomizedVoiceJobsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCustomizedVoiceJobsResponse
 */
async function listCustomizedVoiceJobsWithOptions(request: ListCustomizedVoiceJobsRequest, runtime: Util.RuntimeOptions): ListCustomizedVoiceJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCustomizedVoiceJobs',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询人声克隆训练任务列表，列出当前用户的所有人声克隆训练任务
 *
 * @param request ListCustomizedVoiceJobsRequest
 * @return ListCustomizedVoiceJobsResponse
 */
async function listCustomizedVoiceJobs(request: ListCustomizedVoiceJobsRequest): ListCustomizedVoiceJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCustomizedVoiceJobsWithOptions(request, runtime);
}

model ListCustomizedVoicesRequest {
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  type?: string(name='Type'),
}

model ListCustomizedVoicesResponseBody = {
  data?: {
    customizedVoiceList?: [ 
      {
        demoAudioMediaId?: string(name='DemoAudioMediaId', example='****4d5e829d498aaf966b119348****'),
        gender?: string(name='Gender', example='male'),
        scenario?: string(name='Scenario', example='story'),
        type?: string(name='Type'),
        voiceDesc?: string(name='VoiceDesc'),
        voiceId?: string(name='VoiceId', example='xiaozhuan'),
        voiceName?: string(name='VoiceName'),
      }
    ](name='CustomizedVoiceList'),
    totalCount?: int32(name='TotalCount', example='41'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model ListCustomizedVoicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCustomizedVoicesResponseBody(name='body'),
}

/**
 * @summary 获取用户的专属人声列表
 *
 * @param request ListCustomizedVoicesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCustomizedVoicesResponse
 */
async function listCustomizedVoicesWithOptions(request: ListCustomizedVoicesRequest, runtime: Util.RuntimeOptions): ListCustomizedVoicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCustomizedVoices',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取用户的专属人声列表
 *
 * @param request ListCustomizedVoicesRequest
 * @return ListCustomizedVoicesResponse
 */
async function listCustomizedVoices(request: ListCustomizedVoicesRequest): ListCustomizedVoicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCustomizedVoicesWithOptions(request, runtime);
}

model ListDNADBRequest {
  DBIds?: string(name='DBIds', example='2288c6ca184c0e47098a5b665e2a12****,78dc866518b843259669df58ed30****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListDNADBResponseBody = {
  DBList?: [ 
    {
      DBId?: string(name='DBId', example='88c6ca184c0e47098a5b665e2a12****'),
      description?: string(name='Description'),
      model?: string(name='Model', example='Video'),
      name?: string(name='Name', example='example-name'),
      status?: string(name='Status', example='active'),
    }
  ](name='DBList'),
  requestId?: string(name='RequestId', example='25818875-5F78-4A13-BEF6-D7393642CA58'),
}

model ListDNADBResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDNADBResponseBody(name='body'),
}

/**
 * @summary 查询DNA库
 *
 * @param request ListDNADBRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDNADBResponse
 */
async function listDNADBWithOptions(request: ListDNADBRequest, runtime: Util.RuntimeOptions): ListDNADBResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBIds)) {
    query['DBIds'] = request.DBIds;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDNADB',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询DNA库
 *
 * @param request ListDNADBRequest
 * @return ListDNADBResponse
 */
async function listDNADB(request: ListDNADBRequest): ListDNADBResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDNADBWithOptions(request, runtime);
}

model ListDNAFilesRequest {
  DBId?: string(name='DBId', description='This parameter is required.', example='2288c6ca184c0e47098a5b665e2a12****'),
  nextPageToken?: string(name='NextPageToken', example='ae0fd49c0840e14daf0d66a75b83****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageSize?: int32(name='PageSize', example='10'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListDNAFilesResponseBody = {
  fileList?: [ 
    {
      inputFile?: {
        bucket?: string(name='Bucket', example='example-bucket'),
        location?: string(name='Location', example='oss-cn-beijing'),
        object?: string(name='Object', example='example-****.mp4'),
      }(name='InputFile'),
      primaryKey?: string(name='PrimaryKey', example='ae0fd49c0840e14daf0d66a75b83****'),
    }
  ](name='FileList'),
  nextPageToken?: string(name='NextPageToken', example='ae0fd49c0840e14daf0d66a75b83****'),
  requestId?: string(name='RequestId', example='2AE89FA5-E620-56C7-9B80-75D09757385A'),
}

model ListDNAFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDNAFilesResponseBody(name='body'),
}

/**
 * @summary 查询DNA文件
 *
 * @param request ListDNAFilesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDNAFilesResponse
 */
async function listDNAFilesWithOptions(request: ListDNAFilesRequest, runtime: Util.RuntimeOptions): ListDNAFilesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBId)) {
    query['DBId'] = request.DBId;
  }
  if (!Util.isUnset(request.nextPageToken)) {
    query['NextPageToken'] = request.nextPageToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDNAFiles',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询DNA文件
 *
 * @param request ListDNAFilesRequest
 * @return ListDNAFilesResponse
 */
async function listDNAFiles(request: ListDNAFilesRequest): ListDNAFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDNAFilesWithOptions(request, runtime);
}

model ListDynamicImageJobsRequest {
  endOfCreateTime?: string(name='EndOfCreateTime', example='2022-07-14T00:00:00Z'),
  jobId?: string(name='JobId', example='****cdb3e74639973036bc84****'),
  nextPageToken?: string(name='NextPageToken', example='cdb3e74639973036bc84'),
  orderBy?: string(name='OrderBy', example='CreateTimeDesc'),
  pageSize?: int32(name='PageSize', example='20'),
  startOfCreateTime?: string(name='StartOfCreateTime', example='2022-07-12T00:00:00Z'),
  status?: string(name='Status', example='Success'),
}

model ListDynamicImageJobsResponseBody = {
  jobs?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
      finishTime?: string(name='FinishTime', example='2022-07-12T16:30:54Z'),
      input?: {
        media?: string(name='Media', example='oss://bucket/object'),
        type?: string(name='Type', example='OSS'),
      }(name='Input'),
      jobId?: string(name='JobId', example='****cdb3e74639973036bc84****'),
      modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:30:54Z'),
      name?: string(name='Name', example='SampleJob'),
      output?: {
        media?: string(name='Media', example='****cdb3e74639973036bc84****'),
        type?: string(name='Type', example='Media'),
      }(name='Output'),
      pipelineId?: string(name='PipelineId', example='****cdb3e74639973036bc84****'),
      status?: string(name='Status', example='Success'),
      submitTime?: string(name='SubmitTime', example='2022-07-12T16:17:54Z'),
      templateId?: string(name='TemplateId', example='****cdb3e74639973036bc84****'),
      triggerSource?: string(name='TriggerSource', example='API'),
    }
  ](name='Jobs'),
  nextPageToken?: string(name='NextPageToken', example='****cdb3e74639973036bc84****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model ListDynamicImageJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDynamicImageJobsResponseBody(name='body'),
}

/**
 * @summary 查询截图任务列表接口
 *
 * @param request ListDynamicImageJobsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDynamicImageJobsResponse
 */
async function listDynamicImageJobsWithOptions(request: ListDynamicImageJobsRequest, runtime: Util.RuntimeOptions): ListDynamicImageJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endOfCreateTime)) {
    query['EndOfCreateTime'] = request.endOfCreateTime;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.nextPageToken)) {
    query['NextPageToken'] = request.nextPageToken;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startOfCreateTime)) {
    query['StartOfCreateTime'] = request.startOfCreateTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDynamicImageJobs',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询截图任务列表接口
 *
 * @param request ListDynamicImageJobsRequest
 * @return ListDynamicImageJobsResponse
 */
async function listDynamicImageJobs(request: ListDynamicImageJobsRequest): ListDynamicImageJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDynamicImageJobsWithOptions(request, runtime);
}

model ListEditingProjectsRequest {
  createSource?: string(name='CreateSource', example='OpenAPI'),
  endTime?: string(name='EndTime', example='2022-02-02T23:59:59Z'),
  keyword?: string(name='Keyword', example='******6f36bc45d09a9d5cde49******'),
  maxResults?: string(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='8EqYpQbZ6Eh7+Zz8DxVYoQ=='),
  projectType?: string(name='ProjectType', example='EditingProject'),
  sortBy?: string(name='SortBy', example='CreationTime:Desc'),
  startTime?: string(name='StartTime', example='2017-12-21T08:00:01Z'),
  status?: string(name='Status', example='Produced'),
  templateType?: string(name='TemplateType', example='None'),
}

model ListEditingProjectsResponseBody = {
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', description='This parameter is required.', example='Nzv3rcKla9wHUGua9YXHNA=='),
  projectList?: [ 
    {
      businessConfig?: string(name='BusinessConfig', example='{}'),
      businessStatus?: string(name='BusinessStatus', example='{}'),
      coverURL?: string(name='CoverURL', example='https://xxx.com/cover/xxx.jpg'),
      createSource?: string(name='CreateSource', example='OpenAPI'),
      createTime?: string(name='CreateTime', example='2017-01-11T12:00:00Z'),
      description?: string(name='Description'),
      errorCode?: string(name='ErrorCode', example='InvalidParameter'),
      errorMessage?: string(name='ErrorMessage', example='The specified parameter \\\\"LiveStreamConfig\\\\" is not valid. specified parameter example is not valid.'),
      modifiedSource?: string(name='ModifiedSource', example='OpenAPI'),
      modifiedTime?: string(name='ModifiedTime', example='2017-01-11T12:00:00Z'),
      projectId?: string(name='ProjectId', example='****fddd7748b58bf1d47e95****'),
      projectType?: string(name='ProjectType', example='EditingProject'),
      status?: string(name='Status', example='Produced'),
      templateType?: string(name='TemplateType', example='Timeline'),
      title?: string(name='Title'),
    }
  ](name='ProjectList'),
  requestId?: string(name='RequestId', description='Id of the request', example='*****ACB-44F2-5F2D-88D7-1283E70*****'),
}

model ListEditingProjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEditingProjectsResponseBody(name='body'),
}

/**
 * @summary 获取云剪辑工程列表
 *
 * @param request ListEditingProjectsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEditingProjectsResponse
 */
async function listEditingProjectsWithOptions(request: ListEditingProjectsRequest, runtime: Util.RuntimeOptions): ListEditingProjectsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.createSource)) {
    query['CreateSource'] = request.createSource;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.projectType)) {
    query['ProjectType'] = request.projectType;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEditingProjects',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取云剪辑工程列表
 *
 * @param request ListEditingProjectsRequest
 * @return ListEditingProjectsResponse
 */
async function listEditingProjects(request: ListEditingProjectsRequest): ListEditingProjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEditingProjectsWithOptions(request, runtime);
}

model ListLiveRecordFilesRequest {
  endTime?: string(name='EndTime', example='2017-12-22T08:00:00Z'),
  jobIds?: [ string ](name='JobIds'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  recordFormat?: string(name='RecordFormat', example='m3u8'),
  sortBy?: string(name='SortBy', example='asc'),
  startTime?: string(name='StartTime', example='2017-12-21T08:00:01Z'),
}

model ListLiveRecordFilesResponseBody = {
  files?: [ 
    {
      createTime?: string(name='CreateTime', example='2016-05-27T09:40:56Z'),
      duration?: float(name='Duration', example='100.0'),
      endTime?: string(name='EndTime', example='2015-12-01T07:36:10Z'),
      format?: string(name='Format', example='m3u8'),
      height?: int32(name='Height', example='640'),
      jobId?: string(name='JobId', example='c4d7f0a4-b506-43f9-8de3-07732c3f****'),
      jobName?: string(name='JobName', example='LiveRecordJob***'),
      recordId?: string(name='RecordId', example='c4d7f0a4-b506-43f9-8de3-07732c3f****'),
      recordOutput?: string(name='RecordOutput', example='{ "Type": "oss", "Endpoint":"oss-cn-shanghai.aliyuncs.com", "Bucket": "test-bucket" }'),
      recordUrl?: string(name='RecordUrl'),
      startTime?: string(name='StartTime', example='2015-12-01T07:36:00Z'),
      streamUrl?: string(name='StreamUrl', example='LiveStream***'),
      width?: int32(name='Width', example='480'),
    }
  ](name='Files'),
  pageNo?: long(name='PageNo', example='1'),
  pageSize?: string(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='DE24625C-7C0F-4020-8448-****'),
  sortBy?: string(name='SortBy', example='asc'),
  totalCount?: string(name='TotalCount', example='100'),
}

model ListLiveRecordFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLiveRecordFilesResponseBody(name='body'),
}

/**
 * @summary 查询录制文件
 *
 * @param request ListLiveRecordFilesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListLiveRecordFilesResponse
 */
async function listLiveRecordFilesWithOptions(request: ListLiveRecordFilesRequest, runtime: Util.RuntimeOptions): ListLiveRecordFilesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLiveRecordFiles',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询录制文件
 *
 * @param request ListLiveRecordFilesRequest
 * @return ListLiveRecordFilesResponse
 */
async function listLiveRecordFiles(request: ListLiveRecordFilesRequest): ListLiveRecordFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLiveRecordFilesWithOptions(request, runtime);
}

model ListLiveRecordJobsRequest {
  endTime?: string(name='EndTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-07-11T08:00:00Z'),
  keyword?: string(name='Keyword', example='ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66'),
  pageNo?: long(name='PageNo', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  sortBy?: string(name='SortBy', example='desc'),
  startTime?: string(name='StartTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-07-15T08:00:00Z'),
  status?: string(name='Status', example='started'),
}

model ListLiveRecordJobsResponseBody = {
  liveRecordJobs?: [ 
    {
      createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段

Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-07-20T03:26:36Z'),
      jobId?: string(name='JobId', example='ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66'),
      name?: string(name='Name', description='代表资源名称的资源属性字段'),
      notifyUrl?: string(name='NotifyUrl', description='回调地址', example='https://example.com/imsnotify'),
      recordOutput?: {
        bucket?: string(name='Bucket', example='imsbucket1'),
        endpoint?: string(name='Endpoint', example='oss-cn-hangzhou.aliyuncs.com'),
        type?: string(name='Type', example='oss'),
      }(name='RecordOutput'),
      status?: string(name='Status', example='paused'),
      streamInput?: {
        type?: string(name='Type', example='rtmp'),
        url?: string(name='Url', example='rtmp://example-live.com/live/stream1'),
      }(name='StreamInput'),
      templateId?: string(name='TemplateId', description='录制模板ID', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66'),
      templateName?: string(name='TemplateName', example='test template'),
    }
  ](name='LiveRecordJobs'),
  pageNo?: long(name='PageNo', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='A27DFFA4-F272-5563-8363-CB0BC42740BA'),
  sortBy?: string(name='SortBy', example='desc'),
  totalCount?: long(name='TotalCount', example='180'),
}

model ListLiveRecordJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLiveRecordJobsResponseBody(name='body'),
}

/**
 * @summary 查询录制任务
 *
 * @param request ListLiveRecordJobsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListLiveRecordJobsResponse
 */
async function listLiveRecordJobsWithOptions(request: ListLiveRecordJobsRequest, runtime: Util.RuntimeOptions): ListLiveRecordJobsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLiveRecordJobs',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询录制任务
 *
 * @param request ListLiveRecordJobsRequest
 * @return ListLiveRecordJobsResponse
 */
async function listLiveRecordJobs(request: ListLiveRecordJobsRequest): ListLiveRecordJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLiveRecordJobsWithOptions(request, runtime);
}

model ListLiveRecordTemplatesRequest {
  keyword?: string(name='Keyword', example='test template'),
  pageNo?: long(name='PageNo', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  sortBy?: string(name='SortBy', example='desc'),
  templateIds?: [ string ](name='TemplateIds'),
  type?: string(name='Type', example='custom'),
}

model ListLiveRecordTemplatesResponseBody = {
  pageNo?: long(name='PageNo', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  recordTemplateList?: [ 
    {
      createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段

Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-07-20T02:48:58Z'),
      lastModified?: string(name='LastModified', description='最后修改时间

Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-07-20T03:26:36Z'),
      name?: string(name='Name', description='代表资源名称的资源属性字段', example='test template'),
      recordFormatList?: [ 
        {
          cycleDuration?: int32(name='CycleDuration', example='21600'),
          format?: string(name='Format', description='格式', example='m3u8'),
          ossObjectPrefix?: string(name='OssObjectPrefix', description='Oss对象名，不包含后缀', example='record/{JobId}/{Sequence}_{EscapedStartTime}_{EscapedEndTime}'),
          sliceDuration?: int32(name='SliceDuration', description='切片时长', example='30'),
          sliceOssObjectPrefix?: string(name='SliceOssObjectPrefix', description='切片Oss对象名，不包含后缀', example='record/{JobId}/{UnixTimestamp}_{Sequence}'),
        }
      ](name='RecordFormatList', description='录制格式'),
      templateId?: string(name='TemplateId', description='代表资源一级ID的资源属性字段', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66'),
      type?: string(name='Type', description='代表资源名称的资源属性字段', example='custom'),
    }
  ](name='RecordTemplateList'),
  requestId?: string(name='RequestId', example='BEA98A0C-7870-15FE-B96F-8880BB600A2C'),
  sortBy?: string(name='SortBy', example='desc'),
  totalCount?: long(name='TotalCount', example='5'),
}

model ListLiveRecordTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLiveRecordTemplatesResponseBody(name='body'),
}

/**
 * @summary 查询直播录制模板
 *
 * @param request ListLiveRecordTemplatesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListLiveRecordTemplatesResponse
 */
async function listLiveRecordTemplatesWithOptions(request: ListLiveRecordTemplatesRequest, runtime: Util.RuntimeOptions): ListLiveRecordTemplatesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLiveRecordTemplates',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询直播录制模板
 *
 * @param request ListLiveRecordTemplatesRequest
 * @return ListLiveRecordTemplatesResponse
 */
async function listLiveRecordTemplates(request: ListLiveRecordTemplatesRequest): ListLiveRecordTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLiveRecordTemplatesWithOptions(request, runtime);
}

model ListLiveSnapshotFilesRequest {
  endTime?: string(name='EndTime', description='This parameter is required.', example='2022-02-02T23:59:59Z'),
  jobId?: string(name='JobId', description='This parameter is required.', example='****a046-263c-3560-978a-fb287782****'),
  limit?: int32(name='Limit', example='10'),
  sortBy?: string(name='SortBy', example='desc'),
  startTime?: string(name='StartTime', description='This parameter is required.', example='2022-02-02T00:00:00Z'),
}

model ListLiveSnapshotFilesResponseBody = {
  fileList?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-02-02T22:22:22Z'),
      createTimestamp?: long(name='CreateTimestamp', example='1619503516000'),
      isOverlay?: boolean(name='IsOverlay', example='true'),
      ossBucket?: string(name='OssBucket', description='OSS bucket。', example='testbucket'),
      ossEndpoint?: string(name='OssEndpoint', example='oss-cn-shanghai.aliyuncs.com'),
      ossObject?: string(name='OssObject'),
    }
  ](name='FileList'),
  nextStartTime?: string(name='NextStartTime', example='2022-02-02T22:22:22Z'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model ListLiveSnapshotFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLiveSnapshotFilesResponseBody(name='body'),
}

/**
 * @summary 查询直播截图文件列表
 *
 * @param request ListLiveSnapshotFilesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListLiveSnapshotFilesResponse
 */
async function listLiveSnapshotFilesWithOptions(request: ListLiveSnapshotFilesRequest, runtime: Util.RuntimeOptions): ListLiveSnapshotFilesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLiveSnapshotFiles',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询直播截图文件列表
 *
 * @param request ListLiveSnapshotFilesRequest
 * @return ListLiveSnapshotFilesResponse
 */
async function listLiveSnapshotFiles(request: ListLiveSnapshotFilesRequest): ListLiveSnapshotFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLiveSnapshotFilesWithOptions(request, runtime);
}

model ListLiveSnapshotJobsRequest {
  endTime?: string(name='EndTime', example='2022-02-02T23:59:59Z'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  searchKeyWord?: string(name='SearchKeyWord', example='****a046-263c-3560-978a-fb287782****'),
  sortBy?: string(name='SortBy', example='desc'),
  startTime?: string(name='StartTime', example='2022-02-02T00:00:00Z'),
  status?: string(name='Status'),
}

model ListLiveSnapshotJobsResponseBody = {
  jobList?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-07-20T02:48:58Z'),
      jobId?: string(name='JobId', example='****a046-263c-3560-978a-fb287782****'),
      jobName?: string(name='JobName'),
      snapshotOutput?: {
        bucket?: string(name='Bucket', example='testbucket'),
        endpoint?: string(name='Endpoint', example='oss-cn-shanghai.aliyuncs.com'),
        storageType?: string(name='StorageType', example='oss'),
      }(name='SnapshotOutput'),
      status?: string(name='Status', example='started'),
      templateId?: string(name='TemplateId', example='****a046-263c-3560-978a-fb287666****'),
      templateName?: string(name='TemplateName'),
      timeInterval?: int32(name='TimeInterval', example='5'),
    }
  ](name='JobList'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  sortBy?: string(name='SortBy', example='desc'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListLiveSnapshotJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLiveSnapshotJobsResponseBody(name='body'),
}

/**
 * @summary 查询直播截图任务列表
 *
 * @param request ListLiveSnapshotJobsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListLiveSnapshotJobsResponse
 */
async function listLiveSnapshotJobsWithOptions(request: ListLiveSnapshotJobsRequest, runtime: Util.RuntimeOptions): ListLiveSnapshotJobsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLiveSnapshotJobs',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询直播截图任务列表
 *
 * @param request ListLiveSnapshotJobsRequest
 * @return ListLiveSnapshotJobsResponse
 */
async function listLiveSnapshotJobs(request: ListLiveSnapshotJobsRequest): ListLiveSnapshotJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLiveSnapshotJobsWithOptions(request, runtime);
}

model ListLiveSnapshotTemplatesRequest {
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  searchKeyWord?: string(name='SearchKeyWord', example='****a046-263c-3560-978a-fb287782****'),
  sortBy?: string(name='SortBy', example='desc'),
  templateIds?: [ string ](name='TemplateIds'),
  type?: string(name='Type', example='custom'),
}

model ListLiveSnapshotTemplatesResponseBody = {
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  sortBy?: string(name='SortBy', example='desc'),
  templateList?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-07-20T02:48:58Z'),
      templateId?: string(name='TemplateId', example='****a046-263c-3560-978a-fb287782****'),
      templateName?: string(name='TemplateName'),
      timeInterval?: int32(name='TimeInterval', example='10'),
      type?: string(name='Type', example='custom'),
    }
  ](name='TemplateList'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListLiveSnapshotTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLiveSnapshotTemplatesResponseBody(name='body'),
}

/**
 * @summary 查询直播截图模板列表
 *
 * @param request ListLiveSnapshotTemplatesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListLiveSnapshotTemplatesResponse
 */
async function listLiveSnapshotTemplatesWithOptions(request: ListLiveSnapshotTemplatesRequest, runtime: Util.RuntimeOptions): ListLiveSnapshotTemplatesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLiveSnapshotTemplates',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询直播截图模板列表
 *
 * @param request ListLiveSnapshotTemplatesRequest
 * @return ListLiveSnapshotTemplatesResponse
 */
async function listLiveSnapshotTemplates(request: ListLiveSnapshotTemplatesRequest): ListLiveSnapshotTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLiveSnapshotTemplatesWithOptions(request, runtime);
}

model ListLiveTranscodeJobsRequest {
  keyWord?: string(name='KeyWord', example='24ecbb5c-4f98-4194-9400-f17102e27fc5'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  sortBy?: string(name='SortBy', example='asc'),
  startMode?: int32(name='StartMode', example='0'),
  status?: int32(name='Status', example='1'),
  type?: string(name='Type', example='normal'),
}

model ListLiveTranscodeJobsResponseBody = {
  jobList?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-07-20T02:48:58Z'),
      jobId?: string(name='JobId', example='****a046-263c-3560-978a-fb287782****'),
      name?: string(name='Name', example='mytask'),
      outputStream?: {
        streamInfos?: [ 
          {
            outputUrl?: string(name='OutputUrl', example='rtmp://mydomain/app/mytranscode1'),
            type?: string(name='Type', example='rtmp'),
          }
        ](name='StreamInfos'),
      }(name='OutputStream'),
      startMode?: int32(name='StartMode', example='0'),
      status?: int32(name='Status', example='1'),
      streamInput?: {
        inputUrl?: string(name='InputUrl', example='rtmp://mydomain/app/stream1'),
        type?: string(name='Type', example='rtmp'),
      }(name='StreamInput'),
      templateId?: string(name='TemplateId', example='****a046-263c-3560-978a-fb287666****'),
      templateName?: string(name='TemplateName'),
      templateType?: string(name='TemplateType', example='normal'),
    }
  ](name='JobList'),
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListLiveTranscodeJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLiveTranscodeJobsResponseBody(name='body'),
}

/**
 * @summary 查询转码任务列表
 *
 * @param request ListLiveTranscodeJobsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListLiveTranscodeJobsResponse
 */
async function listLiveTranscodeJobsWithOptions(request: ListLiveTranscodeJobsRequest, runtime: Util.RuntimeOptions): ListLiveTranscodeJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyWord)) {
    query['KeyWord'] = request.keyWord;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.startMode)) {
    query['StartMode'] = request.startMode;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLiveTranscodeJobs',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询转码任务列表
 *
 * @param request ListLiveTranscodeJobsRequest
 * @return ListLiveTranscodeJobsResponse
 */
async function listLiveTranscodeJobs(request: ListLiveTranscodeJobsRequest): ListLiveTranscodeJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLiveTranscodeJobsWithOptions(request, runtime);
}

model ListLiveTranscodeTemplatesRequest {
  category?: string(name='Category', example='customized'),
  keyWord?: string(name='KeyWord', example='my_template'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  sortBy?: string(name='SortBy', example='asc'),
  type?: string(name='Type', example='normal'),
  videoCodec?: string(name='VideoCodec', example='H.264'),
}

model ListLiveTranscodeTemplatesResponseBody = {
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
  templateContentList?: [ 
    {
      category?: string(name='Category', example='system'),
      createTime?: string(name='CreateTime', example='2022-07-20T03:26:36Z'),
      name?: string(name='Name', example='my_template'),
      templateConfig?: {
        audioParams?: {
          bitrate?: string(name='Bitrate', example='1000'),
          channels?: string(name='Channels', example='2'),
          codec?: string(name='Codec', example='AAC'),
          profile?: string(name='Profile', example='aac_low'),
          samplerate?: string(name='Samplerate', example='44100'),
        }(name='AudioParams'),
        videoParams?: {
          bitrate?: string(name='Bitrate', example='2500'),
          codec?: string(name='Codec', example='264'),
          fps?: string(name='Fps', example='30'),
          gop?: string(name='Gop', example='1000'),
          height?: string(name='Height', example='1280'),
          profile?: string(name='Profile', example='3'),
          width?: string(name='Width', example='720'),
        }(name='VideoParams'),
      }(name='TemplateConfig'),
      templateId?: string(name='TemplateId', example='9b1571b513cb44f7a1ba6ae561ff46f7'),
      type?: string(name='Type', example='normal'),
    }
  ](name='TemplateContentList'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListLiveTranscodeTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLiveTranscodeTemplatesResponseBody(name='body'),
}

/**
 * @summary 查询转码模版列表
 *
 * @param request ListLiveTranscodeTemplatesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListLiveTranscodeTemplatesResponse
 */
async function listLiveTranscodeTemplatesWithOptions(request: ListLiveTranscodeTemplatesRequest, runtime: Util.RuntimeOptions): ListLiveTranscodeTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.keyWord)) {
    query['KeyWord'] = request.keyWord;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.videoCodec)) {
    query['VideoCodec'] = request.videoCodec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLiveTranscodeTemplates',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询转码模版列表
 *
 * @param request ListLiveTranscodeTemplatesRequest
 * @return ListLiveTranscodeTemplatesResponse
 */
async function listLiveTranscodeTemplates(request: ListLiveTranscodeTemplatesRequest): ListLiveTranscodeTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLiveTranscodeTemplatesWithOptions(request, runtime);
}

model ListMediaBasicInfosRequest {
  businessType?: string(name='BusinessType', example='opening'),
  endTime?: string(name='EndTime', example='2020-12-20T13:00:00Z'),
  includeFileBasicInfo?: boolean(name='IncludeFileBasicInfo', example='true'),
  maxResults?: int32(name='MaxResults', example='5'),
  mediaId?: string(name='MediaId', example='****019b82e24b37a1c2958dec38****'),
  mediaType?: string(name='MediaType', example='video'),
  nextToken?: string(name='NextToken', example='pSa1SQ0wCe5pzVrQ6mWZEw=='),
  sortBy?: string(name='SortBy', example='desc'),
  source?: string(name='Source', example='oss'),
  startTime?: string(name='StartTime', example='2020-12-20T12:00:00Z'),
  status?: string(name='Status', example='Normal'),
}

model ListMediaBasicInfosResponseBody = {
  maxResults?: int32(name='MaxResults', example='2'),
  mediaInfos?: [ 
    {
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', example='1912.13'),
            createTime?: string(name='CreateTime', example='2021-01-08T16:52:04Z'),
            duration?: string(name='Duration', example='60.00000'),
            fileName?: string(name='FileName', example='example.mp4'),
            fileSize?: string(name='FileSize', example='14340962'),
            fileStatus?: string(name='FileStatus', example='Normal'),
            fileType?: string(name='FileType', example='source_file'),
            fileUrl?: string(name='FileUrl', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example2.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
            formatName?: string(name='FormatName', example='mov,mp4,m4a,3gp,3g2,mj2'),
            height?: string(name='Height', example='720'),
            modifiedTime?: string(name='ModifiedTime', example='2021-01-08T16:52:07Z'),
            region?: string(name='Region', example='cn-shanghai'),
            width?: string(name='Width', example='1280'),
          }(name='FileBasicInfo'),
        }
      ](name='FileInfoList', description='FileInfos'),
      mediaBasicInfo?: {
        biz?: string(name='Biz', example='ICE'),
        businessType?: string(name='BusinessType', example='opening'),
        cateId?: long(name='CateId', example='3049'),
        category?: string(name='Category'),
        coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
        createTime?: string(name='CreateTime', example='2021-01-08T16:52:04Z'),
        deletedTime?: string(name='DeletedTime', example='2021-01-08T16:52:07Z'),
        description?: string(name='Description'),
        inputURL?: string(name='InputURL', example='https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4'),
        mediaId?: string(name='MediaId', example='****019b82e24b37a1c2958dec38****'),
        mediaTags?: string(name='MediaTags', example='tags,tags2'),
        mediaType?: string(name='MediaType', example='video'),
        modifiedTime?: string(name='ModifiedTime', example='2021-01-08T16:52:07Z'),
        referenceId?: string(name='ReferenceId', example='123-123'),
        snapshots?: string(name='Snapshots', example='[{"bucket":"example-bucket","count":"3","iceJobId":"******f48f0e4154976b2b8c45******","location":"oss-cn-beijing","snapshotRegular":"example.jpg","templateId":"******e6a6440b29eb60bd7c******"}]'),
        source?: string(name='Source', example='oss'),
        spriteImages?: string(name='SpriteImages', example='[{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]'),
        status?: string(name='Status', example='Normal'),
        title?: string(name='Title'),
        transcodeStatus?: string(name='TranscodeStatus', example='Init'),
        uploadSource?: string(name='UploadSource', example='general'),
        userData?: string(name='UserData', example='userData'),
      }(name='MediaBasicInfo', description='BasicInfo'),
      mediaId?: string(name='MediaId', example='****019b82e24b37a1c2958dec38****'),
    }
  ](name='MediaInfos'),
  nextToken?: string(name='NextToken', example='8EqYpQbZ6Eh7+Zz8DxVYoQ=='),
  requestId?: string(name='RequestId', example='******B7-7F87-4792-BFE9-63CD21******'),
  totalCount?: long(name='TotalCount', example='4'),
}

model ListMediaBasicInfosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMediaBasicInfosResponseBody(name='body'),
}

/**
 * @summary 列出符合条件的媒资基础信息
 *
 * @param request ListMediaBasicInfosRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListMediaBasicInfosResponse
 */
async function listMediaBasicInfosWithOptions(request: ListMediaBasicInfosRequest, runtime: Util.RuntimeOptions): ListMediaBasicInfosResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.includeFileBasicInfo)) {
    query['IncludeFileBasicInfo'] = request.includeFileBasicInfo;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.mediaId)) {
    query['MediaId'] = request.mediaId;
  }
  if (!Util.isUnset(request.mediaType)) {
    query['MediaType'] = request.mediaType;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMediaBasicInfos',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列出符合条件的媒资基础信息
 *
 * @param request ListMediaBasicInfosRequest
 * @return ListMediaBasicInfosResponse
 */
async function listMediaBasicInfos(request: ListMediaBasicInfosRequest): ListMediaBasicInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMediaBasicInfosWithOptions(request, runtime);
}

model ListMediaInfoJobsRequest {
  endOfCreateTime?: string(name='EndOfCreateTime', example='2022-07-15T00:00:00Z'),
  jobId?: string(name='JobId', example='7b38a5d86f1e47838927b6e7ccb11cbe'),
  nextPageToken?: string(name='NextPageToken', example='ab4802364a2e49208c99efab82dfa8e8'),
  orderBy?: string(name='OrderBy', example='CreateTimeDesc'),
  pageSize?: int32(name='PageSize', example='10'),
  startOfCreateTime?: string(name='StartOfCreateTime', example='2022-07-01T00:00:00Z'),
  status?: string(name='Status', example='Success'),
}

model ListMediaInfoJobsResponseBody = {
  jobs?: [ 
    {
      async?: boolean(name='Async', example='true'),
      finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
      input?: {
        media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
        type?: string(name='Type', example='OSS'),
      }(name='Input'),
      jobId?: string(name='JobId', example='ab4802364a2e49208c99efab82dfa8e8'),
      mediaInfoProperty?: {
        audioStreamInfoList?: [ 
          {
            bitrate?: string(name='Bitrate', example='0.f'),
            channelLayout?: string(name='ChannelLayout', example='stereo'),
            channels?: string(name='Channels', example='2'),
            codecLongName?: string(name='CodecLongName', example='AAC (Advanced Audio Coding)'),
            codecName?: string(name='CodecName', example='aac'),
            codecTag?: string(name='CodecTag', example='0x000f'),
            codecTagString?: string(name='CodecTagString', example='[15][0][0][0]'),
            codecTimeBase?: string(name='CodecTimeBase', example='1/44100'),
            duration?: string(name='Duration', example='403.039989'),
            index?: string(name='Index', example='1'),
            lang?: string(name='Lang', example='cn'),
            sampleFmt?: string(name='SampleFmt', example='fltp'),
            sampleRate?: string(name='SampleRate', example='44100'),
            startTime?: string(name='StartTime', example='1.473556'),
            timebase?: string(name='Timebase', example='1/90000'),
          }
        ](name='AudioStreamInfoList'),
        fileBasicInfo?: {
          bitrate?: string(name='Bitrate', example='888.563'),
          duration?: string(name='Duration', example='403.039999'),
          fileName?: string(name='FileName', example='file.m3u8'),
          fileSize?: string(name='FileSize', example='31737'),
          fileStatus?: string(name='FileStatus', example='Normal'),
          fileType?: string(name='FileType', example='source_file'),
          fileUrl?: string(name='FileUrl', example='http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8'),
          formatName?: string(name='FormatName', example='hls,applehttp'),
          height?: string(name='Height', example='478'),
          mediaId?: string(name='MediaId', example='4765337007f571edbfdf81848c016303'),
          region?: string(name='Region', example='cn-shanghai'),
          width?: string(name='Width', example='848'),
        }(name='FileBasicInfo'),
        videoStreamInfoList?: [ 
          {
            avgFps?: string(name='Avg_fps', example='25.0'),
            bitRate?: string(name='Bit_rate', example='888.563'),
            codecLongName?: string(name='Codec_long_name', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
            codecName?: string(name='Codec_name', example='h264'),
            codecTag?: string(name='Codec_tag', example='0x001b'),
            codecTagString?: string(name='Codec_tag_string', example='[27][0][0][0]'),
            codecTimeBase?: string(name='Codec_time_base', example='1/50'),
            dar?: string(name='Dar', example='16:9'),
            duration?: string(name='Duration', example='403.039989'),
            fps?: string(name='Fps', example='25.0'),
            hasBFrames?: string(name='Has_b_frames', example='2'),
            height?: string(name='Height', example='478'),
            index?: string(name='Index', example='0'),
            lang?: string(name='Lang', example='cn'),
            level?: string(name='Level', example='31'),
            numFrames?: string(name='NumFrames', example='10040'),
            pixFmt?: string(name='PixFmt', example='yuv420p'),
            profile?: string(name='Profile', example='High'),
            rotate?: string(name='Rotate', example='0'),
            sar?: string(name='Sar', example='478:477'),
            startTime?: string(name='Start_time', example='1.473556'),
            timeBase?: string(name='Time_base', example='1/90000'),
            width?: string(name='Width', example='848'),
          }
        ](name='VideoStreamInfoList'),
      }(name='MediaInfoProperty'),
      name?: string(name='Name', example='job-name'),
      requestId?: string(name='RequestId', example='4879B9DE-E4B6-19DC-91F5-9D5F4DCE4168'),
      scheduleConfig?: {
        pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
        priority?: int32(name='Priority', example='5'),
      }(name='ScheduleConfig'),
      status?: string(name='Status', example='Init'),
      submitResultJson?: map[string]any(name='SubmitResultJson'),
      submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
      triggerSource?: string(name='TriggerSource', example='API'),
      userData?: string(name='UserData', example='user-data'),
    }
  ](name='Jobs'),
  nextPageToken?: string(name='NextPageToken', example='019daf5780f74831b0e1a767c9f1c178'),
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model ListMediaInfoJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMediaInfoJobsResponseBody(name='body'),
}

/**
 * @param request ListMediaInfoJobsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListMediaInfoJobsResponse
 */
async function listMediaInfoJobsWithOptions(request: ListMediaInfoJobsRequest, runtime: Util.RuntimeOptions): ListMediaInfoJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endOfCreateTime)) {
    query['EndOfCreateTime'] = request.endOfCreateTime;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.nextPageToken)) {
    query['NextPageToken'] = request.nextPageToken;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startOfCreateTime)) {
    query['StartOfCreateTime'] = request.startOfCreateTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMediaInfoJobs',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request ListMediaInfoJobsRequest
 * @return ListMediaInfoJobsResponse
 */
async function listMediaInfoJobs(request: ListMediaInfoJobsRequest): ListMediaInfoJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMediaInfoJobsWithOptions(request, runtime);
}

model ListMediaMarksRequest {
  mediaId?: string(name='MediaId', example='411bed50018971edb60b0764a0ec6***'),
  mediaMarkIds?: string(name='MediaMarkIds', example='mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60'),
}

model ListMediaMarksResponseBody = {
  mediaId?: string(name='MediaId', example='******b48fb04483915d4f2cd8******'),
  mediaMarks?: string(name='MediaMarks'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model ListMediaMarksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMediaMarksResponseBody(name='body'),
}

/**
 * @summary 获取媒资的标注信息
 *
 * @param request ListMediaMarksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListMediaMarksResponse
 */
async function listMediaMarksWithOptions(request: ListMediaMarksRequest, runtime: Util.RuntimeOptions): ListMediaMarksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mediaId)) {
    query['MediaId'] = request.mediaId;
  }
  if (!Util.isUnset(request.mediaMarkIds)) {
    query['MediaMarkIds'] = request.mediaMarkIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMediaMarks',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取媒资的标注信息
 *
 * @param request ListMediaMarksRequest
 * @return ListMediaMarksResponse
 */
async function listMediaMarks(request: ListMediaMarksRequest): ListMediaMarksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMediaMarksWithOptions(request, runtime);
}

model ListMediaProducingJobsRequest {
  endTime?: string(name='EndTime', example='2022-02-02T23:59:59Z'),
  jobType?: string(name='JobType', example='EditingJob'),
  keyword?: string(name='Keyword', example='****20b48fb04483915d4f2cd8ac****'),
  masterJobId?: string(name='MasterJobId', example='******8750b54e3c976a47da6f******'),
  maxResults?: int32(name='MaxResults', example='100'),
  nextToken?: string(name='NextToken', example='8EqYpQbZ6Eh7+Zz8DxVYoQ=='),
  sortBy?: string(name='SortBy', example='CreationTime:Desc'),
  startTime?: string(name='StartTime', example='2017-01-11T12:00:00Z'),
  status?: string(name='Status', example='Success'),
}

model ListMediaProducingJobsResponseBody = {
  maxResults?: string(name='MaxResults', example='100'),
  mediaProducingJobList?: [ 
    {
      clipsParam?: string(name='ClipsParam'),
      code?: string(name='Code', example='Success'),
      completeTime?: string(name='CompleteTime', example='2022-03-21T16:40:30Z'),
      createTime?: string(name='CreateTime', example='2022-03-21T16:40:00Z'),
      duration?: float(name='Duration', example='15.5'),
      jobId?: string(name='JobId', example='******8750b54e3c976a47da6f******'),
      mediaId?: string(name='MediaId', example='0ce4ea70f52471edab61f7e7d6786302'),
      mediaURL?: string(name='MediaURL', example='http://your-bucket.oss-cn-shanghai.aliyuncs.com/your-video.mp4'),
      message?: string(name='Message'),
      modifiedTime?: string(name='ModifiedTime', example='2022-03-21T16:41:00Z'),
      projectId?: string(name='ProjectId', example='******faa3b542f5a6135217e3******'),
      status?: string(name='Status', example='Sucess'),
      templateId?: string(name='TemplateId', example='cb786a39c5d44cecb23d8c864facffc1'),
      userData?: string(name='UserData'),
    }
  ](name='MediaProducingJobList'),
  nextToken?: string(name='NextToken', example='8EqYpQbZ6Eh7+Zz8DxVYoQ=='),
  requestId?: string(name='RequestId', description='Id of the request', example='******11-DB8D-4A9A-875B-275798******'),
}

model ListMediaProducingJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMediaProducingJobsResponseBody(name='body'),
}

/**
 * @summary 列出合成任务列表
 *
 * @param request ListMediaProducingJobsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListMediaProducingJobsResponse
 */
async function listMediaProducingJobsWithOptions(request: ListMediaProducingJobsRequest, runtime: Util.RuntimeOptions): ListMediaProducingJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.jobType)) {
    query['JobType'] = request.jobType;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.masterJobId)) {
    query['MasterJobId'] = request.masterJobId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMediaProducingJobs',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列出合成任务列表
 *
 * @param request ListMediaProducingJobsRequest
 * @return ListMediaProducingJobsResponse
 */
async function listMediaProducingJobs(request: ListMediaProducingJobsRequest): ListMediaProducingJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMediaProducingJobsWithOptions(request, runtime);
}

model ListPackageJobsRequest {
  endOfCreateTime?: string(name='EndOfCreateTime', example='2022-07-15T00:00:00Z'),
  jobId?: string(name='JobId', example='7b38a5d86f1e47838927b6e7ccb11cbe'),
  nextPageToken?: string(name='NextPageToken', example='ab4802364a2e49208c99efab82dfa8e8'),
  orderBy?: string(name='OrderBy', example='CreateTimeDesc'),
  pageSize?: int32(name='PageSize', example='10'),
  startOfCreateTime?: string(name='StartOfCreateTime', example='2022-07-01T00:00:00Z'),
  status?: string(name='Status', example='Success'),
}

model ListPackageJobsResponseBody = {
  packageJobList?: {
    nextPageToken?: string(name='NextPageToken', example='019daf5780f74831b0e1a767c9f1c178'),
    packageJobs?: [ 
      {
        code?: string(name='Code', example='InvalidParameter'),
        createTime?: string(name='CreateTime', example='2022-07-07T14:00:32Z'),
        finishTime?: string(name='FinishTime', example='2022-07-07T15:00:32Z'),
        inputs?: [ 
          {
            input?: {
              media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
              type?: string(name='Type', example='OSS'),
            }(name='Input'),
          }
        ](name='Inputs'),
        jobId?: string(name='JobId', example='7b38a5d86f1e47838927b6e7ccb11cbe'),
        message?: string(name='Message', example='Resource content bad.'),
        modifiedTime?: string(name='ModifiedTime', example='2022-07-07T15:00:32Z'),
        name?: string(name='Name', example='job-name'),
        output?: {
          media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
          type?: string(name='Type', example='OSS'),
        }(name='Output'),
        pipelineId?: string(name='PipelineId', example='5b40833e4c3e4d4e95a866abb9a42510'),
        priority?: int32(name='Priority', example='6'),
        status?: string(name='Status', example='Success'),
        submitTime?: string(name='SubmitTime', example='2022-07-07T14:00:32Z'),
        triggerSource?: string(name='TriggerSource', example='API'),
        userData?: string(name='UserData', example='{"param": "value"}'),
      }
    ](name='PackageJobs'),
  }(name='PackageJobList'),
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model ListPackageJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPackageJobsResponseBody(name='body'),
}

/**
 * @summary 获取打包任务列表
 *
 * @param request ListPackageJobsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPackageJobsResponse
 */
async function listPackageJobsWithOptions(request: ListPackageJobsRequest, runtime: Util.RuntimeOptions): ListPackageJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endOfCreateTime)) {
    query['EndOfCreateTime'] = request.endOfCreateTime;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.nextPageToken)) {
    query['NextPageToken'] = request.nextPageToken;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startOfCreateTime)) {
    query['StartOfCreateTime'] = request.startOfCreateTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPackageJobs',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取打包任务列表
 *
 * @param request ListPackageJobsRequest
 * @return ListPackageJobsResponse
 */
async function listPackageJobs(request: ListPackageJobsRequest): ListPackageJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPackageJobsWithOptions(request, runtime);
}

model ListPipelinesRequest {
  speed?: string(name='Speed', example='Standard'),
}

model ListPipelinesResponseBody = {
  pipelineList?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
      modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:17:54Z'),
      name?: string(name='Name', example='test-pipeline'),
      pipelineId?: string(name='PipelineId', example='****20b48fb04483915d4f2cd8ac****'),
      priority?: int32(name='Priority', example='6'),
      speed?: string(name='Speed', example='Standard'),
      status?: string(name='Status', example='Active'),
    }
  ](name='PipelineList'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model ListPipelinesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPipelinesResponseBody(name='body'),
}

/**
 * @summary 获取管道配置列表
 *
 * @param request ListPipelinesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPipelinesResponse
 */
async function listPipelinesWithOptions(request: ListPipelinesRequest, runtime: Util.RuntimeOptions): ListPipelinesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.speed)) {
    query['Speed'] = request.speed;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPipelines',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取管道配置列表
 *
 * @param request ListPipelinesRequest
 * @return ListPipelinesResponse
 */
async function listPipelines(request: ListPipelinesRequest): ListPipelinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPipelinesWithOptions(request, runtime);
}

model ListPublicMediaBasicInfosRequest {
  businessType?: string(name='BusinessType'),
  includeFileBasicInfo?: boolean(name='IncludeFileBasicInfo', example='true'),
  maxResults?: int32(name='MaxResults', example='5'),
  mediaTagId?: string(name='MediaTagId', example='ticker-atmosphere'),
  nextToken?: string(name='NextToken', example='pSa1SQ0wCe5pzVrQ6mWZEw=='),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListPublicMediaBasicInfosResponseBody = {
  maxResults?: int32(name='MaxResults', example='2'),
  mediaInfos?: [ 
    {
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', example='270112.12'),
            duration?: string(name='Duration', example='10.040000'),
            fileName?: string(name='FileName', example='example.mp4'),
            fileSize?: string(name='FileSize', example='338990717'),
            fileStatus?: string(name='FileStatus', example='Normal'),
            fileType?: string(name='FileType', example='source_file'),
            fileUrl?: string(name='FileUrl', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
            formatName?: string(name='FormatName', example='mov,mp4,m4a,3gp,3g2,mj2'),
            height?: string(name='Height', example='1080'),
            region?: string(name='Region', example='cn-shanghai'),
            width?: string(name='Width', example='1920'),
          }(name='FileBasicInfo'),
        }
      ](name='FileInfoList', description='FileInfos'),
      mediaBasicInfo?: {
        businessType?: string(name='BusinessType', example='general'),
        category?: string(name='Category', example='video'),
        coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
        createTime?: string(name='CreateTime', example='2021-01-08T16:52:04Z'),
        deletedTime?: string(name='DeletedTime', example='2021-01-08T16:52:04Z'),
        description?: string(name='Description', example='description'),
        inputURL?: string(name='InputURL', example='https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4'),
        mediaId?: string(name='MediaId', description='MediaId', example='****019b82e24b37a1c2958dec38****'),
        mediaTags?: string(name='MediaTags', example='sticker-daily'),
        mediaType?: string(name='MediaType', example='video'),
        modifiedTime?: string(name='ModifiedTime', example='2021-01-08T16:52:04Z'),
        snapshots?: string(name='Snapshots', example='null'),
        source?: string(name='Source', example='oss'),
        status?: string(name='Status', example='Normal'),
        title?: string(name='Title'),
        transcodeStatus?: string(name='TranscodeStatus', example='Init'),
        userData?: string(name='UserData', example='userData'),
      }(name='MediaBasicInfo', description='BasicInfo'),
      mediaId?: string(name='MediaId', example='****019b82e24b37a1c2958dec38****'),
    }
  ](name='MediaInfos'),
  nextToken?: string(name='NextToken', example='8EqYpQbZ6Eh7+Zz8DxVYoQ=='),
  requestId?: string(name='RequestId', example='******B7-7F87-4792-BFE9-63CD21******'),
  totalCount?: long(name='TotalCount', example='2'),
}

model ListPublicMediaBasicInfosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPublicMediaBasicInfosResponseBody(name='body'),
}

/**
 * @summary 列出公共素材库素材的基础信息
 *
 * @param request ListPublicMediaBasicInfosRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPublicMediaBasicInfosResponse
 */
async function listPublicMediaBasicInfosWithOptions(request: ListPublicMediaBasicInfosRequest, runtime: Util.RuntimeOptions): ListPublicMediaBasicInfosResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.includeFileBasicInfo)) {
    query['IncludeFileBasicInfo'] = request.includeFileBasicInfo;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.mediaTagId)) {
    query['MediaTagId'] = request.mediaTagId;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPublicMediaBasicInfos',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列出公共素材库素材的基础信息
 *
 * @param request ListPublicMediaBasicInfosRequest
 * @return ListPublicMediaBasicInfosResponse
 */
async function listPublicMediaBasicInfos(request: ListPublicMediaBasicInfosRequest): ListPublicMediaBasicInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPublicMediaBasicInfosWithOptions(request, runtime);
}

model ListSmartJobsRequest {
  jobState?: string(name='JobState', example='Finished'),
  jobType?: string(name='JobType', example='ASR'),
  maxResults?: long(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='****73f33c91-d59383e8280b****'),
  pageNo?: long(name='PageNo', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  sortBy?: string(name='SortBy', example='CreationTime:Desc'),
}

model ListSmartJobsResponseBody = {
  maxResults?: string(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='CBB6BC61D08'),
  requestId?: string(name='RequestId', example='****9262E3DA-07FA-4862-FCBB6BC61D08*****'),
  smartJobList?: [ 
    {
      createTime?: string(name='CreateTime', example='2020-12-26T04:11:10Z'),
      description?: string(name='Description', example='测试描述'),
      editingConfig?: string(name='EditingConfig', example='{"AudioConfig":{},"InputConfig":""}'),
      inputConfig?: {
        inputFile?: string(name='InputFile', example='oss://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4'),
        keyword?: string(name='Keyword', example='测试关键词'),
      }(name='InputConfig'),
      jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
      jobState?: string(name='JobState', example='Finished'),
      jobType?: string(name='JobType', example='ASR'),
      modifiedTime?: string(name='ModifiedTime', example='2020-12-26T04:11:10Z'),
      outputConfig?: {
        bucket?: string(name='Bucket', description='OSS Bucket', example='test-bucket'),
        object?: string(name='Object', description='OSS Object', example='test-object'),
      }(name='OutputConfig'),
      title?: string(name='Title', example='测试标题'),
      userData?: string(name='UserData', example='{"user":"data"}'),
      userId?: long(name='UserId', example='1084506228******'),
    }
  ](name='SmartJobList'),
  totalCount?: string(name='TotalCount', example='110'),
}

model ListSmartJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSmartJobsResponseBody(name='body'),
}

/**
 * @summary ListSmartJobs
 *
 * @param request ListSmartJobsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSmartJobsResponse
 */
async function listSmartJobsWithOptions(request: ListSmartJobsRequest, runtime: Util.RuntimeOptions): ListSmartJobsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSmartJobs',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary ListSmartJobs
 *
 * @param request ListSmartJobsRequest
 * @return ListSmartJobsResponse
 */
async function listSmartJobs(request: ListSmartJobsRequest): ListSmartJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSmartJobsWithOptions(request, runtime);
}

model ListSmartSysAvatarModelsRequest {
  pageNo?: long(name='PageNo', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  sdkVersion?: string(name='SdkVersion'),
}

model ListSmartSysAvatarModelsResponseBody = {
  requestId?: string(name='RequestId', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
  smartSysAvatarModelList?: [ 
    {
      avatarId?: string(name='AvatarId', example='yunqiao'),
      avatarName?: string(name='AvatarName'),
      bitrate?: int32(name='Bitrate'),
      coverUrl?: string(name='CoverUrl', example='http://ice-pub-media.myalicdn.com/smart/avatarModel/coverDemo/yunqiao.mp4'),
      height?: int32(name='Height'),
      outputMask?: boolean(name='OutputMask'),
      videoUrl?: string(name='VideoUrl', example='http://ice-pub-media.myalicdn.com/smart/avatarModel/videoDemo/yunqiao.mp4'),
      width?: int32(name='Width'),
    }
  ](name='SmartSysAvatarModelList'),
  totalCount?: int32(name='TotalCount', example='4'),
}

model ListSmartSysAvatarModelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSmartSysAvatarModelsResponseBody(name='body'),
}

/**
 * @summary 列出虚拟人官方模特配置
 *
 * @param request ListSmartSysAvatarModelsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSmartSysAvatarModelsResponse
 */
async function listSmartSysAvatarModelsWithOptions(request: ListSmartSysAvatarModelsRequest, runtime: Util.RuntimeOptions): ListSmartSysAvatarModelsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sdkVersion)) {
    query['SdkVersion'] = request.sdkVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSmartSysAvatarModels',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列出虚拟人官方模特配置
 *
 * @param request ListSmartSysAvatarModelsRequest
 * @return ListSmartSysAvatarModelsResponse
 */
async function listSmartSysAvatarModels(request: ListSmartSysAvatarModelsRequest): ListSmartSysAvatarModelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSmartSysAvatarModelsWithOptions(request, runtime);
}

model ListSmartVoiceGroupsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  voiceGroups?: [ 
    {
      type?: string(name='Type'),
      voiceList?: [ 
        {
          desc?: string(name='Desc'),
          name?: string(name='Name'),
          remark?: string(name='Remark'),
          supportSampleRate?: string(name='SupportSampleRate'),
          tag?: string(name='Tag'),
          voice?: string(name='Voice', example='zhitian'),
          voiceType?: string(name='VoiceType', example='Female'),
          voiceUrl?: string(name='VoiceUrl', example='https://***.com/zhiqing.mp3'),
        }
      ](name='VoiceList'),
    }
  ](name='VoiceGroups'),
}

model ListSmartVoiceGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSmartVoiceGroupsResponseBody(name='body'),
}

/**
 * @summary 列出智能语音发音人信息
 *
 * @param request ListSmartVoiceGroupsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSmartVoiceGroupsResponse
 */
async function listSmartVoiceGroupsWithOptions(runtime: Util.RuntimeOptions): ListSmartVoiceGroupsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListSmartVoiceGroups',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列出智能语音发音人信息
 *
 * @return ListSmartVoiceGroupsResponse
 */
async function listSmartVoiceGroups(): ListSmartVoiceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSmartVoiceGroupsWithOptions(runtime);
}

model ListSnapshotJobsRequest {
  endOfCreateTime?: string(name='EndOfCreateTime', example='2022-07-14T00:00:00Z'),
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  nextPageToken?: string(name='NextPageToken', example='****20b48fb04483915d4f2cd8ac****'),
  orderBy?: string(name='OrderBy', example='CreateTimeDesc'),
  pageSize?: int32(name='PageSize', example='20'),
  startOfCreateTime?: string(name='StartOfCreateTime', example='2022-07-12T00:00:00Z'),
  status?: string(name='Status', example='Success'),
}

model ListSnapshotJobsResponseBody = {
  jobs?: [ 
    {
      async?: boolean(name='Async', example='true'),
      count?: int32(name='Count', example='10'),
      createTime?: string(name='CreateTime', example='2022-07-12T16:17:54Z'),
      finishTime?: string(name='FinishTime', example='2022-07-12T16:30:54Z'),
      input?: {
        media?: string(name='Media', example='oss://bucket/object.mp4'),
        type?: string(name='Type', example='OSS'),
      }(name='Input'),
      jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
      modifiedTime?: string(name='ModifiedTime', example='2022-07-12T16:30:54Z'),
      name?: string(name='Name', example='SampleJob'),
      output?: {
        media?: string(name='Media', example='http://test-bucket.oss-cn-shanghai.aliyuncs.com/output-{Count}.jpg'),
        type?: string(name='Type', example='OSS'),
      }(name='Output'),
      pipelineId?: string(name='PipelineId', example='****20b48fb04483915d4f2cd8ac****'),
      status?: string(name='Status', example='Success'),
      submitTime?: string(name='SubmitTime', example='2022-07-12T16:17:54Z'),
      templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
      triggerSource?: string(name='TriggerSource', example='API'),
      type?: string(name='Type', example='Sprite'),
    }
  ](name='Jobs'),
  nextPageToken?: string(name='NextPageToken', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model ListSnapshotJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSnapshotJobsResponseBody(name='body'),
}

/**
 * @summary 查询截图任务列表接口
 *
 * @param request ListSnapshotJobsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSnapshotJobsResponse
 */
async function listSnapshotJobsWithOptions(request: ListSnapshotJobsRequest, runtime: Util.RuntimeOptions): ListSnapshotJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endOfCreateTime)) {
    query['EndOfCreateTime'] = request.endOfCreateTime;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.nextPageToken)) {
    query['NextPageToken'] = request.nextPageToken;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startOfCreateTime)) {
    query['StartOfCreateTime'] = request.startOfCreateTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSnapshotJobs',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询截图任务列表接口
 *
 * @param request ListSnapshotJobsRequest
 * @return ListSnapshotJobsResponse
 */
async function listSnapshotJobs(request: ListSnapshotJobsRequest): ListSnapshotJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSnapshotJobsWithOptions(request, runtime);
}

model ListSystemTemplatesRequest {
  name?: string(name='Name', example='SampleTemplate'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  status?: string(name='Status', example='Normal'),
  subtype?: string(name='Subtype', example='1'),
  templateId?: string(name='TemplateId', example='****96e8864746a0b6f3****'),
  type?: string(name='Type', description='This parameter is required.', example='1,2'),
}

model ListSystemTemplatesResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  systemTemplateList?: [ 
    {
      status?: string(name='Status', example='Normal'),
      subtype?: int32(name='Subtype', example='1'),
      subtypeName?: string(name='SubtypeName', example='Remux'),
      templateConfig?: string(name='TemplateConfig', example='{"Container":{"Format":"flv"},"Video":{},"Audio":{}}'),
      templateId?: string(name='TemplateId', example='S00000001-000000'),
      templateName?: string(name='TemplateName', example='FLV-COPY'),
      type?: int32(name='Type', example='1'),
      typeName?: string(name='TypeName', example='TranscodeTemplate'),
    }
  ](name='SystemTemplateList'),
  total?: int32(name='Total', example='20'),
}

model ListSystemTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSystemTemplatesResponseBody(name='body'),
}

/**
 * @summary 获取媒体处理系统模板列表
 *
 * @param request ListSystemTemplatesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSystemTemplatesResponse
 */
async function listSystemTemplatesWithOptions(request: ListSystemTemplatesRequest, runtime: Util.RuntimeOptions): ListSystemTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.subtype)) {
    query['Subtype'] = request.subtype;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSystemTemplates',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取媒体处理系统模板列表
 *
 * @param request ListSystemTemplatesRequest
 * @return ListSystemTemplatesResponse
 */
async function listSystemTemplates(request: ListSystemTemplatesRequest): ListSystemTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSystemTemplatesWithOptions(request, runtime);
}

model ListTemplatesRequest {
  createSource?: string(name='CreateSource', example='OpenAPI'),
  keyword?: string(name='Keyword', example='****20b48fb04483915d4f2cd8ac****'),
  pageNo?: long(name='PageNo', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  sortType?: string(name='SortType', example='CreationTime:Desc'),
  status?: string(name='Status', example='Available'),
  type?: string(name='Type', example='Timeline'),
}

model ListTemplatesResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  templates?: [ 
    {
      clipsParam?: string(name='ClipsParam', description='ClipsParam', example='{"Media1":"mediaId","Text1":"text"}'),
      config?: string(name='Config', example='参考Timeline模板配置详解'),
      coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg'),
      createSource?: string(name='CreateSource', example='OpenAPI'),
      creationTime?: string(name='CreationTime', example='2020-12-26T04:11:10Z'),
      modifiedSource?: string(name='ModifiedSource', example='OpenAPI'),
      modifiedTime?: string(name='ModifiedTime', example='2020-12-26T04:11:10Z'),
      name?: string(name='Name', example='视频添加水印模板'),
      previewMedia?: string(name='PreviewMedia', example='****20b48fb04483915d4f2cd8ac****'),
      previewMediaStatus?: string(name='PreviewMediaStatus', example='Normal'),
      status?: string(name='Status', example='Available'),
      templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
      type?: string(name='Type', example='Timeline'),
    }
  ](name='Templates'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTemplatesResponseBody(name='body'),
}

/**
 * @summary ListTemplates
 *
 * @param request ListTemplatesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTemplatesResponse
 */
async function listTemplatesWithOptions(request: ListTemplatesRequest, runtime: Util.RuntimeOptions): ListTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.createSource)) {
    query['CreateSource'] = request.createSource;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortType)) {
    query['SortType'] = request.sortType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTemplates',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary ListTemplates
 *
 * @param request ListTemplatesRequest
 * @return ListTemplatesResponse
 */
async function listTemplates(request: ListTemplatesRequest): ListTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTemplatesWithOptions(request, runtime);
}

model ListTranscodeJobsRequest {
  endOfCreateTime?: string(name='EndOfCreateTime', example='2022-07-15T00:00:00Z'),
  nextPageToken?: string(name='NextPageToken', example='ab4802364a2e49208c99efab82dfa8e8'),
  orderBy?: string(name='OrderBy', example='CreateTimeDesc'),
  pageSize?: int32(name='PageSize', example='10'),
  parentJobId?: string(name='ParentJobId', example='7b38a5d86f1e47838927b6e7ccb11cbe'),
  startOfCreateTime?: string(name='StartOfCreateTime', example='2022-07-01T00:00:00Z'),
  status?: string(name='Status', example='Success'),
}

model ListTranscodeJobsResponseBody = {
  jobs?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-01-12T08:49:41Z'),
      finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
      inputGroup?: [ 
        {
          inputUrl?: string(name='InputUrl'),
          media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
          type?: string(name='Type', example='OSS'),
        }
      ](name='InputGroup'),
      jobCount?: int32(name='JobCount', example='1'),
      name?: string(name='Name', example='transcode-job'),
      outputGroup?: [ 
        {
          output?: {
            media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
            outputUrl?: string(name='OutputUrl'),
            type?: string(name='Type', example='OSS'),
          }(name='Output'),
          processConfig?: {
            combineConfigs?: [ 
              {
                audioIndex?: string(name='AudioIndex', description='This parameter is required.', example='0 或 exclude'),
                duration?: double(name='Duration', example='20.0'),
                start?: double(name='Start', example='0.0'),
                videoIndex?: string(name='VideoIndex', description='This parameter is required.', example='0 或 exclude'),
              }
            ](name='CombineConfigs'),
            encryption?: {
              cipherText?: string(name='CipherText', example='MTYi00NDU0LTg5O****'),
              decryptKeyUri?: string(name='DecryptKeyUri', example='https://sample.com/path?CipherText=MTYi00NDU0LTg5O****'),
              encryptType?: string(name='EncryptType', example='PrivateEncryption'),
            }(name='Encryption'),
            imageWatermarks?: [ 
              {
                overwriteParams?: {
                  dx?: string(name='Dx', example='10'),
                  dy?: string(name='Dy', example='10'),
                  file?: {
                    media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                    type?: string(name='Type', example='OSS'),
                  }(name='File'),
                  height?: string(name='Height', example='32'),
                  referPos?: string(name='ReferPos', example='TopLeft'),
                  timeline?: {
                    duration?: string(name='Duration', example='ToEND'),
                    start?: string(name='Start', example='00:00:05'),
                  }(name='Timeline'),
                  width?: string(name='Width', example='32'),
                }(name='OverwriteParams'),
                templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
              }
            ](name='ImageWatermarks'),
            isInheritTags?: boolean(name='IsInheritTags'),
            subtitles?: [ 
              {
                overwriteParams?: {
                  charEnc?: string(name='CharEnc', example='UTF-8'),
                  file?: {
                    media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                    type?: string(name='Type', example='OSS'),
                  }(name='File'),
                  format?: string(name='Format', example='vtt'),
                }(name='OverwriteParams'),
                templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
              }
            ](name='Subtitles'),
            textWatermarks?: [ 
              {
                overwriteParams?: {
                  adaptive?: string(name='Adaptive', example='false'),
                  borderColor?: string(name='BorderColor', example='#006400'),
                  borderWidth?: int32(name='BorderWidth', example='0'),
                  content?: string(name='Content', example='测试水印'),
                  fontAlpha?: string(name='FontAlpha', example='1.0'),
                  fontColor?: string(name='FontColor', example='#006400'),
                  fontName?: string(name='FontName', example='SimSun'),
                  fontSize?: int32(name='FontSize', example='16'),
                  left?: string(name='Left', example='10'),
                  top?: string(name='Top', example='10'),
                }(name='OverwriteParams'),
                templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
              }
            ](name='TextWatermarks'),
            transcode?: {
              overwriteParams?: {
                audio?: {
                  bitrate?: string(name='Bitrate', example='128'),
                  channels?: string(name='Channels', example='2'),
                  codec?: string(name='Codec', example='AAC'),
                  profile?: string(name='Profile', example='aac_low'),
                  remove?: string(name='Remove', example='false'),
                  samplerate?: string(name='Samplerate', example='44100'),
                  volume?: {
                    integratedLoudnessTarget?: string(name='IntegratedLoudnessTarget', example='-6'),
                    loudnessRangeTarget?: string(name='LoudnessRangeTarget', example='8'),
                    method?: string(name='Method', example='auto'),
                    truePeak?: string(name='TruePeak', example='-1'),
                  }(name='Volume'),
                }(name='Audio'),
                container?: {
                  format?: string(name='Format', example='mp4'),
                }(name='Container'),
                muxConfig?: {
                  segment?: {
                    duration?: string(name='Duration', example='10'),
                    forceSegTime?: string(name='ForceSegTime', example='2,3'),
                  }(name='Segment'),
                }(name='MuxConfig'),
                tags?: map[string]string(name='Tags'),
                video?: {
                  abrMax?: string(name='AbrMax', example='6000'),
                  bitrate?: string(name='Bitrate', example='3000'),
                  bufsize?: string(name='Bufsize', example='6000'),
                  codec?: string(name='Codec', example='H.264'),
                  crf?: string(name='Crf', example='23'),
                  crop?: string(name='Crop', example='1280:800:0:140'),
                  fps?: string(name='Fps', example='25'),
                  gop?: string(name='Gop', example='250'),
                  height?: string(name='Height', example='1080'),
                  longShortMode?: string(name='LongShortMode', example='false'),
                  maxrate?: string(name='Maxrate', example='9000'),
                  pad?: string(name='Pad', example='1280:800:0:140'),
                  pixFmt?: string(name='PixFmt', example='yuv420p'),
                  preset?: string(name='Preset', example='medium'),
                  profile?: string(name='Profile', example='Main'),
                  remove?: string(name='Remove', example='false'),
                  scanMode?: string(name='ScanMode', example='progressive'),
                  width?: string(name='Width', example='1920'),
                }(name='Video'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }(name='Transcode'),
          }(name='ProcessConfig'),
        }
      ](name='OutputGroup'),
      parentJobId?: string(name='ParentJobId', example='8b2198504dd340b7b3c9842a74fc9baa'),
      percent?: int32(name='Percent', example='0'),
      requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
      scheduleConfig?: {
        pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
        priority?: int32(name='Priority', example='5'),
      }(name='ScheduleConfig'),
      status?: string(name='Status', example='Success'),
      submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
      triggerSource?: string(name='TriggerSource', example='API'),
      userData?: string(name='UserData', example='user-data'),
    }
  ](name='Jobs'),
  nextPageToken?: string(name='NextPageToken', example='019daf5780f74831b0e1a767c9f1c178'),
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model ListTranscodeJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTranscodeJobsResponseBody(name='body'),
}

/**
 * @param request ListTranscodeJobsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTranscodeJobsResponse
 */
async function listTranscodeJobsWithOptions(request: ListTranscodeJobsRequest, runtime: Util.RuntimeOptions): ListTranscodeJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endOfCreateTime)) {
    query['EndOfCreateTime'] = request.endOfCreateTime;
  }
  if (!Util.isUnset(request.nextPageToken)) {
    query['NextPageToken'] = request.nextPageToken;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentJobId)) {
    query['ParentJobId'] = request.parentJobId;
  }
  if (!Util.isUnset(request.startOfCreateTime)) {
    query['StartOfCreateTime'] = request.startOfCreateTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTranscodeJobs',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request ListTranscodeJobsRequest
 * @return ListTranscodeJobsResponse
 */
async function listTranscodeJobs(request: ListTranscodeJobsRequest): ListTranscodeJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTranscodeJobsWithOptions(request, runtime);
}

model QueryDNAJobListRequest {
  jobIds?: string(name='JobIds', example='88c6ca184c0e47098a5b665e2a12****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryDNAJobListResponseBody = {
  jobList?: [ 
    {
      code?: string(name='Code', example='"InvalidParameter.ResourceNotFound"'),
      config?: string(name='Config', example='{"SaveType": "save","MediaType"":"video"}'),
      creationTime?: string(name='CreationTime', example='2022-12-28T03:21:37Z'),
      DBId?: string(name='DBId', example='2288c6ca184c0e47098a5b665e2a12****'),
      DNAResult?: string(name='DNAResult', example='http://test_bucket.oss-cn-shanghai.aliyuncs.com/fingerprint/video/search_result/5/5.txt'),
      finishTime?: string(name='FinishTime', example='2022-12-28T03:21:44Z'),
      id?: string(name='Id', example='88c6ca184c0e47098a5b665e2a12****'),
      input?: {
        media?: string(name='Media', example='1b1b9cd148034739af413150fded****'),
        type?: string(name='Type', example='Media'),
      }(name='Input'),
      message?: string(name='Message', example='"The resource operated \\\\"a887d0b***d805ef6f7f6786302\\\\" cannot be found"'),
      primaryKey?: string(name='PrimaryKey', example='3ca84a39a9024f19853b21be9cf9****'),
      status?: string(name='Status', example='Queuing'),
      userData?: string(name='UserData', example='testdna'),
    }
  ](name='JobList'),
  requestId?: string(name='RequestId', example='25818875-5F78-4A13-BEF6-D7393642CA58'),
}

model QueryDNAJobListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDNAJobListResponseBody(name='body'),
}

/**
 * @summary 查询DNA作业
 *
 * @param request QueryDNAJobListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryDNAJobListResponse
 */
async function queryDNAJobListWithOptions(request: QueryDNAJobListRequest, runtime: Util.RuntimeOptions): QueryDNAJobListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobIds)) {
    query['JobIds'] = request.jobIds;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDNAJobList',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询DNA作业
 *
 * @param request QueryDNAJobListRequest
 * @return QueryDNAJobListResponse
 */
async function queryDNAJobList(request: QueryDNAJobListRequest): QueryDNAJobListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDNAJobListWithOptions(request, runtime);
}

model QueryIProductionJobRequest {
  clientToken?: string(name='ClientToken'),
  jobId?: string(name='JobId', description='This parameter is required.', example='****20b48fb04483915d4f2cd8ac****'),
}

model QueryIProductionJobResponseBody = {
  createTime?: string(name='CreateTime', example='2022-07-07T07:16:11Z'),
  finishTime?: string(name='FinishTime', example='2021-11-26T14:50:25Z'),
  functionName?: string(name='FunctionName', example='Cover'),
  input?: {
    media?: string(name='Media', example='oss://bucket/object'),
    type?: string(name='Type', example='OSS'),
  }(name='Input'),
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  jobParams?: string(name='JobParams', example='{"Model":"gif"}'),
  name?: string(name='Name'),
  output?: {
    media?: string(name='Media', example='oss://bucket/object'),
    type?: string(name='Type', example='OSS'),
  }(name='Output'),
  outputFiles?: [ string ](name='OutputFiles'),
  outputUrls?: [ string ](name='OutputUrls'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result', example='{}'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='a54fdc9c9aab413caef0d1150f565e86'),
    priority?: int32(name='Priority', example='6'),
  }(name='ScheduleConfig'),
  status?: string(name='Status', example='Success'),
  templateId?: string(name='TemplateId', example='****96e8864746a0b6f3****'),
  userData?: string(name='UserData', example='{"test":1}'),
}

model QueryIProductionJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryIProductionJobResponseBody(name='body'),
}

/**
 * @summary 查询智能生产作业
 *
 * @param request QueryIProductionJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryIProductionJobResponse
 */
async function queryIProductionJobWithOptions(request: QueryIProductionJobRequest, runtime: Util.RuntimeOptions): QueryIProductionJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryIProductionJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询智能生产作业
 *
 * @param request QueryIProductionJobRequest
 * @return QueryIProductionJobResponse
 */
async function queryIProductionJob(request: QueryIProductionJobRequest): QueryIProductionJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryIProductionJobWithOptions(request, runtime);
}

model QueryMediaCensorJobDetailRequest {
  jobId?: string(name='JobId', description='This parameter is required.', example='2288c6ca184c0e47098a5b665e2a12****'),
  maximumPageSize?: long(name='MaximumPageSize', example='30'),
  nextPageToken?: string(name='NextPageToken', example='ae0fd49c0840e14daf0d66a75b83****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryMediaCensorJobDetailResponseBody = {
  mediaCensorJobDetail?: {
    barrageCensorResult?: {
      label?: string(name='Label', example='normal'),
      rate?: string(name='Rate', example='99.91'),
      scene?: string(name='Scene', example='antispam'),
      suggestion?: string(name='Suggestion', example='pass'),
    }(name='BarrageCensorResult'),
    code?: string(name='Code', example='InvalidParameter.ResourceNotFound'),
    coverImageCensorResults?: {
      coverImageCensorResult?: [ 
      {
        bucket?: string(name='Bucket', example='bucket-out-test-****'),
        location?: string(name='Location', example='oss-cn-shanghai'),
        object?: string(name='Object', example='test/ai/censor/v2/vme-****.jpg'),
        results?: {
          result?: [ 
          {
            label?: string(name='Label', example='Normal'),
            rate?: string(name='Rate', example='100'),
            scene?: string(name='Scene', example='Antispam'),
            suggestion?: string(name='Suggestion', example='pass'),
          }
        ](name='Result')
        }(name='Results'),
      }
    ](name='CoverImageCensorResult')
    }(name='CoverImageCensorResults'),
    creationTime?: string(name='CreationTime', example='2018-09-13T16:32:24Z'),
    descCensorResult?: {
      label?: string(name='Label', example='terrorism'),
      rate?: string(name='Rate', example='100'),
      scene?: string(name='Scene', example='antispam'),
      suggestion?: string(name='Suggestion', example='review'),
    }(name='DescCensorResult'),
    finishTime?: string(name='FinishTime', example='2018-09-13T16:38:24Z'),
    input?: {
      bucket?: string(name='Bucket', example='bucket-test-in-****'),
      location?: string(name='Location', example='oss-cn-shanghai'),
      object?: string(name='Object', example='test/ai/censor/test-****.mp4'),
    }(name='Input'),
    jobId?: string(name='JobId', example='f8f166eea7a44e9bb0a4aecf9543****'),
    message?: string(name='Message', example='The resource operated cannot be found'),
    pipelineId?: string(name='PipelineId', example='c5b30b7c0d0e4a0abde1d5f9e751****'),
    state?: string(name='State', example='Success'),
    suggestion?: string(name='Suggestion', example='block'),
    titleCensorResult?: {
      label?: string(name='Label', example='meaningless'),
      rate?: string(name='Rate', example='99.91'),
      scene?: string(name='Scene', example='antispam'),
      suggestion?: string(name='Suggestion', example='block'),
    }(name='TitleCensorResult'),
    userData?: string(name='UserData', example='example userdata ****'),
    vensorCensorResult?: {
      censorResults?: {
        censorResult?: [ 
        {
          label?: string(name='Label', example='meaningless'),
          rate?: string(name='Rate', example='100'),
          scene?: string(name='Scene', example='terrorism'),
          suggestion?: string(name='Suggestion', example='review'),
        }
      ](name='CensorResult')
      }(name='CensorResults'),
      nextPageToken?: string(name='NextPageToken', example='ea04afcca7cd4e80b9ece8fbb251****'),
      videoTimelines?: {
        videoTimeline?: [ 
        {
          censorResults?: {
            censorResult?: [ 
            {
              label?: string(name='Label', example='flood'),
              rate?: string(name='Rate', example='99.99'),
              scene?: string(name='Scene', example='porn'),
              suggestion?: string(name='Suggestion', example='block'),
            }
          ](name='CensorResult')
          }(name='CensorResults'),
          object?: string(name='Object', example='output{Count}.jpg'),
          timestamp?: string(name='Timestamp', example='00:02:59.999'),
        }
      ](name='VideoTimeline')
      }(name='VideoTimelines'),
    }(name='VensorCensorResult'),
    videoCensorConfig?: {
      bizType?: string(name='BizType', example='common'),
      outputFile?: {
        bucket?: string(name='Bucket', example='test-bucket-****'),
        location?: string(name='Location', example='oss-cn-shanghai'),
        object?: string(name='Object', example='output{Count}.jpg'),
      }(name='OutputFile'),
      videoCensor?: string(name='VideoCensor', example='true'),
    }(name='VideoCensorConfig'),
  }(name='MediaCensorJobDetail'),
  requestId?: string(name='RequestId', example='B42299E6-F71F-465F-8FE9-4FC2E3D3C2CA'),
}

model QueryMediaCensorJobDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMediaCensorJobDetailResponseBody(name='body'),
}

/**
 * @param request QueryMediaCensorJobDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryMediaCensorJobDetailResponse
 */
async function queryMediaCensorJobDetailWithOptions(request: QueryMediaCensorJobDetailRequest, runtime: Util.RuntimeOptions): QueryMediaCensorJobDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.maximumPageSize)) {
    query['MaximumPageSize'] = request.maximumPageSize;
  }
  if (!Util.isUnset(request.nextPageToken)) {
    query['NextPageToken'] = request.nextPageToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryMediaCensorJobDetail',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryMediaCensorJobDetailRequest
 * @return QueryMediaCensorJobDetailResponse
 */
async function queryMediaCensorJobDetail(request: QueryMediaCensorJobDetailRequest): QueryMediaCensorJobDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMediaCensorJobDetailWithOptions(request, runtime);
}

model QueryMediaCensorJobListRequest {
  endOfJobCreatedTimeRange?: string(name='EndOfJobCreatedTimeRange', example='2022-02-14T02:16:07Z'),
  jobIds?: string(name='JobIds', example='fa9c34be3bcf42919ac4d1775239****,78dc866518b843259669df58ed30****'),
  maximumPageSize?: long(name='MaximumPageSize', example='20'),
  nextPageToken?: string(name='NextPageToken', example='79aff3eee82242e092899db5f669'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pipelineId?: string(name='PipelineId', example='c5b30b7c0d0e4a0abde1d5f9e751****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startOfJobCreatedTimeRange?: string(name='StartOfJobCreatedTimeRange', example='2021-12-22T03:48:05Z'),
  state?: string(name='State', example='All'),
}

model QueryMediaCensorJobListResponseBody = {
  mediaCensorJobList?: {
    mediaCensorJob?: [ 
    {
      barrageCensorResult?: {
        label?: string(name='Label', example='normal'),
        rate?: string(name='Rate', example='99.91'),
        scene?: string(name='Scene', example='antispam'),
        suggestion?: string(name='Suggestion', example='pass'),
      }(name='BarrageCensorResult'),
      code?: string(name='Code', example='InvalidParameter.ResourceNotFound'),
      coverImageCensorResults?: {
        coverImageCensorResult?: [ 
        {
          bucket?: string(name='Bucket', example='example-Bucket-****'),
          location?: string(name='Location', example='oss-cn-shanghai'),
          object?: string(name='Object', example='test/ai/censor/v2/vme-****.jpg'),
          results?: {
            result?: [ 
            {
              label?: string(name='Label', example='normal'),
              rate?: string(name='Rate', example='100'),
              scene?: string(name='Scene', example='live'),
              suggestion?: string(name='Suggestion', example='pass'),
            }
          ](name='Result')
          }(name='Results'),
        }
      ](name='CoverImageCensorResult')
      }(name='CoverImageCensorResults'),
      creationTime?: string(name='CreationTime', example='2021-11-04T07:25:48Z'),
      descCensorResult?: {
        label?: string(name='Label', example='normal'),
        rate?: string(name='Rate', example='100'),
        scene?: string(name='Scene', example='antispam'),
        suggestion?: string(name='Suggestion', example='pass'),
      }(name='DescCensorResult'),
      finishTime?: string(name='FinishTime', example='2021-11-04T07:25:50Z'),
      input?: {
        bucket?: string(name='Bucket', example='bucket-test-in-****'),
        location?: string(name='Location', example='oss-cn-shanghai'),
        object?: string(name='Object', example='test/ai/censor/test-****.mp4'),
      }(name='Input'),
      jobId?: string(name='JobId', example='f8f166eea7a44e9bb0a4aecf9543'),
      message?: string(name='Message', example='The resource operated cannot be found'),
      pipelineId?: string(name='PipelineId', example='c5b30b7c0d0e4a0abde1d5f9e751****'),
      state?: string(name='State', example='Success'),
      suggestion?: string(name='Suggestion', example='pass'),
      titleCensorResult?: {
        label?: string(name='Label', example='meaningless'),
        rate?: string(name='Rate', example='100'),
        scene?: string(name='Scene', example='antispam'),
        suggestion?: string(name='Suggestion', example='block'),
      }(name='TitleCensorResult'),
      userData?: string(name='UserData', example='example userdata ****'),
      vensorCensorResult?: {
        censorResults?: {
          censorResult?: [ 
          {
            label?: string(name='Label', example='meaningless'),
            rate?: string(name='Rate', example='100'),
            scene?: string(name='Scene', example='ad'),
            suggestion?: string(name='Suggestion', example='pass'),
          }
        ](name='CensorResult')
        }(name='CensorResults'),
        nextPageToken?: string(name='NextPageToken', example='ea04afcca7cd4e80b9ece8fbb251'),
        videoTimelines?: {
          videoTimeline?: [ 
          {
            censorResults?: {
              censorResult?: [ 
              {
                label?: string(name='Label', example='normal'),
                rate?: string(name='Rate', example='100'),
                scene?: string(name='Scene', example='porn'),
                suggestion?: string(name='Suggestion', example='block'),
              }
            ](name='CensorResult')
            }(name='CensorResults'),
            object?: string(name='Object', example='output{Count}.jpg'),
            timestamp?: string(name='Timestamp', example='00:02:59.999'),
          }
        ](name='VideoTimeline')
        }(name='VideoTimelines'),
      }(name='VensorCensorResult'),
      videoCensorConfig?: {
        bizType?: string(name='BizType', example='common'),
        outputFile?: {
          bucket?: string(name='Bucket', example='test-bucket-****'),
          location?: string(name='Location', example='oss-cn-shanghai'),
          object?: string(name='Object', example='output{Count}.jpg'),
        }(name='OutputFile'),
        videoCensor?: string(name='VideoCensor', example='true'),
      }(name='VideoCensorConfig'),
    }
  ](name='MediaCensorJob')
  }(name='MediaCensorJobList'),
  nextPageToken?: string(name='NextPageToken', example='9b1a42bc6e8d46e6a1383b7e7f01****'),
  nonExistIds?: {
    string?: [ string ](name='String')
  }(name='NonExistIds'),
  requestId?: string(name='RequestId', example='D1D5C080-8E2F-5030-8AB4-13092F17631B'),
}

model QueryMediaCensorJobListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMediaCensorJobListResponseBody(name='body'),
}

/**
 * @param request QueryMediaCensorJobListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryMediaCensorJobListResponse
 */
async function queryMediaCensorJobListWithOptions(request: QueryMediaCensorJobListRequest, runtime: Util.RuntimeOptions): QueryMediaCensorJobListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endOfJobCreatedTimeRange)) {
    query['EndOfJobCreatedTimeRange'] = request.endOfJobCreatedTimeRange;
  }
  if (!Util.isUnset(request.jobIds)) {
    query['JobIds'] = request.jobIds;
  }
  if (!Util.isUnset(request.maximumPageSize)) {
    query['MaximumPageSize'] = request.maximumPageSize;
  }
  if (!Util.isUnset(request.nextPageToken)) {
    query['NextPageToken'] = request.nextPageToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pipelineId)) {
    query['PipelineId'] = request.pipelineId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startOfJobCreatedTimeRange)) {
    query['StartOfJobCreatedTimeRange'] = request.startOfJobCreatedTimeRange;
  }
  if (!Util.isUnset(request.state)) {
    query['State'] = request.state;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryMediaCensorJobList',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryMediaCensorJobListRequest
 * @return QueryMediaCensorJobListResponse
 */
async function queryMediaCensorJobList(request: QueryMediaCensorJobListRequest): QueryMediaCensorJobListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMediaCensorJobListWithOptions(request, runtime);
}

model QueryMediaIndexJobRequest {
  mediaId?: string(name='MediaId', description='This parameter is required.', example='c2e77390f75271ec802f0674a2ce6***'),
  searchLibName?: string(name='SearchLibName', example='test1'),
}

model QueryMediaIndexJobResponseBody = {
  code?: string(name='Code', example='200'),
  indexJobInfoList?: [ 
    {
      gmtFinish?: string(name='GmtFinish', example='2023-11-21 11:33:51'),
      gmtSubmit?: string(name='GmtSubmit', example='2023-11-21 11:33:50'),
      indexType?: string(name='IndexType', example='mm'),
      status?: string(name='Status', example='Success'),
    }
  ](name='IndexJobInfoList'),
  requestId?: string(name='RequestId', example='4E84BE44-58A7-****-****-FBEBEA16EF94'),
  success?: string(name='Success', example='true'),
}

model QueryMediaIndexJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMediaIndexJobResponseBody(name='body'),
}

/**
 * @summary 查询索引任务
 *
 * @param request QueryMediaIndexJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryMediaIndexJobResponse
 */
async function queryMediaIndexJobWithOptions(request: QueryMediaIndexJobRequest, runtime: Util.RuntimeOptions): QueryMediaIndexJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mediaId)) {
    query['MediaId'] = request.mediaId;
  }
  if (!Util.isUnset(request.searchLibName)) {
    query['SearchLibName'] = request.searchLibName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryMediaIndexJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询索引任务
 *
 * @param request QueryMediaIndexJobRequest
 * @return QueryMediaIndexJobResponse
 */
async function queryMediaIndexJob(request: QueryMediaIndexJobRequest): QueryMediaIndexJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMediaIndexJobWithOptions(request, runtime);
}

model QuerySearchIndexRequest {
  indexType?: string(name='IndexType', description='This parameter is required.', example='mm'),
  searchLibName?: string(name='SearchLibName', example='test1'),
}

model QuerySearchIndexResponseBody = {
  code?: string(name='Code'),
  indexStatus?: string(name='IndexStatus'),
  indexType?: string(name='IndexType', example='mm'),
  mediaTotal?: string(name='MediaTotal'),
  requestId?: string(name='RequestId', description='Id of the request', example='4E84BE44-58A7-****-****-FBEBEA16EF94'),
  searchLibName?: string(name='SearchLibName', example='test1'),
  success?: string(name='Success'),
}

model QuerySearchIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySearchIndexResponseBody(name='body'),
}

/**
 * @summary 查询搜索索引
 *
 * @param request QuerySearchIndexRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySearchIndexResponse
 */
async function querySearchIndexWithOptions(request: QuerySearchIndexRequest, runtime: Util.RuntimeOptions): QuerySearchIndexResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.indexType)) {
    query['IndexType'] = request.indexType;
  }
  if (!Util.isUnset(request.searchLibName)) {
    query['SearchLibName'] = request.searchLibName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySearchIndex',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询搜索索引
 *
 * @param request QuerySearchIndexRequest
 * @return QuerySearchIndexResponse
 */
async function querySearchIndex(request: QuerySearchIndexRequest): QuerySearchIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySearchIndexWithOptions(request, runtime);
}

model QuerySearchLibRequest {
  searchLibName?: string(name='SearchLibName', description='This parameter is required.', example='test1'),
}

model QuerySearchLibResponseBody = {
  code?: string(name='Code'),
  requestId?: string(name='RequestId', description='Id of the request', example='******11-DB8D-4A9A-875B-275798******'),
  searchLibName?: string(name='SearchLibName', example='test1'),
  status?: string(name='Status', example='normal'),
  success?: string(name='Success'),
}

model QuerySearchLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySearchLibResponseBody(name='body'),
}

/**
 * @summary 查询库
 *
 * @param request QuerySearchLibRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySearchLibResponse
 */
async function querySearchLibWithOptions(request: QuerySearchLibRequest, runtime: Util.RuntimeOptions): QuerySearchLibResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.searchLibName)) {
    query['SearchLibName'] = request.searchLibName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySearchLib',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询库
 *
 * @param request QuerySearchLibRequest
 * @return QuerySearchLibResponse
 */
async function querySearchLib(request: QuerySearchLibRequest): QuerySearchLibResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySearchLibWithOptions(request, runtime);
}

model QuerySmarttagJobRequest {
  jobId?: string(name='JobId', description='This parameter is required.', example='88c6ca184c0e47098a5b665e2****'),
  params?: string(name='Params', example='{"labelResultType":"auto"}'),
}

model QuerySmarttagJobResponseBody = {
  jobStatus?: string(name='JobStatus', example='Success'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  results?: {
    result?: [ 
    {
      data?: string(name='Data', example='{"title":"example-title-****"}'),
      type?: string(name='Type', example='Meta'),
    }
  ](name='Result')
  }(name='Results'),
  userData?: string(name='UserData', example='{"userId":"123432412831"}'),
}

model QuerySmarttagJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmarttagJobResponseBody(name='body'),
}

/**
 * @param request QuerySmarttagJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmarttagJobResponse
 */
async function querySmarttagJobWithOptions(request: QuerySmarttagJobRequest, runtime: Util.RuntimeOptions): QuerySmarttagJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.params)) {
    query['Params'] = request.params;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySmarttagJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmarttagJobRequest
 * @return QuerySmarttagJobResponse
 */
async function querySmarttagJob(request: QuerySmarttagJobRequest): QuerySmarttagJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySmarttagJobWithOptions(request, runtime);
}

model RefreshUploadMediaRequest {
  mediaId?: string(name='MediaId', example='411bed50018971edb60b0764a0ec6***'),
}

model RefreshUploadMediaResponseBody = {
  mediaId?: string(name='MediaId', example='c2e77390f75271ec802f0674a2ce6***'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  uploadAddress?: string(name='UploadAddress', example='eyJFbmRwb2ludCI6Imh0dHBzOi8vb3NzLWNuLXNoYW5naGFpLmFsaXl1bmNzLmNvbSIsIkJ1Y2tldCI6InN6aGQtdmlkZW8iLCJGaWxlTmFtZSI6InZvZC0yOTYzMWEvc3YvNTBmYTJlODQtMTgxMjdhZGRiMTcvNTBmYTJlODQtMTgxMjdhZGRiM***'),
  uploadAuth?: string(name='UploadAuth', example='eyJBY2Nlc3NLZXlJZCI6IkxUQUk0Rm53bTk1dHdxQjMxR3IzSE5hRCIsIkFjY2Vzc0tleVNlY3JldCI6Ik9lWllKR0dTMTlkNkZaM1E3UVpJQmdmSVdnM3BPaiIsIkV4cGlyYXRpb24iOiI***'),
}

model RefreshUploadMediaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefreshUploadMediaResponseBody(name='body'),
}

/**
 * @summary 刷新媒资上传凭证
 *
 * @param request RefreshUploadMediaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RefreshUploadMediaResponse
 */
async function refreshUploadMediaWithOptions(request: RefreshUploadMediaRequest, runtime: Util.RuntimeOptions): RefreshUploadMediaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mediaId)) {
    query['MediaId'] = request.mediaId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RefreshUploadMedia',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 刷新媒资上传凭证
 *
 * @param request RefreshUploadMediaRequest
 * @return RefreshUploadMediaResponse
 */
async function refreshUploadMedia(request: RefreshUploadMediaRequest): RefreshUploadMediaResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshUploadMediaWithOptions(request, runtime);
}

model RegisterMediaInfoRequest {
  businessType?: string(name='BusinessType', example='opening'),
  cateId?: long(name='CateId', example='3048'),
  clientToken?: string(name='ClientToken', example='****0311a423d11a5f7dee713535****'),
  coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png'),
  description?: string(name='Description', example='defaultDescription'),
  inputURL?: string(name='InputURL', description='This parameter is required.'),
  mediaTags?: string(name='MediaTags', example='tag1,tag2'),
  mediaType?: string(name='MediaType', example='video'),
  overwrite?: boolean(name='Overwrite', example='true'),
  referenceId?: string(name='ReferenceId', example='123-123'),
  registerConfig?: string(name='RegisterConfig'),
  smartTagTemplateId?: string(name='SmartTagTemplateId'),
  title?: string(name='Title', example='defaultTitle'),
  userData?: string(name='UserData'),
  workflowId?: string(name='WorkflowId', example='******b4fb044839815d4f2cd8******'),
}

model RegisterMediaInfoResponseBody = {
  mediaId?: string(name='MediaId', example='******b48fb04483915d4f2cd8******'),
  requestId?: string(name='RequestId', example='******5A-CAAC-4850-A3AF-B74606******'),
}

model RegisterMediaInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterMediaInfoResponseBody(name='body'),
}

/**
 * @summary 注册内容库资源
 *
 * @param request RegisterMediaInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RegisterMediaInfoResponse
 */
async function registerMediaInfoWithOptions(request: RegisterMediaInfoRequest, runtime: Util.RuntimeOptions): RegisterMediaInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.cateId)) {
    query['CateId'] = request.cateId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.coverURL)) {
    query['CoverURL'] = request.coverURL;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.inputURL)) {
    query['InputURL'] = request.inputURL;
  }
  if (!Util.isUnset(request.mediaTags)) {
    query['MediaTags'] = request.mediaTags;
  }
  if (!Util.isUnset(request.mediaType)) {
    query['MediaType'] = request.mediaType;
  }
  if (!Util.isUnset(request.overwrite)) {
    query['Overwrite'] = request.overwrite;
  }
  if (!Util.isUnset(request.referenceId)) {
    query['ReferenceId'] = request.referenceId;
  }
  if (!Util.isUnset(request.registerConfig)) {
    query['RegisterConfig'] = request.registerConfig;
  }
  if (!Util.isUnset(request.smartTagTemplateId)) {
    query['SmartTagTemplateId'] = request.smartTagTemplateId;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  if (!Util.isUnset(request.workflowId)) {
    query['WorkflowId'] = request.workflowId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RegisterMediaInfo',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 注册内容库资源
 *
 * @param request RegisterMediaInfoRequest
 * @return RegisterMediaInfoResponse
 */
async function registerMediaInfo(request: RegisterMediaInfoRequest): RegisterMediaInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerMediaInfoWithOptions(request, runtime);
}

model RegisterMediaStreamRequest {
  inputURL?: string(name='InputURL'),
  mediaId?: string(name='MediaId', example='5e778ec0027b71ed80a8909598506***'),
  userData?: string(name='UserData', example='{"MessageCallback":{"CallbackURL":"http://test.test.com"}, "Extend":{"localId":"xxx","test":"www"}}'),
}

model RegisterMediaStreamResponseBody = {
  mediaId?: string(name='MediaId', example='5e778ec0027b71ed80a8909598506302'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model RegisterMediaStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterMediaStreamResponseBody(name='body'),
}

/**
 * @summary 注册媒体流
 *
 * @param request RegisterMediaStreamRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RegisterMediaStreamResponse
 */
async function registerMediaStreamWithOptions(request: RegisterMediaStreamRequest, runtime: Util.RuntimeOptions): RegisterMediaStreamResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.inputURL)) {
    query['InputURL'] = request.inputURL;
  }
  if (!Util.isUnset(request.mediaId)) {
    query['MediaId'] = request.mediaId;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RegisterMediaStream',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 注册媒体流
 *
 * @param request RegisterMediaStreamRequest
 * @return RegisterMediaStreamResponse
 */
async function registerMediaStream(request: RegisterMediaStreamRequest): RegisterMediaStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerMediaStreamWithOptions(request, runtime);
}

model SearchEditingProjectRequest {
  createSource?: string(name='CreateSource', example='WebSDK'),
  endTime?: string(name='EndTime', example='2017-01-11T12:00:00Z'),
  pageNo?: long(name='PageNo', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  projectType?: string(name='ProjectType', example='EditingProject'),
  sortBy?: string(name='SortBy', example='CreationTime:Desc'),
  startTime?: string(name='StartTime', example='2017-01-11T12:00:00Z'),
  status?: string(name='Status', example='Producing'),
  templateType?: string(name='TemplateType', example='Timeline'),
}

model SearchEditingProjectResponseBody = {
  maxResults?: long(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='null'),
  projectList?: [ 
    {
      businessConfig?: string(name='BusinessConfig', example='{ "OutputMediaConfig" : { "StorageLocation": "test-bucket.oss-cn-shanghai.aliyuncs.com", "Path": "test-path" }, "OutputMediaTarget": "oss-object", "ReservationTime": "2021-06-21T08:05:00Z" }'),
      businessStatus?: string(name='BusinessStatus', example='Reserving'),
      coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example-cover.jpg'),
      createSource?: string(name='CreateSource', example='OpenAPI'),
      createTime?: string(name='CreateTime', example='2017-01-11T12:00:00Z'),
      description?: string(name='Description', example='sample description'),
      duration?: long(name='Duration', example='30.100000'),
      errorCode?: string(name='ErrorCode', example='InvalidParameter'),
      errorMessage?: string(name='ErrorMessage', example='"EventTime":"2021-08-12T10:04:15Z","ErrorCode":"InvalidParameter","ErrorMessage":"The specified parameter \\\\"LiveStreamConfig\\\\" is not valid. specified parameter example is not valid.'),
      modifiedSource?: string(name='ModifiedSource', example='2017-01-11T12:00:00Z'),
      modifiedTime?: string(name='ModifiedTime', example='2017-01-11T12:00:00Z'),
      projectId?: string(name='ProjectId', example='****fddd7748b58bf1d47e95****'),
      projectType?: string(name='ProjectType', example='EditingProject'),
      status?: string(name='Status', example='PRODUCE_FAILED'),
      templateType?: string(name='TemplateType', example='Timeline'),
      timeline?: string(name='Timeline', example='{"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****4d7cf14dc7b83b0e801c****"},{"MediaId":"****4d7cf14dc7b83b0e801c****"}]}]}'),
      title?: string(name='Title', example='title'),
    }
  ](name='ProjectList'),
  requestId?: string(name='RequestId', example='****9262E3DA-07FA-4862-FCBB6BC61D08*****'),
  totalCount?: long(name='TotalCount', example='110'),
}

model SearchEditingProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchEditingProjectResponseBody(name='body'),
}

/**
 * @summary SearchEditingProject
 *
 * @param request SearchEditingProjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SearchEditingProjectResponse
 */
async function searchEditingProjectWithOptions(request: SearchEditingProjectRequest, runtime: Util.RuntimeOptions): SearchEditingProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.createSource)) {
    query['CreateSource'] = request.createSource;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectType)) {
    query['ProjectType'] = request.projectType;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchEditingProject',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary SearchEditingProject
 *
 * @param request SearchEditingProjectRequest
 * @return SearchEditingProjectResponse
 */
async function searchEditingProject(request: SearchEditingProjectRequest): SearchEditingProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchEditingProjectWithOptions(request, runtime);
}

model SearchMediaRequest {
  entityId?: string(name='EntityId', description='The ID of the entity.', example='2d3bf1e35a1e42b5ab338d701efa7603'),
  match?: string(name='Match', description='The filter conditions. For more information about the parameter syntax, see [Media asset search protocols](https://help.aliyun.com/document_detail/2584256.html).'),
  pageNo?: int32(name='PageNo', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 50.', example='20'),
  scrollToken?: string(name='ScrollToken', description='The pagination identifier. The value can be up to 32 characters in length. The first time you call this operation for each new search, you do not need to specify this parameter. The value of this parameter is returned each time data records that meet the specified filter condition are found. The value is used to record the current position of queried data. Record the returned parameter value and set this parameter according to the following requirements during the next search: If you need to traverse all data that meets the filter criteria, you must set the ScrollToken parameter. If the value of the PageNo parameter exceeds 200, we recommend that you set this parameter to optimize search performance. You can only page backward. You can page a maximum of 1,000 entries in an operation.', example='F8C4F642184DBDA5D93907A70AAE****'),
  searchLibName?: string(name='SearchLibName', description='The search library.', example='test-1'),
  sortBy?: string(name='SortBy', description='The sort field and order. Separate multiple parameters with commas (,).', example='utcCreate:Desc, utcModified:Desc'),
}

model SearchMediaResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  mediaInfoList?: [ 
    {
      aiData?: {
        aiLabelInfo?: [ 
          {
            category?: string(name='Category', description='The category.'),
            faceId?: string(name='FaceId', description='The face ID.', example='5FE19530C7A422197535FE74F5DB2B9F'),
            labelId?: string(name='LabelId', description='The ID of the entity.', example='10310250338'),
            labelName?: string(name='LabelName', description='The name of the entity.'),
            labelType?: string(name='LabelType', description='The type of the tag.'),
            occurrences?: [ 
              {
                content?: string(name='Content', description='The text content.'),
                finegrainId?: string(name='FinegrainId', description='The fine-grained ID of the entity.', example='10310250338'),
                finegrainName?: string(name='FinegrainName', description='The fine-grained name of the entity.'),
                from?: double(name='From', description='The start time of the clip.', example='1.4'),
                image?: string(name='Image', description='The optimal face image encoded in Base64.', example='99C64F6287'),
                score?: double(name='Score', description='The score.', example='0.75287705'),
                tableBatchSeqId?: string(name='TableBatchSeqId', description='The sequence ID of the vector table.', example='85010D1'),
                to?: double(name='To', description='The end time of the clip.', example='2.5'),
                tracks?: [ 
                  {
                    position?: string(name='Position', description='The coordinates of the bounding box.', example='468.0;67.0;615.0;267.0'),
                    size?: double(name='Size', description='The size of the bounding box.', example='50.2'),
                    timestamp?: double(name='Timestamp', description='The timestamp of the track.', example='1.4'),
                  }
                ](name='Tracks', description='The track sequence.'),
                clipId?: string(name='clipId', description='The ID of the clip.', example='5FE19530C7A422197535FE74F5DB2B9F'),
              }
            ](name='Occurrences', description='The clips.'),
            source?: string(name='Source', description='The source.', example='vision'),
          }
        ](name='AiLabelInfo', description='The tags of the intelligent AI job.'),
        asrInfo?: [ 
          {
            clipId?: string(name='ClipId', description='The ID of the clip.', example='5FE19530C7A422197535FE74F5DB2B9F'),
            content?: string(name='Content', description='The text content.'),
            from?: double(name='From', description='The start time of the clip.', example='1.4'),
            timestamp?: double(name='Timestamp', description='The timestamp of the clip.', example='1.4'),
            to?: double(name='To', description='The end time of the clip.', example='2.5'),
          }
        ](name='AsrInfo', description='The information about audio files.'),
        ocrInfo?: [ 
          {
            clipId?: string(name='ClipId', description='The ID of the clip.', example='5FE19530C7A422197535FE74F5DB2B9F'),
            content?: string(name='Content', description='The text content.'),
            from?: double(name='From', description='The start time of the clip.', example='1.4'),
            timestamp?: double(name='Timestamp', description='The timestamp of the clip.', example='1.4'),
            to?: double(name='To', description='The end time of the clip.', example='2.5'),
          }
        ](name='OcrInfo', description='The subtitles.'),
      }(name='AiData', description='The details of the intelligent AI job.'),
      aiRoughData?: {
        aiCategory?: string(name='AiCategory', description='The category of the AI job.', example='TV series'),
        aiJobId?: string(name='AiJobId', description='The ID of the AI job.', example='cd35b0b0025f71edbfcb472190a9xxxx'),
        result?: string(name='Result', description='The results of the AI job.', example='http://xxxx.json'),
        saveType?: string(name='SaveType', description='The save type.', example='TEXT'),
        status?: string(name='Status', description='The data status.', example='SaveSuccess'),
      }(name='AiRoughData', description='The description of the AI job.'),
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', description='The bitrate of the file.', example='1912.13'),
            createTime?: string(name='CreateTime', description='The time when the file was created.', example='2022-05-30T02:02:17Z'),
            duration?: string(name='Duration', description='The duration of the file.', example='60.00000'),
            fileName?: string(name='FileName', description='The name of the file.', example='164265080291300080527050.wav'),
            fileSize?: string(name='FileSize', description='The size of the file in bytes.', example='324784'),
            fileStatus?: string(name='FileStatus', description='The status of the file.', example='Normal'),
            fileType?: string(name='FileType', description='The type of the file.', example='source_file'),
            fileUrl?: string(name='FileUrl', description='The Object Storage Service (OSS) URL of the file.', example='https://outin-d3f4681ddfd911ec99a600163e1403e7.oss-cn-shanghai.aliyuncs.com/sv/23d5cdd1-18180984899/23d5cdd1-18180984899.mp4'),
            formatName?: string(name='FormatName', description='The encapsulation format of the file.', example='mov,mp4,m4a,3gp,3g2,mj2'),
            height?: string(name='Height', description='The height of the file.', example='480'),
            modifiedTime?: string(name='ModifiedTime', description='The time when the file was last modified.', example='2021-12-10T12:19Z'),
            region?: string(name='Region', description='The region in which the file is stored.', example='cn-beijing'),
            width?: string(name='Width', description='The width of the file.', example='1920'),
          }(name='FileBasicInfo', description='The basic information about the file, such as the duration and size.'),
        }
      ](name='FileInfoList', description='The information about the files.'),
      mediaBasicInfo?: {
        biz?: string(name='Biz', description='The business to which the media asset belongs.', example='IMS'),
        businessType?: string(name='BusinessType', description='The business type of the media asset.', example='opening'),
        cateId?: long(name='CateId', description='The ID of the category.', example='44'),
        cateName?: string(name='CateName', description='The name of the category.'),
        category?: string(name='Category', description='The category of the media asset.', example='image'),
        coverURL?: string(name='CoverURL', description='The thumbnail URL of the media asset.', example='https://dtlive-bj.oss-cn-beijing.aliyuncs.com/cover/e694372e-4f5b-4821-ae09-efd064f27b63_large_cover_url.jpg'),
        createTime?: string(name='CreateTime', description='The time when the media asset was created.', example='2020-12-01T19:48Z'),
        deletedTime?: string(name='DeletedTime', description='The time when the media asset was deleted.', example='2020-12-01T19:48Z'),
        description?: string(name='Description', description='The description of the media asset.'),
        inputURL?: string(name='InputURL', description='The address of the media asset that is waiting to be registered.', example='oss://clipres/longvideo/material/voice/prod/20220418/07d7c799f6054dc3bbef250854cf84981650248140427'),
        mediaId?: string(name='MediaId', description='The ID of the media asset.', example='132bd600fc3c71ec99476732a78f6402'),
        mediaTags?: string(name='MediaTags', description='The tags of the media asset.', example='tags,tags2'),
        mediaType?: string(name='MediaType', description='The type of the media asset.', example='video'),
        modifiedTime?: string(name='ModifiedTime', description='The time when the media asset was modified.', example='2020-12-01T19:48Z'),
        referenceId?: string(name='ReferenceId', description='The custom ID of the media asset. The ID is a string that contains 6 to 64 characters. Only letters, digits, hyphens (-), and underscores (_) are supported. Each custom ID is unique.', example='123-123'),
        snapshots?: string(name='Snapshots', description='The snapshots of the media asset.', example='[{"bucket":"example-bucket","count":"3","iceJobId":"******f48f0e4154976b2b8c45******","location":"oss-cn-beijing","snapshotRegular":"example.jpg","templateId":"******e6a6440b29eb60bd7c******"}]'),
        source?: string(name='Source', description='The source of the media asset.', example='oss'),
        spriteImages?: string(name='SpriteImages', description='The image sprite of the media asset', example='[{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]'),
        status?: string(name='Status', description='The state of the resource.', example='Normal'),
        title?: string(name='Title', description='The title of the media asset.'),
        transcodeStatus?: string(name='TranscodeStatus', description='The transcoding status of the media asset.', example='Init'),
        uploadSource?: string(name='UploadSource', description='The upload source of the media asset.', example='general'),
        userData?: string(name='UserData', description='The user data.', example='userData'),
      }(name='MediaBasicInfo', description='The basic information about the media asset.'),
      mediaId?: string(name='MediaId', description='The ID of the media asset.', example='3b187b3620c8490886cfc2a9578c3ce6'),
    }
  ](name='MediaInfoList', description='The media assets that meet the requirements.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6F61C357-ACC0-57FB-876E-D58795335E59'),
  scrollToken?: string(name='ScrollToken', description='The pagination identifier.', example='F8C4F642184DBDA5D93907A70AAE****'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='True'),
  total?: long(name='Total', description='The total number of media assets that meet the conditions.', example='163'),
}

model SearchMediaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchMediaResponseBody(name='body'),
}

/**
 * @summary Queries information about media assets based on the request parameters.
 *
 * @description If you have questions about how to use the media asset search feature in Intelligent Media Services (IMS), contact technical support in the DingTalk group (ID 30415005038).
 *
 * @param request SearchMediaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SearchMediaResponse
 */
async function searchMediaWithOptions(request: SearchMediaRequest, runtime: Util.RuntimeOptions): SearchMediaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.entityId)) {
    query['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.match)) {
    query['Match'] = request.match;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.scrollToken)) {
    query['ScrollToken'] = request.scrollToken;
  }
  if (!Util.isUnset(request.searchLibName)) {
    query['SearchLibName'] = request.searchLibName;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchMedia',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries information about media assets based on the request parameters.
 *
 * @description If you have questions about how to use the media asset search feature in Intelligent Media Services (IMS), contact technical support in the DingTalk group (ID 30415005038).
 *
 * @param request SearchMediaRequest
 * @return SearchMediaResponse
 */
async function searchMedia(request: SearchMediaRequest): SearchMediaResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchMediaWithOptions(request, runtime);
}

model SearchMediaByAILabelRequest {
  mediaId?: string(name='MediaId', example='****c469e944b5a856828dc2****'),
  mediaType?: string(name='MediaType', example='video'),
  multimodalSearchType?: string(name='MultimodalSearchType', example='Ocr'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  searchLibName?: string(name='SearchLibName'),
  sortBy?: string(name='SortBy', example='CreationTime:Desc'),
  specificSearch?: boolean(name='SpecificSearch', example='true'),
  text?: string(name='Text'),
}

model SearchMediaByAILabelResponseBody = {
  code?: string(name='Code', example='200'),
  mediaList?: [ 
    {
      aiData?: {
        aiLabelInfo?: [ 
          {
            category?: string(name='Category'),
            faceId?: string(name='FaceId', example='5FE19530C7A422197535FE74F5DB****'),
            labelId?: string(name='LabelId', example='103102503**'),
            labelName?: string(name='LabelName'),
            labelType?: string(name='LabelType'),
            occurrences?: [ 
              {
                clipId?: string(name='ClipId', example='158730355E4B82257D8AA1583A58****'),
                content?: string(name='Content'),
                finegrainId?: string(name='FinegrainId', example='103102503**'),
                finegrainName?: string(name='FinegrainName'),
                from?: double(name='From', example='1.4'),
                image?: string(name='Image', example='https://service-****-public.oss-cn-hangzhou.aliyuncs.com/1563457****438522/service-image/f788974f-9595-43b2-a478-7c7a1afb****.jpg'),
                score?: double(name='Score', example='0.75287705'),
                tableBatchSeqId?: string(name='TableBatchSeqId', example='85010D1**'),
                to?: double(name='To', example='2.5'),
                tracks?: [ 
                  {
                    position?: string(name='Position', example='468.0;67.0;615.0;267.0'),
                    size?: double(name='Size', example='50'),
                    timestamp?: double(name='Timestamp', example='1.4'),
                  }
                ](name='Tracks'),
              }
            ](name='Occurrences'),
            source?: string(name='Source', example='vision'),
          }
        ](name='AiLabelInfo'),
        asrInfo?: [ 
          {
            clipId?: string(name='ClipId', example='5FE19530C7A422197535FE74F5DB****'),
            content?: string(name='Content'),
            from?: double(name='From', example='1.4'),
            timestamp?: double(name='Timestamp', example='1.4'),
            to?: double(name='To', example='2.5'),
          }
        ](name='AsrInfo'),
        ocrInfo?: [ 
          {
            clipId?: string(name='ClipId', example='5FE19530C7A422197535FE74F5DB****'),
            content?: string(name='Content'),
            from?: double(name='From', example='1.4'),
            timestamp?: double(name='Timestamp', example='1.4'),
            to?: double(name='To', example='2.5'),
          }
        ](name='OcrInfo'),
      }(name='AiData'),
      appId?: string(name='AppId', example='app-1000000'),
      coverUrl?: string(name='CoverUrl', example='http://example.aliyundoc.com/snapshot/****.jpg?auth_key=1498476426-0-0-f00b9455c49a423ce69cf4e27333****'),
      creationTime?: string(name='CreationTime', example='2017-11-14T09:15:50Z'),
      description?: string(name='Description'),
      duration?: float(name='Duration', example='12.2'),
      mediaId?: string(name='MediaId', example='1c6ce34007d571ed94667630a6bc****'),
      modificationTime?: string(name='ModificationTime', example='2017-11-14T09:15:50Z'),
      size?: long(name='Size', example='10897890'),
      snapshots?: [ string ](name='Snapshots'),
      status?: string(name='Status', example='Normal'),
      storageLocation?: string(name='StorageLocation', example='out-****.oss-cn-shanghai.aliyuncs.com'),
      tags?: string(name='Tags'),
      title?: string(name='Title'),
    }
  ](name='MediaList'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: string(name='Success', example='true'),
  total?: long(name='Total', example='30'),
}

model SearchMediaByAILabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchMediaByAILabelResponseBody(name='body'),
}

/**
 * @summary 智能标签搜索
 *
 * @param request SearchMediaByAILabelRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SearchMediaByAILabelResponse
 */
async function searchMediaByAILabelWithOptions(request: SearchMediaByAILabelRequest, runtime: Util.RuntimeOptions): SearchMediaByAILabelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mediaId)) {
    query['MediaId'] = request.mediaId;
  }
  if (!Util.isUnset(request.mediaType)) {
    query['MediaType'] = request.mediaType;
  }
  if (!Util.isUnset(request.multimodalSearchType)) {
    query['MultimodalSearchType'] = request.multimodalSearchType;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchLibName)) {
    query['SearchLibName'] = request.searchLibName;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.specificSearch)) {
    query['SpecificSearch'] = request.specificSearch;
  }
  if (!Util.isUnset(request.text)) {
    query['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchMediaByAILabel',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 智能标签搜索
 *
 * @param request SearchMediaByAILabelRequest
 * @return SearchMediaByAILabelResponse
 */
async function searchMediaByAILabel(request: SearchMediaByAILabelRequest): SearchMediaByAILabelResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchMediaByAILabelWithOptions(request, runtime);
}

model SearchMediaByFaceRequest {
  entityId?: string(name='EntityId', example='2d3bf1e35a1e42b5ab338d701efa****'),
  faceSearchToken?: string(name='FaceSearchToken', description='This parameter is required.', example='zxtest-huangxuan-2023-3-7-V1'),
  mediaType?: string(name='MediaType'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  personImageUrl?: string(name='PersonImageUrl', description='This parameter is required.', example='https://****.oss-cn-shanghai.aliyuncs.com/input/huangxuan****.jpg'),
  searchLibName?: string(name='SearchLibName'),
}

model SearchMediaByFaceResponseBody = {
  code?: string(name='Code', example='200'),
  mediaInfoList?: [ 
    {
      mediaId?: string(name='MediaId', example='3b187b3620c8490886cfc2a9578c****'),
    }
  ](name='MediaInfoList'),
  requestId?: string(name='RequestId', example='7CA7D615-CFB1-5437-9A12-2D185C3EE6CB'),
  success?: string(name='Success', example='true'),
  total?: long(name='Total', example='163'),
}

model SearchMediaByFaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchMediaByFaceResponseBody(name='body'),
}

/**
 * @summary 人脸搜粗搜接口，输入一张人脸图片，搜索该人物所在媒资的相关信息
 *
 * @param request SearchMediaByFaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SearchMediaByFaceResponse
 */
async function searchMediaByFaceWithOptions(request: SearchMediaByFaceRequest, runtime: Util.RuntimeOptions): SearchMediaByFaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.entityId)) {
    query['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.faceSearchToken)) {
    query['FaceSearchToken'] = request.faceSearchToken;
  }
  if (!Util.isUnset(request.mediaType)) {
    query['MediaType'] = request.mediaType;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.personImageUrl)) {
    query['PersonImageUrl'] = request.personImageUrl;
  }
  if (!Util.isUnset(request.searchLibName)) {
    query['SearchLibName'] = request.searchLibName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchMediaByFace',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 人脸搜粗搜接口，输入一张人脸图片，搜索该人物所在媒资的相关信息
 *
 * @param request SearchMediaByFaceRequest
 * @return SearchMediaByFaceResponse
 */
async function searchMediaByFace(request: SearchMediaByFaceRequest): SearchMediaByFaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchMediaByFaceWithOptions(request, runtime);
}

model SearchMediaByHybridRequest {
  mediaId?: string(name='MediaId', example='****c469e944b5a856828dc2****'),
  mediaType?: string(name='MediaType', example='video'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  searchLibName?: string(name='SearchLibName', example='test-1'),
  text?: string(name='Text'),
}

model SearchMediaByHybridResponseBody = {
  code?: string(name='Code', example='200'),
  mediaList?: [ 
    {
      clipInfo?: [ 
        {
          from?: double(name='From', example='2'),
          score?: double(name='Score', example='0.99'),
          to?: double(name='To', example='4'),
        }
      ](name='ClipInfo'),
      mediaId?: string(name='MediaId', example='a18936e0e28771edb59ae6f6f47a****'),
    }
  ](name='MediaList'),
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
  success?: string(name='Success', example='true'),
  total?: long(name='Total', example='30'),
}

model SearchMediaByHybridResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchMediaByHybridResponseBody(name='body'),
}

/**
 * @summary 混合搜索
 *
 * @param request SearchMediaByHybridRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SearchMediaByHybridResponse
 */
async function searchMediaByHybridWithOptions(request: SearchMediaByHybridRequest, runtime: Util.RuntimeOptions): SearchMediaByHybridResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mediaId)) {
    query['MediaId'] = request.mediaId;
  }
  if (!Util.isUnset(request.mediaType)) {
    query['MediaType'] = request.mediaType;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchLibName)) {
    query['SearchLibName'] = request.searchLibName;
  }
  if (!Util.isUnset(request.text)) {
    query['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchMediaByHybrid',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 混合搜索
 *
 * @param request SearchMediaByHybridRequest
 * @return SearchMediaByHybridResponse
 */
async function searchMediaByHybrid(request: SearchMediaByHybridRequest): SearchMediaByHybridResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchMediaByHybridWithOptions(request, runtime);
}

model SearchMediaByMultimodalRequest {
  mediaType?: string(name='MediaType', example='video'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  searchLibName?: string(name='SearchLibName', example='test-1'),
  text?: string(name='Text'),
}

model SearchMediaByMultimodalResponseBody = {
  code?: string(name='Code', example='200'),
  mediaList?: [ 
    {
      clipInfo?: [ 
        {
          from?: double(name='From', example='2'),
          score?: double(name='Score', example='1.2'),
          to?: double(name='To', example='4'),
        }
      ](name='ClipInfo'),
      mediaId?: string(name='MediaId', example='a18936e0e28771edb59ae6f6f47a****'),
    }
  ](name='MediaList'),
  requestId?: string(name='RequestId', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
  success?: string(name='Success', example='true'),
  total?: long(name='Total', example='20'),
}

model SearchMediaByMultimodalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchMediaByMultimodalResponseBody(name='body'),
}

/**
 * @summary 多模态搜索
 *
 * @param request SearchMediaByMultimodalRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SearchMediaByMultimodalResponse
 */
async function searchMediaByMultimodalWithOptions(request: SearchMediaByMultimodalRequest, runtime: Util.RuntimeOptions): SearchMediaByMultimodalResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mediaType)) {
    query['MediaType'] = request.mediaType;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchLibName)) {
    query['SearchLibName'] = request.searchLibName;
  }
  if (!Util.isUnset(request.text)) {
    query['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchMediaByMultimodal',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 多模态搜索
 *
 * @param request SearchMediaByMultimodalRequest
 * @return SearchMediaByMultimodalResponse
 */
async function searchMediaByMultimodal(request: SearchMediaByMultimodalRequest): SearchMediaByMultimodalResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchMediaByMultimodalWithOptions(request, runtime);
}

model SearchMediaClipByFaceRequest {
  entityId?: string(name='EntityId', example='2d3bf1e35a1e42b5ab338d701efa****'),
  faceSearchToken?: string(name='FaceSearchToken', description='This parameter is required.', example='zxtest-huangxuan-2023-3-7-V1'),
  mediaId?: string(name='MediaId', description='This parameter is required.', example='3b187b3620c8490886cfc2a9578c****'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  searchLibName?: string(name='SearchLibName'),
}

model SearchMediaClipByFaceResponseBody = {
  code?: string(name='Code', example='200'),
  mediaClipList?: [ 
    {
      category?: string(name='Category', example='celebrity'),
      entityId?: string(name='EntityId', example='1031025****'),
      labelName?: string(name='LabelName'),
      occurrencesInfos?: [ 
        {
          endTime?: float(name='EndTime', example='69.06635'),
          startTime?: float(name='StartTime', example='61.066353'),
          trackData?: [ 
            {
              boxPosition?: {
                h?: int32(name='H', example='168'),
                w?: int32(name='W', example='128'),
                x?: int32(name='X', example='517'),
                y?: int32(name='Y', example='409'),
              }(name='BoxPosition'),
              timestamp?: float(name='Timestamp', example='62.03302'),
            }
          ](name='TrackData'),
        }
      ](name='OccurrencesInfos'),
      score?: float(name='Score', example='0.99041677'),
    }
  ](name='MediaClipList'),
  requestId?: string(name='RequestId', example='E44FFACD-9E90-555A-A09A-6FD3B7335E39'),
  success?: string(name='Success', example='true'),
  total?: long(name='Total', example='5'),
}

model SearchMediaClipByFaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchMediaClipByFaceResponseBody(name='body'),
}

/**
 * @summary 人脸搜精搜接口，基于粗搜结果返回该人物所在媒资的相关人物片段信息
 *
 * @param request SearchMediaClipByFaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SearchMediaClipByFaceResponse
 */
async function searchMediaClipByFaceWithOptions(request: SearchMediaClipByFaceRequest, runtime: Util.RuntimeOptions): SearchMediaClipByFaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.entityId)) {
    query['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.faceSearchToken)) {
    query['FaceSearchToken'] = request.faceSearchToken;
  }
  if (!Util.isUnset(request.mediaId)) {
    query['MediaId'] = request.mediaId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchLibName)) {
    query['SearchLibName'] = request.searchLibName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchMediaClipByFace',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 人脸搜精搜接口，基于粗搜结果返回该人物所在媒资的相关人物片段信息
 *
 * @param request SearchMediaClipByFaceRequest
 * @return SearchMediaClipByFaceResponse
 */
async function searchMediaClipByFace(request: SearchMediaClipByFaceRequest): SearchMediaClipByFaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchMediaClipByFaceWithOptions(request, runtime);
}

model SearchPublicMediaInfoRequest {
  authorized?: boolean(name='Authorized', example='true'),
  dynamicMetaDataMatchFields?: string(name='DynamicMetaDataMatchFields', example='"ApprovalStatus=\\\\"Available\\\\"&amp;MaterialBags=\\\\"boutiquemusic\\\\"&amp;Mood=\\\\"Nervous\\\\""'),
  entityId?: string(name='EntityId', example='Copyright_Music'),
  favorite?: boolean(name='Favorite', example='true'),
  mediaIds?: string(name='MediaIds', example='****20b48fb04483915d4f2cd8ac****,****15d4a4b0448391508f2cb486****'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  sortBy?: string(name='SortBy', example='UsageCount:Desc,UnitPrice:Asc'),
}

model SearchPublicMediaInfoResponseBody = {
  publicMediaInfos?: [ 
    {
      authorized?: boolean(name='Authorized', example='true'),
      favorite?: boolean(name='Favorite', example='true'),
      mediaInfo?: {
        dynamicMetaData?: {
          data?: string(name='Data', example='"{\\\\"AuditionUrl\\\\": \\\\"http://xxx\\\\", \\\\"AuditionCount\\\\": 3...}"'),
          type?: string(name='Type', example='system'),
        }(name='DynamicMetaData'),
        mediaBasicInfo?: {
          businessType?: string(name='BusinessType', example='general'),
          category?: string(name='Category', example='category'),
          coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>'),
          createTime?: string(name='CreateTime', example='2020-12-26T06:04:49Z'),
          deletedTime?: string(name='DeletedTime', example='2020-12-29T06:04:49Z'),
          description?: string(name='Description', example='description'),
          mediaId?: string(name='MediaId', description='MediaId', example='icepublic-****87b921bb4a55908a72a0537e****'),
          mediaTags?: string(name='MediaTags'),
          mediaType?: string(name='MediaType', example='audio'),
          modifiedTime?: string(name='ModifiedTime', example='2020-12-26T06:04:50Z'),
          source?: string(name='Source', example='oss'),
          spriteImages?: string(name='SpriteImages', example='[{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]'),
          status?: string(name='Status', example='Normal'),
          title?: string(name='Title', example='title'),
          userData?: string(name='UserData', example='userDataTest'),
        }(name='MediaBasicInfo', description='BasicInfo'),
        mediaId?: string(name='MediaId', example='icepublic-****87b921bb4a55908a72a0537e****'),
      }(name='MediaInfo'),
      remainingAuthTime?: string(name='RemainingAuthTime', example='100'),
    }
  ](name='PublicMediaInfos'),
  requestId?: string(name='RequestId', example='****3CFB-2767-54FD-B311-BD15A4C1****'),
  totalCount?: long(name='TotalCount', example='100'),
}

model SearchPublicMediaInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchPublicMediaInfoResponseBody(name='body'),
}

/**
 * @summary 搜索公共媒资信息
 *
 * @param request SearchPublicMediaInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SearchPublicMediaInfoResponse
 */
async function searchPublicMediaInfoWithOptions(request: SearchPublicMediaInfoRequest, runtime: Util.RuntimeOptions): SearchPublicMediaInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorized)) {
    query['Authorized'] = request.authorized;
  }
  if (!Util.isUnset(request.dynamicMetaDataMatchFields)) {
    query['DynamicMetaDataMatchFields'] = request.dynamicMetaDataMatchFields;
  }
  if (!Util.isUnset(request.entityId)) {
    query['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.favorite)) {
    query['Favorite'] = request.favorite;
  }
  if (!Util.isUnset(request.mediaIds)) {
    query['MediaIds'] = request.mediaIds;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchPublicMediaInfo',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 搜索公共媒资信息
 *
 * @param request SearchPublicMediaInfoRequest
 * @return SearchPublicMediaInfoResponse
 */
async function searchPublicMediaInfo(request: SearchPublicMediaInfoRequest): SearchPublicMediaInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchPublicMediaInfoWithOptions(request, runtime);
}

model SendLiveSnapshotJobCommandRequest {
  command?: string(name='Command', description='This parameter is required.', example='start'),
  jobId?: string(name='JobId', description='This parameter is required.', example='****a046-263c-3560-978a-fb287782****'),
}

model SendLiveSnapshotJobCommandResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model SendLiveSnapshotJobCommandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendLiveSnapshotJobCommandResponseBody(name='body'),
}

/**
 * @summary 发送实时截图任务指令
 *
 * @param request SendLiveSnapshotJobCommandRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SendLiveSnapshotJobCommandResponse
 */
async function sendLiveSnapshotJobCommandWithOptions(request: SendLiveSnapshotJobCommandRequest, runtime: Util.RuntimeOptions): SendLiveSnapshotJobCommandResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.command)) {
    body['Command'] = request.command;
  }
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendLiveSnapshotJobCommand',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 发送实时截图任务指令
 *
 * @param request SendLiveSnapshotJobCommandRequest
 * @return SendLiveSnapshotJobCommandResponse
 */
async function sendLiveSnapshotJobCommand(request: SendLiveSnapshotJobCommandRequest): SendLiveSnapshotJobCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendLiveSnapshotJobCommandWithOptions(request, runtime);
}

model SendLiveTranscodeJobCommandRequest {
  command?: string(name='Command', description='This parameter is required.', example='stop'),
  jobId?: string(name='JobId', description='This parameter is required.', example='****20b48fb04483915d4f2cd8ac****'),
}

model SendLiveTranscodeJobCommandResponseBody = {
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
}

model SendLiveTranscodeJobCommandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendLiveTranscodeJobCommandResponseBody(name='body'),
}

/**
 * @summary 给指定转码任务发实时命令
 *
 * @param request SendLiveTranscodeJobCommandRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SendLiveTranscodeJobCommandResponse
 */
async function sendLiveTranscodeJobCommandWithOptions(request: SendLiveTranscodeJobCommandRequest, runtime: Util.RuntimeOptions): SendLiveTranscodeJobCommandResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.command)) {
    query['Command'] = request.command;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SendLiveTranscodeJobCommand',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 给指定转码任务发实时命令
 *
 * @param request SendLiveTranscodeJobCommandRequest
 * @return SendLiveTranscodeJobCommandResponse
 */
async function sendLiveTranscodeJobCommand(request: SendLiveTranscodeJobCommandRequest): SendLiveTranscodeJobCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendLiveTranscodeJobCommandWithOptions(request, runtime);
}

model SetContentAnalyzeConfigRequest {
  auto?: boolean(name='Auto', example='true'),
  saveType?: string(name='SaveType', example='TEXT,FACE'),
  templateId?: string(name='TemplateId', example='S00000101-100070'),
}

model SetContentAnalyzeConfigResponseBody = {
  requestId?: string(name='RequestId', example='953CFD27-4A2C-54AD-857F-B79EF3A338E0'),
  success?: boolean(name='Success', example='true'),
}

model SetContentAnalyzeConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetContentAnalyzeConfigResponseBody(name='body'),
}

/**
 * @summary 设置内容分析搜索配置
 *
 * @param request SetContentAnalyzeConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetContentAnalyzeConfigResponse
 */
async function setContentAnalyzeConfigWithOptions(request: SetContentAnalyzeConfigRequest, runtime: Util.RuntimeOptions): SetContentAnalyzeConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.auto)) {
    query['Auto'] = request.auto;
  }
  if (!Util.isUnset(request.saveType)) {
    query['SaveType'] = request.saveType;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetContentAnalyzeConfig',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 设置内容分析搜索配置
 *
 * @param request SetContentAnalyzeConfigRequest
 * @return SetContentAnalyzeConfigResponse
 */
async function setContentAnalyzeConfig(request: SetContentAnalyzeConfigRequest): SetContentAnalyzeConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setContentAnalyzeConfigWithOptions(request, runtime);
}

model SetDefaultCustomTemplateRequest {
  templateId?: string(name='TemplateId', description='This parameter is required.', example='****d80e4e4044975745c14b****'),
}

model SetDefaultCustomTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model SetDefaultCustomTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDefaultCustomTemplateResponseBody(name='body'),
}

/**
 * @summary 设置默认媒体处理模板
 *
 * @param request SetDefaultCustomTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetDefaultCustomTemplateResponse
 */
async function setDefaultCustomTemplateWithOptions(request: SetDefaultCustomTemplateRequest, runtime: Util.RuntimeOptions): SetDefaultCustomTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDefaultCustomTemplate',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 设置默认媒体处理模板
 *
 * @param request SetDefaultCustomTemplateRequest
 * @return SetDefaultCustomTemplateResponse
 */
async function setDefaultCustomTemplate(request: SetDefaultCustomTemplateRequest): SetDefaultCustomTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDefaultCustomTemplateWithOptions(request, runtime);
}

model SetDefaultStorageLocationRequest {
  bucket?: string(name='Bucket', example='oss-test-bucket'),
  path?: string(name='Path', example='ims/dir'),
  storageType?: string(name='StorageType', example='user_oss_bucket'),
}

model SetDefaultStorageLocationResponseBody = {
  requestId?: string(name='RequestId', example='******5A-CAAC-4850-A3AF-B74606******'),
  success?: boolean(name='Success', example='true'),
}

model SetDefaultStorageLocationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDefaultStorageLocationResponseBody(name='body'),
}

/**
 * @summary 设置默认存储路径
 *
 * @param request SetDefaultStorageLocationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetDefaultStorageLocationResponse
 */
async function setDefaultStorageLocationWithOptions(request: SetDefaultStorageLocationRequest, runtime: Util.RuntimeOptions): SetDefaultStorageLocationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bucket)) {
    query['Bucket'] = request.bucket;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  if (!Util.isUnset(request.storageType)) {
    query['StorageType'] = request.storageType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDefaultStorageLocation',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 设置默认存储路径
 *
 * @param request SetDefaultStorageLocationRequest
 * @return SetDefaultStorageLocationResponse
 */
async function setDefaultStorageLocation(request: SetDefaultStorageLocationRequest): SetDefaultStorageLocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDefaultStorageLocationWithOptions(request, runtime);
}

model SetEventCallbackRequest {
  authKey?: string(name='AuthKey', example='TestKey001'),
  authSwitch?: string(name='AuthSwitch', example='on'),
  callbackQueueName?: string(name='CallbackQueueName', example='ice-callback-queue'),
  callbackType?: string(name='CallbackType', example='HTTP'),
  callbackURL?: string(name='CallbackURL', example='http://xxx.yyy/callback'),
  eventTypeList?: string(name='EventTypeList', example='ProduceMediaComplete'),
}

model SetEventCallbackResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model SetEventCallbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetEventCallbackResponseBody(name='body'),
}

/**
 * @summary 配置事件回调地址
 *
 * @param request SetEventCallbackRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetEventCallbackResponse
 */
async function setEventCallbackWithOptions(request: SetEventCallbackRequest, runtime: Util.RuntimeOptions): SetEventCallbackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authKey)) {
    query['AuthKey'] = request.authKey;
  }
  if (!Util.isUnset(request.authSwitch)) {
    query['AuthSwitch'] = request.authSwitch;
  }
  if (!Util.isUnset(request.callbackQueueName)) {
    query['CallbackQueueName'] = request.callbackQueueName;
  }
  if (!Util.isUnset(request.callbackType)) {
    query['CallbackType'] = request.callbackType;
  }
  if (!Util.isUnset(request.callbackURL)) {
    query['CallbackURL'] = request.callbackURL;
  }
  if (!Util.isUnset(request.eventTypeList)) {
    query['EventTypeList'] = request.eventTypeList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetEventCallback',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 配置事件回调地址
 *
 * @param request SetEventCallbackRequest
 * @return SetEventCallbackResponse
 */
async function setEventCallback(request: SetEventCallbackRequest): SetEventCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return setEventCallbackWithOptions(request, runtime);
}

model StartRtcRobotInstanceRequest {
  authToken?: string(name='AuthToken', description='This parameter is required.', example='**********'),
  channelId?: string(name='ChannelId', description='This parameter is required.', example='testId'),
  config?: {
    enableVoiceInterrupt?: boolean(name='EnableVoiceInterrupt', example='true'),
    greeting?: string(name='Greeting'),
    voiceId?: string(name='VoiceId', example='zhixiaoxia'),
  }(name='Config'),
  robotId?: string(name='RobotId', description='This parameter is required.', example='ca28b08ad3464ebcb42e5c0f7c6d2e89'),
  userData?: string(name='UserData', example='{}'),
  userId?: string(name='UserId', description='This parameter is required.', example='my-robot'),
}

model StartRtcRobotInstanceShrinkRequest {
  authToken?: string(name='AuthToken', description='This parameter is required.', example='**********'),
  channelId?: string(name='ChannelId', description='This parameter is required.', example='testId'),
  configShrink?: string(name='Config'),
  robotId?: string(name='RobotId', description='This parameter is required.', example='ca28b08ad3464ebcb42e5c0f7c6d2e89'),
  userData?: string(name='UserData', example='{}'),
  userId?: string(name='UserId', description='This parameter is required.', example='my-robot'),
}

model StartRtcRobotInstanceResponseBody = {
  instanceId?: string(name='InstanceId', example='727dc0e296014bb58670940a3da95592'),
  requestId?: string(name='RequestId', description='Id of the request', example='11DE0AB3-603B-5055-8A72-9C424854F983'),
}

model StartRtcRobotInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartRtcRobotInstanceResponseBody(name='body'),
}

/**
 * @summary 开启一个机器人实例
 *
 * @param tmpReq StartRtcRobotInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartRtcRobotInstanceResponse
 */
async function startRtcRobotInstanceWithOptions(tmpReq: StartRtcRobotInstanceRequest, runtime: Util.RuntimeOptions): StartRtcRobotInstanceResponse {
  Util.validateModel(tmpReq);
  var request = new StartRtcRobotInstanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.config)) {
    request.configShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.config, 'Config', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.authToken)) {
    query['AuthToken'] = request.authToken;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.configShrink)) {
    query['Config'] = request.configShrink;
  }
  if (!Util.isUnset(request.robotId)) {
    query['RobotId'] = request.robotId;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartRtcRobotInstance',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 开启一个机器人实例
 *
 * @param request StartRtcRobotInstanceRequest
 * @return StartRtcRobotInstanceResponse
 */
async function startRtcRobotInstance(request: StartRtcRobotInstanceRequest): StartRtcRobotInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startRtcRobotInstanceWithOptions(request, runtime);
}

model StartWorkflowRequest {
  taskInput?: string(name='TaskInput', example='{
      "Type": "Media",
      "Media": "******30706071edbfe290b488******"
}'),
  userData?: string(name='UserData'),
  workflowId?: string(name='WorkflowId', example='******f0e54971ecbffd472190******'),
}

model StartWorkflowResponseBody = {
  requestId?: string(name='RequestId', example='******42-E8E1-4FBB-8E52-F4225C******'),
  taskId?: string(name='TaskId', example='******22dad741d086a50325f9******'),
}

model StartWorkflowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartWorkflowResponseBody(name='body'),
}

/**
 * @summary 启动工作流
 *
 * @param request StartWorkflowRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartWorkflowResponse
 */
async function startWorkflowWithOptions(request: StartWorkflowRequest, runtime: Util.RuntimeOptions): StartWorkflowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskInput)) {
    query['TaskInput'] = request.taskInput;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  if (!Util.isUnset(request.workflowId)) {
    query['WorkflowId'] = request.workflowId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartWorkflow',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 启动工作流
 *
 * @param request StartWorkflowRequest
 * @return StartWorkflowResponse
 */
async function startWorkflow(request: StartWorkflowRequest): StartWorkflowResponse {
  var runtime = new Util.RuntimeOptions{};
  return startWorkflowWithOptions(request, runtime);
}

model StopRtcRobotInstanceRequest {
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='727dc0e296014bb58670940a3da95592'),
}

model StopRtcRobotInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='AC84E5DD-AB56-56C0-A992-07ECB82008CA'),
}

model StopRtcRobotInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopRtcRobotInstanceResponseBody(name='body'),
}

/**
 * @summary 停止一个机器人实例
 *
 * @param request StopRtcRobotInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopRtcRobotInstanceResponse
 */
async function stopRtcRobotInstanceWithOptions(request: StopRtcRobotInstanceRequest, runtime: Util.RuntimeOptions): StopRtcRobotInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopRtcRobotInstance',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 停止一个机器人实例
 *
 * @param request StopRtcRobotInstanceRequest
 * @return StopRtcRobotInstanceResponse
 */
async function stopRtcRobotInstance(request: StopRtcRobotInstanceRequest): StopRtcRobotInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopRtcRobotInstanceWithOptions(request, runtime);
}

model SubmitASRJobRequest {
  description?: string(name='Description', example='测试描述'),
  duration?: string(name='Duration', example='00:00:10'),
  inputFile?: string(name='InputFile', example='oss://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4 或 ****20b48fb04483915d4f2cd8ac****'),
  startTime?: string(name='StartTime', example='00:00:00'),
  title?: string(name='Title', example='测试标题'),
  userData?: string(name='UserData', example='{"user":"data"}'),
}

model SubmitASRJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  state?: string(name='State', example='Finished'),
}

model SubmitASRJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitASRJobResponseBody(name='body'),
}

/**
 * @summary SubmitASRJob
 *
 * @param request SubmitASRJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitASRJobResponse
 */
async function submitASRJobWithOptions(request: SubmitASRJobRequest, runtime: Util.RuntimeOptions): SubmitASRJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.inputFile)) {
    query['InputFile'] = request.inputFile;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitASRJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary SubmitASRJob
 *
 * @param request SubmitASRJobRequest
 * @return SubmitASRJobResponse
 */
async function submitASRJob(request: SubmitASRJobRequest): SubmitASRJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitASRJobWithOptions(request, runtime);
}

model SubmitAudioProduceJobRequest {
  description?: string(name='Description', example='任务描述  长度不超过1024字节  UTF8编码'),
  editingConfig?: string(name='EditingConfig', description='This parameter is required.', example='{"voice":"Siqi","format":"MP3","volume":50}'),
  inputConfig?: string(name='InputConfig', description='This parameter is required.', example='测试文本'),
  outputConfig?: string(name='OutputConfig', description='This parameter is required.', example='{"bucket":"bucket","object":"objeck"}'),
  overwrite?: boolean(name='Overwrite', example='true'),
  title?: string(name='Title', example='任务标题。若不提供，根据日期自动生成默认title  长度不超过128字节  UTF8编码'),
  userData?: string(name='UserData', example='{"user":"data"}'),
}

model SubmitAudioProduceJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  mediaId?: string(name='MediaId', example='****2bcbfcfa30fccb36f72dca22****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  state?: string(name='State', example='Created'),
}

model SubmitAudioProduceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitAudioProduceJobResponseBody(name='body'),
}

/**
 * @summary SubmitAudioProduceJob
 *
 * @param request SubmitAudioProduceJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitAudioProduceJobResponse
 */
async function submitAudioProduceJobWithOptions(request: SubmitAudioProduceJobRequest, runtime: Util.RuntimeOptions): SubmitAudioProduceJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.editingConfig)) {
    query['EditingConfig'] = request.editingConfig;
  }
  if (!Util.isUnset(request.inputConfig)) {
    query['InputConfig'] = request.inputConfig;
  }
  if (!Util.isUnset(request.outputConfig)) {
    query['OutputConfig'] = request.outputConfig;
  }
  if (!Util.isUnset(request.overwrite)) {
    query['Overwrite'] = request.overwrite;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitAudioProduceJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary SubmitAudioProduceJob
 *
 * @param request SubmitAudioProduceJobRequest
 * @return SubmitAudioProduceJobResponse
 */
async function submitAudioProduceJob(request: SubmitAudioProduceJobRequest): SubmitAudioProduceJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitAudioProduceJobWithOptions(request, runtime);
}

model SubmitAvatarTrainingJobRequest {
  jobId?: string(name='JobId', description='This parameter is required.', example='****20b48fb04483915d4f2cd8ac****'),
}

model SubmitAvatarTrainingJobResponseBody = {
  data?: {
    jobId?: string(name='JobId', example='****29faef8144638ba42eb8e037****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='*****ACB-44F2-5F2D-88D7-1283E70*****'),
  success?: boolean(name='Success', example='true'),
}

model SubmitAvatarTrainingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitAvatarTrainingJobResponseBody(name='body'),
}

/**
 * @summary 提交数字人训练任务
 *
 * @param request SubmitAvatarTrainingJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitAvatarTrainingJobResponse
 */
async function submitAvatarTrainingJobWithOptions(request: SubmitAvatarTrainingJobRequest, runtime: Util.RuntimeOptions): SubmitAvatarTrainingJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitAvatarTrainingJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交数字人训练任务
 *
 * @param request SubmitAvatarTrainingJobRequest
 * @return SubmitAvatarTrainingJobResponse
 */
async function submitAvatarTrainingJob(request: SubmitAvatarTrainingJobRequest): SubmitAvatarTrainingJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitAvatarTrainingJobWithOptions(request, runtime);
}

model SubmitAvatarVideoJobRequest {
  description?: string(name='Description', example='测试描述'),
  editingConfig?: string(name='EditingConfig', example='{"AvatarId":"yunqiao"}'),
  inputConfig?: string(name='InputConfig'),
  outputConfig?: string(name='OutputConfig', example='{"MediaURL":"https://your-bucket.oss-cn-shanghai.aliyuncs.com/xxx.mp4","Width":1920,"Height":1080}'),
  title?: string(name='Title', example='测试标题'),
  userData?: string(name='UserData', example='{"user":"data","env":"prod"}'),
}

model SubmitAvatarVideoJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  mediaId?: string(name='MediaId', example='******70dcc471edaf00e6f6f4******'),
  requestId?: string(name='RequestId', description='Id of the request', example='******11-DB8D-4A9A-875B-275798******'),
}

model SubmitAvatarVideoJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitAvatarVideoJobResponseBody(name='body'),
}

/**
 * @summary 提交虚拟人视频合成任务
 *
 * @param request SubmitAvatarVideoJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitAvatarVideoJobResponse
 */
async function submitAvatarVideoJobWithOptions(request: SubmitAvatarVideoJobRequest, runtime: Util.RuntimeOptions): SubmitAvatarVideoJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.editingConfig)) {
    query['EditingConfig'] = request.editingConfig;
  }
  if (!Util.isUnset(request.inputConfig)) {
    query['InputConfig'] = request.inputConfig;
  }
  if (!Util.isUnset(request.outputConfig)) {
    query['OutputConfig'] = request.outputConfig;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitAvatarVideoJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交虚拟人视频合成任务
 *
 * @param request SubmitAvatarVideoJobRequest
 * @return SubmitAvatarVideoJobResponse
 */
async function submitAvatarVideoJob(request: SubmitAvatarVideoJobRequest): SubmitAvatarVideoJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitAvatarVideoJobWithOptions(request, runtime);
}

model SubmitBatchMediaProducingJobRequest {
  clientToken?: string(name='ClientToken', example='****12e8864746a0a398****'),
  editingConfig?: string(name='EditingConfig', example='{
  "MediaConfig": {
      "Volume": 0
  },
  "SpeechConfig": {
      "Volume": 1
  },
 "BackgroundMusicConfig": {
      "Volume": 0.3
  }
}'),
  inputConfig?: string(name='InputConfig'),
  outputConfig?: string(name='OutputConfig', example='{
  "MediaURL": "http://xxx.oss-cn-shanghai.aliyuncs.com/xxx_{index}.mp4",
  "Count": 20,
  "MaxDuration": 15,
  "Width": 1080,
  "Height": 1920,
  "Video": {"Crf": 27}
}'),
  userData?: string(name='UserData'),
}

model SubmitBatchMediaProducingJobResponseBody = {
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
  requestId?: string(name='RequestId', example='****36-3C1E-4417-BDB2-1E034F****'),
}

model SubmitBatchMediaProducingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitBatchMediaProducingJobResponseBody(name='body'),
}

/**
 * @summary SubmitBatchMediaProducingJob
 *
 * @param request SubmitBatchMediaProducingJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitBatchMediaProducingJobResponse
 */
async function submitBatchMediaProducingJobWithOptions(request: SubmitBatchMediaProducingJobRequest, runtime: Util.RuntimeOptions): SubmitBatchMediaProducingJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.outputConfig)) {
    query['OutputConfig'] = request.outputConfig;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.editingConfig)) {
    body['EditingConfig'] = request.editingConfig;
  }
  if (!Util.isUnset(request.inputConfig)) {
    body['InputConfig'] = request.inputConfig;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitBatchMediaProducingJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary SubmitBatchMediaProducingJob
 *
 * @param request SubmitBatchMediaProducingJobRequest
 * @return SubmitBatchMediaProducingJobResponse
 */
async function submitBatchMediaProducingJob(request: SubmitBatchMediaProducingJobRequest): SubmitBatchMediaProducingJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitBatchMediaProducingJobWithOptions(request, runtime);
}

model SubmitCustomizedVoiceJobRequest {
  demoAudioMediaURL?: string(name='DemoAudioMediaURL', example='https://your-bucket.oss-cn-shanghai.aliyuncs.com/demo.MP3'),
  voiceId?: string(name='VoiceId', description='This parameter is required.', example='xiaozhuan'),
}

model SubmitCustomizedVoiceJobResponseBody = {
  data?: {
    jobId?: string(name='JobId', example='****d718e2ff4f018ccf419a7b71****'),
    voiceId?: string(name='VoiceId', example='xiaozhuan'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model SubmitCustomizedVoiceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitCustomizedVoiceJobResponseBody(name='body'),
}

/**
 * @summary 提交人声克隆训练任务
 *
 * @param request SubmitCustomizedVoiceJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitCustomizedVoiceJobResponse
 */
async function submitCustomizedVoiceJobWithOptions(request: SubmitCustomizedVoiceJobRequest, runtime: Util.RuntimeOptions): SubmitCustomizedVoiceJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.demoAudioMediaURL)) {
    query['DemoAudioMediaURL'] = request.demoAudioMediaURL;
  }
  if (!Util.isUnset(request.voiceId)) {
    query['VoiceId'] = request.voiceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitCustomizedVoiceJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交人声克隆训练任务
 *
 * @param request SubmitCustomizedVoiceJobRequest
 * @return SubmitCustomizedVoiceJobResponse
 */
async function submitCustomizedVoiceJob(request: SubmitCustomizedVoiceJobRequest): SubmitCustomizedVoiceJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitCustomizedVoiceJobWithOptions(request, runtime);
}

model SubmitDNAJobRequest {
  config?: string(name='Config', example='{"SaveType": "save","MediaType"":"video"}'),
  DBId?: string(name='DBId', description='This parameter is required.', example='2288c6ca184c0e47098a5b665e2a12****'),
  input?: {
    media?: string(name='Media', description='This parameter is required.', example='1b1b9cd148034739af413150fded****'),
    type?: string(name='Type', description='This parameter is required.', example='Media'),
  }(name='Input', description='This parameter is required.'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pipelineId?: string(name='PipelineId', example='5246b8d12a62433ab77845074039****'),
  primaryKey?: string(name='PrimaryKey', description='This parameter is required.', example='3ca84a39a9024f19853b21be9cf9****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateId?: string(name='TemplateId', example='S00000101-100060'),
  userData?: string(name='UserData', example='userData'),
}

model SubmitDNAJobShrinkRequest {
  config?: string(name='Config', example='{"SaveType": "save","MediaType"":"video"}'),
  DBId?: string(name='DBId', description='This parameter is required.', example='2288c6ca184c0e47098a5b665e2a12****'),
  inputShrink?: string(name='Input', description='This parameter is required.'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pipelineId?: string(name='PipelineId', example='5246b8d12a62433ab77845074039****'),
  primaryKey?: string(name='PrimaryKey', description='This parameter is required.', example='3ca84a39a9024f19853b21be9cf9****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateId?: string(name='TemplateId', example='S00000101-100060'),
  userData?: string(name='UserData', example='userData'),
}

model SubmitDNAJobResponseBody = {
  jobId?: string(name='JobId', example='88c6ca184c0e47098a5b665e2****'),
  requestId?: string(name='RequestId', example='25818875-5F78-4A13-BEF6-D7393642CA58'),
}

model SubmitDNAJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitDNAJobResponseBody(name='body'),
}

/**
 * @summary 提交DNA作业
 *
 * @param tmpReq SubmitDNAJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitDNAJobResponse
 */
async function submitDNAJobWithOptions(tmpReq: SubmitDNAJobRequest, runtime: Util.RuntimeOptions): SubmitDNAJobResponse {
  Util.validateModel(tmpReq);
  var request = new SubmitDNAJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.input)) {
    request.inputShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.input, 'Input', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.DBId)) {
    query['DBId'] = request.DBId;
  }
  if (!Util.isUnset(request.inputShrink)) {
    query['Input'] = request.inputShrink;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pipelineId)) {
    query['PipelineId'] = request.pipelineId;
  }
  if (!Util.isUnset(request.primaryKey)) {
    query['PrimaryKey'] = request.primaryKey;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitDNAJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交DNA作业
 *
 * @param request SubmitDNAJobRequest
 * @return SubmitDNAJobResponse
 */
async function submitDNAJob(request: SubmitDNAJobRequest): SubmitDNAJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitDNAJobWithOptions(request, runtime);
}

model SubmitDynamicChartJobRequest {
  axisParams?: string(name='AxisParams', example='{"FontFile":"Microsoft YaHei","XAxisFontSize":"30","YAxisFontSize":"30","XAxisFontInterval":"30","AxisColor":"30"}'),
  background?: string(name='Background', example='{"Color":"#000000","ImageUrl":"http://your-bucket.oss-cn-shanghai.aliyuncs.com/obj.jpg"}'),
  chartConfig?: string(name='ChartConfig', example='{"Style":"Normal","TitleStartTime":"3000","ChartStartTime":"3000","VideoDuration":"15000"}'),
  chartTitle?: string(name='ChartTitle'),
  chartType?: string(name='ChartType', description='This parameter is required.', example='Line'),
  dataSource?: string(name='DataSource'),
  description?: string(name='Description'),
  input?: string(name='Input', description='This parameter is required.', example='{"XlsFile":"https://your-bucket.oss-cn-shanghai.aliyuncs.com/obj.xls"}'),
  outputConfig?: string(name='OutputConfig', description='This parameter is required.', example='{"MediaURL":"https://your-bucket.oss-cn-shanghai.aliyuncs.com/obj.mp4","Bitrate":2000,"Width":800,"Height":680}'),
  subtitle?: string(name='Subtitle'),
  title?: string(name='Title'),
  unit?: string(name='Unit'),
  userData?: string(name='UserData', example='{"user":"data"}'),
}

model SubmitDynamicChartJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model SubmitDynamicChartJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitDynamicChartJobResponseBody(name='body'),
}

/**
 * @summary 提交动态图表任务
 *
 * @param request SubmitDynamicChartJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitDynamicChartJobResponse
 */
async function submitDynamicChartJobWithOptions(request: SubmitDynamicChartJobRequest, runtime: Util.RuntimeOptions): SubmitDynamicChartJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.axisParams)) {
    query['AxisParams'] = request.axisParams;
  }
  if (!Util.isUnset(request.background)) {
    query['Background'] = request.background;
  }
  if (!Util.isUnset(request.chartConfig)) {
    query['ChartConfig'] = request.chartConfig;
  }
  if (!Util.isUnset(request.chartTitle)) {
    query['ChartTitle'] = request.chartTitle;
  }
  if (!Util.isUnset(request.chartType)) {
    query['ChartType'] = request.chartType;
  }
  if (!Util.isUnset(request.dataSource)) {
    query['DataSource'] = request.dataSource;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.input)) {
    query['Input'] = request.input;
  }
  if (!Util.isUnset(request.outputConfig)) {
    query['OutputConfig'] = request.outputConfig;
  }
  if (!Util.isUnset(request.subtitle)) {
    query['Subtitle'] = request.subtitle;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  if (!Util.isUnset(request.unit)) {
    query['Unit'] = request.unit;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitDynamicChartJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交动态图表任务
 *
 * @param request SubmitDynamicChartJobRequest
 * @return SubmitDynamicChartJobResponse
 */
async function submitDynamicChartJob(request: SubmitDynamicChartJobRequest): SubmitDynamicChartJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitDynamicChartJobWithOptions(request, runtime);
}

model SubmitDynamicImageJobRequest {
  input?: {
    media?: string(name='Media', description='This parameter is required.', example='oss://bucket/object.mp4'),
    type?: string(name='Type', description='This parameter is required.', example='OSS'),
  }(name='Input', description='This parameter is required.'),
  name?: string(name='Name', example='SampleJob'),
  output?: {
    media?: string(name='Media', description='This parameter is required.', example='****96e8864746a0b6f3****'),
    type?: string(name='Type', description='This parameter is required.', example='Media'),
  }(name='Output', description='This parameter is required.'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='****96e8864746a0b6f3****'),
    priority?: int32(name='Priority', example='6'),
  }(name='ScheduleConfig'),
  templateConfig?: {
    overwriteParams?: {
      format?: string(name='Format', example='gif'),
      fps?: int32(name='Fps', example='15'),
      height?: int32(name='Height', example='720'),
      longShortMode?: boolean(name='LongShortMode', example='false'),
      scanMode?: string(name='ScanMode', example='progressive'),
      timeSpan?: {
        duration?: string(name='Duration'),
        end?: string(name='End'),
        seek?: string(name='Seek'),
      }(name='TimeSpan'),
      width?: int32(name='Width', example='1024'),
    }(name='OverwriteParams'),
    templateId?: string(name='TemplateId', description='This parameter is required.', example='****96e8864746a0b6f3****'),
  }(name='TemplateConfig', description='This parameter is required.'),
  userData?: string(name='UserData', example='{"SampleKey": "SampleValue"}'),
}

model SubmitDynamicImageJobShrinkRequest {
  inputShrink?: string(name='Input', description='This parameter is required.'),
  name?: string(name='Name', example='SampleJob'),
  outputShrink?: string(name='Output', description='This parameter is required.'),
  scheduleConfigShrink?: string(name='ScheduleConfig'),
  templateConfigShrink?: string(name='TemplateConfig', description='This parameter is required.'),
  userData?: string(name='UserData', example='{"SampleKey": "SampleValue"}'),
}

model SubmitDynamicImageJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model SubmitDynamicImageJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitDynamicImageJobResponseBody(name='body'),
}

/**
 * @summary 提交异步动图任务接口
 *
 * @param tmpReq SubmitDynamicImageJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitDynamicImageJobResponse
 */
async function submitDynamicImageJobWithOptions(tmpReq: SubmitDynamicImageJobRequest, runtime: Util.RuntimeOptions): SubmitDynamicImageJobResponse {
  Util.validateModel(tmpReq);
  var request = new SubmitDynamicImageJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.input)) {
    request.inputShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.input, 'Input', 'json');
  }
  if (!Util.isUnset(tmpReq.output)) {
    request.outputShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.output, 'Output', 'json');
  }
  if (!Util.isUnset(tmpReq.scheduleConfig)) {
    request.scheduleConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scheduleConfig, 'ScheduleConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.templateConfig)) {
    request.templateConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.templateConfig, 'TemplateConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.inputShrink)) {
    query['Input'] = request.inputShrink;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.outputShrink)) {
    query['Output'] = request.outputShrink;
  }
  if (!Util.isUnset(request.scheduleConfigShrink)) {
    query['ScheduleConfig'] = request.scheduleConfigShrink;
  }
  if (!Util.isUnset(request.templateConfigShrink)) {
    query['TemplateConfig'] = request.templateConfigShrink;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitDynamicImageJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交异步动图任务接口
 *
 * @param request SubmitDynamicImageJobRequest
 * @return SubmitDynamicImageJobResponse
 */
async function submitDynamicImageJob(request: SubmitDynamicImageJobRequest): SubmitDynamicImageJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitDynamicImageJobWithOptions(request, runtime);
}

model SubmitIProductionJobRequest {
  functionName?: string(name='FunctionName', description='This parameter is required.', example='Cover'),
  input?: {
    media?: string(name='Media', description='This parameter is required.', example='oss://bucket/object'),
    type?: string(name='Type', description='This parameter is required.', example='OSS'),
  }(name='Input', description='This parameter is required.'),
  jobParams?: string(name='JobParams', example='{"Model":"gif"}'),
  name?: string(name='Name'),
  output?: {
    media?: string(name='Media', description='This parameter is required.', example='oss://bucket/object'),
    type?: string(name='Type', description='This parameter is required.', example='OSS'),
  }(name='Output', description='This parameter is required.'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='5246b8d12a62433ab77845074039c3dc'),
    priority?: int32(name='Priority', example='6'),
  }(name='ScheduleConfig'),
  templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
  userData?: string(name='UserData', example='{"test":1}'),
}

model SubmitIProductionJobShrinkRequest {
  functionName?: string(name='FunctionName', description='This parameter is required.', example='Cover'),
  inputShrink?: string(name='Input', description='This parameter is required.'),
  jobParams?: string(name='JobParams', example='{"Model":"gif"}'),
  name?: string(name='Name'),
  outputShrink?: string(name='Output', description='This parameter is required.'),
  scheduleConfigShrink?: string(name='ScheduleConfig'),
  templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
  userData?: string(name='UserData', example='{"test":1}'),
}

model SubmitIProductionJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', example='C1849434-FC47-5DC1-92B6-F7EAAFE3851E'),
}

model SubmitIProductionJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitIProductionJobResponseBody(name='body'),
}

/**
 * @summary 提交智能生产作业
 *
 * @param tmpReq SubmitIProductionJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitIProductionJobResponse
 */
async function submitIProductionJobWithOptions(tmpReq: SubmitIProductionJobRequest, runtime: Util.RuntimeOptions): SubmitIProductionJobResponse {
  Util.validateModel(tmpReq);
  var request = new SubmitIProductionJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.input)) {
    request.inputShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.input, 'Input', 'json');
  }
  if (!Util.isUnset(tmpReq.output)) {
    request.outputShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.output, 'Output', 'json');
  }
  if (!Util.isUnset(tmpReq.scheduleConfig)) {
    request.scheduleConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scheduleConfig, 'ScheduleConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.functionName)) {
    query['FunctionName'] = request.functionName;
  }
  if (!Util.isUnset(request.inputShrink)) {
    query['Input'] = request.inputShrink;
  }
  if (!Util.isUnset(request.jobParams)) {
    query['JobParams'] = request.jobParams;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.outputShrink)) {
    query['Output'] = request.outputShrink;
  }
  if (!Util.isUnset(request.scheduleConfigShrink)) {
    query['ScheduleConfig'] = request.scheduleConfigShrink;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitIProductionJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交智能生产作业
 *
 * @param request SubmitIProductionJobRequest
 * @return SubmitIProductionJobResponse
 */
async function submitIProductionJob(request: SubmitIProductionJobRequest): SubmitIProductionJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitIProductionJobWithOptions(request, runtime);
}

model SubmitLiveEditingJobRequest {
  clips?: string(name='Clips', description='This parameter is required.', example='[{\\\\"StartTime\\\\": \\\\" 2021-06-21T08:01:00Z\\\\",  \\\\"EndTime\\\\": \\\\" 2021-06-21T08:03:00Z\\\\" ,  "AppName": "app", "DomainName": "domain.com", "StreamName": "stream"},  {\\\\"StartTime\\\\": \\\\" 2021-06-21T08:05:00Z\\\\",  \\\\"EndTime\\\\": \\\\" 2021-06-21T08:09:00Z\\\\" }]'),
  liveStreamConfig?: string(name='LiveStreamConfig', example='{ "AppName": "app", "DomainName": "domain.com", "StreamName": "stream"  }'),
  mediaProduceConfig?: string(name='MediaProduceConfig', example='{ "Mode": "AccurateFast"}'),
  outputMediaConfig?: string(name='OutputMediaConfig'),
  outputMediaTarget?: string(name='OutputMediaTarget'),
  projectId?: string(name='ProjectId', example='****fddd7748b58bf1d47e95****'),
  userData?: string(name='UserData', example='{"key": "value"}'),
}

model SubmitLiveEditingJobResponseBody = {
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
  mediaId?: string(name='MediaId', example='****c469e944b5a856828dc2****'),
  mediaURL?: string(name='MediaURL', example='http://test-bucket.cn-shanghai.aliyuncs.com/test.mp4'),
  projectId?: string(name='ProjectId', example='****fddd7748b58bf1d47e95****'),
  requestId?: string(name='RequestId', example='****36-3C1E-4417-BDB2-1E034F****'),
  vodMediaId?: string(name='VodMediaId', example='****d7578s4h75ci945c14b****'),
}

model SubmitLiveEditingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitLiveEditingJobResponseBody(name='body'),
}

/**
 * @summary 提交直播剪辑任务
 *
 * @param request SubmitLiveEditingJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitLiveEditingJobResponse
 */
async function submitLiveEditingJobWithOptions(request: SubmitLiveEditingJobRequest, runtime: Util.RuntimeOptions): SubmitLiveEditingJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clips)) {
    query['Clips'] = request.clips;
  }
  if (!Util.isUnset(request.liveStreamConfig)) {
    query['LiveStreamConfig'] = request.liveStreamConfig;
  }
  if (!Util.isUnset(request.mediaProduceConfig)) {
    query['MediaProduceConfig'] = request.mediaProduceConfig;
  }
  if (!Util.isUnset(request.outputMediaConfig)) {
    query['OutputMediaConfig'] = request.outputMediaConfig;
  }
  if (!Util.isUnset(request.outputMediaTarget)) {
    query['OutputMediaTarget'] = request.outputMediaTarget;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitLiveEditingJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交直播剪辑任务
 *
 * @param request SubmitLiveEditingJobRequest
 * @return SubmitLiveEditingJobResponse
 */
async function submitLiveEditingJob(request: SubmitLiveEditingJobRequest): SubmitLiveEditingJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitLiveEditingJobWithOptions(request, runtime);
}

model SubmitLiveRecordJobRequest {
  name?: string(name='Name', description='代表资源名称的资源属性字段

This parameter is required.', example='live stream record 1'),
  notifyUrl?: string(name='NotifyUrl', description='回调地址', example='https://example.com/imsnotify'),
  recordOutput?: {
    bucket?: string(name='Bucket', example='imsbucket1'),
    endpoint?: string(name='Endpoint', example='oss-cn-hangzhou.aliyuncs.com'),
    type?: string(name='Type', description='This parameter is required.', example='oss'),
  }(name='RecordOutput', description='This parameter is required.'),
  streamInput?: {
    type?: string(name='Type', description='This parameter is required.', example='rtmp'),
    url?: string(name='Url', example='rtmp://example.com/live/stream1'),
  }(name='StreamInput', description='This parameter is required.'),
  templateId?: string(name='TemplateId', description='录制模板ID

This parameter is required.', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66'),
}

model SubmitLiveRecordJobShrinkRequest {
  name?: string(name='Name', description='代表资源名称的资源属性字段

This parameter is required.', example='live stream record 1'),
  notifyUrl?: string(name='NotifyUrl', description='回调地址', example='https://example.com/imsnotify'),
  recordOutputShrink?: string(name='RecordOutput', description='This parameter is required.'),
  streamInputShrink?: string(name='StreamInput', description='This parameter is required.'),
  templateId?: string(name='TemplateId', description='录制模板ID

This parameter is required.', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66'),
}

model SubmitLiveRecordJobResponseBody = {
  jobId?: string(name='JobId', example='ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66'),
  requestId?: string(name='RequestId', example='BEA98A0C-7870-15FE-B96F-8880BB600A2C'),
}

model SubmitLiveRecordJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitLiveRecordJobResponseBody(name='body'),
}

/**
 * @summary 提交录制任务
 *
 * @param tmpReq SubmitLiveRecordJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitLiveRecordJobResponse
 */
async function submitLiveRecordJobWithOptions(tmpReq: SubmitLiveRecordJobRequest, runtime: Util.RuntimeOptions): SubmitLiveRecordJobResponse {
  Util.validateModel(tmpReq);
  var request = new SubmitLiveRecordJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.recordOutput)) {
    request.recordOutputShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.recordOutput, 'RecordOutput', 'json');
  }
  if (!Util.isUnset(tmpReq.streamInput)) {
    request.streamInputShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.streamInput, 'StreamInput', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.notifyUrl)) {
    body['NotifyUrl'] = request.notifyUrl;
  }
  if (!Util.isUnset(request.recordOutputShrink)) {
    body['RecordOutput'] = request.recordOutputShrink;
  }
  if (!Util.isUnset(request.streamInputShrink)) {
    body['StreamInput'] = request.streamInputShrink;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitLiveRecordJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交录制任务
 *
 * @param request SubmitLiveRecordJobRequest
 * @return SubmitLiveRecordJobResponse
 */
async function submitLiveRecordJob(request: SubmitLiveRecordJobRequest): SubmitLiveRecordJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitLiveRecordJobWithOptions(request, runtime);
}

model SubmitLiveSnapshotJobRequest {
  callbackUrl?: string(name='CallbackUrl', example='http://www.aliyun.com/snapshot/callback'),
  jobName?: string(name='JobName', description='This parameter is required.'),
  snapshotOutput?: {
    bucket?: string(name='Bucket', description='This parameter is required.', example='testbucket'),
    endpoint?: string(name='Endpoint', description='This parameter is required.', example='oss-cn-shanghai.aliyuncs.com'),
    storageType?: string(name='StorageType', description='This parameter is required.', example='oss'),
  }(name='SnapshotOutput', description='This parameter is required.'),
  streamInput?: {
    type?: string(name='Type', description='This parameter is required.', example='rtmp'),
    url?: string(name='Url', description='This parameter is required.', example='rtmp://www.aliyun.com/stream'),
  }(name='StreamInput', description='This parameter is required.'),
  templateId?: string(name='TemplateId', description='This parameter is required.', example='****a046-263c-3560-978a-fb287782****'),
}

model SubmitLiveSnapshotJobShrinkRequest {
  callbackUrl?: string(name='CallbackUrl', example='http://www.aliyun.com/snapshot/callback'),
  jobName?: string(name='JobName', description='This parameter is required.'),
  snapshotOutputShrink?: string(name='SnapshotOutput', description='This parameter is required.'),
  streamInputShrink?: string(name='StreamInput', description='This parameter is required.'),
  templateId?: string(name='TemplateId', description='This parameter is required.', example='****a046-263c-3560-978a-fb287782****'),
}

model SubmitLiveSnapshotJobResponseBody = {
  jobId?: string(name='JobId', example='****a046-263c-3560-978a-fb287666****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model SubmitLiveSnapshotJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitLiveSnapshotJobResponseBody(name='body'),
}

/**
 * @summary 创建直播截图任务
 *
 * @param tmpReq SubmitLiveSnapshotJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitLiveSnapshotJobResponse
 */
async function submitLiveSnapshotJobWithOptions(tmpReq: SubmitLiveSnapshotJobRequest, runtime: Util.RuntimeOptions): SubmitLiveSnapshotJobResponse {
  Util.validateModel(tmpReq);
  var request = new SubmitLiveSnapshotJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.snapshotOutput)) {
    request.snapshotOutputShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.snapshotOutput, 'SnapshotOutput', 'json');
  }
  if (!Util.isUnset(tmpReq.streamInput)) {
    request.streamInputShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.streamInput, 'StreamInput', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.callbackUrl)) {
    body['CallbackUrl'] = request.callbackUrl;
  }
  if (!Util.isUnset(request.jobName)) {
    body['JobName'] = request.jobName;
  }
  if (!Util.isUnset(request.snapshotOutputShrink)) {
    body['SnapshotOutput'] = request.snapshotOutputShrink;
  }
  if (!Util.isUnset(request.streamInputShrink)) {
    body['StreamInput'] = request.streamInputShrink;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitLiveSnapshotJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建直播截图任务
 *
 * @param request SubmitLiveSnapshotJobRequest
 * @return SubmitLiveSnapshotJobResponse
 */
async function submitLiveSnapshotJob(request: SubmitLiveSnapshotJobRequest): SubmitLiveSnapshotJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitLiveSnapshotJobWithOptions(request, runtime);
}

model SubmitLiveTranscodeJobRequest {
  name?: string(name='Name', description='This parameter is required.', example='task1'),
  startMode?: int32(name='StartMode', description='This parameter is required.', example='0'),
  streamInput?: {
    inputUrl?: string(name='InputUrl', description='This parameter is required.', example='rtmp://mydomain/app/stream1'),
    type?: string(name='Type', description='This parameter is required.', example='rtmp'),
  }(name='StreamInput', description='This parameter is required.'),
  templateId?: string(name='TemplateId', description='This parameter is required.', example='****96e8864746a0b6f3****'),
  timedConfig?: {
    endTime?: string(name='EndTime', example='2022-07-20T08:20:32Z'),
    startTime?: string(name='StartTime', example='2022-02-21T00:00:00Z'),
  }(name='TimedConfig'),
  transcodeOutput?: {
    domainName?: string(name='DomainName', example='mydomain'),
    type?: string(name='Type', description='This parameter is required.', example='LiveCenter'),
  }(name='TranscodeOutput', description='This parameter is required.'),
}

model SubmitLiveTranscodeJobShrinkRequest {
  name?: string(name='Name', description='This parameter is required.', example='task1'),
  startMode?: int32(name='StartMode', description='This parameter is required.', example='0'),
  streamInputShrink?: string(name='StreamInput', description='This parameter is required.'),
  templateId?: string(name='TemplateId', description='This parameter is required.', example='****96e8864746a0b6f3****'),
  timedConfigShrink?: string(name='TimedConfig'),
  transcodeOutputShrink?: string(name='TranscodeOutput', description='This parameter is required.'),
}

model SubmitLiveTranscodeJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
}

model SubmitLiveTranscodeJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitLiveTranscodeJobResponseBody(name='body'),
}

/**
 * @summary 提交转码任务
 *
 * @param tmpReq SubmitLiveTranscodeJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitLiveTranscodeJobResponse
 */
async function submitLiveTranscodeJobWithOptions(tmpReq: SubmitLiveTranscodeJobRequest, runtime: Util.RuntimeOptions): SubmitLiveTranscodeJobResponse {
  Util.validateModel(tmpReq);
  var request = new SubmitLiveTranscodeJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.streamInput)) {
    request.streamInputShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.streamInput, 'StreamInput', 'json');
  }
  if (!Util.isUnset(tmpReq.timedConfig)) {
    request.timedConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.timedConfig, 'TimedConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.transcodeOutput)) {
    request.transcodeOutputShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.transcodeOutput, 'TranscodeOutput', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.startMode)) {
    query['StartMode'] = request.startMode;
  }
  if (!Util.isUnset(request.streamInputShrink)) {
    query['StreamInput'] = request.streamInputShrink;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.timedConfigShrink)) {
    query['TimedConfig'] = request.timedConfigShrink;
  }
  if (!Util.isUnset(request.transcodeOutputShrink)) {
    query['TranscodeOutput'] = request.transcodeOutputShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitLiveTranscodeJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交转码任务
 *
 * @param request SubmitLiveTranscodeJobRequest
 * @return SubmitLiveTranscodeJobResponse
 */
async function submitLiveTranscodeJob(request: SubmitLiveTranscodeJobRequest): SubmitLiveTranscodeJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitLiveTranscodeJobWithOptions(request, runtime);
}

model SubmitMediaAiAnalysisJobRequest {
  analysisParams?: string(name='AnalysisParams', example='{"nlpParams":{"sourceLanguage":"cn","diarizationEnabled":true,"speakerCount":0,"summarizationEnabled":false,"translationEnabled":false}}'),
  input?: string(name='Input', example='{"MediaType":"video","Media":"https://xxx.com/your_movie.mp4"}'),
}

model SubmitMediaAiAnalysisJobResponseBody = {
  mediaId?: string(name='MediaId', example='******b48fb04483915d4f2cd8******'),
  requestId?: string(name='RequestId', description='Id of the request', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
}

model SubmitMediaAiAnalysisJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitMediaAiAnalysisJobResponseBody(name='body'),
}

/**
 * @summary 提交媒资结构化分析任务
 *
 * @param request SubmitMediaAiAnalysisJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitMediaAiAnalysisJobResponse
 */
async function submitMediaAiAnalysisJobWithOptions(request: SubmitMediaAiAnalysisJobRequest, runtime: Util.RuntimeOptions): SubmitMediaAiAnalysisJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.analysisParams)) {
    query['AnalysisParams'] = request.analysisParams;
  }
  if (!Util.isUnset(request.input)) {
    query['Input'] = request.input;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitMediaAiAnalysisJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交媒资结构化分析任务
 *
 * @param request SubmitMediaAiAnalysisJobRequest
 * @return SubmitMediaAiAnalysisJobResponse
 */
async function submitMediaAiAnalysisJob(request: SubmitMediaAiAnalysisJobRequest): SubmitMediaAiAnalysisJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitMediaAiAnalysisJobWithOptions(request, runtime);
}

model SubmitMediaCensorJobRequest {
  barrages?: string(name='Barrages', example='hello world'),
  coverImages?: string(name='CoverImages', example='[{"Bucket":"example-bucket-****","Location":"oss-cn-shanghai","Object":"example-****.jpeg","RoleArn":"acs:ram::1997018457688683:role/AliyunICEDefaultRole"}]'),
  description?: string(name='Description', example='example description'),
  input?: {
    media?: string(name='Media', example='1b1b9cd148034739af413150fded****'),
    type?: string(name='Type', example='Media'),
  }(name='Input'),
  notifyUrl?: string(name='NotifyUrl', example='mns://125340688170****.oss-cn-shanghai.aliyuncs.com/queues/example-pipeline'),
  output?: string(name='Output', example='oss://sashimi-cn-shanghai/censor/snapshot-{Count}.jpg'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='5246b8d12a62433ab77845074039****'),
    priority?: int32(name='Priority', example='6'),
  }(name='ScheduleConfig'),
  templateId?: string(name='TemplateId', example='S00000001-100060'),
  title?: string(name='Title', example='Hello World'),
  userData?: string(name='UserData', example='UserDatatestid-001-****'),
}

model SubmitMediaCensorJobShrinkRequest {
  barrages?: string(name='Barrages', example='hello world'),
  coverImages?: string(name='CoverImages', example='[{"Bucket":"example-bucket-****","Location":"oss-cn-shanghai","Object":"example-****.jpeg","RoleArn":"acs:ram::1997018457688683:role/AliyunICEDefaultRole"}]'),
  description?: string(name='Description', example='example description'),
  inputShrink?: string(name='Input'),
  notifyUrl?: string(name='NotifyUrl', example='mns://125340688170****.oss-cn-shanghai.aliyuncs.com/queues/example-pipeline'),
  output?: string(name='Output', example='oss://sashimi-cn-shanghai/censor/snapshot-{Count}.jpg'),
  scheduleConfigShrink?: string(name='ScheduleConfig'),
  templateId?: string(name='TemplateId', example='S00000001-100060'),
  title?: string(name='Title', example='Hello World'),
  userData?: string(name='UserData', example='UserDatatestid-001-****'),
}

model SubmitMediaCensorJobResponseBody = {
  jobId?: string(name='JobId', example='88c6ca184c0e47098a5b665e2****'),
  requestId?: string(name='RequestId', example='25818875-5F78-4A13-BEF6-D7393642CA58'),
}

model SubmitMediaCensorJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitMediaCensorJobResponseBody(name='body'),
}

/**
 * @param tmpReq SubmitMediaCensorJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitMediaCensorJobResponse
 */
async function submitMediaCensorJobWithOptions(tmpReq: SubmitMediaCensorJobRequest, runtime: Util.RuntimeOptions): SubmitMediaCensorJobResponse {
  Util.validateModel(tmpReq);
  var request = new SubmitMediaCensorJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.input)) {
    request.inputShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.input, 'Input', 'json');
  }
  if (!Util.isUnset(tmpReq.scheduleConfig)) {
    request.scheduleConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scheduleConfig, 'ScheduleConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.barrages)) {
    query['Barrages'] = request.barrages;
  }
  if (!Util.isUnset(request.coverImages)) {
    query['CoverImages'] = request.coverImages;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.inputShrink)) {
    query['Input'] = request.inputShrink;
  }
  if (!Util.isUnset(request.notifyUrl)) {
    query['NotifyUrl'] = request.notifyUrl;
  }
  if (!Util.isUnset(request.output)) {
    query['Output'] = request.output;
  }
  if (!Util.isUnset(request.scheduleConfigShrink)) {
    query['ScheduleConfig'] = request.scheduleConfigShrink;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitMediaCensorJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request SubmitMediaCensorJobRequest
 * @return SubmitMediaCensorJobResponse
 */
async function submitMediaCensorJob(request: SubmitMediaCensorJobRequest): SubmitMediaCensorJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitMediaCensorJobWithOptions(request, runtime);
}

model SubmitMediaInfoJobRequest {
  input?: {
    media?: string(name='Media', description='This parameter is required.', example='oss://bucket/path/to/video.mp4'),
    type?: string(name='Type', description='This parameter is required.', example='OSS'),
  }(name='Input', description='This parameter is required.'),
  name?: string(name='Name', example='job-name'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
    priority?: int32(name='Priority', example='5'),
  }(name='ScheduleConfig'),
  userData?: string(name='UserData', example='user-data'),
}

model SubmitMediaInfoJobShrinkRequest {
  inputShrink?: string(name='Input', description='This parameter is required.'),
  name?: string(name='Name', example='job-name'),
  scheduleConfigShrink?: string(name='ScheduleConfig'),
  userData?: string(name='UserData', example='user-data'),
}

model SubmitMediaInfoJobResponseBody = {
  mediaInfoJob?: {
    async?: boolean(name='Async', example='true'),
    finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
    input?: {
      media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
      type?: string(name='Type', example='OSS'),
    }(name='Input'),
    jobId?: string(name='JobId', example='ab4802364a2e49208c99efab82dfa8e8'),
    mediaInfoProperty?: {
      audioStreamInfoList?: [ 
        {
          bitrate?: string(name='Bitrate', example='0.f'),
          channelLayout?: string(name='ChannelLayout', example='stereo'),
          channels?: string(name='Channels', example='2'),
          codecLongName?: string(name='CodecLongName', example='AAC (Advanced Audio Coding)'),
          codecName?: string(name='CodecName', example='aac'),
          codecTag?: string(name='CodecTag', example='0x000f'),
          codecTagString?: string(name='CodecTagString', example='[15][0][0][0]'),
          codecTimeBase?: string(name='CodecTimeBase', example='1/44100'),
          duration?: string(name='Duration', example='403.039989'),
          index?: string(name='Index', example='1'),
          lang?: string(name='Lang', example='us'),
          sampleFmt?: string(name='SampleFmt', example='fltp'),
          sampleRate?: string(name='SampleRate', example='44100'),
          startTime?: string(name='StartTime', example='1.473556'),
          timebase?: string(name='Timebase', example='1/90000'),
        }
      ](name='AudioStreamInfoList'),
      fileBasicInfo?: {
        bitrate?: string(name='Bitrate', example='888.563'),
        duration?: string(name='Duration', example='403.039999'),
        fileName?: string(name='FileName', example='file.m3u8'),
        fileSize?: string(name='FileSize', example='31737'),
        fileStatus?: string(name='FileStatus', example='Normal'),
        fileType?: string(name='FileType', example='source_file'),
        fileUrl?: string(name='FileUrl', example='http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8'),
        formatName?: string(name='FormatName', example='hls,applehttp'),
        height?: string(name='Height', example='478'),
        mediaId?: string(name='MediaId', example='2b36bd19c13f4145b094c0cad80dbce5'),
        region?: string(name='Region', example='cn-shanghai'),
        width?: string(name='Width', example='848'),
      }(name='FileBasicInfo'),
      videoStreamInfoList?: [ 
        {
          avgFps?: string(name='Avg_fps', example='25.0'),
          bitRate?: string(name='Bit_rate', example='888.563'),
          codecLongName?: string(name='Codec_long_name', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
          codecName?: string(name='Codec_name', example='h264'),
          codecTag?: string(name='Codec_tag', example='0x001b'),
          codecTagString?: string(name='Codec_tag_string', example='[27][0][0][0]'),
          codecTimeBase?: string(name='Codec_time_base', example='1/50'),
          dar?: string(name='Dar', example='16:9'),
          duration?: string(name='Duration', example='403.039989'),
          fps?: string(name='Fps', example='25.0'),
          hasBFrames?: string(name='Has_b_frames', example='2'),
          height?: string(name='Height', example='478'),
          index?: string(name='Index', example='0'),
          lang?: string(name='Lang', example='zh'),
          level?: string(name='Level', example='31'),
          numFrames?: string(name='NumFrames', example='10040'),
          pixFmt?: string(name='PixFmt', example='yuv420p'),
          profile?: string(name='Profile', example='High'),
          rotate?: string(name='Rotate', example='0'),
          sar?: string(name='Sar', example='478:477'),
          startTime?: string(name='Start_time', example='1.473556'),
          timeBase?: string(name='Time_base', example='1/90000'),
          width?: string(name='Width', example='848'),
        }
      ](name='VideoStreamInfoList'),
    }(name='MediaInfoProperty'),
    name?: string(name='Name', example='job-name'),
    requestId?: string(name='RequestId', example='4879B9DE-E4B6-19DC-91F5-9D5F4DCE4168'),
    scheduleConfig?: {
      pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
      priority?: int32(name='Priority', example='5'),
    }(name='ScheduleConfig'),
    status?: string(name='Status', example='Init'),
    submitResultJson?: map[string]any(name='SubmitResultJson', example='{}'),
    submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
    triggerSource?: string(name='TriggerSource', example='API'),
    userData?: string(name='UserData', example='user-data'),
  }(name='MediaInfoJob', description='MediaInfoJobDTO'),
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model SubmitMediaInfoJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitMediaInfoJobResponseBody(name='body'),
}

/**
 * @param tmpReq SubmitMediaInfoJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitMediaInfoJobResponse
 */
async function submitMediaInfoJobWithOptions(tmpReq: SubmitMediaInfoJobRequest, runtime: Util.RuntimeOptions): SubmitMediaInfoJobResponse {
  Util.validateModel(tmpReq);
  var request = new SubmitMediaInfoJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.input)) {
    request.inputShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.input, 'Input', 'json');
  }
  if (!Util.isUnset(tmpReq.scheduleConfig)) {
    request.scheduleConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scheduleConfig, 'ScheduleConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.inputShrink)) {
    query['Input'] = request.inputShrink;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.scheduleConfigShrink)) {
    query['ScheduleConfig'] = request.scheduleConfigShrink;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitMediaInfoJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request SubmitMediaInfoJobRequest
 * @return SubmitMediaInfoJobResponse
 */
async function submitMediaInfoJob(request: SubmitMediaInfoJobRequest): SubmitMediaInfoJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitMediaInfoJobWithOptions(request, runtime);
}

model SubmitMediaProducingJobRequest {
  clientToken?: string(name='ClientToken', example='****12e8864746a0a398****'),
  clipsParam?: string(name='ClipsParam'),
  editingProduceConfig?: string(name='EditingProduceConfig'),
  mediaMetadata?: string(name='MediaMetadata', example='{
      "Title":"test-title",
      "Tags":"test-tags1,tags2"
}'),
  outputMediaConfig?: string(name='OutputMediaConfig', description='This parameter is required.', example='{"MediaURL":"https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4"}'),
  outputMediaTarget?: string(name='OutputMediaTarget', example='oss-object'),
  projectId?: string(name='ProjectId', example='xxxxxfb2101cb318xxxxx'),
  projectMetadata?: string(name='ProjectMetadata'),
  source?: string(name='Source', example='OPENAPI'),
  templateId?: string(name='TemplateId', example='****96e8864746a0b6f3****'),
  timeline?: string(name='Timeline'),
  userData?: string(name='UserData'),
}

model SubmitMediaProducingJobResponseBody = {
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
  mediaId?: string(name='MediaId', example='****c469e944b5a856828dc2****'),
  projectId?: string(name='ProjectId', example='****b4549d46c88681030f6e****'),
  requestId?: string(name='RequestId', example='****36-3C1E-4417-BDB2-1E034F****'),
  vodMediaId?: string(name='VodMediaId', example='****d8s4h75ci975745c14b****'),
}

model SubmitMediaProducingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitMediaProducingJobResponseBody(name='body'),
}

/**
 * @summary SubmitMediaProducingJob
 *
 * @param request SubmitMediaProducingJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitMediaProducingJobResponse
 */
async function submitMediaProducingJobWithOptions(request: SubmitMediaProducingJobRequest, runtime: Util.RuntimeOptions): SubmitMediaProducingJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.clipsParam)) {
    query['ClipsParam'] = request.clipsParam;
  }
  if (!Util.isUnset(request.editingProduceConfig)) {
    query['EditingProduceConfig'] = request.editingProduceConfig;
  }
  if (!Util.isUnset(request.mediaMetadata)) {
    query['MediaMetadata'] = request.mediaMetadata;
  }
  if (!Util.isUnset(request.outputMediaConfig)) {
    query['OutputMediaConfig'] = request.outputMediaConfig;
  }
  if (!Util.isUnset(request.outputMediaTarget)) {
    query['OutputMediaTarget'] = request.outputMediaTarget;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectMetadata)) {
    query['ProjectMetadata'] = request.projectMetadata;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.timeline)) {
    body['Timeline'] = request.timeline;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitMediaProducingJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary SubmitMediaProducingJob
 *
 * @param request SubmitMediaProducingJobRequest
 * @return SubmitMediaProducingJobResponse
 */
async function submitMediaProducingJob(request: SubmitMediaProducingJobRequest): SubmitMediaProducingJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitMediaProducingJobWithOptions(request, runtime);
}

model SubmitPackageJobRequest {
  inputs?: [ 
    {
      input?: {
        media?: string(name='Media', description='This parameter is required.', example='oss://bucket/path/to/video.mp4'),
        type?: string(name='Type', description='This parameter is required.', example='OSS'),
      }(name='Input', description='This parameter is required.'),
    }
  ](name='Inputs', description='This parameter is required.'),
  name?: string(name='Name', example='job-name'),
  output?: {
    media?: string(name='Media', description='This parameter is required.', example='oss://bucket/path/to/video.mp4'),
    type?: string(name='Type', description='This parameter is required.', example='OSS'),
  }(name='Output', description='This parameter is required.'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
    priority?: int32(name='Priority', example='5'),
  }(name='ScheduleConfig'),
  userData?: string(name='UserData', example='{"param": "value"}'),
}

model SubmitPackageJobShrinkRequest {
  inputsShrink?: string(name='Inputs', description='This parameter is required.'),
  name?: string(name='Name', example='job-name'),
  outputShrink?: string(name='Output', description='This parameter is required.'),
  scheduleConfigShrink?: string(name='ScheduleConfig'),
  userData?: string(name='UserData', example='{"param": "value"}'),
}

model SubmitPackageJobResponseBody = {
  jobId?: string(name='JobId', example='2d705f385b704ee5b*******a36d93e0'),
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model SubmitPackageJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitPackageJobResponseBody(name='body'),
}

/**
 * @summary 提交打包任务
 *
 * @param tmpReq SubmitPackageJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitPackageJobResponse
 */
async function submitPackageJobWithOptions(tmpReq: SubmitPackageJobRequest, runtime: Util.RuntimeOptions): SubmitPackageJobResponse {
  Util.validateModel(tmpReq);
  var request = new SubmitPackageJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.inputs)) {
    request.inputsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.inputs, 'Inputs', 'json');
  }
  if (!Util.isUnset(tmpReq.output)) {
    request.outputShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.output, 'Output', 'json');
  }
  if (!Util.isUnset(tmpReq.scheduleConfig)) {
    request.scheduleConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scheduleConfig, 'ScheduleConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.inputsShrink)) {
    query['Inputs'] = request.inputsShrink;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.outputShrink)) {
    query['Output'] = request.outputShrink;
  }
  if (!Util.isUnset(request.scheduleConfigShrink)) {
    query['ScheduleConfig'] = request.scheduleConfigShrink;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitPackageJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交打包任务
 *
 * @param request SubmitPackageJobRequest
 * @return SubmitPackageJobResponse
 */
async function submitPackageJob(request: SubmitPackageJobRequest): SubmitPackageJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitPackageJobWithOptions(request, runtime);
}

model SubmitSmarttagJobRequest {
  content?: string(name='Content', example='example content ****'),
  contentAddr?: string(name='ContentAddr', example='http://123.com/testVideo.mp4'),
  contentType?: string(name='ContentType', example='application/zip'),
  input?: {
    media?: string(name='Media', example='c5c62d8f0361337cab312dce8e77dc6d'),
    type?: string(name='Type', example='Media'),
  }(name='Input', description='input'),
  notifyUrl?: string(name='NotifyUrl', example='https://example.com/endpoint/aliyun/ai?id=76401125000***'),
  params?: string(name='Params', example='{"needAsrData":true, "needOcrData":false}'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='acdbfe4323bcfdae'),
    priority?: string(name='Priority', example='4'),
  }(name='ScheduleConfig', description='scheduleConfig'),
  templateId?: string(name='TemplateId', example='39f8e0bc005e4f309379701645f4'),
  title?: string(name='Title', example='example-title-****'),
  userData?: string(name='UserData', example='{“a”:"test"}'),
}

model SubmitSmarttagJobShrinkRequest {
  content?: string(name='Content', example='example content ****'),
  contentAddr?: string(name='ContentAddr', example='http://123.com/testVideo.mp4'),
  contentType?: string(name='ContentType', example='application/zip'),
  inputShrink?: string(name='Input', description='input'),
  notifyUrl?: string(name='NotifyUrl', example='https://example.com/endpoint/aliyun/ai?id=76401125000***'),
  params?: string(name='Params', example='{"needAsrData":true, "needOcrData":false}'),
  scheduleConfigShrink?: string(name='ScheduleConfig', description='scheduleConfig'),
  templateId?: string(name='TemplateId', example='39f8e0bc005e4f309379701645f4'),
  title?: string(name='Title', example='example-title-****'),
  userData?: string(name='UserData', example='{“a”:"test"}'),
}

model SubmitSmarttagJobResponseBody = {
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model SubmitSmarttagJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitSmarttagJobResponseBody(name='body'),
}

/**
 * @param tmpReq SubmitSmarttagJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitSmarttagJobResponse
 */
async function submitSmarttagJobWithOptions(tmpReq: SubmitSmarttagJobRequest, runtime: Util.RuntimeOptions): SubmitSmarttagJobResponse {
  Util.validateModel(tmpReq);
  var request = new SubmitSmarttagJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.input)) {
    request.inputShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.input, 'Input', 'json');
  }
  if (!Util.isUnset(tmpReq.scheduleConfig)) {
    request.scheduleConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scheduleConfig, 'ScheduleConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.contentAddr)) {
    query['ContentAddr'] = request.contentAddr;
  }
  if (!Util.isUnset(request.contentType)) {
    query['ContentType'] = request.contentType;
  }
  if (!Util.isUnset(request.inputShrink)) {
    query['Input'] = request.inputShrink;
  }
  if (!Util.isUnset(request.notifyUrl)) {
    query['NotifyUrl'] = request.notifyUrl;
  }
  if (!Util.isUnset(request.params)) {
    query['Params'] = request.params;
  }
  if (!Util.isUnset(request.scheduleConfigShrink)) {
    query['ScheduleConfig'] = request.scheduleConfigShrink;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitSmarttagJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request SubmitSmarttagJobRequest
 * @return SubmitSmarttagJobResponse
 */
async function submitSmarttagJob(request: SubmitSmarttagJobRequest): SubmitSmarttagJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSmarttagJobWithOptions(request, runtime);
}

model SubmitSnapshotJobRequest {
  input?: {
    media?: string(name='Media', description='This parameter is required.', example='oss://bucket/object.mp4'),
    type?: string(name='Type', description='This parameter is required.', example='Media'),
  }(name='Input', description='This parameter is required.'),
  name?: string(name='Name', example='SampleJob'),
  output?: {
    media?: string(name='Media', description='This parameter is required.', example='oss://test-bucket/output-{Count}.jpg'),
    type?: string(name='Type', description='This parameter is required.', example='OSS'),
  }(name='Output', description='This parameter is required.'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='****96e8864746a0b6f3****'),
  }(name='ScheduleConfig'),
  templateConfig?: {
    overwriteParams?: {
      blackLevel?: int32(name='BlackLevel', example='30'),
      count?: long(name='Count', example='5'),
      frameType?: string(name='FrameType', example='intra'),
      height?: int32(name='Height', example='480'),
      interval?: long(name='Interval', example='10'),
      isSptFrag?: boolean(name='IsSptFrag', example='true'),
      pixelBlackThreshold?: int32(name='PixelBlackThreshold', example='70'),
      spriteSnapshotConfig?: {
        cellHeight?: int32(name='CellHeight', example='480'),
        cellWidth?: int32(name='CellWidth', example='720'),
        color?: string(name='Color', example='#000000'),
        columns?: int32(name='Columns', example='20'),
        lines?: int32(name='Lines', example='20'),
        margin?: int32(name='Margin', example='20'),
        padding?: int32(name='Padding', example='20'),
      }(name='SpriteSnapshotConfig'),
      time?: long(name='Time', example='1000'),
      type?: string(name='Type', example='Sprite'),
      width?: int32(name='Width', example='720'),
    }(name='OverwriteParams'),
    templateId?: string(name='TemplateId', description='This parameter is required.', example='****96e8864746a0b6f3****'),
  }(name='TemplateConfig', description='This parameter is required.'),
  userData?: string(name='UserData', example='{"test parameter": "test value"}'),
}

model SubmitSnapshotJobShrinkRequest {
  inputShrink?: string(name='Input', description='This parameter is required.'),
  name?: string(name='Name', example='SampleJob'),
  outputShrink?: string(name='Output', description='This parameter is required.'),
  scheduleConfigShrink?: string(name='ScheduleConfig'),
  templateConfigShrink?: string(name='TemplateConfig', description='This parameter is required.'),
  userData?: string(name='UserData', example='{"test parameter": "test value"}'),
}

model SubmitSnapshotJobResponseBody = {
  jobId?: string(name='JobId', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model SubmitSnapshotJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitSnapshotJobResponseBody(name='body'),
}

/**
 * @summary 提交异步截图任务
 *
 * @param tmpReq SubmitSnapshotJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitSnapshotJobResponse
 */
async function submitSnapshotJobWithOptions(tmpReq: SubmitSnapshotJobRequest, runtime: Util.RuntimeOptions): SubmitSnapshotJobResponse {
  Util.validateModel(tmpReq);
  var request = new SubmitSnapshotJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.input)) {
    request.inputShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.input, 'Input', 'json');
  }
  if (!Util.isUnset(tmpReq.output)) {
    request.outputShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.output, 'Output', 'json');
  }
  if (!Util.isUnset(tmpReq.scheduleConfig)) {
    request.scheduleConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scheduleConfig, 'ScheduleConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.templateConfig)) {
    request.templateConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.templateConfig, 'TemplateConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.inputShrink)) {
    query['Input'] = request.inputShrink;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.outputShrink)) {
    query['Output'] = request.outputShrink;
  }
  if (!Util.isUnset(request.scheduleConfigShrink)) {
    query['ScheduleConfig'] = request.scheduleConfigShrink;
  }
  if (!Util.isUnset(request.templateConfigShrink)) {
    query['TemplateConfig'] = request.templateConfigShrink;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitSnapshotJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交异步截图任务
 *
 * @param request SubmitSnapshotJobRequest
 * @return SubmitSnapshotJobResponse
 */
async function submitSnapshotJob(request: SubmitSnapshotJobRequest): SubmitSnapshotJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSnapshotJobWithOptions(request, runtime);
}

model SubmitStandardCustomizedVoiceJobRequest {
  audios?: string(name='Audios', example='****571c704445f9a0ee011406c2****,****571c704445f9a0ee011406c2****,****571c704445f9a0ee011406c2****'),
  authentication?: string(name='Authentication', example='****571c704445f9a0ee011406c2****'),
  demoAudioMediaURL?: string(name='DemoAudioMediaURL', example='https://your-bucket.oss-cn-shanghai.aliyuncs.com/demo.mp3'),
  gender?: string(name='Gender', example='female'),
  voiceName?: string(name='VoiceName'),
}

model SubmitStandardCustomizedVoiceJobResponseBody = {
  data?: {
    jobId?: string(name='JobId', example='****d718e2ff4f018ccf419a7b71****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='****63E8B7C7-4812-46AD-0FA56029AC86****'),
  success?: boolean(name='Success', example='true'),
}

model SubmitStandardCustomizedVoiceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitStandardCustomizedVoiceJobResponseBody(name='body'),
}

/**
 * @summary 提交标准版人声克隆训练任务
 *
 * @param request SubmitStandardCustomizedVoiceJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitStandardCustomizedVoiceJobResponse
 */
async function submitStandardCustomizedVoiceJobWithOptions(request: SubmitStandardCustomizedVoiceJobRequest, runtime: Util.RuntimeOptions): SubmitStandardCustomizedVoiceJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.audios)) {
    query['Audios'] = request.audios;
  }
  if (!Util.isUnset(request.authentication)) {
    query['Authentication'] = request.authentication;
  }
  if (!Util.isUnset(request.demoAudioMediaURL)) {
    query['DemoAudioMediaURL'] = request.demoAudioMediaURL;
  }
  if (!Util.isUnset(request.gender)) {
    query['Gender'] = request.gender;
  }
  if (!Util.isUnset(request.voiceName)) {
    query['VoiceName'] = request.voiceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitStandardCustomizedVoiceJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交标准版人声克隆训练任务
 *
 * @param request SubmitStandardCustomizedVoiceJobRequest
 * @return SubmitStandardCustomizedVoiceJobResponse
 */
async function submitStandardCustomizedVoiceJob(request: SubmitStandardCustomizedVoiceJobRequest): SubmitStandardCustomizedVoiceJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitStandardCustomizedVoiceJobWithOptions(request, runtime);
}

model SubmitSyncMediaInfoJobRequest {
  input?: {
    media?: string(name='Media', description='This parameter is required.', example='oss://bucket/path/to/video.mp4'),
    type?: string(name='Type', description='This parameter is required.', example='OSS'),
  }(name='Input', description='This parameter is required.'),
  name?: string(name='Name', example='job-name'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
    priority?: int32(name='Priority', example='5'),
  }(name='ScheduleConfig'),
  userData?: string(name='UserData', example='user-data'),
}

model SubmitSyncMediaInfoJobShrinkRequest {
  inputShrink?: string(name='Input', description='This parameter is required.'),
  name?: string(name='Name', example='job-name'),
  scheduleConfigShrink?: string(name='ScheduleConfig'),
  userData?: string(name='UserData', example='user-data'),
}

model SubmitSyncMediaInfoJobResponseBody = {
  mediaInfoJob?: {
    async?: boolean(name='Async', example='true'),
    finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
    input?: {
      media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
      type?: string(name='Type', example='OSS'),
    }(name='Input'),
    jobId?: string(name='JobId', example='ab4802364a2e49208c99efab82dfa8e8'),
    mediaInfoProperty?: {
      audioStreamInfoList?: [ 
        {
          bitrate?: string(name='Bitrate', example='0.f'),
          channelLayout?: string(name='ChannelLayout', example='stereo'),
          channels?: string(name='Channels', example='2'),
          codecLongName?: string(name='CodecLongName', example='AAC (Advanced Audio Coding)'),
          codecName?: string(name='CodecName', example='aac'),
          codecTag?: string(name='CodecTag', example='0x000f'),
          codecTagString?: string(name='CodecTagString', example='[15][0][0][0]'),
          codecTimeBase?: string(name='CodecTimeBase', example='1/44100'),
          duration?: string(name='Duration', example='403.039989'),
          index?: string(name='Index', example='1'),
          lang?: string(name='Lang', example='us'),
          sampleFmt?: string(name='SampleFmt', example='fltp'),
          sampleRate?: string(name='SampleRate', example='44100'),
          startTime?: string(name='StartTime', example='1.473556'),
          timebase?: string(name='Timebase', example='1/90000'),
        }
      ](name='AudioStreamInfoList'),
      fileBasicInfo?: {
        bitrate?: string(name='Bitrate', example='888.563'),
        duration?: string(name='Duration', example='403.039999'),
        fileName?: string(name='FileName', example='file.m3u8'),
        fileSize?: string(name='FileSize', example='31737'),
        fileStatus?: string(name='FileStatus', example='Normal'),
        fileType?: string(name='FileType', example='source_file'),
        fileUrl?: string(name='FileUrl', example='http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8'),
        formatName?: string(name='FormatName', example='hls,applehttp'),
        height?: string(name='Height', example='478'),
        mediaId?: string(name='MediaId', example='999e68259c924f52a6be603cbb3f91cc'),
        region?: string(name='Region', example='cn-shanghai'),
        width?: string(name='Width', example='848'),
      }(name='FileBasicInfo'),
      videoStreamInfoList?: [ 
        {
          avgFps?: string(name='Avg_fps', example='25.0'),
          bitRate?: string(name='Bit_rate', example='888.563'),
          codecLongName?: string(name='Codec_long_name', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
          codecName?: string(name='Codec_name', example='h264'),
          codecTag?: string(name='Codec_tag', example='0x001b'),
          codecTagString?: string(name='Codec_tag_string', example='[27][0][0][0]'),
          codecTimeBase?: string(name='Codec_time_base', example='1/50'),
          dar?: string(name='Dar', example='16:9'),
          duration?: string(name='Duration', example='403.039989'),
          fps?: string(name='Fps', example='25.0'),
          hasBFrames?: string(name='Has_b_frames', example='2'),
          height?: string(name='Height', example='478'),
          index?: string(name='Index', example='0'),
          lang?: string(name='Lang', example='zh'),
          level?: string(name='Level', example='31'),
          numFrames?: string(name='NumFrames', example='10040'),
          pixFmt?: string(name='PixFmt', example='yuv420p'),
          profile?: string(name='Profile', example='High'),
          rotate?: string(name='Rotate', example='0'),
          sar?: string(name='Sar', example='478:477'),
          startTime?: string(name='Start_time', example='1.473556'),
          timeBase?: string(name='Time_base', example='1/90000'),
          width?: string(name='Width', example='848'),
        }
      ](name='VideoStreamInfoList'),
    }(name='MediaInfoProperty'),
    name?: string(name='Name', example='job-name'),
    requestId?: string(name='RequestId', example='4879B9DE-E4B6-19DC-91F5-9D5F4DCE4168'),
    scheduleConfig?: {
      pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
      priority?: int32(name='Priority', example='5'),
    }(name='ScheduleConfig'),
    status?: string(name='Status', example='Init'),
    submitResultJson?: map[string]any(name='SubmitResultJson', example='{}'),
    submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
    triggerSource?: string(name='TriggerSource', example='API'),
    userData?: string(name='UserData', example='user-data'),
  }(name='MediaInfoJob', description='MediaInfoJobDTO'),
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
}

model SubmitSyncMediaInfoJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitSyncMediaInfoJobResponseBody(name='body'),
}

/**
 * @param tmpReq SubmitSyncMediaInfoJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitSyncMediaInfoJobResponse
 */
async function submitSyncMediaInfoJobWithOptions(tmpReq: SubmitSyncMediaInfoJobRequest, runtime: Util.RuntimeOptions): SubmitSyncMediaInfoJobResponse {
  Util.validateModel(tmpReq);
  var request = new SubmitSyncMediaInfoJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.input)) {
    request.inputShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.input, 'Input', 'json');
  }
  if (!Util.isUnset(tmpReq.scheduleConfig)) {
    request.scheduleConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scheduleConfig, 'ScheduleConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.inputShrink)) {
    query['Input'] = request.inputShrink;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.scheduleConfigShrink)) {
    query['ScheduleConfig'] = request.scheduleConfigShrink;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitSyncMediaInfoJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request SubmitSyncMediaInfoJobRequest
 * @return SubmitSyncMediaInfoJobResponse
 */
async function submitSyncMediaInfoJob(request: SubmitSyncMediaInfoJobRequest): SubmitSyncMediaInfoJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSyncMediaInfoJobWithOptions(request, runtime);
}

model SubmitTextGenerateJobRequest {
  description?: string(name='Description'),
  generateConfig?: string(name='GenerateConfig'),
  title?: string(name='Title'),
  type?: string(name='Type', example='MarketingCopy'),
  userData?: string(name='UserData'),
}

model SubmitTextGenerateJobResponseBody = {
  jobId?: string(name='JobId', example='****d80e4e4044975745c14b****'),
  requestId?: string(name='RequestId', description='Id of the request', example='******11-DB8D-4A9A-875B-275798******'),
}

model SubmitTextGenerateJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitTextGenerateJobResponseBody(name='body'),
}

/**
 * @summary 提交文本生成任务
 *
 * @param request SubmitTextGenerateJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitTextGenerateJobResponse
 */
async function submitTextGenerateJobWithOptions(request: SubmitTextGenerateJobRequest, runtime: Util.RuntimeOptions): SubmitTextGenerateJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.generateConfig)) {
    query['GenerateConfig'] = request.generateConfig;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitTextGenerateJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交文本生成任务
 *
 * @param request SubmitTextGenerateJobRequest
 * @return SubmitTextGenerateJobResponse
 */
async function submitTextGenerateJob(request: SubmitTextGenerateJobRequest): SubmitTextGenerateJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitTextGenerateJobWithOptions(request, runtime);
}

model SubmitTranscodeJobRequest {
  clientToken?: string(name='ClientToken'),
  inputGroup?: [ 
    {
      inputUrl?: string(name='InputUrl', example='oss://bucket/path/to/video.mp4'),
      media?: string(name='Media', description='This parameter is required.', example='oss://bucket/path/to/video.mp4'),
      type?: string(name='Type', description='This parameter is required.', example='OSS'),
    }
  ](name='InputGroup', description='This parameter is required.'),
  name?: string(name='Name', example='job-name'),
  outputGroup?: [ 
    {
      output?: {
        media?: string(name='Media', description='This parameter is required.', example='oss://bucket/path/to/video.mp4'),
        outputUrl?: string(name='OutputUrl', example='oss://bucket/path/to/{MediaId}/{JobId}.mp4'),
        type?: string(name='Type', description='This parameter is required.', example='OSS'),
      }(name='Output', description='This parameter is required.'),
      processConfig?: {
        combineConfigs?: [ 
          {
            audioIndex?: string(name='AudioIndex', description='This parameter is required.', example='0 或 exclude'),
            duration?: double(name='Duration', example='20.0'),
            start?: double(name='Start', example='0.0'),
            videoIndex?: string(name='VideoIndex', description='This parameter is required.', example='0 或 exclude'),
          }
        ](name='CombineConfigs'),
        encryption?: {
          cipherText?: string(name='CipherText', example='MTYi00NDU0LTg5O****'),
          decryptKeyUri?: string(name='DecryptKeyUri', example='https://sample.com/path?CipherText=MTYi00NDU0LTg5O****'),
          encryptType?: string(name='EncryptType', example='PrivateEncryption'),
          keyServiceType?: string(name='KeyServiceType', example='KMS'),
        }(name='Encryption'),
        imageWatermarks?: [ 
          {
            overwriteParams?: {
              dx?: string(name='Dx', example='10'),
              dy?: string(name='Dy', example='10'),
              file?: {
                media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                type?: string(name='Type', example='OSS'),
              }(name='File'),
              height?: string(name='Height', example='32'),
              referPos?: string(name='ReferPos', example='TopLeft'),
              timeline?: {
                duration?: string(name='Duration', example='ToEND'),
                start?: string(name='Start', example='00:00:05'),
              }(name='Timeline'),
              width?: string(name='Width', example='32'),
            }(name='OverwriteParams'),
            templateId?: string(name='TemplateId', description='This parameter is required.', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }
        ](name='ImageWatermarks'),
        subtitles?: [ 
          {
            overwriteParams?: {
              charEnc?: string(name='CharEnc', example='UTF-8'),
              file?: {
                media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                type?: string(name='Type', example='OSS'),
              }(name='File'),
              format?: string(name='Format', example='vtt'),
            }(name='OverwriteParams'),
            templateId?: string(name='TemplateId', description='This parameter is required.', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }
        ](name='Subtitles'),
        textWatermarks?: [ 
          {
            overwriteParams?: {
              adaptive?: string(name='Adaptive', example='false'),
              borderColor?: string(name='BorderColor', example='#006400'),
              borderWidth?: int32(name='BorderWidth', example='0'),
              content?: string(name='Content', example='测试水印'),
              fontAlpha?: string(name='FontAlpha', example='1.0'),
              fontColor?: string(name='FontColor', example='#006400'),
              fontName?: string(name='FontName', example='SimSun'),
              fontSize?: int32(name='FontSize', example='16'),
              left?: string(name='Left', example='10'),
              top?: string(name='Top', example='10'),
            }(name='OverwriteParams'),
            templateId?: string(name='TemplateId', description='This parameter is required.', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }
        ](name='TextWatermarks'),
        transcode?: {
          overwriteParams?: {
            audio?: {
              bitrate?: string(name='Bitrate', example='128'),
              channels?: string(name='Channels', example='2'),
              codec?: string(name='Codec', example='AAC'),
              profile?: string(name='Profile', example='aac_low'),
              remove?: string(name='Remove', example='false'),
              samplerate?: string(name='Samplerate', example='44100'),
              volume?: {
                integratedLoudnessTarget?: string(name='IntegratedLoudnessTarget', example='-6'),
                loudnessRangeTarget?: string(name='LoudnessRangeTarget', example='8'),
                method?: string(name='Method', example='auto'),
                truePeak?: string(name='TruePeak', example='-1'),
              }(name='Volume'),
            }(name='Audio'),
            container?: {
              format?: string(name='Format', example='mp4'),
            }(name='Container'),
            muxConfig?: {
              segment?: {
                duration?: string(name='Duration', example='10'),
                forceSegTime?: string(name='ForceSegTime', example='2,3'),
              }(name='Segment'),
            }(name='MuxConfig'),
            transConfig?: {
              adjDarMethod?: string(name='AdjDarMethod'),
              isCheckAudioBitrate?: string(name='IsCheckAudioBitrate'),
              isCheckAudioBitrateFail?: string(name='IsCheckAudioBitrateFail'),
              isCheckReso?: string(name='IsCheckReso'),
              isCheckResoFail?: string(name='IsCheckResoFail'),
              isCheckVideoBitrate?: string(name='IsCheckVideoBitrate'),
              isCheckVideoBitrateFail?: string(name='IsCheckVideoBitrateFail'),
              transMode?: string(name='TransMode'),
            }(name='TransConfig'),
            video?: {
              abrMax?: string(name='AbrMax', example='6000'),
              bitrate?: string(name='Bitrate', example='3000'),
              bufsize?: string(name='Bufsize', example='6000'),
              codec?: string(name='Codec', example='H.264'),
              crf?: string(name='Crf', example='23'),
              crop?: string(name='Crop', example='1280:800:0:140'),
              fps?: string(name='Fps', example='25'),
              gop?: string(name='Gop', example='250'),
              height?: string(name='Height', example='1080'),
              longShortMode?: string(name='LongShortMode', example='false'),
              maxrate?: string(name='Maxrate', example='9000'),
              pad?: string(name='Pad', example='1280:800:0:140'),
              pixFmt?: string(name='PixFmt', example='yuv420p'),
              preset?: string(name='Preset', example='medium'),
              profile?: string(name='Profile', example='Main'),
              remove?: string(name='Remove', example='false'),
              scanMode?: string(name='ScanMode', example='progressive'),
              width?: string(name='Width', example='1920'),
            }(name='Video'),
          }(name='OverwriteParams'),
          templateId?: string(name='TemplateId', description='This parameter is required.', example='9547c6ad97cb4f2aaa29683ebd18d410'),
        }(name='Transcode', description='This parameter is required.'),
      }(name='ProcessConfig', description='This parameter is required.'),
    }
  ](name='OutputGroup', description='This parameter is required.'),
  scheduleConfig?: {
    pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
    priority?: int32(name='Priority', example='5'),
  }(name='ScheduleConfig', example='job-name'),
  userData?: string(name='UserData', example='user-data'),
}

model SubmitTranscodeJobShrinkRequest {
  clientToken?: string(name='ClientToken'),
  inputGroupShrink?: string(name='InputGroup', description='This parameter is required.'),
  name?: string(name='Name', example='job-name'),
  outputGroupShrink?: string(name='OutputGroup', description='This parameter is required.'),
  scheduleConfigShrink?: string(name='ScheduleConfig', example='job-name'),
  userData?: string(name='UserData', example='user-data'),
}

model SubmitTranscodeJobResponseBody = {
  requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
  transcodeParentJob?: {
    createTime?: string(name='CreateTime', example='2022-01-12T08:49:41Z'),
    finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
    inputGroup?: [ 
      {
        media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
        type?: string(name='Type', example='OSS'),
      }
    ](name='InputGroup'),
    jobCount?: int32(name='JobCount', example='1'),
    name?: string(name='Name', example='transcode-job'),
    outputGroup?: [ 
      {
        output?: {
          media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
          type?: string(name='Type', example='OSS'),
        }(name='Output'),
        processConfig?: {
          combineConfigs?: [ 
            {
              audioIndex?: string(name='AudioIndex', description='This parameter is required.', example='0 或 exclude'),
              duration?: double(name='Duration', example='20.0'),
              start?: double(name='Start', example='0.0'),
              videoIndex?: string(name='VideoIndex', description='This parameter is required.', example='0 或 exclude'),
            }
          ](name='CombineConfigs'),
          encryption?: {
            cipherText?: string(name='CipherText', example='MTYi00NDU0LTg5O****'),
            decryptKeyUri?: string(name='DecryptKeyUri', example='https://sample.com/path?CipherText=MTYi00NDU0LTg5O****'),
            encryptType?: string(name='EncryptType', example='PrivateEncryption'),
            keyServiceType?: string(name='KeyServiceType', example='KMS'),
          }(name='Encryption'),
          imageWatermarks?: [ 
            {
              overwriteParams?: {
                dx?: string(name='Dx', example='10'),
                dy?: string(name='Dy', example='10'),
                file?: {
                  media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', example='OSS'),
                }(name='File'),
                height?: string(name='Height', example='32'),
                referPos?: string(name='ReferPos', example='TopLeft'),
                timeline?: {
                  duration?: string(name='Duration', example='ToEND'),
                  start?: string(name='Start', example='00:00:05'),
                }(name='Timeline'),
                width?: string(name='Width', example='32'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='ImageWatermarks'),
          subtitles?: [ 
            {
              overwriteParams?: {
                charEnc?: string(name='CharEnc', example='UTF-8'),
                file?: {
                  media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', example='OSS'),
                }(name='File'),
                format?: string(name='Format', example='vtt'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='Subtitles'),
          textWatermarks?: [ 
            {
              overwriteParams?: {
                adaptive?: string(name='Adaptive', example='false'),
                borderColor?: string(name='BorderColor', example='#006400'),
                borderWidth?: int32(name='BorderWidth', example='0'),
                content?: string(name='Content', example='测试水印'),
                fontAlpha?: string(name='FontAlpha', example='1.0'),
                fontColor?: string(name='FontColor', example='#006400'),
                fontName?: string(name='FontName', example='SimSun'),
                fontSize?: int32(name='FontSize', example='16'),
                left?: string(name='Left', example='10'),
                top?: string(name='Top', example='10'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='TextWatermarks'),
          transcode?: {
            overwriteParams?: {
              audio?: {
                bitrate?: string(name='Bitrate', example='128'),
                channels?: string(name='Channels', example='2'),
                codec?: string(name='Codec', example='AAC'),
                profile?: string(name='Profile', example='aac_low'),
                remove?: string(name='Remove', example='false'),
                samplerate?: string(name='Samplerate', example='44100'),
                volume?: {
                  integratedLoudnessTarget?: string(name='IntegratedLoudnessTarget', example='-6'),
                  loudnessRangeTarget?: string(name='LoudnessRangeTarget', example='8'),
                  method?: string(name='Method', example='auto'),
                  truePeak?: string(name='TruePeak', example='-1'),
                }(name='Volume'),
              }(name='Audio'),
              container?: {
                format?: string(name='Format', example='mp4'),
              }(name='Container'),
              muxConfig?: {
                segment?: {
                  duration?: string(name='Duration', example='10'),
                  forceSegTime?: string(name='ForceSegTime', example='2,3'),
                }(name='Segment'),
              }(name='MuxConfig'),
              transConfig?: {
                adjDarMethod?: string(name='AdjDarMethod'),
                isCheckAudioBitrate?: string(name='IsCheckAudioBitrate'),
                isCheckAudioBitrateFail?: string(name='IsCheckAudioBitrateFail'),
                isCheckReso?: string(name='IsCheckReso'),
                isCheckResoFail?: string(name='IsCheckResoFail'),
                isCheckVideoBitrate?: string(name='IsCheckVideoBitrate'),
                isCheckVideoBitrateFail?: string(name='IsCheckVideoBitrateFail'),
                transMode?: string(name='TransMode'),
              }(name='TransConfig'),
              video?: {
                abrMax?: string(name='AbrMax', example='6000'),
                bitrate?: string(name='Bitrate', example='3000'),
                bufsize?: string(name='Bufsize', example='6000'),
                codec?: string(name='Codec', example='H.264'),
                crf?: string(name='Crf', example='23'),
                crop?: string(name='Crop', example='1280:800:0:140'),
                fps?: string(name='Fps', example='25'),
                gop?: string(name='Gop', example='250'),
                height?: string(name='Height', example='1080'),
                longShortMode?: string(name='LongShortMode', example='false'),
                maxrate?: string(name='Maxrate', example='9000'),
                pad?: string(name='Pad', example='1280:800:0:140'),
                pixFmt?: string(name='PixFmt', example='yuv420p'),
                preset?: string(name='Preset', example='medium'),
                profile?: string(name='Profile', example='Main'),
                remove?: string(name='Remove', example='false'),
                scanMode?: string(name='ScanMode', example='progressive'),
                width?: string(name='Width', example='1920'),
              }(name='Video'),
            }(name='OverwriteParams'),
            templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }(name='Transcode'),
        }(name='ProcessConfig'),
      }
    ](name='OutputGroup'),
    parentJobId?: string(name='ParentJobId', example='8b2198504dd340b7b3c9842a74fc9baa'),
    percent?: int32(name='Percent', example='0'),
    requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
    scheduleConfig?: {
      pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
      priority?: int32(name='Priority', example='5'),
    }(name='ScheduleConfig'),
    status?: string(name='Status', example='Success'),
    submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
    transcodeJobList?: [ 
      {
        createTime?: string(name='CreateTime', example='2022-01-12T08:49:41Z'),
        finishTime?: string(name='FinishTime', example='2022-01-12T08:49:41Z'),
        inputGroup?: [ 
          {
            inputUrl?: string(name='InputUrl', example='oss://bucket/path/to/video.mp4'),
            media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
            type?: string(name='Type', example='OSS'),
          }
        ](name='InputGroup'),
        jobId?: string(name='JobId', example='7d6a7e0d4db2457a8d45ff5d43e1bf0a'),
        jobIndex?: int32(name='JobIndex', example='0'),
        name?: string(name='Name', example='transcode-job'),
        outFileMeta?: {
          audioStreamInfoList?: [ 
            {
              bitrate?: string(name='Bitrate', example='0.f'),
              channelLayout?: string(name='ChannelLayout', example='stereo'),
              channels?: string(name='Channels', example='2'),
              codecLongName?: string(name='CodecLongName', example='AAC (Advanced Audio Coding)'),
              codecName?: string(name='CodecName', example='aac'),
              codecTag?: string(name='CodecTag', example='0x000f'),
              codecTagString?: string(name='CodecTagString', example='[15][0][0][0]'),
              codecTimeBase?: string(name='CodecTimeBase', example='1/44100'),
              duration?: string(name='Duration', example='403.039989'),
              index?: string(name='Index', example='1'),
              lang?: string(name='Lang', example='cn'),
              sampleFmt?: string(name='SampleFmt', example='fltp'),
              sampleRate?: string(name='SampleRate', example='44100'),
              startTime?: string(name='StartTime', example='1.473556'),
              timebase?: string(name='Timebase', example='1/90000'),
            }
          ](name='AudioStreamInfoList'),
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', example='888.563'),
            duration?: string(name='Duration', example='403.039999'),
            fileName?: string(name='FileName', example='file.m3u8'),
            fileSize?: string(name='FileSize', example='31737'),
            fileStatus?: string(name='FileStatus', example='Normal'),
            fileType?: string(name='FileType', example='source_file'),
            fileUrl?: string(name='FileUrl', example='http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8'),
            formatName?: string(name='FormatName', example='hls,applehttp'),
            height?: string(name='Height', example='478'),
            mediaId?: string(name='MediaId', example='73e07de0f77171eca3fc7035d0b26402'),
            region?: string(name='Region', example='cn-shanghai'),
            width?: string(name='Width', example='848'),
          }(name='FileBasicInfo'),
          videoStreamInfoList?: [ 
            {
              avgFps?: string(name='Avg_fps', example='25.0'),
              bitRate?: string(name='Bit_rate', example='888.563'),
              codecLongName?: string(name='Codec_long_name', example='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10'),
              codecName?: string(name='Codec_name', example='h264'),
              codecTag?: string(name='Codec_tag', example='0x001b'),
              codecTagString?: string(name='Codec_tag_string', example='[27][0][0][0]'),
              codecTimeBase?: string(name='Codec_time_base', example='1/50'),
              dar?: string(name='Dar', example='16:9'),
              duration?: string(name='Duration', example='403.039989'),
              fps?: string(name='Fps', example='25.0'),
              hasBFrames?: string(name='Has_b_frames', example='2'),
              height?: string(name='Height', example='478'),
              index?: string(name='Index', example='0'),
              lang?: string(name='Lang', example='cn'),
              level?: string(name='Level', example='31'),
              numFrames?: string(name='NumFrames', example='10040'),
              pixFmt?: string(name='PixFmt', example='yuv420p'),
              profile?: string(name='Profile', example='High'),
              rotate?: string(name='Rotate', example='0'),
              sar?: string(name='Sar', example='478:477'),
              startTime?: string(name='Start_time', example='1.473556'),
              timeBase?: string(name='Time_base', example='1/90000'),
              width?: string(name='Width', example='848'),
            }
          ](name='VideoStreamInfoList'),
        }(name='OutFileMeta'),
        output?: {
          media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
          outputUrl?: string(name='OutputUrl', example='oss://bucket/path/to/{MediaId}/{JobId}.mp4'),
          type?: string(name='Type', example='OSS'),
        }(name='Output'),
        parentJobId?: string(name='ParentJobId', example='8b2198504dd340b7b3c9842a74fc9baa'),
        processConfig?: {
          combineConfigs?: [ 
            {
              audioIndex?: string(name='AudioIndex', description='This parameter is required.', example='0 或 exclude'),
              duration?: double(name='Duration', example='20.0'),
              start?: double(name='Start', example='0.0'),
              videoIndex?: string(name='VideoIndex', description='This parameter is required.', example='0 或 exclude'),
            }
          ](name='CombineConfigs'),
          encryption?: {
            cipherText?: string(name='CipherText', example='MTYi00NDU0LTg5O****'),
            decryptKeyUri?: string(name='DecryptKeyUri', example='https://sample.com/path?CipherText=MTYi00NDU0LTg5O****'),
            encryptType?: string(name='EncryptType', example='PrivateEncryption'),
            keyServiceType?: string(name='KeyServiceType', example='KMS'),
          }(name='Encryption'),
          imageWatermarks?: [ 
            {
              overwriteParams?: {
                dx?: string(name='Dx', example='10'),
                dy?: string(name='Dy', example='10'),
                file?: {
                  media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', example='OSS'),
                }(name='File'),
                height?: string(name='Height', example='32'),
                referPos?: string(name='ReferPos', example='TopLeft'),
                timeline?: {
                  duration?: string(name='Duration', example='ToEND'),
                  start?: string(name='Start', example='00:00:05'),
                }(name='Timeline'),
                width?: string(name='Width', example='32'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='ImageWatermarks'),
          subtitles?: [ 
            {
              overwriteParams?: {
                charEnc?: string(name='CharEnc', example='UTF-8'),
                file?: {
                  media?: string(name='Media', example='oss://bucket/path/to/video.mp4'),
                  type?: string(name='Type', example='OSS'),
                }(name='File'),
                format?: string(name='Format', example='vtt'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='Subtitles'),
          textWatermarks?: [ 
            {
              overwriteParams?: {
                adaptive?: string(name='Adaptive', example='false'),
                borderColor?: string(name='BorderColor', example='#006400'),
                borderWidth?: int32(name='BorderWidth', example='0'),
                content?: string(name='Content', example='测试水印'),
                fontAlpha?: string(name='FontAlpha', example='1.0'),
                fontColor?: string(name='FontColor', example='#006400'),
                fontName?: string(name='FontName', example='SimSun'),
                fontSize?: int32(name='FontSize', example='16'),
                left?: string(name='Left', example='10'),
                top?: string(name='Top', example='10'),
              }(name='OverwriteParams'),
              templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
            }
          ](name='TextWatermarks'),
          transcode?: {
            overwriteParams?: {
              audio?: {
                bitrate?: string(name='Bitrate', example='128'),
                channels?: string(name='Channels', example='2'),
                codec?: string(name='Codec', example='AAC'),
                profile?: string(name='Profile', example='aac_low'),
                remove?: string(name='Remove', example='false'),
                samplerate?: string(name='Samplerate', example='44100'),
                volume?: {
                  integratedLoudnessTarget?: string(name='IntegratedLoudnessTarget', example='-6'),
                  loudnessRangeTarget?: string(name='LoudnessRangeTarget', example='8'),
                  method?: string(name='Method', example='auto'),
                  truePeak?: string(name='TruePeak', example='-1'),
                }(name='Volume'),
              }(name='Audio'),
              container?: {
                format?: string(name='Format', example='mp4'),
              }(name='Container'),
              muxConfig?: {
                segment?: {
                  duration?: string(name='Duration', example='10'),
                  forceSegTime?: string(name='ForceSegTime', example='2,3'),
                }(name='Segment'),
              }(name='MuxConfig'),
              transConfig?: {
                adjDarMethod?: string(name='AdjDarMethod'),
                isCheckAudioBitrate?: string(name='IsCheckAudioBitrate'),
                isCheckAudioBitrateFail?: string(name='IsCheckAudioBitrateFail'),
                isCheckReso?: string(name='IsCheckReso'),
                isCheckResoFail?: string(name='IsCheckResoFail'),
                isCheckVideoBitrate?: string(name='IsCheckVideoBitrate'),
                isCheckVideoBitrateFail?: string(name='IsCheckVideoBitrateFail'),
                transMode?: string(name='TransMode'),
              }(name='TransConfig'),
              video?: {
                abrMax?: string(name='AbrMax', example='6000'),
                bitrate?: string(name='Bitrate', example='3000'),
                bufsize?: string(name='Bufsize', example='6000'),
                codec?: string(name='Codec', example='H.264'),
                crf?: string(name='Crf', example='23'),
                crop?: string(name='Crop', example='1280:800:0:140'),
                fps?: string(name='Fps', example='25'),
                gop?: string(name='Gop', example='250'),
                height?: string(name='Height', example='1080'),
                longShortMode?: string(name='LongShortMode', example='false'),
                maxrate?: string(name='Maxrate', example='9000'),
                pad?: string(name='Pad', example='1280:800:0:140'),
                pixFmt?: string(name='PixFmt', example='yuv420p'),
                preset?: string(name='Preset', example='medium'),
                profile?: string(name='Profile', example='Main'),
                remove?: string(name='Remove', example='false'),
                scanMode?: string(name='ScanMode', example='progressive'),
                width?: string(name='Width', example='1920'),
              }(name='Video'),
            }(name='OverwriteParams'),
            templateId?: string(name='TemplateId', example='9547c6ad97cb4f2aaa29683ebd18d410'),
          }(name='Transcode'),
        }(name='ProcessConfig'),
        requestId?: string(name='RequestId', example='31E30781-9495-5E2D-A84D-759B0A01E262'),
        scheduleConfig?: {
          pipelineId?: string(name='PipelineId', example='e37ebee5d98b4781897f6086e89f9c56'),
          priority?: int32(name='Priority', example='5'),
        }(name='ScheduleConfig'),
        status?: string(name='Status', example='Init'),
        submitResultJson?: map[string]any(name='SubmitResultJson', example='{}'),
        submitTime?: string(name='SubmitTime', example='2022-01-12T08:49:41Z'),
        userData?: string(name='UserData', example='user-data'),
      }
    ](name='TranscodeJobList'),
    triggerSource?: string(name='TriggerSource', example='API'),
    userData?: string(name='UserData', example='user-data'),
  }(name='TranscodeParentJob', description='TranscodeParentJobWithSubJobDTO'),
}

model SubmitTranscodeJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitTranscodeJobResponseBody(name='body'),
}

/**
 * @param tmpReq SubmitTranscodeJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitTranscodeJobResponse
 */
async function submitTranscodeJobWithOptions(tmpReq: SubmitTranscodeJobRequest, runtime: Util.RuntimeOptions): SubmitTranscodeJobResponse {
  Util.validateModel(tmpReq);
  var request = new SubmitTranscodeJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.inputGroup)) {
    request.inputGroupShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.inputGroup, 'InputGroup', 'json');
  }
  if (!Util.isUnset(tmpReq.outputGroup)) {
    request.outputGroupShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.outputGroup, 'OutputGroup', 'json');
  }
  if (!Util.isUnset(tmpReq.scheduleConfig)) {
    request.scheduleConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scheduleConfig, 'ScheduleConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.inputGroupShrink)) {
    query['InputGroup'] = request.inputGroupShrink;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.outputGroupShrink)) {
    query['OutputGroup'] = request.outputGroupShrink;
  }
  if (!Util.isUnset(request.scheduleConfigShrink)) {
    query['ScheduleConfig'] = request.scheduleConfigShrink;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitTranscodeJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request SubmitTranscodeJobRequest
 * @return SubmitTranscodeJobResponse
 */
async function submitTranscodeJob(request: SubmitTranscodeJobRequest): SubmitTranscodeJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitTranscodeJobWithOptions(request, runtime);
}

model SubmitVideoTranslationJobRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  editingConfig?: string(name='EditingConfig', example='{"SourceLanguage":"zh","TargetLanguage":"en","DetextArea":"Auto"}'),
  inputConfig?: string(name='InputConfig', example='{"Type":"Video","Media":"https://your-bucket.oss-cn-shanghai.aliyuncs.com/xxx.mp4"}'),
  outputConfig?: string(name='OutputConfig', example='{"MediaURL": "https://your-bucket.oss-cn-shanghai.aliyuncs.com/your-object.mp4"}'),
  title?: string(name='Title'),
  userData?: string(name='UserData'),
}

model SubmitVideoTranslationJobResponseBody = {
  data?: {
    jobId?: string(name='JobId'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model SubmitVideoTranslationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitVideoTranslationJobResponseBody(name='body'),
}

/**
 * @summary 提交视频翻译任务
 *
 * @param request SubmitVideoTranslationJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitVideoTranslationJobResponse
 */
async function submitVideoTranslationJobWithOptions(request: SubmitVideoTranslationJobRequest, runtime: Util.RuntimeOptions): SubmitVideoTranslationJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.editingConfig)) {
    query['EditingConfig'] = request.editingConfig;
  }
  if (!Util.isUnset(request.inputConfig)) {
    query['InputConfig'] = request.inputConfig;
  }
  if (!Util.isUnset(request.outputConfig)) {
    query['OutputConfig'] = request.outputConfig;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitVideoTranslationJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交视频翻译任务
 *
 * @param request SubmitVideoTranslationJobRequest
 * @return SubmitVideoTranslationJobResponse
 */
async function submitVideoTranslationJob(request: SubmitVideoTranslationJobRequest): SubmitVideoTranslationJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitVideoTranslationJobWithOptions(request, runtime);
}

model UpdateAvatarTrainingJobRequest {
  avatarDescription?: string(name='AvatarDescription'),
  avatarName?: string(name='AvatarName'),
  jobId?: string(name='JobId', description='This parameter is required.', example='****cdb3e74639973036bc84****'),
  portrait?: string(name='Portrait', example='****571c704445f9a0ee011406c2****'),
  thumbnail?: string(name='Thumbnail', example='https://your-bucket.oss-cn-hangzhou.aliyuncs.com/thumbnail.png'),
  transparent?: boolean(name='Transparent', example='True'),
  video?: string(name='Video', example='****571c704445f9a0ee011406c2****'),
}

model UpdateAvatarTrainingJobResponseBody = {
  data?: {
    jobId?: string(name='JobId', example='****d718e2ff4f018ccf419a7b71****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model UpdateAvatarTrainingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAvatarTrainingJobResponseBody(name='body'),
}

/**
 * @summary 更新数字人训练任务信息
 *
 * @param request UpdateAvatarTrainingJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateAvatarTrainingJobResponse
 */
async function updateAvatarTrainingJobWithOptions(request: UpdateAvatarTrainingJobRequest, runtime: Util.RuntimeOptions): UpdateAvatarTrainingJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.avatarDescription)) {
    query['AvatarDescription'] = request.avatarDescription;
  }
  if (!Util.isUnset(request.avatarName)) {
    query['AvatarName'] = request.avatarName;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.portrait)) {
    query['Portrait'] = request.portrait;
  }
  if (!Util.isUnset(request.thumbnail)) {
    query['Thumbnail'] = request.thumbnail;
  }
  if (!Util.isUnset(request.transparent)) {
    query['Transparent'] = request.transparent;
  }
  if (!Util.isUnset(request.video)) {
    query['Video'] = request.video;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAvatarTrainingJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新数字人训练任务信息
 *
 * @param request UpdateAvatarTrainingJobRequest
 * @return UpdateAvatarTrainingJobResponse
 */
async function updateAvatarTrainingJob(request: UpdateAvatarTrainingJobRequest): UpdateAvatarTrainingJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAvatarTrainingJobWithOptions(request, runtime);
}

model UpdateCategoryRequest {
  cateId?: long(name='CateId', description='This parameter is required.', example='43'),
  cateName?: string(name='CateName', description='This parameter is required.'),
}

model UpdateCategoryResponseBody = {
  requestId?: string(name='RequestId', example='4E84BE44-58A7-****-****-FBEBEA16EF94'),
}

model UpdateCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCategoryResponseBody(name='body'),
}

/**
 * @summary 更新媒资分类
 *
 * @param request UpdateCategoryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateCategoryResponse
 */
async function updateCategoryWithOptions(request: UpdateCategoryRequest, runtime: Util.RuntimeOptions): UpdateCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cateId)) {
    query['CateId'] = request.cateId;
  }
  if (!Util.isUnset(request.cateName)) {
    query['CateName'] = request.cateName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCategory',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新媒资分类
 *
 * @param request UpdateCategoryRequest
 * @return UpdateCategoryResponse
 */
async function updateCategory(request: UpdateCategoryRequest): UpdateCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCategoryWithOptions(request, runtime);
}

model UpdateCustomTemplateRequest {
  name?: string(name='Name', example='test-template'),
  templateConfig?: string(name='TemplateConfig', example='{"param": "sample"}'),
  templateId?: string(name='TemplateId', description='This parameter is required.', example='****96e8864746a0b6f3****'),
}

model UpdateCustomTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model UpdateCustomTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCustomTemplateResponseBody(name='body'),
}

/**
 * @summary 更新媒体处理自定义模板
 *
 * @param request UpdateCustomTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateCustomTemplateResponse
 */
async function updateCustomTemplateWithOptions(request: UpdateCustomTemplateRequest, runtime: Util.RuntimeOptions): UpdateCustomTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.templateConfig)) {
    query['TemplateConfig'] = request.templateConfig;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCustomTemplate',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新媒体处理自定义模板
 *
 * @param request UpdateCustomTemplateRequest
 * @return UpdateCustomTemplateResponse
 */
async function updateCustomTemplate(request: UpdateCustomTemplateRequest): UpdateCustomTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCustomTemplateWithOptions(request, runtime);
}

model UpdateCustomizedVoiceRequest {
  demoAudioMediaId?: string(name='DemoAudioMediaId', example='****4d5e829d498aaf966b119348****'),
  voiceId?: string(name='VoiceId', description='This parameter is required.', example='xiaozhuan'),
}

model UpdateCustomizedVoiceResponseBody = {
  requestId?: string(name='RequestId', example='4E84BE44-58A7-****-****-FBEBEA16EF94'),
  success?: boolean(name='Success', example='true'),
}

model UpdateCustomizedVoiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCustomizedVoiceResponseBody(name='body'),
}

/**
 * @summary 更新用户的专属人声
 *
 * @param request UpdateCustomizedVoiceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateCustomizedVoiceResponse
 */
async function updateCustomizedVoiceWithOptions(request: UpdateCustomizedVoiceRequest, runtime: Util.RuntimeOptions): UpdateCustomizedVoiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.demoAudioMediaId)) {
    query['DemoAudioMediaId'] = request.demoAudioMediaId;
  }
  if (!Util.isUnset(request.voiceId)) {
    query['VoiceId'] = request.voiceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCustomizedVoice',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新用户的专属人声
 *
 * @param request UpdateCustomizedVoiceRequest
 * @return UpdateCustomizedVoiceResponse
 */
async function updateCustomizedVoice(request: UpdateCustomizedVoiceRequest): UpdateCustomizedVoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCustomizedVoiceWithOptions(request, runtime);
}

model UpdateEditingProjectRequest {
  businessStatus?: string(name='BusinessStatus', example='Reserving'),
  clipsParam?: string(name='ClipsParam'),
  coverURL?: string(name='CoverURL', example='https://****.com/6AB4D0E1E1C7446888****.png'),
  description?: string(name='Description', example='testtimeline001desciption'),
  projectId?: string(name='ProjectId', description='This parameter is required.', example='****4ee4b97e27b525142a6b2****'),
  templateId?: string(name='TemplateId', example='****96e8864746a0b6f3****'),
  timeline?: string(name='Timeline'),
  title?: string(name='Title', example='testtimeline'),
}

model UpdateEditingProjectResponseBody = {
  requestId?: string(name='RequestId', example='****25818875-5F78-4AF6-D7393642CA58****'),
}

model UpdateEditingProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEditingProjectResponseBody(name='body'),
}

/**
 * @summary 修改云剪辑工程
 *
 * @param request UpdateEditingProjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateEditingProjectResponse
 */
async function updateEditingProjectWithOptions(request: UpdateEditingProjectRequest, runtime: Util.RuntimeOptions): UpdateEditingProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessStatus)) {
    query['BusinessStatus'] = request.businessStatus;
  }
  if (!Util.isUnset(request.clipsParam)) {
    query['ClipsParam'] = request.clipsParam;
  }
  if (!Util.isUnset(request.coverURL)) {
    query['CoverURL'] = request.coverURL;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.timeline)) {
    body['Timeline'] = request.timeline;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEditingProject',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改云剪辑工程
 *
 * @param request UpdateEditingProjectRequest
 * @return UpdateEditingProjectResponse
 */
async function updateEditingProject(request: UpdateEditingProjectRequest): UpdateEditingProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEditingProjectWithOptions(request, runtime);
}

model UpdateLiveRecordTemplateRequest {
  name?: string(name='Name', description='代表资源名称的资源属性字段

This parameter is required.', example='test template'),
  recordFormat?: [ 
    {
      cycleDuration?: int32(name='CycleDuration', example='3600'),
      format?: string(name='Format', description='格式

This parameter is required.', example='m3u8'),
      ossObjectPrefix?: string(name='OssObjectPrefix', description='Oss对象名，不包含后缀', example='record/{JobId}/{Sequence}_{EscapedStartTime}_{EscapedEndTime}'),
      sliceDuration?: int32(name='SliceDuration', description='切片时长', example='30'),
      sliceOssObjectPrefix?: string(name='SliceOssObjectPrefix', description='切片Oss对象名，不包含后缀', example='record/{JobId}/{UnixTimestamp}_{Sequence}'),
    }
  ](name='RecordFormat', description='录制格式

This parameter is required.'),
  templateId?: string(name='TemplateId', description='代表资源一级ID的资源属性字段

This parameter is required.', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66'),
}

model UpdateLiveRecordTemplateShrinkRequest {
  name?: string(name='Name', description='代表资源名称的资源属性字段

This parameter is required.', example='test template'),
  recordFormatShrink?: string(name='RecordFormat', description='录制格式

This parameter is required.'),
  templateId?: string(name='TemplateId', description='代表资源一级ID的资源属性字段

This parameter is required.', example='69e1f9fe-1e97-11ed-ba64-0c42a1b73d66'),
}

model UpdateLiveRecordTemplateResponseBody = {
  requestId?: string(name='RequestId', description='代表资源一级ID的资源属性字段', example='0F3D5C03-4B6E-5F40-B7F6-B1956776E7D3'),
}

model UpdateLiveRecordTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLiveRecordTemplateResponseBody(name='body'),
}

/**
 * @summary 修改直播录制模板
 *
 * @param tmpReq UpdateLiveRecordTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateLiveRecordTemplateResponse
 */
async function updateLiveRecordTemplateWithOptions(tmpReq: UpdateLiveRecordTemplateRequest, runtime: Util.RuntimeOptions): UpdateLiveRecordTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateLiveRecordTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.recordFormat)) {
    request.recordFormatShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.recordFormat, 'RecordFormat', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.recordFormatShrink)) {
    body['RecordFormat'] = request.recordFormatShrink;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateLiveRecordTemplate',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改直播录制模板
 *
 * @param request UpdateLiveRecordTemplateRequest
 * @return UpdateLiveRecordTemplateResponse
 */
async function updateLiveRecordTemplate(request: UpdateLiveRecordTemplateRequest): UpdateLiveRecordTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveRecordTemplateWithOptions(request, runtime);
}

model UpdateLiveSnapshotTemplateRequest {
  overwriteFormat?: string(name='OverwriteFormat', example='snapshot/{JobId}.jpg'),
  sequenceFormat?: string(name='SequenceFormat', example='snapshot/{JobId}/{UnixTimestamp}.jpg'),
  templateId?: string(name='TemplateId', description='This parameter is required.', example='****a046-263c-3560-978a-fb287782****'),
  templateName?: string(name='TemplateName', description='This parameter is required.'),
  timeInterval?: int32(name='TimeInterval', description='This parameter is required.', example='5'),
}

model UpdateLiveSnapshotTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model UpdateLiveSnapshotTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLiveSnapshotTemplateResponseBody(name='body'),
}

/**
 * @summary 更新直播截图模板
 *
 * @param request UpdateLiveSnapshotTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateLiveSnapshotTemplateResponse
 */
async function updateLiveSnapshotTemplateWithOptions(request: UpdateLiveSnapshotTemplateRequest, runtime: Util.RuntimeOptions): UpdateLiveSnapshotTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.overwriteFormat)) {
    body['OverwriteFormat'] = request.overwriteFormat;
  }
  if (!Util.isUnset(request.sequenceFormat)) {
    body['SequenceFormat'] = request.sequenceFormat;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.templateName)) {
    body['TemplateName'] = request.templateName;
  }
  if (!Util.isUnset(request.timeInterval)) {
    body['TimeInterval'] = request.timeInterval;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateLiveSnapshotTemplate',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新直播截图模板
 *
 * @param request UpdateLiveSnapshotTemplateRequest
 * @return UpdateLiveSnapshotTemplateResponse
 */
async function updateLiveSnapshotTemplate(request: UpdateLiveSnapshotTemplateRequest): UpdateLiveSnapshotTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveSnapshotTemplateWithOptions(request, runtime);
}

model UpdateLiveTranscodeJobRequest {
  jobId?: string(name='JobId', description='This parameter is required.', example='****20b48fb04483915d4f2cd8ac****'),
  name?: string(name='Name', example='mytest3'),
  streamInput?: {
    inputUrl?: string(name='InputUrl', description='This parameter is required.', example='rtmp://mydomain/app/stream1'),
    type?: string(name='Type', description='This parameter is required.', example='rtmp'),
  }(name='StreamInput'),
  timedConfig?: {
    endTime?: string(name='EndTime', example='2022-08-05T06:08:31Z'),
    startTime?: string(name='StartTime', example='2022-06-19T02:16:41Z'),
  }(name='TimedConfig'),
  transcodeOutput?: {
    domainName?: string(name='DomainName', description='This parameter is required.', example='mydomain'),
    type?: string(name='Type', description='This parameter is required.', example='LiveCenter'),
  }(name='TranscodeOutput'),
}

model UpdateLiveTranscodeJobShrinkRequest {
  jobId?: string(name='JobId', description='This parameter is required.', example='****20b48fb04483915d4f2cd8ac****'),
  name?: string(name='Name', example='mytest3'),
  streamInputShrink?: string(name='StreamInput'),
  timedConfigShrink?: string(name='TimedConfig'),
  transcodeOutputShrink?: string(name='TranscodeOutput'),
}

model UpdateLiveTranscodeJobResponseBody = {
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
}

model UpdateLiveTranscodeJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLiveTranscodeJobResponseBody(name='body'),
}

/**
 * @summary 更新转码任务配置
 *
 * @param tmpReq UpdateLiveTranscodeJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateLiveTranscodeJobResponse
 */
async function updateLiveTranscodeJobWithOptions(tmpReq: UpdateLiveTranscodeJobRequest, runtime: Util.RuntimeOptions): UpdateLiveTranscodeJobResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateLiveTranscodeJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.streamInput)) {
    request.streamInputShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.streamInput, 'StreamInput', 'json');
  }
  if (!Util.isUnset(tmpReq.timedConfig)) {
    request.timedConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.timedConfig, 'TimedConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.transcodeOutput)) {
    request.transcodeOutputShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.transcodeOutput, 'TranscodeOutput', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.streamInputShrink)) {
    query['StreamInput'] = request.streamInputShrink;
  }
  if (!Util.isUnset(request.timedConfigShrink)) {
    query['TimedConfig'] = request.timedConfigShrink;
  }
  if (!Util.isUnset(request.transcodeOutputShrink)) {
    query['TranscodeOutput'] = request.transcodeOutputShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateLiveTranscodeJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新转码任务配置
 *
 * @param request UpdateLiveTranscodeJobRequest
 * @return UpdateLiveTranscodeJobResponse
 */
async function updateLiveTranscodeJob(request: UpdateLiveTranscodeJobRequest): UpdateLiveTranscodeJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveTranscodeJobWithOptions(request, runtime);
}

model UpdateLiveTranscodeTemplateRequest {
  name?: string(name='Name'),
  templateConfig?: {
    audioParams?: {
      bitrate?: string(name='Bitrate', example='100'),
      channels?: string(name='Channels', example='2'),
      codec?: string(name='Codec', example='AAC'),
      profile?: string(name='Profile', example='aac_low'),
      samplerate?: string(name='Samplerate', example='44100'),
    }(name='AudioParams'),
    videoParams?: {
      bitrate?: string(name='Bitrate', example='2500'),
      codec?: string(name='Codec', example='H.264'),
      fps?: string(name='Fps', example='30'),
      gop?: string(name='Gop', example='1000'),
      height?: string(name='Height', example='720'),
      profile?: string(name='Profile', example='2'),
      width?: string(name='Width', example='1280'),
    }(name='VideoParams'),
  }(name='TemplateConfig'),
  templateId?: string(name='TemplateId', description='This parameter is required.', example='****96e8864746a0b6f3****'),
}

model UpdateLiveTranscodeTemplateShrinkRequest {
  name?: string(name='Name'),
  templateConfigShrink?: string(name='TemplateConfig'),
  templateId?: string(name='TemplateId', description='This parameter is required.', example='****96e8864746a0b6f3****'),
}

model UpdateLiveTranscodeTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******3B-0E1A-586A-AC29-742247******'),
}

model UpdateLiveTranscodeTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLiveTranscodeTemplateResponseBody(name='body'),
}

/**
 * @summary 更新转码模版
 *
 * @param tmpReq UpdateLiveTranscodeTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateLiveTranscodeTemplateResponse
 */
async function updateLiveTranscodeTemplateWithOptions(tmpReq: UpdateLiveTranscodeTemplateRequest, runtime: Util.RuntimeOptions): UpdateLiveTranscodeTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateLiveTranscodeTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.templateConfig)) {
    request.templateConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.templateConfig, 'TemplateConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.templateConfigShrink)) {
    query['TemplateConfig'] = request.templateConfigShrink;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateLiveTranscodeTemplate',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新转码模版
 *
 * @param request UpdateLiveTranscodeTemplateRequest
 * @return UpdateLiveTranscodeTemplateResponse
 */
async function updateLiveTranscodeTemplate(request: UpdateLiveTranscodeTemplateRequest): UpdateLiveTranscodeTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveTranscodeTemplateWithOptions(request, runtime);
}

model UpdateMediaInfoRequest {
  appendTags?: boolean(name='AppendTags', example='true'),
  businessType?: string(name='BusinessType', example='video'),
  cateId?: long(name='CateId', example='3048'),
  category?: string(name='Category', example='defaultCategory'),
  coverURL?: string(name='CoverURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png'),
  description?: string(name='Description', example='defaultDescription'),
  inputURL?: string(name='InputURL', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4'),
  mediaId?: string(name='MediaId', example='****20b48fb04483915d4f2cd8ac****'),
  mediaTags?: string(name='MediaTags', example='updateTags1,updateTags2'),
  referenceId?: string(name='ReferenceId', example='123-123'),
  title?: string(name='Title', example='defaultTitle'),
  userData?: string(name='UserData', example='userData'),
}

model UpdateMediaInfoResponseBody = {
  mediaId?: string(name='MediaId', example='****20b48fb04483915d4f2cd8ac****'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model UpdateMediaInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMediaInfoResponseBody(name='body'),
}

/**
 * @summary UpdateMediaInfo
 *
 * @param request UpdateMediaInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateMediaInfoResponse
 */
async function updateMediaInfoWithOptions(request: UpdateMediaInfoRequest, runtime: Util.RuntimeOptions): UpdateMediaInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appendTags)) {
    query['AppendTags'] = request.appendTags;
  }
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.cateId)) {
    query['CateId'] = request.cateId;
  }
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.coverURL)) {
    query['CoverURL'] = request.coverURL;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.inputURL)) {
    query['InputURL'] = request.inputURL;
  }
  if (!Util.isUnset(request.mediaId)) {
    query['MediaId'] = request.mediaId;
  }
  if (!Util.isUnset(request.mediaTags)) {
    query['MediaTags'] = request.mediaTags;
  }
  if (!Util.isUnset(request.referenceId)) {
    query['ReferenceId'] = request.referenceId;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMediaInfo',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary UpdateMediaInfo
 *
 * @param request UpdateMediaInfoRequest
 * @return UpdateMediaInfoResponse
 */
async function updateMediaInfo(request: UpdateMediaInfoRequest): UpdateMediaInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMediaInfoWithOptions(request, runtime);
}

model UpdateMediaMarksRequest {
  mediaId?: string(name='MediaId', description='This parameter is required.', example='53afdf003a******6a16b5feac6402'),
  mediaMarks?: string(name='MediaMarks', description='This parameter is required.'),
}

model UpdateMediaMarksResponseBody = {
  mediaId?: string(name='MediaId', example='53afdf003a******6a16b5feac6402'),
  mediaMarkIds?: string(name='MediaMarkIds', example='mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60'),
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model UpdateMediaMarksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMediaMarksResponseBody(name='body'),
}

/**
 * @summary 为媒资修改标注信息
 *
 * @param request UpdateMediaMarksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateMediaMarksResponse
 */
async function updateMediaMarksWithOptions(request: UpdateMediaMarksRequest, runtime: Util.RuntimeOptions): UpdateMediaMarksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mediaId)) {
    query['MediaId'] = request.mediaId;
  }
  if (!Util.isUnset(request.mediaMarks)) {
    query['MediaMarks'] = request.mediaMarks;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMediaMarks',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 为媒资修改标注信息
 *
 * @param request UpdateMediaMarksRequest
 * @return UpdateMediaMarksResponse
 */
async function updateMediaMarks(request: UpdateMediaMarksRequest): UpdateMediaMarksResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMediaMarksWithOptions(request, runtime);
}

model UpdateMediaToSearchLibRequest {
  mediaId?: string(name='MediaId', description='This parameter is required.', example='****019b82e24b37a1c2958dec38****'),
  msgBody?: string(name='MsgBody', description='This parameter is required.', example='{}'),
  searchLibName?: string(name='SearchLibName', example='test1'),
}

model UpdateMediaToSearchLibResponseBody = {
  code?: string(name='Code'),
  mediaId?: string(name='MediaId', example='******b48fb04483915d4f2cd8******'),
  requestId?: string(name='RequestId', example='4E84BE44-58A7-****-****-FBEBEA16EF94'),
  success?: string(name='Success'),
}

model UpdateMediaToSearchLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMediaToSearchLibResponseBody(name='body'),
}

/**
 * @summary 更新媒资到搜索
 *
 * @param request UpdateMediaToSearchLibRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateMediaToSearchLibResponse
 */
async function updateMediaToSearchLibWithOptions(request: UpdateMediaToSearchLibRequest, runtime: Util.RuntimeOptions): UpdateMediaToSearchLibResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mediaId)) {
    query['MediaId'] = request.mediaId;
  }
  if (!Util.isUnset(request.msgBody)) {
    query['MsgBody'] = request.msgBody;
  }
  if (!Util.isUnset(request.searchLibName)) {
    query['SearchLibName'] = request.searchLibName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMediaToSearchLib',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新媒资到搜索
 *
 * @param request UpdateMediaToSearchLibRequest
 * @return UpdateMediaToSearchLibResponse
 */
async function updateMediaToSearchLib(request: UpdateMediaToSearchLibRequest): UpdateMediaToSearchLibResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMediaToSearchLibWithOptions(request, runtime);
}

model UpdatePipelineRequest {
  name?: string(name='Name', example='test-pipeline'),
  pipelineId?: string(name='PipelineId', description='This parameter is required.', example='****d80e4e4044975745c14b****'),
  priority?: int32(name='Priority', example='6'),
  status?: string(name='Status', example='Paused'),
}

model UpdatePipelineResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
  success?: boolean(name='Success', example='true'),
}

model UpdatePipelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePipelineResponseBody(name='body'),
}

/**
 * @summary 更新管道配置
 *
 * @param request UpdatePipelineRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdatePipelineResponse
 */
async function updatePipelineWithOptions(request: UpdatePipelineRequest, runtime: Util.RuntimeOptions): UpdatePipelineResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pipelineId)) {
    query['PipelineId'] = request.pipelineId;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePipeline',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新管道配置
 *
 * @param request UpdatePipelineRequest
 * @return UpdatePipelineResponse
 */
async function updatePipeline(request: UpdatePipelineRequest): UpdatePipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePipelineWithOptions(request, runtime);
}

model UpdateRtcRobotInstanceRequest {
  config?: {
    enableVoiceInterrupt?: boolean(name='EnableVoiceInterrupt', example='false'),
    greeting?: string(name='Greeting'),
    voiceId?: string(name='VoiceId', example='zhixiaoxia'),
  }(name='Config'),
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='727dc0e296014bb58670940a3da95592'),
}

model UpdateRtcRobotInstanceShrinkRequest {
  configShrink?: string(name='Config'),
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='727dc0e296014bb58670940a3da95592'),
}

model UpdateRtcRobotInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='7707F0A2-C6FD-5959-87EB-7C4D02384FD4'),
}

model UpdateRtcRobotInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRtcRobotInstanceResponseBody(name='body'),
}

/**
 * @summary 修改实例的配置
 *
 * @param tmpReq UpdateRtcRobotInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateRtcRobotInstanceResponse
 */
async function updateRtcRobotInstanceWithOptions(tmpReq: UpdateRtcRobotInstanceRequest, runtime: Util.RuntimeOptions): UpdateRtcRobotInstanceResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateRtcRobotInstanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.config)) {
    request.configShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.config, 'Config', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.configShrink)) {
    query['Config'] = request.configShrink;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRtcRobotInstance',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改实例的配置
 *
 * @param request UpdateRtcRobotInstanceRequest
 * @return UpdateRtcRobotInstanceResponse
 */
async function updateRtcRobotInstance(request: UpdateRtcRobotInstanceRequest): UpdateRtcRobotInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRtcRobotInstanceWithOptions(request, runtime);
}

model UpdateTemplateRequest {
  config?: string(name='Config', example='参见模板Config文档'),
  coverUrl?: string(name='CoverUrl', example='http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg'),
  name?: string(name='Name', example='视频添加水印模板'),
  previewMedia?: string(name='PreviewMedia', example='****20b48fb04483915d4f2cd8ac****'),
  relatedMediaids?: string(name='RelatedMediaids', example='{"video":["******c04f1d4a06996144cc1a******","******cb7db64841b159b4f2ea******"],"audio":["******c04f1d4a06996144cc1a******"],"image":["******c04f1d4a06996144cc1a******"]}'),
  source?: string(name='Source', example='OpenAPI'),
  status?: string(name='Status', example='Available'),
  templateId?: string(name='TemplateId', example='****20b48fb04483915d4f2cd8ac****'),
}

model UpdateTemplateResponseBody = {
  requestId?: string(name='RequestId', example='******11-DB8D-4A9A-875B-275798******'),
}

model UpdateTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTemplateResponseBody(name='body'),
}

/**
 * @summary UpdateTemplate
 *
 * @param request UpdateTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateTemplateResponse
 */
async function updateTemplateWithOptions(request: UpdateTemplateRequest, runtime: Util.RuntimeOptions): UpdateTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.coverUrl)) {
    query['CoverUrl'] = request.coverUrl;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.previewMedia)) {
    query['PreviewMedia'] = request.previewMedia;
  }
  if (!Util.isUnset(request.relatedMediaids)) {
    query['RelatedMediaids'] = request.relatedMediaids;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.config)) {
    body['Config'] = request.config;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTemplate',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary UpdateTemplate
 *
 * @param request UpdateTemplateRequest
 * @return UpdateTemplateResponse
 */
async function updateTemplate(request: UpdateTemplateRequest): UpdateTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTemplateWithOptions(request, runtime);
}

model UploadMediaByURLRequest {
  appId?: string(name='AppId', example='app-1000000'),
  entityId?: string(name='EntityId', example='d67281da3c8743b8823ad12976187***'),
  mediaMetaData?: string(name='MediaMetaData', example='[{"SourceURL":"https://example.aliyundoc.com/video01.mp4","Title":"urlUploadTest"}]'),
  postProcessConfig?: string(name='PostProcessConfig', example='{"ProcessType": "Workflow","ProcessID":"b72a06c6beeb4dcdb898feef067b1***"}'),
  uploadTargetConfig?: string(name='UploadTargetConfig', example='{"StorageType":"oss","StorageLocation":"outin-***.oss-cn-shanghai.aliyuncs.com"}'),
  uploadURLs?: string(name='UploadURLs', example='https://diffurl.mp4'),
  userData?: string(name='UserData', example='{"MessageCallback":{"CallbackURL":"http://example.aliyundoc.com"},"Extend":{"localId":"xxx","test":"www"}}'),
}

model UploadMediaByURLResponseBody = {
  requestId?: string(name='RequestId', example='****83B7-7F87-4792-BFE9-63CD2137****'),
  uploadJobs?: [ 
    {
      jobId?: string(name='JobId', example='20ce1e05dba64576b96e9683879f0***'),
      mediaId?: string(name='MediaId', example='f476988629f54a7b8a4ba90d1a6c7***'),
      sourceURL?: string(name='SourceURL', example='http://example****.mp4'),
    }
  ](name='UploadJobs'),
}

model UploadMediaByURLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadMediaByURLResponseBody(name='body'),
}

/**
 * @summary URL拉取上传
 *
 * @param request UploadMediaByURLRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UploadMediaByURLResponse
 */
async function uploadMediaByURLWithOptions(request: UploadMediaByURLRequest, runtime: Util.RuntimeOptions): UploadMediaByURLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.entityId)) {
    query['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.mediaMetaData)) {
    query['MediaMetaData'] = request.mediaMetaData;
  }
  if (!Util.isUnset(request.postProcessConfig)) {
    query['PostProcessConfig'] = request.postProcessConfig;
  }
  if (!Util.isUnset(request.uploadTargetConfig)) {
    query['UploadTargetConfig'] = request.uploadTargetConfig;
  }
  if (!Util.isUnset(request.uploadURLs)) {
    query['UploadURLs'] = request.uploadURLs;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UploadMediaByURL',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary URL拉取上传
 *
 * @param request UploadMediaByURLRequest
 * @return UploadMediaByURLResponse
 */
async function uploadMediaByURL(request: UploadMediaByURLRequest): UploadMediaByURLResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadMediaByURLWithOptions(request, runtime);
}

model UploadStreamByURLRequest {
  definition?: string(name='Definition', example='HD'),
  fileExtension?: string(name='FileExtension', example='mp4'),
  HDRType?: string(name='HDRType', example='HDR10'),
  mediaId?: string(name='MediaId', example='411bed50018971edb60b0764a0ec6***'),
  streamURL?: string(name='StreamURL', example='https://example.com/sample-stream.mp4'),
  userData?: string(name='UserData', example='{"MessageCallback":{"CallbackURL":"http://test.test.com"}, "Extend":{"localId":"xxx","test":"www"}}'),
}

model UploadStreamByURLResponseBody = {
  fileURL?: string(name='FileURL', example='http://outin-***.oss-cn-shanghai.aliyuncs.com/stream/48555e8b-181dd5a8c07/48555e8b-181dd5a8c07.mp4'),
  jobId?: string(name='JobId', example='****cdb3e74639973036bc84****'),
  mediaId?: string(name='MediaId', example='411bed50018971edb60b0764a0ec6***'),
  requestId?: string(name='RequestId', example='******89-C21D-4B78-AE24-3788B8******'),
  sourceURL?: string(name='SourceURL', example='https://example.com/sample-stream.mp4'),
}

model UploadStreamByURLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadStreamByURLResponseBody(name='body'),
}

/**
 * @summary URL拉取上传媒体流
 *
 * @param request UploadStreamByURLRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UploadStreamByURLResponse
 */
async function uploadStreamByURLWithOptions(request: UploadStreamByURLRequest, runtime: Util.RuntimeOptions): UploadStreamByURLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.definition)) {
    query['Definition'] = request.definition;
  }
  if (!Util.isUnset(request.fileExtension)) {
    query['FileExtension'] = request.fileExtension;
  }
  if (!Util.isUnset(request.HDRType)) {
    query['HDRType'] = request.HDRType;
  }
  if (!Util.isUnset(request.mediaId)) {
    query['MediaId'] = request.mediaId;
  }
  if (!Util.isUnset(request.streamURL)) {
    query['StreamURL'] = request.streamURL;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UploadStreamByURL',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary URL拉取上传媒体流
 *
 * @param request UploadStreamByURLRequest
 * @return UploadStreamByURLResponse
 */
async function uploadStreamByURL(request: UploadStreamByURLRequest): UploadStreamByURLResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadStreamByURLWithOptions(request, runtime);
}

