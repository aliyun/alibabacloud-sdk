/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'ice.aliyuncs.com',
    ap-northeast-2-pop = 'ice.aliyuncs.com',
    ap-south-1 = 'ice.aliyuncs.com',
    ap-southeast-1 = 'ice.aliyuncs.com',
    ap-southeast-2 = 'ice.aliyuncs.com',
    ap-southeast-3 = 'ice.aliyuncs.com',
    ap-southeast-5 = 'ice.aliyuncs.com',
    cn-beijing = 'ice.aliyuncs.com',
    cn-beijing-finance-1 = 'ice.aliyuncs.com',
    cn-beijing-finance-pop = 'ice.aliyuncs.com',
    cn-beijing-gov-1 = 'ice.aliyuncs.com',
    cn-beijing-nu16-b01 = 'ice.aliyuncs.com',
    cn-chengdu = 'ice.aliyuncs.com',
    cn-edge-1 = 'ice.aliyuncs.com',
    cn-fujian = 'ice.aliyuncs.com',
    cn-haidian-cm12-c01 = 'ice.aliyuncs.com',
    cn-hangzhou = 'ice.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'ice.aliyuncs.com',
    cn-hangzhou-finance = 'ice.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'ice.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'ice.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'ice.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'ice.aliyuncs.com',
    cn-hangzhou-test-306 = 'ice.aliyuncs.com',
    cn-hongkong = 'ice.aliyuncs.com',
    cn-hongkong-finance-pop = 'ice.aliyuncs.com',
    cn-huhehaote = 'ice.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'ice.aliyuncs.com',
    cn-north-2-gov-1 = 'ice.aliyuncs.com',
    cn-qingdao = 'ice.aliyuncs.com',
    cn-qingdao-nebula = 'ice.aliyuncs.com',
    cn-shanghai-et15-b01 = 'ice.aliyuncs.com',
    cn-shanghai-et2-b01 = 'ice.aliyuncs.com',
    cn-shanghai-finance-1 = 'ice.aliyuncs.com',
    cn-shanghai-inner = 'ice.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'ice.aliyuncs.com',
    cn-shenzhen = 'ice.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ice.aliyuncs.com',
    cn-shenzhen-inner = 'ice.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'ice.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'ice.aliyuncs.com',
    cn-wuhan = 'ice.aliyuncs.com',
    cn-wulanchabu = 'ice.aliyuncs.com',
    cn-yushanfang = 'ice.aliyuncs.com',
    cn-zhangbei = 'ice.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'ice.aliyuncs.com',
    cn-zhangjiakou = 'ice.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'ice.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'ice.aliyuncs.com',
    eu-central-1 = 'ice.aliyuncs.com',
    eu-west-1 = 'ice.aliyuncs.com',
    eu-west-1-oxs = 'ice.aliyuncs.com',
    me-east-1 = 'ice.aliyuncs.com',
    rus-west-1-pop = 'ice.aliyuncs.com',
    us-east-1 = 'ice.aliyuncs.com',
    us-west-1 = 'ice.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('ice', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddEditingProjectMaterialsRequest {
  materialMaps?: string(name='MaterialMaps', description='素材ID'),
  projectId?: string(name='ProjectId', description='云剪辑工程ID'),
}

model AddEditingProjectMaterialsResponseBody = {
  liveMaterials?: [ 
    {
      appName?: string(name='AppName'),
      domainName?: string(name='DomainName'),
      liveUrl?: string(name='LiveUrl'),
      streamName?: string(name='StreamName'),
    }
  ](name='LiveMaterials'),
  mediaInfos?: [ 
    {
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', description='码率'),
            duration?: string(name='Duration', description='时长'),
            fileName?: string(name='FileName', description='文件名'),
            fileSize?: string(name='FileSize', description='文件大小（字节）'),
            fileStatus?: string(name='FileStatus', description='文件状态'),
            fileType?: string(name='FileType', description='文件类型'),
            fileUrl?: string(name='FileUrl', description='文件oss地址'),
            formatName?: string(name='FormatName', description='封装格式'),
            height?: string(name='Height', description='高'),
            region?: string(name='Region', description='文件存储区域'),
            width?: string(name='Width', description='宽'),
          }(name='FileBasicInfo', description='文件基础信息，包含时长，大小等'),
        }
      ](name='FileInfoList', description='FileInfos'),
      mediaBasicInfo?: {
        businessType?: string(name='BusinessType', description='媒资业务类型'),
        category?: string(name='Category', description='分类'),
        coverURL?: string(name='CoverURL', description='封面地址'),
        createTime?: string(name='CreateTime', description='媒资创建时间'),
        deletedTime?: string(name='DeletedTime', description='媒资删除时间'),
        description?: string(name='Description', description='内容描述'),
        inputURL?: string(name='InputURL', description='待注册的媒资在相应系统中的地址'),
        mediaId?: string(name='MediaId', description='MediaId'),
        mediaTags?: string(name='MediaTags', description='标签'),
        mediaType?: string(name='MediaType', description='媒资媒体类型'),
        modifiedTime?: string(name='ModifiedTime', description='媒资修改时间'),
        snapshots?: string(name='Snapshots', description='截图'),
        source?: string(name='Source', description='来源'),
        spriteImages?: string(name='SpriteImages', description='雪碧图'),
        status?: string(name='Status', description='资源状态'),
        title?: string(name='Title', description='标题'),
        transcodeStatus?: string(name='TranscodeStatus', description='转码状态'),
        userData?: string(name='UserData', description='用户数据'),
      }(name='MediaBasicInfo', description='BasicInfo'),
      mediaId?: string(name='MediaId', description='媒资ID'),
    }
  ](name='MediaInfos', description='符合要求的媒资集合'),
  projectId?: string(name='ProjectId'),
  projectMaterials?: [ string ](name='ProjectMaterials'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AddEditingProjectMaterialsResponse = {
  headers: map[string]string(name='headers'),
  body: AddEditingProjectMaterialsResponseBody(name='body'),
}

async function addEditingProjectMaterialsWithOptions(request: AddEditingProjectMaterialsRequest, runtime: Util.RuntimeOptions): AddEditingProjectMaterialsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.materialMaps)) {
    query['MaterialMaps'] = request.materialMaps;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddEditingProjectMaterials',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addEditingProjectMaterials(request: AddEditingProjectMaterialsRequest): AddEditingProjectMaterialsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addEditingProjectMaterialsWithOptions(request, runtime);
}

model AddFavoritePublicMediaRequest {
  mediaIds?: string(name='MediaIds'),
}

model AddFavoritePublicMediaResponseBody = {
  ignoredList?: [ string ](name='IgnoredList'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AddFavoritePublicMediaResponse = {
  headers: map[string]string(name='headers'),
  body: AddFavoritePublicMediaResponseBody(name='body'),
}

async function addFavoritePublicMediaWithOptions(request: AddFavoritePublicMediaRequest, runtime: Util.RuntimeOptions): AddFavoritePublicMediaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mediaIds)) {
    query['MediaIds'] = request.mediaIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddFavoritePublicMedia',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addFavoritePublicMedia(request: AddFavoritePublicMediaRequest): AddFavoritePublicMediaResponse {
  var runtime = new Util.RuntimeOptions{};
  return addFavoritePublicMediaWithOptions(request, runtime);
}

model AddTemplateRequest {
  config?: string(name='Config', description='参见Timeline模板Config文档'),
  coverUrl?: string(name='CoverUrl', description='模板封面'),
  name?: string(name='Name', description='模板名称'),
  previewMedia?: string(name='PreviewMedia', description='预览视频媒资id'),
  relatedMediaids?: string(name='RelatedMediaids', description='模板相关素材，模板编辑器使用'),
  source?: string(name='Source', description='模板创建来源，默认OpenAPI'),
  status?: string(name='Status', description='模板状态'),
  type?: string(name='Type', description='模板类型，取值范围：Timeline'),
}

model AddTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  template?: {
    config?: string(name='Config', description='参见Timeline模板Config文档'),
    coverUrl?: string(name='CoverUrl', description='模板封面'),
    createSource?: string(name='CreateSource', description='模板创建来源'),
    modifiedSource?: string(name='ModifiedSource', description='模板修改来源'),
    name?: string(name='Name', description='模板名称'),
    previewMedia?: string(name='PreviewMedia', description='预览视频媒资id'),
    status?: string(name='Status', description='模板状态'),
    templateId?: string(name='TemplateId', description='模板Id'),
    type?: string(name='Type', description='模板类型'),
  }(name='Template', description='模板信息'),
}

model AddTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: AddTemplateResponseBody(name='body'),
}

async function addTemplateWithOptions(request: AddTemplateRequest, runtime: Util.RuntimeOptions): AddTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.coverUrl)) {
    query['CoverUrl'] = request.coverUrl;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.previewMedia)) {
    query['PreviewMedia'] = request.previewMedia;
  }
  if (!Util.isUnset(request.relatedMediaids)) {
    query['RelatedMediaids'] = request.relatedMediaids;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddTemplate',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addTemplate(request: AddTemplateRequest): AddTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTemplateWithOptions(request, runtime);
}

model BatchGetMediaInfosRequest {
  additionType?: string(name='AdditionType'),
  mediaIds?: string(name='MediaIds'),
}

model BatchGetMediaInfosResponseBody = {
  mediaInfos?: [ 
    {
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', description='码率'),
            duration?: string(name='Duration', description='时长'),
            fileName?: string(name='FileName', description='文件名'),
            fileSize?: string(name='FileSize', description='文件大小（字节）'),
            fileStatus?: string(name='FileStatus', description='文件状态'),
            fileType?: string(name='FileType', description='文件类型'),
            fileUrl?: string(name='FileUrl', description='文件oss地址'),
            formatName?: string(name='FormatName', description='封装格式'),
            height?: string(name='Height', description='高'),
            region?: string(name='Region', description='文件存储区域'),
            width?: string(name='Width', description='宽'),
          }(name='FileBasicInfo', description='文件基础信息，包含时长，大小等'),
        }
      ](name='FileInfoList', description='FileInfos'),
      mediaBasicInfo?: {
        businessType?: string(name='BusinessType', description='媒资业务类型'),
        category?: string(name='Category', description='分类'),
        coverURL?: string(name='CoverURL', description='封面地址'),
        createTime?: string(name='CreateTime', description='媒资创建时间'),
        deletedTime?: string(name='DeletedTime', description='媒资删除时间'),
        description?: string(name='Description', description='内容描述'),
        inputURL?: string(name='InputURL', description='待注册的媒资在相应系统中的地址'),
        mediaId?: string(name='MediaId', description='MediaId'),
        mediaTags?: string(name='MediaTags', description='标签'),
        mediaType?: string(name='MediaType', description='媒资媒体类型'),
        modifiedTime?: string(name='ModifiedTime', description='媒资修改时间'),
        snapshots?: string(name='Snapshots', description='截图'),
        source?: string(name='Source', description='来源'),
        spriteImages?: string(name='SpriteImages', description='雪碧图'),
        status?: string(name='Status', description='资源状态'),
        title?: string(name='Title', description='标题'),
        transcodeStatus?: string(name='TranscodeStatus', description='转码状态'),
        userData?: string(name='UserData', description='用户数据'),
      }(name='MediaBasicInfo', description='BasicInfo'),
      mediaId?: string(name='MediaId', description='媒资ID'),
    }
  ](name='MediaInfos', description='符合要求的媒资集合'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model BatchGetMediaInfosResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetMediaInfosResponseBody(name='body'),
}

async function batchGetMediaInfosWithOptions(request: BatchGetMediaInfosRequest, runtime: Util.RuntimeOptions): BatchGetMediaInfosResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.additionType)) {
    query['AdditionType'] = request.additionType;
  }
  if (!Util.isUnset(request.mediaIds)) {
    query['MediaIds'] = request.mediaIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchGetMediaInfos',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchGetMediaInfos(request: BatchGetMediaInfosRequest): BatchGetMediaInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetMediaInfosWithOptions(request, runtime);
}

model CancelFavoritePublicMediaRequest {
  mediaIds?: string(name='MediaIds'),
}

model CancelFavoritePublicMediaResponseBody = {
  ignoredList?: [ string ](name='IgnoredList'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CancelFavoritePublicMediaResponse = {
  headers: map[string]string(name='headers'),
  body: CancelFavoritePublicMediaResponseBody(name='body'),
}

async function cancelFavoritePublicMediaWithOptions(request: CancelFavoritePublicMediaRequest, runtime: Util.RuntimeOptions): CancelFavoritePublicMediaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mediaIds)) {
    query['MediaIds'] = request.mediaIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelFavoritePublicMedia',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelFavoritePublicMedia(request: CancelFavoritePublicMediaRequest): CancelFavoritePublicMediaResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelFavoritePublicMediaWithOptions(request, runtime);
}

model CreateEditingProjectRequest {
  businessConfig?: string(name='BusinessConfig', description='工程业务配置。如果是直播剪辑工程必填OutputMediaConfig.StorageLocation,   Path 不填默认合成的直播片段存储在根路径下 OutputMediaTarget 不填默认oss-object，可以填vod-media 表示存储到vod  OutputMediaTarget 为vod-media 时，Path不生效。'),
  clipsParam?: string(name='ClipsParam', description='模板素材参数'),
  coverURL?: string(name='CoverURL', description='云剪辑工程封面'),
  description?: string(name='Description', description='云剪辑工程描述'),
  materialMaps?: string(name='MaterialMaps', description='工程关联素材，多个素材以逗号（,）分隔；每种类型最多支持10个素材ID'),
  projectType?: string(name='ProjectType', description='剪辑工程类型，EditingProject: 普通剪辑工程；LiveEditingProject: 直播剪辑工程'),
  templateId?: string(name='TemplateId', description='模板Id'),
  timeline?: string(name='Timeline', description='云剪辑工程时间线，Json格式'),
  title?: string(name='Title', description='云剪辑工程标题'),
}

model CreateEditingProjectResponseBody = {
  project?: {
    businessConfig?: string(name='BusinessConfig', description='工程业务配置'),
    businessStatus?: string(name='BusinessStatus', description='业务状态，业务状态 /** 预约中 **/ RESERVING(0, "Reserving"), /** 预约取消 **/ RESERVATION_CANCELED(1, "ReservationCanceled"), /** 直播中 **/ BROADCASTING(3, "BroadCasting"), /** 加载失败 **/ LOADING_FAILED(4, "LoadingFailed"), /** 直播结束 **/ LIVE_FINISHED(5, "LiveFinished");'),
    clipsParam?: string(name='ClipsParam', description='模板素材参数'),
    coverURL?: string(name='CoverURL', description='云剪辑工程封面。'),
    createSource?: string(name='CreateSource', description='云剪辑工程创建方式  -OpenAPI  -AliyunConsole  -WebSDK -LiveEditingOpenAPI -LiveEditingConsole'),
    createTime?: string(name='CreateTime', description='云剪辑工程创建时间'),
    description?: string(name='Description', description='云剪辑工程描述'),
    duration?: float(name='Duration', description='云剪辑工程时长'),
    modifiedSource?: string(name='ModifiedSource', description='云剪辑工程创建方式  -OpenAPI  -AliyunConsole  -WebSDK -LiveEditingOpenAPI -LiveEditingConsole'),
    modifiedTime?: string(name='ModifiedTime', description='云剪辑工程编辑时间'),
    projectId?: string(name='ProjectId', description='云剪辑工程ID'),
    projectType?: string(name='ProjectType', description='剪辑工程类型，EditingProject: 普通剪辑工程；LiveEditingProject: 直播剪辑工程'),
    status?: long(name='Status', description='云剪辑工程状态。  所有云剪辑工程状态列表：  -1:Draft  -2:Editing  -3:Producing  -4:Produced  -5:ProduceFailed  -7:Deleted'),
    statusName?: string(name='StatusName', description='云剪辑状态名称，对应状态列表中状态名称。'),
    templateId?: string(name='TemplateId', description='模板Id'),
    templateType?: string(name='TemplateType'),
    timeline?: string(name='Timeline', description='云剪辑工程时间线，Json格式'),
    title?: string(name='Title', description='云剪辑工程标题'),
  }(name='Project'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model CreateEditingProjectResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEditingProjectResponseBody(name='body'),
}

async function createEditingProjectWithOptions(request: CreateEditingProjectRequest, runtime: Util.RuntimeOptions): CreateEditingProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessConfig)) {
    query['BusinessConfig'] = request.businessConfig;
  }
  if (!Util.isUnset(request.clipsParam)) {
    query['ClipsParam'] = request.clipsParam;
  }
  if (!Util.isUnset(request.coverURL)) {
    query['CoverURL'] = request.coverURL;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.materialMaps)) {
    query['MaterialMaps'] = request.materialMaps;
  }
  if (!Util.isUnset(request.projectType)) {
    query['ProjectType'] = request.projectType;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.timeline)) {
    query['Timeline'] = request.timeline;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEditingProject',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEditingProject(request: CreateEditingProjectRequest): CreateEditingProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEditingProjectWithOptions(request, runtime);
}

model DeleteEditingProjectMaterialsRequest {
  materialIds?: string(name='MaterialIds', description='素材ID'),
  materialType?: string(name='MaterialType', description='素材类型'),
  projectId?: string(name='ProjectId', description='云剪辑工程ID'),
}

model DeleteEditingProjectMaterialsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteEditingProjectMaterialsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEditingProjectMaterialsResponseBody(name='body'),
}

async function deleteEditingProjectMaterialsWithOptions(request: DeleteEditingProjectMaterialsRequest, runtime: Util.RuntimeOptions): DeleteEditingProjectMaterialsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.materialIds)) {
    query['MaterialIds'] = request.materialIds;
  }
  if (!Util.isUnset(request.materialType)) {
    query['MaterialType'] = request.materialType;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEditingProjectMaterials',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEditingProjectMaterials(request: DeleteEditingProjectMaterialsRequest): DeleteEditingProjectMaterialsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEditingProjectMaterialsWithOptions(request, runtime);
}

model DeleteEditingProjectsRequest {
  projectIds?: string(name='ProjectIds', description='云剪辑工程ID。支持多个云剪辑工程，以逗号分隔。'),
}

model DeleteEditingProjectsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteEditingProjectsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEditingProjectsResponseBody(name='body'),
}

async function deleteEditingProjectsWithOptions(request: DeleteEditingProjectsRequest, runtime: Util.RuntimeOptions): DeleteEditingProjectsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectIds)) {
    query['ProjectIds'] = request.projectIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEditingProjects',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEditingProjects(request: DeleteEditingProjectsRequest): DeleteEditingProjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEditingProjectsWithOptions(request, runtime);
}

model DeleteMediaInfosRequest {
  inputURLs?: string(name='InputURLs', description='待注册的媒资在相应系统中的地址'),
  mediaIds?: string(name='MediaIds', description='ICE 媒资ID'),
}

model DeleteMediaInfosResponseBody = {
  ignoredList?: [ string ](name='IgnoredList', description='出现获取错误的ID或inputUr'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model DeleteMediaInfosResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMediaInfosResponseBody(name='body'),
}

async function deleteMediaInfosWithOptions(request: DeleteMediaInfosRequest, runtime: Util.RuntimeOptions): DeleteMediaInfosResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.inputURLs)) {
    query['InputURLs'] = request.inputURLs;
  }
  if (!Util.isUnset(request.mediaIds)) {
    query['MediaIds'] = request.mediaIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMediaInfos',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMediaInfos(request: DeleteMediaInfosRequest): DeleteMediaInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMediaInfosWithOptions(request, runtime);
}

model DeleteSmartJobRequest {
  jobId?: string(name='JobId'),
}

model DeleteSmartJobResponseBody = {
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId', description='Id of the request'),
  state?: string(name='State'),
}

model DeleteSmartJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSmartJobResponseBody(name='body'),
}

async function deleteSmartJobWithOptions(request: DeleteSmartJobRequest, runtime: Util.RuntimeOptions): DeleteSmartJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSmartJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSmartJob(request: DeleteSmartJobRequest): DeleteSmartJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSmartJobWithOptions(request, runtime);
}

model DeleteTemplateRequest {
  templateIds?: string(name='TemplateIds', description='模板id，多个id用英文逗号隔开'),
}

model DeleteTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model DeleteTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTemplateResponseBody(name='body'),
}

async function deleteTemplateWithOptions(request: DeleteTemplateRequest, runtime: Util.RuntimeOptions): DeleteTemplateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTemplate',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTemplate(request: DeleteTemplateRequest): DeleteTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTemplateWithOptions(request, runtime);
}

model DescribeIceProductStatusRequest {
  commodityCode?: string(name='CommodityCode'),
}

model DescribeIceProductStatusResponseBody = {
  ICEServiceAvaliable?: boolean(name='ICEServiceAvaliable'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeIceProductStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIceProductStatusResponseBody(name='body'),
}

async function describeIceProductStatusWithOptions(request: DescribeIceProductStatusRequest, runtime: Util.RuntimeOptions): DescribeIceProductStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commodityCode)) {
    query['CommodityCode'] = request.commodityCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeIceProductStatus',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeIceProductStatus(request: DescribeIceProductStatusRequest): DescribeIceProductStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIceProductStatusWithOptions(request, runtime);
}

model DescribeMaterialPackageInfoRequest {
  materialPackageId?: string(name='MaterialPackageId'),
  materialPackageType?: string(name='MaterialPackageType'),
  status?: string(name='Status'),
}

model DescribeMaterialPackageInfoResponseBody = {
  materialPackageInfoList?: [ 
    {
      authTime?: string(name='AuthTime'),
      authorized?: boolean(name='Authorized'),
      displayPrice?: string(name='DisplayPrice'),
      initCapacity?: string(name='InitCapacity'),
      materialCount?: int32(name='MaterialCount'),
      materialPackageId?: string(name='MaterialPackageId'),
      materialPackagePurchaseList?: [ 
        {
          currCapacity?: string(name='CurrCapacity'),
          endTime?: string(name='EndTime'),
          initCapacity?: string(name='InitCapacity'),
          remainingAuthTime?: string(name='RemainingAuthTime'),
          startTime?: string(name='StartTime'),
          status?: string(name='Status'),
        }
      ](name='MaterialPackagePurchaseList'),
    }
  ](name='MaterialPackageInfoList'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeMaterialPackageInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMaterialPackageInfoResponseBody(name='body'),
}

async function describeMaterialPackageInfoWithOptions(request: DescribeMaterialPackageInfoRequest, runtime: Util.RuntimeOptions): DescribeMaterialPackageInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.materialPackageId)) {
    query['MaterialPackageId'] = request.materialPackageId;
  }
  if (!Util.isUnset(request.materialPackageType)) {
    query['MaterialPackageType'] = request.materialPackageType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMaterialPackageInfo',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeMaterialPackageInfo(request: DescribeMaterialPackageInfoRequest): DescribeMaterialPackageInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMaterialPackageInfoWithOptions(request, runtime);
}

model DescribeRelatedAuthorizationStatusResponseBody = {
  authorized?: boolean(name='Authorized'),
  MNSAuthorized?: boolean(name='MNSAuthorized'),
  MTSAuthorized?: boolean(name='MTSAuthorized'),
  OSSAuthorized?: boolean(name='OSSAuthorized'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeRelatedAuthorizationStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRelatedAuthorizationStatusResponseBody(name='body'),
}

async function describeRelatedAuthorizationStatusWithOptions(runtime: Util.RuntimeOptions): DescribeRelatedAuthorizationStatusResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeRelatedAuthorizationStatus',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRelatedAuthorizationStatus(): DescribeRelatedAuthorizationStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRelatedAuthorizationStatusWithOptions(runtime);
}

model GetDefaultStorageLocationResponseBody = {
  bucket?: string(name='Bucket', description='oss bucket 名称'),
  path?: string(name='Path', description='路径'),
  requestId?: string(name='RequestId', description='Id of the request'),
  status?: string(name='Status', description='状态'),
  storageType?: string(name='StorageType', description='存储类型'),
}

model GetDefaultStorageLocationResponse = {
  headers: map[string]string(name='headers'),
  body: GetDefaultStorageLocationResponseBody(name='body'),
}

async function getDefaultStorageLocationWithOptions(runtime: Util.RuntimeOptions): GetDefaultStorageLocationResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetDefaultStorageLocation',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDefaultStorageLocation(): GetDefaultStorageLocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDefaultStorageLocationWithOptions(runtime);
}

model GetEditingProjectRequest {
  projectId?: string(name='ProjectId', description='云剪辑工程ID'),
}

model GetEditingProjectResponseBody = {
  project?: {
    businessConfig?: string(name='BusinessConfig'),
    businessStatus?: string(name='BusinessStatus'),
    clipsParam?: string(name='ClipsParam', description='模板素材参数'),
    coverURL?: string(name='CoverURL', description='云剪辑工程封面'),
    createSource?: string(name='CreateSource', description='云剪辑工程创建来源'),
    createTime?: string(name='CreateTime', description='云剪辑工程创建时间'),
    description?: string(name='Description', description='云剪辑工程描述'),
    duration?: long(name='Duration', description='云剪辑工程总时长'),
    modifiedSource?: string(name='ModifiedSource', description='云剪辑工程修改来源'),
    modifiedTime?: string(name='ModifiedTime', description='云剪辑工程最新修改时间'),
    projectId?: string(name='ProjectId', description='云剪辑工程ID'),
    projectType?: string(name='ProjectType'),
    status?: string(name='Status', description='云剪辑工程状态'),
    templateId?: string(name='TemplateId', description='模板Id'),
    templateType?: string(name='TemplateType', description='云剪辑工程模板类型'),
    timeline?: string(name='Timeline', description='云剪辑工程时间线'),
    title?: string(name='Title', description='云剪辑工程标题'),
  }(name='Project'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetEditingProjectResponse = {
  headers: map[string]string(name='headers'),
  body: GetEditingProjectResponseBody(name='body'),
}

async function getEditingProjectWithOptions(request: GetEditingProjectRequest, runtime: Util.RuntimeOptions): GetEditingProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEditingProject',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEditingProject(request: GetEditingProjectRequest): GetEditingProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEditingProjectWithOptions(request, runtime);
}

model GetEditingProjectMaterialsRequest {
  projectId?: string(name='ProjectId', description='云剪辑工程ID'),
}

model GetEditingProjectMaterialsResponseBody = {
  liveMaterials?: [ 
    {
      appName?: string(name='AppName'),
      domainName?: string(name='DomainName'),
      liveUrl?: string(name='LiveUrl'),
      streamName?: string(name='StreamName'),
    }
  ](name='LiveMaterials'),
  mediaInfos?: [ 
    {
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', description='码率'),
            duration?: string(name='Duration', description='时长'),
            fileName?: string(name='FileName', description='文件名'),
            fileSize?: string(name='FileSize', description='文件大小（字节）'),
            fileStatus?: string(name='FileStatus', description='文件状态'),
            fileType?: string(name='FileType', description='文件类型'),
            fileUrl?: string(name='FileUrl', description='文件oss地址'),
            formatName?: string(name='FormatName', description='封装格式'),
            height?: string(name='Height', description='高'),
            region?: string(name='Region', description='文件存储区域'),
            width?: string(name='Width', description='宽'),
          }(name='FileBasicInfo', description='文件基础信息，包含时长，大小等'),
        }
      ](name='FileInfoList', description='FileInfos'),
      mediaBasicInfo?: {
        businessType?: string(name='BusinessType', description='媒资业务类型'),
        category?: string(name='Category', description='分类'),
        coverURL?: string(name='CoverURL', description='封面地址'),
        createTime?: string(name='CreateTime', description='媒资创建时间'),
        deletedTime?: string(name='DeletedTime', description='媒资删除时间'),
        description?: string(name='Description', description='内容描述'),
        inputURL?: string(name='InputURL', description='待注册的媒资在相应系统中的地址'),
        mediaId?: string(name='MediaId', description='MediaId'),
        mediaTags?: string(name='MediaTags', description='标签'),
        mediaType?: string(name='MediaType', description='媒资媒体类型'),
        modifiedTime?: string(name='ModifiedTime', description='媒资修改时间'),
        snapshots?: string(name='Snapshots', description='截图'),
        source?: string(name='Source', description='来源'),
        spriteImages?: string(name='SpriteImages', description='雪碧图'),
        status?: string(name='Status', description='资源状态'),
        title?: string(name='Title', description='标题'),
        transcodeStatus?: string(name='TranscodeStatus', description='转码状态'),
        userData?: string(name='UserData', description='用户数据'),
      }(name='MediaBasicInfo', description='BasicInfo'),
      mediaId?: string(name='MediaId', description='媒资ID'),
    }
  ](name='MediaInfos', description='符合要求的媒资集合'),
  projectId?: string(name='ProjectId'),
  projectMaterials?: [ string ](name='ProjectMaterials'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetEditingProjectMaterialsResponse = {
  headers: map[string]string(name='headers'),
  body: GetEditingProjectMaterialsResponseBody(name='body'),
}

async function getEditingProjectMaterialsWithOptions(request: GetEditingProjectMaterialsRequest, runtime: Util.RuntimeOptions): GetEditingProjectMaterialsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEditingProjectMaterials',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEditingProjectMaterials(request: GetEditingProjectMaterialsRequest): GetEditingProjectMaterialsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEditingProjectMaterialsWithOptions(request, runtime);
}

model GetEventCallbackResponseBody = {
  callbackQueueName?: string(name='CallbackQueueName'),
  eventTypeList?: string(name='EventTypeList'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetEventCallbackResponse = {
  headers: map[string]string(name='headers'),
  body: GetEventCallbackResponseBody(name='body'),
}

async function getEventCallbackWithOptions(runtime: Util.RuntimeOptions): GetEventCallbackResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetEventCallback',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEventCallback(): GetEventCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEventCallbackWithOptions(runtime);
}

model GetLiveEditingIndexFileRequest {
  appName?: string(name='AppName'),
  domainName?: string(name='DomainName'),
  projectId?: string(name='ProjectId'),
  streamName?: string(name='StreamName'),
}

model GetLiveEditingIndexFileResponseBody = {
  indexFile?: string(name='IndexFile'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetLiveEditingIndexFileResponse = {
  headers: map[string]string(name='headers'),
  body: GetLiveEditingIndexFileResponseBody(name='body'),
}

async function getLiveEditingIndexFileWithOptions(request: GetLiveEditingIndexFileRequest, runtime: Util.RuntimeOptions): GetLiveEditingIndexFileResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLiveEditingIndexFile',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLiveEditingIndexFile(request: GetLiveEditingIndexFileRequest): GetLiveEditingIndexFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLiveEditingIndexFileWithOptions(request, runtime);
}

model GetLiveEditingJobRequest {
  jobId?: string(name='JobId', description='直播剪辑JobId'),
}

model GetLiveEditingJobResponseBody = {
  liveEditingJob?: {
    clips?: string(name='Clips', description='剪辑片段列表'),
    code?: string(name='Code', description='剪辑合成作业错误码  注：作业失败时关注该字段'),
    completeTime?: string(name='CompleteTime', description='直播剪辑作业完成时间，格式为utc时间。  格式为："YYYY-MM-DD\'T\'hh:mm:ss\'Z\'"。'),
    creationTime?: string(name='CreationTime', description='直播剪辑作业创建时间，格式为utc时间。  格式为："YYYY-MM-DD\'T\'hh:mm:ss\'Z\'"。'),
    jobId?: string(name='JobId', description='直播剪辑任务ID'),
    liveStreamConfig?: {
      appName?: string(name='AppName', description='播流所属应用名称'),
      domainName?: string(name='DomainName', description='播流所属域名'),
      streamName?: string(name='StreamName', description='播流所属流名'),
    }(name='LiveStreamConfig', description='直播剪辑配置'),
    mediaId?: string(name='MediaId', description='输出成品的资源Id'),
    mediaProduceConfig?: {
      mode?: string(name='Mode', description='剪辑模式，默认Accurate'),
    }(name='MediaProduceConfig', description='直播剪辑合成配置'),
    mediaURL?: string(name='MediaURL', description='输出成品的资源文件URL'),
    message?: string(name='Message', description='剪辑合成作业错误信息  注：作业失败时关注该字段'),
    modifiedTime?: string(name='ModifiedTime', description='直播剪辑作业修改时间，格式为utc时间。  格式为："YYYY-MM-DD\'T\'hh:mm:ss\'Z\'"。'),
    outputMediaConfig?: {
      bitrate?: long(name='Bitrate', description='输出成品的码率，单位为Kbps。可以不填，默认值是多个素材的最高码率'),
      fileName?: string(name='FileName', description='当 OutputMediaTarget 的目标为 vod-media 时，指定 fileName(包含文件后缀，不含路径）作为输出文件名'),
      height?: int32(name='Height', description='输出成品的高。可以不填，默认值是多个素材的最大高'),
      mediaURL?: string(name='MediaURL', description='输出成片的文件地址'),
      storageLocation?: string(name='StorageLocation', description='当 OutputMediaTarget 的目标为 vod-media 时， 指定 storage location 来存储媒资到 VOD; storage location 是 VOD 中的文件存储位置， 不包含 http:// 的前缀， 如:  outin-xxxxxx.oss-cn-shanghai.aliyuncs.com'),
      vodTemplateGroupId?: string(name='VodTemplateGroupId', description='合成成片输出到vod，指定vod转码模板组。如不需要VOD转码，请填写 "VOD_NO_TRANSCODE".'),
      width?: int32(name='Width', description='输出成品的宽。可以不填，默认值是多个素材的最大宽'),
    }(name='OutputMediaConfig', description='输出成片的存储配置'),
    projectId?: string(name='ProjectId', description='直播剪辑工程ID'),
    status?: string(name='Status', description='直播剪辑作业状态，取值可能为如下值：  -Init （初始状态）  -Queuing（排队中）  -Processing（处理中）  -Success（成功）  -Failed（失败）'),
    userData?: string(name='UserData', description='用户数据'),
  }(name='LiveEditingJob', description='直播剪辑任务'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model GetLiveEditingJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetLiveEditingJobResponseBody(name='body'),
}

async function getLiveEditingJobWithOptions(request: GetLiveEditingJobRequest, runtime: Util.RuntimeOptions): GetLiveEditingJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLiveEditingJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLiveEditingJob(request: GetLiveEditingJobRequest): GetLiveEditingJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLiveEditingJobWithOptions(request, runtime);
}

model GetMediaInfoRequest {
  inputURL?: string(name='InputURL'),
  mediaId?: string(name='MediaId'),
  outputType?: string(name='OutputType'),
}

model GetMediaInfoResponseBody = {
  mediaInfo?: {
    aiRoughDataList?: [ 
      {
        result?: string(name='Result', description='AI原始结果'),
        type?: string(name='Type', description='AI类型'),
      }
    ](name='AiRoughDataList', description='AIMetadata'),
    dynamicMetaData?: {
      data?: string(name='Data', description='元数据json'),
      type?: string(name='Type', description='类型'),
    }(name='DynamicMetaData', description='其他元数据'),
    fileInfoList?: [ 
      {
        audioStreamInfoList?: [ 
          {
            bitrate?: string(name='Bitrate', description='码率'),
            channelLayout?: string(name='ChannelLayout', description='声道输出样式'),
            channels?: string(name='Channels', description='声道数'),
            codecLongName?: string(name='CodecLongName', description='编码格式长述名'),
            codecName?: string(name='CodecName', description='编码格式简述名'),
            codecTag?: string(name='CodecTag', description='编码格式标记'),
            codecTagString?: string(name='CodecTagString', description='编码格式标记文本'),
            codecTimeBase?: string(name='CodecTimeBase', description='编码时基'),
            duration?: string(name='Duration', description='时长'),
            fps?: string(name='Fps', description='音频帧率'),
            index?: string(name='Index', description='音频流序号'),
            lang?: string(name='Lang', description='语言'),
            numFrames?: string(name='NumFrames', description='总帧数'),
            profile?: string(name='Profile', description='编码预置'),
            sampleFmt?: string(name='SampleFmt', description='采样格式'),
            sampleRate?: string(name='SampleRate', description='采样率'),
            startTime?: string(name='StartTime', description='起始时间'),
            timebase?: string(name='Timebase', description='时基'),
          }
        ](name='AudioStreamInfoList', description='音频流信息，一个媒资可能有多条音频流'),
        fileBasicInfo?: {
          bitrate?: string(name='Bitrate', description='码率'),
          duration?: string(name='Duration', description='时长'),
          fileName?: string(name='FileName', description='文件名'),
          fileSize?: string(name='FileSize', description='文件大小（字节）'),
          fileStatus?: string(name='FileStatus', description='文件状态'),
          fileType?: string(name='FileType', description='文件类型'),
          fileUrl?: string(name='FileUrl', description='文件oss地址'),
          formatName?: string(name='FormatName', description='封装格式'),
          height?: string(name='Height', description='高'),
          region?: string(name='Region', description='文件存储区域'),
          width?: string(name='Width', description='宽'),
        }(name='FileBasicInfo', description='文件基础信息，包含时长，大小等'),
        subtitleStreamInfoList?: [ 
          {
            codecLongName?: string(name='CodecLongName', description='编码格式长述名'),
            codecName?: string(name='CodecName', description='编码格式简述名'),
            codecTag?: string(name='CodecTag', description='编码格式标记'),
            codecTagString?: string(name='CodecTagString', description='编码格式标记文本'),
            codecTimeBase?: string(name='CodecTimeBase', description='编码时基'),
            duration?: string(name='Duration', description='时长'),
            index?: string(name='Index', description='音频流序号'),
            lang?: string(name='Lang', description='语言'),
            startTime?: string(name='StartTime', description='起始时间'),
            timebase?: string(name='Timebase', description='时基'),
          }
        ](name='SubtitleStreamInfoList', description='字幕流信息，一个媒资可能有多条字幕流'),
        videoStreamInfoList?: [ 
          {
            avgFPS?: string(name='AvgFPS', description='平均帧率'),
            bitrate?: string(name='Bitrate', description='码率'),
            codecLongName?: string(name='CodecLongName', description='编码格式长述名'),
            codecName?: string(name='CodecName', description='编码格式简述名'),
            codecTag?: string(name='CodecTag', description='编码格式标记'),
            codecTagString?: string(name='CodecTagString', description='编码格式标记文本'),
            codecTimeBase?: string(name='CodecTimeBase', description='编码时基'),
            dar?: string(name='Dar', description='编码显示分辨率比'),
            duration?: string(name='Duration', description='时长'),
            fps?: string(name='Fps', description='视频帧率'),
            hasBFrames?: string(name='HasBFrames', description='是否有B帧'),
            height?: string(name='Height', description='高'),
            index?: string(name='Index', description='视频流序号'),
            lang?: string(name='Lang', description='语言'),
            level?: string(name='Level', description='编码等级'),
            nbFrames?: string(name='Nb_frames', description='总帧数'),
            numFrames?: string(name='NumFrames', description='总帧数'),
            pixFmt?: string(name='PixFmt', description='像素格式'),
            profile?: string(name='Profile', description='编码预置'),
            rotate?: string(name='Rotate', description='旋转'),
            sar?: string(name='Sar', description='编码信号分辨率比'),
            startTime?: string(name='StartTime', description='起始时间'),
            timebase?: string(name='Timebase', description='时基'),
            width?: string(name='Width', description='宽'),
          }
        ](name='VideoStreamInfoList', description='视频流信息，一个媒资可能有多条视频流'),
      }
    ](name='FileInfoList', description='FileInfos'),
    mediaBasicInfo?: {
      businessType?: string(name='BusinessType', description='媒资业务类型'),
      category?: string(name='Category', description='分类'),
      coverURL?: string(name='CoverURL', description='封面地址'),
      createTime?: string(name='CreateTime', description='媒资创建时间'),
      deletedTime?: string(name='DeletedTime', description='媒资删除时间'),
      description?: string(name='Description', description='内容描述'),
      inputURL?: string(name='InputURL', description='待注册的媒资在相应系统中的地址'),
      mediaId?: string(name='MediaId', description='MediaId'),
      mediaTags?: string(name='MediaTags', description='标签'),
      mediaType?: string(name='MediaType', description='媒资媒体类型'),
      modifiedTime?: string(name='ModifiedTime', description='媒资修改时间'),
      source?: string(name='Source', description='来源'),
      spriteImages?: string(name='SpriteImages', description='雪碧图'),
      status?: string(name='Status', description='资源状态'),
      title?: string(name='Title', description='标题'),
      userData?: string(name='UserData', description='用户数据'),
    }(name='MediaBasicInfo', description='BasicInfo'),
    mediaId?: string(name='MediaId', description='媒资ID'),
  }(name='MediaInfo'),
  requestId?: string(name='RequestId', description='RequestId'),
}

model GetMediaInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetMediaInfoResponseBody(name='body'),
}

async function getMediaInfoWithOptions(request: GetMediaInfoRequest, runtime: Util.RuntimeOptions): GetMediaInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.inputURL)) {
    query['InputURL'] = request.inputURL;
  }
  if (!Util.isUnset(request.mediaId)) {
    query['MediaId'] = request.mediaId;
  }
  if (!Util.isUnset(request.outputType)) {
    query['OutputType'] = request.outputType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMediaInfo',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMediaInfo(request: GetMediaInfoRequest): GetMediaInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMediaInfoWithOptions(request, runtime);
}

model GetMediaProducingJobRequest {
  jobId?: string(name='JobId'),
}

model GetMediaProducingJobResponseBody = {
  mediaProducingJob?: {
    clipsParam?: string(name='ClipsParam'),
    code?: string(name='Code'),
    completeTime?: string(name='CompleteTime'),
    createTime?: string(name='CreateTime'),
    duration?: float(name='Duration'),
    jobId?: string(name='JobId'),
    mediaId?: string(name='MediaId'),
    mediaURL?: string(name='MediaURL'),
    message?: string(name='Message'),
    modifiedTime?: string(name='ModifiedTime'),
    projectId?: string(name='ProjectId'),
    status?: string(name='Status'),
    templateId?: string(name='TemplateId'),
    timeline?: string(name='Timeline'),
    vodMediaId?: string(name='VodMediaId'),
  }(name='MediaProducingJob'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetMediaProducingJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetMediaProducingJobResponseBody(name='body'),
}

async function getMediaProducingJobWithOptions(request: GetMediaProducingJobRequest, runtime: Util.RuntimeOptions): GetMediaProducingJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMediaProducingJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMediaProducingJob(request: GetMediaProducingJobRequest): GetMediaProducingJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMediaProducingJobWithOptions(request, runtime);
}

model GetPublicMediaInfoRequest {
  mediaId?: string(name='MediaId'),
}

model GetPublicMediaInfoResponseBody = {
  mediaInfo?: {
    dynamicMetaData?: {
      data?: string(name='Data', description='元数据json'),
      type?: string(name='Type', description='类型'),
    }(name='DynamicMetaData', description='公共媒资动态元数据'),
    fileInfoList?: [ 
      {
        audioStreamInfoList?: [ 
          {
            bitrate?: string(name='Bitrate', description='码率'),
            channelLayout?: string(name='ChannelLayout', description='声道输出样式'),
            channels?: string(name='Channels', description='声道数'),
            codecLongName?: string(name='CodecLongName', description='编码格式长述名'),
            codecName?: string(name='CodecName', description='编码格式简述名'),
            codecTag?: string(name='CodecTag', description='编码格式标记'),
            codecTagString?: string(name='CodecTagString', description='编码格式标记文本'),
            codecTimeBase?: string(name='CodecTimeBase', description='编码时基'),
            duration?: string(name='Duration', description='时长'),
            fps?: string(name='Fps', description='音频帧率'),
            index?: string(name='Index', description='音频流序号'),
            lang?: string(name='Lang', description='语言'),
            numFrames?: string(name='NumFrames', description='总帧数'),
            profile?: string(name='Profile', description='编码预置'),
            sampleFmt?: string(name='SampleFmt', description='采样格式'),
            sampleRate?: string(name='SampleRate', description='采样率'),
            startTime?: string(name='StartTime', description='起始时间'),
            timebase?: string(name='Timebase', description='时基'),
          }
        ](name='AudioStreamInfoList', description='音频流信息，一个媒资可能有多条音频流'),
        fileBasicInfo?: {
          bitrate?: string(name='Bitrate', description='码率'),
          duration?: string(name='Duration', description='时长'),
          fileName?: string(name='FileName', description='文件名'),
          fileSize?: string(name='FileSize', description='文件大小（字节）'),
          fileStatus?: string(name='FileStatus', description='文件状态'),
          fileType?: string(name='FileType', description='文件类型'),
          fileUrl?: string(name='FileUrl', description='文件oss地址'),
          formatName?: string(name='FormatName', description='封装格式'),
          height?: string(name='Height', description='高'),
          region?: string(name='Region', description='文件存储区域'),
          width?: string(name='Width', description='宽'),
        }(name='FileBasicInfo', description='文件基础信息，包含时长，大小等'),
        subtitleStreamInfoList?: [ 
          {
            codecLongName?: string(name='CodecLongName', description='编码格式长述名'),
            codecName?: string(name='CodecName', description='编码格式简述名'),
            codecTag?: string(name='CodecTag', description='编码格式标记'),
            codecTagString?: string(name='CodecTagString', description='编码格式标记文本'),
            codecTimeBase?: string(name='CodecTimeBase', description='编码时基'),
            duration?: string(name='Duration', description='时长'),
            index?: string(name='Index', description='音频流序号'),
            lang?: string(name='Lang', description='语言'),
            startTime?: string(name='StartTime', description='起始时间'),
            timebase?: string(name='Timebase', description='时基'),
          }
        ](name='SubtitleStreamInfoList', description='字幕流信息，一个媒资可能有多条字幕流'),
        videoStreamInfoList?: [ 
          {
            avgFPS?: string(name='AvgFPS', description='平均帧率'),
            bitrate?: string(name='Bitrate', description='码率'),
            codecLongName?: string(name='CodecLongName', description='编码格式长述名'),
            codecName?: string(name='CodecName', description='编码格式简述名'),
            codecTag?: string(name='CodecTag', description='编码格式标记'),
            codecTagString?: string(name='CodecTagString', description='编码格式标记文本'),
            codecTimeBase?: string(name='CodecTimeBase', description='编码时基'),
            dar?: string(name='Dar', description='编码显示分辨率比'),
            duration?: string(name='Duration', description='时长'),
            fps?: string(name='Fps', description='视频帧率'),
            hasBFrames?: string(name='HasBFrames', description='是否有B帧'),
            height?: string(name='Height', description='高'),
            index?: string(name='Index', description='视频流序号'),
            lang?: string(name='Lang', description='语言'),
            level?: string(name='Level', description='编码等级'),
            nbFrames?: string(name='Nb_frames', description='总帧数'),
            numFrames?: string(name='NumFrames', description='总帧数'),
            pixFmt?: string(name='PixFmt', description='像素格式'),
            profile?: string(name='Profile', description='编码预置'),
            rotate?: string(name='Rotate', description='旋转'),
            sar?: string(name='Sar', description='编码信号分辨率比'),
            startTime?: string(name='StartTime', description='起始时间'),
            timebase?: string(name='Timebase', description='时基'),
            width?: string(name='Width', description='宽'),
          }
        ](name='VideoStreamInfoList', description='视频流信息，一个媒资可能有多条视频流'),
      }
    ](name='FileInfoList', description='FileInfos'),
    mediaBasicInfo?: {
      businessType?: string(name='BusinessType', description='媒资业务类型'),
      category?: string(name='Category', description='分类'),
      coverURL?: string(name='CoverURL', description='封面地址'),
      createTime?: string(name='CreateTime', description='媒资创建时间'),
      deletedTime?: string(name='DeletedTime', description='媒资删除时间'),
      description?: string(name='Description', description='内容描述'),
      mediaId?: string(name='MediaId', description='MediaId'),
      mediaTags?: string(name='MediaTags', description='标签'),
      mediaType?: string(name='MediaType', description='媒资媒体类型'),
      modifiedTime?: string(name='ModifiedTime', description='媒资修改时间'),
      source?: string(name='Source', description='来源'),
      spriteImages?: string(name='SpriteImages', description='雪碧图'),
      status?: string(name='Status', description='资源状态'),
      title?: string(name='Title', description='标题'),
      userData?: string(name='UserData', description='用户数据'),
    }(name='MediaBasicInfo', description='BasicInfo'),
    mediaId?: string(name='MediaId', description='媒资ID'),
  }(name='MediaInfo'),
  requestId?: string(name='RequestId', description='RequestId'),
}

model GetPublicMediaInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetPublicMediaInfoResponseBody(name='body'),
}

async function getPublicMediaInfoWithOptions(request: GetPublicMediaInfoRequest, runtime: Util.RuntimeOptions): GetPublicMediaInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mediaId)) {
    query['MediaId'] = request.mediaId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPublicMediaInfo',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPublicMediaInfo(request: GetPublicMediaInfoRequest): GetPublicMediaInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPublicMediaInfoWithOptions(request, runtime);
}

model GetSmartHandleJobRequest {
  jobId?: string(name='JobId', description='任务Id'),
}

model GetSmartHandleJobResponseBody = {
  jobId?: string(name='JobId', description='任务Id'),
  output?: string(name='Output', description='任务结果'),
  requestId?: string(name='RequestId', description='请求Id'),
  smartJobInfo?: {
    createTime?: string(name='CreateTime', description='创建时间'),
    description?: string(name='Description', description='任务描述'),
    inputConfig?: {
      inputFile?: string(name='InputFile', description='OSS地址 或 内容库素材ID'),
    }(name='InputConfig', description='输入参数'),
    jobType?: string(name='JobType', description='任务类型'),
    modifiedTime?: string(name='ModifiedTime', description='修改时间'),
    outputConfig?: {
      bucket?: string(name='Bucket', description='OSS Bucket'),
      object?: string(name='Object', description='OSS Object'),
    }(name='OutputConfig', description='输出配置'),
    title?: string(name='Title', description='任务标题'),
    userId?: string(name='UserId', description='userid'),
  }(name='SmartJobInfo', description='智能任务信息'),
  state?: string(name='State', description='任务状态'),
  userData?: string(name='UserData', description='用户自定义信息'),
}

model GetSmartHandleJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetSmartHandleJobResponseBody(name='body'),
}

async function getSmartHandleJobWithOptions(request: GetSmartHandleJobRequest, runtime: Util.RuntimeOptions): GetSmartHandleJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSmartHandleJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSmartHandleJob(request: GetSmartHandleJobRequest): GetSmartHandleJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSmartHandleJobWithOptions(request, runtime);
}

model GetTemplateRequest {
  relatedMediaidFlag?: string(name='RelatedMediaidFlag', description='是否返回模板关联素材，1返回，默认0，不返回'),
  templateId?: string(name='TemplateId', description='模板Id'),
}

model GetTemplateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  template?: {
    clipsParam?: string(name='ClipsParam', description='提交合成任务的ClipsParam参数'),
    config?: string(name='Config', description='模板配置'),
    coverURL?: string(name='CoverURL', description='封面URL'),
    createSource?: string(name='CreateSource', description='创建来源'),
    creationTime?: string(name='CreationTime', description='创建时间'),
    modifiedSource?: string(name='ModifiedSource', description='修改来源'),
    modifiedTime?: string(name='ModifiedTime', description='修改时间'),
    name?: string(name='Name', description='模板名称'),
    previewMedia?: string(name='PreviewMedia', description='预览素材'),
    previewMediaStatus?: string(name='PreviewMediaStatus', description='预览素材状态'),
    relatedMediaids?: string(name='RelatedMediaids', description='模板关联素材'),
    status?: string(name='Status', description='模板状态'),
    templateId?: string(name='TemplateId', description='模板ID'),
    type?: string(name='Type', description='模板类型'),
  }(name='Template'),
}

model GetTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetTemplateResponseBody(name='body'),
}

async function getTemplateWithOptions(request: GetTemplateRequest, runtime: Util.RuntimeOptions): GetTemplateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTemplate',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTemplate(request: GetTemplateRequest): GetTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTemplateWithOptions(request, runtime);
}

model GetTemplateMaterialsRequest {
  fileList?: string(name='FileList', description='所需文件列表'),
  templateId?: string(name='TemplateId', description='模板Id'),
}

model GetTemplateMaterialsResponseBody = {
  materialUrls?: string(name='MaterialUrls', description='关联素材地址'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetTemplateMaterialsResponse = {
  headers: map[string]string(name='headers'),
  body: GetTemplateMaterialsResponseBody(name='body'),
}

async function getTemplateMaterialsWithOptions(request: GetTemplateMaterialsRequest, runtime: Util.RuntimeOptions): GetTemplateMaterialsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTemplateMaterials',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTemplateMaterials(request: GetTemplateMaterialsRequest): GetTemplateMaterialsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTemplateMaterialsWithOptions(request, runtime);
}

model ListAllPublicMediaTagsRequest {
  businessType?: string(name='BusinessType', description='媒资业务类型'),
  entityId?: string(name='EntityId'),
}

model ListAllPublicMediaTagsResponseBody = {
  mediaTagList?: [ 
    {
      mediaTagId?: string(name='MediaTagId', description='素材标签id'),
      mediaTagNameChinese?: string(name='MediaTagNameChinese', description='素材标签中文名'),
      mediaTagNameEnglish?: string(name='MediaTagNameEnglish', description='素材标签英文名'),
      options?: [ 
        {
          optionChineseName?: string(name='OptionChineseName'),
          optionEnglishName?: string(name='OptionEnglishName'),
          optionId?: string(name='OptionId'),
        }
      ](name='Options'),
    }
  ](name='MediaTagList', description='公共素材库标签列表'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ListAllPublicMediaTagsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAllPublicMediaTagsResponseBody(name='body'),
}

async function listAllPublicMediaTagsWithOptions(request: ListAllPublicMediaTagsRequest, runtime: Util.RuntimeOptions): ListAllPublicMediaTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.entityId)) {
    query['EntityId'] = request.entityId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAllPublicMediaTags',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAllPublicMediaTags(request: ListAllPublicMediaTagsRequest): ListAllPublicMediaTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAllPublicMediaTagsWithOptions(request, runtime);
}

model ListMediaBasicInfosRequest {
  businessType?: string(name='BusinessType', description='媒资业务类型'),
  category?: string(name='Category', description='分类'),
  endTime?: string(name='EndTime', description='结束时间'),
  includeFileBasicInfo?: boolean(name='IncludeFileBasicInfo', description='返回值中是否包含文件基础信息'),
  maxResults?: int32(name='MaxResults', description='分页大小'),
  mediaType?: string(name='MediaType', description='媒资媒体类型'),
  nextToken?: string(name='NextToken', description='页号'),
  sortBy?: string(name='SortBy', description='排序'),
  source?: string(name='Source', description='来源'),
  startTime?: string(name='StartTime', description='创建时间'),
  status?: string(name='Status', description='资源状态'),
}

model ListMediaBasicInfosResponseBody = {
  maxResults?: int32(name='MaxResults'),
  mediaInfos?: [ 
    {
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', description='码率'),
            duration?: string(name='Duration', description='时长'),
            fileName?: string(name='FileName', description='文件名'),
            fileSize?: string(name='FileSize', description='文件大小（字节）'),
            fileStatus?: string(name='FileStatus', description='文件状态'),
            fileType?: string(name='FileType', description='文件类型'),
            fileUrl?: string(name='FileUrl', description='文件oss地址'),
            formatName?: string(name='FormatName', description='封装格式'),
            height?: string(name='Height', description='高'),
            region?: string(name='Region', description='文件存储区域'),
            width?: string(name='Width', description='宽'),
          }(name='FileBasicInfo', description='文件基础信息，包含时长，大小等'),
        }
      ](name='FileInfoList', description='FileInfos'),
      mediaBasicInfo?: {
        businessType?: string(name='BusinessType', description='媒资业务类型'),
        category?: string(name='Category', description='分类'),
        coverURL?: string(name='CoverURL', description='封面地址'),
        createTime?: string(name='CreateTime', description='媒资创建时间'),
        deletedTime?: string(name='DeletedTime', description='媒资删除时间'),
        description?: string(name='Description', description='内容描述'),
        inputURL?: string(name='InputURL', description='待注册的媒资在相应系统中的地址'),
        mediaId?: string(name='MediaId', description='MediaId'),
        mediaTags?: string(name='MediaTags', description='标签'),
        mediaType?: string(name='MediaType', description='媒资媒体类型'),
        modifiedTime?: string(name='ModifiedTime', description='媒资修改时间'),
        snapshots?: string(name='Snapshots', description='截图'),
        source?: string(name='Source', description='来源'),
        spriteImages?: string(name='SpriteImages', description='雪碧图'),
        status?: string(name='Status', description='资源状态'),
        title?: string(name='Title', description='标题'),
        transcodeStatus?: string(name='TranscodeStatus', description='转码状态'),
        userData?: string(name='UserData', description='用户数据'),
      }(name='MediaBasicInfo', description='BasicInfo'),
      mediaId?: string(name='MediaId', description='媒资ID'),
    }
  ](name='MediaInfos', description='符合要求的媒资集合'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: long(name='TotalCount', description='符合要求的媒资总数'),
}

model ListMediaBasicInfosResponse = {
  headers: map[string]string(name='headers'),
  body: ListMediaBasicInfosResponseBody(name='body'),
}

async function listMediaBasicInfosWithOptions(request: ListMediaBasicInfosRequest, runtime: Util.RuntimeOptions): ListMediaBasicInfosResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.includeFileBasicInfo)) {
    query['IncludeFileBasicInfo'] = request.includeFileBasicInfo;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.mediaType)) {
    query['MediaType'] = request.mediaType;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMediaBasicInfos',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMediaBasicInfos(request: ListMediaBasicInfosRequest): ListMediaBasicInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMediaBasicInfosWithOptions(request, runtime);
}

model ListMediaProducingJobsRequest {
  status?: string(name='Status', description='查询以下状态的合成任务，支持多值，以英文逗号分隔'),
}

model ListMediaProducingJobsResponseBody = {
  mediaProducingJobList?: [ 
    {
      clipsParam?: string(name='ClipsParam'),
      code?: string(name='Code'),
      completeTime?: string(name='CompleteTime'),
      createTime?: string(name='CreateTime'),
      duration?: float(name='Duration'),
      jobId?: string(name='JobId'),
      mediaId?: string(name='MediaId'),
      mediaURL?: string(name='MediaURL'),
      message?: string(name='Message'),
      modifiedTime?: string(name='ModifiedTime'),
      projectId?: string(name='ProjectId'),
      status?: string(name='Status'),
      templateId?: string(name='TemplateId'),
    }
  ](name='MediaProducingJobList'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ListMediaProducingJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListMediaProducingJobsResponseBody(name='body'),
}

async function listMediaProducingJobsWithOptions(request: ListMediaProducingJobsRequest, runtime: Util.RuntimeOptions): ListMediaProducingJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMediaProducingJobs',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMediaProducingJobs(request: ListMediaProducingJobsRequest): ListMediaProducingJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMediaProducingJobsWithOptions(request, runtime);
}

model ListPublicMediaBasicInfosRequest {
  includeFileBasicInfo?: boolean(name='IncludeFileBasicInfo', description='返回值中是否包含文件基础信息'),
  maxResults?: int32(name='MaxResults', description='分页大小'),
  mediaTagId?: string(name='MediaTagId', description='标签'),
  nextToken?: string(name='NextToken', description='下一次读取的位置'),
}

model ListPublicMediaBasicInfosResponseBody = {
  maxResults?: int32(name='MaxResults'),
  mediaInfos?: [ 
    {
      fileInfoList?: [ 
        {
          fileBasicInfo?: {
            bitrate?: string(name='Bitrate', description='码率'),
            duration?: string(name='Duration', description='时长'),
            fileName?: string(name='FileName', description='文件名'),
            fileSize?: string(name='FileSize', description='文件大小（字节）'),
            fileStatus?: string(name='FileStatus', description='文件状态'),
            fileType?: string(name='FileType', description='文件类型'),
            fileUrl?: string(name='FileUrl', description='文件oss地址'),
            formatName?: string(name='FormatName', description='封装格式'),
            height?: string(name='Height', description='高'),
            region?: string(name='Region', description='文件存储区域'),
            width?: string(name='Width', description='宽'),
          }(name='FileBasicInfo', description='文件基础信息，包含时长，大小等'),
        }
      ](name='FileInfoList', description='FileInfos'),
      mediaBasicInfo?: {
        businessType?: string(name='BusinessType', description='媒资业务类型'),
        category?: string(name='Category', description='分类'),
        coverURL?: string(name='CoverURL', description='封面地址'),
        createTime?: string(name='CreateTime', description='媒资创建时间'),
        deletedTime?: string(name='DeletedTime', description='媒资删除时间'),
        description?: string(name='Description', description='内容描述'),
        inputURL?: string(name='InputURL', description='待注册的媒资在相应系统中的地址'),
        mediaId?: string(name='MediaId', description='MediaId'),
        mediaTags?: string(name='MediaTags', description='标签'),
        mediaType?: string(name='MediaType', description='媒资媒体类型'),
        modifiedTime?: string(name='ModifiedTime', description='媒资修改时间'),
        snapshots?: string(name='Snapshots', description='截图'),
        source?: string(name='Source', description='来源'),
        status?: string(name='Status', description='资源状态'),
        title?: string(name='Title', description='标题'),
        transcodeStatus?: string(name='TranscodeStatus', description='转码状态'),
        userData?: string(name='UserData', description='用户数据'),
      }(name='MediaBasicInfo', description='BasicInfo'),
      mediaId?: string(name='MediaId', description='媒资ID'),
    }
  ](name='MediaInfos', description='符合要求的媒资集合'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: long(name='TotalCount', description='符合要求的媒资总数'),
}

model ListPublicMediaBasicInfosResponse = {
  headers: map[string]string(name='headers'),
  body: ListPublicMediaBasicInfosResponseBody(name='body'),
}

async function listPublicMediaBasicInfosWithOptions(request: ListPublicMediaBasicInfosRequest, runtime: Util.RuntimeOptions): ListPublicMediaBasicInfosResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.includeFileBasicInfo)) {
    query['IncludeFileBasicInfo'] = request.includeFileBasicInfo;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.mediaTagId)) {
    query['MediaTagId'] = request.mediaTagId;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPublicMediaBasicInfos',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPublicMediaBasicInfos(request: ListPublicMediaBasicInfosRequest): ListPublicMediaBasicInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPublicMediaBasicInfosWithOptions(request, runtime);
}

model ListSmartJobsRequest {
  jobState?: string(name='JobState'),
  jobType?: string(name='JobType'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
  sortBy?: string(name='SortBy'),
  status?: long(name='Status'),
}

model ListSmartJobsResponseBody = {
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', description='Id of the request'),
  smartJobList?: [ 
    {
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      editingConfig?: string(name='EditingConfig'),
      inputConfig?: {
        inputFile?: string(name='InputFile'),
        keyword?: string(name='Keyword'),
      }(name='InputConfig'),
      jobId?: string(name='JobId'),
      jobState?: string(name='JobState'),
      jobType?: string(name='JobType'),
      modifiedTime?: string(name='ModifiedTime'),
      outputConfig?: {
        bucket?: string(name='Bucket'),
        object?: string(name='Object'),
      }(name='OutputConfig'),
      title?: string(name='Title'),
      userData?: string(name='UserData'),
      userId?: long(name='UserId'),
    }
  ](name='SmartJobList'),
  totalCount?: string(name='TotalCount'),
}

model ListSmartJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSmartJobsResponseBody(name='body'),
}

async function listSmartJobsWithOptions(request: ListSmartJobsRequest, runtime: Util.RuntimeOptions): ListSmartJobsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSmartJobs',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSmartJobs(request: ListSmartJobsRequest): ListSmartJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSmartJobsWithOptions(request, runtime);
}

model ListSysTemplatesRequest {
  maxResults?: int32(name='MaxResults', description='本次读取的最大数据记录数量'),
  nextToken?: string(name='NextToken', description='标记当前开始读取的位置，置空表示从头开始'),
  type?: string(name='Type'),
}

model ListSysTemplatesResponseBody = {
  maxResults?: int32(name='MaxResults', description='MaxResults本次请求所返回的最大记录条数'),
  nextToken?: string(name='NextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  requestId?: string(name='RequestId', description='Id of the request'),
  templates?: [ 
    {
      config?: string(name='Config'),
      name?: string(name='Name'),
      templateId?: string(name='TemplateId'),
      type?: string(name='Type'),
    }
  ](name='Templates'),
  totalCount?: int32(name='TotalCount', description='TotalCount本次请求条件下的数据总量，此参数为可选参数，默认可不返回'),
}

model ListSysTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSysTemplatesResponseBody(name='body'),
}

async function listSysTemplatesWithOptions(request: ListSysTemplatesRequest, runtime: Util.RuntimeOptions): ListSysTemplatesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSysTemplates',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSysTemplates(request: ListSysTemplatesRequest): ListSysTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSysTemplatesWithOptions(request, runtime);
}

model ListTemplatesRequest {
  createSource?: string(name='CreateSource', description='创建来源'),
  keyword?: string(name='Keyword', description='搜索关键词，可以根据模板id和title搜索'),
  sortType?: string(name='SortType', description='排序参数，默认根据创建时间倒序'),
  status?: string(name='Status', description='模板状态'),
  type?: string(name='Type', description='模板类型'),
}

model ListTemplatesResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  templates?: [ 
    {
      clipsParam?: string(name='ClipsParam', description='ClipsParam'),
      config?: string(name='Config', description='模板配置'),
      coverURL?: string(name='CoverURL', description='封面URL'),
      createSource?: string(name='CreateSource', description='创建来源'),
      creationTime?: string(name='CreationTime', description='创建时间'),
      modifiedSource?: string(name='ModifiedSource', description='修改来源'),
      modifiedTime?: string(name='ModifiedTime', description='修改时间'),
      name?: string(name='Name', description='模板名称'),
      previewMedia?: string(name='PreviewMedia', description='预览素材'),
      previewMediaStatus?: string(name='PreviewMediaStatus', description='预览素材状态'),
      status?: string(name='Status', description='模板状态'),
      templateId?: string(name='TemplateId', description='模板ID'),
      type?: string(name='Type', description='模板类型'),
    }
  ](name='Templates'),
  totalCount?: int32(name='TotalCount', description='本次请求条件下的数据总量。'),
}

model ListTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTemplatesResponseBody(name='body'),
}

async function listTemplatesWithOptions(request: ListTemplatesRequest, runtime: Util.RuntimeOptions): ListTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.createSource)) {
    query['CreateSource'] = request.createSource;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.sortType)) {
    query['SortType'] = request.sortType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTemplates',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTemplates(request: ListTemplatesRequest): ListTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTemplatesWithOptions(request, runtime);
}

model RegisterMediaInfoRequest {
  businessType?: string(name='BusinessType', description='媒资业务类型'),
  category?: string(name='Category', description='分类'),
  clientToken?: string(name='ClientToken', description='客户端token'),
  coverURL?: string(name='CoverURL', description='封面图，仅视频媒资有效'),
  description?: string(name='Description', description='描述'),
  dynamicMetaDataList?: string(name='DynamicMetaDataList', description='用户自定义元数据'),
  inputURL?: string(name='InputURL', description='媒资媒体url'),
  mediaTags?: string(name='MediaTags', description='标签,如果有多个标签用逗号隔开'),
  mediaType?: string(name='MediaType', description='媒资媒体类型'),
  overwrite?: boolean(name='Overwrite', description='是否覆盖已有媒资'),
  registerConfig?: string(name='RegisterConfig', description='注册媒资的配置'),
  title?: string(name='Title', description='标题'),
  userData?: string(name='UserData', description='用户数据，最大1024字节'),
}

model RegisterMediaInfoResponseBody = {
  mediaId?: string(name='MediaId', description='ICE媒资ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model RegisterMediaInfoResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterMediaInfoResponseBody(name='body'),
}

async function registerMediaInfoWithOptions(request: RegisterMediaInfoRequest, runtime: Util.RuntimeOptions): RegisterMediaInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.coverURL)) {
    query['CoverURL'] = request.coverURL;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dynamicMetaDataList)) {
    query['DynamicMetaDataList'] = request.dynamicMetaDataList;
  }
  if (!Util.isUnset(request.inputURL)) {
    query['InputURL'] = request.inputURL;
  }
  if (!Util.isUnset(request.mediaTags)) {
    query['MediaTags'] = request.mediaTags;
  }
  if (!Util.isUnset(request.mediaType)) {
    query['MediaType'] = request.mediaType;
  }
  if (!Util.isUnset(request.overwrite)) {
    query['Overwrite'] = request.overwrite;
  }
  if (!Util.isUnset(request.registerConfig)) {
    query['RegisterConfig'] = request.registerConfig;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RegisterMediaInfo',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function registerMediaInfo(request: RegisterMediaInfoRequest): RegisterMediaInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerMediaInfoWithOptions(request, runtime);
}

model SearchEditingProjectRequest {
  createSource?: string(name='CreateSource', description='创建来源'),
  endTime?: string(name='EndTime', description='CreationTime（创建时间）的结束时间'),
  maxResults?: long(name='MaxResults', description='分页参数'),
  nextToken?: string(name='NextToken', description='分页参数'),
  projectType?: string(name='ProjectType'),
  sortBy?: string(name='SortBy', description='结果排序方式'),
  startTime?: string(name='StartTime', description='CreateTime（创建时间）的开始时间'),
  status?: string(name='Status', description='云剪辑工程状态。多个用逗号分隔'),
  templateType?: string(name='TemplateType', description='模板类型'),
}

model SearchEditingProjectResponseBody = {
  maxResults?: long(name='MaxResults', description='云剪辑工程总数'),
  nextToken?: string(name='NextToken'),
  projectList?: [ 
    {
      businessConfig?: string(name='BusinessConfig'),
      businessStatus?: string(name='BusinessStatus'),
      coverURL?: string(name='CoverURL', description='云剪辑工程封面'),
      createSource?: string(name='CreateSource', description='创建来源'),
      createTime?: string(name='CreateTime', description='云剪辑工程创建时间'),
      description?: string(name='Description', description='云剪辑工程描述'),
      duration?: long(name='Duration', description='云剪辑工程总时长'),
      errorCode?: string(name='ErrorCode', description='云剪辑工程合成失败的错误码'),
      errorMessage?: string(name='ErrorMessage', description='云剪辑工程合成失败的消息'),
      modifiedSource?: string(name='ModifiedSource', description='最后一次修改来源'),
      modifiedTime?: string(name='ModifiedTime', description='云剪辑工程最新修改时间'),
      projectId?: string(name='ProjectId', description='云剪辑工程ID'),
      projectType?: string(name='ProjectType'),
      status?: string(name='Status', description='云剪辑工程状态'),
      templateType?: string(name='TemplateType', description='模板类型'),
      timeline?: string(name='Timeline', description='云剪辑工程时间线'),
      title?: string(name='Title', description='云剪辑工程标题'),
    }
  ](name='ProjectList', description='云剪辑工程列表'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: long(name='TotalCount'),
}

model SearchEditingProjectResponse = {
  headers: map[string]string(name='headers'),
  body: SearchEditingProjectResponseBody(name='body'),
}

async function searchEditingProjectWithOptions(request: SearchEditingProjectRequest, runtime: Util.RuntimeOptions): SearchEditingProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.createSource)) {
    query['CreateSource'] = request.createSource;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.projectType)) {
    query['ProjectType'] = request.projectType;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchEditingProject',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchEditingProject(request: SearchEditingProjectRequest): SearchEditingProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchEditingProjectWithOptions(request, runtime);
}

model SearchPublicMediaInfoRequest {
  authorized?: boolean(name='Authorized'),
  dynamicMetaDataMatchFields?: string(name='DynamicMetaDataMatchFields'),
  entityId?: string(name='EntityId'),
  favorite?: boolean(name='Favorite'),
  mediaIds?: string(name='MediaIds'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  sortBy?: string(name='SortBy'),
}

model SearchPublicMediaInfoResponseBody = {
  publicMediaInfos?: [ 
    {
      authorized?: boolean(name='Authorized'),
      favorite?: boolean(name='Favorite'),
      mediaInfo?: {
        dynamicMetaData?: {
          data?: string(name='Data'),
          type?: string(name='Type'),
        }(name='DynamicMetaData'),
        mediaBasicInfo?: {
          businessType?: string(name='BusinessType', description='媒资业务类型'),
          category?: string(name='Category', description='分类'),
          coverURL?: string(name='CoverURL', description='封面地址'),
          createTime?: string(name='CreateTime', description='媒资创建时间'),
          deletedTime?: string(name='DeletedTime', description='媒资删除时间'),
          description?: string(name='Description', description='内容描述'),
          mediaId?: string(name='MediaId', description='MediaId'),
          mediaTags?: string(name='MediaTags', description='标签'),
          mediaType?: string(name='MediaType', description='媒资媒体类型'),
          modifiedTime?: string(name='ModifiedTime', description='媒资修改时间'),
          source?: string(name='Source', description='来源'),
          spriteImages?: string(name='SpriteImages', description='雪碧图'),
          status?: string(name='Status', description='资源状态'),
          title?: string(name='Title', description='标题'),
          userData?: string(name='UserData', description='用户数据'),
        }(name='MediaBasicInfo', description='BasicInfo'),
        mediaId?: string(name='MediaId', description='媒资ID'),
      }(name='MediaInfo'),
      remainingAuthTime?: string(name='RemainingAuthTime'),
    }
  ](name='PublicMediaInfos'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: long(name='TotalCount'),
}

model SearchPublicMediaInfoResponse = {
  headers: map[string]string(name='headers'),
  body: SearchPublicMediaInfoResponseBody(name='body'),
}

async function searchPublicMediaInfoWithOptions(request: SearchPublicMediaInfoRequest, runtime: Util.RuntimeOptions): SearchPublicMediaInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorized)) {
    query['Authorized'] = request.authorized;
  }
  if (!Util.isUnset(request.dynamicMetaDataMatchFields)) {
    query['DynamicMetaDataMatchFields'] = request.dynamicMetaDataMatchFields;
  }
  if (!Util.isUnset(request.entityId)) {
    query['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.favorite)) {
    query['Favorite'] = request.favorite;
  }
  if (!Util.isUnset(request.mediaIds)) {
    query['MediaIds'] = request.mediaIds;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchPublicMediaInfo',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchPublicMediaInfo(request: SearchPublicMediaInfoRequest): SearchPublicMediaInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchPublicMediaInfoWithOptions(request, runtime);
}

model SetDefaultStorageLocationRequest {
  bucket?: string(name='Bucket'),
  path?: string(name='Path'),
  storageType?: string(name='StorageType'),
}

model SetDefaultStorageLocationResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model SetDefaultStorageLocationResponse = {
  headers: map[string]string(name='headers'),
  body: SetDefaultStorageLocationResponseBody(name='body'),
}

async function setDefaultStorageLocationWithOptions(request: SetDefaultStorageLocationRequest, runtime: Util.RuntimeOptions): SetDefaultStorageLocationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bucket)) {
    query['Bucket'] = request.bucket;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  if (!Util.isUnset(request.storageType)) {
    query['StorageType'] = request.storageType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDefaultStorageLocation',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDefaultStorageLocation(request: SetDefaultStorageLocationRequest): SetDefaultStorageLocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDefaultStorageLocationWithOptions(request, runtime);
}

model SetEventCallbackRequest {
  callbackQueueName?: string(name='CallbackQueueName'),
  eventTypeList?: string(name='EventTypeList'),
}

model SetEventCallbackResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success', description='是否设置成功'),
}

model SetEventCallbackResponse = {
  headers: map[string]string(name='headers'),
  body: SetEventCallbackResponseBody(name='body'),
}

async function setEventCallbackWithOptions(request: SetEventCallbackRequest, runtime: Util.RuntimeOptions): SetEventCallbackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.callbackQueueName)) {
    query['CallbackQueueName'] = request.callbackQueueName;
  }
  if (!Util.isUnset(request.eventTypeList)) {
    query['EventTypeList'] = request.eventTypeList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetEventCallback',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setEventCallback(request: SetEventCallbackRequest): SetEventCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return setEventCallbackWithOptions(request, runtime);
}

model SubmitASRJobRequest {
  description?: string(name='Description', description='任务描述'),
  duration?: string(name='Duration', description='持续时间'),
  inputFile?: string(name='InputFile', description='输入配置，支持OSS地址和内容库素材ID'),
  startTime?: string(name='StartTime', description='开始时间'),
  title?: string(name='Title', description='任务标题'),
  userData?: string(name='UserData', description='自定义设置，为JSON字符串'),
}

model SubmitASRJobResponseBody = {
  jobId?: string(name='JobId', description='智能任务Id'),
  requestId?: string(name='RequestId', description='请求Id'),
  state?: string(name='State', description='任务状态'),
}

model SubmitASRJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitASRJobResponseBody(name='body'),
}

async function submitASRJobWithOptions(request: SubmitASRJobRequest, runtime: Util.RuntimeOptions): SubmitASRJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.inputFile)) {
    query['InputFile'] = request.inputFile;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitASRJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitASRJob(request: SubmitASRJobRequest): SubmitASRJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitASRJobWithOptions(request, runtime);
}

model SubmitAudioProduceJobRequest {
  description?: string(name='Description', description='任务描述'),
  editingConfig?: string(name='EditingConfig', description='音频生产配置'),
  inputConfig?: string(name='InputConfig', description='文本内容。  最大支持300个汉字'),
  outputConfig?: string(name='OutputConfig', description='音频输出配置'),
  overwrite?: boolean(name='Overwrite', description='是否覆盖现有OSS文件'),
  title?: string(name='Title', description='任务标题'),
  userData?: string(name='UserData', description='自定义数据'),
}

model SubmitAudioProduceJobResponseBody = {
  jobId?: string(name='JobId', description='任务ID'),
  requestId?: string(name='RequestId', description='请求Id'),
  state?: string(name='State', description='任务状态'),
}

model SubmitAudioProduceJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitAudioProduceJobResponseBody(name='body'),
}

async function submitAudioProduceJobWithOptions(request: SubmitAudioProduceJobRequest, runtime: Util.RuntimeOptions): SubmitAudioProduceJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.editingConfig)) {
    query['EditingConfig'] = request.editingConfig;
  }
  if (!Util.isUnset(request.inputConfig)) {
    query['InputConfig'] = request.inputConfig;
  }
  if (!Util.isUnset(request.outputConfig)) {
    query['OutputConfig'] = request.outputConfig;
  }
  if (!Util.isUnset(request.overwrite)) {
    query['Overwrite'] = request.overwrite;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitAudioProduceJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitAudioProduceJob(request: SubmitAudioProduceJobRequest): SubmitAudioProduceJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitAudioProduceJobWithOptions(request, runtime);
}

model SubmitDelogoJobRequest {
  description?: string(name='Description'),
  inputFile?: string(name='InputFile', description='输入文件'),
  inputType?: string(name='InputType', description='输入文件类型'),
  outputConfig?: string(name='OutputConfig', description='输出bucket'),
  outputMediaTarget?: string(name='OutputMediaTarget', description='输出类型'),
  overwrite?: boolean(name='Overwrite', description='是否强制覆盖现有OSS文件'),
  title?: string(name='Title'),
  userData?: string(name='UserData'),
}

model SubmitDelogoJobResponseBody = {
  jobId?: string(name='JobId'),
  output?: string(name='Output'),
  requestId?: string(name='RequestId', description='Id of the request'),
  state?: string(name='State'),
  userData?: string(name='UserData'),
}

model SubmitDelogoJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitDelogoJobResponseBody(name='body'),
}

async function submitDelogoJobWithOptions(request: SubmitDelogoJobRequest, runtime: Util.RuntimeOptions): SubmitDelogoJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.inputFile)) {
    query['InputFile'] = request.inputFile;
  }
  if (!Util.isUnset(request.inputType)) {
    query['InputType'] = request.inputType;
  }
  if (!Util.isUnset(request.outputConfig)) {
    query['OutputConfig'] = request.outputConfig;
  }
  if (!Util.isUnset(request.outputMediaTarget)) {
    query['OutputMediaTarget'] = request.outputMediaTarget;
  }
  if (!Util.isUnset(request.overwrite)) {
    query['Overwrite'] = request.overwrite;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitDelogoJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitDelogoJob(request: SubmitDelogoJobRequest): SubmitDelogoJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitDelogoJobWithOptions(request, runtime);
}

model SubmitDynamicChartJobRequest {
  axisParams?: string(name='AxisParams', description='坐标样式。XAxisFontInterval不传或为0则算法自动计算间距'),
  background?: string(name='Background', description='图表背景'),
  chartConfig?: string(name='ChartConfig', description='图表配置'),
  chartTitle?: string(name='ChartTitle', description='主标题'),
  chartType?: string(name='ChartType', description='图表类型'),
  dataSource?: string(name='DataSource', description='数据来源'),
  description?: string(name='Description', description='任务描述'),
  input?: string(name='Input', description='图表输入数据'),
  outputConfig?: string(name='OutputConfig', description='输出设置'),
  subtitle?: string(name='Subtitle', description='副标题'),
  title?: string(name='Title', description='任务标题'),
  unit?: string(name='Unit', description='单位'),
  userData?: string(name='UserData', description='自定义数据，JSON格式'),
}

model SubmitDynamicChartJobResponseBody = {
  jobId?: string(name='JobId', description='任务Id'),
  requestId?: string(name='RequestId', description='请求Id'),
}

model SubmitDynamicChartJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitDynamicChartJobResponseBody(name='body'),
}

async function submitDynamicChartJobWithOptions(request: SubmitDynamicChartJobRequest, runtime: Util.RuntimeOptions): SubmitDynamicChartJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.axisParams)) {
    query['AxisParams'] = request.axisParams;
  }
  if (!Util.isUnset(request.background)) {
    query['Background'] = request.background;
  }
  if (!Util.isUnset(request.chartConfig)) {
    query['ChartConfig'] = request.chartConfig;
  }
  if (!Util.isUnset(request.chartTitle)) {
    query['ChartTitle'] = request.chartTitle;
  }
  if (!Util.isUnset(request.chartType)) {
    query['ChartType'] = request.chartType;
  }
  if (!Util.isUnset(request.dataSource)) {
    query['DataSource'] = request.dataSource;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.input)) {
    query['Input'] = request.input;
  }
  if (!Util.isUnset(request.outputConfig)) {
    query['OutputConfig'] = request.outputConfig;
  }
  if (!Util.isUnset(request.subtitle)) {
    query['Subtitle'] = request.subtitle;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  if (!Util.isUnset(request.unit)) {
    query['Unit'] = request.unit;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitDynamicChartJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitDynamicChartJob(request: SubmitDynamicChartJobRequest): SubmitDynamicChartJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitDynamicChartJobWithOptions(request, runtime);
}

model SubmitH2VJobRequest {
  description?: string(name='Description'),
  inputFile?: string(name='InputFile', description='输入文件'),
  inputType?: string(name='InputType', description='输入文件类型'),
  outputConfig?: string(name='OutputConfig', description='输出bucket'),
  outputMediaTarget?: string(name='OutputMediaTarget', description='输出类型'),
  overwrite?: boolean(name='Overwrite', description='是否强制覆盖现有OSS文件'),
  title?: string(name='Title'),
  userData?: string(name='UserData'),
}

model SubmitH2VJobResponseBody = {
  jobId?: string(name='JobId'),
  output?: string(name='Output'),
  requestId?: string(name='RequestId', description='Id of the request'),
  state?: string(name='State'),
  userData?: string(name='UserData'),
}

model SubmitH2VJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitH2VJobResponseBody(name='body'),
}

async function submitH2VJobWithOptions(request: SubmitH2VJobRequest, runtime: Util.RuntimeOptions): SubmitH2VJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.inputFile)) {
    query['InputFile'] = request.inputFile;
  }
  if (!Util.isUnset(request.inputType)) {
    query['InputType'] = request.inputType;
  }
  if (!Util.isUnset(request.outputConfig)) {
    query['OutputConfig'] = request.outputConfig;
  }
  if (!Util.isUnset(request.outputMediaTarget)) {
    query['OutputMediaTarget'] = request.outputMediaTarget;
  }
  if (!Util.isUnset(request.overwrite)) {
    query['Overwrite'] = request.overwrite;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitH2VJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitH2VJob(request: SubmitH2VJobRequest): SubmitH2VJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitH2VJobWithOptions(request, runtime);
}

model SubmitKeyWordCutJobRequest {
  description?: string(name='Description'),
  inputFile?: string(name='InputFile'),
  keyword?: string(name='Keyword'),
  title?: string(name='Title'),
  userData?: string(name='UserData'),
}

model SubmitKeyWordCutJobResponseBody = {
  jobId?: string(name='JobId'),
  output?: string(name='Output'),
  requestId?: string(name='RequestId', description='Id of the request'),
  state?: string(name='State'),
  userData?: string(name='UserData'),
}

model SubmitKeyWordCutJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitKeyWordCutJobResponseBody(name='body'),
}

async function submitKeyWordCutJobWithOptions(request: SubmitKeyWordCutJobRequest, runtime: Util.RuntimeOptions): SubmitKeyWordCutJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitKeyWordCutJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitKeyWordCutJob(request: SubmitKeyWordCutJobRequest): SubmitKeyWordCutJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitKeyWordCutJobWithOptions(request, runtime);
}

model SubmitLiveEditingJobRequest {
  clips?: string(name='Clips'),
  liveStreamConfig?: string(name='LiveStreamConfig'),
  mediaProduceConfig?: string(name='MediaProduceConfig'),
  outputMediaConfig?: string(name='OutputMediaConfig'),
  outputMediaTarget?: string(name='OutputMediaTarget'),
  projectId?: string(name='ProjectId'),
  userData?: string(name='UserData'),
}

model SubmitLiveEditingJobResponseBody = {
  jobId?: string(name='JobId'),
  mediaId?: string(name='MediaId'),
  mediaURL?: string(name='MediaURL'),
  projectId?: string(name='ProjectId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model SubmitLiveEditingJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitLiveEditingJobResponseBody(name='body'),
}

async function submitLiveEditingJobWithOptions(request: SubmitLiveEditingJobRequest, runtime: Util.RuntimeOptions): SubmitLiveEditingJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clips)) {
    query['Clips'] = request.clips;
  }
  if (!Util.isUnset(request.liveStreamConfig)) {
    query['LiveStreamConfig'] = request.liveStreamConfig;
  }
  if (!Util.isUnset(request.mediaProduceConfig)) {
    query['MediaProduceConfig'] = request.mediaProduceConfig;
  }
  if (!Util.isUnset(request.outputMediaConfig)) {
    query['OutputMediaConfig'] = request.outputMediaConfig;
  }
  if (!Util.isUnset(request.outputMediaTarget)) {
    query['OutputMediaTarget'] = request.outputMediaTarget;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitLiveEditingJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitLiveEditingJob(request: SubmitLiveEditingJobRequest): SubmitLiveEditingJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitLiveEditingJobWithOptions(request, runtime);
}

model SubmitMattingJobRequest {
  description?: string(name='Description'),
  inputFile?: string(name='InputFile', description='输入文件'),
  inputType?: string(name='InputType', description='输入文件类型'),
  outputConfig?: string(name='OutputConfig', description='输出bucket'),
  outputMediaTarget?: string(name='OutputMediaTarget', description='输出类型'),
  overwrite?: string(name='Overwrite', description='是否强制覆盖现有OSS文件'),
  title?: string(name='Title'),
  userData?: string(name='UserData'),
}

model SubmitMattingJobResponseBody = {
  jobId?: string(name='JobId'),
  output?: string(name='Output'),
  requestId?: string(name='RequestId', description='Id of the request'),
  state?: string(name='State'),
  userData?: string(name='UserData'),
}

model SubmitMattingJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitMattingJobResponseBody(name='body'),
}

async function submitMattingJobWithOptions(request: SubmitMattingJobRequest, runtime: Util.RuntimeOptions): SubmitMattingJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.inputFile)) {
    query['InputFile'] = request.inputFile;
  }
  if (!Util.isUnset(request.inputType)) {
    query['InputType'] = request.inputType;
  }
  if (!Util.isUnset(request.outputConfig)) {
    query['OutputConfig'] = request.outputConfig;
  }
  if (!Util.isUnset(request.outputMediaTarget)) {
    query['OutputMediaTarget'] = request.outputMediaTarget;
  }
  if (!Util.isUnset(request.overwrite)) {
    query['Overwrite'] = request.overwrite;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitMattingJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitMattingJob(request: SubmitMattingJobRequest): SubmitMattingJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitMattingJobWithOptions(request, runtime);
}

model SubmitMediaProducingJobRequest {
  clientToken?: string(name='ClientToken'),
  clipsParam?: string(name='ClipsParam'),
  editingProduceConfig?: string(name='EditingProduceConfig'),
  outputMediaConfig?: string(name='OutputMediaConfig'),
  outputMediaTarget?: string(name='OutputMediaTarget'),
  projectId?: string(name='ProjectId'),
  projectMetadata?: string(name='ProjectMetadata'),
  source?: string(name='Source'),
  templateId?: string(name='TemplateId'),
  timeline?: string(name='Timeline'),
  userData?: string(name='UserData'),
}

model SubmitMediaProducingJobResponseBody = {
  jobId?: string(name='JobId', description='合成作业Id'),
  mediaId?: string(name='MediaId', description='合成ICE媒资Id'),
  projectId?: string(name='ProjectId', description='剪辑工程Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
  vodMediaId?: string(name='VodMediaId', description='vod媒资id'),
}

model SubmitMediaProducingJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitMediaProducingJobResponseBody(name='body'),
}

async function submitMediaProducingJobWithOptions(request: SubmitMediaProducingJobRequest, runtime: Util.RuntimeOptions): SubmitMediaProducingJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.clipsParam)) {
    query['ClipsParam'] = request.clipsParam;
  }
  if (!Util.isUnset(request.editingProduceConfig)) {
    query['EditingProduceConfig'] = request.editingProduceConfig;
  }
  if (!Util.isUnset(request.outputMediaConfig)) {
    query['OutputMediaConfig'] = request.outputMediaConfig;
  }
  if (!Util.isUnset(request.outputMediaTarget)) {
    query['OutputMediaTarget'] = request.outputMediaTarget;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectMetadata)) {
    query['ProjectMetadata'] = request.projectMetadata;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.timeline)) {
    query['Timeline'] = request.timeline;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitMediaProducingJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitMediaProducingJob(request: SubmitMediaProducingJobRequest): SubmitMediaProducingJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitMediaProducingJobWithOptions(request, runtime);
}

model SubmitPPTCutJobRequest {
  description?: string(name='Description'),
  inputFile?: string(name='InputFile'),
  title?: string(name='Title'),
  userData?: string(name='UserData'),
}

model SubmitPPTCutJobResponseBody = {
  jobId?: string(name='JobId'),
  output?: string(name='Output'),
  requestId?: string(name='RequestId', description='Id of the request'),
  state?: string(name='State'),
  userData?: string(name='UserData'),
}

model SubmitPPTCutJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitPPTCutJobResponseBody(name='body'),
}

async function submitPPTCutJobWithOptions(request: SubmitPPTCutJobRequest, runtime: Util.RuntimeOptions): SubmitPPTCutJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitPPTCutJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitPPTCutJob(request: SubmitPPTCutJobRequest): SubmitPPTCutJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitPPTCutJobWithOptions(request, runtime);
}

model SubmitSubtitleProduceJobRequest {
  description?: string(name='Description'),
  editingConfig?: string(name='EditingConfig'),
  inputConfig?: string(name='InputConfig'),
  isAsync?: long(name='IsAsync'),
  outputConfig?: string(name='OutputConfig'),
  title?: string(name='Title'),
  type?: string(name='Type'),
  userData?: string(name='UserData'),
}

model SubmitSubtitleProduceJobResponseBody = {
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model SubmitSubtitleProduceJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitSubtitleProduceJobResponseBody(name='body'),
}

async function submitSubtitleProduceJobWithOptions(request: SubmitSubtitleProduceJobRequest, runtime: Util.RuntimeOptions): SubmitSubtitleProduceJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.editingConfig)) {
    query['EditingConfig'] = request.editingConfig;
  }
  if (!Util.isUnset(request.inputConfig)) {
    query['InputConfig'] = request.inputConfig;
  }
  if (!Util.isUnset(request.isAsync)) {
    query['IsAsync'] = request.isAsync;
  }
  if (!Util.isUnset(request.outputConfig)) {
    query['OutputConfig'] = request.outputConfig;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitSubtitleProduceJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitSubtitleProduceJob(request: SubmitSubtitleProduceJobRequest): SubmitSubtitleProduceJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSubtitleProduceJobWithOptions(request, runtime);
}

model UpdateEditingProjectRequest {
  businessStatus?: string(name='BusinessStatus'),
  clipsParam?: string(name='ClipsParam', description='模板对应的素材参数'),
  coverURL?: string(name='CoverURL', description='云剪辑工程封面'),
  description?: string(name='Description', description='云剪辑工程描述'),
  projectId?: string(name='ProjectId', description='云剪辑工程ID'),
  templateId?: string(name='TemplateId', description='模板Id'),
  timeline?: string(name='Timeline', description='云剪辑工程时间线，Json格式'),
  title?: string(name='Title', description='云剪辑工程标题'),
}

model UpdateEditingProjectResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateEditingProjectResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEditingProjectResponseBody(name='body'),
}

async function updateEditingProjectWithOptions(request: UpdateEditingProjectRequest, runtime: Util.RuntimeOptions): UpdateEditingProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessStatus)) {
    query['BusinessStatus'] = request.businessStatus;
  }
  if (!Util.isUnset(request.clipsParam)) {
    query['ClipsParam'] = request.clipsParam;
  }
  if (!Util.isUnset(request.coverURL)) {
    query['CoverURL'] = request.coverURL;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.timeline)) {
    query['Timeline'] = request.timeline;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEditingProject',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateEditingProject(request: UpdateEditingProjectRequest): UpdateEditingProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEditingProjectWithOptions(request, runtime);
}

model UpdateMediaInfoRequest {
  appendDynamicMeta?: boolean(name='AppendDynamicMeta', description='是否以append的形式更新DynamicMetaDataList字段'),
  appendTags?: boolean(name='AppendTags', description='是否以append的形式更新Tags字段'),
  businessType?: string(name='BusinessType', description='媒资业务类型'),
  category?: string(name='Category', description='分类'),
  coverURL?: string(name='CoverURL', description='封面图，仅视频媒资有效'),
  description?: string(name='Description', description='描述'),
  dynamicMetaDataList?: string(name='DynamicMetaDataList', description='用户自定义元数据'),
  inputURL?: string(name='InputURL', description='媒资媒体类型'),
  mediaId?: string(name='MediaId', description='媒资Id'),
  mediaTags?: string(name='MediaTags', description='标签,如果有多个标签用逗号隔开'),
  title?: string(name='Title', description='标题'),
  userData?: string(name='UserData', description='用户数据，最大1024字节'),
}

model UpdateMediaInfoResponseBody = {
  mediaId?: string(name='MediaId', description='ICE媒资ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model UpdateMediaInfoResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateMediaInfoResponseBody(name='body'),
}

async function updateMediaInfoWithOptions(request: UpdateMediaInfoRequest, runtime: Util.RuntimeOptions): UpdateMediaInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appendDynamicMeta)) {
    query['AppendDynamicMeta'] = request.appendDynamicMeta;
  }
  if (!Util.isUnset(request.appendTags)) {
    query['AppendTags'] = request.appendTags;
  }
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.coverURL)) {
    query['CoverURL'] = request.coverURL;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dynamicMetaDataList)) {
    query['DynamicMetaDataList'] = request.dynamicMetaDataList;
  }
  if (!Util.isUnset(request.inputURL)) {
    query['InputURL'] = request.inputURL;
  }
  if (!Util.isUnset(request.mediaId)) {
    query['MediaId'] = request.mediaId;
  }
  if (!Util.isUnset(request.mediaTags)) {
    query['MediaTags'] = request.mediaTags;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMediaInfo',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMediaInfo(request: UpdateMediaInfoRequest): UpdateMediaInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMediaInfoWithOptions(request, runtime);
}

model UpdateSmartJobRequest {
  FEExtend?: string(name='FEExtend'),
  jobId?: string(name='JobId'),
}

model UpdateSmartJobResponseBody = {
  FEExtend?: string(name='FEExtend'),
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateSmartJobResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSmartJobResponseBody(name='body'),
}

async function updateSmartJobWithOptions(request: UpdateSmartJobRequest, runtime: Util.RuntimeOptions): UpdateSmartJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.FEExtend)) {
    query['FEExtend'] = request.FEExtend;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSmartJob',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSmartJob(request: UpdateSmartJobRequest): UpdateSmartJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSmartJobWithOptions(request, runtime);
}

model UpdateTemplateRequest {
  config?: string(name='Config', description='参见模板Config文档'),
  coverUrl?: string(name='CoverUrl', description='模板封面'),
  name?: string(name='Name', description='模板名称'),
  previewMedia?: string(name='PreviewMedia', description='预览视频媒资id'),
  relatedMediaids?: string(name='RelatedMediaids', description='模板相关素材，模板编辑器使用'),
  source?: string(name='Source', description='修改来源，默认OpenAPI'),
  status?: string(name='Status', description='模板状态'),
  templateId?: string(name='TemplateId', description='模板ID'),
}

model UpdateTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model UpdateTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTemplateResponseBody(name='body'),
}

async function updateTemplateWithOptions(request: UpdateTemplateRequest, runtime: Util.RuntimeOptions): UpdateTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.coverUrl)) {
    query['CoverUrl'] = request.coverUrl;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.previewMedia)) {
    query['PreviewMedia'] = request.previewMedia;
  }
  if (!Util.isUnset(request.relatedMediaids)) {
    query['RelatedMediaids'] = request.relatedMediaids;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTemplate',
    version = '2020-11-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTemplate(request: UpdateTemplateRequest): UpdateTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTemplateWithOptions(request, runtime);
}

