/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'DianJin';
  @version = '2024-06-28';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateFinReportSummaryTaskRequest {
  workspaceId: string(name='workspaceId', example='llm-xxxxx', position='Path'),
  docId: string(name='docId', example='123', position='Body'),
  enableTable: boolean(name='enableTable', example='true', position='Body'),
  endPage?: int32(name='endPage', example='10', position='Body'),
  instruction?: string(name='instruction', position='Body'),
  libraryId: string(name='libraryId', example='3akzl28vap', position='Body'),
  modelId: string(name='modelId', example='qwen-max', position='Body'),
  startPage?: int32(name='startPage', example='1', position='Body'),
  taskType?: string(name='taskType', example='custom', position='Body'),
}

model CreateFinReportSummaryTaskResponseBody = {
  cost?: long(name='cost', example='null'),
  data?: string(name='data', example='3284627354'),
  dataType?: string(name='dataType', example='null'),
  errCode?: string(name='errCode', example='0'),
  message?: string(name='message', example='ok'),
  requestId?: string(name='requestId', example='5E3FBAF1-17AF-53B7-AF0A-CDCEEB6DE658'),
  success?: boolean(name='success', example='true'),
  time?: string(name='time', example='2024-04-24 11:54:34'),
}

model CreateFinReportSummaryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFinReportSummaryTaskResponseBody(name='body'),
}

async function createFinReportSummaryTask(request: CreateFinReportSummaryTaskRequest): CreateFinReportSummaryTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFinReportSummaryTask', 'POST', '/{workspaceId}/api/task/summary', 'json', false, 'json', request);
}

model CreateLibraryRequest {
  workspaceId: string(name='workspaceId', example='llm-ik******RVYCKzt', position='Path'),
  description: string(name='description', position='Body'),
  indexSetting?: {
    chunkStrategy?: {
      docTreeSplit?: boolean(name='docTreeSplit', example='true'),
      docTreeSplitSize?: int32(name='docTreeSplitSize', example='300'),
      enhanceGraph?: boolean(name='enhanceGraph', example='true'),
      enhanceTable?: boolean(name='enhanceTable', example='true'),
      overlap?: int32(name='overlap', example='20'),
      sentenceSplit?: boolean(name='sentenceSplit', example='true'),
      sentenceSplitSize?: int32(name='sentenceSplitSize', example='300'),
      size?: int32(name='size', example='300'),
      split?: boolean(name='split', example='true'),
    }(name='chunkStrategy'),
    modelConfig?: {
      temperature?: double(name='temperature', example='0.8'),
      topP?: double(name='topP', example='0.8'),
    }(name='modelConfig'),
    promptRoleStyle?: string(name='promptRoleStyle'),
    queryEnhancer?: {
      enableFollowUp?: boolean(name='enableFollowUp', example='true'),
      enableMultiQuery?: boolean(name='enableMultiQuery', example='true'),
      enableOpenQa?: boolean(name='enableOpenQa', example='true'),
      enableQueryRewrite?: boolean(name='enableQueryRewrite', example='true'),
      enableSession?: boolean(name='enableSession', example='true'),
      localKnowledgeId?: string(name='localKnowledgeId', example='xxxx'),
      withDocumentReference?: boolean(name='withDocumentReference', example='true'),
    }(name='queryEnhancer'),
    recallStrategy?: {
      documentRankType?: string(name='documentRankType', example='model'),
      limit?: int32(name='limit', example='20'),
    }(name='recallStrategy'),
    textIndexSetting?: {
      category?: string(name='category', example='ElasticSearch'),
      enable?: boolean(name='enable', example='true'),
      indexAnalyzer?: string(name='indexAnalyzer', example='Standard'),
      rankThreshold?: double(name='rankThreshold', example='0.5'),
      searchAnalyzer?: string(name='searchAnalyzer', example='Standard'),
      topK?: int32(name='topK', example='50'),
    }(name='textIndexSetting'),
    vectorIndexSetting?: {
      category?: string(name='category', example='ADB'),
      embeddingType?: string(name='embeddingType', example='DashScope'),
      enable?: boolean(name='enable', example='true'),
      rankThreshold?: double(name='rankThreshold', example='0.5'),
      topK?: int32(name='topK', example='50'),
    }(name='vectorIndexSetting'),
  }(name='indexSetting', position='Body'),
  libraryName: string(name='libraryName', position='Body'),
}

model CreateLibraryResponseBody = {
  cost?: long(name='cost', example='300'),
  data?: string(name='data', example='a1b2c3'),
  dataType?: string(name='dataType', example='null'),
  errCode?: string(name='errCode', example='0'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxx'),
  success?: boolean(name='success', example='true'),
  time?: string(name='time', example='null'),
}

model CreateLibraryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLibraryResponseBody(name='body'),
}

async function createLibrary(request: CreateLibraryRequest): CreateLibraryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateLibrary', 'POST', '/{workspaceId}/api/library/create', 'json', false, 'json', request);
}

model CreatePredefinedDocumentRequest {
  workspaceId: string(name='workspaceId', example='llm-xxxxx', position='Path'),
  chunks?: [ 
    {
      chunkMeta?: map[string]any(name='chunkMeta', example='{"a": "1"}'),
      chunkOrder?: int32(name='chunkOrder', example='1'),
      chunkText?: string(name='chunkText', example='这是一段测试文本'),
      chunkType?: string(name='chunkType', example='text'),
    }
  ](name='chunks', position='Body'),
  libraryId?: string(name='libraryId', example='a1b2c3', position='Body'),
  metadata?: map[string]any(name='metadata', example='{"a": "1"}', position='Body'),
  title?: string(name='title', example='测试文档', position='Body'),
}

model CreatePredefinedDocumentResponseBody = {
  cost?: long(name='cost', example='null'),
  data?: string(name='data', example='1782981430906818562'),
  dataType?: string(name='dataType', example='null'),
  errCode?: string(name='errCode', example='0'),
  message?: string(name='message', example='ok'),
  requestId?: string(name='requestId', example='0a06dfe617018288881568684e2937'),
  success?: boolean(name='success', example='true'),
  time?: string(name='time', example='2024-04-24 11:54:34'),
}

model CreatePredefinedDocumentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePredefinedDocumentResponseBody(name='body'),
}

async function createPredefinedDocument(request: CreatePredefinedDocumentRequest): CreatePredefinedDocumentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePredefinedDocument', 'POST', '/{workspaceId}/api/library/document/createPredefinedDocument', 'json', false, 'json', request);
}

model DeleteDocumentRequest {
  workspaceId: string(name='workspaceId', example='llm-xxxxx', position='Path'),
  docIds: [ string ](name='docIds', position='Body'),
  libraryId: string(name='libraryId', example='3akzl28vap', position='Body'),
}

model DeleteDocumentResponseBody = {
  cost?: long(name='cost', example='null'),
  data?: boolean(name='data', example='True'),
  dataType?: string(name='dataType', example='null'),
  errCode?: string(name='errCode', example='0'),
  message?: string(name='message', example='ok'),
  requestId?: string(name='requestId', example='67C7021A-D268-553D-8C15-A087B9604028'),
  success?: boolean(name='success', example='true'),
  time?: string(name='time', example='2024-04-24 11:54:34'),
}

model DeleteDocumentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDocumentResponseBody(name='body'),
}

async function deleteDocument(request: DeleteDocumentRequest): DeleteDocumentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDocument', 'POST', '/{workspaceId}/api/library/document/delete', 'json', false, 'json', request);
}

model DeleteLibraryRequest {
  workspaceId: string(name='workspaceId', example='llm-xxxxx', position='Path'),
  libraryId: string(name='libraryId', example='skdfefxxx', position='Query'),
}

model DeleteLibraryResponseBody = {
  errCode?: string(name='errCode', example='0'),
  message?: string(name='message', example='ok'),
  requestId?: string(name='requestId', example='30F6AD44-F078-540D-B5A5-1E519C8E9E6D'),
  success?: boolean(name='success', example='true'),
}

model DeleteLibraryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLibraryResponseBody(name='body'),
}

async function deleteLibrary(request: DeleteLibraryRequest): DeleteLibraryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteLibrary', 'DELETE', '/{workspaceId}/api/library/delete', 'json', false, 'json', request);
}

model EvictTaskRequest {
  workspaceId: string(name='workspaceId', example='llm-xxxxx', position='Path'),
  taskId: string(name='taskId', example='17071319', position='Query'),
}

model EvictTaskResponseBody = {
  cost?: long(name='cost', example='null'),
  data?: string(name='data', example='17071319'),
  dataType?: string(name='dataType', example='null'),
  errCode?: string(name='errCode', example='0'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='44BD277A-87F9-5310-8D63-3E6645F1DA85'),
  success?: boolean(name='success', example='true'),
  time?: string(name='time', example='2024-04-24 11:54:34'),
}

model EvictTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EvictTaskResponseBody(name='body'),
}

async function evictTask(request: EvictTaskRequest): EvictTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EvictTask', 'POST', '/{workspaceId}/api/task/evict', 'json', false, 'json', request);
}

model GetAppConfigRequest {
  workspaceId: string(name='workspaceId', example='llm-xxxxx', position='Path'),
}

model GetAppConfigResponseBody = {
  cost?: long(name='cost', example='null'),
  data?: {
    embeddingTypeList?: [ map[string]string ](name='embeddingTypeList'),
    frontendConfig?: map[string]boolean(name='frontendConfig'),
    libraryDocumentStatusList?: [ map[string]string ](name='libraryDocumentStatusList'),
    llmHelperTypeList?: [ map[string]string ](name='llmHelperTypeList'),
    textIndexCategoryList?: [ string ](name='textIndexCategoryList'),
    vectorIndexCategoryList?: [ string ](name='vectorIndexCategoryList'),
  }(name='data'),
  dataType?: string(name='dataType', example='null'),
  errCode?: string(name='errCode', example='0'),
  message?: string(name='message', example='None'),
  requestId?: string(name='requestId', example='EF4B5C9B-3BC8-5171-A47B-4C5CF3DC3258'),
  success?: boolean(name='success', example='True'),
  time?: string(name='time', example='2024-04-24 11:54:34'),
}

model GetAppConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAppConfigResponseBody(name='body'),
}

async function getAppConfig(request: GetAppConfigRequest): GetAppConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAppConfig', 'GET', '/{workspaceId}/api/app/config', 'json', false, 'json', request);
}

model GetDocumentChunkListRequest {
  workspaceId: string(name='workspaceId', example='llm-xxxxx', position='Path'),
  chunkIdList?: [ string ](name='chunkIdList', position='Body'),
  docId: string(name='docId', example='182364872346', position='Body'),
  libraryId: string(name='libraryId', example='dsjgfdjgfxxx', position='Body'),
  order?: string(name='order', example='desc', position='Body'),
  orderBy?: string(name='orderBy', example='gmtCreate', position='Body'),
  page?: int32(name='page', example='1', position='Body'),
  pageSize?: int32(name='pageSize', example='10', position='Body'),
  searchQuery?: string(name='searchQuery', example='test', position='Body'),
}

model GetDocumentChunkListResponseBody = {
  cost?: long(name='cost', example='null'),
  data?: {
    currentPage?: long(name='currentPage', example='1'),
    pageSize?: long(name='pageSize', example='10'),
    records?: [ 
      {
        chunkId?: string(name='chunkId', example='28377468263482764'),
        chunkMeta?: map[string]any(name='chunkMeta', example='{"a":"1"}'),
        chunkOssUrl?: string(name='chunkOssUrl', example='oss-xxxx-hangzhou.com/test.pdf'),
        chunkText?: string(name='chunkText'),
        chunkType?: string(name='chunkType', example='text'),
        docId?: string(name='docId', example='8947387648356'),
        fileType?: string(name='fileType', example='pdf'),
        libraryId?: string(name='libraryId', example='jhsdvne'),
        libraryName?: string(name='libraryName'),
        nextChunkId?: string(name='nextChunkId', example='947538465'),
        pos?: [ 
          {
            axisArray?: [ double ](name='axisArray'),
            page?: int32(name='page', example='1'),
            textHighlightArea?: [ int32 ](name='textHighlightArea'),
          }
        ](name='pos'),
        preChunkId?: string(name='preChunkId', example='9848346548365'),
        score?: float(name='score', example='0.5'),
        title?: string(name='title', example='test'),
      }
    ](name='records'),
    totalPages?: long(name='totalPages', example='10'),
    totalRecords?: long(name='totalRecords', example='100'),
  }(name='data'),
  dataType?: string(name='dataType', example='null'),
  errCode?: string(name='errCode', example='0'),
  message?: string(name='message', example='ok'),
  requestId?: string(name='requestId', example='2B8F6DC9-6FAF-576F-9095-CCD90FB2BDDF'),
  success?: boolean(name='success', example='true'),
  time?: string(name='time', example='2024-04-24 11:54:34'),
}

model GetDocumentChunkListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDocumentChunkListResponseBody(name='body'),
}

async function getDocumentChunkList(request: GetDocumentChunkListRequest): GetDocumentChunkListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDocumentChunkList', 'POST', '/{workspaceId}/api/library/getDocumentChunk', 'json', false, 'json', request);
}

model GetDocumentListRequest {
  workspaceId: string(name='workspaceId', example='llm-xxxx', position='Path'),
  libraryId: string(name='libraryId', example='3akzl28vap', position='Query'),
  page?: int32(name='page', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  status?: string(name='status', position='Query'),
}

model GetDocumentListResponseBody = {
  cost?: long(name='cost', example='null'),
  data?: {
    currentPage?: long(name='currentPage', example='1'),
    pageSize?: long(name='pageSize', example='10'),
    records?: [ 
      {
        docId?: string(name='docId', example='8326748346'),
        documentMeta?: map[string]any(name='documentMeta'),
        fileType?: string(name='fileType', example='pdf'),
        gmtCreate?: string(name='gmtCreate', example='2024-01-01 00:00:00'),
        gmtModified?: string(name='gmtModified', example='2024-01-01 00:00:00'),
        libraryId?: string(name='libraryId', example='skjdhshbv'),
        statusCode?: string(name='statusCode', example='WaitRefresh'),
        title?: string(name='title', example='test'),
        url?: string(name='url', example='null'),
      }
    ](name='records'),
    totalPages?: long(name='totalPages', example='10'),
    totalRecords?: long(name='totalRecords', example='100'),
  }(name='data'),
  dataType?: string(name='dataType', example='null'),
  errCode?: string(name='errCode', example='0'),
  message?: string(name='message', example='ok'),
  requestId?: string(name='requestId', example='5E3FBAF1-17AF-53B7-AF0A-CDCEEB6DE658'),
  success?: boolean(name='success', example='true'),
  time?: string(name='time', example='2024-04-24 11:54:34'),
}

model GetDocumentListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDocumentListResponseBody(name='body'),
}

async function getDocumentList(request: GetDocumentListRequest): GetDocumentListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDocumentList', 'GET', '/{workspaceId}/api/library/listDocument', 'json', false, 'json', request);
}

model GetDocumentUrlRequest {
  workspaceId: string(name='workspaceId', example='llm-xxxxx', position='Path'),
  documentId: string(name='documentId', example='12681367362', position='Query'),
}

model GetDocumentUrlResponseBody = {
  cost?: long(name='cost', example='null'),
  data?: string(name='data', example='https://path_to_file'),
  dataType?: string(name='dataType', example='null'),
  errCode?: string(name='errCode', example='0'),
  message?: string(name='message', example='ok'),
  requestId?: string(name='requestId', example='66249B43-8C2B-5EE7-AE78-B382306621C6'),
  success?: boolean(name='success', example='true'),
  time?: string(name='time', example='2024-01-01 00:00:00'),
}

model GetDocumentUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDocumentUrlResponseBody(name='body'),
}

async function getDocumentUrl(request: GetDocumentUrlRequest): GetDocumentUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDocumentUrl', 'GET', '/{workspaceId}/api/library/document/url', 'json', false, 'json', request);
}

model GetFilterDocumentListRequest {
  workspaceId: string(name='workspaceId', example='llm-xxxxx', position='Path'),
  and?: [ 
    {
      boost?: float(name='boost', example='1'),
      key?: string(name='key', example='company'),
      operator?: string(name='operator', example='eq'),
      value?: string(name='value', example='alibaba'),
    }
  ](name='and', position='Body'),
  docIdList?: [ string ](name='docIdList', position='Body'),
  libraryId: string(name='libraryId', example='cjshcxxxx', position='Body'),
  or?: [ 
    {
      boost?: float(name='boost', example='1'),
      key?: string(name='key', example='company'),
      operator?: string(name='operator', example='contains'),
      value?: string(name='value', example='alibaba'),
    }
  ](name='or', position='Body'),
  page?: int32(name='page', example='1', position='Body'),
  pageSize?: int32(name='pageSize', example='10', position='Body'),
  status?: [ string ](name='status', position='Body'),
}

model GetFilterDocumentListResponseBody = {
  cost?: long(name='cost', example='null'),
  data?: {
    currentPage?: long(name='currentPage', example='1'),
    pageSize?: long(name='pageSize', example='10'),
    records?: [ 
      {
        docId?: string(name='docId', example='29368126816'),
        documentMeta?: map[string]any(name='documentMeta', example='{"a": "1"}'),
        fileType?: string(name='fileType', example='pdf'),
        gmtCreate?: string(name='gmtCreate', example='2024-01-01 00:00:00'),
        gmtModified?: string(name='gmtModified', example='2024-01-01 00:00:00'),
        libraryId?: string(name='libraryId', example='sdfgsjdfg'),
        statusCode?: string(name='statusCode', example='WaitRefresh'),
        title?: string(name='title'),
        url?: string(name='url', example='null'),
      }
    ](name='records'),
    totalPages?: long(name='totalPages', example='10'),
    totalRecords?: long(name='totalRecords', example='100'),
  }(name='data'),
  dataType?: string(name='dataType', example='null'),
  errCode?: string(name='errCode', example='0'),
  message?: string(name='message', example='ok'),
  requestId?: string(name='requestId', example='7ADF010C-FD89-569D-A079-2D4D5247E943'),
  success?: boolean(name='success', example='true'),
  time?: string(name='time', example='2024-01-01 00:00:00'),
}

model GetFilterDocumentListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFilterDocumentListResponseBody(name='body'),
}

async function getFilterDocumentList(request: GetFilterDocumentListRequest): GetFilterDocumentListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFilterDocumentList', 'POST', '/{workspaceId}/api/library/filterDocument', 'json', false, 'json', request);
}

model GetHistoryListByBizTypeRequest {
  workspaceId: string(name='workspaceId', example='llm-xxxxx', position='Path'),
  bizId: string(name='bizId', example='GysYBsxx', position='Query'),
  bizType: string(name='bizType', example='LibraryChat', position='Query'),
  page?: int32(name='page', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
}

model GetHistoryListByBizTypeResponseBody = {
  cost?: long(name='cost', example='null'),
  data?: {
    currentPage?: long(name='currentPage', example='1'),
    pageSize?: long(name='pageSize', example='10'),
    records?: [ 
      {
        bizId?: string(name='bizId', example='GysYBsxx'),
        bizType?: string(name='bizType', example='LibraryChat'),
        extraMessage?: any(name='extraMessage', example='null'),
        gmtCreate?: string(name='gmtCreate', example='2024-01-01 00:00:00'),
        gmtModified?: string(name='gmtModified', example='2024-01-01 00:00:00'),
        id?: long(name='id', example='210'),
        llmAnswer?: string(name='llmAnswer'),
        llmPrompt?: string(name='llmPrompt'),
        llmType?: string(name='llmType', example='qwen-max'),
        sessionId?: string(name='sessionId', example='null'),
        userQuery?: string(name='userQuery'),
      }
    ](name='records'),
    totalPages?: long(name='totalPages', example='10'),
    totalRecords?: long(name='totalRecords', example='100'),
  }(name='data'),
  dataType?: string(name='dataType', example='null'),
  errCode?: string(name='errCode', example='0'),
  message?: string(name='message', example='ok'),
  requestId?: string(name='requestId', example='9DF9B3F3-9FFE-52CB-A8DC-F7BD5F842F0E'),
  success?: boolean(name='success', example='true'),
  time?: string(name='time', example='2024-01-01 00:00:00'),
}

model GetHistoryListByBizTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHistoryListByBizTypeResponseBody(name='body'),
}

async function getHistoryListByBizType(request: GetHistoryListByBizTypeRequest): GetHistoryListByBizTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHistoryListByBizType', 'GET', '/{workspaceId}/api/history/list', 'json', false, 'json', request);
}

model GetLibraryRequest {
  workspaceId?: string(name='workspaceId', example='llm-xxxxx', position='Path'),
  libraryId: string(name='libraryId', example='cjshcxxxx', position='Query'),
}

model GetLibraryResponseBody = {
  cost?: long(name='cost', example='null'),
  data?: {
    description?: string(name='description'),
    documentCount?: long(name='documentCount', example='10'),
    gmtCreate?: string(name='gmtCreate', example='2024-01-01 00:00:00'),
    gmtModified?: string(name='gmtModified', example='2024-01-01 00:00:00'),
    id?: string(name='id', example='19386728376'),
    indexSetting?: {
      chunkStrategy?: {
        docTreeSplit?: boolean(name='docTreeSplit', example='true'),
        docTreeSplitSize?: int32(name='docTreeSplitSize', example='160'),
        enhanceGraph?: boolean(name='enhanceGraph', example='true'),
        enhanceTable?: boolean(name='enhanceTable', example='true'),
        overlap?: int32(name='overlap', example='40'),
        sentenceSplit?: boolean(name='sentenceSplit', example='true'),
        sentenceSplitSize?: int32(name='sentenceSplitSize', example='160'),
        size?: int32(name='size', example='256'),
        split?: boolean(name='split', example='true'),
      }(name='chunkStrategy'),
      modelConfig?: {
        temperature?: double(name='temperature', example='0.8'),
        topP?: double(name='topP', description='topP', example='0.8'),
      }(name='modelConfig'),
      promptRoleStyle?: string(name='promptRoleStyle'),
      queryEnhancer?: {
        enableFollowUp?: boolean(name='enableFollowUp', example='true'),
        enableMultiQuery?: boolean(name='enableMultiQuery', example='true'),
        enableOpenQa?: boolean(name='enableOpenQa', example='true'),
        enableQueryRewrite?: boolean(name='enableQueryRewrite', example='true'),
        enableSession?: boolean(name='enableSession', example='true'),
        localKnowledgeId?: string(name='localKnowledgeId', example='2836482634'),
        withDocumentReference?: boolean(name='withDocumentReference', example='true'),
      }(name='queryEnhancer'),
      recallStrategy?: {
        documentRankType?: string(name='documentRankType', example='model'),
        limit?: int32(name='limit', example='10'),
      }(name='recallStrategy'),
      textIndexSetting?: {
        category?: string(name='category', example='ElasticSearch'),
        enable?: boolean(name='enable', example='true'),
        indexAnalyzer?: string(name='indexAnalyzer', example='IkMaxWord'),
        rankThreshold?: double(name='rankThreshold', example='null'),
        searchAnalyzer?: string(name='searchAnalyzer', example='Standard'),
        topK?: int32(name='topK', example='10'),
      }(name='textIndexSetting'),
      vectorIndexSetting?: {
        category?: string(name='category', example='ADB'),
        embeddingType?: string(name='embeddingType', example='DashScope'),
        enable?: boolean(name='enable', example='true'),
        rankThreshold?: double(name='rankThreshold', example='null'),
        topK?: int32(name='topK', example='10'),
      }(name='vectorIndexSetting'),
    }(name='indexSetting'),
    libraryName?: string(name='libraryName'),
  }(name='data'),
  dataType?: string(name='dataType', example='null'),
  errCode?: string(name='errCode', example='0'),
  message?: string(name='message', example='ok'),
  requestId?: string(name='requestId', example='44BD277A-87F9-5310-8D63-3E6645F1DA85'),
  success?: boolean(name='success', example='true'),
  time?: string(name='time', example='2024-01-01 00:00:00'),
}

model GetLibraryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLibraryResponseBody(name='body'),
}

async function getLibrary(request: GetLibraryRequest): GetLibraryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLibrary', 'GET', '/{workspaceId}/api/library/get', 'json', false, 'json', request);
}

model GetLibraryListRequest {
  workspaceId: string(name='workspaceId', example='llm-xxxxx', position='Path'),
  page?: int32(name='page', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  query?: string(name='query', position='Query'),
}

model GetLibraryListResponseBody = {
  cost?: long(name='cost', example='null'),
  data?: {
    currentPage?: long(name='currentPage', example='1'),
    pageSize?: long(name='pageSize', example='10'),
    records?: [ 
      {
        description?: string(name='description'),
        documentCount?: long(name='documentCount', example='10'),
        gmtCreate?: string(name='gmtCreate', example='2024-01-01 00:00:00'),
        gmtModified?: string(name='gmtModified', example='2024-01-01 00:00:00'),
        id?: string(name='id', example='24vs4aa42jv1rg7'),
        indexSetting?: {
          chunkStrategy?: {
            docTreeSplit?: boolean(name='docTreeSplit', example='true'),
            docTreeSplitSize?: int32(name='docTreeSplitSize', example='160'),
            enhanceGraph?: boolean(name='enhanceGraph', example='true'),
            enhanceTable?: boolean(name='enhanceTable', example='true'),
            overlap?: int32(name='overlap', example='40'),
            sentenceSplit?: boolean(name='sentenceSplit', example='true'),
            sentenceSplitSize?: int32(name='sentenceSplitSize', example='160'),
            size?: int32(name='size', example='256'),
            split?: boolean(name='split', example='true'),
          }(name='chunkStrategy'),
          modelConfig?: {
            temperature?: double(name='temperature', example='0.8'),
            topP?: double(name='topP', description='topP', example='0.8'),
          }(name='modelConfig'),
          promptRoleStyle?: string(name='promptRoleStyle'),
          queryEnhancer?: {
            enableFollowUp?: boolean(name='enableFollowUp', example='true'),
            enableMultiQuery?: boolean(name='enableMultiQuery', example='true'),
            enableOpenQa?: boolean(name='enableOpenQa', example='true'),
            enableQueryRewrite?: boolean(name='enableQueryRewrite', example='true'),
            enableSession?: boolean(name='enableSession', example='true'),
            localKnowledgeId?: string(name='localKnowledgeId', example='sdbcjsbc'),
            withDocumentReference?: boolean(name='withDocumentReference', example='true'),
          }(name='queryEnhancer'),
          recallStrategy?: {
            documentRankType?: string(name='documentRankType', example='model'),
            limit?: int32(name='limit', example='10'),
          }(name='recallStrategy'),
          textIndexSetting?: {
            category?: string(name='category', example='ElasticSearch'),
            enable?: boolean(name='enable', example='true'),
            indexAnalyzer?: string(name='indexAnalyzer', example='Standard'),
            rankThreshold?: double(name='rankThreshold', example='null'),
            searchAnalyzer?: string(name='searchAnalyzer', example='Standard'),
            topK?: int32(name='topK', example='10'),
          }(name='textIndexSetting'),
          vectorIndexSetting?: {
            category?: string(name='category', example='ADB'),
            embeddingType?: string(name='embeddingType', example='DashScope'),
            enable?: boolean(name='enable', example='true'),
            rankThreshold?: double(name='rankThreshold', example='null'),
            topK?: int32(name='topK', example='10'),
          }(name='vectorIndexSetting'),
        }(name='indexSetting'),
        libraryName?: string(name='libraryName'),
      }
    ](name='records'),
    totalPages?: long(name='totalPages', example='10'),
    totalRecords?: long(name='totalRecords', example='100'),
  }(name='data'),
  dataType?: string(name='dataType', example='null'),
  errCode?: string(name='errCode', example='0'),
  message?: string(name='message', example='ok'),
  requestId?: string(name='requestId', example='0a06dfe817156528535968405edce3'),
  success?: boolean(name='success', example='true'),
  time?: string(name='time', example='2024-01-01 00:00:00'),
}

model GetLibraryListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLibraryListResponseBody(name='body'),
}

async function getLibraryList(request: GetLibraryListRequest): GetLibraryListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLibraryList', 'GET', '/{workspaceId}/api/library/list', 'json', false, 'json', request);
}

model GetParseResultRequest {
  workspaceId: string(name='workspaceId', example='llm-xxxxx', position='Path'),
  docId: string(name='docId', example='873648346573245', position='Body'),
  libraryId: string(name='libraryId', example='sjdgdsfg', position='Body'),
}

model GetParseResultResponseBody = {
  cost?: long(name='cost', example='null'),
  data?: {
    fileType?: string(name='fileType', example='pdf'),
    providerType?: string(name='providerType', example='null'),
    requestId?: string(name='requestId', example='b0a202e2-5031-4589-a6d7-39185f0d8d01'),
    result?: map[string]any(name='result', example='{
          "Status": "Success",
          "Data": {},
          "Message": null,
          "TaskId": "docmind-20240601-123abc"
        }'),
    status?: string(name='status', example='WaitRefresh'),
  }(name='data'),
  dataType?: string(name='dataType', example='null'),
  errCode?: string(name='errCode', example='0'),
  message?: string(name='message', example='ok'),
  requestId?: string(name='requestId', example='0abb793617204049360065953ec6dd'),
  success?: boolean(name='success', example='true'),
  time?: string(name='time', example='2024-04-24 11:54:34'),
}

model GetParseResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetParseResultResponseBody(name='body'),
}

async function getParseResult(request: GetParseResultRequest): GetParseResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetParseResult', 'POST', '/{workspaceId}/api/library/document/getParseResult', 'json', false, 'json', request);
}

model GetSummaryTaskResultRequest {
  workspaceId: string(name='workspaceId', example='llm-xxxx', position='Path'),
  taskId: string(name='taskId', example='17071319', position='Query'),
}

model GetSummaryTaskResultResponseBody = {
  cost?: long(name='cost', example='null'),
  data?: {
    choices?: [ 
      {
        finishReason?: string(name='finishReason', example='stop'),
        index?: int32(name='index', example='0'),
        message?: {
          content?: string(name='content'),
          role?: string(name='role', example='assistant'),
          toolCalls?: [  map[string]any ](name='toolCalls'),
        }(name='message'),
      }
    ](name='choices'),
    created?: long(name='created', example='1726285125915'),
    id?: string(name='id', example='1202'),
    modelId?: string(name='modelId', example='qwen-max'),
    requestId?: string(name='requestId', example='0bc13a9517168617617186457e401f'),
    time?: string(name='time', example='2024-04-24 11:54:34'),
    totalTokens?: int32(name='totalTokens', example='300'),
    usage?: {
      imageCount?: int32(name='imageCount', example='0'),
      imageTokens?: int32(name='imageTokens', example='0'),
      inputTokens?: int32(name='inputTokens', example='100'),
      outputTokens?: int32(name='outputTokens', example='200'),
      totalTokens?: int32(name='totalTokens', example='300'),
    }(name='usage'),
  }(name='data'),
  dataType?: string(name='dataType', example='null'),
  errCode?: string(name='errCode', example='0'),
  message?: string(name='message', example='ok'),
  requestId?: string(name='requestId', example='0bc13a9517168617617186457e401f'),
  success?: boolean(name='success', example='true'),
  time?: string(name='time', example='2024-04-24 11:54:34'),
}

model GetSummaryTaskResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSummaryTaskResultResponseBody(name='body'),
}

async function getSummaryTaskResult(request: GetSummaryTaskResultRequest): GetSummaryTaskResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSummaryTaskResult', 'GET', '/{workspaceId}/api/task/summary/result', 'json', false, 'json', request);
}

model GetTaskStatusRequest {
  workspaceId: string(name='workspaceId', position='Path'),
  taskId: string(name='taskId', position='Query'),
}

model GetTaskStatusResponseBody = {
  cost?: long(name='cost'),
  data?: string(name='data'),
  dataType?: string(name='dataType'),
  errCode?: string(name='errCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  time?: string(name='time'),
}

model GetTaskStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskStatusResponseBody(name='body'),
}

async function getTaskStatus(request: GetTaskStatusRequest): GetTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTaskStatus', 'GET', '/{workspaceId}/api/task/status', 'json', false, 'json', request);
}

model InvokePluginRequest {
  workspaceId: string(name='workspaceId', example='llm-xxxxx', position='Path'),
  params?: map[string]any(name='params', position='Body'),
  pluginId?: string(name='pluginId', example='3mj87da7zr', position='Body'),
}

model InvokePluginResponseBody = {
  cost?: long(name='cost', example='null'),
  data?: map[string]any(name='data', example='{\\"jobWaiting\\": [0, 0], \\"timestamps\\": [1713383820, 1713383880], \\"jobUsage\\": [0, 0], \\"quotaUsage\\": [123, 32]}'),
  dataType?: string(name='dataType', example='null'),
  errCode?: string(name='errCode', example='0'),
  message?: string(name='message', example='ok'),
  requestId?: string(name='requestId', example='915AAAB9-4908-5224-9E53-9E9D7D0AA94B'),
  success?: boolean(name='success', example='true'),
  time?: string(name='time', example='2024-04-24 11:54:34'),
}

model InvokePluginResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InvokePluginResponseBody(name='body'),
}

async function invokePlugin(request: InvokePluginRequest): InvokePluginResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'InvokePlugin', 'POST', '/{workspaceId}/api/plugin/invoke', 'json', false, 'json', request);
}

model PreviewDocumentRequest {
  workspaceId: string(name='workspaceId', example='llm-xxxxx', position='Path'),
  documentId: string(name='documentId', example='8326472354762354', position='Query'),
}

model PreviewDocumentResponseBody = {
  cost?: long(name='cost', example='null'),
  data?: {
    previewType?: string(name='previewType', example='pdf'),
    title?: string(name='title', example='test'),
    uploadTime?: string(name='uploadTime', example='2024-01-01 00:00:00'),
    url?: string(name='url', example='https://agi.alicdn.com/user/d0o/d3c1f50d-a6c2-49b3-b0c8-3e613c3f20ee_16872_3236784461.png'),
  }(name='data'),
  dataType?: string(name='dataType', example='null'),
  errCode?: string(name='errCode', example='0'),
  message?: string(name='message', example='ok'),
  requestId?: string(name='requestId', example='ff551395-1c8a-4f30-8ffd-ef7e87c70b4c'),
  success?: boolean(name='success', example='true'),
  time?: string(name='time', example='2024-04-24 11:54:34'),
}

model PreviewDocumentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PreviewDocumentResponseBody(name='body'),
}

async function previewDocument(request: PreviewDocumentRequest): PreviewDocumentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PreviewDocument', 'GET', '/{workspaceId}/api/library/document/preview', 'json', false, 'json', request);
}

model ReIndexRequest {
  workspaceId: string(name='workspaceId', example='llm-xxxxx', position='Path'),
  documentId: string(name='documentId', example='8326472354762354', position='Query'),
}

model ReIndexResponseBody = {
  cost?: long(name='cost', example='null'),
  data?: string(name='data', example='True'),
  dataType?: string(name='dataType', example='null'),
  errCode?: string(name='errCode', example='0'),
  message?: string(name='message', example='ok'),
  requestId?: string(name='requestId', example='32FFC91D-0A9F-585A-B84F-8A54C5187035'),
  success?: boolean(name='success', example='true'),
  time?: string(name='time', example='2024-04-24 11:54:34'),
}

model ReIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReIndexResponseBody(name='body'),
}

async function reIndex(request: ReIndexRequest): ReIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ReIndex', 'PUT', '/{workspaceId}/api/library/document/reIndex', 'json', false, 'json', request);
}

model RecallDocumentRequest {
  workspaceId: string(name='workspaceId', example='llm-xxxxx', position='Path'),
  filters?: [ 
    {
      and?: [ 
        {
          boost?: float(name='boost', example='20'),
          key?: string(name='key', example='docType'),
          operator?: string(name='operator', example='contains'),
          value?: string(name='value'),
        }
      ](name='and'),
      chunkType?: string(name='chunkType', example='Text'),
      docIdList?: [ string ](name='docIdList'),
      libraryId: string(name='libraryId', example='sdbjhvs'),
      or?: [ 
        {
          boost?: float(name='boost', example='30'),
          key?: string(name='key', example='researcher'),
          operator?: string(name='operator', example='eq'),
          value?: string(name='value', example='zhangsan'),
        }
      ](name='or'),
      status?: [ string ](name='status'),
    }
  ](name='filters', position='Body'),
  query: string(name='query', position='Body'),
  rearrangement?: boolean(name='rearrangement', example='false', position='Body'),
  topK?: int32(name='topK', example='10', position='Body'),
}

model RecallDocumentResponseBody = {
  cost?: long(name='cost', example='0'),
  data?: {
    chunkList?: [ 
      {
        chunkId?: string(name='chunkId', example='823746762354'),
        chunkMeta?: map[string]any(name='chunkMeta', example='{"a":"1"}'),
        chunkOssUrl?: string(name='chunkOssUrl', example='http://oss-xxx-hangzhou.com/xxx'),
        chunkText?: string(name='chunkText'),
        chunkType?: string(name='chunkType', example='text'),
        docId?: string(name='docId', example='839468263472'),
        fileType?: string(name='fileType', example='pdf'),
        libraryId?: string(name='libraryId', example='dscsbdsk'),
        libraryName?: string(name='libraryName'),
        nextChunkId?: string(name='nextChunkId', example='982374872364'),
        pos?: [ 
          {
            axisArray?: [ double ](name='axisArray'),
            page?: int32(name='page', example='1'),
            textHighlightArea?: [ int32 ](name='textHighlightArea'),
          }
        ](name='pos'),
        preChunkId?: string(name='preChunkId', example='827364827364832'),
        score?: float(name='score', example='0.5'),
        title?: string(name='title', example='test'),
      }
    ](name='chunkList'),
    chunkPartList?: [ 
      {
        chunkId?: string(name='chunkId', example='98327482364'),
        chunkMeta?: map[string]any(name='chunkMeta', example='{"a":"1"}'),
        chunkOssUrl?: string(name='chunkOssUrl', example='http://oss-xxx-hangzhou.com/xxx'),
        chunkText?: string(name='chunkText'),
        chunkType?: string(name='chunkType', example='text'),
        docId?: string(name='docId', example='92837482364'),
        fileType?: string(name='fileType', example='pdf'),
        libraryId?: string(name='libraryId', example='sjdhgjsd'),
        libraryName?: string(name='libraryName'),
        nextChunkId?: string(name='nextChunkId', example='2387648263542'),
        pos?: [ 
          {
            axisArray?: [ double ](name='axisArray'),
            page?: int32(name='page', example='1'),
            textHighlightArea?: [ int32 ](name='textHighlightArea'),
          }
        ](name='pos'),
        preChunkId?: string(name='preChunkId', example='32874682764'),
        score?: float(name='score', example='0.5'),
        title?: string(name='title'),
      }
    ](name='chunkPartList'),
    chunkTextList?: [ string ](name='chunkTextList'),
    documents?: [ 
      {
        docId?: string(name='docId', example='92837482364'),
        documentMeta?: map[string]any(name='documentMeta', example='{"a":"1"}'),
        fileType?: string(name='fileType', example='pdf'),
        gmtCreate?: string(name='gmtCreate', example='2024-01-01 00:00:00'),
        libraryId?: string(name='libraryId', example='sjdhgjsd'),
        title?: string(name='title', example='test'),
        url?: string(name='url', example='http://oss-xxx-hangzhou.com/test.pdf'),
      }
    ](name='documents'),
    embeddingElapsedMs?: long(name='embeddingElapsedMs', example='100'),
    textChunkList?: [ 
      {
        chunkId?: string(name='chunkId', example='32874682364'),
        chunkMeta?: map[string]any(name='chunkMeta', example='{"a":"1"}'),
        chunkOssUrl?: string(name='chunkOssUrl', example='http://oss-xxx-hangzhou.com/xxx'),
        chunkText?: string(name='chunkText'),
        chunkType?: string(name='chunkType', example='text'),
        docId?: string(name='docId', example='8372467263542'),
        fileType?: string(name='fileType', example='pdf'),
        libraryId?: string(name='libraryId', example='djsgfsjd'),
        libraryName?: string(name='libraryName'),
        nextChunkId?: string(name='nextChunkId', example='23874682432'),
        pos?: [ 
          {
            axisArray?: [ double ](name='axisArray'),
            page?: int32(name='page', example='1'),
            textHighlightArea?: [ int32 ](name='textHighlightArea'),
          }
        ](name='pos'),
        preChunkId?: string(name='preChunkId', example='89473868346'),
        score?: float(name='score', example='0.5'),
        title?: string(name='title'),
      }
    ](name='textChunkList'),
    textSearchElapsedMs?: long(name='textSearchElapsedMs', example='100'),
    totalElapsedMs?: long(name='totalElapsedMs', example='400'),
    vectorChunkList?: [ 
      {
        chunkId?: string(name='chunkId', example='8723642345276'),
        chunkMeta?: map[string]any(name='chunkMeta', example='{"a":"1"}'),
        chunkOssUrl?: string(name='chunkOssUrl', example='https://oss-xxxx-hangzhou.com/test.pdf'),
        chunkText?: string(name='chunkText'),
        chunkType?: string(name='chunkType', example='text'),
        docId?: string(name='docId', example='78326476235675372'),
        fileType?: string(name='fileType', example='pdf'),
        libraryId?: string(name='libraryId', example='djsgfsjd'),
        libraryName?: string(name='libraryName'),
        nextChunkId?: string(name='nextChunkId', example='293846872343'),
        pos?: [ 
          {
            axisArray?: [ double ](name='axisArray'),
            page?: int32(name='page', example='1'),
            textHighlightArea?: [ int32 ](name='textHighlightArea'),
          }
        ](name='pos'),
        preChunkId?: string(name='preChunkId', example='873647326542'),
        score?: float(name='score', example='0.5'),
        title?: string(name='title', example='test'),
      }
    ](name='vectorChunkList'),
    vectorSearchElapsedMs?: long(name='vectorSearchElapsedMs', example='100'),
  }(name='data'),
  dataType?: string(name='dataType', example='null'),
  errCode?: string(name='errCode', example='0'),
  message?: string(name='message', example='ok'),
  requestId?: string(name='requestId', example='0bc13a9517168617617186457e401f'),
  success?: boolean(name='success', example='true'),
  time?: string(name='time', example='2024-04-24 11:54:34'),
}

model RecallDocumentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecallDocumentResponseBody(name='body'),
}

async function recallDocument(request: RecallDocumentRequest): RecallDocumentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RecallDocument', 'POST', '/{workspaceId}/api/library/recallDocument', 'json', false, 'json', request);
}

model RunChatResultGenerationRequest {
  workspaceId: string(name='workspaceId', example='llm-xxxxx', position='Path'),
  inferenceParameters?: map[string]any(name='inferenceParameters', example='{"topP": 0.8}', position='Body'),
  messages: [ 
    {
      content?: string(name='content'),
      role?: string(name='role', example='user'),
    }
  ](name='messages', position='Body'),
  modelId: string(name='modelId', example='qwen-max', position='Body'),
  sessionId?: string(name='sessionId', example='237645726354', position='Body'),
  stream?: boolean(name='stream', example='false', position='Body'),
  tools?: [ 
    {
      function?: {
        description?: string(name='description'),
        name?: string(name='name', example='get_time'),
        parameters?: {
          properties?: map[string]any(name='properties', example='{
                            "location": {
                                "type": "string",
                                "description": "The city and state, e.g. San Francisco, CA"
                            },
                            "unit": {
                                "type": "string",
                                "enum": [
                                    "celsius",
                                    "fahrenheit"
                                ]
                            }
                        }'),
          type?: string(name='type', example='object'),
        }(name='parameters'),
        required?: [ string ](name='required'),
      }(name='function'),
      type?: string(name='type', example='function'),
    }
  ](name='tools', position='Body'),
}

model RunChatResultGenerationResponseBody = {
  choices?: [ 
    {
      finishReason?: string(name='finishReason', example='null'),
      index?: int32(name='index', example='0'),
      message?: {
        content?: string(name='content'),
        role?: string(name='role', example='user'),
        toolCalls?: [  map[string]any ](name='toolCalls'),
      }(name='message'),
    }
  ](name='choices'),
  created?: long(name='created', example='1720602203'),
  id?: string(name='id', example='eb2b6139-ddf1-91a0-a47f-df7617ae9032'),
  modelId?: string(name='modelId', example='qwen-max'),
  requestId?: string(name='requestId', example='eb2b6139-ddf1-91a0-a47f-df7617ae9032'),
  time?: string(name='time', example='2024-04-24 11:54:34'),
  totalTokens?: int32(name='totalTokens', example='500'),
  usage?: {
    imageCount?: int32(name='imageCount', example='0'),
    imageTokens?: int32(name='imageTokens', example='0'),
    inputTokens?: int32(name='inputTokens', example='200'),
    outputTokens?: int32(name='outputTokens', example='300'),
    totalTokens?: int32(name='totalTokens', example='500'),
  }(name='usage'),
}

model RunChatResultGenerationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunChatResultGenerationResponseBody(name='body'),
}

async function runChatResultGeneration(request: RunChatResultGenerationRequest): RunChatResultGenerationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunChatResultGeneration', 'POST', '/{workspaceId}/api/run/chat/generation', 'json', false, 'json', request);
}

function runChatResultGenerationWithResponseIterable(request: RunChatResultGenerationRequest): iterator[RunChatResultGenerationResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunChatResultGeneration', 'POST', '/{workspaceId}/api/run/chat/generation', 'json', false, 'json', request);
}

model RunLibraryChatGenerationRequest {
  workspaceId: string(name='workspaceId', example='llm-xxxx', position='Path'),
  docIdList?: [ string ](name='docIdList', position='Body'),
  enableFollowUp?: boolean(name='enableFollowUp', example='false', position='Body'),
  enableMultiQuery?: boolean(name='enableMultiQuery', example='false', position='Body'),
  enableOpenQa?: boolean(name='enableOpenQa', example='false', position='Body'),
  followUpLlm?: string(name='followUpLlm', example='qwen-max', position='Body'),
  libraryId: string(name='libraryId', example='3akzl28vap', position='Body'),
  llmType: string(name='llmType', example='qwen-max', position='Body'),
  multiQueryLlm?: string(name='multiQueryLlm', example='qwen-max', position='Body'),
  query: string(name='query', position='Body'),
  queryCriteria?: {
    and?: [ 
      {
        boost?: float(name='boost', example='0.5'),
        key?: string(name='key', example='city'),
        operator?: string(name='operator', example='eq'),
        value?: string(name='value'),
      }
    ](name='and'),
    or?: [ 
      {
        boost?: float(name='boost', example='0.5'),
        key?: string(name='key', example='city'),
        operator?: string(name='operator', example='eq'),
        value?: string(name='value'),
      }
    ](name='or'),
  }(name='queryCriteria', position='Body'),
  rerankType?: string(name='rerankType', example='linear', position='Body'),
  sessionId?: string(name='sessionId', description='sessionId', example='null', position='Body'),
  stream?: boolean(name='stream', example='false', position='Body'),
  subQueryList?: [ string ](name='subQueryList', position='Body'),
  textSearchParameter?: {
    limit?: int32(name='limit', example='10'),
    searchAnalyzerType?: string(name='searchAnalyzerType', example='IkMaxWord'),
  }(name='textSearchParameter', position='Body'),
  topK?: int32(name='topK', example='1', position='Body'),
  vectorSearchParameter?: {
    limit?: int32(name='limit', example='10'),
  }(name='vectorSearchParameter', position='Body'),
  withDocumentReference?: boolean(name='withDocumentReference', example='false', position='Body'),
}

model RunLibraryChatGenerationResponseBody = {
  cost?: long(name='cost', example='null'),
  data?: any(name='data'),
  dataType?: string(name='dataType', example='null'),
  errCode?: string(name='errCode', example='0'),
  message?: string(name='message', example='ok'),
  requestId?: string(name='requestId', example='5E3FBAF1-17AF-53B7-AF0A-CDCEEB6DE658'),
  success?: boolean(name='success', example='true'),
  time?: string(name='time', example='2024-04-24 11:54:34'),
}

model RunLibraryChatGenerationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunLibraryChatGenerationResponseBody(name='body'),
}

async function runLibraryChatGeneration(request: RunLibraryChatGenerationRequest): RunLibraryChatGenerationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunLibraryChatGeneration', 'POST', '/{workspaceId}/api/run/library/chat/generation', 'json', false, 'json', request);
}

function runLibraryChatGenerationWithResponseIterable(request: RunLibraryChatGenerationRequest): iterator[RunLibraryChatGenerationResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunLibraryChatGeneration', 'POST', '/{workspaceId}/api/run/library/chat/generation', 'json', false, 'json', request);
}

model UpdateDocumentRequest {
  workspaceId: string(name='workspaceId', example='llm-xxxxx', position='Path'),
  docId: string(name='docId', example='123', position='Body'),
  libraryId: string(name='libraryId', example='abc123', position='Body'),
  meta?: map[string]any(name='meta', example='{
        "businessId": "12321"
    }', position='Body'),
  title?: string(name='title', example='test', position='Body'),
}

model UpdateDocumentResponseBody = {
  cost?: long(name='cost', example='null'),
  data?: string(name='data', example='null'),
  dataType?: string(name='dataType', example='null'),
  errCode?: string(name='errCode', example='0'),
  message?: string(name='message', example='ok'),
  requestId?: string(name='requestId', example='eb2b6139-ddf1-91a0-a47f-df7617ae9032'),
  success?: boolean(name='success', example='true'),
  time?: string(name='time', example='2024-04-24 11:54:34'),
}

model UpdateDocumentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDocumentResponseBody(name='body'),
}

async function updateDocument(request: UpdateDocumentRequest): UpdateDocumentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDocument', 'POST', '/{workspaceId}/api/library/document/updateDocument', 'json', false, 'json', request);
}

model UpdateLibraryRequest {
  workspaceId: string(name='workspaceId', example='llm-xxxxx', position='Path'),
  description?: string(name='description', position='Body'),
  indexSetting?: {
    chunkStrategy?: {
      docTreeSplit?: boolean(name='docTreeSplit', example='true'),
      docTreeSplitSize?: int32(name='docTreeSplitSize', example='160'),
      enhanceGraph?: boolean(name='enhanceGraph', example='true'),
      enhanceTable?: boolean(name='enhanceTable', example='true'),
      overlap?: int32(name='overlap', example='20'),
      sentenceSplit?: boolean(name='sentenceSplit', example='true'),
      sentenceSplitSize?: int32(name='sentenceSplitSize', example='160'),
      size?: int32(name='size', example='256'),
      split?: boolean(name='split', example='true'),
    }(name='chunkStrategy'),
    modelConfig?: {
      temperature?: double(name='temperature', example='0.8'),
      topP?: double(name='topP', description='topP', example='0.8'),
    }(name='modelConfig'),
    promptRoleStyle?: string(name='promptRoleStyle'),
    queryEnhancer?: {
      enableFollowUp?: boolean(name='enableFollowUp', example='true'),
      enableMultiQuery?: boolean(name='enableMultiQuery', example='true'),
      enableOpenQa?: boolean(name='enableOpenQa', example='true'),
      enableQueryRewrite?: boolean(name='enableQueryRewrite', example='true'),
      enableSession?: boolean(name='enableSession', example='true'),
      localKnowledgeId?: string(name='localKnowledgeId', example='sjdhgfc'),
      withDocumentReference?: boolean(name='withDocumentReference', example='true'),
    }(name='queryEnhancer'),
    recallStrategy?: {
      documentRankType?: string(name='documentRankType', example='model'),
      limit?: int32(name='limit', example='10'),
    }(name='recallStrategy'),
    textIndexSetting?: {
      category?: string(name='category', example='ElasticSearch'),
      enable?: boolean(name='enable', example='true'),
      indexAnalyzer?: string(name='indexAnalyzer', example='Standard'),
      rankThreshold?: double(name='rankThreshold', example='0.5'),
      searchAnalyzer?: string(name='searchAnalyzer', example='Standard'),
      topK?: int32(name='topK', example='50'),
    }(name='textIndexSetting'),
    vectorIndexSetting?: {
      category?: string(name='category', example='ADB'),
      embeddingType?: string(name='embeddingType', example='DashScope'),
      enable?: boolean(name='enable', example='true'),
      rankThreshold?: double(name='rankThreshold', example='0.5'),
      topK?: int32(name='topK', example='10'),
    }(name='vectorIndexSetting'),
  }(name='indexSetting', position='Body'),
  libraryId: string(name='libraryId', example='dsfbashdbb', position='Body'),
  libraryName?: string(name='libraryName', position='Body'),
}

model UpdateLibraryResponseBody = {
  cost?: long(name='cost', example='null'),
  data?: string(name='data', example='null'),
  dataType?: string(name='dataType', example='null'),
  errCode?: string(name='errCode', example='0'),
  message?: string(name='message', example='ok'),
  requestId?: string(name='requestId', example='eb2b6139-ddf1-91a0-a47f-df7617ae9032'),
  success?: boolean(name='success', example='true'),
  time?: string(name='time', example='2024-04-24 11:54:34'),
}

model UpdateLibraryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLibraryResponseBody(name='body'),
}

async function updateLibrary(request: UpdateLibraryRequest): UpdateLibraryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateLibrary', 'PUT', '/{workspaceId}/api/library/update', 'json', false, 'json', request);
}

