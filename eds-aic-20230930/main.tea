/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @signatureAlgorithm = 'v2';
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('eds-aic', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DataImageRegionDistributeMapValue = {
  distributeStatus?: string(name='DistributeStatus', example='AVAILABLE'),
  progress?: string(name='Progress', example='100%'),
}

model AttachKeyPairRequest {
  instanceIds?: [ string ](name='InstanceIds'),
  keyPairId?: string(name='KeyPairId', description='This parameter is required.', example='kp-6v2q33ae4tw3a****'),
}

model AttachKeyPairResponseBody = {
  data?: {
    attachedInstanceIds?: [ string ](name='AttachedInstanceIds'),
    failCount?: int32(name='FailCount', example='0'),
    keyPairId?: string(name='KeyPairId', example='kp-6v2q33ae4tw3a****'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='69BCBBE4-FCF2-59B8-AD9D-531EB422****'),
}

model AttachKeyPairResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachKeyPairResponseBody(name='body'),
}

/**
 * @summary 绑定密钥对
 *
 * @param request AttachKeyPairRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AttachKeyPairResponse
 */
async function attachKeyPairWithOptions(request: AttachKeyPairRequest, runtime: Util.RuntimeOptions): AttachKeyPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.keyPairId)) {
    query['KeyPairId'] = request.keyPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachKeyPair',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 绑定密钥对
 *
 * @param request AttachKeyPairRequest
 * @return AttachKeyPairResponse
 */
async function attachKeyPair(request: AttachKeyPairRequest): AttachKeyPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachKeyPairWithOptions(request, runtime);
}

model AuthorizeAndroidInstanceRequest {
  androidInstanceIds?: [ string ](name='AndroidInstanceIds'),
  authorizeUserId?: string(name='AuthorizeUserId', example='test'),
  unAuthorizeUserId?: string(name='UnAuthorizeUserId', example='test'),
}

model AuthorizeAndroidInstanceResponseBody = {
  requestId?: string(name='RequestId', example='1A923337-44D9-5CAD-9A53-95084BD4****'),
}

model AuthorizeAndroidInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AuthorizeAndroidInstanceResponseBody(name='body'),
}

/**
 * @summary 为用户授权/解授权安卓实例
 *
 * @param request AuthorizeAndroidInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AuthorizeAndroidInstanceResponse
 */
async function authorizeAndroidInstanceWithOptions(request: AuthorizeAndroidInstanceRequest, runtime: Util.RuntimeOptions): AuthorizeAndroidInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.androidInstanceIds)) {
    query['AndroidInstanceIds'] = request.androidInstanceIds;
  }
  if (!Util.isUnset(request.authorizeUserId)) {
    query['AuthorizeUserId'] = request.authorizeUserId;
  }
  if (!Util.isUnset(request.unAuthorizeUserId)) {
    query['UnAuthorizeUserId'] = request.unAuthorizeUserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AuthorizeAndroidInstance',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 为用户授权/解授权安卓实例
 *
 * @param request AuthorizeAndroidInstanceRequest
 * @return AuthorizeAndroidInstanceResponse
 */
async function authorizeAndroidInstance(request: AuthorizeAndroidInstanceRequest): AuthorizeAndroidInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return authorizeAndroidInstanceWithOptions(request, runtime);
}

model BackupFileRequest {
  androidInstanceIdList?: [ string ](name='AndroidInstanceIdList', description='This parameter is required.'),
  backupFileName?: string(name='BackupFileName'),
  backupFilePath?: string(name='BackupFilePath', description='This parameter is required.'),
  description?: string(name='Description'),
  sourceAppList?: [ string ](name='SourceAppList'),
  sourceFilePathList?: [ string ](name='SourceFilePathList'),
  uploadEndpoint?: string(name='UploadEndpoint', example='oss-cn-shanghai-internal.aliyuncs.com'),
  uploadType?: string(name='UploadType', example='OSS'),
}

model BackupFileResponseBody = {
  count?: long(name='Count'),
  data?: [ 
    {
      androidInstanceId?: string(name='AndroidInstanceId'),
      backupFileId?: string(name='BackupFileId'),
      backupFileName?: string(name='BackupFileName'),
      taskId?: string(name='TaskId'),
    }
  ](name='Data', example='6C8439B9-7DBF-57F4-92AE-55A9B9D3****'),
  requestId?: string(name='RequestId', example='6C8439B9-7DBF-57F4-92AE-55A9B9D3****'),
  taskId?: string(name='TaskId'),
}

model BackupFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BackupFileResponseBody(name='body'),
}

/**
 * @summary 数据备份
 *
 * @param request BackupFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BackupFileResponse
 */
async function backupFileWithOptions(request: BackupFileRequest, runtime: Util.RuntimeOptions): BackupFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.androidInstanceIdList)) {
    query['AndroidInstanceIdList'] = request.androidInstanceIdList;
  }
  if (!Util.isUnset(request.backupFileName)) {
    query['BackupFileName'] = request.backupFileName;
  }
  if (!Util.isUnset(request.backupFilePath)) {
    query['BackupFilePath'] = request.backupFilePath;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.sourceAppList)) {
    query['SourceAppList'] = request.sourceAppList;
  }
  if (!Util.isUnset(request.sourceFilePathList)) {
    query['SourceFilePathList'] = request.sourceFilePathList;
  }
  if (!Util.isUnset(request.uploadEndpoint)) {
    query['UploadEndpoint'] = request.uploadEndpoint;
  }
  if (!Util.isUnset(request.uploadType)) {
    query['UploadType'] = request.uploadType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BackupFile',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 数据备份
 *
 * @param request BackupFileRequest
 * @return BackupFileResponse
 */
async function backupFile(request: BackupFileRequest): BackupFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return backupFileWithOptions(request, runtime);
}

model CheckResourceStockRequest {
  acpSpecId?: string(name='AcpSpecId', example='acp.basic.small'),
  amount?: int32(name='Amount'),
  bizRegionId?: string(name='BizRegionId', description='This parameter is required.', example='cn-hangzhou'),
  gpuAcceleration?: boolean(name='GpuAcceleration'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-i'),
}

model CheckResourceStockResponseBody = {
  requestId?: string(name='RequestId', example='805D8FB6-512A-531C-9E4D-2A807D3C****'),
  resourceStockModels?: [ 
    {
      regionId?: string(name='RegionId', example='cn-shanghai'),
      stockStatus?: string(name='StockStatus', example='Available'),
      zoneId?: string(name='ZoneId', example='cn-shanghai-b'),
    }
  ](name='ResourceStockModels'),
}

model CheckResourceStockResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckResourceStockResponseBody(name='body'),
}

/**
 * @summary 检查资源库存
 *
 * @param request CheckResourceStockRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckResourceStockResponse
 */
async function checkResourceStockWithOptions(request: CheckResourceStockRequest, runtime: Util.RuntimeOptions): CheckResourceStockResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acpSpecId)) {
    query['AcpSpecId'] = request.acpSpecId;
  }
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.bizRegionId)) {
    query['BizRegionId'] = request.bizRegionId;
  }
  if (!Util.isUnset(request.gpuAcceleration)) {
    query['GpuAcceleration'] = request.gpuAcceleration;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckResourceStock',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 检查资源库存
 *
 * @param request CheckResourceStockRequest
 * @return CheckResourceStockResponse
 */
async function checkResourceStock(request: CheckResourceStockRequest): CheckResourceStockResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkResourceStockWithOptions(request, runtime);
}

model CreateAndroidInstanceGroupRequest {
  amount?: int32(name='Amount'),
  autoPay?: boolean(name='AutoPay', example='false'),
  autoRenew?: boolean(name='AutoRenew', example='false'),
  bizRegionId?: string(name='BizRegionId', description='This parameter is required.', example='cn-hangzhou'),
  chargeType?: string(name='ChargeType', example='PostPaid'),
  clientToken?: string(name='ClientToken'),
  gpuAcceleration?: boolean(name='GpuAcceleration'),
  imageId?: string(name='ImageId', description='This parameter is required.', example='imgc-06zyt9m93zwax****'),
  instanceGroupName?: string(name='InstanceGroupName'),
  instanceGroupSpec?: string(name='InstanceGroupSpec', description='This parameter is required.', example='acp.basic.small'),
  keyPairId?: string(name='KeyPairId'),
  numberOfInstances?: int32(name='NumberOfInstances', example='1'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-745976****'),
  period?: int32(name='Period', example='1'),
  periodUnit?: string(name='PeriodUnit', example='Month'),
  policyGroupId?: string(name='PolicyGroupId', description='This parameter is required.', example='pg-b7bxrrwxkijjh****'),
  vSwitchId?: string(name='VSwitchId', example='vsw-uf61uvzhz8ejaw776****'),
}

model CreateAndroidInstanceGroupResponseBody = {
  instanceGroupIds?: [ string ](name='InstanceGroupIds'),
  instanceGroupInfos?: [ 
    {
      instanceGroupId?: string(name='InstanceGroupId'),
      instanceIds?: [ string ](name='InstanceIds'),
    }
  ](name='InstanceGroupInfos'),
  orderId?: string(name='OrderId', example='22365781890****'),
  requestId?: string(name='RequestId', example='1A923337-44D9-5CAD-9A53-95084BD4****'),
}

model CreateAndroidInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAndroidInstanceGroupResponseBody(name='body'),
}

/**
 * @summary 创建安卓实例组
 *
 * @param request CreateAndroidInstanceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAndroidInstanceGroupResponse
 */
async function createAndroidInstanceGroupWithOptions(request: CreateAndroidInstanceGroupRequest, runtime: Util.RuntimeOptions): CreateAndroidInstanceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.bizRegionId)) {
    query['BizRegionId'] = request.bizRegionId;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.gpuAcceleration)) {
    query['GpuAcceleration'] = request.gpuAcceleration;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.instanceGroupName)) {
    query['InstanceGroupName'] = request.instanceGroupName;
  }
  if (!Util.isUnset(request.instanceGroupSpec)) {
    query['InstanceGroupSpec'] = request.instanceGroupSpec;
  }
  if (!Util.isUnset(request.keyPairId)) {
    query['KeyPairId'] = request.keyPairId;
  }
  if (!Util.isUnset(request.numberOfInstances)) {
    query['NumberOfInstances'] = request.numberOfInstances;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAndroidInstanceGroup',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建安卓实例组
 *
 * @param request CreateAndroidInstanceGroupRequest
 * @return CreateAndroidInstanceGroupResponse
 */
async function createAndroidInstanceGroup(request: CreateAndroidInstanceGroupRequest): CreateAndroidInstanceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAndroidInstanceGroupWithOptions(request, runtime);
}

model CreateAppRequest {
  appName?: string(name='AppName'),
  bizRegionId?: string(name='BizRegionId'),
  description?: string(name='Description'),
  fileName?: string(name='FileName', example='testApp.apk'),
  filePath?: string(name='FilePath'),
  iconUrl?: string(name='IconUrl', example='https://test.png'),
  installParam?: string(name='InstallParam', example='-d'),
  ossAppUrl?: string(name='OssAppUrl', example='http://testApp.apk'),
}

model CreateAppResponseBody = {
  appId?: int32(name='AppId', example='1234'),
  requestId?: string(name='RequestId', example='E5138F7E-46B5-526A-8C99-82DEAE6B****'),
}

model CreateAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppResponseBody(name='body'),
}

/**
 * @param request CreateAppRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAppResponse
 */
async function createAppWithOptions(request: CreateAppRequest, runtime: Util.RuntimeOptions): CreateAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.bizRegionId)) {
    query['BizRegionId'] = request.bizRegionId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.filePath)) {
    query['FilePath'] = request.filePath;
  }
  if (!Util.isUnset(request.iconUrl)) {
    query['IconUrl'] = request.iconUrl;
  }
  if (!Util.isUnset(request.installParam)) {
    query['InstallParam'] = request.installParam;
  }
  if (!Util.isUnset(request.ossAppUrl)) {
    query['OssAppUrl'] = request.ossAppUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateApp',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateAppRequest
 * @return CreateAppResponse
 */
async function createApp(request: CreateAppRequest): CreateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppWithOptions(request, runtime);
}

model CreateCustomImageRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description', example='create for cc5g group auth rules test'),
  imageName?: string(name='ImageName', description='This parameter is required.', example='custom image name'),
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='acp-2zecay9ponatdc4m****'),
}

model CreateCustomImageResponseBody = {
  imageId?: string(name='ImageId'),
  requestId?: string(name='RequestId', example='20393E53-8FF1-524C-B494-B478A5369733'),
}

model CreateCustomImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCustomImageResponseBody(name='body'),
}

/**
 * @summary 创建自定义镜像
 *
 * @param request CreateCustomImageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateCustomImageResponse
 */
async function createCustomImageWithOptions(request: CreateCustomImageRequest, runtime: Util.RuntimeOptions): CreateCustomImageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.imageName)) {
    body['ImageName'] = request.imageName;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateCustomImage',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建自定义镜像
 *
 * @param request CreateCustomImageRequest
 * @return CreateCustomImageResponse
 */
async function createCustomImage(request: CreateCustomImageRequest): CreateCustomImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCustomImageWithOptions(request, runtime);
}

model CreateKeyPairRequest {
  keyPairName?: string(name='KeyPairName', description='This parameter is required.', example='testKeyPairName'),
}

model CreateKeyPairResponseBody = {
  data?: {
    gmtCreated?: string(name='GmtCreated', example='2024-06-30 08:45:09.0'),
    keyPairId?: string(name='KeyPairId', example='kp-6v2q33ae4tw3*****'),
    keyPairName?: string(name='KeyPairName', example='testKeyPairName'),
    privateKeyBody?: string(name='PrivateKeyBody', example='MIIEpAIBAAKCAQEAtReyMzLIcBH78EV2zj****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='69BCBBE4-FCF2-59B8-AD9D-531EB422****'),
}

model CreateKeyPairResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateKeyPairResponseBody(name='body'),
}

/**
 * @summary 创建密钥对
 *
 * @param request CreateKeyPairRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateKeyPairResponse
 */
async function createKeyPairWithOptions(request: CreateKeyPairRequest, runtime: Util.RuntimeOptions): CreateKeyPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateKeyPair',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建密钥对
 *
 * @param request CreateKeyPairRequest
 * @return CreateKeyPairResponse
 */
async function createKeyPair(request: CreateKeyPairRequest): CreateKeyPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return createKeyPairWithOptions(request, runtime);
}

model CreatePolicyGroupRequest {
  cameraRedirect?: string(name='CameraRedirect', example='off'),
  clipboard?: string(name='Clipboard', example='readwrite'),
  html5FileTransfer?: string(name='Html5FileTransfer', example='off'),
  localDrive?: string(name='LocalDrive', example='off'),
  lockResolution?: string(name='LockResolution'),
  netRedirectPolicy?: {
    customProxy?: string(name='CustomProxy'),
    hostAddr?: string(name='HostAddr'),
    netRedirect?: string(name='NetRedirect'),
    port?: string(name='Port'),
    proxyPassword?: string(name='ProxyPassword'),
    proxyType?: string(name='ProxyType'),
    proxyUserName?: string(name='ProxyUserName'),
  }(name='NetRedirectPolicy'),
  policyGroupName?: string(name='PolicyGroupName'),
  resolutionHeight?: int32(name='ResolutionHeight', example='1280'),
  resolutionWidth?: int32(name='ResolutionWidth', example='720'),
}

model CreatePolicyGroupShrinkRequest {
  cameraRedirect?: string(name='CameraRedirect', example='off'),
  clipboard?: string(name='Clipboard', example='readwrite'),
  html5FileTransfer?: string(name='Html5FileTransfer', example='off'),
  localDrive?: string(name='LocalDrive', example='off'),
  lockResolution?: string(name='LockResolution'),
  netRedirectPolicyShrink?: string(name='NetRedirectPolicy'),
  policyGroupName?: string(name='PolicyGroupName'),
  resolutionHeight?: int32(name='ResolutionHeight', example='1280'),
  resolutionWidth?: int32(name='ResolutionWidth', example='720'),
}

model CreatePolicyGroupResponseBody = {
  policyGroupId?: string(name='PolicyGroupId', example='pg-exbuu6yrpvb******'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC******'),
}

model CreatePolicyGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePolicyGroupResponseBody(name='body'),
}

/**
 * @summary 创建策略
 *
 * @param tmpReq CreatePolicyGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreatePolicyGroupResponse
 */
async function createPolicyGroupWithOptions(tmpReq: CreatePolicyGroupRequest, runtime: Util.RuntimeOptions): CreatePolicyGroupResponse {
  Util.validateModel(tmpReq);
  var request = new CreatePolicyGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.netRedirectPolicy)) {
    request.netRedirectPolicyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.netRedirectPolicy, 'NetRedirectPolicy', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.cameraRedirect)) {
    body['CameraRedirect'] = request.cameraRedirect;
  }
  if (!Util.isUnset(request.clipboard)) {
    body['Clipboard'] = request.clipboard;
  }
  if (!Util.isUnset(request.html5FileTransfer)) {
    body['Html5FileTransfer'] = request.html5FileTransfer;
  }
  if (!Util.isUnset(request.localDrive)) {
    body['LocalDrive'] = request.localDrive;
  }
  if (!Util.isUnset(request.lockResolution)) {
    body['LockResolution'] = request.lockResolution;
  }
  if (!Util.isUnset(request.netRedirectPolicyShrink)) {
    body['NetRedirectPolicy'] = request.netRedirectPolicyShrink;
  }
  if (!Util.isUnset(request.policyGroupName)) {
    body['PolicyGroupName'] = request.policyGroupName;
  }
  if (!Util.isUnset(request.resolutionHeight)) {
    body['ResolutionHeight'] = request.resolutionHeight;
  }
  if (!Util.isUnset(request.resolutionWidth)) {
    body['ResolutionWidth'] = request.resolutionWidth;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreatePolicyGroup',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建策略
 *
 * @param request CreatePolicyGroupRequest
 * @return CreatePolicyGroupResponse
 */
async function createPolicyGroup(request: CreatePolicyGroupRequest): CreatePolicyGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPolicyGroupWithOptions(request, runtime);
}

model DeleteAndroidInstanceGroupRequest {
  instanceGroupIds?: [ string ](name='InstanceGroupIds'),
}

model DeleteAndroidInstanceGroupResponseBody = {
  requestId?: string(name='RequestId', example='CB95E410-FD1D-53C5-9F7D-93CC44D7****'),
}

model DeleteAndroidInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAndroidInstanceGroupResponseBody(name='body'),
}

/**
 * @summary 删除安卓实例组
 *
 * @param request DeleteAndroidInstanceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAndroidInstanceGroupResponse
 */
async function deleteAndroidInstanceGroupWithOptions(request: DeleteAndroidInstanceGroupRequest, runtime: Util.RuntimeOptions): DeleteAndroidInstanceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceGroupIds)) {
    query['InstanceGroupIds'] = request.instanceGroupIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAndroidInstanceGroup',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除安卓实例组
 *
 * @param request DeleteAndroidInstanceGroupRequest
 * @return DeleteAndroidInstanceGroupResponse
 */
async function deleteAndroidInstanceGroup(request: DeleteAndroidInstanceGroupRequest): DeleteAndroidInstanceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAndroidInstanceGroupWithOptions(request, runtime);
}

model DeleteAppsRequest {
  appIdList?: [ string ](name='AppIdList'),
}

model DeleteAppsResponseBody = {
  requestId?: string(name='RequestId', example='310A783E-CC46-5452-A8A3-71AE5DB5****'),
}

model DeleteAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppsResponseBody(name='body'),
}

/**
 * @summary 删除app
 *
 * @param request DeleteAppsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAppsResponse
 */
async function deleteAppsWithOptions(request: DeleteAppsRequest, runtime: Util.RuntimeOptions): DeleteAppsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appIdList)) {
    query['AppIdList'] = request.appIdList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteApps',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除app
 *
 * @param request DeleteAppsRequest
 * @return DeleteAppsResponse
 */
async function deleteApps(request: DeleteAppsRequest): DeleteAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAppsWithOptions(request, runtime);
}

model DeleteImagesRequest {
  imageIds?: [ string ](name='ImageIds', description='This parameter is required.'),
}

model DeleteImagesShrinkRequest {
  imageIdsShrink?: string(name='ImageIds', description='This parameter is required.'),
}

model DeleteImagesResponseBody = {
  data?: {
    failDeleteImageIds?: [ string ](name='FailDeleteImageIds'),
    successDeleteImageIds?: [ string ](name='SuccessDeleteImageIds'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='4610632D-D661-5982-B3D7-5D3FD183F595'),
}

model DeleteImagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteImagesResponseBody(name='body'),
}

/**
 * @param tmpReq DeleteImagesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteImagesResponse
 */
async function deleteImagesWithOptions(tmpReq: DeleteImagesRequest, runtime: Util.RuntimeOptions): DeleteImagesResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteImagesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.imageIds)) {
    request.imageIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.imageIds, 'ImageIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.imageIdsShrink)) {
    body['ImageIds'] = request.imageIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteImages',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DeleteImagesRequest
 * @return DeleteImagesResponse
 */
async function deleteImages(request: DeleteImagesRequest): DeleteImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteImagesWithOptions(request, runtime);
}

model DeleteKeyPairsRequest {
  keyPairIds?: [ string ](name='KeyPairIds'),
}

model DeleteKeyPairsResponseBody = {
  requestId?: string(name='RequestId', example='5C5CEF0A-D6E1-58D3-8750-67DB4F82****'),
}

model DeleteKeyPairsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteKeyPairsResponseBody(name='body'),
}

/**
 * @summary 删除密钥对
 *
 * @param request DeleteKeyPairsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteKeyPairsResponse
 */
async function deleteKeyPairsWithOptions(request: DeleteKeyPairsRequest, runtime: Util.RuntimeOptions): DeleteKeyPairsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyPairIds)) {
    query['KeyPairIds'] = request.keyPairIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteKeyPairs',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除密钥对
 *
 * @param request DeleteKeyPairsRequest
 * @return DeleteKeyPairsResponse
 */
async function deleteKeyPairs(request: DeleteKeyPairsRequest): DeleteKeyPairsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteKeyPairsWithOptions(request, runtime);
}

model DeletePolicyGroupRequest {
  policyGroupIds?: [ string ](name='PolicyGroupIds', description='This parameter is required.'),
}

model DeletePolicyGroupResponseBody = {
  requestId?: string(name='RequestId', example='17C731AB-AAEE-5844-A352-D8D0352D3F0B'),
}

model DeletePolicyGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePolicyGroupResponseBody(name='body'),
}

/**
 * @summary 删除策略
 *
 * @param request DeletePolicyGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeletePolicyGroupResponse
 */
async function deletePolicyGroupWithOptions(request: DeletePolicyGroupRequest, runtime: Util.RuntimeOptions): DeletePolicyGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyGroupIds)) {
    query['PolicyGroupIds'] = request.policyGroupIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePolicyGroup',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除策略
 *
 * @param request DeletePolicyGroupRequest
 * @return DeletePolicyGroupResponse
 */
async function deletePolicyGroup(request: DeletePolicyGroupRequest): DeletePolicyGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePolicyGroupWithOptions(request, runtime);
}

model DescribeAndroidInstanceGroupsRequest {
  bizRegionId?: string(name='BizRegionId', example='cn-hangzhou'),
  chargeType?: string(name='ChargeType', example='PostPaid'),
  instanceGroupIds?: [ string ](name='InstanceGroupIds'),
  instanceGroupName?: string(name='InstanceGroupName'),
  keyPairId?: string(name='KeyPairId', example='kp-5htf0ymsrnb7q****'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6l5V9uONHqPtDLM2U8s****'),
  policyGroupId?: string(name='PolicyGroupId', example='pg-1b77w6xrqfubi****'),
  saleMode?: string(name='SaleMode', example='standard'),
  status?: string(name='Status', example='CREATING'),
}

model DescribeAndroidInstanceGroupsResponseBody = {
  instanceGroupModel?: [ 
    {
      appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-48xr63m4dybjk****'),
      architectureType?: string(name='ArchitectureType', example='ARM'),
      availableInstanceAmount?: int32(name='AvailableInstanceAmount'),
      chargeType?: string(name='ChargeType', example='PrePaid'),
      cpu?: string(name='Cpu', example='8'),
      disks?: [ 
        {
          diskSize?: int32(name='DiskSize', example='32'),
          diskType?: string(name='DiskType', example='SYSTEM'),
        }
      ](name='Disks'),
      errorCode?: string(name='ErrorCode'),
      gmtCreate?: string(name='GmtCreate', example='2024-02-01 10:56:36'),
      gmtExpired?: string(name='GmtExpired', example='2027-06-29 07:25:31'),
      gmtModified?: string(name='GmtModified', example='2024-02-01 10:56:36'),
      imageId?: string(name='ImageId', example='imgc-06zyt9m93zwax****'),
      installedAppList?: string(name='InstalledAppList'),
      instanceGroupId?: string(name='InstanceGroupId', example='ag-h67a2cs0zprfdh****'),
      instanceGroupName?: string(name='InstanceGroupName'),
      instanceGroupSpec?: string(name='InstanceGroupSpec', example='acp.basic.small'),
      instanceGroupSpecDescribe?: string(name='InstanceGroupSpecDescribe', example='ARM-2vCPU4GiB 32GiB'),
      instanceGroupStatus?: string(name='InstanceGroupStatus', example='RUNNING'),
      memory?: int32(name='Memory', example='8'),
      numberOfInstances?: string(name='NumberOfInstances', example='10'),
      officeSiteId?: string(name='OfficeSiteId', example='cn-shanghai+dir-030598****'),
      policyGroupId?: string(name='PolicyGroupId', example='pg-c6n38xucps8kl****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      renderingType?: string(name='RenderingType'),
      resolutionHeight?: int32(name='ResolutionHeight', example='1280'),
      resolutionWidth?: int32(name='ResolutionWidth', example='720'),
      saleMode?: string(name='SaleMode', example='standard'),
      systemVersion?: string(name='SystemVersion', example='Android 12'),
      vSwitchId?: string(name='VSwitchId', example='vsw-t4n0yqs009ho024wt****'),
    }
  ](name='InstanceGroupModel'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6l5V9uONHqPtDLM2U8s****'),
  requestId?: string(name='RequestId', example='F07A1DA1-E1EB-5CCA-8EED-12F85D32****'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model DescribeAndroidInstanceGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAndroidInstanceGroupsResponseBody(name='body'),
}

/**
 * @summary 查询实例组
 *
 * @param request DescribeAndroidInstanceGroupsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAndroidInstanceGroupsResponse
 */
async function describeAndroidInstanceGroupsWithOptions(request: DescribeAndroidInstanceGroupsRequest, runtime: Util.RuntimeOptions): DescribeAndroidInstanceGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizRegionId)) {
    query['BizRegionId'] = request.bizRegionId;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.instanceGroupIds)) {
    query['InstanceGroupIds'] = request.instanceGroupIds;
  }
  if (!Util.isUnset(request.instanceGroupName)) {
    query['InstanceGroupName'] = request.instanceGroupName;
  }
  if (!Util.isUnset(request.keyPairId)) {
    query['KeyPairId'] = request.keyPairId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.saleMode)) {
    query['SaleMode'] = request.saleMode;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAndroidInstanceGroups',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询实例组
 *
 * @param request DescribeAndroidInstanceGroupsRequest
 * @return DescribeAndroidInstanceGroupsResponse
 */
async function describeAndroidInstanceGroups(request: DescribeAndroidInstanceGroupsRequest): DescribeAndroidInstanceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAndroidInstanceGroupsWithOptions(request, runtime);
}

model DescribeAndroidInstancesRequest {
  androidInstanceIds?: [ string ](name='AndroidInstanceIds'),
  androidInstanceName?: string(name='AndroidInstanceName', example='name'),
  bizRegionId?: string(name='BizRegionId'),
  chargeType?: string(name='ChargeType'),
  instanceGroupId?: string(name='InstanceGroupId', example='ag-25nt4kk9whjh****'),
  instanceGroupIds?: [ string ](name='InstanceGroupIds'),
  instanceGroupName?: string(name='InstanceGroupName'),
  keyPairId?: string(name='KeyPairId', example='kp-5hh431emkpuoi****'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6kw9dGL5jves2FS9RLq****'),
  saleMode?: string(name='SaleMode', example='standard'),
  status?: string(name='Status', example='RUNNING'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeAndroidInstancesResponseBody = {
  instanceModel?: [ 
    {
      androidInstanceGroupId?: string(name='AndroidInstanceGroupId', example='ag-ayyhomlal7po****'),
      androidInstanceGroupName?: string(name='AndroidInstanceGroupName'),
      androidInstanceId?: string(name='AndroidInstanceId', example='acp-8at8h6ejkadjh****'),
      androidInstanceName?: string(name='AndroidInstanceName', example='name'),
      androidInstanceStatus?: string(name='AndroidInstanceStatus', example='RUNNING'),
      appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-i7yv6tkn7kh8dv****'),
      appInstanceId?: string(name='AppInstanceId', example='ai-9ey6io0q58rcd****'),
      authorizedUserId?: string(name='AuthorizedUserId', example='test'),
      bindUserId?: string(name='BindUserId', example='test'),
      chargeType?: string(name='ChargeType'),
      cpu?: string(name='Cpu'),
      disks?: [ 
        {
          diskSize?: int32(name='DiskSize'),
          diskType?: string(name='DiskType'),
        }
      ](name='Disks'),
      errorCode?: string(name='ErrorCode', example='FilePathNotFound'),
      gmtCreate?: string(name='GmtCreate', example='2023-05-06 10:42:10'),
      gmtExpired?: string(name='GmtExpired'),
      gmtModified?: string(name='GmtModified', example='2023-05-06 10:42:10'),
      instanceType?: string(name='InstanceType'),
      keyPairId?: string(name='KeyPairId', example='kp-5hh431emkpucs****'),
      memory?: int32(name='Memory'),
      networkInterfaceIp?: string(name='NetworkInterfaceIp', example='192.168.22.48'),
      officeSiteId?: string(name='OfficeSiteId'),
      persistentAppInstanceId?: string(name='PersistentAppInstanceId', example='p-0btrd5zj8epo****'),
      policyGroupId?: string(name='PolicyGroupId'),
      rate?: int32(name='Rate', example='100'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      renderingType?: string(name='RenderingType'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
    }
  ](name='InstanceModel'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6kmma/xxE9WtwL/ADvZ****'),
  requestId?: string(name='RequestId', example='F07A1DA1-E1EB-5CCA-8EED-12F85D32****'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model DescribeAndroidInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAndroidInstancesResponseBody(name='body'),
}

/**
 * @summary 查询安卓实例列表
 *
 * @param request DescribeAndroidInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAndroidInstancesResponse
 */
async function describeAndroidInstancesWithOptions(request: DescribeAndroidInstancesRequest, runtime: Util.RuntimeOptions): DescribeAndroidInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.androidInstanceIds)) {
    query['AndroidInstanceIds'] = request.androidInstanceIds;
  }
  if (!Util.isUnset(request.androidInstanceName)) {
    query['AndroidInstanceName'] = request.androidInstanceName;
  }
  if (!Util.isUnset(request.bizRegionId)) {
    query['BizRegionId'] = request.bizRegionId;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.instanceGroupId)) {
    query['InstanceGroupId'] = request.instanceGroupId;
  }
  if (!Util.isUnset(request.instanceGroupIds)) {
    query['InstanceGroupIds'] = request.instanceGroupIds;
  }
  if (!Util.isUnset(request.instanceGroupName)) {
    query['InstanceGroupName'] = request.instanceGroupName;
  }
  if (!Util.isUnset(request.keyPairId)) {
    query['KeyPairId'] = request.keyPairId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.saleMode)) {
    query['SaleMode'] = request.saleMode;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAndroidInstances',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询安卓实例列表
 *
 * @param request DescribeAndroidInstancesRequest
 * @return DescribeAndroidInstancesResponse
 */
async function describeAndroidInstances(request: DescribeAndroidInstancesRequest): DescribeAndroidInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAndroidInstancesWithOptions(request, runtime);
}

model DescribeAppsRequest {
  appIdList?: [ string ](name='AppIdList'),
  appName?: string(name='AppName'),
  bizRegionId?: string(name='BizRegionId'),
  installationStatus?: string(name='InstallationStatus', example='INSTALLING'),
  MD5?: string(name='MD5'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6kU+SQXzm0H9mu/FiSc****'),
  status?: string(name='Status', example='NORMAL'),
}

model DescribeAppsResponseBody = {
  data?: [ 
    {
      androidAppVersion?: string(name='AndroidAppVersion', example='1.0.0'),
      apkSize?: string(name='ApkSize'),
      appId?: int32(name='AppId', example='10404'),
      appName?: string(name='AppName', example='testapp'),
      bizRegionId?: string(name='BizRegionId'),
      description?: string(name='Description'),
      gmtCreate?: string(name='GmtCreate', example='2022-08-11 17:45:03'),
      gmtModified?: string(name='GmtModified', example='2022-08-11 17:45:03'),
      iconUrl?: string(name='IconUrl', example='https://test.png'),
      installationStatus?: string(name='InstallationStatus', example='INSTALLING'),
      instanceGroupList?: [ string ](name='InstanceGroupList'),
      MD5?: string(name='MD5'),
      packageName?: string(name='PackageName'),
      status?: string(name='Status', example='NORMAL'),
    }
  ](name='Data'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6l5V9uON****'),
  requestId?: string(name='RequestId', example='CB95E410-FD1D-53C5-9F7D-93CC44D7****'),
  totalCount?: string(name='TotalCount', example='10'),
}

model DescribeAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppsResponseBody(name='body'),
}

/**
 * @summary 查询app
 *
 * @param request DescribeAppsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAppsResponse
 */
async function describeAppsWithOptions(request: DescribeAppsRequest, runtime: Util.RuntimeOptions): DescribeAppsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appIdList)) {
    query['AppIdList'] = request.appIdList;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.bizRegionId)) {
    query['BizRegionId'] = request.bizRegionId;
  }
  if (!Util.isUnset(request.installationStatus)) {
    query['InstallationStatus'] = request.installationStatus;
  }
  if (!Util.isUnset(request.MD5)) {
    query['MD5'] = request.MD5;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApps',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询app
 *
 * @param request DescribeAppsRequest
 * @return DescribeAppsResponse
 */
async function describeApps(request: DescribeAppsRequest): DescribeAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppsWithOptions(request, runtime);
}

model DescribeBackupFilesRequest {
  androidInstanceId?: string(name='AndroidInstanceId', example='acp-34pqe4r0kd9kn****'),
  androidInstanceName?: string(name='AndroidInstanceName', example='acp-34pqe4r0kd9kn****'),
  backupFileId?: string(name='BackupFileId', example='bf-dxrh5jrv0zpb8****'),
  backupFileName?: string(name='BackupFileName'),
  description?: string(name='Description'),
  endTime?: string(name='EndTime', example='2024-05-20 10:00:00'),
  endUserId?: string(name='EndUserId', example='test1'),
  instanceGroupId?: string(name='InstanceGroupId', example='ag-fxdx91jsfyiy3****'),
  maxResults?: long(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6l5V9uON****'),
  startTime?: string(name='StartTime', example='2024-05-23 10:00:00'),
  statusList?: [ string ](name='StatusList'),
}

model DescribeBackupFilesResponseBody = {
  data?: [ 
    {
      androidInstanceId?: string(name='AndroidInstanceId', example='acp-34pqe4r0kd9kn****'),
      androidInstanceName?: string(name='AndroidInstanceName'),
      backupFileId?: string(name='BackupFileId', example='bf-b0qbg3pbpjkn7****'),
      backupFileName?: string(name='BackupFileName', example='a-58ftsoo90p0qa****.ab'),
      backupFilePath?: string(name='BackupFilePath', example='oss://cloudphone-saved-bucket-cn-shanghai/backup/aic-58ftsoo90p0qa****.ab'),
      description?: string(name='Description'),
      endUserId?: string(name='EndUserId', example='test'),
      fileSize?: long(name='FileSize', example='10227168'),
      gmtCreated?: string(name='GmtCreated', example='2024-05-15 17:33:59'),
      gmtModified?: string(name='GmtModified', example='2024-05-15 17:33:59'),
      instanceGroupId?: string(name='InstanceGroupId', example='ag-58ftsoo90p0qi****'),
      regionId?: string(name='RegionId'),
      sourceAppInfoList?: [ string ](name='SourceAppInfoList'),
      sourceFilePathList?: [ string ](name='SourceFilePathList'),
      status?: string(name='Status', example='AVAILABLE'),
      taskId?: string(name='TaskId'),
      uploadEndpoint?: string(name='UploadEndpoint', example='oss-cn-hangzhou.aliyuncs.com'),
      uploadType?: string(name='UploadType', example='OSS'),
    }
  ](name='Data'),
  maxResults?: string(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6l5V9uON****'),
  requestId?: string(name='RequestId', example='425F351C-3F8E-5218-A520-B6311D0D****'),
  totalCount?: long(name='TotalCount', example='91'),
}

model DescribeBackupFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBackupFilesResponseBody(name='body'),
}

/**
 * @param request DescribeBackupFilesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeBackupFilesResponse
 */
async function describeBackupFilesWithOptions(request: DescribeBackupFilesRequest, runtime: Util.RuntimeOptions): DescribeBackupFilesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.androidInstanceId)) {
    query['AndroidInstanceId'] = request.androidInstanceId;
  }
  if (!Util.isUnset(request.androidInstanceName)) {
    query['AndroidInstanceName'] = request.androidInstanceName;
  }
  if (!Util.isUnset(request.backupFileId)) {
    query['BackupFileId'] = request.backupFileId;
  }
  if (!Util.isUnset(request.backupFileName)) {
    query['BackupFileName'] = request.backupFileName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.instanceGroupId)) {
    query['InstanceGroupId'] = request.instanceGroupId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.statusList)) {
    query['StatusList'] = request.statusList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackupFiles',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DescribeBackupFilesRequest
 * @return DescribeBackupFilesResponse
 */
async function describeBackupFiles(request: DescribeBackupFilesRequest): DescribeBackupFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupFilesWithOptions(request, runtime);
}

model DescribeImageListRequest {
  imageId?: string(name='ImageId', example='imgc-075cllfeuazh0****'),
  imageName?: string(name='ImageName'),
  imageType?: string(name='ImageType', description='This parameter is required.', example='System'),
  maxResults?: int32(name='MaxResults', example='20', nullable=true),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6kw9dGL5jves2FS9RLq****'),
  status?: string(name='Status', example='AVAILABLE'),
}

model DescribeImageListResponseBody = {
  data?: [ 
    {
      aliUid?: long(name='AliUid', example='117819727354****'),
      description?: string(name='Description', example='description'),
      gmtCreate?: string(name='GmtCreate', example='2024-02-01 10:56:36'),
      gmtModified?: string(name='GmtModified', example='2024-02-01 10:56:36'),
      imageId?: string(name='ImageId', example='imgc-075cllfeuazh****'),
      imageName?: string(name='ImageName', example='IMAGE'),
      imageRegionDistributeMap?: map[string]DataImageRegionDistributeMapValue(name='ImageRegionDistributeMap'),
      imageRegionList?: [ string ](name='ImageRegionList'),
      imageType?: string(name='ImageType', example='System'),
      language?: string(name='Language', example='zh'),
      releaseTime?: string(name='ReleaseTime'),
      renderingType?: string(name='RenderingType'),
      status?: string(name='Status', example='AVAILABLE'),
      systemType?: string(name='SystemType', example='Android 12'),
    }
  ](name='Data'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6l5V9uON****'),
  requestId?: string(name='RequestId', example='620740FF-492F-5956-B1BA-361E966C0269'),
  totalCount?: int32(name='TotalCount', example='30'),
}

model DescribeImageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeImageListResponseBody(name='body'),
}

/**
 * @param request DescribeImageListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeImageListResponse
 */
async function describeImageListWithOptions(request: DescribeImageListRequest, runtime: Util.RuntimeOptions): DescribeImageListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.imageId)) {
    body['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.imageName)) {
    body['ImageName'] = request.imageName;
  }
  if (!Util.isUnset(request.imageType)) {
    body['ImageType'] = request.imageType;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageList',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DescribeImageListRequest
 * @return DescribeImageListResponse
 */
async function describeImageList(request: DescribeImageListRequest): DescribeImageListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageListWithOptions(request, runtime);
}

model DescribeInvocationsRequest {
  instanceIds?: [ string ](name='InstanceIds', description='This parameter is required.'),
  invocationId?: string(name='InvocationId', description='This parameter is required.', example='t-4e98eeb5****'),
}

model DescribeInvocationsResponseBody = {
  data?: [ 
    {
      finishTime?: string(name='FinishTime', example='2022-08-11 17:45:03'),
      instanceId?: string(name='InstanceId', example='acp-uto81vfd8t8z****'),
      invocationId?: string(name='InvocationId', example='t-15775dc8****'),
      invocationStatus?: string(name='InvocationStatus', example='RUNNING'),
      output?: string(name='Output', example='success'),
      startTime?: string(name='StartTime', example='2022-08-11 17:45:03'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='440D7342-5E7C-B2DB-D0B4EAC2BDF1****'),
  totalCount?: string(name='TotalCount', example='10'),
}

model DescribeInvocationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInvocationsResponseBody(name='body'),
}

/**
 * @summary 查询命令结果
 *
 * @param request DescribeInvocationsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInvocationsResponse
 */
async function describeInvocationsWithOptions(request: DescribeInvocationsRequest, runtime: Util.RuntimeOptions): DescribeInvocationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.invocationId)) {
    query['InvocationId'] = request.invocationId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInvocations',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询命令结果
 *
 * @param request DescribeInvocationsRequest
 * @return DescribeInvocationsResponse
 */
async function describeInvocations(request: DescribeInvocationsRequest): DescribeInvocationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInvocationsWithOptions(request, runtime);
}

model DescribeKeyPairsRequest {
  keyPairIds?: [ string ](name='KeyPairIds'),
  keyPairName?: string(name='KeyPairName', example='testKeyPairName'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='AAAAAYRHtOLVQzCYj17y+OP7LZQBUVVbi0GTu8g5****'),
}

model DescribeKeyPairsResponseBody = {
  data?: [ 
    {
      gmtCreated?: string(name='GmtCreated', example='2022-10-11T08:53:32Z'),
      keyPairId?: string(name='KeyPairId', example='kp-6v2q33ae4tw3*****'),
      keyPairName?: string(name='KeyPairName', example='testKeyPairName'),
    }
  ](name='Data'),
  nextToken?: string(name='NextToken', example='FFbc8N4E1iOlcSxC+8boa0HHH2LKWbggYUinyrZWvtS1oTrMYCg1HuMLGuftj0****'),
  requestId?: string(name='RequestId', example='565FB06A-AE04-5AD0-8A32-5BA92CA5****'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model DescribeKeyPairsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeKeyPairsResponseBody(name='body'),
}

/**
 * @summary 查询密钥对
 *
 * @param request DescribeKeyPairsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeKeyPairsResponse
 */
async function describeKeyPairsWithOptions(request: DescribeKeyPairsRequest, runtime: Util.RuntimeOptions): DescribeKeyPairsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyPairIds)) {
    query['KeyPairIds'] = request.keyPairIds;
  }
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeKeyPairs',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询密钥对
 *
 * @param request DescribeKeyPairsRequest
 * @return DescribeKeyPairsResponse
 */
async function describeKeyPairs(request: DescribeKeyPairsRequest): DescribeKeyPairsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeKeyPairsWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage'),
}

model DescribeRegionsResponseBody = {
  regionModels?: [ 
    {
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      regionName?: string(name='RegionName'),
    }
  ](name='RegionModels'),
  requestId?: string(name='RequestId', example='A87B3769-0D05-5383-B236-5798B455****'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
 * @summary 查询地域
 *
 * @param request DescribeRegionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRegionsResponse
 */
async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询地域
 *
 * @param request DescribeRegionsRequest
 * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeSpecRequest {
  bizRegionId?: string(name='BizRegionId'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6l5V9uONHqPtDLM2U8s****'),
  specIds?: [ string ](name='SpecIds'),
  specStatus?: string(name='SpecStatus', example='Available'),
  specType?: string(name='SpecType', example='ARM'),
}

model DescribeSpecResponseBody = {
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6kw9dGL5jves2FS9RLq****'),
  requestId?: string(name='RequestId', example='D9888DAD-331E-5FBC-B5A0-F2445115****'),
  specInfoModel?: [ 
    {
      core?: int32(name='Core', example='8'),
      memory?: int32(name='Memory', example='16'),
      specId?: string(name='SpecId', example='acp.basic.small'),
      specStatus?: string(name='SpecStatus', example='Available'),
      specType?: string(name='SpecType', example='ARM'),
      systemDiskSize?: int32(name='SystemDiskSize', example='32'),
    }
  ](name='SpecInfoModel'),
  totalCount?: int32(name='TotalCount', example='4'),
}

model DescribeSpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSpecResponseBody(name='body'),
}

/**
 * @summary 查询规格
 *
 * @param request DescribeSpecRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSpecResponse
 */
async function describeSpecWithOptions(request: DescribeSpecRequest, runtime: Util.RuntimeOptions): DescribeSpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizRegionId)) {
    query['BizRegionId'] = request.bizRegionId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.specIds)) {
    query['SpecIds'] = request.specIds;
  }
  if (!Util.isUnset(request.specStatus)) {
    query['SpecStatus'] = request.specStatus;
  }
  if (!Util.isUnset(request.specType)) {
    query['SpecType'] = request.specType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSpec',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询规格
 *
 * @param request DescribeSpecRequest
 * @return DescribeSpecResponse
 */
async function describeSpec(request: DescribeSpecRequest): DescribeSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSpecWithOptions(request, runtime);
}

model DescribeTasksRequest {
  instanceId?: string(name='InstanceId'),
  instanceName?: string(name='InstanceName'),
  invokeId?: string(name='InvokeId', example='B8ED2BA9-0C6A-5643-818F-B5D60A64****'),
  level?: int32(name='Level'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='FFbc8N4E1iOlcSxC+8boa0HHH2LKWbggYUinyrZWvtS1oTrMYCg1HuMLGuftj0****'),
  param?: string(name='Param'),
  parentTaskId?: string(name='ParentTaskId'),
  resourceIds?: [ string ](name='ResourceIds'),
  taskIds?: [ string ](name='TaskIds'),
  taskStatus?: string(name='TaskStatus', example='Processing'),
  taskStatuses?: [ string ](name='TaskStatuses'),
  taskType?: string(name='TaskType', example='StartInstance'),
  taskTypes?: [ string ](name='TaskTypes'),
}

model DescribeTasksResponseBody = {
  data?: [ 
    {
      errorCode?: string(name='ErrorCode'),
      errorMsg?: string(name='ErrorMsg'),
      failedChildCount?: int32(name='FailedChildCount'),
      finishTime?: string(name='FinishTime', example='2022-10-11T08:53:32Z'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      invokeId?: string(name='InvokeId', example='B8ED2BA9-0C6A-5643-818F-B5D60A64****'),
      level?: int32(name='Level'),
      operator?: string(name='Operator'),
      param?: string(name='Param'),
      parentTaskId?: string(name='ParentTaskId'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceId?: string(name='ResourceId', example='acp-25nt4kk9whhok****'),
      result?: string(name='Result'),
      runningChildCount?: int32(name='RunningChildCount'),
      startTime?: string(name='StartTime', example='2022-10-11T08:53:32Z'),
      successChildCount?: int32(name='SuccessChildCount'),
      taskId?: string(name='TaskId', example='t-bp67acfmxazb4p****'),
      taskStatus?: string(name='TaskStatus', example='Processing'),
      taskType?: string(name='TaskType', example='StartInstance'),
      totalChildCount?: int32(name='TotalChildCount'),
    }
  ](name='Data'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6kU+SQXzm0H9mu/FiSc****'),
  requestId?: string(name='RequestId', example='B8ED2BA9-0C6A-5643-818F-B5D60A64****'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model DescribeTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTasksResponseBody(name='body'),
}

/**
 * @summary 查询异步任务
 *
 * @param request DescribeTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeTasksResponse
 */
async function describeTasksWithOptions(request: DescribeTasksRequest, runtime: Util.RuntimeOptions): DescribeTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.invokeId)) {
    query['InvokeId'] = request.invokeId;
  }
  if (!Util.isUnset(request.level)) {
    query['Level'] = request.level;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.param)) {
    query['Param'] = request.param;
  }
  if (!Util.isUnset(request.parentTaskId)) {
    query['ParentTaskId'] = request.parentTaskId;
  }
  if (!Util.isUnset(request.resourceIds)) {
    query['ResourceIds'] = request.resourceIds;
  }
  if (!Util.isUnset(request.taskIds)) {
    query['TaskIds'] = request.taskIds;
  }
  if (!Util.isUnset(request.taskStatus)) {
    query['TaskStatus'] = request.taskStatus;
  }
  if (!Util.isUnset(request.taskStatuses)) {
    query['TaskStatuses'] = request.taskStatuses;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  if (!Util.isUnset(request.taskTypes)) {
    query['TaskTypes'] = request.taskTypes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTasks',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询异步任务
 *
 * @param request DescribeTasksRequest
 * @return DescribeTasksResponse
 */
async function describeTasks(request: DescribeTasksRequest): DescribeTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTasksWithOptions(request, runtime);
}

model DetachKeyPairRequest {
  instanceIds?: [ string ](name='InstanceIds'),
  keyPairId?: string(name='KeyPairId', description='This parameter is required.', example='kp-6v2q33ae4tw3a****'),
}

model DetachKeyPairResponseBody = {
  data?: {
    detachedInstanceIds?: [ string ](name='DetachedInstanceIds'),
    failCount?: int32(name='FailCount', example='0'),
    keyPairId?: string(name='KeyPairId', example='kp-6v2q33ae4tw3a****'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='69BCBBE4-FCF2-59B8-AD9D-531EB422****'),
}

model DetachKeyPairResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachKeyPairResponseBody(name='body'),
}

/**
 * @summary 解绑密钥对
 *
 * @param request DetachKeyPairRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetachKeyPairResponse
 */
async function detachKeyPairWithOptions(request: DetachKeyPairRequest, runtime: Util.RuntimeOptions): DetachKeyPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.keyPairId)) {
    query['KeyPairId'] = request.keyPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachKeyPair',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 解绑密钥对
 *
 * @param request DetachKeyPairRequest
 * @return DetachKeyPairResponse
 */
async function detachKeyPair(request: DetachKeyPairRequest): DetachKeyPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachKeyPairWithOptions(request, runtime);
}

model DistributeImageRequest {
  distributeRegionList?: [ string ](name='DistributeRegionList', description='This parameter is required.'),
  imageId?: string(name='ImageId', description='This parameter is required.', example='imgc-075cllfeuazh0****'),
}

model DistributeImageResponseBody = {
  requestId?: string(name='RequestId', example='440D7342-5FC2-5E7C-B2DB-D0B4EAC2BDF1'),
}

model DistributeImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DistributeImageResponseBody(name='body'),
}

/**
 * @summary 自定义镜像分发
 *
 * @param request DistributeImageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DistributeImageResponse
 */
async function distributeImageWithOptions(request: DistributeImageRequest, runtime: Util.RuntimeOptions): DistributeImageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.distributeRegionList)) {
    body['DistributeRegionList'] = request.distributeRegionList;
  }
  if (!Util.isUnset(request.imageId)) {
    body['ImageId'] = request.imageId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DistributeImage',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 自定义镜像分发
 *
 * @param request DistributeImageRequest
 * @return DistributeImageResponse
 */
async function distributeImage(request: DistributeImageRequest): DistributeImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return distributeImageWithOptions(request, runtime);
}

model DowngradeAndroidInstanceGroupRequest {
  androidInstanceIds?: [ string ](name='AndroidInstanceIds'),
  autoPay?: boolean(name='AutoPay', example='true'),
  instanceGroupId?: string(name='InstanceGroupId', description='This parameter is required.', example='ag-cuv4scs4obxhs****'),
}

model DowngradeAndroidInstanceGroupResponseBody = {
  orderId?: string(name='OrderId', example='22326560487****'),
  requestId?: string(name='RequestId', example='3AF82CE1-2801-52CE-BF64-B491DD7C****'),
}

model DowngradeAndroidInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DowngradeAndroidInstanceGroupResponseBody(name='body'),
}

/**
 * @summary 实例组缩容
 *
 * @param request DowngradeAndroidInstanceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DowngradeAndroidInstanceGroupResponse
 */
async function downgradeAndroidInstanceGroupWithOptions(request: DowngradeAndroidInstanceGroupRequest, runtime: Util.RuntimeOptions): DowngradeAndroidInstanceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.androidInstanceIds)) {
    query['AndroidInstanceIds'] = request.androidInstanceIds;
  }
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.instanceGroupId)) {
    query['InstanceGroupId'] = request.instanceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DowngradeAndroidInstanceGroup',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 实例组缩容
 *
 * @param request DowngradeAndroidInstanceGroupRequest
 * @return DowngradeAndroidInstanceGroupResponse
 */
async function downgradeAndroidInstanceGroup(request: DowngradeAndroidInstanceGroupRequest): DowngradeAndroidInstanceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return downgradeAndroidInstanceGroupWithOptions(request, runtime);
}

model FetchFileRequest {
  androidInstanceIdList?: [ string ](name='AndroidInstanceIdList', description='This parameter is required.'),
  sourceFilePath?: string(name='SourceFilePath', description='This parameter is required.', example='/data/a.txt'),
  uploadEndpoint?: string(name='UploadEndpoint', description='This parameter is required.', example='oss-cn-hangzhou.aliyuncs.com'),
  uploadType?: string(name='UploadType', description='This parameter is required.', example='OSS'),
  uploadUrl?: string(name='UploadUrl', description='This parameter is required.'),
}

model FetchFileResponseBody = {
  data?: [ 
    {
      androidInstanceId?: string(name='AndroidInstanceId'),
      taskId?: string(name='TaskId'),
    }
  ](name='Data', example='425F351C-3F8E-5218-A520-B6311D0D****'),
  requestId?: string(name='RequestId', example='425F351C-3F8E-5218-A520-B6311D0D****'),
  taskId?: string(name='TaskId'),
}

model FetchFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FetchFileResponseBody(name='body'),
}

/**
 * @summary 云手机拉取文件到OSS
 *
 * @param request FetchFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return FetchFileResponse
 */
async function fetchFileWithOptions(request: FetchFileRequest, runtime: Util.RuntimeOptions): FetchFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.androidInstanceIdList)) {
    query['AndroidInstanceIdList'] = request.androidInstanceIdList;
  }
  if (!Util.isUnset(request.sourceFilePath)) {
    query['SourceFilePath'] = request.sourceFilePath;
  }
  if (!Util.isUnset(request.uploadEndpoint)) {
    query['UploadEndpoint'] = request.uploadEndpoint;
  }
  if (!Util.isUnset(request.uploadType)) {
    query['UploadType'] = request.uploadType;
  }
  if (!Util.isUnset(request.uploadUrl)) {
    query['UploadUrl'] = request.uploadUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FetchFile',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 云手机拉取文件到OSS
 *
 * @param request FetchFileRequest
 * @return FetchFileResponse
 */
async function fetchFile(request: FetchFileRequest): FetchFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return fetchFileWithOptions(request, runtime);
}

model ImportKeyPairRequest {
  keyPairName?: string(name='KeyPairName', description='This parameter is required.', example='TestKeyPairName'),
  publicKeyBody?: string(name='PublicKeyBody', description='This parameter is required.', example='ABC1234567*****'),
}

model ImportKeyPairResponseBody = {
  data?: {
    gmtCreated?: string(name='GmtCreated', example='2023-03-05T10:29:22Z'),
    keyPairId?: string(name='KeyPairId', example='kp-6v2q33ae4tw3*****'),
    keyPairName?: string(name='KeyPairName', example='TestKeyPairName'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='69BCBBE4-FCF2-59B8-AD9D-531EB422****'),
}

model ImportKeyPairResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportKeyPairResponseBody(name='body'),
}

/**
 * @param request ImportKeyPairRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ImportKeyPairResponse
 */
async function importKeyPairWithOptions(request: ImportKeyPairRequest, runtime: Util.RuntimeOptions): ImportKeyPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  if (!Util.isUnset(request.publicKeyBody)) {
    query['PublicKeyBody'] = request.publicKeyBody;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportKeyPair',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request ImportKeyPairRequest
 * @return ImportKeyPairResponse
 */
async function importKeyPair(request: ImportKeyPairRequest): ImportKeyPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return importKeyPairWithOptions(request, runtime);
}

model InstallAppRequest {
  appIdList?: [ string ](name='AppIdList'),
  instanceGroupIdList?: [ string ](name='InstanceGroupIdList'),
  instanceIdList?: [ string ](name='InstanceIdList'),
}

model InstallAppResponseBody = {
  requestId?: string(name='RequestId', example='E5138F7E-46B5-526A-8C99-82DEAE6B****'),
  taskId?: string(name='TaskId'),
}

model InstallAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InstallAppResponseBody(name='body'),
}

/**
 * @summary 安装app到实例组
 *
 * @param request InstallAppRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return InstallAppResponse
 */
async function installAppWithOptions(request: InstallAppRequest, runtime: Util.RuntimeOptions): InstallAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appIdList)) {
    query['AppIdList'] = request.appIdList;
  }
  if (!Util.isUnset(request.instanceGroupIdList)) {
    query['InstanceGroupIdList'] = request.instanceGroupIdList;
  }
  if (!Util.isUnset(request.instanceIdList)) {
    query['InstanceIdList'] = request.instanceIdList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InstallApp',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 安装app到实例组
 *
 * @param request InstallAppRequest
 * @return InstallAppResponse
 */
async function installApp(request: InstallAppRequest): InstallAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return installAppWithOptions(request, runtime);
}

model ListPolicyGroupsRequest {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6kU+SQXzm0H9mu/FiSc****'),
  policyGroupIds?: [ string ](name='PolicyGroupIds'),
  policyGroupName?: string(name='PolicyGroupName'),
}

model ListPolicyGroupsResponseBody = {
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6l5V9uON****'),
  policyGroupModel?: [ 
    {
      cameraRedirect?: string(name='CameraRedirect', example='on'),
      clipboard?: string(name='Clipboard', example='readwrite'),
      gmtCreate?: string(name='GmtCreate', example='2024-06-04 10:28:54'),
      html5FileTransfer?: string(name='Html5FileTransfer', example='download'),
      localDrive?: string(name='LocalDrive', example='off'),
      lockResolution?: string(name='LockResolution'),
      netRedirectPolicy?: {
        customProxy?: string(name='CustomProxy'),
        hostAddr?: string(name='HostAddr'),
        netRedirect?: string(name='NetRedirect'),
        port?: string(name='Port'),
        proxyPassword?: string(name='ProxyPassword'),
        proxyType?: string(name='ProxyType'),
        proxyUserName?: string(name='ProxyUserName'),
      }(name='NetRedirectPolicy'),
      policyGroupId?: string(name='PolicyGroupId', example='pg-9q6o8qpiy8opkj****'),
      policyGroupName?: string(name='PolicyGroupName'),
      sessionResolutionHeight?: string(name='SessionResolutionHeight', example='1080'),
      sessionResolutionWidth?: string(name='SessionResolutionWidth', example='1920'),
    }
  ](name='PolicyGroupModel'),
  requestId?: string(name='RequestId', example='7B9EFA4F-4305-5968-BAEE-BD8B8DE5****'),
  totalCount?: int32(name='TotalCount', example='31'),
}

model ListPolicyGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPolicyGroupsResponseBody(name='body'),
}

/**
 * @summary 查询Policy列表
 *
 * @param request ListPolicyGroupsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPolicyGroupsResponse
 */
async function listPolicyGroupsWithOptions(request: ListPolicyGroupsRequest, runtime: Util.RuntimeOptions): ListPolicyGroupsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.policyGroupIds)) {
    body['PolicyGroupIds'] = request.policyGroupIds;
  }
  if (!Util.isUnset(request.policyGroupName)) {
    body['PolicyGroupName'] = request.policyGroupName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListPolicyGroups',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询Policy列表
 *
 * @param request ListPolicyGroupsRequest
 * @return ListPolicyGroupsResponse
 */
async function listPolicyGroups(request: ListPolicyGroupsRequest): ListPolicyGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPolicyGroupsWithOptions(request, runtime);
}

model ModifyAndroidInstanceRequest {
  androidInstanceId?: string(name='AndroidInstanceId', example='acp-8v5bjld0r7tkl****'),
  newAndroidInstanceName?: string(name='NewAndroidInstanceName', example='new_name'),
}

model ModifyAndroidInstanceResponseBody = {
  requestId?: string(name='RequestId', example='E5138F7E-46B5-526A-8C99-82DEAE6B****'),
}

model ModifyAndroidInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAndroidInstanceResponseBody(name='body'),
}

/**
 * @summary 修改安卓实例信息
 *
 * @param request ModifyAndroidInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyAndroidInstanceResponse
 */
async function modifyAndroidInstanceWithOptions(request: ModifyAndroidInstanceRequest, runtime: Util.RuntimeOptions): ModifyAndroidInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.androidInstanceId)) {
    query['AndroidInstanceId'] = request.androidInstanceId;
  }
  if (!Util.isUnset(request.newAndroidInstanceName)) {
    query['NewAndroidInstanceName'] = request.newAndroidInstanceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAndroidInstance',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改安卓实例信息
 *
 * @param request ModifyAndroidInstanceRequest
 * @return ModifyAndroidInstanceResponse
 */
async function modifyAndroidInstance(request: ModifyAndroidInstanceRequest): ModifyAndroidInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAndroidInstanceWithOptions(request, runtime);
}

model ModifyAndroidInstanceGroupRequest {
  instanceGroupId?: string(name='InstanceGroupId', example='ag-cuv4scs4obxhs****'),
  newInstanceGroupName?: string(name='NewInstanceGroupName', example='newName'),
  policyGroupId?: string(name='PolicyGroupId', example='pg-2w97kp89gnsif****'),
}

model ModifyAndroidInstanceGroupResponseBody = {
  requestId?: string(name='RequestId', example='6C83EBE3-F267-5F11-ABF8-4E7B90B****'),
}

model ModifyAndroidInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAndroidInstanceGroupResponseBody(name='body'),
}

/**
 * @summary 修改安卓实例组
 *
 * @param request ModifyAndroidInstanceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyAndroidInstanceGroupResponse
 */
async function modifyAndroidInstanceGroupWithOptions(request: ModifyAndroidInstanceGroupRequest, runtime: Util.RuntimeOptions): ModifyAndroidInstanceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceGroupId)) {
    query['InstanceGroupId'] = request.instanceGroupId;
  }
  if (!Util.isUnset(request.newInstanceGroupName)) {
    query['NewInstanceGroupName'] = request.newInstanceGroupName;
  }
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAndroidInstanceGroup',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改安卓实例组
 *
 * @param request ModifyAndroidInstanceGroupRequest
 * @return ModifyAndroidInstanceGroupResponse
 */
async function modifyAndroidInstanceGroup(request: ModifyAndroidInstanceGroupRequest): ModifyAndroidInstanceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAndroidInstanceGroupWithOptions(request, runtime);
}

model ModifyAppRequest {
  appId?: int32(name='AppId', example='1234'),
  appName?: string(name='AppName'),
  description?: string(name='Description'),
  iconUrl?: string(name='IconUrl', example='https://defaultIcon.png'),
}

model ModifyAppResponseBody = {
  requestId?: string(name='RequestId', example='83418504-5A82-5896-A24C-B2D468F0****'),
}

model ModifyAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAppResponseBody(name='body'),
}

/**
 * @summary 修改app
 *
 * @param request ModifyAppRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyAppResponse
 */
async function modifyAppWithOptions(request: ModifyAppRequest, runtime: Util.RuntimeOptions): ModifyAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.iconUrl)) {
    query['IconUrl'] = request.iconUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyApp',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改app
 *
 * @param request ModifyAppRequest
 * @return ModifyAppResponse
 */
async function modifyApp(request: ModifyAppRequest): ModifyAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAppWithOptions(request, runtime);
}

model ModifyKeyPairNameRequest {
  keyPairId?: string(name='KeyPairId', description='This parameter is required.', example='kp-6v2q33ae4tw3a****'),
  newKeyPairName?: string(name='NewKeyPairName', description='This parameter is required.', example='newKeyPairName'),
}

model ModifyKeyPairNameResponseBody = {
  requestId?: string(name='RequestId', example='69BCBBE4-FCF2-59B8-AD9D-531EB422****'),
}

model ModifyKeyPairNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyKeyPairNameResponseBody(name='body'),
}

/**
 * @summary 修改密钥对名称
 *
 * @param request ModifyKeyPairNameRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyKeyPairNameResponse
 */
async function modifyKeyPairNameWithOptions(request: ModifyKeyPairNameRequest, runtime: Util.RuntimeOptions): ModifyKeyPairNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyPairId)) {
    query['KeyPairId'] = request.keyPairId;
  }
  if (!Util.isUnset(request.newKeyPairName)) {
    query['NewKeyPairName'] = request.newKeyPairName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyKeyPairName',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改密钥对名称
 *
 * @param request ModifyKeyPairNameRequest
 * @return ModifyKeyPairNameResponse
 */
async function modifyKeyPairName(request: ModifyKeyPairNameRequest): ModifyKeyPairNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyKeyPairNameWithOptions(request, runtime);
}

model ModifyPolicyGroupRequest {
  cameraRedirect?: string(name='CameraRedirect', example='off'),
  clipboard?: string(name='Clipboard', example='readwrite'),
  html5FileTransfer?: string(name='Html5FileTransfer', example='off'),
  localDrive?: string(name='LocalDrive', example='off'),
  lockResolution?: string(name='LockResolution'),
  netRedirectPolicy?: {
    customProxy?: string(name='CustomProxy'),
    hostAddr?: string(name='HostAddr'),
    netRedirect?: string(name='NetRedirect'),
    port?: string(name='Port'),
    proxyPassword?: string(name='ProxyPassword'),
    proxyType?: string(name='ProxyType'),
    proxyUserName?: string(name='ProxyUserName'),
  }(name='NetRedirectPolicy'),
  policyGroupId?: string(name='PolicyGroupId', example='pg-4bi18ebi9tfjh****'),
  policyGroupName?: string(name='PolicyGroupName'),
  resolutionHeight?: int32(name='ResolutionHeight', example='1280'),
  resolutionWidth?: int32(name='ResolutionWidth', example='720'),
}

model ModifyPolicyGroupShrinkRequest {
  cameraRedirect?: string(name='CameraRedirect', example='off'),
  clipboard?: string(name='Clipboard', example='readwrite'),
  html5FileTransfer?: string(name='Html5FileTransfer', example='off'),
  localDrive?: string(name='LocalDrive', example='off'),
  lockResolution?: string(name='LockResolution'),
  netRedirectPolicyShrink?: string(name='NetRedirectPolicy'),
  policyGroupId?: string(name='PolicyGroupId', example='pg-4bi18ebi9tfjh****'),
  policyGroupName?: string(name='PolicyGroupName'),
  resolutionHeight?: int32(name='ResolutionHeight', example='1280'),
  resolutionWidth?: int32(name='ResolutionWidth', example='720'),
}

model ModifyPolicyGroupResponseBody = {
  requestId?: string(name='RequestId', example='552B7EED-D434-511F-B838-29EA4E906034'),
}

model ModifyPolicyGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPolicyGroupResponseBody(name='body'),
}

/**
 * @summary 修改policy
 *
 * @param tmpReq ModifyPolicyGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyPolicyGroupResponse
 */
async function modifyPolicyGroupWithOptions(tmpReq: ModifyPolicyGroupRequest, runtime: Util.RuntimeOptions): ModifyPolicyGroupResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyPolicyGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.netRedirectPolicy)) {
    request.netRedirectPolicyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.netRedirectPolicy, 'NetRedirectPolicy', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.cameraRedirect)) {
    body['CameraRedirect'] = request.cameraRedirect;
  }
  if (!Util.isUnset(request.clipboard)) {
    body['Clipboard'] = request.clipboard;
  }
  if (!Util.isUnset(request.html5FileTransfer)) {
    body['Html5FileTransfer'] = request.html5FileTransfer;
  }
  if (!Util.isUnset(request.localDrive)) {
    body['LocalDrive'] = request.localDrive;
  }
  if (!Util.isUnset(request.lockResolution)) {
    body['LockResolution'] = request.lockResolution;
  }
  if (!Util.isUnset(request.netRedirectPolicyShrink)) {
    body['NetRedirectPolicy'] = request.netRedirectPolicyShrink;
  }
  if (!Util.isUnset(request.policyGroupId)) {
    body['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.policyGroupName)) {
    body['PolicyGroupName'] = request.policyGroupName;
  }
  if (!Util.isUnset(request.resolutionHeight)) {
    body['ResolutionHeight'] = request.resolutionHeight;
  }
  if (!Util.isUnset(request.resolutionWidth)) {
    body['ResolutionWidth'] = request.resolutionWidth;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPolicyGroup',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改policy
 *
 * @param request ModifyPolicyGroupRequest
 * @return ModifyPolicyGroupResponse
 */
async function modifyPolicyGroup(request: ModifyPolicyGroupRequest): ModifyPolicyGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPolicyGroupWithOptions(request, runtime);
}

model RebootAndroidInstancesInGroupRequest {
  androidInstanceIds?: [ string ](name='AndroidInstanceIds'),
  forceStop?: boolean(name='ForceStop'),
}

model RebootAndroidInstancesInGroupResponseBody = {
  requestId?: string(name='RequestId', example='227CBB4C-F5DC-589D-A667-C5CA3D52****'),
}

model RebootAndroidInstancesInGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RebootAndroidInstancesInGroupResponseBody(name='body'),
}

/**
 * @summary 重启安卓实例
 *
 * @param request RebootAndroidInstancesInGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RebootAndroidInstancesInGroupResponse
 */
async function rebootAndroidInstancesInGroupWithOptions(request: RebootAndroidInstancesInGroupRequest, runtime: Util.RuntimeOptions): RebootAndroidInstancesInGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.androidInstanceIds)) {
    query['AndroidInstanceIds'] = request.androidInstanceIds;
  }
  if (!Util.isUnset(request.forceStop)) {
    query['ForceStop'] = request.forceStop;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RebootAndroidInstancesInGroup',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 重启安卓实例
 *
 * @param request RebootAndroidInstancesInGroupRequest
 * @return RebootAndroidInstancesInGroupResponse
 */
async function rebootAndroidInstancesInGroup(request: RebootAndroidInstancesInGroupRequest): RebootAndroidInstancesInGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootAndroidInstancesInGroupWithOptions(request, runtime);
}

model RecoveryFileRequest {
  androidInstanceIdList?: [ string ](name='AndroidInstanceIdList', description='This parameter is required.'),
  backupFileId?: string(name='BackupFileId', example='bf-azhps4rdyi2th****'),
  backupFilePath?: string(name='BackupFilePath'),
  uploadEndpoint?: string(name='UploadEndpoint', example='oss-cn-hangzhou-internal.aliyuncs.com'),
  uploadType?: string(name='UploadType', example='OSS'),
}

model RecoveryFileResponseBody = {
  count?: long(name='Count'),
  data?: [ 
    {
      androidInstanceId?: string(name='AndroidInstanceId'),
      taskId?: string(name='TaskId'),
    }
  ](name='Data', example='6AD56E39-430B-5401-AB4A-7B086454****'),
  requestId?: string(name='RequestId', example='6AD56E39-430B-5401-AB4A-7B086454****'),
  taskId?: string(name='TaskId'),
}

model RecoveryFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecoveryFileResponseBody(name='body'),
}

/**
 * @summary 数据恢复
 *
 * @param request RecoveryFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RecoveryFileResponse
 */
async function recoveryFileWithOptions(request: RecoveryFileRequest, runtime: Util.RuntimeOptions): RecoveryFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.androidInstanceIdList)) {
    query['AndroidInstanceIdList'] = request.androidInstanceIdList;
  }
  if (!Util.isUnset(request.backupFileId)) {
    query['BackupFileId'] = request.backupFileId;
  }
  if (!Util.isUnset(request.backupFilePath)) {
    query['BackupFilePath'] = request.backupFilePath;
  }
  if (!Util.isUnset(request.uploadEndpoint)) {
    query['UploadEndpoint'] = request.uploadEndpoint;
  }
  if (!Util.isUnset(request.uploadType)) {
    query['UploadType'] = request.uploadType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RecoveryFile',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 数据恢复
 *
 * @param request RecoveryFileRequest
 * @return RecoveryFileResponse
 */
async function recoveryFile(request: RecoveryFileRequest): RecoveryFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return recoveryFileWithOptions(request, runtime);
}

model RenewAndroidInstanceGroupsRequest {
  autoPay?: boolean(name='AutoPay', example='true'),
  instanceGroupIds?: [ string ](name='InstanceGroupIds'),
  period?: int32(name='Period', example='6'),
  periodUnit?: string(name='PeriodUnit', example='Month'),
}

model RenewAndroidInstanceGroupsResponseBody = {
  orderId?: string(name='OrderId', example='22326560487****'),
  requestId?: string(name='RequestId', example='4B886792-2051-5DB4-8AE6-C8E45D3B4****'),
}

model RenewAndroidInstanceGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenewAndroidInstanceGroupsResponseBody(name='body'),
}

/**
 * @summary 续费安卓实例组
 *
 * @param request RenewAndroidInstanceGroupsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RenewAndroidInstanceGroupsResponse
 */
async function renewAndroidInstanceGroupsWithOptions(request: RenewAndroidInstanceGroupsRequest, runtime: Util.RuntimeOptions): RenewAndroidInstanceGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.instanceGroupIds)) {
    query['InstanceGroupIds'] = request.instanceGroupIds;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenewAndroidInstanceGroups',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 续费安卓实例组
 *
 * @param request RenewAndroidInstanceGroupsRequest
 * @return RenewAndroidInstanceGroupsResponse
 */
async function renewAndroidInstanceGroups(request: RenewAndroidInstanceGroupsRequest): RenewAndroidInstanceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewAndroidInstanceGroupsWithOptions(request, runtime);
}

model ResetAndroidInstancesInGroupRequest {
  androidInstanceIds?: [ string ](name='AndroidInstanceIds'),
}

model ResetAndroidInstancesInGroupResponseBody = {
  requestId?: string(name='RequestId', example='69BCBBE4-FCF2-59B8-AD9D-531EB422****'),
}

model ResetAndroidInstancesInGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetAndroidInstancesInGroupResponseBody(name='body'),
}

/**
 * @summary 重置安卓实例
 *
 * @param request ResetAndroidInstancesInGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ResetAndroidInstancesInGroupResponse
 */
async function resetAndroidInstancesInGroupWithOptions(request: ResetAndroidInstancesInGroupRequest, runtime: Util.RuntimeOptions): ResetAndroidInstancesInGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.androidInstanceIds)) {
    query['AndroidInstanceIds'] = request.androidInstanceIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetAndroidInstancesInGroup',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 重置安卓实例
 *
 * @param request ResetAndroidInstancesInGroupRequest
 * @return ResetAndroidInstancesInGroupResponse
 */
async function resetAndroidInstancesInGroup(request: ResetAndroidInstancesInGroupRequest): ResetAndroidInstancesInGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAndroidInstancesInGroupWithOptions(request, runtime);
}

model RunCommandRequest {
  commandContent?: string(name='CommandContent', example='ls'),
  contentEncoding?: string(name='ContentEncoding'),
  instanceIds?: [ string ](name='InstanceIds'),
  timeout?: long(name='Timeout', example='60'),
}

model RunCommandResponseBody = {
  invokeId?: string(name='InvokeId', example='t-gov2ujrk32v4****'),
  requestId?: string(name='RequestId', example='440D7342-5E7C-B2DB-D0B4EAC2BDF1****'),
}

model RunCommandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunCommandResponseBody(name='body'),
}

/**
 * @summary 通过eds agent通道下发命令
 *
 * @param request RunCommandRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RunCommandResponse
 */
async function runCommandWithOptions(request: RunCommandRequest, runtime: Util.RuntimeOptions): RunCommandResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commandContent)) {
    query['CommandContent'] = request.commandContent;
  }
  if (!Util.isUnset(request.contentEncoding)) {
    query['ContentEncoding'] = request.contentEncoding;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RunCommand',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 通过eds agent通道下发命令
 *
 * @param request RunCommandRequest
 * @return RunCommandResponse
 */
async function runCommand(request: RunCommandRequest): RunCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return runCommandWithOptions(request, runtime);
}

model SendFileRequest {
  androidInstanceIdList?: [ string ](name='AndroidInstanceIdList', description='This parameter is required.'),
  sourceFilePath?: string(name='SourceFilePath', description='This parameter is required.', example='/data'),
  uploadEndpoint?: string(name='UploadEndpoint', description='This parameter is required.', example='oss-cn-hangzhou.aliyuncs.com'),
  uploadType?: string(name='UploadType', description='This parameter is required.', example='OSS'),
  uploadUrl?: string(name='UploadUrl', description='This parameter is required.'),
}

model SendFileResponseBody = {
  data?: [ 
    {
      androidInstanceId?: string(name='AndroidInstanceId'),
      taskId?: string(name='TaskId'),
    }
  ](name='Data', example='425F351C-3F8E-5218-A520-B6311D0D****'),
  requestId?: string(name='RequestId', example='425F351C-3F8E-5218-A520-B6311D0D****'),
  taskId?: string(name='TaskId'),
}

model SendFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendFileResponseBody(name='body'),
}

/**
 * @summary 推送文件到云手机
 *
 * @param request SendFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SendFileResponse
 */
async function sendFileWithOptions(request: SendFileRequest, runtime: Util.RuntimeOptions): SendFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.androidInstanceIdList)) {
    query['AndroidInstanceIdList'] = request.androidInstanceIdList;
  }
  if (!Util.isUnset(request.sourceFilePath)) {
    query['SourceFilePath'] = request.sourceFilePath;
  }
  if (!Util.isUnset(request.uploadEndpoint)) {
    query['UploadEndpoint'] = request.uploadEndpoint;
  }
  if (!Util.isUnset(request.uploadType)) {
    query['UploadType'] = request.uploadType;
  }
  if (!Util.isUnset(request.uploadUrl)) {
    query['UploadUrl'] = request.uploadUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SendFile',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 推送文件到云手机
 *
 * @param request SendFileRequest
 * @return SendFileResponse
 */
async function sendFile(request: SendFileRequest): SendFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendFileWithOptions(request, runtime);
}

model StartAndroidInstanceRequest {
  androidInstanceIds?: [ string ](name='AndroidInstanceIds'),
}

model StartAndroidInstanceResponseBody = {
  requestId?: string(name='RequestId', example='17C731AB-AAEE-5844-A352-D8D0352D****'),
}

model StartAndroidInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartAndroidInstanceResponseBody(name='body'),
}

/**
 * @summary 实例开机
 *
 * @param request StartAndroidInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartAndroidInstanceResponse
 */
async function startAndroidInstanceWithOptions(request: StartAndroidInstanceRequest, runtime: Util.RuntimeOptions): StartAndroidInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.androidInstanceIds)) {
    query['AndroidInstanceIds'] = request.androidInstanceIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartAndroidInstance',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 实例开机
 *
 * @param request StartAndroidInstanceRequest
 * @return StartAndroidInstanceResponse
 */
async function startAndroidInstance(request: StartAndroidInstanceRequest): StartAndroidInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startAndroidInstanceWithOptions(request, runtime);
}

model StopAndroidInstanceRequest {
  androidInstanceIds?: [ string ](name='AndroidInstanceIds'),
  forceStop?: boolean(name='ForceStop'),
}

model StopAndroidInstanceResponseBody = {
  requestId?: string(name='RequestId', example='E38B41A8-8E00-5AE4-A957-6636ACB8****'),
}

model StopAndroidInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopAndroidInstanceResponseBody(name='body'),
}

/**
 * @summary 实例关机
 *
 * @param request StopAndroidInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopAndroidInstanceResponse
 */
async function stopAndroidInstanceWithOptions(request: StopAndroidInstanceRequest, runtime: Util.RuntimeOptions): StopAndroidInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.androidInstanceIds)) {
    query['AndroidInstanceIds'] = request.androidInstanceIds;
  }
  if (!Util.isUnset(request.forceStop)) {
    query['ForceStop'] = request.forceStop;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopAndroidInstance',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 实例关机
 *
 * @param request StopAndroidInstanceRequest
 * @return StopAndroidInstanceResponse
 */
async function stopAndroidInstance(request: StopAndroidInstanceRequest): StopAndroidInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopAndroidInstanceWithOptions(request, runtime);
}

model UninstallAppRequest {
  appIdList?: [ string ](name='AppIdList'),
  instanceGroupIdList?: [ string ](name='InstanceGroupIdList'),
  instanceIdList?: [ string ](name='InstanceIdList'),
}

model UninstallAppResponseBody = {
  requestId?: string(name='RequestId', example='E5138F7E-46B5-526A-8C99-82DEAE6B****'),
  taskId?: string(name='TaskId'),
}

model UninstallAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UninstallAppResponseBody(name='body'),
}

/**
 * @summary 卸载app
 *
 * @param request UninstallAppRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UninstallAppResponse
 */
async function uninstallAppWithOptions(request: UninstallAppRequest, runtime: Util.RuntimeOptions): UninstallAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appIdList)) {
    query['AppIdList'] = request.appIdList;
  }
  if (!Util.isUnset(request.instanceGroupIdList)) {
    query['InstanceGroupIdList'] = request.instanceGroupIdList;
  }
  if (!Util.isUnset(request.instanceIdList)) {
    query['InstanceIdList'] = request.instanceIdList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UninstallApp',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 卸载app
 *
 * @param request UninstallAppRequest
 * @return UninstallAppResponse
 */
async function uninstallApp(request: UninstallAppRequest): UninstallAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return uninstallAppWithOptions(request, runtime);
}

model UpdateCustomImageNameRequest {
  imageId?: string(name='ImageId', example='imgc-075cllfeuazh0****'),
  imageName?: string(name='ImageName', example='imagename'),
}

model UpdateCustomImageNameResponseBody = {
  requestId?: string(name='RequestId', example='552B7EED-D434-511F-B838-29EA4E906034'),
}

model UpdateCustomImageNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCustomImageNameResponseBody(name='body'),
}

/**
 * @summary 修改自定义镜像名称
 *
 * @param request UpdateCustomImageNameRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateCustomImageNameResponse
 */
async function updateCustomImageNameWithOptions(request: UpdateCustomImageNameRequest, runtime: Util.RuntimeOptions): UpdateCustomImageNameResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.imageId)) {
    body['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.imageName)) {
    body['ImageName'] = request.imageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCustomImageName',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改自定义镜像名称
 *
 * @param request UpdateCustomImageNameRequest
 * @return UpdateCustomImageNameResponse
 */
async function updateCustomImageName(request: UpdateCustomImageNameRequest): UpdateCustomImageNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCustomImageNameWithOptions(request, runtime);
}

model UpdateInstanceGroupImageRequest {
  imageId?: string(name='ImageId', description='This parameter is required.', example='imgc-075cllfeuazh****'),
  instanceGroupIds?: [ string ](name='InstanceGroupIds', description='This parameter is required.'),
}

model UpdateInstanceGroupImageResponseBody = {
  requestId?: string(name='RequestId', example='55726272-E40B-530D-914F-5126B19C79B3'),
}

model UpdateInstanceGroupImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceGroupImageResponseBody(name='body'),
}

/**
 * @summary 实例组变更镜像
 *
 * @param request UpdateInstanceGroupImageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateInstanceGroupImageResponse
 */
async function updateInstanceGroupImageWithOptions(request: UpdateInstanceGroupImageRequest, runtime: Util.RuntimeOptions): UpdateInstanceGroupImageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.imageId)) {
    body['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.instanceGroupIds)) {
    body['InstanceGroupIds'] = request.instanceGroupIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateInstanceGroupImage',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 实例组变更镜像
 *
 * @param request UpdateInstanceGroupImageRequest
 * @return UpdateInstanceGroupImageResponse
 */
async function updateInstanceGroupImage(request: UpdateInstanceGroupImageRequest): UpdateInstanceGroupImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateInstanceGroupImageWithOptions(request, runtime);
}

model UpgradeAndroidInstanceGroupRequest {
  autoPay?: boolean(name='AutoPay', example='true'),
  increaseNumberOfInstance?: int32(name='IncreaseNumberOfInstance', example='10'),
  instanceGroupId?: string(name='InstanceGroupId', example='ag-asguicdjh****'),
}

model UpgradeAndroidInstanceGroupResponseBody = {
  instanceIds?: string(name='InstanceIds'),
  orderId?: string(name='OrderId', example='223684716098****'),
  requestId?: string(name='RequestId', example='310A783E-CC46-5452-A8A3-71AE5DB59****'),
}

model UpgradeAndroidInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeAndroidInstanceGroupResponseBody(name='body'),
}

/**
 * @summary 安卓实例组扩容
 *
 * @param request UpgradeAndroidInstanceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpgradeAndroidInstanceGroupResponse
 */
async function upgradeAndroidInstanceGroupWithOptions(request: UpgradeAndroidInstanceGroupRequest, runtime: Util.RuntimeOptions): UpgradeAndroidInstanceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.increaseNumberOfInstance)) {
    query['IncreaseNumberOfInstance'] = request.increaseNumberOfInstance;
  }
  if (!Util.isUnset(request.instanceGroupId)) {
    query['InstanceGroupId'] = request.instanceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeAndroidInstanceGroup',
    version = '2023-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 安卓实例组扩容
 *
 * @param request UpgradeAndroidInstanceGroupRequest
 * @return UpgradeAndroidInstanceGroupResponse
 */
async function upgradeAndroidInstanceGroup(request: UpgradeAndroidInstanceGroupRequest): UpgradeAndroidInstanceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeAndroidInstanceGroupWithOptions(request, runtime);
}

