/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'eds-aic';
  @version = '2023-09-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AttachKeyPairRequest {
  instanceIds?: [ string ](name='InstanceIds', position='Query'),
  keyPairId: string(name='KeyPairId', description='This parameter is required.', example='kp-6v2q33ae4tw3a****', position='Query'),
}

model AttachKeyPairResponseBody = {
  data?: {
    attachedInstanceIds?: [ string ](name='AttachedInstanceIds'),
    failCount?: int32(name='FailCount', example='0'),
    keyPairId?: string(name='KeyPairId', example='kp-6v2q33ae4tw3a****'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='69BCBBE4-FCF2-59B8-AD9D-531EB422****'),
}

model AttachKeyPairResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachKeyPairResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AttachKeyPair  AttachKeyPairRequest
  * @return AttachKeyPairResponse
 */
async function attachKeyPair(request: AttachKeyPairRequest): AttachKeyPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachKeyPair', 'POST', '/', 'json', false, 'json', request);
}

model AuthorizeAndroidInstanceRequest {
  androidInstanceIds?: [ string ](name='AndroidInstanceIds', position='Query'),
  authorizeUserId?: string(name='AuthorizeUserId', example='test', position='Query'),
  unAuthorizeUserId?: string(name='UnAuthorizeUserId', example='test', position='Query'),
}

model AuthorizeAndroidInstanceResponseBody = {
  requestId?: string(name='RequestId', example='1A923337-44D9-5CAD-9A53-95084BD4****'),
}

model AuthorizeAndroidInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AuthorizeAndroidInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AuthorizeAndroidInstance  AuthorizeAndroidInstanceRequest
  * @return AuthorizeAndroidInstanceResponse
 */
async function authorizeAndroidInstance(request: AuthorizeAndroidInstanceRequest): AuthorizeAndroidInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuthorizeAndroidInstance', 'POST', '/', 'json', false, 'json', request);
}

model BackupFileRequest {
  androidInstanceIdList: [ string ](name='AndroidInstanceIdList', description='This parameter is required.', position='Query'),
  backupAll?: boolean(name='BackupAll', position='Query'),
  backupFileName?: string(name='BackupFileName', position='Query'),
  backupFilePath: string(name='BackupFilePath', description='This parameter is required.', position='Query'),
  description?: string(name='Description', position='Query'),
  sourceAppList?: [ string ](name='SourceAppList', position='Query'),
  sourceFilePathList?: [ string ](name='SourceFilePathList', position='Query'),
  uploadEndpoint?: string(name='UploadEndpoint', example='oss-cn-shanghai-internal.aliyuncs.com', position='Query'),
  uploadType?: string(name='UploadType', example='OSS', position='Query'),
}

model BackupFileResponseBody = {
  count?: long(name='Count'),
  data?: [ 
    {
      androidInstanceId?: string(name='AndroidInstanceId'),
      backupFileId?: string(name='BackupFileId'),
      backupFileName?: string(name='BackupFileName'),
      taskId?: string(name='TaskId'),
    }
  ](name='Data', example='6C8439B9-7DBF-57F4-92AE-55A9B9D3****'),
  requestId?: string(name='RequestId', example='6C8439B9-7DBF-57F4-92AE-55A9B9D3****'),
  taskId?: string(name='TaskId'),
}

model BackupFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BackupFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BackupFile  BackupFileRequest
  * @return BackupFileResponse
 */
async function backupFile(request: BackupFileRequest): BackupFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BackupFile', 'POST', '/', 'json', false, 'json', request);
}

model BatchGetAcpConnectionTicketRequest {
  endUserId?: string(name='EndUserId', example='user', position='Query'),
  instanceGroupId?: string(name='InstanceGroupId', example='ag-25nt4kk9whjh****', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', position='Query'),
  instanceTasks?: [ 
    {
      instanceId?: string(name='InstanceId', example='acp-fkuit0cmyfvzz****'),
      taskId?: string(name='TaskId', example='cn-hangzhou@c9f5c2e8-f5c4-4b01-8602-000cae94****'),
    }
  ](name='InstanceTasks', position='Query'),
}

model BatchGetAcpConnectionTicketResponseBody = {
  instanceConnectionModels?: [ 
    {
      appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-1uzb6heg797z3****'),
      instanceId?: string(name='InstanceId', example='acp-ajxvwo1u0hqvd****'),
      taskId?: string(name='TaskId', example='cn-hangzhou@c9f5c2e8-f5c4-4b01-8602-000cae94****'),
      taskStatus?: string(name='TaskStatus', example='FINISHED'),
      ticket?: string(name='Ticket', example='piVE58_AdmVSVW7SEW3*AE5*p8mmO5gvItsNOmv4S_f_cNpoU_BOTwChTBoNM1ZJeedfK9zxYnbN5hossqIZCr6t7SGxRigm2Cb4fGaCdBZWIzmgdHq6sXXZQg4KFWufyvpeV*0*Cm58slMT1tJw3****'),
    }
  ](name='InstanceConnectionModels'),
  requestId?: string(name='RequestId', description='Id of the request', example='7B9EFA4F-4305-5968-BAEE-BD8B8DE5****'),
}

model BatchGetAcpConnectionTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchGetAcpConnectionTicketResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchGetAcpConnectionTicket  BatchGetAcpConnectionTicketRequest
  * @return BatchGetAcpConnectionTicketResponse
 */
async function batchGetAcpConnectionTicket(request: BatchGetAcpConnectionTicketRequest): BatchGetAcpConnectionTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchGetAcpConnectionTicket', 'POST', '/', 'json', false, 'json', request);
}

model CheckResourceStockRequest {
  acpSpecId?: string(name='AcpSpecId', example='acp.basic.small', position='Query'),
  amount?: int32(name='Amount', position='Query'),
  bizRegionId: string(name='BizRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  gpuAcceleration?: boolean(name='GpuAcceleration', position='Query'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-i', position='Query'),
}

model CheckResourceStockResponseBody = {
  requestId?: string(name='RequestId', example='805D8FB6-512A-531C-9E4D-2A807D3C****'),
  resourceStockModels?: [ 
    {
      regionId?: string(name='RegionId', example='cn-shanghai'),
      stockStatus?: string(name='StockStatus', example='Available'),
      zoneId?: string(name='ZoneId', example='cn-shanghai-b'),
    }
  ](name='ResourceStockModels'),
}

model CheckResourceStockResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckResourceStockResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckResourceStock  CheckResourceStockRequest
  * @return CheckResourceStockResponse
 */
async function checkResourceStock(request: CheckResourceStockRequest): CheckResourceStockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckResourceStock', 'POST', '/', 'json', false, 'json', request);
}

model CreateAndroidInstanceGroupRequest {
  amount?: int32(name='Amount', minimum=1, maximum=100, position='Query'),
  autoPay?: boolean(name='AutoPay', example='false', position='Query'),
  autoRenew?: boolean(name='AutoRenew', example='false', position='Query'),
  bizRegionId: string(name='BizRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  chargeType?: string(name='ChargeType', example='PostPaid', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  gpuAcceleration?: boolean(name='GpuAcceleration', position='Query'),
  imageId: string(name='ImageId', description='This parameter is required.', example='imgc-06zyt9m93zwax****', position='Query'),
  instanceGroupName?: string(name='InstanceGroupName', position='Query'),
  instanceGroupSpec: string(name='InstanceGroupSpec', description='This parameter is required.', example='acp.basic.small', position='Query'),
  keyPairId?: string(name='KeyPairId', position='Query'),
  numberOfInstances?: int32(name='NumberOfInstances', example='1', minimum=1, maximum=1000, position='Query'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-745976****', position='Query'),
  period?: int32(name='Period', example='1', position='Query'),
  periodUnit?: string(name='PeriodUnit', example='Month', position='Query'),
  policyGroupId?: string(name='PolicyGroupId', example='pg-b7bxrrwxkijjh****', position='Query'),
  vSwitchId?: string(name='VSwitchId', example='vsw-uf61uvzhz8ejaw776****', position='Query'),
}

model CreateAndroidInstanceGroupResponseBody = {
  instanceGroupIds?: [ string ](name='InstanceGroupIds'),
  instanceGroupInfos?: [ 
    {
      instanceGroupId?: string(name='InstanceGroupId'),
      instanceIds?: [ string ](name='InstanceIds'),
    }
  ](name='InstanceGroupInfos'),
  orderId?: string(name='OrderId', example='22365781890****'),
  requestId?: string(name='RequestId', example='1A923337-44D9-5CAD-9A53-95084BD4****'),
}

model CreateAndroidInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAndroidInstanceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAndroidInstanceGroup  CreateAndroidInstanceGroupRequest
  * @return CreateAndroidInstanceGroupResponse
 */
async function createAndroidInstanceGroup(request: CreateAndroidInstanceGroupRequest): CreateAndroidInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAndroidInstanceGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateAppRequest {
  appName?: string(name='AppName', position='Query'),
  bizRegionId?: string(name='BizRegionId', position='Query'),
  description?: string(name='Description', position='Query'),
  fileName?: string(name='FileName', example='testApp.apk', position='Query'),
  filePath?: string(name='FilePath', position='Query'),
  iconUrl?: string(name='IconUrl', example='https://test.png', position='Query'),
  installParam?: string(name='InstallParam', example='-d', position='Query'),
  ossAppUrl?: string(name='OssAppUrl', example='http://testApp.apk', position='Query'),
}

model CreateAppResponseBody = {
  appId?: int32(name='AppId', example='1234'),
  requestId?: string(name='RequestId', example='E5138F7E-46B5-526A-8C99-82DEAE6B****'),
}

model CreateAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateApp  CreateAppRequest
  * @return CreateAppResponse
 */
async function createApp(request: CreateAppRequest): CreateAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApp', 'POST', '/', 'json', false, 'json', request);
}

model CreateCustomImageRequest {
  clientToken?: string(name='ClientToken', maxLength=100, position='Body'),
  description?: string(name='Description', example='create for cc5g group auth rules test', position='Body'),
  imageName: string(name='ImageName', description='This parameter is required.', example='custom image name', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='acp-2zecay9ponatdc4m****', position='Body'),
}

model CreateCustomImageResponseBody = {
  imageId?: string(name='ImageId'),
  requestId?: string(name='RequestId', example='20393E53-8FF1-524C-B494-B478A5369733'),
}

model CreateCustomImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCustomImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateCustomImage  CreateCustomImageRequest
  * @return CreateCustomImageResponse
 */
async function createCustomImage(request: CreateCustomImageRequest): CreateCustomImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustomImage', 'POST', '/', 'json', true, 'form', request);
}

model CreateKeyPairRequest {
  keyPairName: string(name='KeyPairName', description='This parameter is required.', example='testKeyPairName', minLength=1, maxLength=128, position='Query'),
}

model CreateKeyPairResponseBody = {
  data?: {
    gmtCreated?: string(name='GmtCreated', example='2024-06-30 08:45:09.0'),
    keyPairId?: string(name='KeyPairId', example='kp-6v2q33ae4tw3*****'),
    keyPairName?: string(name='KeyPairName', example='testKeyPairName'),
    privateKeyBody?: string(name='PrivateKeyBody', example='MIIEpAIBAAKCAQEAtReyMzLIcBH78EV2zj****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='69BCBBE4-FCF2-59B8-AD9D-531EB422****'),
}

model CreateKeyPairResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateKeyPairResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateKeyPair  CreateKeyPairRequest
  * @return CreateKeyPairResponse
 */
async function createKeyPair(request: CreateKeyPairRequest): CreateKeyPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateKeyPair', 'POST', '/', 'json', false, 'json', request);
}

model CreatePolicyGroupRequest {
  cameraRedirect?: string(name='CameraRedirect', example='off', position='Body'),
  clipboard?: string(name='Clipboard', example='readwrite', position='Body'),
  html5FileTransfer?: string(name='Html5FileTransfer', example='off', position='Body'),
  localDrive?: string(name='LocalDrive', example='off', position='Body'),
  lockResolution?: string(name='LockResolution', position='Body'),
  netRedirectPolicy?: {
    customProxy?: string(name='CustomProxy'),
    hostAddr?: string(name='HostAddr'),
    netRedirect?: string(name='NetRedirect'),
    port?: string(name='Port'),
    proxyPassword?: string(name='ProxyPassword'),
    proxyType?: string(name='ProxyType'),
    proxyUserName?: string(name='ProxyUserName'),
    rules?: [ 
      {
        ruleType?: string(name='RuleType'),
        target?: string(name='Target'),
      }
    ](name='Rules'),
  }(name='NetRedirectPolicy', shrink='json', position='Body'),
  policyGroupName?: string(name='PolicyGroupName', position='Body'),
  resolutionHeight?: int32(name='ResolutionHeight', example='1280', position='Body'),
  resolutionWidth?: int32(name='ResolutionWidth', example='720', position='Body'),
}

model CreatePolicyGroupResponseBody = {
  policyGroupId?: string(name='PolicyGroupId', example='pg-exbuu6yrpvb******'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC******'),
}

model CreatePolicyGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePolicyGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePolicyGroup  CreatePolicyGroupRequest
  * @return CreatePolicyGroupResponse
 */
async function createPolicyGroup(request: CreatePolicyGroupRequest): CreatePolicyGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePolicyGroup', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAndroidInstanceGroupRequest {
  instanceGroupIds?: [ string ](name='InstanceGroupIds', position='Query'),
}

model DeleteAndroidInstanceGroupResponseBody = {
  requestId?: string(name='RequestId', example='CB95E410-FD1D-53C5-9F7D-93CC44D7****'),
}

model DeleteAndroidInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAndroidInstanceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAndroidInstanceGroup  DeleteAndroidInstanceGroupRequest
  * @return DeleteAndroidInstanceGroupResponse
 */
async function deleteAndroidInstanceGroup(request: DeleteAndroidInstanceGroupRequest): DeleteAndroidInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAndroidInstanceGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAppsRequest {
  appIdList?: [ string ](name='AppIdList', position='Query'),
}

model DeleteAppsResponseBody = {
  requestId?: string(name='RequestId', example='310A783E-CC46-5452-A8A3-71AE5DB5****'),
}

model DeleteAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteApps  DeleteAppsRequest
  * @return DeleteAppsResponse
 */
async function deleteApps(request: DeleteAppsRequest): DeleteAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApps', 'POST', '/', 'json', false, 'json', request);
}

model DeleteImagesRequest {
  imageIds: [ string ](name='ImageIds', description='This parameter is required.', shrink='json', position='Body'),
}

model DeleteImagesResponseBody = {
  data?: {
    failDeleteImageIds?: [ string ](name='FailDeleteImageIds'),
    successDeleteImageIds?: [ string ](name='SuccessDeleteImageIds'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='4610632D-D661-5982-B3D7-5D3FD183F595'),
}

model DeleteImagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteImagesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteImages  DeleteImagesRequest
  * @return DeleteImagesResponse
 */
async function deleteImages(request: DeleteImagesRequest): DeleteImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteImages', 'POST', '/', 'json', true, 'form', request);
}

model DeleteKeyPairsRequest {
  keyPairIds?: [ string ](name='KeyPairIds', position='Query'),
}

model DeleteKeyPairsResponseBody = {
  requestId?: string(name='RequestId', example='5C5CEF0A-D6E1-58D3-8750-67DB4F82****'),
}

model DeleteKeyPairsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteKeyPairsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteKeyPairs  DeleteKeyPairsRequest
  * @return DeleteKeyPairsResponse
 */
async function deleteKeyPairs(request: DeleteKeyPairsRequest): DeleteKeyPairsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteKeyPairs', 'POST', '/', 'json', false, 'json', request);
}

model DeletePolicyGroupRequest {
  policyGroupIds: [ string ](name='PolicyGroupIds', description='This parameter is required.', position='Query'),
}

model DeletePolicyGroupResponseBody = {
  requestId?: string(name='RequestId', example='17C731AB-AAEE-5844-A352-D8D0352D3F0B'),
}

model DeletePolicyGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePolicyGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeletePolicyGroup  DeletePolicyGroupRequest
  * @return DeletePolicyGroupResponse
 */
async function deletePolicyGroup(request: DeletePolicyGroupRequest): DeletePolicyGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePolicyGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAndroidInstanceGroupsRequest {
  bizRegionId?: string(name='BizRegionId', example='cn-hangzhou', position='Query'),
  chargeType?: string(name='ChargeType', example='PostPaid', position='Query'),
  instanceGroupIds?: [ string ](name='InstanceGroupIds', position='Query'),
  instanceGroupName?: string(name='InstanceGroupName', position='Query'),
  keyPairId?: string(name='KeyPairId', example='kp-5htf0ymsrnb7q****', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6l5V9uONHqPtDLM2U8s****', position='Query'),
  policyGroupId?: string(name='PolicyGroupId', example='pg-1b77w6xrqfubi****', position='Query'),
  saleMode?: string(name='SaleMode', example='standard', position='Query'),
  status?: string(name='Status', example='CREATING', position='Query'),
}

model DescribeAndroidInstanceGroupsResponseBody = {
  instanceGroupModel?: [ 
    {
      appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-48xr63m4dybjk****'),
      architectureType?: string(name='ArchitectureType', example='ARM'),
      availableInstanceAmount?: int32(name='AvailableInstanceAmount'),
      chargeType?: string(name='ChargeType', example='PrePaid'),
      cpu?: string(name='Cpu', example='8'),
      disks?: [ 
        {
          diskSize?: int32(name='DiskSize', example='32'),
          diskType?: string(name='DiskType', example='SYSTEM'),
        }
      ](name='Disks'),
      errorCode?: string(name='ErrorCode'),
      gmtCreate?: string(name='GmtCreate', example='2024-02-01 10:56:36'),
      gmtExpired?: string(name='GmtExpired', example='2027-06-29 07:25:31'),
      gmtModified?: string(name='GmtModified', example='2024-02-01 10:56:36'),
      imageId?: string(name='ImageId', example='imgc-06zyt9m93zwax****'),
      installedAppList?: string(name='InstalledAppList'),
      instanceGroupId?: string(name='InstanceGroupId', example='ag-h67a2cs0zprfdh****'),
      instanceGroupName?: string(name='InstanceGroupName'),
      instanceGroupSpec?: string(name='InstanceGroupSpec', example='acp.basic.small'),
      instanceGroupSpecDescribe?: string(name='InstanceGroupSpecDescribe', example='ARM-2vCPU4GiB 32GiB'),
      instanceGroupStatus?: string(name='InstanceGroupStatus', example='RUNNING'),
      memory?: int32(name='Memory', example='8'),
      numberOfInstances?: string(name='NumberOfInstances', example='10'),
      officeSiteId?: string(name='OfficeSiteId', example='cn-shanghai+dir-030598****'),
      policyGroupId?: string(name='PolicyGroupId', example='pg-c6n38xucps8kl****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      renderingType?: string(name='RenderingType'),
      resolutionHeight?: int32(name='ResolutionHeight', example='1280'),
      resolutionWidth?: int32(name='ResolutionWidth', example='720'),
      saleMode?: string(name='SaleMode', example='standard'),
      systemVersion?: string(name='SystemVersion', example='Android 12'),
      vSwitchId?: string(name='VSwitchId', example='vsw-t4n0yqs009ho024wt****'),
    }
  ](name='InstanceGroupModel'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6l5V9uONHqPtDLM2U8s****'),
  requestId?: string(name='RequestId', example='F07A1DA1-E1EB-5CCA-8EED-12F85D32****'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model DescribeAndroidInstanceGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAndroidInstanceGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAndroidInstanceGroups  DescribeAndroidInstanceGroupsRequest
  * @return DescribeAndroidInstanceGroupsResponse
 */
async function describeAndroidInstanceGroups(request: DescribeAndroidInstanceGroupsRequest): DescribeAndroidInstanceGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAndroidInstanceGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAndroidInstancesRequest {
  androidInstanceIds?: [ string ](name='AndroidInstanceIds', position='Query'),
  androidInstanceName?: string(name='AndroidInstanceName', example='name', position='Query'),
  bizRegionId?: string(name='BizRegionId', position='Query'),
  chargeType?: string(name='ChargeType', position='Query'),
  instanceGroupId?: string(name='InstanceGroupId', example='ag-25nt4kk9whjh****', position='Query'),
  instanceGroupIds?: [ string ](name='InstanceGroupIds', position='Query'),
  instanceGroupName?: string(name='InstanceGroupName', position='Query'),
  keyPairId?: string(name='KeyPairId', example='kp-5hh431emkpuoi****', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6kw9dGL5jves2FS9RLq****', position='Query'),
  saleMode?: string(name='SaleMode', example='standard', position='Query'),
  status?: string(name='Status', example='RUNNING', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeAndroidInstancesResponseBody = {
  instanceModel?: [ 
    {
      androidInstanceGroupId?: string(name='AndroidInstanceGroupId', example='ag-ayyhomlal7po****'),
      androidInstanceGroupName?: string(name='AndroidInstanceGroupName'),
      androidInstanceId?: string(name='AndroidInstanceId', example='acp-8at8h6ejkadjh****'),
      androidInstanceName?: string(name='AndroidInstanceName', example='name'),
      androidInstanceStatus?: string(name='AndroidInstanceStatus', example='RUNNING'),
      appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-i7yv6tkn7kh8dv****'),
      appInstanceId?: string(name='AppInstanceId', example='ai-9ey6io0q58rcd****'),
      authorizedUserId?: string(name='AuthorizedUserId', example='test'),
      bindUserId?: string(name='BindUserId', example='test'),
      chargeType?: string(name='ChargeType'),
      cpu?: string(name='Cpu'),
      disks?: [ 
        {
          diskSize?: int32(name='DiskSize'),
          diskType?: string(name='DiskType'),
        }
      ](name='Disks'),
      errorCode?: string(name='ErrorCode', example='FilePathNotFound'),
      gmtCreate?: string(name='GmtCreate', example='2023-05-06 10:42:10'),
      gmtExpired?: string(name='GmtExpired'),
      gmtModified?: string(name='GmtModified', example='2023-05-06 10:42:10'),
      imageVersion?: string(name='ImageVersion'),
      instanceType?: string(name='InstanceType'),
      keyPairId?: string(name='KeyPairId', example='kp-5hh431emkpucs****'),
      memory?: int32(name='Memory'),
      networkInterfaceIp?: string(name='NetworkInterfaceIp', example='192.168.22.48'),
      officeSiteId?: string(name='OfficeSiteId'),
      persistentAppInstanceId?: string(name='PersistentAppInstanceId', example='p-0btrd5zj8epo****'),
      policyGroupId?: string(name='PolicyGroupId'),
      publicIpAddress?: string(name='PublicIpAddress'),
      rate?: int32(name='Rate', example='100'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      renderingType?: string(name='RenderingType'),
      sessionStatus?: string(name='SessionStatus'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
    }
  ](name='InstanceModel'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6kmma/xxE9WtwL/ADvZ****'),
  requestId?: string(name='RequestId', example='F07A1DA1-E1EB-5CCA-8EED-12F85D32****'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model DescribeAndroidInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAndroidInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAndroidInstances  DescribeAndroidInstancesRequest
  * @return DescribeAndroidInstancesResponse
 */
async function describeAndroidInstances(request: DescribeAndroidInstancesRequest): DescribeAndroidInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAndroidInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppsRequest {
  appIdList?: [ string ](name='AppIdList', position='Query'),
  appName?: string(name='AppName', position='Query'),
  bizRegionId?: string(name='BizRegionId', position='Query'),
  installationStatus?: string(name='InstallationStatus', example='INSTALLING', position='Query'),
  mD5?: string(name='MD5', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6kU+SQXzm0H9mu/FiSc****', position='Query'),
  status?: string(name='Status', example='NORMAL', position='Query'),
}

model DescribeAppsResponseBody = {
  data?: [ 
    {
      androidAppVersion?: string(name='AndroidAppVersion', example='1.0.0'),
      apkSize?: string(name='ApkSize'),
      appId?: int32(name='AppId', example='10404'),
      appName?: string(name='AppName', example='testapp'),
      bizRegionId?: string(name='BizRegionId'),
      description?: string(name='Description'),
      gmtCreate?: string(name='GmtCreate', example='2022-08-11 17:45:03'),
      gmtModified?: string(name='GmtModified', example='2022-08-11 17:45:03'),
      iconUrl?: string(name='IconUrl', example='https://test.png'),
      installationStatus?: string(name='InstallationStatus', example='INSTALLING'),
      instanceGroupList?: [ string ](name='InstanceGroupList'),
      mD5?: string(name='MD5'),
      packageName?: string(name='PackageName'),
      status?: string(name='Status', example='NORMAL'),
    }
  ](name='Data'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6l5V9uON****'),
  requestId?: string(name='RequestId', example='CB95E410-FD1D-53C5-9F7D-93CC44D7****'),
  totalCount?: string(name='TotalCount', example='10'),
}

model DescribeAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeApps  DescribeAppsRequest
  * @return DescribeAppsResponse
 */
async function describeApps(request: DescribeAppsRequest): DescribeAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApps', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupFilesRequest {
  androidInstanceId?: string(name='AndroidInstanceId', example='acp-34pqe4r0kd9kn****', position='Query'),
  androidInstanceName?: string(name='AndroidInstanceName', example='acp-34pqe4r0kd9kn****', position='Query'),
  backupAll?: boolean(name='BackupAll', position='Query'),
  backupFileId?: string(name='BackupFileId', example='bf-dxrh5jrv0zpb8****', position='Query'),
  backupFileName?: string(name='BackupFileName', position='Query'),
  description?: string(name='Description', position='Query'),
  endTime?: string(name='EndTime', example='2024-05-20 10:00:00', position='Query'),
  endUserId?: string(name='EndUserId', example='test1', position='Query'),
  instanceGroupId?: string(name='InstanceGroupId', example='ag-fxdx91jsfyiy3****', position='Query'),
  maxResults?: long(name='MaxResults', example='10', minimum=0, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6l5V9uON****', position='Query'),
  startTime?: string(name='StartTime', example='2024-05-23 10:00:00', position='Query'),
  statusList?: [ string ](name='StatusList', position='Query'),
}

model DescribeBackupFilesResponseBody = {
  data?: [ 
    {
      androidInstanceId?: string(name='AndroidInstanceId', example='acp-34pqe4r0kd9kn****'),
      androidInstanceName?: string(name='AndroidInstanceName'),
      backupAll?: boolean(name='BackupAll'),
      backupFileId?: string(name='BackupFileId', example='bf-b0qbg3pbpjkn7****'),
      backupFileName?: string(name='BackupFileName', example='a-58ftsoo90p0qa****.ab'),
      backupFilePath?: string(name='BackupFilePath', example='oss://cloudphone-saved-bucket-cn-shanghai/backup/aic-58ftsoo90p0qa****.ab'),
      description?: string(name='Description'),
      endUserId?: string(name='EndUserId', example='test'),
      fileSize?: long(name='FileSize', example='10227168'),
      gmtCreated?: string(name='GmtCreated', example='2024-05-15 17:33:59'),
      gmtModified?: string(name='GmtModified', example='2024-05-15 17:33:59'),
      instanceGroupId?: string(name='InstanceGroupId', example='ag-58ftsoo90p0qi****'),
      regionId?: string(name='RegionId'),
      sourceAppInfoList?: [ string ](name='SourceAppInfoList'),
      sourceFilePathList?: [ string ](name='SourceFilePathList'),
      status?: string(name='Status', example='AVAILABLE'),
      taskId?: string(name='TaskId'),
      uploadEndpoint?: string(name='UploadEndpoint', example='oss-cn-hangzhou.aliyuncs.com'),
      uploadType?: string(name='UploadType', example='OSS'),
    }
  ](name='Data'),
  maxResults?: string(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6l5V9uON****'),
  requestId?: string(name='RequestId', example='425F351C-3F8E-5218-A520-B6311D0D****'),
  totalCount?: long(name='TotalCount', example='91'),
}

model DescribeBackupFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBackupFilesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeBackupFiles  DescribeBackupFilesRequest
  * @return DescribeBackupFilesResponse
 */
async function describeBackupFiles(request: DescribeBackupFilesRequest): DescribeBackupFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupFiles', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageListRequest {
  imageId?: string(name='ImageId', example='imgc-075cllfeuazh0****', position='Body'),
  imageName?: string(name='ImageName', position='Body'),
  imageType: string(name='ImageType', description='This parameter is required.', example='System', position='Body'),
  maxResults?: int32(name='MaxResults', example='20', minimum=1, maximum=100, position='Body'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6kw9dGL5jves2FS9RLq****', position='Body'),
  status?: string(name='Status', example='AVAILABLE', position='Body'),
}

model DescribeImageListResponseBody = {
  data?: [ 
    {
      aliUid?: long(name='AliUid', example='117819727354****'),
      description?: string(name='Description', example='description'),
      gmtCreate?: string(name='GmtCreate', example='2024-02-01 10:56:36'),
      gmtModified?: string(name='GmtModified', example='2024-02-01 10:56:36'),
      imageId?: string(name='ImageId', example='imgc-075cllfeuazh****'),
      imageName?: string(name='ImageName', example='IMAGE'),
      imageRegionDistributeMap?: map[string]DataImageRegionDistributeMapValue(name='ImageRegionDistributeMap'),
      imageRegionList?: [ string ](name='ImageRegionList'),
      imageType?: string(name='ImageType', example='System'),
      language?: string(name='Language', example='zh'),
      releaseTime?: string(name='ReleaseTime'),
      renderingType?: string(name='RenderingType'),
      status?: string(name='Status', example='AVAILABLE'),
      systemType?: string(name='SystemType', example='Android 12'),
    }
  ](name='Data'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6l5V9uON****'),
  requestId?: string(name='RequestId', example='620740FF-492F-5956-B1BA-361E966C0269'),
  totalCount?: int32(name='TotalCount', example='30'),
}

model DescribeImageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeImageListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeImageList  DescribeImageListRequest
  * @return DescribeImageListResponse
 */
async function describeImageList(request: DescribeImageListRequest): DescribeImageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageList', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInvocationsRequest {
  instanceIds: [ string ](name='InstanceIds', description='This parameter is required.', position='Query'),
  invocationId: string(name='InvocationId', description='This parameter is required.', example='t-4e98eeb5****', position='Query'),
}

model DescribeInvocationsResponseBody = {
  data?: [ 
    {
      finishTime?: string(name='FinishTime', example='2022-08-11 17:45:03'),
      instanceId?: string(name='InstanceId', example='acp-uto81vfd8t8z****'),
      invocationId?: string(name='InvocationId', example='t-15775dc8****'),
      invocationStatus?: string(name='InvocationStatus', example='RUNNING'),
      output?: string(name='Output', example='success'),
      startTime?: string(name='StartTime', example='2022-08-11 17:45:03'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='440D7342-5E7C-B2DB-D0B4EAC2BDF1****'),
  totalCount?: string(name='TotalCount', example='10'),
}

model DescribeInvocationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInvocationsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeInvocations  DescribeInvocationsRequest
  * @return DescribeInvocationsResponse
 */
async function describeInvocations(request: DescribeInvocationsRequest): DescribeInvocationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInvocations', 'POST', '/', 'json', false, 'json', request);
}

model DescribeKeyPairsRequest {
  keyPairIds?: [ string ](name='KeyPairIds', position='Query'),
  keyPairName?: string(name='KeyPairName', example='testKeyPairName', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=0, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAYRHtOLVQzCYj17y+OP7LZQBUVVbi0GTu8g5****', position='Query'),
}

model DescribeKeyPairsResponseBody = {
  data?: [ 
    {
      gmtCreated?: string(name='GmtCreated', example='2022-10-11T08:53:32Z'),
      keyPairId?: string(name='KeyPairId', example='kp-6v2q33ae4tw3*****'),
      keyPairName?: string(name='KeyPairName', example='testKeyPairName'),
    }
  ](name='Data'),
  nextToken?: string(name='NextToken', example='FFbc8N4E1iOlcSxC+8boa0HHH2LKWbggYUinyrZWvtS1oTrMYCg1HuMLGuftj0****'),
  requestId?: string(name='RequestId', example='565FB06A-AE04-5AD0-8A32-5BA92CA5****'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model DescribeKeyPairsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeKeyPairsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeKeyPairs  DescribeKeyPairsRequest
  * @return DescribeKeyPairsResponse
 */
async function describeKeyPairs(request: DescribeKeyPairsRequest): DescribeKeyPairsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeKeyPairs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Query'),
}

model DescribeRegionsResponseBody = {
  regionModels?: [ 
    {
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      regionName?: string(name='RegionName'),
    }
  ](name='RegionModels'),
  requestId?: string(name='RequestId', example='A87B3769-0D05-5383-B236-5798B455****'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRegions  DescribeRegionsRequest
  * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSpecRequest {
  bizRegionId?: string(name='BizRegionId', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', minimum=0, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6l5V9uONHqPtDLM2U8s****', position='Query'),
  specIds?: [ string ](name='SpecIds', position='Query'),
  specStatus?: string(name='SpecStatus', example='Available', position='Query'),
  specType?: string(name='SpecType', example='ARM', position='Query'),
}

model DescribeSpecResponseBody = {
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6kw9dGL5jves2FS9RLq****'),
  requestId?: string(name='RequestId', example='D9888DAD-331E-5FBC-B5A0-F2445115****'),
  specInfoModel?: [ 
    {
      core?: int32(name='Core', example='8'),
      memory?: int32(name='Memory', example='16'),
      specId?: string(name='SpecId', example='acp.basic.small'),
      specStatus?: string(name='SpecStatus', example='Available'),
      specType?: string(name='SpecType', example='ARM'),
      systemDiskSize?: int32(name='SystemDiskSize', example='32'),
    }
  ](name='SpecInfoModel'),
  totalCount?: int32(name='TotalCount', example='4'),
}

model DescribeSpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSpecResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSpec  DescribeSpecRequest
  * @return DescribeSpecResponse
 */
async function describeSpec(request: DescribeSpecRequest): DescribeSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSpec', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTasksRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  invokeId?: string(name='InvokeId', example='B8ED2BA9-0C6A-5643-818F-B5D60A64****', position='Query'),
  level?: int32(name='Level', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=0, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='FFbc8N4E1iOlcSxC+8boa0HHH2LKWbggYUinyrZWvtS1oTrMYCg1HuMLGuftj0****', position='Query'),
  param?: string(name='Param', position='Query'),
  parentTaskId?: string(name='ParentTaskId', position='Query'),
  resourceIds?: [ string ](name='ResourceIds', position='Query'),
  taskIds?: [ string ](name='TaskIds', position='Query'),
  taskStatus?: string(name='TaskStatus', example='Processing', position='Query'),
  taskStatuses?: [ string ](name='TaskStatuses', position='Query'),
  taskType?: string(name='TaskType', example='StartInstance', position='Query'),
  taskTypes?: [ string ](name='TaskTypes', position='Query'),
}

model DescribeTasksResponseBody = {
  data?: [ 
    {
      errorCode?: string(name='ErrorCode'),
      errorMsg?: string(name='ErrorMsg'),
      failedChildCount?: int32(name='FailedChildCount'),
      finishTime?: string(name='FinishTime', example='2022-10-11T08:53:32Z'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      instanceStatus?: string(name='InstanceStatus'),
      invokeId?: string(name='InvokeId', example='B8ED2BA9-0C6A-5643-818F-B5D60A64****'),
      level?: int32(name='Level'),
      operator?: string(name='Operator'),
      param?: string(name='Param'),
      parentTaskId?: string(name='ParentTaskId'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceId?: string(name='ResourceId', example='acp-25nt4kk9whhok****'),
      result?: string(name='Result'),
      runningChildCount?: int32(name='RunningChildCount'),
      startTime?: string(name='StartTime', example='2022-10-11T08:53:32Z'),
      successChildCount?: int32(name='SuccessChildCount'),
      taskId?: string(name='TaskId', example='t-bp67acfmxazb4p****'),
      taskStatus?: string(name='TaskStatus', example='Processing'),
      taskType?: string(name='TaskType', example='StartInstance'),
      totalChildCount?: int32(name='TotalChildCount'),
    }
  ](name='Data'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6kU+SQXzm0H9mu/FiSc****'),
  requestId?: string(name='RequestId', example='B8ED2BA9-0C6A-5643-818F-B5D60A64****'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model DescribeTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeTasks  DescribeTasksRequest
  * @return DescribeTasksResponse
 */
async function describeTasks(request: DescribeTasksRequest): DescribeTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTasks', 'POST', '/', 'json', false, 'json', request);
}

model DetachKeyPairRequest {
  instanceIds?: [ string ](name='InstanceIds', position='Query'),
  keyPairId: string(name='KeyPairId', description='This parameter is required.', example='kp-6v2q33ae4tw3a****', position='Query'),
}

model DetachKeyPairResponseBody = {
  data?: {
    detachedInstanceIds?: [ string ](name='DetachedInstanceIds'),
    failCount?: int32(name='FailCount', example='0'),
    keyPairId?: string(name='KeyPairId', example='kp-6v2q33ae4tw3a****'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='69BCBBE4-FCF2-59B8-AD9D-531EB422****'),
}

model DetachKeyPairResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachKeyPairResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DetachKeyPair  DetachKeyPairRequest
  * @return DetachKeyPairResponse
 */
async function detachKeyPair(request: DetachKeyPairRequest): DetachKeyPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachKeyPair', 'POST', '/', 'json', false, 'json', request);
}

model DistributeImageRequest {
  distributeRegionList: [ string ](name='DistributeRegionList', description='This parameter is required.', position='Body'),
  imageId: string(name='ImageId', description='This parameter is required.', example='imgc-075cllfeuazh0****', position='Body'),
}

model DistributeImageResponseBody = {
  requestId?: string(name='RequestId', example='440D7342-5FC2-5E7C-B2DB-D0B4EAC2BDF1'),
}

model DistributeImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DistributeImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DistributeImage  DistributeImageRequest
  * @return DistributeImageResponse
 */
async function distributeImage(request: DistributeImageRequest): DistributeImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DistributeImage', 'POST', '/', 'json', true, 'form', request);
}

model DowngradeAndroidInstanceGroupRequest {
  androidInstanceIds?: [ string ](name='AndroidInstanceIds', position='Query'),
  autoPay?: boolean(name='AutoPay', example='true', position='Query'),
  instanceGroupId: string(name='InstanceGroupId', description='This parameter is required.', example='ag-cuv4scs4obxhs****', position='Query'),
}

model DowngradeAndroidInstanceGroupResponseBody = {
  orderId?: string(name='OrderId', example='22326560487****'),
  requestId?: string(name='RequestId', example='3AF82CE1-2801-52CE-BF64-B491DD7C****'),
}

model DowngradeAndroidInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DowngradeAndroidInstanceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DowngradeAndroidInstanceGroup  DowngradeAndroidInstanceGroupRequest
  * @return DowngradeAndroidInstanceGroupResponse
 */
async function downgradeAndroidInstanceGroup(request: DowngradeAndroidInstanceGroupRequest): DowngradeAndroidInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DowngradeAndroidInstanceGroup', 'POST', '/', 'json', false, 'json', request);
}

model FetchFileRequest {
  androidInstanceIdList: [ string ](name='AndroidInstanceIdList', description='This parameter is required.', position='Query'),
  sourceFilePath: string(name='SourceFilePath', description='This parameter is required.', example='/data/a.txt', position='Query'),
  uploadEndpoint: string(name='UploadEndpoint', description='This parameter is required.', example='oss-cn-hangzhou.aliyuncs.com', position='Query'),
  uploadType: string(name='UploadType', description='This parameter is required.', example='OSS', position='Query'),
  uploadUrl: string(name='UploadUrl', description='This parameter is required.', position='Query'),
}

model FetchFileResponseBody = {
  data?: [ 
    {
      androidInstanceId?: string(name='AndroidInstanceId'),
      taskId?: string(name='TaskId'),
    }
  ](name='Data', example='425F351C-3F8E-5218-A520-B6311D0D****'),
  requestId?: string(name='RequestId', example='425F351C-3F8E-5218-A520-B6311D0D****'),
  taskId?: string(name='TaskId'),
}

model FetchFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FetchFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of FetchFile  FetchFileRequest
  * @return FetchFileResponse
 */
async function fetchFile(request: FetchFileRequest): FetchFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FetchFile', 'POST', '/', 'json', false, 'json', request);
}

model ImportKeyPairRequest {
  keyPairName: string(name='KeyPairName', description='This parameter is required.', example='TestKeyPairName', minLength=1, maxLength=128, position='Query'),
  publicKeyBody: string(name='PublicKeyBody', description='This parameter is required.', example='ABC1234567*****', minLength=1, maxLength=1024, position='Query'),
}

model ImportKeyPairResponseBody = {
  data?: {
    gmtCreated?: string(name='GmtCreated', example='2023-03-05T10:29:22Z'),
    keyPairId?: string(name='KeyPairId', example='kp-6v2q33ae4tw3*****'),
    keyPairName?: string(name='KeyPairName', example='TestKeyPairName'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='69BCBBE4-FCF2-59B8-AD9D-531EB422****'),
}

model ImportKeyPairResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportKeyPairResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ImportKeyPair  ImportKeyPairRequest
  * @return ImportKeyPairResponse
 */
async function importKeyPair(request: ImportKeyPairRequest): ImportKeyPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportKeyPair', 'POST', '/', 'json', false, 'json', request);
}

model InstallAppRequest {
  appIdList?: [ string ](name='AppIdList', position='Query'),
  instanceGroupIdList?: [ string ](name='InstanceGroupIdList', position='Query'),
  instanceIdList?: [ string ](name='InstanceIdList', position='Query'),
}

model InstallAppResponseBody = {
  requestId?: string(name='RequestId', example='E5138F7E-46B5-526A-8C99-82DEAE6B****'),
  taskId?: string(name='TaskId'),
}

model InstallAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InstallAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InstallApp  InstallAppRequest
  * @return InstallAppResponse
 */
async function installApp(request: InstallAppRequest): InstallAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallApp', 'POST', '/', 'json', false, 'json', request);
}

model ListPolicyGroupsRequest {
  maxResults?: int32(name='MaxResults', example='20', minimum=1, maximum=100, position='Body'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6kU+SQXzm0H9mu/FiSc****', position='Body'),
  policyGroupIds?: [ string ](name='PolicyGroupIds', position='Body'),
  policyGroupName?: string(name='PolicyGroupName', position='Body'),
}

model ListPolicyGroupsResponseBody = {
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6l5V9uON****'),
  policyGroupModel?: [ 
    {
      cameraRedirect?: string(name='CameraRedirect', example='on'),
      clipboard?: string(name='Clipboard', example='readwrite'),
      gmtCreate?: string(name='GmtCreate', example='2024-06-04 10:28:54'),
      html5FileTransfer?: string(name='Html5FileTransfer', example='download'),
      localDrive?: string(name='LocalDrive', example='off'),
      lockResolution?: string(name='LockResolution'),
      netRedirectPolicy?: {
        customProxy?: string(name='CustomProxy'),
        hostAddr?: string(name='HostAddr'),
        netRedirect?: string(name='NetRedirect'),
        port?: string(name='Port'),
        proxyPassword?: string(name='ProxyPassword'),
        proxyType?: string(name='ProxyType'),
        proxyUserName?: string(name='ProxyUserName'),
        rules?: [ 
          {
            ruleType?: string(name='RuleType'),
            target?: string(name='Target'),
          }
        ](name='Rules'),
      }(name='NetRedirectPolicy'),
      policyGroupId?: string(name='PolicyGroupId', example='pg-9q6o8qpiy8opkj****'),
      policyGroupName?: string(name='PolicyGroupName'),
      sessionResolutionHeight?: string(name='SessionResolutionHeight', example='1080'),
      sessionResolutionWidth?: string(name='SessionResolutionWidth', example='1920'),
    }
  ](name='PolicyGroupModel'),
  requestId?: string(name='RequestId', example='7B9EFA4F-4305-5968-BAEE-BD8B8DE5****'),
  totalCount?: int32(name='TotalCount', example='31'),
}

model ListPolicyGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPolicyGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPolicyGroups  ListPolicyGroupsRequest
  * @return ListPolicyGroupsResponse
 */
async function listPolicyGroups(request: ListPolicyGroupsRequest): ListPolicyGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPolicyGroups', 'POST', '/', 'json', true, 'form', request);
}

model ModifyAndroidInstanceRequest {
  androidInstanceId?: string(name='AndroidInstanceId', example='acp-8v5bjld0r7tkl****', position='Query'),
  newAndroidInstanceName?: string(name='NewAndroidInstanceName', example='new_name', position='Query'),
}

model ModifyAndroidInstanceResponseBody = {
  requestId?: string(name='RequestId', example='E5138F7E-46B5-526A-8C99-82DEAE6B****'),
}

model ModifyAndroidInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAndroidInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAndroidInstance  ModifyAndroidInstanceRequest
  * @return ModifyAndroidInstanceResponse
 */
async function modifyAndroidInstance(request: ModifyAndroidInstanceRequest): ModifyAndroidInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAndroidInstance', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAndroidInstanceGroupRequest {
  instanceGroupId?: string(name='InstanceGroupId', example='ag-cuv4scs4obxhs****', position='Query'),
  newInstanceGroupName?: string(name='NewInstanceGroupName', example='newName', position='Query'),
  policyGroupId?: string(name='PolicyGroupId', example='pg-2w97kp89gnsif****', position='Query'),
}

model ModifyAndroidInstanceGroupResponseBody = {
  requestId?: string(name='RequestId', example='6C83EBE3-F267-5F11-ABF8-4E7B90B****'),
}

model ModifyAndroidInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAndroidInstanceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAndroidInstanceGroup  ModifyAndroidInstanceGroupRequest
  * @return ModifyAndroidInstanceGroupResponse
 */
async function modifyAndroidInstanceGroup(request: ModifyAndroidInstanceGroupRequest): ModifyAndroidInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAndroidInstanceGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAppRequest {
  appId?: int32(name='AppId', example='1234', position='Query'),
  appName?: string(name='AppName', position='Query'),
  description?: string(name='Description', position='Query'),
  iconUrl?: string(name='IconUrl', example='https://defaultIcon.png', position='Query'),
}

model ModifyAppResponseBody = {
  requestId?: string(name='RequestId', example='83418504-5A82-5896-A24C-B2D468F0****'),
}

model ModifyAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyApp  ModifyAppRequest
  * @return ModifyAppResponse
 */
async function modifyApp(request: ModifyAppRequest): ModifyAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyApp', 'POST', '/', 'json', false, 'json', request);
}

model ModifyKeyPairNameRequest {
  keyPairId: string(name='KeyPairId', description='This parameter is required.', example='kp-6v2q33ae4tw3a****', position='Query'),
  newKeyPairName: string(name='NewKeyPairName', description='This parameter is required.', example='newKeyPairName', position='Query'),
}

model ModifyKeyPairNameResponseBody = {
  requestId?: string(name='RequestId', example='69BCBBE4-FCF2-59B8-AD9D-531EB422****'),
}

model ModifyKeyPairNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyKeyPairNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyKeyPairName  ModifyKeyPairNameRequest
  * @return ModifyKeyPairNameResponse
 */
async function modifyKeyPairName(request: ModifyKeyPairNameRequest): ModifyKeyPairNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyKeyPairName', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPolicyGroupRequest {
  cameraRedirect?: string(name='CameraRedirect', example='off', position='Body'),
  clipboard?: string(name='Clipboard', example='readwrite', position='Body'),
  html5FileTransfer?: string(name='Html5FileTransfer', example='off', position='Body'),
  localDrive?: string(name='LocalDrive', example='off', position='Body'),
  lockResolution?: string(name='LockResolution', position='Body'),
  netRedirectPolicy?: {
    customProxy?: string(name='CustomProxy'),
    hostAddr?: string(name='HostAddr'),
    netRedirect?: string(name='NetRedirect'),
    port?: string(name='Port'),
    proxyPassword?: string(name='ProxyPassword'),
    proxyType?: string(name='ProxyType'),
    proxyUserName?: string(name='ProxyUserName'),
  }(name='NetRedirectPolicy', shrink='json', position='Body'),
  policyGroupId?: string(name='PolicyGroupId', example='pg-4bi18ebi9tfjh****', position='Body'),
  policyGroupName?: string(name='PolicyGroupName', position='Body'),
  resolutionHeight?: int32(name='ResolutionHeight', example='1280', position='Body'),
  resolutionWidth?: int32(name='ResolutionWidth', example='720', position='Body'),
}

model ModifyPolicyGroupResponseBody = {
  requestId?: string(name='RequestId', example='552B7EED-D434-511F-B838-29EA4E906034'),
}

model ModifyPolicyGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPolicyGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyPolicyGroup  ModifyPolicyGroupRequest
  * @return ModifyPolicyGroupResponse
 */
async function modifyPolicyGroup(request: ModifyPolicyGroupRequest): ModifyPolicyGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPolicyGroup', 'POST', '/', 'json', true, 'form', request);
}

model OperateAppRequest {
  appId?: int32(name='AppId', example='1234', position='Query'),
  instanceIdList?: [ string ](name='InstanceIdList', position='Query'),
  operateType?: string(name='OperateType', example='start', position='Query'),
}

model OperateAppResponseBody = {
  requestId?: string(name='RequestId', example='425F351C-3F8E-5218-A520-B6311D0D****'),
  taskId?: string(name='TaskId', example='t-imr0fufqgac2z****'),
}

model OperateAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OperateApp  OperateAppRequest
  * @return OperateAppResponse
 */
async function operateApp(request: OperateAppRequest): OperateAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateApp', 'POST', '/', 'json', false, 'json', request);
}

model RebootAndroidInstancesInGroupRequest {
  androidInstanceIds?: [ string ](name='AndroidInstanceIds', position='Query'),
  forceStop?: boolean(name='ForceStop', position='Query'),
}

model RebootAndroidInstancesInGroupResponseBody = {
  requestId?: string(name='RequestId', example='227CBB4C-F5DC-589D-A667-C5CA3D52****'),
}

model RebootAndroidInstancesInGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RebootAndroidInstancesInGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RebootAndroidInstancesInGroup  RebootAndroidInstancesInGroupRequest
  * @return RebootAndroidInstancesInGroupResponse
 */
async function rebootAndroidInstancesInGroup(request: RebootAndroidInstancesInGroupRequest): RebootAndroidInstancesInGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebootAndroidInstancesInGroup', 'POST', '/', 'json', false, 'json', request);
}

model RecoveryFileRequest {
  androidInstanceIdList: [ string ](name='AndroidInstanceIdList', description='This parameter is required.', position='Query'),
  backupAll?: boolean(name='BackupAll', position='Query'),
  backupFileId?: string(name='BackupFileId', example='bf-azhps4rdyi2th****', position='Query'),
  backupFilePath?: string(name='BackupFilePath', position='Query'),
  uploadEndpoint?: string(name='UploadEndpoint', example='oss-cn-hangzhou-internal.aliyuncs.com', position='Query'),
  uploadType?: string(name='UploadType', example='OSS', position='Query'),
}

model RecoveryFileResponseBody = {
  count?: long(name='Count'),
  data?: [ 
    {
      androidInstanceId?: string(name='AndroidInstanceId'),
      taskId?: string(name='TaskId'),
    }
  ](name='Data', example='6AD56E39-430B-5401-AB4A-7B086454****'),
  requestId?: string(name='RequestId', example='6AD56E39-430B-5401-AB4A-7B086454****'),
  taskId?: string(name='TaskId'),
}

model RecoveryFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecoveryFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RecoveryFile  RecoveryFileRequest
  * @return RecoveryFileResponse
 */
async function recoveryFile(request: RecoveryFileRequest): RecoveryFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecoveryFile', 'POST', '/', 'json', false, 'json', request);
}

model RenewAndroidInstanceGroupsRequest {
  autoPay?: boolean(name='AutoPay', example='true', position='Query'),
  instanceGroupIds?: [ string ](name='InstanceGroupIds', position='Query'),
  period?: int32(name='Period', example='6', position='Query'),
  periodUnit?: string(name='PeriodUnit', example='Month', position='Query'),
}

model RenewAndroidInstanceGroupsResponseBody = {
  orderId?: string(name='OrderId', example='22326560487****'),
  requestId?: string(name='RequestId', example='4B886792-2051-5DB4-8AE6-C8E45D3B4****'),
}

model RenewAndroidInstanceGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenewAndroidInstanceGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RenewAndroidInstanceGroups  RenewAndroidInstanceGroupsRequest
  * @return RenewAndroidInstanceGroupsResponse
 */
async function renewAndroidInstanceGroups(request: RenewAndroidInstanceGroupsRequest): RenewAndroidInstanceGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewAndroidInstanceGroups', 'POST', '/', 'json', false, 'json', request);
}

model ResetAndroidInstancesInGroupRequest {
  androidInstanceIds?: [ string ](name='AndroidInstanceIds', position='Query'),
}

model ResetAndroidInstancesInGroupResponseBody = {
  requestId?: string(name='RequestId', example='69BCBBE4-FCF2-59B8-AD9D-531EB422****'),
}

model ResetAndroidInstancesInGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetAndroidInstancesInGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResetAndroidInstancesInGroup  ResetAndroidInstancesInGroupRequest
  * @return ResetAndroidInstancesInGroupResponse
 */
async function resetAndroidInstancesInGroup(request: ResetAndroidInstancesInGroupRequest): ResetAndroidInstancesInGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAndroidInstancesInGroup', 'POST', '/', 'json', false, 'json', request);
}

model RunCommandRequest {
  commandContent?: string(name='CommandContent', example='ls', position='Query'),
  contentEncoding?: string(name='ContentEncoding', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', position='Query'),
  timeout?: long(name='Timeout', example='60', position='Query'),
}

model RunCommandResponseBody = {
  invokeId?: string(name='InvokeId', example='t-gov2ujrk32v4****'),
  requestId?: string(name='RequestId', example='440D7342-5E7C-B2DB-D0B4EAC2BDF1****'),
}

model RunCommandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunCommandResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunCommand  RunCommandRequest
  * @return RunCommandResponse
 */
async function runCommand(request: RunCommandRequest): RunCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunCommand', 'POST', '/', 'json', false, 'json', request);
}

model SendFileRequest {
  androidInstanceIdList: [ string ](name='AndroidInstanceIdList', description='This parameter is required.', position='Query'),
  sourceFilePath: string(name='SourceFilePath', description='This parameter is required.', example='/data', position='Query'),
  uploadEndpoint: string(name='UploadEndpoint', description='This parameter is required.', example='oss-cn-hangzhou.aliyuncs.com', position='Query'),
  uploadType: string(name='UploadType', description='This parameter is required.', example='OSS', position='Query'),
  uploadUrl: string(name='UploadUrl', description='This parameter is required.', position='Query'),
}

model SendFileResponseBody = {
  data?: [ 
    {
      androidInstanceId?: string(name='AndroidInstanceId'),
      taskId?: string(name='TaskId'),
    }
  ](name='Data', example='425F351C-3F8E-5218-A520-B6311D0D****'),
  requestId?: string(name='RequestId', example='425F351C-3F8E-5218-A520-B6311D0D****'),
  taskId?: string(name='TaskId'),
}

model SendFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SendFile  SendFileRequest
  * @return SendFileResponse
 */
async function sendFile(request: SendFileRequest): SendFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendFile', 'POST', '/', 'json', false, 'json', request);
}

model StartAndroidInstanceRequest {
  androidInstanceIds?: [ string ](name='AndroidInstanceIds', position='Query'),
}

model StartAndroidInstanceResponseBody = {
  requestId?: string(name='RequestId', example='17C731AB-AAEE-5844-A352-D8D0352D****'),
}

model StartAndroidInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartAndroidInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartAndroidInstance  StartAndroidInstanceRequest
  * @return StartAndroidInstanceResponse
 */
async function startAndroidInstance(request: StartAndroidInstanceRequest): StartAndroidInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartAndroidInstance', 'POST', '/', 'json', false, 'json', request);
}

model StopAndroidInstanceRequest {
  androidInstanceIds?: [ string ](name='AndroidInstanceIds', position='Query'),
  forceStop?: boolean(name='ForceStop', position='Query'),
}

model StopAndroidInstanceResponseBody = {
  requestId?: string(name='RequestId', example='E38B41A8-8E00-5AE4-A957-6636ACB8****'),
}

model StopAndroidInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopAndroidInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopAndroidInstance  StopAndroidInstanceRequest
  * @return StopAndroidInstanceResponse
 */
async function stopAndroidInstance(request: StopAndroidInstanceRequest): StopAndroidInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopAndroidInstance', 'POST', '/', 'json', false, 'json', request);
}

model UninstallAppRequest {
  appIdList?: [ string ](name='AppIdList', position='Query'),
  instanceGroupIdList?: [ string ](name='InstanceGroupIdList', position='Query'),
  instanceIdList?: [ string ](name='InstanceIdList', position='Query'),
}

model UninstallAppResponseBody = {
  requestId?: string(name='RequestId', example='E5138F7E-46B5-526A-8C99-82DEAE6B****'),
  taskId?: string(name='TaskId'),
}

model UninstallAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UninstallAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UninstallApp  UninstallAppRequest
  * @return UninstallAppResponse
 */
async function uninstallApp(request: UninstallAppRequest): UninstallAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UninstallApp', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCustomImageNameRequest {
  imageId?: string(name='ImageId', example='imgc-075cllfeuazh0****', position='Body'),
  imageName?: string(name='ImageName', example='imagename', position='Body'),
}

model UpdateCustomImageNameResponseBody = {
  requestId?: string(name='RequestId', example='552B7EED-D434-511F-B838-29EA4E906034'),
}

model UpdateCustomImageNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCustomImageNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateCustomImageName  UpdateCustomImageNameRequest
  * @return UpdateCustomImageNameResponse
 */
async function updateCustomImageName(request: UpdateCustomImageNameRequest): UpdateCustomImageNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCustomImageName', 'POST', '/', 'json', true, 'form', request);
}

model UpdateInstanceGroupImageRequest {
  imageId: string(name='ImageId', description='This parameter is required.', example='imgc-075cllfeuazh****', position='Body'),
  instanceGroupIds: [ string ](name='InstanceGroupIds', description='This parameter is required.', position='Body'),
}

model UpdateInstanceGroupImageResponseBody = {
  requestId?: string(name='RequestId', example='55726272-E40B-530D-914F-5126B19C79B3'),
}

model UpdateInstanceGroupImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceGroupImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateInstanceGroupImage  UpdateInstanceGroupImageRequest
  * @return UpdateInstanceGroupImageResponse
 */
async function updateInstanceGroupImage(request: UpdateInstanceGroupImageRequest): UpdateInstanceGroupImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstanceGroupImage', 'POST', '/', 'json', true, 'form', request);
}

model UpgradeAndroidInstanceGroupRequest {
  autoPay?: boolean(name='AutoPay', example='true', position='Query'),
  increaseNumberOfInstance?: int32(name='IncreaseNumberOfInstance', example='10', position='Query'),
  instanceGroupId?: string(name='InstanceGroupId', example='ag-asguicdjh****', position='Query'),
}

model UpgradeAndroidInstanceGroupResponseBody = {
  instanceIds?: string(name='InstanceIds'),
  orderId?: string(name='OrderId', example='223684716098****'),
  requestId?: string(name='RequestId', example='310A783E-CC46-5452-A8A3-71AE5DB59****'),
}

model UpgradeAndroidInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeAndroidInstanceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpgradeAndroidInstanceGroup  UpgradeAndroidInstanceGroupRequest
  * @return UpgradeAndroidInstanceGroupResponse
 */
async function upgradeAndroidInstanceGroup(request: UpgradeAndroidInstanceGroupRequest): UpgradeAndroidInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeAndroidInstanceGroup', 'POST', '/', 'json', false, 'json', request);
}

model DataImageRegionDistributeMapValue = {
  distributeStatus?: string(name='DistributeStatus', example='AVAILABLE'),
  progress?: string(name='Progress', example='100%'),
}

