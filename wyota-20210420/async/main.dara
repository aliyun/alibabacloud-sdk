/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'wyota';
  @version = '2021-04-20';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ActivateDeviceRequest {
  uuid?: string(name='Uuid', position='Body'),
}

model ActivateDeviceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ActivateDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ActivateDeviceResponseBody(name='body'),
}

async function activateDevice(request: ActivateDeviceRequest): ActivateDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ActivateDevice', 'POST', '/', 'json', true, 'form', request);
}

model AddDeviceFromSNRequest {
  alias?: string(name='Alias', position='Body'),
  customProperty?: string(name='CustomProperty', position='Body'),
  groupId?: string(name='GroupId', position='Body'),
  labelContents?: string(name='LabelContents', position='Body'),
  secureNetworkType?: string(name='SecureNetworkType', position='Body'),
  serialNo: string(name='SerialNo', position='Body'),
}

model AddDeviceFromSNResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddDeviceFromSNResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddDeviceFromSNResponseBody(name='body'),
}

async function addDeviceFromSN(request: AddDeviceFromSNRequest): AddDeviceFromSNResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDeviceFromSN', 'POST', '/', 'json', true, 'form', request);
}

model AddDeviceSeatsAndLabelsRequest {
  isUnique?: boolean(name='IsUnique', position='Body'),
  label?: string(name='Label', position='Body'),
  labelList?: [ string ](name='LabelList', position='Body'),
  seatName?: string(name='SeatName', position='Body'),
  serialNo?: string(name='SerialNo', position='Body'),
  tenantId?: string(name='TenantId', position='Body'),
  zoneId?: string(name='ZoneId', position='Body'),
}

model AddDeviceSeatsAndLabelsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddDeviceSeatsAndLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddDeviceSeatsAndLabelsResponseBody(name='body'),
}

async function addDeviceSeatsAndLabels(request: AddDeviceSeatsAndLabelsRequest): AddDeviceSeatsAndLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDeviceSeatsAndLabels', 'POST', '/', 'json', true, 'form', request);
}

model AddDevicesFromCSVRequest {
  fileName?: string(name='FileName', position='Body'),
  fileType?: int32(name='FileType', position='Body'),
  seatCol?: int32(name='SeatCol', position='Body'),
  siteId?: string(name='SiteId', position='Body'),
  siteName?: string(name='SiteName', position='Body'),
}

model AddDevicesFromCSVResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddDevicesFromCSVResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddDevicesFromCSVResponseBody(name='body'),
}

async function addDevicesFromCSV(request: AddDevicesFromCSVRequest): AddDevicesFromCSVResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDevicesFromCSV', 'POST', '/', 'json', true, 'form', request);
}

model AddLabelsRequest {
  labelContents?: string(name='LabelContents', position='Body'),
}

model AddLabelsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddLabelsResponseBody(name='body'),
}

async function addLabels(request: AddLabelsRequest): AddLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddLabels', 'POST', '/', 'json', true, 'form', request);
}

model AddOrUpdateDeviceSeatsRequest {
  fileName?: string(name='FileName', position='Body'),
  userCustomId?: string(name='UserCustomId', position='Body'),
  zoneId?: string(name='ZoneId', position='Body'),
}

model AddOrUpdateDeviceSeatsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddOrUpdateDeviceSeatsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddOrUpdateDeviceSeatsResponseBody(name='body'),
}

async function addOrUpdateDeviceSeats(request: AddOrUpdateDeviceSeatsRequest): AddOrUpdateDeviceSeatsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddOrUpdateDeviceSeats', 'POST', '/', 'json', true, 'form', request);
}

model AddTerminalRequest {
  alias?: string(name='Alias', position='Body'),
  serialNumber?: string(name='SerialNumber', position='Body'),
  terminalGroupId?: string(name='TerminalGroupId', position='Body'),
}

model AddTerminalResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddTerminalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddTerminalResponseBody(name='body'),
}

async function addTerminal(request: AddTerminalRequest): AddTerminalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTerminal', 'POST', '/', 'json', true, 'form', request);
}

model AddTerminalsRequest {
  addTerminalParams?: [ 
    {
      alias?: string(name='Alias'),
      clientType?: int32(name='ClientType'),
      serialNumber?: string(name='SerialNumber'),
      terminalGroupId?: string(name='TerminalGroupId'),
      uuid?: string(name='Uuid'),
    }
  ](name='AddTerminalParams', position='Body'),
}

model AddTerminalsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      errorCode?: string(name='ErrorCode'),
      serialNumber?: string(name='SerialNumber'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddTerminalsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddTerminalsResponseBody(name='body'),
}

async function addTerminals(request: AddTerminalsRequest): AddTerminalsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTerminals', 'POST', '/', 'json', true, 'form', request);
}

model AttachEndUsersRequest {
  endUserIds: string(name='EndUserIds', position='Body'),
  serialNo: string(name='SerialNo', position='Body'),
}

model AttachEndUsersResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AttachEndUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachEndUsersResponseBody(name='body'),
}

async function attachEndUsers(request: AttachEndUsersRequest): AttachEndUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachEndUsers', 'POST', '/', 'json', true, 'form', request);
}

model AttachLabelRequest {
  labelContent?: string(name='LabelContent', position='Body'),
  labelId?: string(name='LabelId', position='Body'),
  serialNo: string(name='SerialNo', position='Body'),
}

model AttachLabelResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AttachLabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachLabelResponseBody(name='body'),
}

async function attachLabel(request: AttachLabelRequest): AttachLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachLabel', 'POST', '/', 'json', true, 'form', request);
}

model AttachLabelsRequest {
  labelIds?: string(name='LabelIds', position='Body'),
  serialNo?: string(name='SerialNo', position='Body'),
  serialNoList?: string(name='SerialNoList', position='Body'),
}

model AttachLabelsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AttachLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachLabelsResponseBody(name='body'),
}

async function attachLabels(request: AttachLabelsRequest): AttachLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachLabels', 'POST', '/', 'json', true, 'form', request);
}

model BindAccountLessLoginUserRequest {
  endUserId?: string(name='EndUserId', position='Body'),
  serialNumber?: string(name='SerialNumber', position='Body'),
  uuid?: string(name='Uuid', position='Body'),
}

model BindAccountLessLoginUserResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BindAccountLessLoginUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindAccountLessLoginUserResponseBody(name='body'),
}

async function bindAccountLessLoginUser(request: BindAccountLessLoginUserRequest): BindAccountLessLoginUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindAccountLessLoginUser', 'POST', '/', 'json', true, 'form', request);
}

model BindPasswordFreeLoginUserRequest {
  endUserId?: string(name='EndUserId', position='Body'),
  serialNumber?: string(name='SerialNumber', position='Body'),
  uuid?: string(name='Uuid', position='Body'),
}

model BindPasswordFreeLoginUserResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BindPasswordFreeLoginUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindPasswordFreeLoginUserResponseBody(name='body'),
}

async function bindPasswordFreeLoginUser(request: BindPasswordFreeLoginUserRequest): BindPasswordFreeLoginUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindPasswordFreeLoginUser', 'POST', '/', 'json', true, 'form', request);
}

model CheckUuidValidRequest {
  bluetooth?: string(name='Bluetooth', position='Body'),
  buildId?: string(name='BuildId', position='Body'),
  chipId: string(name='ChipId', position='Body'),
  clientId?: string(name='ClientId', position='Body'),
  customId: string(name='CustomId', position='Body'),
  etherMac?: string(name='EtherMac', position='Body'),
  serialNo: string(name='SerialNo', position='Body'),
  uuid: string(name='Uuid', position='Body'),
  wlan?: string(name='Wlan', position='Body'),
  wosAppVersion?: string(name='WosAppVersion', position='Body'),
}

model CheckUuidValidResponseBody = {
  code?: string(name='Code'),
  data?: {
    newUpgrade?: boolean(name='NewUpgrade'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CheckUuidValidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckUuidValidResponseBody(name='body'),
}

async function checkUuidValid(request: CheckUuidValidRequest): CheckUuidValidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckUuidValid', 'POST', '/', 'json', true, 'form', request);
}

model CreateAppOtaTaskRequest {
  appVersionUid?: string(name='AppVersionUid', position='Query'),
  channel?: string(name='Channel', position='Query'),
  clientIdList?: [ string ](name='ClientIdList', position='Query'),
  clientType?: int32(name='ClientType', position='Query'),
  creator?: string(name='Creator', position='Query'),
  description?: string(name='Description', position='Query'),
  forceUpgrade?: int32(name='ForceUpgrade', position='Query'),
  label?: string(name='Label', position='Query'),
  name?: string(name='Name', position='Query'),
  project?: string(name='Project', position='Query'),
  regions?: [ string ](name='Regions', position='Query'),
  status?: int32(name='Status', position='Query'),
  taskType?: int32(name='TaskType', position='Query'),
  tenantId?: string(name='TenantId', position='Query'),
}

model CreateAppOtaTaskResponseBody = {
  code?: string(name='Code'),
  data?: {
    taskUid?: string(name='TaskUid'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateAppOtaTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppOtaTaskResponseBody(name='body'),
}

async function createAppOtaTask(request: CreateAppOtaTaskRequest): CreateAppOtaTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppOtaTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateAppOtaVersionRequest {
  appVersion?: string(name='AppVersion', position='Query'),
  arch?: string(name='Arch', position='Query'),
  channel?: string(name='Channel', position='Query'),
  clientType?: int32(name='ClientType', position='Query'),
  creator?: string(name='Creator', position='Query'),
  downloadUrl?: string(name='DownloadUrl', position='Query'),
  md5?: string(name='Md5', position='Query'),
  os?: string(name='Os', position='Query'),
  osType?: string(name='OsType', position='Query'),
  otaType?: int32(name='OtaType', position='Query'),
  project?: string(name='Project', position='Query'),
  releaseNote?: string(name='ReleaseNote', position='Query'),
  releaseNoteEn?: string(name='ReleaseNoteEn', position='Query'),
  releaseNoteJp?: string(name='ReleaseNoteJp', position='Query'),
  size?: long(name='Size', position='Query'),
  snapshotId?: string(name='SnapshotId', position='Query'),
  snapshotRegionId?: string(name='SnapshotRegionId', position='Query'),
  status?: int32(name='Status', position='Query'),
  versionType?: string(name='VersionType', position='Query'),
}

model CreateAppOtaVersionResponseBody = {
  code?: string(name='Code'),
  data?: {
    versionUid?: string(name='VersionUid'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateAppOtaVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppOtaVersionResponseBody(name='body'),
}

async function createAppOtaVersion(request: CreateAppOtaVersionRequest): CreateAppOtaVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppOtaVersion', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAppOtaVersionsRequest {
  versionUidList?: [ string ](name='VersionUidList', position='Query'),
}

model DeleteAppOtaVersionsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteAppOtaVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppOtaVersionsResponseBody(name='body'),
}

async function deleteAppOtaVersions(request: DeleteAppOtaVersionsRequest): DeleteAppOtaVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAppOtaVersions', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDevicesRequest {
  force: string(name='Force', position='Body'),
  serialNos?: string(name='SerialNos', position='Body'),
  uuids?: string(name='Uuids', position='Query'),
}

model DeleteDevicesResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDevicesResponseBody(name='body'),
}

async function deleteDevices(request: DeleteDevicesRequest): DeleteDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDevices', 'POST', '/', 'json', true, 'form', request);
}

model DeleteLabelRequest {
  force: string(name='Force', position='Body'),
  labelContent?: string(name='LabelContent', position='Body'),
  labelId?: string(name='LabelId', position='Body'),
}

model DeleteLabelResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteLabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLabelResponseBody(name='body'),
}

async function deleteLabel(request: DeleteLabelRequest): DeleteLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLabel', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAppOtaVersionRequest {
  appVersion?: string(name='AppVersion', position='Query'),
  channel?: string(name='Channel', position='Query'),
  clientType?: int32(name='ClientType', position='Query'),
  creator?: string(name='Creator', position='Query'),
  project?: string(name='Project', position='Query'),
  status?: int32(name='Status', position='Query'),
  versionUid?: string(name='VersionUid', position='Query'),
}

model DescribeAppOtaVersionResponseBody = {
  code?: string(name='Code'),
  data?: {
    appOtaInfoDTOList?: [ 
      {
        appVersion?: string(name='AppVersion'),
        channel?: string(name='Channel'),
        downloadUrl?: string(name='DownloadUrl'),
        fullDownloadUrl?: string(name='FullDownloadUrl'),
        gmtCreate?: string(name='GmtCreate'),
        md5?: string(name='Md5'),
        osType?: string(name='OsType'),
        otaType?: int32(name='OtaType'),
        project?: string(name='Project'),
        protocolType?: string(name='ProtocolType'),
        releaseNote?: string(name='ReleaseNote'),
        releaseNoteEn?: string(name='ReleaseNoteEn'),
        sessionType?: string(name='SessionType'),
        size?: long(name='Size'),
        status?: int32(name='Status'),
        versionCode?: long(name='VersionCode'),
        versionType?: string(name='VersionType'),
        versionUid?: string(name='VersionUid'),
      }
    ](name='AppOtaInfoDTOList'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribeAppOtaVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppOtaVersionResponseBody(name='body'),
}

async function describeAppOtaVersion(request: DescribeAppOtaVersionRequest): DescribeAppOtaVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppOtaVersion', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeviceSeatsRequest {
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  serialNo?: string(name='SerialNo', position='Body'),
  serialNoList?: [ string ](name='SerialNoList', position='Body'),
  siteId?: string(name='SiteId', position='Body'),
  tenantId?: string(name='TenantId', position='Body'),
}

model DescribeDeviceSeatsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      seatCol?: int32(name='SeatCol'),
      seatName?: string(name='SeatName'),
      seatNo?: string(name='SeatNo'),
      seatRow?: int32(name='SeatRow'),
      serialNo?: string(name='SerialNo'),
      siteId?: string(name='SiteId'),
      siteName?: string(name='SiteName'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDeviceSeatsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDeviceSeatsResponseBody(name='body'),
}

async function describeDeviceSeats(request: DescribeDeviceSeatsRequest): DescribeDeviceSeatsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeviceSeats', 'POST', '/', 'json', true, 'form', request);
}

model DescribeDeviceVersionDetailRequest {
  model?: string(name='Model', position='Body'),
  networkType?: string(name='NetworkType', position='Body'),
  region?: string(name='Region', position='Body'),
  versionName?: string(name='VersionName', position='Body'),
}

model DescribeDeviceVersionDetailResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      androidHorizontalMultiCnImageDownloadUrl?: string(name='AndroidHorizontalMultiCnImageDownloadUrl'),
      androidHorizontalMultiEnImageDownloadUrl?: string(name='AndroidHorizontalMultiEnImageDownloadUrl'),
      androidVerticalMultiCnImageDownloadUrl?: string(name='AndroidVerticalMultiCnImageDownloadUrl'),
      androidVerticalMultiEnImageDownloadUrl?: string(name='AndroidVerticalMultiEnImageDownloadUrl'),
      channel?: string(name='Channel'),
      clientType?: int32(name='ClientType'),
      cnImageDownloadUrl?: string(name='CnImageDownloadUrl'),
      creator?: string(name='Creator'),
      downloadUrl?: string(name='DownloadUrl'),
      enImageDownloadUrl?: string(name='EnImageDownloadUrl'),
      md5?: string(name='Md5'),
      model?: string(name='Model'),
      multiCnImageDownloadUrl?: string(name='MultiCnImageDownloadUrl'),
      multiEnImageDownloadUrl?: string(name='MultiEnImageDownloadUrl'),
      releaseNote?: string(name='ReleaseNote'),
      releaseNoteEn?: string(name='ReleaseNoteEn'),
      size?: long(name='Size'),
      version?: string(name='Version'),
      versionCode?: string(name='VersionCode'),
      versionType?: string(name='VersionType'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribeDeviceVersionDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDeviceVersionDetailResponseBody(name='body'),
}

async function describeDeviceVersionDetail(request: DescribeDeviceVersionDetailRequest): DescribeDeviceVersionDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeviceVersionDetail', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSnLabelCountsRequest {
  labelList?: [ string ](name='LabelList', position='Body'),
  tenantId?: string(name='TenantId', position='Body'),
  zoneId?: string(name='ZoneId', position='Body'),
  zoneName?: string(name='ZoneName', position='Body'),
}

model DescribeSnLabelCountsResponseBody = {
  code?: string(name='Code'),
  data?: {
    labelCountDTOList?: [ 
      {
        count?: string(name='Count'),
        label?: string(name='Label'),
      }
    ](name='LabelCountDTOList'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribeSnLabelCountsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSnLabelCountsResponseBody(name='body'),
}

async function describeSnLabelCounts(request: DescribeSnLabelCountsRequest): DescribeSnLabelCountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSnLabelCounts', 'POST', '/', 'json', true, 'form', request);
}

model DescribeWorkZonesRequest {
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  tenantId?: string(name='TenantId', position='Body'),
  zoneIdList?: [ string ](name='ZoneIdList', position='Body'),
  zoneNameList?: [ string ](name='ZoneNameList', position='Body'),
}

model DescribeWorkZonesResponseBody = {
  code?: string(name='Code'),
  data?: {
    totalCount?: long(name='TotalCount'),
    workZoneDTOList?: [ 
      {
        seatCol?: int32(name='SeatCol'),
        seatRow?: int32(name='SeatRow'),
        tenantId?: string(name='TenantId'),
        zoneId?: string(name='ZoneId'),
        zoneName?: string(name='ZoneName'),
      }
    ](name='WorkZoneDTOList'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribeWorkZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeWorkZonesResponseBody(name='body'),
}

async function describeWorkZones(request: DescribeWorkZonesRequest): DescribeWorkZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWorkZones', 'POST', '/', 'json', true, 'form', request);
}

model DetachEndUsersRequest {
  endUserIds: string(name='EndUserIds', position='Body'),
  serialNo: string(name='SerialNo', position='Body'),
}

model DetachEndUsersResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DetachEndUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachEndUsersResponseBody(name='body'),
}

async function detachEndUsers(request: DetachEndUsersRequest): DetachEndUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachEndUsers', 'POST', '/', 'json', true, 'form', request);
}

model DetachLabelRequest {
  labelContent?: string(name='LabelContent', position='Body'),
  labelId?: string(name='LabelId', position='Body'),
  serialNo: string(name='SerialNo', position='Body'),
}

model DetachLabelResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DetachLabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachLabelResponseBody(name='body'),
}

async function detachLabel(request: DetachLabelRequest): DetachLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachLabel', 'POST', '/', 'json', true, 'form', request);
}

model DetachLabelsRequest {
  labelIds?: string(name='LabelIds', position='Body'),
  serialNo?: string(name='SerialNo', position='Body'),
  serialNoList?: string(name='SerialNoList', position='Body'),
}

model DetachLabelsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DetachLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachLabelsResponseBody(name='body'),
}

async function detachLabels(request: DetachLabelsRequest): DetachLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachLabels', 'POST', '/', 'json', true, 'form', request);
}

model GenerateOssUrlRequest {
  objectNameList?: [ string ](name='ObjectNameList', position='Body'),
  sessionId?: string(name='SessionId', position='Body'),
}

model GenerateOssUrlResponseBody = {
  data?: [ 
    {
      downloadUrl?: string(name='DownloadUrl'),
      objectName?: string(name='ObjectName'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model GenerateOssUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateOssUrlResponseBody(name='body'),
}

async function generateOssUrl(request: GenerateOssUrlRequest): GenerateOssUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateOssUrl', 'POST', '/', 'json', true, 'form', request);
}

model GetAppOtaLatestVersionRequest {
  baseVersion: string(name='BaseVersion', position='Query'),
  clientType?: int32(name='ClientType', position='Query'),
  clientUid?: string(name='ClientUid', position='Query'),
  osType: string(name='OsType', position='Query'),
  project?: string(name='Project', position='Query'),
}

model GetAppOtaLatestVersionResponseBody = {
  code?: string(name='Code'),
  data?: {
    appVersion?: string(name='AppVersion'),
    downloadUrl?: string(name='DownloadUrl'),
    forceUpgrade?: int32(name='ForceUpgrade'),
    md5?: string(name='Md5'),
    releaseNote?: string(name='ReleaseNote'),
    size?: long(name='Size'),
    taskUid?: string(name='TaskUid'),
    versionCode?: string(name='VersionCode'),
    versionType?: string(name='VersionType'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetAppOtaLatestVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAppOtaLatestVersionResponseBody(name='body'),
}

async function getAppOtaLatestVersion(request: GetAppOtaLatestVersionRequest): GetAppOtaLatestVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAppOtaLatestVersion', 'POST', '/', 'json', false, 'json', request);
}

model GetDeviceConfigsRequest {
  deviceId?: string(name='DeviceId', position='Body'),
  networkType?: string(name='NetworkType', position='Body'),
  region?: string(name='Region', position='Body'),
  serialNo?: string(name='SerialNo', position='Body'),
  urclVersion?: string(name='UrclVersion', position='Body'),
  userCustomId?: string(name='UserCustomId', position='Body'),
}

model GetDeviceConfigsResponseBody = {
  code?: string(name='Code'),
  data?: {
    autoLockScreenTime?: int32(name='AutoLockScreenTime'),
    autoLogin?: int32(name='AutoLogin'),
    autoUpdate?: int32(name='AutoUpdate'),
    customIdleAction?: int32(name='CustomIdleAction'),
    customPowerOn?: int32(name='CustomPowerOn'),
    customResourcePackage?: {
      configAboutLogo?: string(name='ConfigAboutLogo'),
      desktopWallpaper?: string(name='DesktopWallpaper'),
      loginPageBackground?: string(name='LoginPageBackground'),
      loginPageLogo?: string(name='LoginPageLogo'),
      personalCenterLogo?: string(name='PersonalCenterLogo'),
      startLogo?: string(name='StartLogo'),
      startMenuLogo?: string(name='StartMenuLogo'),
      upgradeLogo?: string(name='UpgradeLogo'),
    }(name='CustomResourcePackage'),
    definePowerButton?: int32(name='DefinePowerButton'),
    deviceLock?: int32(name='DeviceLock'),
    displayLayout?: string(name='DisplayLayout'),
    displayResolution?: string(name='DisplayResolution'),
    displayScaleRatio?: string(name='DisplayScaleRatio'),
    enableAdb?: int32(name='EnableAdb'),
    enableAutoLockScreen?: int32(name='EnableAutoLockScreen'),
    enableBluetooth?: int32(name='EnableBluetooth'),
    enableLockScreenPassword?: int32(name='EnableLockScreenPassword'),
    enableModifyPassword?: int32(name='EnableModifyPassword'),
    enableScheduledPowerOff?: int32(name='EnableScheduledPowerOff'),
    enableUnlockPassword?: int32(name='EnableUnlockPassword'),
    enableWlan?: int32(name='EnableWlan'),
    idleTime?: int32(name='IdleTime'),
    localUsbPrint?: int32(name='LocalUsbPrint'),
    lockPassword?: string(name='LockPassword'),
    scheduledPowerOff?: string(name='ScheduledPowerOff'),
    secureNetworkType?: string(name='SecureNetworkType'),
    serialNo?: string(name='SerialNo'),
    sleepTime?: int32(name='SleepTime'),
    urcl?: string(name='Urcl'),
    usbStorage?: int32(name='UsbStorage'),
    userCustomId?: string(name='UserCustomId'),
    uuid?: string(name='Uuid'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetDeviceConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeviceConfigsResponseBody(name='body'),
}

async function getDeviceConfigs(request: GetDeviceConfigsRequest): GetDeviceConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceConfigs', 'POST', '/', 'json', true, 'form', request);
}

model GetDeviceOtaAutoStatusRequest {
  clientType?: int32(name='ClientType', position='Body'),
}

model GetDeviceOtaAutoStatusResponseBody = {
  code?: string(name='Code'),
  data?: {
    autoUpdate?: int32(name='AutoUpdate'),
    autoUpdateTimeSchedule?: string(name='AutoUpdateTimeSchedule'),
    forceUpgrade?: int32(name='ForceUpgrade'),
    status?: int32(name='Status'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetDeviceOtaAutoStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeviceOtaAutoStatusResponseBody(name='body'),
}

async function getDeviceOtaAutoStatus(request: GetDeviceOtaAutoStatusRequest): GetDeviceOtaAutoStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceOtaAutoStatus', 'POST', '/', 'json', true, 'form', request);
}

model GetDeviceOtaInfoRequest {
  baseVersion: string(name='BaseVersion', position='Body'),
  channel?: string(name='Channel', position='Body'),
  deviceId: string(name='DeviceId', position='Body'),
  model: string(name='Model', position='Body'),
  networkType?: string(name='NetworkType', position='Body'),
  osVersion?: string(name='OsVersion', position='Body'),
  region?: string(name='Region', position='Body'),
  regionId?: string(name='RegionId', position='Body'),
  targetVersionType?: string(name='TargetVersionType', position='Body'),
  tenantId?: string(name='TenantId', position='Body'),
}

model GetDeviceOtaInfoResponseBody = {
  code?: string(name='Code'),
  data?: {
    version?: {
      androidHorizontalMultiCnImageDownloadUrl?: string(name='AndroidHorizontalMultiCnImageDownloadUrl'),
      androidHorizontalMultiEnImageDownloadUrl?: string(name='AndroidHorizontalMultiEnImageDownloadUrl'),
      androidVerticalMultiCnImageDownloadUrl?: string(name='AndroidVerticalMultiCnImageDownloadUrl'),
      androidVerticalMultiEnImageDownloadUrl?: string(name='AndroidVerticalMultiEnImageDownloadUrl'),
      cnImageDownloadUrl?: string(name='CnImageDownloadUrl'),
      creator?: string(name='Creator'),
      customForceUpgrade?: boolean(name='CustomForceUpgrade'),
      downloadUrl?: string(name='DownloadUrl'),
      enImageDownloadUrl?: string(name='EnImageDownloadUrl'),
      forceUpgrade?: int32(name='ForceUpgrade'),
      isAppDownloadUrl?: boolean(name='IsAppDownloadUrl'),
      localDownloadUrl?: string(name='LocalDownloadUrl'),
      md5?: string(name='Md5'),
      model?: string(name='Model'),
      multiCnImageDownloadUrl?: string(name='MultiCnImageDownloadUrl'),
      multiEnImageDownloadUrl?: string(name='MultiEnImageDownloadUrl'),
      releaseNote?: string(name='ReleaseNote'),
      releaseNoteEn?: string(name='ReleaseNoteEn'),
      size?: long(name='Size'),
      version?: string(name='Version'),
      versionCode?: string(name='VersionCode'),
      versionType?: string(name='VersionType'),
    }(name='Version'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetDeviceOtaInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeviceOtaInfoResponseBody(name='body'),
}

async function getDeviceOtaInfo(request: GetDeviceOtaInfoRequest): GetDeviceOtaInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceOtaInfo', 'POST', '/', 'json', true, 'form', request);
}

model GetDeviceOtaInfoTestRequest {
  baseVersion: string(name='BaseVersion', position='Body'),
  deviceId: string(name='DeviceId', position='Body'),
  model: string(name='Model', position='Body'),
  tenantId?: string(name='TenantId', position='Body'),
}

model GetDeviceOtaInfoTestResponseBody = {
  code?: string(name='Code'),
  data?: {
    version?: {
      creator?: string(name='Creator'),
      downloadUrl?: string(name='DownloadUrl'),
      forceUpgrade?: int32(name='ForceUpgrade'),
      localDownloadUrl?: string(name='LocalDownloadUrl'),
      md5?: string(name='Md5'),
      model?: string(name='Model'),
      releaseNote?: string(name='ReleaseNote'),
      size?: long(name='Size'),
      version?: string(name='Version'),
      versionCode?: string(name='VersionCode'),
      versionType?: string(name='VersionType'),
    }(name='Version'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetDeviceOtaInfoTestResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeviceOtaInfoTestResponseBody(name='body'),
}

async function getDeviceOtaInfoTest(request: GetDeviceOtaInfoTestRequest): GetDeviceOtaInfoTestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceOtaInfoTest', 'POST', '/', 'json', true, 'form', request);
}

model GetDeviceOtaTaskVersionInfoRequest {
  taskId: string(name='TaskId', position='Body'),
}

model GetDeviceOtaTaskVersionInfoResponseBody = {
  code?: string(name='Code'),
  data?: {
    releaseNote?: string(name='ReleaseNote'),
    size?: long(name='Size'),
    version?: string(name='Version'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetDeviceOtaTaskVersionInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeviceOtaTaskVersionInfoResponseBody(name='body'),
}

async function getDeviceOtaTaskVersionInfo(request: GetDeviceOtaTaskVersionInfoRequest): GetDeviceOtaTaskVersionInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceOtaTaskVersionInfo', 'POST', '/', 'json', true, 'form', request);
}

model GetDeviceUpgradeStatusRequest {
  appVersion?: string(name='AppVersion', position='Query'),
  clientUid?: string(name='ClientUid', position='Query'),
  project?: string(name='Project', position='Query'),
  taskUid?: string(name='TaskUid', position='Query'),
}

model GetDeviceUpgradeStatusResponseBody = {
  code?: string(name='Code'),
  data?: {
    appOtaStatusDTOList?: [ 
      {
        baseVersion?: string(name='BaseVersion'),
        clientType?: int32(name='ClientType'),
        clientUid?: string(name='ClientUid'),
        note?: string(name='Note'),
        osType?: string(name='OsType'),
        project?: string(name='Project'),
        status?: int32(name='Status'),
        targetVersion?: string(name='TargetVersion'),
        taskUid?: string(name='TaskUid'),
      }
    ](name='AppOtaStatusDTOList'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetDeviceUpgradeStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeviceUpgradeStatusResponseBody(name='body'),
}

async function getDeviceUpgradeStatus(request: GetDeviceUpgradeStatusRequest): GetDeviceUpgradeStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceUpgradeStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetExportDeviceInfoOssUrlRequest {
  tenantId?: string(name='TenantId', position='Body'),
  zoneId?: string(name='ZoneId', position='Body'),
  zoneName?: string(name='ZoneName', position='Body'),
}

model GetExportDeviceInfoOssUrlResponseBody = {
  code?: string(name='Code'),
  data?: {
    url?: string(name='Url'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetExportDeviceInfoOssUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetExportDeviceInfoOssUrlResponseBody(name='body'),
}

async function getExportDeviceInfoOssUrl(request: GetExportDeviceInfoOssUrlRequest): GetExportDeviceInfoOssUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetExportDeviceInfoOssUrl', 'POST', '/', 'json', true, 'form', request);
}

model GetFbOssConfigRequest {
  dirPrefix?: string(name='DirPrefix', position='Body'),
  isDedicatedLine?: int32(name='IsDedicatedLine', position='Body'),
  region?: string(name='Region', position='Body'),
}

model GetFbOssConfigResponseBody = {
  code?: string(name='Code'),
  data?: {
    accessKeyId?: string(name='AccessKeyId'),
    endPoint?: string(name='EndPoint'),
    ossPolicy?: string(name='OssPolicy'),
    ossSignature?: string(name='OssSignature'),
    sessionId?: string(name='SessionId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetFbOssConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFbOssConfigResponseBody(name='body'),
}

async function getFbOssConfig(request: GetFbOssConfigRequest): GetFbOssConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFbOssConfig', 'POST', '/', 'json', true, 'form', request);
}

model GetOssConfigRequest {
  type?: int32(name='Type', position='Query'),
}

model GetOssConfigResponseBody = {
  code?: string(name='Code'),
  data?: {
    accessKeyId?: string(name='AccessKeyId'),
    endPoint?: string(name='EndPoint'),
    ossPolicy?: string(name='OssPolicy'),
    ossSignature?: string(name='OssSignature'),
    securityToken?: string(name='SecurityToken'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetOssConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOssConfigResponseBody(name='body'),
}

async function getOssConfig(request: GetOssConfigRequest): GetOssConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOssConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetVersionDownloadUrlRequest {
  versionName?: string(name='VersionName', position='Query'),
}

model GetVersionDownloadUrlResponseBody = {
  code?: string(name='Code'),
  data?: {
    fullDownloadUrl?: string(name='FullDownloadUrl'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetVersionDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVersionDownloadUrlResponseBody(name='body'),
}

async function getVersionDownloadUrl(request: GetVersionDownloadUrlRequest): GetVersionDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVersionDownloadUrl', 'POST', '/', 'json', false, 'json', request);
}

model ListDeviceOtaTaskByTenantRequest {
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
}

model ListDeviceOtaTaskByTenantResponseBody = {
  code?: string(name='Code'),
  data?: {
    tenantDeviceOtaTasks?: [ 
      {
        model?: string(name='Model'),
        operationStatus?: int32(name='OperationStatus'),
        publishTime?: string(name='PublishTime'),
        status?: int32(name='Status'),
        taskId?: int32(name='TaskId'),
        upgradeCount?: long(name='UpgradeCount'),
        version?: string(name='Version'),
      }
    ](name='TenantDeviceOtaTasks'),
  }(name='Data'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListDeviceOtaTaskByTenantResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDeviceOtaTaskByTenantResponseBody(name='body'),
}

async function listDeviceOtaTaskByTenant(request: ListDeviceOtaTaskByTenantRequest): ListDeviceOtaTaskByTenantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeviceOtaTaskByTenant', 'POST', '/', 'json', true, 'form', request);
}

model ListDeviceSeatsRequest {
  label?: string(name='Label', position='Body'),
  seatNo?: string(name='SeatNo', position='Body'),
  serialNoList?: [ string ](name='SerialNoList', position='Body'),
  tenantId?: string(name='TenantId', position='Body'),
  zoneId?: string(name='ZoneId', position='Body'),
}

model ListDeviceSeatsResponseBody = {
  code?: string(name='Code'),
  data?: {
    deviceSeatDTOList?: [ 
      {
        label?: string(name='Label'),
        seatName?: string(name='SeatName'),
        seatNo?: string(name='SeatNo'),
        serialNo?: string(name='SerialNo'),
        siteId?: string(name='SiteId'),
        siteName?: string(name='SiteName'),
        zoneId?: string(name='ZoneId'),
      }
    ](name='DeviceSeatDTOList'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListDeviceSeatsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDeviceSeatsResponseBody(name='body'),
}

async function listDeviceSeats(request: ListDeviceSeatsRequest): ListDeviceSeatsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeviceSeats', 'POST', '/', 'json', true, 'form', request);
}

model ListDevicesRequest {
  alias?: string(name='Alias', position='Body'),
  buildId?: string(name='BuildId', position='Body'),
  clientType?: int32(name='ClientType', position='Query'),
  deviceGroupId?: string(name='DeviceGroupId', position='Body'),
  deviceIpV4?: string(name='DeviceIpV4', position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  deviceOS?: string(name='DeviceOS', position='Query'),
  devicePlatform?: string(name='DevicePlatform', position='Query'),
  endUserId?: string(name='EndUserId', position='Body'),
  labelContent?: string(name='LabelContent', position='Body'),
  labelId?: string(name='LabelId', position='Body'),
  locationInfo?: string(name='LocationInfo', position='Query'),
  model?: string(name='Model', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  serialNo?: string(name='SerialNo', position='Body'),
  userType?: string(name='UserType', position='Query'),
  uuid?: string(name='Uuid', position='Body'),
}

model ListDevicesResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      activeTime?: string(name='ActiveTime'),
      alias?: string(name='Alias'),
      autoLockScreenTime?: int32(name='AutoLockScreenTime'),
      autoLogin?: int32(name='AutoLogin'),
      autoType?: string(name='AutoType'),
      bluetooth?: string(name='Bluetooth'),
      buildId?: string(name='BuildId'),
      clientId?: string(name='ClientId'),
      clientType?: string(name='ClientType'),
      connectConfigs?: [ 
        {
          connectScript?: string(name='ConnectScript'),
          peripheralPid?: string(name='PeripheralPid'),
          peripheralVid?: string(name='PeripheralVid'),
          redirectPolicy?: int32(name='RedirectPolicy'),
        }
      ](name='ConnectConfigs'),
      customIdleAction?: int32(name='CustomIdleAction'),
      customPowerOn?: int32(name='CustomPowerOn'),
      customProperty?: string(name='CustomProperty'),
      customResourcePackage?: {
        configAboutLogo?: string(name='ConfigAboutLogo'),
        desktopWallpaper?: string(name='DesktopWallpaper'),
        loginPageBackground?: string(name='LoginPageBackground'),
        loginPageLogo?: string(name='LoginPageLogo'),
        personalCenterLogo?: string(name='PersonalCenterLogo'),
        startLogo?: string(name='StartLogo'),
        startMenuLogo?: string(name='StartMenuLogo'),
        upgradeLogo?: string(name='UpgradeLogo'),
      }(name='CustomResourcePackage'),
      definePowerButton?: int32(name='DefinePowerButton'),
      deviceIpV4?: string(name='DeviceIpV4'),
      deviceLock?: int32(name='DeviceLock'),
      deviceMqttConnectionStatus?: int32(name='DeviceMqttConnectionStatus'),
      deviceName?: string(name='DeviceName'),
      deviceOS?: string(name='DeviceOS'),
      devicePlatform?: string(name='DevicePlatform'),
      displayLayout?: string(name='DisplayLayout'),
      displayResolution?: string(name='DisplayResolution'),
      displayScaleRatio?: string(name='DisplayScaleRatio'),
      enableAdb?: int32(name='EnableAdb'),
      enableAutoLockScreen?: int32(name='EnableAutoLockScreen'),
      enableBluetooth?: int32(name='EnableBluetooth'),
      enableLockScreenPassword?: int32(name='EnableLockScreenPassword'),
      enableModifyPassword?: int32(name='EnableModifyPassword'),
      enableScheduledPowerOff?: int32(name='EnableScheduledPowerOff'),
      enableUnlockPassword?: int32(name='EnableUnlockPassword'),
      enableWlan?: int32(name='EnableWlan'),
      endUserList?: [ 
        {
          adDomain?: string(name='AdDomain'),
          bindTime?: string(name='BindTime'),
          directoryId?: string(name='DirectoryId'),
          endUserId?: string(name='EndUserId'),
          id?: long(name='Id'),
          serialNo?: string(name='SerialNo'),
          tenantId?: string(name='TenantId'),
          userType?: string(name='UserType'),
        }
      ](name='EndUserList'),
      etherMac?: string(name='EtherMac'),
      gmtModified?: string(name='GmtModified'),
      gmtSync?: string(name='GmtSync'),
      id?: long(name='Id'),
      idleTime?: int32(name='IdleTime'),
      isActive?: string(name='IsActive'),
      labelList?: [ 
        {
          content?: string(name='Content'),
          gmtCreate?: long(name='GmtCreate'),
          gmtModified?: long(name='GmtModified'),
          labelId?: string(name='LabelId'),
          tenantId?: string(name='TenantId'),
        }
      ](name='LabelList'),
      lastLoginUser?: string(name='LastLoginUser'),
      localUsbPrint?: int32(name='LocalUsbPrint'),
      locationInfo?: string(name='LocationInfo'),
      lockPassword?: string(name='LockPassword'),
      model?: string(name='Model'),
      orderId?: string(name='OrderId'),
      peripheralConfig?: {
        defaultPolicy?: int32(name='DefaultPolicy'),
        policyStrategy?: int32(name='PolicyStrategy'),
        usbAndInternalCamera?: int32(name='UsbAndInternalCamera'),
        usbPrinter?: int32(name='UsbPrinter'),
        usbStorage?: int32(name='UsbStorage'),
      }(name='PeripheralConfig'),
      scheduledPowerOff?: string(name='ScheduledPowerOff'),
      secureNetworkType?: string(name='SecureNetworkType'),
      serialNo?: string(name='SerialNo'),
      sleepTime?: int32(name='SleepTime'),
      source?: string(name='Source'),
      tenantId?: string(name='TenantId'),
      usbStorage?: int32(name='UsbStorage'),
      uuid?: string(name='Uuid'),
      wlan?: string(name='Wlan'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDevicesResponseBody(name='body'),
}

async function listDevices(request: ListDevicesRequest): ListDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDevices', 'POST', '/', 'json', true, 'form', request);
}

model ListFbIssueLabelsRequest {
}

model ListFbIssueLabelsResponseBody = {
  code?: string(name='Code'),
  data?: {
    issueLabel?: [ string ](name='IssueLabel'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListFbIssueLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFbIssueLabelsResponseBody(name='body'),
}

async function listFbIssueLabels(request: ListFbIssueLabelsRequest): ListFbIssueLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFbIssueLabels', 'POST', '/', 'json', false, 'json', request);
}

model ListFbIssueLabelsByLCRequest {
  caller?: string(name='Caller', position='Body'),
  languageType?: string(name='LanguageType', position='Body'),
}

model ListFbIssueLabelsByLCResponseBody = {
  code?: string(name='Code'),
  data?: {
    issueLabel?: [ string ](name='IssueLabel'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListFbIssueLabelsByLCResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFbIssueLabelsByLCResponseBody(name='body'),
}

async function listFbIssueLabelsByLC(request: ListFbIssueLabelsByLCRequest): ListFbIssueLabelsByLCResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFbIssueLabelsByLC', 'POST', '/', 'json', true, 'form', request);
}

model ListLabelsRequest {
  labelContent?: string(name='LabelContent', position='Body'),
  labelId?: string(name='LabelId', position='Body'),
  maxResults?: int32(name='MaxResults', position='Body'),
  nextToken?: string(name='NextToken', position='Body'),
}

model ListLabelsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      content?: string(name='Content'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      id?: long(name='Id'),
      labelId?: string(name='LabelId'),
      tenantId?: string(name='TenantId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model ListLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLabelsResponseBody(name='body'),
}

async function listLabels(request: ListLabelsRequest): ListLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLabels', 'POST', '/', 'json', true, 'form', request);
}

model ListTenantDeviceOtaInfoRequest {
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  taskId: int32(name='TaskId', position='Body'),
}

model ListTenantDeviceOtaInfoResponseBody = {
  code?: string(name='Code'),
  data?: {
    tenantDeviceOtaInfos?: [ 
      {
        currentVersion?: string(name='CurrentVersion'),
        deviceId?: string(name='DeviceId'),
        model?: string(name='Model'),
      }
    ](name='TenantDeviceOtaInfos'),
  }(name='Data'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListTenantDeviceOtaInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTenantDeviceOtaInfoResponseBody(name='body'),
}

async function listTenantDeviceOtaInfo(request: ListTenantDeviceOtaInfoRequest): ListTenantDeviceOtaInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTenantDeviceOtaInfo', 'POST', '/', 'json', true, 'form', request);
}

model ListTerminalRequest {
  alias?: string(name='Alias', position='Body'),
  buildId?: string(name='BuildId', position='Body'),
  clientType?: int32(name='ClientType', position='Body'),
  inManage?: boolean(name='InManage', position='Body'),
  ipv4?: string(name='Ipv4', position='Body'),
  locationInfo?: string(name='LocationInfo', position='Body'),
  maxResults?: int32(name='MaxResults', position='Body'),
  model?: string(name='Model', position='Body'),
  nextToken?: string(name='NextToken', position='Body'),
  searchKeyword?: string(name='SearchKeyword', position='Body'),
  serialNumber?: string(name='SerialNumber', position='Body'),
  terminalGroupId?: string(name='TerminalGroupId', position='Body'),
  uuid?: string(name='Uuid', position='Body'),
}

model ListTerminalResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      alias?: string(name='Alias'),
      bindUserCount?: int32(name='BindUserCount'),
      bindUserId?: string(name='BindUserId'),
      buildId?: string(name='BuildId'),
      clientType?: int32(name='ClientType'),
      desktopId?: string(name='DesktopId'),
      inManage?: boolean(name='InManage'),
      ipv4?: string(name='Ipv4'),
      lastLoginUser?: string(name='LastLoginUser', deprecated='true'),
      locationInfo?: string(name='LocationInfo'),
      lockSettings?: boolean(name='LockSettings'),
      loginUser?: string(name='LoginUser'),
      model?: string(name='Model'),
      onlineStatus?: boolean(name='OnlineStatus'),
      serialNumber?: string(name='SerialNumber'),
      terminalGroupId?: string(name='TerminalGroupId'),
      uuid?: string(name='Uuid'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model ListTerminalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTerminalResponseBody(name='body'),
}

async function listTerminal(request: ListTerminalRequest): ListTerminalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTerminal', 'POST', '/', 'json', true, 'form', request);
}

model ListTerminalsRequest {
  inManage?: boolean(name='InManage', position='Body'),
  maxResults?: int32(name='MaxResults', example='200', maximum=500, position='Body'),
  nextToken?: string(name='NextToken', example='AAAAAdEdsXbwG2ZlbWCzN4wTTg6wQvfp7u1BJl4bxCAby41POSaYAlCvfULQpkAnb0ff****', position='Body'),
  passwordFreeLoginUser?: string(name='PasswordFreeLoginUser', position='Body'),
  searchKeyword?: string(name='SearchKeyword', example='DemoDevice', position='Body'),
  serialNumbers?: [ string ](name='SerialNumbers', position='Body'),
  terminalGroupId?: string(name='TerminalGroupId', example='tg-default', position='Body'),
  uuids?: [ string ](name='Uuids', position='Body'),
  withBindUser?: boolean(name='WithBindUser', position='Body'),
}

model ListTerminalsResponseBody = {
  code?: string(name='Code', example='TERMINAL_NOT_FOUND'),
  data?: [ 
    {
      alias?: string(name='Alias', example='DemoDevice'),
      bindUserCount?: int32(name='BindUserCount'),
      buildId?: string(name='BuildId', example='7.0.2-RS-20240805.044924'),
      clientType?: int32(name='ClientType', example='1'),
      currentConnectDesktop?: string(name='CurrentConnectDesktop', example='ecd-drqmaogzbmbdf****'),
      currentLoginUser?: string(name='CurrentLoginUser', example='alice'),
      ipv4?: string(name='Ipv4', example='192.168.XX.XX'),
      lastLoginUser?: string(name='LastLoginUser'),
      locationInfo?: string(name='LocationInfo'),
      manageTime?: string(name='ManageTime'),
      model?: string(name='Model', example='US01'),
      online?: boolean(name='Online', example='true'),
      passwordFreeLoginUser?: string(name='PasswordFreeLoginUser', example='alice'),
      publicIpv4?: string(name='PublicIpv4'),
      serialNumber?: string(name='SerialNumber', example='ODN49YQCPQYC****'),
      setPasswordFreeLoginUserTime?: string(name='SetPasswordFreeLoginUserTime'),
      terminalGroupId?: string(name='TerminalGroupId', example='tg-default'),
      uuid?: string(name='Uuid', example='04873D3898B51A7DF2455C1E1DC9****'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='terminal not found'),
  nextToken?: string(name='NextToken', example='AAAAAdEdsXbwG2ZlbWCzN4wTTg6wQvfp7u1BJl4bxCAby41POSaYAlCvfULQpkAnb0ff****'),
  requestId?: string(name='RequestId', example='C5DCE54A-B266-522E-A6ED-468AF45F5AAA'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model ListTerminalsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTerminalsResponseBody(name='body'),
}

async function listTerminals(request: ListTerminalsRequest): ListTerminalsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTerminals', 'POST', '/', 'json', true, 'form', request);
}

model ListTrustDevicesRequest {
  labelContent?: string(name='LabelContent', position='Body'),
  labelId?: string(name='LabelId', position='Body'),
  serialNo?: string(name='SerialNo', position='Body'),
  userCustomId?: string(name='UserCustomId', position='Body'),
}

model ListTrustDevicesResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      model?: string(name='Model'),
      serialNo?: string(name='SerialNo'),
      tenantId?: string(name='TenantId'),
      uuid?: string(name='Uuid'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListTrustDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTrustDevicesResponseBody(name='body'),
}

async function listTrustDevices(request: ListTrustDevicesRequest): ListTrustDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTrustDevices', 'POST', '/', 'json', true, 'form', request);
}

model ListUserFbAcIssuesRequest {
  account?: string(name='Account', position='Body'),
  clientVersion?: string(name='ClientVersion', position='Body'),
  errorMessage?: string(name='ErrorMessage', position='Body'),
  instanceId?: string(name='InstanceId', position='Body'),
  issueId?: string(name='IssueId', position='Body'),
  label?: string(name='Label', position='Body'),
  reservedA?: string(name='ReservedA', position='Body'),
  reservedB?: string(name='ReservedB', position='Body'),
  userEmail?: string(name='UserEmail', position='Body'),
}

model ListUserFbAcIssuesResponseBody = {
  code?: string(name='Code'),
  data?: {
    issueDataList?: [ 
      {
        account?: string(name='Account'),
        clientVersion?: string(name='ClientVersion'),
        errorMessage?: string(name='ErrorMessage'),
        fileList?: [ 
          {
            fileName?: string(name='FileName'),
            fileSize?: int32(name='FileSize'),
            fileType?: int32(name='FileType'),
            sessionId?: string(name='SessionId'),
          }
        ](name='FileList'),
        gmtCreated?: string(name='GmtCreated'),
        gmtModified?: string(name='GmtModified'),
        instanceId?: string(name='InstanceId'),
        issueId?: long(name='IssueId'),
        label?: string(name='Label'),
        reservedA?: string(name='ReservedA'),
        reservedB?: string(name='ReservedB'),
        userEmail?: string(name='UserEmail'),
      }
    ](name='IssueDataList'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListUserFbAcIssuesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserFbAcIssuesResponseBody(name='body'),
}

async function listUserFbAcIssues(request: ListUserFbAcIssuesRequest): ListUserFbAcIssuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserFbAcIssues', 'POST', '/', 'json', true, 'form', request);
}

model ListUserFbIssuesRequest {
  appId?: string(name='AppId', position='Body'),
  clientId?: string(name='ClientId', position='Body'),
  clientModel?: string(name='ClientModel', position='Body'),
  clientSn?: string(name='ClientSn', position='Body'),
  customerId?: string(name='CustomerId', position='Body'),
  description?: string(name='Description', position='Body'),
  desktopId?: string(name='DesktopId', position='Body'),
  errorCode?: string(name='ErrorCode', position='Body'),
  errorMsg?: string(name='ErrorMsg', position='Body'),
  fbType?: int32(name='FbType', position='Body'),
  issueId?: int32(name='IssueId', position='Body'),
  issueLabel?: string(name='IssueLabel', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  status?: int32(name='Status', position='Body'),
  title?: string(name='Title', position='Body'),
  userEmail?: string(name='UserEmail', position='Body'),
  userId?: string(name='UserId', position='Body'),
  wasRead?: int32(name='WasRead', position='Body'),
}

model ListUserFbIssuesResponseBody = {
  code?: string(name='Code'),
  data?: {
    count?: string(name='Count'),
    feedbackIssueData?: [ 
      {
        appId?: string(name='AppId'),
        clientId?: string(name='ClientId'),
        clientModel?: string(name='ClientModel'),
        clientSn?: string(name='ClientSn'),
        customerId?: string(name='CustomerId'),
        description?: string(name='Description'),
        desktopId?: string(name='DesktopId'),
        errorCode?: string(name='ErrorCode'),
        errorMsg?: string(name='ErrorMsg'),
        fbType?: int32(name='FbType'),
        fileList?: [ 
          {
            fileMd5?: string(name='FileMd5'),
            fileName?: string(name='FileName'),
            fileSize?: int32(name='FileSize'),
            fileType?: int32(name='FileType'),
            ossUrl?: string(name='OssUrl'),
          }
        ](name='FileList'),
        gmtCreated?: string(name='GmtCreated'),
        issueId?: int32(name='IssueId'),
        issueLabel?: string(name='IssueLabel'),
        status?: int32(name='Status'),
        title?: string(name='Title'),
        userEmail?: string(name='UserEmail'),
        userId?: string(name='UserId'),
      }
    ](name='FeedbackIssueData'),
  }(name='Data'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListUserFbIssuesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserFbIssuesResponseBody(name='body'),
}

async function listUserFbIssues(request: ListUserFbIssuesRequest): ListUserFbIssuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserFbIssues', 'POST', '/', 'json', true, 'form', request);
}

model ModifyDevicesSecureNetworkTypeRequest {
  allDevices?: long(name='AllDevices', position='Body'),
  secureNetworkType: string(name='SecureNetworkType', position='Body'),
  serialNos?: string(name='SerialNos', position='Body'),
}

model ModifyDevicesSecureNetworkTypeResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ModifyDevicesSecureNetworkTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDevicesSecureNetworkTypeResponseBody(name='body'),
}

async function modifyDevicesSecureNetworkType(request: ModifyDevicesSecureNetworkTypeRequest): ModifyDevicesSecureNetworkTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDevicesSecureNetworkType', 'POST', '/', 'json', true, 'form', request);
}

model ModifySecureNetworkTypeRequest {
  secureNetworkType?: string(name='SecureNetworkType', position='Body'),
  serialNo: string(name='SerialNo', position='Body'),
}

model ModifySecureNetworkTypeResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ModifySecureNetworkTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySecureNetworkTypeResponseBody(name='body'),
}

async function modifySecureNetworkType(request: ModifySecureNetworkTypeRequest): ModifySecureNetworkTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySecureNetworkType', 'POST', '/', 'json', true, 'form', request);
}

model RegisterDeviceRequest {
  bluetooth?: string(name='Bluetooth', position='Body'),
  buildId?: string(name='BuildId', position='Body'),
  chipId?: string(name='ChipId', position='Body'),
  clientId?: string(name='ClientId', position='Body'),
  clientType?: int32(name='ClientType', position='Body'),
  cpu?: string(name='Cpu', position='Body'),
  customId?: string(name='CustomId', position='Body'),
  etherMac?: string(name='EtherMac', position='Body'),
  memory?: string(name='Memory', position='Body'),
  model?: string(name='Model', position='Body'),
  serialNo?: string(name='SerialNo', position='Body'),
  storage?: string(name='Storage', position='Body'),
  token?: string(name='Token', position='Body'),
  wlan?: string(name='Wlan', position='Body'),
}

model RegisterDeviceResponseBody = {
  code?: string(name='Code'),
  data?: {
    uuid?: string(name='Uuid'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RegisterDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterDeviceResponseBody(name='body'),
}

async function registerDevice(request: RegisterDeviceRequest): RegisterDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterDevice', 'POST', '/', 'json', true, 'form', request);
}

model ReportAppOtaInfoRequest {
  baseVersion?: string(name='BaseVersion', position='Query'),
  clientType?: int32(name='ClientType', position='Query'),
  clientUid?: string(name='ClientUid', position='Query'),
  note?: string(name='Note', position='Query'),
  osType?: string(name='OsType', position='Query'),
  project?: string(name='Project', position='Query'),
  status?: int32(name='Status', position='Query'),
  targetVersion?: string(name='TargetVersion', position='Query'),
  taskUid?: string(name='TaskUid', position='Query'),
}

model ReportAppOtaInfoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ReportAppOtaInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReportAppOtaInfoResponseBody(name='body'),
}

async function reportAppOtaInfo(request: ReportAppOtaInfoRequest): ReportAppOtaInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReportAppOtaInfo', 'POST', '/', 'json', false, 'json', request);
}

model ReportDeviceOtaInfoRequest {
  baseVersion?: string(name='BaseVersion', position='Body'),
  deviceId?: string(name='DeviceId', position='Body'),
  model?: string(name='Model', position='Body'),
  note?: string(name='Note', position='Body'),
  status?: int32(name='Status', position='Body'),
  targetVersion?: string(name='TargetVersion', position='Body'),
}

model ReportDeviceOtaInfoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ReportDeviceOtaInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReportDeviceOtaInfoResponseBody(name='body'),
}

async function reportDeviceOtaInfo(request: ReportDeviceOtaInfoRequest): ReportDeviceOtaInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReportDeviceOtaInfo', 'POST', '/', 'json', true, 'form', request);
}

model ReportUserFbAcIssueRequest {
  account?: string(name='Account', position='Body'),
  clientVersion?: string(name='ClientVersion', position='Body'),
  errorMsg?: string(name='ErrorMsg', position='Body'),
  fileList?: [ 
    {
      fileName: string(name='FileName'),
      fileSize?: int32(name='FileSize'),
      fileType?: int32(name='FileType'),
      sessionId: string(name='SessionId'),
    }
  ](name='FileList', shrink='json', position='Body'),
  instanceId?: string(name='InstanceId', position='Body'),
  labels?: string(name='Labels', position='Body'),
  reservedA?: string(name='ReservedA', position='Body'),
  reservedB?: string(name='ReservedB', position='Body'),
  userEmail?: string(name='UserEmail', position='Body'),
}

model ReportUserFbAcIssueResponseBody = {
  code?: string(name='Code'),
  data?: {
    issueId?: long(name='IssueId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ReportUserFbAcIssueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReportUserFbAcIssueResponseBody(name='body'),
}

async function reportUserFbAcIssue(request: ReportUserFbAcIssueRequest): ReportUserFbAcIssueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReportUserFbAcIssue', 'POST', '/', 'json', true, 'form', request);
}

model ReportUserFbIssueRequest {
  appId?: string(name='AppId', position='Body'),
  clientId?: string(name='ClientId', position='Body'),
  clientModel?: string(name='ClientModel', position='Body'),
  clientOsName?: string(name='ClientOsName', position='Body'),
  clientSn?: string(name='ClientSn', position='Body'),
  clientVersion?: string(name='ClientVersion', position='Body'),
  customerId?: string(name='CustomerId', position='Body'),
  description?: string(name='Description', position='Body'),
  desktopId?: string(name='DesktopId', position='Body'),
  desktopType?: int32(name='DesktopType', position='Body'),
  errorCode?: string(name='ErrorCode', position='Body'),
  errorMsg?: string(name='ErrorMsg', position='Body'),
  fbType?: int32(name='FbType', position='Body'),
  fileList?: [ 
    {
      fileMd5?: string(name='FileMd5'),
      fileName: string(name='FileName'),
      fileSize?: int32(name='FileSize'),
      fileType?: int32(name='FileType'),
      ossUrl?: string(name='OssUrl'),
      sessionId?: string(name='SessionId'),
    }
  ](name='FileList', shrink='json', position='Body'),
  issueLabel?: string(name='IssueLabel', position='Body'),
  occurTime?: long(name='OccurTime', position='Body'),
  reservedA?: string(name='ReservedA', position='Body'),
  reservedB?: string(name='ReservedB', position='Body'),
  telNo?: string(name='TelNo', maxLength=20, position='Body'),
  title?: string(name='Title', position='Body'),
  userEmail?: string(name='UserEmail', position='Body'),
  userId?: string(name='UserId', position='Body'),
  userName?: string(name='UserName', position='Body'),
  workspaceId?: string(name='WorkspaceId', position='Body'),
  wyId?: string(name='WyId', position='Body'),
}

model ReportUserFbIssueResponseBody = {
  code?: string(name='Code'),
  data?: {
    issueId?: int32(name='IssueId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ReportUserFbIssueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReportUserFbIssueResponseBody(name='body'),
}

async function reportUserFbIssue(request: ReportUserFbIssueRequest): ReportUserFbIssueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReportUserFbIssue', 'POST', '/', 'json', true, 'form', request);
}

model SendOpsMessageToTerminalsRequest {
  delay?: boolean(name='Delay', position='Query'),
  msg?: string(name='Msg', position='Body'),
  opsAction?: string(name='OpsAction', position='Body'),
  uuids?: [ string ](name='Uuids', position='Body'),
  waitForAck?: boolean(name='WaitForAck', position='Body'),
}

model SendOpsMessageToTerminalsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SendOpsMessageToTerminalsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendOpsMessageToTerminalsResponseBody(name='body'),
}

async function sendOpsMessageToTerminals(request: SendOpsMessageToTerminalsRequest): SendOpsMessageToTerminalsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendOpsMessageToTerminals', 'POST', '/', 'json', true, 'form', request);
}

model SetDeviceOtaAutoStatusRequest {
  autoUpdate?: int32(name='AutoUpdate', position='Body'),
  autoUpdateTimeSchedule?: string(name='AutoUpdateTimeSchedule', position='Body'),
  clientType?: int32(name='ClientType', position='Body'),
  forceUpgrade?: int32(name='ForceUpgrade', position='Body'),
  status?: string(name='Status', position='Body'),
}

model SetDeviceOtaAutoStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SetDeviceOtaAutoStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDeviceOtaAutoStatusResponseBody(name='body'),
}

async function setDeviceOtaAutoStatus(request: SetDeviceOtaAutoStatusRequest): SetDeviceOtaAutoStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDeviceOtaAutoStatus', 'POST', '/', 'json', true, 'form', request);
}

model SetDeviceOtaTaskStatusRequest {
  operationStatus: int32(name='OperationStatus', position='Body'),
  taskId: int32(name='TaskId', position='Body'),
}

model SetDeviceOtaTaskStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SetDeviceOtaTaskStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDeviceOtaTaskStatusResponseBody(name='body'),
}

async function setDeviceOtaTaskStatus(request: SetDeviceOtaTaskStatusRequest): SetDeviceOtaTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDeviceOtaTaskStatus', 'POST', '/', 'json', true, 'form', request);
}

model UnbindAccountLessLoginUserRequest {
  serialNumber?: string(name='SerialNumber', position='Body'),
  uuid?: string(name='Uuid', position='Body'),
}

model UnbindAccountLessLoginUserResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnbindAccountLessLoginUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnbindAccountLessLoginUserResponseBody(name='body'),
}

async function unbindAccountLessLoginUser(request: UnbindAccountLessLoginUserRequest): UnbindAccountLessLoginUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindAccountLessLoginUser', 'POST', '/', 'json', true, 'form', request);
}

model UnbindDeviceSeatsRequest {
  serialNoList?: [ string ](name='SerialNoList', shrink='json', position='Body'),
}

model UnbindDeviceSeatsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UnbindDeviceSeatsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnbindDeviceSeatsResponseBody(name='body'),
}

async function unbindDeviceSeats(request: UnbindDeviceSeatsRequest): UnbindDeviceSeatsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindDeviceSeats', 'POST', '/', 'json', true, 'form', request);
}

model UnbindPasswordFreeLoginUserRequest {
  serialNumber?: string(name='SerialNumber', position='Body'),
  uuid?: string(name='Uuid', position='Body'),
}

model UnbindPasswordFreeLoginUserResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnbindPasswordFreeLoginUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnbindPasswordFreeLoginUserResponseBody(name='body'),
}

async function unbindPasswordFreeLoginUser(request: UnbindPasswordFreeLoginUserRequest): UnbindPasswordFreeLoginUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindPasswordFreeLoginUser', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAliasRequest {
  alias?: string(name='Alias', position='Body'),
  serialNo?: string(name='SerialNo', position='Body'),
  uuid?: string(name='Uuid', position='Body'),
}

model UpdateAliasResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateAliasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAliasResponseBody(name='body'),
}

async function updateAlias(request: UpdateAliasRequest): UpdateAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAlias', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDeviceBindedEndUserRequest {
  serialNo: string(name='SerialNo', position='Body'),
  sourceAdEndUsers?: [ 
    {
      adDomain?: string(name='AdDomain'),
      directoryId?: string(name='DirectoryId'),
      endUserId?: string(name='EndUserId'),
    }
  ](name='SourceAdEndUsers', position='Body'),
  sourceEndUserIds?: string(name='SourceEndUserIds', position='Body'),
  targetAdEndUsers?: [ 
    {
      adDomain?: string(name='AdDomain'),
      directoryId?: string(name='DirectoryId'),
      endUserId?: string(name='EndUserId'),
    }
  ](name='TargetAdEndUsers', position='Body'),
  targetEndUserIds?: string(name='TargetEndUserIds', position='Body'),
  userType?: string(name='UserType', position='Body'),
}

model UpdateDeviceBindedEndUserResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateDeviceBindedEndUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDeviceBindedEndUserResponseBody(name='body'),
}

async function updateDeviceBindedEndUser(request: UpdateDeviceBindedEndUserRequest): UpdateDeviceBindedEndUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDeviceBindedEndUser', 'POST', '/', 'json', true, 'form', request);
}

model UpdateLabelRequest {
  labelContent?: string(name='LabelContent', position='Body'),
  labelId?: string(name='LabelId', position='Body'),
}

model UpdateLabelResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateLabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLabelResponseBody(name='body'),
}

async function updateLabel(request: UpdateLabelRequest): UpdateLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLabel', 'POST', '/', 'json', true, 'form', request);
}

model UpdateTerminalPolicyRequest {
  backgroundModeTitle?: string(name='BackgroundModeTitle', position='Body'),
  displayLayout?: string(name='DisplayLayout', position='Body'),
  displayResolution?: string(name='DisplayResolution', position='Body'),
  displayScaleRatio?: string(name='DisplayScaleRatio', position='Body'),
  enableAutoLockScreen?: int32(name='EnableAutoLockScreen', position='Body'),
  enableAutoLogin?: int32(name='EnableAutoLogin', position='Body'),
  enableBackgroundMode?: int32(name='EnableBackgroundMode', position='Body'),
  enableBluetooth?: int32(name='EnableBluetooth', position='Body'),
  enableModifyPassword?: int32(name='EnableModifyPassword', position='Body'),
  enableScheduledReboot?: int32(name='EnableScheduledReboot', position='Body'),
  enableScheduledShutdown?: int32(name='EnableScheduledShutdown', position='Body'),
  enableSwitchPersonal?: int32(name='EnableSwitchPersonal', position='Body'),
  enableWlan?: int32(name='EnableWlan', position='Body'),
  idleTimeout?: int32(name='IdleTimeout', position='Body'),
  idleTimeoutAction?: int32(name='IdleTimeoutAction', position='Body'),
  name?: string(name='Name', position='Body'),
  powerButtonDefine?: int32(name='PowerButtonDefine', position='Body'),
  powerButtonDefineForAs?: int32(name='PowerButtonDefineForAs', position='Body'),
  powerButtonDefineForNs?: int32(name='PowerButtonDefineForNs', position='Body'),
  powerOnBehavior?: int32(name='PowerOnBehavior', position='Body'),
  scheduledReboot?: string(name='ScheduledReboot', position='Body'),
  scheduledShutdown?: string(name='ScheduledShutdown', position='Body'),
  settingLock?: int32(name='SettingLock', position='Body'),
  terminalPolicyId?: string(name='TerminalPolicyId', position='Body'),
}

model UpdateTerminalPolicyResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateTerminalPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTerminalPolicyResponseBody(name='body'),
}

async function updateTerminalPolicy(request: UpdateTerminalPolicyRequest): UpdateTerminalPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTerminalPolicy', 'POST', '/', 'json', true, 'form', request);
}

