/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'marketplaceIntl';
  @version = '2022-12-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DescribePushMeteringDataRequest {
  pushOrderBizId: string(name='PushOrderBizId', description='This parameter is required.', example='pushData123456', position='Query'),
}

model DescribePushMeteringDataResponseBody = {
  code?: string(name='Code', example='200'),
  dynamicMessage?: string(name='DynamicMessage', example='parameter \\"service\\" can not be blank.'),
  forceFatal?: boolean(name='ForceFatal', example='false'),
  message?: string(name='Message', example='Instance 5723f7ee-952d-411f-94f4-b942a550d9b8 does not exist.'),
  requestId?: string(name='RequestId', example='A6A33748-D573-593C-A3BC-593E33D68311'),
  result?: {
    endTime?: long(name='EndTime', example='2024-09-18T03:15:00Z'),
    instanceId?: string(name='InstanceId', example='5000002763123'),
    isPushBilling?: boolean(name='IsPushBilling'),
    meteringAssist?: string(name='MeteringAssist', example='sgcmgj0003XXXX-Period-1'),
    meteringEntity?: string(name='MeteringEntity', example='{"Frequency":1}'),
    pushOrderBizId?: string(name='PushOrderBizId', example='pushData123456'),
    startTime?: long(name='StartTime', example='2025-01-09T02:04:58Z'),
  }(name='Result'),
  success?: boolean(name='Success', example='True'),
}

model DescribePushMeteringDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePushMeteringDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribePushMeteringData  DescribePushMeteringDataRequest
  * @return DescribePushMeteringDataResponse
 */
async function describePushMeteringData(request: DescribePushMeteringDataRequest): DescribePushMeteringDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePushMeteringData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSellerInstancesRequest {
  instanceId?: long(name='InstanceId', example='5000002763123', position='Query'),
  instanceStatus?: string(name='InstanceStatus', example='OPENED', position='Query'),
  pageIndex?: int32(name='PageIndex', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  userId?: long(name='UserId', example='5322460655123456', position='Query'),
}

model DescribeSellerInstancesResponseBody = {
  code?: string(name='Code', example='200'),
  count?: long(name='Count', example='10'),
  fatal?: boolean(name='Fatal', description='fatal', example='False'),
  message?: string(name='Message', example='Instance 5723f7ee-952d-411f-94f4-b942a550d9b8 does not exist.'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='A6A33748-D573-593C-A3BC-593E33D68311'),
  result?: [ 
    {
      appInfo?: string(name='AppInfo', example='{\\"authUrl\\":\\"https://marketplace.alibabacloud.com/\\"}'),
      chargeType?: int32(name='ChargeType', example='1'),
      commodityCode?: string(name='CommodityCode', example='sgcmgj000356'),
      createdOn?: long(name='CreatedOn', example='1741752000000'),
      hostInfo?: string(name='HostInfo', example='{\\"userName\\":\\"marketplace\\"}'),
      info?: string(name='Info', example='{\\"userName\\":\\"marketplace\\"}'),
      instanceId?: long(name='InstanceId', example='5000002763123'),
      instanceStatus?: string(name='InstanceStatus', example='OPENED'),
      userId?: long(name='UserId', example='5322460655123456'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='True'),
  version?: string(name='Version', example='103'),
}

model DescribeSellerInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSellerInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSellerInstances  DescribeSellerInstancesRequest
  * @return DescribeSellerInstancesResponse
 */
async function describeSellerInstances(request: DescribeSellerInstancesRequest): DescribeSellerInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSellerInstances', 'POST', '/', 'json', false, 'json', request);
}

model NoticeInstanceUserRequest {
  instanceId?: long(name='InstanceId', example='5000000264872', position='Body'),
  noticeParam?: string(name='NoticeParam', position='Body'),
  noticeType?: long(name='NoticeType', example='1', position='Body'),
}

model NoticeInstanceUserResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='Instance 5723f7ee-952d-411f-94f4-b942a550d9b8 does not exist.'),
  requestId?: string(name='RequestId', example='A6A33748-D573-593C-A3BC-593E33D68311'),
  result?: boolean(name='Result', example='True'),
  success?: boolean(name='Success', example='True'),
}

model NoticeInstanceUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: NoticeInstanceUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of NoticeInstanceUser  NoticeInstanceUserRequest
  * @return NoticeInstanceUserResponse
 */
async function noticeInstanceUser(request: NoticeInstanceUserRequest): NoticeInstanceUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'NoticeInstanceUser', 'POST', '/', 'json', true, 'form', request);
}

model PushMeteringDataRequest {
  gmtCreate?: string(name='GmtCreate', example='2023-01-11 10:31:00', position='Body'),
  meteringData?: [ 
    {
      endTime?: long(name='EndTime', example='1666854480406'),
      instanceId?: string(name='InstanceId', example='gtm-cn-20p314k5h05'),
      meteringAssist?: string(name='MeteringAssist', example='test001'),
      meteringEntity?: string(name='MeteringEntity', example='{"VirtualCpu":10}'),
      pushOrderBizId?: string(name='PushOrderBizId', example='ORDER20231001'),
      startTime?: long(name='StartTime', example='1662284820000'),
    }
  ](name='MeteringData', position='Body'),
}

model PushMeteringDataResponseBody = {
  code?: string(name='Code', example='200'),
  dynamicMessage?: string(name='DynamicMessage', example='parameter \\"service\\" can not be blank.'),
  forceFatal?: boolean(name='ForceFatal', example='false'),
  message?: string(name='Message', example='Instance 5723f7ee-952d-411f-94f4-b942a550d9b8 does not exist.'),
  requestId?: string(name='RequestId', example='A6A33748-D573-593C-A3BC-593E33D68311'),
  result?: boolean(name='Result', example='True'),
  success?: boolean(name='Success', example='True'),
}

model PushMeteringDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushMeteringDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PushMeteringData  PushMeteringDataRequest
  * @return PushMeteringDataResponse
 */
async function pushMeteringData(request: PushMeteringDataRequest): PushMeteringDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PushMeteringData', 'POST', '/', 'json', true, 'form', request);
}

