/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'EduEmbed';
  @version = '2024-01-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateLabReservationRequest {
  accountId: long(name='AccountId', description='This parameter is required.', example='16600', position='Body'),
  endTime: string(name='EndTime', description='This parameter is required.', example='2023-04-29 18:00:00', position='Body'),
  labId: long(name='LabId', description='This parameter is required.', example='875', position='Body'),
  memberCount: long(name='MemberCount', description='This parameter is required.', example='1', position='Body'),
  startTime: string(name='StartTime', description='This parameter is required.', example='2023-04-29 16:00:00', position='Body'),
}

model CreateLabReservationResponseBody = {
  code?: string(name='Code', example='00000'),
  labReservation?: {
    id?: string(name='Id', example='10dbb36c-7047-41c7-92ee-bd24bcf45dca'),
  }(name='LabReservation'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9ADC729B-...'),
  success?: boolean(name='Success', example='True'),
}

model CreateLabReservationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLabReservationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateLabReservation  CreateLabReservationRequest
  * @return CreateLabReservationResponse
 */
async function createLabReservation(request: CreateLabReservationRequest): CreateLabReservationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLabReservation', 'POST', '/', 'json', true, 'form', request);
}

model CreateLabSessionRequest {
  accountId: long(name='AccountId', description='This parameter is required.', example='-', position='Body'),
  labId: long(name='LabId', description='This parameter is required.', example='875', position='Body'),
  ramAccountId: long(name='RamAccountId', description='This parameter is required.', example='-', position='Body'),
}

model CreateLabSessionResponseBody = {
  code?: string(name='Code', example='00000'),
  labSession?: {
    id?: string(name='Id', example='875'),
    url?: string(name='Url', example='-'),
  }(name='LabSession'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9ADC729B-...'),
  success?: boolean(name='Success', example='True'),
}

model CreateLabSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLabSessionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateLabSession  CreateLabSessionRequest
  * @return CreateLabSessionResponse
 */
async function createLabSession(request: CreateLabSessionRequest): CreateLabSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLabSession', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCourseRequest {
  courseId: long(name='CourseId', description='This parameter is required.', position='Query'),
}

model DescribeCourseResponseBody = {
  code?: string(name='Code'),
  course?: {
    category?: string(name='Category'),
    chapters?: [ 
      {
        lessons?: [ 
          {
            duration?: int32(name='Duration'),
            id?: long(name='Id'),
            title?: string(name='Title'),
            type?: string(name='Type'),
          }
        ](name='Lessons'),
        number?: int32(name='Number'),
        title?: string(name='Title'),
        unit?: [ 
          {
            lessons?: [ 
              {
                duration?: int32(name='Duration'),
                id?: long(name='Id'),
                title?: string(name='Title'),
                type?: string(name='Type'),
              }
            ](name='Lessons'),
            number?: int32(name='Number'),
            title?: string(name='Title'),
          }
        ](name='Unit'),
      }
    ](name='Chapters'),
    id?: string(name='Id'),
    introduction?: string(name='Introduction'),
    lessonNum?: int32(name='LessonNum'),
    lessons?: [ 
      {
        duration?: int32(name='Duration'),
        id?: long(name='Id'),
        title?: string(name='Title'),
        type?: string(name='Type'),
      }
    ](name='Lessons'),
    pictureUrl?: string(name='PictureUrl'),
    tags?: string(name='Tags'),
    title?: string(name='Title'),
  }(name='Course'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeCourseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCourseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCourse  DescribeCourseRequest
  * @return DescribeCourseResponse
 */
async function describeCourse(request: DescribeCourseRequest): DescribeCourseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCourse', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCourseLessonRequest {
  lessonId: long(name='LessonId', description='This parameter is required.', position='Query'),
}

model DescribeCourseLessonResponseBody = {
  code?: string(name='Code'),
  courseLesson?: {
    content?: string(name='Content'),
    url?: string(name='Url'),
  }(name='CourseLesson'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeCourseLessonResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCourseLessonResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCourseLesson  DescribeCourseLessonRequest
  * @return DescribeCourseLessonResponse
 */
async function describeCourseLesson(request: DescribeCourseLessonRequest): DescribeCourseLessonResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCourseLesson', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLabRequest {
  labId: long(name='LabId', description='This parameter is required.', example='875', position='Query'),
}

model DescribeLabResponseBody = {
  code?: string(name='Code', example='00000'),
  lab?: {
    duration?: long(name='Duration', example='10'),
    id?: long(name='Id', example='875'),
    introduction?: string(name='Introduction'),
    subTitle?: string(name='SubTitle', example='-'),
    title?: string(name='Title'),
  }(name='Lab'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9ADC729B-...'),
  success?: boolean(name='Success', example='True'),
}

model DescribeLabResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLabResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeLab  DescribeLabRequest
  * @return DescribeLabResponse
 */
async function describeLab(request: DescribeLabRequest): DescribeLabResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLab', 'GET', '/', 'json', false, 'json', request);
}

model DescribeLabReservationRequest {
  accountId?: long(name='AccountId', position='Query'),
  labReservationId: string(name='LabReservationId', description='This parameter is required.', example='1', position='Query'),
}

model DescribeLabReservationResponseBody = {
  code?: string(name='Code', example='00000'),
  labReservation?: {
    accountId?: long(name='AccountId'),
    endTime?: string(name='EndTime'),
    id?: string(name='Id', example='1'),
    memberCount?: long(name='MemberCount'),
    startTime?: string(name='StartTime'),
  }(name='LabReservation'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9ADC729B-...'),
  success?: boolean(name='Success', example='True'),
}

model DescribeLabReservationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLabReservationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeLabReservation  DescribeLabReservationRequest
  * @return DescribeLabReservationResponse
 */
async function describeLabReservation(request: DescribeLabReservationRequest): DescribeLabReservationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLabReservation', 'GET', '/', 'json', false, 'json', request);
}

model DescribeLabSessionRequest {
  accountId: long(name='AccountId', description='This parameter is required.', example='-', position='Query'),
  labSessionId: string(name='LabSessionId', description='This parameter is required.', example='1', position='Query'),
  ramAccountId: long(name='RamAccountId', description='This parameter is required.', example='-', position='Query'),
}

model DescribeLabSessionResponseBody = {
  code?: string(name='Code', example='00000'),
  labSession?: {
    createTime?: string(name='CreateTime', example='2023-05-05 15:01:59'),
    finished?: boolean(name='Finished', example='False'),
    id?: string(name='Id', example='838'),
    labId?: long(name='LabId', example='875'),
    url?: string(name='Url', example='-'),
  }(name='LabSession'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9ADC729B-...'),
  success?: boolean(name='Success', example='True'),
}

model DescribeLabSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLabSessionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeLabSession  DescribeLabSessionRequest
  * @return DescribeLabSessionResponse
 */
async function describeLabSession(request: DescribeLabSessionRequest): DescribeLabSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLabSession', 'GET', '/', 'json', false, 'json', request);
}

model ListCoursesRequest {
  id?: [ long ](name='Id', position='Query'),
  page?: long(name='Page', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
}

model ListCoursesResponseBody = {
  code?: string(name='Code'),
  courses?: [ 
    {
      category?: string(name='Category'),
      id?: string(name='Id'),
      introduction?: string(name='Introduction'),
      lessonNum?: int32(name='LessonNum'),
      pictureUrl?: string(name='PictureUrl'),
      tags?: string(name='Tags'),
      title?: string(name='Title'),
    }
  ](name='Courses'),
  message?: string(name='Message'),
  page?: long(name='Page'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model ListCoursesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCoursesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCourses  ListCoursesRequest
  * @return ListCoursesResponse
 */
async function listCourses(request: ListCoursesRequest): ListCoursesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCourses', 'POST', '/', 'json', false, 'json', request);
}

model PageListLabReservationsRequest {
  accountId?: long(name='AccountId', position='Query'),
  page?: long(name='Page', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
}

model PageListLabReservationsResponseBody = {
  code?: string(name='Code', example='00000'),
  labReservations?: [ 
    {
      accountId?: long(name='AccountId', example='-'),
      endTime?: string(name='EndTime', example='2023-05-04 09:25:41'),
      id?: string(name='Id', example='552'),
      memberCount?: long(name='MemberCount', example='1'),
      startTime?: string(name='StartTime', example='2023-05-04 07:25:41'),
    }
  ](name='LabReservations'),
  message?: string(name='Message', example='success'),
  page?: long(name='Page', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='9ADC729B-...'),
  success?: boolean(name='Success', example='True'),
  totalCount?: long(name='TotalCount', example='32'),
}

model PageListLabReservationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PageListLabReservationsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PageListLabReservations  PageListLabReservationsRequest
  * @return PageListLabReservationsResponse
 */
async function pageListLabReservations(request: PageListLabReservationsRequest): PageListLabReservationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PageListLabReservations', 'GET', '/', 'json', false, 'json', request);
}

model PageListLabSessionsRequest {
  finished?: boolean(name='Finished', position='Query'),
  labId?: long(name='LabId', position='Query'),
  page?: long(name='Page', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
  ramAccountId?: long(name='RamAccountId', position='Query'),
}

model PageListLabSessionsResponseBody = {
  code?: string(name='Code', example='00000'),
  labSessions?: [ 
    {
      createTime?: string(name='CreateTime', example='2023-06-24 18:27:25'),
      finished?: boolean(name='Finished', example='False'),
      id?: string(name='Id', example='10334'),
      labId?: long(name='LabId', example='875'),
      url?: string(name='Url', example='-'),
    }
  ](name='LabSessions'),
  message?: string(name='Message', example='success'),
  page?: long(name='Page', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='9ADC729B-...'),
  success?: boolean(name='Success', example='True'),
  totalCount?: long(name='TotalCount', example='12'),
}

model PageListLabSessionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PageListLabSessionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PageListLabSessions  PageListLabSessionsRequest
  * @return PageListLabSessionsResponse
 */
async function pageListLabSessions(request: PageListLabSessionsRequest): PageListLabSessionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PageListLabSessions', 'GET', '/', 'json', false, 'json', request);
}

model PageListLabsRequest {
  id?: [ long ](name='Id', position='Query'),
  page?: long(name='Page', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
}

model PageListLabsResponseBody = {
  code?: string(name='Code', example='00000'),
  labs?: [ 
    {
      duration?: long(name='Duration', example='1'),
      id?: long(name='Id', example='981'),
      introduction?: string(name='Introduction'),
      subTitle?: string(name='SubTitle', example='-'),
      title?: string(name='Title'),
    }
  ](name='Labs'),
  message?: string(name='Message', example='success'),
  page?: long(name='Page', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='9ADC729B-...'),
  success?: boolean(name='Success', example='True'),
  totalCount?: long(name='TotalCount', example='6'),
}

model PageListLabsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PageListLabsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PageListLabs  PageListLabsRequest
  * @return PageListLabsResponse
 */
async function pageListLabs(request: PageListLabsRequest): PageListLabsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PageListLabs', 'GET', '/', 'json', false, 'json', request);
}

model RemoveLabReservationRequest {
  accountId?: long(name='AccountId', position='Body'),
  labReservationId: string(name='LabReservationId', description='This parameter is required.', example='1', position='Body'),
}

model RemoveLabReservationResponseBody = {
  code?: string(name='Code', example='00000'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9ADC729B-...'),
  result?: boolean(name='Result', example='True'),
  success?: boolean(name='Success', example='True'),
}

model RemoveLabReservationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveLabReservationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveLabReservation  RemoveLabReservationRequest
  * @return RemoveLabReservationResponse
 */
async function removeLabReservation(request: RemoveLabReservationRequest): RemoveLabReservationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveLabReservation', 'POST', '/', 'json', true, 'form', request);
}

