/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('eduembed', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateLabReservationRequest {
  accountId?: long(name='AccountId'),
  endTime?: string(name='EndTime'),
  labId?: long(name='LabId'),
  memberCount?: long(name='MemberCount'),
  startTime?: string(name='StartTime'),
}

model CreateLabReservationResponseBody = {
  code?: string(name='Code'),
  labReservation?: {
    id?: string(name='Id'),
  }(name='LabReservation'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateLabReservationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLabReservationResponseBody(name='body'),
}

async function createLabReservationWithOptions(request: CreateLabReservationRequest, runtime: Util.RuntimeOptions): CreateLabReservationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accountId)) {
    body['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.labId)) {
    body['LabId'] = request.labId;
  }
  if (!Util.isUnset(request.memberCount)) {
    body['MemberCount'] = request.memberCount;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateLabReservation',
    version = '2024-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createLabReservation(request: CreateLabReservationRequest): CreateLabReservationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLabReservationWithOptions(request, runtime);
}

model CreateLabSessionRequest {
  accountId?: long(name='AccountId'),
  labId?: long(name='LabId'),
  ramAccountId?: long(name='RamAccountId'),
}

model CreateLabSessionResponseBody = {
  code?: string(name='Code'),
  labSession?: {
    id?: string(name='Id'),
    url?: string(name='Url'),
  }(name='LabSession'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateLabSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLabSessionResponseBody(name='body'),
}

async function createLabSessionWithOptions(request: CreateLabSessionRequest, runtime: Util.RuntimeOptions): CreateLabSessionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accountId)) {
    body['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.labId)) {
    body['LabId'] = request.labId;
  }
  if (!Util.isUnset(request.ramAccountId)) {
    body['RamAccountId'] = request.ramAccountId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateLabSession',
    version = '2024-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createLabSession(request: CreateLabSessionRequest): CreateLabSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLabSessionWithOptions(request, runtime);
}

model DescribeLabRequest {
  labId?: long(name='LabId'),
}

model DescribeLabResponseBody = {
  code?: string(name='Code'),
  lab?: {
    duration?: long(name='Duration'),
    id?: long(name='Id'),
    introduction?: string(name='Introduction'),
    subTitle?: string(name='SubTitle'),
    title?: string(name='Title'),
  }(name='Lab'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeLabResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLabResponseBody(name='body'),
}

async function describeLabWithOptions(request: DescribeLabRequest, runtime: Util.RuntimeOptions): DescribeLabResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLab',
    version = '2024-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLab(request: DescribeLabRequest): DescribeLabResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLabWithOptions(request, runtime);
}

model DescribeLabReservationRequest {
  labReservationId?: string(name='LabReservationId'),
}

model DescribeLabReservationResponseBody = {
  code?: string(name='Code'),
  labReservation?: {
    id?: string(name='Id'),
  }(name='LabReservation'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeLabReservationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLabReservationResponseBody(name='body'),
}

async function describeLabReservationWithOptions(request: DescribeLabReservationRequest, runtime: Util.RuntimeOptions): DescribeLabReservationResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLabReservation',
    version = '2024-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLabReservation(request: DescribeLabReservationRequest): DescribeLabReservationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLabReservationWithOptions(request, runtime);
}

model DescribeLabSessionRequest {
  accountId?: long(name='AccountId'),
  labSessionId?: string(name='LabSessionId'),
  ramAccountId?: long(name='RamAccountId'),
}

model DescribeLabSessionResponseBody = {
  code?: string(name='Code'),
  labSession?: {
    createTime?: string(name='CreateTime'),
    finished?: boolean(name='Finished'),
    id?: string(name='Id'),
    labId?: long(name='LabId'),
    url?: string(name='Url'),
  }(name='LabSession'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeLabSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLabSessionResponseBody(name='body'),
}

async function describeLabSessionWithOptions(request: DescribeLabSessionRequest, runtime: Util.RuntimeOptions): DescribeLabSessionResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLabSession',
    version = '2024-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLabSession(request: DescribeLabSessionRequest): DescribeLabSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLabSessionWithOptions(request, runtime);
}

model PageListLabReservationsRequest {
  page?: long(name='Page'),
  pageSize?: long(name='PageSize'),
}

model PageListLabReservationsResponseBody = {
  code?: string(name='Code'),
  labReservations?: [ 
    {
      accountId?: long(name='AccountId'),
      endTime?: string(name='EndTime'),
      id?: string(name='Id'),
      memberCount?: long(name='MemberCount'),
      startTime?: string(name='StartTime'),
    }
  ](name='LabReservations'),
  message?: string(name='Message'),
  page?: long(name='Page'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model PageListLabReservationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PageListLabReservationsResponseBody(name='body'),
}

async function pageListLabReservationsWithOptions(request: PageListLabReservationsRequest, runtime: Util.RuntimeOptions): PageListLabReservationsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PageListLabReservations',
    version = '2024-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pageListLabReservations(request: PageListLabReservationsRequest): PageListLabReservationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return pageListLabReservationsWithOptions(request, runtime);
}

model PageListLabSessionsRequest {
  labId?: long(name='LabId'),
  page?: long(name='Page'),
  pageSize?: long(name='PageSize'),
  ramAccountId?: long(name='RamAccountId'),
}

model PageListLabSessionsResponseBody = {
  code?: string(name='Code'),
  labSessions?: [ 
    {
      createTime?: string(name='CreateTime'),
      finished?: boolean(name='Finished'),
      id?: string(name='Id'),
      labId?: long(name='LabId'),
      url?: string(name='Url'),
    }
  ](name='LabSessions'),
  message?: string(name='Message'),
  page?: long(name='Page'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model PageListLabSessionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PageListLabSessionsResponseBody(name='body'),
}

async function pageListLabSessionsWithOptions(request: PageListLabSessionsRequest, runtime: Util.RuntimeOptions): PageListLabSessionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PageListLabSessions',
    version = '2024-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pageListLabSessions(request: PageListLabSessionsRequest): PageListLabSessionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return pageListLabSessionsWithOptions(request, runtime);
}

model PageListLabsRequest {
  id?: [ long ](name='Id'),
  page?: long(name='Page'),
  pageSize?: long(name='PageSize'),
}

model PageListLabsResponseBody = {
  code?: string(name='Code'),
  labs?: [ 
    {
      duration?: long(name='Duration'),
      id?: long(name='Id'),
      introduction?: string(name='Introduction'),
      subTitle?: string(name='SubTitle'),
      title?: string(name='Title'),
    }
  ](name='Labs'),
  message?: string(name='Message'),
  page?: long(name='Page'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model PageListLabsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PageListLabsResponseBody(name='body'),
}

async function pageListLabsWithOptions(request: PageListLabsRequest, runtime: Util.RuntimeOptions): PageListLabsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PageListLabs',
    version = '2024-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pageListLabs(request: PageListLabsRequest): PageListLabsResponse {
  var runtime = new Util.RuntimeOptions{};
  return pageListLabsWithOptions(request, runtime);
}

model RemoveLabReservationRequest {
  labReservationId?: string(name='LabReservationId'),
}

model RemoveLabReservationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model RemoveLabReservationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveLabReservationResponseBody(name='body'),
}

async function removeLabReservationWithOptions(request: RemoveLabReservationRequest, runtime: Util.RuntimeOptions): RemoveLabReservationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.labReservationId)) {
    body['LabReservationId'] = request.labReservationId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveLabReservation',
    version = '2024-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeLabReservation(request: RemoveLabReservationRequest): RemoveLabReservationResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeLabReservationWithOptions(request, runtime);
}

