/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'gws';
  @version = '2019-06-18';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-southeast-3 = 'gws.ap-northeast-3.aliyuncs.com',
    cn-hangzhou-finance = 'ecd.cn-hangzhou-finance.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CheckServiceLinkedRoleForDeletingRequest {
  deletionTaskId?: string(name='DeletionTaskId', position='Query'),
  roleArn?: string(name='RoleArn', position='Query'),
  SPIRegionId?: string(name='SPIRegionId', position='Query'),
  serviceName?: string(name='ServiceName', position='Query'),
}

model CheckServiceLinkedRoleForDeletingResponseBody = {
  deletable?: boolean(name='Deletable'),
  instances?: {
    instance?: [ 
    {
      instanceId?: string(name='InstanceId'),
    }
  ](name='Instance')
  }(name='Instances'),
  requestId?: string(name='RequestId'),
  roleUsages?: {
    roleUsage?: [ 
    {
      region?: string(name='Region'),
      resources?: {
        resource?: [ string ](name='Resource')
      }(name='Resources'),
    }
  ](name='RoleUsage')
  }(name='RoleUsages'),
}

model CheckServiceLinkedRoleForDeletingResponse = {
  headers: map[string]string(name='headers'),
  body: CheckServiceLinkedRoleForDeletingResponseBody(name='body'),
}

async function checkServiceLinkedRoleForDeleting(request: CheckServiceLinkedRoleForDeletingRequest): CheckServiceLinkedRoleForDeletingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckServiceLinkedRoleForDeleting', 'POST', '/', 'json', false, 'json', request);
}

model CreateClusterRequest {
  clusterType: string(name='ClusterType', position='Query'),
  vSwitchId?: string(name='VSwitchId', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
}

model CreateClusterResponseBody = {
  clusterId?: string(name='ClusterId'),
  requestId?: string(name='RequestId'),
}

model CreateClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateClusterResponseBody(name='body'),
}

async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCluster', 'POST', '/', 'json', false, 'json', request);
}

model CreateImageRequest {
  instanceId: string(name='InstanceId', position='Query'),
  name?: string(name='Name', position='Query'),
}

model CreateImageResponseBody = {
  imageId?: string(name='ImageId'),
  requestId?: string(name='RequestId'),
}

model CreateImageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateImageResponseBody(name='body'),
}

async function createImage(request: CreateImageRequest): CreateImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateImage', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  allocatePublicAddress?: string(name='AllocatePublicAddress', position='Query'),
  appList?: [ 
    {
      appArgs?: string(name='AppArgs'),
      appName?: string(name='AppName'),
      appPath?: string(name='AppPath'),
    }
  ](name='AppList', position='Query'),
  autoRenew?: string(name='AutoRenew', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  imageId: string(name='ImageId', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  internetChargeType?: string(name='InternetChargeType', position='Query'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn', minimum=1, maximum=100, position='Query'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', minimum=0, maximum=100, position='Query'),
  name?: string(name='Name', position='Query'),
  period?: int32(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  systemDiskCategory: string(name='SystemDiskCategory', position='Query'),
  systemDiskSize: int32(name='SystemDiskSize', minimum=20, maximum=500, position='Query'),
  vSwitchId?: string(name='VSwitchId', position='Query'),
  workMode: string(name='WorkMode', position='Query'),
}

model CreateInstanceResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateServiceLinkedRoleRequest {
}

model CreateServiceLinkedRoleResponseBody = {
  alreadyExists?: boolean(name='AlreadyExists'),
  requestId?: string(name='RequestId'),
}

model CreateServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceLinkedRoleResponseBody(name='body'),
}

async function createServiceLinkedRole(request: CreateServiceLinkedRoleRequest): CreateServiceLinkedRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServiceLinkedRole', 'POST', '/', 'json', false, 'json', request);
}

model DeleteClusterRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model DeleteClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteClusterResponseBody(name='body'),
}

async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCluster', 'POST', '/', 'json', false, 'json', request);
}

model DeleteImageRequest {
  imageId: string(name='ImageId', position='Query'),
}

model DeleteImageResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteImageResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteImageResponseBody(name='body'),
}

async function deleteImage(request: DeleteImageRequest): DeleteImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteImage', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAvailableResourceRequest {
}

model DescribeAvailableResourceResponseBody = {
  availableResources?: [ 
    {
      clusterType?: string(name='ClusterType'),
      zone?: string(name='Zone'),
    }
  ](name='AvailableResources'),
  requestId?: string(name='RequestId'),
}

model DescribeAvailableResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableResourceResponseBody(name='body'),
}

async function describeAvailableResource(request: DescribeAvailableResourceRequest): DescribeAvailableResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAvailableResource', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClusterADDomainRequest {
  clusterId: string(name='ClusterId', position='Query'),
  taskId?: string(name='TaskId', position='Query'),
}

model DescribeClusterADDomainResponseBody = {
  domainDnsIp?: string(name='DomainDnsIp'),
  domainName?: string(name='DomainName'),
  isSupported?: boolean(name='IsSupported'),
  requestId?: string(name='RequestId'),
  taskFinished?: boolean(name='TaskFinished'),
  taskId?: string(name='TaskId'),
}

model DescribeClusterADDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterADDomainResponseBody(name='body'),
}

async function describeClusterADDomain(request: DescribeClusterADDomainRequest): DescribeClusterADDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusterADDomain', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClusterConnectionsRequest {
  clusterId: string(name='ClusterId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  taskId?: string(name='TaskId', position='Query'),
}

model DescribeClusterConnectionsResponseBody = {
  connections?: [ 
    {
      clientName?: string(name='ClientName'),
      hostName?: string(name='HostName'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      logoffStatus?: string(name='LogoffStatus'),
      logoffTime?: string(name='LogoffTime'),
      logonTime?: string(name='LogonTime'),
    }
  ](name='Connections'),
  requestId?: string(name='RequestId'),
  taskFinished?: boolean(name='TaskFinished'),
  taskId?: string(name='TaskId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeClusterConnectionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterConnectionsResponseBody(name='body'),
}

async function describeClusterConnections(request: DescribeClusterConnectionsRequest): DescribeClusterConnectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusterConnections', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClusterPolicyRequest {
  asyncMode?: boolean(name='AsyncMode', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  taskId?: string(name='TaskId', position='Query'),
}

model DescribeClusterPolicyResponseBody = {
  audio?: string(name='Audio'),
  clipboard?: string(name='Clipboard'),
  domainList?: string(name='DomainList'),
  localDrive?: string(name='LocalDrive'),
  requestId?: string(name='RequestId'),
  taskFinished?: boolean(name='TaskFinished'),
  taskId?: string(name='TaskId'),
  udpPort?: string(name='UdpPort'),
  usbRedirect?: string(name='UsbRedirect'),
  watermark?: string(name='Watermark'),
}

model DescribeClusterPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterPolicyResponseBody(name='body'),
}

async function describeClusterPolicy(request: DescribeClusterPolicyRequest): DescribeClusterPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusterPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClustersRequest {
  clusterId?: string(name='ClusterId', position='Query'),
  pageNumber?: long(name='PageNumber', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
}

model DescribeClustersResponseBody = {
  clusters?: [ 
    {
      clusterId?: string(name='ClusterId'),
      createTime?: string(name='CreateTime'),
      domainName?: string(name='DomainName'),
      instanceCount?: long(name='InstanceCount'),
      name?: string(name='Name'),
      natEip?: string(name='NatEip'),
      natId?: string(name='NatId'),
      securityGroup?: string(name='SecurityGroup'),
      status?: string(name='Status'),
      vpcId?: string(name='VpcId'),
    }
  ](name='Clusters'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClustersResponseBody(name='body'),
}

async function describeClusters(request: DescribeClustersRequest): DescribeClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImagesRequest {
  instanceType?: string(name='InstanceType', position='Query'),
}

model DescribeImagesResponseBody = {
  images?: [ 
    {
      createTime?: string(name='CreateTime'),
      imageId?: string(name='ImageId'),
      imageType?: string(name='ImageType'),
      name?: string(name='Name'),
      productCode?: string(name='ProductCode'),
      progress?: string(name='Progress'),
      size?: long(name='Size'),
      status?: string(name='Status'),
    }
  ](name='Images'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeImagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImagesResponseBody(name='body'),
}

async function describeImages(request: DescribeImagesRequest): DescribeImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImages', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstancePolicyRequest {
  asyncMode?: boolean(name='AsyncMode', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  taskId?: string(name='TaskId', position='Query'),
}

model DescribeInstancePolicyResponseBody = {
  optimizeFor3d?: string(name='OptimizeFor3d'),
  requestId?: string(name='RequestId'),
  taskFinished?: boolean(name='TaskFinished'),
  taskId?: string(name='TaskId'),
  visualLossless?: string(name='VisualLossless'),
}

model DescribeInstancePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstancePolicyResponseBody(name='body'),
}

async function describeInstancePolicy(request: DescribeInstancePolicyRequest): DescribeInstancePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstancePolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstancesRequest {
  clusterId?: string(name='ClusterId', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  pageNumber?: long(name='PageNumber', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  userName?: string(name='UserName', position='Query'),
  userUid?: long(name='UserUid', position='Query'),
}

model DescribeInstancesResponseBody = {
  instances?: [ 
    {
      appList?: [ 
        {
          appArgs?: string(name='AppArgs'),
          appName?: string(name='AppName'),
          appPath?: string(name='AppPath'),
        }
      ](name='AppList'),
      clusterId?: string(name='ClusterId'),
      createTime?: string(name='CreateTime'),
      domainName?: string(name='DomainName'),
      expireTime?: string(name='ExpireTime'),
      hostName?: string(name='HostName'),
      imageId?: string(name='ImageId'),
      instanceChargeType?: string(name='InstanceChargeType'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      isBoundUser?: boolean(name='IsBoundUser'),
      maxBandwidthIn?: long(name='MaxBandwidthIn'),
      maxBandwidthOut?: long(name='MaxBandwidthOut'),
      name?: string(name='Name'),
      status?: string(name='Status'),
      stoppedMode?: string(name='StoppedMode'),
      userName?: string(name='UserName'),
      userUid?: long(name='UserUid'),
      workMode?: string(name='WorkMode'),
    }
  ](name='Instances'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstancesResponseBody(name='body'),
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstances', 'POST', '/', 'json', false, 'json', request);
}

model GetConnectTicketRequest {
  appName?: string(name='AppName', position='Query'),
  asyncMode?: boolean(name='AsyncMode', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  password?: string(name='Password', position='Query'),
  taskId?: string(name='TaskId', position='Query'),
  usePrivateIp?: boolean(name='UsePrivateIp', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model GetConnectTicketResponseBody = {
  requestId?: string(name='RequestId'),
  taskFinished?: boolean(name='TaskFinished'),
  taskId?: string(name='TaskId'),
  ticket?: string(name='Ticket'),
}

model GetConnectTicketResponse = {
  headers: map[string]string(name='headers'),
  body: GetConnectTicketResponseBody(name='body'),
}

async function getConnectTicket(request: GetConnectTicketRequest): GetConnectTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConnectTicket', 'POST', '/', 'json', false, 'json', request);
}

model IsUserAdminRequest {
}

model IsUserAdminResponseBody = {
  isAdmin?: boolean(name='IsAdmin'),
  isAllow?: boolean(name='IsAllow'),
  requestId?: string(name='RequestId'),
}

model IsUserAdminResponse = {
  headers: map[string]string(name='headers'),
  body: IsUserAdminResponseBody(name='body'),
}

async function isUserAdmin(request: IsUserAdminRequest): IsUserAdminResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'IsUserAdmin', 'POST', '/', 'json', false, 'json', request);
}

model RestartInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
}

model RestartInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RestartInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RestartInstanceResponseBody(name='body'),
}

async function restartInstance(request: RestartInstanceRequest): RestartInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartInstance', 'POST', '/', 'json', false, 'json', request);
}

model SetClusterADDomainRequest {
  clusterId: string(name='ClusterId', position='Query'),
  domainAdmin?: string(name='DomainAdmin', position='Query'),
  domainDelete?: boolean(name='DomainDelete', position='Query'),
  domainDnsIp: string(name='DomainDnsIp', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  domainPassword: string(name='DomainPassword', position='Query'),
}

model SetClusterADDomainResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model SetClusterADDomainResponse = {
  headers: map[string]string(name='headers'),
  body: SetClusterADDomainResponseBody(name='body'),
}

async function setClusterADDomain(request: SetClusterADDomainRequest): SetClusterADDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetClusterADDomain', 'POST', '/', 'json', false, 'json', request);
}

model SetClusterDnatRequest {
  clusterId: string(name='ClusterId', position='Query'),
  natEip?: string(name='NatEip', position='Query'),
  natId: string(name='NatId', position='Query'),
}

model SetClusterDnatResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetClusterDnatResponse = {
  headers: map[string]string(name='headers'),
  body: SetClusterDnatResponseBody(name='body'),
}

async function setClusterDnat(request: SetClusterDnatRequest): SetClusterDnatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetClusterDnat', 'POST', '/', 'json', false, 'json', request);
}

model SetClusterNameRequest {
  clusterId: string(name='ClusterId', position='Query'),
  name: string(name='Name', position='Query'),
}

model SetClusterNameResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetClusterNameResponse = {
  headers: map[string]string(name='headers'),
  body: SetClusterNameResponseBody(name='body'),
}

async function setClusterName(request: SetClusterNameRequest): SetClusterNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetClusterName', 'POST', '/', 'json', false, 'json', request);
}

model SetClusterPolicyRequest {
  asyncMode?: boolean(name='AsyncMode', position='Query'),
  audio?: string(name='Audio', position='Query'),
  clipboard: string(name='Clipboard', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  domainList?: string(name='DomainList', position='Query'),
  localDrive: string(name='LocalDrive', position='Query'),
  udpPort?: string(name='UdpPort', position='Query'),
  usbRedirect: string(name='UsbRedirect', position='Query'),
  watermark: string(name='Watermark', position='Query'),
}

model SetClusterPolicyResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model SetClusterPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: SetClusterPolicyResponseBody(name='body'),
}

async function setClusterPolicy(request: SetClusterPolicyRequest): SetClusterPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetClusterPolicy', 'POST', '/', 'json', false, 'json', request);
}

model SetImageNameRequest {
  imageId: string(name='ImageId', position='Query'),
  name: string(name='Name', position='Query'),
}

model SetImageNameResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetImageNameResponse = {
  headers: map[string]string(name='headers'),
  body: SetImageNameResponseBody(name='body'),
}

async function setImageName(request: SetImageNameRequest): SetImageNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetImageName', 'POST', '/', 'json', false, 'json', request);
}

model SetInstanceNameRequest {
  instanceId: string(name='InstanceId', position='Query'),
  name: string(name='Name', position='Query'),
}

model SetInstanceNameResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetInstanceNameResponse = {
  headers: map[string]string(name='headers'),
  body: SetInstanceNameResponseBody(name='body'),
}

async function setInstanceName(request: SetInstanceNameRequest): SetInstanceNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetInstanceName', 'POST', '/', 'json', false, 'json', request);
}

model SetInstancePolicyRequest {
  asyncMode?: boolean(name='AsyncMode', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  optimizeFor3d?: string(name='OptimizeFor3d', position='Query'),
  visualLossless?: string(name='VisualLossless', position='Query'),
}

model SetInstancePolicyResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model SetInstancePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: SetInstancePolicyResponseBody(name='body'),
}

async function setInstancePolicy(request: SetInstancePolicyRequest): SetInstancePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetInstancePolicy', 'POST', '/', 'json', false, 'json', request);
}

model SetInstanceUserRequest {
  instanceId: string(name='InstanceId', position='Query'),
  userName: string(name='UserName', position='Query'),
  userUid: long(name='UserUid', position='Query'),
}

model SetInstanceUserResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetInstanceUserResponse = {
  headers: map[string]string(name='headers'),
  body: SetInstanceUserResponseBody(name='body'),
}

async function setInstanceUser(request: SetInstanceUserRequest): SetInstanceUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetInstanceUser', 'POST', '/', 'json', false, 'json', request);
}

model StartInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
}

model StartInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StartInstanceResponseBody(name='body'),
}

async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartInstance', 'POST', '/', 'json', false, 'json', request);
}

model StopInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
}

model StopInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StopInstanceResponseBody(name='body'),
}

async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopInstance', 'POST', '/', 'json', false, 'json', request);
}

