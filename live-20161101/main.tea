/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    cn-qingdao = 'live.aliyuncs.com',
    cn-beijing = 'live.aliyuncs.com',
    cn-hangzhou = 'live.aliyuncs.com',
    cn-shanghai = 'live.aliyuncs.com',
    cn-shenzhen = 'live.aliyuncs.com',
    ap-southeast-1 = 'live.aliyuncs.com',
    ap-southeast-5 = 'live.aliyuncs.com',
    ap-northeast-1 = 'live.aliyuncs.com',
    eu-central-1 = 'live.aliyuncs.com',
    ap-south-1 = 'live.aliyuncs.com',
    ap-northeast-2-pop = 'live.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'live.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'live.ap-southeast-1.aliyuncs.com',
    cn-beijing-finance-1 = 'live.aliyuncs.com',
    cn-beijing-finance-pop = 'live.aliyuncs.com',
    cn-beijing-gov-1 = 'live.aliyuncs.com',
    cn-beijing-nu16-b01 = 'live.aliyuncs.com',
    cn-chengdu = 'live.aliyuncs.com',
    cn-edge-1 = 'live.aliyuncs.com',
    cn-fujian = 'live.aliyuncs.com',
    cn-haidian-cm12-c01 = 'live.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'live.aliyuncs.com',
    cn-hangzhou-finance = 'live.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'live.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'live.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'live.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'live.aliyuncs.com',
    cn-hangzhou-test-306 = 'live.aliyuncs.com',
    cn-hongkong = 'live.aliyuncs.com',
    cn-hongkong-finance-pop = 'live.aliyuncs.com',
    cn-huhehaote = 'live.aliyuncs.com',
    cn-north-2-gov-1 = 'live.aliyuncs.com',
    cn-qingdao-nebula = 'live.aliyuncs.com',
    cn-shanghai-et15-b01 = 'live.aliyuncs.com',
    cn-shanghai-et2-b01 = 'live.aliyuncs.com',
    cn-shanghai-finance-1 = 'live.aliyuncs.com',
    cn-shanghai-inner = 'live.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'live.aliyuncs.com',
    cn-shenzhen-finance-1 = 'live.aliyuncs.com',
    cn-shenzhen-inner = 'live.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'live.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'live.aliyuncs.com',
    cn-wuhan = 'live.aliyuncs.com',
    cn-yushanfang = 'live.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'live.aliyuncs.com',
    cn-zhangjiakou = 'live.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'live.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'live.aliyuncs.com',
    eu-west-1 = 'live.ap-southeast-1.aliyuncs.com',
    eu-west-1-oxs = 'live.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'live.ap-southeast-1.aliyuncs.com',
    rus-west-1-pop = 'live.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'live.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'live.ap-southeast-1.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('live', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddCasterComponentRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  componentName?: string(name='ComponentName'),
  locationId?: string(name='LocationId'),
  componentType?: string(name='ComponentType'),
  effect?: string(name='Effect'),
  componentLayer?: string(name='ComponentLayer'),
  layerOrder?: string(name='LayerOrder'),
  textLayerContent?: string(name='TextLayerContent'),
  imageLayerContent?: string(name='ImageLayerContent'),
  captionLayerContent?: string(name='CaptionLayerContent'),
  htmlLayerContent?: string(name='HtmlLayerContent'),
}

model AddCasterComponentResponseBody = {
  requestId?: string(name='RequestId'),
  componentId?: string(name='ComponentId'),
}

model AddCasterComponentResponse = {
  headers: map[string]string(name='headers'),
  body: AddCasterComponentResponseBody(name='body'),
}

async function addCasterComponentWithOptions(request: AddCasterComponentRequest, runtime: Util.RuntimeOptions): AddCasterComponentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddCasterComponent', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addCasterComponent(request: AddCasterComponentRequest): AddCasterComponentResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCasterComponentWithOptions(request, runtime);
}

model AddCasterEpisodeRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  episodeType?: string(name='EpisodeType'),
  episodeName?: string(name='EpisodeName'),
  resourceId?: string(name='ResourceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  switchType?: string(name='SwitchType'),
  componentId?: [ string ](name='ComponentId'),
}

model AddCasterEpisodeResponseBody = {
  requestId?: string(name='RequestId'),
  episodeId?: string(name='EpisodeId'),
}

model AddCasterEpisodeResponse = {
  headers: map[string]string(name='headers'),
  body: AddCasterEpisodeResponseBody(name='body'),
}

async function addCasterEpisodeWithOptions(request: AddCasterEpisodeRequest, runtime: Util.RuntimeOptions): AddCasterEpisodeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddCasterEpisode', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addCasterEpisode(request: AddCasterEpisodeRequest): AddCasterEpisodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCasterEpisodeWithOptions(request, runtime);
}

model AddCasterEpisodeGroupRequest {
  ownerId?: long(name='OwnerId'),
  clientToken?: string(name='ClientToken'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  repeatNum?: int32(name='RepeatNum'),
  sideOutputUrl?: string(name='SideOutputUrl'),
  callbackUrl?: string(name='CallbackUrl'),
  item?: [ 
    {
      itemName?: string(name='ItemName'),
      vodUrl?: string(name='VodUrl'),
    }
  ](name='Item'),
}

model AddCasterEpisodeGroupResponseBody = {
  requestId?: string(name='RequestId'),
  programId?: string(name='ProgramId'),
  itemIds?: {
    itemId?: [ string ](name='ItemId')
  }(name='ItemIds'),
}

model AddCasterEpisodeGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddCasterEpisodeGroupResponseBody(name='body'),
}

async function addCasterEpisodeGroupWithOptions(request: AddCasterEpisodeGroupRequest, runtime: Util.RuntimeOptions): AddCasterEpisodeGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddCasterEpisodeGroup', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addCasterEpisodeGroup(request: AddCasterEpisodeGroupRequest): AddCasterEpisodeGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCasterEpisodeGroupWithOptions(request, runtime);
}

model AddCasterEpisodeGroupContentRequest {
  ownerId?: long(name='OwnerId'),
  clientToken?: string(name='ClientToken'),
  content?: string(name='Content'),
}

model AddCasterEpisodeGroupContentResponseBody = {
  requestId?: string(name='RequestId'),
  programId?: string(name='ProgramId'),
  itemIds?: {
    itemId?: [ string ](name='ItemId')
  }(name='ItemIds'),
}

model AddCasterEpisodeGroupContentResponse = {
  headers: map[string]string(name='headers'),
  body: AddCasterEpisodeGroupContentResponseBody(name='body'),
}

async function addCasterEpisodeGroupContentWithOptions(request: AddCasterEpisodeGroupContentRequest, runtime: Util.RuntimeOptions): AddCasterEpisodeGroupContentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddCasterEpisodeGroupContent', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addCasterEpisodeGroupContent(request: AddCasterEpisodeGroupContentRequest): AddCasterEpisodeGroupContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCasterEpisodeGroupContentWithOptions(request, runtime);
}

model AddCasterLayoutRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  videoLayer?: [ 
    {
      fixedDelayDuration?: int32(name='FixedDelayDuration'),
      heightNormalized?: float(name='HeightNormalized'),
      fillMode?: string(name='FillMode'),
      positionRefer?: string(name='PositionRefer'),
      positionNormalized?: [ number ](name='PositionNormalized'),
      widthNormalized?: float(name='WidthNormalized'),
    }
  ](name='VideoLayer'),
  audioLayer?: [ 
    {
      volumeRate?: float(name='VolumeRate'),
      fixedDelayDuration?: int32(name='FixedDelayDuration'),
      validChannel?: string(name='ValidChannel'),
    }
  ](name='AudioLayer'),
  blendList?: [ string ](name='BlendList'),
  mixList?: [ string ](name='MixList'),
}

model AddCasterLayoutResponseBody = {
  requestId?: string(name='RequestId'),
  layoutId?: string(name='LayoutId'),
}

model AddCasterLayoutResponse = {
  headers: map[string]string(name='headers'),
  body: AddCasterLayoutResponseBody(name='body'),
}

async function addCasterLayoutWithOptions(request: AddCasterLayoutRequest, runtime: Util.RuntimeOptions): AddCasterLayoutResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddCasterLayout', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addCasterLayout(request: AddCasterLayoutRequest): AddCasterLayoutResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCasterLayoutWithOptions(request, runtime);
}

model AddCasterProgramRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  episode?: [ 
    {
      endTime?: string(name='EndTime'),
      startTime?: string(name='StartTime'),
      episodeName?: string(name='EpisodeName'),
      episodeType?: string(name='EpisodeType'),
      resourceId?: string(name='ResourceId'),
      componentId?: [ string ](name='ComponentId'),
      switchType?: string(name='SwitchType'),
    }
  ](name='Episode'),
}

model AddCasterProgramResponseBody = {
  episodeIds?: {
    episodeId?: [ 
    {
      episodeId?: string(name='EpisodeId'),
    }
  ](name='EpisodeId')
  }(name='EpisodeIds'),
  requestId?: string(name='RequestId'),
}

model AddCasterProgramResponse = {
  headers: map[string]string(name='headers'),
  body: AddCasterProgramResponseBody(name='body'),
}

async function addCasterProgramWithOptions(request: AddCasterProgramRequest, runtime: Util.RuntimeOptions): AddCasterProgramResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddCasterProgram', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addCasterProgram(request: AddCasterProgramRequest): AddCasterProgramResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCasterProgramWithOptions(request, runtime);
}

model AddCasterVideoResourceRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  resourceName?: string(name='ResourceName'),
  locationId?: string(name='LocationId'),
  liveStreamUrl?: string(name='LiveStreamUrl'),
  streamId?: string(name='StreamId'),
  materialId?: string(name='MaterialId'),
  vodUrl?: string(name='VodUrl'),
  beginOffset?: int32(name='BeginOffset'),
  endOffset?: int32(name='EndOffset'),
  repeatNum?: int32(name='RepeatNum'),
  ptsCallbackInterval?: int32(name='PtsCallbackInterval'),
}

model AddCasterVideoResourceResponseBody = {
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
}

model AddCasterVideoResourceResponse = {
  headers: map[string]string(name='headers'),
  body: AddCasterVideoResourceResponseBody(name='body'),
}

async function addCasterVideoResourceWithOptions(request: AddCasterVideoResourceRequest, runtime: Util.RuntimeOptions): AddCasterVideoResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddCasterVideoResource', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addCasterVideoResource(request: AddCasterVideoResourceRequest): AddCasterVideoResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCasterVideoResourceWithOptions(request, runtime);
}

model AddCustomLiveStreamTranscodeRequest {
  ownerId?: long(name='OwnerId'),
  domain?: string(name='Domain'),
  app?: string(name='App'),
  template?: string(name='Template'),
  templateType?: string(name='TemplateType'),
  height?: int32(name='Height'),
  width?: int32(name='Width'),
  FPS?: int32(name='FPS'),
  videoBitrate?: int32(name='VideoBitrate'),
  audioBitrate?: int32(name='AudioBitrate'),
  gop?: string(name='Gop'),
  profile?: int32(name='Profile'),
  audioProfile?: string(name='AudioProfile'),
  audioCodec?: string(name='AudioCodec'),
  audioRate?: int32(name='AudioRate'),
  audioChannelNum?: int32(name='AudioChannelNum'),
  lazy?: string(name='Lazy'),
}

model AddCustomLiveStreamTranscodeResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddCustomLiveStreamTranscodeResponse = {
  headers: map[string]string(name='headers'),
  body: AddCustomLiveStreamTranscodeResponseBody(name='body'),
}

async function addCustomLiveStreamTranscodeWithOptions(request: AddCustomLiveStreamTranscodeRequest, runtime: Util.RuntimeOptions): AddCustomLiveStreamTranscodeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddCustomLiveStreamTranscode', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addCustomLiveStreamTranscode(request: AddCustomLiveStreamTranscodeRequest): AddCustomLiveStreamTranscodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCustomLiveStreamTranscodeWithOptions(request, runtime);
}

model AddDRMCertificateRequest {
  ownerId?: long(name='OwnerId'),
  certName?: string(name='CertName'),
  servCert?: string(name='ServCert'),
  privateKey?: string(name='PrivateKey'),
  passphrase?: string(name='Passphrase'),
  ask?: string(name='Ask'),
  description?: string(name='Description'),
}

model AddDRMCertificateResponseBody = {
  requestId?: string(name='RequestId'),
  certId?: string(name='CertId'),
}

model AddDRMCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: AddDRMCertificateResponseBody(name='body'),
}

async function addDRMCertificateWithOptions(request: AddDRMCertificateRequest, runtime: Util.RuntimeOptions): AddDRMCertificateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddDRMCertificate', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addDRMCertificate(request: AddDRMCertificateRequest): AddDRMCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDRMCertificateWithOptions(request, runtime);
}

model AddLiveAppRecordConfigRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  ossEndpoint?: string(name='OssEndpoint'),
  ossBucket?: string(name='OssBucket'),
  streamName?: string(name='StreamName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  onDemand?: int32(name='OnDemand'),
  recordFormat?: [ 
    {
      sliceOssObjectPrefix?: string(name='SliceOssObjectPrefix'),
      cycleDuration?: int32(name='CycleDuration'),
      ossObjectPrefix?: string(name='OssObjectPrefix'),
      format?: string(name='Format'),
    }
  ](name='RecordFormat'),
}

model AddLiveAppRecordConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLiveAppRecordConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveAppRecordConfigResponseBody(name='body'),
}

async function addLiveAppRecordConfigWithOptions(request: AddLiveAppRecordConfigRequest, runtime: Util.RuntimeOptions): AddLiveAppRecordConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddLiveAppRecordConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addLiveAppRecordConfig(request: AddLiveAppRecordConfigRequest): AddLiveAppRecordConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLiveAppRecordConfigWithOptions(request, runtime);
}

model AddLiveAppSnapshotConfigRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  timeInterval?: int32(name='TimeInterval'),
  ossEndpoint?: string(name='OssEndpoint'),
  ossBucket?: string(name='OssBucket'),
  overwriteOssObject?: string(name='OverwriteOssObject'),
  sequenceOssObject?: string(name='SequenceOssObject'),
  callback?: string(name='Callback'),
}

model AddLiveAppSnapshotConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLiveAppSnapshotConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveAppSnapshotConfigResponseBody(name='body'),
}

async function addLiveAppSnapshotConfigWithOptions(request: AddLiveAppSnapshotConfigRequest, runtime: Util.RuntimeOptions): AddLiveAppSnapshotConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddLiveAppSnapshotConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addLiveAppSnapshotConfig(request: AddLiveAppSnapshotConfigRequest): AddLiveAppSnapshotConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLiveAppSnapshotConfigWithOptions(request, runtime);
}

model AddLiveASRConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  mnsTopic?: string(name='MnsTopic'),
  mnsRegion?: string(name='MnsRegion'),
  period?: int32(name='Period'),
  httpCallbackURL?: string(name='HttpCallbackURL'),
}

model AddLiveASRConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLiveASRConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveASRConfigResponseBody(name='body'),
}

async function addLiveASRConfigWithOptions(request: AddLiveASRConfigRequest, runtime: Util.RuntimeOptions): AddLiveASRConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddLiveASRConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addLiveASRConfig(request: AddLiveASRConfigRequest): AddLiveASRConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLiveASRConfigWithOptions(request, runtime);
}

model AddLiveAudioAuditConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
  ossObject?: string(name='OssObject'),
  bizType?: string(name='BizType'),
}

model AddLiveAudioAuditConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLiveAudioAuditConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveAudioAuditConfigResponseBody(name='body'),
}

async function addLiveAudioAuditConfigWithOptions(request: AddLiveAudioAuditConfigRequest, runtime: Util.RuntimeOptions): AddLiveAudioAuditConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddLiveAudioAuditConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addLiveAudioAuditConfig(request: AddLiveAudioAuditConfigRequest): AddLiveAudioAuditConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLiveAudioAuditConfigWithOptions(request, runtime);
}

model AddLiveAudioAuditNotifyConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  callback?: string(name='Callback'),
  callbackTemplate?: string(name='CallbackTemplate'),
}

model AddLiveAudioAuditNotifyConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLiveAudioAuditNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveAudioAuditNotifyConfigResponseBody(name='body'),
}

async function addLiveAudioAuditNotifyConfigWithOptions(request: AddLiveAudioAuditNotifyConfigRequest, runtime: Util.RuntimeOptions): AddLiveAudioAuditNotifyConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddLiveAudioAuditNotifyConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addLiveAudioAuditNotifyConfig(request: AddLiveAudioAuditNotifyConfigRequest): AddLiveAudioAuditNotifyConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLiveAudioAuditNotifyConfigWithOptions(request, runtime);
}

model AddLiveDetectNotifyConfigRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  notifyUrl?: string(name='NotifyUrl'),
}

model AddLiveDetectNotifyConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLiveDetectNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveDetectNotifyConfigResponseBody(name='body'),
}

async function addLiveDetectNotifyConfigWithOptions(request: AddLiveDetectNotifyConfigRequest, runtime: Util.RuntimeOptions): AddLiveDetectNotifyConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddLiveDetectNotifyConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addLiveDetectNotifyConfig(request: AddLiveDetectNotifyConfigRequest): AddLiveDetectNotifyConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLiveDetectNotifyConfigWithOptions(request, runtime);
}

model AddLiveDomainRequest {
  ownerId?: long(name='OwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  securityToken?: string(name='SecurityToken'),
  liveDomainType?: string(name='LiveDomainType'),
  domainName?: string(name='DomainName'),
  region?: string(name='Region'),
  checkUrl?: string(name='CheckUrl'),
  scope?: string(name='Scope'),
  topLevelDomain?: string(name='TopLevelDomain'),
}

model AddLiveDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLiveDomainResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveDomainResponseBody(name='body'),
}

async function addLiveDomainWithOptions(request: AddLiveDomainRequest, runtime: Util.RuntimeOptions): AddLiveDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddLiveDomain', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addLiveDomain(request: AddLiveDomainRequest): AddLiveDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLiveDomainWithOptions(request, runtime);
}

model AddLiveDomainMappingRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  pushDomain?: string(name='PushDomain'),
  pullDomain?: string(name='PullDomain'),
}

model AddLiveDomainMappingResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLiveDomainMappingResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveDomainMappingResponseBody(name='body'),
}

async function addLiveDomainMappingWithOptions(request: AddLiveDomainMappingRequest, runtime: Util.RuntimeOptions): AddLiveDomainMappingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddLiveDomainMapping', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addLiveDomainMapping(request: AddLiveDomainMappingRequest): AddLiveDomainMappingResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLiveDomainMappingWithOptions(request, runtime);
}

model AddLiveDomainPlayMappingRequest {
  ownerId?: long(name='OwnerId'),
  playDomain?: string(name='PlayDomain'),
  pullDomain?: string(name='PullDomain'),
}

model AddLiveDomainPlayMappingResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLiveDomainPlayMappingResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveDomainPlayMappingResponseBody(name='body'),
}

async function addLiveDomainPlayMappingWithOptions(request: AddLiveDomainPlayMappingRequest, runtime: Util.RuntimeOptions): AddLiveDomainPlayMappingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddLiveDomainPlayMapping', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addLiveDomainPlayMapping(request: AddLiveDomainPlayMappingRequest): AddLiveDomainPlayMappingResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLiveDomainPlayMappingWithOptions(request, runtime);
}

model AddLivePullStreamInfoConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  sourceUrl?: string(name='SourceUrl'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model AddLivePullStreamInfoConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLivePullStreamInfoConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddLivePullStreamInfoConfigResponseBody(name='body'),
}

async function addLivePullStreamInfoConfigWithOptions(request: AddLivePullStreamInfoConfigRequest, runtime: Util.RuntimeOptions): AddLivePullStreamInfoConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddLivePullStreamInfoConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addLivePullStreamInfoConfig(request: AddLivePullStreamInfoConfigRequest): AddLivePullStreamInfoConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLivePullStreamInfoConfigWithOptions(request, runtime);
}

model AddLiveRecordNotifyConfigRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  notifyUrl?: string(name='NotifyUrl'),
  needStatusNotify?: boolean(name='NeedStatusNotify'),
  onDemandUrl?: string(name='OnDemandUrl'),
}

model AddLiveRecordNotifyConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLiveRecordNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveRecordNotifyConfigResponseBody(name='body'),
}

async function addLiveRecordNotifyConfigWithOptions(request: AddLiveRecordNotifyConfigRequest, runtime: Util.RuntimeOptions): AddLiveRecordNotifyConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddLiveRecordNotifyConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addLiveRecordNotifyConfig(request: AddLiveRecordNotifyConfigRequest): AddLiveRecordNotifyConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLiveRecordNotifyConfigWithOptions(request, runtime);
}

model AddLiveRecordVodConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  vodTranscodeGroupId?: string(name='VodTranscodeGroupId'),
  cycleDuration?: int32(name='CycleDuration'),
  autoCompose?: string(name='AutoCompose'),
  storageLocation?: string(name='StorageLocation'),
  composeVodTranscodeGroupId?: string(name='ComposeVodTranscodeGroupId'),
}

model AddLiveRecordVodConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLiveRecordVodConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveRecordVodConfigResponseBody(name='body'),
}

async function addLiveRecordVodConfigWithOptions(request: AddLiveRecordVodConfigRequest, runtime: Util.RuntimeOptions): AddLiveRecordVodConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddLiveRecordVodConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addLiveRecordVodConfig(request: AddLiveRecordVodConfigRequest): AddLiveRecordVodConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLiveRecordVodConfigWithOptions(request, runtime);
}

model AddLiveSnapshotDetectPornConfigRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  ossEndpoint?: string(name='OssEndpoint'),
  ossBucket?: string(name='OssBucket'),
  ossObject?: string(name='OssObject'),
  interval?: int32(name='Interval'),
  scene?: [ string ](name='Scene'),
}

model AddLiveSnapshotDetectPornConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLiveSnapshotDetectPornConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveSnapshotDetectPornConfigResponseBody(name='body'),
}

async function addLiveSnapshotDetectPornConfigWithOptions(request: AddLiveSnapshotDetectPornConfigRequest, runtime: Util.RuntimeOptions): AddLiveSnapshotDetectPornConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddLiveSnapshotDetectPornConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addLiveSnapshotDetectPornConfig(request: AddLiveSnapshotDetectPornConfigRequest): AddLiveSnapshotDetectPornConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLiveSnapshotDetectPornConfigWithOptions(request, runtime);
}

model AddLiveStreamTranscodeRequest {
  ownerId?: long(name='OwnerId'),
  domain?: string(name='Domain'),
  app?: string(name='App'),
  template?: string(name='Template'),
  encryptParameters?: string(name='EncryptParameters'),
  lazy?: string(name='Lazy'),
}

model AddLiveStreamTranscodeResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLiveStreamTranscodeResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveStreamTranscodeResponseBody(name='body'),
}

async function addLiveStreamTranscodeWithOptions(request: AddLiveStreamTranscodeRequest, runtime: Util.RuntimeOptions): AddLiveStreamTranscodeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddLiveStreamTranscode', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addLiveStreamTranscode(request: AddLiveStreamTranscodeRequest): AddLiveStreamTranscodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLiveStreamTranscodeWithOptions(request, runtime);
}

model AddMultiRateConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  app?: string(name='App'),
  avFormat?: string(name='AvFormat'),
  groupId?: string(name='GroupId'),
  isLazy?: string(name='IsLazy'),
  isTimeAlign?: string(name='IsTimeAlign'),
  templates?: string(name='Templates'),
}

model AddMultiRateConfigResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: int32(name='Code'),
  body?: {
    failedTemplates?: [ 
    {
      audioBitrate?: int32(name='AudioBitrate'),
      height?: int32(name='Height'),
      template?: string(name='Template'),
      templateType?: string(name='TemplateType'),
      bandWidth?: int32(name='BandWidth'),
      profile?: int32(name='Profile'),
      audioRate?: int32(name='AudioRate'),
      audioCodec?: string(name='AudioCodec'),
      gop?: string(name='Gop'),
      videoBitrate?: int32(name='VideoBitrate'),
      width?: int32(name='Width'),
      audioChannelNum?: int32(name='AudioChannelNum'),
      fps?: int32(name='Fps'),
      audioProfile?: string(name='AudioProfile'),
    }
  ](name='FailedTemplates')
  }(name='Body'),
}

model AddMultiRateConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddMultiRateConfigResponseBody(name='body'),
}

async function addMultiRateConfigWithOptions(request: AddMultiRateConfigRequest, runtime: Util.RuntimeOptions): AddMultiRateConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddMultiRateConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addMultiRateConfig(request: AddMultiRateConfigRequest): AddMultiRateConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return addMultiRateConfigWithOptions(request, runtime);
}

model AddPlaylistItemsRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  programItems?: string(name='ProgramItems'),
  programId?: string(name='ProgramId'),
  programConfig?: string(name='ProgramConfig'),
}

model AddPlaylistItemsResponseBody = {
  requestId?: string(name='RequestId'),
  items?: {
    successItems?: [ 
      {
        itemName?: string(name='ItemName'),
        itemId?: string(name='ItemId'),
      }
    ](name='SuccessItems'),
    failedItems?: [ 
      {
        itemName?: string(name='ItemName'),
        itemId?: string(name='ItemId'),
      }
    ](name='FailedItems'),
  }(name='Items'),
  programId?: string(name='ProgramId'),
}

model AddPlaylistItemsResponse = {
  headers: map[string]string(name='headers'),
  body: AddPlaylistItemsResponseBody(name='body'),
}

async function addPlaylistItemsWithOptions(request: AddPlaylistItemsRequest, runtime: Util.RuntimeOptions): AddPlaylistItemsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddPlaylistItems', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addPlaylistItems(request: AddPlaylistItemsRequest): AddPlaylistItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addPlaylistItemsWithOptions(request, runtime);
}

model AddRtsLiveStreamTranscodeRequest {
  ownerId?: long(name='OwnerId'),
  domain?: string(name='Domain'),
  app?: string(name='App'),
  template?: string(name='Template'),
  templateType?: string(name='TemplateType'),
  height?: int32(name='Height'),
  width?: int32(name='Width'),
  FPS?: int32(name='FPS'),
  videoBitrate?: int32(name='VideoBitrate'),
  audioBitrate?: int32(name='AudioBitrate'),
  gop?: string(name='Gop'),
  deleteBframes?: boolean(name='DeleteBframes'),
  opus?: boolean(name='Opus'),
  profile?: int32(name='Profile'),
  audioProfile?: string(name='AudioProfile'),
  audioCodec?: string(name='AudioCodec'),
  audioRate?: int32(name='AudioRate'),
  audioChannelNum?: int32(name='AudioChannelNum'),
  lazy?: string(name='Lazy'),
}

model AddRtsLiveStreamTranscodeResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddRtsLiveStreamTranscodeResponse = {
  headers: map[string]string(name='headers'),
  body: AddRtsLiveStreamTranscodeResponseBody(name='body'),
}

async function addRtsLiveStreamTranscodeWithOptions(request: AddRtsLiveStreamTranscodeRequest, runtime: Util.RuntimeOptions): AddRtsLiveStreamTranscodeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddRtsLiveStreamTranscode', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addRtsLiveStreamTranscode(request: AddRtsLiveStreamTranscodeRequest): AddRtsLiveStreamTranscodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return addRtsLiveStreamTranscodeWithOptions(request, runtime);
}

model AddStudioLayoutRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  layoutName?: string(name='LayoutName'),
  layoutType?: string(name='LayoutType'),
  commonConfig?: string(name='CommonConfig'),
  bgImageConfig?: string(name='BgImageConfig'),
  screenInputConfigList?: string(name='ScreenInputConfigList'),
  mediaInputConfigList?: string(name='MediaInputConfigList'),
  layerOrderConfigList?: string(name='LayerOrderConfigList'),
}

model AddStudioLayoutResponseBody = {
  requestId?: string(name='RequestId'),
  layoutId?: string(name='LayoutId'),
}

model AddStudioLayoutResponse = {
  headers: map[string]string(name='headers'),
  body: AddStudioLayoutResponseBody(name='body'),
}

async function addStudioLayoutWithOptions(request: AddStudioLayoutRequest, runtime: Util.RuntimeOptions): AddStudioLayoutResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddStudioLayout', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addStudioLayout(request: AddStudioLayoutRequest): AddStudioLayoutResponse {
  var runtime = new Util.RuntimeOptions{};
  return addStudioLayoutWithOptions(request, runtime);
}

model AddTrancodeSEIRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  text?: string(name='Text'),
  pattern?: string(name='Pattern'),
  repeat?: int32(name='Repeat'),
  delay?: int32(name='Delay'),
}

model AddTrancodeSEIResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddTrancodeSEIResponse = {
  headers: map[string]string(name='headers'),
  body: AddTrancodeSEIResponseBody(name='body'),
}

async function addTrancodeSEIWithOptions(request: AddTrancodeSEIRequest, runtime: Util.RuntimeOptions): AddTrancodeSEIResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddTrancodeSEI', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addTrancodeSEI(request: AddTrancodeSEIRequest): AddTrancodeSEIResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTrancodeSEIWithOptions(request, runtime);
}

model AllowPushStreamRequest {
  ownerId?: long(name='OwnerId'),
  appId?: string(name='AppId'),
  roomId?: string(name='RoomId'),
}

model AllowPushStreamResponseBody = {
  requestId?: string(name='RequestId'),
}

model AllowPushStreamResponse = {
  headers: map[string]string(name='headers'),
  body: AllowPushStreamResponseBody(name='body'),
}

async function allowPushStreamWithOptions(request: AllowPushStreamRequest, runtime: Util.RuntimeOptions): AllowPushStreamResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AllowPushStream', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function allowPushStream(request: AllowPushStreamRequest): AllowPushStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return allowPushStreamWithOptions(request, runtime);
}

model ApplyBoardTokenRequest {
  ownerId?: long(name='OwnerId'),
  appId?: string(name='AppId'),
  appUid?: string(name='AppUid'),
  boardId?: string(name='BoardId'),
}

model ApplyBoardTokenResponseBody = {
  requestId?: string(name='RequestId'),
  token?: string(name='Token'),
  expired?: string(name='Expired'),
}

model ApplyBoardTokenResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyBoardTokenResponseBody(name='body'),
}

async function applyBoardTokenWithOptions(request: ApplyBoardTokenRequest, runtime: Util.RuntimeOptions): ApplyBoardTokenResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ApplyBoardToken', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function applyBoardToken(request: ApplyBoardTokenRequest): ApplyBoardTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyBoardTokenWithOptions(request, runtime);
}

model ApplyRecordTokenRequest {
  ownerId?: long(name='OwnerId'),
  appId?: string(name='AppId'),
}

model ApplyRecordTokenResponseBody = {
  securityToken?: string(name='SecurityToken'),
  requestId?: string(name='RequestId'),
  accessKeyId?: string(name='AccessKeyId'),
  accessKeySecret?: string(name='AccessKeySecret'),
  expiration?: string(name='Expiration'),
}

model ApplyRecordTokenResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyRecordTokenResponseBody(name='body'),
}

async function applyRecordTokenWithOptions(request: ApplyRecordTokenRequest, runtime: Util.RuntimeOptions): ApplyRecordTokenResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ApplyRecordToken', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function applyRecordToken(request: ApplyRecordTokenRequest): ApplyRecordTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyRecordTokenWithOptions(request, runtime);
}

model BatchDeleteLiveDomainConfigsRequest {
  ownerId?: long(name='OwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  securityToken?: string(name='SecurityToken'),
  domainNames?: string(name='DomainNames'),
  functionNames?: string(name='FunctionNames'),
}

model BatchDeleteLiveDomainConfigsResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchDeleteLiveDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteLiveDomainConfigsResponseBody(name='body'),
}

async function batchDeleteLiveDomainConfigsWithOptions(request: BatchDeleteLiveDomainConfigsRequest, runtime: Util.RuntimeOptions): BatchDeleteLiveDomainConfigsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchDeleteLiveDomainConfigs', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchDeleteLiveDomainConfigs(request: BatchDeleteLiveDomainConfigsRequest): BatchDeleteLiveDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeleteLiveDomainConfigsWithOptions(request, runtime);
}

model BatchSetLiveDomainConfigsRequest {
  ownerId?: long(name='OwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  securityToken?: string(name='SecurityToken'),
  domainNames?: string(name='DomainNames'),
  functions?: string(name='Functions'),
}

model BatchSetLiveDomainConfigsResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchSetLiveDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetLiveDomainConfigsResponseBody(name='body'),
}

async function batchSetLiveDomainConfigsWithOptions(request: BatchSetLiveDomainConfigsRequest, runtime: Util.RuntimeOptions): BatchSetLiveDomainConfigsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchSetLiveDomainConfigs', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchSetLiveDomainConfigs(request: BatchSetLiveDomainConfigsRequest): BatchSetLiveDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchSetLiveDomainConfigsWithOptions(request, runtime);
}

model CheckServiceForRoleRequest {
  roleArn?: string(name='RoleArn'),
  SPIRegionId?: string(name='SPIRegionId'),
  serviceName?: string(name='ServiceName'),
  deletionTaskId?: string(name='DeletionTaskId'),
  accountId?: string(name='AccountId'),
}

model CheckServiceForRoleResponseBody = {
  requestId?: string(name='RequestId'),
  deletable?: boolean(name='Deletable'),
}

model CheckServiceForRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CheckServiceForRoleResponseBody(name='body'),
}

async function checkServiceForRoleWithOptions(request: CheckServiceForRoleRequest, runtime: Util.RuntimeOptions): CheckServiceForRoleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckServiceForRole', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkServiceForRole(request: CheckServiceForRoleRequest): CheckServiceForRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkServiceForRoleWithOptions(request, runtime);
}

model CloseLiveShiftRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
}

model CloseLiveShiftResponseBody = {
  requestId?: string(name='RequestId'),
}

model CloseLiveShiftResponse = {
  headers: map[string]string(name='headers'),
  body: CloseLiveShiftResponseBody(name='body'),
}

async function closeLiveShiftWithOptions(request: CloseLiveShiftRequest, runtime: Util.RuntimeOptions): CloseLiveShiftResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CloseLiveShift', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function closeLiveShift(request: CloseLiveShiftRequest): CloseLiveShiftResponse {
  var runtime = new Util.RuntimeOptions{};
  return closeLiveShiftWithOptions(request, runtime);
}

model CompleteBoardRequest {
  ownerId?: long(name='OwnerId'),
  appId?: string(name='AppId'),
  boardId?: string(name='BoardId'),
}

model CompleteBoardResponseBody = {
  requestId?: string(name='RequestId'),
}

model CompleteBoardResponse = {
  headers: map[string]string(name='headers'),
  body: CompleteBoardResponseBody(name='body'),
}

async function completeBoardWithOptions(request: CompleteBoardRequest, runtime: Util.RuntimeOptions): CompleteBoardResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CompleteBoard', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function completeBoard(request: CompleteBoardRequest): CompleteBoardResponse {
  var runtime = new Util.RuntimeOptions{};
  return completeBoardWithOptions(request, runtime);
}

model CompleteBoardRecordRequest {
  ownerId?: long(name='OwnerId'),
  appId?: string(name='AppId'),
  recordId?: string(name='RecordId'),
  endTime?: string(name='EndTime'),
}

model CompleteBoardRecordResponseBody = {
  requestId?: string(name='RequestId'),
  ossPath?: string(name='OssPath'),
}

model CompleteBoardRecordResponse = {
  headers: map[string]string(name='headers'),
  body: CompleteBoardRecordResponseBody(name='body'),
}

async function completeBoardRecordWithOptions(request: CompleteBoardRecordRequest, runtime: Util.RuntimeOptions): CompleteBoardRecordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CompleteBoardRecord', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function completeBoardRecord(request: CompleteBoardRecordRequest): CompleteBoardRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return completeBoardRecordWithOptions(request, runtime);
}

model ControlHtmlResourceRequest {
  ownerId?: long(name='OwnerId'),
  htmlResourceId?: string(name='HtmlResourceId'),
  htmlUrl?: string(name='htmlUrl'),
  casterId?: string(name='CasterId'),
  operate?: string(name='Operate'),
}

model ControlHtmlResourceResponseBody = {
  streamId?: string(name='StreamId'),
  requestId?: string(name='RequestId'),
}

model ControlHtmlResourceResponse = {
  headers: map[string]string(name='headers'),
  body: ControlHtmlResourceResponseBody(name='body'),
}

async function controlHtmlResourceWithOptions(request: ControlHtmlResourceRequest, runtime: Util.RuntimeOptions): ControlHtmlResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ControlHtmlResource', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function controlHtmlResource(request: ControlHtmlResourceRequest): ControlHtmlResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return controlHtmlResourceWithOptions(request, runtime);
}

model CopyCasterRequest {
  ownerId?: long(name='OwnerId'),
  casterName?: string(name='CasterName'),
  srcCasterId?: string(name='SrcCasterId'),
  clientToken?: string(name='ClientToken'),
}

model CopyCasterResponseBody = {
  requestId?: string(name='RequestId'),
  casterId?: string(name='CasterId'),
}

model CopyCasterResponse = {
  headers: map[string]string(name='headers'),
  body: CopyCasterResponseBody(name='body'),
}

async function copyCasterWithOptions(request: CopyCasterRequest, runtime: Util.RuntimeOptions): CopyCasterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CopyCaster', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function copyCaster(request: CopyCasterRequest): CopyCasterResponse {
  var runtime = new Util.RuntimeOptions{};
  return copyCasterWithOptions(request, runtime);
}

model CopyCasterSceneConfigRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  fromSceneId?: string(name='FromSceneId'),
  toSceneId?: string(name='ToSceneId'),
}

model CopyCasterSceneConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model CopyCasterSceneConfigResponse = {
  headers: map[string]string(name='headers'),
  body: CopyCasterSceneConfigResponseBody(name='body'),
}

async function copyCasterSceneConfigWithOptions(request: CopyCasterSceneConfigRequest, runtime: Util.RuntimeOptions): CopyCasterSceneConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CopyCasterSceneConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function copyCasterSceneConfig(request: CopyCasterSceneConfigRequest): CopyCasterSceneConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return copyCasterSceneConfigWithOptions(request, runtime);
}

model CreateBoardRequest {
  ownerId?: long(name='OwnerId'),
  appId?: string(name='AppId'),
  appUid?: string(name='AppUid'),
}

model CreateBoardResponseBody = {
  boardId?: string(name='BoardId'),
  requestId?: string(name='RequestId'),
}

model CreateBoardResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBoardResponseBody(name='body'),
}

async function createBoardWithOptions(request: CreateBoardRequest, runtime: Util.RuntimeOptions): CreateBoardResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateBoard', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createBoard(request: CreateBoardRequest): CreateBoardResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBoardWithOptions(request, runtime);
}

model CreateCasterRequest {
  ownerId?: long(name='OwnerId'),
  casterName?: string(name='CasterName'),
  clientToken?: string(name='ClientToken'),
  normType?: int32(name='NormType'),
  chargeType?: string(name='ChargeType'),
  purchaseTime?: string(name='PurchaseTime'),
  expireTime?: string(name='ExpireTime'),
  casterTemplate?: string(name='CasterTemplate'),
}

model CreateCasterResponseBody = {
  requestId?: string(name='RequestId'),
  casterId?: string(name='CasterId'),
}

model CreateCasterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCasterResponseBody(name='body'),
}

async function createCasterWithOptions(request: CreateCasterRequest, runtime: Util.RuntimeOptions): CreateCasterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCaster', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCaster(request: CreateCasterRequest): CreateCasterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCasterWithOptions(request, runtime);
}

model CreateLiveRealTimeLogDeliveryRequest {
  ownerId?: long(name='OwnerId'),
  project?: string(name='Project'),
  logstore?: string(name='Logstore'),
  region?: string(name='Region'),
  domainName?: string(name='DomainName'),
}

model CreateLiveRealTimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateLiveRealTimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLiveRealTimeLogDeliveryResponseBody(name='body'),
}

async function createLiveRealTimeLogDeliveryWithOptions(request: CreateLiveRealTimeLogDeliveryRequest, runtime: Util.RuntimeOptions): CreateLiveRealTimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('CreateLiveRealTimeLogDelivery', '2016-11-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function createLiveRealTimeLogDelivery(request: CreateLiveRealTimeLogDeliveryRequest): CreateLiveRealTimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLiveRealTimeLogDeliveryWithOptions(request, runtime);
}

model CreateLiveStreamRecordIndexFilesRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  ossEndpoint?: string(name='OssEndpoint'),
  ossBucket?: string(name='OssBucket'),
  ossObject?: string(name='OssObject'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model CreateLiveStreamRecordIndexFilesResponseBody = {
  requestId?: string(name='RequestId'),
  recordInfo?: {
    streamName?: string(name='StreamName'),
    recordUrl?: string(name='RecordUrl'),
    recordId?: string(name='RecordId'),
    createTime?: string(name='CreateTime'),
    height?: int32(name='Height'),
    ossBucket?: string(name='OssBucket'),
    domainName?: string(name='DomainName'),
    endTime?: string(name='EndTime'),
    ossObject?: string(name='OssObject'),
    startTime?: string(name='StartTime'),
    appName?: string(name='AppName'),
    width?: int32(name='Width'),
    duration?: float(name='Duration'),
    ossEndpoint?: string(name='OssEndpoint'),
  }(name='RecordInfo'),
}

model CreateLiveStreamRecordIndexFilesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLiveStreamRecordIndexFilesResponseBody(name='body'),
}

async function createLiveStreamRecordIndexFilesWithOptions(request: CreateLiveStreamRecordIndexFilesRequest, runtime: Util.RuntimeOptions): CreateLiveStreamRecordIndexFilesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateLiveStreamRecordIndexFiles', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createLiveStreamRecordIndexFiles(request: CreateLiveStreamRecordIndexFilesRequest): CreateLiveStreamRecordIndexFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLiveStreamRecordIndexFilesWithOptions(request, runtime);
}

model CreateMixStreamRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  layoutId?: string(name='LayoutId'),
  inputStreamList?: string(name='InputStreamList'),
  outputConfig?: string(name='OutputConfig'),
  callbackConfig?: string(name='CallbackConfig'),
}

model CreateMixStreamResponseBody = {
  mixStreamId?: string(name='MixStreamId'),
  requestId?: string(name='RequestId'),
}

model CreateMixStreamResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMixStreamResponseBody(name='body'),
}

async function createMixStreamWithOptions(request: CreateMixStreamRequest, runtime: Util.RuntimeOptions): CreateMixStreamResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateMixStream', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createMixStream(request: CreateMixStreamRequest): CreateMixStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMixStreamWithOptions(request, runtime);
}

model CreateRoomRequest {
  ownerId?: long(name='OwnerId'),
  appId?: string(name='AppId'),
  roomId?: string(name='RoomId'),
  anchorId?: string(name='AnchorId'),
  templateIds?: string(name='TemplateIds'),
  useAppTranscode?: boolean(name='UseAppTranscode'),
}

model CreateRoomResponseBody = {
  requestId?: string(name='RequestId'),
  appId?: string(name='AppId'),
  anchorId?: string(name='AnchorId'),
  roomId?: string(name='RoomId'),
}

model CreateRoomResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRoomResponseBody(name='body'),
}

async function createRoomWithOptions(request: CreateRoomRequest, runtime: Util.RuntimeOptions): CreateRoomResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRoom', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRoom(request: CreateRoomRequest): CreateRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRoomWithOptions(request, runtime);
}

model DeleteBoardRequest {
  ownerId?: long(name='OwnerId'),
  appId?: string(name='AppId'),
  boardId?: string(name='BoardId'),
}

model DeleteBoardResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteBoardResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBoardResponseBody(name='body'),
}

async function deleteBoardWithOptions(request: DeleteBoardRequest, runtime: Util.RuntimeOptions): DeleteBoardResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteBoard', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteBoard(request: DeleteBoardRequest): DeleteBoardResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBoardWithOptions(request, runtime);
}

model DeleteCasterRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
}

model DeleteCasterResponseBody = {
  requestId?: string(name='RequestId'),
  casterId?: string(name='CasterId'),
}

model DeleteCasterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCasterResponseBody(name='body'),
}

async function deleteCasterWithOptions(request: DeleteCasterRequest, runtime: Util.RuntimeOptions): DeleteCasterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteCaster', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteCaster(request: DeleteCasterRequest): DeleteCasterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCasterWithOptions(request, runtime);
}

model DeleteCasterComponentRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  componentId?: string(name='ComponentId'),
}

model DeleteCasterComponentResponseBody = {
  requestId?: string(name='RequestId'),
  casterId?: string(name='CasterId'),
  componentId?: string(name='ComponentId'),
}

model DeleteCasterComponentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCasterComponentResponseBody(name='body'),
}

async function deleteCasterComponentWithOptions(request: DeleteCasterComponentRequest, runtime: Util.RuntimeOptions): DeleteCasterComponentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteCasterComponent', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteCasterComponent(request: DeleteCasterComponentRequest): DeleteCasterComponentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCasterComponentWithOptions(request, runtime);
}

model DeleteCasterEpisodeRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  episodeId?: string(name='EpisodeId'),
}

model DeleteCasterEpisodeResponseBody = {
  requestId?: string(name='RequestId'),
  episodeId?: string(name='EpisodeId'),
  casterId?: string(name='CasterId'),
}

model DeleteCasterEpisodeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCasterEpisodeResponseBody(name='body'),
}

async function deleteCasterEpisodeWithOptions(request: DeleteCasterEpisodeRequest, runtime: Util.RuntimeOptions): DeleteCasterEpisodeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteCasterEpisode', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteCasterEpisode(request: DeleteCasterEpisodeRequest): DeleteCasterEpisodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCasterEpisodeWithOptions(request, runtime);
}

model DeleteCasterEpisodeGroupRequest {
  ownerId?: long(name='OwnerId'),
  programId?: string(name='ProgramId'),
}

model DeleteCasterEpisodeGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCasterEpisodeGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCasterEpisodeGroupResponseBody(name='body'),
}

async function deleteCasterEpisodeGroupWithOptions(request: DeleteCasterEpisodeGroupRequest, runtime: Util.RuntimeOptions): DeleteCasterEpisodeGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteCasterEpisodeGroup', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteCasterEpisodeGroup(request: DeleteCasterEpisodeGroupRequest): DeleteCasterEpisodeGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCasterEpisodeGroupWithOptions(request, runtime);
}

model DeleteCasterLayoutRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  layoutId?: string(name='LayoutId'),
}

model DeleteCasterLayoutResponseBody = {
  requestId?: string(name='RequestId'),
  layoutId?: string(name='LayoutId'),
  casterId?: string(name='CasterId'),
}

model DeleteCasterLayoutResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCasterLayoutResponseBody(name='body'),
}

async function deleteCasterLayoutWithOptions(request: DeleteCasterLayoutRequest, runtime: Util.RuntimeOptions): DeleteCasterLayoutResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteCasterLayout', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteCasterLayout(request: DeleteCasterLayoutRequest): DeleteCasterLayoutResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCasterLayoutWithOptions(request, runtime);
}

model DeleteCasterProgramRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
}

model DeleteCasterProgramResponseBody = {
  requestId?: string(name='RequestId'),
  casterId?: string(name='CasterId'),
}

model DeleteCasterProgramResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCasterProgramResponseBody(name='body'),
}

async function deleteCasterProgramWithOptions(request: DeleteCasterProgramRequest, runtime: Util.RuntimeOptions): DeleteCasterProgramResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteCasterProgram', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteCasterProgram(request: DeleteCasterProgramRequest): DeleteCasterProgramResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCasterProgramWithOptions(request, runtime);
}

model DeleteCasterSceneConfigRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  sceneId?: string(name='SceneId'),
  type?: string(name='Type'),
}

model DeleteCasterSceneConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCasterSceneConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCasterSceneConfigResponseBody(name='body'),
}

async function deleteCasterSceneConfigWithOptions(request: DeleteCasterSceneConfigRequest, runtime: Util.RuntimeOptions): DeleteCasterSceneConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteCasterSceneConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteCasterSceneConfig(request: DeleteCasterSceneConfigRequest): DeleteCasterSceneConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCasterSceneConfigWithOptions(request, runtime);
}

model DeleteCasterVideoResourceRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  resourceId?: string(name='ResourceId'),
}

model DeleteCasterVideoResourceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCasterVideoResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCasterVideoResourceResponseBody(name='body'),
}

async function deleteCasterVideoResourceWithOptions(request: DeleteCasterVideoResourceRequest, runtime: Util.RuntimeOptions): DeleteCasterVideoResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteCasterVideoResource', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteCasterVideoResource(request: DeleteCasterVideoResourceRequest): DeleteCasterVideoResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCasterVideoResourceWithOptions(request, runtime);
}

model DeleteHtmlResourceRequest {
  ownerId?: long(name='OwnerId'),
  htmlResourceId?: string(name='HtmlResourceId'),
  htmlUrl?: string(name='htmlUrl'),
  casterId?: string(name='CasterId'),
}

model DeleteHtmlResourceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteHtmlResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteHtmlResourceResponseBody(name='body'),
}

async function deleteHtmlResourceWithOptions(request: DeleteHtmlResourceRequest, runtime: Util.RuntimeOptions): DeleteHtmlResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteHtmlResource', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteHtmlResource(request: DeleteHtmlResourceRequest): DeleteHtmlResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteHtmlResourceWithOptions(request, runtime);
}

model DeleteLiveAppRecordConfigRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
}

model DeleteLiveAppRecordConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveAppRecordConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveAppRecordConfigResponseBody(name='body'),
}

async function deleteLiveAppRecordConfigWithOptions(request: DeleteLiveAppRecordConfigRequest, runtime: Util.RuntimeOptions): DeleteLiveAppRecordConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteLiveAppRecordConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteLiveAppRecordConfig(request: DeleteLiveAppRecordConfigRequest): DeleteLiveAppRecordConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveAppRecordConfigWithOptions(request, runtime);
}

model DeleteLiveAppSnapshotConfigRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
}

model DeleteLiveAppSnapshotConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveAppSnapshotConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveAppSnapshotConfigResponseBody(name='body'),
}

async function deleteLiveAppSnapshotConfigWithOptions(request: DeleteLiveAppSnapshotConfigRequest, runtime: Util.RuntimeOptions): DeleteLiveAppSnapshotConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteLiveAppSnapshotConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteLiveAppSnapshotConfig(request: DeleteLiveAppSnapshotConfigRequest): DeleteLiveAppSnapshotConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveAppSnapshotConfigWithOptions(request, runtime);
}

model DeleteLiveASRConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
}

model DeleteLiveASRConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveASRConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveASRConfigResponseBody(name='body'),
}

async function deleteLiveASRConfigWithOptions(request: DeleteLiveASRConfigRequest, runtime: Util.RuntimeOptions): DeleteLiveASRConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteLiveASRConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteLiveASRConfig(request: DeleteLiveASRConfigRequest): DeleteLiveASRConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveASRConfigWithOptions(request, runtime);
}

model DeleteLiveAudioAuditConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
}

model DeleteLiveAudioAuditConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveAudioAuditConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveAudioAuditConfigResponseBody(name='body'),
}

async function deleteLiveAudioAuditConfigWithOptions(request: DeleteLiveAudioAuditConfigRequest, runtime: Util.RuntimeOptions): DeleteLiveAudioAuditConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteLiveAudioAuditConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteLiveAudioAuditConfig(request: DeleteLiveAudioAuditConfigRequest): DeleteLiveAudioAuditConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveAudioAuditConfigWithOptions(request, runtime);
}

model DeleteLiveAudioAuditNotifyConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model DeleteLiveAudioAuditNotifyConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveAudioAuditNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveAudioAuditNotifyConfigResponseBody(name='body'),
}

async function deleteLiveAudioAuditNotifyConfigWithOptions(request: DeleteLiveAudioAuditNotifyConfigRequest, runtime: Util.RuntimeOptions): DeleteLiveAudioAuditNotifyConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteLiveAudioAuditNotifyConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteLiveAudioAuditNotifyConfig(request: DeleteLiveAudioAuditNotifyConfigRequest): DeleteLiveAudioAuditNotifyConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveAudioAuditNotifyConfigWithOptions(request, runtime);
}

model DeleteLiveDetectNotifyConfigRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model DeleteLiveDetectNotifyConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveDetectNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveDetectNotifyConfigResponseBody(name='body'),
}

async function deleteLiveDetectNotifyConfigWithOptions(request: DeleteLiveDetectNotifyConfigRequest, runtime: Util.RuntimeOptions): DeleteLiveDetectNotifyConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteLiveDetectNotifyConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteLiveDetectNotifyConfig(request: DeleteLiveDetectNotifyConfigRequest): DeleteLiveDetectNotifyConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveDetectNotifyConfigWithOptions(request, runtime);
}

model DeleteLiveDomainRequest {
  ownerId?: long(name='OwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
}

model DeleteLiveDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveDomainResponseBody(name='body'),
}

async function deleteLiveDomainWithOptions(request: DeleteLiveDomainRequest, runtime: Util.RuntimeOptions): DeleteLiveDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteLiveDomain', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteLiveDomain(request: DeleteLiveDomainRequest): DeleteLiveDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveDomainWithOptions(request, runtime);
}

model DeleteLiveDomainMappingRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  pushDomain?: string(name='PushDomain'),
  pullDomain?: string(name='PullDomain'),
}

model DeleteLiveDomainMappingResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveDomainMappingResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveDomainMappingResponseBody(name='body'),
}

async function deleteLiveDomainMappingWithOptions(request: DeleteLiveDomainMappingRequest, runtime: Util.RuntimeOptions): DeleteLiveDomainMappingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteLiveDomainMapping', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteLiveDomainMapping(request: DeleteLiveDomainMappingRequest): DeleteLiveDomainMappingResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveDomainMappingWithOptions(request, runtime);
}

model DeleteLiveDomainPlayMappingRequest {
  ownerId?: long(name='OwnerId'),
  playDomain?: string(name='PlayDomain'),
  pullDomain?: string(name='PullDomain'),
}

model DeleteLiveDomainPlayMappingResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveDomainPlayMappingResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveDomainPlayMappingResponseBody(name='body'),
}

async function deleteLiveDomainPlayMappingWithOptions(request: DeleteLiveDomainPlayMappingRequest, runtime: Util.RuntimeOptions): DeleteLiveDomainPlayMappingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteLiveDomainPlayMapping', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteLiveDomainPlayMapping(request: DeleteLiveDomainPlayMappingRequest): DeleteLiveDomainPlayMappingResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveDomainPlayMappingWithOptions(request, runtime);
}

model DeleteLiveLazyPullStreamInfoConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
}

model DeleteLiveLazyPullStreamInfoConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveLazyPullStreamInfoConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveLazyPullStreamInfoConfigResponseBody(name='body'),
}

async function deleteLiveLazyPullStreamInfoConfigWithOptions(request: DeleteLiveLazyPullStreamInfoConfigRequest, runtime: Util.RuntimeOptions): DeleteLiveLazyPullStreamInfoConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteLiveLazyPullStreamInfoConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteLiveLazyPullStreamInfoConfig(request: DeleteLiveLazyPullStreamInfoConfigRequest): DeleteLiveLazyPullStreamInfoConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveLazyPullStreamInfoConfigWithOptions(request, runtime);
}

model DeleteLivePullStreamInfoConfigRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
}

model DeleteLivePullStreamInfoConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLivePullStreamInfoConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLivePullStreamInfoConfigResponseBody(name='body'),
}

async function deleteLivePullStreamInfoConfigWithOptions(request: DeleteLivePullStreamInfoConfigRequest, runtime: Util.RuntimeOptions): DeleteLivePullStreamInfoConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteLivePullStreamInfoConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteLivePullStreamInfoConfig(request: DeleteLivePullStreamInfoConfigRequest): DeleteLivePullStreamInfoConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLivePullStreamInfoConfigWithOptions(request, runtime);
}

model DeleteLiveRealtimeLogDeliveryRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  project?: string(name='Project'),
  logstore?: string(name='Logstore'),
  region?: string(name='Region'),
}

model DeleteLiveRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveRealtimeLogDeliveryResponseBody(name='body'),
}

async function deleteLiveRealtimeLogDeliveryWithOptions(request: DeleteLiveRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): DeleteLiveRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DeleteLiveRealtimeLogDelivery', '2016-11-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function deleteLiveRealtimeLogDelivery(request: DeleteLiveRealtimeLogDeliveryRequest): DeleteLiveRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveRealtimeLogDeliveryWithOptions(request, runtime);
}

model DeleteLiveRealTimeLogLogstoreRequest {
  ownerId?: long(name='OwnerId'),
  project?: string(name='Project'),
  logstore?: string(name='Logstore'),
  region?: string(name='Region'),
}

model DeleteLiveRealTimeLogLogstoreResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveRealTimeLogLogstoreResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveRealTimeLogLogstoreResponseBody(name='body'),
}

async function deleteLiveRealTimeLogLogstoreWithOptions(request: DeleteLiveRealTimeLogLogstoreRequest, runtime: Util.RuntimeOptions): DeleteLiveRealTimeLogLogstoreResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DeleteLiveRealTimeLogLogstore', '2016-11-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function deleteLiveRealTimeLogLogstore(request: DeleteLiveRealTimeLogLogstoreRequest): DeleteLiveRealTimeLogLogstoreResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveRealTimeLogLogstoreWithOptions(request, runtime);
}

model DeleteLiveRecordNotifyConfigRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model DeleteLiveRecordNotifyConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveRecordNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveRecordNotifyConfigResponseBody(name='body'),
}

async function deleteLiveRecordNotifyConfigWithOptions(request: DeleteLiveRecordNotifyConfigRequest, runtime: Util.RuntimeOptions): DeleteLiveRecordNotifyConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteLiveRecordNotifyConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteLiveRecordNotifyConfig(request: DeleteLiveRecordNotifyConfigRequest): DeleteLiveRecordNotifyConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveRecordNotifyConfigWithOptions(request, runtime);
}

model DeleteLiveRecordVodConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
}

model DeleteLiveRecordVodConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveRecordVodConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveRecordVodConfigResponseBody(name='body'),
}

async function deleteLiveRecordVodConfigWithOptions(request: DeleteLiveRecordVodConfigRequest, runtime: Util.RuntimeOptions): DeleteLiveRecordVodConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteLiveRecordVodConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteLiveRecordVodConfig(request: DeleteLiveRecordVodConfigRequest): DeleteLiveRecordVodConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveRecordVodConfigWithOptions(request, runtime);
}

model DeleteLiveSnapshotDetectPornConfigRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
}

model DeleteLiveSnapshotDetectPornConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveSnapshotDetectPornConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveSnapshotDetectPornConfigResponseBody(name='body'),
}

async function deleteLiveSnapshotDetectPornConfigWithOptions(request: DeleteLiveSnapshotDetectPornConfigRequest, runtime: Util.RuntimeOptions): DeleteLiveSnapshotDetectPornConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteLiveSnapshotDetectPornConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteLiveSnapshotDetectPornConfig(request: DeleteLiveSnapshotDetectPornConfigRequest): DeleteLiveSnapshotDetectPornConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveSnapshotDetectPornConfigWithOptions(request, runtime);
}

model DeleteLiveStreamsNotifyUrlConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model DeleteLiveStreamsNotifyUrlConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveStreamsNotifyUrlConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveStreamsNotifyUrlConfigResponseBody(name='body'),
}

async function deleteLiveStreamsNotifyUrlConfigWithOptions(request: DeleteLiveStreamsNotifyUrlConfigRequest, runtime: Util.RuntimeOptions): DeleteLiveStreamsNotifyUrlConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteLiveStreamsNotifyUrlConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteLiveStreamsNotifyUrlConfig(request: DeleteLiveStreamsNotifyUrlConfigRequest): DeleteLiveStreamsNotifyUrlConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveStreamsNotifyUrlConfigWithOptions(request, runtime);
}

model DeleteLiveStreamTranscodeRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domain?: string(name='Domain'),
  app?: string(name='App'),
  template?: string(name='Template'),
}

model DeleteLiveStreamTranscodeResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveStreamTranscodeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveStreamTranscodeResponseBody(name='body'),
}

async function deleteLiveStreamTranscodeWithOptions(request: DeleteLiveStreamTranscodeRequest, runtime: Util.RuntimeOptions): DeleteLiveStreamTranscodeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteLiveStreamTranscode', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteLiveStreamTranscode(request: DeleteLiveStreamTranscodeRequest): DeleteLiveStreamTranscodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveStreamTranscodeWithOptions(request, runtime);
}

model DeleteMixStreamRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  mixStreamId?: string(name='MixStreamId'),
}

model DeleteMixStreamResponseBody = {
  mixStreamId?: string(name='MixStreamId'),
  requestId?: string(name='RequestId'),
}

model DeleteMixStreamResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMixStreamResponseBody(name='body'),
}

async function deleteMixStreamWithOptions(request: DeleteMixStreamRequest, runtime: Util.RuntimeOptions): DeleteMixStreamResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteMixStream', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteMixStream(request: DeleteMixStreamRequest): DeleteMixStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMixStreamWithOptions(request, runtime);
}

model DeleteMultiRateConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  app?: string(name='App'),
  groupId?: string(name='GroupId'),
  deleteAll?: string(name='DeleteAll'),
  templates?: string(name='Templates'),
}

model DeleteMultiRateConfigResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: int32(name='Code'),
}

model DeleteMultiRateConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMultiRateConfigResponseBody(name='body'),
}

async function deleteMultiRateConfigWithOptions(request: DeleteMultiRateConfigRequest, runtime: Util.RuntimeOptions): DeleteMultiRateConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteMultiRateConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteMultiRateConfig(request: DeleteMultiRateConfigRequest): DeleteMultiRateConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMultiRateConfigWithOptions(request, runtime);
}

model DeletePlaylistRequest {
  ownerId?: long(name='OwnerId'),
  programId?: string(name='ProgramId'),
}

model DeletePlaylistResponseBody = {
  requestId?: string(name='RequestId'),
  programId?: string(name='ProgramId'),
}

model DeletePlaylistResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePlaylistResponseBody(name='body'),
}

async function deletePlaylistWithOptions(request: DeletePlaylistRequest, runtime: Util.RuntimeOptions): DeletePlaylistResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeletePlaylist', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deletePlaylist(request: DeletePlaylistRequest): DeletePlaylistResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePlaylistWithOptions(request, runtime);
}

model DeletePlaylistItemsRequest {
  ownerId?: long(name='OwnerId'),
  programId?: string(name='ProgramId'),
  programItemIds?: string(name='ProgramItemIds'),
}

model DeletePlaylistItemsResponseBody = {
  requestId?: string(name='RequestId'),
  programId?: string(name='ProgramId'),
}

model DeletePlaylistItemsResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePlaylistItemsResponseBody(name='body'),
}

async function deletePlaylistItemsWithOptions(request: DeletePlaylistItemsRequest, runtime: Util.RuntimeOptions): DeletePlaylistItemsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeletePlaylistItems', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deletePlaylistItems(request: DeletePlaylistItemsRequest): DeletePlaylistItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePlaylistItemsWithOptions(request, runtime);
}

model DeleteRoomRequest {
  ownerId?: long(name='OwnerId'),
  appId?: string(name='AppId'),
  roomId?: string(name='RoomId'),
}

model DeleteRoomResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteRoomResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRoomResponseBody(name='body'),
}

async function deleteRoomWithOptions(request: DeleteRoomRequest, runtime: Util.RuntimeOptions): DeleteRoomResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteRoom', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteRoom(request: DeleteRoomRequest): DeleteRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRoomWithOptions(request, runtime);
}

model DeleteStudioLayoutRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  layoutId?: string(name='LayoutId'),
}

model DeleteStudioLayoutResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteStudioLayoutResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteStudioLayoutResponseBody(name='body'),
}

async function deleteStudioLayoutWithOptions(request: DeleteStudioLayoutRequest, runtime: Util.RuntimeOptions): DeleteStudioLayoutResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteStudioLayout', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteStudioLayout(request: DeleteStudioLayoutRequest): DeleteStudioLayoutResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteStudioLayoutWithOptions(request, runtime);
}

model DescribeBoardEventsRequest {
  ownerId?: long(name='OwnerId'),
  appId?: string(name='AppId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  boardId?: string(name='BoardId'),
}

model DescribeBoardEventsResponseBody = {
  requestId?: string(name='RequestId'),
  events?: [ 
    {
      eventId?: long(name='EventId'),
      data?: string(name='Data'),
      eventType?: int32(name='EventType'),
      userId?: int32(name='UserId'),
      timestamp?: long(name='Timestamp'),
    }
  ](name='Events'),
}

model DescribeBoardEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBoardEventsResponseBody(name='body'),
}

async function describeBoardEventsWithOptions(request: DescribeBoardEventsRequest, runtime: Util.RuntimeOptions): DescribeBoardEventsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBoardEvents', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBoardEvents(request: DescribeBoardEventsRequest): DescribeBoardEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBoardEventsWithOptions(request, runtime);
}

model DescribeBoardsRequest {
  ownerId?: long(name='OwnerId'),
  appId?: string(name='AppId'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
}

model DescribeBoardsResponseBody = {
  requestId?: string(name='RequestId'),
  boards?: [ 
    {
      boardId?: string(name='BoardId'),
      state?: int32(name='State'),
      userId?: string(name='UserId'),
      topic?: string(name='Topic'),
    }
  ](name='Boards'),
}

model DescribeBoardsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBoardsResponseBody(name='body'),
}

async function describeBoardsWithOptions(request: DescribeBoardsRequest, runtime: Util.RuntimeOptions): DescribeBoardsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBoards', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBoards(request: DescribeBoardsRequest): DescribeBoardsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBoardsWithOptions(request, runtime);
}

model DescribeBoardSnapshotRequest {
  ownerId?: long(name='OwnerId'),
  appId?: string(name='AppId'),
  boardId?: string(name='BoardId'),
}

model DescribeBoardSnapshotResponseBody = {
  snapshot?: {
    board?: {
      updateTimestamp?: long(name='UpdateTimestamp'),
      appUid?: string(name='AppUid'),
      boardId?: string(name='BoardId'),
      configs?: [ 
        {
          appUid?: string(name='AppUid'),
          data?: string(name='Data'),
        }
      ](name='Configs'),
      pages?: [ 
        {
          pageIndex?: int32(name='PageIndex'),
          elements?: [ 
            {
              updateTimestamp?: long(name='UpdateTimestamp'),
              data?: string(name='Data'),
              elementIndex?: string(name='ElementIndex'),
              elementType?: int32(name='ElementType'),
              ownerId?: string(name='OwnerId'),
            }
          ](name='Elements'),
        }
      ](name='Pages'),
      eventTimestamp?: long(name='EventTimestamp'),
      createTimestamp?: long(name='CreateTimestamp'),
    }(name='Board'),
  }(name='Snapshot'),
  requestId?: string(name='RequestId'),
}

model DescribeBoardSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBoardSnapshotResponseBody(name='body'),
}

async function describeBoardSnapshotWithOptions(request: DescribeBoardSnapshotRequest, runtime: Util.RuntimeOptions): DescribeBoardSnapshotResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBoardSnapshot', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBoardSnapshot(request: DescribeBoardSnapshotRequest): DescribeBoardSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBoardSnapshotWithOptions(request, runtime);
}

model DescribeCasterChannelsRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
}

model DescribeCasterChannelsResponseBody = {
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
  channels?: {
    channel?: [ 
    {
      rtmpUrl?: string(name='RtmpUrl'),
      channelId?: string(name='ChannelId'),
      resourceId?: string(name='ResourceId'),
      streamUrl?: string(name='StreamUrl'),
    }
  ](name='Channel')
  }(name='Channels'),
}

model DescribeCasterChannelsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCasterChannelsResponseBody(name='body'),
}

async function describeCasterChannelsWithOptions(request: DescribeCasterChannelsRequest, runtime: Util.RuntimeOptions): DescribeCasterChannelsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCasterChannels', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCasterChannels(request: DescribeCasterChannelsRequest): DescribeCasterChannelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCasterChannelsWithOptions(request, runtime);
}

model DescribeCasterComponentsRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  componentId?: string(name='ComponentId'),
}

model DescribeCasterComponentsResponseBody = {
  components?: {
    component?: [ 
    {
      textLayerContent?: {
        color?: string(name='Color'),
        borderColor?: string(name='BorderColor'),
        borderWidthNormalized?: float(name='BorderWidthNormalized'),
        text?: string(name='Text'),
        sizeNormalized?: float(name='SizeNormalized'),
        fontName?: string(name='FontName'),
      }(name='TextLayerContent'),
      effect?: string(name='Effect'),
      componentName?: string(name='ComponentName'),
      componentLayer?: {
        transparency?: int32(name='Transparency'),
        positionNormalizeds?: {
          position?: [ float ](name='Position')
        }(name='PositionNormalizeds'),
        heightNormalized?: float(name='HeightNormalized'),
        positionRefer?: string(name='PositionRefer'),
        widthNormalized?: float(name='WidthNormalized'),
      }(name='ComponentLayer'),
      imageLayerContent?: {
        materialId?: string(name='MaterialId'),
      }(name='ImageLayerContent'),
      componentType?: string(name='ComponentType'),
      locationId?: string(name='LocationId'),
      captionLayerContent?: {
        color?: string(name='Color'),
        wordSpaceNormalized?: float(name='WordSpaceNormalized'),
        borderWidthNormalized?: float(name='BorderWidthNormalized'),
        sourceLan?: string(name='SourceLan'),
        wordCountPerLine?: int32(name='WordCountPerLine'),
        targetLan?: string(name='TargetLan'),
        borderColor?: string(name='BorderColor'),
        locationId?: string(name='LocationId'),
        lineSpaceNormalized?: float(name='LineSpaceNormalized'),
        sizeNormalized?: float(name='SizeNormalized'),
        showSourceLan?: boolean(name='ShowSourceLan'),
        wordsCount?: int32(name='WordsCount'),
        fontName?: string(name='FontName'),
        ptsOffset?: int32(name='PtsOffset'),
      }(name='CaptionLayerContent'),
      componentId?: string(name='ComponentId'),
    }
  ](name='Component')
  }(name='Components'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model DescribeCasterComponentsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCasterComponentsResponseBody(name='body'),
}

async function describeCasterComponentsWithOptions(request: DescribeCasterComponentsRequest, runtime: Util.RuntimeOptions): DescribeCasterComponentsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCasterComponents', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCasterComponents(request: DescribeCasterComponentsRequest): DescribeCasterComponentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCasterComponentsWithOptions(request, runtime);
}

model DescribeCasterConfigRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
}

model DescribeCasterConfigResponseBody = {
  channelEnable?: int32(name='ChannelEnable'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  urgentMaterialId?: string(name='UrgentMaterialId'),
  transcodeConfig?: {
    casterTemplate?: string(name='CasterTemplate'),
    liveTemplateIds?: {
      locationId?: [ string ](name='LocationId')
    }(name='LiveTemplateIds'),
  }(name='TranscodeConfig'),
  programName?: string(name='ProgramName'),
  delay?: float(name='Delay'),
  callbackUrl?: string(name='CallbackUrl'),
  sideOutputUrl?: string(name='SideOutputUrl'),
  casterName?: string(name='CasterName'),
  programEffect?: int32(name='ProgramEffect'),
  casterId?: string(name='CasterId'),
  recordConfig?: {
    recordFormat?: {
      recordFormat?: [ 
      {
        cycleDuration?: int32(name='CycleDuration'),
        sliceOssObjectPrefix?: string(name='SliceOssObjectPrefix'),
        ossObjectPrefix?: string(name='OssObjectPrefix'),
        format?: string(name='Format'),
      }
    ](name='RecordFormat')
    }(name='RecordFormat'),
    ossBucket?: string(name='OssBucket'),
    ossEndpoint?: string(name='OssEndpoint'),
  }(name='RecordConfig'),
}

model DescribeCasterConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCasterConfigResponseBody(name='body'),
}

async function describeCasterConfigWithOptions(request: DescribeCasterConfigRequest, runtime: Util.RuntimeOptions): DescribeCasterConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCasterConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCasterConfig(request: DescribeCasterConfigRequest): DescribeCasterConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCasterConfigWithOptions(request, runtime);
}

model DescribeCasterLayoutsRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  layoutId?: string(name='LayoutId'),
}

model DescribeCasterLayoutsResponseBody = {
  requestId?: string(name='RequestId'),
  layouts?: {
    layout?: [ 
    {
      layoutId?: string(name='LayoutId'),
      audioLayers?: {
        audioLayer?: [ 
        {
          volumeRate?: float(name='VolumeRate'),
          fixedDelayDuration?: int32(name='FixedDelayDuration'),
          validChannel?: string(name='ValidChannel'),
        }
      ](name='AudioLayer')
      }(name='AudioLayers'),
      videoLayers?: {
        videoLayer?: [ 
        {
          fixedDelayDuration?: int32(name='FixedDelayDuration'),
          positionNormalizeds?: {
            position?: [ float ](name='Position')
          }(name='PositionNormalizeds'),
          heightNormalized?: float(name='HeightNormalized'),
          fillMode?: string(name='FillMode'),
          positionRefer?: string(name='PositionRefer'),
          widthNormalized?: float(name='WidthNormalized'),
        }
      ](name='VideoLayer')
      }(name='VideoLayers'),
      mixList?: {
        locationId?: [ string ](name='LocationId')
      }(name='MixList'),
      blendList?: {
        locationId?: [ string ](name='LocationId')
      }(name='BlendList'),
    }
  ](name='Layout')
  }(name='Layouts'),
  total?: int32(name='Total'),
}

model DescribeCasterLayoutsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCasterLayoutsResponseBody(name='body'),
}

async function describeCasterLayoutsWithOptions(request: DescribeCasterLayoutsRequest, runtime: Util.RuntimeOptions): DescribeCasterLayoutsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCasterLayouts', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCasterLayouts(request: DescribeCasterLayoutsRequest): DescribeCasterLayoutsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCasterLayoutsWithOptions(request, runtime);
}

model DescribeCasterProgramRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  episodeId?: string(name='EpisodeId'),
  episodeType?: string(name='EpisodeType'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  status?: int32(name='Status'),
}

model DescribeCasterProgramResponseBody = {
  requestId?: string(name='RequestId'),
  programEffect?: int32(name='ProgramEffect'),
  total?: int32(name='Total'),
  episodes?: {
    episode?: [ 
    {
      status?: int32(name='Status'),
      endTime?: string(name='EndTime'),
      startTime?: string(name='StartTime'),
      episodeName?: string(name='EpisodeName'),
      episodeType?: string(name='EpisodeType'),
      episodeId?: string(name='EpisodeId'),
      resourceId?: string(name='ResourceId'),
      switchType?: string(name='SwitchType'),
      componentIds?: {
        componentId?: [ string ](name='ComponentId')
      }(name='ComponentIds'),
    }
  ](name='Episode')
  }(name='Episodes'),
  programName?: string(name='ProgramName'),
  casterId?: string(name='CasterId'),
}

model DescribeCasterProgramResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCasterProgramResponseBody(name='body'),
}

async function describeCasterProgramWithOptions(request: DescribeCasterProgramRequest, runtime: Util.RuntimeOptions): DescribeCasterProgramResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCasterProgram', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCasterProgram(request: DescribeCasterProgramRequest): DescribeCasterProgramResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCasterProgramWithOptions(request, runtime);
}

model DescribeCasterRtcInfoRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
}

model DescribeCasterRtcInfoResponseBody = {
  requestId?: string(name='RequestId'),
  authToken?: string(name='AuthToken'),
  casterId?: string(name='CasterId'),
}

model DescribeCasterRtcInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCasterRtcInfoResponseBody(name='body'),
}

async function describeCasterRtcInfoWithOptions(request: DescribeCasterRtcInfoRequest, runtime: Util.RuntimeOptions): DescribeCasterRtcInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCasterRtcInfo', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCasterRtcInfo(request: DescribeCasterRtcInfoRequest): DescribeCasterRtcInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCasterRtcInfoWithOptions(request, runtime);
}

model DescribeCastersRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  casterName?: string(name='CasterName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  status?: int32(name='Status'),
}

model DescribeCastersResponseBody = {
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
  casterList?: {
    caster?: [ 
    {
      status?: int32(name='Status'),
      startTime?: string(name='StartTime'),
      purchaseTime?: string(name='PurchaseTime'),
      expireTime?: string(name='ExpireTime'),
      createTime?: string(name='CreateTime'),
      casterTemplate?: string(name='CasterTemplate'),
      chargeType?: string(name='ChargeType'),
      casterName?: string(name='CasterName'),
      normType?: int32(name='NormType'),
      casterId?: string(name='CasterId'),
      channelEnable?: int32(name='ChannelEnable'),
    }
  ](name='Caster')
  }(name='CasterList'),
}

model DescribeCastersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCastersResponseBody(name='body'),
}

async function describeCastersWithOptions(request: DescribeCastersRequest, runtime: Util.RuntimeOptions): DescribeCastersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCasters', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCasters(request: DescribeCastersRequest): DescribeCastersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCastersWithOptions(request, runtime);
}

model DescribeCasterSceneAudioRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  sceneId?: string(name='SceneId'),
}

model DescribeCasterSceneAudioResponseBody = {
  mixList?: {
    locationId?: [ string ](name='LocationId')
  }(name='MixList'),
  requestId?: string(name='RequestId'),
  audioLayers?: {
    audioLayer?: [ 
    {
      volumeRate?: float(name='VolumeRate'),
      fixedDelayDuration?: int32(name='FixedDelayDuration'),
      validChannel?: string(name='ValidChannel'),
    }
  ](name='AudioLayer')
  }(name='AudioLayers'),
  casterId?: string(name='CasterId'),
  followEnable?: int32(name='FollowEnable'),
}

model DescribeCasterSceneAudioResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCasterSceneAudioResponseBody(name='body'),
}

async function describeCasterSceneAudioWithOptions(request: DescribeCasterSceneAudioRequest, runtime: Util.RuntimeOptions): DescribeCasterSceneAudioResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCasterSceneAudio', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCasterSceneAudio(request: DescribeCasterSceneAudioRequest): DescribeCasterSceneAudioResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCasterSceneAudioWithOptions(request, runtime);
}

model DescribeCasterScenesRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  sceneId?: string(name='SceneId'),
}

model DescribeCasterScenesResponseBody = {
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
  sceneList?: {
    scene?: [ 
    {
      status?: int32(name='Status'),
      layoutId?: string(name='LayoutId'),
      outputType?: string(name='OutputType'),
      streamInfos?: {
        streamInfo?: [ 
        {
          videoFormat?: string(name='VideoFormat'),
          outputStreamUrl?: string(name='OutputStreamUrl'),
          transcodeConfig?: string(name='TranscodeConfig'),
        }
      ](name='StreamInfo')
      }(name='StreamInfos'),
      sceneId?: string(name='SceneId'),
      sceneName?: string(name='SceneName'),
      componentIds?: {
        componentId?: [ string ](name='componentId')
      }(name='ComponentIds'),
      streamUrl?: string(name='StreamUrl'),
    }
  ](name='Scene')
  }(name='SceneList'),
}

model DescribeCasterScenesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCasterScenesResponseBody(name='body'),
}

async function describeCasterScenesWithOptions(request: DescribeCasterScenesRequest, runtime: Util.RuntimeOptions): DescribeCasterScenesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCasterScenes', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCasterScenes(request: DescribeCasterScenesRequest): DescribeCasterScenesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCasterScenesWithOptions(request, runtime);
}

model DescribeCasterStreamUrlRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
}

model DescribeCasterStreamUrlResponseBody = {
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
  casterStreams?: {
    casterStream?: [ 
    {
      rtmpUrl?: string(name='RtmpUrl'),
      outputType?: int32(name='OutputType'),
      streamInfos?: {
        streamInfo?: [ 
        {
          videoFormat?: string(name='VideoFormat'),
          outputStreamUrl?: string(name='OutputStreamUrl'),
          transcodeConfig?: string(name='TranscodeConfig'),
        }
      ](name='StreamInfo')
      }(name='StreamInfos'),
      sceneId?: string(name='SceneId'),
      streamUrl?: string(name='StreamUrl'),
    }
  ](name='CasterStream')
  }(name='CasterStreams'),
  casterId?: string(name='CasterId'),
}

model DescribeCasterStreamUrlResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCasterStreamUrlResponseBody(name='body'),
}

async function describeCasterStreamUrlWithOptions(request: DescribeCasterStreamUrlRequest, runtime: Util.RuntimeOptions): DescribeCasterStreamUrlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCasterStreamUrl', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCasterStreamUrl(request: DescribeCasterStreamUrlRequest): DescribeCasterStreamUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCasterStreamUrlWithOptions(request, runtime);
}

model DescribeCasterSyncGroupRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
}

model DescribeCasterSyncGroupResponseBody = {
  requestId?: string(name='RequestId'),
  syncGroups?: {
    syncGroup?: [ 
    {
      hostResourceId?: string(name='HostResourceId'),
      resourceIds?: {
        resourceId?: [ string ](name='ResourceId')
      }(name='ResourceIds'),
      mode?: int32(name='Mode'),
    }
  ](name='SyncGroup')
  }(name='SyncGroups'),
  casterId?: string(name='CasterId'),
}

model DescribeCasterSyncGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCasterSyncGroupResponseBody(name='body'),
}

async function describeCasterSyncGroupWithOptions(request: DescribeCasterSyncGroupRequest, runtime: Util.RuntimeOptions): DescribeCasterSyncGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCasterSyncGroup', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCasterSyncGroup(request: DescribeCasterSyncGroupRequest): DescribeCasterSyncGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCasterSyncGroupWithOptions(request, runtime);
}

model DescribeCasterVideoResourcesRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
}

model DescribeCasterVideoResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
  videoResources?: {
    videoResource?: [ 
    {
      endOffset?: int32(name='EndOffset'),
      beginOffset?: int32(name='BeginOffset'),
      ptsCallbackInterval?: int32(name='PtsCallbackInterval'),
      materialId?: string(name='MaterialId'),
      locationId?: string(name='LocationId'),
      liveStreamUrl?: string(name='LiveStreamUrl'),
      vodUrl?: string(name='VodUrl'),
      resourceId?: string(name='ResourceId'),
      repeatNum?: int32(name='RepeatNum'),
      resourceName?: string(name='ResourceName'),
    }
  ](name='VideoResource')
  }(name='VideoResources'),
}

model DescribeCasterVideoResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCasterVideoResourcesResponseBody(name='body'),
}

async function describeCasterVideoResourcesWithOptions(request: DescribeCasterVideoResourcesRequest, runtime: Util.RuntimeOptions): DescribeCasterVideoResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCasterVideoResources', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCasterVideoResources(request: DescribeCasterVideoResourcesRequest): DescribeCasterVideoResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCasterVideoResourcesWithOptions(request, runtime);
}

model DescribeDomainUsageDataRequest {
  ownerId?: long(name='OwnerId'),
  type?: string(name='Type'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  area?: string(name='Area'),
  field?: string(name='Field'),
  interval?: string(name='Interval'),
}

model DescribeDomainUsageDataResponseBody = {
  usageDataPerInterval?: {
    dataModule?: [ 
    {
      value?: string(name='Value'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='UsageDataPerInterval'),
  field?: string(name='Field'),
  area?: string(name='Area'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  dataInterval?: string(name='DataInterval'),
}

model DescribeDomainUsageDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainUsageDataResponseBody(name='body'),
}

async function describeDomainUsageDataWithOptions(request: DescribeDomainUsageDataRequest, runtime: Util.RuntimeOptions): DescribeDomainUsageDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainUsageData', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainUsageData(request: DescribeDomainUsageDataRequest): DescribeDomainUsageDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainUsageDataWithOptions(request, runtime);
}

model DescribeDRMCertListRequest {
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDRMCertListResponseBody = {
  DRMCertInfoListList?: {
    certInfo?: [ 
    {
      description?: string(name='Description'),
      privateKey?: string(name='PrivateKey'),
      servCert?: string(name='ServCert'),
      certName?: string(name='CertName'),
      passphrase?: string(name='Passphrase'),
      certId?: string(name='CertId'),
      ask?: string(name='Ask'),
    }
  ](name='CertInfo')
  }(name='DRMCertInfoListList'),
  requestId?: string(name='RequestId'),
}

model DescribeDRMCertListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDRMCertListResponseBody(name='body'),
}

async function describeDRMCertListWithOptions(request: DescribeDRMCertListRequest, runtime: Util.RuntimeOptions): DescribeDRMCertListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDRMCertList', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDRMCertList(request: DescribeDRMCertListRequest): DescribeDRMCertListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDRMCertListWithOptions(request, runtime);
}

model DescribeForbidPushStreamRoomListRequest {
  ownerId?: long(name='OwnerId'),
  appId?: string(name='AppId'),
  order?: string(name='Order'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
}

model DescribeForbidPushStreamRoomListResponseBody = {
  totalNum?: int32(name='TotalNum'),
  totalPage?: int32(name='TotalPage'),
  requestId?: string(name='RequestId'),
  roomList?: [ 
    {
      opEndTime?: string(name='OpEndTime'),
      anchorId?: string(name='AnchorId'),
      opStartTime?: string(name='OpStartTime'),
      roomId?: string(name='RoomId'),
    }
  ](name='RoomList'),
}

model DescribeForbidPushStreamRoomListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeForbidPushStreamRoomListResponseBody(name='body'),
}

async function describeForbidPushStreamRoomListWithOptions(request: DescribeForbidPushStreamRoomListRequest, runtime: Util.RuntimeOptions): DescribeForbidPushStreamRoomListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeForbidPushStreamRoomList', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeForbidPushStreamRoomList(request: DescribeForbidPushStreamRoomListRequest): DescribeForbidPushStreamRoomListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeForbidPushStreamRoomListWithOptions(request, runtime);
}

model DescribeHlsLiveStreamRealTimeBpsDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  time?: string(name='Time'),
}

model DescribeHlsLiveStreamRealTimeBpsDataResponseBody = {
  requestId?: string(name='RequestId'),
  usageData?: [ 
    {
      streamInfos?: [ 
        {
          streamName?: string(name='StreamName'),
          infos?: [ 
            {
              downFlow?: float(name='DownFlow'),
              online?: float(name='Online'),
              rate?: string(name='Rate'),
            }
          ](name='Infos'),
        }
      ](name='StreamInfos'),
      domainName?: string(name='DomainName'),
    }
  ](name='UsageData'),
  time?: string(name='Time'),
}

model DescribeHlsLiveStreamRealTimeBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHlsLiveStreamRealTimeBpsDataResponseBody(name='body'),
}

async function describeHlsLiveStreamRealTimeBpsDataWithOptions(request: DescribeHlsLiveStreamRealTimeBpsDataRequest, runtime: Util.RuntimeOptions): DescribeHlsLiveStreamRealTimeBpsDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeHlsLiveStreamRealTimeBpsData', '2016-11-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeHlsLiveStreamRealTimeBpsData(request: DescribeHlsLiveStreamRealTimeBpsDataRequest): DescribeHlsLiveStreamRealTimeBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHlsLiveStreamRealTimeBpsDataWithOptions(request, runtime);
}

model DescribeHtmlResourceRequest {
  ownerId?: long(name='OwnerId'),
  htmlResourceId?: string(name='HtmlResourceId'),
  htmlUrl?: string(name='htmlUrl'),
  casterId?: string(name='CasterId'),
}

model DescribeHtmlResourceResponseBody = {
  requestId?: string(name='RequestId'),
  htmlResource?: {
    htmlUrl?: string(name='HtmlUrl'),
    casterId?: string(name='CasterId'),
    streamId?: string(name='StreamId'),
    config?: string(name='Config'),
    htmlResourceId?: string(name='HtmlResourceId'),
    htmlContent?: string(name='HtmlContent'),
  }(name='HtmlResource'),
}

model DescribeHtmlResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHtmlResourceResponseBody(name='body'),
}

async function describeHtmlResourceWithOptions(request: DescribeHtmlResourceRequest, runtime: Util.RuntimeOptions): DescribeHtmlResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeHtmlResource', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeHtmlResource(request: DescribeHtmlResourceRequest): DescribeHtmlResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHtmlResourceWithOptions(request, runtime);
}

model DescribeLiveAsrConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
}

model DescribeLiveAsrConfigResponseBody = {
  requestId?: string(name='RequestId'),
  liveAsrConfig?: {
    liveAsrConfigList?: [ 
    {
      appName?: string(name='AppName'),
      mnsRegion?: string(name='MnsRegion'),
      streamName?: string(name='StreamName'),
      httpCallbackURL?: string(name='HttpCallbackURL'),
      domainName?: int32(name='DomainName'),
      period?: int32(name='Period'),
      mnsTopic?: string(name='MnsTopic'),
    }
  ](name='LiveAsrConfigList')
  }(name='LiveAsrConfig'),
}

model DescribeLiveAsrConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveAsrConfigResponseBody(name='body'),
}

async function describeLiveAsrConfigWithOptions(request: DescribeLiveAsrConfigRequest, runtime: Util.RuntimeOptions): DescribeLiveAsrConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveAsrConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveAsrConfig(request: DescribeLiveAsrConfigRequest): DescribeLiveAsrConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveAsrConfigWithOptions(request, runtime);
}

model DescribeLiveAudioAuditConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
}

model DescribeLiveAudioAuditConfigResponseBody = {
  requestId?: string(name='RequestId'),
  liveAudioAuditConfigList?: {
    liveAudioAuditConfig?: [ 
    {
      appName?: string(name='AppName'),
      streamName?: string(name='StreamName'),
      scenes?: {
        scene?: [ string ](name='scene')
      }(name='Scenes'),
      domainName?: string(name='DomainName'),
      bizType?: string(name='BizType'),
    }
  ](name='LiveAudioAuditConfig')
  }(name='LiveAudioAuditConfigList'),
}

model DescribeLiveAudioAuditConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveAudioAuditConfigResponseBody(name='body'),
}

async function describeLiveAudioAuditConfigWithOptions(request: DescribeLiveAudioAuditConfigRequest, runtime: Util.RuntimeOptions): DescribeLiveAudioAuditConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveAudioAuditConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveAudioAuditConfig(request: DescribeLiveAudioAuditConfigRequest): DescribeLiveAudioAuditConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveAudioAuditConfigWithOptions(request, runtime);
}

model DescribeLiveAudioAuditNotifyConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model DescribeLiveAudioAuditNotifyConfigResponseBody = {
  requestId?: string(name='RequestId'),
  liveAudioAuditNotifyConfigList?: {
    liveAudioAuditNotifyConfig?: [ 
    {
      callbackTemplate?: string(name='CallbackTemplate'),
      domainName?: string(name='DomainName'),
      callback?: string(name='Callback'),
    }
  ](name='LiveAudioAuditNotifyConfig')
  }(name='LiveAudioAuditNotifyConfigList'),
}

model DescribeLiveAudioAuditNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveAudioAuditNotifyConfigResponseBody(name='body'),
}

async function describeLiveAudioAuditNotifyConfigWithOptions(request: DescribeLiveAudioAuditNotifyConfigRequest, runtime: Util.RuntimeOptions): DescribeLiveAudioAuditNotifyConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveAudioAuditNotifyConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveAudioAuditNotifyConfig(request: DescribeLiveAudioAuditNotifyConfigRequest): DescribeLiveAudioAuditNotifyConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveAudioAuditNotifyConfigWithOptions(request, runtime);
}

model DescribeLiveCertificateDetailRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  certName?: string(name='CertName'),
}

model DescribeLiveCertificateDetailResponseBody = {
  requestId?: string(name='RequestId'),
  certId?: long(name='CertId'),
  certName?: string(name='CertName'),
  cert?: string(name='Cert'),
}

model DescribeLiveCertificateDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveCertificateDetailResponseBody(name='body'),
}

async function describeLiveCertificateDetailWithOptions(request: DescribeLiveCertificateDetailRequest, runtime: Util.RuntimeOptions): DescribeLiveCertificateDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveCertificateDetail', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveCertificateDetail(request: DescribeLiveCertificateDetailRequest): DescribeLiveCertificateDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveCertificateDetailWithOptions(request, runtime);
}

model DescribeLiveCertificateListRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
}

model DescribeLiveCertificateListResponseBody = {
  requestId?: string(name='RequestId'),
  certificateListModel?: {
    certList?: {
      cert?: [ 
      {
        lastTime?: long(name='LastTime'),
        fingerprint?: string(name='Fingerprint'),
        certName?: string(name='CertName'),
        issuer?: string(name='Issuer'),
        certId?: long(name='CertId'),
        common?: string(name='Common'),
      }
    ](name='Cert')
    }(name='CertList'),
    count?: int32(name='Count'),
  }(name='CertificateListModel'),
}

model DescribeLiveCertificateListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveCertificateListResponseBody(name='body'),
}

async function describeLiveCertificateListWithOptions(request: DescribeLiveCertificateListRequest, runtime: Util.RuntimeOptions): DescribeLiveCertificateListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveCertificateList', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveCertificateList(request: DescribeLiveCertificateListRequest): DescribeLiveCertificateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveCertificateListWithOptions(request, runtime);
}

model DescribeLiveDetectNotifyConfigRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model DescribeLiveDetectNotifyConfigResponseBody = {
  requestId?: string(name='RequestId'),
  liveDetectNotifyConfig?: {
    notifyUrl?: string(name='NotifyUrl'),
    domainName?: string(name='DomainName'),
  }(name='LiveDetectNotifyConfig'),
}

model DescribeLiveDetectNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDetectNotifyConfigResponseBody(name='body'),
}

async function describeLiveDetectNotifyConfigWithOptions(request: DescribeLiveDetectNotifyConfigRequest, runtime: Util.RuntimeOptions): DescribeLiveDetectNotifyConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveDetectNotifyConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveDetectNotifyConfig(request: DescribeLiveDetectNotifyConfigRequest): DescribeLiveDetectNotifyConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDetectNotifyConfigWithOptions(request, runtime);
}

model DescribeLiveDetectPornDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  app?: string(name='App'),
  stream?: string(name='Stream'),
  fee?: string(name='Fee'),
  scene?: string(name='Scene'),
  region?: string(name='Region'),
  splitBy?: string(name='SplitBy'),
}

model DescribeLiveDetectPornDataResponseBody = {
  requestId?: string(name='RequestId'),
  detectPornData?: {
    dataModule?: [ 
    {
      domain?: string(name='Domain'),
      region?: string(name='Region'),
      app?: string(name='App'),
      stream?: string(name='Stream'),
      timeStamp?: string(name='TimeStamp'),
      count?: long(name='Count'),
      scene?: string(name='Scene'),
      fee?: string(name='Fee'),
    }
  ](name='DataModule')
  }(name='DetectPornData'),
}

model DescribeLiveDetectPornDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDetectPornDataResponseBody(name='body'),
}

async function describeLiveDetectPornDataWithOptions(request: DescribeLiveDetectPornDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDetectPornDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveDetectPornData', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveDetectPornData(request: DescribeLiveDetectPornDataRequest): DescribeLiveDetectPornDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDetectPornDataWithOptions(request, runtime);
}

model DescribeLiveDomainBpsDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeLiveDomainBpsDataResponseBody = {
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  dataInterval?: string(name='DataInterval'),
  bpsDataPerInterval?: {
    dataModule?: [ 
    {
      httpsBpsValue?: string(name='HttpsBpsValue'),
      bpsValue?: string(name='BpsValue'),
      timeStamp?: string(name='TimeStamp'),
      httpBpsValue?: string(name='HttpBpsValue'),
    }
  ](name='DataModule')
  }(name='BpsDataPerInterval'),
}

model DescribeLiveDomainBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainBpsDataResponseBody(name='body'),
}

async function describeLiveDomainBpsDataWithOptions(request: DescribeLiveDomainBpsDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainBpsDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveDomainBpsData', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveDomainBpsData(request: DescribeLiveDomainBpsDataRequest): DescribeLiveDomainBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainBpsDataWithOptions(request, runtime);
}

model DescribeLiveDomainBpsDataByTimeStampRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  timePoint?: string(name='TimePoint'),
  ispNames?: string(name='IspNames'),
  locationNames?: string(name='LocationNames'),
}

model DescribeLiveDomainBpsDataByTimeStampResponseBody = {
  bpsDataList?: {
    bpsDataModel?: [ 
    {
      locationName?: string(name='LocationName'),
      timeStamp?: string(name='TimeStamp'),
      ispName?: string(name='IspName'),
      bps?: long(name='Bps'),
    }
  ](name='BpsDataModel')
  }(name='BpsDataList'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  timeStamp?: string(name='TimeStamp'),
}

model DescribeLiveDomainBpsDataByTimeStampResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainBpsDataByTimeStampResponseBody(name='body'),
}

async function describeLiveDomainBpsDataByTimeStampWithOptions(request: DescribeLiveDomainBpsDataByTimeStampRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainBpsDataByTimeStampResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveDomainBpsDataByTimeStamp', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveDomainBpsDataByTimeStamp(request: DescribeLiveDomainBpsDataByTimeStampRequest): DescribeLiveDomainBpsDataByTimeStampResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainBpsDataByTimeStampWithOptions(request, runtime);
}

model DescribeLiveDomainCertificateInfoRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model DescribeLiveDomainCertificateInfoResponseBody = {
  certInfos?: {
    certInfo?: [ 
    {
      status?: string(name='Status'),
      certLife?: string(name='CertLife'),
      certExpireTime?: string(name='CertExpireTime'),
      SSLPub?: string(name='SSLPub'),
      SSLProtocol?: string(name='SSLProtocol'),
      certType?: string(name='CertType'),
      certDomainName?: string(name='CertDomainName'),
      certName?: string(name='CertName'),
      certOrg?: string(name='CertOrg'),
      domainName?: string(name='DomainName'),
    }
  ](name='CertInfo')
  }(name='CertInfos'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveDomainCertificateInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainCertificateInfoResponseBody(name='body'),
}

async function describeLiveDomainCertificateInfoWithOptions(request: DescribeLiveDomainCertificateInfoRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainCertificateInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveDomainCertificateInfo', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveDomainCertificateInfo(request: DescribeLiveDomainCertificateInfoRequest): DescribeLiveDomainCertificateInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainCertificateInfoWithOptions(request, runtime);
}

model DescribeLiveDomainConfigsRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  functionNames?: string(name='FunctionNames'),
}

model DescribeLiveDomainConfigsResponseBody = {
  requestId?: string(name='RequestId'),
  domainConfigs?: {
    domainConfig?: [ 
    {
      status?: string(name='Status'),
      configId?: string(name='ConfigId'),
      functionName?: string(name='FunctionName'),
      functionArgs?: {
        functionArg?: [ 
        {
          argName?: string(name='ArgName'),
          argValue?: string(name='ArgValue'),
        }
      ](name='FunctionArg')
      }(name='FunctionArgs'),
    }
  ](name='DomainConfig')
  }(name='DomainConfigs'),
}

model DescribeLiveDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainConfigsResponseBody(name='body'),
}

async function describeLiveDomainConfigsWithOptions(request: DescribeLiveDomainConfigsRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainConfigsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveDomainConfigs', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveDomainConfigs(request: DescribeLiveDomainConfigsRequest): DescribeLiveDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainConfigsWithOptions(request, runtime);
}

model DescribeLiveDomainDetailRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
}

model DescribeLiveDomainDetailResponseBody = {
  domainDetail?: {
    SSLPub?: string(name='SSLPub'),
    gmtModified?: string(name='GmtModified'),
    domainName?: string(name='DomainName'),
    gmtCreated?: string(name='GmtCreated'),
    liveDomainType?: string(name='LiveDomainType'),
    description?: string(name='Description'),
    SSLProtocol?: string(name='SSLProtocol'),
    region?: string(name='Region'),
    certName?: string(name='CertName'),
    scope?: string(name='Scope'),
    cname?: string(name='Cname'),
    domainStatus?: string(name='DomainStatus'),
  }(name='DomainDetail'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainDetailResponseBody(name='body'),
}

async function describeLiveDomainDetailWithOptions(request: DescribeLiveDomainDetailRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveDomainDetail', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveDomainDetail(request: DescribeLiveDomainDetailRequest): DescribeLiveDomainDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainDetailWithOptions(request, runtime);
}

model DescribeLiveDomainFrameRateAndBitRateDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  queryTime?: string(name='QueryTime'),
}

model DescribeLiveDomainFrameRateAndBitRateDataResponseBody = {
  requestId?: string(name='RequestId'),
  frameRateAndBitRateInfos?: {
    frameRateAndBitRateInfo?: [ 
    {
      audioFrameRate?: float(name='AudioFrameRate'),
      videoFrameRate?: float(name='VideoFrameRate'),
      streamUrl?: string(name='StreamUrl'),
      bitRate?: float(name='BitRate'),
    }
  ](name='FrameRateAndBitRateInfo')
  }(name='FrameRateAndBitRateInfos'),
}

model DescribeLiveDomainFrameRateAndBitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainFrameRateAndBitRateDataResponseBody(name='body'),
}

async function describeLiveDomainFrameRateAndBitRateDataWithOptions(request: DescribeLiveDomainFrameRateAndBitRateDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainFrameRateAndBitRateDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveDomainFrameRateAndBitRateData', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveDomainFrameRateAndBitRateData(request: DescribeLiveDomainFrameRateAndBitRateDataRequest): DescribeLiveDomainFrameRateAndBitRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainFrameRateAndBitRateDataWithOptions(request, runtime);
}

model DescribeLiveDomainLimitRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  liveapiRequestFrom?: string(name='LiveapiRequestFrom'),
}

model DescribeLiveDomainLimitResponseBody = {
  requestId?: string(name='RequestId'),
  liveDomainLimitList?: {
    liveDomainLimit?: [ 
    {
      limitTranscodeNum?: int32(name='LimitTranscodeNum'),
      limitNum?: int32(name='LimitNum'),
      domainName?: string(name='DomainName'),
    }
  ](name='LiveDomainLimit')
  }(name='LiveDomainLimitList'),
}

model DescribeLiveDomainLimitResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainLimitResponseBody(name='body'),
}

async function describeLiveDomainLimitWithOptions(request: DescribeLiveDomainLimitRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainLimitResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveDomainLimit', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveDomainLimit(request: DescribeLiveDomainLimitRequest): DescribeLiveDomainLimitResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainLimitWithOptions(request, runtime);
}

model DescribeLiveDomainMappingRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model DescribeLiveDomainMappingResponseBody = {
  requestId?: string(name='RequestId'),
  liveDomainModels?: {
    liveDomainModel?: [ 
    {
      type?: string(name='Type'),
      domainName?: string(name='DomainName'),
    }
  ](name='LiveDomainModel')
  }(name='LiveDomainModels'),
}

model DescribeLiveDomainMappingResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainMappingResponseBody(name='body'),
}

async function describeLiveDomainMappingWithOptions(request: DescribeLiveDomainMappingRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainMappingResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeLiveDomainMapping', '2016-11-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeLiveDomainMapping(request: DescribeLiveDomainMappingRequest): DescribeLiveDomainMappingResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainMappingWithOptions(request, runtime);
}

model DescribeLiveDomainOnlineUserNumRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  queryTime?: string(name='QueryTime'),
}

model DescribeLiveDomainOnlineUserNumResponseBody = {
  streamCount?: int32(name='StreamCount'),
  onlineUserInfo?: {
    liveStreamOnlineUserNumInfo?: [ 
    {
      streamName?: string(name='StreamName'),
      infos?: {
        info?: [ 
        {
          transcodeTemplate?: string(name='TranscodeTemplate'),
          userNumber?: long(name='UserNumber'),
        }
      ](name='Info')
      }(name='Infos'),
    }
  ](name='LiveStreamOnlineUserNumInfo')
  }(name='OnlineUserInfo'),
  requestId?: string(name='RequestId'),
  userCount?: int32(name='UserCount'),
}

model DescribeLiveDomainOnlineUserNumResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainOnlineUserNumResponseBody(name='body'),
}

async function describeLiveDomainOnlineUserNumWithOptions(request: DescribeLiveDomainOnlineUserNumRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainOnlineUserNumResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveDomainOnlineUserNum', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveDomainOnlineUserNum(request: DescribeLiveDomainOnlineUserNumRequest): DescribeLiveDomainOnlineUserNumResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainOnlineUserNumWithOptions(request, runtime);
}

model DescribeLiveDomainPushBpsDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeLiveDomainPushBpsDataResponseBody = {
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  dataInterval?: string(name='DataInterval'),
  bpsDataPerInterval?: {
    dataModule?: [ 
    {
      bpsValue?: string(name='BpsValue'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='BpsDataPerInterval'),
}

model DescribeLiveDomainPushBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainPushBpsDataResponseBody(name='body'),
}

async function describeLiveDomainPushBpsDataWithOptions(request: DescribeLiveDomainPushBpsDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainPushBpsDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveDomainPushBpsData', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveDomainPushBpsData(request: DescribeLiveDomainPushBpsDataRequest): DescribeLiveDomainPushBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainPushBpsDataWithOptions(request, runtime);
}

model DescribeLiveDomainPushTrafficDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeLiveDomainPushTrafficDataResponseBody = {
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  trafficDataPerInterval?: {
    dataModule?: [ 
    {
      trafficValue?: string(name='TrafficValue'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='TrafficDataPerInterval'),
  startTime?: string(name='StartTime'),
  dataInterval?: string(name='DataInterval'),
}

model DescribeLiveDomainPushTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainPushTrafficDataResponseBody(name='body'),
}

async function describeLiveDomainPushTrafficDataWithOptions(request: DescribeLiveDomainPushTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainPushTrafficDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveDomainPushTrafficData', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveDomainPushTrafficData(request: DescribeLiveDomainPushTrafficDataRequest): DescribeLiveDomainPushTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainPushTrafficDataWithOptions(request, runtime);
}

model DescribeLiveDomainPvUvDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeLiveDomainPvUvDataResponseBody = {
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  dataInterval?: string(name='DataInterval'),
  pvUvDataInfos?: {
    pvUvDataInfo?: [ 
    {
      PV?: string(name='PV'),
      timeStamp?: string(name='TimeStamp'),
      UV?: string(name='UV'),
    }
  ](name='PvUvDataInfo')
  }(name='PvUvDataInfos'),
}

model DescribeLiveDomainPvUvDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainPvUvDataResponseBody(name='body'),
}

async function describeLiveDomainPvUvDataWithOptions(request: DescribeLiveDomainPvUvDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainPvUvDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveDomainPvUvData', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveDomainPvUvData(request: DescribeLiveDomainPvUvDataRequest): DescribeLiveDomainPvUvDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainPvUvDataWithOptions(request, runtime);
}

model DescribeLiveDomainRealTimeBpsDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeLiveDomainRealTimeBpsDataResponseBody = {
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  dataInterval?: string(name='DataInterval'),
  realTimeBpsDataPerInterval?: {
    dataModule?: [ 
    {
      value?: string(name='Value'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='RealTimeBpsDataPerInterval'),
}

model DescribeLiveDomainRealTimeBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainRealTimeBpsDataResponseBody(name='body'),
}

async function describeLiveDomainRealTimeBpsDataWithOptions(request: DescribeLiveDomainRealTimeBpsDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainRealTimeBpsDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeLiveDomainRealTimeBpsData', '2016-11-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeLiveDomainRealTimeBpsData(request: DescribeLiveDomainRealTimeBpsDataRequest): DescribeLiveDomainRealTimeBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainRealTimeBpsDataWithOptions(request, runtime);
}

model DescribeLiveDomainRealTimeHttpCodeDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeLiveDomainRealTimeHttpCodeDataResponseBody = {
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  dataInterval?: string(name='DataInterval'),
  realTimeHttpCodeData?: {
    usageData?: [ 
    {
      value?: {
        realTimeCodeProportionData?: [ 
        {
          code?: string(name='Code'),
          proportion?: string(name='Proportion'),
          count?: string(name='Count'),
        }
      ](name='RealTimeCodeProportionData')
      }(name='Value'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='UsageData')
  }(name='RealTimeHttpCodeData'),
}

model DescribeLiveDomainRealTimeHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainRealTimeHttpCodeDataResponseBody(name='body'),
}

async function describeLiveDomainRealTimeHttpCodeDataWithOptions(request: DescribeLiveDomainRealTimeHttpCodeDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainRealTimeHttpCodeDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveDomainRealTimeHttpCodeData', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveDomainRealTimeHttpCodeData(request: DescribeLiveDomainRealTimeHttpCodeDataRequest): DescribeLiveDomainRealTimeHttpCodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainRealTimeHttpCodeDataWithOptions(request, runtime);
}

model DescribeLiveDomainRealtimeLogDeliveryRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model DescribeLiveDomainRealtimeLogDeliveryResponseBody = {
  status?: string(name='Status'),
  project?: string(name='Project'),
  requestId?: string(name='RequestId'),
  logstore?: string(name='Logstore'),
  region?: string(name='Region'),
}

model DescribeLiveDomainRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainRealtimeLogDeliveryResponseBody(name='body'),
}

async function describeLiveDomainRealtimeLogDeliveryWithOptions(request: DescribeLiveDomainRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeLiveDomainRealtimeLogDelivery', '2016-11-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeLiveDomainRealtimeLogDelivery(request: DescribeLiveDomainRealtimeLogDeliveryRequest): DescribeLiveDomainRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainRealtimeLogDeliveryWithOptions(request, runtime);
}

model DescribeLiveDomainRealTimeTrafficDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  endTime?: string(name='EndTime'),
}

model DescribeLiveDomainRealTimeTrafficDataResponseBody = {
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  realTimeTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      value?: string(name='Value'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='RealTimeTrafficDataPerInterval'),
  startTime?: string(name='StartTime'),
  dataInterval?: string(name='DataInterval'),
}

model DescribeLiveDomainRealTimeTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainRealTimeTrafficDataResponseBody(name='body'),
}

async function describeLiveDomainRealTimeTrafficDataWithOptions(request: DescribeLiveDomainRealTimeTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainRealTimeTrafficDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveDomainRealTimeTrafficData', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveDomainRealTimeTrafficData(request: DescribeLiveDomainRealTimeTrafficDataRequest): DescribeLiveDomainRealTimeTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainRealTimeTrafficDataWithOptions(request, runtime);
}

model DescribeLiveDomainRecordDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  recordType?: string(name='RecordType'),
}

model DescribeLiveDomainRecordDataResponseBody = {
  requestId?: string(name='RequestId'),
  recordDataInfos?: {
    recordDataInfo?: [ 
    {
      date?: string(name='Date'),
      total?: int32(name='Total'),
      detail?: {
        FLV?: int32(name='FLV'),
        TS?: int32(name='TS'),
        MP4?: int32(name='MP4'),
      }(name='Detail'),
    }
  ](name='RecordDataInfo')
  }(name='RecordDataInfos'),
}

model DescribeLiveDomainRecordDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainRecordDataResponseBody(name='body'),
}

async function describeLiveDomainRecordDataWithOptions(request: DescribeLiveDomainRecordDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainRecordDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveDomainRecordData', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveDomainRecordData(request: DescribeLiveDomainRecordDataRequest): DescribeLiveDomainRecordDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainRecordDataWithOptions(request, runtime);
}

model DescribeLiveDomainSnapshotDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeLiveDomainSnapshotDataResponseBody = {
  snapshotDataInfos?: {
    snapshotDataInfo?: [ 
    {
      date?: string(name='Date'),
      total?: int32(name='Total'),
    }
  ](name='SnapshotDataInfo')
  }(name='SnapshotDataInfos'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveDomainSnapshotDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainSnapshotDataResponseBody(name='body'),
}

async function describeLiveDomainSnapshotDataWithOptions(request: DescribeLiveDomainSnapshotDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainSnapshotDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveDomainSnapshotData', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveDomainSnapshotData(request: DescribeLiveDomainSnapshotDataRequest): DescribeLiveDomainSnapshotDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainSnapshotDataWithOptions(request, runtime);
}

model DescribeLiveDomainStreamTranscodeDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  split?: string(name='Split'),
}

model DescribeLiveDomainStreamTranscodeDataResponseBody = {
  requestId?: string(name='RequestId'),
  transcodeDataList?: {
    transcodeData?: [ 
    {
      tanscodeType?: string(name='TanscodeType'),
      domain?: string(name='Domain'),
      region?: string(name='Region'),
      duration?: int32(name='Duration'),
      timeStamp?: string(name='TimeStamp'),
      fps?: string(name='Fps'),
      resolution?: string(name='Resolution'),
    }
  ](name='TranscodeData')
  }(name='TranscodeDataList'),
}

model DescribeLiveDomainStreamTranscodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainStreamTranscodeDataResponseBody(name='body'),
}

async function describeLiveDomainStreamTranscodeDataWithOptions(request: DescribeLiveDomainStreamTranscodeDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainStreamTranscodeDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveDomainStreamTranscodeData', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveDomainStreamTranscodeData(request: DescribeLiveDomainStreamTranscodeDataRequest): DescribeLiveDomainStreamTranscodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainStreamTranscodeDataWithOptions(request, runtime);
}

model DescribeLiveDomainTimeShiftDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
}

model DescribeLiveDomainTimeShiftDataResponseBody = {
  timeShiftData?: {
    dataModule?: [ 
    {
      type?: string(name='Type'),
      size?: string(name='Size'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='TimeShiftData'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveDomainTimeShiftDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainTimeShiftDataResponseBody(name='body'),
}

async function describeLiveDomainTimeShiftDataWithOptions(request: DescribeLiveDomainTimeShiftDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainTimeShiftDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveDomainTimeShiftData', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveDomainTimeShiftData(request: DescribeLiveDomainTimeShiftDataRequest): DescribeLiveDomainTimeShiftDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainTimeShiftDataWithOptions(request, runtime);
}

model DescribeLiveDomainTrafficDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeLiveDomainTrafficDataResponseBody = {
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  trafficDataPerInterval?: {
    dataModule?: [ 
    {
      trafficValue?: string(name='TrafficValue'),
      httpTrafficValue?: string(name='HttpTrafficValue'),
      httpsTrafficValue?: string(name='HttpsTrafficValue'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='TrafficDataPerInterval'),
  startTime?: string(name='StartTime'),
  dataInterval?: string(name='DataInterval'),
}

model DescribeLiveDomainTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainTrafficDataResponseBody(name='body'),
}

async function describeLiveDomainTrafficDataWithOptions(request: DescribeLiveDomainTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainTrafficDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveDomainTrafficData', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveDomainTrafficData(request: DescribeLiveDomainTrafficDataRequest): DescribeLiveDomainTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainTrafficDataWithOptions(request, runtime);
}

model DescribeLiveDomainTranscodeDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeLiveDomainTranscodeDataResponseBody = {
  requestId?: string(name='RequestId'),
  transcodeDataInfos?: {
    transcodeDataInfo?: [ 
    {
      date?: string(name='Date'),
      total?: int32(name='Total'),
      detail?: string(name='Detail'),
    }
  ](name='TranscodeDataInfo')
  }(name='TranscodeDataInfos'),
}

model DescribeLiveDomainTranscodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainTranscodeDataResponseBody(name='body'),
}

async function describeLiveDomainTranscodeDataWithOptions(request: DescribeLiveDomainTranscodeDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainTranscodeDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveDomainTranscodeData', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveDomainTranscodeData(request: DescribeLiveDomainTranscodeDataRequest): DescribeLiveDomainTranscodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainTranscodeDataWithOptions(request, runtime);
}

model DescribeLiveLazyPullStreamConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
}

model DescribeLiveLazyPullStreamConfigResponseBody = {
  requestId?: string(name='RequestId'),
  liveLazyPullConfigList?: {
    liveLazyPullConfig?: [ 
    {
      appName?: string(name='AppName'),
      pullAppName?: string(name='PullAppName'),
      pullProtocol?: string(name='PullProtocol'),
      pullDomainName?: string(name='PullDomainName'),
      domainName?: string(name='DomainName'),
    }
  ](name='LiveLazyPullConfig')
  }(name='LiveLazyPullConfigList'),
}

model DescribeLiveLazyPullStreamConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveLazyPullStreamConfigResponseBody(name='body'),
}

async function describeLiveLazyPullStreamConfigWithOptions(request: DescribeLiveLazyPullStreamConfigRequest, runtime: Util.RuntimeOptions): DescribeLiveLazyPullStreamConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveLazyPullStreamConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveLazyPullStreamConfig(request: DescribeLiveLazyPullStreamConfigRequest): DescribeLiveLazyPullStreamConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveLazyPullStreamConfigWithOptions(request, runtime);
}

model DescribeLivePullStreamConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model DescribeLivePullStreamConfigResponseBody = {
  requestId?: string(name='RequestId'),
  liveAppRecordList?: {
    liveAppRecord?: [ 
    {
      endTime?: string(name='EndTime'),
      appName?: string(name='AppName'),
      sourceUrl?: string(name='SourceUrl'),
      startTime?: string(name='StartTime'),
      streamName?: string(name='StreamName'),
      domainName?: string(name='DomainName'),
    }
  ](name='LiveAppRecord')
  }(name='LiveAppRecordList'),
}

model DescribeLivePullStreamConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLivePullStreamConfigResponseBody(name='body'),
}

async function describeLivePullStreamConfigWithOptions(request: DescribeLivePullStreamConfigRequest, runtime: Util.RuntimeOptions): DescribeLivePullStreamConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLivePullStreamConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLivePullStreamConfig(request: DescribeLivePullStreamConfigRequest): DescribeLivePullStreamConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLivePullStreamConfigWithOptions(request, runtime);
}

model DescribeLiveRealtimeDeliveryAccRequest {
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  project?: string(name='Project'),
  logStore?: string(name='LogStore'),
}

model DescribeLiveRealtimeDeliveryAccResponseBody = {
  realTimeDeliveryAccData?: {
    accData?: [ 
    {
      failedNum?: int32(name='FailedNum'),
      timeStamp?: string(name='TimeStamp'),
      successNum?: int32(name='SuccessNum'),
    }
  ](name='AccData')
  }(name='RealTimeDeliveryAccData'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveRealtimeDeliveryAccResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveRealtimeDeliveryAccResponseBody(name='body'),
}

async function describeLiveRealtimeDeliveryAccWithOptions(request: DescribeLiveRealtimeDeliveryAccRequest, runtime: Util.RuntimeOptions): DescribeLiveRealtimeDeliveryAccResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveRealtimeDeliveryAcc', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveRealtimeDeliveryAcc(request: DescribeLiveRealtimeDeliveryAccRequest): DescribeLiveRealtimeDeliveryAccResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveRealtimeDeliveryAccWithOptions(request, runtime);
}

model DescribeLiveRealtimeLogAuthorizedRequest {
  ownerId?: long(name='OwnerId'),
  liveOpenapiReserve?: string(name='LiveOpenapiReserve'),
}

model DescribeLiveRealtimeLogAuthorizedResponseBody = {
  authorizedStatus?: string(name='AuthorizedStatus'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveRealtimeLogAuthorizedResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveRealtimeLogAuthorizedResponseBody(name='body'),
}

async function describeLiveRealtimeLogAuthorizedWithOptions(request: DescribeLiveRealtimeLogAuthorizedRequest, runtime: Util.RuntimeOptions): DescribeLiveRealtimeLogAuthorizedResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeLiveRealtimeLogAuthorized', '2016-11-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeLiveRealtimeLogAuthorized(request: DescribeLiveRealtimeLogAuthorizedRequest): DescribeLiveRealtimeLogAuthorizedResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveRealtimeLogAuthorizedWithOptions(request, runtime);
}

model DescribeLiveRecordConfigRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  order?: string(name='Order'),
}

model DescribeLiveRecordConfigResponseBody = {
  order?: string(name='Order'),
  totalNum?: int32(name='TotalNum'),
  pageNum?: int32(name='PageNum'),
  requestId?: string(name='RequestId'),
  totalPage?: int32(name='TotalPage'),
  pageSize?: int32(name='PageSize'),
  liveAppRecordList?: {
    liveAppRecord?: [ 
    {
      endTime?: string(name='EndTime'),
      startTime?: string(name='StartTime'),
      appName?: string(name='AppName'),
      streamName?: string(name='StreamName'),
      createTime?: string(name='CreateTime'),
      onDemond?: int32(name='OnDemond'),
      ossBucket?: string(name='OssBucket'),
      recordFormatList?: {
        recordFormat?: [ 
        {
          cycleDuration?: int32(name='CycleDuration'),
          sliceOssObjectPrefix?: string(name='SliceOssObjectPrefix'),
          ossObjectPrefix?: string(name='OssObjectPrefix'),
          format?: string(name='Format'),
        }
      ](name='RecordFormat')
      }(name='RecordFormatList'),
      domainName?: string(name='DomainName'),
      ossEndpoint?: string(name='OssEndpoint'),
    }
  ](name='LiveAppRecord')
  }(name='LiveAppRecordList'),
}

model DescribeLiveRecordConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveRecordConfigResponseBody(name='body'),
}

async function describeLiveRecordConfigWithOptions(request: DescribeLiveRecordConfigRequest, runtime: Util.RuntimeOptions): DescribeLiveRecordConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveRecordConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveRecordConfig(request: DescribeLiveRecordConfigRequest): DescribeLiveRecordConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveRecordConfigWithOptions(request, runtime);
}

model DescribeLiveRecordNotifyConfigRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model DescribeLiveRecordNotifyConfigResponseBody = {
  requestId?: string(name='RequestId'),
  liveRecordNotifyConfig?: {
    needStatusNotify?: boolean(name='NeedStatusNotify'),
    onDemandUrl?: string(name='OnDemandUrl'),
    notifyUrl?: string(name='NotifyUrl'),
    domainName?: string(name='DomainName'),
  }(name='LiveRecordNotifyConfig'),
}

model DescribeLiveRecordNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveRecordNotifyConfigResponseBody(name='body'),
}

async function describeLiveRecordNotifyConfigWithOptions(request: DescribeLiveRecordNotifyConfigRequest, runtime: Util.RuntimeOptions): DescribeLiveRecordNotifyConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveRecordNotifyConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveRecordNotifyConfig(request: DescribeLiveRecordNotifyConfigRequest): DescribeLiveRecordNotifyConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveRecordNotifyConfigWithOptions(request, runtime);
}

model DescribeLiveRecordVodConfigsRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
}

model DescribeLiveRecordVodConfigsResponseBody = {
  pageNum?: int32(name='PageNum'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  liveRecordVodConfigs?: {
    liveRecordVodConfig?: [ 
    {
      appName?: string(name='AppName'),
      autoCompose?: string(name='AutoCompose'),
      streamName?: string(name='StreamName'),
      createTime?: string(name='CreateTime'),
      vodTranscodeGroupId?: string(name='VodTranscodeGroupId'),
      cycleDuration?: int32(name='CycleDuration'),
      domainName?: string(name='DomainName'),
      composeVodTranscodeGroupId?: string(name='ComposeVodTranscodeGroupId'),
    }
  ](name='LiveRecordVodConfig')
  }(name='LiveRecordVodConfigs'),
  total?: string(name='Total'),
}

model DescribeLiveRecordVodConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveRecordVodConfigsResponseBody(name='body'),
}

async function describeLiveRecordVodConfigsWithOptions(request: DescribeLiveRecordVodConfigsRequest, runtime: Util.RuntimeOptions): DescribeLiveRecordVodConfigsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveRecordVodConfigs', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveRecordVodConfigs(request: DescribeLiveRecordVodConfigsRequest): DescribeLiveRecordVodConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveRecordVodConfigsWithOptions(request, runtime);
}

model DescribeLiveShiftConfigsRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model DescribeLiveShiftConfigsResponseBody = {
  requestId?: string(name='RequestId'),
  content?: {
    config?: [ 
    {
      appName?: string(name='AppName'),
      vision?: int32(name='Vision'),
      streamName?: string(name='StreamName'),
      domainName?: string(name='DomainName'),
    }
  ](name='Config')
  }(name='Content'),
}

model DescribeLiveShiftConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveShiftConfigsResponseBody(name='body'),
}

async function describeLiveShiftConfigsWithOptions(request: DescribeLiveShiftConfigsRequest, runtime: Util.RuntimeOptions): DescribeLiveShiftConfigsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveShiftConfigs', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveShiftConfigs(request: DescribeLiveShiftConfigsRequest): DescribeLiveShiftConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveShiftConfigsWithOptions(request, runtime);
}

model DescribeLiveSnapshotConfigRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  order?: string(name='Order'),
}

model DescribeLiveSnapshotConfigResponseBody = {
  order?: string(name='Order'),
  totalNum?: int32(name='TotalNum'),
  pageNum?: int32(name='PageNum'),
  requestId?: string(name='RequestId'),
  totalPage?: int32(name='TotalPage'),
  pageSize?: int32(name='PageSize'),
  liveStreamSnapshotConfigList?: {
    liveStreamSnapshotConfig?: [ 
    {
      overwriteOssObject?: string(name='OverwriteOssObject'),
      timeInterval?: int32(name='TimeInterval'),
      appName?: string(name='AppName'),
      createTime?: string(name='CreateTime'),
      ossBucket?: string(name='OssBucket'),
      domainName?: string(name='DomainName'),
      callback?: string(name='Callback'),
      sequenceOssObject?: string(name='SequenceOssObject'),
      ossEndpoint?: string(name='OssEndpoint'),
    }
  ](name='LiveStreamSnapshotConfig')
  }(name='LiveStreamSnapshotConfigList'),
}

model DescribeLiveSnapshotConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveSnapshotConfigResponseBody(name='body'),
}

async function describeLiveSnapshotConfigWithOptions(request: DescribeLiveSnapshotConfigRequest, runtime: Util.RuntimeOptions): DescribeLiveSnapshotConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveSnapshotConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveSnapshotConfig(request: DescribeLiveSnapshotConfigRequest): DescribeLiveSnapshotConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveSnapshotConfigWithOptions(request, runtime);
}

model DescribeLiveSnapshotDetectPornConfigRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  order?: string(name='Order'),
}

model DescribeLiveSnapshotDetectPornConfigResponseBody = {
  order?: string(name='Order'),
  totalNum?: int32(name='TotalNum'),
  pageNum?: int32(name='PageNum'),
  requestId?: string(name='RequestId'),
  totalPage?: int32(name='TotalPage'),
  pageSize?: int32(name='PageSize'),
  liveSnapshotDetectPornConfigList?: {
    liveSnapshotDetectPornConfig?: [ 
    {
      ossObject?: string(name='OssObject'),
      appName?: string(name='AppName'),
      interval?: int32(name='Interval'),
      scenes?: {
        scene?: [ string ](name='scene')
      }(name='Scenes'),
      ossBucket?: string(name='OssBucket'),
      domainName?: string(name='DomainName'),
      ossEndpoint?: string(name='OssEndpoint'),
    }
  ](name='LiveSnapshotDetectPornConfig')
  }(name='LiveSnapshotDetectPornConfigList'),
}

model DescribeLiveSnapshotDetectPornConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveSnapshotDetectPornConfigResponseBody(name='body'),
}

async function describeLiveSnapshotDetectPornConfigWithOptions(request: DescribeLiveSnapshotDetectPornConfigRequest, runtime: Util.RuntimeOptions): DescribeLiveSnapshotDetectPornConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveSnapshotDetectPornConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveSnapshotDetectPornConfig(request: DescribeLiveSnapshotDetectPornConfigRequest): DescribeLiveSnapshotDetectPornConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveSnapshotDetectPornConfigWithOptions(request, runtime);
}

model DescribeLiveStreamBitRateDataRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeLiveStreamBitRateDataResponseBody = {
  requestId?: string(name='RequestId'),
  frameRateAndBitRateInfos?: {
    frameRateAndBitRateInfo?: [ 
    {
      time?: string(name='Time'),
      audioFrameRate?: float(name='AudioFrameRate'),
      videoFrameRate?: float(name='VideoFrameRate'),
      streamUrl?: string(name='StreamUrl'),
      bitRate?: float(name='BitRate'),
    }
  ](name='FrameRateAndBitRateInfo')
  }(name='FrameRateAndBitRateInfos'),
}

model DescribeLiveStreamBitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamBitRateDataResponseBody(name='body'),
}

async function describeLiveStreamBitRateDataWithOptions(request: DescribeLiveStreamBitRateDataRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamBitRateDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveStreamBitRateData', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveStreamBitRateData(request: DescribeLiveStreamBitRateDataRequest): DescribeLiveStreamBitRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamBitRateDataWithOptions(request, runtime);
}

model DescribeLiveStreamCountRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model DescribeLiveStreamCountResponseBody = {
  requestId?: string(name='RequestId'),
  streamCountInfos?: {
    streamCountInfo?: [ 
    {
      type?: string(name='Type'),
      streamCountDetails?: {
        streamCountDetail?: [ 
        {
          videoDataRate?: long(name='VideoDataRate'),
          format?: string(name='Format'),
          count?: long(name='Count'),
        }
      ](name='StreamCountDetail')
      }(name='StreamCountDetails'),
      limit?: long(name='Limit'),
      count?: long(name='Count'),
    }
  ](name='StreamCountInfo')
  }(name='StreamCountInfos'),
}

model DescribeLiveStreamCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamCountResponseBody(name='body'),
}

async function describeLiveStreamCountWithOptions(request: DescribeLiveStreamCountRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamCountResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeLiveStreamCount', '2016-11-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeLiveStreamCount(request: DescribeLiveStreamCountRequest): DescribeLiveStreamCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamCountWithOptions(request, runtime);
}

model DescribeLiveStreamDelayConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model DescribeLiveStreamDelayConfigResponseBody = {
  liveStreamFlvDelayConfig?: {
    delay?: int32(name='Delay'),
    level?: string(name='Level'),
  }(name='LiveStreamFlvDelayConfig'),
  liveStreamRtmpDelayConfig?: {
    delay?: int32(name='Delay'),
    level?: string(name='Level'),
  }(name='LiveStreamRtmpDelayConfig'),
  requestId?: string(name='RequestId'),
  liveStreamHlsDelayConfig?: {
    delay?: int32(name='Delay'),
    level?: string(name='Level'),
  }(name='LiveStreamHlsDelayConfig'),
}

model DescribeLiveStreamDelayConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamDelayConfigResponseBody(name='body'),
}

async function describeLiveStreamDelayConfigWithOptions(request: DescribeLiveStreamDelayConfigRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamDelayConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveStreamDelayConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveStreamDelayConfig(request: DescribeLiveStreamDelayConfigRequest): DescribeLiveStreamDelayConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamDelayConfigWithOptions(request, runtime);
}

model DescribeLiveStreamHistoryUserNumRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeLiveStreamHistoryUserNumResponseBody = {
  liveStreamUserNumInfos?: {
    liveStreamUserNumInfo?: [ 
    {
      userNum?: string(name='UserNum'),
      streamTime?: string(name='StreamTime'),
    }
  ](name='LiveStreamUserNumInfo')
  }(name='LiveStreamUserNumInfos'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveStreamHistoryUserNumResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamHistoryUserNumResponseBody(name='body'),
}

async function describeLiveStreamHistoryUserNumWithOptions(request: DescribeLiveStreamHistoryUserNumRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamHistoryUserNumResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveStreamHistoryUserNum', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveStreamHistoryUserNum(request: DescribeLiveStreamHistoryUserNumRequest): DescribeLiveStreamHistoryUserNumResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamHistoryUserNumWithOptions(request, runtime);
}

model DescribeLiveStreamOptimizedFeatureConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  configName?: string(name='ConfigName'),
}

model DescribeLiveStreamOptimizedFeatureConfigResponseBody = {
  requestId?: string(name='RequestId'),
  liveStreamOptimizedFeatureConfigList?: {
    liveStreamOptimizedFeatureConfig?: [ 
    {
      configName?: string(name='ConfigName'),
      configValue?: string(name='ConfigValue'),
      configStatus?: string(name='ConfigStatus'),
      domainName?: string(name='DomainName'),
    }
  ](name='LiveStreamOptimizedFeatureConfig')
  }(name='LiveStreamOptimizedFeatureConfigList'),
}

model DescribeLiveStreamOptimizedFeatureConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamOptimizedFeatureConfigResponseBody(name='body'),
}

async function describeLiveStreamOptimizedFeatureConfigWithOptions(request: DescribeLiveStreamOptimizedFeatureConfigRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamOptimizedFeatureConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveStreamOptimizedFeatureConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveStreamOptimizedFeatureConfig(request: DescribeLiveStreamOptimizedFeatureConfigRequest): DescribeLiveStreamOptimizedFeatureConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamOptimizedFeatureConfigWithOptions(request, runtime);
}

model DescribeLiveStreamRecordContentRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeLiveStreamRecordContentResponseBody = {
  requestId?: string(name='RequestId'),
  recordContentInfoList?: {
    recordContentInfo?: [ 
    {
      endTime?: string(name='EndTime'),
      startTime?: string(name='StartTime'),
      duration?: float(name='Duration'),
      ossBucket?: string(name='OssBucket'),
      ossObjectPrefix?: string(name='OssObjectPrefix'),
      ossEndpoint?: string(name='OssEndpoint'),
    }
  ](name='RecordContentInfo')
  }(name='RecordContentInfoList'),
}

model DescribeLiveStreamRecordContentResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamRecordContentResponseBody(name='body'),
}

async function describeLiveStreamRecordContentWithOptions(request: DescribeLiveStreamRecordContentRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamRecordContentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveStreamRecordContent', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveStreamRecordContent(request: DescribeLiveStreamRecordContentRequest): DescribeLiveStreamRecordContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamRecordContentWithOptions(request, runtime);
}

model DescribeLiveStreamRecordIndexFileRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  recordId?: string(name='RecordId'),
}

model DescribeLiveStreamRecordIndexFileResponseBody = {
  recordIndexInfo?: {
    streamName?: string(name='StreamName'),
    recordUrl?: string(name='RecordUrl'),
    recordId?: string(name='RecordId'),
    createTime?: string(name='CreateTime'),
    height?: int32(name='Height'),
    ossBucket?: string(name='OssBucket'),
    domainName?: string(name='DomainName'),
    endTime?: string(name='EndTime'),
    ossObject?: string(name='OssObject'),
    startTime?: string(name='StartTime'),
    appName?: string(name='AppName'),
    width?: int32(name='Width'),
    duration?: float(name='Duration'),
    ossEndpoint?: string(name='OssEndpoint'),
  }(name='RecordIndexInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveStreamRecordIndexFileResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamRecordIndexFileResponseBody(name='body'),
}

async function describeLiveStreamRecordIndexFileWithOptions(request: DescribeLiveStreamRecordIndexFileRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamRecordIndexFileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveStreamRecordIndexFile', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveStreamRecordIndexFile(request: DescribeLiveStreamRecordIndexFileRequest): DescribeLiveStreamRecordIndexFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamRecordIndexFileWithOptions(request, runtime);
}

model DescribeLiveStreamRecordIndexFilesRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  order?: string(name='Order'),
}

model DescribeLiveStreamRecordIndexFilesResponseBody = {
  order?: string(name='Order'),
  totalNum?: int32(name='TotalNum'),
  pageNum?: int32(name='PageNum'),
  requestId?: string(name='RequestId'),
  totalPage?: int32(name='TotalPage'),
  pageSize?: int32(name='PageSize'),
  recordIndexInfoList?: {
    recordIndexInfo?: [ 
    {
      streamName?: string(name='StreamName'),
      recordUrl?: string(name='RecordUrl'),
      recordId?: string(name='RecordId'),
      createTime?: string(name='CreateTime'),
      height?: int32(name='Height'),
      ossBucket?: string(name='OssBucket'),
      domainName?: string(name='DomainName'),
      endTime?: string(name='EndTime'),
      ossObject?: string(name='OssObject'),
      startTime?: string(name='StartTime'),
      appName?: string(name='AppName'),
      width?: int32(name='Width'),
      duration?: float(name='Duration'),
      ossEndpoint?: string(name='OssEndpoint'),
    }
  ](name='RecordIndexInfo')
  }(name='RecordIndexInfoList'),
}

model DescribeLiveStreamRecordIndexFilesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamRecordIndexFilesResponseBody(name='body'),
}

async function describeLiveStreamRecordIndexFilesWithOptions(request: DescribeLiveStreamRecordIndexFilesRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamRecordIndexFilesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveStreamRecordIndexFiles', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveStreamRecordIndexFiles(request: DescribeLiveStreamRecordIndexFilesRequest): DescribeLiveStreamRecordIndexFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamRecordIndexFilesWithOptions(request, runtime);
}

model DescribeLiveStreamsBlockListRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
}

model DescribeLiveStreamsBlockListResponseBody = {
  totalNum?: int32(name='TotalNum'),
  pageNum?: int32(name='PageNum'),
  requestId?: string(name='RequestId'),
  totalPage?: int32(name='TotalPage'),
  pageSize?: int32(name='PageSize'),
  domainName?: string(name='DomainName'),
  streamUrls?: {
    streamUrl?: [ string ](name='StreamUrl')
  }(name='StreamUrls'),
}

model DescribeLiveStreamsBlockListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamsBlockListResponseBody(name='body'),
}

async function describeLiveStreamsBlockListWithOptions(request: DescribeLiveStreamsBlockListRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamsBlockListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveStreamsBlockList', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveStreamsBlockList(request: DescribeLiveStreamsBlockListRequest): DescribeLiveStreamsBlockListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamsBlockListWithOptions(request, runtime);
}

model DescribeLiveStreamsControlHistoryRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeLiveStreamsControlHistoryResponseBody = {
  requestId?: string(name='RequestId'),
  controlInfo?: {
    liveStreamControlInfo?: [ 
    {
      action?: string(name='Action'),
      streamName?: string(name='StreamName'),
      clientIP?: string(name='ClientIP'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='LiveStreamControlInfo')
  }(name='ControlInfo'),
}

model DescribeLiveStreamsControlHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamsControlHistoryResponseBody(name='body'),
}

async function describeLiveStreamsControlHistoryWithOptions(request: DescribeLiveStreamsControlHistoryRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamsControlHistoryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveStreamsControlHistory', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveStreamsControlHistory(request: DescribeLiveStreamsControlHistoryRequest): DescribeLiveStreamsControlHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamsControlHistoryWithOptions(request, runtime);
}

model DescribeLiveStreamSnapshotInfoRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  limit?: int32(name='Limit'),
  order?: string(name='Order'),
}

model DescribeLiveStreamSnapshotInfoResponseBody = {
  liveStreamSnapshotInfoList?: {
    liveStreamSnapshotInfo?: [ 
    {
      ossObject?: string(name='OssObject'),
      createTime?: string(name='CreateTime'),
      ossBucket?: string(name='OssBucket'),
      ossEndpoint?: string(name='OssEndpoint'),
    }
  ](name='LiveStreamSnapshotInfo')
  }(name='LiveStreamSnapshotInfoList'),
  requestId?: string(name='RequestId'),
  nextStartTime?: string(name='NextStartTime'),
}

model DescribeLiveStreamSnapshotInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamSnapshotInfoResponseBody(name='body'),
}

async function describeLiveStreamSnapshotInfoWithOptions(request: DescribeLiveStreamSnapshotInfoRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamSnapshotInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveStreamSnapshotInfo', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveStreamSnapshotInfo(request: DescribeLiveStreamSnapshotInfoRequest): DescribeLiveStreamSnapshotInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamSnapshotInfoWithOptions(request, runtime);
}

model DescribeLiveStreamsNotifyUrlConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model DescribeLiveStreamsNotifyUrlConfigResponseBody = {
  requestId?: string(name='RequestId'),
  liveStreamsNotifyConfig?: {
    notifyUrl?: string(name='NotifyUrl'),
    domainName?: string(name='DomainName'),
  }(name='LiveStreamsNotifyConfig'),
}

model DescribeLiveStreamsNotifyUrlConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamsNotifyUrlConfigResponseBody(name='body'),
}

async function describeLiveStreamsNotifyUrlConfigWithOptions(request: DescribeLiveStreamsNotifyUrlConfigRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamsNotifyUrlConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveStreamsNotifyUrlConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveStreamsNotifyUrlConfig(request: DescribeLiveStreamsNotifyUrlConfigRequest): DescribeLiveStreamsNotifyUrlConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamsNotifyUrlConfigWithOptions(request, runtime);
}

model DescribeLiveStreamsOnlineListRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  pageSize?: int32(name='PageSize'),
  pageNum?: int32(name='PageNum'),
  streamType?: string(name='StreamType'),
  queryType?: string(name='QueryType'),
}

model DescribeLiveStreamsOnlineListResponseBody = {
  totalNum?: int32(name='TotalNum'),
  totalPage?: int32(name='TotalPage'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  onlineInfo?: {
    liveStreamOnlineInfo?: [ 
    {
      publishUrl?: string(name='PublishUrl'),
      streamName?: string(name='StreamName'),
      domainName?: string(name='DomainName'),
      publishDomain?: string(name='PublishDomain'),
      appName?: string(name='AppName'),
      publishTime?: string(name='PublishTime'),
    }
  ](name='LiveStreamOnlineInfo')
  }(name='OnlineInfo'),
}

model DescribeLiveStreamsOnlineListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamsOnlineListResponseBody(name='body'),
}

async function describeLiveStreamsOnlineListWithOptions(request: DescribeLiveStreamsOnlineListRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamsOnlineListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveStreamsOnlineList', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveStreamsOnlineList(request: DescribeLiveStreamsOnlineListRequest): DescribeLiveStreamsOnlineListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamsOnlineListWithOptions(request, runtime);
}

model DescribeLiveStreamsPublishListRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  streamType?: string(name='StreamType'),
  queryType?: string(name='QueryType'),
  orderBy?: string(name='OrderBy'),
}

model DescribeLiveStreamsPublishListResponseBody = {
  totalNum?: int32(name='TotalNum'),
  totalPage?: int32(name='TotalPage'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  publishInfo?: {
    liveStreamPublishInfo?: [ 
    {
      edgeNodeAddr?: string(name='EdgeNodeAddr'),
      publishUrl?: string(name='PublishUrl'),
      streamName?: string(name='StreamName'),
      stopTime?: string(name='StopTime'),
      domainName?: string(name='DomainName'),
      transcodeId?: string(name='TranscodeId'),
      publishDomain?: string(name='PublishDomain'),
      publishTime?: string(name='PublishTime'),
      appName?: string(name='AppName'),
      publishType?: string(name='PublishType'),
      transcoded?: string(name='Transcoded'),
      clientAddr?: string(name='ClientAddr'),
      streamUrl?: string(name='StreamUrl'),
    }
  ](name='LiveStreamPublishInfo')
  }(name='PublishInfo'),
}

model DescribeLiveStreamsPublishListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamsPublishListResponseBody(name='body'),
}

async function describeLiveStreamsPublishListWithOptions(request: DescribeLiveStreamsPublishListRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamsPublishListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveStreamsPublishList', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveStreamsPublishList(request: DescribeLiveStreamsPublishListRequest): DescribeLiveStreamsPublishListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamsPublishListWithOptions(request, runtime);
}

model DescribeLiveStreamTranscodeInfoRequest {
  ownerId?: long(name='OwnerId'),
  domainTranscodeName?: string(name='DomainTranscodeName'),
}

model DescribeLiveStreamTranscodeInfoResponseBody = {
  requestId?: string(name='RequestId'),
  domainTranscodeList?: {
    domainTranscodeInfo?: [ 
    {
      customTranscodeParameters?: {
        videoProfile?: string(name='VideoProfile'),
        audioBitrate?: int32(name='AudioBitrate'),
        height?: int32(name='Height'),
        rtsFlag?: string(name='RtsFlag'),
        templateType?: string(name='TemplateType'),
        bframes?: string(name='Bframes'),
        audioRate?: int32(name='AudioRate'),
        audioCodec?: string(name='AudioCodec'),
        FPS?: int32(name='FPS'),
        gop?: string(name='Gop'),
        width?: int32(name='Width'),
        videoBitrate?: int32(name='VideoBitrate'),
        audioChannelNum?: int32(name='AudioChannelNum'),
        audioProfile?: string(name='AudioProfile'),
      }(name='CustomTranscodeParameters'),
      transcodeApp?: string(name='TranscodeApp'),
      transcodeTemplate?: string(name='TranscodeTemplate'),
      encryptParameters?: {
        encryptType?: string(name='EncryptType'),
        kmsKeyID?: string(name='KmsKeyID'),
        kmsKeyExpireInterval?: string(name='KmsKeyExpireInterval'),
      }(name='EncryptParameters'),
      transcodeName?: string(name='TranscodeName'),
    }
  ](name='DomainTranscodeInfo')
  }(name='DomainTranscodeList'),
}

model DescribeLiveStreamTranscodeInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamTranscodeInfoResponseBody(name='body'),
}

async function describeLiveStreamTranscodeInfoWithOptions(request: DescribeLiveStreamTranscodeInfoRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamTranscodeInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveStreamTranscodeInfo', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveStreamTranscodeInfo(request: DescribeLiveStreamTranscodeInfoRequest): DescribeLiveStreamTranscodeInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamTranscodeInfoWithOptions(request, runtime);
}

model DescribeLiveStreamTranscodeStreamNumRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model DescribeLiveStreamTranscodeStreamNumResponseBody = {
  untranscodeNumber?: long(name='UntranscodeNumber'),
  lazyTranscodedNumber?: long(name='LazyTranscodedNumber'),
  requestId?: string(name='RequestId'),
  transcodedNumber?: long(name='TranscodedNumber'),
  total?: long(name='Total'),
}

model DescribeLiveStreamTranscodeStreamNumResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamTranscodeStreamNumResponseBody(name='body'),
}

async function describeLiveStreamTranscodeStreamNumWithOptions(request: DescribeLiveStreamTranscodeStreamNumRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamTranscodeStreamNumResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveStreamTranscodeStreamNum', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveStreamTranscodeStreamNum(request: DescribeLiveStreamTranscodeStreamNumRequest): DescribeLiveStreamTranscodeStreamNumResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamTranscodeStreamNumWithOptions(request, runtime);
}

model DescribeLiveTagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceType?: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeLiveTagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag'),
      resourceId?: string(name='ResourceId'),
    }
  ](name='TagResources'),
}

model DescribeLiveTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveTagResourcesResponseBody(name='body'),
}

async function describeLiveTagResourcesWithOptions(request: DescribeLiveTagResourcesRequest, runtime: Util.RuntimeOptions): DescribeLiveTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveTagResources', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveTagResources(request: DescribeLiveTagResourcesRequest): DescribeLiveTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveTagResourcesWithOptions(request, runtime);
}

model DescribeLiveTopDomainsByFlowRequest {
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  limit?: long(name='Limit'),
}

model DescribeLiveTopDomainsByFlowResponseBody = {
  topDomains?: {
    topDomain?: [ 
    {
      maxBps?: long(name='MaxBps'),
      rank?: long(name='Rank'),
      totalAccess?: long(name='TotalAccess'),
      trafficPercent?: string(name='TrafficPercent'),
      domainName?: string(name='DomainName'),
      totalTraffic?: string(name='TotalTraffic'),
      maxBpsTime?: string(name='MaxBpsTime'),
    }
  ](name='TopDomain')
  }(name='TopDomains'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  domainOnlineCount?: long(name='DomainOnlineCount'),
  startTime?: string(name='StartTime'),
  domainCount?: long(name='DomainCount'),
}

model DescribeLiveTopDomainsByFlowResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveTopDomainsByFlowResponseBody(name='body'),
}

async function describeLiveTopDomainsByFlowWithOptions(request: DescribeLiveTopDomainsByFlowRequest, runtime: Util.RuntimeOptions): DescribeLiveTopDomainsByFlowResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveTopDomainsByFlow', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveTopDomainsByFlow(request: DescribeLiveTopDomainsByFlowRequest): DescribeLiveTopDomainsByFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveTopDomainsByFlowWithOptions(request, runtime);
}

model DescribeLiveUserDomainsRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  liveDomainType?: string(name='LiveDomainType'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  domainName?: string(name='DomainName'),
  regionName?: string(name='RegionName'),
  domainSearchType?: string(name='DomainSearchType'),
  domainStatus?: string(name='DomainStatus'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeLiveUserDomainsResponseBody = {
  domains?: {
    pageData?: [ 
    {
      gmtCreated?: string(name='GmtCreated'),
      liveDomainType?: string(name='LiveDomainType'),
      liveDomainStatus?: string(name='LiveDomainStatus'),
      regionName?: string(name='RegionName'),
      description?: string(name='Description'),
      cname?: string(name='Cname'),
      gmtModified?: string(name='GmtModified'),
      domainName?: string(name='DomainName'),
    }
  ](name='PageData')
  }(name='Domains'),
  totalCount?: long(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: long(name='PageSize'),
  pageNumber?: long(name='PageNumber'),
}

model DescribeLiveUserDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveUserDomainsResponseBody(name='body'),
}

async function describeLiveUserDomainsWithOptions(request: DescribeLiveUserDomainsRequest, runtime: Util.RuntimeOptions): DescribeLiveUserDomainsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveUserDomains', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveUserDomains(request: DescribeLiveUserDomainsRequest): DescribeLiveUserDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveUserDomainsWithOptions(request, runtime);
}

model DescribeLiveUserTagsRequest {
  ownerId?: long(name='OwnerId'),
}

model DescribeLiveUserTagsResponseBody = {
  requestId?: string(name='RequestId'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Tags'),
}

model DescribeLiveUserTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveUserTagsResponseBody(name='body'),
}

async function describeLiveUserTagsWithOptions(request: DescribeLiveUserTagsRequest, runtime: Util.RuntimeOptions): DescribeLiveUserTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveUserTags', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveUserTags(request: DescribeLiveUserTagsRequest): DescribeLiveUserTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveUserTagsWithOptions(request, runtime);
}

model DescribeLiveVerifyContentRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model DescribeLiveVerifyContentResponseBody = {
  requestId?: string(name='RequestId'),
  content?: string(name='Content'),
}

model DescribeLiveVerifyContentResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveVerifyContentResponseBody(name='body'),
}

async function describeLiveVerifyContentWithOptions(request: DescribeLiveVerifyContentRequest, runtime: Util.RuntimeOptions): DescribeLiveVerifyContentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLiveVerifyContent', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLiveVerifyContent(request: DescribeLiveVerifyContentRequest): DescribeLiveVerifyContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveVerifyContentWithOptions(request, runtime);
}

model DescribeMixStreamListRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  mixStreamId?: string(name='MixStreamId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
}

model DescribeMixStreamListResponseBody = {
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
  mixStreamList?: [ 
    {
      mixStreamTemplate?: string(name='MixStreamTemplate'),
      appName?: string(name='AppName'),
      layoutId?: string(name='LayoutId'),
      streamName?: string(name='StreamName'),
      gmtCreate?: string(name='GmtCreate'),
      mixstreamId?: string(name='MixstreamId'),
      gmtModified?: string(name='GmtModified'),
      inputStreamNumber?: int32(name='InputStreamNumber'),
      domainName?: string(name='DomainName'),
    }
  ](name='MixStreamList'),
}

model DescribeMixStreamListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMixStreamListResponseBody(name='body'),
}

async function describeMixStreamListWithOptions(request: DescribeMixStreamListRequest, runtime: Util.RuntimeOptions): DescribeMixStreamListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMixStreamList', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMixStreamList(request: DescribeMixStreamListRequest): DescribeMixStreamListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMixStreamListWithOptions(request, runtime);
}

model DescribeRecordRequest {
  ownerId?: long(name='OwnerId'),
  appId?: string(name='AppId'),
  recordId?: string(name='RecordId'),
}

model DescribeRecordResponseBody = {
  boardId?: int32(name='BoardId'),
  endTime?: long(name='EndTime'),
  requestId?: string(name='RequestId'),
  appId?: string(name='AppId'),
  recordStartTime?: long(name='RecordStartTime'),
  ossEndpoint?: string(name='OssEndpoint'),
  state?: int32(name='State'),
  ossPath?: string(name='OssPath'),
  startTime?: long(name='StartTime'),
  ossBucket?: string(name='OssBucket'),
  recordId?: string(name='RecordId'),
}

model DescribeRecordResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecordResponseBody(name='body'),
}

async function describeRecordWithOptions(request: DescribeRecordRequest, runtime: Util.RuntimeOptions): DescribeRecordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRecord', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRecord(request: DescribeRecordRequest): DescribeRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecordWithOptions(request, runtime);
}

model DescribeRecordsRequest {
  ownerId?: long(name='OwnerId'),
  appId?: string(name='AppId'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  recordState?: string(name='RecordState'),
}

model DescribeRecordsResponseBody = {
  requestId?: string(name='RequestId'),
  records?: [ 
    {
      endTime?: long(name='EndTime'),
      startTime?: long(name='StartTime'),
      boardId?: int32(name='BoardId'),
      state?: int32(name='State'),
      appId?: string(name='AppId'),
      recordId?: string(name='RecordId'),
      ossBucket?: string(name='OssBucket'),
      recordStartTime?: long(name='RecordStartTime'),
      ossPath?: string(name='OssPath'),
      ossEndpoint?: string(name='OssEndpoint'),
    }
  ](name='Records'),
}

model DescribeRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecordsResponseBody(name='body'),
}

async function describeRecordsWithOptions(request: DescribeRecordsRequest, runtime: Util.RuntimeOptions): DescribeRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRecords', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRecords(request: DescribeRecordsRequest): DescribeRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecordsWithOptions(request, runtime);
}

model DescribeRoomKickoutUserListRequest {
  ownerId?: long(name='OwnerId'),
  appId?: string(name='AppId'),
  roomId?: string(name='RoomId'),
  order?: string(name='Order'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
}

model DescribeRoomKickoutUserListResponseBody = {
  totalNum?: int32(name='TotalNum'),
  totalPage?: int32(name='TotalPage'),
  requestId?: string(name='RequestId'),
  userList?: [ 
    {
      opEndTime?: string(name='OpEndTime'),
      appUid?: string(name='AppUid'),
      opStartTime?: string(name='OpStartTime'),
    }
  ](name='UserList'),
}

model DescribeRoomKickoutUserListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRoomKickoutUserListResponseBody(name='body'),
}

async function describeRoomKickoutUserListWithOptions(request: DescribeRoomKickoutUserListRequest, runtime: Util.RuntimeOptions): DescribeRoomKickoutUserListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRoomKickoutUserList', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRoomKickoutUserList(request: DescribeRoomKickoutUserListRequest): DescribeRoomKickoutUserListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRoomKickoutUserListWithOptions(request, runtime);
}

model DescribeRoomListRequest {
  ownerId?: long(name='OwnerId'),
  appId?: string(name='AppId'),
  roomId?: string(name='RoomId'),
  anchorId?: string(name='AnchorId'),
  roomStatus?: int32(name='RoomStatus'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  order?: string(name='Order'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
}

model DescribeRoomListResponseBody = {
  totalNum?: int32(name='TotalNum'),
  totalPage?: int32(name='TotalPage'),
  requestId?: string(name='RequestId'),
  roomList?: [ 
    {
      anchorId?: string(name='AnchorId'),
      createTime?: string(name='CreateTime'),
      forbidStream?: string(name='ForbidStream'),
      roomId?: string(name='RoomId'),
      roomStatus?: int32(name='RoomStatus'),
    }
  ](name='RoomList'),
}

model DescribeRoomListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRoomListResponseBody(name='body'),
}

async function describeRoomListWithOptions(request: DescribeRoomListRequest, runtime: Util.RuntimeOptions): DescribeRoomListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRoomList', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRoomList(request: DescribeRoomListRequest): DescribeRoomListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRoomListWithOptions(request, runtime);
}

model DescribeRoomStatusRequest {
  ownerId?: long(name='OwnerId'),
  appId?: string(name='AppId'),
  roomId?: string(name='RoomId'),
}

model DescribeRoomStatusResponseBody = {
  roomStatus?: int32(name='RoomStatus'),
  requestId?: string(name='RequestId'),
}

model DescribeRoomStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRoomStatusResponseBody(name='body'),
}

async function describeRoomStatusWithOptions(request: DescribeRoomStatusRequest, runtime: Util.RuntimeOptions): DescribeRoomStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRoomStatus', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRoomStatus(request: DescribeRoomStatusRequest): DescribeRoomStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRoomStatusWithOptions(request, runtime);
}

model DescribeStudioLayoutsRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  layoutId?: string(name='LayoutId'),
}

model DescribeStudioLayoutsResponseBody = {
  studioLayouts?: [ 
    {
      layoutType?: string(name='LayoutType'),
      layoutId?: string(name='LayoutId'),
      bgImageConfig?: {
        materialId?: string(name='MaterialId'),
        imageUrl?: string(name='ImageUrl'),
        id?: string(name='Id'),
      }(name='BgImageConfig'),
      screenInputConfigList?: [ 
        {
          portraitType?: int32(name='PortraitType'),
          index?: int32(name='Index'),
          positionX?: string(name='PositionX'),
          color?: string(name='Color'),
          heightNormalized?: float(name='HeightNormalized'),
          positionY?: string(name='PositionY'),
          channelId?: string(name='ChannelId'),
          videoResourceId?: string(name='VideoResourceId'),
          id?: string(name='Id'),
        }
      ](name='ScreenInputConfigList'),
      layoutName?: string(name='LayoutName'),
      layerOrderConfigList?: [ 
        {
          type?: string(name='Type'),
          id?: string(name='Id'),
        }
      ](name='LayerOrderConfigList'),
      mediaInputConfigList?: [ 
        {
          index?: int32(name='Index'),
          heightNormalized?: float(name='HeightNormalized'),
          fillMode?: string(name='FillMode'),
          positionRefer?: string(name='PositionRefer'),
          channelId?: string(name='ChannelId'),
          positionNormalized?: [ float ](name='PositionNormalized'),
          videoResourceId?: string(name='VideoResourceId'),
          widthNormalized?: float(name='WidthNormalized'),
          imageMaterialId?: string(name='ImageMaterialId'),
          id?: string(name='Id'),
        }
      ](name='MediaInputConfigList'),
      commonConfig?: {
        channelId?: string(name='ChannelId'),
        videoResourceId?: string(name='VideoResourceId'),
      }(name='CommonConfig'),
    }
  ](name='StudioLayouts'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model DescribeStudioLayoutsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStudioLayoutsResponseBody(name='body'),
}

async function describeStudioLayoutsWithOptions(request: DescribeStudioLayoutsRequest, runtime: Util.RuntimeOptions): DescribeStudioLayoutsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeStudioLayouts', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeStudioLayouts(request: DescribeStudioLayoutsRequest): DescribeStudioLayoutsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStudioLayoutsWithOptions(request, runtime);
}

model DescribeUpBpsPeakDataRequest {
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  domainSwitch?: string(name='DomainSwitch'),
  domainName?: string(name='DomainName'),
}

model DescribeUpBpsPeakDataResponseBody = {
  requestId?: string(name='RequestId'),
  describeUpPeakTraffics?: {
    describeUpPeakTraffic?: [ 
    {
      queryTime?: string(name='QueryTime'),
      statName?: string(name='StatName'),
      peakTime?: string(name='PeakTime'),
      bandWidth?: string(name='BandWidth'),
    }
  ](name='DescribeUpPeakTraffic')
  }(name='DescribeUpPeakTraffics'),
}

model DescribeUpBpsPeakDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUpBpsPeakDataResponseBody(name='body'),
}

async function describeUpBpsPeakDataWithOptions(request: DescribeUpBpsPeakDataRequest, runtime: Util.RuntimeOptions): DescribeUpBpsPeakDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUpBpsPeakData', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUpBpsPeakData(request: DescribeUpBpsPeakDataRequest): DescribeUpBpsPeakDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUpBpsPeakDataWithOptions(request, runtime);
}

model DescribeUpBpsPeakOfLineRequest {
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  line?: string(name='Line'),
  domainSwitch?: string(name='DomainSwitch'),
  domainName?: string(name='DomainName'),
}

model DescribeUpBpsPeakOfLineResponseBody = {
  describeUpBpsPeakOfLines?: {
    describeUpBpsPeakOfLine?: [ 
    {
      queryTime?: string(name='QueryTime'),
      statName?: string(name='StatName'),
      peakTime?: string(name='PeakTime'),
      bandWidth?: float(name='BandWidth'),
    }
  ](name='DescribeUpBpsPeakOfLine')
  }(name='DescribeUpBpsPeakOfLines'),
  requestId?: string(name='RequestId'),
}

model DescribeUpBpsPeakOfLineResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUpBpsPeakOfLineResponseBody(name='body'),
}

async function describeUpBpsPeakOfLineWithOptions(request: DescribeUpBpsPeakOfLineRequest, runtime: Util.RuntimeOptions): DescribeUpBpsPeakOfLineResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUpBpsPeakOfLine', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUpBpsPeakOfLine(request: DescribeUpBpsPeakOfLineRequest): DescribeUpBpsPeakOfLineResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUpBpsPeakOfLineWithOptions(request, runtime);
}

model DescribeUpPeakPublishStreamDataRequest {
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  domainSwitch?: string(name='DomainSwitch'),
  domainName?: string(name='DomainName'),
}

model DescribeUpPeakPublishStreamDataResponseBody = {
  describeUpPeakPublishStreamDatas?: {
    describeUpPeakPublishStreamData?: [ 
    {
      queryTime?: string(name='QueryTime'),
      statName?: string(name='StatName'),
      peakTime?: string(name='PeakTime'),
      bandWidth?: string(name='BandWidth'),
      publishStreamNum?: int32(name='PublishStreamNum'),
    }
  ](name='DescribeUpPeakPublishStreamData')
  }(name='DescribeUpPeakPublishStreamDatas'),
  requestId?: string(name='RequestId'),
}

model DescribeUpPeakPublishStreamDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUpPeakPublishStreamDataResponseBody(name='body'),
}

async function describeUpPeakPublishStreamDataWithOptions(request: DescribeUpPeakPublishStreamDataRequest, runtime: Util.RuntimeOptions): DescribeUpPeakPublishStreamDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUpPeakPublishStreamData', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUpPeakPublishStreamData(request: DescribeUpPeakPublishStreamDataRequest): DescribeUpPeakPublishStreamDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUpPeakPublishStreamDataWithOptions(request, runtime);
}

model DisableLiveRealtimeLogDeliveryRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model DisableLiveRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableLiveRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: DisableLiveRealtimeLogDeliveryResponseBody(name='body'),
}

async function disableLiveRealtimeLogDeliveryWithOptions(request: DisableLiveRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): DisableLiveRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DisableLiveRealtimeLogDelivery', '2016-11-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function disableLiveRealtimeLogDelivery(request: DisableLiveRealtimeLogDeliveryRequest): DisableLiveRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableLiveRealtimeLogDeliveryWithOptions(request, runtime);
}

model EditHtmlResourceRequest {
  ownerId?: long(name='OwnerId'),
  htmlResourceId?: string(name='HtmlResourceId'),
  casterId?: string(name='CasterId'),
  htmlUrl?: string(name='HtmlUrl'),
  htmlContent?: string(name='htmlContent'),
  config?: string(name='Config'),
}

model EditHtmlResourceResponseBody = {
  requestId?: string(name='RequestId'),
  htmlResourceId?: string(name='HtmlResourceId'),
}

model EditHtmlResourceResponse = {
  headers: map[string]string(name='headers'),
  body: EditHtmlResourceResponseBody(name='body'),
}

async function editHtmlResourceWithOptions(request: EditHtmlResourceRequest, runtime: Util.RuntimeOptions): EditHtmlResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EditHtmlResource', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function editHtmlResource(request: EditHtmlResourceRequest): EditHtmlResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return editHtmlResourceWithOptions(request, runtime);
}

model EditPlaylistRequest {
  ownerId?: long(name='OwnerId'),
  programId?: string(name='ProgramId'),
  programItems?: string(name='ProgramItems'),
  programConfig?: string(name='ProgramConfig'),
}

model EditPlaylistResponseBody = {
  requestId?: string(name='RequestId'),
  items?: {
    successItems?: [ 
      {
        itemName?: string(name='ItemName'),
        itemId?: string(name='ItemId'),
      }
    ](name='SuccessItems'),
    failedItems?: [ 
      {
        itemName?: string(name='ItemName'),
        itemId?: string(name='ItemId'),
      }
    ](name='FailedItems'),
  }(name='Items'),
  programId?: string(name='ProgramId'),
  casterId?: string(name='CasterId'),
}

model EditPlaylistResponse = {
  headers: map[string]string(name='headers'),
  body: EditPlaylistResponseBody(name='body'),
}

async function editPlaylistWithOptions(request: EditPlaylistRequest, runtime: Util.RuntimeOptions): EditPlaylistResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EditPlaylist', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function editPlaylist(request: EditPlaylistRequest): EditPlaylistResponse {
  var runtime = new Util.RuntimeOptions{};
  return editPlaylistWithOptions(request, runtime);
}

model EffectCasterUrgentRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  sceneId?: string(name='SceneId'),
}

model EffectCasterUrgentResponseBody = {
  requestId?: string(name='RequestId'),
}

model EffectCasterUrgentResponse = {
  headers: map[string]string(name='headers'),
  body: EffectCasterUrgentResponseBody(name='body'),
}

async function effectCasterUrgentWithOptions(request: EffectCasterUrgentRequest, runtime: Util.RuntimeOptions): EffectCasterUrgentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EffectCasterUrgent', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function effectCasterUrgent(request: EffectCasterUrgentRequest): EffectCasterUrgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return effectCasterUrgentWithOptions(request, runtime);
}

model EffectCasterVideoResourceRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  sceneId?: string(name='SceneId'),
  resourceId?: string(name='ResourceId'),
}

model EffectCasterVideoResourceResponseBody = {
  requestId?: string(name='RequestId'),
}

model EffectCasterVideoResourceResponse = {
  headers: map[string]string(name='headers'),
  body: EffectCasterVideoResourceResponseBody(name='body'),
}

async function effectCasterVideoResourceWithOptions(request: EffectCasterVideoResourceRequest, runtime: Util.RuntimeOptions): EffectCasterVideoResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EffectCasterVideoResource', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function effectCasterVideoResource(request: EffectCasterVideoResourceRequest): EffectCasterVideoResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return effectCasterVideoResourceWithOptions(request, runtime);
}

model EnableLiveRealtimeLogDeliveryRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model EnableLiveRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableLiveRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: EnableLiveRealtimeLogDeliveryResponseBody(name='body'),
}

async function enableLiveRealtimeLogDeliveryWithOptions(request: EnableLiveRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): EnableLiveRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('EnableLiveRealtimeLogDelivery', '2016-11-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function enableLiveRealtimeLogDelivery(request: EnableLiveRealtimeLogDeliveryRequest): EnableLiveRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableLiveRealtimeLogDeliveryWithOptions(request, runtime);
}

model ForbidLiveStreamRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  liveStreamType?: string(name='LiveStreamType'),
  oneshot?: string(name='Oneshot'),
  resumeTime?: string(name='ResumeTime'),
}

model ForbidLiveStreamResponseBody = {
  requestId?: string(name='RequestId'),
}

model ForbidLiveStreamResponse = {
  headers: map[string]string(name='headers'),
  body: ForbidLiveStreamResponseBody(name='body'),
}

async function forbidLiveStreamWithOptions(request: ForbidLiveStreamRequest, runtime: Util.RuntimeOptions): ForbidLiveStreamResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ForbidLiveStream', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function forbidLiveStream(request: ForbidLiveStreamRequest): ForbidLiveStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return forbidLiveStreamWithOptions(request, runtime);
}

model ForbidPushStreamRequest {
  ownerId?: long(name='OwnerId'),
  appId?: string(name='AppId'),
  roomId?: string(name='RoomId'),
  userData?: string(name='UserData'),
  endTime?: string(name='EndTime'),
}

model ForbidPushStreamResponseBody = {
  requestId?: string(name='RequestId'),
}

model ForbidPushStreamResponse = {
  headers: map[string]string(name='headers'),
  body: ForbidPushStreamResponseBody(name='body'),
}

async function forbidPushStreamWithOptions(request: ForbidPushStreamRequest, runtime: Util.RuntimeOptions): ForbidPushStreamResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ForbidPushStream', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function forbidPushStream(request: ForbidPushStreamRequest): ForbidPushStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return forbidPushStreamWithOptions(request, runtime);
}

model GetMultiRateConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  app?: string(name='App'),
  groupId?: string(name='GroupId'),
}

model GetMultiRateConfigResponseBody = {
  app?: string(name='App'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  isLazy?: string(name='IsLazy'),
  isTimeAlign?: string(name='IsTimeAlign'),
  stream?: string(name='Stream'),
  domain?: string(name='Domain'),
  avFormat?: string(name='AvFormat'),
  code?: int32(name='Code'),
  templatesInfo?: {
    detail?: [ 
    {
      audioBitrate?: int32(name='AudioBitrate'),
      height?: int32(name='Height'),
      template?: string(name='Template'),
      templateType?: string(name='TemplateType'),
      bandWidth?: int32(name='BandWidth'),
      profile?: int32(name='Profile'),
      audioRate?: int32(name='AudioRate'),
      audioCodec?: string(name='AudioCodec'),
      gop?: string(name='Gop'),
      videoBitrate?: int32(name='VideoBitrate'),
      width?: int32(name='Width'),
      audioChannelNum?: int32(name='AudioChannelNum'),
      fps?: int32(name='Fps'),
      audioProfile?: string(name='AudioProfile'),
    }
  ](name='Detail')
  }(name='TemplatesInfo'),
  groupId?: string(name='GroupId'),
}

model GetMultiRateConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetMultiRateConfigResponseBody(name='body'),
}

async function getMultiRateConfigWithOptions(request: GetMultiRateConfigRequest, runtime: Util.RuntimeOptions): GetMultiRateConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetMultiRateConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getMultiRateConfig(request: GetMultiRateConfigRequest): GetMultiRateConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMultiRateConfigWithOptions(request, runtime);
}

model GetMultiRateConfigListRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model GetMultiRateConfigListResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  groupInfo?: {
    info?: [ 
    {
      groupId?: string(name='GroupId'),
      app?: string(name='App'),
      avFormat?: string(name='AvFormat'),
      count?: int32(name='Count'),
    }
  ](name='Info')
  }(name='GroupInfo'),
  code?: int32(name='Code'),
}

model GetMultiRateConfigListResponse = {
  headers: map[string]string(name='headers'),
  body: GetMultiRateConfigListResponseBody(name='body'),
}

async function getMultiRateConfigListWithOptions(request: GetMultiRateConfigListRequest, runtime: Util.RuntimeOptions): GetMultiRateConfigListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetMultiRateConfigList', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getMultiRateConfigList(request: GetMultiRateConfigListRequest): GetMultiRateConfigListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMultiRateConfigListWithOptions(request, runtime);
}

model JoinBoardRequest {
  ownerId?: long(name='OwnerId'),
  appId?: string(name='AppId'),
  appUid?: string(name='AppUid'),
  boardId?: string(name='BoardId'),
}

model JoinBoardResponseBody = {
  boardId?: string(name='BoardId'),
  requestId?: string(name='RequestId'),
  token?: string(name='Token'),
  topicId?: string(name='TopicId'),
  keepaliveTopic?: string(name='KeepaliveTopic'),
  keepaliveInterval?: int32(name='KeepaliveInterval'),
}

model JoinBoardResponse = {
  headers: map[string]string(name='headers'),
  body: JoinBoardResponseBody(name='body'),
}

async function joinBoardWithOptions(request: JoinBoardRequest, runtime: Util.RuntimeOptions): JoinBoardResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('JoinBoard', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function joinBoard(request: JoinBoardRequest): JoinBoardResponse {
  var runtime = new Util.RuntimeOptions{};
  return joinBoardWithOptions(request, runtime);
}

model ListLiveRealtimeLogDeliveryRequest {
  ownerId?: long(name='OwnerId'),
  liveOpenapiReserve?: string(name='LiveOpenapiReserve'),
}

model ListLiveRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
  content?: {
    realtimeLogDeliveryInfo?: [ 
    {
      status?: string(name='Status'),
      dmId?: int32(name='DmId'),
      region?: string(name='Region'),
      logstore?: string(name='Logstore'),
      project?: string(name='Project'),
      domainName?: string(name='DomainName'),
    }
  ](name='RealtimeLogDeliveryInfo')
  }(name='Content'),
}

model ListLiveRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: ListLiveRealtimeLogDeliveryResponseBody(name='body'),
}

async function listLiveRealtimeLogDeliveryWithOptions(request: ListLiveRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): ListLiveRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListLiveRealtimeLogDelivery', '2016-11-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listLiveRealtimeLogDelivery(request: ListLiveRealtimeLogDeliveryRequest): ListLiveRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLiveRealtimeLogDeliveryWithOptions(request, runtime);
}

model ListLiveRealtimeLogDeliveryDomainsRequest {
  ownerId?: long(name='OwnerId'),
  project?: string(name='Project'),
  logstore?: string(name='Logstore'),
  region?: string(name='Region'),
}

model ListLiveRealtimeLogDeliveryDomainsResponseBody = {
  requestId?: string(name='RequestId'),
  content?: {
    domains?: [ 
    {
      status?: string(name='Status'),
      domainName?: string(name='DomainName'),
    }
  ](name='Domains')
  }(name='Content'),
}

model ListLiveRealtimeLogDeliveryDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: ListLiveRealtimeLogDeliveryDomainsResponseBody(name='body'),
}

async function listLiveRealtimeLogDeliveryDomainsWithOptions(request: ListLiveRealtimeLogDeliveryDomainsRequest, runtime: Util.RuntimeOptions): ListLiveRealtimeLogDeliveryDomainsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListLiveRealtimeLogDeliveryDomains', '2016-11-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listLiveRealtimeLogDeliveryDomains(request: ListLiveRealtimeLogDeliveryDomainsRequest): ListLiveRealtimeLogDeliveryDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLiveRealtimeLogDeliveryDomainsWithOptions(request, runtime);
}

model ListLiveRealtimeLogDeliveryInfosRequest {
  ownerId?: long(name='OwnerId'),
  liveOpenapiReserve?: string(name='LiveOpenapiReserve'),
}

model ListLiveRealtimeLogDeliveryInfosResponseBody = {
  requestId?: string(name='RequestId'),
  content?: {
    realtimeLogDeliveryInfos?: [ 
    {
      region?: string(name='Region'),
      logstore?: string(name='Logstore'),
      project?: string(name='Project'),
    }
  ](name='RealtimeLogDeliveryInfos')
  }(name='Content'),
}

model ListLiveRealtimeLogDeliveryInfosResponse = {
  headers: map[string]string(name='headers'),
  body: ListLiveRealtimeLogDeliveryInfosResponseBody(name='body'),
}

async function listLiveRealtimeLogDeliveryInfosWithOptions(request: ListLiveRealtimeLogDeliveryInfosRequest, runtime: Util.RuntimeOptions): ListLiveRealtimeLogDeliveryInfosResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListLiveRealtimeLogDeliveryInfos', '2016-11-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listLiveRealtimeLogDeliveryInfos(request: ListLiveRealtimeLogDeliveryInfosRequest): ListLiveRealtimeLogDeliveryInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLiveRealtimeLogDeliveryInfosWithOptions(request, runtime);
}

model ListPlaylistRequest {
  ownerId?: long(name='OwnerId'),
  programId?: string(name='ProgramId'),
  page?: int32(name='Page'),
  pageSize?: int32(name='PageSize'),
}

model ListPlaylistResponseBody = {
  programList?: [ 
    {
      status?: int32(name='Status'),
      repeatNumber?: int32(name='RepeatNumber'),
      programName?: string(name='ProgramName'),
      programId?: string(name='ProgramId'),
      casterId?: string(name='CasterId'),
      domainName?: string(name='DomainName'),
    }
  ](name='ProgramList'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model ListPlaylistResponse = {
  headers: map[string]string(name='headers'),
  body: ListPlaylistResponseBody(name='body'),
}

async function listPlaylistWithOptions(request: ListPlaylistRequest, runtime: Util.RuntimeOptions): ListPlaylistResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListPlaylist', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listPlaylist(request: ListPlaylistRequest): ListPlaylistResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPlaylistWithOptions(request, runtime);
}

model ListPlaylistItemsRequest {
  ownerId?: long(name='OwnerId'),
  programId?: string(name='ProgramId'),
  programItemIds?: string(name='ProgramItemIds'),
}

model ListPlaylistItemsResponseBody = {
  requestId?: string(name='RequestId'),
  programItems?: [ 
    {
      index?: int32(name='Index'),
      resourceType?: string(name='ResourceType'),
      programItemId?: string(name='ProgramItemId'),
      programId?: string(name='ProgramId'),
      programItemName?: string(name='ProgramItemName'),
      resourceValue?: string(name='ResourceValue'),
    }
  ](name='ProgramItems'),
  total?: int32(name='Total'),
}

model ListPlaylistItemsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPlaylistItemsResponseBody(name='body'),
}

async function listPlaylistItemsWithOptions(request: ListPlaylistItemsRequest, runtime: Util.RuntimeOptions): ListPlaylistItemsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListPlaylistItems', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listPlaylistItems(request: ListPlaylistItemsRequest): ListPlaylistItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPlaylistItemsWithOptions(request, runtime);
}

model ModifyCasterComponentRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  componentId?: string(name='ComponentId'),
  componentName?: string(name='ComponentName'),
  componentType?: string(name='ComponentType'),
  effect?: string(name='Effect'),
  componentLayer?: string(name='ComponentLayer'),
  textLayerContent?: string(name='TextLayerContent'),
  imageLayerContent?: string(name='ImageLayerContent'),
  captionLayerContent?: string(name='CaptionLayerContent'),
}

model ModifyCasterComponentResponseBody = {
  requestId?: string(name='RequestId'),
  componentId?: string(name='ComponentId'),
}

model ModifyCasterComponentResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCasterComponentResponseBody(name='body'),
}

async function modifyCasterComponentWithOptions(request: ModifyCasterComponentRequest, runtime: Util.RuntimeOptions): ModifyCasterComponentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyCasterComponent', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyCasterComponent(request: ModifyCasterComponentRequest): ModifyCasterComponentResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCasterComponentWithOptions(request, runtime);
}

model ModifyCasterEpisodeRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  episodeId?: string(name='EpisodeId'),
  episodeName?: string(name='EpisodeName'),
  resourceId?: string(name='ResourceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  switchType?: string(name='SwitchType'),
  componentId?: [ string ](name='ComponentId'),
}

model ModifyCasterEpisodeResponseBody = {
  requestId?: string(name='RequestId'),
  episodeId?: string(name='EpisodeId'),
  casterId?: string(name='CasterId'),
}

model ModifyCasterEpisodeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCasterEpisodeResponseBody(name='body'),
}

async function modifyCasterEpisodeWithOptions(request: ModifyCasterEpisodeRequest, runtime: Util.RuntimeOptions): ModifyCasterEpisodeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyCasterEpisode', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyCasterEpisode(request: ModifyCasterEpisodeRequest): ModifyCasterEpisodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCasterEpisodeWithOptions(request, runtime);
}

model ModifyCasterLayoutRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  layoutId?: string(name='LayoutId'),
  videoLayer?: [ 
    {
      fixedDelayDuration?: int32(name='FixedDelayDuration'),
      heightNormalized?: float(name='HeightNormalized'),
      fillMode?: string(name='FillMode'),
      positionRefer?: string(name='PositionRefer'),
      positionNormalized?: [ number ](name='PositionNormalized'),
      widthNormalized?: float(name='WidthNormalized'),
    }
  ](name='VideoLayer'),
  audioLayer?: [ 
    {
      volumeRate?: float(name='VolumeRate'),
      fixedDelayDuration?: int32(name='FixedDelayDuration'),
      validChannel?: string(name='ValidChannel'),
    }
  ](name='AudioLayer'),
  blendList?: [ string ](name='BlendList'),
  mixList?: [ string ](name='MixList'),
}

model ModifyCasterLayoutResponseBody = {
  requestId?: string(name='RequestId'),
  layoutId?: string(name='LayoutId'),
}

model ModifyCasterLayoutResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCasterLayoutResponseBody(name='body'),
}

async function modifyCasterLayoutWithOptions(request: ModifyCasterLayoutRequest, runtime: Util.RuntimeOptions): ModifyCasterLayoutResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyCasterLayout', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyCasterLayout(request: ModifyCasterLayoutRequest): ModifyCasterLayoutResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCasterLayoutWithOptions(request, runtime);
}

model ModifyCasterProgramRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  episode?: [ 
    {
      endTime?: string(name='EndTime'),
      startTime?: string(name='StartTime'),
      episodeName?: string(name='EpisodeName'),
      episodeType?: string(name='EpisodeType'),
      episodeId?: string(name='EpisodeId'),
      resourceId?: string(name='ResourceId'),
      componentId?: [ string ](name='ComponentId'),
      switchType?: string(name='SwitchType'),
    }
  ](name='Episode'),
}

model ModifyCasterProgramResponseBody = {
  requestId?: string(name='RequestId'),
  casterId?: string(name='CasterId'),
}

model ModifyCasterProgramResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCasterProgramResponseBody(name='body'),
}

async function modifyCasterProgramWithOptions(request: ModifyCasterProgramRequest, runtime: Util.RuntimeOptions): ModifyCasterProgramResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyCasterProgram', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyCasterProgram(request: ModifyCasterProgramRequest): ModifyCasterProgramResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCasterProgramWithOptions(request, runtime);
}

model ModifyCasterVideoResourceRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  resourceId?: string(name='ResourceId'),
  resourceName?: string(name='ResourceName'),
  liveStreamUrl?: string(name='LiveStreamUrl'),
  materialId?: string(name='MaterialId'),
  vodUrl?: string(name='VodUrl'),
  beginOffset?: int32(name='BeginOffset'),
  endOffset?: int32(name='EndOffset'),
  repeatNum?: int32(name='RepeatNum'),
  ptsCallbackInterval?: int32(name='PtsCallbackInterval'),
}

model ModifyCasterVideoResourceResponseBody = {
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
  casterId?: string(name='CasterId'),
}

model ModifyCasterVideoResourceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCasterVideoResourceResponseBody(name='body'),
}

async function modifyCasterVideoResourceWithOptions(request: ModifyCasterVideoResourceRequest, runtime: Util.RuntimeOptions): ModifyCasterVideoResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyCasterVideoResource', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyCasterVideoResource(request: ModifyCasterVideoResourceRequest): ModifyCasterVideoResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCasterVideoResourceWithOptions(request, runtime);
}

model ModifyLiveDomainSchdmByPropertyRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  property?: string(name='Property'),
}

model ModifyLiveDomainSchdmByPropertyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyLiveDomainSchdmByPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLiveDomainSchdmByPropertyResponseBody(name='body'),
}

async function modifyLiveDomainSchdmByPropertyWithOptions(request: ModifyLiveDomainSchdmByPropertyRequest, runtime: Util.RuntimeOptions): ModifyLiveDomainSchdmByPropertyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyLiveDomainSchdmByProperty', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyLiveDomainSchdmByProperty(request: ModifyLiveDomainSchdmByPropertyRequest): ModifyLiveDomainSchdmByPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLiveDomainSchdmByPropertyWithOptions(request, runtime);
}

model ModifyLiveRealtimeLogDeliveryRequest {
  ownerId?: long(name='OwnerId'),
  project?: string(name='Project'),
  logstore?: string(name='Logstore'),
  region?: string(name='Region'),
  domainName?: string(name='DomainName'),
}

model ModifyLiveRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyLiveRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLiveRealtimeLogDeliveryResponseBody(name='body'),
}

async function modifyLiveRealtimeLogDeliveryWithOptions(request: ModifyLiveRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): ModifyLiveRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ModifyLiveRealtimeLogDelivery', '2016-11-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function modifyLiveRealtimeLogDelivery(request: ModifyLiveRealtimeLogDeliveryRequest): ModifyLiveRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLiveRealtimeLogDeliveryWithOptions(request, runtime);
}

model ModifyStudioLayoutRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  layoutId?: string(name='LayoutId'),
  layoutName?: string(name='LayoutName'),
  commonConfig?: string(name='CommonConfig'),
  bgImageConfig?: string(name='BgImageConfig'),
  screenInputConfigList?: string(name='ScreenInputConfigList'),
  mediaInputConfigList?: string(name='MediaInputConfigList'),
  layerOrderConfigList?: string(name='LayerOrderConfigList'),
}

model ModifyStudioLayoutResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyStudioLayoutResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyStudioLayoutResponseBody(name='body'),
}

async function modifyStudioLayoutWithOptions(request: ModifyStudioLayoutRequest, runtime: Util.RuntimeOptions): ModifyStudioLayoutResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyStudioLayout', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyStudioLayout(request: ModifyStudioLayoutRequest): ModifyStudioLayoutResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyStudioLayoutWithOptions(request, runtime);
}

model OpenLiveShiftRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  duration?: int32(name='Duration'),
  vision?: int32(name='Vision'),
}

model OpenLiveShiftResponseBody = {
  requestId?: string(name='RequestId'),
}

model OpenLiveShiftResponse = {
  headers: map[string]string(name='headers'),
  body: OpenLiveShiftResponseBody(name='body'),
}

async function openLiveShiftWithOptions(request: OpenLiveShiftRequest, runtime: Util.RuntimeOptions): OpenLiveShiftResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OpenLiveShift', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function openLiveShift(request: OpenLiveShiftRequest): OpenLiveShiftResponse {
  var runtime = new Util.RuntimeOptions{};
  return openLiveShiftWithOptions(request, runtime);
}

model RealTimeRecordCommandRequest {
  ownerId?: long(name='OwnerId'),
  command?: string(name='Command'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
}

model RealTimeRecordCommandResponseBody = {
  requestId?: string(name='RequestId'),
}

model RealTimeRecordCommandResponse = {
  headers: map[string]string(name='headers'),
  body: RealTimeRecordCommandResponseBody(name='body'),
}

async function realTimeRecordCommandWithOptions(request: RealTimeRecordCommandRequest, runtime: Util.RuntimeOptions): RealTimeRecordCommandResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RealTimeRecordCommand', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function realTimeRecordCommand(request: RealTimeRecordCommandRequest): RealTimeRecordCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return realTimeRecordCommandWithOptions(request, runtime);
}

model RealTimeSnapshotCommandRequest {
  ownerId?: long(name='OwnerId'),
  command?: string(name='Command'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  mode?: int32(name='Mode'),
  interval?: int32(name='Interval'),
}

model RealTimeSnapshotCommandResponseBody = {
  requestId?: string(name='RequestId'),
}

model RealTimeSnapshotCommandResponse = {
  headers: map[string]string(name='headers'),
  body: RealTimeSnapshotCommandResponseBody(name='body'),
}

async function realTimeSnapshotCommandWithOptions(request: RealTimeSnapshotCommandRequest, runtime: Util.RuntimeOptions): RealTimeSnapshotCommandResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RealTimeSnapshotCommand', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function realTimeSnapshotCommand(request: RealTimeSnapshotCommandRequest): RealTimeSnapshotCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return realTimeSnapshotCommandWithOptions(request, runtime);
}

model ResumeLiveStreamRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  liveStreamType?: string(name='LiveStreamType'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
}

model ResumeLiveStreamResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResumeLiveStreamResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeLiveStreamResponseBody(name='body'),
}

async function resumeLiveStreamWithOptions(request: ResumeLiveStreamRequest, runtime: Util.RuntimeOptions): ResumeLiveStreamResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResumeLiveStream', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resumeLiveStream(request: ResumeLiveStreamRequest): ResumeLiveStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumeLiveStreamWithOptions(request, runtime);
}

model SendRoomNotificationRequest {
  ownerId?: long(name='OwnerId'),
  appId?: string(name='AppId'),
  roomId?: string(name='RoomId'),
  appUid?: string(name='AppUid'),
  data?: string(name='Data'),
  priority?: int32(name='Priority'),
}

model SendRoomNotificationResponseBody = {
  requestId?: string(name='RequestId'),
  messageId?: string(name='MessageId'),
}

model SendRoomNotificationResponse = {
  headers: map[string]string(name='headers'),
  body: SendRoomNotificationResponseBody(name='body'),
}

async function sendRoomNotificationWithOptions(request: SendRoomNotificationRequest, runtime: Util.RuntimeOptions): SendRoomNotificationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SendRoomNotification', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function sendRoomNotification(request: SendRoomNotificationRequest): SendRoomNotificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendRoomNotificationWithOptions(request, runtime);
}

model SendRoomUserNotificationRequest {
  ownerId?: long(name='OwnerId'),
  appId?: string(name='AppId'),
  roomId?: string(name='RoomId'),
  appUid?: string(name='AppUid'),
  toAppUid?: string(name='ToAppUid'),
  data?: string(name='Data'),
  priority?: int32(name='Priority'),
}

model SendRoomUserNotificationResponseBody = {
  requestId?: string(name='RequestId'),
  messageId?: string(name='MessageId'),
}

model SendRoomUserNotificationResponse = {
  headers: map[string]string(name='headers'),
  body: SendRoomUserNotificationResponseBody(name='body'),
}

async function sendRoomUserNotificationWithOptions(request: SendRoomUserNotificationRequest, runtime: Util.RuntimeOptions): SendRoomUserNotificationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SendRoomUserNotification', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function sendRoomUserNotification(request: SendRoomUserNotificationRequest): SendRoomUserNotificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendRoomUserNotificationWithOptions(request, runtime);
}

model SetBoardCallbackRequest {
  ownerId?: long(name='OwnerId'),
  appId?: string(name='AppId'),
  authKey?: string(name='AuthKey'),
  authSwitch?: string(name='AuthSwitch'),
  callbackEnable?: int32(name='CallbackEnable'),
  callbackUri?: string(name='CallbackUri'),
  callbackEvents?: string(name='CallbackEvents'),
}

model SetBoardCallbackResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetBoardCallbackResponse = {
  headers: map[string]string(name='headers'),
  body: SetBoardCallbackResponseBody(name='body'),
}

async function setBoardCallbackWithOptions(request: SetBoardCallbackRequest, runtime: Util.RuntimeOptions): SetBoardCallbackResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetBoardCallback', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setBoardCallback(request: SetBoardCallbackRequest): SetBoardCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return setBoardCallbackWithOptions(request, runtime);
}

model SetCasterChannelRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  channelId?: string(name='ChannelId'),
  resourceId?: string(name='ResourceId'),
  seekOffset?: int32(name='SeekOffset'),
  playStatus?: int32(name='PlayStatus'),
}

model SetCasterChannelResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetCasterChannelResponse = {
  headers: map[string]string(name='headers'),
  body: SetCasterChannelResponseBody(name='body'),
}

async function setCasterChannelWithOptions(request: SetCasterChannelRequest, runtime: Util.RuntimeOptions): SetCasterChannelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetCasterChannel', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setCasterChannel(request: SetCasterChannelRequest): SetCasterChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return setCasterChannelWithOptions(request, runtime);
}

model SetCasterConfigRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  casterName?: string(name='CasterName'),
  domainName?: string(name='DomainName'),
  transcodeConfig?: string(name='TranscodeConfig'),
  recordConfig?: string(name='RecordConfig'),
  delay?: float(name='Delay'),
  urgentMaterialId?: string(name='UrgentMaterialId'),
  sideOutputUrl?: string(name='SideOutputUrl'),
  callbackUrl?: string(name='CallbackUrl'),
  programEffect?: int32(name='ProgramEffect'),
  programName?: string(name='ProgramName'),
  channelEnable?: int32(name='ChannelEnable'),
}

model SetCasterConfigResponseBody = {
  requestId?: string(name='RequestId'),
  casterId?: string(name='CasterId'),
}

model SetCasterConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetCasterConfigResponseBody(name='body'),
}

async function setCasterConfigWithOptions(request: SetCasterConfigRequest, runtime: Util.RuntimeOptions): SetCasterConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetCasterConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setCasterConfig(request: SetCasterConfigRequest): SetCasterConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setCasterConfigWithOptions(request, runtime);
}

model SetCasterSceneConfigRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  sceneId?: string(name='SceneId'),
  layoutId?: string(name='LayoutId'),
  componentId?: [ string ](name='ComponentId'),
}

model SetCasterSceneConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetCasterSceneConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetCasterSceneConfigResponseBody(name='body'),
}

async function setCasterSceneConfigWithOptions(request: SetCasterSceneConfigRequest, runtime: Util.RuntimeOptions): SetCasterSceneConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetCasterSceneConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setCasterSceneConfig(request: SetCasterSceneConfigRequest): SetCasterSceneConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setCasterSceneConfigWithOptions(request, runtime);
}

model SetCasterSyncGroupRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  syncGroup?: [ 
    {
      hostResourceId?: string(name='HostResourceId'),
      resourceIds?: [ string ](name='ResourceIds'),
      syncDelayThreshold?: long(name='SyncDelayThreshold'),
      mode?: int32(name='Mode'),
    }
  ](name='SyncGroup'),
}

model SetCasterSyncGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetCasterSyncGroupResponse = {
  headers: map[string]string(name='headers'),
  body: SetCasterSyncGroupResponseBody(name='body'),
}

async function setCasterSyncGroupWithOptions(request: SetCasterSyncGroupRequest, runtime: Util.RuntimeOptions): SetCasterSyncGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetCasterSyncGroup', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setCasterSyncGroup(request: SetCasterSyncGroupRequest): SetCasterSyncGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return setCasterSyncGroupWithOptions(request, runtime);
}

model SetLiveDomainCertificateRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  certName?: string(name='CertName'),
  certType?: string(name='CertType'),
  SSLProtocol?: string(name='SSLProtocol'),
  SSLPub?: string(name='SSLPub'),
  SSLPri?: string(name='SSLPri'),
  forceSet?: string(name='ForceSet'),
}

model SetLiveDomainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetLiveDomainCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: SetLiveDomainCertificateResponseBody(name='body'),
}

async function setLiveDomainCertificateWithOptions(request: SetLiveDomainCertificateRequest, runtime: Util.RuntimeOptions): SetLiveDomainCertificateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetLiveDomainCertificate', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setLiveDomainCertificate(request: SetLiveDomainCertificateRequest): SetLiveDomainCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setLiveDomainCertificateWithOptions(request, runtime);
}

model SetLiveLazyPullStreamInfoConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  pullDomainName?: string(name='PullDomainName'),
  pullAppName?: string(name='PullAppName'),
  pullProtocol?: string(name='PullProtocol'),
}

model SetLiveLazyPullStreamInfoConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetLiveLazyPullStreamInfoConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetLiveLazyPullStreamInfoConfigResponseBody(name='body'),
}

async function setLiveLazyPullStreamInfoConfigWithOptions(request: SetLiveLazyPullStreamInfoConfigRequest, runtime: Util.RuntimeOptions): SetLiveLazyPullStreamInfoConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetLiveLazyPullStreamInfoConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setLiveLazyPullStreamInfoConfig(request: SetLiveLazyPullStreamInfoConfigRequest): SetLiveLazyPullStreamInfoConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setLiveLazyPullStreamInfoConfigWithOptions(request, runtime);
}

model SetLiveStreamDelayConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  hlsDelay?: int32(name='HlsDelay'),
  hlsLevel?: string(name='HlsLevel'),
  flvDelay?: int32(name='FlvDelay'),
  flvLevel?: string(name='FlvLevel'),
  rtmpDelay?: int32(name='RtmpDelay'),
  rtmpLevel?: string(name='RtmpLevel'),
}

model SetLiveStreamDelayConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetLiveStreamDelayConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetLiveStreamDelayConfigResponseBody(name='body'),
}

async function setLiveStreamDelayConfigWithOptions(request: SetLiveStreamDelayConfigRequest, runtime: Util.RuntimeOptions): SetLiveStreamDelayConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetLiveStreamDelayConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setLiveStreamDelayConfig(request: SetLiveStreamDelayConfigRequest): SetLiveStreamDelayConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setLiveStreamDelayConfigWithOptions(request, runtime);
}

model SetLiveStreamOptimizedFeatureConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  configName?: string(name='ConfigName'),
  configStatus?: string(name='ConfigStatus'),
  configValue?: string(name='ConfigValue'),
}

model SetLiveStreamOptimizedFeatureConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetLiveStreamOptimizedFeatureConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetLiveStreamOptimizedFeatureConfigResponseBody(name='body'),
}

async function setLiveStreamOptimizedFeatureConfigWithOptions(request: SetLiveStreamOptimizedFeatureConfigRequest, runtime: Util.RuntimeOptions): SetLiveStreamOptimizedFeatureConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetLiveStreamOptimizedFeatureConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setLiveStreamOptimizedFeatureConfig(request: SetLiveStreamOptimizedFeatureConfigRequest): SetLiveStreamOptimizedFeatureConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setLiveStreamOptimizedFeatureConfigWithOptions(request, runtime);
}

model SetLiveStreamsNotifyUrlConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  notifyUrl?: string(name='NotifyUrl'),
}

model SetLiveStreamsNotifyUrlConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetLiveStreamsNotifyUrlConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetLiveStreamsNotifyUrlConfigResponseBody(name='body'),
}

async function setLiveStreamsNotifyUrlConfigWithOptions(request: SetLiveStreamsNotifyUrlConfigRequest, runtime: Util.RuntimeOptions): SetLiveStreamsNotifyUrlConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetLiveStreamsNotifyUrlConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setLiveStreamsNotifyUrlConfig(request: SetLiveStreamsNotifyUrlConfigRequest): SetLiveStreamsNotifyUrlConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setLiveStreamsNotifyUrlConfigWithOptions(request, runtime);
}

model StartBoardRecordRequest {
  ownerId?: long(name='OwnerId'),
  appId?: string(name='AppId'),
  boardId?: string(name='BoardId'),
  startTime?: string(name='StartTime'),
}

model StartBoardRecordResponseBody = {
  requestId?: string(name='RequestId'),
  recordId?: string(name='RecordId'),
}

model StartBoardRecordResponse = {
  headers: map[string]string(name='headers'),
  body: StartBoardRecordResponseBody(name='body'),
}

async function startBoardRecordWithOptions(request: StartBoardRecordRequest, runtime: Util.RuntimeOptions): StartBoardRecordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartBoardRecord', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startBoardRecord(request: StartBoardRecordRequest): StartBoardRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return startBoardRecordWithOptions(request, runtime);
}

model StartCasterRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
}

model StartCasterResponseBody = {
  requestId?: string(name='RequestId'),
  pvwSceneInfos?: {
    sceneInfo?: [ 
    {
      sceneId?: string(name='SceneId'),
      streamUrl?: string(name='StreamUrl'),
    }
  ](name='SceneInfo')
  }(name='PvwSceneInfos'),
  pgmSceneInfos?: {
    sceneInfo?: [ 
    {
      streamInfos?: {
        streamInfo?: [ 
        {
          videoFormat?: string(name='VideoFormat'),
          outputStreamUrl?: string(name='OutputStreamUrl'),
          transcodeConfig?: string(name='TranscodeConfig'),
        }
      ](name='StreamInfo')
      }(name='StreamInfos'),
      sceneId?: string(name='SceneId'),
      streamUrl?: string(name='StreamUrl'),
    }
  ](name='SceneInfo')
  }(name='PgmSceneInfos'),
}

model StartCasterResponse = {
  headers: map[string]string(name='headers'),
  body: StartCasterResponseBody(name='body'),
}

async function startCasterWithOptions(request: StartCasterRequest, runtime: Util.RuntimeOptions): StartCasterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartCaster', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startCaster(request: StartCasterRequest): StartCasterResponse {
  var runtime = new Util.RuntimeOptions{};
  return startCasterWithOptions(request, runtime);
}

model StartCasterSceneRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  sceneId?: string(name='SceneId'),
}

model StartCasterSceneResponseBody = {
  requestId?: string(name='RequestId'),
  streamUrl?: string(name='StreamUrl'),
}

model StartCasterSceneResponse = {
  headers: map[string]string(name='headers'),
  body: StartCasterSceneResponseBody(name='body'),
}

async function startCasterSceneWithOptions(request: StartCasterSceneRequest, runtime: Util.RuntimeOptions): StartCasterSceneResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartCasterScene', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startCasterScene(request: StartCasterSceneRequest): StartCasterSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  return startCasterSceneWithOptions(request, runtime);
}

model StartLiveDomainRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
}

model StartLiveDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartLiveDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StartLiveDomainResponseBody(name='body'),
}

async function startLiveDomainWithOptions(request: StartLiveDomainRequest, runtime: Util.RuntimeOptions): StartLiveDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartLiveDomain', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startLiveDomain(request: StartLiveDomainRequest): StartLiveDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return startLiveDomainWithOptions(request, runtime);
}

model StartLiveIndexRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  tokenId?: string(name='TokenId'),
  inputUrl?: string(name='InputUrl'),
  interval?: int32(name='Interval'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
  ossUserId?: string(name='OssUserId'),
  ossRamRole?: string(name='OssRamRole'),
}

model StartLiveIndexResponseBody = {
  taskId?: string(name='TaskId'),
  requestId?: string(name='RequestId'),
}

model StartLiveIndexResponse = {
  headers: map[string]string(name='headers'),
  body: StartLiveIndexResponseBody(name='body'),
}

async function startLiveIndexWithOptions(request: StartLiveIndexRequest, runtime: Util.RuntimeOptions): StartLiveIndexResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartLiveIndex', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startLiveIndex(request: StartLiveIndexRequest): StartLiveIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  return startLiveIndexWithOptions(request, runtime);
}

model StartPlaylistRequest {
  ownerId?: long(name='OwnerId'),
  programId?: string(name='ProgramId'),
  resumeMode?: string(name='ResumeMode'),
  startItemId?: string(name='StartItemId'),
  offset?: int32(name='Offset'),
}

model StartPlaylistResponseBody = {
  requestId?: string(name='RequestId'),
  streamInfo?: {
    appName?: string(name='AppName'),
    streamName?: string(name='StreamName'),
    streams?: {
      stream?: [ 
      {
        quality?: string(name='Quality'),
        pullFlvUrl?: string(name='PullFlvUrl'),
        pullM3U8Url?: string(name='PullM3U8Url'),
        pullRtmpUrl?: string(name='PullRtmpUrl'),
      }
    ](name='Stream')
    }(name='Streams'),
    domainName?: string(name='DomainName'),
  }(name='StreamInfo'),
  programId?: string(name='ProgramId'),
}

model StartPlaylistResponse = {
  headers: map[string]string(name='headers'),
  body: StartPlaylistResponseBody(name='body'),
}

async function startPlaylistWithOptions(request: StartPlaylistRequest, runtime: Util.RuntimeOptions): StartPlaylistResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartPlaylist', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startPlaylist(request: StartPlaylistRequest): StartPlaylistResponse {
  var runtime = new Util.RuntimeOptions{};
  return startPlaylistWithOptions(request, runtime);
}

model StopCasterRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
}

model StopCasterResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopCasterResponse = {
  headers: map[string]string(name='headers'),
  body: StopCasterResponseBody(name='body'),
}

async function stopCasterWithOptions(request: StopCasterRequest, runtime: Util.RuntimeOptions): StopCasterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopCaster', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopCaster(request: StopCasterRequest): StopCasterResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopCasterWithOptions(request, runtime);
}

model StopCasterSceneRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  sceneId?: string(name='SceneId'),
}

model StopCasterSceneResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopCasterSceneResponse = {
  headers: map[string]string(name='headers'),
  body: StopCasterSceneResponseBody(name='body'),
}

async function stopCasterSceneWithOptions(request: StopCasterSceneRequest, runtime: Util.RuntimeOptions): StopCasterSceneResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopCasterScene', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopCasterScene(request: StopCasterSceneRequest): StopCasterSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopCasterSceneWithOptions(request, runtime);
}

model StopLiveDomainRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
}

model StopLiveDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopLiveDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StopLiveDomainResponseBody(name='body'),
}

async function stopLiveDomainWithOptions(request: StopLiveDomainRequest, runtime: Util.RuntimeOptions): StopLiveDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopLiveDomain', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopLiveDomain(request: StopLiveDomainRequest): StopLiveDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopLiveDomainWithOptions(request, runtime);
}

model StopLiveIndexRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  taskId?: string(name='TaskId'),
}

model StopLiveIndexResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopLiveIndexResponse = {
  headers: map[string]string(name='headers'),
  body: StopLiveIndexResponseBody(name='body'),
}

async function stopLiveIndexWithOptions(request: StopLiveIndexRequest, runtime: Util.RuntimeOptions): StopLiveIndexResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopLiveIndex', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopLiveIndex(request: StopLiveIndexRequest): StopLiveIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopLiveIndexWithOptions(request, runtime);
}

model StopPlaylistRequest {
  ownerId?: long(name='OwnerId'),
  programId?: string(name='ProgramId'),
}

model StopPlaylistResponseBody = {
  requestId?: string(name='RequestId'),
  programId?: string(name='ProgramId'),
}

model StopPlaylistResponse = {
  headers: map[string]string(name='headers'),
  body: StopPlaylistResponseBody(name='body'),
}

async function stopPlaylistWithOptions(request: StopPlaylistRequest, runtime: Util.RuntimeOptions): StopPlaylistResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopPlaylist', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopPlaylist(request: StopPlaylistRequest): StopPlaylistResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopPlaylistWithOptions(request, runtime);
}

model TagLiveResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceType?: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagLiveResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagLiveResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagLiveResourcesResponseBody(name='body'),
}

async function tagLiveResourcesWithOptions(request: TagLiveResourcesRequest, runtime: Util.RuntimeOptions): TagLiveResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagLiveResources', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagLiveResources(request: TagLiveResourcesRequest): TagLiveResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagLiveResourcesWithOptions(request, runtime);
}

model UnTagLiveResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceType?: string(name='ResourceType'),
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UnTagLiveResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnTagLiveResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UnTagLiveResourcesResponseBody(name='body'),
}

async function unTagLiveResourcesWithOptions(request: UnTagLiveResourcesRequest, runtime: Util.RuntimeOptions): UnTagLiveResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnTagLiveResources', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unTagLiveResources(request: UnTagLiveResourcesRequest): UnTagLiveResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return unTagLiveResourcesWithOptions(request, runtime);
}

model UpdateBoardRequest {
  ownerId?: long(name='OwnerId'),
  appId?: string(name='AppId'),
  boardData?: string(name='BoardData'),
}

model UpdateBoardResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateBoardResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateBoardResponseBody(name='body'),
}

async function updateBoardWithOptions(request: UpdateBoardRequest, runtime: Util.RuntimeOptions): UpdateBoardResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateBoard', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateBoard(request: UpdateBoardRequest): UpdateBoardResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateBoardWithOptions(request, runtime);
}

model UpdateBoardCallbackRequest {
  ownerId?: long(name='OwnerId'),
  appId?: string(name='AppId'),
  authKey?: string(name='AuthKey'),
  authSwitch?: string(name='AuthSwitch'),
  callbackEnable?: int32(name='CallbackEnable'),
  callbackUri?: string(name='CallbackUri'),
  callbackEvents?: string(name='CallbackEvents'),
}

model UpdateBoardCallbackResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateBoardCallbackResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateBoardCallbackResponseBody(name='body'),
}

async function updateBoardCallbackWithOptions(request: UpdateBoardCallbackRequest, runtime: Util.RuntimeOptions): UpdateBoardCallbackResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateBoardCallback', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateBoardCallback(request: UpdateBoardCallbackRequest): UpdateBoardCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateBoardCallbackWithOptions(request, runtime);
}

model UpdateCasterSceneAudioRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  sceneId?: string(name='SceneId'),
  followEnable?: int32(name='FollowEnable'),
  audioLayer?: [ 
    {
      volumeRate?: float(name='VolumeRate'),
      fixedDelayDuration?: int32(name='FixedDelayDuration'),
      validChannel?: string(name='ValidChannel'),
    }
  ](name='AudioLayer'),
  mixList?: [ string ](name='MixList'),
}

model UpdateCasterSceneAudioResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateCasterSceneAudioResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCasterSceneAudioResponseBody(name='body'),
}

async function updateCasterSceneAudioWithOptions(request: UpdateCasterSceneAudioRequest, runtime: Util.RuntimeOptions): UpdateCasterSceneAudioResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateCasterSceneAudio', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateCasterSceneAudio(request: UpdateCasterSceneAudioRequest): UpdateCasterSceneAudioResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCasterSceneAudioWithOptions(request, runtime);
}

model UpdateCasterSceneConfigRequest {
  ownerId?: long(name='OwnerId'),
  casterId?: string(name='CasterId'),
  sceneId?: string(name='SceneId'),
  layoutId?: string(name='LayoutId'),
  componentId?: [ string ](name='ComponentId'),
}

model UpdateCasterSceneConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateCasterSceneConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCasterSceneConfigResponseBody(name='body'),
}

async function updateCasterSceneConfigWithOptions(request: UpdateCasterSceneConfigRequest, runtime: Util.RuntimeOptions): UpdateCasterSceneConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateCasterSceneConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateCasterSceneConfig(request: UpdateCasterSceneConfigRequest): UpdateCasterSceneConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCasterSceneConfigWithOptions(request, runtime);
}

model UpdateLiveAppSnapshotConfigRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  timeInterval?: int32(name='TimeInterval'),
  ossEndpoint?: string(name='OssEndpoint'),
  ossBucket?: string(name='OssBucket'),
  overwriteOssObject?: string(name='OverwriteOssObject'),
  sequenceOssObject?: string(name='SequenceOssObject'),
  callback?: string(name='Callback'),
}

model UpdateLiveAppSnapshotConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateLiveAppSnapshotConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveAppSnapshotConfigResponseBody(name='body'),
}

async function updateLiveAppSnapshotConfigWithOptions(request: UpdateLiveAppSnapshotConfigRequest, runtime: Util.RuntimeOptions): UpdateLiveAppSnapshotConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateLiveAppSnapshotConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateLiveAppSnapshotConfig(request: UpdateLiveAppSnapshotConfigRequest): UpdateLiveAppSnapshotConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveAppSnapshotConfigWithOptions(request, runtime);
}

model UpdateLiveASRConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  mnsTopic?: string(name='MnsTopic'),
  mnsRegion?: string(name='MnsRegion'),
  period?: int32(name='Period'),
  httpCallbackURL?: string(name='HttpCallbackURL'),
}

model UpdateLiveASRConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateLiveASRConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveASRConfigResponseBody(name='body'),
}

async function updateLiveASRConfigWithOptions(request: UpdateLiveASRConfigRequest, runtime: Util.RuntimeOptions): UpdateLiveASRConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateLiveASRConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateLiveASRConfig(request: UpdateLiveASRConfigRequest): UpdateLiveASRConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveASRConfigWithOptions(request, runtime);
}

model UpdateLiveAudioAuditConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
  ossObject?: string(name='OssObject'),
  bizType?: string(name='BizType'),
}

model UpdateLiveAudioAuditConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateLiveAudioAuditConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveAudioAuditConfigResponseBody(name='body'),
}

async function updateLiveAudioAuditConfigWithOptions(request: UpdateLiveAudioAuditConfigRequest, runtime: Util.RuntimeOptions): UpdateLiveAudioAuditConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateLiveAudioAuditConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateLiveAudioAuditConfig(request: UpdateLiveAudioAuditConfigRequest): UpdateLiveAudioAuditConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveAudioAuditConfigWithOptions(request, runtime);
}

model UpdateLiveAudioAuditNotifyConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  callback?: string(name='Callback'),
  callbackTemplate?: string(name='CallbackTemplate'),
}

model UpdateLiveAudioAuditNotifyConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateLiveAudioAuditNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveAudioAuditNotifyConfigResponseBody(name='body'),
}

async function updateLiveAudioAuditNotifyConfigWithOptions(request: UpdateLiveAudioAuditNotifyConfigRequest, runtime: Util.RuntimeOptions): UpdateLiveAudioAuditNotifyConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateLiveAudioAuditNotifyConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateLiveAudioAuditNotifyConfig(request: UpdateLiveAudioAuditNotifyConfigRequest): UpdateLiveAudioAuditNotifyConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveAudioAuditNotifyConfigWithOptions(request, runtime);
}

model UpdateLiveDetectNotifyConfigRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  notifyUrl?: string(name='NotifyUrl'),
}

model UpdateLiveDetectNotifyConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateLiveDetectNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveDetectNotifyConfigResponseBody(name='body'),
}

async function updateLiveDetectNotifyConfigWithOptions(request: UpdateLiveDetectNotifyConfigRequest, runtime: Util.RuntimeOptions): UpdateLiveDetectNotifyConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateLiveDetectNotifyConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateLiveDetectNotifyConfig(request: UpdateLiveDetectNotifyConfigRequest): UpdateLiveDetectNotifyConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveDetectNotifyConfigWithOptions(request, runtime);
}

model UpdateLiveRecordNotifyConfigRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  notifyUrl?: string(name='NotifyUrl'),
  onDemandUrl?: string(name='OnDemandUrl'),
  needStatusNotify?: boolean(name='NeedStatusNotify'),
}

model UpdateLiveRecordNotifyConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateLiveRecordNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveRecordNotifyConfigResponseBody(name='body'),
}

async function updateLiveRecordNotifyConfigWithOptions(request: UpdateLiveRecordNotifyConfigRequest, runtime: Util.RuntimeOptions): UpdateLiveRecordNotifyConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateLiveRecordNotifyConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateLiveRecordNotifyConfig(request: UpdateLiveRecordNotifyConfigRequest): UpdateLiveRecordNotifyConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveRecordNotifyConfigWithOptions(request, runtime);
}

model UpdateLiveSnapshotDetectPornConfigRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  ossEndpoint?: string(name='OssEndpoint'),
  ossBucket?: string(name='OssBucket'),
  ossObject?: string(name='OssObject'),
  interval?: int32(name='Interval'),
  scene?: [ string ](name='Scene'),
}

model UpdateLiveSnapshotDetectPornConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateLiveSnapshotDetectPornConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveSnapshotDetectPornConfigResponseBody(name='body'),
}

async function updateLiveSnapshotDetectPornConfigWithOptions(request: UpdateLiveSnapshotDetectPornConfigRequest, runtime: Util.RuntimeOptions): UpdateLiveSnapshotDetectPornConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateLiveSnapshotDetectPornConfig', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateLiveSnapshotDetectPornConfig(request: UpdateLiveSnapshotDetectPornConfigRequest): UpdateLiveSnapshotDetectPornConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveSnapshotDetectPornConfigWithOptions(request, runtime);
}

model UpdateLiveTopLevelDomainRequest {
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  topLevelDomain?: string(name='TopLevelDomain'),
}

model UpdateLiveTopLevelDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateLiveTopLevelDomainResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveTopLevelDomainResponseBody(name='body'),
}

async function updateLiveTopLevelDomainWithOptions(request: UpdateLiveTopLevelDomainRequest, runtime: Util.RuntimeOptions): UpdateLiveTopLevelDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateLiveTopLevelDomain', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateLiveTopLevelDomain(request: UpdateLiveTopLevelDomainRequest): UpdateLiveTopLevelDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveTopLevelDomainWithOptions(request, runtime);
}

model UpdateMixStreamRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  mixStreamId?: string(name='MixStreamId'),
  inputStreamList?: string(name='InputStreamList'),
  layoutId?: string(name='LayoutId'),
}

model UpdateMixStreamResponseBody = {
  mixStreamId?: string(name='MixStreamId'),
  requestId?: string(name='RequestId'),
}

model UpdateMixStreamResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateMixStreamResponseBody(name='body'),
}

async function updateMixStreamWithOptions(request: UpdateMixStreamRequest, runtime: Util.RuntimeOptions): UpdateMixStreamResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateMixStream', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateMixStream(request: UpdateMixStreamRequest): UpdateMixStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMixStreamWithOptions(request, runtime);
}

model VerifyLiveDomainOwnerRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  verifyType?: string(name='VerifyType'),
}

model VerifyLiveDomainOwnerResponseBody = {
  requestId?: string(name='RequestId'),
  content?: string(name='Content'),
}

model VerifyLiveDomainOwnerResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyLiveDomainOwnerResponseBody(name='body'),
}

async function verifyLiveDomainOwnerWithOptions(request: VerifyLiveDomainOwnerRequest, runtime: Util.RuntimeOptions): VerifyLiveDomainOwnerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('VerifyLiveDomainOwner', '2016-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function verifyLiveDomainOwner(request: VerifyLiveDomainOwnerRequest): VerifyLiveDomainOwnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyLiveDomainOwnerWithOptions(request, runtime);
}

