/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'live';
  @version = '2016-11-01';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'live.aliyuncs.com',
    cn-beijing = 'live.aliyuncs.com',
    cn-hangzhou = 'live.aliyuncs.com',
    cn-shanghai = 'live.aliyuncs.com',
    cn-shenzhen = 'live.aliyuncs.com',
    ap-southeast-1 = 'live.aliyuncs.com',
    ap-southeast-5 = 'live.aliyuncs.com',
    ap-northeast-1 = 'live.aliyuncs.com',
    eu-central-1 = 'live.aliyuncs.com',
    ap-south-1 = 'live.aliyuncs.com',
    ap-northeast-2-pop = 'live.aliyuncs.com',
    ap-southeast-2 = 'live.aliyuncs.com',
    ap-southeast-3 = 'live.aliyuncs.com',
    cn-beijing-finance-1 = 'live.aliyuncs.com',
    cn-beijing-finance-pop = 'live.aliyuncs.com',
    cn-beijing-gov-1 = 'live.aliyuncs.com',
    cn-beijing-nu16-b01 = 'live.aliyuncs.com',
    cn-chengdu = 'live.aliyuncs.com',
    cn-edge-1 = 'live.aliyuncs.com',
    cn-fujian = 'live.aliyuncs.com',
    cn-haidian-cm12-c01 = 'live.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'live.aliyuncs.com',
    cn-hangzhou-finance = 'live.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'live.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'live.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'live.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'live.aliyuncs.com',
    cn-hangzhou-test-306 = 'live.aliyuncs.com',
    cn-hongkong = 'live.aliyuncs.com',
    cn-hongkong-finance-pop = 'live.aliyuncs.com',
    cn-huhehaote = 'live.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'live.aliyuncs.com',
    cn-north-2-gov-1 = 'live.aliyuncs.com',
    cn-qingdao-nebula = 'live.aliyuncs.com',
    cn-shanghai-et15-b01 = 'live.aliyuncs.com',
    cn-shanghai-et2-b01 = 'live.aliyuncs.com',
    cn-shanghai-finance-1 = 'live.aliyuncs.com',
    cn-shanghai-inner = 'live.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'live.aliyuncs.com',
    cn-shenzhen-finance-1 = 'live.aliyuncs.com',
    cn-shenzhen-inner = 'live.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'live.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'live.aliyuncs.com',
    cn-wuhan = 'live.aliyuncs.com',
    cn-wulanchabu = 'live.aliyuncs.com',
    cn-yushanfang = 'live.aliyuncs.com',
    cn-zhangbei = 'live.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'live.aliyuncs.com',
    cn-zhangjiakou = 'live.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'live.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'live.aliyuncs.com',
    eu-west-1 = 'live.aliyuncs.com',
    eu-west-1-oxs = 'live.aliyuncs.com',
    me-east-1 = 'live.aliyuncs.com',
    rus-west-1-pop = 'live.aliyuncs.com',
    us-east-1 = 'live.aliyuncs.com',
    us-west-1 = 'live.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddCasterComponentRequest {
  regionId?: string(name='RegionId', position='Host'),
  captionLayerContent?: string(name='CaptionLayerContent', position='Query'),
  casterId: string(name='CasterId', position='Query'),
  componentLayer: string(name='ComponentLayer', position='Query'),
  componentName?: string(name='ComponentName', position='Query'),
  componentType: string(name='ComponentType', position='Query'),
  effect?: string(name='Effect', position='Query'),
  htmlLayerContent?: string(name='HtmlLayerContent', position='Query'),
  imageLayerContent?: string(name='ImageLayerContent', position='Query'),
  layerOrder?: string(name='LayerOrder', position='Query'),
  locationId: string(name='LocationId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  textLayerContent?: string(name='TextLayerContent', position='Query'),
}

model AddCasterComponentResponseBody = {
  componentId?: string(name='ComponentId'),
  requestId?: string(name='RequestId'),
}

model AddCasterComponentResponse = {
  headers: map[string]string(name='headers'),
  body: AddCasterComponentResponseBody(name='body'),
}

async function addCasterComponent(request: AddCasterComponentRequest): AddCasterComponentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCasterComponent', 'POST', '/', 'json', false, 'json', request);
}

model AddCasterEpisodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  componentId?: [ string ](name='ComponentId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  episodeName?: string(name='EpisodeName', position='Query'),
  episodeType: string(name='EpisodeType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceId?: string(name='ResourceId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  switchType: string(name='SwitchType', position='Query'),
}

model AddCasterEpisodeResponseBody = {
  episodeId?: string(name='EpisodeId'),
  requestId?: string(name='RequestId'),
}

model AddCasterEpisodeResponse = {
  headers: map[string]string(name='headers'),
  body: AddCasterEpisodeResponseBody(name='body'),
}

async function addCasterEpisode(request: AddCasterEpisodeRequest): AddCasterEpisodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCasterEpisode', 'POST', '/', 'json', false, 'json', request);
}

model AddCasterEpisodeGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  callbackUrl: string(name='CallbackUrl', position='Query'),
  clientToken: string(name='ClientToken', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  item: [ 
    {
      itemName?: string(name='ItemName'),
      vodUrl?: string(name='VodUrl'),
    }
  ](name='Item', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  repeatNum: int32(name='RepeatNum', position='Query'),
  sideOutputUrl: string(name='SideOutputUrl', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model AddCasterEpisodeGroupResponseBody = {
  itemIds?: {
    itemId?: [ string ](name='ItemId')
  }(name='ItemIds'),
  programId?: string(name='ProgramId'),
  requestId?: string(name='RequestId'),
}

model AddCasterEpisodeGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddCasterEpisodeGroupResponseBody(name='body'),
}

async function addCasterEpisodeGroup(request: AddCasterEpisodeGroupRequest): AddCasterEpisodeGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCasterEpisodeGroup', 'POST', '/', 'json', false, 'json', request);
}

model AddCasterEpisodeGroupContentRequest {
  regionId?: string(name='RegionId', position='Host'),
  clientToken: string(name='ClientToken', position='Query'),
  content: string(name='Content', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model AddCasterEpisodeGroupContentResponseBody = {
  itemIds?: {
    itemId?: [ string ](name='ItemId')
  }(name='ItemIds'),
  programId?: string(name='ProgramId'),
  requestId?: string(name='RequestId'),
}

model AddCasterEpisodeGroupContentResponse = {
  headers: map[string]string(name='headers'),
  body: AddCasterEpisodeGroupContentResponseBody(name='body'),
}

async function addCasterEpisodeGroupContent(request: AddCasterEpisodeGroupContentRequest): AddCasterEpisodeGroupContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCasterEpisodeGroupContent', 'POST', '/', 'json', false, 'json', request);
}

model AddCasterLayoutRequest {
  regionId?: string(name='RegionId', position='Host'),
  audioLayer: [ 
    {
      fixedDelayDuration?: int32(name='FixedDelayDuration'),
      validChannel?: string(name='ValidChannel'),
      volumeRate?: float(name='VolumeRate'),
    }
  ](name='AudioLayer', position='Query'),
  blendList: [ string ](name='BlendList', position='Query'),
  casterId: string(name='CasterId', position='Query'),
  mixList: [ string ](name='MixList', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  videoLayer: [ 
    {
      fillMode?: string(name='FillMode'),
      fixedDelayDuration?: int32(name='FixedDelayDuration'),
      heightNormalized?: float(name='HeightNormalized'),
      positionNormalized?: [ float ](name='PositionNormalized'),
      positionRefer?: string(name='PositionRefer'),
      widthNormalized?: float(name='WidthNormalized'),
    }
  ](name='VideoLayer', position='Query'),
}

model AddCasterLayoutResponseBody = {
  layoutId?: string(name='LayoutId'),
  requestId?: string(name='RequestId'),
}

model AddCasterLayoutResponse = {
  headers: map[string]string(name='headers'),
  body: AddCasterLayoutResponseBody(name='body'),
}

async function addCasterLayout(request: AddCasterLayoutRequest): AddCasterLayoutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCasterLayout', 'POST', '/', 'json', false, 'json', request);
}

model AddCasterProgramRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  episode: [ 
    {
      componentId?: [ string ](name='ComponentId'),
      endTime?: string(name='EndTime'),
      episodeName?: string(name='EpisodeName'),
      episodeType?: string(name='EpisodeType'),
      resourceId?: string(name='ResourceId'),
      startTime?: string(name='StartTime'),
      switchType?: string(name='SwitchType'),
    }
  ](name='Episode', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model AddCasterProgramResponseBody = {
  episodeIds?: {
    episodeId?: [ 
    {
      episodeId?: string(name='EpisodeId'),
    }
  ](name='EpisodeId')
  }(name='EpisodeIds'),
  requestId?: string(name='RequestId'),
}

model AddCasterProgramResponse = {
  headers: map[string]string(name='headers'),
  body: AddCasterProgramResponseBody(name='body'),
}

async function addCasterProgram(request: AddCasterProgramRequest): AddCasterProgramResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCasterProgram', 'POST', '/', 'json', false, 'json', request);
}

model AddCasterVideoResourceRequest {
  regionId?: string(name='RegionId', position='Host'),
  beginOffset?: int32(name='BeginOffset', position='Query'),
  casterId: string(name='CasterId', position='Query'),
  endOffset?: int32(name='EndOffset', position='Query'),
  fixedDelayDuration?: int32(name='FixedDelayDuration', position='Query'),
  liveStreamUrl?: string(name='LiveStreamUrl', position='Query'),
  locationId?: string(name='LocationId', position='Query'),
  materialId?: string(name='MaterialId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  ptsCallbackInterval?: int32(name='PtsCallbackInterval', minimum=0, position='Query'),
  repeatNum?: int32(name='RepeatNum', minimum=-1, maximum=60, position='Query'),
  resourceName: string(name='ResourceName', position='Query'),
  streamId?: string(name='StreamId', position='Query'),
  vodUrl?: string(name='VodUrl', position='Query'),
}

model AddCasterVideoResourceResponseBody = {
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
}

model AddCasterVideoResourceResponse = {
  headers: map[string]string(name='headers'),
  body: AddCasterVideoResourceResponseBody(name='body'),
}

async function addCasterVideoResource(request: AddCasterVideoResourceRequest): AddCasterVideoResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCasterVideoResource', 'POST', '/', 'json', false, 'json', request);
}

model AddCustomLiveStreamTranscodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  app: string(name='App', position='Query'),
  audioBitrate?: int32(name='AudioBitrate', position='Query'),
  audioChannelNum?: int32(name='AudioChannelNum', position='Query'),
  audioCodec?: string(name='AudioCodec', position='Query'),
  audioProfile?: string(name='AudioProfile', position='Query'),
  audioRate?: int32(name='AudioRate', position='Query'),
  domain: string(name='Domain', position='Query'),
  encryptParameters?: string(name='EncryptParameters', position='Query'),
  FPS?: int32(name='FPS', position='Query'),
  gop?: string(name='Gop', position='Query'),
  height?: int32(name='Height', position='Query'),
  kmsKeyExpireInterval?: string(name='KmsKeyExpireInterval', position='Query'),
  kmsKeyID?: string(name='KmsKeyID', position='Query'),
  kmsUID?: string(name='KmsUID', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  profile?: int32(name='Profile', position='Query'),
  template: string(name='Template', position='Query'),
  templateType: string(name='TemplateType', position='Query'),
  videoBitrate?: int32(name='VideoBitrate', position='Query'),
  width?: int32(name='Width', position='Query'),
}

model AddCustomLiveStreamTranscodeResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddCustomLiveStreamTranscodeResponse = {
  headers: map[string]string(name='headers'),
  body: AddCustomLiveStreamTranscodeResponseBody(name='body'),
}

async function addCustomLiveStreamTranscode(request: AddCustomLiveStreamTranscodeRequest): AddCustomLiveStreamTranscodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCustomLiveStreamTranscode', 'POST', '/', 'json', false, 'json', request);
}

model AddLiveAppRecordConfigRequest {
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  onDemand?: int32(name='OnDemand', position='Query'),
  ossBucket: string(name='OssBucket', position='Query'),
  ossEndpoint: string(name='OssEndpoint', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  recordFormat?: [ 
    {
      cycleDuration?: int32(name='CycleDuration'),
      format?: string(name='Format'),
      ossObjectPrefix?: string(name='OssObjectPrefix'),
      sliceDuration?: int32(name='SliceDuration'),
      sliceOssObjectPrefix?: string(name='SliceOssObjectPrefix'),
    }
  ](name='RecordFormat', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  streamName?: string(name='StreamName', position='Query'),
  transcodeRecordFormat?: [ 
    {
      cycleDuration?: int32(name='CycleDuration'),
      format?: string(name='Format'),
      ossObjectPrefix?: string(name='OssObjectPrefix'),
      sliceDuration?: int32(name='SliceDuration'),
      sliceOssObjectPrefix?: string(name='SliceOssObjectPrefix'),
    }
  ](name='TranscodeRecordFormat', position='Query'),
  transcodeTemplates?: [ string ](name='TranscodeTemplates', position='Query'),
}

model AddLiveAppRecordConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLiveAppRecordConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveAppRecordConfigResponseBody(name='body'),
}

async function addLiveAppRecordConfig(request: AddLiveAppRecordConfigRequest): AddLiveAppRecordConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddLiveAppRecordConfig', 'POST', '/', 'json', false, 'json', request);
}

model AddLiveAppSnapshotConfigRequest {
  appName: string(name='AppName', position='Query'),
  callback?: string(name='Callback', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ossBucket: string(name='OssBucket', position='Query'),
  ossEndpoint: string(name='OssEndpoint', position='Query'),
  overwriteOssObject?: string(name='OverwriteOssObject', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sequenceOssObject?: string(name='SequenceOssObject', position='Query'),
  timeInterval: int32(name='TimeInterval', minimum=5, maximum=3600, position='Query'),
}

model AddLiveAppSnapshotConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLiveAppSnapshotConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveAppSnapshotConfigResponseBody(name='body'),
}

async function addLiveAppSnapshotConfig(request: AddLiveAppSnapshotConfigRequest): AddLiveAppSnapshotConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddLiveAppSnapshotConfig', 'POST', '/', 'json', false, 'json', request);
}

model AddLiveAudioAuditConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', position='Query'),
  bizType?: string(name='BizType', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ossBucket?: string(name='OssBucket', position='Query'),
  ossEndpoint?: string(name='OssEndpoint', position='Query'),
  ossObject?: string(name='OssObject', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  streamName: string(name='StreamName', position='Query'),
}

model AddLiveAudioAuditConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLiveAudioAuditConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveAudioAuditConfigResponseBody(name='body'),
}

async function addLiveAudioAuditConfig(request: AddLiveAudioAuditConfigRequest): AddLiveAudioAuditConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddLiveAudioAuditConfig', 'POST', '/', 'json', false, 'json', request);
}

model AddLiveAudioAuditNotifyConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  callback?: string(name='Callback', position='Query'),
  callbackTemplate?: string(name='CallbackTemplate', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model AddLiveAudioAuditNotifyConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLiveAudioAuditNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveAudioAuditNotifyConfigResponseBody(name='body'),
}

async function addLiveAudioAuditNotifyConfig(request: AddLiveAudioAuditNotifyConfigRequest): AddLiveAudioAuditNotifyConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddLiveAudioAuditNotifyConfig', 'POST', '/', 'json', false, 'json', request);
}

model AddLiveDetectNotifyConfigRequest {
  domainName: string(name='DomainName', position='Query'),
  notifyUrl: string(name='NotifyUrl', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model AddLiveDetectNotifyConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLiveDetectNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveDetectNotifyConfigResponseBody(name='body'),
}

async function addLiveDetectNotifyConfig(request: AddLiveDetectNotifyConfigRequest): AddLiveDetectNotifyConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddLiveDetectNotifyConfig', 'POST', '/', 'json', false, 'json', request);
}

model AddLiveDomainRequest {
  checkUrl?: string(name='CheckUrl', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  liveDomainType: string(name='LiveDomainType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  region: string(name='Region', position='Query'),
  scope?: string(name='Scope', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  topLevelDomain?: string(name='TopLevelDomain', position='Query'),
}

model AddLiveDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLiveDomainResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveDomainResponseBody(name='body'),
}

async function addLiveDomain(request: AddLiveDomainRequest): AddLiveDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddLiveDomain', 'POST', '/', 'json', false, 'json', request);
}

model AddLiveDomainMappingRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pullDomain: string(name='PullDomain', position='Query'),
  pushDomain: string(name='PushDomain', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model AddLiveDomainMappingResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLiveDomainMappingResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveDomainMappingResponseBody(name='body'),
}

async function addLiveDomainMapping(request: AddLiveDomainMappingRequest): AddLiveDomainMappingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddLiveDomainMapping', 'POST', '/', 'json', false, 'json', request);
}

model AddLiveDomainPlayMappingRequest {
  regionId?: string(name='RegionId', position='Host'),
  ownerId?: long(name='OwnerId', position='Query'),
  playDomain: string(name='PlayDomain', position='Query'),
  pullDomain: string(name='PullDomain', position='Query'),
}

model AddLiveDomainPlayMappingResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLiveDomainPlayMappingResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveDomainPlayMappingResponseBody(name='body'),
}

async function addLiveDomainPlayMapping(request: AddLiveDomainPlayMappingRequest): AddLiveDomainPlayMappingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddLiveDomainPlayMapping', 'POST', '/', 'json', false, 'json', request);
}

model AddLivePullStreamInfoConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  sourceUrl: string(name='SourceUrl', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  streamName: string(name='StreamName', position='Query'),
}

model AddLivePullStreamInfoConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLivePullStreamInfoConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddLivePullStreamInfoConfigResponseBody(name='body'),
}

async function addLivePullStreamInfoConfig(request: AddLivePullStreamInfoConfigRequest): AddLivePullStreamInfoConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddLivePullStreamInfoConfig', 'POST', '/', 'json', false, 'json', request);
}

model AddLiveRecordNotifyConfigRequest {
  domainName: string(name='DomainName', position='Query'),
  needStatusNotify?: boolean(name='NeedStatusNotify', position='Query'),
  notifyUrl: string(name='NotifyUrl', position='Query'),
  onDemandUrl?: string(name='OnDemandUrl', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model AddLiveRecordNotifyConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLiveRecordNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveRecordNotifyConfigResponseBody(name='body'),
}

async function addLiveRecordNotifyConfig(request: AddLiveRecordNotifyConfigRequest): AddLiveRecordNotifyConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddLiveRecordNotifyConfig', 'POST', '/', 'json', false, 'json', request);
}

model AddLiveRecordVodConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', position='Query'),
  autoCompose?: string(name='AutoCompose', position='Query'),
  composeVodTranscodeGroupId?: string(name='ComposeVodTranscodeGroupId', position='Query'),
  cycleDuration?: int32(name='CycleDuration', minimum=300, maximum=21600, position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  storageLocation?: string(name='StorageLocation', position='Query'),
  streamName?: string(name='StreamName', position='Query'),
  vodTranscodeGroupId: string(name='VodTranscodeGroupId', position='Query'),
}

model AddLiveRecordVodConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLiveRecordVodConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveRecordVodConfigResponseBody(name='body'),
}

async function addLiveRecordVodConfig(request: AddLiveRecordVodConfigRequest): AddLiveRecordVodConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddLiveRecordVodConfig', 'POST', '/', 'json', false, 'json', request);
}

model AddLiveSnapshotDetectPornConfigRequest {
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  interval?: int32(name='Interval', minimum=5, maximum=3600, position='Query'),
  ossBucket: string(name='OssBucket', position='Query'),
  ossEndpoint: string(name='OssEndpoint', position='Query'),
  ossObject?: string(name='OssObject', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  scene?: [ string ](name='Scene', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model AddLiveSnapshotDetectPornConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLiveSnapshotDetectPornConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveSnapshotDetectPornConfigResponseBody(name='body'),
}

async function addLiveSnapshotDetectPornConfig(request: AddLiveSnapshotDetectPornConfigRequest): AddLiveSnapshotDetectPornConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddLiveSnapshotDetectPornConfig', 'POST', '/', 'json', false, 'json', request);
}

model AddLiveSnapshotNotifyConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  notifyAuthKey?: string(name='NotifyAuthKey', position='Query'),
  notifyReqAuth?: string(name='NotifyReqAuth', position='Query'),
  notifyUrl: string(name='NotifyUrl', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model AddLiveSnapshotNotifyConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLiveSnapshotNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveSnapshotNotifyConfigResponseBody(name='body'),
}

async function addLiveSnapshotNotifyConfig(request: AddLiveSnapshotNotifyConfigRequest): AddLiveSnapshotNotifyConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddLiveSnapshotNotifyConfig', 'POST', '/', 'json', false, 'json', request);
}

model AddLiveStreamTranscodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  app: string(name='App', position='Query'),
  domain: string(name='Domain', position='Query'),
  encryptParameters?: string(name='EncryptParameters', position='Query'),
  lazy?: string(name='Lazy', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  template: string(name='Template', position='Query'),
}

model AddLiveStreamTranscodeResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLiveStreamTranscodeResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveStreamTranscodeResponseBody(name='body'),
}

async function addLiveStreamTranscode(request: AddLiveStreamTranscodeRequest): AddLiveStreamTranscodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddLiveStreamTranscode', 'POST', '/', 'json', false, 'json', request);
}

model AddLiveStreamWatermarkRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', position='Query'),
  height: int32(name='Height', position='Query'),
  name: string(name='Name', position='Query'),
  offsetCorner: string(name='OffsetCorner', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pictureUrl: string(name='PictureUrl', position='Query'),
  refHeight: int32(name='RefHeight', position='Query'),
  refWidth: int32(name='RefWidth', position='Query'),
  transparency: int32(name='Transparency', position='Query'),
  type: int32(name='Type', position='Query'),
  xOffset: float(name='XOffset', position='Query'),
  yOffset: float(name='YOffset', position='Query'),
}

model AddLiveStreamWatermarkResponseBody = {
  requestId?: string(name='RequestId'),
  templateId?: string(name='TemplateId'),
}

model AddLiveStreamWatermarkResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveStreamWatermarkResponseBody(name='body'),
}

async function addLiveStreamWatermark(request: AddLiveStreamWatermarkRequest): AddLiveStreamWatermarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddLiveStreamWatermark', 'POST', '/', 'json', false, 'json', request);
}

model AddLiveStreamWatermarkRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  app: string(name='App', position='Query'),
  description?: string(name='Description', position='Query'),
  domain: string(name='Domain', position='Query'),
  name: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  stream: string(name='Stream', position='Query'),
  templateId: string(name='TemplateId', position='Query'),
}

model AddLiveStreamWatermarkRuleResponseBody = {
  requestId?: string(name='RequestId'),
  ruleId?: string(name='RuleId'),
}

model AddLiveStreamWatermarkRuleResponse = {
  headers: map[string]string(name='headers'),
  body: AddLiveStreamWatermarkRuleResponseBody(name='body'),
}

async function addLiveStreamWatermarkRule(request: AddLiveStreamWatermarkRuleRequest): AddLiveStreamWatermarkRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddLiveStreamWatermarkRule', 'POST', '/', 'json', false, 'json', request);
}

model AddMultiRateConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  app: string(name='App', position='Query'),
  avFormat: string(name='AvFormat', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  isLazy?: string(name='IsLazy', position='Query'),
  isTimeAlign?: string(name='IsTimeAlign', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  templates: string(name='Templates', position='Query'),
}

model AddMultiRateConfigResponseBody = {
  body?: {
    failedTemplates?: [ 
    {
      audioBitrate?: int32(name='AudioBitrate'),
      audioChannelNum?: int32(name='AudioChannelNum'),
      audioCodec?: string(name='AudioCodec'),
      audioProfile?: string(name='AudioProfile'),
      audioRate?: int32(name='AudioRate'),
      bandWidth?: int32(name='BandWidth'),
      fps?: int32(name='Fps'),
      gop?: string(name='Gop'),
      height?: int32(name='Height'),
      profile?: int32(name='Profile'),
      template?: string(name='Template'),
      templateType?: string(name='TemplateType'),
      videoBitrate?: int32(name='VideoBitrate'),
      width?: int32(name='Width'),
    }
  ](name='FailedTemplates')
  }(name='Body'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddMultiRateConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddMultiRateConfigResponseBody(name='body'),
}

async function addMultiRateConfig(request: AddMultiRateConfigRequest): AddMultiRateConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddMultiRateConfig', 'POST', '/', 'json', false, 'json', request);
}

model AddPlaylistItemsRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  programConfig?: string(name='ProgramConfig', position='Query'),
  programId?: string(name='ProgramId', position='Query'),
  programItems: string(name='ProgramItems', position='Query'),
}

model AddPlaylistItemsResponseBody = {
  items?: {
    failedItems?: [ 
      {
        itemId?: string(name='ItemId'),
        itemName?: string(name='ItemName'),
      }
    ](name='FailedItems'),
    successItems?: [ 
      {
        itemId?: string(name='ItemId'),
        itemName?: string(name='ItemName'),
      }
    ](name='SuccessItems'),
  }(name='Items'),
  programId?: string(name='ProgramId'),
  requestId?: string(name='RequestId'),
}

model AddPlaylistItemsResponse = {
  headers: map[string]string(name='headers'),
  body: AddPlaylistItemsResponseBody(name='body'),
}

async function addPlaylistItems(request: AddPlaylistItemsRequest): AddPlaylistItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddPlaylistItems', 'POST', '/', 'json', false, 'json', request);
}

model AddRtsLiveStreamTranscodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  app: string(name='App', position='Query'),
  audioBitrate?: int32(name='AudioBitrate', position='Query'),
  audioChannelNum?: int32(name='AudioChannelNum', position='Query'),
  audioCodec?: string(name='AudioCodec', position='Query'),
  audioProfile?: string(name='AudioProfile', position='Query'),
  audioRate?: int32(name='AudioRate', position='Query'),
  deleteBframes?: boolean(name='DeleteBframes', position='Query'),
  domain: string(name='Domain', position='Query'),
  FPS?: int32(name='FPS', position='Query'),
  gop?: string(name='Gop', position='Query'),
  height?: int32(name='Height', position='Query'),
  lazy?: string(name='Lazy', position='Query'),
  opus?: boolean(name='Opus', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  profile?: int32(name='Profile', position='Query'),
  template: string(name='Template', position='Query'),
  templateType: string(name='TemplateType', position='Query'),
  videoBitrate?: int32(name='VideoBitrate', position='Query'),
  width?: int32(name='Width', position='Query'),
}

model AddRtsLiveStreamTranscodeResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddRtsLiveStreamTranscodeResponse = {
  headers: map[string]string(name='headers'),
  body: AddRtsLiveStreamTranscodeResponseBody(name='body'),
}

async function addRtsLiveStreamTranscode(request: AddRtsLiveStreamTranscodeRequest): AddRtsLiveStreamTranscodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddRtsLiveStreamTranscode', 'POST', '/', 'json', false, 'json', request);
}

model AddShowIntoShowListRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  duration?: long(name='Duration', position='Query'),
  liveInputType?: int32(name='LiveInputType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  repeatTimes?: int32(name='RepeatTimes', position='Query'),
  resourceId?: string(name='ResourceId', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
  resourceUrl?: string(name='ResourceUrl', position='Query'),
  showName?: string(name='ShowName', position='Query'),
  spot?: int32(name='Spot', position='Query'),
  isBatchMode?: boolean(name='isBatchMode', position='Query'),
  showList?: [ 
    {
      duration?: long(name='duration'),
      liveInputType?: int32(name='liveInputType'),
      repeatTimes?: int32(name='repeatTimes'),
      resourceId?: string(name='resourceId'),
      resourceType?: string(name='resourceType'),
      resourceUrl?: string(name='resourceUrl'),
      showName?: string(name='showName'),
    }
  ](name='showList', position='Query'),
}

model AddShowIntoShowListResponseBody = {
  requestId?: string(name='RequestId'),
  showId?: string(name='ShowId'),
  failedList?: string(name='failedList'),
  successfulShowIds?: string(name='successfulShowIds'),
}

model AddShowIntoShowListResponse = {
  headers: map[string]string(name='headers'),
  body: AddShowIntoShowListResponseBody(name='body'),
}

async function addShowIntoShowList(request: AddShowIntoShowListRequest): AddShowIntoShowListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddShowIntoShowList', 'POST', '/', 'json', false, 'json', request);
}

model AddStudioLayoutRequest {
  regionId?: string(name='RegionId', position='Host'),
  bgImageConfig?: string(name='BgImageConfig', position='Query'),
  casterId: string(name='CasterId', position='Query'),
  commonConfig?: string(name='CommonConfig', position='Query'),
  layerOrderConfigList?: string(name='LayerOrderConfigList', position='Query'),
  layoutName: string(name='LayoutName', position='Query'),
  layoutType: string(name='LayoutType', position='Query'),
  mediaInputConfigList?: string(name='MediaInputConfigList', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  screenInputConfigList?: string(name='ScreenInputConfigList', position='Query'),
}

model AddStudioLayoutResponseBody = {
  layoutId?: string(name='LayoutId'),
  requestId?: string(name='RequestId'),
}

model AddStudioLayoutResponse = {
  headers: map[string]string(name='headers'),
  body: AddStudioLayoutResponseBody(name='body'),
}

async function addStudioLayout(request: AddStudioLayoutRequest): AddStudioLayoutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddStudioLayout', 'POST', '/', 'json', false, 'json', request);
}

model AddTrancodeSEIRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', position='Query'),
  delay: int32(name='Delay', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pattern: string(name='Pattern', position='Query'),
  repeat: int32(name='Repeat', position='Query'),
  streamName: string(name='StreamName', position='Query'),
  text: string(name='Text', position='Query'),
}

model AddTrancodeSEIResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddTrancodeSEIResponse = {
  headers: map[string]string(name='headers'),
  body: AddTrancodeSEIResponseBody(name='body'),
}

async function addTrancodeSEI(request: AddTrancodeSEIRequest): AddTrancodeSEIResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTrancodeSEI', 'POST', '/', 'json', false, 'json', request);
}

model AllowPushStreamRequest {
  regionId?: string(name='RegionId', position='Host'),
  appId: string(name='AppId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  roomId: string(name='RoomId', position='Query'),
}

model AllowPushStreamResponseBody = {
  requestId?: string(name='RequestId'),
}

model AllowPushStreamResponse = {
  headers: map[string]string(name='headers'),
  body: AllowPushStreamResponseBody(name='body'),
}

async function allowPushStream(request: AllowPushStreamRequest): AllowPushStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllowPushStream', 'POST', '/', 'json', false, 'json', request);
}

model BatchDeleteLiveDomainConfigsRequest {
  domainNames: string(name='DomainNames', position='Query'),
  functionNames: string(name='FunctionNames', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model BatchDeleteLiveDomainConfigsResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchDeleteLiveDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteLiveDomainConfigsResponseBody(name='body'),
}

async function batchDeleteLiveDomainConfigs(request: BatchDeleteLiveDomainConfigsRequest): BatchDeleteLiveDomainConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchDeleteLiveDomainConfigs', 'POST', '/', 'json', false, 'json', request);
}

model BatchSetLiveDomainConfigsRequest {
  domainNames: string(name='DomainNames', position='Query'),
  functions: string(name='Functions', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model BatchSetLiveDomainConfigsResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchSetLiveDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetLiveDomainConfigsResponseBody(name='body'),
}

async function batchSetLiveDomainConfigs(request: BatchSetLiveDomainConfigsRequest): BatchSetLiveDomainConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchSetLiveDomainConfigs', 'POST', '/', 'json', false, 'json', request);
}

model CancelMuteAllGroupUserRequest {
  appId: string(name='AppId', position='Body'),
  groupId: string(name='GroupId', position='Body'),
  operatorUserId?: string(name='OperatorUserId', position='Body'),
}

model CancelMuteAllGroupUserResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result'),
}

model CancelMuteAllGroupUserResponse = {
  headers: map[string]string(name='headers'),
  body: CancelMuteAllGroupUserResponseBody(name='body'),
}

async function cancelMuteAllGroupUser(request: CancelMuteAllGroupUserRequest): CancelMuteAllGroupUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelMuteAllGroupUser', 'POST', '/', 'json', true, 'form', request);
}

model CloseLiveShiftRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName?: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  streamName?: string(name='StreamName', position='Query'),
}

model CloseLiveShiftResponseBody = {
  requestId?: string(name='RequestId'),
}

model CloseLiveShiftResponse = {
  headers: map[string]string(name='headers'),
  body: CloseLiveShiftResponseBody(name='body'),
}

async function closeLiveShift(request: CloseLiveShiftRequest): CloseLiveShiftResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloseLiveShift', 'POST', '/', 'json', false, 'json', request);
}

model CopyCasterRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterName: string(name='CasterName', position='Query'),
  clientToken: string(name='ClientToken', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  srcCasterId: string(name='SrcCasterId', position='Query'),
}

model CopyCasterResponseBody = {
  casterId?: string(name='CasterId'),
  requestId?: string(name='RequestId'),
}

model CopyCasterResponse = {
  headers: map[string]string(name='headers'),
  body: CopyCasterResponseBody(name='body'),
}

async function copyCaster(request: CopyCasterRequest): CopyCasterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CopyCaster', 'POST', '/', 'json', false, 'json', request);
}

model CopyCasterSceneConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  fromSceneId: string(name='FromSceneId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  toSceneId: string(name='ToSceneId', position='Query'),
}

model CopyCasterSceneConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model CopyCasterSceneConfigResponse = {
  headers: map[string]string(name='headers'),
  body: CopyCasterSceneConfigResponseBody(name='body'),
}

async function copyCasterSceneConfig(request: CopyCasterSceneConfigRequest): CopyCasterSceneConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CopyCasterSceneConfig', 'POST', '/', 'json', false, 'json', request);
}

model CreateCasterRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterName?: string(name='CasterName', position='Query'),
  casterTemplate?: string(name='CasterTemplate', position='Query'),
  chargeType: string(name='ChargeType', position='Query'),
  clientToken: string(name='ClientToken', position='Query'),
  expireTime?: string(name='ExpireTime', position='Query'),
  normType: int32(name='NormType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  purchaseTime?: string(name='PurchaseTime', position='Query'),
}

model CreateCasterResponseBody = {
  casterId?: string(name='CasterId'),
  requestId?: string(name='RequestId'),
}

model CreateCasterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCasterResponseBody(name='body'),
}

async function createCaster(request: CreateCasterRequest): CreateCasterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCaster', 'POST', '/', 'json', false, 'json', request);
}

model CreateCustomTemplateRequest {
  regionId?: string(name='RegionId', position='Host'),
  customTemplate: string(name='CustomTemplate', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  template: string(name='Template', position='Query'),
}

model CreateCustomTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateCustomTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCustomTemplateResponseBody(name='body'),
}

async function createCustomTemplate(request: CreateCustomTemplateRequest): CreateCustomTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustomTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CreateLiveRealTimeLogDeliveryRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  logstore: string(name='Logstore', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  project: string(name='Project', position='Query'),
  region: string(name='Region', position='Query'),
}

model CreateLiveRealTimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateLiveRealTimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLiveRealTimeLogDeliveryResponseBody(name='body'),
}

async function createLiveRealTimeLogDelivery(request: CreateLiveRealTimeLogDeliveryRequest): CreateLiveRealTimeLogDeliveryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLiveRealTimeLogDelivery', 'GET', '/', 'json', false, 'json', request);
}

model CreateLiveStreamMonitorRequest {
  regionId?: string(name='RegionId', position='Host'),
  app?: string(name='App', position='Query'),
  domain: string(name='Domain', position='Query'),
  inputList?: string(name='InputList', position='Query'),
  monitorName: string(name='MonitorName', position='Query'),
  outputTemplate: string(name='OutputTemplate', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  stream?: string(name='Stream', position='Query'),
}

model CreateLiveStreamMonitorResponseBody = {
  monitorId?: string(name='MonitorId'),
  requestId?: string(name='RequestId'),
}

model CreateLiveStreamMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLiveStreamMonitorResponseBody(name='body'),
}

async function createLiveStreamMonitor(request: CreateLiveStreamMonitorRequest): CreateLiveStreamMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLiveStreamMonitor', 'POST', '/', 'json', false, 'json', request);
}

model CreateLiveStreamRecordIndexFilesRequest {
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ossBucket: string(name='OssBucket', position='Query'),
  ossEndpoint: string(name='OssEndpoint', position='Query'),
  ossObject: string(name='OssObject', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  streamName: string(name='StreamName', position='Query'),
}

model CreateLiveStreamRecordIndexFilesResponseBody = {
  recordInfo?: {
    appName?: string(name='AppName'),
    createTime?: string(name='CreateTime'),
    domainName?: string(name='DomainName'),
    duration?: float(name='Duration'),
    endTime?: string(name='EndTime'),
    height?: int32(name='Height'),
    ossBucket?: string(name='OssBucket'),
    ossEndpoint?: string(name='OssEndpoint'),
    ossObject?: string(name='OssObject'),
    recordId?: string(name='RecordId'),
    recordUrl?: string(name='RecordUrl'),
    startTime?: string(name='StartTime'),
    streamName?: string(name='StreamName'),
    width?: int32(name='Width'),
  }(name='RecordInfo'),
  requestId?: string(name='RequestId'),
}

model CreateLiveStreamRecordIndexFilesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLiveStreamRecordIndexFilesResponseBody(name='body'),
}

async function createLiveStreamRecordIndexFiles(request: CreateLiveStreamRecordIndexFilesRequest): CreateLiveStreamRecordIndexFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLiveStreamRecordIndexFiles', 'POST', '/', 'json', false, 'json', request);
}

model CreateLiveTranscodeTemplateRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  templateConfig: string(name='TemplateConfig', position='Query'),
  type?: string(name='Type', position='Query'),
}

model CreateLiveTranscodeTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  templateId?: string(name='TemplateId'),
}

model CreateLiveTranscodeTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLiveTranscodeTemplateResponseBody(name='body'),
}

async function createLiveTranscodeTemplate(request: CreateLiveTranscodeTemplateRequest): CreateLiveTranscodeTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLiveTranscodeTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CreateMessageAppRequest {
  appConfig?: map[string]string(name='AppConfig', shrink='json', position='Body'),
  appName: string(name='AppName', position='Body'),
  extension?: map[string]string(name='Extension', shrink='json', position='Body'),
}

model CreateMessageAppResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    appId?: string(name='AppId', description='用于长连接建连的token'),
  }(name='Result'),
}

model CreateMessageAppResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMessageAppResponseBody(name='body'),
}

async function createMessageApp(request: CreateMessageAppRequest): CreateMessageAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMessageApp', 'POST', '/', 'json', true, 'form', request);
}

model CreateMessageGroupRequest {
  appId: string(name='AppId', position='Body'),
  creatorId: string(name='CreatorId', position='Body'),
  extension?: map[string]string(name='Extension', shrink='json', position='Body'),
}

model CreateMessageGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    extension?: map[string]any(name='Extension'),
    groupId?: string(name='GroupId', description='用于长连接建连的token'),
  }(name='Result'),
}

model CreateMessageGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMessageGroupResponseBody(name='body'),
}

async function createMessageGroup(request: CreateMessageGroupRequest): CreateMessageGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMessageGroup', 'POST', '/', 'json', true, 'form', request);
}

model CreateMixStreamRequest {
  regionId?: string(name='RegionId', position='Host'),
  callbackConfig?: string(name='CallbackConfig', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  inputStreamList: string(name='InputStreamList', position='Query'),
  layoutId: string(name='LayoutId', position='Query'),
  outputConfig: string(name='OutputConfig', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model CreateMixStreamResponseBody = {
  mixStreamId?: string(name='MixStreamId'),
  requestId?: string(name='RequestId'),
}

model CreateMixStreamResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMixStreamResponseBody(name='body'),
}

async function createMixStream(request: CreateMixStreamRequest): CreateMixStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMixStream', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCasterRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteCasterResponseBody = {
  casterId?: string(name='CasterId'),
  requestId?: string(name='RequestId'),
}

model DeleteCasterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCasterResponseBody(name='body'),
}

async function deleteCaster(request: DeleteCasterRequest): DeleteCasterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCaster', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCasterComponentRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  componentId: string(name='ComponentId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteCasterComponentResponseBody = {
  casterId?: string(name='CasterId'),
  componentId?: string(name='ComponentId'),
  requestId?: string(name='RequestId'),
}

model DeleteCasterComponentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCasterComponentResponseBody(name='body'),
}

async function deleteCasterComponent(request: DeleteCasterComponentRequest): DeleteCasterComponentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCasterComponent', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCasterEpisodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  episodeId: string(name='EpisodeId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteCasterEpisodeResponseBody = {
  casterId?: string(name='CasterId'),
  episodeId?: string(name='EpisodeId'),
  requestId?: string(name='RequestId'),
}

model DeleteCasterEpisodeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCasterEpisodeResponseBody(name='body'),
}

async function deleteCasterEpisode(request: DeleteCasterEpisodeRequest): DeleteCasterEpisodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCasterEpisode', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCasterEpisodeGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  ownerId?: long(name='OwnerId', position='Query'),
  programId: string(name='ProgramId', position='Query'),
}

model DeleteCasterEpisodeGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCasterEpisodeGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCasterEpisodeGroupResponseBody(name='body'),
}

async function deleteCasterEpisodeGroup(request: DeleteCasterEpisodeGroupRequest): DeleteCasterEpisodeGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCasterEpisodeGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCasterLayoutRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  layoutId: string(name='LayoutId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteCasterLayoutResponseBody = {
  casterId?: string(name='CasterId'),
  layoutId?: string(name='LayoutId'),
  requestId?: string(name='RequestId'),
}

model DeleteCasterLayoutResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCasterLayoutResponseBody(name='body'),
}

async function deleteCasterLayout(request: DeleteCasterLayoutRequest): DeleteCasterLayoutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCasterLayout', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCasterProgramRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteCasterProgramResponseBody = {
  casterId?: string(name='CasterId'),
  requestId?: string(name='RequestId'),
}

model DeleteCasterProgramResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCasterProgramResponseBody(name='body'),
}

async function deleteCasterProgram(request: DeleteCasterProgramRequest): DeleteCasterProgramResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCasterProgram', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCasterSceneConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  sceneId: string(name='SceneId', position='Query'),
  type: string(name='Type', position='Query'),
}

model DeleteCasterSceneConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCasterSceneConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCasterSceneConfigResponseBody(name='body'),
}

async function deleteCasterSceneConfig(request: DeleteCasterSceneConfigRequest): DeleteCasterSceneConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCasterSceneConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCasterVideoResourceRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceId: string(name='ResourceId', position='Query'),
}

model DeleteCasterVideoResourceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCasterVideoResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCasterVideoResourceResponseBody(name='body'),
}

async function deleteCasterVideoResource(request: DeleteCasterVideoResourceRequest): DeleteCasterVideoResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCasterVideoResource', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomTemplateRequest {
  regionId?: string(name='RegionId', position='Host'),
  ownerId?: long(name='OwnerId', position='Query'),
  template: string(name='Template', position='Query'),
}

model DeleteCustomTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCustomTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCustomTemplateResponseBody(name='body'),
}

async function deleteCustomTemplate(request: DeleteCustomTemplateRequest): DeleteCustomTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveAppRecordConfigRequest {
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  streamName?: string(name='StreamName', position='Query'),
}

model DeleteLiveAppRecordConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveAppRecordConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveAppRecordConfigResponseBody(name='body'),
}

async function deleteLiveAppRecordConfig(request: DeleteLiveAppRecordConfigRequest): DeleteLiveAppRecordConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveAppRecordConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveAppSnapshotConfigRequest {
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteLiveAppSnapshotConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveAppSnapshotConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveAppSnapshotConfigResponseBody(name='body'),
}

async function deleteLiveAppSnapshotConfig(request: DeleteLiveAppSnapshotConfigRequest): DeleteLiveAppSnapshotConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveAppSnapshotConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveAudioAuditConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  streamName: string(name='StreamName', position='Query'),
}

model DeleteLiveAudioAuditConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveAudioAuditConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveAudioAuditConfigResponseBody(name='body'),
}

async function deleteLiveAudioAuditConfig(request: DeleteLiveAudioAuditConfigRequest): DeleteLiveAudioAuditConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveAudioAuditConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveAudioAuditNotifyConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteLiveAudioAuditNotifyConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveAudioAuditNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveAudioAuditNotifyConfigResponseBody(name='body'),
}

async function deleteLiveAudioAuditNotifyConfig(request: DeleteLiveAudioAuditNotifyConfigRequest): DeleteLiveAudioAuditNotifyConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveAudioAuditNotifyConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveDetectNotifyConfigRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteLiveDetectNotifyConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveDetectNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveDetectNotifyConfigResponseBody(name='body'),
}

async function deleteLiveDetectNotifyConfig(request: DeleteLiveDetectNotifyConfigRequest): DeleteLiveDetectNotifyConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveDetectNotifyConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteLiveDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveDomainResponseBody(name='body'),
}

async function deleteLiveDomain(request: DeleteLiveDomainRequest): DeleteLiveDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveDomain', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveDomainMappingRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pullDomain: string(name='PullDomain', position='Query'),
  pushDomain: string(name='PushDomain', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteLiveDomainMappingResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveDomainMappingResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveDomainMappingResponseBody(name='body'),
}

async function deleteLiveDomainMapping(request: DeleteLiveDomainMappingRequest): DeleteLiveDomainMappingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveDomainMapping', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveDomainPlayMappingRequest {
  regionId?: string(name='RegionId', position='Host'),
  ownerId?: long(name='OwnerId', position='Query'),
  playDomain: string(name='PlayDomain', position='Query'),
  pullDomain: string(name='PullDomain', position='Query'),
}

model DeleteLiveDomainPlayMappingResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveDomainPlayMappingResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveDomainPlayMappingResponseBody(name='body'),
}

async function deleteLiveDomainPlayMapping(request: DeleteLiveDomainPlayMappingRequest): DeleteLiveDomainPlayMappingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveDomainPlayMapping', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveEdgeTransferRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteLiveEdgeTransferResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveEdgeTransferResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveEdgeTransferResponseBody(name='body'),
}

async function deleteLiveEdgeTransfer(request: DeleteLiveEdgeTransferRequest): DeleteLiveEdgeTransferResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveEdgeTransfer', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveLazyPullStreamInfoConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteLiveLazyPullStreamInfoConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveLazyPullStreamInfoConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveLazyPullStreamInfoConfigResponseBody(name='body'),
}

async function deleteLiveLazyPullStreamInfoConfig(request: DeleteLiveLazyPullStreamInfoConfigRequest): DeleteLiveLazyPullStreamInfoConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveLazyPullStreamInfoConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLivePullStreamInfoConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  streamName: string(name='StreamName', position='Query'),
}

model DeleteLivePullStreamInfoConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLivePullStreamInfoConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLivePullStreamInfoConfigResponseBody(name='body'),
}

async function deleteLivePullStreamInfoConfig(request: DeleteLivePullStreamInfoConfigRequest): DeleteLivePullStreamInfoConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLivePullStreamInfoConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveRealTimeLogLogstoreRequest {
  regionId?: string(name='RegionId', position='Host'),
  logstore: string(name='Logstore', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  project: string(name='Project', position='Query'),
  region: string(name='Region', position='Query'),
}

model DeleteLiveRealTimeLogLogstoreResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveRealTimeLogLogstoreResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveRealTimeLogLogstoreResponseBody(name='body'),
}

async function deleteLiveRealTimeLogLogstore(request: DeleteLiveRealTimeLogLogstoreRequest): DeleteLiveRealTimeLogLogstoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveRealTimeLogLogstore', 'GET', '/', 'json', false, 'json', request);
}

model DeleteLiveRealtimeLogDeliveryRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  logstore: string(name='Logstore', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  project: string(name='Project', position='Query'),
  region: string(name='Region', position='Query'),
}

model DeleteLiveRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveRealtimeLogDeliveryResponseBody(name='body'),
}

async function deleteLiveRealtimeLogDelivery(request: DeleteLiveRealtimeLogDeliveryRequest): DeleteLiveRealtimeLogDeliveryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveRealtimeLogDelivery', 'GET', '/', 'json', false, 'json', request);
}

model DeleteLiveRecordNotifyConfigRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteLiveRecordNotifyConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveRecordNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveRecordNotifyConfigResponseBody(name='body'),
}

async function deleteLiveRecordNotifyConfig(request: DeleteLiveRecordNotifyConfigRequest): DeleteLiveRecordNotifyConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveRecordNotifyConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveRecordVodConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  streamName?: string(name='StreamName', position='Query'),
}

model DeleteLiveRecordVodConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveRecordVodConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveRecordVodConfigResponseBody(name='body'),
}

async function deleteLiveRecordVodConfig(request: DeleteLiveRecordVodConfigRequest): DeleteLiveRecordVodConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveRecordVodConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveSnapshotDetectPornConfigRequest {
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteLiveSnapshotDetectPornConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveSnapshotDetectPornConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveSnapshotDetectPornConfigResponseBody(name='body'),
}

async function deleteLiveSnapshotDetectPornConfig(request: DeleteLiveSnapshotDetectPornConfigRequest): DeleteLiveSnapshotDetectPornConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveSnapshotDetectPornConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveSnapshotNotifyConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteLiveSnapshotNotifyConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveSnapshotNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveSnapshotNotifyConfigResponseBody(name='body'),
}

async function deleteLiveSnapshotNotifyConfig(request: DeleteLiveSnapshotNotifyConfigRequest): DeleteLiveSnapshotNotifyConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveSnapshotNotifyConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveSpecificStagingConfigRequest {
  configId: string(name='ConfigId', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteLiveSpecificStagingConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveSpecificStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveSpecificStagingConfigResponseBody(name='body'),
}

async function deleteLiveSpecificStagingConfig(request: DeleteLiveSpecificStagingConfigRequest): DeleteLiveSpecificStagingConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveSpecificStagingConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveStreamMonitorRequest {
  regionId?: string(name='RegionId', position='Host'),
  monitorId: string(name='MonitorId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteLiveStreamMonitorResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveStreamMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveStreamMonitorResponseBody(name='body'),
}

async function deleteLiveStreamMonitor(request: DeleteLiveStreamMonitorRequest): DeleteLiveStreamMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveStreamMonitor', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveStreamRecordIndexFilesRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  recordId: [ string ](name='RecordId', position='Query'),
  removeFile: string(name='RemoveFile', position='Query'),
  streamName: string(name='StreamName', position='Query'),
}

model DeleteLiveStreamRecordIndexFilesResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  recordDeleteInfoList?: {
    recordDeleteInfo?: [ 
    {
      message?: string(name='Message'),
      recordId?: string(name='RecordId'),
    }
  ](name='RecordDeleteInfo')
  }(name='RecordDeleteInfoList'),
  requestId?: string(name='RequestId'),
}

model DeleteLiveStreamRecordIndexFilesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveStreamRecordIndexFilesResponseBody(name='body'),
}

async function deleteLiveStreamRecordIndexFiles(request: DeleteLiveStreamRecordIndexFilesRequest): DeleteLiveStreamRecordIndexFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveStreamRecordIndexFiles', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveStreamTranscodeRequest {
  app: string(name='App', position='Query'),
  domain: string(name='Domain', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  template: string(name='Template', position='Query'),
}

model DeleteLiveStreamTranscodeResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveStreamTranscodeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveStreamTranscodeResponseBody(name='body'),
}

async function deleteLiveStreamTranscode(request: DeleteLiveStreamTranscodeRequest): DeleteLiveStreamTranscodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveStreamTranscode', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveStreamWatermarkRequest {
  regionId?: string(name='RegionId', position='Host'),
  ownerId?: long(name='OwnerId', position='Query'),
  templateId: string(name='TemplateId', position='Query'),
}

model DeleteLiveStreamWatermarkResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveStreamWatermarkResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveStreamWatermarkResponseBody(name='body'),
}

async function deleteLiveStreamWatermark(request: DeleteLiveStreamWatermarkRequest): DeleteLiveStreamWatermarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveStreamWatermark', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveStreamWatermarkRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  app?: string(name='App', position='Query'),
  domain: string(name='Domain', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  ruleId?: string(name='RuleId', position='Query'),
  stream?: string(name='Stream', position='Query'),
}

model DeleteLiveStreamWatermarkRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveStreamWatermarkRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveStreamWatermarkRuleResponseBody(name='body'),
}

async function deleteLiveStreamWatermarkRule(request: DeleteLiveStreamWatermarkRuleRequest): DeleteLiveStreamWatermarkRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveStreamWatermarkRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLiveStreamsNotifyUrlConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteLiveStreamsNotifyUrlConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLiveStreamsNotifyUrlConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveStreamsNotifyUrlConfigResponseBody(name='body'),
}

async function deleteLiveStreamsNotifyUrlConfig(request: DeleteLiveStreamsNotifyUrlConfigRequest): DeleteLiveStreamsNotifyUrlConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveStreamsNotifyUrlConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMessageAppRequest {
  appId: string(name='AppId', position='Body'),
}

model DeleteMessageAppResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result'),
}

model DeleteMessageAppResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMessageAppResponseBody(name='body'),
}

async function deleteMessageApp(request: DeleteMessageAppRequest): DeleteMessageAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMessageApp', 'POST', '/', 'json', true, 'form', request);
}

model DeleteMixStreamRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName?: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  mixStreamId: string(name='MixStreamId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  streamName?: string(name='StreamName', position='Query'),
}

model DeleteMixStreamResponseBody = {
  mixStreamId?: string(name='MixStreamId'),
  requestId?: string(name='RequestId'),
}

model DeleteMixStreamResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMixStreamResponseBody(name='body'),
}

async function deleteMixStream(request: DeleteMixStreamRequest): DeleteMixStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMixStream', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMultiRateConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  app: string(name='App', position='Query'),
  deleteAll?: string(name='DeleteAll', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  templates?: string(name='Templates', position='Query'),
}

model DeleteMultiRateConfigResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteMultiRateConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMultiRateConfigResponseBody(name='body'),
}

async function deleteMultiRateConfig(request: DeleteMultiRateConfigRequest): DeleteMultiRateConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMultiRateConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeletePlaylistRequest {
  regionId?: string(name='RegionId', position='Host'),
  ownerId?: long(name='OwnerId', position='Query'),
  programId: string(name='ProgramId', position='Query'),
}

model DeletePlaylistResponseBody = {
  programId?: string(name='ProgramId'),
  requestId?: string(name='RequestId'),
}

model DeletePlaylistResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePlaylistResponseBody(name='body'),
}

async function deletePlaylist(request: DeletePlaylistRequest): DeletePlaylistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePlaylist', 'POST', '/', 'json', false, 'json', request);
}

model DeletePlaylistItemsRequest {
  regionId?: string(name='RegionId', position='Host'),
  ownerId?: long(name='OwnerId', position='Query'),
  programId: string(name='ProgramId', position='Query'),
  programItemIds: string(name='ProgramItemIds', position='Query'),
}

model DeletePlaylistItemsResponseBody = {
  programId?: string(name='ProgramId'),
  requestId?: string(name='RequestId'),
}

model DeletePlaylistItemsResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePlaylistItemsResponseBody(name='body'),
}

async function deletePlaylistItems(request: DeletePlaylistItemsRequest): DeletePlaylistItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePlaylistItems', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRoomRequest {
  regionId?: string(name='RegionId', position='Host'),
  appId: string(name='AppId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  roomId: string(name='RoomId', position='Query'),
}

model DeleteRoomResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteRoomResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRoomResponseBody(name='body'),
}

async function deleteRoom(request: DeleteRoomRequest): DeleteRoomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRoom', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSnapshotCallbackAuthRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteSnapshotCallbackAuthResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSnapshotCallbackAuthResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSnapshotCallbackAuthResponseBody(name='body'),
}

async function deleteSnapshotCallbackAuth(request: DeleteSnapshotCallbackAuthRequest): DeleteSnapshotCallbackAuthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSnapshotCallbackAuth', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSnapshotFilesRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', position='Query'),
  createTimestampList: [ long ](name='CreateTimestampList', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  removeFile: boolean(name='RemoveFile', position='Query'),
  streamName: string(name='StreamName', position='Query'),
}

model DeleteSnapshotFilesResponseBody = {
  failureCount?: int32(name='FailureCount'),
  requestId?: string(name='RequestId'),
  snapshotDeleteInfoList?: {
    snapshotDeleteInfo?: [ 
    {
      createTimestamp?: long(name='CreateTimestamp'),
      message?: string(name='Message'),
    }
  ](name='SnapshotDeleteInfo')
  }(name='SnapshotDeleteInfoList'),
  successCount?: int32(name='SuccessCount'),
}

model DeleteSnapshotFilesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSnapshotFilesResponseBody(name='body'),
}

async function deleteSnapshotFiles(request: DeleteSnapshotFilesRequest): DeleteSnapshotFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSnapshotFiles', 'POST', '/', 'json', false, 'json', request);
}

model DeleteStudioLayoutRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  layoutId: string(name='LayoutId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteStudioLayoutResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteStudioLayoutResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteStudioLayoutResponseBody(name='body'),
}

async function deleteStudioLayout(request: DeleteStudioLayoutRequest): DeleteStudioLayoutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteStudioLayout', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAutoShowListTasksRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId?: string(name='CasterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeAutoShowListTasksResponseBody = {
  autoShowListTasks?: string(name='AutoShowListTasks'),
  requestId?: string(name='RequestId'),
}

model DescribeAutoShowListTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoShowListTasksResponseBody(name='body'),
}

async function describeAutoShowListTasks(request: DescribeAutoShowListTasksRequest): DescribeAutoShowListTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAutoShowListTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCasterChannelsRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeCasterChannelsResponseBody = {
  channels?: {
    channel?: [ 
    {
      channelId?: string(name='ChannelId'),
      faceBeauty?: string(name='FaceBeauty'),
      resourceId?: string(name='ResourceId'),
      rtmpUrl?: string(name='RtmpUrl'),
      streamUrl?: string(name='StreamUrl'),
    }
  ](name='Channel')
  }(name='Channels'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model DescribeCasterChannelsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCasterChannelsResponseBody(name='body'),
}

async function describeCasterChannels(request: DescribeCasterChannelsRequest): DescribeCasterChannelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCasterChannels', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCasterComponentsRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  componentId?: string(name='ComponentId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeCasterComponentsResponseBody = {
  components?: {
    component?: [ 
    {
      captionLayerContent?: {
        borderColor?: string(name='BorderColor'),
        borderWidthNormalized?: float(name='BorderWidthNormalized'),
        color?: string(name='Color'),
        fontName?: string(name='FontName'),
        lineSpaceNormalized?: float(name='LineSpaceNormalized'),
        locationId?: string(name='LocationId'),
        ptsOffset?: int32(name='PtsOffset'),
        showSourceLan?: boolean(name='ShowSourceLan'),
        sizeNormalized?: float(name='SizeNormalized'),
        sourceLan?: string(name='SourceLan'),
        targetLan?: string(name='TargetLan'),
        wordCountPerLine?: int32(name='WordCountPerLine'),
        wordSpaceNormalized?: float(name='WordSpaceNormalized'),
        wordsCount?: int32(name='WordsCount'),
      }(name='CaptionLayerContent'),
      componentId?: string(name='ComponentId'),
      componentLayer?: {
        heightNormalized?: float(name='HeightNormalized'),
        positionNormalizeds?: {
          position?: [ float ](name='Position')
        }(name='PositionNormalizeds'),
        positionRefer?: string(name='PositionRefer'),
        transparency?: int32(name='Transparency'),
        widthNormalized?: float(name='WidthNormalized'),
      }(name='ComponentLayer'),
      componentName?: string(name='ComponentName'),
      componentType?: string(name='ComponentType'),
      effect?: string(name='Effect'),
      imageLayerContent?: {
        materialId?: string(name='MaterialId'),
      }(name='ImageLayerContent'),
      locationId?: string(name='LocationId'),
      textLayerContent?: {
        borderColor?: string(name='BorderColor'),
        borderWidthNormalized?: float(name='BorderWidthNormalized'),
        color?: string(name='Color'),
        fontName?: string(name='FontName'),
        sizeNormalized?: float(name='SizeNormalized'),
        text?: string(name='Text'),
      }(name='TextLayerContent'),
    }
  ](name='Component')
  }(name='Components'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model DescribeCasterComponentsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCasterComponentsResponseBody(name='body'),
}

async function describeCasterComponents(request: DescribeCasterComponentsRequest): DescribeCasterComponentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCasterComponents', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCasterConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeCasterConfigResponseBody = {
  callbackUrl?: string(name='CallbackUrl'),
  casterId?: string(name='CasterId'),
  casterName?: string(name='CasterName'),
  channelEnable?: int32(name='ChannelEnable'),
  delay?: float(name='Delay'),
  domainName?: string(name='DomainName'),
  programEffect?: int32(name='ProgramEffect'),
  programName?: string(name='ProgramName'),
  recordConfig?: {
    ossBucket?: string(name='OssBucket'),
    ossEndpoint?: string(name='OssEndpoint'),
    recordFormat?: {
      recordFormat?: [ 
      {
        cycleDuration?: int32(name='CycleDuration'),
        format?: string(name='Format'),
        ossObjectPrefix?: string(name='OssObjectPrefix'),
        sliceOssObjectPrefix?: string(name='SliceOssObjectPrefix'),
      }
    ](name='RecordFormat')
    }(name='RecordFormat'),
  }(name='RecordConfig'),
  requestId?: string(name='RequestId'),
  sideOutputUrl?: string(name='SideOutputUrl'),
  sideOutputUrlList?: string(name='SideOutputUrlList'),
  syncGroupsConfig?: {
    syncGroup?: [ 
    {
      hostResourceId?: string(name='HostResourceId'),
      mode?: int32(name='Mode'),
      resourceIds?: {
        resourceId?: [ string ](name='ResourceId')
      }(name='ResourceIds'),
    }
  ](name='SyncGroup')
  }(name='SyncGroupsConfig'),
  transcodeConfig?: {
    casterTemplate?: string(name='CasterTemplate'),
    liveTemplateIds?: {
      locationId?: [ string ](name='LocationId')
    }(name='LiveTemplateIds'),
  }(name='TranscodeConfig'),
  urgentLiveStreamUrl?: string(name='UrgentLiveStreamUrl'),
  urgentMaterialId?: string(name='UrgentMaterialId'),
}

model DescribeCasterConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCasterConfigResponseBody(name='body'),
}

async function describeCasterConfig(request: DescribeCasterConfigRequest): DescribeCasterConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCasterConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCasterLayoutsRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  layoutId?: string(name='LayoutId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeCasterLayoutsResponseBody = {
  layouts?: {
    layout?: [ 
    {
      audioLayers?: {
        audioLayer?: [ 
        {
          fixedDelayDuration?: int32(name='FixedDelayDuration'),
          validChannel?: string(name='ValidChannel'),
          volumeRate?: float(name='VolumeRate'),
        }
      ](name='AudioLayer')
      }(name='AudioLayers'),
      blendList?: {
        locationId?: [ string ](name='LocationId')
      }(name='BlendList'),
      layoutId?: string(name='LayoutId'),
      mixList?: {
        locationId?: [ string ](name='LocationId')
      }(name='MixList'),
      videoLayers?: {
        videoLayer?: [ 
        {
          fillMode?: string(name='FillMode'),
          fixedDelayDuration?: int32(name='FixedDelayDuration'),
          heightNormalized?: float(name='HeightNormalized'),
          positionNormalizeds?: {
            position?: [ float ](name='Position')
          }(name='PositionNormalizeds'),
          positionRefer?: string(name='PositionRefer'),
          widthNormalized?: float(name='WidthNormalized'),
        }
      ](name='VideoLayer')
      }(name='VideoLayers'),
    }
  ](name='Layout')
  }(name='Layouts'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model DescribeCasterLayoutsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCasterLayoutsResponseBody(name='body'),
}

async function describeCasterLayouts(request: DescribeCasterLayoutsRequest): DescribeCasterLayoutsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCasterLayouts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCasterProgramRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  episodeId?: string(name='EpisodeId', position='Query'),
  episodeType?: string(name='EpisodeType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  status?: int32(name='Status', position='Query'),
}

model DescribeCasterProgramResponseBody = {
  casterId?: string(name='CasterId'),
  episodes?: {
    episode?: [ 
    {
      componentIds?: {
        componentId?: [ string ](name='ComponentId')
      }(name='ComponentIds'),
      endTime?: string(name='EndTime'),
      episodeId?: string(name='EpisodeId'),
      episodeName?: string(name='EpisodeName'),
      episodeType?: string(name='EpisodeType'),
      resourceId?: string(name='ResourceId'),
      startTime?: string(name='StartTime'),
      status?: int32(name='Status'),
      switchType?: string(name='SwitchType'),
    }
  ](name='Episode')
  }(name='Episodes'),
  programEffect?: int32(name='ProgramEffect'),
  programName?: string(name='ProgramName'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model DescribeCasterProgramResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCasterProgramResponseBody(name='body'),
}

async function describeCasterProgram(request: DescribeCasterProgramRequest): DescribeCasterProgramResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCasterProgram', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCasterSceneAudioRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  sceneId: string(name='SceneId', position='Query'),
}

model DescribeCasterSceneAudioResponseBody = {
  audioLayers?: {
    audioLayer?: [ 
    {
      fixedDelayDuration?: int32(name='FixedDelayDuration'),
      validChannel?: string(name='ValidChannel'),
      volumeRate?: float(name='VolumeRate'),
    }
  ](name='AudioLayer')
  }(name='AudioLayers'),
  casterId?: string(name='CasterId'),
  followEnable?: int32(name='FollowEnable'),
  mixList?: {
    locationId?: [ string ](name='LocationId')
  }(name='MixList'),
  requestId?: string(name='RequestId'),
}

model DescribeCasterSceneAudioResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCasterSceneAudioResponseBody(name='body'),
}

async function describeCasterSceneAudio(request: DescribeCasterSceneAudioRequest): DescribeCasterSceneAudioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCasterSceneAudio', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCasterScenesRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  sceneId?: string(name='SceneId', position='Query'),
}

model DescribeCasterScenesResponseBody = {
  requestId?: string(name='RequestId'),
  sceneList?: {
    scene?: [ 
    {
      componentIds?: {
        componentId?: [ string ](name='componentId')
      }(name='ComponentIds'),
      layoutId?: string(name='LayoutId'),
      outputType?: string(name='OutputType'),
      sceneId?: string(name='SceneId'),
      sceneName?: string(name='SceneName'),
      status?: int32(name='Status'),
      streamInfos?: {
        streamInfo?: [ 
        {
          outputStreamUrl?: string(name='OutputStreamUrl'),
          transcodeConfig?: string(name='TranscodeConfig'),
          videoFormat?: string(name='VideoFormat'),
        }
      ](name='StreamInfo')
      }(name='StreamInfos'),
      streamUrl?: string(name='StreamUrl'),
    }
  ](name='Scene')
  }(name='SceneList'),
  total?: int32(name='Total'),
}

model DescribeCasterScenesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCasterScenesResponseBody(name='body'),
}

async function describeCasterScenes(request: DescribeCasterScenesRequest): DescribeCasterScenesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCasterScenes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCasterStreamUrlRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeCasterStreamUrlResponseBody = {
  casterId?: string(name='CasterId'),
  casterStreams?: {
    casterStream?: [ 
    {
      outputType?: int32(name='OutputType'),
      rtmpUrl?: string(name='RtmpUrl'),
      sceneId?: string(name='SceneId'),
      streamInfos?: {
        streamInfo?: [ 
        {
          outputStreamUrl?: string(name='OutputStreamUrl'),
          transcodeConfig?: string(name='TranscodeConfig'),
          videoFormat?: string(name='VideoFormat'),
        }
      ](name='StreamInfo')
      }(name='StreamInfos'),
      streamUrl?: string(name='StreamUrl'),
    }
  ](name='CasterStream')
  }(name='CasterStreams'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model DescribeCasterStreamUrlResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCasterStreamUrlResponseBody(name='body'),
}

async function describeCasterStreamUrl(request: DescribeCasterStreamUrlRequest): DescribeCasterStreamUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCasterStreamUrl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCasterSyncGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeCasterSyncGroupResponseBody = {
  casterId?: string(name='CasterId'),
  requestId?: string(name='RequestId'),
  syncGroups?: {
    syncGroup?: [ 
    {
      hostResourceId?: string(name='HostResourceId'),
      mode?: int32(name='Mode'),
      resourceIds?: {
        resourceId?: [ string ](name='ResourceId')
      }(name='ResourceIds'),
    }
  ](name='SyncGroup')
  }(name='SyncGroups'),
}

model DescribeCasterSyncGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCasterSyncGroupResponseBody(name='body'),
}

async function describeCasterSyncGroup(request: DescribeCasterSyncGroupRequest): DescribeCasterSyncGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCasterSyncGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCasterVideoResourcesRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeCasterVideoResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
  videoResources?: {
    videoResource?: [ 
    {
      beginOffset?: int32(name='BeginOffset'),
      endOffset?: int32(name='EndOffset'),
      flvUrl?: string(name='FlvUrl'),
      liveStreamUrl?: string(name='LiveStreamUrl'),
      locationId?: string(name='LocationId'),
      materialId?: string(name='MaterialId'),
      ptsCallbackInterval?: int32(name='PtsCallbackInterval'),
      repeatNum?: int32(name='RepeatNum'),
      resourceId?: string(name='ResourceId'),
      resourceName?: string(name='ResourceName'),
      vodUrl?: string(name='VodUrl'),
    }
  ](name='VideoResource')
  }(name='VideoResources'),
}

model DescribeCasterVideoResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCasterVideoResourcesResponseBody(name='body'),
}

async function describeCasterVideoResources(request: DescribeCasterVideoResourcesRequest): DescribeCasterVideoResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCasterVideoResources', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCastersRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId?: string(name='CasterId', position='Query'),
  casterName?: string(name='CasterName', position='Query'),
  chargeType?: int32(name='ChargeType', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  normType?: string(name='NormType', position='Query'),
  orderByModifyAsc?: string(name='OrderByModifyAsc', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  status?: int32(name='Status', position='Query'),
}

model DescribeCastersResponseBody = {
  casterList?: {
    caster?: [ 
    {
      casterId?: string(name='CasterId'),
      casterName?: string(name='CasterName'),
      casterTemplate?: string(name='CasterTemplate'),
      channelEnable?: int32(name='ChannelEnable'),
      chargeType?: string(name='ChargeType'),
      createTime?: string(name='CreateTime'),
      duration?: string(name='Duration'),
      expireTime?: string(name='ExpireTime'),
      lastModified?: string(name='LastModified'),
      normType?: int32(name='NormType'),
      purchaseTime?: string(name='PurchaseTime'),
      startTime?: string(name='StartTime'),
      status?: int32(name='Status'),
    }
  ](name='Caster')
  }(name='CasterList'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model DescribeCastersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCastersResponseBody(name='body'),
}

async function describeCasters(request: DescribeCastersRequest): DescribeCastersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCasters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainUsageDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  area?: string(name='Area', position='Query'),
  dataProtocol?: string(name='DataProtocol', position='Query'),
  domainName?: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  field: string(name='Field', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  type?: string(name='Type', position='Query'),
}

model DescribeDomainUsageDataResponseBody = {
  area?: string(name='Area'),
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  type?: string(name='Type'),
  usageDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='UsageDataPerInterval'),
}

model DescribeDomainUsageDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainUsageDataResponseBody(name='body'),
}

async function describeDomainUsageData(request: DescribeDomainUsageDataRequest): DescribeDomainUsageDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainUsageData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainWithIntegrityRequest {
  regionId?: string(name='RegionId', position='Host'),
  endTime: string(name='EndTime', position='Query'),
  integrity: float(name='Integrity', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeDomainWithIntegrityResponseBody = {
  content?: [ 
    {
      columns?: [ string ](name='Columns'),
      name?: string(name='Name'),
      points?: [ string ](name='Points'),
    }
  ](name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainWithIntegrityResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainWithIntegrityResponseBody(name='body'),
}

async function describeDomainWithIntegrity(request: DescribeDomainWithIntegrityRequest): DescribeDomainWithIntegrityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainWithIntegrity', 'GET', '/', 'json', false, 'json', request);
}

model DescribeForbidPushStreamRoomListRequest {
  regionId?: string(name='RegionId', position='Host'),
  appId: string(name='AppId', position='Query'),
  order?: string(name='Order', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, position='Query'),
}

model DescribeForbidPushStreamRoomListResponseBody = {
  requestId?: string(name='RequestId'),
  roomList?: [ 
    {
      anchorId?: string(name='AnchorId'),
      opEndTime?: string(name='OpEndTime'),
      opStartTime?: string(name='OpStartTime'),
      roomId?: string(name='RoomId'),
    }
  ](name='RoomList'),
  totalNum?: int32(name='TotalNum'),
  totalPage?: int32(name='TotalPage'),
}

model DescribeForbidPushStreamRoomListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeForbidPushStreamRoomListResponseBody(name='body'),
}

async function describeForbidPushStreamRoomList(request: DescribeForbidPushStreamRoomListRequest): DescribeForbidPushStreamRoomListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeForbidPushStreamRoomList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHlsLiveStreamRealTimeBpsDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName?: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  time: string(name='Time', position='Query'),
}

model DescribeHlsLiveStreamRealTimeBpsDataResponseBody = {
  requestId?: string(name='RequestId'),
  time?: string(name='Time'),
  usageData?: [ 
    {
      domainName?: string(name='DomainName'),
      streamInfos?: [ 
        {
          infos?: [ 
            {
              downFlow?: float(name='DownFlow'),
              online?: float(name='Online'),
              rate?: string(name='Rate'),
            }
          ](name='Infos'),
          streamName?: string(name='StreamName'),
        }
      ](name='StreamInfos'),
    }
  ](name='UsageData'),
}

model DescribeHlsLiveStreamRealTimeBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHlsLiveStreamRealTimeBpsDataResponseBody(name='body'),
}

async function describeHlsLiveStreamRealTimeBpsData(request: DescribeHlsLiveStreamRealTimeBpsDataRequest): DescribeHlsLiveStreamRealTimeBpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHlsLiveStreamRealTimeBpsData', 'GET', '/', 'json', false, 'json', request);
}

model DescribeLiveAudioAuditConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName?: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  streamName?: string(name='StreamName', position='Query'),
}

model DescribeLiveAudioAuditConfigResponseBody = {
  liveAudioAuditConfigList?: {
    liveAudioAuditConfig?: [ 
    {
      appName?: string(name='AppName'),
      bizType?: string(name='BizType'),
      domainName?: string(name='DomainName'),
      scenes?: {
        scene?: [ string ](name='scene')
      }(name='Scenes'),
      streamName?: string(name='StreamName'),
    }
  ](name='LiveAudioAuditConfig')
  }(name='LiveAudioAuditConfigList'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveAudioAuditConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveAudioAuditConfigResponseBody(name='body'),
}

async function describeLiveAudioAuditConfig(request: DescribeLiveAudioAuditConfigRequest): DescribeLiveAudioAuditConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveAudioAuditConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveAudioAuditNotifyConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeLiveAudioAuditNotifyConfigResponseBody = {
  liveAudioAuditNotifyConfigList?: {
    liveAudioAuditNotifyConfig?: [ 
    {
      callback?: string(name='Callback'),
      callbackTemplate?: string(name='CallbackTemplate'),
      domainName?: string(name='DomainName'),
    }
  ](name='LiveAudioAuditNotifyConfig')
  }(name='LiveAudioAuditNotifyConfigList'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveAudioAuditNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveAudioAuditNotifyConfigResponseBody(name='body'),
}

async function describeLiveAudioAuditNotifyConfig(request: DescribeLiveAudioAuditNotifyConfigRequest): DescribeLiveAudioAuditNotifyConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveAudioAuditNotifyConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveCertificateDetailRequest {
  certName: string(name='CertName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeLiveCertificateDetailResponseBody = {
  cert?: string(name='Cert'),
  certId?: long(name='CertId'),
  certName?: string(name='CertName'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveCertificateDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveCertificateDetailResponseBody(name='body'),
}

async function describeLiveCertificateDetail(request: DescribeLiveCertificateDetailRequest): DescribeLiveCertificateDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveCertificateDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveCertificateListRequest {
  domainName?: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeLiveCertificateListResponseBody = {
  certificateListModel?: {
    certList?: {
      cert?: [ 
      {
        certId?: long(name='CertId'),
        certName?: string(name='CertName'),
        common?: string(name='Common'),
        fingerprint?: string(name='Fingerprint'),
        issuer?: string(name='Issuer'),
        lastTime?: long(name='LastTime'),
      }
    ](name='Cert')
    }(name='CertList'),
    count?: int32(name='Count'),
  }(name='CertificateListModel'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveCertificateListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveCertificateListResponseBody(name='body'),
}

async function describeLiveCertificateList(request: DescribeLiveCertificateListRequest): DescribeLiveCertificateListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveCertificateList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveDetectNotifyConfigRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeLiveDetectNotifyConfigResponseBody = {
  liveDetectNotifyConfig?: {
    domainName?: string(name='DomainName'),
    notifyUrl?: string(name='NotifyUrl'),
  }(name='LiveDetectNotifyConfig'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveDetectNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDetectNotifyConfigResponseBody(name='body'),
}

async function describeLiveDetectNotifyConfig(request: DescribeLiveDetectNotifyConfigRequest): DescribeLiveDetectNotifyConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDetectNotifyConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveDetectPornDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  app?: string(name='App', position='Query'),
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  fee?: string(name='Fee', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  region?: string(name='Region', position='Query'),
  scene?: string(name='Scene', position='Query'),
  splitBy?: string(name='SplitBy', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  stream?: string(name='Stream', position='Query'),
}

model DescribeLiveDetectPornDataResponseBody = {
  detectPornData?: {
    dataModule?: [ 
    {
      app?: string(name='App'),
      count?: long(name='Count'),
      domain?: string(name='Domain'),
      fee?: string(name='Fee'),
      region?: string(name='Region'),
      scene?: string(name='Scene'),
      stream?: string(name='Stream'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='DetectPornData'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveDetectPornDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDetectPornDataResponseBody(name='body'),
}

async function describeLiveDetectPornData(request: DescribeLiveDetectPornDataRequest): DescribeLiveDetectPornDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDetectPornData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveDomainBpsDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeLiveDomainBpsDataResponseBody = {
  bpsDataPerInterval?: {
    dataModule?: [ 
    {
      bpsValue?: string(name='BpsValue'),
      httpBpsValue?: string(name='HttpBpsValue'),
      httpsBpsValue?: string(name='HttpsBpsValue'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='BpsDataPerInterval'),
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeLiveDomainBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainBpsDataResponseBody(name='body'),
}

async function describeLiveDomainBpsData(request: DescribeLiveDomainBpsDataRequest): DescribeLiveDomainBpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDomainBpsData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveDomainBpsDataByLayerRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  layer?: string(name='Layer', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeLiveDomainBpsDataByLayerResponseBody = {
  bpsDataInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      trafficValue?: string(name='TrafficValue'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='BpsDataInterval'),
  dataInterval?: string(name='DataInterval'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveDomainBpsDataByLayerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainBpsDataByLayerResponseBody(name='body'),
}

async function describeLiveDomainBpsDataByLayer(request: DescribeLiveDomainBpsDataByLayerRequest): DescribeLiveDomainBpsDataByLayerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDomainBpsDataByLayer', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveDomainBpsDataByTimeStampRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ispNames: string(name='IspNames', position='Query'),
  locationNames: string(name='LocationNames', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  timePoint: string(name='TimePoint', position='Query'),
}

model DescribeLiveDomainBpsDataByTimeStampResponseBody = {
  bpsDataList?: {
    bpsDataModel?: [ 
    {
      bps?: long(name='Bps'),
      ispName?: string(name='IspName'),
      locationName?: string(name='LocationName'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='BpsDataModel')
  }(name='BpsDataList'),
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
  timeStamp?: string(name='TimeStamp'),
}

model DescribeLiveDomainBpsDataByTimeStampResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainBpsDataByTimeStampResponseBody(name='body'),
}

async function describeLiveDomainBpsDataByTimeStamp(request: DescribeLiveDomainBpsDataByTimeStampRequest): DescribeLiveDomainBpsDataByTimeStampResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDomainBpsDataByTimeStamp', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveDomainCertificateInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeLiveDomainCertificateInfoResponseBody = {
  certInfos?: {
    certInfo?: [ 
    {
      certDomainName?: string(name='CertDomainName'),
      certExpireTime?: string(name='CertExpireTime'),
      certLife?: string(name='CertLife'),
      certName?: string(name='CertName'),
      certOrg?: string(name='CertOrg'),
      certType?: string(name='CertType'),
      domainName?: string(name='DomainName'),
      SSLProtocol?: string(name='SSLProtocol'),
      SSLPub?: string(name='SSLPub'),
      status?: string(name='Status'),
    }
  ](name='CertInfo')
  }(name='CertInfos'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveDomainCertificateInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainCertificateInfoResponseBody(name='body'),
}

async function describeLiveDomainCertificateInfo(request: DescribeLiveDomainCertificateInfoRequest): DescribeLiveDomainCertificateInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDomainCertificateInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveDomainConfigsRequest {
  domainName: string(name='DomainName', position='Query'),
  functionNames: string(name='FunctionNames', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeLiveDomainConfigsResponseBody = {
  domainConfigs?: {
    domainConfig?: [ 
    {
      configId?: string(name='ConfigId'),
      functionArgs?: {
        functionArg?: [ 
        {
          argName?: string(name='ArgName'),
          argValue?: string(name='ArgValue'),
        }
      ](name='FunctionArg')
      }(name='FunctionArgs'),
      functionName?: string(name='FunctionName'),
      status?: string(name='Status'),
    }
  ](name='DomainConfig')
  }(name='DomainConfigs'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainConfigsResponseBody(name='body'),
}

async function describeLiveDomainConfigs(request: DescribeLiveDomainConfigsRequest): DescribeLiveDomainConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDomainConfigs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveDomainDetailRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeLiveDomainDetailResponseBody = {
  domainDetail?: {
    certName?: string(name='CertName'),
    cname?: string(name='Cname'),
    description?: string(name='Description'),
    domainName?: string(name='DomainName'),
    domainStatus?: string(name='DomainStatus'),
    gmtCreated?: string(name='GmtCreated'),
    gmtModified?: string(name='GmtModified'),
    liveDomainType?: string(name='LiveDomainType'),
    region?: string(name='Region'),
    SSLProtocol?: string(name='SSLProtocol'),
    SSLPub?: string(name='SSLPub'),
    scope?: string(name='Scope'),
  }(name='DomainDetail'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainDetailResponseBody(name='body'),
}

async function describeLiveDomainDetail(request: DescribeLiveDomainDetailRequest): DescribeLiveDomainDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDomainDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveDomainFrameRateAndBitRateDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  queryTime: string(name='QueryTime', position='Query'),
}

model DescribeLiveDomainFrameRateAndBitRateDataResponseBody = {
  frameRateAndBitRateInfos?: {
    frameRateAndBitRateInfo?: [ 
    {
      audioFrameRate?: float(name='AudioFrameRate'),
      bitRate?: float(name='BitRate'),
      streamUrl?: string(name='StreamUrl'),
      videoFrameRate?: float(name='VideoFrameRate'),
    }
  ](name='FrameRateAndBitRateInfo')
  }(name='FrameRateAndBitRateInfos'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveDomainFrameRateAndBitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainFrameRateAndBitRateDataResponseBody(name='body'),
}

async function describeLiveDomainFrameRateAndBitRateData(request: DescribeLiveDomainFrameRateAndBitRateDataRequest): DescribeLiveDomainFrameRateAndBitRateDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDomainFrameRateAndBitRateData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveDomainLimitRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeLiveDomainLimitResponseBody = {
  liveDomainLimitList?: {
    liveDomainLimit?: [ 
    {
      domainName?: string(name='DomainName'),
      limitNum?: int32(name='LimitNum'),
      limitTranscodeNum?: int32(name='LimitTranscodeNum'),
      limitTransferNum?: int32(name='LimitTransferNum'),
    }
  ](name='LiveDomainLimit')
  }(name='LiveDomainLimitList'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveDomainLimitResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainLimitResponseBody(name='body'),
}

async function describeLiveDomainLimit(request: DescribeLiveDomainLimitRequest): DescribeLiveDomainLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDomainLimit', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveDomainLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: long(name='PageNumber', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeLiveDomainLogResponseBody = {
  domainLogDetails?: {
    domainLogDetail?: [ 
    {
      logCount?: long(name='LogCount'),
      logInfos?: {
        logInfoDetail?: [ 
        {
          endTime?: string(name='EndTime'),
          logName?: string(name='LogName'),
          logPath?: string(name='LogPath'),
          logSize?: long(name='LogSize'),
          startTime?: string(name='StartTime'),
        }
      ](name='LogInfoDetail')
      }(name='LogInfos'),
      pageInfos?: {
        pageIndex?: long(name='PageIndex'),
        pageSize?: long(name='PageSize'),
        total?: long(name='Total'),
      }(name='PageInfos'),
    }
  ](name='DomainLogDetail')
  }(name='DomainLogDetails'),
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveDomainLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainLogResponseBody(name='body'),
}

async function describeLiveDomainLog(request: DescribeLiveDomainLogRequest): DescribeLiveDomainLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDomainLog', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveDomainMappingRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeLiveDomainMappingResponseBody = {
  liveDomainModels?: {
    liveDomainModel?: [ 
    {
      domainName?: string(name='DomainName'),
      type?: string(name='Type'),
    }
  ](name='LiveDomainModel')
  }(name='LiveDomainModels'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveDomainMappingResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainMappingResponseBody(name='body'),
}

async function describeLiveDomainMapping(request: DescribeLiveDomainMappingRequest): DescribeLiveDomainMappingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDomainMapping', 'GET', '/', 'json', false, 'json', request);
}

model DescribeLiveDomainOnlineUserNumRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  queryTime?: string(name='QueryTime', position='Query'),
}

model DescribeLiveDomainOnlineUserNumResponseBody = {
  onlineUserInfo?: {
    liveStreamOnlineUserNumInfo?: [ 
    {
      infos?: {
        info?: [ 
        {
          transcodeTemplate?: string(name='TranscodeTemplate'),
          userNumber?: long(name='UserNumber'),
        }
      ](name='Info')
      }(name='Infos'),
      streamName?: string(name='StreamName'),
    }
  ](name='LiveStreamOnlineUserNumInfo')
  }(name='OnlineUserInfo'),
  requestId?: string(name='RequestId'),
  streamCount?: int32(name='StreamCount'),
  userCount?: int32(name='UserCount'),
}

model DescribeLiveDomainOnlineUserNumResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainOnlineUserNumResponseBody(name='body'),
}

async function describeLiveDomainOnlineUserNum(request: DescribeLiveDomainOnlineUserNumRequest): DescribeLiveDomainOnlineUserNumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDomainOnlineUserNum', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveDomainPushBpsDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeLiveDomainPushBpsDataResponseBody = {
  bpsDataPerInterval?: {
    dataModule?: [ 
    {
      bpsValue?: string(name='BpsValue'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='BpsDataPerInterval'),
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeLiveDomainPushBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainPushBpsDataResponseBody(name='body'),
}

async function describeLiveDomainPushBpsData(request: DescribeLiveDomainPushBpsDataRequest): DescribeLiveDomainPushBpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDomainPushBpsData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveDomainPushTrafficDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeLiveDomainPushTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  trafficDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      trafficValue?: string(name='TrafficValue'),
    }
  ](name='DataModule')
  }(name='TrafficDataPerInterval'),
}

model DescribeLiveDomainPushTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainPushTrafficDataResponseBody(name='body'),
}

async function describeLiveDomainPushTrafficData(request: DescribeLiveDomainPushTrafficDataRequest): DescribeLiveDomainPushTrafficDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDomainPushTrafficData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveDomainPvUvDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeLiveDomainPvUvDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  pvUvDataInfos?: {
    pvUvDataInfo?: [ 
    {
      pv?: string(name='PV'),
      timeStamp?: string(name='TimeStamp'),
      uv?: string(name='UV'),
    }
  ](name='PvUvDataInfo')
  }(name='PvUvDataInfos'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeLiveDomainPvUvDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainPvUvDataResponseBody(name='body'),
}

async function describeLiveDomainPvUvData(request: DescribeLiveDomainPvUvDataRequest): DescribeLiveDomainPvUvDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDomainPvUvData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveDomainRealTimeBpsDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeLiveDomainRealTimeBpsDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  realTimeBpsDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='RealTimeBpsDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeLiveDomainRealTimeBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainRealTimeBpsDataResponseBody(name='body'),
}

async function describeLiveDomainRealTimeBpsData(request: DescribeLiveDomainRealTimeBpsDataRequest): DescribeLiveDomainRealTimeBpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDomainRealTimeBpsData', 'GET', '/', 'json', false, 'json', request);
}

model DescribeLiveDomainRealTimeHttpCodeDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeLiveDomainRealTimeHttpCodeDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  realTimeHttpCodeData?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: {
        realTimeCodeProportionData?: [ 
        {
          code?: string(name='Code'),
          count?: string(name='Count'),
          proportion?: string(name='Proportion'),
        }
      ](name='RealTimeCodeProportionData')
      }(name='Value'),
    }
  ](name='UsageData')
  }(name='RealTimeHttpCodeData'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeLiveDomainRealTimeHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainRealTimeHttpCodeDataResponseBody(name='body'),
}

async function describeLiveDomainRealTimeHttpCodeData(request: DescribeLiveDomainRealTimeHttpCodeDataRequest): DescribeLiveDomainRealTimeHttpCodeDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDomainRealTimeHttpCodeData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveDomainRealTimeTrafficDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeLiveDomainRealTimeTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  realTimeTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='RealTimeTrafficDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeLiveDomainRealTimeTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainRealTimeTrafficDataResponseBody(name='body'),
}

async function describeLiveDomainRealTimeTrafficData(request: DescribeLiveDomainRealTimeTrafficDataRequest): DescribeLiveDomainRealTimeTrafficDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDomainRealTimeTrafficData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveDomainRealtimeLogDeliveryRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeLiveDomainRealtimeLogDeliveryResponseBody = {
  logstore?: string(name='Logstore'),
  project?: string(name='Project'),
  region?: string(name='Region'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeLiveDomainRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainRealtimeLogDeliveryResponseBody(name='body'),
}

async function describeLiveDomainRealtimeLogDelivery(request: DescribeLiveDomainRealtimeLogDeliveryRequest): DescribeLiveDomainRealtimeLogDeliveryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDomainRealtimeLogDelivery', 'GET', '/', 'json', false, 'json', request);
}

model DescribeLiveDomainRecordDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName?: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  recordType?: string(name='RecordType', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeLiveDomainRecordDataResponseBody = {
  recordDataInfos?: {
    recordDataInfo?: [ 
    {
      date?: string(name='Date'),
      detail?: {
        FLV?: int32(name='FLV'),
        mP4?: int32(name='MP4'),
        ts?: int32(name='TS'),
      }(name='Detail'),
      total?: int32(name='Total'),
    }
  ](name='RecordDataInfo')
  }(name='RecordDataInfos'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveDomainRecordDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainRecordDataResponseBody(name='body'),
}

async function describeLiveDomainRecordData(request: DescribeLiveDomainRecordDataRequest): DescribeLiveDomainRecordDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDomainRecordData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveDomainRecordUsageDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName?: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  splitBy?: string(name='SplitBy', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeLiveDomainRecordUsageDataResponseBody = {
  recordUsageData?: {
    dataModule?: [ 
    {
      count?: long(name='Count'),
      domain?: string(name='Domain'),
      duration?: long(name='Duration'),
      timeStamp?: string(name='TimeStamp'),
      type?: string(name='Type'),
    }
  ](name='DataModule')
  }(name='RecordUsageData'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveDomainRecordUsageDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainRecordUsageDataResponseBody(name='body'),
}

async function describeLiveDomainRecordUsageData(request: DescribeLiveDomainRecordUsageDataRequest): DescribeLiveDomainRecordUsageDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDomainRecordUsageData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveDomainSnapshotDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName?: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeLiveDomainSnapshotDataResponseBody = {
  requestId?: string(name='RequestId'),
  snapshotDataInfos?: {
    snapshotDataInfo?: [ 
    {
      date?: string(name='Date'),
      total?: int32(name='Total'),
    }
  ](name='SnapshotDataInfo')
  }(name='SnapshotDataInfos'),
}

model DescribeLiveDomainSnapshotDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainSnapshotDataResponseBody(name='body'),
}

async function describeLiveDomainSnapshotData(request: DescribeLiveDomainSnapshotDataRequest): DescribeLiveDomainSnapshotDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDomainSnapshotData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveDomainStagingConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  functionNames: string(name='FunctionNames', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeLiveDomainStagingConfigResponseBody = {
  domainConfigs?: [ 
    {
      configId?: string(name='ConfigId'),
      functionArgs?: [ 
        {
          argName?: string(name='ArgName'),
          argValue?: string(name='ArgValue'),
        }
      ](name='FunctionArgs'),
      functionName?: string(name='FunctionName'),
      status?: string(name='Status'),
    }
  ](name='DomainConfigs'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveDomainStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainStagingConfigResponseBody(name='body'),
}

async function describeLiveDomainStagingConfig(request: DescribeLiveDomainStagingConfigRequest): DescribeLiveDomainStagingConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDomainStagingConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveDomainStreamTranscodeDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName?: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  split?: string(name='Split', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeLiveDomainStreamTranscodeDataResponseBody = {
  requestId?: string(name='RequestId'),
  transcodeDataList?: {
    transcodeData?: [ 
    {
      domain?: string(name='Domain'),
      duration?: int32(name='Duration'),
      fps?: string(name='Fps'),
      region?: string(name='Region'),
      resolution?: string(name='Resolution'),
      tanscodeType?: string(name='TanscodeType'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='TranscodeData')
  }(name='TranscodeDataList'),
}

model DescribeLiveDomainStreamTranscodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainStreamTranscodeDataResponseBody(name='body'),
}

async function describeLiveDomainStreamTranscodeData(request: DescribeLiveDomainStreamTranscodeDataRequest): DescribeLiveDomainStreamTranscodeDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDomainStreamTranscodeData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveDomainTimeShiftDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeLiveDomainTimeShiftDataResponseBody = {
  requestId?: string(name='RequestId'),
  timeShiftData?: {
    dataModule?: [ 
    {
      size?: string(name='Size'),
      timeStamp?: string(name='TimeStamp'),
      type?: string(name='Type'),
    }
  ](name='DataModule')
  }(name='TimeShiftData'),
}

model DescribeLiveDomainTimeShiftDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainTimeShiftDataResponseBody(name='body'),
}

async function describeLiveDomainTimeShiftData(request: DescribeLiveDomainTimeShiftDataRequest): DescribeLiveDomainTimeShiftDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDomainTimeShiftData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveDomainTrafficDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeLiveDomainTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  trafficDataPerInterval?: {
    dataModule?: [ 
    {
      httpTrafficValue?: string(name='HttpTrafficValue'),
      httpsTrafficValue?: string(name='HttpsTrafficValue'),
      timeStamp?: string(name='TimeStamp'),
      trafficValue?: string(name='TrafficValue'),
    }
  ](name='DataModule')
  }(name='TrafficDataPerInterval'),
}

model DescribeLiveDomainTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainTrafficDataResponseBody(name='body'),
}

async function describeLiveDomainTrafficData(request: DescribeLiveDomainTrafficDataRequest): DescribeLiveDomainTrafficDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDomainTrafficData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveDomainTranscodeDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName?: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeLiveDomainTranscodeDataResponseBody = {
  requestId?: string(name='RequestId'),
  transcodeDataInfos?: {
    transcodeDataInfo?: [ 
    {
      date?: string(name='Date'),
      detail?: string(name='Detail'),
      total?: int32(name='Total'),
    }
  ](name='TranscodeDataInfo')
  }(name='TranscodeDataInfos'),
}

model DescribeLiveDomainTranscodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDomainTranscodeDataResponseBody(name='body'),
}

async function describeLiveDomainTranscodeData(request: DescribeLiveDomainTranscodeDataRequest): DescribeLiveDomainTranscodeDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDomainTranscodeData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveDrmUsageDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName?: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  splitBy?: string(name='SplitBy', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeLiveDrmUsageDataResponseBody = {
  drmUsageData?: {
    dataModule?: [ 
    {
      count?: long(name='Count'),
      domain?: string(name='Domain'),
      drmType?: string(name='DrmType'),
      region?: string(name='Region'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='DrmUsageData'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveDrmUsageDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveDrmUsageDataResponseBody(name='body'),
}

async function describeLiveDrmUsageData(request: DescribeLiveDrmUsageDataRequest): DescribeLiveDrmUsageDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveDrmUsageData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveEdgeTransferRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeLiveEdgeTransferResponseBody = {
  appName?: string(name='AppName'),
  domainName?: string(name='DomainName'),
  httpDns?: string(name='HttpDns'),
  requestId?: string(name='RequestId'),
  streamName?: string(name='StreamName'),
  targetDomainList?: string(name='TargetDomainList'),
  transferArgs?: string(name='TransferArgs'),
}

model DescribeLiveEdgeTransferResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveEdgeTransferResponseBody(name='body'),
}

async function describeLiveEdgeTransfer(request: DescribeLiveEdgeTransferRequest): DescribeLiveEdgeTransferResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveEdgeTransfer', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveLazyPullStreamConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName?: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeLiveLazyPullStreamConfigResponseBody = {
  liveLazyPullConfigList?: {
    liveLazyPullConfig?: [ 
    {
      appName?: string(name='AppName'),
      domainName?: string(name='DomainName'),
      pullAppName?: string(name='PullAppName'),
      pullDomainName?: string(name='PullDomainName'),
      pullProtocol?: string(name='PullProtocol'),
    }
  ](name='LiveLazyPullConfig')
  }(name='LiveLazyPullConfigList'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveLazyPullStreamConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveLazyPullStreamConfigResponseBody(name='body'),
}

async function describeLiveLazyPullStreamConfig(request: DescribeLiveLazyPullStreamConfigRequest): DescribeLiveLazyPullStreamConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveLazyPullStreamConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveProducerUsageDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  instance?: string(name='Instance', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  region?: string(name='Region', position='Query'),
  splitBy?: string(name='SplitBy', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  type?: string(name='Type', position='Query'),
  app?: string(name='app', position='Query'),
}

model DescribeLiveProducerUsageDataResponseBody = {
  billProducerData?: {
    billProducerDataItem?: [ 
    {
      domainName?: string(name='DomainName'),
      instance?: string(name='Instance'),
      outputHdDuration?: long(name='OutputHdDuration'),
      outputLdDuration?: long(name='OutputLdDuration'),
      outputSdDuration?: long(name='OutputSdDuration'),
      region?: string(name='Region'),
      timeStamp?: string(name='TimeStamp'),
      tranHdDuration?: long(name='TranHdDuration'),
      tranLdDuration?: long(name='TranLdDuration'),
      tranSdDuration?: long(name='TranSdDuration'),
      type?: string(name='Type'),
    }
  ](name='BillProducerDataItem')
  }(name='BillProducerData'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeLiveProducerUsageDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveProducerUsageDataResponseBody(name='body'),
}

async function describeLiveProducerUsageData(request: DescribeLiveProducerUsageDataRequest): DescribeLiveProducerUsageDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveProducerUsageData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLivePullStreamConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeLivePullStreamConfigResponseBody = {
  liveAppRecordList?: {
    liveAppRecord?: [ 
    {
      appName?: string(name='AppName'),
      domainName?: string(name='DomainName'),
      endTime?: string(name='EndTime'),
      sourceUrl?: string(name='SourceUrl'),
      sourceUsing?: string(name='SourceUsing'),
      startTime?: string(name='StartTime'),
      streamName?: string(name='StreamName'),
    }
  ](name='LiveAppRecord')
  }(name='LiveAppRecordList'),
  requestId?: string(name='RequestId'),
}

model DescribeLivePullStreamConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLivePullStreamConfigResponseBody(name='body'),
}

async function describeLivePullStreamConfig(request: DescribeLivePullStreamConfigRequest): DescribeLivePullStreamConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLivePullStreamConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveRealtimeDeliveryAccRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  logStore?: string(name='LogStore', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  project?: string(name='Project', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeLiveRealtimeDeliveryAccResponseBody = {
  realTimeDeliveryAccData?: {
    accData?: [ 
    {
      failedNum?: int32(name='FailedNum'),
      successNum?: int32(name='SuccessNum'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='AccData')
  }(name='RealTimeDeliveryAccData'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveRealtimeDeliveryAccResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveRealtimeDeliveryAccResponseBody(name='body'),
}

async function describeLiveRealtimeDeliveryAcc(request: DescribeLiveRealtimeDeliveryAccRequest): DescribeLiveRealtimeDeliveryAccResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveRealtimeDeliveryAcc', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveRealtimeLogAuthorizedRequest {
  regionId?: string(name='RegionId', position='Host'),
  liveOpenapiReserve?: string(name='LiveOpenapiReserve', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeLiveRealtimeLogAuthorizedResponseBody = {
  authorizedStatus?: string(name='AuthorizedStatus'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveRealtimeLogAuthorizedResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveRealtimeLogAuthorizedResponseBody(name='body'),
}

async function describeLiveRealtimeLogAuthorized(request: DescribeLiveRealtimeLogAuthorizedRequest): DescribeLiveRealtimeLogAuthorizedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveRealtimeLogAuthorized', 'GET', '/', 'json', false, 'json', request);
}

model DescribeLiveRecordConfigRequest {
  appName?: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  order?: string(name='Order', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', minimum=5, maximum=30, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  streamName?: string(name='StreamName', position='Query'),
}

model DescribeLiveRecordConfigResponseBody = {
  liveAppRecordList?: {
    liveAppRecord?: [ 
    {
      appName?: string(name='AppName'),
      createTime?: string(name='CreateTime'),
      domainName?: string(name='DomainName'),
      endTime?: string(name='EndTime'),
      onDemond?: int32(name='OnDemond'),
      ossBucket?: string(name='OssBucket'),
      ossEndpoint?: string(name='OssEndpoint'),
      recordFormatList?: {
        recordFormat?: [ 
        {
          cycleDuration?: int32(name='CycleDuration'),
          format?: string(name='Format'),
          ossObjectPrefix?: string(name='OssObjectPrefix'),
          sliceDuration?: int32(name='SliceDuration'),
          sliceOssObjectPrefix?: string(name='SliceOssObjectPrefix'),
        }
      ](name='RecordFormat')
      }(name='RecordFormatList'),
      startTime?: string(name='StartTime'),
      streamName?: string(name='StreamName'),
      transcodeRecordFormatList?: {
        recordFormat?: [ 
        {
          cycleDuration?: int32(name='CycleDuration'),
          format?: string(name='Format'),
          ossObjectPrefix?: string(name='OssObjectPrefix'),
          sliceDuration?: int32(name='SliceDuration'),
          sliceOssObjectPrefix?: string(name='SliceOssObjectPrefix'),
        }
      ](name='RecordFormat')
      }(name='TranscodeRecordFormatList'),
      transcodeTemplates?: {
        templates?: [ string ](name='Templates')
      }(name='TranscodeTemplates'),
    }
  ](name='LiveAppRecord')
  }(name='LiveAppRecordList'),
  order?: string(name='Order'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalNum?: int32(name='TotalNum'),
  totalPage?: int32(name='TotalPage'),
}

model DescribeLiveRecordConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveRecordConfigResponseBody(name='body'),
}

async function describeLiveRecordConfig(request: DescribeLiveRecordConfigRequest): DescribeLiveRecordConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveRecordConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveRecordNotifyConfigRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeLiveRecordNotifyConfigResponseBody = {
  liveRecordNotifyConfig?: {
    domainName?: string(name='DomainName'),
    needStatusNotify?: boolean(name='NeedStatusNotify'),
    notifyUrl?: string(name='NotifyUrl'),
    onDemandUrl?: string(name='OnDemandUrl'),
  }(name='LiveRecordNotifyConfig'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveRecordNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveRecordNotifyConfigResponseBody(name='body'),
}

async function describeLiveRecordNotifyConfig(request: DescribeLiveRecordNotifyConfigRequest): DescribeLiveRecordNotifyConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveRecordNotifyConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveRecordVodConfigsRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName?: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: long(name='PageNum', position='Query'),
  pageSize?: long(name='PageSize', minimum=5, maximum=100, position='Query'),
  streamName?: string(name='StreamName', position='Query'),
}

model DescribeLiveRecordVodConfigsResponseBody = {
  liveRecordVodConfigs?: {
    liveRecordVodConfig?: [ 
    {
      appName?: string(name='AppName'),
      autoCompose?: string(name='AutoCompose'),
      composeVodTranscodeGroupId?: string(name='ComposeVodTranscodeGroupId'),
      createTime?: string(name='CreateTime'),
      cycleDuration?: int32(name='CycleDuration'),
      domainName?: string(name='DomainName'),
      streamName?: string(name='StreamName'),
      vodTranscodeGroupId?: string(name='VodTranscodeGroupId'),
    }
  ](name='LiveRecordVodConfig')
  }(name='LiveRecordVodConfigs'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: string(name='Total'),
}

model DescribeLiveRecordVodConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveRecordVodConfigsResponseBody(name='body'),
}

async function describeLiveRecordVodConfigs(request: DescribeLiveRecordVodConfigsRequest): DescribeLiveRecordVodConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveRecordVodConfigs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveShiftConfigsRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeLiveShiftConfigsResponseBody = {
  content?: {
    config?: [ 
    {
      appName?: string(name='AppName'),
      domainName?: string(name='DomainName'),
      ignoreTranscode?: boolean(name='IgnoreTranscode'),
      streamName?: string(name='StreamName'),
      vision?: int32(name='Vision'),
    }
  ](name='Config')
  }(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveShiftConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveShiftConfigsResponseBody(name='body'),
}

async function describeLiveShiftConfigs(request: DescribeLiveShiftConfigsRequest): DescribeLiveShiftConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveShiftConfigs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveSnapshotConfigRequest {
  appName?: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  order?: string(name='Order', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', minimum=5, maximum=30, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeLiveSnapshotConfigResponseBody = {
  liveStreamSnapshotConfigList?: {
    liveStreamSnapshotConfig?: [ 
    {
      appName?: string(name='AppName'),
      callback?: string(name='Callback'),
      createTime?: string(name='CreateTime'),
      domainName?: string(name='DomainName'),
      ossBucket?: string(name='OssBucket'),
      ossEndpoint?: string(name='OssEndpoint'),
      overwriteOssObject?: string(name='OverwriteOssObject'),
      sequenceOssObject?: string(name='SequenceOssObject'),
      timeInterval?: int32(name='TimeInterval'),
    }
  ](name='LiveStreamSnapshotConfig')
  }(name='LiveStreamSnapshotConfigList'),
  order?: string(name='Order'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalNum?: int32(name='TotalNum'),
  totalPage?: int32(name='TotalPage'),
}

model DescribeLiveSnapshotConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveSnapshotConfigResponseBody(name='body'),
}

async function describeLiveSnapshotConfig(request: DescribeLiveSnapshotConfigRequest): DescribeLiveSnapshotConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveSnapshotConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveSnapshotDetectPornConfigRequest {
  appName?: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  order?: string(name='Order', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', minimum=5, maximum=30, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeLiveSnapshotDetectPornConfigResponseBody = {
  liveSnapshotDetectPornConfigList?: {
    liveSnapshotDetectPornConfig?: [ 
    {
      appName?: string(name='AppName'),
      domainName?: string(name='DomainName'),
      interval?: int32(name='Interval'),
      ossBucket?: string(name='OssBucket'),
      ossEndpoint?: string(name='OssEndpoint'),
      ossObject?: string(name='OssObject'),
      scenes?: {
        scene?: [ string ](name='scene')
      }(name='Scenes'),
    }
  ](name='LiveSnapshotDetectPornConfig')
  }(name='LiveSnapshotDetectPornConfigList'),
  order?: string(name='Order'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalNum?: int32(name='TotalNum'),
  totalPage?: int32(name='TotalPage'),
}

model DescribeLiveSnapshotDetectPornConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveSnapshotDetectPornConfigResponseBody(name='body'),
}

async function describeLiveSnapshotDetectPornConfig(request: DescribeLiveSnapshotDetectPornConfigRequest): DescribeLiveSnapshotDetectPornConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveSnapshotDetectPornConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveSnapshotNotifyConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeLiveSnapshotNotifyConfigResponseBody = {
  domainName?: string(name='DomainName'),
  notifyAuthKey?: string(name='NotifyAuthKey'),
  notifyReqAuth?: string(name='NotifyReqAuth'),
  notifyUrl?: string(name='NotifyUrl'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveSnapshotNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveSnapshotNotifyConfigResponseBody(name='body'),
}

async function describeLiveSnapshotNotifyConfig(request: DescribeLiveSnapshotNotifyConfigRequest): DescribeLiveSnapshotNotifyConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveSnapshotNotifyConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveStreamAuthCheckingRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  url: string(name='Url', position='Query'),
}

model DescribeLiveStreamAuthCheckingResponseBody = {
  description?: string(name='Description'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeLiveStreamAuthCheckingResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamAuthCheckingResponseBody(name='body'),
}

async function describeLiveStreamAuthChecking(request: DescribeLiveStreamAuthCheckingRequest): DescribeLiveStreamAuthCheckingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveStreamAuthChecking', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveStreamBitRateDataRequest {
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  streamName: string(name='StreamName', position='Query'),
}

model DescribeLiveStreamBitRateDataResponseBody = {
  frameRateAndBitRateInfos?: {
    frameRateAndBitRateInfo?: [ 
    {
      audioFrameRate?: float(name='AudioFrameRate'),
      bitRate?: float(name='BitRate'),
      streamUrl?: string(name='StreamUrl'),
      time?: string(name='Time'),
      videoFrameRate?: float(name='VideoFrameRate'),
    }
  ](name='FrameRateAndBitRateInfo')
  }(name='FrameRateAndBitRateInfos'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveStreamBitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamBitRateDataResponseBody(name='body'),
}

async function describeLiveStreamBitRateData(request: DescribeLiveStreamBitRateDataRequest): DescribeLiveStreamBitRateDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveStreamBitRateData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveStreamCountRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeLiveStreamCountResponseBody = {
  requestId?: string(name='RequestId'),
  streamCountInfos?: {
    streamCountInfo?: [ 
    {
      count?: long(name='Count'),
      limit?: long(name='Limit'),
      streamCountDetails?: {
        streamCountDetail?: [ 
        {
          count?: long(name='Count'),
          format?: string(name='Format'),
          videoDataRate?: long(name='VideoDataRate'),
        }
      ](name='StreamCountDetail')
      }(name='StreamCountDetails'),
      type?: string(name='Type'),
    }
  ](name='StreamCountInfo')
  }(name='StreamCountInfos'),
}

model DescribeLiveStreamCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamCountResponseBody(name='body'),
}

async function describeLiveStreamCount(request: DescribeLiveStreamCountRequest): DescribeLiveStreamCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveStreamCount', 'GET', '/', 'json', false, 'json', request);
}

model DescribeLiveStreamDelayConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeLiveStreamDelayConfigResponseBody = {
  liveStreamFlvDelayConfig?: {
    delay?: int32(name='Delay'),
    level?: string(name='Level'),
  }(name='LiveStreamFlvDelayConfig'),
  liveStreamHlsDelayConfig?: {
    delay?: int32(name='Delay'),
    level?: string(name='Level'),
  }(name='LiveStreamHlsDelayConfig'),
  liveStreamRtmpDelayConfig?: {
    delay?: int32(name='Delay'),
    level?: string(name='Level'),
  }(name='LiveStreamRtmpDelayConfig'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveStreamDelayConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamDelayConfigResponseBody(name='body'),
}

async function describeLiveStreamDelayConfig(request: DescribeLiveStreamDelayConfigRequest): DescribeLiveStreamDelayConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveStreamDelayConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveStreamHistoryUserNumRequest {
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  streamName: string(name='StreamName', position='Query'),
}

model DescribeLiveStreamHistoryUserNumResponseBody = {
  liveStreamUserNumInfos?: {
    liveStreamUserNumInfo?: [ 
    {
      streamTime?: string(name='StreamTime'),
      userNum?: string(name='UserNum'),
    }
  ](name='LiveStreamUserNumInfo')
  }(name='LiveStreamUserNumInfos'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveStreamHistoryUserNumResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamHistoryUserNumResponseBody(name='body'),
}

async function describeLiveStreamHistoryUserNum(request: DescribeLiveStreamHistoryUserNumRequest): DescribeLiveStreamHistoryUserNumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveStreamHistoryUserNum', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveStreamMetricDetailDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName?: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  nextPageToken?: string(name='NextPageToken', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  protocol?: string(name='Protocol', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  streamName?: string(name='StreamName', position='Query'),
}

model DescribeLiveStreamMetricDetailDataResponseBody = {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  nextPageToken?: string(name='NextPageToken'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  streamDetailData?: {
    streamData?: [ 
    {
      appName?: string(name='AppName'),
      bps?: float(name='Bps'),
      count?: long(name='Count'),
      flvBps?: float(name='FlvBps'),
      flvCount?: long(name='FlvCount'),
      flvTraffic?: long(name='FlvTraffic'),
      hlsBps?: float(name='HlsBps'),
      hlsCount?: long(name='HlsCount'),
      hlsTraffic?: long(name='HlsTraffic'),
      p2pBps?: float(name='P2pBps'),
      p2pCount?: long(name='P2pCount'),
      p2pTraffic?: long(name='P2pTraffic'),
      rtmpBps?: float(name='RtmpBps'),
      rtmpCount?: long(name='RtmpCount'),
      rtmpTraffic?: long(name='RtmpTraffic'),
      rtsBps?: float(name='RtsBps'),
      rtsCount?: long(name='RtsCount'),
      rtsTraffic?: long(name='RtsTraffic'),
      streamName?: string(name='StreamName'),
      timeStamp?: string(name='TimeStamp'),
      traffic?: long(name='Traffic'),
    }
  ](name='StreamData')
  }(name='StreamDetailData'),
}

model DescribeLiveStreamMetricDetailDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamMetricDetailDataResponseBody(name='body'),
}

async function describeLiveStreamMetricDetailData(request: DescribeLiveStreamMetricDetailDataRequest): DescribeLiveStreamMetricDetailDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveStreamMetricDetailData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveStreamMonitorListRequest {
  regionId?: string(name='RegionId', position='Host'),
  monitorId?: string(name='MonitorId', position='Query'),
  orderRule?: int32(name='OrderRule', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  status?: int32(name='Status', position='Query'),
}

model DescribeLiveStreamMonitorListResponseBody = {
  liveStreamMonitorList?: [ 
    {
      audioFrom?: int32(name='AudioFrom'),
      domain?: string(name='Domain'),
      inputList?: [ 
        {
          index?: int32(name='Index'),
          inputUrl?: string(name='InputUrl'),
          layoutConfig?: {
            fillMode?: string(name='FillMode'),
            positionNormalized?: [ float ](name='PositionNormalized'),
            positionRefer?: string(name='PositionRefer'),
            sizeNormalized?: [ float ](name='SizeNormalized'),
          }(name='LayoutConfig'),
          layoutId?: int32(name='LayoutId'),
          playConfig?: {
            volumeRate?: float(name='VolumeRate'),
          }(name='PlayConfig'),
          streamName?: string(name='StreamName'),
        }
      ](name='InputList'),
      monitorId?: string(name='MonitorId'),
      monitorName?: string(name='MonitorName'),
      outputTemplate?: string(name='OutputTemplate'),
      outputUrls?: {
        flvUrl?: string(name='FlvUrl'),
        rtmpUrl?: string(name='RtmpUrl'),
      }(name='OutputUrls'),
      region?: string(name='Region'),
      startTime?: string(name='StartTime'),
      status?: int32(name='Status'),
      stopTime?: string(name='StopTime'),
    }
  ](name='LiveStreamMonitorList'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model DescribeLiveStreamMonitorListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamMonitorListResponseBody(name='body'),
}

async function describeLiveStreamMonitorList(request: DescribeLiveStreamMonitorListRequest): DescribeLiveStreamMonitorListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveStreamMonitorList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveStreamOptimizedFeatureConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  configName: string(name='ConfigName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeLiveStreamOptimizedFeatureConfigResponseBody = {
  liveStreamOptimizedFeatureConfigList?: {
    liveStreamOptimizedFeatureConfig?: [ 
    {
      configName?: string(name='ConfigName'),
      configStatus?: string(name='ConfigStatus'),
      configValue?: string(name='ConfigValue'),
      domainName?: string(name='DomainName'),
    }
  ](name='LiveStreamOptimizedFeatureConfig')
  }(name='LiveStreamOptimizedFeatureConfigList'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveStreamOptimizedFeatureConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamOptimizedFeatureConfigResponseBody(name='body'),
}

async function describeLiveStreamOptimizedFeatureConfig(request: DescribeLiveStreamOptimizedFeatureConfigRequest): DescribeLiveStreamOptimizedFeatureConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveStreamOptimizedFeatureConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveStreamRecordContentRequest {
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  streamName: string(name='StreamName', position='Query'),
}

model DescribeLiveStreamRecordContentResponseBody = {
  recordContentInfoList?: {
    recordContentInfo?: [ 
    {
      duration?: float(name='Duration'),
      endTime?: string(name='EndTime'),
      ossBucket?: string(name='OssBucket'),
      ossEndpoint?: string(name='OssEndpoint'),
      ossObjectPrefix?: string(name='OssObjectPrefix'),
      startTime?: string(name='StartTime'),
    }
  ](name='RecordContentInfo')
  }(name='RecordContentInfoList'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveStreamRecordContentResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamRecordContentResponseBody(name='body'),
}

async function describeLiveStreamRecordContent(request: DescribeLiveStreamRecordContentRequest): DescribeLiveStreamRecordContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveStreamRecordContent', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveStreamRecordIndexFileRequest {
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  recordId: string(name='RecordId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  streamName: string(name='StreamName', position='Query'),
}

model DescribeLiveStreamRecordIndexFileResponseBody = {
  recordIndexInfo?: {
    appName?: string(name='AppName'),
    createTime?: string(name='CreateTime'),
    domainName?: string(name='DomainName'),
    duration?: float(name='Duration'),
    endTime?: string(name='EndTime'),
    height?: int32(name='Height'),
    ossBucket?: string(name='OssBucket'),
    ossEndpoint?: string(name='OssEndpoint'),
    ossObject?: string(name='OssObject'),
    recordId?: string(name='RecordId'),
    recordUrl?: string(name='RecordUrl'),
    startTime?: string(name='StartTime'),
    streamName?: string(name='StreamName'),
    width?: int32(name='Width'),
  }(name='RecordIndexInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveStreamRecordIndexFileResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamRecordIndexFileResponseBody(name='body'),
}

async function describeLiveStreamRecordIndexFile(request: DescribeLiveStreamRecordIndexFileRequest): DescribeLiveStreamRecordIndexFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveStreamRecordIndexFile', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveStreamRecordIndexFilesRequest {
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  order?: string(name='Order', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', minimum=5, maximum=30, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  streamName: string(name='StreamName', position='Query'),
}

model DescribeLiveStreamRecordIndexFilesResponseBody = {
  order?: string(name='Order'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  recordIndexInfoList?: {
    recordIndexInfo?: [ 
    {
      appName?: string(name='AppName'),
      createTime?: string(name='CreateTime'),
      domainName?: string(name='DomainName'),
      duration?: float(name='Duration'),
      endTime?: string(name='EndTime'),
      height?: int32(name='Height'),
      ossBucket?: string(name='OssBucket'),
      ossEndpoint?: string(name='OssEndpoint'),
      ossObject?: string(name='OssObject'),
      recordId?: string(name='RecordId'),
      recordUrl?: string(name='RecordUrl'),
      startTime?: string(name='StartTime'),
      streamName?: string(name='StreamName'),
      width?: int32(name='Width'),
    }
  ](name='RecordIndexInfo')
  }(name='RecordIndexInfoList'),
  requestId?: string(name='RequestId'),
  totalNum?: int32(name='TotalNum'),
  totalPage?: int32(name='TotalPage'),
}

model DescribeLiveStreamRecordIndexFilesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamRecordIndexFilesResponseBody(name='body'),
}

async function describeLiveStreamRecordIndexFiles(request: DescribeLiveStreamRecordIndexFilesRequest): DescribeLiveStreamRecordIndexFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveStreamRecordIndexFiles', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveStreamSnapshotInfoRequest {
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  limit?: int32(name='Limit', minimum=1, maximum=100, position='Query'),
  order?: string(name='Order', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  streamName: string(name='StreamName', position='Query'),
}

model DescribeLiveStreamSnapshotInfoResponseBody = {
  liveStreamSnapshotInfoList?: {
    liveStreamSnapshotInfo?: [ 
    {
      createTime?: string(name='CreateTime'),
      createTimestamp?: long(name='CreateTimestamp'),
      isOverlay?: boolean(name='IsOverlay'),
      ossBucket?: string(name='OssBucket'),
      ossEndpoint?: string(name='OssEndpoint'),
      ossObject?: string(name='OssObject'),
    }
  ](name='LiveStreamSnapshotInfo')
  }(name='LiveStreamSnapshotInfoList'),
  nextStartTime?: string(name='NextStartTime'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveStreamSnapshotInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamSnapshotInfoResponseBody(name='body'),
}

async function describeLiveStreamSnapshotInfo(request: DescribeLiveStreamSnapshotInfoRequest): DescribeLiveStreamSnapshotInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveStreamSnapshotInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveStreamStateRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  streamName: string(name='StreamName', position='Query'),
}

model DescribeLiveStreamStateResponseBody = {
  requestId?: string(name='RequestId'),
  streamState?: string(name='StreamState'),
  type?: string(name='Type'),
}

model DescribeLiveStreamStateResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamStateResponseBody(name='body'),
}

async function describeLiveStreamState(request: DescribeLiveStreamStateRequest): DescribeLiveStreamStateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveStreamState', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveStreamTranscodeInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainTranscodeName: string(name='DomainTranscodeName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeLiveStreamTranscodeInfoResponseBody = {
  domainTranscodeList?: {
    domainTranscodeInfo?: [ 
    {
      customTranscodeParameters?: {
        audioBitrate?: int32(name='AudioBitrate'),
        audioChannelNum?: int32(name='AudioChannelNum'),
        audioCodec?: string(name='AudioCodec'),
        audioProfile?: string(name='AudioProfile'),
        audioRate?: int32(name='AudioRate'),
        bframes?: string(name='Bframes'),
        FPS?: int32(name='FPS'),
        gop?: string(name='Gop'),
        height?: int32(name='Height'),
        rtsFlag?: string(name='RtsFlag'),
        templateType?: string(name='TemplateType'),
        videoBitrate?: int32(name='VideoBitrate'),
        videoProfile?: string(name='VideoProfile'),
        width?: int32(name='Width'),
      }(name='CustomTranscodeParameters'),
      encryptParameters?: {
        encryptType?: string(name='EncryptType'),
        kmsKeyExpireInterval?: string(name='KmsKeyExpireInterval'),
        kmsKeyID?: string(name='KmsKeyID'),
      }(name='EncryptParameters'),
      isLazy?: boolean(name='IsLazy'),
      transcodeApp?: string(name='TranscodeApp'),
      transcodeName?: string(name='TranscodeName'),
      transcodeTemplate?: string(name='TranscodeTemplate'),
    }
  ](name='DomainTranscodeInfo')
  }(name='DomainTranscodeList'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveStreamTranscodeInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamTranscodeInfoResponseBody(name='body'),
}

async function describeLiveStreamTranscodeInfo(request: DescribeLiveStreamTranscodeInfoRequest): DescribeLiveStreamTranscodeInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveStreamTranscodeInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveStreamTranscodeStreamNumRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeLiveStreamTranscodeStreamNumResponseBody = {
  lazyTranscodedNumber?: long(name='LazyTranscodedNumber'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
  transcodedNumber?: long(name='TranscodedNumber'),
  untranscodeNumber?: long(name='UntranscodeNumber'),
}

model DescribeLiveStreamTranscodeStreamNumResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamTranscodeStreamNumResponseBody(name='body'),
}

async function describeLiveStreamTranscodeStreamNum(request: DescribeLiveStreamTranscodeStreamNumRequest): DescribeLiveStreamTranscodeStreamNumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveStreamTranscodeStreamNum', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveStreamWatermarkRulesRequest {
  regionId?: string(name='RegionId', position='Host'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model DescribeLiveStreamWatermarkRulesResponseBody = {
  requestId?: string(name='RequestId'),
  ruleInfoList?: {
    ruleInfo?: [ 
    {
      app?: string(name='App'),
      description?: string(name='Description'),
      domain?: string(name='Domain'),
      name?: string(name='Name'),
      ruleId?: string(name='RuleId'),
      stream?: string(name='Stream'),
      templateId?: string(name='TemplateId'),
    }
  ](name='RuleInfo')
  }(name='RuleInfoList'),
}

model DescribeLiveStreamWatermarkRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamWatermarkRulesResponseBody(name='body'),
}

async function describeLiveStreamWatermarkRules(request: DescribeLiveStreamWatermarkRulesRequest): DescribeLiveStreamWatermarkRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveStreamWatermarkRules', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveStreamWatermarksRequest {
  regionId?: string(name='RegionId', position='Host'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model DescribeLiveStreamWatermarksResponseBody = {
  requestId?: string(name='RequestId'),
  watermarkList?: {
    watermark?: [ 
    {
      description?: string(name='Description'),
      height?: int32(name='Height'),
      name?: string(name='Name'),
      offsetCorner?: string(name='OffsetCorner'),
      pictureUrl?: string(name='PictureUrl'),
      refHeight?: int32(name='RefHeight'),
      refWidth?: int32(name='RefWidth'),
      templateId?: string(name='TemplateId'),
      transparency?: int32(name='Transparency'),
      type?: int32(name='Type'),
      xOffset?: float(name='XOffset'),
      yOffset?: float(name='YOffset'),
    }
  ](name='Watermark')
  }(name='WatermarkList'),
}

model DescribeLiveStreamWatermarksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamWatermarksResponseBody(name='body'),
}

async function describeLiveStreamWatermarks(request: DescribeLiveStreamWatermarksRequest): DescribeLiveStreamWatermarksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveStreamWatermarks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveStreamsBlockListRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=3000, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeLiveStreamsBlockListResponseBody = {
  domainName?: string(name='DomainName'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  streamUrls?: {
    streamUrl?: [ string ](name='StreamUrl')
  }(name='StreamUrls'),
  totalNum?: int32(name='TotalNum'),
  totalPage?: int32(name='TotalPage'),
}

model DescribeLiveStreamsBlockListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamsBlockListResponseBody(name='body'),
}

async function describeLiveStreamsBlockList(request: DescribeLiveStreamsBlockListRequest): DescribeLiveStreamsBlockListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveStreamsBlockList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveStreamsControlHistoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName?: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeLiveStreamsControlHistoryResponseBody = {
  controlInfo?: {
    liveStreamControlInfo?: [ 
    {
      action?: string(name='Action'),
      clientIP?: string(name='ClientIP'),
      streamName?: string(name='StreamName'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='LiveStreamControlInfo')
  }(name='ControlInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveStreamsControlHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamsControlHistoryResponseBody(name='body'),
}

async function describeLiveStreamsControlHistory(request: DescribeLiveStreamsControlHistoryRequest): DescribeLiveStreamsControlHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveStreamsControlHistory', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveStreamsNotifyRecordsRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName?: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  status?: string(name='Status', position='Query'),
  streamName?: string(name='StreamName', position='Query'),
}

model DescribeLiveStreamsNotifyRecordsResponseBody = {
  notifyRecordsInfo?: {
    liveStreamNotifyRecordsInfo?: [ 
    {
      appName?: string(name='AppName'),
      description?: string(name='Description'),
      domainName?: string(name='DomainName'),
      notifyContent?: string(name='NotifyContent'),
      notifyResult?: string(name='NotifyResult'),
      notifyTime?: string(name='NotifyTime'),
      notifyType?: string(name='NotifyType'),
      notifyUrl?: string(name='NotifyUrl'),
      streamName?: string(name='StreamName'),
    }
  ](name='LiveStreamNotifyRecordsInfo')
  }(name='NotifyRecordsInfo'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalNum?: int32(name='TotalNum'),
  totalPage?: int32(name='TotalPage'),
}

model DescribeLiveStreamsNotifyRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamsNotifyRecordsResponseBody(name='body'),
}

async function describeLiveStreamsNotifyRecords(request: DescribeLiveStreamsNotifyRecordsRequest): DescribeLiveStreamsNotifyRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveStreamsNotifyRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveStreamsNotifyUrlConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeLiveStreamsNotifyUrlConfigResponseBody = {
  liveStreamsNotifyConfig?: {
    domainName?: string(name='DomainName'),
    notifyAuthKey?: string(name='NotifyAuthKey'),
    notifyReqAuth?: string(name='NotifyReqAuth'),
    notifyUrl?: string(name='NotifyUrl'),
  }(name='LiveStreamsNotifyConfig'),
  requestId?: string(name='RequestId'),
}

model DescribeLiveStreamsNotifyUrlConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamsNotifyUrlConfigResponseBody(name='body'),
}

async function describeLiveStreamsNotifyUrlConfig(request: DescribeLiveStreamsNotifyUrlConfigRequest): DescribeLiveStreamsNotifyUrlConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveStreamsNotifyUrlConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveStreamsOnlineListRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName?: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  onlyStream?: string(name='OnlyStream', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  queryType?: string(name='QueryType', position='Query'),
  streamName?: string(name='StreamName', position='Query'),
  streamType?: string(name='StreamType', position='Query'),
}

model DescribeLiveStreamsOnlineListResponseBody = {
  onlineInfo?: {
    liveStreamOnlineInfo?: [ 
    {
      appName?: string(name='AppName'),
      audioCodecId?: int32(name='AudioCodecId'),
      clientIp?: string(name='ClientIp'),
      domainName?: string(name='DomainName'),
      frameRate?: int32(name='FrameRate'),
      height?: int32(name='Height'),
      publishDomain?: string(name='PublishDomain'),
      publishTime?: string(name='PublishTime'),
      publishType?: string(name='PublishType'),
      publishUrl?: string(name='PublishUrl'),
      serverIp?: string(name='ServerIp'),
      streamName?: string(name='StreamName'),
      transcoded?: string(name='Transcoded'),
      videoCodecId?: int32(name='VideoCodecId'),
      width?: int32(name='Width'),
    }
  ](name='LiveStreamOnlineInfo')
  }(name='OnlineInfo'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalNum?: int32(name='TotalNum'),
  totalPage?: int32(name='TotalPage'),
}

model DescribeLiveStreamsOnlineListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamsOnlineListResponseBody(name='body'),
}

async function describeLiveStreamsOnlineList(request: DescribeLiveStreamsOnlineListRequest): DescribeLiveStreamsOnlineListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveStreamsOnlineList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveStreamsPublishListRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName?: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  orderBy?: string(name='OrderBy', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  queryType?: string(name='QueryType', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  streamName?: string(name='StreamName', position='Query'),
  streamType?: string(name='StreamType', position='Query'),
}

model DescribeLiveStreamsPublishListResponseBody = {
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  publishInfo?: {
    liveStreamPublishInfo?: [ 
    {
      appName?: string(name='AppName'),
      clientAddr?: string(name='ClientAddr'),
      domainName?: string(name='DomainName'),
      edgeNodeAddr?: string(name='EdgeNodeAddr'),
      publishDomain?: string(name='PublishDomain'),
      publishTime?: string(name='PublishTime'),
      publishType?: string(name='PublishType'),
      publishUrl?: string(name='PublishUrl'),
      stopTime?: string(name='StopTime'),
      streamName?: string(name='StreamName'),
      streamUrl?: string(name='StreamUrl'),
      transcodeId?: string(name='TranscodeId'),
      transcoded?: string(name='Transcoded'),
    }
  ](name='LiveStreamPublishInfo')
  }(name='PublishInfo'),
  requestId?: string(name='RequestId'),
  totalNum?: int32(name='TotalNum'),
  totalPage?: int32(name='TotalPage'),
}

model DescribeLiveStreamsPublishListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveStreamsPublishListResponseBody(name='body'),
}

async function describeLiveStreamsPublishList(request: DescribeLiveStreamsPublishListRequest): DescribeLiveStreamsPublishListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveStreamsPublishList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveTagResourcesRequest {
  regionId?: string(name='RegionId', position='Host'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeLiveTagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId'),
      tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag'),
    }
  ](name='TagResources'),
}

model DescribeLiveTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveTagResourcesResponseBody(name='body'),
}

async function describeLiveTagResources(request: DescribeLiveTagResourcesRequest): DescribeLiveTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveTagResources', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveTopDomainsByFlowRequest {
  regionId?: string(name='RegionId', position='Host'),
  endTime?: string(name='EndTime', position='Query'),
  limit?: long(name='Limit', minimum=1, maximum=100, position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeLiveTopDomainsByFlowResponseBody = {
  domainCount?: long(name='DomainCount'),
  domainOnlineCount?: long(name='DomainOnlineCount'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  topDomains?: {
    topDomain?: [ 
    {
      domainName?: string(name='DomainName'),
      maxBps?: long(name='MaxBps'),
      maxBpsTime?: string(name='MaxBpsTime'),
      rank?: long(name='Rank'),
      totalAccess?: long(name='TotalAccess'),
      totalTraffic?: string(name='TotalTraffic'),
      trafficPercent?: string(name='TrafficPercent'),
    }
  ](name='TopDomain')
  }(name='TopDomains'),
}

model DescribeLiveTopDomainsByFlowResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveTopDomainsByFlowResponseBody(name='body'),
}

async function describeLiveTopDomainsByFlow(request: DescribeLiveTopDomainsByFlowRequest): DescribeLiveTopDomainsByFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveTopDomainsByFlow', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveUserBillPredictionRequest {
  regionId?: string(name='RegionId', position='Host'),
  area?: string(name='Area', position='Query'),
  dimension: string(name='Dimension', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeLiveUserBillPredictionResponseBody = {
  billPredictionData?: {
    billPredictionDataItem?: [ 
    {
      area?: string(name='Area'),
      timeStp?: string(name='TimeStp'),
      value?: float(name='Value'),
    }
  ](name='BillPredictionDataItem')
  }(name='BillPredictionData'),
  billType?: string(name='BillType'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeLiveUserBillPredictionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveUserBillPredictionResponseBody(name='body'),
}

async function describeLiveUserBillPrediction(request: DescribeLiveUserBillPredictionRequest): DescribeLiveUserBillPredictionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveUserBillPrediction', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveUserDomainsRequest {
  domainName?: string(name='DomainName', position='Query'),
  domainSearchType?: string(name='DomainSearchType', position='Query'),
  domainStatus?: string(name='DomainStatus', position='Query'),
  liveDomainType?: string(name='LiveDomainType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=500, position='Query'),
  regionName?: string(name='RegionName', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeLiveUserDomainsResponseBody = {
  domains?: {
    pageData?: [ 
    {
      cname?: string(name='Cname'),
      description?: string(name='Description'),
      domainName?: string(name='DomainName'),
      gmtCreated?: string(name='GmtCreated'),
      gmtModified?: string(name='GmtModified'),
      liveDomainStatus?: string(name='LiveDomainStatus'),
      liveDomainType?: string(name='LiveDomainType'),
      regionName?: string(name='RegionName'),
    }
  ](name='PageData')
  }(name='Domains'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeLiveUserDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveUserDomainsResponseBody(name='body'),
}

async function describeLiveUserDomains(request: DescribeLiveUserDomainsRequest): DescribeLiveUserDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveUserDomains', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLiveUserTagsRequest {
  regionId?: string(name='RegionId', position='Host'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeLiveUserTagsResponseBody = {
  requestId?: string(name='RequestId'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Tags'),
}

model DescribeLiveUserTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLiveUserTagsResponseBody(name='body'),
}

async function describeLiveUserTags(request: DescribeLiveUserTagsRequest): DescribeLiveUserTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLiveUserTags', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterLiveRtcDurationRequest {
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  serviceArea?: string(name='ServiceArea', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  appId?: string(name='appId', position='Query'),
}

model DescribeMeterLiveRtcDurationResponseBody = {
  audioSummaryDuration?: long(name='AudioSummaryDuration'),
  data?: [ 
    {
      audioDuration?: long(name='AudioDuration'),
      timestamp?: string(name='Timestamp'),
      totalDuration?: long(name='TotalDuration'),
      v1080Duration?: long(name='V1080Duration'),
      v480Duration?: long(name='V480Duration'),
      v720Duration?: long(name='V720Duration'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', description='Id'),
  totalSummaryDuration?: long(name='TotalSummaryDuration'),
  v1080SummaryDuration?: long(name='V1080SummaryDuration'),
  v480SummaryDuration?: long(name='V480SummaryDuration'),
  v720SummaryDuration?: long(name='V720SummaryDuration'),
}

model DescribeMeterLiveRtcDurationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMeterLiveRtcDurationResponseBody(name='body'),
}

async function describeMeterLiveRtcDuration(request: DescribeMeterLiveRtcDurationRequest): DescribeMeterLiveRtcDurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterLiveRtcDuration', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMixStreamListRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName?: string(name='AppName', position='Query'),
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  mixStreamId?: string(name='MixStreamId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  streamName?: string(name='StreamName', position='Query'),
}

model DescribeMixStreamListResponseBody = {
  mixStreamList?: [ 
    {
      appName?: string(name='AppName'),
      domainName?: string(name='DomainName'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      inputStreamNumber?: int32(name='InputStreamNumber'),
      layoutId?: string(name='LayoutId'),
      mixStreamTemplate?: string(name='MixStreamTemplate'),
      mixstreamId?: string(name='MixstreamId'),
      streamName?: string(name='StreamName'),
    }
  ](name='MixStreamList'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model DescribeMixStreamListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMixStreamListResponseBody(name='body'),
}

async function describeMixStreamList(request: DescribeMixStreamListRequest): DescribeMixStreamListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMixStreamList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRTSNativeSDKFirstFrameCostRequest {
  dataInterval?: string(name='DataInterval', position='Query'),
  domainNameList?: [ string ](name='DomainNameList', shrink='json', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeRTSNativeSDKFirstFrameCostResponseBody = {
  dataInterval?: string(name='DataInterval'),
  endTime?: string(name='EndTime'),
  firstFrameCostData?: [ 
    {
      connected?: string(name='Connected'),
      finishGetStreamInfo?: string(name='FinishGetStreamInfo'),
      firstFrameComplete?: string(name='FirstFrameComplete'),
      firstPacket?: string(name='FirstPacket'),
      initialized?: string(name='Initialized'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='FirstFrameCostData'),
  requestId?: string(name='RequestId', description='Id'),
  startTime?: string(name='StartTime'),
}

model DescribeRTSNativeSDKFirstFrameCostResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRTSNativeSDKFirstFrameCostResponseBody(name='body'),
}

async function describeRTSNativeSDKFirstFrameCost(request: DescribeRTSNativeSDKFirstFrameCostRequest): DescribeRTSNativeSDKFirstFrameCostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRTSNativeSDKFirstFrameCost', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRTSNativeSDKFirstFrameDelayRequest {
  dataInterval?: string(name='DataInterval', position='Query'),
  domainNameList?: [ string ](name='DomainNameList', shrink='json', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeRTSNativeSDKFirstFrameDelayResponseBody = {
  dataInterval?: string(name='DataInterval'),
  endTime?: string(name='EndTime'),
  frameDelayData?: [ 
    {
      frameDelay?: string(name='FrameDelay'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='FrameDelayData'),
  requestId?: string(name='RequestId', description='Id'),
  startTime?: string(name='StartTime'),
}

model DescribeRTSNativeSDKFirstFrameDelayResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRTSNativeSDKFirstFrameDelayResponseBody(name='body'),
}

async function describeRTSNativeSDKFirstFrameDelay(request: DescribeRTSNativeSDKFirstFrameDelayRequest): DescribeRTSNativeSDKFirstFrameDelayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRTSNativeSDKFirstFrameDelay', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRTSNativeSDKPlayFailStatusRequest {
  dataInterval?: string(name='DataInterval', position='Query'),
  domainNameList?: [ string ](name='DomainNameList', shrink='json', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeRTSNativeSDKPlayFailStatusResponseBody = {
  dataInterval?: string(name='DataInterval'),
  endTime?: string(name='EndTime'),
  playFailStatus?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      v20001?: string(name='V20001'),
      v20002?: string(name='V20002'),
      v20011?: string(name='V20011'),
      v20012?: string(name='V20012'),
      v20013?: string(name='V20013'),
      v20052?: string(name='V20052'),
    }
  ](name='PlayFailStatus'),
  requestId?: string(name='RequestId', description='Id'),
  startTime?: string(name='StartTime'),
}

model DescribeRTSNativeSDKPlayFailStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRTSNativeSDKPlayFailStatusResponseBody(name='body'),
}

async function describeRTSNativeSDKPlayFailStatus(request: DescribeRTSNativeSDKPlayFailStatusRequest): DescribeRTSNativeSDKPlayFailStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRTSNativeSDKPlayFailStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRTSNativeSDKPlayTimeRequest {
  dataInterval?: string(name='DataInterval', position='Query'),
  domainNameList?: [ string ](name='DomainNameList', shrink='json', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeRTSNativeSDKPlayTimeResponseBody = {
  dataInterval?: string(name='DataInterval'),
  endTime?: string(name='EndTime'),
  playTimeData?: [ 
    {
      playTime?: string(name='PlayTime'),
      stallTime?: string(name='StallTime'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='PlayTimeData'),
  requestId?: string(name='RequestId', description='Id'),
  startTime?: string(name='StartTime'),
}

model DescribeRTSNativeSDKPlayTimeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRTSNativeSDKPlayTimeResponseBody(name='body'),
}

async function describeRTSNativeSDKPlayTime(request: DescribeRTSNativeSDKPlayTimeRequest): DescribeRTSNativeSDKPlayTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRTSNativeSDKPlayTime', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRTSNativeSDKVvDataRequest {
  dataInterval?: string(name='DataInterval', position='Query'),
  domainNameList?: [ string ](name='DomainNameList', shrink='json', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeRTSNativeSDKVvDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId', description='Id'),
  startTime?: string(name='StartTime'),
  vvData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      vvSuccess?: string(name='VvSuccess'),
      vvTotal?: string(name='VvTotal'),
    }
  ](name='VvData'),
}

model DescribeRTSNativeSDKVvDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRTSNativeSDKVvDataResponseBody(name='body'),
}

async function describeRTSNativeSDKVvData(request: DescribeRTSNativeSDKVvDataRequest): DescribeRTSNativeSDKVvDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRTSNativeSDKVvData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRoomKickoutUserListRequest {
  regionId?: string(name='RegionId', position='Host'),
  appId: string(name='AppId', position='Query'),
  order?: string(name='Order', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, position='Query'),
  roomId: string(name='RoomId', position='Query'),
}

model DescribeRoomKickoutUserListResponseBody = {
  requestId?: string(name='RequestId'),
  totalNum?: int32(name='TotalNum'),
  totalPage?: int32(name='TotalPage'),
  userList?: [ 
    {
      appUid?: string(name='AppUid'),
      opEndTime?: string(name='OpEndTime'),
      opStartTime?: string(name='OpStartTime'),
    }
  ](name='UserList'),
}

model DescribeRoomKickoutUserListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRoomKickoutUserListResponseBody(name='body'),
}

async function describeRoomKickoutUserList(request: DescribeRoomKickoutUserListRequest): DescribeRoomKickoutUserListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRoomKickoutUserList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRoomListRequest {
  regionId?: string(name='RegionId', position='Host'),
  anchorId?: string(name='AnchorId', position='Query'),
  appId: string(name='AppId', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  order?: string(name='Order', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, position='Query'),
  roomId?: string(name='RoomId', position='Query'),
  roomStatus?: int32(name='RoomStatus', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeRoomListResponseBody = {
  requestId?: string(name='RequestId'),
  roomList?: [ 
    {
      anchorId?: string(name='AnchorId'),
      createTime?: string(name='CreateTime'),
      forbidStream?: string(name='ForbidStream'),
      roomId?: string(name='RoomId'),
      roomStatus?: int32(name='RoomStatus'),
    }
  ](name='RoomList'),
  totalNum?: int32(name='TotalNum'),
  totalPage?: int32(name='TotalPage'),
}

model DescribeRoomListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRoomListResponseBody(name='body'),
}

async function describeRoomList(request: DescribeRoomListRequest): DescribeRoomListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRoomList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRoomStatusRequest {
  regionId?: string(name='RegionId', position='Host'),
  appId: string(name='AppId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  roomId: string(name='RoomId', position='Query'),
}

model DescribeRoomStatusResponseBody = {
  requestId?: string(name='RequestId'),
  roomStatus?: int32(name='RoomStatus'),
}

model DescribeRoomStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRoomStatusResponseBody(name='body'),
}

async function describeRoomStatus(request: DescribeRoomStatusRequest): DescribeRoomStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRoomStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeShowListRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeShowListResponseBody = {
  requestId?: string(name='RequestId'),
  showList?: string(name='ShowList'),
  showListInfo?: {
    currentShowId?: string(name='CurrentShowId'),
    highPriorityShowId?: string(name='HighPriorityShowId'),
    highPriorityShowStartTime?: string(name='HighPriorityShowStartTime'),
    showList?: {
      show?: [ 
      {
        duration?: long(name='Duration'),
        repeatTimes?: int32(name='RepeatTimes'),
        resourceInfo?: {
          liveInputType?: int32(name='LiveInputType'),
          resourceId?: string(name='ResourceId'),
          resourceType?: string(name='ResourceType'),
          resourceUrl?: string(name='ResourceUrl'),
        }(name='ResourceInfo'),
        showId?: string(name='ShowId'),
        showName?: string(name='ShowName'),
      }
    ](name='Show')
    }(name='ShowList'),
    showListRepeatTimes?: int32(name='ShowListRepeatTimes'),
    totalShowListRepeatTimes?: int32(name='TotalShowListRepeatTimes'),
  }(name='ShowListInfo'),
}

model DescribeShowListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeShowListResponseBody(name='body'),
}

async function describeShowList(request: DescribeShowListRequest): DescribeShowListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeShowList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStudioLayoutsRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  layoutId?: string(name='LayoutId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeStudioLayoutsResponseBody = {
  requestId?: string(name='RequestId'),
  studioLayouts?: [ 
    {
      bgImageConfig?: {
        id?: string(name='Id'),
        imageUrl?: string(name='ImageUrl'),
        locationId?: string(name='LocationId'),
        materialId?: string(name='MaterialId'),
      }(name='BgImageConfig'),
      commonConfig?: {
        channelId?: string(name='ChannelId'),
        videoResourceId?: string(name='VideoResourceId'),
      }(name='CommonConfig'),
      layerOrderConfigList?: [ 
        {
          id?: string(name='Id'),
          type?: string(name='Type'),
        }
      ](name='LayerOrderConfigList'),
      layoutId?: string(name='LayoutId'),
      layoutName?: string(name='LayoutName'),
      layoutType?: string(name='LayoutType'),
      mediaInputConfigList?: [ 
        {
          channelId?: string(name='ChannelId'),
          fillMode?: string(name='FillMode'),
          heightNormalized?: float(name='HeightNormalized'),
          id?: string(name='Id'),
          imageMaterialId?: string(name='ImageMaterialId'),
          index?: int32(name='Index'),
          positionNormalized?: [ float ](name='PositionNormalized'),
          positionRefer?: string(name='PositionRefer'),
          videoResourceId?: string(name='VideoResourceId'),
          widthNormalized?: float(name='WidthNormalized'),
        }
      ](name='MediaInputConfigList'),
      screenInputConfigList?: [ 
        {
          audioConfig?: {
            validChannel?: string(name='ValidChannel'),
            volumeRate?: float(name='VolumeRate'),
          }(name='AudioConfig'),
          channelId?: string(name='ChannelId'),
          color?: string(name='Color'),
          heightNormalized?: float(name='HeightNormalized'),
          id?: string(name='Id'),
          index?: int32(name='Index'),
          onlyAudio?: boolean(name='OnlyAudio'),
          portraitType?: int32(name='PortraitType'),
          positionX?: string(name='PositionX'),
          positionY?: string(name='PositionY'),
          videoResourceId?: string(name='VideoResourceId'),
        }
      ](name='ScreenInputConfigList'),
    }
  ](name='StudioLayouts'),
  total?: int32(name='Total'),
}

model DescribeStudioLayoutsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStudioLayoutsResponseBody(name='body'),
}

async function describeStudioLayouts(request: DescribeStudioLayoutsRequest): DescribeStudioLayoutsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStudioLayouts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeToutiaoLivePlayRequest {
  regionId?: string(name='RegionId', position='Host'),
  app: string(name='App', position='Query'),
  domain: string(name='Domain', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  stream: string(name='Stream', position='Query'),
}

model DescribeToutiaoLivePlayResponseBody = {
  content?: [ 
    {
      app?: string(name='App'),
      bandwidth?: float(name='Bandwidth'),
      cdnName?: string(name='CdnName'),
      domain?: string(name='Domain'),
      playNum?: long(name='PlayNum'),
      streamName?: string(name='StreamName'),
      timestamp?: long(name='Timestamp'),
    }
  ](name='Content'),
  description?: string(name='Description'),
  requestId?: string(name='RequestId'),
}

model DescribeToutiaoLivePlayResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeToutiaoLivePlayResponseBody(name='body'),
}

async function describeToutiaoLivePlay(request: DescribeToutiaoLivePlayRequest): DescribeToutiaoLivePlayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeToutiaoLivePlay', 'POST', '/', 'json', false, 'json', request);
}

model DescribeToutiaoLivePublishRequest {
  regionId?: string(name='RegionId', position='Host'),
  app: string(name='App', position='Query'),
  domain: string(name='Domain', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  stream: string(name='Stream', position='Query'),
}

model DescribeToutiaoLivePublishResponseBody = {
  content?: [ 
    {
      app?: string(name='App'),
      bitrate?: float(name='Bitrate'),
      bwDiff?: float(name='BwDiff'),
      cdnName?: string(name='CdnName'),
      domain?: string(name='Domain'),
      flr?: float(name='Flr'),
      fps?: float(name='Fps'),
      streamName?: string(name='StreamName'),
      timestamp?: long(name='Timestamp'),
    }
  ](name='Content'),
  description?: string(name='Description'),
  requestId?: string(name='RequestId'),
}

model DescribeToutiaoLivePublishResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeToutiaoLivePublishResponseBody(name='body'),
}

async function describeToutiaoLivePublish(request: DescribeToutiaoLivePublishRequest): DescribeToutiaoLivePublishResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeToutiaoLivePublish', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUpBpsPeakDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName?: string(name='DomainName', position='Query'),
  domainSwitch?: string(name='DomainSwitch', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeUpBpsPeakDataResponseBody = {
  describeUpPeakTraffics?: {
    describeUpPeakTraffic?: [ 
    {
      bandWidth?: string(name='BandWidth'),
      peakTime?: string(name='PeakTime'),
      queryTime?: string(name='QueryTime'),
      statName?: string(name='StatName'),
    }
  ](name='DescribeUpPeakTraffic')
  }(name='DescribeUpPeakTraffics'),
  requestId?: string(name='RequestId'),
}

model DescribeUpBpsPeakDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUpBpsPeakDataResponseBody(name='body'),
}

async function describeUpBpsPeakData(request: DescribeUpBpsPeakDataRequest): DescribeUpBpsPeakDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUpBpsPeakData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUpBpsPeakOfLineRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName?: string(name='DomainName', position='Query'),
  domainSwitch?: string(name='DomainSwitch', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  line: string(name='Line', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeUpBpsPeakOfLineResponseBody = {
  describeUpBpsPeakOfLines?: {
    describeUpBpsPeakOfLine?: [ 
    {
      bandWidth?: float(name='BandWidth'),
      peakTime?: string(name='PeakTime'),
      queryTime?: string(name='QueryTime'),
      statName?: string(name='StatName'),
    }
  ](name='DescribeUpBpsPeakOfLine')
  }(name='DescribeUpBpsPeakOfLines'),
  requestId?: string(name='RequestId'),
}

model DescribeUpBpsPeakOfLineResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUpBpsPeakOfLineResponseBody(name='body'),
}

async function describeUpBpsPeakOfLine(request: DescribeUpBpsPeakOfLineRequest): DescribeUpBpsPeakOfLineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUpBpsPeakOfLine', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUpPeakPublishStreamDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName?: string(name='DomainName', position='Query'),
  domainSwitch?: string(name='DomainSwitch', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeUpPeakPublishStreamDataResponseBody = {
  describeUpPeakPublishStreamDatas?: {
    describeUpPeakPublishStreamData?: [ 
    {
      bandWidth?: string(name='BandWidth'),
      peakTime?: string(name='PeakTime'),
      publishStreamNum?: int32(name='PublishStreamNum'),
      queryTime?: string(name='QueryTime'),
      statName?: string(name='StatName'),
    }
  ](name='DescribeUpPeakPublishStreamData')
  }(name='DescribeUpPeakPublishStreamDatas'),
  requestId?: string(name='RequestId'),
}

model DescribeUpPeakPublishStreamDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUpPeakPublishStreamDataResponseBody(name='body'),
}

async function describeUpPeakPublishStreamData(request: DescribeUpPeakPublishStreamDataRequest): DescribeUpPeakPublishStreamDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUpPeakPublishStreamData', 'POST', '/', 'json', false, 'json', request);
}

model DisableLiveRealtimeLogDeliveryRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DisableLiveRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableLiveRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: DisableLiveRealtimeLogDeliveryResponseBody(name='body'),
}

async function disableLiveRealtimeLogDelivery(request: DisableLiveRealtimeLogDeliveryRequest): DisableLiveRealtimeLogDeliveryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableLiveRealtimeLogDelivery', 'GET', '/', 'json', false, 'json', request);
}

model DynamicUpdateWaterMarkStreamRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  app: string(name='App', position='Query'),
  domain: string(name='Domain', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  stream: string(name='Stream', position='Query'),
  templateId: string(name='TemplateId', position='Query'),
}

model DynamicUpdateWaterMarkStreamRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DynamicUpdateWaterMarkStreamRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DynamicUpdateWaterMarkStreamRuleResponseBody(name='body'),
}

async function dynamicUpdateWaterMarkStreamRule(request: DynamicUpdateWaterMarkStreamRuleRequest): DynamicUpdateWaterMarkStreamRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DynamicUpdateWaterMarkStreamRule', 'POST', '/', 'json', false, 'json', request);
}

model EditPlaylistRequest {
  regionId?: string(name='RegionId', position='Host'),
  ownerId?: long(name='OwnerId', position='Query'),
  programConfig?: string(name='ProgramConfig', position='Query'),
  programId: string(name='ProgramId', position='Query'),
  programItems: string(name='ProgramItems', position='Query'),
}

model EditPlaylistResponseBody = {
  casterId?: string(name='CasterId'),
  items?: {
    failedItems?: [ 
      {
        itemId?: string(name='ItemId'),
        itemName?: string(name='ItemName'),
      }
    ](name='FailedItems'),
    successItems?: [ 
      {
        itemId?: string(name='ItemId'),
        itemName?: string(name='ItemName'),
      }
    ](name='SuccessItems'),
  }(name='Items'),
  programId?: string(name='ProgramId'),
  requestId?: string(name='RequestId'),
}

model EditPlaylistResponse = {
  headers: map[string]string(name='headers'),
  body: EditPlaylistResponseBody(name='body'),
}

async function editPlaylist(request: EditPlaylistRequest): EditPlaylistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EditPlaylist', 'POST', '/', 'json', false, 'json', request);
}

model EditShowAndReplaceRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  endTime?: float(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  showId: string(name='ShowId', position='Query'),
  startTime?: float(name='StartTime', position='Query'),
  storageInfo?: string(name='StorageInfo', position='Query'),
  userData?: string(name='UserData', position='Query'),
}

model EditShowAndReplaceResponseBody = {
  jobInfo?: string(name='JobInfo'),
  requestId?: string(name='RequestId'),
}

model EditShowAndReplaceResponse = {
  headers: map[string]string(name='headers'),
  body: EditShowAndReplaceResponseBody(name='body'),
}

async function editShowAndReplace(request: EditShowAndReplaceRequest): EditShowAndReplaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EditShowAndReplace', 'POST', '/', 'json', false, 'json', request);
}

model EffectCasterUrgentRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  sceneId: string(name='SceneId', position='Query'),
}

model EffectCasterUrgentResponseBody = {
  requestId?: string(name='RequestId'),
}

model EffectCasterUrgentResponse = {
  headers: map[string]string(name='headers'),
  body: EffectCasterUrgentResponseBody(name='body'),
}

async function effectCasterUrgent(request: EffectCasterUrgentRequest): EffectCasterUrgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EffectCasterUrgent', 'POST', '/', 'json', false, 'json', request);
}

model EffectCasterVideoResourceRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceId: string(name='ResourceId', position='Query'),
  sceneId: string(name='SceneId', position='Query'),
}

model EffectCasterVideoResourceResponseBody = {
  requestId?: string(name='RequestId'),
}

model EffectCasterVideoResourceResponse = {
  headers: map[string]string(name='headers'),
  body: EffectCasterVideoResourceResponseBody(name='body'),
}

async function effectCasterVideoResource(request: EffectCasterVideoResourceRequest): EffectCasterVideoResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EffectCasterVideoResource', 'POST', '/', 'json', false, 'json', request);
}

model EnableLiveRealtimeLogDeliveryRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model EnableLiveRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableLiveRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: EnableLiveRealtimeLogDeliveryResponseBody(name='body'),
}

async function enableLiveRealtimeLogDelivery(request: EnableLiveRealtimeLogDeliveryRequest): EnableLiveRealtimeLogDeliveryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableLiveRealtimeLogDelivery', 'GET', '/', 'json', false, 'json', request);
}

model ForbidLiveStreamRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  liveStreamType: string(name='LiveStreamType', position='Query'),
  oneshot?: string(name='Oneshot', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resumeTime?: string(name='ResumeTime', position='Query'),
  streamName: string(name='StreamName', position='Query'),
}

model ForbidLiveStreamResponseBody = {
  requestId?: string(name='RequestId'),
}

model ForbidLiveStreamResponse = {
  headers: map[string]string(name='headers'),
  body: ForbidLiveStreamResponseBody(name='body'),
}

async function forbidLiveStream(request: ForbidLiveStreamRequest): ForbidLiveStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ForbidLiveStream', 'POST', '/', 'json', false, 'json', request);
}

model ForbidPushStreamRequest {
  regionId?: string(name='RegionId', position='Host'),
  appId: string(name='AppId', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  roomId: string(name='RoomId', position='Query'),
  userData?: string(name='UserData', position='Query'),
}

model ForbidPushStreamResponseBody = {
  requestId?: string(name='RequestId'),
}

model ForbidPushStreamResponse = {
  headers: map[string]string(name='headers'),
  body: ForbidPushStreamResponseBody(name='body'),
}

async function forbidPushStream(request: ForbidPushStreamRequest): ForbidPushStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ForbidPushStream', 'POST', '/', 'json', false, 'json', request);
}

model GetAllCustomTemplatesRequest {
  regionId?: string(name='RegionId', position='Host'),
  ownerId?: long(name='OwnerId', position='Query'),
  userId?: string(name='UserId', position='Query'),
}

model GetAllCustomTemplatesResponseBody = {
  customTemplates?: string(name='CustomTemplates'),
  requestId?: string(name='RequestId'),
}

model GetAllCustomTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: GetAllCustomTemplatesResponseBody(name='body'),
}

async function getAllCustomTemplates(request: GetAllCustomTemplatesRequest): GetAllCustomTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAllCustomTemplates', 'POST', '/', 'json', false, 'json', request);
}

model GetCustomTemplateRequest {
  regionId?: string(name='RegionId', position='Host'),
  ownerId?: long(name='OwnerId', position='Query'),
  template: string(name='Template', position='Query'),
}

model GetCustomTemplateResponseBody = {
  customTemplate?: string(name='CustomTemplate'),
  requestId?: string(name='RequestId'),
  template?: string(name='Template'),
}

model GetCustomTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetCustomTemplateResponseBody(name='body'),
}

async function getCustomTemplate(request: GetCustomTemplateRequest): GetCustomTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCustomTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetEditingJobInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  showId?: string(name='ShowId', position='Query'),
}

model GetEditingJobInfoResponseBody = {
  casterId?: string(name='CasterId'),
  editingTasksInfo?: string(name='EditingTasksInfo'),
  requestId?: string(name='RequestId'),
}

model GetEditingJobInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetEditingJobInfoResponseBody(name='body'),
}

async function getEditingJobInfo(request: GetEditingJobInfoRequest): GetEditingJobInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEditingJobInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetMessageAppRequest {
  appId: string(name='AppId', position='Body'),
}

model GetMessageAppResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    appConfig?: map[string]string(name='AppConfig'),
    appId?: string(name='AppId', description='应用ID。'),
    appName?: string(name='AppName', description='应用名称。长度2~16位。'),
    createTime?: long(name='CreateTime'),
    extension?: map[string]string(name='Extension'),
    status?: int32(name='Status'),
  }(name='Result'),
}

model GetMessageAppResponse = {
  headers: map[string]string(name='headers'),
  body: GetMessageAppResponseBody(name='body'),
}

async function getMessageApp(request: GetMessageAppRequest): GetMessageAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMessageApp', 'POST', '/', 'json', true, 'form', request);
}

model GetMessageGroupRequest {
  appId: string(name='AppId', position='Body'),
  groupId: string(name='GroupId', position='Body'),
}

model GetMessageGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    createTime?: long(name='CreateTime'),
    creatorId?: string(name='CreatorId'),
    extension?: map[string]any(name='Extension'),
    groupId?: string(name='GroupId', description='用于长连接建连的token'),
    isMuteAll?: boolean(name='IsMuteAll'),
    status?: int32(name='Status'),
  }(name='Result'),
}

model GetMessageGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetMessageGroupResponseBody(name='body'),
}

async function getMessageGroup(request: GetMessageGroupRequest): GetMessageGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMessageGroup', 'POST', '/', 'json', true, 'form', request);
}

model GetMessageTokenRequest {
  appId: string(name='AppId', description='应用ID', position='Body'),
  deviceId: string(name='DeviceId', description='终端设备ID', position='Body'),
  deviceType: string(name='DeviceType', description='终端设备类型', position='Body'),
  userId: string(name='UserId', description='用户UserId,在AppId下单独唯一', position='Body'),
}

model GetMessageTokenResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    accessToken?: string(name='AccessToken', description='用于长连接建连的token'),
    accessTokenExpiredTime?: long(name='AccessTokenExpiredTime', description='登录token过期时间(毫秒)'),
    refreshToken?: string(name='RefreshToken', description='更新Token，若AccessToken过期，则可以使用RefreshToken再次获取新Token'),
  }(name='Result'),
}

model GetMessageTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetMessageTokenResponseBody(name='body'),
}

async function getMessageToken(request: GetMessageTokenRequest): GetMessageTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMessageToken', 'POST', '/', 'json', true, 'form', request);
}

model GetMultiRateConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  app: string(name='App', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model GetMultiRateConfigResponseBody = {
  app?: string(name='App'),
  avFormat?: string(name='AvFormat'),
  code?: int32(name='Code'),
  domain?: string(name='Domain'),
  groupId?: string(name='GroupId'),
  isLazy?: string(name='IsLazy'),
  isTimeAlign?: string(name='IsTimeAlign'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  stream?: string(name='Stream'),
  templatesInfo?: {
    detail?: [ 
    {
      audioBitrate?: int32(name='AudioBitrate'),
      audioChannelNum?: int32(name='AudioChannelNum'),
      audioCodec?: string(name='AudioCodec'),
      audioProfile?: string(name='AudioProfile'),
      audioRate?: int32(name='AudioRate'),
      bandWidth?: int32(name='BandWidth'),
      fps?: int32(name='Fps'),
      gop?: string(name='Gop'),
      height?: int32(name='Height'),
      profile?: int32(name='Profile'),
      template?: string(name='Template'),
      templateType?: string(name='TemplateType'),
      videoBitrate?: int32(name='VideoBitrate'),
      width?: int32(name='Width'),
    }
  ](name='Detail')
  }(name='TemplatesInfo'),
}

model GetMultiRateConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetMultiRateConfigResponseBody(name='body'),
}

async function getMultiRateConfig(request: GetMultiRateConfigRequest): GetMultiRateConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMultiRateConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetMultiRateConfigListRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model GetMultiRateConfigListResponseBody = {
  code?: int32(name='Code'),
  groupInfo?: {
    info?: [ 
    {
      app?: string(name='App'),
      avFormat?: string(name='AvFormat'),
      count?: int32(name='Count'),
      groupId?: string(name='GroupId'),
    }
  ](name='Info')
  }(name='GroupInfo'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetMultiRateConfigListResponse = {
  headers: map[string]string(name='headers'),
  body: GetMultiRateConfigListResponseBody(name='body'),
}

async function getMultiRateConfigList(request: GetMultiRateConfigListRequest): GetMultiRateConfigListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMultiRateConfigList', 'POST', '/', 'json', false, 'json', request);
}

model HotLiveRtcStreamRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', position='Query'),
  audioMsid: string(name='AudioMsid', position='Query'),
  connectionTimeout?: string(name='ConnectionTimeout', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  mediaTimeout?: string(name='MediaTimeout', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionCode: string(name='RegionCode', position='Query'),
  streamName: string(name='StreamName', position='Query'),
  videoMsid: string(name='VideoMsid', position='Query'),
}

model HotLiveRtcStreamResponseBody = {
  requestId?: string(name='RequestId'),
}

model HotLiveRtcStreamResponse = {
  headers: map[string]string(name='headers'),
  body: HotLiveRtcStreamResponseBody(name='body'),
}

async function hotLiveRtcStream(request: HotLiveRtcStreamRequest): HotLiveRtcStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'HotLiveRtcStream', 'POST', '/', 'json', false, 'json', request);
}

model InitializeAutoShowListTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  callBackUrl?: string(name='CallBackUrl', position='Query'),
  casterConfig: string(name='CasterConfig', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceIds?: string(name='ResourceIds', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model InitializeAutoShowListTaskResponseBody = {
  casterId?: string(name='CasterId'),
  requestId?: string(name='RequestId'),
  streamList?: string(name='StreamList'),
}

model InitializeAutoShowListTaskResponse = {
  headers: map[string]string(name='headers'),
  body: InitializeAutoShowListTaskResponseBody(name='body'),
}

async function initializeAutoShowListTask(request: InitializeAutoShowListTaskRequest): InitializeAutoShowListTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitializeAutoShowListTask', 'POST', '/', 'json', false, 'json', request);
}

model JoinMessageGroupRequest {
  appId: string(name='AppId', position='Body'),
  broadCastStatistics?: boolean(name='BroadCastStatistics', position='Body'),
  broadCastType?: int32(name='BroadCastType', position='Body'),
  groupId: string(name='GroupId', position='Body'),
  userId: string(name='UserId', position='Body'),
}

model JoinMessageGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result'),
}

model JoinMessageGroupResponse = {
  headers: map[string]string(name='headers'),
  body: JoinMessageGroupResponseBody(name='body'),
}

async function joinMessageGroup(request: JoinMessageGroupRequest): JoinMessageGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'JoinMessageGroup', 'POST', '/', 'json', true, 'form', request);
}

model LeaveMessageGroupRequest {
  appId: string(name='AppId', position='Body'),
  broadCastStatistics?: boolean(name='BroadCastStatistics', position='Body'),
  broadCastType?: int32(name='BroadCastType', position='Body'),
  groupId: string(name='GroupId', position='Body'),
  userId: string(name='UserId', position='Body'),
}

model LeaveMessageGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result'),
}

model LeaveMessageGroupResponse = {
  headers: map[string]string(name='headers'),
  body: LeaveMessageGroupResponseBody(name='body'),
}

async function leaveMessageGroup(request: LeaveMessageGroupRequest): LeaveMessageGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LeaveMessageGroup', 'POST', '/', 'json', true, 'form', request);
}

model ListLiveRealtimeLogDeliveryRequest {
  regionId?: string(name='RegionId', position='Host'),
  liveOpenapiReserve?: string(name='LiveOpenapiReserve', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model ListLiveRealtimeLogDeliveryResponseBody = {
  content?: {
    realtimeLogDeliveryInfo?: [ 
    {
      dmId?: int32(name='DmId'),
      domainName?: string(name='DomainName'),
      logstore?: string(name='Logstore'),
      project?: string(name='Project'),
      region?: string(name='Region'),
      status?: string(name='Status'),
    }
  ](name='RealtimeLogDeliveryInfo')
  }(name='Content'),
  requestId?: string(name='RequestId'),
}

model ListLiveRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: ListLiveRealtimeLogDeliveryResponseBody(name='body'),
}

async function listLiveRealtimeLogDelivery(request: ListLiveRealtimeLogDeliveryRequest): ListLiveRealtimeLogDeliveryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveRealtimeLogDelivery', 'GET', '/', 'json', false, 'json', request);
}

model ListLiveRealtimeLogDeliveryDomainsRequest {
  regionId?: string(name='RegionId', position='Host'),
  logstore: string(name='Logstore', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  project: string(name='Project', position='Query'),
  region: string(name='Region', position='Query'),
}

model ListLiveRealtimeLogDeliveryDomainsResponseBody = {
  content?: {
    domains?: [ 
    {
      domainName?: string(name='DomainName'),
      status?: string(name='Status'),
    }
  ](name='Domains')
  }(name='Content'),
  requestId?: string(name='RequestId'),
}

model ListLiveRealtimeLogDeliveryDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: ListLiveRealtimeLogDeliveryDomainsResponseBody(name='body'),
}

async function listLiveRealtimeLogDeliveryDomains(request: ListLiveRealtimeLogDeliveryDomainsRequest): ListLiveRealtimeLogDeliveryDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveRealtimeLogDeliveryDomains', 'GET', '/', 'json', false, 'json', request);
}

model ListLiveRealtimeLogDeliveryInfosRequest {
  regionId?: string(name='RegionId', position='Host'),
  liveOpenapiReserve?: string(name='LiveOpenapiReserve', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model ListLiveRealtimeLogDeliveryInfosResponseBody = {
  content?: {
    realtimeLogDeliveryInfos?: [ 
    {
      logstore?: string(name='Logstore'),
      project?: string(name='Project'),
      region?: string(name='Region'),
    }
  ](name='RealtimeLogDeliveryInfos')
  }(name='Content'),
  requestId?: string(name='RequestId'),
}

model ListLiveRealtimeLogDeliveryInfosResponse = {
  headers: map[string]string(name='headers'),
  body: ListLiveRealtimeLogDeliveryInfosResponseBody(name='body'),
}

async function listLiveRealtimeLogDeliveryInfos(request: ListLiveRealtimeLogDeliveryInfosRequest): ListLiveRealtimeLogDeliveryInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveRealtimeLogDeliveryInfos', 'GET', '/', 'json', false, 'json', request);
}

model ListMessageRequest {
  appId: string(name='AppId', position='Body'),
  groupId: string(name='GroupId', position='Body'),
  pageNum: int32(name='PageNum', position='Body'),
  pageSize: int32(name='PageSize', position='Body'),
  sortType?: int32(name='SortType', position='Body'),
  type?: int32(name='Type', position='Body'),
}

model ListMessageResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    hasMore?: boolean(name='HasMore'),
    messageList?: [ 
      {
        data?: string(name='Data'),
        groupId?: string(name='GroupId'),
        messageId?: string(name='MessageId'),
        senderId?: string(name='SenderId'),
        type?: int32(name='Type'),
      }
    ](name='MessageList'),
  }(name='Result'),
}

model ListMessageResponse = {
  headers: map[string]string(name='headers'),
  body: ListMessageResponseBody(name='body'),
}

async function listMessage(request: ListMessageRequest): ListMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMessage', 'POST', '/', 'json', true, 'form', request);
}

model ListMessageAppRequest {
  pageNum: int32(name='PageNum', position='Body'),
  pageSize: int32(name='PageSize', position='Body'),
  sortType?: int32(name='SortType', position='Body'),
}

model ListMessageAppResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    appList?: [ 
      {
        appConfig?: map[string]string(name='AppConfig'),
        appId?: string(name='AppId'),
        appName?: string(name='AppName'),
        createTime?: long(name='CreateTime'),
        extension?: map[string]string(name='Extension'),
        status?: int32(name='Status'),
      }
    ](name='AppList'),
    hasMore?: boolean(name='HasMore'),
    total?: int32(name='Total'),
  }(name='Result'),
}

model ListMessageAppResponse = {
  headers: map[string]string(name='headers'),
  body: ListMessageAppResponseBody(name='body'),
}

async function listMessageApp(request: ListMessageAppRequest): ListMessageAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMessageApp', 'POST', '/', 'json', true, 'form', request);
}

model ListMessageGroupRequest {
  appId?: string(name='AppId', position='Body'),
  pageNum: int32(name='PageNum', position='Body'),
  pageSize: int32(name='PageSize', position='Body'),
  sortType?: int32(name='SortType', position='Body'),
  userId?: string(name='UserId', position='Body'),
}

model ListMessageGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    groupList?: [ 
      {
        appId?: string(name='AppId'),
        createTime?: long(name='CreateTime'),
        creatorId?: string(name='CreatorId'),
        extension?: map[string]string(name='Extension'),
        groupId?: string(name='GroupId'),
        status?: int32(name='Status'),
      }
    ](name='GroupList'),
    hasMore?: boolean(name='HasMore'),
    total?: int32(name='Total'),
  }(name='Result'),
}

model ListMessageGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListMessageGroupResponseBody(name='body'),
}

async function listMessageGroup(request: ListMessageGroupRequest): ListMessageGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMessageGroup', 'POST', '/', 'json', true, 'form', request);
}

model ListMessageGroupUserRequest {
  appId: string(name='AppId', position='Body'),
  groupId: string(name='GroupId', position='Body'),
  pageNum?: int32(name='PageNum', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  sortType?: int32(name='SortType', position='Body'),
}

model ListMessageGroupUserResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    hasMore?: boolean(name='HasMore'),
    total?: int32(name='Total'),
    userList?: [ 
      {
        joinTime?: long(name='JoinTime'),
        userId?: string(name='UserId'),
      }
    ](name='UserList'),
  }(name='Result'),
}

model ListMessageGroupUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListMessageGroupUserResponseBody(name='body'),
}

async function listMessageGroupUser(request: ListMessageGroupUserRequest): ListMessageGroupUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMessageGroupUser', 'POST', '/', 'json', true, 'form', request);
}

model ListMessageGroupUserByIdRequest {
  appId: string(name='AppId', position='Body'),
  groupId: string(name='GroupId', position='Body'),
  userIdList?: [ string ](name='UserIdList', shrink='simple', position='Body'),
}

model ListMessageGroupUserByIdResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    hasMore?: boolean(name='HasMore'),
    total?: int32(name='Total'),
    userList?: [ 
      {
        isMute?: boolean(name='IsMute'),
        muteBy?: [ string ](name='MuteBy'),
        userAvatar?: string(name='UserAvatar'),
        userExtension?: string(name='UserExtension'),
        userId?: string(name='UserId'),
        userNick?: string(name='UserNick'),
      }
    ](name='UserList'),
  }(name='Result'),
}

model ListMessageGroupUserByIdResponse = {
  headers: map[string]string(name='headers'),
  body: ListMessageGroupUserByIdResponseBody(name='body'),
}

async function listMessageGroupUserById(request: ListMessageGroupUserByIdRequest): ListMessageGroupUserByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMessageGroupUserById', 'POST', '/', 'json', true, 'form', request);
}

model ListPlaylistRequest {
  regionId?: string(name='RegionId', position='Host'),
  ownerId?: long(name='OwnerId', position='Query'),
  page?: int32(name='Page', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  programId?: string(name='ProgramId', position='Query'),
}

model ListPlaylistResponseBody = {
  programList?: [ 
    {
      casterId?: string(name='CasterId'),
      domainName?: string(name='DomainName'),
      programId?: string(name='ProgramId'),
      programName?: string(name='ProgramName'),
      repeatNumber?: int32(name='RepeatNumber'),
      status?: int32(name='Status'),
    }
  ](name='ProgramList'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model ListPlaylistResponse = {
  headers: map[string]string(name='headers'),
  body: ListPlaylistResponseBody(name='body'),
}

async function listPlaylist(request: ListPlaylistRequest): ListPlaylistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPlaylist', 'POST', '/', 'json', false, 'json', request);
}

model ListPlaylistItemsRequest {
  regionId?: string(name='RegionId', position='Host'),
  ownerId?: long(name='OwnerId', position='Query'),
  programId: string(name='ProgramId', position='Query'),
  programItemIds?: string(name='ProgramItemIds', position='Query'),
}

model ListPlaylistItemsResponseBody = {
  programItems?: [ 
    {
      index?: int32(name='Index'),
      programId?: string(name='ProgramId'),
      programItemId?: string(name='ProgramItemId'),
      programItemName?: string(name='ProgramItemName'),
      resourceType?: string(name='ResourceType'),
      resourceValue?: string(name='ResourceValue'),
    }
  ](name='ProgramItems'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model ListPlaylistItemsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPlaylistItemsResponseBody(name='body'),
}

async function listPlaylistItems(request: ListPlaylistItemsRequest): ListPlaylistItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPlaylistItems', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCasterComponentRequest {
  regionId?: string(name='RegionId', position='Host'),
  captionLayerContent?: string(name='CaptionLayerContent', position='Query'),
  casterId: string(name='CasterId', position='Query'),
  componentId: string(name='ComponentId', position='Query'),
  componentLayer?: string(name='ComponentLayer', position='Query'),
  componentName?: string(name='ComponentName', position='Query'),
  componentType?: string(name='ComponentType', position='Query'),
  effect?: string(name='Effect', position='Query'),
  imageLayerContent?: string(name='ImageLayerContent', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  textLayerContent?: string(name='TextLayerContent', position='Query'),
}

model ModifyCasterComponentResponseBody = {
  componentId?: string(name='ComponentId'),
  requestId?: string(name='RequestId'),
}

model ModifyCasterComponentResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCasterComponentResponseBody(name='body'),
}

async function modifyCasterComponent(request: ModifyCasterComponentRequest): ModifyCasterComponentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCasterComponent', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCasterEpisodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  componentId?: [ string ](name='ComponentId', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  episodeId: string(name='EpisodeId', position='Query'),
  episodeName?: string(name='EpisodeName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceId?: string(name='ResourceId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  switchType?: string(name='SwitchType', position='Query'),
}

model ModifyCasterEpisodeResponseBody = {
  casterId?: string(name='CasterId'),
  episodeId?: string(name='EpisodeId'),
  requestId?: string(name='RequestId'),
}

model ModifyCasterEpisodeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCasterEpisodeResponseBody(name='body'),
}

async function modifyCasterEpisode(request: ModifyCasterEpisodeRequest): ModifyCasterEpisodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCasterEpisode', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCasterLayoutRequest {
  regionId?: string(name='RegionId', position='Host'),
  audioLayer: [ 
    {
      fixedDelayDuration?: int32(name='FixedDelayDuration'),
      validChannel?: string(name='ValidChannel'),
      volumeRate?: float(name='VolumeRate'),
    }
  ](name='AudioLayer', position='Query'),
  blendList: [ string ](name='BlendList', position='Query'),
  casterId: string(name='CasterId', position='Query'),
  layoutId: string(name='LayoutId', position='Query'),
  mixList: [ string ](name='MixList', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  videoLayer: [ 
    {
      fillMode?: string(name='FillMode'),
      fixedDelayDuration?: int32(name='FixedDelayDuration'),
      heightNormalized?: float(name='HeightNormalized'),
      positionNormalized?: [ float ](name='PositionNormalized'),
      positionRefer?: string(name='PositionRefer'),
      widthNormalized?: float(name='WidthNormalized'),
    }
  ](name='VideoLayer', position='Query'),
}

model ModifyCasterLayoutResponseBody = {
  layoutId?: string(name='LayoutId'),
  requestId?: string(name='RequestId'),
}

model ModifyCasterLayoutResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCasterLayoutResponseBody(name='body'),
}

async function modifyCasterLayout(request: ModifyCasterLayoutRequest): ModifyCasterLayoutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCasterLayout', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCasterProgramRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  episode: [ 
    {
      componentId?: [ string ](name='ComponentId'),
      endTime?: string(name='EndTime'),
      episodeId?: string(name='EpisodeId'),
      episodeName?: string(name='EpisodeName'),
      episodeType?: string(name='EpisodeType'),
      resourceId?: string(name='ResourceId'),
      startTime?: string(name='StartTime'),
      switchType?: string(name='SwitchType'),
    }
  ](name='Episode', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model ModifyCasterProgramResponseBody = {
  casterId?: string(name='CasterId'),
  requestId?: string(name='RequestId'),
}

model ModifyCasterProgramResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCasterProgramResponseBody(name='body'),
}

async function modifyCasterProgram(request: ModifyCasterProgramRequest): ModifyCasterProgramResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCasterProgram', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCasterVideoResourceRequest {
  regionId?: string(name='RegionId', position='Host'),
  beginOffset?: int32(name='BeginOffset', position='Query'),
  casterId: string(name='CasterId', position='Query'),
  endOffset?: int32(name='EndOffset', position='Query'),
  liveStreamUrl?: string(name='LiveStreamUrl', position='Query'),
  materialId?: string(name='MaterialId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  ptsCallbackInterval?: int32(name='PtsCallbackInterval', minimum=0, position='Query'),
  repeatNum?: int32(name='RepeatNum', minimum=-1, maximum=60, position='Query'),
  resourceId: string(name='ResourceId', position='Query'),
  resourceName?: string(name='ResourceName', position='Query'),
  vodUrl?: string(name='VodUrl', position='Query'),
}

model ModifyCasterVideoResourceResponseBody = {
  casterId?: string(name='CasterId'),
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
}

model ModifyCasterVideoResourceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCasterVideoResourceResponseBody(name='body'),
}

async function modifyCasterVideoResource(request: ModifyCasterVideoResourceRequest): ModifyCasterVideoResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCasterVideoResource', 'POST', '/', 'json', false, 'json', request);
}

model ModifyLiveDomainSchdmByPropertyRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  property: string(name='Property', position='Query'),
}

model ModifyLiveDomainSchdmByPropertyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyLiveDomainSchdmByPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLiveDomainSchdmByPropertyResponseBody(name='body'),
}

async function modifyLiveDomainSchdmByProperty(request: ModifyLiveDomainSchdmByPropertyRequest): ModifyLiveDomainSchdmByPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyLiveDomainSchdmByProperty', 'POST', '/', 'json', false, 'json', request);
}

model ModifyLiveRealtimeLogDeliveryRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  logstore: string(name='Logstore', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  project: string(name='Project', position='Query'),
  region: string(name='Region', position='Query'),
}

model ModifyLiveRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyLiveRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLiveRealtimeLogDeliveryResponseBody(name='body'),
}

async function modifyLiveRealtimeLogDelivery(request: ModifyLiveRealtimeLogDeliveryRequest): ModifyLiveRealtimeLogDeliveryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyLiveRealtimeLogDelivery', 'GET', '/', 'json', false, 'json', request);
}

model ModifyShowListRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  highPriorityShowId?: string(name='HighPriorityShowId', position='Query'),
  highPriorityShowStartTime?: string(name='HighPriorityShowStartTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  repeatTimes?: int32(name='RepeatTimes', position='Query'),
  showId?: string(name='ShowId', position='Query'),
  spot?: int32(name='Spot', position='Query'),
}

model ModifyShowListResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyShowListResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyShowListResponseBody(name='body'),
}

async function modifyShowList(request: ModifyShowListRequest): ModifyShowListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyShowList', 'POST', '/', 'json', false, 'json', request);
}

model ModifyStudioLayoutRequest {
  regionId?: string(name='RegionId', position='Host'),
  bgImageConfig?: string(name='BgImageConfig', position='Query'),
  casterId: string(name='CasterId', position='Query'),
  commonConfig?: string(name='CommonConfig', position='Query'),
  layerOrderConfigList?: string(name='LayerOrderConfigList', position='Query'),
  layoutId: string(name='LayoutId', position='Query'),
  layoutName?: string(name='LayoutName', position='Query'),
  mediaInputConfigList?: string(name='MediaInputConfigList', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  screenInputConfigList?: string(name='ScreenInputConfigList', position='Query'),
}

model ModifyStudioLayoutResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyStudioLayoutResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyStudioLayoutResponseBody(name='body'),
}

async function modifyStudioLayout(request: ModifyStudioLayoutRequest): ModifyStudioLayoutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyStudioLayout', 'POST', '/', 'json', false, 'json', request);
}

model OpenLiveShiftRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName?: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  duration?: int32(name='Duration', position='Query'),
  ignoreTranscode?: boolean(name='IgnoreTranscode', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  streamName?: string(name='StreamName', position='Query'),
  vision?: int32(name='Vision', position='Query'),
}

model OpenLiveShiftResponseBody = {
  requestId?: string(name='RequestId'),
}

model OpenLiveShiftResponse = {
  headers: map[string]string(name='headers'),
  body: OpenLiveShiftResponseBody(name='body'),
}

async function openLiveShift(request: OpenLiveShiftRequest): OpenLiveShiftResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenLiveShift', 'POST', '/', 'json', false, 'json', request);
}

model PlayChoosenShowRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  showId: string(name='ShowId', position='Query'),
}

model PlayChoosenShowResponseBody = {
  requestId?: string(name='RequestId'),
  showId?: string(name='ShowId'),
}

model PlayChoosenShowResponse = {
  headers: map[string]string(name='headers'),
  body: PlayChoosenShowResponseBody(name='body'),
}

async function playChoosenShow(request: PlayChoosenShowRequest): PlayChoosenShowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PlayChoosenShow', 'POST', '/', 'json', false, 'json', request);
}

model PublishLiveStagingConfigToProductionRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  functionName: string(name='FunctionName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model PublishLiveStagingConfigToProductionResponseBody = {
  requestId?: string(name='RequestId'),
}

model PublishLiveStagingConfigToProductionResponse = {
  headers: map[string]string(name='headers'),
  body: PublishLiveStagingConfigToProductionResponseBody(name='body'),
}

async function publishLiveStagingConfigToProduction(request: PublishLiveStagingConfigToProductionRequest): PublishLiveStagingConfigToProductionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishLiveStagingConfigToProduction', 'POST', '/', 'json', false, 'json', request);
}

model QueryMessageAppRequest {
  appId?: string(name='AppId', position='Body'),
  appName?: string(name='AppName', position='Body'),
  pageNum?: int32(name='PageNum', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  sortType?: int32(name='SortType', position='Body'),
}

model QueryMessageAppResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: [ 
    {
      appList?: [ 
        {
          appConfig?: map[string]string(name='AppConfig'),
          appId?: string(name='AppId'),
          appName?: string(name='AppName'),
          createTime?: long(name='CreateTime'),
          extension?: map[string]string(name='Extension'),
          status?: int32(name='Status'),
        }
      ](name='AppList'),
      hasMore?: boolean(name='HasMore'),
      totalCount?: int32(name='TotalCount'),
    }
  ](name='Result'),
}

model QueryMessageAppResponse = {
  headers: map[string]string(name='headers'),
  body: QueryMessageAppResponseBody(name='body'),
}

async function queryMessageApp(request: QueryMessageAppRequest): QueryMessageAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMessageApp', 'POST', '/', 'json', true, 'form', request);
}

model QuerySnapshotCallbackAuthRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model QuerySnapshotCallbackAuthResponseBody = {
  callbackAuthKey?: string(name='CallbackAuthKey'),
  callbackReqAuth?: string(name='CallbackReqAuth'),
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
}

model QuerySnapshotCallbackAuthResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySnapshotCallbackAuthResponseBody(name='body'),
}

async function querySnapshotCallbackAuth(request: QuerySnapshotCallbackAuthRequest): QuerySnapshotCallbackAuthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySnapshotCallbackAuth', 'POST', '/', 'json', false, 'json', request);
}

model RealTimeRecordCommandRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', position='Query'),
  command: string(name='Command', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  streamName: string(name='StreamName', position='Query'),
}

model RealTimeRecordCommandResponseBody = {
  requestId?: string(name='RequestId'),
}

model RealTimeRecordCommandResponse = {
  headers: map[string]string(name='headers'),
  body: RealTimeRecordCommandResponseBody(name='body'),
}

async function realTimeRecordCommand(request: RealTimeRecordCommandRequest): RealTimeRecordCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RealTimeRecordCommand', 'POST', '/', 'json', false, 'json', request);
}

model RealTimeSnapshotCommandRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', position='Query'),
  command: string(name='Command', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  interval?: int32(name='Interval', position='Query'),
  mode?: int32(name='Mode', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  source?: int32(name='Source', position='Query'),
  streamName: string(name='StreamName', position='Query'),
}

model RealTimeSnapshotCommandResponseBody = {
  requestId?: string(name='RequestId'),
}

model RealTimeSnapshotCommandResponse = {
  headers: map[string]string(name='headers'),
  body: RealTimeSnapshotCommandResponseBody(name='body'),
}

async function realTimeSnapshotCommand(request: RealTimeSnapshotCommandRequest): RealTimeSnapshotCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RealTimeSnapshotCommand', 'POST', '/', 'json', false, 'json', request);
}

model RemoveShowFromShowListRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  showId?: string(name='ShowId', position='Query'),
  isBatchMode?: boolean(name='isBatchMode', position='Query'),
  showIdList?: [ string ](name='showIdList', position='Query'),
}

model RemoveShowFromShowListResponseBody = {
  requestId?: string(name='RequestId'),
  showId?: string(name='ShowId'),
  failedList?: string(name='failedList'),
  successfulShowIds?: string(name='successfulShowIds'),
}

model RemoveShowFromShowListResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveShowFromShowListResponseBody(name='body'),
}

async function removeShowFromShowList(request: RemoveShowFromShowListRequest): RemoveShowFromShowListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveShowFromShowList', 'POST', '/', 'json', false, 'json', request);
}

model RestartCasterRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model RestartCasterResponseBody = {
  requestId?: string(name='RequestId'),
}

model RestartCasterResponse = {
  headers: map[string]string(name='headers'),
  body: RestartCasterResponseBody(name='body'),
}

async function restartCaster(request: RestartCasterRequest): RestartCasterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartCaster', 'POST', '/', 'json', false, 'json', request);
}

model ResumeLiveStreamRequest {
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  liveStreamType: string(name='LiveStreamType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  streamName: string(name='StreamName', position='Query'),
}

model ResumeLiveStreamResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResumeLiveStreamResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeLiveStreamResponseBody(name='body'),
}

async function resumeLiveStream(request: ResumeLiveStreamRequest): ResumeLiveStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumeLiveStream', 'POST', '/', 'json', false, 'json', request);
}

model RollbackLiveStagingConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  functionName: string(name='FunctionName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model RollbackLiveStagingConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model RollbackLiveStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: RollbackLiveStagingConfigResponseBody(name='body'),
}

async function rollbackLiveStagingConfig(request: RollbackLiveStagingConfigRequest): RollbackLiveStagingConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RollbackLiveStagingConfig', 'POST', '/', 'json', false, 'json', request);
}

model SendLikeRequest {
  appId: string(name='AppId', description='应用ID。', position='Body'),
  broadCastType?: int32(name='BroadCastType', description='系统消息广播类型，取值0，1，2.
0：不广播。
1：广播至消息组指定成员。
2：广播至消息组。', position='Body'),
  count: string(name='Count', description='点赞数。示例值：1。', position='Body'),
  groupId: string(name='GroupId', description='消息组ID。', position='Body'),
  operatorUserId?: string(name='OperatorUserId', description='操作者ID。示例值：testUserId。', position='Body'),
}

model SendLikeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    likeCount?: int32(name='LikeCount'),
  }(name='Result'),
}

model SendLikeResponse = {
  headers: map[string]string(name='headers'),
  body: SendLikeResponseBody(name='body'),
}

async function sendLike(request: SendLikeRequest): SendLikeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendLike', 'POST', '/', 'json', true, 'form', request);
}

model SendMessageToGroupRequest {
  appId: string(name='AppId', position='Body'),
  data: string(name='Data', position='Body'),
  groupId: string(name='GroupId', position='Body'),
  operatorUserId: string(name='OperatorUserId', position='Body'),
  type?: int32(name='Type', position='Body'),
}

model SendMessageToGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    messageId?: string(name='MessageId', description='用于长连接建连的token'),
  }(name='Result'),
}

model SendMessageToGroupResponse = {
  headers: map[string]string(name='headers'),
  body: SendMessageToGroupResponseBody(name='body'),
}

async function sendMessageToGroup(request: SendMessageToGroupRequest): SendMessageToGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendMessageToGroup', 'POST', '/', 'json', true, 'form', request);
}

model SendMessageToGroupUsersRequest {
  appId: string(name='AppId', position='Body'),
  data: string(name='Data', position='Body'),
  groupId: string(name='GroupId', position='Body'),
  operatorUserId: string(name='OperatorUserId', position='Body'),
  receiverIdList: [ string ](name='ReceiverIdList', shrink='json', position='Body'),
  type: int32(name='Type', position='Body'),
}

model SendMessageToGroupUsersResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    messageId?: string(name='MessageId', description='用于长连接建连的token'),
  }(name='Result'),
}

model SendMessageToGroupUsersResponse = {
  headers: map[string]string(name='headers'),
  body: SendMessageToGroupUsersResponseBody(name='body'),
}

async function sendMessageToGroupUsers(request: SendMessageToGroupUsersRequest): SendMessageToGroupUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendMessageToGroupUsers', 'POST', '/', 'json', true, 'form', request);
}

model SendRoomNotificationRequest {
  regionId?: string(name='RegionId', position='Host'),
  appId: string(name='AppId', position='Query'),
  appUid?: string(name='AppUid', position='Query'),
  data: string(name='Data', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  priority?: int32(name='Priority', position='Query'),
  roomId: string(name='RoomId', position='Query'),
}

model SendRoomNotificationResponseBody = {
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
}

model SendRoomNotificationResponse = {
  headers: map[string]string(name='headers'),
  body: SendRoomNotificationResponseBody(name='body'),
}

async function sendRoomNotification(request: SendRoomNotificationRequest): SendRoomNotificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendRoomNotification', 'POST', '/', 'json', false, 'json', request);
}

model SendRoomUserNotificationRequest {
  regionId?: string(name='RegionId', position='Host'),
  appId: string(name='AppId', position='Query'),
  appUid: string(name='AppUid', position='Query'),
  data: string(name='Data', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  priority?: int32(name='Priority', position='Query'),
  roomId: string(name='RoomId', position='Query'),
  toAppUid: string(name='ToAppUid', position='Query'),
}

model SendRoomUserNotificationResponseBody = {
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
}

model SendRoomUserNotificationResponse = {
  headers: map[string]string(name='headers'),
  body: SendRoomUserNotificationResponseBody(name='body'),
}

async function sendRoomUserNotification(request: SendRoomUserNotificationRequest): SendRoomUserNotificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendRoomUserNotification', 'POST', '/', 'json', false, 'json', request);
}

model SetCasterChannelRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  channelId: string(name='ChannelId', position='Query'),
  faceBeauty?: string(name='FaceBeauty', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  playStatus?: int32(name='PlayStatus', position='Query'),
  resourceId?: string(name='ResourceId', position='Query'),
  seekOffset?: int32(name='SeekOffset', position='Query'),
}

model SetCasterChannelResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetCasterChannelResponse = {
  headers: map[string]string(name='headers'),
  body: SetCasterChannelResponseBody(name='body'),
}

async function setCasterChannel(request: SetCasterChannelRequest): SetCasterChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetCasterChannel', 'POST', '/', 'json', false, 'json', request);
}

model SetCasterConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  callbackUrl?: string(name='CallbackUrl', position='Query'),
  casterId: string(name='CasterId', position='Query'),
  casterName?: string(name='CasterName', position='Query'),
  channelEnable?: int32(name='ChannelEnable', position='Query'),
  delay?: float(name='Delay', position='Query'),
  domainName?: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  programEffect?: int32(name='ProgramEffect', position='Query'),
  programName?: string(name='ProgramName', position='Query'),
  recordConfig?: string(name='RecordConfig', position='Query'),
  sideOutputUrl?: string(name='SideOutputUrl', position='Query'),
  sideOutputUrlList?: string(name='SideOutputUrlList', position='Query'),
  syncGroupsConfig?: string(name='SyncGroupsConfig', position='Query'),
  transcodeConfig?: string(name='TranscodeConfig', position='Query'),
  urgentLiveStreamUrl?: string(name='UrgentLiveStreamUrl', position='Query'),
  urgentMaterialId?: string(name='UrgentMaterialId', position='Query'),
}

model SetCasterConfigResponseBody = {
  casterId?: string(name='CasterId'),
  requestId?: string(name='RequestId'),
}

model SetCasterConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetCasterConfigResponseBody(name='body'),
}

async function setCasterConfig(request: SetCasterConfigRequest): SetCasterConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetCasterConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetCasterSceneConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  componentId?: [ string ](name='ComponentId', position='Query'),
  layoutId?: string(name='LayoutId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  sceneId: string(name='SceneId', position='Query'),
}

model SetCasterSceneConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetCasterSceneConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetCasterSceneConfigResponseBody(name='body'),
}

async function setCasterSceneConfig(request: SetCasterSceneConfigRequest): SetCasterSceneConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetCasterSceneConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetCasterSyncGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  syncGroup?: [ 
    {
      hostResourceId?: string(name='HostResourceId'),
      mode?: int32(name='Mode'),
      resourceIds?: [ string ](name='ResourceIds'),
      syncDelayThreshold?: long(name='SyncDelayThreshold'),
      syncOffsets?: [ int32 ](name='SyncOffsets'),
    }
  ](name='SyncGroup', position='Query'),
}

model SetCasterSyncGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetCasterSyncGroupResponse = {
  headers: map[string]string(name='headers'),
  body: SetCasterSyncGroupResponseBody(name='body'),
}

async function setCasterSyncGroup(request: SetCasterSyncGroupRequest): SetCasterSyncGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetCasterSyncGroup', 'POST', '/', 'json', false, 'json', request);
}

model SetCasterTimedEventRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  eventName: string(name='EventName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTimeUTC: string(name='StartTimeUTC', position='Query'),
}

model SetCasterTimedEventResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetCasterTimedEventResponse = {
  headers: map[string]string(name='headers'),
  body: SetCasterTimedEventResponseBody(name='body'),
}

async function setCasterTimedEvent(request: SetCasterTimedEventRequest): SetCasterTimedEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetCasterTimedEvent', 'POST', '/', 'json', false, 'json', request);
}

model SetLiveDomainCertificateRequest {
  certName?: string(name='CertName', position='Query'),
  certType?: string(name='CertType', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  forceSet?: string(name='ForceSet', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  SSLPri?: string(name='SSLPri', position='Query'),
  SSLProtocol: string(name='SSLProtocol', position='Query'),
  SSLPub?: string(name='SSLPub', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetLiveDomainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetLiveDomainCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: SetLiveDomainCertificateResponseBody(name='body'),
}

async function setLiveDomainCertificate(request: SetLiveDomainCertificateRequest): SetLiveDomainCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetLiveDomainCertificate', 'POST', '/', 'json', false, 'json', request);
}

model SetLiveDomainStagingConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  functions: string(name='Functions', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model SetLiveDomainStagingConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetLiveDomainStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetLiveDomainStagingConfigResponseBody(name='body'),
}

async function setLiveDomainStagingConfig(request: SetLiveDomainStagingConfigRequest): SetLiveDomainStagingConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetLiveDomainStagingConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetLiveEdgeTransferRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName?: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  httpDns?: string(name='HttpDns', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  streamName?: string(name='StreamName', position='Query'),
  targetDomainList?: string(name='TargetDomainList', position='Query'),
  transferArgs?: string(name='TransferArgs', position='Query'),
}

model SetLiveEdgeTransferResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetLiveEdgeTransferResponse = {
  headers: map[string]string(name='headers'),
  body: SetLiveEdgeTransferResponseBody(name='body'),
}

async function setLiveEdgeTransfer(request: SetLiveEdgeTransferRequest): SetLiveEdgeTransferResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetLiveEdgeTransfer', 'POST', '/', 'json', false, 'json', request);
}

model SetLiveLazyPullStreamInfoConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pullAppName?: string(name='PullAppName', position='Query'),
  pullDomainName: string(name='PullDomainName', position='Query'),
  pullProtocol: string(name='PullProtocol', position='Query'),
}

model SetLiveLazyPullStreamInfoConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetLiveLazyPullStreamInfoConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetLiveLazyPullStreamInfoConfigResponseBody(name='body'),
}

async function setLiveLazyPullStreamInfoConfig(request: SetLiveLazyPullStreamInfoConfigRequest): SetLiveLazyPullStreamInfoConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetLiveLazyPullStreamInfoConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetLiveStreamDelayConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  flvDelay?: int32(name='FlvDelay', position='Query'),
  flvLevel?: string(name='FlvLevel', position='Query'),
  hlsDelay?: int32(name='HlsDelay', position='Query'),
  hlsLevel?: string(name='HlsLevel', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  rtmpDelay?: int32(name='RtmpDelay', position='Query'),
  rtmpLevel?: string(name='RtmpLevel', position='Query'),
}

model SetLiveStreamDelayConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetLiveStreamDelayConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetLiveStreamDelayConfigResponseBody(name='body'),
}

async function setLiveStreamDelayConfig(request: SetLiveStreamDelayConfigRequest): SetLiveStreamDelayConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetLiveStreamDelayConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetLiveStreamOptimizedFeatureConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  configName: string(name='ConfigName', position='Query'),
  configStatus: string(name='ConfigStatus', position='Query'),
  configValue?: string(name='ConfigValue', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model SetLiveStreamOptimizedFeatureConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetLiveStreamOptimizedFeatureConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetLiveStreamOptimizedFeatureConfigResponseBody(name='body'),
}

async function setLiveStreamOptimizedFeatureConfig(request: SetLiveStreamOptimizedFeatureConfigRequest): SetLiveStreamOptimizedFeatureConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetLiveStreamOptimizedFeatureConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetLiveStreamsNotifyUrlConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  notifyAuthKey?: string(name='NotifyAuthKey', position='Query'),
  notifyReqAuth?: string(name='NotifyReqAuth', position='Query'),
  notifyUrl: string(name='NotifyUrl', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model SetLiveStreamsNotifyUrlConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetLiveStreamsNotifyUrlConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetLiveStreamsNotifyUrlConfigResponseBody(name='body'),
}

async function setLiveStreamsNotifyUrlConfig(request: SetLiveStreamsNotifyUrlConfigRequest): SetLiveStreamsNotifyUrlConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetLiveStreamsNotifyUrlConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetSnapshotCallbackAuthRequest {
  regionId?: string(name='RegionId', position='Host'),
  callbackAuthKey: string(name='CallbackAuthKey', position='Query'),
  callbackReqAuth: string(name='CallbackReqAuth', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model SetSnapshotCallbackAuthResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetSnapshotCallbackAuthResponse = {
  headers: map[string]string(name='headers'),
  body: SetSnapshotCallbackAuthResponseBody(name='body'),
}

async function setSnapshotCallbackAuth(request: SetSnapshotCallbackAuthRequest): SetSnapshotCallbackAuthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetSnapshotCallbackAuth', 'POST', '/', 'json', false, 'json', request);
}

model StartCasterRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model StartCasterResponseBody = {
  pgmSceneInfos?: {
    sceneInfo?: [ 
    {
      sceneId?: string(name='SceneId'),
      streamInfos?: {
        streamInfo?: [ 
        {
          outputStreamUrl?: string(name='OutputStreamUrl'),
          transcodeConfig?: string(name='TranscodeConfig'),
          videoFormat?: string(name='VideoFormat'),
        }
      ](name='StreamInfo')
      }(name='StreamInfos'),
      streamUrl?: string(name='StreamUrl'),
    }
  ](name='SceneInfo')
  }(name='PgmSceneInfos'),
  pvwSceneInfos?: {
    sceneInfo?: [ 
    {
      sceneId?: string(name='SceneId'),
      streamUrl?: string(name='StreamUrl'),
    }
  ](name='SceneInfo')
  }(name='PvwSceneInfos'),
  requestId?: string(name='RequestId'),
}

model StartCasterResponse = {
  headers: map[string]string(name='headers'),
  body: StartCasterResponseBody(name='body'),
}

async function startCaster(request: StartCasterRequest): StartCasterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartCaster', 'POST', '/', 'json', false, 'json', request);
}

model StartCasterSceneRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  sceneId: string(name='SceneId', position='Query'),
}

model StartCasterSceneResponseBody = {
  requestId?: string(name='RequestId'),
  streamUrl?: string(name='StreamUrl'),
}

model StartCasterSceneResponse = {
  headers: map[string]string(name='headers'),
  body: StartCasterSceneResponseBody(name='body'),
}

async function startCasterScene(request: StartCasterSceneRequest): StartCasterSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartCasterScene', 'POST', '/', 'json', false, 'json', request);
}

model StartLiveDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model StartLiveDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartLiveDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StartLiveDomainResponseBody(name='body'),
}

async function startLiveDomain(request: StartLiveDomainRequest): StartLiveDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartLiveDomain', 'POST', '/', 'json', false, 'json', request);
}

model StartLiveStreamMonitorRequest {
  regionId?: string(name='RegionId', position='Host'),
  monitorId: string(name='MonitorId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model StartLiveStreamMonitorResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartLiveStreamMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: StartLiveStreamMonitorResponseBody(name='body'),
}

async function startLiveStreamMonitor(request: StartLiveStreamMonitorRequest): StartLiveStreamMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartLiveStreamMonitor', 'POST', '/', 'json', false, 'json', request);
}

model StartPlaylistRequest {
  regionId?: string(name='RegionId', position='Host'),
  offset?: int32(name='Offset', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  programId: string(name='ProgramId', position='Query'),
  resumeMode?: string(name='ResumeMode', position='Query'),
  startItemId?: string(name='StartItemId', position='Query'),
}

model StartPlaylistResponseBody = {
  programId?: string(name='ProgramId'),
  requestId?: string(name='RequestId'),
  streamInfo?: {
    appName?: string(name='AppName'),
    domainName?: string(name='DomainName'),
    streamName?: string(name='StreamName'),
    streams?: {
      stream?: [ 
      {
        pullFlvUrl?: string(name='PullFlvUrl'),
        pullM3U8Url?: string(name='PullM3U8Url'),
        pullRtmpUrl?: string(name='PullRtmpUrl'),
        quality?: string(name='Quality'),
      }
    ](name='Stream')
    }(name='Streams'),
  }(name='StreamInfo'),
}

model StartPlaylistResponse = {
  headers: map[string]string(name='headers'),
  body: StartPlaylistResponseBody(name='body'),
}

async function startPlaylist(request: StartPlaylistRequest): StartPlaylistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartPlaylist', 'POST', '/', 'json', false, 'json', request);
}

model StopCasterRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model StopCasterResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopCasterResponse = {
  headers: map[string]string(name='headers'),
  body: StopCasterResponseBody(name='body'),
}

async function stopCaster(request: StopCasterRequest): StopCasterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopCaster', 'POST', '/', 'json', false, 'json', request);
}

model StopCasterSceneRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  sceneId: string(name='SceneId', position='Query'),
}

model StopCasterSceneResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopCasterSceneResponse = {
  headers: map[string]string(name='headers'),
  body: StopCasterSceneResponseBody(name='body'),
}

async function stopCasterScene(request: StopCasterSceneRequest): StopCasterSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopCasterScene', 'POST', '/', 'json', false, 'json', request);
}

model StopLiveDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model StopLiveDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopLiveDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StopLiveDomainResponseBody(name='body'),
}

async function stopLiveDomain(request: StopLiveDomainRequest): StopLiveDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopLiveDomain', 'POST', '/', 'json', false, 'json', request);
}

model StopLiveStreamMonitorRequest {
  regionId?: string(name='RegionId', position='Host'),
  monitorId: string(name='MonitorId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model StopLiveStreamMonitorResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopLiveStreamMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: StopLiveStreamMonitorResponseBody(name='body'),
}

async function stopLiveStreamMonitor(request: StopLiveStreamMonitorRequest): StopLiveStreamMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopLiveStreamMonitor', 'POST', '/', 'json', false, 'json', request);
}

model StopPlaylistRequest {
  regionId?: string(name='RegionId', position='Host'),
  ownerId?: long(name='OwnerId', position='Query'),
  programId: string(name='ProgramId', position='Query'),
}

model StopPlaylistResponseBody = {
  programId?: string(name='ProgramId'),
  requestId?: string(name='RequestId'),
}

model StopPlaylistResponse = {
  headers: map[string]string(name='headers'),
  body: StopPlaylistResponseBody(name='body'),
}

async function stopPlaylist(request: StopPlaylistRequest): StopPlaylistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopPlaylist', 'POST', '/', 'json', false, 'json', request);
}

model TagLiveResourcesRequest {
  regionId?: string(name='RegionId', position='Host'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag: [ 
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model TagLiveResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagLiveResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagLiveResourcesResponseBody(name='body'),
}

async function tagLiveResources(request: TagLiveResourcesRequest): TagLiveResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagLiveResources', 'POST', '/', 'json', false, 'json', request);
}

model UnTagLiveResourcesRequest {
  regionId?: string(name='RegionId', position='Host'),
  all?: boolean(name='All', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UnTagLiveResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnTagLiveResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UnTagLiveResourcesResponseBody(name='body'),
}

async function unTagLiveResources(request: UnTagLiveResourcesRequest): UnTagLiveResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnTagLiveResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCasterSceneAudioRequest {
  regionId?: string(name='RegionId', position='Host'),
  audioLayer?: [ 
    {
      fixedDelayDuration?: int32(name='FixedDelayDuration'),
      validChannel?: string(name='ValidChannel'),
      volumeRate?: float(name='VolumeRate'),
    }
  ](name='AudioLayer', position='Query'),
  casterId: string(name='CasterId', position='Query'),
  followEnable?: int32(name='FollowEnable', position='Query'),
  mixList?: [ string ](name='MixList', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  sceneId: string(name='SceneId', position='Query'),
}

model UpdateCasterSceneAudioResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateCasterSceneAudioResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCasterSceneAudioResponseBody(name='body'),
}

async function updateCasterSceneAudio(request: UpdateCasterSceneAudioRequest): UpdateCasterSceneAudioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCasterSceneAudio', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCasterSceneConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  casterId: string(name='CasterId', position='Query'),
  componentId?: [ string ](name='ComponentId', position='Query'),
  layoutId: string(name='LayoutId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  sceneId: string(name='SceneId', position='Query'),
}

model UpdateCasterSceneConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateCasterSceneConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCasterSceneConfigResponseBody(name='body'),
}

async function updateCasterSceneConfig(request: UpdateCasterSceneConfigRequest): UpdateCasterSceneConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCasterSceneConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLiveAppSnapshotConfigRequest {
  appName: string(name='AppName', position='Query'),
  callback?: string(name='Callback', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ossBucket?: string(name='OssBucket', position='Query'),
  ossEndpoint?: string(name='OssEndpoint', position='Query'),
  overwriteOssObject?: string(name='OverwriteOssObject', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sequenceOssObject?: string(name='SequenceOssObject', position='Query'),
  timeInterval?: int32(name='TimeInterval', minimum=5, maximum=3600, position='Query'),
}

model UpdateLiveAppSnapshotConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateLiveAppSnapshotConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveAppSnapshotConfigResponseBody(name='body'),
}

async function updateLiveAppSnapshotConfig(request: UpdateLiveAppSnapshotConfigRequest): UpdateLiveAppSnapshotConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLiveAppSnapshotConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLiveAudioAuditConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', position='Query'),
  bizType?: string(name='BizType', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ossBucket?: string(name='OssBucket', position='Query'),
  ossEndpoint?: string(name='OssEndpoint', position='Query'),
  ossObject?: string(name='OssObject', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  streamName: string(name='StreamName', position='Query'),
}

model UpdateLiveAudioAuditConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateLiveAudioAuditConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveAudioAuditConfigResponseBody(name='body'),
}

async function updateLiveAudioAuditConfig(request: UpdateLiveAudioAuditConfigRequest): UpdateLiveAudioAuditConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLiveAudioAuditConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLiveAudioAuditNotifyConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  callback?: string(name='Callback', position='Query'),
  callbackTemplate?: string(name='CallbackTemplate', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model UpdateLiveAudioAuditNotifyConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateLiveAudioAuditNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveAudioAuditNotifyConfigResponseBody(name='body'),
}

async function updateLiveAudioAuditNotifyConfig(request: UpdateLiveAudioAuditNotifyConfigRequest): UpdateLiveAudioAuditNotifyConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLiveAudioAuditNotifyConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLiveDetectNotifyConfigRequest {
  domainName: string(name='DomainName', position='Query'),
  notifyUrl: string(name='NotifyUrl', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model UpdateLiveDetectNotifyConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateLiveDetectNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveDetectNotifyConfigResponseBody(name='body'),
}

async function updateLiveDetectNotifyConfig(request: UpdateLiveDetectNotifyConfigRequest): UpdateLiveDetectNotifyConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLiveDetectNotifyConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLivePullStreamInfoConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  sourceUrl: string(name='SourceUrl', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  streamName: string(name='StreamName', position='Query'),
}

model UpdateLivePullStreamInfoConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateLivePullStreamInfoConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLivePullStreamInfoConfigResponseBody(name='body'),
}

async function updateLivePullStreamInfoConfig(request: UpdateLivePullStreamInfoConfigRequest): UpdateLivePullStreamInfoConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLivePullStreamInfoConfig', 'GET', '/', 'json', false, 'json', request);
}

model UpdateLiveRecordNotifyConfigRequest {
  domainName: string(name='DomainName', position='Query'),
  needStatusNotify?: boolean(name='NeedStatusNotify', position='Query'),
  notifyUrl?: string(name='NotifyUrl', position='Query'),
  onDemandUrl?: string(name='OnDemandUrl', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model UpdateLiveRecordNotifyConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateLiveRecordNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveRecordNotifyConfigResponseBody(name='body'),
}

async function updateLiveRecordNotifyConfig(request: UpdateLiveRecordNotifyConfigRequest): UpdateLiveRecordNotifyConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLiveRecordNotifyConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLiveSnapshotDetectPornConfigRequest {
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  interval?: int32(name='Interval', minimum=5, maximum=3600, position='Query'),
  ossBucket?: string(name='OssBucket', position='Query'),
  ossEndpoint?: string(name='OssEndpoint', position='Query'),
  ossObject?: string(name='OssObject', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  scene?: [ string ](name='Scene', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model UpdateLiveSnapshotDetectPornConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateLiveSnapshotDetectPornConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveSnapshotDetectPornConfigResponseBody(name='body'),
}

async function updateLiveSnapshotDetectPornConfig(request: UpdateLiveSnapshotDetectPornConfigRequest): UpdateLiveSnapshotDetectPornConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLiveSnapshotDetectPornConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLiveSnapshotNotifyConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  notifyAuthKey?: string(name='NotifyAuthKey', position='Query'),
  notifyReqAuth?: string(name='NotifyReqAuth', position='Query'),
  notifyUrl?: string(name='NotifyUrl', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model UpdateLiveSnapshotNotifyConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateLiveSnapshotNotifyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveSnapshotNotifyConfigResponseBody(name='body'),
}

async function updateLiveSnapshotNotifyConfig(request: UpdateLiveSnapshotNotifyConfigRequest): UpdateLiveSnapshotNotifyConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLiveSnapshotNotifyConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLiveStreamMonitorRequest {
  regionId?: string(name='RegionId', position='Host'),
  app?: string(name='App', position='Query'),
  domain?: string(name='Domain', position='Query'),
  inputList?: string(name='InputList', position='Query'),
  monitorId: string(name='MonitorId', position='Query'),
  monitorName?: string(name='MonitorName', position='Query'),
  outputTemplate?: string(name='OutputTemplate', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  stream?: string(name='Stream', position='Query'),
}

model UpdateLiveStreamMonitorResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateLiveStreamMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveStreamMonitorResponseBody(name='body'),
}

async function updateLiveStreamMonitor(request: UpdateLiveStreamMonitorRequest): UpdateLiveStreamMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLiveStreamMonitor', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLiveStreamWatermarkRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', position='Query'),
  height?: int32(name='Height', position='Query'),
  name?: string(name='Name', position='Query'),
  offsetCorner?: string(name='OffsetCorner', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pictureUrl?: string(name='PictureUrl', position='Query'),
  refHeight?: int32(name='RefHeight', position='Query'),
  refWidth?: int32(name='RefWidth', position='Query'),
  templateId: string(name='TemplateId', position='Query'),
  transparency?: int32(name='Transparency', position='Query'),
  xOffset?: float(name='XOffset', position='Query'),
  yOffset?: float(name='YOffset', position='Query'),
}

model UpdateLiveStreamWatermarkResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateLiveStreamWatermarkResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveStreamWatermarkResponseBody(name='body'),
}

async function updateLiveStreamWatermark(request: UpdateLiveStreamWatermarkRequest): UpdateLiveStreamWatermarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLiveStreamWatermark', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLiveStreamWatermarkRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  ruleId: string(name='RuleId', position='Query'),
  templateId?: string(name='TemplateId', position='Query'),
}

model UpdateLiveStreamWatermarkRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateLiveStreamWatermarkRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveStreamWatermarkRuleResponseBody(name='body'),
}

async function updateLiveStreamWatermarkRule(request: UpdateLiveStreamWatermarkRuleRequest): UpdateLiveStreamWatermarkRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLiveStreamWatermarkRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLiveTopLevelDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  topLevelDomain: string(name='TopLevelDomain', position='Query'),
}

model UpdateLiveTopLevelDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateLiveTopLevelDomainResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveTopLevelDomainResponseBody(name='body'),
}

async function updateLiveTopLevelDomain(request: UpdateLiveTopLevelDomainRequest): UpdateLiveTopLevelDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLiveTopLevelDomain', 'POST', '/', 'json', false, 'json', request);
}

model UpdateMessageAppRequest {
  appConfig?: map[string]string(name='AppConfig', shrink='json', position='Body'),
  appId: string(name='AppId', position='Body'),
  appName?: string(name='AppName', position='Body'),
  extension?: map[string]string(name='Extension', shrink='json', position='Body'),
}

model UpdateMessageAppResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result'),
}

model UpdateMessageAppResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateMessageAppResponseBody(name='body'),
}

async function updateMessageApp(request: UpdateMessageAppRequest): UpdateMessageAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMessageApp', 'POST', '/', 'json', true, 'form', request);
}

model UpdateMessageGroupRequest {
  appId: string(name='AppId', position='Body'),
  extension?: map[string]string(name='Extension', shrink='json', position='Body'),
  groupId: string(name='GroupId', position='Body'),
}

model UpdateMessageGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result'),
}

model UpdateMessageGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateMessageGroupResponseBody(name='body'),
}

async function updateMessageGroup(request: UpdateMessageGroupRequest): UpdateMessageGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMessageGroup', 'POST', '/', 'json', true, 'form', request);
}

model UpdateMixStreamRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  inputStreamList: string(name='InputStreamList', position='Query'),
  layoutId?: string(name='LayoutId', position='Query'),
  mixStreamId: string(name='MixStreamId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model UpdateMixStreamResponseBody = {
  mixStreamId?: string(name='MixStreamId'),
  requestId?: string(name='RequestId'),
}

model UpdateMixStreamResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateMixStreamResponseBody(name='body'),
}

async function updateMixStream(request: UpdateMixStreamRequest): UpdateMixStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMixStream', 'POST', '/', 'json', false, 'json', request);
}

model VerifyLiveDomainOwnerRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  verifyType: string(name='VerifyType', position='Query'),
}

model VerifyLiveDomainOwnerResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model VerifyLiveDomainOwnerResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyLiveDomainOwnerResponseBody(name='body'),
}

async function verifyLiveDomainOwner(request: VerifyLiveDomainOwnerRequest): VerifyLiveDomainOwnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyLiveDomainOwner', 'POST', '/', 'json', false, 'json', request);
}

