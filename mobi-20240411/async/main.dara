/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Mobi';
  @version = '2024-04-11';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateAppFromTemplateRequest {
  actualParameters?: string(name='ActualParameters', example='[{"type":"bailianapp","name":"rag","actualParameter":"11"}]', position='Query'),
  connectionsContent?: string(name='ConnectionsContent', position='Query'),
  databasesContent?: string(name='DatabasesContent', position='Query'),
  description?: string(name='Description', position='Query'),
  from?: string(name='From', position='Query'),
  icon: string(name='Icon', description='This parameter is required.', example='-1', position='Query'),
  name: string(name='Name', description='This parameter is required.', position='Query'),
  templateId: string(name='TemplateId', description='This parameter is required.', example='4c892729-9950-4353-8146-33542b869e01', position='Query'),
  type?: string(name='Type', example='Web', position='Query'),
  variablesContent?: string(name='VariablesContent', position='Query'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='1731664463*****', position='Query'),
}

model CreateAppFromTemplateResponseBody = {
  data?: {
    appId?: string(name='AppId', example='172050620*****'),
    description?: string(name='Description'),
    gmtCreate?: string(name='GmtCreate', example='2024-03-26T10:22Z'),
    gmtModified?: string(name='GmtModified', example='2024-03-26T10:22Z'),
    icon?: string(name='Icon', example='-1'),
    name?: string(name='Name'),
    workspaceId?: string(name='WorkspaceId', example='1731664463*****'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request', example='36F552F7-E61E-556A-9957-8284318D1B9C'),
}

model CreateAppFromTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppFromTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAppFromTemplate  CreateAppFromTemplateRequest
  * @return CreateAppFromTemplateResponse
 */
async function createAppFromTemplate(request: CreateAppFromTemplateRequest): CreateAppFromTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppFromTemplate', 'POST', '/', 'json', false, 'json', request);
}

