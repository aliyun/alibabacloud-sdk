/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
@endpointMap = {
    ap-northeast-1 = 'dataworks.ap-northeast-1.aliyuncs.com',
    ap-south-1 = 'dataworks.ap-south-1.aliyuncs.com',
    ap-southeast-1 = 'dataworks.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'dataworks.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'dataworks.ap-southeast-3.aliyuncs.com',
    ap-southeast-5 = 'dataworks.ap-southeast-5.aliyuncs.com',
    cn-beijing = 'dataworks.cn-beijing.aliyuncs.com',
    cn-chengdu = 'dataworks.cn-chengdu.aliyuncs.com',
    cn-hangzhou = 'dataworks.cn-hangzhou.aliyuncs.com',
    cn-hongkong = 'dataworks.cn-hongkong.aliyuncs.com',
    cn-huhehaote = 'dataworks.aliyuncs.com',
    cn-qingdao = 'dataworks.aliyuncs.com',
    cn-shanghai = 'dataworks.cn-shanghai.aliyuncs.com',
    cn-shenzhen = 'dataworks.cn-shenzhen.aliyuncs.com',
    cn-zhangjiakou = 'dataworks.aliyuncs.com',
    eu-central-1 = 'dataworks.eu-central-1.aliyuncs.com',
    eu-west-1 = 'dataworks.eu-west-1.aliyuncs.com',
    me-east-1 = 'dataworks.me-east-1.aliyuncs.com',
    us-east-1 = 'dataworks.us-east-1.aliyuncs.com',
    us-west-1 = 'dataworks.us-west-1.aliyuncs.com',
    cn-hangzhou-finance = 'dataworks.aliyuncs.com',
    cn-shenzhen-finance-1 = 'dataworks.aliyuncs.com',
    cn-shanghai-finance-1 = 'dataworks.aliyuncs.com',
    cn-north-2-gov-1 = 'dataworks.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('dataworks-public', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CheckCallbackRequest {
  callbackResultString?: string(name='CallbackResultString'),
}

model CheckCallbackResponseBody = {
  returnCode?: string(name='ReturnCode'),
  returnValue?: boolean(name='ReturnValue'),
  requestId?: string(name='RequestId'),
}

model CheckCallbackResponse = {
  headers: map[string]string(name='headers'),
  body: CheckCallbackResponseBody(name='body'),
}

async function checkCallbackWithOptions(request: CheckCallbackRequest, runtime: Util.RuntimeOptions): CheckCallbackResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CheckCallback',
    version = '2018-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkCallback(request: CheckCallbackRequest): CheckCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkCallbackWithOptions(request, runtime);
}

model CreateManualDagRequest {
  projectName?: string(name='ProjectName'),
  flowName?: string(name='FlowName'),
  dagPara?: string(name='DagPara'),
  nodePara?: string(name='NodePara'),
  bizdate?: string(name='Bizdate'),
}

model CreateManualDagResponseBody = {
  returnErrorSolution?: string(name='ReturnErrorSolution'),
  returnCode?: string(name='ReturnCode'),
  requestId?: string(name='RequestId'),
  returnMessage?: string(name='ReturnMessage'),
  returnValue?: long(name='ReturnValue'),
}

model CreateManualDagResponse = {
  headers: map[string]string(name='headers'),
  body: CreateManualDagResponseBody(name='body'),
}

async function createManualDagWithOptions(request: CreateManualDagRequest, runtime: Util.RuntimeOptions): CreateManualDagResponse {
  Util.validateModel(request);
  var query = {};
  query["ProjectName"] = request.projectName;
  query["FlowName"] = request.flowName;
  query["DagPara"] = request.dagPara;
  query["NodePara"] = request.nodePara;
  query["Bizdate"] = request.bizdate;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateManualDag',
    version = '2018-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createManualDag(request: CreateManualDagRequest): CreateManualDagResponse {
  var runtime = new Util.RuntimeOptions{};
  return createManualDagWithOptions(request, runtime);
}

model CreateRealTimeProcessRequest {
  dataworksVersion?: string(name='DataworksVersion'),
  createResGroup?: boolean(name='CreateResGroup'),
  resourceSpec?: string(name='ResourceSpec'),
  dataSource?: string(name='DataSource'),
  tables?: string(name='Tables'),
  tableRule?: string(name='TableRule'),
  jobConfig?: string(name='JobConfig'),
}

model CreateRealTimeProcessResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    taskId?: string(name='TaskId'),
  }(name='Data'),
  code?: int32(name='Code'),
}

model CreateRealTimeProcessResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRealTimeProcessResponseBody(name='body'),
}

async function createRealTimeProcessWithOptions(request: CreateRealTimeProcessRequest, runtime: Util.RuntimeOptions): CreateRealTimeProcessResponse {
  Util.validateModel(request);
  var query = {};
  query["DataworksVersion"] = request.dataworksVersion;
  query["CreateResGroup"] = request.createResGroup;
  query["ResourceSpec"] = request.resourceSpec;
  query["DataSource"] = request.dataSource;
  query["Tables"] = request.tables;
  query["TableRule"] = request.tableRule;
  query["JobConfig"] = request.jobConfig;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateRealTimeProcess',
    version = '2018-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRealTimeProcess(request: CreateRealTimeProcessRequest): CreateRealTimeProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRealTimeProcessWithOptions(request, runtime);
}

model DeleteFileRequest {
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
  fileId?: long(name='FileId'),
}

model DeleteFileResponseBody = {
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model DeleteFileResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFileResponseBody(name='body'),
}

async function deleteFileWithOptions(request: DeleteFileRequest, runtime: Util.RuntimeOptions): DeleteFileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFile',
    version = '2018-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFile(request: DeleteFileRequest): DeleteFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFileWithOptions(request, runtime);
}

model DescribeEmrHiveTableRequest {
  clusterId?: string(name='ClusterId'),
  databaseName?: string(name='DatabaseName'),
  tableName?: string(name='TableName'),
}

model DescribeEmrHiveTableResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    tableName?: string(name='TableName'),
    owner?: string(name='Owner'),
    tableParameters?: string(name='TableParameters'),
    gmtModified?: string(name='GmtModified'),
    tableDesc?: string(name='TableDesc'),
    ownerId?: string(name='OwnerId'),
    columns?: [ 
      {
        columnName?: string(name='ColumnName'),
        columnComment?: string(name='ColumnComment'),
        comment?: string(name='Comment'),
        columnType?: string(name='ColumnType'),
        gmtCreate?: string(name='GmtCreate'),
        gmtModified?: string(name='GmtModified'),
        columnPosition?: int32(name='ColumnPosition'),
      }
    ](name='Columns'),
    tableSize?: long(name='TableSize'),
    databaseName?: string(name='DatabaseName'),
    isTemporary?: boolean(name='IsTemporary'),
    clusterBizName?: string(name='ClusterBizName'),
    isCompressed?: boolean(name='IsCompressed'),
    serializationLib?: string(name='SerializationLib'),
    lastAccessTime?: string(name='LastAccessTime'),
    tableComment?: string(name='TableComment'),
    lastModifyTime?: string(name='LastModifyTime'),
    gmtCreate?: string(name='GmtCreate'),
    outputFormat?: string(name='OutputFormat'),
    tableType?: string(name='TableType'),
    ownerType?: string(name='OwnerType'),
    partitionKeys?: string(name='PartitionKeys'),
    clusterBizId?: string(name='ClusterBizId'),
    location?: string(name='Location'),
    inputFormat?: string(name='InputFormat'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
}

model DescribeEmrHiveTableResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEmrHiveTableResponseBody(name='body'),
}

async function describeEmrHiveTableWithOptions(request: DescribeEmrHiveTableRequest, runtime: Util.RuntimeOptions): DescribeEmrHiveTableResponse {
  Util.validateModel(request);
  var query = {};
  query["ClusterId"] = request.clusterId;
  query["DatabaseName"] = request.databaseName;
  query["TableName"] = request.tableName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEmrHiveTable',
    version = '2018-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEmrHiveTable(request: DescribeEmrHiveTableRequest): DescribeEmrHiveTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEmrHiveTableWithOptions(request, runtime);
}

model ListEmrHiveAuditLogsRequest {
  clusterId?: string(name='ClusterId'),
  databaseName?: string(name='DatabaseName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  tableName?: string(name='TableName'),
  startTime?: int32(name='StartTime'),
  endTime?: int32(name='EndTime'),
}

model ListEmrHiveAuditLogsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    pagedData?: [ 
      {
        operation?: string(name='Operation'),
        eventTime?: long(name='EventTime'),
        groups?: [ string ](name='Groups'),
        database?: string(name='Database'),
        user?: string(name='User'),
        table?: string(name='Table'),
      }
    ](name='PagedData'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
}

model ListEmrHiveAuditLogsResponse = {
  headers: map[string]string(name='headers'),
  body: ListEmrHiveAuditLogsResponseBody(name='body'),
}

async function listEmrHiveAuditLogsWithOptions(request: ListEmrHiveAuditLogsRequest, runtime: Util.RuntimeOptions): ListEmrHiveAuditLogsResponse {
  Util.validateModel(request);
  var query = {};
  query["ClusterId"] = request.clusterId;
  query["DatabaseName"] = request.databaseName;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  query["TableName"] = request.tableName;
  query["StartTime"] = request.startTime;
  query["EndTime"] = request.endTime;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListEmrHiveAuditLogs',
    version = '2018-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEmrHiveAuditLogs(request: ListEmrHiveAuditLogsRequest): ListEmrHiveAuditLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEmrHiveAuditLogsWithOptions(request, runtime);
}

model ListEmrHiveDatabasesRequest {
  clusterId?: string(name='ClusterId'),
}

model ListEmrHiveDatabasesResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      status?: string(name='Status'),
      type?: string(name='Type'),
      owner?: string(name='Owner'),
      comment?: string(name='Comment'),
      gmtModified?: long(name='GmtModified'),
      ownerId?: string(name='OwnerId'),
      parameters?: string(name='Parameters'),
      region?: string(name='Region'),
      gmtCreate?: long(name='GmtCreate'),
      ownerType?: string(name='OwnerType'),
      name?: string(name='Name'),
      location?: string(name='Location'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
}

model ListEmrHiveDatabasesResponse = {
  headers: map[string]string(name='headers'),
  body: ListEmrHiveDatabasesResponseBody(name='body'),
}

async function listEmrHiveDatabasesWithOptions(request: ListEmrHiveDatabasesRequest, runtime: Util.RuntimeOptions): ListEmrHiveDatabasesResponse {
  Util.validateModel(request);
  var query = {};
  query["ClusterId"] = request.clusterId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListEmrHiveDatabases',
    version = '2018-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEmrHiveDatabases(request: ListEmrHiveDatabasesRequest): ListEmrHiveDatabasesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEmrHiveDatabasesWithOptions(request, runtime);
}

model ListEmrHiveTablesRequest {
  clusterId?: string(name='ClusterId'),
  databaseName?: string(name='DatabaseName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListEmrHiveTablesResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    pagedData?: [ 
      {
        tableName?: string(name='TableName'),
        owner?: string(name='Owner'),
        tableParameters?: string(name='TableParameters'),
        gmtModified?: string(name='GmtModified'),
        isCompressed?: boolean(name='IsCompressed'),
        tableDesc?: string(name='TableDesc'),
        serializationLib?: string(name='SerializationLib'),
        ownerId?: string(name='OwnerId'),
        lastAccessTime?: string(name='LastAccessTime'),
        tableComment?: string(name='TableComment'),
        lastModifyTime?: string(name='LastModifyTime'),
        databaseName?: string(name='DatabaseName'),
        isTemporary?: boolean(name='IsTemporary'),
        gmtCreate?: string(name='GmtCreate'),
        outputFormat?: string(name='OutputFormat'),
        tableType?: string(name='TableType'),
        ownerType?: string(name='OwnerType'),
        partitionKeys?: string(name='PartitionKeys'),
        clusterBizId?: string(name='ClusterBizId'),
        location?: string(name='Location'),
        clusterBizName?: string(name='ClusterBizName'),
        inputFormat?: string(name='InputFormat'),
      }
    ](name='PagedData'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
}

model ListEmrHiveTablesResponse = {
  headers: map[string]string(name='headers'),
  body: ListEmrHiveTablesResponseBody(name='body'),
}

async function listEmrHiveTablesWithOptions(request: ListEmrHiveTablesRequest, runtime: Util.RuntimeOptions): ListEmrHiveTablesResponse {
  Util.validateModel(request);
  var query = {};
  query["ClusterId"] = request.clusterId;
  query["DatabaseName"] = request.databaseName;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListEmrHiveTables',
    version = '2018-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEmrHiveTables(request: ListEmrHiveTablesRequest): ListEmrHiveTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEmrHiveTablesWithOptions(request, runtime);
}

model ListHiveColumnLineagesRequest {
  clusterId?: string(name='ClusterId'),
  databaseName?: string(name='DatabaseName'),
  tableName?: string(name='TableName'),
  columnName?: string(name='ColumnName'),
}

model ListHiveColumnLineagesResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    upstreamLineages?: [ 
      {
        columnName?: string(name='ColumnName'),
        directUpperTableNumber?: int32(name='DirectUpperTableNumber'),
        tableName?: string(name='TableName'),
        modifiedTime?: string(name='ModifiedTime'),
        createTime?: string(name='CreateTime'),
        directDownTableNumber?: int32(name='DirectDownTableNumber'),
        databaseName?: string(name='DatabaseName'),
        directDownColumnNumber?: int32(name='DirectDownColumnNumber'),
        directUpperColumnNumber?: int32(name='DirectUpperColumnNumber'),
        source?: string(name='Source'),
        clusterId?: string(name='ClusterId'),
      }
    ](name='UpstreamLineages'),
    downstreamLineages?: [ 
      {
        columnName?: string(name='ColumnName'),
        directUpperTableNumber?: int32(name='DirectUpperTableNumber'),
        tableName?: string(name='TableName'),
        modifiedTime?: string(name='ModifiedTime'),
        createTime?: string(name='CreateTime'),
        directDownTableNumber?: int32(name='DirectDownTableNumber'),
        databaseName?: string(name='DatabaseName'),
        directDownColumnNumber?: int32(name='DirectDownColumnNumber'),
        directUpperColumnNumber?: int32(name='DirectUpperColumnNumber'),
        source?: string(name='Source'),
        clusterId?: string(name='ClusterId'),
      }
    ](name='DownstreamLineages'),
    upstreamNumber?: int32(name='UpstreamNumber'),
    downstreamNumber?: int32(name='DownstreamNumber'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
}

model ListHiveColumnLineagesResponse = {
  headers: map[string]string(name='headers'),
  body: ListHiveColumnLineagesResponseBody(name='body'),
}

async function listHiveColumnLineagesWithOptions(request: ListHiveColumnLineagesRequest, runtime: Util.RuntimeOptions): ListHiveColumnLineagesResponse {
  Util.validateModel(request);
  var query = {};
  query["ClusterId"] = request.clusterId;
  query["DatabaseName"] = request.databaseName;
  query["TableName"] = request.tableName;
  query["ColumnName"] = request.columnName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListHiveColumnLineages',
    version = '2018-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHiveColumnLineages(request: ListHiveColumnLineagesRequest): ListHiveColumnLineagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHiveColumnLineagesWithOptions(request, runtime);
}

model ListHiveTableLineagesRequest {
  clusterId?: string(name='ClusterId'),
  databaseName?: string(name='DatabaseName'),
  tableName?: string(name='TableName'),
}

model ListHiveTableLineagesResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    upstreamLineages?: [ 
      {
        tableName?: string(name='TableName'),
        modifiedTime?: string(name='ModifiedTime'),
        queryText?: string(name='QueryText'),
        jobId?: string(name='JobId'),
        createTime?: string(name='CreateTime'),
        databaseName?: string(name='DatabaseName'),
        engine?: string(name='Engine'),
        source?: string(name='Source'),
        clusterId?: string(name='ClusterId'),
      }
    ](name='UpstreamLineages'),
    downstreamLineages?: [ 
      {
        tableName?: string(name='TableName'),
        modifiedTime?: string(name='ModifiedTime'),
        queryText?: string(name='QueryText'),
        jobId?: string(name='JobId'),
        createTime?: string(name='CreateTime'),
        databaseName?: string(name='DatabaseName'),
        engine?: string(name='Engine'),
        source?: string(name='Source'),
        clusterId?: string(name='ClusterId'),
      }
    ](name='DownstreamLineages'),
    upstreamNumber?: int32(name='UpstreamNumber'),
    downstreamNumber?: int32(name='DownstreamNumber'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
}

model ListHiveTableLineagesResponse = {
  headers: map[string]string(name='headers'),
  body: ListHiveTableLineagesResponseBody(name='body'),
}

async function listHiveTableLineagesWithOptions(request: ListHiveTableLineagesRequest, runtime: Util.RuntimeOptions): ListHiveTableLineagesResponse {
  Util.validateModel(request);
  var query = {};
  query["ClusterId"] = request.clusterId;
  query["DatabaseName"] = request.databaseName;
  query["TableName"] = request.tableName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListHiveTableLineages',
    version = '2018-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHiveTableLineages(request: ListHiveTableLineagesRequest): ListHiveTableLineagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHiveTableLineagesWithOptions(request, runtime);
}

model ListTablePartitionsRequest {
  clusterId?: string(name='ClusterId'),
  databaseName?: string(name='DatabaseName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  tableName?: string(name='TableName'),
  order?: string(name='Order'),
}

model ListTablePartitionsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    pagedData?: [ 
      {
        partitionPath?: string(name='PartitionPath'),
        partitionComment?: string(name='PartitionComment'),
        partitionName?: string(name='PartitionName'),
        gmtCreate?: long(name='GmtCreate'),
        partitionType?: string(name='PartitionType'),
        gmtModified?: long(name='GmtModified'),
        location?: string(name='Location'),
      }
    ](name='PagedData'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
}

model ListTablePartitionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTablePartitionsResponseBody(name='body'),
}

async function listTablePartitionsWithOptions(request: ListTablePartitionsRequest, runtime: Util.RuntimeOptions): ListTablePartitionsResponse {
  Util.validateModel(request);
  var query = {};
  query["ClusterId"] = request.clusterId;
  query["DatabaseName"] = request.databaseName;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  query["TableName"] = request.tableName;
  query["Order"] = request.order;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListTablePartitions',
    version = '2018-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTablePartitions(request: ListTablePartitionsRequest): ListTablePartitionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTablePartitionsWithOptions(request, runtime);
}

model OpenDataWorksStandardServiceRequest {
  region?: string(name='Region'),
}

model OpenDataWorksStandardServiceResponseBody = {
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model OpenDataWorksStandardServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenDataWorksStandardServiceResponseBody(name='body'),
}

async function openDataWorksStandardServiceWithOptions(request: OpenDataWorksStandardServiceRequest, runtime: Util.RuntimeOptions): OpenDataWorksStandardServiceResponse {
  Util.validateModel(request);
  var query = {};
  query["Region"] = request.region;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'OpenDataWorksStandardService',
    version = '2018-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openDataWorksStandardService(request: OpenDataWorksStandardServiceRequest): OpenDataWorksStandardServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openDataWorksStandardServiceWithOptions(request, runtime);
}

model QueryRealTimeProcessStatusRequest {
  taskId?: string(name='TaskId'),
}

model QueryRealTimeProcessStatusResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    status?: string(name='Status'),
    message?: string(name='Message'),
    taskId?: string(name='TaskId'),
    taskUrl?: string(name='TaskUrl'),
  }(name='Data'),
  code?: int32(name='Code'),
}

model QueryRealTimeProcessStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRealTimeProcessStatusResponseBody(name='body'),
}

async function queryRealTimeProcessStatusWithOptions(request: QueryRealTimeProcessStatusRequest, runtime: Util.RuntimeOptions): QueryRealTimeProcessStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["TaskId"] = request.taskId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryRealTimeProcessStatus',
    version = '2018-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRealTimeProcessStatus(request: QueryRealTimeProcessStatusRequest): QueryRealTimeProcessStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRealTimeProcessStatusWithOptions(request, runtime);
}

model SearchManualDagNodeInstanceRequest {
  projectName?: string(name='ProjectName'),
  dagId?: long(name='DagId'),
}

model SearchManualDagNodeInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  errMsg?: string(name='ErrMsg'),
  data?: {
    nodeInsInfo?: [ 
    {
      status?: int32(name='Status'),
      beginRunningTime?: string(name='BeginRunningTime'),
      finishTime?: string(name='FinishTime'),
      createTime?: string(name='CreateTime'),
      paraValue?: string(name='ParaValue'),
      dagId?: long(name='DagId'),
      instanceId?: long(name='InstanceId'),
      beginWaitResTime?: string(name='BeginWaitResTime'),
      dagType?: int32(name='DagType'),
      bizdate?: string(name='Bizdate'),
      nodeName?: string(name='NodeName'),
      beginWaitTimeTime?: string(name='BeginWaitTimeTime'),
      modifyTime?: string(name='ModifyTime'),
    }
  ](name='NodeInsInfo')
  }(name='Data'),
  success?: boolean(name='Success'),
  errCode?: string(name='ErrCode'),
}

model SearchManualDagNodeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: SearchManualDagNodeInstanceResponseBody(name='body'),
}

async function searchManualDagNodeInstanceWithOptions(request: SearchManualDagNodeInstanceRequest, runtime: Util.RuntimeOptions): SearchManualDagNodeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  query["ProjectName"] = request.projectName;
  query["DagId"] = request.dagId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'SearchManualDagNodeInstance',
    version = '2018-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchManualDagNodeInstance(request: SearchManualDagNodeInstanceRequest): SearchManualDagNodeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchManualDagNodeInstanceWithOptions(request, runtime);
}

model SendTaskMetaCallbackRequest {
  tenantId?: long(name='TenantId'),
  type?: string(name='Type'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  user?: string(name='User'),
  code?: string(name='Code'),
  connectionInfo?: string(name='ConnectionInfo'),
  taskEnvParam?: string(name='TaskEnvParam'),
  subType?: string(name='SubType'),
  resources?: [ string ](name='Resources'),
}

model SendTaskMetaCallbackResponseBody = {
  requestId?: string(name='RequestId'),
  errMsg?: string(name='ErrMsg'),
  data?: string(name='Data'),
  errorCode?: long(name='ErrorCode'),
}

model SendTaskMetaCallbackResponse = {
  headers: map[string]string(name='headers'),
  body: SendTaskMetaCallbackResponseBody(name='body'),
}

async function sendTaskMetaCallbackWithOptions(request: SendTaskMetaCallbackRequest, runtime: Util.RuntimeOptions): SendTaskMetaCallbackResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'SendTaskMetaCallback',
    version = '2018-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendTaskMetaCallback(request: SendTaskMetaCallbackRequest): SendTaskMetaCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendTaskMetaCallbackWithOptions(request, runtime);
}

