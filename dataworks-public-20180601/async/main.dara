/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'dataworks-public';
  @version = '2018-06-01';
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-1' = 'dataworks.ap-northeast-1.aliyuncs.com',
    'ap-south-1' = 'dataworks.ap-south-1.aliyuncs.com',
    'ap-southeast-1' = 'dataworks.ap-southeast-1.aliyuncs.com',
    'ap-southeast-2' = 'dataworks.ap-southeast-2.aliyuncs.com',
    'ap-southeast-3' = 'dataworks.ap-southeast-3.aliyuncs.com',
    'ap-southeast-5' = 'dataworks.ap-southeast-5.aliyuncs.com',
    'cn-beijing' = 'dataworks.cn-beijing.aliyuncs.com',
    'cn-chengdu' = 'dataworks.cn-chengdu.aliyuncs.com',
    'cn-hangzhou' = 'dataworks.cn-hangzhou.aliyuncs.com',
    'cn-hongkong' = 'dataworks.cn-hongkong.aliyuncs.com',
    'cn-huhehaote' = 'dataworks.aliyuncs.com',
    'cn-qingdao' = 'dataworks.aliyuncs.com',
    'cn-shanghai' = 'dataworks.cn-shanghai.aliyuncs.com',
    'cn-shenzhen' = 'dataworks.cn-shenzhen.aliyuncs.com',
    'cn-zhangjiakou' = 'dataworks.aliyuncs.com',
    'eu-central-1' = 'dataworks.eu-central-1.aliyuncs.com',
    'eu-west-1' = 'dataworks.eu-west-1.aliyuncs.com',
    'me-east-1' = 'dataworks.me-east-1.aliyuncs.com',
    'us-east-1' = 'dataworks.us-east-1.aliyuncs.com',
    'us-west-1' = 'dataworks.us-west-1.aliyuncs.com',
    'cn-hangzhou-finance' = 'dataworks.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'dataworks.aliyuncs.com',
    'cn-shanghai-finance-1' = 'dataworks.aliyuncs.com',
    'cn-north-2-gov-1' = 'dataworks.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CreateManualDagRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Host'),
  bizdate: string(name='Bizdate', description='This parameter is required.', example='2018-12-12 00:00:00', position='Query'),
  dagPara?: string(name='DagPara', example='param_k1=param_v1 param_k2=param_v2', position='Query'),
  flowName: string(name='FlowName', description='This parameter is required.', example='test_flow', position='Query'),
  nodePara?: string(name='NodePara', example='{"103180025": "test=$[yyyy-mm-dd]"}', position='Query'),
  projectName: string(name='ProjectName', description='This parameter is required.', example='test_project', position='Query'),
}

model CreateManualDagResponseBody = {
  requestId?: string(name='RequestId', example='2d9ce-38ef-4923-baf6-391a7e656'),
  returnCode?: string(name='ReturnCode', example='0'),
  returnErrorSolution?: string(name='ReturnErrorSolution', example='test'),
  returnMessage?: string(name='ReturnMessage', example='test'),
  returnValue?: long(name='ReturnValue', example='1244311235'),
}

model CreateManualDagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateManualDagResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateManualDag  CreateManualDagRequest
  * @return CreateManualDagResponse
 */
async function createManualDag(request: CreateManualDagRequest): CreateManualDagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateManualDag', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFileRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  fileId: long(name='FileId', description='This parameter is required.', position='Body'),
  projectId?: long(name='ProjectId', position='Body'),
  projectIdentifier?: string(name='ProjectIdentifier', position='Body'),
}

model DeleteFileResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteFile  DeleteFileRequest
  * @return DeleteFileResponse
 */
async function deleteFile(request: DeleteFileRequest): DeleteFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFile', 'POST', '/', 'json', true, 'form', request);
}

model DescribeEmrHiveTableRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Host'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='C-D033DD5FB82436A6', position='Query'),
  databaseName: string(name='DatabaseName', description='This parameter is required.', example='default', position='Query'),
  tableName?: string(name='TableName', example='pt_table_090901_emr', position='Query'),
}

model DescribeEmrHiveTableResponseBody = {
  data?: {
    clusterBizId?: string(name='ClusterBizId', example='C-D033DD5FB82436A6'),
    clusterBizName?: string(name='ClusterBizName'),
    columns?: [ 
      {
        columnComment?: string(name='ColumnComment', example='BALANCE FIELD'),
        columnName?: string(name='ColumnName', example='double'),
        columnPosition?: int32(name='ColumnPosition', example='1'),
        columnType?: string(name='ColumnType', example='double'),
        comment?: string(name='Comment', example='BALANCE FIELD'),
        gmtCreate?: string(name='GmtCreate', example='2019-09-09 20:23:47'),
        gmtModified?: string(name='GmtModified', example='2019-09-09 20:23:47'),
      }
    ](name='Columns'),
    databaseName?: string(name='DatabaseName', example='default'),
    gmtCreate?: string(name='GmtCreate', example='2019-09-09 20:41:28'),
    gmtModified?: string(name='GmtModified', example='2019-09-09 20:41:28'),
    inputFormat?: string(name='InputFormat', example='org.apache.hadoop.mapred.TextInputFormat'),
    isCompressed?: boolean(name='IsCompressed', example='false'),
    isTemporary?: boolean(name='IsTemporary', example='false'),
    lastAccessTime?: string(name='LastAccessTime', example='1970-01-01 08:00:00'),
    lastModifyTime?: string(name='LastModifyTime', example='2019-09-09 20:23:47'),
    location?: string(name='Location', example='hdfs://emr-header-1.cluster-136574:9000/user/hive/warehouse/pt_table_090901_emr'),
    outputFormat?: string(name='OutputFormat', example='org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'),
    owner?: string(name='Owner', example='root'),
    ownerId?: string(name='OwnerId', example='1861276710322536'),
    ownerType?: string(name='OwnerType', example='USER'),
    partitionKeys?: string(name='PartitionKeys', example='DS,HR,REGION'),
    serializationLib?: string(name='SerializationLib', example='org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'),
    tableComment?: string(name='TableComment', example='RANDOM GENERATED TEST DATA BY FUNCTION OF RANDOM_TEST_DATA'),
    tableDesc?: string(name='TableDesc', example='RANDOM GENERATED TEST DATA BY FUNCTION OF RANDOM_TEST_DATA'),
    tableName?: string(name='TableName', example='pt_table_090901_emr'),
    tableParameters?: string(name='TableParameters', example='{\\"transient_lastDdlTime\\":\\"1568031823\\",\\"bucketing_version\\":\\"2\\",\\"comment\\":\\"RANDOM GENERATED TEST DATA BY FUNCTION OF RANDOM_TEST_DATA\\"}'),
    tableSize?: long(name='TableSize', example='552'),
    tableType?: string(name='TableType', example='MANAGED_TABLE'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='0'),
  errorMessage?: string(name='ErrorMessage', example='test'),
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD8-4870-A6A0'),
}

model DescribeEmrHiveTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEmrHiveTableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeEmrHiveTable  DescribeEmrHiveTableRequest
  * @return DescribeEmrHiveTableResponse
 */
async function describeEmrHiveTable(request: DescribeEmrHiveTableRequest): DescribeEmrHiveTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEmrHiveTable', 'POST', '/', 'json', false, 'json', request);
}

model GetDataServiceApiAuthMapContextRequest {
  regionId?: string(name='RegionId', position='Host'),
  apiId?: long(name='ApiId', description='API ID', example='1', position='Query'),
  apiPath?: string(name='ApiPath', example='/apiPath', position='Query'),
  projectId?: long(name='ProjectId', example='1', position='Query'),
  verbose?: boolean(name='Verbose', example='true', position='Query'),
}

model GetDataServiceApiAuthMapContextResponseBody = {
  data?: string(name='Data', example='{}'),
  errCode?: string(name='ErrCode', example='0'),
  errMsg?: string(name='ErrMsg', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='123-abc'),
}

model GetDataServiceApiAuthMapContextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataServiceApiAuthMapContextResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataServiceApiAuthMapContext  GetDataServiceApiAuthMapContextRequest
  * @return GetDataServiceApiAuthMapContextResponse
 */
async function getDataServiceApiAuthMapContext(request: GetDataServiceApiAuthMapContextRequest): GetDataServiceApiAuthMapContextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataServiceApiAuthMapContext', 'GET', '/', 'json', false, 'json', request);
}

model GetDataServiceApiContextRequest {
  regionId?: string(name='RegionId', position='Host'),
  apiId: long(name='ApiId', description='apiId

This parameter is required.', example='12345', minimum=0, position='Query'),
  apiStatus?: int32(name='ApiStatus', example='1', position='Query'),
  cacheKey?: string(name='CacheKey', example='abc-124', position='Query'),
  forPrivateResGroup?: boolean(name='ForPrivateResGroup', example='true', position='Query'),
  verbose?: boolean(name='Verbose', example='true', position='Query'),
}

model GetDataServiceApiContextResponseBody = {
  data?: string(name='Data', example='{"apiId":123}'),
  errCode?: string(name='ErrCode', example='0'),
  errMsg?: string(name='ErrMsg', example='success'),
  requestId?: string(name='RequestId', example='1AFAE64E-D1BE-432B-A9****'),
}

model GetDataServiceApiContextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataServiceApiContextResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataServiceApiContext  GetDataServiceApiContextRequest
  * @return GetDataServiceApiContextResponse
 */
async function getDataServiceApiContext(request: GetDataServiceApiContextRequest): GetDataServiceApiContextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataServiceApiContext', 'GET', '/', 'json', false, 'json', request);
}

model GetDataServiceConnectionRequest {
  regionId?: string(name='RegionId', position='Host'),
  connectionId?: long(name='ConnectionId', example='1', position='Query'),
  dataSourceType?: string(name='DataSourceType', example='normal', position='Query'),
}

model GetDataServiceConnectionResponseBody = {
  data?: string(name='Data', example='{}'),
  errCode?: string(name='ErrCode', example='0'),
  errMsg?: string(name='ErrMsg', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='123-abc'),
}

model GetDataServiceConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataServiceConnectionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataServiceConnection  GetDataServiceConnectionRequest
  * @return GetDataServiceConnectionResponse
 */
async function getDataServiceConnection(request: GetDataServiceConnectionRequest): GetDataServiceConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataServiceConnection', 'GET', '/', 'json', false, 'json', request);
}

model GetDataServiceContextUpdateEventRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model GetDataServiceContextUpdateEventResponseBody = {
  data?: string(name='Data', example='{\\"TotalCount\\": 0, \\"CalcEngines\\": []}'),
  errCode?: string(name='ErrCode', example='0'),
  errMsg?: string(name='ErrMsg', example='success'),
  requestId?: string(name='RequestId', example='8754EE08-4AA2-5F77-ADD7-754DBBDA9F75'),
}

model GetDataServiceContextUpdateEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataServiceContextUpdateEventResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataServiceContextUpdateEvent  GetDataServiceContextUpdateEventRequest
  * @return GetDataServiceContextUpdateEventResponse
 */
async function getDataServiceContextUpdateEvent(request: GetDataServiceContextUpdateEventRequest): GetDataServiceContextUpdateEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataServiceContextUpdateEvent', 'GET', '/', 'json', false, 'json', request);
}

model GetDataServiceFunctionRequest {
  regionId?: string(name='RegionId', position='Host'),
  functionId?: long(name='FunctionId', position='Query'),
}

model GetDataServiceFunctionResponseBody = {
  data?: string(name='Data', description='Id of the request'),
  errCode?: string(name='ErrCode'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
}

model GetDataServiceFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataServiceFunctionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataServiceFunction  GetDataServiceFunctionRequest
  * @return GetDataServiceFunctionResponse
 */
async function getDataServiceFunction(request: GetDataServiceFunctionRequest): GetDataServiceFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataServiceFunction', 'GET', '/', 'json', false, 'json', request);
}

model GetSwitchValueRequest {
  regionId?: string(name='RegionId', position='Host'),
  switchName?: string(name='SwitchName', position='Query'),
}

model GetSwitchValueResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetSwitchValueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSwitchValueResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSwitchValue  GetSwitchValueRequest
  * @return GetSwitchValueResponse
 */
async function getSwitchValue(request: GetSwitchValueRequest): GetSwitchValueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSwitchValue', 'POST', '/', 'json', false, 'json', request);
}

model GetTimeMachineTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  taskId?: string(name='TaskId', position='Query'),
}

model GetTimeMachineTaskResponseBody = {
  data?: {
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    hostName?: string(name='HostName'),
    id?: string(name='Id'),
    objId?: string(name='ObjId'),
    objName?: string(name='ObjName'),
    operType?: string(name='OperType'),
    status?: string(name='Status'),
  }(name='Data'),
  errCode?: string(name='ErrCode'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
}

model GetTimeMachineTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTimeMachineTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTimeMachineTask  GetTimeMachineTaskRequest
  * @return GetTimeMachineTaskResponse
 */
async function getTimeMachineTask(request: GetTimeMachineTaskRequest): GetTimeMachineTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTimeMachineTask', 'POST', '/', 'json', false, 'json', request);
}

model ListEmrHiveAuditLogsRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Host'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='C-D033DD5FB82436A6', position='Query'),
  databaseName: string(name='DatabaseName', description='This parameter is required.', example='default', position='Query'),
  endTime?: int32(name='EndTime', example='1586509710', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='2', minimum=1, position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='2', minimum=1, maximum=100, position='Query'),
  startTime?: int32(name='StartTime', example='1586509407', position='Query'),
  tableName: string(name='TableName', description='This parameter is required.', example='test_table', position='Query'),
}

model ListEmrHiveAuditLogsResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', example='2'),
    pageSize?: int32(name='PageSize', example='2'),
    pagedData?: [ 
      {
        database?: string(name='Database', example='default'),
        eventTime?: long(name='EventTime', example='1564019679506'),
        groups?: [ string ](name='Groups'),
        operation?: string(name='Operation', example='CREATE_TABLE'),
        table?: string(name='Table', example='test_table'),
        user?: string(name='User', example='root'),
      }
    ](name='PagedData'),
    totalCount?: int32(name='TotalCount', example='5'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='0'),
  errorMessage?: string(name='ErrorMessage', example='success'),
  requestId?: string(name='RequestId', example='58D5334A-B013-430E'),
}

model ListEmrHiveAuditLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEmrHiveAuditLogsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEmrHiveAuditLogs  ListEmrHiveAuditLogsRequest
  * @return ListEmrHiveAuditLogsResponse
 */
async function listEmrHiveAuditLogs(request: ListEmrHiveAuditLogsRequest): ListEmrHiveAuditLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEmrHiveAuditLogs', 'POST', '/', 'json', false, 'json', request);
}

model ListEmrHiveDatabasesRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Host'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='C-D033DD5FB82436A6', position='Query'),
}

model ListEmrHiveDatabasesResponseBody = {
  data?: [ 
    {
      comment?: string(name='Comment', example='Default Hive database'),
      gmtCreate?: long(name='GmtCreate', example='1568010630000'),
      gmtModified?: long(name='GmtModified', example='1568010630000'),
      location?: string(name='Location', example='hdfs://emr-header-1.cluster-136574:9000/user/hive/warehouse'),
      name?: string(name='Name', example='default'),
      owner?: string(name='Owner', example='public'),
      ownerId?: string(name='OwnerId', example='18612767'),
      ownerType?: string(name='OwnerType', example='ROLE'),
      parameters?: string(name='Parameters', example='{}'),
      region?: string(name='Region', example='cn-shanghai'),
      status?: string(name='Status', example='-'),
      type?: string(name='Type', example='HIVE'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='0'),
  errorMessage?: string(name='ErrorMessage', example='test'),
  requestId?: string(name='RequestId', example='D9A61DC0-B922-421B-B706'),
}

model ListEmrHiveDatabasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEmrHiveDatabasesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEmrHiveDatabases  ListEmrHiveDatabasesRequest
  * @return ListEmrHiveDatabasesResponse
 */
async function listEmrHiveDatabases(request: ListEmrHiveDatabasesRequest): ListEmrHiveDatabasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEmrHiveDatabases', 'POST', '/', 'json', false, 'json', request);
}

model ListEmrHiveTablesRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Host'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='C-D033DD5FB82436A6', position='Query'),
  databaseName: string(name='DatabaseName', description='This parameter is required.', example='default', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='2', minimum=1, position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='2', minimum=1, maximum=100, position='Query'),
}

model ListEmrHiveTablesResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', example='2'),
    pageSize?: int32(name='PageSize', example='2'),
    pagedData?: [ 
      {
        clusterBizId?: string(name='ClusterBizId', example='C-D033DD5FB82436A6'),
        clusterBizName?: string(name='ClusterBizName'),
        databaseName?: string(name='DatabaseName', example='default'),
        gmtCreate?: string(name='GmtCreate', example='2019-09-09 20:23:47'),
        gmtModified?: string(name='GmtModified', example='2019-09-09 20:23:47'),
        inputFormat?: string(name='InputFormat', example='org.apache.hadoop.hive.ql.io.orc.OrcInputFormat'),
        isCompressed?: boolean(name='IsCompressed', example='false'),
        isTemporary?: boolean(name='IsTemporary', example='false'),
        lastAccessTime?: string(name='LastAccessTime', example='1970-01-01 08:00:00'),
        lastModifyTime?: string(name='LastModifyTime', example='2019-09-09 20:23:47'),
        location?: string(name='Location', example='hdfs://emr-header-1.cluster-136574:9000/user/hive/warehouse/pt_table_090901_emr'),
        outputFormat?: string(name='OutputFormat', example='org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'),
        owner?: string(name='Owner', example='root'),
        ownerId?: string(name='OwnerId', example='18612767103****'),
        ownerType?: string(name='OwnerType', example='ROLE'),
        partitionKeys?: string(name='PartitionKeys', example='DS,HR,REGION'),
        serializationLib?: string(name='SerializationLib', example='org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'),
        tableComment?: string(name='TableComment', example='RANDOM GENERATED TEST DATA BY FUNCTION OF RANDOM_TEST_DATA'),
        tableDesc?: string(name='TableDesc', example='RANDOM GENERATED TEST DATA BY FUNCTION OF RANDOM_TEST_DATA'),
        tableName?: string(name='TableName', example='pt_table_090901_emr_orc'),
        tableParameters?: string(name='TableParameters', example='{\\"transient_lastDdlTime\\":\\"1568031823\\",\\"bucketing_version\\":\\"2\\",\\"comment\\":\\"RANDOM GENERATED TEST DATA BY FUNCTION OF RANDOM_TEST_DATA\\"}'),
        tableType?: string(name='TableType', example='MANAGED_TABLE'),
      }
    ](name='PagedData'),
    totalCount?: int32(name='TotalCount', example='5'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='0'),
  errorMessage?: string(name='ErrorMessage', example='test'),
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD8-4870-A6A0'),
}

model ListEmrHiveTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEmrHiveTablesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEmrHiveTables  ListEmrHiveTablesRequest
  * @return ListEmrHiveTablesResponse
 */
async function listEmrHiveTables(request: ListEmrHiveTablesRequest): ListEmrHiveTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEmrHiveTables', 'POST', '/', 'json', false, 'json', request);
}

model ListGovernanceIssueDataServiceAPIsRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizDate?: string(name='BizDate', position='Body'),
  ownerId?: string(name='OwnerId', position='Body'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=500, position='Body'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Body'),
  projectId: long(name='ProjectId', description='This parameter is required.', position='Body'),
  ruleCategory: string(name='RuleCategory', description='This parameter is required.', position='Body'),
  ruleId?: string(name='RuleId', position='Body'),
}

model ListGovernanceIssueDataServiceAPIsResponseBody = {
  data?: {
    APIs?: [ 
      {
        apiId?: string(name='ApiId'),
        apiName?: string(name='ApiName'),
        bizDate?: string(name='BizDate'),
        ownerId?: string(name='OwnerId'),
        projectId?: long(name='ProjectId'),
        properties?: string(name='Properties'),
        ruleCategory?: string(name='RuleCategory'),
        ruleId?: string(name='RuleId'),
      }
    ](name='APIs'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  dynamicErrorCode?: string(name='DynamicErrorCode'),
  dynamicErrorMessage?: string(name='DynamicErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListGovernanceIssueDataServiceAPIsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGovernanceIssueDataServiceAPIsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListGovernanceIssueDataServiceAPIs  ListGovernanceIssueDataServiceAPIsRequest
  * @return ListGovernanceIssueDataServiceAPIsResponse
 */
async function listGovernanceIssueDataServiceAPIs(request: ListGovernanceIssueDataServiceAPIsRequest): ListGovernanceIssueDataServiceAPIsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGovernanceIssueDataServiceAPIs', 'POST', '/', 'json', true, 'form', request);
}

model ListGovernanceIssueTablesRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizDate?: string(name='BizDate', position='Body'),
  ownerId?: string(name='OwnerId', position='Body'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=500, position='Body'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Body'),
  projectId: long(name='ProjectId', description='This parameter is required.', position='Body'),
  ruleCategory: string(name='RuleCategory', description='This parameter is required.', position='Body'),
  ruleId?: string(name='RuleId', position='Body'),
}

model ListGovernanceIssueTablesResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    tables?: [ 
      {
        bizDate?: string(name='BizDate'),
        clusterId?: string(name='ClusterId'),
        createTime?: long(name='CreateTime'),
        databaseName?: string(name='DatabaseName'),
        datasourceType?: string(name='DatasourceType'),
        downstreamDependencyCount?: int32(name='DownstreamDependencyCount'),
        lastAccessTime?: long(name='LastAccessTime'),
        lifeCycle?: long(name='LifeCycle'),
        mcProjectName?: string(name='McProjectName'),
        ownerId?: string(name='OwnerId'),
        projectId?: long(name='ProjectId'),
        properties?: string(name='Properties'),
        ruleCategory?: string(name='RuleCategory'),
        ruleId?: string(name='RuleId'),
        schema?: string(name='Schema'),
        tableGuid?: string(name='TableGuid'),
        tableName?: string(name='TableName'),
        tableSize?: long(name='TableSize'),
      }
    ](name='Tables'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  dynamicErrorCode?: string(name='DynamicErrorCode'),
  dynamicErrorMessage?: string(name='DynamicErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListGovernanceIssueTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGovernanceIssueTablesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListGovernanceIssueTables  ListGovernanceIssueTablesRequest
  * @return ListGovernanceIssueTablesResponse
 */
async function listGovernanceIssueTables(request: ListGovernanceIssueTablesRequest): ListGovernanceIssueTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGovernanceIssueTables', 'POST', '/', 'json', true, 'form', request);
}

model ListGovernanceIssueTasksRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizDate?: string(name='BizDate', position='Body'),
  ownerId?: string(name='OwnerId', position='Body'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=500, position='Body'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Body'),
  projectId: long(name='ProjectId', description='This parameter is required.', position='Body'),
  ruleCategory: string(name='RuleCategory', description='This parameter is required.', position='Body'),
  ruleId?: string(name='RuleId', position='Body'),
}

model ListGovernanceIssueTasksResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    tasks?: [ 
      {
        bizDate?: string(name='BizDate'),
        nodeId?: long(name='NodeId'),
        nodeName?: string(name='NodeName'),
        nodeType?: string(name='NodeType'),
        ownerId?: string(name='OwnerId'),
        projectId?: long(name='ProjectId'),
        properties?: string(name='Properties'),
        ruleCategory?: string(name='RuleCategory'),
        ruleId?: string(name='RuleId'),
      }
    ](name='Tasks'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  dynamicErrorCode?: string(name='DynamicErrorCode'),
  dynamicErrorMessage?: string(name='DynamicErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListGovernanceIssueTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGovernanceIssueTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListGovernanceIssueTasks  ListGovernanceIssueTasksRequest
  * @return ListGovernanceIssueTasksResponse
 */
async function listGovernanceIssueTasks(request: ListGovernanceIssueTasksRequest): ListGovernanceIssueTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGovernanceIssueTasks', 'POST', '/', 'json', true, 'form', request);
}

model ListGovernanceRulesRequest {
  regionId?: string(name='RegionId', position='Host'),
  category?: string(name='Category', position='Body'),
  issueType?: string(name='IssueType', position='Body'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=500, position='Body'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Body'),
}

model ListGovernanceRulesResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    rules?: [ 
      {
        category?: string(name='Category'),
        description?: string(name='Description'),
        guide?: string(name='Guide'),
        id?: string(name='Id'),
        issueType?: string(name='IssueType'),
        name?: string(name='Name'),
        note?: string(name='Note'),
        rule?: string(name='Rule'),
      }
    ](name='Rules'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  dynamicErrorCode?: string(name='DynamicErrorCode'),
  dynamicErrorMessage?: string(name='DynamicErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListGovernanceRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGovernanceRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListGovernanceRules  ListGovernanceRulesRequest
  * @return ListGovernanceRulesResponse
 */
async function listGovernanceRules(request: ListGovernanceRulesRequest): ListGovernanceRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGovernanceRules', 'POST', '/', 'json', true, 'form', request);
}

model ListHiveColumnLineagesRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Host'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='C-D033DD5FB82436A6', position='Query'),
  columnName: string(name='ColumnName', description='This parameter is required.', example='balance', position='Query'),
  databaseName: string(name='DatabaseName', description='This parameter is required.', example='default', position='Query'),
  tableName: string(name='TableName', description='This parameter is required.', example='test_table', position='Query'),
}

model ListHiveColumnLineagesResponseBody = {
  data?: {
    downstreamLineages?: [ 
      {
        clusterId?: string(name='ClusterId', example='C-D033DD5FB82436A6'),
        columnName?: string(name='ColumnName', example='balance'),
        createTime?: string(name='CreateTime', example='2019-11-10 11:33:52'),
        databaseName?: string(name='DatabaseName', example='default'),
        directDownColumnNumber?: int32(name='DirectDownColumnNumber', example='0'),
        directDownTableNumber?: int32(name='DirectDownTableNumber', example='0'),
        directUpperColumnNumber?: int32(name='DirectUpperColumnNumber', example='1'),
        directUpperTableNumber?: int32(name='DirectUpperTableNumber', example='1'),
        modifiedTime?: string(name='ModifiedTime', example='2019-11-10 11:33:52'),
        source?: string(name='Source', example='HIVE'),
        tableName?: string(name='TableName', example='pt_table_090901_emr_child'),
      }
    ](name='DownstreamLineages'),
    downstreamNumber?: int32(name='DownstreamNumber', example='3'),
    upstreamLineages?: [ 
      {
        clusterId?: string(name='ClusterId', example='C-D033DD5FB82436A6'),
        columnName?: string(name='ColumnName', example='balance'),
        createTime?: string(name='CreateTime', example='2019-11-10 11:33:51'),
        databaseName?: string(name='DatabaseName', example='default'),
        directDownColumnNumber?: int32(name='DirectDownColumnNumber', example='1'),
        directDownTableNumber?: int32(name='DirectDownTableNumber', example='0'),
        directUpperColumnNumber?: int32(name='DirectUpperColumnNumber', example='2'),
        directUpperTableNumber?: int32(name='DirectUpperTableNumber', example='1'),
        modifiedTime?: string(name='ModifiedTime', example='2019-11-10 11:33:51'),
        source?: string(name='Source', example='HIVE'),
        tableName?: string(name='TableName', example='pt_table_090901_emr_child'),
      }
    ](name='UpstreamLineages'),
    upstreamNumber?: int32(name='UpstreamNumber', example='0'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='0'),
  errorMessage?: string(name='ErrorMessage', example='success'),
  requestId?: string(name='RequestId', example='58D5334A-B013-430E'),
}

model ListHiveColumnLineagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHiveColumnLineagesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListHiveColumnLineages  ListHiveColumnLineagesRequest
  * @return ListHiveColumnLineagesResponse
 */
async function listHiveColumnLineages(request: ListHiveColumnLineagesRequest): ListHiveColumnLineagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHiveColumnLineages', 'POST', '/', 'json', false, 'json', request);
}

model ListHiveTableLineagesRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Host'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='C-D033DD5FB82436A6', position='Query'),
  databaseName: string(name='DatabaseName', description='This parameter is required.', example='default', position='Query'),
  tableName: string(name='TableName', description='This parameter is required.', example='pt_table_090901_emr', position='Query'),
}

model ListHiveTableLineagesResponseBody = {
  data?: {
    downstreamLineages?: [ 
      {
        clusterId?: string(name='ClusterId', example='C-D033DD5FB82436A6'),
        createTime?: string(name='CreateTime', example='2020-01-09 18:16:15'),
        databaseName?: string(name='DatabaseName', example='default'),
        engine?: string(name='Engine', example='mr'),
        jobId?: string(name='JobId', example='job_1234567055_0006'),
        modifiedTime?: string(name='ModifiedTime', example='2020-01-09 18:16:37'),
        queryText?: string(name='QueryText', example='create table parquet_example_0407 select id as one,name as two,salary as three  from PTtable_0407_emr'),
        source?: string(name='Source', example='HIVE'),
        tableName?: string(name='TableName', example='pt_table_090901_emr_orc'),
      }
    ](name='DownstreamLineages'),
    downstreamNumber?: int32(name='DownstreamNumber', example='3'),
    upstreamLineages?: [ 
      {
        clusterId?: string(name='ClusterId', example='C-D033DD5FB82436A6'),
        createTime?: string(name='CreateTime', example='2020-01-09 18:16:15'),
        databaseName?: string(name='DatabaseName', example='default'),
        engine?: string(name='Engine', example='mr'),
        jobId?: string(name='JobId', example='job_1234567055_0006'),
        modifiedTime?: string(name='ModifiedTime', example='2020-01-09 18:16:37'),
        queryText?: string(name='QueryText', example='create table parquet_example_0407 select id as one,name as two,salary as three  from PTtable_0407_emr'),
        source?: string(name='Source', example='HIVE'),
        tableName?: string(name='TableName', example='pt_table_090901_emr_orc'),
      }
    ](name='UpstreamLineages'),
    upstreamNumber?: int32(name='UpstreamNumber', example='0'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='0'),
  errorMessage?: string(name='ErrorMessage', example='test'),
  requestId?: string(name='RequestId', example='691CA452-D37A-4ED0-9441'),
}

model ListHiveTableLineagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHiveTableLineagesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListHiveTableLineages  ListHiveTableLineagesRequest
  * @return ListHiveTableLineagesResponse
 */
async function listHiveTableLineages(request: ListHiveTableLineagesRequest): ListHiveTableLineagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHiveTableLineages', 'POST', '/', 'json', false, 'json', request);
}

model ListTablePartitionsRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Host'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='C-2A51D3826C701234', position='Query'),
  databaseName: string(name='DatabaseName', description='This parameter is required.', example='default', position='Query'),
  order?: string(name='Order', example='ASC/DESC', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', minimum=1, position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', minimum=1, maximum=100, position='Query'),
  tableName: string(name='TableName', description='This parameter is required.', example='test_table', position='Query'),
}

model ListTablePartitionsResponseBody = {
  data?: {
    pageSize?: int32(name='PageSize', example='10'),
    pagedData?: [ 
      {
        gmtCreate?: long(name='GmtCreate', example='1568032253000'),
        gmtModified?: long(name='GmtModified', example='1568032253000'),
        location?: string(name='Location', example='hdfs://emr-header-1.cluster-136574:9000/user/hive/warehouse/pt_table_090901_emr_child/ds=20190909/hr=20/region=shanghai'),
        partitionComment?: string(name='PartitionComment', example='test'),
        partitionName?: string(name='PartitionName', example='ds=20190909/hr=20/region=shanghai'),
        partitionPath?: string(name='PartitionPath', example='hdfs://emr-header-1.cluster-136574:9000/user/hive/warehouse/pt_table_090901_emr_child/ds=20190909/hr=20/region=shanghai'),
        partitionType?: string(name='PartitionType', example='HIVE'),
      }
    ](name='PagedData'),
    totalCount?: int32(name='TotalCount', example='3'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='0'),
  errorMessage?: string(name='ErrorMessage', example='success'),
  requestId?: string(name='RequestId', example='UUID'),
}

model ListTablePartitionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTablePartitionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTablePartitions  ListTablePartitionsRequest
  * @return ListTablePartitionsResponse
 */
async function listTablePartitions(request: ListTablePartitionsRequest): ListTablePartitionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTablePartitions', 'POST', '/', 'json', false, 'json', request);
}

model OpenDataWorksStandardServiceRequest {
  region: string(name='Region', description='This parameter is required.', position='Query'),
}

model OpenDataWorksStandardServiceResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model OpenDataWorksStandardServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenDataWorksStandardServiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OpenDataWorksStandardService  OpenDataWorksStandardServiceRequest
  * @return OpenDataWorksStandardServiceResponse
 */
async function openDataWorksStandardService(request: OpenDataWorksStandardServiceRequest): OpenDataWorksStandardServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenDataWorksStandardService', 'POST', '/', 'json', false, 'json', request);
}

model SearchManualDagNodeInstanceRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Host'),
  dagId: long(name='DagId', description='This parameter is required.', example='123434234', position='Query'),
  projectName: string(name='ProjectName', description='This parameter is required.', example='test_odps_project', position='Query'),
}

model SearchManualDagNodeInstanceResponseBody = {
  data?: {
    nodeInsInfo?: [ 
    {
      beginRunningTime?: string(name='BeginRunningTime', example='2018-12-12 00:00:00'),
      beginWaitResTime?: string(name='BeginWaitResTime', example='2018-12-12 00:00:00'),
      beginWaitTimeTime?: string(name='BeginWaitTimeTime', example='2018-12-12 00:00:00'),
      bizdate?: string(name='Bizdate', example='2018-12-12 00:00:00'),
      createTime?: string(name='CreateTime', example='2018-12-12 00:00:00'),
      dagId?: long(name='DagId', example='12434232423'),
      dagType?: int32(name='DagType', example='5'),
      finishTime?: string(name='FinishTime', example='2018-12-12 00:00:00'),
      instanceId?: long(name='InstanceId', example='12322434112'),
      modifyTime?: string(name='ModifyTime', example='2018-12-12 00:00:00'),
      nodeName?: string(name='NodeName', example='test_node'),
      paraValue?: string(name='ParaValue', example='param_k1=param_v1'),
      status?: int32(name='Status', example='6'),
    }
  ](name='NodeInsInfo')
  }(name='Data'),
  errCode?: string(name='ErrCode', example='0'),
  errMsg?: string(name='ErrMsg', example='test'),
  requestId?: string(name='RequestId', example='2d9ced66-38ef-4923-baf6-391dd3a7e656'),
  success?: boolean(name='Success', example='true'),
}

model SearchManualDagNodeInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchManualDagNodeInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SearchManualDagNodeInstance  SearchManualDagNodeInstanceRequest
  * @return SearchManualDagNodeInstanceResponse
 */
async function searchManualDagNodeInstance(request: SearchManualDagNodeInstanceRequest): SearchManualDagNodeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchManualDagNodeInstance', 'POST', '/', 'json', false, 'json', request);
}

model SendTaskMetaCallbackRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  code: string(name='Code', description='This parameter is required.', position='Body'),
  connectionInfo: string(name='ConnectionInfo', description='This parameter is required.', position='Body'),
  endTime: long(name='EndTime', description='This parameter is required.', minimum=1, maximum=9223372036854775807, position='Body'),
  resources?: [ string ](name='Resources', position='Body'),
  startTime: long(name='StartTime', description='This parameter is required.', minimum=1, maximum=9223372036854775807, position='Body'),
  subType: string(name='SubType', description='This parameter is required.', position='Body'),
  taskEnvParam: string(name='TaskEnvParam', description='This parameter is required.', position='Body'),
  tenantId: long(name='TenantId', description='This parameter is required.', minimum=1, maximum=9223372036854775807, position='Body'),
  type: string(name='Type', description='This parameter is required.', position='Body'),
  user?: string(name='User', position='Body'),
}

model SendTaskMetaCallbackResponseBody = {
  data?: string(name='Data'),
  errMsg?: string(name='ErrMsg'),
  errorCode?: long(name='ErrorCode'),
  requestId?: string(name='RequestId'),
}

model SendTaskMetaCallbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendTaskMetaCallbackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SendTaskMetaCallback  SendTaskMetaCallbackRequest
  * @return SendTaskMetaCallbackResponse
 */
async function sendTaskMetaCallback(request: SendTaskMetaCallbackRequest): SendTaskMetaCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendTaskMetaCallback', 'POST', '/', 'json', true, 'form', request);
}

model SetSwitchValueRequest {
  regionId?: string(name='RegionId', position='Host'),
  switchName?: string(name='SwitchName', position='Query'),
  switchValue?: string(name='SwitchValue', position='Query'),
}

model SetSwitchValueResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model SetSwitchValueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetSwitchValueResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetSwitchValue  SetSwitchValueRequest
  * @return SetSwitchValueResponse
 */
async function setSwitchValue(request: SetSwitchValueRequest): SetSwitchValueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetSwitchValue', 'POST', '/', 'json', false, 'json', request);
}

model StartCollectQualityRequest {
  regionId?: string(name='RegionId', position='Host'),
  callbackResultString: string(name='CallbackResultString', description='This parameter is required.', position='Body'),
}

model StartCollectQualityResponseBody = {
  requestId?: string(name='RequestId'),
  returnCode?: string(name='ReturnCode'),
  returnValue?: [ 
    {
      actualExpression?: string(name='ActualExpression'),
      bizDate?: string(name='BizDate'),
      callbackUrl?: string(name='CallbackUrl'),
      connection?: string(name='Connection'),
      entityId?: long(name='EntityId'),
      matchExpression?: string(name='MatchExpression'),
      pluginName?: string(name='PluginName'),
      strongMethodSet?: [ 
        {
          colName?: string(name='ColName'),
          isColRule?: boolean(name='IsColRule'),
          isSqlRule?: boolean(name='IsSqlRule'),
          isStrongRule?: boolean(name='IsStrongRule'),
          methodName?: string(name='MethodName'),
          ruleId?: long(name='RuleId'),
        }
      ](name='StrongMethodSet'),
      tableGuid?: string(name='TableGuid'),
      taskId?: string(name='TaskId'),
      weakMethodSet?: [ 
        {
          colName?: string(name='ColName'),
          isColRule?: boolean(name='IsColRule'),
          isSqlRule?: boolean(name='IsSqlRule'),
          isStrongRule?: boolean(name='IsStrongRule'),
          methodName?: string(name='MethodName'),
          ruleId?: long(name='RuleId'),
        }
      ](name='WeakMethodSet'),
    }
  ](name='ReturnValue'),
}

model StartCollectQualityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartCollectQualityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartCollectQuality  StartCollectQualityRequest
  * @return StartCollectQualityResponse
 */
async function startCollectQuality(request: StartCollectQualityRequest): StartCollectQualityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartCollectQuality', 'POST', '/', 'json', true, 'form', request);
}

model StartDoCheckQualityRequest {
  regionId?: string(name='RegionId', position='Host'),
  callbackResultString: string(name='CallbackResultString', description='This parameter is required.', position='Body'),
}

model StartDoCheckQualityResponseBody = {
  requestId?: string(name='RequestId'),
  returnCode?: string(name='ReturnCode'),
  returnValue?: boolean(name='ReturnValue'),
}

model StartDoCheckQualityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartDoCheckQualityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartDoCheckQuality  StartDoCheckQualityRequest
  * @return StartDoCheckQualityResponse
 */
async function startDoCheckQuality(request: StartDoCheckQualityRequest): StartDoCheckQualityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDoCheckQuality', 'POST', '/', 'json', true, 'form', request);
}

model StartTaskQualityRequest {
  regionId?: string(name='RegionId', position='Host'),
  callbackResultString: string(name='CallbackResultString', description='This parameter is required.', position='Body'),
}

model StartTaskQualityResponseBody = {
  requestId?: string(name='RequestId'),
  returnCode?: string(name='ReturnCode'),
  returnValue?: {
    actualExpression?: string(name='ActualExpression'),
    bizDate?: string(name='BizDate'),
    callbackUrl?: string(name='CallbackUrl'),
    connection?: string(name='Connection'),
    entityId?: long(name='EntityId'),
    matchExpression?: string(name='MatchExpression'),
    pluginName?: string(name='PluginName'),
    statisticsFlag?: long(name='StatisticsFlag'),
    strongMethodSet?: [ 
      {
        colName?: string(name='ColName'),
        isColRule?: boolean(name='IsColRule'),
        isSqlRule?: boolean(name='IsSqlRule'),
        isStrongRule?: boolean(name='IsStrongRule'),
        methodName?: string(name='MethodName'),
        ruleId?: long(name='RuleId'),
      }
    ](name='StrongMethodSet'),
    tableGuid?: string(name='TableGuid'),
    taskId?: string(name='TaskId'),
    triggerFlag?: long(name='TriggerFlag'),
    weakMethodSet?: [ 
      {
        colName?: string(name='ColName'),
        isColRule?: boolean(name='IsColRule'),
        isSqlRule?: boolean(name='IsSqlRule'),
        isStrongRule?: boolean(name='IsStrongRule'),
        methodName?: string(name='MethodName'),
        ruleId?: long(name='RuleId'),
      }
    ](name='WeakMethodSet'),
  }(name='ReturnValue'),
}

model StartTaskQualityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartTaskQualityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartTaskQuality  StartTaskQualityRequest
  * @return StartTaskQualityResponse
 */
async function startTaskQuality(request: StartTaskQualityRequest): StartTaskQualityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartTaskQuality', 'POST', '/', 'json', true, 'form', request);
}

model TriggerDataLoaderRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model TriggerDataLoaderResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model TriggerDataLoaderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TriggerDataLoaderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TriggerDataLoader  TriggerDataLoaderRequest
  * @return TriggerDataLoaderResponse
 */
async function triggerDataLoader(request: TriggerDataLoaderRequest): TriggerDataLoaderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TriggerDataLoader', 'POST', '/', 'json', false, 'json', request);
}

model TriggerTimeMachineTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model TriggerTimeMachineTaskResponseBody = {
  data?: {
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    hostName?: string(name='HostName'),
    id?: string(name='Id'),
    objId?: string(name='ObjId'),
    objName?: string(name='ObjName'),
    operType?: string(name='OperType'),
    status?: string(name='Status'),
  }(name='Data'),
  errCode?: string(name='ErrCode'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
}

model TriggerTimeMachineTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TriggerTimeMachineTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TriggerTimeMachineTask  TriggerTimeMachineTaskRequest
  * @return TriggerTimeMachineTaskResponse
 */
async function triggerTimeMachineTask(request: TriggerTimeMachineTaskRequest): TriggerTimeMachineTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TriggerTimeMachineTask', 'POST', '/', 'json', false, 'json', request);
}

