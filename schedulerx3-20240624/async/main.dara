/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'SchedulerX3';
  @version = '2024-06-24';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateAppRequest {
  regionId?: string(name='RegionId', position='Host'),
  accessToken?: string(name='AccessToken', example='ltk1ZXHv6LvibZypFkPHzRA', minLength=6, maxLength=32, position='Body'),
  appName: string(name='AppName', description='This parameter is required.', example='test-app', minLength=1, maxLength=64, position='Body'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Body'),
  enableLog?: boolean(name='EnableLog', example='true', position='Body'),
  maxConcurrency?: int32(name='MaxConcurrency', example='10', position='Body'),
  title: string(name='Title', description='This parameter is required.', minLength=1, maxLength=64, position='Body'),
}

model CreateAppResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    accessToken?: string(name='AccessToken', example='4a0fae835cd741f3b12376d8a5a8e549v3'),
    appGroupId?: long(name='AppGroupId', example='10'),
  }(name='Data'),
  message?: string(name='Message', example='Parameter error: content is null.'),
  requestId?: string(name='RequestId', example='3835AA29-2298-5434-BC53-9CC377CDFD2C'),
  success?: boolean(name='Success', example='true'),
}

model CreateAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateApp  CreateAppRequest
  * @return CreateAppResponse
 */
async function createApp(request: CreateAppRequest): CreateAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApp', 'POST', '/', 'json', true, 'form', request);
}

model CreateClusterRequest {
  regionId?: string(name='RegionId', position='Host'),
  clusterName: string(name='ClusterName', description='This parameter is required.', example='qianxi-test-0812', position='Body'),
  clusterSpec: string(name='ClusterSpec', description='This parameter is required.', example='scx.dev.x1', position='Body'),
  engineType: string(name='EngineType', description='This parameter is required.', example='xxljob', position='Body'),
  vSwitches: [ 
    {
      vSwitchId: string(name='VSwitchId', description='This parameter is required.', example='vsw-2ze745n3r2sfqtahhubpl'),
      zoneId: string(name='ZoneId', description='This parameter is required.', example='cn-hangzhou-j'),
    }
  ](name='VSwitches', description='This parameter is required.', shrink='json', position='Body'),
  vpcId: string(name='VpcId', description='VPC id

This parameter is required.', example='vpc-aa1a18236n90rqhuhhnhh', position='Body'),
}

model CreateClusterResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    clusterId?: string(name='ClusterId', example='xxljob-b21969c2309'),
    orderId?: long(name='OrderId', example='229317760970086'),
  }(name='Data', description='-'),
  errorCode?: string(name='ErrorCode', example='INVALID_PARAMETER'),
  message?: string(name='Message', example='Parameter error: content is null.'),
  requestId?: string(name='RequestId', example='B8733786-C045-59F1-8D79-99A52863F62D'),
  success?: boolean(name='Success', example='true'),
}

model CreateClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateCluster  CreateClusterRequest
  * @return CreateClusterResponse
 */
async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCluster', 'POST', '/', 'json', true, 'form', request);
}

model CreateJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', description='This parameter is required.', example='test-app', position='Body'),
  attemptInterval?: int32(name='AttemptInterval', example='3', position='Body'),
  calendar?: string(name='Calendar', example='workday', position='Body'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Body'),
  description?: string(name='Description', example='test', maxLength=300, position='Body'),
  jobHandler: string(name='JobHandler', description='This parameter is required.', example='testJobVoidHandler', minLength=1, maxLength=200, position='Body'),
  jobType: string(name='JobType', description='This parameter is required.', example='xxljob', position='Body'),
  maxAttempt?: int32(name='MaxAttempt', example='3', position='Body'),
  maxConcurrency?: int32(name='MaxConcurrency', example='1', minimum=1, maximum=200, position='Body'),
  name: string(name='Name', description='This parameter is required.', example='test-job', minLength=1, maxLength=200, position='Body'),
  noticeConfig?: {
    failEnable?: boolean(name='FailEnable', example='true'),
    failLimitTimes?: int32(name='FailLimitTimes', example='1'),
    missWorkerEnable?: boolean(name='MissWorkerEnable', example='true'),
    sendChannel?: string(name='SendChannel', example='mail'),
    successNotice?: boolean(name='SuccessNotice', example='true'),
    timeout?: long(name='Timeout', example='30'),
    timeoutEnable?: boolean(name='TimeoutEnable', example='true'),
    timeoutKillEnable?: boolean(name='TimeoutKillEnable', example='true'),
  }(name='NoticeConfig', shrink='json', position='Body'),
  noticeContacts?: [ 
    {
      contactType?: int32(name='ContactType', example='1'),
      name?: string(name='Name', example='xiaoming'),
    }
  ](name='NoticeContacts', shrink='json', position='Body'),
  parameters?: string(name='Parameters', example='test', position='Body'),
  priority?: int32(name='Priority', example='5', minimum=1, position='Body'),
  routeStrategy?: int32(name='RouteStrategy', example='1', minimum=1, maximum=8, position='Body'),
  startTime?: long(name='StartTime', example='1701310327000', position='Body'),
  status?: int32(name='Status', example='1', position='Body'),
  timeExpression?: string(name='TimeExpression', example='0 0 4 ? * Mon/1', position='Body'),
  timeType: int32(name='TimeType', description='This parameter is required.', example='-1', position='Body'),
  timezone?: string(name='Timezone', example='GMT+8', position='Body'),
}

model CreateJobResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    jobId?: long(name='JobId', example='74'),
  }(name='Data', description='-'),
  message?: string(name='Message', example='Parameter error: content is null.'),
  requestId?: string(name='RequestId', example='3835AA29-2298-5434-BC53-9CC377CDFD2C'),
  success?: boolean(name='Success', example='true'),
}

model CreateJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateJob  CreateJobRequest
  * @return CreateJobResponse
 */
async function createJob(request: CreateJobRequest): CreateJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateJob', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAppRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', description='This parameter is required.', example='test-app', position='Body'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Body'),
}

model DeleteAppResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='Parameter error: content is null.'),
  requestId?: string(name='RequestId', example='CF99C381-C8F6-5A8D-8C24-57F46B706D2D'),
  success?: boolean(name='Success', example='true'),
}

model DeleteAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteApp  DeleteAppRequest
  * @return DeleteAppResponse
 */
async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApp', 'POST', '/', 'json', true, 'form', request);
}

model DeleteClusterRequest {
  regionId?: string(name='RegionId', position='Host'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-a1804a3226d', position='Query'),
}

model DeleteClusterResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='Parameter error: content is null.'),
  requestId?: string(name='RequestId', example='F131C3E0-3FAA-5FA4-A6F3-E974D69EF3C5'),
  success?: boolean(name='Success', example='true'),
}

model DeleteClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCluster  DeleteClusterRequest
  * @return DeleteClusterResponse
 */
async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCluster', 'POST', '/', 'json', false, 'json', request);
}

model DeleteJobsRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', description='This parameter is required.', example='test-app', position='Body'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Body'),
  jobIds?: [ long ](name='JobIds', description='-', shrink='json', position='Body'),
}

model DeleteJobsResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='Parameter error: content is null.'),
  requestId?: string(name='RequestId', example='91143E1D-E235-5BE0-9364-C2EE28FFB5A6'),
  success?: boolean(name='Success', example='true'),
}

model DeleteJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteJobs  DeleteJobsRequest
  * @return DeleteJobsResponse
 */
async function deleteJobs(request: DeleteJobsRequest): DeleteJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteJobs', 'POST', '/', 'json', true, 'form', request);
}

model ExportJobsRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', description='This parameter is required.', example='test-app', position='Body'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Body'),
  exportJobType?: int32(name='ExportJobType', example='1', position='Body'),
  jobIds?: [ long ](name='JobIds', description='-', shrink='json', position='Body'),
}

model ExportJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: bytes(name='body'),
}

/**
  * @param request  the request parameters of ExportJobs  ExportJobsRequest
  * @return ExportJobsResponse
 */
async function exportJobs(request: ExportJobsRequest): ExportJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportJobs', 'POST', '/', 'byte', true, 'form', request);
}

model GetClusterRequest {
  regionId?: string(name='RegionId', position='Host'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-d6a5243b6fa', position='Query'),
}

model GetClusterResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    chargeType?: string(name='ChargeType', example='POSTPAY'),
    clusterId?: string(name='ClusterId', example='xxljob-e0d018c6df8'),
    clusterName?: string(name='ClusterName', example='xxl-job-test-1730427575152'),
    clusterSpec?: string(name='ClusterSpec', example='scx.small.x2'),
    createTime?: string(name='CreateTime', example='2024-10-29 15:56:36'),
    endTime?: string(name='EndTime', example='2024-10-29 15:56:36'),
    engineType?: string(name='EngineType', example='xxljob'),
    engineVersion?: string(name='EngineVersion', example='2.0.0'),
    internetDomain?: string(name='InternetDomain'),
    intranetDomain?: string(name='IntranetDomain', example='http://xxljob-xxxxxx.schedulerx.mse.aliyuncs.com'),
    jobNum?: int32(name='JobNum', example='100'),
    kubeConfig?: string(name='KubeConfig', example='{
  "vSwitchIdList": [
    "xxx",
    "xxx"
  ],
  "cpu": xxx,
  "cpuUnit": "xxx",
  "diskCapacity": xxx,
  "memoryCapacity": xxx,
  "zoneIds": [
    "xxx",
    "xxx"
  ],
  "securityGroupList": [
    "xxx"
  ],
  "eniCrossZone": "xxx",
  "regionId": "xxx",
  "instanceCount": xxx,
  "vpcId": "xxx",
  "memoryUnit": "xxx",
  "diskType": "xxx",
  "appClusterId": "xxx"
}'),
    maxJobNum?: int32(name='MaxJobNum', example='1000'),
    productType?: int32(name='ProductType', example='2'),
    spm?: int32(name='Spm', example='10'),
    status?: int32(name='Status', example='2'),
    vSwitches?: [ 
      {
        vSwitchId?: string(name='VSwitchId', example='vsw-8vbf1n216nshvfjdyff8a'),
        zoneId?: string(name='ZoneId', example='cn-hangzhou-k'),
      }
    ](name='VSwitches'),
    vpcId?: string(name='VpcId', description='VPC ID', example='vpc-bp1fiz967u39lt8yuxcs0'),
    workerNum?: int32(name='WorkerNum', example='10'),
    zones?: [ string ](name='Zones'),
  }(name='Data', description='-'),
  message?: string(name='Message', example='Parameter error: content is null.'),
  requestId?: string(name='RequestId', example='D0DE9C33-992A-580B-89C4-B609A292748D'),
  success?: boolean(name='Success', example='true'),
}

model GetClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCluster  GetClusterRequest
  * @return GetClusterResponse
 */
async function getCluster(request: GetClusterRequest): GetClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCluster', 'GET', '/', 'json', false, 'json', request);
}

model GetDesigateInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', description='This parameter is required.', example='test-app', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Query'),
  jobId: long(name='JobId', description='This parameter is required.', example='74', position='Query'),
}

model GetDesigateInfoResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    designateType?: int32(name='DesignateType', example='2'),
    transferable?: boolean(name='Transferable', example='true'),
  }(name='Data', description='-'),
  message?: string(name='Message', example='Parameter check error'),
  requestId?: string(name='RequestId', example='1DF6732E-15D8-5E1F-95E3-C10077F556B5'),
  success?: boolean(name='Success', example='true'),
}

model GetDesigateInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDesigateInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDesigateInfo  GetDesigateInfoRequest
  * @return GetDesigateInfoResponse
 */
async function getDesigateInfo(request: GetDesigateInfoRequest): GetDesigateInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDesigateInfo', 'GET', '/', 'json', false, 'json', request);
}

model GetJobExecutionProgressRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', description='This parameter is required.', example='test-app', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Query'),
  jobExecutionId: string(name='JobExecutionId', description='This parameter is required.', example='1310630367761285120', position='Query'),
}

model GetJobExecutionProgressResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    jobDescription?: string(name='JobDescription'),
    rootProgress?: {
      finished?: long(name='Finished', example='2'),
      total?: long(name='Total', example='2'),
    }(name='RootProgress'),
    shardingProgress?: [ 
      {
        id?: long(name='Id', description='id', example='1'),
        jobExecutionId?: string(name='JobExecutionId', example='1306189481388277762'),
        result?: string(name='Result', example='2,4,6,8,10'),
        status?: int32(name='Status', example='5'),
        statusType?: {
          code?: string(name='Code', example='5'),
          name?: string(name='Name', example='TaskStatus.FAILED'),
          tips?: map[string]string(name='Tips', description='-'),
        }(name='StatusType'),
        workerAddr?: string(name='WorkerAddr', example='http://192.168.1.9:9999/'),
      }
    ](name='ShardingProgress'),
    taskProgress?: [ 
      {
        failed?: int32(name='Failed', example='100'),
        name?: string(name='Name', example='calendar_test_2'),
        pulled?: int32(name='Pulled', example='10'),
        queue?: int32(name='Queue', example='100'),
        running?: int32(name='Running', example='1'),
        success?: int32(name='Success', example='100'),
        total?: int32(name='Total', example='1000'),
      }
    ](name='TaskProgress'),
    totalProgress?: {
      finished?: long(name='Finished', example='15'),
      total?: long(name='Total', example='30'),
    }(name='TotalProgress'),
    workerProgress?: [ 
      {
        failed?: int32(name='Failed', example='20'),
        pulled?: int32(name='Pulled', example='20'),
        queue?: int32(name='Queue', example='20'),
        running?: int32(name='Running', example='20'),
        success?: int32(name='Success', example='20'),
        total?: int32(name='Total', example='100'),
        traceId?: string(name='TraceId', example='1a0e97fb17244665327205402dbd6d'),
        workerAddr?: string(name='WorkerAddr', example='10.10.116.53:61941'),
      }
    ](name='WorkerProgress'),
  }(name='Data', description='-'),
  message?: string(name='Message', example='Parameter format error'),
  requestId?: string(name='RequestId', example='9B57FDD7-ABBE-5030-B348-86EB9943DB59'),
  success?: boolean(name='Success', example='true'),
}

model GetJobExecutionProgressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobExecutionProgressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetJobExecutionProgress  GetJobExecutionProgressRequest
  * @return GetJobExecutionProgressResponse
 */
async function getJobExecutionProgress(request: GetJobExecutionProgressRequest): GetJobExecutionProgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetJobExecutionProgress', 'GET', '/', 'json', false, 'json', request);
}

model GetLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName?: string(name='AppName', example='test-app', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Query'),
  endTime?: long(name='EndTime', example='1721636220', position='Query'),
  jobExecutionId?: string(name='JobExecutionId', example='1310630367761285120', position='Query'),
  keyword?: string(name='Keyword', example='hello word', position='Query'),
  level?: string(name='Level', example='INFO', position='Query'),
  lineNum?: int32(name='LineNum', description='LineNum', example='2', position='Query'),
  logId?: long(name='LogId', example='344008', position='Query'),
  offset?: int32(name='Offset', example='0', position='Query'),
  reverse?: boolean(name='Reverse', example='true', position='Query'),
  startTime?: long(name='StartTime', example='1721636220', position='Query'),
}

model GetLogResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ string ](name='Data', description='-'),
  message?: string(name='Message', example='Parameter check error'),
  requestId?: string(name='RequestId', example='C78E2AD2-5985-515B-BAD2-31A248AFC263'),
  success?: boolean(name='Success', example='true'),
}

model GetLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLog  GetLogRequest
  * @return GetLogResponse
 */
async function getLog(request: GetLogRequest): GetLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLog', 'GET', '/', 'json', false, 'json', request);
}

model ImportCalendarRequest {
  regionId?: string(name='RegionId', position='Host'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Body'),
  months: string(name='Months', description='This parameter is required.', example='[{"month":1,"days":[3,4,5,6,9,10,11,12,13,16,17,18,19,20,28,29,30,31]},{"month":2,"days":[1,2,3,6,7,8,9,10,13,14,15,16,17,20,21,22,23,24,27,28]},{"month":3,"days":[1,2,3,6,7,8,9,10,13,14,15,16,17,20,21,22,23,24,27,28,29,30,31]},{"month":4,"days":[3,4,6,7,10,11,12,13,14,17,18,19,20,21,23,24,25,26,27,28]},{"month":5,"days":[4,5,6,8,9,10,11,12,15,16,17,18,19,22,23,24,25,26,29,30,31]},{"month":6,"days":[1,2,5,6,7,8,9,12,13,14,15,16,19,20,21,25,26,27,28,29,30]},{"month":7,"days":[3,4,5,6,7,10,11,12,13,14,17,18,19,20,21,24,25,26,27,28,31]},{"month":8,"days":[1,2,3,4,7,8,9,10,11,14,15,16,17,18,21,22,23,24,25,28,29,30,31]},{"month":9,"days":[1,4,5,6,7,8,11,12,13,14,15,18,19,20,21,22,25,26,27,28]},{"month":10,"days":[7,8,9,10,11,12,13,16,17,18,19,20,23,24,25,26,27,30,31]},{"month":11,"days":[1,2,3,6,7,8,9,10,13,14,15,16,17,20,21,22,23,24,27,28,29,30]},{"month":12,"days":[1,4,5,6,7,8,11,12,13,14,15,18,19,20,21,22,25,26,27,28,29]}]', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='workday', position='Body'),
  year: int32(name='Year', description='This parameter is required.', example='2024', position='Body'),
}

model ImportCalendarResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ string ](name='Data', description='-'),
  message?: string(name='Message', example='Parameter error: content is null.'),
  requestId?: string(name='RequestId', example='2ECA6FC9-7557-5576-AF5F-FC3E7BCC9C21'),
  success?: boolean(name='Success', example='true'),
}

model ImportCalendarResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportCalendarResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ImportCalendar  ImportCalendarRequest
  * @return ImportCalendarResponse
 */
async function importCalendar(request: ImportCalendarRequest): ImportCalendarResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportCalendar', 'POST', '/', 'json', true, 'form', request);
}

model ImportJobsRequest {
  regionId?: string(name='RegionId', position='Host'),
  autoCreateApp?: boolean(name='AutoCreateApp', example='true', position='Body'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Body'),
  content?: string(name='Content', example='{
  "kind": "SchedulerXJobs",
  "type": "JSON",
  "version": "2.0",
  "content": [
    {
      "appName": "xxl-job-executor-perf-test-xx",
      "groupId": "xxl-job-executor-perf-test-xx",
      "description": "xxl-job-executor-xx",
      "jobConfigInfo": [
        {
          "jobHandler": "testJobVoidHandler",
          "dataOffset": 0,
          "executeMode": "standalone",
          "monitorConfigInfo": {
            "alarmType": "CustomContacts",
            "failLimitTimes": 1,
            "failEnable": true,
            "failRate": 100,
            "timeoutKillEnable": false,
            "missWorkerEnable": false,
            "sendChannel": "webhook",
            "timeoutEnable": true,
            "timeout": 7200,
            "daysOfDeadline": 0,
            "successNotice": false
          },
          "attemptInterval": 30,
          "cleanMode": "{\\"cleanMode\\":\\"NUM_ONLY\\",\\"totalRemain\\":300}",
          "description": "",
          "routeStrategy": 1,
          "userName": "xx",
          "userId": "xx",
          "content": "{\\"jobHandler\\":\\"testJobVoidHandler\\"}",
          "maxConcurrency": 1,
          "maxAttempt": 0,
          "name": "perf_auto_test_0",
          "xattrs": "",
          "jobType": "xxljob",
          "contentType": 1,
          "parameters": "success-withMsg",
          "timeConfig": {
            "calendar": "",
            "dataOffset": 0,
            "timeType": 1,
            "paramMap": {},
            "timeExpression": "* * * * * ?"
          },
          "contactInfoList": [],
          "status": 0
        }
      ]
    }
  ]
}', position='Body'),
  overwrite?: boolean(name='Overwrite', example='true', position='Body'),
}

model ImportJobsResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='Parameter check error'),
  requestId?: string(name='RequestId', example='9A48E22F-F30A-5CE5-AC7A-E0FED1B6942E'),
  success?: boolean(name='Success', example='true'),
}

model ImportJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ImportJobs  ImportJobsRequest
  * @return ImportJobsResponse
 */
async function importJobs(request: ImportJobsRequest): ImportJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportJobs', 'POST', '/', 'json', true, 'form', request);
}

model ListAlarmEventRequest {
  regionId?: string(name='RegionId', position='Host'),
  alarmChannel?: string(name='AlarmChannel', example='webhook', position='Query'),
  alarmStatus?: string(name='AlarmStatus', example='true', position='Query'),
  alarmType?: string(name='AlarmType', example='schedulerx3_fail_alarm', position='Query'),
  appName?: string(name='AppName', example='test-app', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Query'),
  endTime?: long(name='EndTime', example='1731636011558', position='Query'),
  jobName?: string(name='JobName', example='test-job', position='Query'),
  pageNum?: string(name='PageNum', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='10', position='Query'),
  reverse?: boolean(name='Reverse', example='true', position='Query'),
  startTime?: long(name='StartTime', example='1690419316000', position='Query'),
}

model ListAlarmEventResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    records?: [ 
      {
        alarmChannel?: string(name='AlarmChannel', example='webhook'),
        alarmContacts?: string(name='AlarmContacts', example='zhangsan'),
        alarmMessage?: string(name='AlarmMessage'),
        alarmStatus?: string(name='AlarmStatus', example='true'),
        alarmType?: string(name='AlarmType', example='schedulerx3_fail_alarm'),
        appName?: string(name='AppName', example='test-app'),
        jobName?: string(name='JobName', example='test-job'),
        time?: string(name='Time', example='2024-10-31 16:43:51'),
      }
    ](name='Records'),
    total?: long(name='Total', example='64'),
  }(name='Data', description='-'),
  message?: string(name='Message', example='Parameter check error'),
  requestId?: string(name='RequestId', example='27B1345D-5F71-5972-8E4C-AABA6C6232F0'),
  success?: boolean(name='Success', example='true'),
}

model ListAlarmEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAlarmEventResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAlarmEvent  ListAlarmEventRequest
  * @return ListAlarmEventResponse
 */
async function listAlarmEvent(request: ListAlarmEventRequest): ListAlarmEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAlarmEvent', 'GET', '/', 'json', false, 'json', request);
}

model ListAppNamesRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName?: string(name='AppName', example='test-app', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Query'),
}

model ListAppNamesResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      appGroupId?: string(name='AppGroupId', example='test-app'),
      appName?: string(name='AppName', example='test-app'),
      id?: long(name='Id', example='15'),
      title?: string(name='Title'),
    }
  ](name='Data', description='.'),
  message?: string(name='Message', example='Parameter error: content is null.'),
  requestId?: string(name='RequestId', example='3881C59F-59F1-5B2E-8110-7D689CA9B207'),
  success?: boolean(name='Success', example='true'),
}

model ListAppNamesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAppNamesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAppNames  ListAppNamesRequest
  * @return ListAppNamesResponse
 */
async function listAppNames(request: ListAppNamesRequest): ListAppNamesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAppNames', 'GET', '/', 'json', false, 'json', request);
}

model ListAppsRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName?: string(name='AppName', example='test-app', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  title?: string(name='Title', position='Query'),
}

model ListAppsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    records?: [ 
      {
        accessToken?: string(name='AccessToken', description='AccessToken', example='2f4ddeab8e344ed68e0402cf9b8502ffv3'),
        appName?: string(name='AppName', example='test-app'),
        creator?: string(name='Creator', example='1827811800555555'),
        enableLog?: boolean(name='EnableLog', example='true'),
        executorNum?: long(name='ExecutorNum', example='1'),
        id?: long(name='Id', example='43885'),
        jobNum?: int32(name='JobNum', example='10'),
        leader?: string(name='Leader', example='http://28.5.128.3:80'),
        maxConcurrency?: int32(name='MaxConcurrency', example='100'),
        maxJobs?: int32(name='MaxJobs', example='1000'),
        title?: string(name='Title'),
        updater?: string(name='Updater', example='1827811800555555'),
      }
    ](name='Records', description='-'),
    total?: int32(name='Total', example='10'),
  }(name='Data', description='-'),
  message?: string(name='Message', example='Parameter error: content is null.'),
  requestId?: string(name='RequestId', example='2C3E52FF-CBE9-5C0E-8252-37ACFF1F5EFF'),
  success?: boolean(name='Success', example='true'),
}

model ListAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAppsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListApps  ListAppsRequest
  * @return ListAppsResponse
 */
async function listApps(request: ListAppsRequest): ListAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApps', 'GET', '/', 'json', false, 'json', request);
}

model ListCalendarNamesRequest {
  regionId?: string(name='RegionId', position='Host'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Query'),
}

model ListCalendarNamesResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ string ](name='Data', description='-'),
  message?: string(name='Message', example='Parameter check error'),
  requestId?: string(name='RequestId', example='AA3538A0-FBE6-5E31-AD88-A02C6FF0DACC'),
  success?: boolean(name='Success', example='true'),
}

model ListCalendarNamesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCalendarNamesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCalendarNames  ListCalendarNamesRequest
  * @return ListCalendarNamesResponse
 */
async function listCalendarNames(request: ListCalendarNamesRequest): ListCalendarNamesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCalendarNames', 'GET', '/', 'json', false, 'json', request);
}

model ListClustersRequest {
  regionId?: string(name='RegionId', position='Host'),
  clusterId?: string(name='ClusterId', example='xxljob-d6a5243b6fa', position='Query'),
  clusterName?: string(name='ClusterName', example='cluster-test', position='Query'),
  pageNum?: int32(name='PageNum', example='5', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model ListClustersResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='50'),
    records?: [ 
      {
        chargeType?: string(name='ChargeType', example='PREPAY'),
        clusterId?: string(name='ClusterId', example='xxljob-c20f7ec9a78'),
        clusterName?: string(name='ClusterName', example='xxl-job-test-1730427510169'),
        clusterSpec?: string(name='ClusterSpec', example='scx.small.x2'),
        createTime?: string(name='CreateTime', example='2024-10-29 15:56:36'),
        endTime?: string(name='EndTime', example='2024-10-29 15:56:36'),
        engineType?: string(name='EngineType', example='xxljob'),
        engineVersion?: string(name='EngineVersion', example='2.0.0'),
        internetDomain?: string(name='InternetDomain'),
        intranetDomain?: string(name='IntranetDomain', example='http://xxljob-b9e19e46c4e.schedulerx.mse.aliyuncs.com'),
        productType?: int32(name='ProductType', example='1'),
        spInstanceId?: string(name='SpInstanceId'),
        status?: int32(name='Status', example='1'),
        vSwitches?: [ 
          {
            vSwitchId?: string(name='VSwitchId', example='vsw-8vbl54xzux86usy61r5zm'),
            zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
          }
        ](name='VSwitches'),
        vpcId?: string(name='VpcId', description='VPC ID', example='vpc-bp1fxort6ag5h9752i305'),
      }
    ](name='Records', description='-'),
    total?: int32(name='Total', example='30'),
  }(name='Data', description='-'),
  message: string(name='Message', description='This parameter is required.', example='Parameter error: content is null.'),
  requestId?: string(name='RequestId', example='39938688-0BAB-5AD8-BF02-F4910FAC7589'),
  success?: boolean(name='Success', example='true'),
}

model ListClustersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClustersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListClusters  ListClustersRequest
  * @return ListClustersResponse
 */
async function listClusters(request: ListClustersRequest): ListClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusters', 'GET', '/', 'json', false, 'json', request);
}

model ListExecutorsRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', description='This parameter is required.', example='test-app', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Query'),
  jobId?: long(name='JobId', example='74', position='Query'),
  label?: string(name='Label', example='gray', position='Query'),
}

model ListExecutorsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      address?: string(name='Address', example='http://192.168.1.10:9999/'),
      ip?: string(name='Ip', example='192.168.1.10'),
      isDesignated?: boolean(name='IsDesignated', example='true'),
      label?: string(name='Label', example='gray'),
      online?: boolean(name='Online', example='true'),
      port?: int32(name='Port', example='9999'),
      version?: string(name='Version', example='2.0.2'),
    }
  ](name='Data', description='-'),
  message?: string(name='Message', example='Parameter check error'),
  requestId?: string(name='RequestId', example='5EF879D0-3B43-5AD1-9BF7-52418F9C5E73'),
  success?: boolean(name='Success', example='true'),
}

model ListExecutorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListExecutorsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListExecutors  ListExecutorsRequest
  * @return ListExecutorsResponse
 */
async function listExecutors(request: ListExecutorsRequest): ListExecutorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListExecutors', 'GET', '/', 'json', false, 'json', request);
}

model ListJobExecutionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName?: string(name='AppName', example='test-app', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Query'),
  endTime?: string(name='EndTime', example='2024-11-12 20:50:56', position='Query'),
  jobExecutionId?: string(name='JobExecutionId', example='1310630367761285120', position='Query'),
  jobId?: long(name='JobId', example='74', position='Query'),
  jobName?: string(name='JobName', example='test-job', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  startTime?: string(name='StartTime', example='2024-11-12 20:50:55', position='Query'),
  status?: int32(name='Status', example='4', position='Query'),
}

model ListJobExecutionsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    records?: [ 
      {
        appName?: string(name='AppName', example='test-app'),
        attempt?: int32(name='Attempt', example='1'),
        dataTime?: string(name='DataTime', example='2024-11-12 14:52:42'),
        duration?: long(name='Duration', example='10'),
        endTime?: string(name='EndTime', example='2024-11-12 14:52:42'),
        executor?: string(name='Executor', example='1827811800526000'),
        jobExecutionId?: string(name='JobExecutionId', example='1310630367761285120'),
        jobId?: long(name='JobId', example='74'),
        jobName?: string(name='JobName', example='test-job'),
        jobType?: string(name='JobType', example='xxljob'),
        parameters?: string(name='Parameters', example='name=zhangsan'),
        result?: string(name='Result', example='success'),
        routeStrategy?: int32(name='RouteStrategy', example='1'),
        scheduleTime?: string(name='ScheduleTime', example='2024-11-12 14:52:42'),
        serverIp?: string(name='ServerIp', example='28.0.168.46'),
        status?: int32(name='Status', example='4'),
        timeType?: int32(name='TimeType', example='1'),
        triggerType?: int32(name='TriggerType', example='1'),
        workAddr?: string(name='WorkAddr', example='http://192.168.1.9:9999/'),
      }
    ](name='Records', description='-'),
    total?: int32(name='Total', example='20'),
  }(name='Data', description='-'),
  message: string(name='Message', description='This parameter is required.', example='Parameter error: content is null.'),
  requestId?: string(name='RequestId', example='6BCE89B3-E882-511D-9A75-D452A56EC4B1'),
  success?: boolean(name='Success', example='true'),
}

model ListJobExecutionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListJobExecutionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListJobExecutions  ListJobExecutionsRequest
  * @return ListJobExecutionsResponse
 */
async function listJobExecutions(request: ListJobExecutionsRequest): ListJobExecutionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListJobExecutions', 'GET', '/', 'json', false, 'json', request);
}

model ListJobsRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName?: string(name='AppName', example='test-app', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Query'),
  description?: string(name='Description', position='Query'),
  jobHandler?: string(name='JobHandler', example='jobDemoHandler', position='Query'),
  jobId?: long(name='JobId', example='10', position='Query'),
  jobName?: string(name='JobName', example='job01', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  status?: string(name='Status', example='0', position='Query'),
}

model ListJobsResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    records?: [ 
      {
        appName?: string(name='AppName', example='test-app'),
        attemptInterval?: int32(name='AttemptInterval', example='30'),
        calendar?: string(name='Calendar', example='work-day'),
        cleanMode?: string(name='CleanMode', example='{"cleanMode":"NUM_ONLY","totalRemain":300}'),
        creator?: string(name='Creator', example='1963096506470832'),
        dataOffset?: int32(name='DataOffset', example='3'),
        description?: string(name='Description'),
        jobHandler?: string(name='JobHandler', example='jobDemoHandler'),
        jobId?: long(name='JobId', example='74'),
        jobType?: string(name='JobType', example='xxljob'),
        maxAttempt?: int32(name='MaxAttempt', example='5'),
        maxConcurrency?: int32(name='MaxConcurrency', example='100'),
        name?: string(name='Name', example='job01'),
        noticeConfig?: string(name='NoticeConfig', example='{"failLimitTimes":1,"failEnable":true,"timeoutKillEnable":false,"missWorkerEnable":true,"timeoutEnable":true,"sendChannel":"","timeout":300,"successNotice":false}'),
        noticeContacts?: string(name='NoticeContacts'),
        parameters?: string(name='Parameters', example='name=10'),
        priority?: int32(name='Priority', example='1'),
        routeStrategy?: int32(name='RouteStrategy', example='1'),
        status?: int32(name='Status', example='1'),
        timeExpression?: string(name='TimeExpression', example='0 0 12 * * ?'),
        timeType?: int32(name='TimeType', example='1'),
        timeZone?: string(name='TimeZone', example='HangKong'),
        timezone?: string(name='Timezone', example='HangKong'),
        updater?: string(name='Updater', example='1963096506470832'),
        xattrs?: string(name='Xattrs'),
      }
    ](name='Records', description='-'),
    total?: int32(name='Total', example='65'),
  }(name='Data', description='-'),
}

model ListJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListJobs  ListJobsRequest
  * @return ListJobsResponse
 */
async function listJobs(request: ListJobsRequest): ListJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListJobs', 'GET', '/', 'json', false, 'json', request);
}

model ListLablesRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', description='This parameter is required.', example='test-app', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Query'),
  jobId?: long(name='JobId', example='15', position='Query'),
}

model ListLablesResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      isDesignated?: boolean(name='IsDesignated', example='true'),
      label?: string(name='Label', example='gray'),
      online?: boolean(name='Online', example='true'),
      size?: int32(name='Size', example='2'),
    }
  ](name='Data', description='-'),
  message?: string(name='Message', example='Parameter check error'),
  requestId?: string(name='RequestId', example='9079A828-9138-50F1-801E-F2BC3D222A06'),
  success?: boolean(name='Success', example='true'),
}

model ListLablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLablesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLables  ListLablesRequest
  * @return ListLablesResponse
 */
async function listLables(request: ListLablesRequest): ListLablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLables', 'GET', '/', 'json', false, 'json', request);
}

model ListRegionZoneRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
}

model ListRegionZoneResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      localName?: string(name='LocalName', example='E'),
      zoneId?: string(name='ZoneId', description='zone id', example='cn-beijing-j'),
    }
  ](name='Data', description='-'),
  errorCode?: string(name='ErrorCode', example='IllegalRequest'),
  message?: string(name='Message', example='Parameter check error'),
  requestId?: string(name='RequestId', example='438737AC-760A-57D9-B646-B7EF79426243'),
  success?: boolean(name='Success', example='true'),
}

model ListRegionZoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRegionZoneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRegionZone  ListRegionZoneRequest
  * @return ListRegionZoneResponse
 */
async function listRegionZone(request: ListRegionZoneRequest): ListRegionZoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRegionZone', 'POST', '/', 'json', false, 'json', request);
}

model ListRegionsRequest {
}

model ListRegionsResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='Parameter check error'),
  regions?: [ 
    {
      localName?: string(name='LocalName', example='China (Hangzhou)'),
      regionEndpoint?: string(name='RegionEndpoint', description='endpoint', example='schedulerx3.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='Regions', description='-'),
  requestId?: string(name='RequestId', example='AFD5B166-4A7D-50DF-91BF-EFAFD41F7335'),
  success?: boolean(name='Success', example='true'),
}

model ListRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRegions  ListRegionsRequest
  * @return ListRegionsResponse
 */
async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRegions', 'GET', '/', 'json', false, 'json', request);
}

model ListScheduleEventRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName?: string(name='AppName', example='test-app', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Query'),
  endTime?: long(name='EndTime', example='1728872796295', position='Query'),
  event?: string(name='Event', example='INFO', position='Query'),
  jobExecutionId?: string(name='JobExecutionId', example='1310630367761285120', position='Query'),
  jobName?: string(name='JobName', example='test-job', position='Query'),
  keyword?: string(name='Keyword', example='hello word', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  reverse?: boolean(name='Reverse', example='true', position='Query'),
  startTime?: long(name='StartTime', example='1581317873000', position='Query'),
}

model ListScheduleEventResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    records?: [ 
      {
        appName?: string(name='AppName', example='test-app'),
        content?: string(name='Content', example='hello word'),
        event?: string(name='Event', example='INFO'),
        jobExecutionId?: string(name='JobExecutionId', description='130', example='1310630367761285120'),
        jobName?: string(name='JobName', example='test-job'),
        time?: string(name='Time', example='2024-10-31 16:43:51'),
        workerAddr?: string(name='WorkerAddr', example='http://192.168.1.5:9999/'),
      }
    ](name='Records'),
    total?: long(name='Total', example='100'),
  }(name='Data', description='-'),
  message?: string(name='Message', example='Parameter check error'),
  requestId?: string(name='RequestId', example='B880122A-B0E4-52E8-8F54-87DB7779EB74'),
  success?: boolean(name='Success', example='true'),
}

model ListScheduleEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListScheduleEventResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListScheduleEvent  ListScheduleEventRequest
  * @return ListScheduleEventResponse
 */
async function listScheduleEvent(request: ListScheduleEventRequest): ListScheduleEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListScheduleEvent', 'GET', '/', 'json', false, 'json', request);
}

model ListScheduleTimesRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', description='This parameter is required.', example='test-app', position='Query'),
  calendar?: string(name='Calendar', example='workday', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Query'),
  timeExpression: string(name='TimeExpression', description='This parameter is required.', example='0 0/10 * * * ?', position='Query'),
  timeType: int32(name='TimeType', description='This parameter is required.', example='1', position='Query'),
  timeZone?: string(name='TimeZone', example='Asia/Beijing', position='Query'),
}

model ListScheduleTimesResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ string ](name='Data'),
  message?: string(name='Message', example='Parameter check error'),
  requestId?: string(name='RequestId', example='9A48E22F-F30A-5CE5-AC7A-E0FED1B6942E'),
  success?: boolean(name='Success', example='true'),
}

model ListScheduleTimesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListScheduleTimesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListScheduleTimes  ListScheduleTimesRequest
  * @return ListScheduleTimesResponse
 */
async function listScheduleTimes(request: ListScheduleTimesRequest): ListScheduleTimesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListScheduleTimes', 'GET', '/', 'json', false, 'json', request);
}

model OperateDesignateExecutorsRequest {
  regionId?: string(name='RegionId', position='Host'),
  addressList: [ string ](name='AddressList', description='This parameter is required.', shrink='json', position='Body'),
  appName: string(name='AppName', description='This parameter is required.', example='test-app', position='Body'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Body'),
  designateType: int32(name='DesignateType', description='This parameter is required.', example='1', position='Body'),
  jobId: long(name='JobId', description='This parameter is required.', example='74', position='Body'),
  transferable?: boolean(name='Transferable', example='true', position='Body'),
}

model OperateDesignateExecutorsResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='Parameter check error'),
  requestId?: string(name='RequestId', example='AFD5B166-4A7D-50DF-91BF-EFAFD41F7335'),
  success?: boolean(name='Success', example='true'),
}

model OperateDesignateExecutorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateDesignateExecutorsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OperateDesignateExecutors  OperateDesignateExecutorsRequest
  * @return OperateDesignateExecutorsResponse
 */
async function operateDesignateExecutors(request: OperateDesignateExecutorsRequest): OperateDesignateExecutorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateDesignateExecutors', 'POST', '/', 'json', true, 'form', request);
}

model OperateDisableJobsRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', description='This parameter is required.', example='test-app', position='Body'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Body'),
  jobIds?: [ long ](name='JobIds', description='-', shrink='json', position='Body'),
}

model OperateDisableJobsResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='Parameter error: content is null.'),
  requestId?: string(name='RequestId', example='29ED6209-5DE6-5E1D-89B0-B7B1D823A1BF'),
  success?: boolean(name='Success', example='true'),
}

model OperateDisableJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateDisableJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OperateDisableJobs  OperateDisableJobsRequest
  * @return OperateDisableJobsResponse
 */
async function operateDisableJobs(request: OperateDisableJobsRequest): OperateDisableJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateDisableJobs', 'POST', '/', 'json', true, 'form', request);
}

model OperateEnableJobsRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', description='This parameter is required.', example='test-app', position='Body'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Body'),
  jobIds?: [ long ](name='JobIds', description='-', shrink='json', position='Body'),
}

model OperateEnableJobsResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='Parameter error: content is null.'),
  requestId?: string(name='RequestId', example='4CC4132F-B798-5D6E-9F06-D44B33E417E9'),
  success?: boolean(name='Success', example='true'),
}

model OperateEnableJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateEnableJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OperateEnableJobs  OperateEnableJobsRequest
  * @return OperateEnableJobsResponse
 */
async function operateEnableJobs(request: OperateEnableJobsRequest): OperateEnableJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateEnableJobs', 'POST', '/', 'json', true, 'form', request);
}

model OperateExecuteJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', description='This parameter is required.', example='test-app', position='Body'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Body'),
  instanceParameters?: string(name='InstanceParameters', example='name=zhangsan', position='Body'),
  jobId: long(name='JobId', description='This parameter is required.', example='74', position='Body'),
  label?: string(name='Label', example='gray', position='Body'),
  worker?: string(name='Worker', example='http://192.168.1.5:9999/', position='Body'),
}

model OperateExecuteJobResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    jobExecutionId?: string(name='JobExecutionId', example='1310630367761285120'),
  }(name='Data', description='-'),
  message?: string(name='Message', example='Parameter error: content is null.'),
  requestId?: string(name='RequestId', example='6305893D-517D-5131-A767-644EDA81CEC3'),
  success?: boolean(name='Success', example='true'),
}

model OperateExecuteJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateExecuteJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OperateExecuteJob  OperateExecuteJobRequest
  * @return OperateExecuteJobResponse
 */
async function operateExecuteJob(request: OperateExecuteJobRequest): OperateExecuteJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateExecuteJob', 'POST', '/', 'json', true, 'form', request);
}

model OperateRerunJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', description='This parameter is required.', example='test-app', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Query'),
  dataTime: string(name='DataTime', description='This parameter is required.', example='14:11:10', position='Query'),
  endDate: long(name='EndDate', description='This parameter is required.', example='1698458024000', position='Query'),
  jobId: long(name='JobId', description='This parameter is required.', example='74', position='Query'),
  startDate: long(name='StartDate', description='This parameter is required.', example='1698458024000', position='Query'),
}

model OperateRerunJobResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='Parameter check error'),
  requestId?: string(name='RequestId', example='BCDF4006-C8A1-5F83-9368-588347D3EE84'),
  success?: boolean(name='Success', example='true'),
}

model OperateRerunJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateRerunJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OperateRerunJob  OperateRerunJobRequest
  * @return OperateRerunJobResponse
 */
async function operateRerunJob(request: OperateRerunJobRequest): OperateRerunJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateRerunJob', 'POST', '/', 'json', false, 'json', request);
}

model OperateRetryJobExecutionRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', description='This parameter is required.', example='test-app', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Query'),
  jobExecutionId?: string(name='JobExecutionId', example='1310630367761285120', position='Query'),
  jobId?: long(name='JobId', example='74', position='Query'),
}

model OperateRetryJobExecutionResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='438737AC-760A-57D9-B646-B7EF79426243'),
  success?: boolean(name='Success', example='true'),
}

model OperateRetryJobExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateRetryJobExecutionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OperateRetryJobExecution  OperateRetryJobExecutionRequest
  * @return OperateRetryJobExecutionResponse
 */
async function operateRetryJobExecution(request: OperateRetryJobExecutionRequest): OperateRetryJobExecutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateRetryJobExecution', 'POST', '/', 'json', false, 'json', request);
}

model OperateStopJobExecutionRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', description='This parameter is required.', example='test-app', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Query'),
  jobExecutionId?: string(name='JobExecutionId', example='1310630367761285120', position='Query'),
  jobId?: long(name='JobId', example='74', position='Query'),
}

model OperateStopJobExecutionResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='Parameter check error'),
  requestId?: string(name='RequestId', example='E82D8B33-204D-58E1-8F56-909F6B48F3D1'),
  success?: boolean(name='Success', example='true'),
}

model OperateStopJobExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateStopJobExecutionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OperateStopJobExecution  OperateStopJobExecutionRequest
  * @return OperateStopJobExecutionResponse
 */
async function operateStopJobExecution(request: OperateStopJobExecutionRequest): OperateStopJobExecutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateStopJobExecution', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAppRequest {
  regionId?: string(name='RegionId', position='Host'),
  accessToken?: string(name='AccessToken', example='f312159702f4469585586ed5a6904163v3', minLength=6, maxLength=32, position='Body'),
  appName: string(name='AppName', description='This parameter is required.', example='test-app', minLength=1, maxLength=64, position='Body'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Body'),
  enableLog?: boolean(name='EnableLog', example='true', position='Body'),
  maxConcurrency?: int32(name='MaxConcurrency', example='10', position='Body'),
  title: string(name='Title', description='This parameter is required.', minLength=1, maxLength=64, position='Body'),
}

model UpdateAppResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='Parameter error: content is null.'),
  requestId?: string(name='RequestId', example='39AA91C1-7BB7-5934-B15B-FD8E706D76C4'),
  success?: boolean(name='Success', example='true'),
}

model UpdateAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateApp  UpdateAppRequest
  * @return UpdateAppResponse
 */
async function updateApp(request: UpdateAppRequest): UpdateAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateApp', 'POST', '/', 'json', true, 'form', request);
}

model UpdateClusterRequest {
  regionId?: string(name='RegionId', position='Host'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-c20f7ec9a78', position='Query'),
  clusterName: string(name='ClusterName', description='This parameter is required.', example='xx-test-1107', minLength=1, maxLength=64, position='Query'),
}

model UpdateClusterResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='Parameter error: content is null.'),
  requestId?: string(name='RequestId', example='EEF9AF15-AEEF-5E59-BF7B-BCBB119DC53F'),
  success?: boolean(name='Success', example='true'),
}

model UpdateClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateCluster  UpdateClusterRequest
  * @return UpdateClusterResponse
 */
async function updateCluster(request: UpdateClusterRequest): UpdateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCluster', 'POST', '/', 'json', false, 'json', request);
}

model UpdateJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', description='This parameter is required.', example='test-app', position='Body'),
  attemptInterval?: int32(name='AttemptInterval', example='3', position='Body'),
  calendar?: string(name='Calendar', example='workday', position='Body'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='xxljob-b6ec1xxxx', position='Body'),
  description?: string(name='Description', example='test', maxLength=300, position='Body'),
  jobHandler?: string(name='JobHandler', example='testJobVoidHandler', maxLength=200, position='Body'),
  jobId: long(name='JobId', description='This parameter is required.', example='74', position='Body'),
  maxAttempt?: int32(name='MaxAttempt', example='3', position='Body'),
  maxConcurrency?: int32(name='MaxConcurrency', example='1', minimum=1, maximum=200, position='Body'),
  name?: string(name='Name', example='test-job', maxLength=200, position='Body'),
  noticeConfig?: {
    failEnable?: boolean(name='FailEnable', example='true'),
    failLimitTimes?: int32(name='FailLimitTimes', example='true'),
    missWorkerEnable?: boolean(name='MissWorkerEnable', example='true'),
    sendChannel?: string(name='SendChannel', example='webhook,sms,mail,phone'),
    successNotice?: boolean(name='SuccessNotice', example='true'),
    timeout?: long(name='Timeout', example='90'),
    timeoutEnable?: boolean(name='TimeoutEnable', example='true'),
    timeoutKillEnable?: boolean(name='TimeoutKillEnable', example='true'),
  }(name='NoticeConfig', shrink='json', position='Body'),
  noticeContacts?: [ 
    {
      contactType?: int32(name='ContactType', example='1'),
      name?: string(name='Name', example='xiaoming'),
    }
  ](name='NoticeContacts', shrink='json', position='Body'),
  parameters?: string(name='Parameters', example='test', maxLength=2000, position='Body'),
  priority?: int32(name='Priority', example='10', minimum=1, position='Body'),
  routeStrategy?: int32(name='RouteStrategy', example='1', minimum=1, maximum=8, position='Body'),
  startTime?: long(name='StartTime', example='1716902187', position='Body'),
  timeExpression?: string(name='TimeExpression', example='0 0 4 ? * Mon/1', position='Body'),
  timeType?: int32(name='TimeType', example='1', position='Body'),
  timezone?: string(name='Timezone', example='Asia/Beijing', position='Body'),
}

model UpdateJobResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='Parameter error: content is null.'),
  requestId?: string(name='RequestId', example='3808cf26-dde2-4286-8503-b0a2cd4065a7'),
  success?: boolean(name='Success', example='true'),
}

model UpdateJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateJob  UpdateJobRequest
  * @return UpdateJobResponse
 */
async function updateJob(request: UpdateJobRequest): UpdateJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateJob', 'POST', '/', 'json', true, 'form', request);
}

