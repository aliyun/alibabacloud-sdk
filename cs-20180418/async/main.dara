/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'CS';
  @version = '2018-04-18';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'cs.aliyuncs.com',
    cn-beijing-finance-1 = 'cs.aliyuncs.com',
    cn-beijing-finance-pop = 'cs.aliyuncs.com',
    cn-beijing-gov-1 = 'cs.aliyuncs.com',
    cn-beijing-nu16-b01 = 'cs.aliyuncs.com',
    cn-edge-1 = 'cs.aliyuncs.com',
    cn-fujian = 'cs.aliyuncs.com',
    cn-haidian-cm12-c01 = 'cs.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'cs.aliyuncs.com',
    cn-hangzhou-finance = 'cs-vpc.cn-hangzhou-finance.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'cs.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'cs.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'cs.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'cs.aliyuncs.com',
    cn-hangzhou-test-306 = 'cs.aliyuncs.com',
    cn-hongkong-finance-pop = 'cs.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'cs.aliyuncs.com',
    cn-qingdao-nebula = 'cs.aliyuncs.com',
    cn-shanghai-et15-b01 = 'cs.aliyuncs.com',
    cn-shanghai-et2-b01 = 'cs.aliyuncs.com',
    cn-shanghai-finance-1 = 'cs-vpc.cn-shanghai-finance-1.aliyuncs.com',
    cn-shanghai-inner = 'cs.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'cs.aliyuncs.com',
    cn-shenzhen-finance-1 = 'cs-vpc.cn-shenzhen-finance-1.aliyuncs.com',
    cn-shenzhen-inner = 'cs.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'cs.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'cs.aliyuncs.com',
    cn-wuhan = 'cs.aliyuncs.com',
    cn-yushanfang = 'cs.aliyuncs.com',
    cn-zhangbei = 'cs.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'cs.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'cs.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'cs.aliyuncs.com',
    eu-west-1-oxs = 'cs.aliyuncs.com',
    rus-west-1-pop = 'cs.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CallbackClusterTokenRequest {
  token: string(name='Token', position='Path'),
  reqOnce: string(name='ReqOnce', position='Path'),
}

model CallbackClusterTokenResponse = {
  headers: map[string]string(name='headers'),
}

async function callbackClusterToken(request: CallbackClusterTokenRequest): CallbackClusterTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CallbackClusterToken', 'POST', '/token/{Token}/req_once/{ReqOnce}/callback', 'none', false, 'json', request);
}

model CreateClusterRequest {
}

model CreateClusterResponse = {
  headers: map[string]string(name='headers'),
}

async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateCluster', 'POST', '/clusters', 'none', false, 'json', request);
}

model CreateClusterTokenRequest {
  clusterId: string(name='ClusterId', position='Path'),
}

model CreateClusterTokenResponse = {
  headers: map[string]string(name='headers'),
}

async function createClusterToken(request: CreateClusterTokenRequest): CreateClusterTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateClusterToken', 'POST', '/clusters/{ClusterId}/token', 'none', false, 'json', request);
}

model DeleteClusterRequest {
  clusterId: string(name='ClusterId', position='Path'),
}

model DeleteClusterResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteCluster', 'DELETE', '/clusters/{ClusterId}', 'none', false, 'json', request);
}

model DeleteClusterNodeRequest {
  clusterId: string(name='ClusterId', position='Path'),
  ip: string(name='Ip', position='Path'),
  force?: string(name='force', position='Query'),
  releaseInstance?: string(name='releaseInstance', position='Query'),
}

model DeleteClusterNodeResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteClusterNode(request: DeleteClusterNodeRequest): DeleteClusterNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteClusterNode', 'DELETE', '/clusters/{ClusterId}/ip/{Ip}', 'none', false, 'json', request);
}

model DescribeAgilityTunnelAgentInfoRequest {
  token: string(name='Token', position='Path'),
}

model DescribeAgilityTunnelAgentInfoResponse = {
  headers: map[string]string(name='headers'),
}

async function describeAgilityTunnelAgentInfo(request: DescribeAgilityTunnelAgentInfoRequest): DescribeAgilityTunnelAgentInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeAgilityTunnelAgentInfo', 'GET', '/agility/{Token}/agent_info', 'none', false, 'json', request);
}

model DescribeAgilityTunnelCertsRequest {
  token: string(name='Token', position='Path'),
}

model DescribeAgilityTunnelCertsResponse = {
  headers: map[string]string(name='headers'),
}

async function describeAgilityTunnelCerts(request: DescribeAgilityTunnelCertsRequest): DescribeAgilityTunnelCertsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeAgilityTunnelCerts', 'GET', '/agility/{Token}/agent_certs', 'none', false, 'json', request);
}

model DescribeApiVersionRequest {
}

model DescribeApiVersionResponse = {
  headers: map[string]string(name='headers'),
}

async function describeApiVersion(request: DescribeApiVersionRequest): DescribeApiVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeApiVersion', 'GET', '/version', 'none', false, 'json', request);
}

model DescribeClusterCertsRequest {
  clusterId: string(name='ClusterId', position='Path'),
}

model DescribeClusterCertsResponse = {
  headers: map[string]string(name='headers'),
}

async function describeClusterCerts(request: DescribeClusterCertsRequest): DescribeClusterCertsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterCerts', 'GET', '/clusters/{ClusterId}/certs', 'none', false, 'json', request);
}

model DescribeClusterDetailRequest {
  clusterId: string(name='ClusterId', position='Path'),
}

model DescribeClusterDetailResponse = {
  headers: map[string]string(name='headers'),
}

async function describeClusterDetail(request: DescribeClusterDetailRequest): DescribeClusterDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterDetail', 'GET', '/clusters/{ClusterId}', 'none', false, 'json', request);
}

model DescribeClusterHostsRequest {
  clusterId: string(name='ClusterId', position='Path'),
}

model DescribeClusterHostsResponse = {
  headers: map[string]string(name='headers'),
}

async function describeClusterHosts(request: DescribeClusterHostsRequest): DescribeClusterHostsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterHosts', 'GET', '/clusters/{ClusterId}/hosts', 'none', false, 'json', request);
}

model DescribeClusterLogsRequest {
  clusterId: string(name='ClusterId', position='Path'),
}

model DescribeClusterLogsResponse = {
  headers: map[string]string(name='headers'),
}

async function describeClusterLogs(request: DescribeClusterLogsRequest): DescribeClusterLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterLogs', 'GET', '/clusters/{ClusterId}/logs', 'none', false, 'json', request);
}

model DescribeClusterNodeInfoRequest {
  token: string(name='Token', position='Path'),
}

model DescribeClusterNodeInfoResponse = {
  headers: map[string]string(name='headers'),
}

async function describeClusterNodeInfo(request: DescribeClusterNodeInfoRequest): DescribeClusterNodeInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterNodeInfo', 'GET', '/token/{Token}/node_info', 'none', false, 'json', request);
}

model DescribeClusterNodeInfoWithInstanceRequest {
  token: string(name='Token', position='Path'),
  instanceId: string(name='InstanceId', position='Path'),
}

model DescribeClusterNodeInfoWithInstanceResponse = {
  headers: map[string]string(name='headers'),
}

async function describeClusterNodeInfoWithInstance(request: DescribeClusterNodeInfoWithInstanceRequest): DescribeClusterNodeInfoWithInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterNodeInfoWithInstance', 'GET', '/token/{Token}/instance/{InstanceId}/node_info', 'none', false, 'json', request);
}

model DescribeClusterNodesRequest {
  clusterId: string(name='ClusterId', position='Path'),
  pageNumber?: string(name='pageNumber', position='Query'),
  pageSize?: string(name='pageSize', position='Query'),
}

model DescribeClusterNodesResponse = {
  headers: map[string]string(name='headers'),
}

async function describeClusterNodes(request: DescribeClusterNodesRequest): DescribeClusterNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterNodes', 'GET', '/clusters/{ClusterId}/nodes', 'none', false, 'json', request);
}

model DescribeClusterScaledNodeRequest {
  clusterId: string(name='ClusterId', position='Path'),
}

model DescribeClusterScaledNodeResponse = {
  headers: map[string]string(name='headers'),
}

async function describeClusterScaledNode(request: DescribeClusterScaledNodeRequest): DescribeClusterScaledNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterScaledNode', 'GET', '/clusters/{ClusterId}/scaled_nodes/', 'none', false, 'json', request);
}

model DescribeClusterServicesRequest {
  clusterId: string(name='ClusterId', position='Path'),
}

model DescribeClusterServicesResponse = {
  headers: map[string]string(name='headers'),
}

async function describeClusterServices(request: DescribeClusterServicesRequest): DescribeClusterServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterServices', 'GET', '/clusters/{ClusterId}/services', 'none', false, 'json', request);
}

model DescribeClusterTokensRequest {
  clusterId: string(name='ClusterId', position='Path'),
}

model DescribeClusterTokensResponse = {
  headers: map[string]string(name='headers'),
}

async function describeClusterTokens(request: DescribeClusterTokensRequest): DescribeClusterTokensResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterTokens', 'GET', '/clusters/{ClusterId}/tokens', 'none', false, 'json', request);
}

model DescribeClustersRequest {
  name?: string(name='Name', position='Query'),
  clusterType?: string(name='clusterType', position='Query'),
}

model DescribeClustersResponse = {
  headers: map[string]string(name='headers'),
}

async function describeClusters(request: DescribeClustersRequest): DescribeClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusters', 'GET', '/clusters', 'none', false, 'json', request);
}

model DescribeImagesRequest {
  dockerVersion?: string(name='DockerVersion', position='Query'),
  imageName?: string(name='ImageName', position='Query'),
  regionID?: string(name='RegionID', position='Query'),
}

model DescribeImagesResponse = {
  headers: map[string]string(name='headers'),
}

async function describeImages(request: DescribeImagesRequest): DescribeImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeImages', 'GET', '/images', 'none', false, 'json', request);
}

model DescribeKubernetesTemplateRequest {
  clusterId: string(name='ClusterId', position='Path'),
}

model DescribeKubernetesTemplateResponse = {
  headers: map[string]string(name='headers'),
}

async function describeKubernetesTemplate(request: DescribeKubernetesTemplateRequest): DescribeKubernetesTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeKubernetesTemplate', 'GET', '/k8s/templates/{ClusterId}', 'none', false, 'json', request);
}

model DescribeKubernetesTemplatesRequest {
  kubernetesVersion?: string(name='KubernetesVersion', position='Query'),
  region?: string(name='Region', position='Query'),
}

model DescribeKubernetesTemplatesResponse = {
  headers: map[string]string(name='headers'),
}

async function describeKubernetesTemplates(request: DescribeKubernetesTemplatesRequest): DescribeKubernetesTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeKubernetesTemplates', 'GET', '/k8s/templates', 'none', false, 'json', request);
}

model DescribeServiceContainersRequest {
  clusterId: string(name='ClusterId', position='Path'),
  serviceId: string(name='ServiceId', position='Path'),
}

model DescribeServiceContainersResponse = {
  headers: map[string]string(name='headers'),
}

async function describeServiceContainers(request: DescribeServiceContainersRequest): DescribeServiceContainersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeServiceContainers', 'GET', '/clusters/{ClusterId}/services/{ServiceId}/containers', 'none', false, 'json', request);
}

model DescribeTaskInfoRequest {
  taskId: string(name='TaskId', position='Path'),
}

model DescribeTaskInfoResponse = {
  headers: map[string]string(name='headers'),
}

async function describeTaskInfo(request: DescribeTaskInfoRequest): DescribeTaskInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeTaskInfo', 'GET', '/tasks/{TaskId}', 'none', false, 'json', request);
}

model DescribeTemplateAttributeRequest {
  templateId: string(name='TemplateId', position='Path'),
}

model DescribeTemplateAttributeResponse = {
  headers: map[string]string(name='headers'),
}

async function describeTemplateAttribute(request: DescribeTemplateAttributeRequest): DescribeTemplateAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeTemplateAttribute', 'GET', '/templates/{TemplateId}', 'none', false, 'json', request);
}

model DescribeTemplatesRequest {
}

model DescribeTemplatesResponse = {
  headers: map[string]string(name='headers'),
}

async function describeTemplates(request: DescribeTemplatesRequest): DescribeTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeTemplates', 'GET', '/templates', 'none', false, 'json', request);
}

model DescribeUserContainersRequest {
  regionId: string(name='RegionId', position='Path'),
  serviceId?: string(name='ServiceId', position='Query'),
}

model DescribeUserContainersResponse = {
  headers: map[string]string(name='headers'),
}

async function describeUserContainers(request: DescribeUserContainersRequest): DescribeUserContainersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeUserContainers', 'GET', '/region/{RegionId}/containers', 'none', false, 'json', request);
}

model DownloadClusterNodeCertsRequest {
  token: string(name='Token', position='Path'),
  nodeId: string(name='NodeId', position='Path'),
}

model DownloadClusterNodeCertsResponse = {
  headers: map[string]string(name='headers'),
}

async function downloadClusterNodeCerts(request: DownloadClusterNodeCertsRequest): DownloadClusterNodeCertsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DownloadClusterNodeCerts', 'GET', '/token/{Token}/nodes/{NodeId}/certs', 'none', false, 'json', request);
}

model GatherLogsTokenRequest {
  token: string(name='Token', position='Path'),
}

model GatherLogsTokenResponse = {
  headers: map[string]string(name='headers'),
}

async function gatherLogsToken(request: GatherLogsTokenRequest): GatherLogsTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GatherLogsToken', 'POST', '/token/{Token}/gather_logs', 'none', false, 'json', request);
}

model GetClusterProjectsRequest {
  clusterId: string(name='ClusterId', position='Path'),
}

model GetClusterProjectsResponse = {
  headers: map[string]string(name='headers'),
}

async function getClusterProjects(request: GetClusterProjectsRequest): GetClusterProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetClusterProjects', 'GET', '/clusters/{ClusterId}/projects', 'none', false, 'json', request);
}

model GetProjectEventsRequest {
  clusterId: string(name='ClusterId', position='Path'),
  projectId: string(name='ProjectId', position='Path'),
}

model GetProjectEventsResponse = {
  headers: map[string]string(name='headers'),
}

async function getProjectEvents(request: GetProjectEventsRequest): GetProjectEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProjectEvents', 'GET', '/clusters/{ClusterId}/projects/{ProjectId}/events', 'none', false, 'json', request);
}

model GetTriggerHookRequest {
  clusterId: string(name='ClusterId', position='Path'),
  projectId: string(name='ProjectId', position='Path'),
}

model GetTriggerHookResponse = {
  headers: map[string]string(name='headers'),
}

async function getTriggerHook(request: GetTriggerHookRequest): GetTriggerHookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTriggerHook', 'GET', '/hook/trigger/{ClusterId}/{ProjectId}', 'none', false, 'json', request);
}

