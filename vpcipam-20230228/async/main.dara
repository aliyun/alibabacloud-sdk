/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'VpcIpam';
  @version = '2023-02-28';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddIpamPoolCidrRequest {
  cidr: string(name='Cidr', example='192.168.1.0/24', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ipamPoolId: string(name='IpamPoolId', example='ipam-pool-6rcq3tobayc20t****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model AddIpamPoolCidrResponseBody = {
  requestId?: string(name='RequestId', example='558BC336-8B88-53B0-B4AD-980EE900AB01'),
}

model AddIpamPoolCidrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddIpamPoolCidrResponseBody(name='body'),
}

async function addIpamPoolCidr(request: AddIpamPoolCidrRequest): AddIpamPoolCidrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddIpamPoolCidr', 'POST', '/', 'json', false, 'json', request);
}

model ChangeResourceGroupRequest {
  newResourceGroupId: string(name='NewResourceGroupId', example='rg-aek3ctkufaw****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId: string(name='ResourceId', example='ipam-uq5dcfc2eqhpf4****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', example='ipam', position='Query'),
}

model ChangeResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='BB2C39DE-CEB8-595A-981A-F2EFCBE7324E'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateIpamRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ipamDescription?: string(name='IpamDescription', example='This is my first Ipam', position='Query'),
  ipamName?: string(name='IpamName', example='abc', position='Query'),
  operatingRegionList?: [ string ](name='OperatingRegionList', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph6aiy****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateIpamResponseBody = {
  ipamId?: string(name='IpamId', example='ipam-ccxbnsbhew0d6t****'),
  privateDefaultScopeId?: string(name='PrivateDefaultScopeId', example='ipam-scope-8wiontzmiy6cg0****'),
  publicDefaultScopeId?: string(name='PublicDefaultScopeId', example='ipam-scope-r5c5c7bmym1brc****'),
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED39DCAC0'),
}

model CreateIpamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIpamResponseBody(name='body'),
}

async function createIpam(request: CreateIpamRequest): CreateIpamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIpam', 'POST', '/', 'json', false, 'json', request);
}

model CreateIpamPoolRequest {
  allocationDefaultCidrMask?: int32(name='AllocationDefaultCidrMask', example='28', position='Query'),
  allocationMaxCidrMask?: int32(name='AllocationMaxCidrMask', example='32', position='Query'),
  allocationMinCidrMask?: int32(name='AllocationMinCidrMask', example='8', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ipVersion?: string(name='IpVersion', example='IPv4', position='Query'),
  ipamPoolDescription?: string(name='IpamPoolDescription', example='test description', position='Query'),
  ipamPoolName?: string(name='IpamPoolName', example='abc', position='Query'),
  ipamScopeId: string(name='IpamScopeId', example='ipam-scope-glfmcyldpm8lsy****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolRegionId?: string(name='PoolRegionId', example='cn-hangzhou', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIpamPoolId?: string(name='SourceIpamPoolId', example='ipam-pool-6rcq3tobayc20t****', position='Query'),
}

model CreateIpamPoolResponseBody = {
  ipamPoolId?: string(name='IpamPoolId', example='ipam-pool-6rcq3tobayc20t****'),
  requestId?: string(name='RequestId', example='BB2C39DE-CEB8-595A-981A-F2EFCBE7324E'),
}

model CreateIpamPoolResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIpamPoolResponseBody(name='body'),
}

async function createIpamPool(request: CreateIpamPoolRequest): CreateIpamPoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIpamPool', 'POST', '/', 'json', false, 'json', request);
}

model CreateIpamPoolAllocationRequest {
  cidr?: string(name='Cidr', example='192.168.1.0/24', position='Query'),
  cidrMask?: int32(name='CidrMask', example='24', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ipamPoolId: string(name='IpamPoolId', example='ipam-pool-6rcq3tobayc20t****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model CreateIpamPoolAllocationResponseBody = {
  cidr?: string(name='Cidr', example='192.168.1.0/24'),
  ipamPoolAllocationId?: string(name='IpamPoolAllocationId', example='ipam-pool-alloc-112za33e4****'),
  requestId?: string(name='RequestId', example='CE9CDAE5-341E-5D0B-AC8A-2BAC707D3EB2'),
  sourceCidr?: string(name='SourceCidr', example='192.168.0.0/16'),
}

model CreateIpamPoolAllocationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIpamPoolAllocationResponseBody(name='body'),
}

async function createIpamPoolAllocation(request: CreateIpamPoolAllocationRequest): CreateIpamPoolAllocationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIpamPoolAllocation', 'POST', '/', 'json', false, 'json', request);
}

model CreateIpamScopeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ipamId: string(name='IpamId', example='ipam-ccxbnsbhew0d6t****', position='Query'),
  ipamScopeDescription?: string(name='IpamScopeDescription', example='test description', position='Query'),
  ipamScopeName?: string(name='IpamScopeName', example='test', position='Query'),
  ipamScopeType?: string(name='IpamScopeType', example='private', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateIpamScopeResponseBody = {
  ipamScopeId?: string(name='IpamScopeId', example='ipam-scope-glfmcyldpm8lsy****'),
  requestId?: string(name='RequestId', example='E897D16A-50EB-543F-B002-C5A26AB818FF'),
}

model CreateIpamScopeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIpamScopeResponseBody(name='body'),
}

async function createIpamScope(request: CreateIpamScopeRequest): CreateIpamScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIpamScope', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIpamRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ipamId: string(name='IpamId', example='ipam-ccxbnsbhew0d6t****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteIpamResponseBody = {
  requestId?: string(name='RequestId', example='30A20EE2-6223-5D0F-BF49-D7C78F206063'),
}

model DeleteIpamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIpamResponseBody(name='body'),
}

async function deleteIpam(request: DeleteIpamRequest): DeleteIpamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIpam', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIpamPoolRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ipamPoolId: string(name='IpamPoolId', example='ipam-pool-6rcq3tobayc20t****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteIpamPoolResponseBody = {
  requestId?: string(name='RequestId', example='57B7DCCA-F192-5528-8AF3-2FE1413228C9'),
}

model DeleteIpamPoolResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIpamPoolResponseBody(name='body'),
}

async function deleteIpamPool(request: DeleteIpamPoolRequest): DeleteIpamPoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIpamPool', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIpamPoolAllocationRequest {
  cidr?: string(name='Cidr', example='192.168.1.0/32', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ipamPoolAllocationId: string(name='IpamPoolAllocationId', example='ipam-alloc-c4vhvr3b22mmc6****', position='Query'),
  ipamPoolId?: string(name='IpamPoolId', example='ipam-pool-6rcq3tobayc20t****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteIpamPoolAllocationResponseBody = {
  requestId?: string(name='RequestId', example='B90776C8-F703-51D5-893A-AD1CA699D535'),
}

model DeleteIpamPoolAllocationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIpamPoolAllocationResponseBody(name='body'),
}

async function deleteIpamPoolAllocation(request: DeleteIpamPoolAllocationRequest): DeleteIpamPoolAllocationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIpamPoolAllocation', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIpamPoolCidrRequest {
  cidr: string(name='Cidr', example='192.168.1.0/24', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ipamPoolId: string(name='IpamPoolId', example='ipam-pool-6rcq3tobayc20t****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteIpamPoolCidrResponseBody = {
  requestId?: string(name='RequestId', example='F28A239E-F88D-500E-ADE7-FA5E8CA3A170'),
}

model DeleteIpamPoolCidrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIpamPoolCidrResponseBody(name='body'),
}

async function deleteIpamPoolCidr(request: DeleteIpamPoolCidrRequest): DeleteIpamPoolCidrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIpamPoolCidr', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIpamScopeRequest {
  clientToken?: string(name='ClientToken', example='88144bdb-b190-4813-a3f5-66cc86694162', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ipamScopeId: string(name='IpamScopeId', example='ipam-scope-glfmcyldpm8lsy****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteIpamScopeResponseBody = {
  requestId?: string(name='RequestId', example='9F8315CB-560E-5F1E-B069-6E44B440CAF8'),
}

model DeleteIpamScopeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIpamScopeResponseBody(name='body'),
}

async function deleteIpamScope(request: DeleteIpamScopeRequest): DeleteIpamScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIpamScope', 'POST', '/', 'json', false, 'json', request);
}

model GetVpcIpamServiceStatusRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetVpcIpamServiceStatusResponseBody = {
  enabled?: boolean(name='Enabled', example='true'),
  requestId?: string(name='RequestId', example='2FEE9FFF-57EE-5832-BE88-9308352F3B68'),
}

model GetVpcIpamServiceStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVpcIpamServiceStatusResponseBody(name='body'),
}

async function getVpcIpamServiceStatus(request: GetVpcIpamServiceStatusRequest): GetVpcIpamServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVpcIpamServiceStatus', 'POST', '/', 'json', false, 'json', request);
}

model ListIpamPoolAllocationsRequest {
  cidr?: string(name='Cidr', example='192.168.1.0/24', position='Query'),
  ipamPoolAllocationIds?: [ string ](name='IpamPoolAllocationIds', position='Query'),
  ipamPoolId?: string(name='IpamPoolId', example='ipam-pool-6rcq3tobayc20t****', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListIpamPoolAllocationsResponseBody = {
  ipamPoolAllocations?: [ 
    {
      cidr?: string(name='Cidr', example='192.168.1.0/24'),
      creationTime?: string(name='CreationTime', example='2023-05-19T08:59:18Z'),
      ipamPoolAllocationId?: string(name='IpamPoolAllocationId', example='ipam-pool-alloc-112za33e4****'),
      ipamPoolId?: string(name='IpamPoolId', example='ipam-pool-6rcq3tobayc20t****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceId?: string(name='ResourceId', example='vpc-bp16qjewdsunr41m1****'),
      resourceOwnerId?: long(name='ResourceOwnerId', example='132193271328****'),
      resourceRegionId?: string(name='ResourceRegionId', example='cn-hangzhou'),
      resourceType?: string(name='ResourceType', example='Custom'),
      sourceCidr?: string(name='SourceCidr', example='192.168.0.0/16'),
      status?: string(name='Status', example='Created'),
    }
  ](name='IpamPoolAllocations'),
  maxResults?: long(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='3748DEFF-68BE-5EED-9937-7C1D0C21BAB4'),
  totalCount?: long(name='TotalCount', example='1000'),
}

model ListIpamPoolAllocationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIpamPoolAllocationsResponseBody(name='body'),
}

async function listIpamPoolAllocations(request: ListIpamPoolAllocationsRequest): ListIpamPoolAllocationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIpamPoolAllocations', 'POST', '/', 'json', false, 'json', request);
}

model ListIpamPoolCidrsRequest {
  cidr?: string(name='Cidr', example='192.168.1.0/24', position='Query'),
  ipamPoolId: string(name='IpamPoolId', example='ipam-pool-6rcq3tobayc20t****', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListIpamPoolCidrsResponseBody = {
  ipamPoolCidrs?: [ 
    {
      cidr?: string(name='Cidr', example='192.168.1.0/24'),
      ipamPoolId?: string(name='IpamPoolId', example='ipam-pool-6rcq3tobayc20t****'),
      status?: string(name='Status', example='Created'),
    }
  ](name='IpamPoolCidrs'),
  maxResults?: long(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='9E7CCB95-62E0-534D-9B9A-71F27E8B71B1'),
  totalCount?: long(name='TotalCount', example='1000'),
}

model ListIpamPoolCidrsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIpamPoolCidrsResponseBody(name='body'),
}

async function listIpamPoolCidrs(request: ListIpamPoolCidrsRequest): ListIpamPoolCidrsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIpamPoolCidrs', 'POST', '/', 'json', false, 'json', request);
}

model ListIpamPoolsRequest {
  ipamPoolIds?: [ string ](name='IpamPoolIds', position='Query'),
  ipamPoolName?: string(name='IpamPoolName', example='test', position='Query'),
  ipamScopeId?: string(name='IpamScopeId', example='ipam-scope-glfmcyldpm8lsy****', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolRegionId?: string(name='PoolRegionId', example='cn-hangzhou', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aek2sermdd6****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIpamPoolId?: string(name='SourceIpamPoolId', example='ipam-pool-lfnwi4jok1ss0g****', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tags', position='Query'),
}

model ListIpamPoolsResponseBody = {
  ipamPools?: [ 
    {
      allocationDefaultCidrMask?: int32(name='AllocationDefaultCidrMask', example='28'),
      allocationMaxCidrMask?: int32(name='AllocationMaxCidrMask', example='32'),
      allocationMinCidrMask?: int32(name='AllocationMinCidrMask', example='8'),
      createTime?: string(name='CreateTime', example='2023-04-19T16:49:01Z'),
      hasSubPool?: boolean(name='HasSubPool', example='true'),
      ipVersion?: string(name='IpVersion', example='IPv4'),
      ipamId?: string(name='IpamId', example='ipam-b5mtlx3q7xcnyr****'),
      ipamPoolDescription?: string(name='IpamPoolDescription', example='test description'),
      ipamPoolId?: string(name='IpamPoolId', example='ipam-pool-6rcq3tobayc20t****'),
      ipamPoolName?: string(name='IpamPoolName', example='test'),
      ipamRegionId?: string(name='IpamRegionId', example='cn-hangzhou'),
      ipamScopeId?: string(name='IpamScopeId', example='ipam-scope-glfmcyldpm8lsy****'),
      ipamScopeType?: string(name='IpamScopeType', example='private'),
      ownerId?: long(name='OwnerId', example='1210123456******'),
      poolDepth?: int32(name='PoolDepth', example='2'),
      poolRegionId?: string(name='PoolRegionId', example='cn-hangzhou'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      sourceIpamPoolId?: string(name='SourceIpamPoolId', example='ipam-pool-lfnwi4jok1ss0g****'),
      status?: string(name='Status', example='Created'),
      tags?: [ 
        {
          key?: string(name='Key', example='FinanceDept'),
          value?: string(name='Value', example='FinanceJoshua'),
        }
      ](name='Tags'),
    }
  ](name='IpamPools'),
  maxResults?: long(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='B54867DE-83DC-56B4-A57E-69A03119D0B1'),
  totalCount?: long(name='TotalCount', example='1000'),
}

model ListIpamPoolsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIpamPoolsResponseBody(name='body'),
}

async function listIpamPools(request: ListIpamPoolsRequest): ListIpamPoolsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIpamPools', 'POST', '/', 'json', false, 'json', request);
}

model ListIpamResourceCidrsRequest {
  ipamPoolId?: string(name='IpamPoolId', example='ipam-pool-6rcq3tobayc20t****', position='Query'),
  ipamScopeId?: string(name='IpamScopeId', example='ipam-scope-glfmcyldpm8lsy****', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId?: string(name='ResourceId', example='vpc-bp16qjewdsunr41m1****', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', example='VPC', position='Query'),
}

model ListIpamResourceCidrsResponseBody = {
  ipamResourceCidrs?: [ 
    {
      aliUid?: long(name='AliUid', example='132193271328****'),
      cidr?: string(name='Cidr', example='192.168.1.0/32'),
      complianceStatus?: string(name='ComplianceStatus', example='Compliant'),
      ipUsage?: string(name='IpUsage', example='0'),
      ipamAllocationId?: string(name='IpamAllocationId', example='ipam-pool-alloc-112za33e4****'),
      ipamId?: string(name='IpamId', example='ipam-uq5dcfc2eqhpf4****'),
      ipamPoolId?: string(name='IpamPoolId', example='ipam-pool-6rcq3tobayc20t***'),
      ipamScopeId?: string(name='IpamScopeId', example='ipam-scope-glfmcyldpm8lsy****'),
      managementStatus?: string(name='ManagementStatus', example='Managed'),
      overlapStatus?: string(name='OverlapStatus', example='Nonoverlapping'),
      resourceId?: string(name='ResourceId', example='vpc-bp16qjewdsunr41m1****'),
      resourceOwnerId?: long(name='ResourceOwnerId', example='132193271328****'),
      resourceRegionId?: string(name='ResourceRegionId', example='cn-hangzhou'),
      resourceType?: string(name='ResourceType', example='VPC'),
      sourceCidr?: string(name='SourceCidr', example='192.168.1.0/24'),
      status?: string(name='Status', example='Created'),
    }
  ](name='IpamResourceCidrs'),
  maxResults?: long(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='49A9DE56-B68C-5FFC-BC06-509D086F287C'),
  totalCount?: long(name='TotalCount', example='1000'),
}

model ListIpamResourceCidrsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIpamResourceCidrsResponseBody(name='body'),
}

async function listIpamResourceCidrs(request: ListIpamResourceCidrsRequest): ListIpamResourceCidrsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIpamResourceCidrs', 'POST', '/', 'json', false, 'json', request);
}

model ListIpamScopesRequest {
  ipamId?: string(name='IpamId', example='ipam-ccxbnsbhew0d6t****', position='Query'),
  ipamScopeIds?: [ string ](name='IpamScopeIds', position='Query'),
  ipamScopeName?: string(name='IpamScopeName', example='test', position='Query'),
  ipamScopeType?: string(name='IpamScopeType', example='private', position='Query'),
  maxResults?: long(name='MaxResults', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aek2sermdd6****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tags', position='Query'),
}

model ListIpamScopesResponseBody = {
  ipamScopes?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-04-18T03:12:37Z'),
      ipamId?: string(name='IpamId', example='ipam-ccxbnsbhew0d6t****'),
      ipamScopeDescription?: string(name='IpamScopeDescription', example='test description'),
      ipamScopeId?: string(name='IpamScopeId', example='ipam-scope-glfmcyldpm8lsy****'),
      ipamScopeName?: string(name='IpamScopeName', example='test'),
      ipamScopeType?: string(name='IpamScopeType', example='private'),
      isDefault?: boolean(name='IsDefault', example='true'),
      ownerId?: long(name='OwnerId', example='1210123456******'),
      poolCount?: int32(name='PoolCount', example='2'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      status?: string(name='Status', example='Created'),
      tags?: [ 
        {
          key?: string(name='Key', example='FinanceDept'),
          value?: string(name='Value', example='FinanceDept'),
        }
      ](name='Tags'),
    }
  ](name='IpamScopes'),
  maxResults?: long(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='8859C501-97E7-53D4-B94B-2A9E16003B22'),
  totalCount?: long(name='TotalCount', example='1000'),
}

model ListIpamScopesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIpamScopesResponseBody(name='body'),
}

async function listIpamScopes(request: ListIpamScopesRequest): ListIpamScopesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIpamScopes', 'POST', '/', 'json', false, 'json', request);
}

model ListIpamsRequest {
  ipamIds?: [ string ](name='IpamIds', position='Query'),
  ipamName?: string(name='IpamName', example='test', position='Query'),
  maxResults?: long(name='MaxResults', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aek2sermdd6****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tags', position='Query'),
}

model ListIpamsResponseBody = {
  ipams?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-07-01T02:05:23Z'),
      ipamDescription?: string(name='IpamDescription', example='test description'),
      ipamId?: string(name='IpamId', example='ipam-ccxbnsbhew0d6t****'),
      ipamName?: string(name='IpamName', example='test'),
      ipamStatus?: string(name='IpamStatus', example='Created'),
      operatingRegionList?: [ string ](name='OperatingRegionList'),
      ownerId?: long(name='OwnerId', example='1210123456******'),
      privateDefaultScopeId?: string(name='PrivateDefaultScopeId', example='ipam-scope-okoerbco6unqfr****'),
      publicDefaultScopeId?: string(name='PublicDefaultScopeId', example='ipam-scope-ovb76p1g1m19dr****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-aek2dbprgpt****'),
      scopeCount?: int32(name='ScopeCount', example='2'),
      tags?: [ 
        {
          key?: string(name='Key', example='FinanceDept'),
          value?: string(name='Value', example='FinanceJoshua'),
        }
      ](name='Tags'),
    }
  ](name='Ipams'),
  maxResults?: long(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='23CA0A0B-B0F5-5495-B355-7D9A9203A46B'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListIpamsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIpamsResponseBody(name='body'),
}

async function listIpams(request: ListIpamsRequest): ListIpamsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIpams', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  maxResults?: int32(name='MaxResults', example='20', maximum=50, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', example='IPAM', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='672053AB-90C9-5693-AB96-458F137A5ED6'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', example='ipam-uq5dcfc2eqhpf4****'),
      resourceType?: string(name='ResourceType', example='IPAM'),
      tagKey?: string(name='TagKey', example='FinanceDept'),
      tagValue?: string(name='TagValue', example='FinanceJoshua'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model OpenVpcIpamServiceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model OpenVpcIpamServiceResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='3F814C37-B032-5477-AF5A-2925D0593CD4'),
}

model OpenVpcIpamServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenVpcIpamServiceResponseBody(name='body'),
}

async function openVpcIpamService(request: OpenVpcIpamServiceRequest): OpenVpcIpamServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenVpcIpamService', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-beijing', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', example='IPAM', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='BF872550-9700-52FD-839C-4D3F05543FA8'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', example='IPAM', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='44C884BD-2D56-5637-A523-1FA920A01E7D'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateIpamRequest {
  addOperatingRegion?: [ string ](name='AddOperatingRegion', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ipamDescription?: string(name='IpamDescription', example='test description', position='Query'),
  ipamId: string(name='IpamId', example='ipam-ccxbnsbhew0d6t****', position='Query'),
  ipamName?: string(name='IpamName', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  removeOperatingRegion?: [ string ](name='RemoveOperatingRegion', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdateIpamResponseBody = {
  requestId?: string(name='RequestId', example='F4650E33-895C-53F0-9CD5-D1338F322DE8'),
}

model UpdateIpamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateIpamResponseBody(name='body'),
}

async function updateIpam(request: UpdateIpamRequest): UpdateIpamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateIpam', 'POST', '/', 'json', false, 'json', request);
}

model UpdateIpamPoolRequest {
  allocationDefaultCidrMask?: int32(name='AllocationDefaultCidrMask', example='28', position='Query'),
  allocationMaxCidrMask?: int32(name='AllocationMaxCidrMask', example='32', position='Query'),
  allocationMinCidrMask?: int32(name='AllocationMinCidrMask', example='8', position='Query'),
  clearAllocationDefaultCidrMask?: boolean(name='ClearAllocationDefaultCidrMask', example='true', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ipamPoolDescription?: string(name='IpamPoolDescription', example='test description', position='Query'),
  ipamPoolId: string(name='IpamPoolId', example='ipam-pool-6rcq3tobayc20t****', position='Query'),
  ipamPoolName?: string(name='IpamPoolName', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdateIpamPoolResponseBody = {
  requestId?: string(name='RequestId', example='9DED57B9-7654-5B6D-93F7-BCA5839FEE38'),
}

model UpdateIpamPoolResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateIpamPoolResponseBody(name='body'),
}

async function updateIpamPool(request: UpdateIpamPoolRequest): UpdateIpamPoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateIpamPool', 'POST', '/', 'json', false, 'json', request);
}

model UpdateIpamScopeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ipamScopeDescription?: string(name='IpamScopeDescription', example='test description', position='Query'),
  ipamScopeId: string(name='IpamScopeId', example='ipam-scope-glfmcyldpm8lsy****', position='Query'),
  ipamScopeName?: string(name='IpamScopeName', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdateIpamScopeResponseBody = {
  requestId?: string(name='RequestId', example='BA8054F5-852A-570A-ACFF-BCA63E0B02D5'),
}

model UpdateIpamScopeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateIpamScopeResponseBody(name='body'),
}

async function updateIpamScope(request: UpdateIpamScopeRequest): UpdateIpamScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateIpamScope', 'POST', '/', 'json', false, 'json', request);
}

