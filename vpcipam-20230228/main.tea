/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('vpcipam', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddIpamPoolCidrRequest {
  cidr?: string(name='Cidr', description='The CIDR block that you want to provision.

>  Only IPv4 CIDR blocks are supported.

This parameter is required.', example='192.168.1.0/24'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  ipamPoolId?: string(name='IpamPoolId', description='The ID of the IPAM pool.

This parameter is required.', example='ipam-pool-6rcq3tobayc20t****'),
  regionId?: string(name='RegionId', description='The ID of the region where the IPAM instance is hosted.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou'),
}

model AddIpamPoolCidrResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='558BC336-8B88-53B0-B4AD-980EE900AB01'),
}

model AddIpamPoolCidrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddIpamPoolCidrResponseBody(name='body'),
}

/**
 * @summary Provisions a CIDR block to an IP Address Manager (IPAM) pool.
 *
 * @description *   Before you provision a CIDR block, make sure that an IPAM pool is created. You can call the **CreateIpamPool** operation to create an IPAM pool.
 * *   If no CIDR block is provisioned to a parent pool, you cannot provision CIDR blocks to its subpools.
 * *   If a CIDR block is provisioned to a parent pool, you can provision CIDR blocks to its subpools and the CIDR blocks must be subsets of the CIDR block provisioned to the parent pool.
 * *   If a CIDR block is provisioned to a parent pool and allocations are created, CIDR blocks provisioned to its subpools cannot overlap with existing allocated CIDR blocks.
 * *   You can provision CIDR blocks to a pool only in the region where the IPAM is hosted.
 * *   CIDR blocks provisioned to an IPAM pool cannot overlap with the CIDR blocks provisioned to other pools in the same scope.
 * *   You can provision at most 50 CIDR blocks to each pool.
 *
 * @param request AddIpamPoolCidrRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddIpamPoolCidrResponse
 */
async function addIpamPoolCidrWithOptions(request: AddIpamPoolCidrRequest, runtime: Util.RuntimeOptions): AddIpamPoolCidrResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cidr)) {
    query['Cidr'] = request.cidr;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipamPoolId)) {
    query['IpamPoolId'] = request.ipamPoolId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddIpamPoolCidr',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Provisions a CIDR block to an IP Address Manager (IPAM) pool.
 *
 * @description *   Before you provision a CIDR block, make sure that an IPAM pool is created. You can call the **CreateIpamPool** operation to create an IPAM pool.
 * *   If no CIDR block is provisioned to a parent pool, you cannot provision CIDR blocks to its subpools.
 * *   If a CIDR block is provisioned to a parent pool, you can provision CIDR blocks to its subpools and the CIDR blocks must be subsets of the CIDR block provisioned to the parent pool.
 * *   If a CIDR block is provisioned to a parent pool and allocations are created, CIDR blocks provisioned to its subpools cannot overlap with existing allocated CIDR blocks.
 * *   You can provision CIDR blocks to a pool only in the region where the IPAM is hosted.
 * *   CIDR blocks provisioned to an IPAM pool cannot overlap with the CIDR blocks provisioned to other pools in the same scope.
 * *   You can provision at most 50 CIDR blocks to each pool.
 *
 * @param request AddIpamPoolCidrRequest
 * @return AddIpamPoolCidrResponse
 */
async function addIpamPoolCidr(request: AddIpamPoolCidrRequest): AddIpamPoolCidrResponse {
  var runtime = new Util.RuntimeOptions{};
  return addIpamPoolCidrWithOptions(request, runtime);
}

model AssociateIpamResourceDiscoveryRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform the dry run. Valid values:

*   **true**: Performs a dry run without associating the resource discovery and IPAM instance. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the DryRunOperation error code is returned.
*   **false** (default): performs a dry run and sends the request. After the request passes the check, an HTTP 2xx status code is returned and the resource discovery and IPAM instances are associated.', example='false'),
  ipamId?: string(name='IpamId', description='The ID of the IPAM.

This parameter is required.', example='ipam-ccxbnsbhew0d6t****'),
  ipamResourceDiscoveryId?: string(name='IpamResourceDiscoveryId', description='The ID of resource discovery instance.

This parameter is required.', example='ipam-res-disco-jt5f2af2u6nk2z321****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The request region.

This parameter is required.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AssociateIpamResourceDiscoveryResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='E897D16A-50EB-543F-B002-C5A26AB818FF'),
}

model AssociateIpamResourceDiscoveryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssociateIpamResourceDiscoveryResponseBody(name='body'),
}

/**
 * @summary Associates resource discovery with an IPAM instance.
 *
 * @description *   The specified resource discovery instance can only be associated with one IPAM instance and associations cannot be duplicated.
 *
 * @param request AssociateIpamResourceDiscoveryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AssociateIpamResourceDiscoveryResponse
 */
async function associateIpamResourceDiscoveryWithOptions(request: AssociateIpamResourceDiscoveryRequest, runtime: Util.RuntimeOptions): AssociateIpamResourceDiscoveryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipamId)) {
    query['IpamId'] = request.ipamId;
  }
  if (!Util.isUnset(request.ipamResourceDiscoveryId)) {
    query['IpamResourceDiscoveryId'] = request.ipamResourceDiscoveryId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateIpamResourceDiscovery',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Associates resource discovery with an IPAM instance.
 *
 * @description *   The specified resource discovery instance can only be associated with one IPAM instance and associations cannot be duplicated.
 *
 * @param request AssociateIpamResourceDiscoveryRequest
 * @return AssociateIpamResourceDiscoveryResponse
 */
async function associateIpamResourceDiscovery(request: AssociateIpamResourceDiscoveryRequest): AssociateIpamResourceDiscoveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateIpamResourceDiscoveryWithOptions(request, runtime);
}

model ChangeResourceGroupRequest {
  newResourceGroupId?: string(name='NewResourceGroupId', description='The ID of the new resource group.

This parameter is required.', example='rg-aek3ctkufaw****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region where the IPAM instance is hosted. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', description='The ID of the IPAM resource.

This parameter is required.', example='ipam-uq5dcfc2eqhpf4****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='Resource type, with values:

- Ipam:IPAM instance

- IpamScope:IPAM scope

- IpamPool:IPAM address pool

- IpamResourceDiscovery:IPAM resource discovery

This parameter is required.', example='ipam'),
}

model ChangeResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='BB2C39DE-CEB8-595A-981A-F2EFCBE7324E'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceGroupResponseBody(name='body'),
}

/**
 * @summary Changes the resource group of an IPAM resource.
 *
 * @param request ChangeResourceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ChangeResourceGroupResponse
 */
async function changeResourceGroupWithOptions(request: ChangeResourceGroupRequest, runtime: Util.RuntimeOptions): ChangeResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.newResourceGroupId)) {
    query['NewResourceGroupId'] = request.newResourceGroupId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeResourceGroup',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Changes the resource group of an IPAM resource.
 *
 * @param request ChangeResourceGroupRequest
 * @return ChangeResourceGroupResponse
 */
async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeResourceGroupWithOptions(request, runtime);
}

model CreateIpamRequest {
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request. Use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  ipamDescription?: string(name='IpamDescription', description='The description of the IPAM.

It must be 1 to 256 characters in length. Start with a letter but cannot start with `http://` or `https://`. If you do not specify a description, the description is empty by default.', example='This is my first Ipam'),
  ipamName?: string(name='IpamName', description='The name of the IPAM.

It must be 1 to 128 characters in length and cannot start with `http://` or `https://`.', example='abc'),
  operatingRegionList?: [ string ](name='OperatingRegionList', description='The effective regions of the IPAM.

This parameter is required.'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region where the IPAM instance is hosted. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID of the IPAM.', example='rg-acfmxazb4ph6aiy****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key of the resource. You can specify at most 20 tag keys. It cannot be an empty string.

The tag key can be up to 64 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It must start with a letter but cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value of the resource. You can specify up to 20 tag values. You can specify empty strings as tag values.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tag list.'),
}

model CreateIpamResponseBody = {
  defaultResourceDiscoveryAssociationId?: string(name='DefaultResourceDiscoveryAssociationId', description='The ID of the default resource discovery association.', example='ipam-res-disco-assoc-jt5fac8twugdbbgip****'),
  defaultResourceDiscoveryId?: string(name='DefaultResourceDiscoveryId', description='The ID of the default resource discovery instance.', example='ipam-res-disco-jt5f2af2u6nk2z321****'),
  ipamId?: string(name='IpamId', description='The ID of the IPAM.', example='ipam-ccxbnsbhew0d6t****'),
  privateDefaultScopeId?: string(name='PrivateDefaultScopeId', description='The default private scope created by the system after the IPAM is created.', example='ipam-scope-8wiontzmiy6cg0****'),
  publicDefaultScopeId?: string(name='PublicDefaultScopeId', description='The default public scope created by the system after the IPAM is created.', example='ipam-scope-r5c5c7bmym1brc****'),
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED39DCAC0'),
  resourceDiscoveryAssociationCount?: int32(name='ResourceDiscoveryAssociationCount', description='The number of discovered resources.', example='1'),
}

model CreateIpamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIpamResponseBody(name='body'),
}

/**
 * @summary Creates an IP Address Manager (IPAM).
 *
 * @description - You can create only one IPAM with each Alibaba Cloud account in each region.
 * - Only IPv4 IP addresses can be allocated.
 * - When you create an IPAM instance:
 *     - If there is no custom resource discovery in the region, the system creates a default resource discovery associated with the IPAM instance.
 *     - If there is a custom resource discovery in the region, the system converts it to a default resource discovery and associates it with the IPAM instance.
 *
 * @param request CreateIpamRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateIpamResponse
 */
async function createIpamWithOptions(request: CreateIpamRequest, runtime: Util.RuntimeOptions): CreateIpamResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipamDescription)) {
    query['IpamDescription'] = request.ipamDescription;
  }
  if (!Util.isUnset(request.ipamName)) {
    query['IpamName'] = request.ipamName;
  }
  if (!Util.isUnset(request.operatingRegionList)) {
    query['OperatingRegionList'] = request.operatingRegionList;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateIpam',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates an IP Address Manager (IPAM).
 *
 * @description - You can create only one IPAM with each Alibaba Cloud account in each region.
 * - Only IPv4 IP addresses can be allocated.
 * - When you create an IPAM instance:
 *     - If there is no custom resource discovery in the region, the system creates a default resource discovery associated with the IPAM instance.
 *     - If there is a custom resource discovery in the region, the system converts it to a default resource discovery and associates it with the IPAM instance.
 *
 * @param request CreateIpamRequest
 * @return CreateIpamResponse
 */
async function createIpam(request: CreateIpamRequest): CreateIpamResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIpamWithOptions(request, runtime);
}

model CreateIpamPoolRequest {
  allocationDefaultCidrMask?: int32(name='AllocationDefaultCidrMask', description='The default network mask assigned to the IPAM pool.

An IPv4 mask must be **0 to 32** bits in length.', example='28'),
  allocationMaxCidrMask?: int32(name='AllocationMaxCidrMask', description='The maximum network mask assigned to the IPAM pool.

An IPv4 mask must be **0 to 32** bits in length.', example='32'),
  allocationMinCidrMask?: int32(name='AllocationMinCidrMask', description='The minimum network mask assigned to the IPAM pool.

An IPv4 mask must be **0 to 32** bits in length.', example='8'),
  autoImport?: boolean(name='AutoImport', description='Whether the pool has the auto-import feature enabled.', example='true'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  ipVersion?: string(name='IpVersion', description='The IP version. Only **IPv4** is supported.', example='IPv4'),
  ipamPoolDescription?: string(name='IpamPoolDescription', description='The description of the IPAM pool.

It must be 2 to 256 characters in length. It must start with a letter, but cannot start with a `http://` or `https://`. This parameter is empty by default.', example='test description'),
  ipamPoolName?: string(name='IpamPoolName', description='The name of the IPAM pool.

It must be 1 to 128 characters in length and cannot start with `http://` or `https://`.', example='abc'),
  ipamScopeId?: string(name='IpamScopeId', description='The ID of the IPAM scope.

This parameter is required.', example='ipam-scope-glfmcyldpm8lsy****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  poolRegionId?: string(name='PoolRegionId', description='The effective region of the IPAM pool.', example='cn-hangzhou'),
  regionId?: string(name='RegionId', description='The ID of the region where the IPAM instance is hosted. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxazb4ph6aiy****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIpamPoolId?: string(name='SourceIpamPoolId', description='The ID of the source IPAM pool.

>  If you do not specify this parameter, the pool is a parent pool.', example='ipam-pool-6rcq3tobayc20t****'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. You can specify at most 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 64 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The tag key must start with a letter but cannot start with `aliyun` or `acs:`. The tag key cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value. You can specify up to 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It cannot start with a `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tag list.'),
}

model CreateIpamPoolResponseBody = {
  ipamPoolId?: string(name='IpamPoolId', description='The ID of the IPAM pool.', example='ipam-pool-6rcq3tobayc20t****'),
  requestId?: string(name='RequestId', description='The request ID.', example='BB2C39DE-CEB8-595A-981A-F2EFCBE7324E'),
}

model CreateIpamPoolResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIpamPoolResponseBody(name='body'),
}

/**
 * @summary Creates an IP Address Manager (IPAM) pool.
 *
 * @param request CreateIpamPoolRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateIpamPoolResponse
 */
async function createIpamPoolWithOptions(request: CreateIpamPoolRequest, runtime: Util.RuntimeOptions): CreateIpamPoolResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocationDefaultCidrMask)) {
    query['AllocationDefaultCidrMask'] = request.allocationDefaultCidrMask;
  }
  if (!Util.isUnset(request.allocationMaxCidrMask)) {
    query['AllocationMaxCidrMask'] = request.allocationMaxCidrMask;
  }
  if (!Util.isUnset(request.allocationMinCidrMask)) {
    query['AllocationMinCidrMask'] = request.allocationMinCidrMask;
  }
  if (!Util.isUnset(request.autoImport)) {
    query['AutoImport'] = request.autoImport;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipVersion)) {
    query['IpVersion'] = request.ipVersion;
  }
  if (!Util.isUnset(request.ipamPoolDescription)) {
    query['IpamPoolDescription'] = request.ipamPoolDescription;
  }
  if (!Util.isUnset(request.ipamPoolName)) {
    query['IpamPoolName'] = request.ipamPoolName;
  }
  if (!Util.isUnset(request.ipamScopeId)) {
    query['IpamScopeId'] = request.ipamScopeId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.poolRegionId)) {
    query['PoolRegionId'] = request.poolRegionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIpamPoolId)) {
    query['SourceIpamPoolId'] = request.sourceIpamPoolId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateIpamPool',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates an IP Address Manager (IPAM) pool.
 *
 * @param request CreateIpamPoolRequest
 * @return CreateIpamPoolResponse
 */
async function createIpamPool(request: CreateIpamPoolRequest): CreateIpamPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIpamPoolWithOptions(request, runtime);
}

model CreateIpamPoolAllocationRequest {
  cidr?: string(name='Cidr', description='Enter a CIDR block to reserve a custom CIDR block.

**Usage notes** Specify at least one of **Cidr** and **CidrMask** .', example='192.168.1.0/24'),
  cidrMask?: int32(name='CidrMask', description='Enter a mask to reserve a custom CIDR block.

**Usage notes** Specify at least one of **Cidr** and **CidrMask** .', example='24'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

**Usage notes** If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  ipamPoolAllocationDescription?: string(name='IpamPoolAllocationDescription', description='The description of the allocation.', example='test description'),
  ipamPoolAllocationName?: string(name='IpamPoolAllocationName', description='The name of the allocation.', example='test name'),
  ipamPoolId?: string(name='IpamPoolId', description='The ID of the IPAM pool.

This parameter is required.', example='ipam-pool-6rcq3tobayc20t****'),
  regionId?: string(name='RegionId', description='The region ID of the custom CIDR block that you want to reserve.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou'),
}

model CreateIpamPoolAllocationResponseBody = {
  cidr?: string(name='Cidr', description='The custom reserved CIDR block.', example='192.168.1.0/24'),
  ipamPoolAllocationId?: string(name='IpamPoolAllocationId', description='The ID of the custom reserved CIDR block.', example='ipam-pool-alloc-112za33e4****'),
  requestId?: string(name='RequestId', description='The request ID.', example='CE9CDAE5-341E-5D0B-AC8A-2BAC707D3EB2'),
  sourceCidr?: string(name='SourceCidr', description='The source CIDR block.', example='192.168.0.0/16'),
}

model CreateIpamPoolAllocationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIpamPoolAllocationResponseBody(name='body'),
}

/**
 * @summary Reserves a custom CIDR block from an IP Address Manager (IPAM) pool.
 *
 * @description *   Before you reserve a custom CIDR block, make sure that an IPAM pool is created and CIDR blocks are added to the pool. You can call **CreateIpamPool** to create an IPAM pool and call **AddIpamPoolCidr** to add CIDR blocks to the pool.
 * *   When you specify Cidr or CidrMask to reserve a custom CIDR block, the mask must fall within the range specified by the IPAM pool.
 * *   If the IPAM pool has the region attribute, you must reserve a custom CIDR block in the region to which the IPAM pool belongs.
 * *   The custom CIDR block that you want to reserve cannot overlap with existing CIDR blocks created from the IPAM pool.
 *
 * @param request CreateIpamPoolAllocationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateIpamPoolAllocationResponse
 */
async function createIpamPoolAllocationWithOptions(request: CreateIpamPoolAllocationRequest, runtime: Util.RuntimeOptions): CreateIpamPoolAllocationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cidr)) {
    query['Cidr'] = request.cidr;
  }
  if (!Util.isUnset(request.cidrMask)) {
    query['CidrMask'] = request.cidrMask;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipamPoolAllocationDescription)) {
    query['IpamPoolAllocationDescription'] = request.ipamPoolAllocationDescription;
  }
  if (!Util.isUnset(request.ipamPoolAllocationName)) {
    query['IpamPoolAllocationName'] = request.ipamPoolAllocationName;
  }
  if (!Util.isUnset(request.ipamPoolId)) {
    query['IpamPoolId'] = request.ipamPoolId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateIpamPoolAllocation',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Reserves a custom CIDR block from an IP Address Manager (IPAM) pool.
 *
 * @description *   Before you reserve a custom CIDR block, make sure that an IPAM pool is created and CIDR blocks are added to the pool. You can call **CreateIpamPool** to create an IPAM pool and call **AddIpamPoolCidr** to add CIDR blocks to the pool.
 * *   When you specify Cidr or CidrMask to reserve a custom CIDR block, the mask must fall within the range specified by the IPAM pool.
 * *   If the IPAM pool has the region attribute, you must reserve a custom CIDR block in the region to which the IPAM pool belongs.
 * *   The custom CIDR block that you want to reserve cannot overlap with existing CIDR blocks created from the IPAM pool.
 *
 * @param request CreateIpamPoolAllocationRequest
 * @return CreateIpamPoolAllocationResponse
 */
async function createIpamPoolAllocation(request: CreateIpamPoolAllocationRequest): CreateIpamPoolAllocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIpamPoolAllocationWithOptions(request, runtime);
}

model CreateIpamResourceDiscoveryRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without sending the actual request. Valid value:

*   **true**: Performs the dry run without creating a custom resource discovery instance. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the DryRunOperation error code is returned.
*   **false** (default): Performs a dry run and the actual request. If the request passes the dry run, an HTTP 2xx status code is returned and a custom resource discovery instance is created.', example='false'),
  ipamResourceDiscoveryDescription?: string(name='IpamResourceDiscoveryDescription', description='The description of resource discovery.', example='description'),
  ipamResourceDiscoveryName?: string(name='IpamResourceDiscoveryName', description='The name of the resource discovery.', example='name'),
  operatingRegionList?: [ string ](name='OperatingRegionList', description='The list of effective regions.

This parameter is required.'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The request region.

>  The request region is the managed region of the resource discovery instance.

This parameter is required.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-aek2sermdd6****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag keys. You can specify at most 20 tag keys. It cannot be an empty string.

The tag key can be up to 64 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It must start with a letter but cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value of the resource. You can specify up to 20 tag values. You can specify empty strings as tag values.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tag information.'),
}

model CreateIpamResourceDiscoveryResponseBody = {
  ipamResourceDiscoveryId?: string(name='IpamResourceDiscoveryId', description='The ID of the instance for resource discovery.', example='ipam-res-disco-jt5f2af2u6nk2z321****'),
  requestId?: string(name='RequestId', description='The request ID.', example='BB2C39DE-CEB8-595A-981A-F2EFCBE7324E'),
}

model CreateIpamResourceDiscoveryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIpamResourceDiscoveryResponseBody(name='body'),
}

/**
 * @summary Creates a custom resource discovery instance.
 *
 * @description *   Each Alibaba Cloud account can create only one resource discovery instance in each region.
 * *   You can create only custom resource discovery instances.
 *
 * @param request CreateIpamResourceDiscoveryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateIpamResourceDiscoveryResponse
 */
async function createIpamResourceDiscoveryWithOptions(request: CreateIpamResourceDiscoveryRequest, runtime: Util.RuntimeOptions): CreateIpamResourceDiscoveryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipamResourceDiscoveryDescription)) {
    query['IpamResourceDiscoveryDescription'] = request.ipamResourceDiscoveryDescription;
  }
  if (!Util.isUnset(request.ipamResourceDiscoveryName)) {
    query['IpamResourceDiscoveryName'] = request.ipamResourceDiscoveryName;
  }
  if (!Util.isUnset(request.operatingRegionList)) {
    query['OperatingRegionList'] = request.operatingRegionList;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateIpamResourceDiscovery',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a custom resource discovery instance.
 *
 * @description *   Each Alibaba Cloud account can create only one resource discovery instance in each region.
 * *   You can create only custom resource discovery instances.
 *
 * @param request CreateIpamResourceDiscoveryRequest
 * @return CreateIpamResourceDiscoveryResponse
 */
async function createIpamResourceDiscovery(request: CreateIpamResourceDiscoveryRequest): CreateIpamResourceDiscoveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIpamResourceDiscoveryWithOptions(request, runtime);
}

model CreateIpamScopeRequest {
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including invalid AccessKey pairs, unauthorized RAM users, and missing parameter values. If the request fails the dry run, an error code is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**: performs a dry run and the actual request. After the request passes the dry run, a 2xx HTTP status code is returned and the IPAM scope is created.', example='false'),
  ipamId?: string(name='IpamId', description='The ID of the IPAM.

This parameter is required.', example='ipam-ccxbnsbhew0d6t****'),
  ipamScopeDescription?: string(name='IpamScopeDescription', description='The description of the IPAM scope.

It must be 1 to 256 characters in length. It must start with a letter but cannot start with `http://` or `https://`. This parameter is empty by default.', example='test description'),
  ipamScopeName?: string(name='IpamScopeName', description='The name of the IPAM scope.

It must be 1 to 128 characters in length and cannot start with `http://` or `https://`.', example='test'),
  ipamScopeType?: string(name='IpamScopeType', description='The type of IPAM scope: **private**


**Usage notes** You can create only private IPAM scopes.', example='private'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region where the IPAM instance is hosted. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID of the IPAM scope.', example='rg-acfmxazb4ph6aiy****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key of the resource. You can specify at most 20 tag keys. It cannot be an empty string.

The tag key can be up to 64 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It must start with a letter but cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value of the resource. You can specify up to 20 tag values. You can specify empty strings as tag values.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tag list.'),
}

model CreateIpamScopeResponseBody = {
  ipamScopeId?: string(name='IpamScopeId', description='The ID of the IPAM scope.', example='ipam-scope-glfmcyldpm8lsy****'),
  requestId?: string(name='RequestId', description='The request ID.', example='E897D16A-50EB-543F-B002-C5A26AB818FF'),
}

model CreateIpamScopeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIpamScopeResponseBody(name='body'),
}

/**
 * @summary Creates a public scope and private scope to respectively manage public and private IP addresses.
 *
 * @param request CreateIpamScopeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateIpamScopeResponse
 */
async function createIpamScopeWithOptions(request: CreateIpamScopeRequest, runtime: Util.RuntimeOptions): CreateIpamScopeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipamId)) {
    query['IpamId'] = request.ipamId;
  }
  if (!Util.isUnset(request.ipamScopeDescription)) {
    query['IpamScopeDescription'] = request.ipamScopeDescription;
  }
  if (!Util.isUnset(request.ipamScopeName)) {
    query['IpamScopeName'] = request.ipamScopeName;
  }
  if (!Util.isUnset(request.ipamScopeType)) {
    query['IpamScopeType'] = request.ipamScopeType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateIpamScope',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a public scope and private scope to respectively manage public and private IP addresses.
 *
 * @param request CreateIpamScopeRequest
 * @return CreateIpamScopeResponse
 */
async function createIpamScope(request: CreateIpamScopeRequest): CreateIpamScopeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIpamScopeWithOptions(request, runtime);
}

model DeleteIpamRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

**

**Usage notes** If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  ipamId?: string(name='IpamId', description='The ID of the IPAM.

This parameter is required.', example='ipam-ccxbnsbhew0d6t****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region where the IPAM instance is hosted. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteIpamResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='30A20EE2-6223-5D0F-BF49-D7C78F206063'),
}

model DeleteIpamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIpamResponseBody(name='body'),
}

/**
 * @summary Deletes an IP Address Manager (IPAM).
 *
 * @description ## [](#)Prerequisites
 * *   Before you delete an IPAM, make sure that all IPAM pools of the IPAM are deleted. You can call **DeleteIpamPool** to delete IPAM pools.
 * *   Before you delete an IPAM, make sure that all IPAM scopes of the IPAM are deleted. You can call **DeleteIpamScope** to delete IPAM scopes.
 *
 * @param request DeleteIpamRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteIpamResponse
 */
async function deleteIpamWithOptions(request: DeleteIpamRequest, runtime: Util.RuntimeOptions): DeleteIpamResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipamId)) {
    query['IpamId'] = request.ipamId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIpam',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes an IP Address Manager (IPAM).
 *
 * @description ## [](#)Prerequisites
 * *   Before you delete an IPAM, make sure that all IPAM pools of the IPAM are deleted. You can call **DeleteIpamPool** to delete IPAM pools.
 * *   Before you delete an IPAM, make sure that all IPAM scopes of the IPAM are deleted. You can call **DeleteIpamScope** to delete IPAM scopes.
 *
 * @param request DeleteIpamRequest
 * @return DeleteIpamResponse
 */
async function deleteIpam(request: DeleteIpamRequest): DeleteIpamResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIpamWithOptions(request, runtime);
}

model DeleteIpamPoolRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

**

**Usage notes** If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, DryRunOperation is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  ipamPoolId?: string(name='IpamPoolId', description='The ID of the IPAM pool.

This parameter is required.', example='ipam-pool-6rcq3tobayc20t****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region where the IPAM instance is hosted. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteIpamPoolResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='57B7DCCA-F192-5528-8AF3-2FE1413228C9'),
}

model DeleteIpamPoolResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIpamPoolResponseBody(name='body'),
}

/**
 * @summary Deletes an IP Address Manager (IPAM) scope.
 *
 * @description ### [](#)Usage notes
 * *   Before you delete a parent pool, make sure that all subpools of the parent pool are deleted.
 * *   If an effective region is specified for a parent pool and IP addresses are allocated from the parent pool, you cannot delete the parent pool.
 * *   If an effective region is specified for a subpool and IP addresses are allocated from the subpool, you cannot delete the subpool.
 *
 * @param request DeleteIpamPoolRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteIpamPoolResponse
 */
async function deleteIpamPoolWithOptions(request: DeleteIpamPoolRequest, runtime: Util.RuntimeOptions): DeleteIpamPoolResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipamPoolId)) {
    query['IpamPoolId'] = request.ipamPoolId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIpamPool',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes an IP Address Manager (IPAM) scope.
 *
 * @description ### [](#)Usage notes
 * *   Before you delete a parent pool, make sure that all subpools of the parent pool are deleted.
 * *   If an effective region is specified for a parent pool and IP addresses are allocated from the parent pool, you cannot delete the parent pool.
 * *   If an effective region is specified for a subpool and IP addresses are allocated from the subpool, you cannot delete the subpool.
 *
 * @param request DeleteIpamPoolRequest
 * @return DeleteIpamPoolResponse
 */
async function deleteIpamPool(request: DeleteIpamPoolRequest): DeleteIpamPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIpamPoolWithOptions(request, runtime);
}

model DeleteIpamPoolAllocationRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

**Usage notes** If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
*   **false** (default): sends the API request. If the request passes the check, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  ipamPoolAllocationId?: string(name='IpamPoolAllocationId', description='The ID of the custom reserved CIDR block to be deleted.

This parameter is required.', example='ipam-alloc-c4vhvr3b22mmc6****'),
  regionId?: string(name='RegionId', description='The region ID of the custom reserved CIDR block.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou'),
}

model DeleteIpamPoolAllocationResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='B90776C8-F703-51D5-893A-AD1CA699D535'),
}

model DeleteIpamPoolAllocationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIpamPoolAllocationResponseBody(name='body'),
}

/**
 * @summary Deletes a custom reserved CIDR block from an IP Address Manager (IPAM) pool.
 *
 * @param request DeleteIpamPoolAllocationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteIpamPoolAllocationResponse
 */
async function deleteIpamPoolAllocationWithOptions(request: DeleteIpamPoolAllocationRequest, runtime: Util.RuntimeOptions): DeleteIpamPoolAllocationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipamPoolAllocationId)) {
    query['IpamPoolAllocationId'] = request.ipamPoolAllocationId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIpamPoolAllocation',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a custom reserved CIDR block from an IP Address Manager (IPAM) pool.
 *
 * @param request DeleteIpamPoolAllocationRequest
 * @return DeleteIpamPoolAllocationResponse
 */
async function deleteIpamPoolAllocation(request: DeleteIpamPoolAllocationRequest): DeleteIpamPoolAllocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIpamPoolAllocationWithOptions(request, runtime);
}

model DeleteIpamPoolCidrRequest {
  cidr?: string(name='Cidr', description='The provisioned CIDR block to be deleted.

>  Only IPv4 CIDR blocks are supported.

This parameter is required.', example='192.168.1.0/24'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  ipamPoolId?: string(name='IpamPoolId', description='The ID of the IPAM pool.

This parameter is required.', example='ipam-pool-6rcq3tobayc20t****'),
  regionId?: string(name='RegionId', description='The ID of the region where the IPAM instance is hosted.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou'),
}

model DeleteIpamPoolCidrResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F28A239E-F88D-500E-ADE7-FA5E8CA3A170'),
}

model DeleteIpamPoolCidrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIpamPoolCidrResponseBody(name='body'),
}

/**
 * @summary Deletes a CIDR block provisioned to an IP Address Manager (IPAM) pool.
 *
 * @description *   If CIDR blocks are provisioned to a parent pool and its subpools, you must first delete the CIDR blocks provisioned to the subpools before you delete the ones provisioned to the parent pool.
 * *   If CIDR blocks are provisioned only to the parent pool, directly delete them.
 * *   If CIDR blocks are allocated from provisioned ones, you must first delete the allocated CIDR blocks before you delete the provisioned ones.
 * *   You can delete CIDR blocks provisioned to an IPAM pool only in the region where the IPAM is hosted.
 *
 * @param request DeleteIpamPoolCidrRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteIpamPoolCidrResponse
 */
async function deleteIpamPoolCidrWithOptions(request: DeleteIpamPoolCidrRequest, runtime: Util.RuntimeOptions): DeleteIpamPoolCidrResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cidr)) {
    query['Cidr'] = request.cidr;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipamPoolId)) {
    query['IpamPoolId'] = request.ipamPoolId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIpamPoolCidr',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a CIDR block provisioned to an IP Address Manager (IPAM) pool.
 *
 * @description *   If CIDR blocks are provisioned to a parent pool and its subpools, you must first delete the CIDR blocks provisioned to the subpools before you delete the ones provisioned to the parent pool.
 * *   If CIDR blocks are provisioned only to the parent pool, directly delete them.
 * *   If CIDR blocks are allocated from provisioned ones, you must first delete the allocated CIDR blocks before you delete the provisioned ones.
 * *   You can delete CIDR blocks provisioned to an IPAM pool only in the region where the IPAM is hosted.
 *
 * @param request DeleteIpamPoolCidrRequest
 * @return DeleteIpamPoolCidrResponse
 */
async function deleteIpamPoolCidr(request: DeleteIpamPoolCidrRequest): DeleteIpamPoolCidrResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIpamPoolCidrWithOptions(request, runtime);
}

model DeleteIpamResourceDiscoveryRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform the dry run. Valid values:

*   **true**: Performs a dry run without deleting the resource discovery instance. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the DryRunOperation error code is returned.
*   **false** (default): Performs a dry run and the actual request. If the request passes the check, an HTTP 2xx status code is returned and the resource discovery instance is deleted.', example='false'),
  ipamResourceDiscoveryId?: string(name='IpamResourceDiscoveryId', description='The ID of resource discovery instance.

This parameter is required.', example='ipam-res-disco-jt5f2af2u6nk2z321****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The request region.

This parameter is required.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteIpamResourceDiscoveryResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='9F8315CB-560E-5F1E-B069-6E44B440CAF8'),
}

model DeleteIpamResourceDiscoveryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIpamResourceDiscoveryResponseBody(name='body'),
}

/**
 * @summary Deletes a custom resource discovery instance.
 *
 * @description *   If a resource discovery instance is shared, it cannot be deleted.
 *
 * @param request DeleteIpamResourceDiscoveryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteIpamResourceDiscoveryResponse
 */
async function deleteIpamResourceDiscoveryWithOptions(request: DeleteIpamResourceDiscoveryRequest, runtime: Util.RuntimeOptions): DeleteIpamResourceDiscoveryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipamResourceDiscoveryId)) {
    query['IpamResourceDiscoveryId'] = request.ipamResourceDiscoveryId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIpamResourceDiscovery',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a custom resource discovery instance.
 *
 * @description *   If a resource discovery instance is shared, it cannot be deleted.
 *
 * @param request DeleteIpamResourceDiscoveryRequest
 * @return DeleteIpamResourceDiscoveryResponse
 */
async function deleteIpamResourceDiscovery(request: DeleteIpamResourceDiscoveryRequest): DeleteIpamResourceDiscoveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIpamResourceDiscoveryWithOptions(request, runtime);
}

model DeleteIpamScopeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='88144bdb-b190-4813-a3f5-66cc86694162'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  ipamScopeId?: string(name='IpamScopeId', description='The ID of the IPAM scope.

This parameter is required.', example='ipam-scope-glfmcyldpm8lsy****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region where the IPAM instance is hosted. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteIpamScopeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='9F8315CB-560E-5F1E-B069-6E44B440CAF8'),
}

model DeleteIpamScopeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIpamScopeResponseBody(name='body'),
}

/**
 * @summary Deletes an IP Address Manager (IPAM) scope.
 *
 * @description ### [](#)Usage notes
 * *   You cannot delete the private scope and public scope created by the system.
 * *   Before you delete an IPAM scope, make sure that all pools within the scope are deleted. You can call **DeleteIpamPool** to delete IPAM pools.
 *
 * @param request DeleteIpamScopeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteIpamScopeResponse
 */
async function deleteIpamScopeWithOptions(request: DeleteIpamScopeRequest, runtime: Util.RuntimeOptions): DeleteIpamScopeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipamScopeId)) {
    query['IpamScopeId'] = request.ipamScopeId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIpamScope',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes an IP Address Manager (IPAM) scope.
 *
 * @description ### [](#)Usage notes
 * *   You cannot delete the private scope and public scope created by the system.
 * *   Before you delete an IPAM scope, make sure that all pools within the scope are deleted. You can call **DeleteIpamPool** to delete IPAM pools.
 *
 * @param request DeleteIpamScopeRequest
 * @return DeleteIpamScopeResponse
 */
async function deleteIpamScope(request: DeleteIpamScopeRequest): DeleteIpamScopeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIpamScopeWithOptions(request, runtime);
}

model DissociateIpamResourceDiscoveryRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without performing the actual request. Valid values:

*   **true**: Performs a dry run without disassociating the resource discovery and IPAM instance. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the DryRunOperation error code is returned.
*   **false** (default): Performs a dry run and sends the request. After the request passes the check, an HTTP 2xx status code is returned and the resource discovery and IPAM instances are disassociated.', example='false'),
  ipamId?: string(name='IpamId', description='The ID of the IPAM.

This parameter is required.', example='ipam-ccxbnsbhew0d6t****'),
  ipamResourceDiscoveryId?: string(name='IpamResourceDiscoveryId', description='The ID of the resource discovery instance.

This parameter is required.', example='ipam-res-disco-jt5f2af2u6nk2z321****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The request region.

This parameter is required.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DissociateIpamResourceDiscoveryResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='86137597-443F-5B66-B9B6-8514E0C50B8F'),
}

model DissociateIpamResourceDiscoveryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DissociateIpamResourceDiscoveryResponseBody(name='body'),
}

/**
 * @summary Disassociates resource discovery and IPAM instances.
 *
 * @param request DissociateIpamResourceDiscoveryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DissociateIpamResourceDiscoveryResponse
 */
async function dissociateIpamResourceDiscoveryWithOptions(request: DissociateIpamResourceDiscoveryRequest, runtime: Util.RuntimeOptions): DissociateIpamResourceDiscoveryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipamId)) {
    query['IpamId'] = request.ipamId;
  }
  if (!Util.isUnset(request.ipamResourceDiscoveryId)) {
    query['IpamResourceDiscoveryId'] = request.ipamResourceDiscoveryId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DissociateIpamResourceDiscovery',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Disassociates resource discovery and IPAM instances.
 *
 * @param request DissociateIpamResourceDiscoveryRequest
 * @return DissociateIpamResourceDiscoveryResponse
 */
async function dissociateIpamResourceDiscovery(request: DissociateIpamResourceDiscoveryRequest): DissociateIpamResourceDiscoveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return dissociateIpamResourceDiscoveryWithOptions(request, runtime);
}

model GetIpamPoolAllocationRequest {
  ipamPoolAllocationId?: string(name='IpamPoolAllocationId', description='The ID of the instance to which CIDR blocks are allocated from the IPAM pool.

This parameter is required.', example='ipam-pool-alloc-112za33e4****'),
  regionId?: string(name='RegionId', description='The region of the IPAM pool.

>  If the IPAM pool to which CIDR allocation belongs has the region attribute, this parameter is the region of the IPAM pool. If not, this parameter is the IPAM managed region.

This parameter is required.', example='cn-hangzhou'),
}

model GetIpamPoolAllocationResponseBody = {
  cidr?: string(name='Cidr', description='The allocated CIDR block.', example='192.168.1.0/24'),
  creationTime?: string(name='CreationTime', description='The time when the instance was created.', example='2024-10-15T10:24:19+08:00'),
  ipamPoolAllocationDescription?: string(name='IpamPoolAllocationDescription', description='The description of the CIDR allocation of the IPAM pool.

The description must be 1 to 256 characters in length and start with a letter, but cannot start with a `http://` or `https://`. This parameter is empty by default.', example='ipam pool allocation description'),
  ipamPoolAllocationId?: string(name='IpamPoolAllocationId', description='The ID of the instance to which CIDR blocks are allocated from the IPAM pool.', example='ipam-pool-alloc-112za33e4****'),
  ipamPoolAllocationName?: string(name='IpamPoolAllocationName', description='The name of the CIDR allocation of the IPAM pool.

It must be 1 to 128 characters in length and cannot start with `http://` or `https://`.', example='ipam pool allocation name'),
  ipamPoolId?: string(name='IpamPoolId', description='The ID of the IPAM pool.', example='ipam-pool-6rcq3tobayc20t****'),
  regionId?: string(name='RegionId', description='The region of the IPAM pool.

>  If the IPAM pool to which the CIDR block allocation belongs has the region attribute, this parameter is the region of the IPAM pool. If not, this parameter is the IPAM managed region.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The request ID.', example='3748DEFF-68BE-5EED-9937-7C1D0C21BAB4'),
  resourceId?: string(name='ResourceId', description='The ID of the resource to which the CIDR block is allocated.', example='vpc-bp16qjewdsunr41m1****'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='The ID of the Alibaba Cloud account to which the resource belongs.', example='1616080591216318'),
  resourceRegionId?: string(name='ResourceRegionId', description='The effective region ID of the resource.', example='cn-hangzhou'),
  resourceType?: string(name='ResourceType', description='The type of the resource to which the CIDR block is allocated. Valid values:

*   **VPC**
*   **IpamPool**
*   **Custom**', example='VPC'),
  sourceCidr?: string(name='SourceCidr', description='The source CIDR block.', example='192.168.0.0/16'),
  status?: string(name='Status', description='The instance state. Valid values:

*   **Created**
*   **Deleted**', example='Created'),
}

model GetIpamPoolAllocationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIpamPoolAllocationResponseBody(name='body'),
}

/**
 * @summary Queries CIDR block allocations of an IP Address Manager (IPAM) pool.
 *
 * @param request GetIpamPoolAllocationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetIpamPoolAllocationResponse
 */
async function getIpamPoolAllocationWithOptions(request: GetIpamPoolAllocationRequest, runtime: Util.RuntimeOptions): GetIpamPoolAllocationResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetIpamPoolAllocation',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries CIDR block allocations of an IP Address Manager (IPAM) pool.
 *
 * @param request GetIpamPoolAllocationRequest
 * @return GetIpamPoolAllocationResponse
 */
async function getIpamPoolAllocation(request: GetIpamPoolAllocationRequest): GetIpamPoolAllocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getIpamPoolAllocationWithOptions(request, runtime);
}

model GetIpamPoolNextAvailableCidrRequest {
  cidrBlock?: string(name='CidrBlock', description='CIDR to be allocated.

>  You must enter at least one of the CidrBlock and CidrMask fields.', example='172.68.0.0/26'),
  cidrMask?: int32(name='CidrMask', description='The length of the CIDR mask to be allocated.

>  You must enter at least one of the CidrBlock and CidrMask fields.', example='26'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000'),
  ipamPoolId?: string(name='IpamPoolId', description='The ID of the IPAM pool.

This parameter is required.', example='ipam-pool-6rcq3tobayc20t****'),
  regionId?: string(name='RegionId', description='The region of the IPAM pool.

>  If the IPAM pool has the region attribute, this parameter is set to the effective region of the IPAM pool. If not, this is set to the managed region.

This parameter is required.', example='cn-hangzhou'),
}

model GetIpamPoolNextAvailableCidrResponseBody = {
  cidrBlock?: string(name='CidrBlock', description='Available CIDR.', example='172.68.0.0/26'),
  requestId?: string(name='RequestId', description='The request ID.', example='29FC6758-9B7C-5CC7-8CBF-4DD846FE7D82'),
}

model GetIpamPoolNextAvailableCidrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIpamPoolNextAvailableCidrResponseBody(name='body'),
}

/**
 * @summary Gets the available CIDR blocks of the IPAM pool.
 *
 * @param request GetIpamPoolNextAvailableCidrRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetIpamPoolNextAvailableCidrResponse
 */
async function getIpamPoolNextAvailableCidrWithOptions(request: GetIpamPoolNextAvailableCidrRequest, runtime: Util.RuntimeOptions): GetIpamPoolNextAvailableCidrResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetIpamPoolNextAvailableCidr',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Gets the available CIDR blocks of the IPAM pool.
 *
 * @param request GetIpamPoolNextAvailableCidrRequest
 * @return GetIpamPoolNextAvailableCidrResponse
 */
async function getIpamPoolNextAvailableCidr(request: GetIpamPoolNextAvailableCidrRequest): GetIpamPoolNextAvailableCidrResponse {
  var runtime = new Util.RuntimeOptions{};
  return getIpamPoolNextAvailableCidrWithOptions(request, runtime);
}

model GetVpcIpamServiceStatusRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region where the IPAM instance is hosted.

This parameter is required.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetVpcIpamServiceStatusResponseBody = {
  enabled?: boolean(name='Enabled', description='Indicates whether IPAM is activated.

*   **true**
*   **false**', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='2FEE9FFF-57EE-5832-BE88-9308352F3B68'),
}

model GetVpcIpamServiceStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVpcIpamServiceStatusResponseBody(name='body'),
}

/**
 * @summary Queries whether IP Address Manager (IPAM) is activated.
 *
 * @param request GetVpcIpamServiceStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetVpcIpamServiceStatusResponse
 */
async function getVpcIpamServiceStatusWithOptions(request: GetVpcIpamServiceStatusRequest, runtime: Util.RuntimeOptions): GetVpcIpamServiceStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetVpcIpamServiceStatus',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries whether IP Address Manager (IPAM) is activated.
 *
 * @param request GetVpcIpamServiceStatusRequest
 * @return GetVpcIpamServiceStatusResponse
 */
async function getVpcIpamServiceStatus(request: GetVpcIpamServiceStatusRequest): GetVpcIpamServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVpcIpamServiceStatusWithOptions(request, runtime);
}

model ListIpamDiscoveredResourceRequest {
  ipamResourceDiscoveryId?: string(name='IpamResourceDiscoveryId', description='The ID of the resource discovery instance.

This parameter is required.', example='ipam-res-disco-jt5f2af2u6nk2z321****'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries on each page. Valid values: 1 to 100. Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of **NextToken**.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  regionId?: string(name='RegionId', description='The ID of the managed region of the IPAM pool.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the region list.

This parameter is required.', example='cn-hangzhou'),
  resourceRegionId?: string(name='ResourceRegionId', description='The region where resource discovery is performed.

This parameter is required.', example='cn-hangzhou'),
  resourceType?: string(name='ResourceType', description='The resource type. Valid values:

*   **VPC**
*   **VSwitch**', example='VPC'),
}

model ListIpamDiscoveredResourceResponseBody = {
  count?: int32(name='Count', description='The maximum number of entries on each page.', example='10'),
  ipamDiscoveredResources?: [ 
    {
      aliUid?: long(name='AliUid', description='The ID of the Alibaba Cloud account.', example='132193271328****'),
      cidr?: string(name='Cidr', description='The CIDR block of the resource.', example='192.168.1.0/32'),
      discoveryTime?: string(name='DiscoveryTime', description='The time when the resource was discovered.

>  If the resource has not been modified since it was created, the discovery time remains unchanged.', example='2024-01-01 00:00:00'),
      ipCountDetail?: {
        freeIpCount?: string(name='FreeIpCount'),
        totalIpCount?: string(name='TotalIpCount'),
        usedIpCount?: string(name='UsedIpCount'),
      }(name='IpCountDetail'),
      ipUsage?: string(name='IpUsage', description='The IP usage in decimal form.', example='0'),
      ipamResourceDiscoveryId?: string(name='IpamResourceDiscoveryId', description='The ID of resource discovery instance.', example='ipam-res-disco-jt5f2af2u6nk2z321****'),
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='vpc-uf611fp465c7dyb4z****'),
      resourceOwnerId?: long(name='ResourceOwnerId', description='The ID of the Alibaba Cloud account to which the resource belongs.', example='132193271328****'),
      resourceRegionId?: string(name='ResourceRegionId', description='The ID of the region to which the resource belongs.', example='cn-hangzhou'),
      resourceType?: string(name='ResourceType', description='The resource type. Valid values:

*   **VPC**
*   **VSwitch**', example='VPC'),
      sourceCidr?: string(name='SourceCidr', description='The source CIDR block.', example='192.168.1.0/24'),
      vpcId?: string(name='VpcId', description='The ID of the VPC to which the resource belongs.', example='vpc-uf611fp465c7dyb4z****'),
    }
  ](name='IpamDiscoveredResources', description='The list of resources.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries on each page. Valid values: 1 to 100. Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, there is no next page.
*   If a value of **NextToken** is returned, it indicates the token that is used for the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='3748DEFF-68BE-5EED-9937-7C1D0C21BAB4'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='1000'),
}

model ListIpamDiscoveredResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIpamDiscoveredResourceResponseBody(name='body'),
}

/**
 * @summary Queries discovered resources.
 *
 * @param request ListIpamDiscoveredResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListIpamDiscoveredResourceResponse
 */
async function listIpamDiscoveredResourceWithOptions(request: ListIpamDiscoveredResourceRequest, runtime: Util.RuntimeOptions): ListIpamDiscoveredResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipamResourceDiscoveryId)) {
    query['IpamResourceDiscoveryId'] = request.ipamResourceDiscoveryId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceRegionId)) {
    query['ResourceRegionId'] = request.resourceRegionId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListIpamDiscoveredResource',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries discovered resources.
 *
 * @param request ListIpamDiscoveredResourceRequest
 * @return ListIpamDiscoveredResourceResponse
 */
async function listIpamDiscoveredResource(request: ListIpamDiscoveredResourceRequest): ListIpamDiscoveredResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIpamDiscoveredResourceWithOptions(request, runtime);
}

model ListIpamPoolAllocationsRequest {
  cidr?: string(name='Cidr', description='Specifies whether to query allocations by specifying allocated CIDR blocks.

**

**Usage notes** Only IPv4 CIDR blocks are supported.', example='192.168.1.0/24'),
  ipamPoolAllocationIds?: [ string ](name='IpamPoolAllocationIds', description='The IDs of the instances to which CIDR blocks are allocated from the IPAM pool.'),
  ipamPoolAllocationName?: string(name='IpamPoolAllocationName', description='The name of  allocations.', example='test name'),
  ipamPoolId?: string(name='IpamPoolId', description='The ID of the IPAM pool.

This parameter is required.', example='ipam-pool-6rcq3tobayc20t****'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: **1** to **100**. Default value: **10**.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value of **NextToken** is returned, the value indicates the token that is used for the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  regionId?: string(name='RegionId', description='The ID of the region where you want to perform the operation.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou'),
}

model ListIpamPoolAllocationsResponseBody = {
  count?: long(name='Count', description='The number of entries returned.', example='10'),
  ipamPoolAllocations?: [ 
    {
      cidr?: string(name='Cidr', description='The allocated CIDR block.', example='192.168.1.0/24'),
      creationTime?: string(name='CreationTime', description='The time when the instance was created.', example='2023-05-19T08:59:18Z'),
      ipamPoolAllocationDescription?: string(name='IpamPoolAllocationDescription', description='The description of the allocation.', example='test description'),
      ipamPoolAllocationId?: string(name='IpamPoolAllocationId', description='The ID of the instance to which CIDR blocks are allocated from the IPAM pool.', example='ipam-pool-alloc-112za33e4****'),
      ipamPoolAllocationName?: string(name='IpamPoolAllocationName', description='The name of the allocation.', example='test name'),
      ipamPoolId?: string(name='IpamPoolId', description='The ID of the IPAM pool.', example='ipam-pool-6rcq3tobayc20t****'),
      regionId?: string(name='RegionId', description='The region ID of the resource.', example='cn-hangzhou'),
      resourceId?: string(name='ResourceId', description='The ID of the resource to which the CIDR block is allocated.', example='vpc-bp16qjewdsunr41m1****'),
      resourceOwnerId?: long(name='ResourceOwnerId', description='The ID of the Alibaba Cloud account to which the resource belongs.', example='132193271328****'),
      resourceRegionId?: string(name='ResourceRegionId', description='The effective region ID of the resource.', example='cn-hangzhou'),
      resourceType?: string(name='ResourceType', description='The type of the resource to which the CIDR block is allocated. Valid values:

*   **VPC**
*   **IpamPool**
*   **Custom**', example='Custom'),
      sourceCidr?: string(name='SourceCidr', description='The source CIDR block.', example='192.168.0.0/16'),
      status?: string(name='Status', description='The status of the instance. Valid values:

*   **Created**
*   **Deleted**', example='Created'),
    }
  ](name='IpamPoolAllocations', description='The IDs of the instances to which CIDR blocks are allocated from the IPAM pool.'),
  maxResults?: long(name='MaxResults', description='The number of entries per page.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value of **NextToken** is returned, the value indicates the token that is used for the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='3748DEFF-68BE-5EED-9937-7C1D0C21BAB4'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='1000'),
}

model ListIpamPoolAllocationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIpamPoolAllocationsResponseBody(name='body'),
}

/**
 * @summary Queries CIDR block allocations of an IP Address Manager (IPAM) pool.
 *
 * @param request ListIpamPoolAllocationsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListIpamPoolAllocationsResponse
 */
async function listIpamPoolAllocationsWithOptions(request: ListIpamPoolAllocationsRequest, runtime: Util.RuntimeOptions): ListIpamPoolAllocationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cidr)) {
    query['Cidr'] = request.cidr;
  }
  if (!Util.isUnset(request.ipamPoolAllocationIds)) {
    query['IpamPoolAllocationIds'] = request.ipamPoolAllocationIds;
  }
  if (!Util.isUnset(request.ipamPoolAllocationName)) {
    query['IpamPoolAllocationName'] = request.ipamPoolAllocationName;
  }
  if (!Util.isUnset(request.ipamPoolId)) {
    query['IpamPoolId'] = request.ipamPoolId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListIpamPoolAllocations',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries CIDR block allocations of an IP Address Manager (IPAM) pool.
 *
 * @param request ListIpamPoolAllocationsRequest
 * @return ListIpamPoolAllocationsResponse
 */
async function listIpamPoolAllocations(request: ListIpamPoolAllocationsRequest): ListIpamPoolAllocationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIpamPoolAllocationsWithOptions(request, runtime);
}

model ListIpamPoolCidrsRequest {
  cidr?: string(name='Cidr', description='The provisioned CIDR block that you want to query.

>  Only IPv4 CIDR blocks are supported.', example='192.168.1.0/24'),
  ipamPoolId?: string(name='IpamPoolId', description='The ID of the IPAM pool.

This parameter is required.', example='ipam-pool-6rcq3tobayc20t****'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: **1** to **100**. Default value: **10**.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value of **NextToken** is returned, the value indicates the token that is used for the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  regionId?: string(name='RegionId', description='The ID of the region where the IPAM instance is hosted.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou'),
}

model ListIpamPoolCidrsResponseBody = {
  count?: long(name='Count', description='The number of entries returned.', example='10'),
  ipamPoolCidrs?: [ 
    {
      cidr?: string(name='Cidr', description='The provisioned CIDR block.', example='192.168.1.0/24'),
      ipamPoolId?: string(name='IpamPoolId', description='The ID of the IPAM pool.', example='ipam-pool-6rcq3tobayc20t****'),
      status?: string(name='Status', description='The status of the CIDR block provisioned to the IPAM pool. Valid values:

*   **Created**
*   **Deleted**', example='Created'),
    }
  ](name='IpamPoolCidrs', description='The IDs of IPAM pools.'),
  maxResults?: long(name='MaxResults', description='The number of entries per page.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value of **NextToken** is returned, the value indicates the token that is used for the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='9E7CCB95-62E0-534D-9B9A-71F27E8B71B1'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='1000'),
}

model ListIpamPoolCidrsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIpamPoolCidrsResponseBody(name='body'),
}

/**
 * @summary Queries CIDR blocks provisioned to an IP Address Manager (IPAM) pool.
 *
 * @param request ListIpamPoolCidrsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListIpamPoolCidrsResponse
 */
async function listIpamPoolCidrsWithOptions(request: ListIpamPoolCidrsRequest, runtime: Util.RuntimeOptions): ListIpamPoolCidrsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cidr)) {
    query['Cidr'] = request.cidr;
  }
  if (!Util.isUnset(request.ipamPoolId)) {
    query['IpamPoolId'] = request.ipamPoolId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListIpamPoolCidrs',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries CIDR blocks provisioned to an IP Address Manager (IPAM) pool.
 *
 * @param request ListIpamPoolCidrsRequest
 * @return ListIpamPoolCidrsResponse
 */
async function listIpamPoolCidrs(request: ListIpamPoolCidrsRequest): ListIpamPoolCidrsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIpamPoolCidrsWithOptions(request, runtime);
}

model ListIpamPoolsRequest {
  ipamPoolIds?: [ string ](name='IpamPoolIds', description='The IDs of IPAM pools. Valid values of N: 1 to 100. A maximum of 100 IPAM pools can be queried at a time.'),
  ipamPoolName?: string(name='IpamPoolName', description='The name of the IPAM pool. You can enter at most 20 names.

It must be 1 to 128 characters in length and cannot start with `http://` or `https://`.', example='test'),
  ipamScopeId?: string(name='IpamScopeId', description='The ID of the IPAM scope.', example='ipam-scope-glfmcyldpm8lsy****'),
  isShared?: boolean(name='IsShared', description='Whether it is a shared pool.', example='true'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: 1 to 100. Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   If NextToken is empty, no next page exists.
*   You must specify the token that is obtained from the previous query as the value of NextToken.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  poolRegionId?: string(name='PoolRegionId', description='The effective region of the IPAM pool.', example='cn-hangzhou'),
  regionId?: string(name='RegionId', description='The ID of the region where the IPAM instance is hosted. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the IPAM pool belongs.', example='rg-aek2sermdd6****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIpamPoolId?: string(name='SourceIpamPoolId', description='The ID of the source IPAM pool.', example='ipam-pool-lfnwi4jok1ss0g****'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key. You can specify at most 20 tag keys. It cannot be an empty string.

The tag key can be up to 64 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The tag key must start with a letter but cannot start with `aliyun` or `acs:`. The tag key cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value. You can specify at most 20 tag values. It can be an empty string.

The tag value can be up to 128 characters in length. It must start with a letter and can contain digits, periods (.), underscores (_), and hyphens (-). It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tags', description='The tag information.'),
}

model ListIpamPoolsResponseBody = {
  count?: long(name='Count', description='The number of entries returned.', example='10'),
  ipamPools?: [ 
    {
      allocationDefaultCidrMask?: int32(name='AllocationDefaultCidrMask', description='The default network mask assigned to the IPAM pool.

An IPv4 mask must be **0 to 32** bits in length.', example='28'),
      allocationMaxCidrMask?: int32(name='AllocationMaxCidrMask', description='The maximum network mask assigned to the IPAM pool.

An IPv4 mask must be **0 to 32** bits in length.', example='32'),
      allocationMinCidrMask?: int32(name='AllocationMinCidrMask', description='The minimum network mask assigned to the IPAM pool.

An IPv4 mask must be **0 to 32** bits in length.', example='8'),
      autoImport?: boolean(name='AutoImport', description='Whether the pool has the auto-import feature enabled.', example='true'),
      createTime?: string(name='CreateTime', description='The time when the IPAM pool was created.', example='2023-04-19T16:49:01Z'),
      hasSubPool?: boolean(name='HasSubPool', description='Indicates whether the pool is a subpool. Valid values:

*   **true**
*   **false**', example='true'),
      ipVersion?: string(name='IpVersion', description='The IP version. Only **IPv4** may be returned.', example='IPv4'),
      ipamId?: string(name='IpamId', description='The ID of the IPAM.', example='ipam-b5mtlx3q7xcnyr****'),
      ipamPoolDescription?: string(name='IpamPoolDescription', description='The description of the IPAM pool.', example='test description'),
      ipamPoolId?: string(name='IpamPoolId', description='The ID of the IPAM pool.', example='ipam-pool-6rcq3tobayc20t****'),
      ipamPoolName?: string(name='IpamPoolName', description='The name of the IPAM pool.', example='test'),
      ipamRegionId?: string(name='IpamRegionId', description='The ID of the region where the IPAM to which the IPAM pool belongs is hosted.', example='cn-hangzhou'),
      ipamScopeId?: string(name='IpamScopeId', description='The ID of the IPAM scope.', example='ipam-scope-glfmcyldpm8lsy****'),
      ipamScopeType?: string(name='IpamScopeType', description='The type of the IPAM scope. Valid values:

*   **public**
*   **private**', example='private'),
      isShared?: boolean(name='IsShared', description='Whether it is a shared pool.', example='true'),
      ownerId?: long(name='OwnerId', description='The Alibaba Cloud account of the owner for the IPAM pool.', example='1210123456******'),
      poolDepth?: int32(name='PoolDepth', description='The depth of the IPAM pool. Valid values: **0 to 10**.', example='2'),
      poolRegionId?: string(name='PoolRegionId', description='The effective region of the IPAM pool. The ID of the effective region for the IPAM pool.', example='cn-hangzhou'),
      regionId?: string(name='RegionId', description='The ID of the region where the operation is called.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxazb4ph6aiy****'),
      sourceIpamPoolId?: string(name='SourceIpamPoolId', description='The ID of the source IPAM pool.', example='ipam-pool-lfnwi4jok1ss0g****'),
      status?: string(name='Status', description='The status of the IPAM pool. Valid values:

*   **Creating**
*   **Created**: indicates that the creation is complete.
*   **Modifying**
*   **Deleting**
*   **Deleted**', example='Created'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='FinanceDept'),
          value?: string(name='Value', description='The tag value.', example='FinanceJoshua'),
        }
      ](name='Tags', description='The tag list.'),
    }
  ](name='IpamPools', description='The IPAM pools.'),
  maxResults?: long(name='MaxResults', description='The number of entries per page. Valid values: 1 to 100. Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value of **NextToken** is returned, the value indicates the token that is used for the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='B54867DE-83DC-56B4-A57E-69A03119D0B1'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='1000'),
}

model ListIpamPoolsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIpamPoolsResponseBody(name='body'),
}

/**
 * @summary Queries IP Address Manager (IPAM) pools.
 *
 * @param request ListIpamPoolsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListIpamPoolsResponse
 */
async function listIpamPoolsWithOptions(request: ListIpamPoolsRequest, runtime: Util.RuntimeOptions): ListIpamPoolsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipamPoolIds)) {
    query['IpamPoolIds'] = request.ipamPoolIds;
  }
  if (!Util.isUnset(request.ipamPoolName)) {
    query['IpamPoolName'] = request.ipamPoolName;
  }
  if (!Util.isUnset(request.ipamScopeId)) {
    query['IpamScopeId'] = request.ipamScopeId;
  }
  if (!Util.isUnset(request.isShared)) {
    query['IsShared'] = request.isShared;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.poolRegionId)) {
    query['PoolRegionId'] = request.poolRegionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIpamPoolId)) {
    query['SourceIpamPoolId'] = request.sourceIpamPoolId;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListIpamPools',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries IP Address Manager (IPAM) pools.
 *
 * @param request ListIpamPoolsRequest
 * @return ListIpamPoolsResponse
 */
async function listIpamPools(request: ListIpamPoolsRequest): ListIpamPoolsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIpamPoolsWithOptions(request, runtime);
}

model ListIpamResourceCidrsRequest {
  ipamPoolId?: string(name='IpamPoolId', description='The ID of the IPAM pool.

>  You must specify at least one of **IpamScopeId** and **IpamPoolId**.', example='ipam-pool-6rcq3tobayc20t****'),
  ipamScopeId?: string(name='IpamScopeId', description='The ID of the IPAM scope.

>  You must specify at least one of **IpamScopeId** and **IpamPoolId**.', example='ipam-scope-glfmcyldpm8lsy****'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: **1** to **100**. Default value: **10**.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of **NextToken**.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  regionId?: string(name='RegionId', description='The ID of the region where the IPAM instance is hosted.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', description='The resource ID.', example='vpc-bp16qjewdsunr41m1****'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='The type of resource. Valid values:

*   **VPC**
*   **VSwitch**', example='VPC'),
  vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-bp1fjfnrg3av6zb9e****'),
}

model ListIpamResourceCidrsResponseBody = {
  count?: long(name='Count', description='The number of entries returned.', example='10'),
  ipamResourceCidrs?: [ 
    {
      aliUid?: long(name='AliUid', description='The ID of the Alibaba Cloud account.', example='132193271328****'),
      cidr?: string(name='Cidr', description='The CIDR block of the resource.', example='192.168.1.0/32'),
      complianceStatus?: string(name='ComplianceStatus', description='The compliance status of the resource.

*   **Compliant**
*   **Noncompliant**
*   **Ignored** Ignored resources are not monitored.
*   **Unmanaged**: The resource does not have a CIDR block allocated from the IPAM pool. IPAM does not monitor whether the CIDR block of the resource meets the allocation rules of the IP address pool.', example='Compliant'),
      ipCountDetail?: {
        freeIpCount?: string(name='FreeIpCount'),
        totalIpCount?: string(name='TotalIpCount'),
        usedIpCount?: string(name='UsedIpCount'),
      }(name='IpCountDetail'),
      ipUsage?: string(name='IpUsage', description='The IP usage that is displayed in decimal form.', example='0'),
      ipamAllocationId?: string(name='IpamAllocationId', description='The ID of the instance to which CIDR blocks are allocated from the IPAM pool.', example='ipam-pool-alloc-112za33e4****'),
      ipamId?: string(name='IpamId', description='The ID of the IPAM.', example='ipam-uq5dcfc2eqhpf4****'),
      ipamPoolId?: string(name='IpamPoolId', description='The ID of the IPAM pool.', example='ipam-pool-6rcq3tobayc20t***'),
      ipamScopeId?: string(name='IpamScopeId', description='The ID of the IPAM scope.', example='ipam-scope-glfmcyldpm8lsy****'),
      managementStatus?: string(name='ManagementStatus', description='The management status of the resource.

*   **Managed**: The resource has a CIDR block allocated from an IPAM pool. IPAM is monitoring whether the allocated CIDR block overlaps with other CIDR blocks and whether the allocated CIDR block meets the allocation rules.
*   **Unmanaged**: The resource does not have a CIDR block allocated from the IPAM pool. IPAM is monitoring whether the resource has CIDR blocks that meet the allocation rules. Monitor whether CIDR blocks overlap with each other.
*   **Ignored**: The resource is not monitored. Ignored resources are not monitored. If you ignore a resource, CIDR blocks allocated to the resource are returned to the IPAM pool and will not be automatically allocated to the resource (if automatic allocation rules are specified).', example='Managed'),
      overlapDetail?: [ 
        {
          overlapResourceCidr?: string(name='OverlapResourceCidr', description='The CIDR that overlaps with the current resource.', example='192.168.1.0/24'),
          overlapResourceId?: string(name='OverlapResourceId', description='Instance ID that overlaps with the current resource.', example='vpc-aq3fjgnig5av6jb8d****'),
          overlapResourceRegion?: string(name='OverlapResourceRegion', description='The region of instance that overlaps with the current resource.', example='cn-hangzhou'),
        }
      ](name='OverlapDetail', description='List of resources that overlap with the current resource.'),
      overlapStatus?: string(name='OverlapStatus', description='The overlapping status of the resource.

*   **Nonoverlapping**
*   **Overlapping**
*   **Ignored** Ignored resources are not monitored.', example='Nonoverlapping'),
      resourceId?: string(name='ResourceId', description='The resource ID.', example='vpc-bp16qjewdsunr41m1****'),
      resourceOwnerId?: long(name='ResourceOwnerId', description='The ID of the Alibaba Cloud account to which the resource belongs.', example='132193271328****'),
      resourceRegionId?: string(name='ResourceRegionId', description='The effective region ID of the resource.', example='cn-hangzhou'),
      resourceType?: string(name='ResourceType', description='The type of resource. Valid values:

*   **VPC**
*   **VSwitch**', example='VPC'),
      sourceCidr?: string(name='SourceCidr', description='The source CIDR block.', example='192.168.1.0/24'),
      status?: string(name='Status', description='The status of the resource in the IPAM pool. Valid values:

*   **Created**
*   **Deleted**', example='Created'),
      vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-bp1fjfnrg3av6zb9e****'),
    }
  ](name='IpamResourceCidrs', description='The list of resources in the IPAM pool.'),
  maxResults?: long(name='MaxResults', description='The number of entries per page.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value of **NextToken** is returned, the value indicates the token that is used for the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='49A9DE56-B68C-5FFC-BC06-509D086F287C'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='1000'),
}

model ListIpamResourceCidrsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIpamResourceCidrsResponseBody(name='body'),
}

/**
 * @summary Queries resources in an IP Address Manager (IPAM) pool.
 *
 * @param request ListIpamResourceCidrsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListIpamResourceCidrsResponse
 */
async function listIpamResourceCidrsWithOptions(request: ListIpamResourceCidrsRequest, runtime: Util.RuntimeOptions): ListIpamResourceCidrsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipamPoolId)) {
    query['IpamPoolId'] = request.ipamPoolId;
  }
  if (!Util.isUnset(request.ipamScopeId)) {
    query['IpamScopeId'] = request.ipamScopeId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListIpamResourceCidrs',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries resources in an IP Address Manager (IPAM) pool.
 *
 * @param request ListIpamResourceCidrsRequest
 * @return ListIpamResourceCidrsResponse
 */
async function listIpamResourceCidrs(request: ListIpamResourceCidrsRequest): ListIpamResourceCidrsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIpamResourceCidrsWithOptions(request, runtime);
}

model ListIpamResourceDiscoveriesRequest {
  ipamResourceDiscoveryIds?: [ string ](name='IpamResourceDiscoveryIds', description='The IDs of resource discovery instances. Valid values of N: 1 to 100. A maximum of 100 resource discoveries can be queried at a time.'),
  ipamResourceDiscoveryName?: string(name='IpamResourceDiscoveryName', description='The name of the resource discovery.

The name must be 1 to 128 characters in length and cannot start with http:// or https://.', example='test'),
  isShared?: boolean(name='IsShared', description='Whether it is a shared resource discovery.', example='true'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries on each page. Valid values: 1 to 100. Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, there is no next page.
*   If a value of **NextToken** is returned, it indicates the token that is used for the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region where you want to query resource discovery. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the region list.

This parameter is required.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group that resource discovery belongs.', example='rg-aek2sermdd6****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of the tag. You can specify at most 20 tag keys. It cannot be an empty string.

The tag key can be up to 64 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The tag key must start with a letter but cannot start with `aliyun` or `acs:`. The tag key cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The value of the tag. You can specify at most 20 tag values. The tag value cannot be an empty string.

A tag value can be up to 128 characters in length and cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tags', description='The tag.'),
  type?: string(name='Type', description='The type of resource discovery.

> Supported types:
> - system: default resource discovery created by the system.
> - custom: custom resource discovery created by users.', example='system'),
}

model ListIpamResourceDiscoveriesResponseBody = {
  count?: int32(name='Count', description='The maximum number of entries on each page.', example='1'),
  ipamResourceDiscoveries?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the resource was discovered.', example='2022-07-01T02:05:23Z'),
      ipamResourceDiscoveryDescription?: string(name='IpamResourceDiscoveryDescription', description='The description of the resource discovery.', example='test description'),
      ipamResourceDiscoveryId?: string(name='IpamResourceDiscoveryId', description='The ID of resource discovery instance.', example='ipam-res-disco-jt5f2af2u6nk2z321****'),
      ipamResourceDiscoveryName?: string(name='IpamResourceDiscoveryName', description='The name of the resource discovery.', example='test'),
      ipamResourceDiscoveryStatus?: string(name='IpamResourceDiscoveryStatus', description='The status of the resource discovery instance. Valid values:

*   **Creating**
*   **Created**
*   **Modifying**
*   **Deleting**
*   **Deleted**', example='Created'),
      operatingRegionList?: [ string ](name='OperatingRegionList', description='The list of resource discovery regions.'),
      ownerId?: long(name='OwnerId', description='The Alibaba Cloud account that owns the resource discovery.', example='1210123456******'),
      regionId?: string(name='RegionId', description='The region ID of the queried resource discovery instance.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group that resource discovery belongs.', example='rg-aek2sermdd6****'),
      shareType?: string(name='ShareType', description='The sharing status of the resource.

*   If the value is empty, the resource is as an average instance.
*   If the value is Shared, the resource discovery comes from a shared source.
*   If the value is Sharing, the resource discovery is being shared.', example='Shared'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='FinanceDept'),
          value?: string(name='Value', description='The tag value.', example='FinanceJoshua'),
        }
      ](name='Tags', description='The tag list.'),
      type?: string(name='Type', description='The type of resource discovery.', example='system'),
    }
  ](name='IpamResourceDiscoveries', description='The list of resource discovery instances.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries on each page. Valid values: 1 to 100. Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, there is no next page.
*   If a value of **NextToken** is returned, it indicates the token that is used for the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='86137597-443F-5B66-B9B6-8514E0C50B8F'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListIpamResourceDiscoveriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIpamResourceDiscoveriesResponseBody(name='body'),
}

/**
 * @summary Queries IPAM resource discovery instances.
 *
 * @param request ListIpamResourceDiscoveriesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListIpamResourceDiscoveriesResponse
 */
async function listIpamResourceDiscoveriesWithOptions(request: ListIpamResourceDiscoveriesRequest, runtime: Util.RuntimeOptions): ListIpamResourceDiscoveriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipamResourceDiscoveryIds)) {
    query['IpamResourceDiscoveryIds'] = request.ipamResourceDiscoveryIds;
  }
  if (!Util.isUnset(request.ipamResourceDiscoveryName)) {
    query['IpamResourceDiscoveryName'] = request.ipamResourceDiscoveryName;
  }
  if (!Util.isUnset(request.isShared)) {
    query['IsShared'] = request.isShared;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListIpamResourceDiscoveries',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries IPAM resource discovery instances.
 *
 * @param request ListIpamResourceDiscoveriesRequest
 * @return ListIpamResourceDiscoveriesResponse
 */
async function listIpamResourceDiscoveries(request: ListIpamResourceDiscoveriesRequest): ListIpamResourceDiscoveriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIpamResourceDiscoveriesWithOptions(request, runtime);
}

model ListIpamResourceDiscoveryAssociationsRequest {
  ipamId?: string(name='IpamId', description='The ID of the IPAM.', example='ipam-ccxbnsbhew0d6t****'),
  ipamResourceDiscoveryId?: string(name='IpamResourceDiscoveryId', description='The ID of resource discovery instance.', example='ipam-res-disco-jt5f2af2u6nk2z321****'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries on each page. Valid values: 1 to 100. Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   If this is your first or only query, this parameter is left empty.
*   If a next query is to be sent, the returned value is the value of NextToken that was returned last time this operation was called.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The request region.

This parameter is required.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListIpamResourceDiscoveryAssociationsResponseBody = {
  count?: int32(name='Count', description='The number of entries on each page.', example='10'),
  ipamResourceDiscoveryAssociations?: [ 
    {
      ipamId?: string(name='IpamId', description='The ID of the IPAM.', example='ipam-ccxbnsbhew0d6t****'),
      ipamResourceDiscoveryId?: string(name='IpamResourceDiscoveryId', description='The ID of resource discovery instance.', example='ipam-res-disco-jt5f2af2u6nk2z321****'),
      ipamResourceDiscoveryOwnerId?: string(name='IpamResourceDiscoveryOwnerId', description='The ID of the Alibaba Cloud account to which the resource discovery belongs.', example='1210123456******'),
      ipamResourceDiscoveryStatus?: string(name='IpamResourceDiscoveryStatus', description='The status of the resource discovery instance. Valid values:

*   **Creating**
*   **Created**
*   **Modifying**
*   **Deleting**
*   **Deleted**', example='Created'),
      ipamResourceDiscoveryType?: string(name='IpamResourceDiscoveryType', description='The type of resource discovery. Valid values:

*   **system**: default resource discovery created by the system.
*   **custom**: custom resource discovery created by users.', example='custom'),
      status?: string(name='Status', description='The status of the associations. Valid values:

*   **Created**
*   **Deleted**', example='Created'),
    }
  ](name='IpamResourceDiscoveryAssociations', description='The list of associations.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries on each page. Valid values: 1 to 100. Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, there is no next page.
*   If a value of **NextToken** is returned, it indicates the token that is used for the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='F28A239E-F88D-500E-ADE7-FA5E8CA3A170'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='20'),
}

model ListIpamResourceDiscoveryAssociationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIpamResourceDiscoveryAssociationsResponseBody(name='body'),
}

/**
 * @summary Queries the association between resource discovery and IPAM.
 *
 * @param request ListIpamResourceDiscoveryAssociationsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListIpamResourceDiscoveryAssociationsResponse
 */
async function listIpamResourceDiscoveryAssociationsWithOptions(request: ListIpamResourceDiscoveryAssociationsRequest, runtime: Util.RuntimeOptions): ListIpamResourceDiscoveryAssociationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipamId)) {
    query['IpamId'] = request.ipamId;
  }
  if (!Util.isUnset(request.ipamResourceDiscoveryId)) {
    query['IpamResourceDiscoveryId'] = request.ipamResourceDiscoveryId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListIpamResourceDiscoveryAssociations',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the association between resource discovery and IPAM.
 *
 * @param request ListIpamResourceDiscoveryAssociationsRequest
 * @return ListIpamResourceDiscoveryAssociationsResponse
 */
async function listIpamResourceDiscoveryAssociations(request: ListIpamResourceDiscoveryAssociationsRequest): ListIpamResourceDiscoveryAssociationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIpamResourceDiscoveryAssociationsWithOptions(request, runtime);
}

model ListIpamScopesRequest {
  ipamId?: string(name='IpamId', description='The ID of the IPAM.', example='ipam-ccxbnsbhew0d6t****'),
  ipamScopeIds?: [ string ](name='IpamScopeIds', description='The IDs of IPAM scopes.'),
  ipamScopeName?: string(name='IpamScopeName', description='The name of the IPAM scope.

It must be 1 to 128 characters in length and cannot start with `http://` or `https://`.', example='test'),
  ipamScopeType?: string(name='IpamScopeType', description='The type of the IPAM scope. Valid values:

*   **public**
*   **private**', example='private'),
  maxResults?: long(name='MaxResults', description='The number of entries per page. Valid values: **1** to **100**. Default value: **10**.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of NextToken.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region where the IPAM instance is hosted. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID of the IPAM scope.', example='rg-aek2sermdd6****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key. You can specify at most 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 64 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The tag key must start with a letter but cannot start with `aliyun` or `acs:`. The tag key cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value. You can specify up to 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It cannot start with a `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tags', description='The tag list.'),
}

model ListIpamScopesResponseBody = {
  count?: long(name='Count', description='The number of entries returned.', example='10'),
  ipamScopes?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the IPAM scope was created.', example='2022-04-18T03:12:37Z'),
      ipamId?: string(name='IpamId', description='The ID of the IPAM.', example='ipam-ccxbnsbhew0d6t****'),
      ipamScopeDescription?: string(name='IpamScopeDescription', description='The description of the IPAM scope.', example='test description'),
      ipamScopeId?: string(name='IpamScopeId', description='The ID of the IPAM scope.', example='ipam-scope-glfmcyldpm8lsy****'),
      ipamScopeName?: string(name='IpamScopeName', description='The name of the IPAM scope.', example='test'),
      ipamScopeType?: string(name='IpamScopeType', description='The type of the IPAM scope. Valid values:

*   **public**
*   **private**', example='private'),
      isDefault?: boolean(name='IsDefault', description='Indicates whether the scope is the default scope. Valid values:

*   **true**
*   **false**', example='true'),
      ownerId?: long(name='OwnerId', description='The Alibaba Cloud account that owns the IPAM scope.', example='1210123456******'),
      poolCount?: int32(name='PoolCount', description='The number of pools in the IPAM scope.', example='2'),
      regionId?: string(name='RegionId', description='The region ID of the IPAM.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxazb4ph6aiy****'),
      status?: string(name='Status', description='The status of the IPAM scope. Valid values:

*   **Creating**
*   **Created**
*   **Deleting**
*   **Deleted**', example='Created'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='FinanceDept'),
          value?: string(name='Value', description='The tag value.', example='FinanceDept'),
        }
      ](name='Tags', description='The tag list.'),
    }
  ](name='IpamScopes', description='The IPAM scopes.'),
  maxResults?: long(name='MaxResults', description='The number of entries per page.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value of **NextToken** is returned, the value indicates the token that is used for the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='8859C501-97E7-53D4-B94B-2A9E16003B22'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='1000'),
}

model ListIpamScopesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIpamScopesResponseBody(name='body'),
}

/**
 * @summary Queries IP Address Manager (IPAM) scopes.
 *
 * @param request ListIpamScopesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListIpamScopesResponse
 */
async function listIpamScopesWithOptions(request: ListIpamScopesRequest, runtime: Util.RuntimeOptions): ListIpamScopesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipamId)) {
    query['IpamId'] = request.ipamId;
  }
  if (!Util.isUnset(request.ipamScopeIds)) {
    query['IpamScopeIds'] = request.ipamScopeIds;
  }
  if (!Util.isUnset(request.ipamScopeName)) {
    query['IpamScopeName'] = request.ipamScopeName;
  }
  if (!Util.isUnset(request.ipamScopeType)) {
    query['IpamScopeType'] = request.ipamScopeType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListIpamScopes',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries IP Address Manager (IPAM) scopes.
 *
 * @param request ListIpamScopesRequest
 * @return ListIpamScopesResponse
 */
async function listIpamScopes(request: ListIpamScopesRequest): ListIpamScopesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIpamScopesWithOptions(request, runtime);
}

model ListIpamsRequest {
  ipamIds?: [ string ](name='IpamIds', description='The IDs of IPAMs. Valid values of N: 1 to 100. A maximum of 100 IPAMs can be queried at a time.'),
  ipamName?: string(name='IpamName', description='The name of the IPAM.

It must be 1 to 128 characters in length and cannot start with `http://` or `https://`.', example='test'),
  maxResults?: long(name='MaxResults', description='The number of entries per page. Valid values: **1** to **100**. Default value: **10**.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of NextToken.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region where the IPAM instance is hosted. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID of the IPAM.', example='rg-aek2sermdd6****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key. You can specify at most 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 64 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The tag key must start with a letter but cannot start with `aliyun` or `acs:`. The tag key cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length. It must start with a letter and can contain digits, periods (.), underscores (_), and hyphens (-). It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tags', description='The tag information.'),
}

model ListIpamsResponseBody = {
  count?: long(name='Count', description='The number of entries returned.', example='10'),
  ipams?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the IPAM was created.', example='2022-07-01T02:05:23Z'),
      defaultResourceDiscoveryAssociationId?: string(name='DefaultResourceDiscoveryAssociationId', description='Default resource discovery association ID.', example='ipam-res-disco-assoc-jt5fac8twugdbbgip****'),
      defaultResourceDiscoveryId?: string(name='DefaultResourceDiscoveryId', description='Default resource discovery instance ID.', example='ipam-res-disco-jt5f2af2u6nk2z321****'),
      ipamDescription?: string(name='IpamDescription', description='The description of the IPAM.', example='test description'),
      ipamId?: string(name='IpamId', description='The ID of the IPAM.', example='ipam-ccxbnsbhew0d6t****'),
      ipamName?: string(name='IpamName', description='The name of the IPAM.', example='test'),
      ipamStatus?: string(name='IpamStatus', description='The status of the IPAM. Valid values:

*   **Creating**
*   **Created**
*   **Deleting**
*   **Deleted**', example='Created'),
      operatingRegionList?: [ string ](name='OperatingRegionList', description='The effective regions of the IPAM.'),
      ownerId?: long(name='OwnerId', description='The Alibaba Cloud account that owns the IPAM.', example='1210123456******'),
      privateDefaultScopeId?: string(name='PrivateDefaultScopeId', description='The default private scope created by the system after the IPAM is created.', example='ipam-scope-okoerbco6unqfr****'),
      publicDefaultScopeId?: string(name='PublicDefaultScopeId', description='The default public scope created by the system after the IPAM is created.', example='ipam-scope-ovb76p1g1m19dr****'),
      regionId?: string(name='RegionId', description='The region ID of the IPAM.', example='cn-hangzhou'),
      resourceDiscoveryAssociationCount?: int32(name='ResourceDiscoveryAssociationCount', description='Number of resource discovery associations.', example='1'),
      resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID of the IPAM.', example='rg-aek2dbprgpt****'),
      scopeCount?: int32(name='ScopeCount', description='The number of IPAM scopes. Value: **2 to 5**.', example='2'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='FinanceDept'),
          value?: string(name='Value', description='The tag value.', example='FinanceJoshua'),
        }
      ](name='Tags', description='The tag list.'),
    }
  ](name='Ipams', description='The IPAMs.'),
  maxResults?: long(name='MaxResults', description='The number of entries per page. Valid values: 1 to 100. Default value: 10.', example='20'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value of **NextToken** is returned, the value indicates the token that is used for the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='23CA0A0B-B0F5-5495-B355-7D9A9203A46B'),
  totalCount?: long(name='TotalCount', description='The number of entries.', example='10'),
}

model ListIpamsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIpamsResponseBody(name='body'),
}

/**
 * @summary Queries IP Address Managers (IPAMs).
 *
 * @param request ListIpamsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListIpamsResponse
 */
async function listIpamsWithOptions(request: ListIpamsRequest, runtime: Util.RuntimeOptions): ListIpamsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipamIds)) {
    query['IpamIds'] = request.ipamIds;
  }
  if (!Util.isUnset(request.ipamName)) {
    query['IpamName'] = request.ipamName;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListIpams',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries IP Address Managers (IPAMs).
 *
 * @param request ListIpamsRequest
 * @return ListIpamsResponse
 */
async function listIpams(request: ListIpamsRequest): ListIpamsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIpamsWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: **1** to **50**. Default value: **10**.', example='20'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   If a value is returned for NextToken, you must specify the token that is obtained from the previous query as the value of **NextToken**.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the resource.

This parameter is required.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The resource IDs.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='The resource type. Valid values:

*   **IPAM**
*   **IPAMSCOPE**
*   **IPAMPOOL**

This parameter is required.', example='IPAM'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. You can specify at most 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 64 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It cannot start with a `aliyun` or `acs:`, and cannot contain `http://` or `https://`.

>  You must specify **ResourceId.N** or **Tag.N** that consists of **Tag.N.Key** and **Tag.N.Value**.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It cannot start with a `aliyun` or `acs:`, and cannot contain `http://` or `https://`.

>  You must specify **ResourceId.N** or **Tag.N** that consists of **Tag.N.Key** and **Tag.N.Value**.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tag list.'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value of **NextToken** is returned, the value indicates the token that is used for the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='672053AB-90C9-5693-AB96-458F137A5ED6'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The resource ID.', example='ipam-uq5dcfc2eqhpf4****'),
      resourceType?: string(name='ResourceType', description='The resource type. Valid values:

*   **IPAM**
*   **IPAMSCOPE**
*   **IPAMPOOL**', example='IPAM'),
      tagKey?: string(name='TagKey', description='The tag key.', example='FinanceDept'),
      tagValue?: string(name='TagValue', description='The tag value.', example='FinanceJoshua'),
    }
  ](name='TagResources', description='The resources to which the tags are added.'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
 * @summary Queries a list of resource tags.
 *
 * @description ### [](#)Usage notes
 * *   You must specify **ResourceId.N** or **Tag.N** that consists of **Tag.N.Key** and **Tag.N.Value** in the request to specify the object that you want to query.
 * *   **Tag.N** is a resource tag that consists of a key-value pair. If you specify only **Tag.N.Key**, all tag values that are associated with the specified key are returned. If you specify only **Tag.N.Value**, an error message is returned.
 * *   If you specify **Tag.N** and **ResourceId.N** to filter tags, **ResourceId.N** must match all specified key-value pairs.
 * *   If you specify multiple key-value pairs, resources that contain these key-value pairs are returned.
 *
 * @param request ListTagResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTagResourcesResponse
 */
async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of resource tags.
 *
 * @description ### [](#)Usage notes
 * *   You must specify **ResourceId.N** or **Tag.N** that consists of **Tag.N.Key** and **Tag.N.Value** in the request to specify the object that you want to query.
 * *   **Tag.N** is a resource tag that consists of a key-value pair. If you specify only **Tag.N.Key**, all tag values that are associated with the specified key are returned. If you specify only **Tag.N.Value**, an error message is returned.
 * *   If you specify **Tag.N** and **ResourceId.N** to filter tags, **ResourceId.N** must match all specified key-value pairs.
 * *   If you specify multiple key-value pairs, resources that contain these key-value pairs are returned.
 *
 * @param request ListTagResourcesRequest
 * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model OpenVpcIpamServiceRequest {
  clientToken?: string(name='ClientToken', description='Client token, used to ensure the idempotence of requests.

Generate a unique value for this parameter from your client to ensure it is unique across different requests. ClientToken supports only ASCII characters.

> If not specified, the system automatically uses the RequestId of the API request as the ClientToken identifier. The RequestId may differ for each API request.', example='123e4567-e89b-12d3-a456-426655440000'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region where the IPAM instance is hosted.

This parameter is required.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model OpenVpcIpamServiceResponseBody = {
  code?: string(name='Code', description='Status code.', example='200'),
  message?: string(name='Message', description='Information returned upon successful IPAM activation.', example='successful'),
  requestId?: string(name='RequestId', description='Request ID.', example='3F814C37-B032-5477-AF5A-2925D0593CD4'),
}

model OpenVpcIpamServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenVpcIpamServiceResponseBody(name='body'),
}

/**
 * @summary Activates IP Address Manager (IPAM).
 *
 * @param request OpenVpcIpamServiceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return OpenVpcIpamServiceResponse
 */
async function openVpcIpamServiceWithOptions(request: OpenVpcIpamServiceRequest, runtime: Util.RuntimeOptions): OpenVpcIpamServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenVpcIpamService',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Activates IP Address Manager (IPAM).
 *
 * @param request OpenVpcIpamServiceRequest
 * @return OpenVpcIpamServiceResponse
 */
async function openVpcIpamService(request: OpenVpcIpamServiceRequest): OpenVpcIpamServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openVpcIpamServiceWithOptions(request, runtime);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the resource.

This parameter is required.', example='cn-beijing'),
  resourceId?: [ string ](name='ResourceId', description='The IDs of the resources.

This parameter is required.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='The resource type. Valid values:

*   **IPAM**
*   **IPAMSCOPE**
*   **IPAMPOOL**

This parameter is required.', example='IPAM'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. You can specify at most 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 64 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It cannot start with a `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It cannot start with a `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags to add to the resources.

This parameter is required.'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='BF872550-9700-52FD-839C-4D3F05543FA8'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
 * @summary Adds a tag to a resource.
 *
 * @description ### [](#)Usage notes
 * Tags are used to classify instances. Each tag consists of a key-value pair. Before you use tags, take note of the following items:
 * *   Each tag key that is added to an instance must be unique.
 * *   You cannot create tags without adding them to instances. All tags must be added to instances.
 * *   You can add at most 20 tags to each instance. Before you add a tag to an instance, the system automatically checks the number of existing tags. An error message is returned if the maximum number of tags is reached.
 *
 * @param request TagResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TagResourcesResponse
 */
async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Adds a tag to a resource.
 *
 * @description ### [](#)Usage notes
 * Tags are used to classify instances. Each tag consists of a key-value pair. Before you use tags, take note of the following items:
 * *   Each tag key that is added to an instance must be unique.
 * *   You cannot create tags without adding them to instances. All tags must be added to instances.
 * *   You can add at most 20 tags to each instance. Before you add a tag to an instance, the system automatically checks the number of existing tags. An error message is returned if the maximum number of tags is reached.
 *
 * @param request TagResourcesRequest
 * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to remove all tags from the specified resource. Valid values:

*   **true**
*   **false** (default)', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the resource.

This parameter is required.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The resource IDs.

This parameter is required.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='The resource type. Valid values:

*   **IPAM**
*   **IPAMSCOPE**
*   **IPAMPOOL**

This parameter is required.', example='IPAM'),
  tagKey?: [ string ](name='TagKey', description='The keys of the tags that you want to remove from the resource.'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='44C884BD-2D56-5637-A523-1FA920A01E7D'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

/**
 * @summary Removes a tag from a resource.
 *
 * @param request UntagResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UntagResourcesResponse
 */
async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Removes a tag from a resource.
 *
 * @param request UntagResourcesRequest
 * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateIpamRequest {
  addOperatingRegion?: [ string ](name='AddOperatingRegion', description='The effective region that you want to add.'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  ipamDescription?: string(name='IpamDescription', description='The description of the IPAM.

It must be 2 to 256 characters in length and must start with a letter. It cannot start with `http://` or `https://`. The default value is empty.', example='test description'),
  ipamId?: string(name='IpamId', description='The ID of the IPAM.

This parameter is required.', example='ipam-ccxbnsbhew0d6t****'),
  ipamName?: string(name='IpamName', description='The name of the IPAM.

It must be 1 to 128 characters in length and cannot start with `http://` or `https://`.', example='test'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region where the IPAM instance is hosted. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou'),
  removeOperatingRegion?: [ string ](name='RemoveOperatingRegion', description='The effective region that you want to remove.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UpdateIpamResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F4650E33-895C-53F0-9CD5-D1338F322DE8'),
}

model UpdateIpamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateIpamResponseBody(name='body'),
}

/**
 * @summary Updates an IP Address Manager (IPAM).
 *
 * @param request UpdateIpamRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateIpamResponse
 */
async function updateIpamWithOptions(request: UpdateIpamRequest, runtime: Util.RuntimeOptions): UpdateIpamResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addOperatingRegion)) {
    query['AddOperatingRegion'] = request.addOperatingRegion;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipamDescription)) {
    query['IpamDescription'] = request.ipamDescription;
  }
  if (!Util.isUnset(request.ipamId)) {
    query['IpamId'] = request.ipamId;
  }
  if (!Util.isUnset(request.ipamName)) {
    query['IpamName'] = request.ipamName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.removeOperatingRegion)) {
    query['RemoveOperatingRegion'] = request.removeOperatingRegion;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateIpam',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates an IP Address Manager (IPAM).
 *
 * @param request UpdateIpamRequest
 * @return UpdateIpamResponse
 */
async function updateIpam(request: UpdateIpamRequest): UpdateIpamResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateIpamWithOptions(request, runtime);
}

model UpdateIpamPoolRequest {
  allocationDefaultCidrMask?: int32(name='AllocationDefaultCidrMask', description='The new default network mask for the IPAM pool.

The mask must be **0 to 32** bits in length.', example='28'),
  allocationMaxCidrMask?: int32(name='AllocationMaxCidrMask', description='The new maximum network mask for the IPAM pool.

The mask must be **0 to 32** bits in length.', example='32'),
  allocationMinCidrMask?: int32(name='AllocationMinCidrMask', description='The new minimum network mask for the IPAM pool.

The mask must be **0 to 32** bits in length.', example='8'),
  autoImport?: boolean(name='AutoImport', description='Whether the pool has the auto-import feature enabled.', example='true'),
  clearAllocationDefaultCidrMask?: boolean(name='ClearAllocationDefaultCidrMask', description='Specifies whether to delete the default network mask for the IPAM pool. Valid values:

*   **true**
*   **false**', example='true'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  ipamPoolDescription?: string(name='IpamPoolDescription', description='The new description of the IPAM pool.

It must be 2 to 268 characters in length. It must start with a letter but cannot start with a `http://` or `https://`. This parameter is empty by default.', example='test description'),
  ipamPoolId?: string(name='IpamPoolId', description='The ID of the IPAM pool.

This parameter is required.', example='ipam-pool-6rcq3tobayc20t****'),
  ipamPoolName?: string(name='IpamPoolName', description='The new name of the IPAM pool.

It must be 1 to 128 characters in length and cannot start with `http://` or `https://`.', example='test'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region where the IPAM instance is hosted. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UpdateIpamPoolResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='9DED57B9-7654-5B6D-93F7-BCA5839FEE38'),
}

model UpdateIpamPoolResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateIpamPoolResponseBody(name='body'),
}

/**
 * @summary Modifies the basic information about an IP Address Manager (IPAM) pool.
 *
 * @param request UpdateIpamPoolRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateIpamPoolResponse
 */
async function updateIpamPoolWithOptions(request: UpdateIpamPoolRequest, runtime: Util.RuntimeOptions): UpdateIpamPoolResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocationDefaultCidrMask)) {
    query['AllocationDefaultCidrMask'] = request.allocationDefaultCidrMask;
  }
  if (!Util.isUnset(request.allocationMaxCidrMask)) {
    query['AllocationMaxCidrMask'] = request.allocationMaxCidrMask;
  }
  if (!Util.isUnset(request.allocationMinCidrMask)) {
    query['AllocationMinCidrMask'] = request.allocationMinCidrMask;
  }
  if (!Util.isUnset(request.autoImport)) {
    query['AutoImport'] = request.autoImport;
  }
  if (!Util.isUnset(request.clearAllocationDefaultCidrMask)) {
    query['ClearAllocationDefaultCidrMask'] = request.clearAllocationDefaultCidrMask;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipamPoolDescription)) {
    query['IpamPoolDescription'] = request.ipamPoolDescription;
  }
  if (!Util.isUnset(request.ipamPoolId)) {
    query['IpamPoolId'] = request.ipamPoolId;
  }
  if (!Util.isUnset(request.ipamPoolName)) {
    query['IpamPoolName'] = request.ipamPoolName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateIpamPool',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the basic information about an IP Address Manager (IPAM) pool.
 *
 * @param request UpdateIpamPoolRequest
 * @return UpdateIpamPoolResponse
 */
async function updateIpamPool(request: UpdateIpamPoolRequest): UpdateIpamPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateIpamPoolWithOptions(request, runtime);
}

model UpdateIpamPoolAllocationRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to precheck this request. Valid values:

*   **true**: performs a dry run without modifying the CIDR blocks of IPAM pools. The system checks the required parameters, request syntax, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
*   **false** (default): performs a dry run and the actual request. If the request passes the check, an HTTP 2xx status code is returned and the CIDR allocation information of the IPAM address pool is modified.', example='false'),
  ipamPoolAllocationDescription?: string(name='IpamPoolAllocationDescription', description='The description of the CIDR allocation of the IPAM pool.

The description must be 1 to 256 characters in length and start with a letter, but cannot start with a `http://` or `https://`. This parameter is empty by default.', example='test description'),
  ipamPoolAllocationId?: string(name='IpamPoolAllocationId', description='The ID of the instance to which CIDR blocks are allocated from the IPAM pool.

This parameter is required.', example='ipam-pool-alloc-112za33e4****'),
  ipamPoolAllocationName?: string(name='IpamPoolAllocationName', description='The name of the CIDR allocation of the IPAM pool.

It must be 1 to 128 characters in length and cannot start with `http://` or `https://`.', example='test name'),
  regionId?: string(name='RegionId', description='The ID of the region where you want to perform the operation. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the region list.

This parameter is required.', example='cn-hangzhou'),
}

model UpdateIpamPoolAllocationResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F4650E33-895C-53F0-9CD5-D1338F322DE8'),
}

model UpdateIpamPoolAllocationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateIpamPoolAllocationResponseBody(name='body'),
}

/**
 * @summary Modifies CIDR block allocations of an IP Address Manager (IPAM) pool.
 *
 * @param request UpdateIpamPoolAllocationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateIpamPoolAllocationResponse
 */
async function updateIpamPoolAllocationWithOptions(request: UpdateIpamPoolAllocationRequest, runtime: Util.RuntimeOptions): UpdateIpamPoolAllocationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipamPoolAllocationDescription)) {
    query['IpamPoolAllocationDescription'] = request.ipamPoolAllocationDescription;
  }
  if (!Util.isUnset(request.ipamPoolAllocationId)) {
    query['IpamPoolAllocationId'] = request.ipamPoolAllocationId;
  }
  if (!Util.isUnset(request.ipamPoolAllocationName)) {
    query['IpamPoolAllocationName'] = request.ipamPoolAllocationName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateIpamPoolAllocation',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies CIDR block allocations of an IP Address Manager (IPAM) pool.
 *
 * @param request UpdateIpamPoolAllocationRequest
 * @return UpdateIpamPoolAllocationResponse
 */
async function updateIpamPoolAllocation(request: UpdateIpamPoolAllocationRequest): UpdateIpamPoolAllocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateIpamPoolAllocationWithOptions(request, runtime);
}

model UpdateIpamResourceDiscoveryRequest {
  addOperatingRegion?: [ string ](name='AddOperatingRegion', description='The list of effective regions to add.'),
  clientToken?: string(name='ClientToken', description='The client token used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform the dry run. Valid values:

*   **true**: Performs a dry run without modifying the resource discovery instance. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the DryRunOperation error code is returned.
*   **false** (default): Performs a dry run and the actual request. If the request passes the check, an HTTP 2xx status code is returned and the resource discovery instance is modified.', example='false'),
  ipamResourceDiscoveryDescription?: string(name='IpamResourceDiscoveryDescription', description='The description of resource discovery.', example='test description'),
  ipamResourceDiscoveryId?: string(name='IpamResourceDiscoveryId', description='The ID of resource discovery instance.

This parameter is required.', example='ipam-res-disco-jt5f2af2u6nk2z321****'),
  ipamResourceDiscoveryName?: string(name='IpamResourceDiscoveryName', description='The name of the resource discovery.', example='test'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The request region.

This parameter is required.', example='cn-hangzhou'),
  removeOperatingRegion?: [ string ](name='RemoveOperatingRegion', description='The list of effective regions to remove.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UpdateIpamResourceDiscoveryResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='BB2C39DE-CEB8-595A-981A-F2EFCBE7324E'),
}

model UpdateIpamResourceDiscoveryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateIpamResourceDiscoveryResponseBody(name='body'),
}

/**
 * @summary Modifies a resource discovery instance.
 *
 * @description *   You can add or remove effective regions only for custom resource discovery instances.
 * *   When removing effective regions from a resource discovery instance, the managed region cannot be included.
 *
 * @param request UpdateIpamResourceDiscoveryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateIpamResourceDiscoveryResponse
 */
async function updateIpamResourceDiscoveryWithOptions(request: UpdateIpamResourceDiscoveryRequest, runtime: Util.RuntimeOptions): UpdateIpamResourceDiscoveryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addOperatingRegion)) {
    query['AddOperatingRegion'] = request.addOperatingRegion;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipamResourceDiscoveryDescription)) {
    query['IpamResourceDiscoveryDescription'] = request.ipamResourceDiscoveryDescription;
  }
  if (!Util.isUnset(request.ipamResourceDiscoveryId)) {
    query['IpamResourceDiscoveryId'] = request.ipamResourceDiscoveryId;
  }
  if (!Util.isUnset(request.ipamResourceDiscoveryName)) {
    query['IpamResourceDiscoveryName'] = request.ipamResourceDiscoveryName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.removeOperatingRegion)) {
    query['RemoveOperatingRegion'] = request.removeOperatingRegion;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateIpamResourceDiscovery',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies a resource discovery instance.
 *
 * @description *   You can add or remove effective regions only for custom resource discovery instances.
 * *   When removing effective regions from a resource discovery instance, the managed region cannot be included.
 *
 * @param request UpdateIpamResourceDiscoveryRequest
 * @return UpdateIpamResourceDiscoveryResponse
 */
async function updateIpamResourceDiscovery(request: UpdateIpamResourceDiscoveryRequest): UpdateIpamResourceDiscoveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateIpamResourceDiscoveryWithOptions(request, runtime);
}

model UpdateIpamScopeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, DryRunOperation is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  ipamScopeDescription?: string(name='IpamScopeDescription', description='The new description of the IPAM scope.

It must be 2 to 256 characters in length. It must start with a letter but cannot start with `http://` or `https://`. This parameter is empty by default.', example='test description'),
  ipamScopeId?: string(name='IpamScopeId', description='The ID of the IPAM scope.

This parameter is required.', example='ipam-scope-glfmcyldpm8lsy****'),
  ipamScopeName?: string(name='IpamScopeName', description='The new name of the IPAM scope.

It must be 1 to 128 characters in length and cannot start with `http://` or `https://`.', example='test'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region where the IPAM instance is hosted. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UpdateIpamScopeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='BA8054F5-852A-570A-ACFF-BCA63E0B02D5'),
}

model UpdateIpamScopeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateIpamScopeResponseBody(name='body'),
}

/**
 * @summary Modifies the basic information about an IP Address Manager (IPAM) scope.
 *
 * @param request UpdateIpamScopeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateIpamScopeResponse
 */
async function updateIpamScopeWithOptions(request: UpdateIpamScopeRequest, runtime: Util.RuntimeOptions): UpdateIpamScopeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipamScopeDescription)) {
    query['IpamScopeDescription'] = request.ipamScopeDescription;
  }
  if (!Util.isUnset(request.ipamScopeId)) {
    query['IpamScopeId'] = request.ipamScopeId;
  }
  if (!Util.isUnset(request.ipamScopeName)) {
    query['IpamScopeName'] = request.ipamScopeName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateIpamScope',
    version = '2023-02-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the basic information about an IP Address Manager (IPAM) scope.
 *
 * @param request UpdateIpamScopeRequest
 * @return UpdateIpamScopeResponse
 */
async function updateIpamScope(request: UpdateIpamScopeRequest): UpdateIpamScopeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateIpamScopeWithOptions(request, runtime);
}

