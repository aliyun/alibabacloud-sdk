/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('dypnsapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateVerifySchemeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  schemeName?: string(name='SchemeName'),
  appName?: string(name='AppName'),
  osType?: string(name='OsType'),
  packName?: string(name='PackName'),
  packSign?: string(name='PackSign'),
  bundleId?: string(name='BundleId'),
}

model CreateVerifySchemeResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  gateVerifySchemeDTO?: {
    schemeCode?: string(name='SchemeCode'),
  }(name='GateVerifySchemeDTO'),
  code?: string(name='Code'),
}

model CreateVerifySchemeResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVerifySchemeResponseBody(name='body'),
}

async function createVerifySchemeWithOptions(request: CreateVerifySchemeRequest, runtime: Util.RuntimeOptions): CreateVerifySchemeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateVerifyScheme', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createVerifyScheme(request: CreateVerifySchemeRequest): CreateVerifySchemeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVerifySchemeWithOptions(request, runtime);
}

model DeleteVerifySchemeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  schemeCode?: string(name='SchemeCode'),
  customerId?: long(name='CustomerId'),
}

model DeleteVerifySchemeResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  result?: boolean(name='Result'),
}

model DeleteVerifySchemeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVerifySchemeResponseBody(name='body'),
}

async function deleteVerifySchemeWithOptions(request: DeleteVerifySchemeRequest, runtime: Util.RuntimeOptions): DeleteVerifySchemeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVerifyScheme', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVerifyScheme(request: DeleteVerifySchemeRequest): DeleteVerifySchemeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVerifySchemeWithOptions(request, runtime);
}

model DescribeVerifySchemeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  schemeCode?: string(name='SchemeCode'),
  customerId?: long(name='CustomerId'),
}

model DescribeVerifySchemeResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  schemeQueryResultDTO?: {
    appEncryptInfo?: string(name='AppEncryptInfo'),
  }(name='SchemeQueryResultDTO'),
}

model DescribeVerifySchemeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVerifySchemeResponseBody(name='body'),
}

async function describeVerifySchemeWithOptions(request: DescribeVerifySchemeRequest, runtime: Util.RuntimeOptions): DescribeVerifySchemeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVerifyScheme', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVerifyScheme(request: DescribeVerifySchemeRequest): DescribeVerifySchemeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVerifySchemeWithOptions(request, runtime);
}

model GetAuthorizationUrlRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  phoneNo?: string(name='PhoneNo'),
  schemeId?: long(name='SchemeId'),
  endDate?: string(name='EndDate'),
}

model GetAuthorizationUrlResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    authorizationUrl?: string(name='AuthorizationUrl'),
  }(name='Data'),
  code?: string(name='Code'),
}

model GetAuthorizationUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetAuthorizationUrlResponseBody(name='body'),
}

async function getAuthorizationUrlWithOptions(request: GetAuthorizationUrlRequest, runtime: Util.RuntimeOptions): GetAuthorizationUrlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAuthorizationUrl', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAuthorizationUrl(request: GetAuthorizationUrlRequest): GetAuthorizationUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAuthorizationUrlWithOptions(request, runtime);
}

model GetAuthTokenRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  url?: string(name='Url'),
  origin?: string(name='Origin'),
}

model GetAuthTokenResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  tokenInfo?: {
    jwtToken?: string(name='JwtToken'),
    accessToken?: string(name='AccessToken'),
  }(name='TokenInfo'),
  code?: string(name='Code'),
}

model GetAuthTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetAuthTokenResponseBody(name='body'),
}

async function getAuthTokenWithOptions(request: GetAuthTokenRequest, runtime: Util.RuntimeOptions): GetAuthTokenResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAuthToken', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAuthToken(request: GetAuthTokenRequest): GetAuthTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAuthTokenWithOptions(request, runtime);
}

model GetCertifyResultRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  productCode?: string(name='ProductCode'),
  token?: string(name='Token'),
}

model GetCertifyResultResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      materialInfo?: string(name='MaterialInfo'),
      verifyDesc?: string(name='VerifyDesc'),
      identityInfo?: string(name='IdentityInfo'),
      verifyResult?: string(name='VerifyResult'),
      deviceToken?: string(name='DeviceToken'),
    }
  ](name='Data'),
  code?: string(name='Code'),
}

model GetCertifyResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetCertifyResultResponseBody(name='body'),
}

async function getCertifyResultWithOptions(request: GetCertifyResultRequest, runtime: Util.RuntimeOptions): GetCertifyResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetCertifyResult', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getCertifyResult(request: GetCertifyResultRequest): GetCertifyResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCertifyResultWithOptions(request, runtime);
}

model GetMobileRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  accessToken?: string(name='AccessToken'),
  outId?: string(name='OutId'),
}

model GetMobileResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  getMobileResultDTO?: {
    mobile?: string(name='Mobile'),
  }(name='GetMobileResultDTO'),
}

model GetMobileResponse = {
  headers: map[string]string(name='headers'),
  body: GetMobileResponseBody(name='body'),
}

async function getMobileWithOptions(request: GetMobileRequest, runtime: Util.RuntimeOptions): GetMobileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetMobile', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getMobile(request: GetMobileRequest): GetMobileResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMobileWithOptions(request, runtime);
}

model TwiceTelVerifyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  since?: string(name='Since'),
  phoneNumber?: string(name='PhoneNumber'),
}

model TwiceTelVerifyResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  twiceTelVerifyResult?: {
    carrier?: string(name='Carrier'),
    verifyResult?: int32(name='VerifyResult'),
  }(name='TwiceTelVerifyResult'),
  code?: string(name='Code'),
}

model TwiceTelVerifyResponse = {
  headers: map[string]string(name='headers'),
  body: TwiceTelVerifyResponseBody(name='body'),
}

async function twiceTelVerifyWithOptions(request: TwiceTelVerifyRequest, runtime: Util.RuntimeOptions): TwiceTelVerifyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TwiceTelVerify', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function twiceTelVerify(request: TwiceTelVerifyRequest): TwiceTelVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return twiceTelVerifyWithOptions(request, runtime);
}

model VerifyMobileRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  accessCode?: string(name='AccessCode'),
  phoneNumber?: string(name='PhoneNumber'),
  outId?: string(name='OutId'),
}

model VerifyMobileResponseBody = {
  gateVerifyResultDTO?: {
    verifyResult?: string(name='VerifyResult'),
    verifyId?: string(name='VerifyId'),
  }(name='GateVerifyResultDTO'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model VerifyMobileResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyMobileResponseBody(name='body'),
}

async function verifyMobileWithOptions(request: VerifyMobileRequest, runtime: Util.RuntimeOptions): VerifyMobileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('VerifyMobile', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function verifyMobile(request: VerifyMobileRequest): VerifyMobileResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyMobileWithOptions(request, runtime);
}

model VerifyPhoneWithTokenRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  phoneNumber?: string(name='PhoneNumber'),
  spToken?: string(name='SpToken'),
}

model VerifyPhoneWithTokenResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  gateVerify?: {
    verifyResult?: string(name='VerifyResult'),
    verifyId?: string(name='VerifyId'),
  }(name='GateVerify'),
  code?: string(name='Code'),
}

model VerifyPhoneWithTokenResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyPhoneWithTokenResponseBody(name='body'),
}

async function verifyPhoneWithTokenWithOptions(request: VerifyPhoneWithTokenRequest, runtime: Util.RuntimeOptions): VerifyPhoneWithTokenResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('VerifyPhoneWithToken', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function verifyPhoneWithToken(request: VerifyPhoneWithTokenRequest): VerifyPhoneWithTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyPhoneWithTokenWithOptions(request, runtime);
}

