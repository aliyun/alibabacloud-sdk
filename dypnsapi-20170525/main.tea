/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @signatureAlgorithm = 'v2';
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('dypnsapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateVerifySchemeRequest {
  appName?: string(name='AppName'),
  authType?: string(name='AuthType'),
  bundleId?: string(name='BundleId', example='example.aliyundoc.com'),
  cmApiCode?: long(name='CmApiCode'),
  ctApiCode?: long(name='CtApiCode'),
  cuApiCode?: long(name='CuApiCode'),
  email?: string(name='Email'),
  ipWhiteList?: string(name='IpWhiteList'),
  origin?: string(name='Origin'),
  osType?: string(name='OsType', example='iOS'),
  ownerId?: long(name='OwnerId'),
  packName?: string(name='PackName', example='com.aliyun'),
  packSign?: string(name='PackSign', example='123aliyun'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sceneType?: string(name='SceneType'),
  schemeName?: string(name='SchemeName'),
  smsSignName?: string(name='SmsSignName'),
  url?: string(name='Url'),
}

model CreateVerifySchemeResponseBody = {
  code?: string(name='Code', example='OK'),
  gateVerifySchemeDTO?: {
    schemeCode?: string(name='SchemeCode', example='FC10001287****'),
  }(name='GateVerifySchemeDTO'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='8906582E6722'),
  success?: boolean(name='Success'),
}

model CreateVerifySchemeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVerifySchemeResponseBody(name='body'),
}

async function createVerifySchemeWithOptions(request: CreateVerifySchemeRequest, runtime: Util.RuntimeOptions): CreateVerifySchemeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.authType)) {
    query['AuthType'] = request.authType;
  }
  if (!Util.isUnset(request.bundleId)) {
    query['BundleId'] = request.bundleId;
  }
  if (!Util.isUnset(request.cmApiCode)) {
    query['CmApiCode'] = request.cmApiCode;
  }
  if (!Util.isUnset(request.ctApiCode)) {
    query['CtApiCode'] = request.ctApiCode;
  }
  if (!Util.isUnset(request.cuApiCode)) {
    query['CuApiCode'] = request.cuApiCode;
  }
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  if (!Util.isUnset(request.ipWhiteList)) {
    query['IpWhiteList'] = request.ipWhiteList;
  }
  if (!Util.isUnset(request.origin)) {
    query['Origin'] = request.origin;
  }
  if (!Util.isUnset(request.osType)) {
    query['OsType'] = request.osType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.packName)) {
    query['PackName'] = request.packName;
  }
  if (!Util.isUnset(request.packSign)) {
    query['PackSign'] = request.packSign;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sceneType)) {
    query['SceneType'] = request.sceneType;
  }
  if (!Util.isUnset(request.schemeName)) {
    query['SchemeName'] = request.schemeName;
  }
  if (!Util.isUnset(request.smsSignName)) {
    query['SmsSignName'] = request.smsSignName;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVerifyScheme',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVerifyScheme(request: CreateVerifySchemeRequest): CreateVerifySchemeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVerifySchemeWithOptions(request, runtime);
}

model DeleteVerifySchemeRequest {
  customerId?: long(name='CustomerId', example='12345678'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  schemeCode?: string(name='SchemeCode', example='FC10000014164****'),
}

model DeleteVerifySchemeResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='E3754956-D0B1-5947-962A-AE767D354F01'),
  result?: boolean(name='Result', example='true'),
}

model DeleteVerifySchemeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVerifySchemeResponseBody(name='body'),
}

async function deleteVerifySchemeWithOptions(request: DeleteVerifySchemeRequest, runtime: Util.RuntimeOptions): DeleteVerifySchemeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.customerId)) {
    query['CustomerId'] = request.customerId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.schemeCode)) {
    query['SchemeCode'] = request.schemeCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVerifyScheme',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVerifyScheme(request: DeleteVerifySchemeRequest): DeleteVerifySchemeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVerifySchemeWithOptions(request, runtime);
}

model DescribeVerifySchemeRequest {
  customerId?: long(name='CustomerId', example='1234****'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  schemeCode?: string(name='SchemeCode', example='FC10000010643****'),
}

model DescribeVerifySchemeResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='0C5380A7-2032-5F7D-9614-1BF8B54D16CB'),
  schemeQueryResultDTO?: {
    appEncryptInfo?: string(name='AppEncryptInfo', example='ZDMARqPkyQzWVJjB/sB/+fCp5TA4lNsRnY7rEC+HfGsOIOk1Brj8UyXFW2RBYIWqLieCSo8ZypEaEj+h9rLd3FgpXAjGYDfmOperod6jPUUwFHhBObxK+HuKVoi2jOqN7aDOlyPyGcATyq3BDdlf922JmnFLT8Hvnu4qgzzCZk0LXWTb0XVPnm5/fHUGHEA2Q+aTrGkaWcHjmTDqQ7BtvrAIIcJJkCJu4i1aeU++/0EzGWap4mcb2VhKROBs****'),
  }(name='SchemeQueryResultDTO'),
}

model DescribeVerifySchemeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVerifySchemeResponseBody(name='body'),
}

async function describeVerifySchemeWithOptions(request: DescribeVerifySchemeRequest, runtime: Util.RuntimeOptions): DescribeVerifySchemeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.customerId)) {
    query['CustomerId'] = request.customerId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.schemeCode)) {
    query['SchemeCode'] = request.schemeCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVerifyScheme',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVerifyScheme(request: DescribeVerifySchemeRequest): DescribeVerifySchemeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVerifySchemeWithOptions(request, runtime);
}

model GetAuthTokenRequest {
  origin?: string(name='Origin', example='www.aliyundoc.com'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  url?: string(name='Url', example='www.aliyundoc.com/'),
}

model GetAuthTokenResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='8906582E-6722'),
  tokenInfo?: {
    accessToken?: string(name='AccessToken', example='agag****'),
    jwtToken?: string(name='JwtToken', example='aweghd****'),
  }(name='TokenInfo'),
}

model GetAuthTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAuthTokenResponseBody(name='body'),
}

async function getAuthTokenWithOptions(request: GetAuthTokenRequest, runtime: Util.RuntimeOptions): GetAuthTokenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.origin)) {
    query['Origin'] = request.origin;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAuthToken',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAuthToken(request: GetAuthTokenRequest): GetAuthTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAuthTokenWithOptions(request, runtime);
}

model GetAuthorizationUrlRequest {
  endDate?: string(name='EndDate', example='2020–12–28'),
  ownerId?: long(name='OwnerId'),
  phoneNo?: string(name='PhoneNo', example='1390000****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  schemeId?: long(name='SchemeId', example='234****'),
}

model GetAuthorizationUrlResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    authorizationUrl?: string(name='AuthorizationUrl', example='https://render.****.com/p/s/web-call-minapp/auth-bao?page=commauth/index&token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJiaXpUeXBlIjoiQ29tbUF1dGgiLCJiaXpJZCI6IjVmNWZjNjAzZDQzMTQ0MWZiYTZiNjYzM2QyMjIyNzU0IiwiZXhwIjoxNjA4MTkxODQxfQ.5IvBj2nKgr60APtotaIB13vtPVrdsPQ6avIfWxte1pA&_env=prod'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='8906582E-6722'),
}

model GetAuthorizationUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAuthorizationUrlResponseBody(name='body'),
}

async function getAuthorizationUrlWithOptions(request: GetAuthorizationUrlRequest, runtime: Util.RuntimeOptions): GetAuthorizationUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNo)) {
    query['PhoneNo'] = request.phoneNo;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.schemeId)) {
    query['SchemeId'] = request.schemeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAuthorizationUrl',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAuthorizationUrl(request: GetAuthorizationUrlRequest): GetAuthorizationUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAuthorizationUrlWithOptions(request, runtime);
}

model GetMobileRequest {
  accessToken?: string(name='AccessToken', example='Dfafdafad5422****'),
  outId?: string(name='OutId', example='22345****'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetMobileResponseBody = {
  code?: string(name='Code', example='OK'),
  getMobileResultDTO?: {
    mobile?: string(name='Mobile', example='13900001234'),
  }(name='GetMobileResultDTO'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='8906582E-6722'),
}

model GetMobileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMobileResponseBody(name='body'),
}

async function getMobileWithOptions(request: GetMobileRequest, runtime: Util.RuntimeOptions): GetMobileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessToken)) {
    query['AccessToken'] = request.accessToken;
  }
  if (!Util.isUnset(request.outId)) {
    query['OutId'] = request.outId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMobile',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMobile(request: GetMobileRequest): GetMobileResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMobileWithOptions(request, runtime);
}

model GetPhoneWithTokenRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  spToken?: string(name='SpToken', example='Dfafdafad542****'),
}

model GetPhoneWithTokenResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    mobile?: string(name='Mobile', example='138****1234'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='0F335F48-****-****-****-CA7914FE5D77'),
}

model GetPhoneWithTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPhoneWithTokenResponseBody(name='body'),
}

async function getPhoneWithTokenWithOptions(request: GetPhoneWithTokenRequest, runtime: Util.RuntimeOptions): GetPhoneWithTokenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.spToken)) {
    query['SpToken'] = request.spToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPhoneWithToken',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPhoneWithToken(request: GetPhoneWithTokenRequest): GetPhoneWithTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPhoneWithTokenWithOptions(request, runtime);
}

model GetSmsAuthTokensRequest {
  bundleId?: string(name='BundleId', example='12345****'),
  expire?: long(name='Expire', example='900'),
  osType?: string(name='OsType', example='Android'),
  ownerId?: long(name='OwnerId'),
  packageName?: string(name='PackageName', example='com.aliqin.mytel.test'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sceneCode?: string(name='SceneCode', example='FC100000134840112'),
  signName?: string(name='SignName', example='47fcc6615485e83b4100433****'),
  smsCodeExpire?: int32(name='SmsCodeExpire', example='60'),
  smsTemplateCode?: string(name='SmsTemplateCode', example='SMS_13987****'),
}

model GetSmsAuthTokensResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    bizToken?: string(name='BizToken', example='FZSMeRbLCiapIBo65NXNHvGbkGDmhs23XWTZDOtZN0g5n/kqSc2FU27Gc9YhGb6dNn9/L9ZXSYiIB6C6LMLQJjyXjRzt5v6pzZXqnjO4cSuPWYUxJvdc8l8OpucEYe8Mx17HxsHDzj0VC4D5+atcrTpJE6jQ7e2QVNjZIPMwsfxELjQS7c****'),
    expireTime?: long(name='ExpireTime', example='1631526326000'),
    stsAccessKeyId?: string(name='StsAccessKeyId', example='STS.NSqC****'),
    stsAccessKeySecret?: string(name='StsAccessKeySecret', example='VboZ4xbZ****'),
    stsToken?: string(name='StsToken', example='CAISiQJ1q6Ft5B2yfSjIr5DEDP/BurtW9PemMEfBrEpsOr5K17XjuDz2IHtLfXFsBusYt/U2nWpX5v4clrxIToR7SFbFY9pb6ZhazBisebDGv8HtR3TcFEjiSwapEBfe8JL4QYeQFaHwGJqEb1TDiVUAo9/TfimjWFqIKICAjYUdAP0cQgi/a0gtZr4UXHwAzvUXLnzML/2gHwf3i27LdipStxF7lHl05NbUoKTeyGKH3AGqlLVF9tite8f9NpczBvolDYfpht4RX7HazStd5yJN8KpLl6Fe8V/FxIrGXAAJv0rdbbOFq4Q1c18hOLJHAKtfsvXmlPNpsevfmpnsx****'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='8906582E-6722'),
}

model GetSmsAuthTokensResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSmsAuthTokensResponseBody(name='body'),
}

async function getSmsAuthTokensWithOptions(request: GetSmsAuthTokensRequest, runtime: Util.RuntimeOptions): GetSmsAuthTokensResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bundleId)) {
    query['BundleId'] = request.bundleId;
  }
  if (!Util.isUnset(request.expire)) {
    query['Expire'] = request.expire;
  }
  if (!Util.isUnset(request.osType)) {
    query['OsType'] = request.osType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.packageName)) {
    query['PackageName'] = request.packageName;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sceneCode)) {
    query['SceneCode'] = request.sceneCode;
  }
  if (!Util.isUnset(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!Util.isUnset(request.smsCodeExpire)) {
    query['SmsCodeExpire'] = request.smsCodeExpire;
  }
  if (!Util.isUnset(request.smsTemplateCode)) {
    query['SmsTemplateCode'] = request.smsTemplateCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSmsAuthTokens',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSmsAuthTokens(request: GetSmsAuthTokensRequest): GetSmsAuthTokensResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSmsAuthTokensWithOptions(request, runtime);
}

model QueryGateVerifyBillingPublicRequest {
  authenticationType?: int32(name='AuthenticationType', example='1'),
  month?: string(name='Month', example='202111'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
}

model QueryGateVerifyBillingPublicResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    amountSum?: string(name='AmountSum', example='1234'),
    sceneBillingList?: [ 
      {
        add?: string(name='Add', example='74'),
        amount?: string(name='Amount', example='1.48'),
        appName?: string(name='AppName'),
        itemName?: string(name='ItemName'),
        sceneCode?: string(name='SceneCode', example='FC100000038194004'),
        sceneName?: string(name='SceneName'),
        singlePrice?: string(name='SinglePrice', example='0.02'),
      }
    ](name='SceneBillingList'),
  }(name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='8906582E-6722'),
}

model QueryGateVerifyBillingPublicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryGateVerifyBillingPublicResponseBody(name='body'),
}

async function queryGateVerifyBillingPublicWithOptions(request: QueryGateVerifyBillingPublicRequest, runtime: Util.RuntimeOptions): QueryGateVerifyBillingPublicResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authenticationType)) {
    query['AuthenticationType'] = request.authenticationType;
  }
  if (!Util.isUnset(request.month)) {
    query['Month'] = request.month;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryGateVerifyBillingPublic',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryGateVerifyBillingPublic(request: QueryGateVerifyBillingPublicRequest): QueryGateVerifyBillingPublicResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryGateVerifyBillingPublicWithOptions(request, runtime);
}

model QueryGateVerifyStatisticPublicRequest {
  authenticationType?: int32(name='AuthenticationType', example='1'),
  endDate?: string(name='EndDate', example='20220106'),
  osType?: string(name='OsType', example='Android'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  sceneCode?: string(name='SceneCode', example='FC100000038194004'),
  startDate?: string(name='StartDate', example='20220101'),
}

model QueryGateVerifyStatisticPublicResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    dayStatistic?: [ 
      {
        statisticDateStr?: string(name='StatisticDateStr', example='20220103'),
        totalFail?: long(name='TotalFail', example='20'),
        totalSuccess?: long(name='TotalSuccess', example='0'),
        totalUnknown?: long(name='TotalUnknown', example='0'),
      }
    ](name='DayStatistic'),
    total?: long(name='Total', example='20'),
    totalFail?: long(name='TotalFail', example='20'),
    totalSuccess?: long(name='TotalSuccess', example='0'),
    totalUnknown?: long(name='TotalUnknown', example='0'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='8906582E-6722'),
}

model QueryGateVerifyStatisticPublicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryGateVerifyStatisticPublicResponseBody(name='body'),
}

async function queryGateVerifyStatisticPublicWithOptions(request: QueryGateVerifyStatisticPublicRequest, runtime: Util.RuntimeOptions): QueryGateVerifyStatisticPublicResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authenticationType)) {
    query['AuthenticationType'] = request.authenticationType;
  }
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.osType)) {
    query['OsType'] = request.osType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.sceneCode)) {
    query['SceneCode'] = request.sceneCode;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryGateVerifyStatisticPublic',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryGateVerifyStatisticPublic(request: QueryGateVerifyStatisticPublicRequest): QueryGateVerifyStatisticPublicResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryGateVerifyStatisticPublicWithOptions(request, runtime);
}

model VerifyMobileRequest {
  accessCode?: string(name='AccessCode', example='Dfafdafad542****'),
  outId?: string(name='OutId', example='123456'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', example='13800****00'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model VerifyMobileResponseBody = {
  code?: string(name='Code', example='OK'),
  gateVerifyResultDTO?: {
    verifyId?: string(name='VerifyId', example='121343241'),
    verifyResult?: string(name='VerifyResult', example='PASS'),
  }(name='GateVerifyResultDTO'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='8906582E-6722'),
}

model VerifyMobileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifyMobileResponseBody(name='body'),
}

async function verifyMobileWithOptions(request: VerifyMobileRequest, runtime: Util.RuntimeOptions): VerifyMobileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessCode)) {
    query['AccessCode'] = request.accessCode;
  }
  if (!Util.isUnset(request.outId)) {
    query['OutId'] = request.outId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VerifyMobile',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function verifyMobile(request: VerifyMobileRequest): VerifyMobileResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyMobileWithOptions(request, runtime);
}

model VerifyPhoneWithTokenRequest {
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', example='1380000****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  spToken?: string(name='SpToken', example='Dfafdafad542****'),
}

model VerifyPhoneWithTokenResponseBody = {
  code?: string(name='Code', example='OK'),
  gateVerify?: {
    verifyId?: string(name='VerifyId', example='12134****'),
    verifyResult?: string(name='VerifyResult', example='PASS'),
  }(name='GateVerify'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='8906582E-6722'),
}

model VerifyPhoneWithTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifyPhoneWithTokenResponseBody(name='body'),
}

async function verifyPhoneWithTokenWithOptions(request: VerifyPhoneWithTokenRequest, runtime: Util.RuntimeOptions): VerifyPhoneWithTokenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.spToken)) {
    query['SpToken'] = request.spToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VerifyPhoneWithToken',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function verifyPhoneWithToken(request: VerifyPhoneWithTokenRequest): VerifyPhoneWithTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyPhoneWithTokenWithOptions(request, runtime);
}

model VerifySmsCodeRequest {
  phoneNumber?: string(name='PhoneNumber', example='1321111****'),
  smsCode?: string(name='SmsCode', example='12****'),
  smsToken?: string(name='SmsToken', example='sddsbvdbvjd****'),
}

model VerifySmsCodeResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='8906582E-6722'),
}

model VerifySmsCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifySmsCodeResponseBody(name='body'),
}

async function verifySmsCodeWithOptions(request: VerifySmsCodeRequest, runtime: Util.RuntimeOptions): VerifySmsCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.smsCode)) {
    query['SmsCode'] = request.smsCode;
  }
  if (!Util.isUnset(request.smsToken)) {
    query['SmsToken'] = request.smsToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VerifySmsCode',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function verifySmsCode(request: VerifySmsCodeRequest): VerifySmsCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifySmsCodeWithOptions(request, runtime);
}

