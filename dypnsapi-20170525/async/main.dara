/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Dypnsapi';
  @version = '2017-05-25';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateVerifySchemeRequest {
  appName: string(name='AppName', position='Query'),
  bundleId?: string(name='BundleId', position='Query'),
  osType: string(name='OsType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  packName?: string(name='PackName', position='Query'),
  packSign?: string(name='PackSign', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schemeName: string(name='SchemeName', position='Query'),
}

model CreateVerifySchemeResponseBody = {
  code?: string(name='Code'),
  gateVerifySchemeDTO?: {
    schemeCode?: string(name='SchemeCode'),
  }(name='GateVerifySchemeDTO'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateVerifySchemeResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVerifySchemeResponseBody(name='body'),
}

async function createVerifyScheme(request: CreateVerifySchemeRequest): CreateVerifySchemeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVerifyScheme', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVerifySchemeRequest {
  customerId?: long(name='CustomerId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schemeCode: string(name='SchemeCode', position='Query'),
}

model DeleteVerifySchemeResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model DeleteVerifySchemeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVerifySchemeResponseBody(name='body'),
}

async function deleteVerifyScheme(request: DeleteVerifySchemeRequest): DeleteVerifySchemeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVerifyScheme', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVerifySchemeRequest {
  customerId?: long(name='CustomerId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schemeCode: string(name='SchemeCode', position='Query'),
}

model DescribeVerifySchemeResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  schemeQueryResultDTO?: {
    appEncryptInfo?: string(name='AppEncryptInfo'),
  }(name='SchemeQueryResultDTO'),
}

model DescribeVerifySchemeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVerifySchemeResponseBody(name='body'),
}

async function describeVerifyScheme(request: DescribeVerifySchemeRequest): DescribeVerifySchemeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVerifyScheme', 'POST', '/', 'json', false, 'json', request);
}

model GetAuthTokenRequest {
  origin: string(name='Origin', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  url: string(name='Url', position='Query'),
}

model GetAuthTokenResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  tokenInfo?: {
    accessToken?: string(name='AccessToken'),
    jwtToken?: string(name='JwtToken'),
  }(name='TokenInfo'),
}

model GetAuthTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetAuthTokenResponseBody(name='body'),
}

async function getAuthToken(request: GetAuthTokenRequest): GetAuthTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAuthToken', 'POST', '/', 'json', false, 'json', request);
}

model GetAuthorizationUrlRequest {
  endDate?: string(name='EndDate', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNo: string(name='PhoneNo', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schemeId: long(name='SchemeId', minimum=0, maximum=9223372036854775807, position='Query'),
}

model GetAuthorizationUrlResponseBody = {
  code?: string(name='Code'),
  data?: {
    authorizationUrl?: string(name='AuthorizationUrl'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetAuthorizationUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetAuthorizationUrlResponseBody(name='body'),
}

async function getAuthorizationUrl(request: GetAuthorizationUrlRequest): GetAuthorizationUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAuthorizationUrl', 'POST', '/', 'json', false, 'json', request);
}

model GetCertifyResultRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  token: string(name='Token', position='Query'),
}

model GetCertifyResultResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      deviceToken?: string(name='DeviceToken'),
      identityInfo?: string(name='IdentityInfo'),
      materialInfo?: string(name='MaterialInfo'),
      verifyDesc?: string(name='VerifyDesc'),
      verifyResult?: string(name='VerifyResult'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetCertifyResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetCertifyResultResponseBody(name='body'),
}

async function getCertifyResult(request: GetCertifyResultRequest): GetCertifyResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCertifyResult', 'POST', '/', 'json', false, 'json', request);
}

model GetMobileRequest {
  accessToken: string(name='AccessToken', position='Query'),
  outId?: string(name='OutId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetMobileResponseBody = {
  code?: string(name='Code'),
  getMobileResultDTO?: {
    mobile?: string(name='Mobile'),
  }(name='GetMobileResultDTO'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetMobileResponse = {
  headers: map[string]string(name='headers'),
  body: GetMobileResponseBody(name='body'),
}

async function getMobile(request: GetMobileRequest): GetMobileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMobile', 'POST', '/', 'json', false, 'json', request);
}

model GetSmsAuthTokensRequest {
  bundleId?: string(name='BundleId', position='Query'),
  expire: long(name='Expire', minimum=900, maximum=43200, position='Query'),
  osType: string(name='OsType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  packageName?: string(name='PackageName', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sceneCode: string(name='SceneCode', position='Query'),
  signName?: string(name='SignName', position='Query'),
  smsCodeExpire?: int32(name='SmsCodeExpire', position='Query'),
  smsTemplateCode: string(name='SmsTemplateCode', position='Query'),
}

model GetSmsAuthTokensResponseBody = {
  code?: string(name='Code'),
  data?: {
    bizToken?: string(name='BizToken'),
    expireTime?: long(name='ExpireTime'),
    stsAccessKeyId?: string(name='StsAccessKeyId'),
    stsAccessKeySecret?: string(name='StsAccessKeySecret'),
    stsToken?: string(name='StsToken'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetSmsAuthTokensResponse = {
  headers: map[string]string(name='headers'),
  body: GetSmsAuthTokensResponseBody(name='body'),
}

async function getSmsAuthTokens(request: GetSmsAuthTokensRequest): GetSmsAuthTokensResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSmsAuthTokens', 'POST', '/', 'json', false, 'json', request);
}

model QueryGateVerifyBillingPublicRequest {
  authenticationType: int32(name='AuthenticationType', minimum=0, maximum=99, position='Query'),
  month: string(name='Month', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model QueryGateVerifyBillingPublicResponseBody = {
  code?: string(name='Code'),
  data?: {
    amountSum?: string(name='AmountSum'),
    sceneBillingList?: [ 
      {
        add?: string(name='Add'),
        amount?: string(name='Amount'),
        appName?: string(name='AppName'),
        itemName?: string(name='ItemName'),
        sceneCode?: string(name='SceneCode'),
        sceneName?: string(name='SceneName'),
        singlePrice?: string(name='SinglePrice'),
      }
    ](name='SceneBillingList'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryGateVerifyBillingPublicResponse = {
  headers: map[string]string(name='headers'),
  body: QueryGateVerifyBillingPublicResponseBody(name='body'),
}

async function queryGateVerifyBillingPublic(request: QueryGateVerifyBillingPublicRequest): QueryGateVerifyBillingPublicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryGateVerifyBillingPublic', 'POST', '/', 'json', false, 'json', request);
}

model QueryGateVerifyStatisticPublicRequest {
  authenticationType: int32(name='AuthenticationType', minimum=0, maximum=99, position='Query'),
  endDate: string(name='EndDate', position='Query'),
  osType?: string(name='OsType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  sceneCode?: string(name='SceneCode', position='Query'),
  startDate: string(name='StartDate', position='Query'),
}

model QueryGateVerifyStatisticPublicResponseBody = {
  code?: string(name='Code'),
  data?: {
    dayStatistic?: [ 
      {
        statisticDateStr?: string(name='StatisticDateStr'),
        totalFail?: long(name='TotalFail'),
        totalSuccess?: long(name='TotalSuccess'),
        totalUnknown?: long(name='TotalUnknown'),
      }
    ](name='DayStatistic'),
    total?: long(name='Total'),
    totalFail?: long(name='TotalFail'),
    totalSuccess?: long(name='TotalSuccess'),
    totalUnknown?: long(name='TotalUnknown'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryGateVerifyStatisticPublicResponse = {
  headers: map[string]string(name='headers'),
  body: QueryGateVerifyStatisticPublicResponseBody(name='body'),
}

async function queryGateVerifyStatisticPublic(request: QueryGateVerifyStatisticPublicRequest): QueryGateVerifyStatisticPublicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryGateVerifyStatisticPublic', 'POST', '/', 'json', false, 'json', request);
}

model VerifyMobileRequest {
  accessCode: string(name='AccessCode', position='Query'),
  outId?: string(name='OutId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model VerifyMobileResponseBody = {
  code?: string(name='Code'),
  gateVerifyResultDTO?: {
    verifyId?: string(name='VerifyId'),
    verifyResult?: string(name='VerifyResult'),
  }(name='GateVerifyResultDTO'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model VerifyMobileResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyMobileResponseBody(name='body'),
}

async function verifyMobile(request: VerifyMobileRequest): VerifyMobileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyMobile', 'POST', '/', 'json', false, 'json', request);
}

model VerifyPhoneWithTokenRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  spToken: string(name='SpToken', position='Query'),
}

model VerifyPhoneWithTokenResponseBody = {
  code?: string(name='Code'),
  gateVerify?: {
    verifyId?: string(name='VerifyId'),
    verifyResult?: string(name='VerifyResult'),
  }(name='GateVerify'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model VerifyPhoneWithTokenResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyPhoneWithTokenResponseBody(name='body'),
}

async function verifyPhoneWithToken(request: VerifyPhoneWithTokenRequest): VerifyPhoneWithTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyPhoneWithToken', 'POST', '/', 'json', false, 'json', request);
}

model VerifySmsCodeRequest {
  phoneNumber: string(name='PhoneNumber', position='Query'),
  smsCode: string(name='SmsCode', position='Query'),
  smsToken: string(name='SmsToken', position='Query'),
}

model VerifySmsCodeResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model VerifySmsCodeResponse = {
  headers: map[string]string(name='headers'),
  body: VerifySmsCodeResponseBody(name='body'),
}

async function verifySmsCode(request: VerifySmsCodeRequest): VerifySmsCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifySmsCode', 'POST', '/', 'json', false, 'json', request);
}

