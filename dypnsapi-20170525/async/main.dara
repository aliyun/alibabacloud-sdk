/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Dypnsapi';
  @version = '2017-05-25';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateVerifySchemeRequest {
  appName: string(name='AppName', position='Query'),
  authType?: string(name='AuthType', position='Query'),
  bundleId?: string(name='BundleId', example='example.aliyundoc.com', position='Query'),
  cmApiCode?: long(name='CmApiCode', position='Query'),
  ctApiCode?: long(name='CtApiCode', position='Query'),
  cuApiCode?: long(name='CuApiCode', position='Query'),
  email?: string(name='Email', position='Query'),
  ipWhiteList?: string(name='IpWhiteList', position='Query'),
  origin?: string(name='Origin', position='Query'),
  osType: string(name='OsType', example='iOS', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  packName?: string(name='PackName', example='com.aliyun', position='Query'),
  packSign?: string(name='PackSign', example='123aliyun', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sceneType?: string(name='SceneType', position='Query'),
  schemeName: string(name='SchemeName', position='Query'),
  smsSignName?: string(name='SmsSignName', position='Query'),
  url?: string(name='Url', position='Query'),
}

model CreateVerifySchemeResponseBody = {
  code?: string(name='Code', example='OK'),
  gateVerifySchemeDTO?: {
    schemeCode?: string(name='SchemeCode', example='FC10001287****'),
  }(name='GateVerifySchemeDTO'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='8906582E6722'),
  success?: boolean(name='Success'),
}

model CreateVerifySchemeResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVerifySchemeResponseBody(name='body'),
}

async function createVerifyScheme(request: CreateVerifySchemeRequest): CreateVerifySchemeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVerifyScheme', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVerifySchemeRequest {
  customerId?: long(name='CustomerId', example='12345678', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schemeCode: string(name='SchemeCode', example='FC10000014164****', position='Query'),
}

model DeleteVerifySchemeResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='E3754956-D0B1-5947-962A-AE767D354F01'),
  result?: boolean(name='Result', example='true'),
}

model DeleteVerifySchemeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVerifySchemeResponseBody(name='body'),
}

async function deleteVerifyScheme(request: DeleteVerifySchemeRequest): DeleteVerifySchemeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVerifyScheme', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVerifySchemeRequest {
  customerId?: long(name='CustomerId', example='1234****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schemeCode: string(name='SchemeCode', example='FC10000010643****', position='Query'),
}

model DescribeVerifySchemeResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='0C5380A7-2032-5F7D-9614-1BF8B54D16CB'),
  schemeQueryResultDTO?: {
    appEncryptInfo?: string(name='AppEncryptInfo', example='ZDMARqPkyQzWVJjB/sB/+fCp5TA4lNsRnY7rEC+HfGsOIOk1Brj8UyXFW2RBYIWqLieCSo8ZypEaEj+h9rLd3FgpXAjGYDfmOperod6jPUUwFHhBObxK+HuKVoi2jOqN7aDOlyPyGcATyq3BDdlf922JmnFLT8Hvnu4qgzzCZk0LXWTb0XVPnm5/fHUGHEA2Q+aTrGkaWcHjmTDqQ7BtvrAIIcJJkCJu4i1aeU++/0EzGWap4mcb2VhKROBs****'),
  }(name='SchemeQueryResultDTO'),
}

model DescribeVerifySchemeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVerifySchemeResponseBody(name='body'),
}

async function describeVerifyScheme(request: DescribeVerifySchemeRequest): DescribeVerifySchemeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVerifyScheme', 'POST', '/', 'json', false, 'json', request);
}

model GetAuthTokenRequest {
  origin: string(name='Origin', example='www.aliyundoc.com', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  url: string(name='Url', example='www.aliyundoc.com/', position='Query'),
}

model GetAuthTokenResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='8906582E-6722'),
  tokenInfo?: {
    accessToken?: string(name='AccessToken', example='agag****'),
    jwtToken?: string(name='JwtToken', example='aweghd****'),
  }(name='TokenInfo'),
}

model GetAuthTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetAuthTokenResponseBody(name='body'),
}

async function getAuthToken(request: GetAuthTokenRequest): GetAuthTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAuthToken', 'POST', '/', 'json', false, 'json', request);
}

model GetAuthorizationUrlRequest {
  endDate?: string(name='EndDate', example='2020–12–28', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNo: string(name='PhoneNo', example='1390000****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schemeId: long(name='SchemeId', example='234****', minimum=0, maximum=9223372036854775807, position='Query'),
}

model GetAuthorizationUrlResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    authorizationUrl?: string(name='AuthorizationUrl', example='https://render.****.com/p/s/web-call-minapp/auth-bao?page=commauth/index&token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJiaXpUeXBlIjoiQ29tbUF1dGgiLCJiaXpJZCI6IjVmNWZjNjAzZDQzMTQ0MWZiYTZiNjYzM2QyMjIyNzU0IiwiZXhwIjoxNjA4MTkxODQxfQ.5IvBj2nKgr60APtotaIB13vtPVrdsPQ6avIfWxte1pA&_env=prod'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='8906582E-6722'),
}

model GetAuthorizationUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetAuthorizationUrlResponseBody(name='body'),
}

async function getAuthorizationUrl(request: GetAuthorizationUrlRequest): GetAuthorizationUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAuthorizationUrl', 'POST', '/', 'json', false, 'json', request);
}

model GetFusionAuthTokenRequest {
  bundleId?: string(name='BundleId', description='Platform为iOS时必须传入，App的bundleId信息。', example='com.example.test', position='Query'),
  durationSeconds: long(name='DurationSeconds', description='Token有效时长，单位是秒，最小值900，最大值43200。', example='900', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  packageName?: string(name='PackageName', description='Platform为Android时必须传入，App的包名信息。', example='com.example.test', position='Query'),
  packageSign?: string(name='PackageSign', description='Platform为Android时必须传入，App的包签名信息。', example='47fcc************************278', position='Query'),
  platform: string(name='Platform', description='平台，Android或者iOS。', example='Android', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schemeCode: string(name='SchemeCode', description='方案Code。', example='FA1000*************201', position='Query'),
}

model GetFusionAuthTokenResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='示例值示例值'),
  model?: string(name='Model', example='FKcksloqk***********jalEc+'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
  success?: boolean(name='Success', example='false'),
}

model GetFusionAuthTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetFusionAuthTokenResponseBody(name='body'),
}

async function getFusionAuthToken(request: GetFusionAuthTokenRequest): GetFusionAuthTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFusionAuthToken', 'POST', '/', 'json', false, 'json', request);
}

model GetMobileRequest {
  accessToken: string(name='AccessToken', example='Dfafdafad5422****', position='Query'),
  outId?: string(name='OutId', example='22345****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetMobileResponseBody = {
  code?: string(name='Code', example='OK'),
  getMobileResultDTO?: {
    mobile?: string(name='Mobile', example='13900001234'),
  }(name='GetMobileResultDTO'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='8906582E-6722'),
}

model GetMobileResponse = {
  headers: map[string]string(name='headers'),
  body: GetMobileResponseBody(name='body'),
}

async function getMobile(request: GetMobileRequest): GetMobileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMobile', 'POST', '/', 'json', false, 'json', request);
}

model GetPhoneWithTokenRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  spToken: string(name='SpToken', example='Dfafdafad542****', position='Query'),
}

model GetPhoneWithTokenResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    mobile?: string(name='Mobile', example='138****1234'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='0F335F48-****-****-****-CA7914FE5D77'),
}

model GetPhoneWithTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetPhoneWithTokenResponseBody(name='body'),
}

async function getPhoneWithToken(request: GetPhoneWithTokenRequest): GetPhoneWithTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPhoneWithToken', 'POST', '/', 'json', false, 'json', request);
}

model GetSmsAuthTokensRequest {
  bundleId?: string(name='BundleId', example='12345****', position='Query'),
  expire: long(name='Expire', example='900', minimum=900, maximum=43200, position='Query'),
  osType: string(name='OsType', example='Android', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  packageName?: string(name='PackageName', example='com.aliqin.mytel.test', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sceneCode: string(name='SceneCode', example='FC100000134840112', position='Query'),
  signName?: string(name='SignName', example='47fcc6615485e83b4100433****', position='Query'),
  smsCodeExpire?: int32(name='SmsCodeExpire', example='60', position='Query'),
  smsTemplateCode: string(name='SmsTemplateCode', example='SMS_13987****', position='Query'),
}

model GetSmsAuthTokensResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    bizToken?: string(name='BizToken', example='FZSMeRbLCiapIBo65NXNHvGbkGDmhs23XWTZDOtZN0g5n/kqSc2FU27Gc9YhGb6dNn9/L9ZXSYiIB6C6LMLQJjyXjRzt5v6pzZXqnjO4cSuPWYUxJvdc8l8OpucEYe8Mx17HxsHDzj0VC4D5+atcrTpJE6jQ7e2QVNjZIPMwsfxELjQS7c****'),
    expireTime?: long(name='ExpireTime', example='1631526326000'),
    stsAccessKeyId?: string(name='StsAccessKeyId', example='STS.NSqC****'),
    stsAccessKeySecret?: string(name='StsAccessKeySecret', example='VboZ4xbZ****'),
    stsToken?: string(name='StsToken', example='CAISiQJ1q6Ft5B2yfSjIr5DEDP/BurtW9PemMEfBrEpsOr5K17XjuDz2IHtLfXFsBusYt/U2nWpX5v4clrxIToR7SFbFY9pb6ZhazBisebDGv8HtR3TcFEjiSwapEBfe8JL4QYeQFaHwGJqEb1TDiVUAo9/TfimjWFqIKICAjYUdAP0cQgi/a0gtZr4UXHwAzvUXLnzML/2gHwf3i27LdipStxF7lHl05NbUoKTeyGKH3AGqlLVF9tite8f9NpczBvolDYfpht4RX7HazStd5yJN8KpLl6Fe8V/FxIrGXAAJv0rdbbOFq4Q1c18hOLJHAKtfsvXmlPNpsevfmpnsx****'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='8906582E-6722'),
}

model GetSmsAuthTokensResponse = {
  headers: map[string]string(name='headers'),
  body: GetSmsAuthTokensResponseBody(name='body'),
}

async function getSmsAuthTokens(request: GetSmsAuthTokensRequest): GetSmsAuthTokensResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSmsAuthTokens', 'POST', '/', 'json', false, 'json', request);
}

model QueryGateVerifyBillingPublicRequest {
  authenticationType: int32(name='AuthenticationType', example='1', minimum=0, maximum=99, position='Query'),
  month: string(name='Month', example='202111', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model QueryGateVerifyBillingPublicResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    amountSum?: string(name='AmountSum', example='1234'),
    sceneBillingList?: [ 
      {
        add?: string(name='Add', example='74'),
        amount?: string(name='Amount', example='1.48'),
        appName?: string(name='AppName'),
        itemName?: string(name='ItemName'),
        sceneCode?: string(name='SceneCode', example='FC100000038194004'),
        sceneName?: string(name='SceneName'),
        singlePrice?: string(name='SinglePrice', example='0.02'),
      }
    ](name='SceneBillingList'),
  }(name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='8906582E-6722'),
}

model QueryGateVerifyBillingPublicResponse = {
  headers: map[string]string(name='headers'),
  body: QueryGateVerifyBillingPublicResponseBody(name='body'),
}

async function queryGateVerifyBillingPublic(request: QueryGateVerifyBillingPublicRequest): QueryGateVerifyBillingPublicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryGateVerifyBillingPublic', 'POST', '/', 'json', false, 'json', request);
}

model QueryGateVerifyStatisticPublicRequest {
  authenticationType: int32(name='AuthenticationType', example='1', minimum=0, maximum=99, position='Query'),
  endDate: string(name='EndDate', example='20220106', position='Query'),
  osType?: string(name='OsType', example='Android', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  sceneCode?: string(name='SceneCode', example='FC100000038194004', position='Query'),
  startDate: string(name='StartDate', example='20220101', position='Query'),
}

model QueryGateVerifyStatisticPublicResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    dayStatistic?: [ 
      {
        statisticDateStr?: string(name='StatisticDateStr', example='20220103'),
        totalFail?: long(name='TotalFail', example='20'),
        totalSuccess?: long(name='TotalSuccess', example='0'),
        totalUnknown?: long(name='TotalUnknown', example='0'),
      }
    ](name='DayStatistic'),
    total?: long(name='Total', example='20'),
    totalFail?: long(name='TotalFail', example='20'),
    totalSuccess?: long(name='TotalSuccess', example='0'),
    totalUnknown?: long(name='TotalUnknown', example='0'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='8906582E-6722'),
}

model QueryGateVerifyStatisticPublicResponse = {
  headers: map[string]string(name='headers'),
  body: QueryGateVerifyStatisticPublicResponseBody(name='body'),
}

async function queryGateVerifyStatisticPublic(request: QueryGateVerifyStatisticPublicRequest): QueryGateVerifyStatisticPublicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryGateVerifyStatisticPublic', 'POST', '/', 'json', false, 'json', request);
}

model VerifyMobileRequest {
  accessCode: string(name='AccessCode', example='Dfafdafad542****', position='Query'),
  outId?: string(name='OutId', example='123456', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', example='13800****00', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model VerifyMobileResponseBody = {
  code?: string(name='Code', example='OK'),
  gateVerifyResultDTO?: {
    verifyId?: string(name='VerifyId', example='121343241'),
    verifyResult?: string(name='VerifyResult', example='PASS'),
  }(name='GateVerifyResultDTO'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='8906582E-6722'),
}

model VerifyMobileResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyMobileResponseBody(name='body'),
}

async function verifyMobile(request: VerifyMobileRequest): VerifyMobileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyMobile', 'POST', '/', 'json', false, 'json', request);
}

model VerifyPhoneWithTokenRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', example='1380000****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  spToken: string(name='SpToken', example='Dfafdafad542****', position='Query'),
}

model VerifyPhoneWithTokenResponseBody = {
  code?: string(name='Code', example='OK'),
  gateVerify?: {
    verifyId?: string(name='VerifyId', example='12134****'),
    verifyResult?: string(name='VerifyResult', example='PASS'),
  }(name='GateVerify'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='8906582E-6722'),
}

model VerifyPhoneWithTokenResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyPhoneWithTokenResponseBody(name='body'),
}

async function verifyPhoneWithToken(request: VerifyPhoneWithTokenRequest): VerifyPhoneWithTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyPhoneWithToken', 'POST', '/', 'json', false, 'json', request);
}

model VerifySmsCodeRequest {
  phoneNumber: string(name='PhoneNumber', example='1321111****', position='Query'),
  smsCode: string(name='SmsCode', example='12****', position='Query'),
  smsToken: string(name='SmsToken', example='sddsbvdbvjd****', position='Query'),
}

model VerifySmsCodeResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='8906582E-6722'),
}

model VerifySmsCodeResponse = {
  headers: map[string]string(name='headers'),
  body: VerifySmsCodeResponseBody(name='body'),
}

async function verifySmsCode(request: VerifySmsCodeRequest): VerifySmsCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifySmsCode', 'POST', '/', 'json', false, 'json', request);
}

model VerifyWithFusionAuthTokenRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  verifyToken: string(name='VerifyToken', description='统一认证Token，由客户端SDK返回。', example='LD108enNdlsl*******sFLKCks1==', position='Query'),
}

model VerifyWithFusionAuthTokenResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='示例值示例值'),
  model?: {
    phoneNumber?: string(name='PhoneNumber', description='手机号，认证成功时返回该字段。', example='180********'),
    phoneScore?: long(name='PhoneScore', description='手机号评分，只有开启手机号评分节点，并且认证通过后才会给出，取值范围[0，100]，分越大，风险系数越高。', example='20'),
    verifyResult?: string(name='VerifyResult', description='认证结果，认证成功：PASS，认证失败：UNKNOWN', example='PASS'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
  success?: boolean(name='Success', example='true'),
}

model VerifyWithFusionAuthTokenResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyWithFusionAuthTokenResponseBody(name='body'),
}

async function verifyWithFusionAuthToken(request: VerifyWithFusionAuthTokenRequest): VerifyWithFusionAuthTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyWithFusionAuthToken', 'POST', '/', 'json', false, 'json', request);
}

