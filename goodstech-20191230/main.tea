import OSS;
import OpenPlatform;
import RPCUtil;
import RPC;
import OSSUtil;
import Util;
import FileForm;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint(@productId, @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model RecognizeFurnitureAttributeRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model RecognizeFurnitureAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    predStyleId: string(name='PredStyleId', description='predStyleId'),
    predStyle: string(name='PredStyle', description='predStyle'),
    predProbability: float(name='PredProbability', description='predProbability'),
  }(name='Data', description='data'),
}

async function recognizeFurnitureAttribute(request: RecognizeFurnitureAttributeRequest, runtime: Util.RuntimeOptions): RecognizeFurnitureAttributeResponse {
  Util.validateModel(request);
  return doRequest('RecognizeFurnitureAttribute', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeFurnitureAttributeAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function recognizeFurnitureAttributeAdvance(request: RecognizeFurnitureAttributeAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeFurnitureAttributeResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'goodstech',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeFurnitureAttributereq = new RecognizeFurnitureAttributeRequest{};
  RPCUtil.convert(request, recognizeFurnitureAttributereq);
  recognizeFurnitureAttributereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeFurnitureAttributeResp = recognizeFurnitureAttribute(recognizeFurnitureAttributereq, runtime);
  return recognizeFurnitureAttributeResp;
}

model RecognizeFurnitureSpuRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
  XLength: float(name='XLength', description='xLength'),
  YLength: float(name='YLength', description='yLength'),
  ZLength: float(name='ZLength', description='zLength'),
}

model RecognizeFurnitureSpuResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    predCateId: string(name='PredCateId', description='predCateId'),
    predCate: string(name='PredCate', description='predCate'),
    predProbability: float(name='PredProbability', description='predProbability'),
  }(name='Data', description='data'),
}

async function recognizeFurnitureSpu(request: RecognizeFurnitureSpuRequest, runtime: Util.RuntimeOptions): RecognizeFurnitureSpuResponse {
  Util.validateModel(request);
  return doRequest('RecognizeFurnitureSpu', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeFurnitureSpuAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
  XLength: float(name='XLength', description='xLength'),
  YLength: float(name='YLength', description='yLength'),
  ZLength: float(name='ZLength', description='zLength'),
}

async function recognizeFurnitureSpuAdvance(request: RecognizeFurnitureSpuAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeFurnitureSpuResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'goodstech',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeFurnitureSpureq = new RecognizeFurnitureSpuRequest{};
  RPCUtil.convert(request, recognizeFurnitureSpureq);
  recognizeFurnitureSpureq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeFurnitureSpuResp = recognizeFurnitureSpu(recognizeFurnitureSpureq, runtime);
  return recognizeFurnitureSpuResp;
}

model ClassifyCommodityRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model ClassifyCommodityResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    categories: [
      {
        score: float(name='Score', description='score'),
        categoryName: string(name='CategoryName', description='categoryName'),
        categoryId: string(name='CategoryId', description='categoryId'),
      }
    ](name='Categories', description='categoryList'),
  }(name='Data', description='data'),
}

async function classifyCommodity(request: ClassifyCommodityRequest, runtime: Util.RuntimeOptions): ClassifyCommodityResponse {
  Util.validateModel(request);
  return doRequest('ClassifyCommodity', 'HTTPS', 'GET' , '2019-12-30', 'AK', request, null, runtime);
}

model ClassifyCommodityAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function classifyCommodityAdvance(request: ClassifyCommodityAdvanceRequest, runtime: Util.RuntimeOptions): ClassifyCommodityResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'goodstech',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var classifyCommodityreq = new ClassifyCommodityRequest{};
  RPCUtil.convert(request, classifyCommodityreq);
  classifyCommodityreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var classifyCommodityResp = classifyCommodity(classifyCommodityreq, runtime);
  return classifyCommodityResp;
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
