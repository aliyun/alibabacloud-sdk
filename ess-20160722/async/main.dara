/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Ess';
  @version = '2016-07-22';
  @endpointRule = 'regional';
  @endpointMap = {
    'cn-qingdao' = 'ess.aliyuncs.com',
    'cn-beijing' = 'ess.aliyuncs.com',
    'cn-hangzhou' = 'ess.aliyuncs.com',
    'cn-shanghai' = 'ess.aliyuncs.com',
    'cn-shenzhen' = 'ess.aliyuncs.com',
    'cn-hongkong' = 'ess.aliyuncs.com',
    'ap-southeast-1' = 'ess.aliyuncs.com',
    'us-east-1' = 'ess.aliyuncs.com',
    'us-west-1' = 'ess.aliyuncs.com',
    'cn-shanghai-finance-1' = 'ess.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'ess.aliyuncs.com',
    'cn-north-2-gov-1' = 'ess.aliyuncs.com',
    'ap-northeast-2-pop' = 'ess.aliyuncs.com',
    'cn-beijing-finance-pop' = 'ess.aliyuncs.com',
    'cn-beijing-gov-1' = 'ess.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'ess.aliyuncs.com',
    'cn-edge-1' = 'ess.aliyuncs.com',
    'cn-fujian' = 'ess.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'ess.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'ess.aliyuncs.com',
    'cn-hangzhou-finance' = 'ess.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'ess.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'ess.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'ess.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'ess.aliyuncs.com',
    'cn-hangzhou-test-306' = 'ess.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'ess.aliyuncs.com',
    'cn-huhehaote-nebula-1' = 'ess.aliyuncs.com',
    'cn-qingdao-nebula' = 'ess.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'ess.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'ess.aliyuncs.com',
    'cn-shanghai-inner' = 'ess.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'ess.aliyuncs.com',
    'cn-shenzhen-inner' = 'ess.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'ess.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'ess.aliyuncs.com',
    'cn-wuhan' = 'ess.aliyuncs.com',
    'cn-yushanfang' = 'ess.aliyuncs.com',
    'cn-zhangbei' = 'ess.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'ess.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'ess.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'ess.aliyuncs.com',
    'eu-west-1-oxs' = 'ess.aliyuncs.com',
    'rus-west-1-pop' = 'ess.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AttachInstancesRequest {
  instanceId?: [ string ](name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model AttachInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  scalingActivityId?: string(name='ScalingActivityId'),
}

model AttachInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachInstancesResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function attachInstances(request: AttachInstancesRequest): AttachInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachInstances', 'POST', '/', 'json', false, 'json', request);
}

model CreateScalingConfigurationRequest {
  dataDisk?: [
    {
      category?: string(name='Category'),
      deleteWithInstance?: string(name='DeleteWithInstance'),
      device?: string(name='Device'),
      size?: int32(name='Size', minimum=5, maximum=2000),
      snapshotId?: string(name='SnapshotId'),
    }
  ](name='DataDisk', position='Query'),
  systemDisk?: {
    category?: string(name='Category'),
    size?: int32(name='Size'),
  }(name='SystemDisk', position='Query'),
  imageId: string(name='ImageId', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  internetChargeType?: string(name='InternetChargeType', position='Query'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn', position='Query'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', position='Query'),
  ioOptimized?: string(name='IoOptimized', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingConfigurationName?: string(name='ScalingConfigurationName', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
  securityGroupId: string(name='SecurityGroupId', position='Query'),
}

model CreateScalingConfigurationResponseBody = {
  requestId?: string(name='RequestId'),
  scalingConfigurationId?: string(name='ScalingConfigurationId'),
}

model CreateScalingConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateScalingConfigurationResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function createScalingConfiguration(request: CreateScalingConfigurationRequest): CreateScalingConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateScalingConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model CreateScalingGroupRequest {
  removalPolicy?: [ string ](name='RemovalPolicy', position='Query'),
  DBInstanceIds?: string(name='DBInstanceIds', position='Query'),
  defaultCooldown?: int32(name='DefaultCooldown', position='Query'),
  loadBalancerIds?: string(name='LoadBalancerIds', position='Query'),
  maxSize: int32(name='MaxSize', position='Query'),
  minSize: int32(name='MinSize', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupName?: string(name='ScalingGroupName', position='Query'),
  vSwitchId?: string(name='VSwitchId', position='Query'),
}

model CreateScalingGroupResponseBody = {
  requestId?: string(name='RequestId'),
  scalingGroupId?: string(name='ScalingGroupId'),
}

model CreateScalingGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateScalingGroupResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function createScalingGroup(request: CreateScalingGroupRequest): CreateScalingGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateScalingGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateScalingRuleRequest {
  adjustmentType: string(name='AdjustmentType', position='Query'),
  adjustmentValue: int32(name='AdjustmentValue', position='Query'),
  cooldown?: int32(name='Cooldown', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
  scalingRuleName?: string(name='ScalingRuleName', position='Query'),
}

model CreateScalingRuleResponseBody = {
  requestId?: string(name='RequestId'),
  scalingRuleAri?: string(name='ScalingRuleAri'),
  scalingRuleId?: string(name='ScalingRuleId'),
}

model CreateScalingRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateScalingRuleResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function createScalingRule(request: CreateScalingRuleRequest): CreateScalingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateScalingRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateScheduledTaskRequest {
  description?: string(name='Description', position='Query'),
  launchExpirationTime?: int32(name='LaunchExpirationTime', minimum=0, maximum=86400, position='Query'),
  launchTime?: string(name='LaunchTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  recurrenceEndTime?: string(name='RecurrenceEndTime', position='Query'),
  recurrenceType?: string(name='RecurrenceType', position='Query'),
  recurrenceValue?: string(name='RecurrenceValue', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scheduledAction: string(name='ScheduledAction', position='Query'),
  scheduledTaskName?: string(name='ScheduledTaskName', position='Query'),
  taskEnabled?: boolean(name='TaskEnabled', position='Query'),
}

model CreateScheduledTaskResponseBody = {
  requestId?: string(name='RequestId'),
  scheduledTaskId?: string(name='ScheduledTaskId'),
}

model CreateScheduledTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateScheduledTaskResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function createScheduledTask(request: CreateScheduledTaskRequest): CreateScheduledTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateScheduledTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteScalingConfigurationRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingConfigurationId: string(name='ScalingConfigurationId', position='Query'),
}

model DeleteScalingConfigurationResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteScalingConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteScalingConfigurationResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function deleteScalingConfiguration(request: DeleteScalingConfigurationRequest): DeleteScalingConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteScalingConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model DeleteScalingGroupRequest {
  forceDelete?: boolean(name='ForceDelete', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model DeleteScalingGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteScalingGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteScalingGroupResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function deleteScalingGroup(request: DeleteScalingGroupRequest): DeleteScalingGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteScalingGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteScalingRuleRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingRuleId: string(name='ScalingRuleId', position='Query'),
}

model DeleteScalingRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteScalingRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteScalingRuleResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function deleteScalingRule(request: DeleteScalingRuleRequest): DeleteScalingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteScalingRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteScheduledTaskRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scheduledTaskId: string(name='ScheduledTaskId', position='Query'),
}

model DeleteScheduledTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteScheduledTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteScheduledTaskResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function deleteScheduledTask(request: DeleteScheduledTaskRequest): DeleteScheduledTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteScheduledTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccountAttributesRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeAccountAttributesResponseBody = {
  maxNumberOfDBInstances?: int32(name='MaxNumberOfDBInstances'),
  maxNumberOfLoadBalancers?: int32(name='MaxNumberOfLoadBalancers'),
  maxNumberOfMaxSize?: int32(name='MaxNumberOfMaxSize'),
  maxNumberOfMinSize?: int32(name='MaxNumberOfMinSize'),
  maxNumberOfScalingConfigurations?: int32(name='MaxNumberOfScalingConfigurations'),
  maxNumberOfScalingGroups?: int32(name='MaxNumberOfScalingGroups'),
  maxNumberOfScalingInstances?: int32(name='MaxNumberOfScalingInstances'),
  maxNumberOfScalingRules?: int32(name='MaxNumberOfScalingRules'),
  maxNumberOfScheduledTasks?: int32(name='MaxNumberOfScheduledTasks'),
}

model DescribeAccountAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAccountAttributesResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeAccountAttributes(request: DescribeAccountAttributesRequest): DescribeAccountAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccountAttributes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCapacityHistoryRequest {
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeCapacityHistoryResponseBody = {
  capacityHistoryItems?: {
    capacityHistoryModel?: [ 
    {
      attachedCapacity?: int32(name='AttachedCapacity'),
      autoCreatedCapacity?: int32(name='AutoCreatedCapacity'),
      scalingGroupId?: string(name='ScalingGroupId'),
      timestamp?: string(name='Timestamp'),
      totalCapacity?: int32(name='TotalCapacity'),
    }
  ](name='CapacityHistoryModel')
  }(name='CapacityHistoryItems'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCapacityHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCapacityHistoryResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeCapacityHistory(request: DescribeCapacityHistoryRequest): DescribeCapacityHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCapacityHistory', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLimitationRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeLimitationResponseBody = {
  maxNumberOfDBInstances?: int32(name='MaxNumberOfDBInstances'),
  maxNumberOfLoadBalancers?: int32(name='MaxNumberOfLoadBalancers'),
  maxNumberOfMaxSize?: int32(name='MaxNumberOfMaxSize'),
  maxNumberOfMinSize?: int32(name='MaxNumberOfMinSize'),
  maxNumberOfScalingConfigurations?: int32(name='MaxNumberOfScalingConfigurations'),
  maxNumberOfScalingGroups?: int32(name='MaxNumberOfScalingGroups'),
  maxNumberOfScalingInstances?: int32(name='MaxNumberOfScalingInstances'),
  maxNumberOfScalingRules?: int32(name='MaxNumberOfScalingRules'),
  maxNumberOfScheduledTasks?: int32(name='MaxNumberOfScheduledTasks'),
}

model DescribeLimitationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLimitationResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeLimitation(request: DescribeLimitationRequest): DescribeLimitationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLimitation', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScalingActivitiesRequest {
  scalingActivityId?: [ string ](name='ScalingActivityId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingGroupId?: string(name='ScalingGroupId', position='Query'),
  statusCode?: string(name='StatusCode', position='Query'),
}

model DescribeScalingActivitiesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  scalingActivities?: {
    scalingActivity?: [ 
    {
      attachedCapacity?: string(name='AttachedCapacity'),
      autoCreatedCapacity?: string(name='AutoCreatedCapacity'),
      cause?: string(name='Cause'),
      description?: string(name='Description'),
      endTime?: string(name='EndTime'),
      progress?: int32(name='Progress'),
      scalingActivityId?: string(name='ScalingActivityId'),
      scalingGroupId?: string(name='ScalingGroupId'),
      startTime?: string(name='StartTime'),
      statusCode?: string(name='StatusCode'),
      statusMessage?: string(name='StatusMessage'),
      totalCapacity?: string(name='TotalCapacity'),
    }
  ](name='ScalingActivity')
  }(name='ScalingActivities'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeScalingActivitiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScalingActivitiesResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeScalingActivities(request: DescribeScalingActivitiesRequest): DescribeScalingActivitiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScalingActivities', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScalingActivityDetailRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingActivityId?: string(name='ScalingActivityId', position='Query'),
}

model DescribeScalingActivityDetailResponseBody = {
  detail?: string(name='Detail'),
  scalingActivityId?: string(name='ScalingActivityId'),
}

model DescribeScalingActivityDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScalingActivityDetailResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeScalingActivityDetail(request: DescribeScalingActivityDetailRequest): DescribeScalingActivityDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScalingActivityDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScalingConfigurationsRequest {
  scalingConfigurationId?: [ string ](name='ScalingConfigurationId', position='Query'),
  scalingConfigurationName?: [ string ](name='ScalingConfigurationName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingGroupId?: string(name='ScalingGroupId', position='Query'),
}

model DescribeScalingConfigurationsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  scalingConfigurations?: {
    scalingConfiguration?: [ 
    {
      creationTime?: string(name='CreationTime'),
      dataDisks?: {
        dataDisk?: [ 
        {
          category?: string(name='Category'),
          device?: string(name='Device'),
          size?: int32(name='Size'),
          snapshotId?: string(name='SnapshotId'),
        }
      ](name='DataDisk')
      }(name='DataDisks'),
      imageId?: string(name='ImageId'),
      instanceGeneration?: string(name='InstanceGeneration'),
      instanceType?: string(name='InstanceType'),
      internetChargeType?: string(name='InternetChargeType'),
      internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn'),
      internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
      ioOptimized?: string(name='IoOptimized'),
      lifecycleState?: string(name='LifecycleState'),
      scalingConfigurationId?: string(name='ScalingConfigurationId'),
      scalingConfigurationName?: string(name='ScalingConfigurationName'),
      scalingGroupId?: string(name='ScalingGroupId'),
      securityGroupId?: string(name='SecurityGroupId'),
      systemDiskCategory?: string(name='SystemDiskCategory'),
      systemDiskSize?: int32(name='SystemDiskSize'),
    }
  ](name='ScalingConfiguration')
  }(name='ScalingConfigurations'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeScalingConfigurationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScalingConfigurationsResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeScalingConfigurations(request: DescribeScalingConfigurationsRequest): DescribeScalingConfigurationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScalingConfigurations', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScalingGroupsRequest {
  scalingGroupId?: [ string ](name='ScalingGroupId', position='Query'),
  scalingGroupName?: [ string ](name='ScalingGroupName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model DescribeScalingGroupsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  scalingGroups?: {
    scalingGroup?: [ 
    {
      activeCapacity?: int32(name='ActiveCapacity'),
      activeScalingConfigurationId?: string(name='ActiveScalingConfigurationId'),
      creationTime?: string(name='CreationTime'),
      DBInstanceIds?: {
        DBInstanceId?: [ string ](name='DBInstanceId')
      }(name='DBInstanceIds'),
      defaultCooldown?: int32(name='DefaultCooldown'),
      lifecycleState?: string(name='LifecycleState'),
      loadBalancerIds?: {
        loadBalancerId?: [ string ](name='LoadBalancerId')
      }(name='LoadBalancerIds'),
      maxSize?: int32(name='MaxSize'),
      minSize?: int32(name='MinSize'),
      pendingCapacity?: int32(name='PendingCapacity'),
      regionId?: string(name='RegionId'),
      removalPolicies?: {
        removalPolicy?: [ string ](name='RemovalPolicy')
      }(name='RemovalPolicies'),
      removingCapacity?: int32(name='RemovingCapacity'),
      scalingGroupId?: string(name='ScalingGroupId'),
      scalingGroupName?: string(name='ScalingGroupName'),
      totalCapacity?: int32(name='TotalCapacity'),
      vSwitchId?: string(name='VSwitchId'),
    }
  ](name='ScalingGroup')
  }(name='ScalingGroups'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeScalingGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScalingGroupsResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeScalingGroups(request: DescribeScalingGroupsRequest): DescribeScalingGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScalingGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScalingInstancesRequest {
  instanceId?: [ string ](name='InstanceId', position='Query'),
  creationType?: string(name='CreationType', position='Query'),
  healthStatus?: string(name='HealthStatus', position='Query'),
  lifecycleState?: string(name='LifecycleState', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingConfigurationId?: string(name='ScalingConfigurationId', position='Query'),
  scalingGroupId?: string(name='ScalingGroupId', position='Query'),
}

model DescribeScalingInstancesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  scalingInstances?: {
    scalingInstance?: [ 
    {
      creationTime?: string(name='CreationTime'),
      creationType?: string(name='CreationType'),
      healthStatus?: string(name='HealthStatus'),
      instanceId?: string(name='InstanceId'),
      lifecycleState?: string(name='LifecycleState'),
      scalingConfigurationId?: string(name='ScalingConfigurationId'),
      scalingGroupId?: string(name='ScalingGroupId'),
    }
  ](name='ScalingInstance')
  }(name='ScalingInstances'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeScalingInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScalingInstancesResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeScalingInstances(request: DescribeScalingInstancesRequest): DescribeScalingInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScalingInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScalingRulesRequest {
  scalingRuleAri?: [ string ](name='ScalingRuleAri', position='Query'),
  scalingRuleId?: [ string ](name='ScalingRuleId', position='Query'),
  scalingRuleName?: [ string ](name='ScalingRuleName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingGroupId?: string(name='ScalingGroupId', position='Query'),
}

model DescribeScalingRulesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  scalingRules?: {
    scalingRule?: [ 
    {
      adjustmentType?: string(name='AdjustmentType'),
      adjustmentValue?: int32(name='AdjustmentValue'),
      cooldown?: int32(name='Cooldown'),
      maxSize?: int32(name='MaxSize'),
      minSize?: int32(name='MinSize'),
      scalingGroupId?: string(name='ScalingGroupId'),
      scalingRuleAri?: string(name='ScalingRuleAri'),
      scalingRuleId?: string(name='ScalingRuleId'),
      scalingRuleName?: string(name='ScalingRuleName'),
    }
  ](name='ScalingRule')
  }(name='ScalingRules'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeScalingRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScalingRulesResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeScalingRules(request: DescribeScalingRulesRequest): DescribeScalingRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScalingRules', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScheduledTasksRequest {
  scheduledAction?: [ string ](name='ScheduledAction', position='Query'),
  scheduledTaskId?: [ string ](name='ScheduledTaskId', position='Query'),
  scheduledTaskName?: [ string ](name='ScheduledTaskName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeScheduledTasksResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  scheduledTasks?: {
    scheduledTask?: [ 
    {
      description?: string(name='Description'),
      launchExpirationTime?: int32(name='LaunchExpirationTime'),
      launchTime?: string(name='LaunchTime'),
      recurrenceEndTime?: string(name='RecurrenceEndTime'),
      recurrenceType?: string(name='RecurrenceType'),
      recurrenceValue?: string(name='RecurrenceValue'),
      scheduledAction?: string(name='ScheduledAction'),
      scheduledTaskId?: string(name='ScheduledTaskId'),
      scheduledTaskName?: string(name='ScheduledTaskName'),
      taskEnabled?: boolean(name='TaskEnabled'),
    }
  ](name='ScheduledTask')
  }(name='ScheduledTasks'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeScheduledTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScheduledTasksResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeScheduledTasks(request: DescribeScheduledTasksRequest): DescribeScheduledTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScheduledTasks', 'POST', '/', 'json', false, 'json', request);
}

model DetachInstancesRequest {
  instanceId?: [ string ](name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model DetachInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  scalingActivityId?: string(name='ScalingActivityId'),
}

model DetachInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachInstancesResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function detachInstances(request: DetachInstancesRequest): DetachInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachInstances', 'POST', '/', 'json', false, 'json', request);
}

model DisableScalingGroupRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model DisableScalingGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableScalingGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableScalingGroupResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function disableScalingGroup(request: DisableScalingGroupRequest): DisableScalingGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableScalingGroup', 'POST', '/', 'json', false, 'json', request);
}

model EnableScalingGroupRequest {
  instanceId?: [ string ](name='InstanceId', position='Query'),
  activeScalingConfigurationId?: string(name='ActiveScalingConfigurationId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model EnableScalingGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableScalingGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableScalingGroupResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function enableScalingGroup(request: EnableScalingGroupRequest): EnableScalingGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableScalingGroup', 'POST', '/', 'json', false, 'json', request);
}

model ExecuteScalingRuleRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingRuleAri: string(name='ScalingRuleAri', position='Query'),
}

model ExecuteScalingRuleResponseBody = {
  requestId?: string(name='RequestId'),
  scalingActivityId?: string(name='ScalingActivityId'),
}

model ExecuteScalingRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteScalingRuleResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function executeScalingRule(request: ExecuteScalingRuleRequest): ExecuteScalingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteScalingRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifyScalingGroupRequest {
  removalPolicy?: [ string ](name='RemovalPolicy', position='Query'),
  activeScalingConfigurationId?: string(name='ActiveScalingConfigurationId', position='Query'),
  defaultCooldown?: int32(name='DefaultCooldown', minimum=0, maximum=86400, position='Query'),
  maxSize?: int32(name='MaxSize', position='Query'),
  minSize?: int32(name='MinSize', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
  scalingGroupName?: string(name='ScalingGroupName', position='Query'),
}

model ModifyScalingGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyScalingGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyScalingGroupResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function modifyScalingGroup(request: ModifyScalingGroupRequest): ModifyScalingGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyScalingGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyScalingRuleRequest {
  adjustmentType?: string(name='AdjustmentType', position='Query'),
  adjustmentValue?: int32(name='AdjustmentValue', position='Query'),
  cooldown?: int32(name='Cooldown', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingRuleId: string(name='ScalingRuleId', position='Query'),
  scalingRuleName?: string(name='ScalingRuleName', position='Query'),
}

model ModifyScalingRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyScalingRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyScalingRuleResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function modifyScalingRule(request: ModifyScalingRuleRequest): ModifyScalingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyScalingRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifyScheduledTaskRequest {
  description?: string(name='Description', position='Query'),
  launchExpirationTime?: int32(name='LaunchExpirationTime', minimum=0, maximum=86400, position='Query'),
  launchTime?: string(name='LaunchTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  recurrenceEndTime?: string(name='RecurrenceEndTime', position='Query'),
  recurrenceType?: string(name='RecurrenceType', position='Query'),
  recurrenceValue?: string(name='RecurrenceValue', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scheduledAction?: string(name='ScheduledAction', position='Query'),
  scheduledTaskId: string(name='ScheduledTaskId', position='Query'),
  scheduledTaskName?: string(name='ScheduledTaskName', position='Query'),
  taskEnabled?: boolean(name='TaskEnabled', position='Query'),
}

model ModifyScheduledTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyScheduledTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyScheduledTaskResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function modifyScheduledTask(request: ModifyScheduledTaskRequest): ModifyScheduledTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyScheduledTask', 'POST', '/', 'json', false, 'json', request);
}

model RemoveInstancesRequest {
  instanceId?: [ string ](name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model RemoveInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  scalingActivityId?: string(name='ScalingActivityId'),
}

model RemoveInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveInstancesResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function removeInstances(request: RemoveInstancesRequest): RemoveInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveInstances', 'POST', '/', 'json', false, 'json', request);
}

model VerifyAuthenticationRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  uid?: long(name='Uid', position='Query'),
}

model VerifyAuthenticationResponseBody = {
  requestId?: string(name='RequestId'),
}

model VerifyAuthenticationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VerifyAuthenticationResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function verifyAuthentication(request: VerifyAuthenticationRequest): VerifyAuthenticationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyAuthentication', 'POST', '/', 'json', false, 'json', request);
}

model VerifyUserRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model VerifyUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function verifyUser(request: VerifyUserRequest): VerifyUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyUser', 'POST', '/', 'none', false, 'json', request);
}

