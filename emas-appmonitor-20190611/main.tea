/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('emas-appmonitor', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ConditionalRule {
  filter?: EventFilter(name='Filter'),
  modifyTime?: string(name='ModifyTime'),
  name?: string(name='Name'),
  operator?: string(name='Operator'),
  sampleRate?: float(name='SampleRate'),
}

model EventFilter {
  key?: string(name='Key'),
  op?: string(name='Op', description='This parameter is required.'),
  subFilters?: [
    EventFilter
  ](name='SubFilters'),
  values?: [ string ](name='Values'),
}

model EventRule {
  conditional?: [
    ConditionalRule
  ](name='Conditional'),
  enable?: boolean(name='Enable'),
  eventId?: string(name='EventId'),
  modifyTime?: string(name='ModifyTime'),
  operator?: string(name='Operator'),
  sampleRate?: float(name='SampleRate'),
}

model Filter {
  key?: string(name='Key'),
  operator?: string(name='Operator'),
  subFilters?: [
    Filter
  ](name='SubFilters'),
  values?: any(name='Values'),
}

model FullSampleItem {
  id?: string(name='Id'),
  modifyTime?: string(name='ModifyTime'),
  operator?: string(name='Operator'),
}

model SampleBase {
  fullSampleDeviceIds?: [
    FullSampleItem
  ](name='FullSampleDeviceIds'),
  fullSampleUsers?: [
    FullSampleItem
  ](name='FullSampleUsers'),
  sampleMethod?: string(name='SampleMethod'),
  sampleRate?: float(name='SampleRate'),
}

