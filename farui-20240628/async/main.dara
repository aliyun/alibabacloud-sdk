/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'FaRui';
  @version = '2024-06-28';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model RunLegalAdviceConsultationRequest {
  workspaceId?: string(name='workspaceId', example='llm-9w5y60lseff0jiqm', position='Path'),
  appId?: string(name='appId', example='farui', position='Body'),
  assistant?: {
    id?: string(name='id', example='assitant_abc_123'),
    metaData?: map[string]string(name='metaData'),
    type?: string(name='type', example='legal_advice_consult'),
    version?: string(name='version', example='1.0.0'),
  }(name='assistant', shrink='json', position='Body'),
  stream?: boolean(name='stream', example='true', position='Body'),
  thread?: {
    messages?: [ 
      {
        content?: string(name='content'),
        role?: string(name='role', example='user'),
      }
    ](name='messages'),
  }(name='thread', shrink='json', position='Body'),
}

model RunLegalAdviceConsultationResponseBody = {
  code?: string(name='Code', example='Request.Signature.Error'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='744419D0-671A-5997-9840-E8AE48356194'),
  responseMarkdown?: string(name='ResponseMarkdown'),
  round?: int32(name='Round', example='1'),
  status?: string(name='Status'),
  success?: boolean(name='Success', example='True'),
  usage?: {
    inputTokens?: int32(name='InputTokens', example='500'),
    outputTokens?: int32(name='OutputTokens', example='700'),
    totalTokens?: int32(name='TotalTokens', example='1200'),
  }(name='Usage'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
}

model RunLegalAdviceConsultationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunLegalAdviceConsultationResponseBody(name='body'),
}

async function runLegalAdviceConsultation(request: RunLegalAdviceConsultationRequest): RunLegalAdviceConsultationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunLegalAdviceConsultation', 'POST', '/{workspaceId}/farui/legalAdvice/consult', 'json', true, 'form', request);
}

function runLegalAdviceConsultationWithResponseIterable(request: RunLegalAdviceConsultationRequest): iterator[RunLegalAdviceConsultationResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunLegalAdviceConsultation', 'POST', '/{workspaceId}/farui/legalAdvice/consult', 'json', true, 'form', request);
}

