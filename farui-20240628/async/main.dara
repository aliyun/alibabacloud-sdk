/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'FaRui';
  @version = '2024-06-28';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model RunContractResultGenerationRequest {
  workspaceId: string(name='workspaceId', example='llm-kqtrcpdee4xm29xc', position='Path'),
  appId?: string(name='appId', example='farui', position='Body'),
  assistant?: {
    metaData?: {
      customRuleConfig?: {
        customRules?: [ 
          {
            riskLevel?: string(name='riskLevel', example='high'),
            ruleDesc?: string(name='ruleDesc'),
            ruleTitle?: string(name='ruleTitle'),
          }
        ](name='customRules'),
      }(name='customRuleConfig'),
      fileId?: string(name='fileId', example='9a6b1ba60d9944249363ec3cc1529b7b'),
      position?: string(name='position', example='1'),
      ruleTaskId?: string(name='ruleTaskId', example='b265b416-ca1f-425d-9340-c968f39624e1'),
      rules?: [ 
        {
          riskLevel?: string(name='riskLevel', example='medium'),
          ruleSequence?: string(name='ruleSequence', example='2.1'),
          ruleTag?: string(name='ruleTag'),
          ruleTitle?: string(name='ruleTitle'),
        }
      ](name='rules'),
    }(name='metaData'),
    type?: string(name='type', example='contract_examime'),
    version?: string(name='version', example='1.0.0'),
  }(name='assistant', shrink='json', position='Body'),
  stream?: boolean(name='stream', example='true', position='Body'),
}

model RunContractResultGenerationResponseBody = {
  code?: string(name='Code', example='null'),
  message?: string(name='Message', example='null'),
  output?: {
    result?: {
      examineBrief?: string(name='examineBrief'),
      examineResult?: string(name='examineResult'),
      riskLevel?: string(name='riskLevel', example='high'),
      ruleSequence?: string(name='ruleSequence', example='1.1'),
      ruleTag?: string(name='ruleTag'),
      ruleTitle?: string(name='ruleTitle'),
      subRisks?: [ 
        {
          originalContent?: string(name='originalContent'),
          resultContent?: string(name='resultContent'),
          resultType?: string(name='resultType'),
          riskBrief?: string(name='riskBrief'),
          riskClause?: string(name='riskClause'),
          riskExplain?: string(name='riskExplain'),
        }
      ](name='subRisks'),
    }(name='result'),
    resultTaskId?: string(name='resultTaskId', example='eaa56e1e-e205-4f5e-926e-5e2269ae7f68'),
  }(name='Output'),
  requestId?: string(name='RequestId', example='744419D0-671A-5997-9840-E8AE48356194'),
  success?: boolean(name='Success', example='True'),
  usage?: {
    input?: long(name='input', example='5'),
    unit?: string(name='unit', example='page'),
  }(name='Usage'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
}

model RunContractResultGenerationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunContractResultGenerationResponseBody(name='body'),
}

async function runContractResultGeneration(request: RunContractResultGenerationRequest): RunContractResultGenerationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunContractResultGeneration', 'POST', '/{workspaceId}/farui/contract/result/genarate', 'json', true, 'form', request);
}

function runContractResultGenerationWithResponseIterable(request: RunContractResultGenerationRequest): iterator[RunContractResultGenerationResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunContractResultGeneration', 'POST', '/{workspaceId}/farui/contract/result/genarate', 'json', true, 'form', request);
}

model RunContractRuleGenerationRequest {
  workspaceId?: string(name='workspaceId', example='llm-9w5y60lseff0jiqm', position='Path'),
  appId?: string(name='appId', example='farui', position='Body'),
  assistant?: {
    metaData?: {
      fileId?: string(name='fileId', example='9a6b1ba60d9944249363ec3cc1529b7b'),
      position?: string(name='position', example='1'),
    }(name='metaData'),
    type?: string(name='type', example='contract_examime'),
    version?: string(name='version', example='1.0.0'),
  }(name='assistant', shrink='json', position='Body'),
  stream?: boolean(name='stream', example='true', position='Body'),
}

model RunContractRuleGenerationResponseBody = {
  code?: string(name='Code', example='null'),
  message?: string(name='Message', example='null'),
  output?: {
    ruleTaskId?: string(name='ruleTaskId', example='b265b416-ca1f-425d-9340-c968f39624e9'),
    rules?: [ 
      {
        riskLevel?: string(name='riskLevel', example='medium'),
        ruleSequence?: string(name='ruleSequence', example='1.1'),
        ruleTag?: string(name='ruleTag'),
        ruleTitle?: string(name='ruleTitle'),
      }
    ](name='rules'),
  }(name='Output'),
  requestId?: string(name='RequestId', example='744419D0-671A-5997-9840-E8AE48356194'),
  success?: boolean(name='Success', example='True'),
  usage?: {
    input?: long(name='input', example='5'),
    unit?: string(name='unit', example='page'),
  }(name='Usage'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
}

model RunContractRuleGenerationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunContractRuleGenerationResponseBody(name='body'),
}

async function runContractRuleGeneration(request: RunContractRuleGenerationRequest): RunContractRuleGenerationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunContractRuleGeneration', 'POST', '/{workspaceId}/farui/contract/rule/genarate', 'json', true, 'form', request);
}

function runContractRuleGenerationWithResponseIterable(request: RunContractRuleGenerationRequest): iterator[RunContractRuleGenerationResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunContractRuleGeneration', 'POST', '/{workspaceId}/farui/contract/rule/genarate', 'json', true, 'form', request);
}

model RunLegalAdviceConsultationRequest {
  workspaceId?: string(name='workspaceId', example='llm-9w5y60lseff0jiqm', position='Path'),
  appId?: string(name='appId', example='farui', position='Body'),
  assistant?: {
    id?: string(name='id', example='assitant_abc_123'),
    metaData?: map[string]string(name='metaData'),
    type?: string(name='type', example='legal_advice_consult'),
    version?: string(name='version', example='1.0.0'),
  }(name='assistant', shrink='json', position='Body'),
  stream?: boolean(name='stream', example='true', position='Body'),
  thread?: {
    messages?: [ 
      {
        content?: string(name='content'),
        role?: string(name='role', example='user'),
      }
    ](name='messages'),
  }(name='thread', shrink='json', position='Body'),
}

model RunLegalAdviceConsultationResponseBody = {
  code?: string(name='Code', example='Request.Signature.Error'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='744419D0-671A-5997-9840-E8AE48356194'),
  responseMarkdown?: string(name='ResponseMarkdown'),
  round?: int32(name='Round', example='1'),
  status?: string(name='Status'),
  success?: boolean(name='Success', example='True'),
  usage?: {
    inputTokens?: int32(name='InputTokens', example='500'),
    outputTokens?: int32(name='OutputTokens', example='700'),
    totalTokens?: int32(name='TotalTokens', example='1200'),
  }(name='Usage'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
}

model RunLegalAdviceConsultationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunLegalAdviceConsultationResponseBody(name='body'),
}

async function runLegalAdviceConsultation(request: RunLegalAdviceConsultationRequest): RunLegalAdviceConsultationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunLegalAdviceConsultation', 'POST', '/{workspaceId}/farui/legalAdvice/consult', 'json', true, 'form', request);
}

function runLegalAdviceConsultationWithResponseIterable(request: RunLegalAdviceConsultationRequest): iterator[RunLegalAdviceConsultationResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunLegalAdviceConsultation', 'POST', '/{workspaceId}/farui/legalAdvice/consult', 'json', true, 'form', request);
}

