/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'FaRui';
  @version = '2024-06-28';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model RunContractResultGenerationRequest {
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-kqtrcpdee4xm29xc', position='Path'),
  regionId?: string(name='regionId', position='Host'),
  appId?: string(name='appId', example='farui', position='Body'),
  assistant?: {
    metaData?: {
      customRuleConfig?: {
        customRules?: [ 
          {
            riskLevel?: string(name='riskLevel', example='high'),
            ruleDesc?: string(name='ruleDesc'),
            ruleTitle?: string(name='ruleTitle'),
          }
        ](name='customRules'),
      }(name='customRuleConfig'),
      fileId?: string(name='fileId', example='9a6b1ba60d9944249363ec3cc1529b7b'),
      position?: string(name='position', example='1'),
      ruleTaskId?: string(name='ruleTaskId', example='b265b416-ca1f-425d-9340-c968f39624e1'),
      rules?: [ 
        {
          riskLevel?: string(name='riskLevel', example='medium'),
          ruleSequence?: string(name='ruleSequence', example='2.1'),
          ruleTag?: string(name='ruleTag'),
          ruleTitle?: string(name='ruleTitle'),
        }
      ](name='rules'),
    }(name='metaData'),
    type?: string(name='type', example='contract_examime'),
    version?: string(name='version', example='1.0.0'),
  }(name='assistant', shrink='json', position='Body'),
  stream?: boolean(name='stream', example='true', position='Body'),
}

model RunContractResultGenerationResponseBody = {
  code?: string(name='Code', example='null'),
  message?: string(name='Message', example='null'),
  output?: {
    result?: {
      examineBrief?: string(name='examineBrief'),
      examineResult?: string(name='examineResult'),
      riskLevel?: string(name='riskLevel', example='high'),
      ruleSequence?: string(name='ruleSequence', example='1.1'),
      ruleTag?: string(name='ruleTag'),
      ruleTitle?: string(name='ruleTitle'),
      subRisks?: [ 
        {
          originalContent?: string(name='originalContent'),
          resultContent?: string(name='resultContent'),
          resultType?: string(name='resultType'),
          riskBrief?: string(name='riskBrief'),
          riskClause?: string(name='riskClause'),
          riskExplain?: string(name='riskExplain'),
        }
      ](name='subRisks'),
    }(name='result'),
    resultTaskId?: string(name='resultTaskId', example='eaa56e1e-e205-4f5e-926e-5e2269ae7f68'),
  }(name='Output'),
  requestId?: string(name='RequestId', example='744419D0-671A-5997-9840-E8AE48356194'),
  success?: boolean(name='Success', example='True'),
  usage?: {
    input?: long(name='input', example='5'),
    unit?: string(name='unit', example='page'),
  }(name='Usage'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
}

model RunContractResultGenerationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunContractResultGenerationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunContractResultGeneration  RunContractResultGenerationRequest
  * @return RunContractResultGenerationResponse
 */
async function runContractResultGeneration(request: RunContractResultGenerationRequest): RunContractResultGenerationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunContractResultGeneration', 'POST', '/{workspaceId}/farui/contract/result/genarate', 'json', true, 'form', request);
}

function runContractResultGenerationWithResponseIterable(request: RunContractResultGenerationRequest): iterator[RunContractResultGenerationResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunContractResultGeneration', 'POST', '/{workspaceId}/farui/contract/result/genarate', 'json', true, 'form', request);
}

model RunContractRuleGenerationRequest {
  workspaceId?: string(name='workspaceId', example='llm-9w5y60lseff0jiqm', position='Path'),
  regionId?: string(name='regionId', position='Host'),
  appId?: string(name='appId', example='farui', position='Body'),
  assistant?: {
    metaData?: {
      fileId?: string(name='fileId', example='9a6b1ba60d9944249363ec3cc1529b7b'),
      position?: string(name='position', example='1'),
    }(name='metaData'),
    type?: string(name='type', example='contract_examime'),
    version?: string(name='version', example='1.0.0'),
  }(name='assistant', shrink='json', position='Body'),
  stream?: boolean(name='stream', example='true', position='Body'),
}

model RunContractRuleGenerationResponseBody = {
  code?: string(name='Code', example='null'),
  message?: string(name='Message', example='null'),
  output?: {
    ruleTaskId?: string(name='ruleTaskId', example='b265b416-ca1f-425d-9340-c968f39624e9'),
    rules?: [ 
      {
        riskLevel?: string(name='riskLevel', example='medium'),
        ruleSequence?: string(name='ruleSequence', example='1.1'),
        ruleTag?: string(name='ruleTag'),
        ruleTitle?: string(name='ruleTitle'),
      }
    ](name='rules'),
  }(name='Output'),
  requestId?: string(name='RequestId', example='744419D0-671A-5997-9840-E8AE48356194'),
  success?: boolean(name='Success', example='True'),
  usage?: {
    input?: long(name='input', example='5'),
    unit?: string(name='unit', example='page'),
  }(name='Usage'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
}

model RunContractRuleGenerationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunContractRuleGenerationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunContractRuleGeneration  RunContractRuleGenerationRequest
  * @return RunContractRuleGenerationResponse
 */
async function runContractRuleGeneration(request: RunContractRuleGenerationRequest): RunContractRuleGenerationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunContractRuleGeneration', 'POST', '/{workspaceId}/farui/contract/rule/genarate', 'json', true, 'form', request);
}

function runContractRuleGenerationWithResponseIterable(request: RunContractRuleGenerationRequest): iterator[RunContractRuleGenerationResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunContractRuleGeneration', 'POST', '/{workspaceId}/farui/contract/rule/genarate', 'json', true, 'form', request);
}

model RunLegalAdviceConsultationRequest {
  workspaceId?: string(name='workspaceId', example='llm-9w5y60lseff0jiqm', position='Path'),
  regionId?: string(name='regionId', position='Host'),
  appId?: string(name='appId', example='farui', position='Body'),
  assistant?: {
    id?: string(name='id', example='assitant_abc_123'),
    metaData?: map[string]string(name='metaData'),
    type?: string(name='type', example='legal_advice_consult'),
    version?: string(name='version', example='1.0.0'),
  }(name='assistant', shrink='json', position='Body'),
  stream?: boolean(name='stream', example='true', position='Body'),
  thread?: {
    messages?: [ 
      {
        content?: string(name='content'),
        role?: string(name='role', example='user'),
      }
    ](name='messages'),
  }(name='thread', shrink='json', position='Body'),
}

model RunLegalAdviceConsultationResponseBody = {
  code?: string(name='Code', example='Request.Signature.Error'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='744419D0-671A-5997-9840-E8AE48356194'),
  responseMarkdown?: string(name='ResponseMarkdown'),
  round?: int32(name='Round', example='1'),
  status?: string(name='Status'),
  success?: boolean(name='Success', example='True'),
  usage?: {
    inputTokens?: int32(name='InputTokens', example='500'),
    outputTokens?: int32(name='OutputTokens', example='700'),
    totalTokens?: int32(name='TotalTokens', example='1200'),
  }(name='Usage'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
}

model RunLegalAdviceConsultationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunLegalAdviceConsultationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunLegalAdviceConsultation  RunLegalAdviceConsultationRequest
  * @return RunLegalAdviceConsultationResponse
 */
async function runLegalAdviceConsultation(request: RunLegalAdviceConsultationRequest): RunLegalAdviceConsultationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunLegalAdviceConsultation', 'POST', '/{workspaceId}/farui/legalAdvice/consult', 'json', true, 'form', request);
}

function runLegalAdviceConsultationWithResponseIterable(request: RunLegalAdviceConsultationRequest): iterator[RunLegalAdviceConsultationResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunLegalAdviceConsultation', 'POST', '/{workspaceId}/farui/legalAdvice/consult', 'json', true, 'form', request);
}

model RunSearchCaseFullTextRequest {
  workspaceId?: string(name='workspaceId', example='llm-9w5y60lseff0jiqm', position='Path'),
  regionId?: string(name='regionId', position='Host'),
  appId?: string(name='appId', example='farui', position='Body'),
  filterCondition?: {
    caseNo?: string(name='caseNo'),
    caseTitle?: string(name='caseTitle'),
  }(name='filterCondition', shrink='json', position='Body'),
  pageParam: {
    pageNumber?: int32(name='pageNumber', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
  }(name='pageParam', description='This parameter is required.', shrink='json', position='Body'),
  query: string(name='query', description='This parameter is required.', position='Body'),
  queryKeywords?: [ string ](name='queryKeywords', shrink='json', position='Body'),
  referLevel?: string(name='referLevel', position='Body'),
  sortKeyAndDirection?: map[string]string(name='sortKeyAndDirection', shrink='json', position='Body'),
  thread?: {
    messages?: [ 
      {
        content?: string(name='content'),
        role?: string(name='role', example='user'),
      }
    ](name='messages'),
  }(name='thread', shrink='json', position='Body'),
}

model RunSearchCaseFullTextResponseBody = {
  code?: string(name='code', example='null'),
  data?: {
    caseLevel?: string(name='caseLevel'),
    caseResult?: [ 
      {
        caseDomain?: {
          abstractObj?: string(name='abstractObj'),
          appliedLaws?: string(name='appliedLaws'),
          basicCase?: string(name='basicCase'),
          caseBasic?: string(name='caseBasic'),
          caseCause?: string(name='caseCause'),
          caseFeature?: string(name='caseFeature'),
          caseId?: string(name='caseId'),
          caseNo?: string(name='caseNo'),
          caseSummary?: string(name='caseSummary'),
          caseTitle?: string(name='caseTitle'),
          caseType?: string(name='caseType'),
          closeCaseCause?: string(name='closeCaseCause'),
          courtFindOut?: string(name='courtFindOut'),
          courtThink?: string(name='courtThink'),
          dataFrom?: string(name='dataFrom'),
          disputeFocus?: string(name='disputeFocus'),
          disputeFocusTag?: [ string ](name='disputeFocusTag'),
          disputedpoints?: string(name='disputedpoints'),
          documentType?: string(name='documentType'),
          judgReason?: string(name='judgReason'),
          keyfacts?: string(name='keyfacts'),
          legalBasis?: string(name='legalBasis'),
          litigants?: string(name='litigants'),
          litigationParticipant?: string(name='litigationParticipant'),
          openCaseCause?: string(name='openCaseCause'),
          preTrialProcess?: string(name='preTrialProcess'),
          referLevel?: string(name='referLevel'),
          refereeGist?: string(name='refereeGist'),
          sourceContent?: string(name='sourceContent'),
          trialCourt?: {
            city?: string(name='city'),
            commonLevel?: string(name='commonLevel'),
            country?: string(name='country'),
            county?: string(name='county'),
            district?: string(name='district'),
            name?: string(name='name'),
            province?: string(name='province'),
            specialLevel?: string(name='specialLevel', example='“”'),
          }(name='trialCourt'),
          trialDate?: string(name='trialDate', example='2018-09-27'),
          trialLevel?: string(name='trialLevel'),
          trialProcess?: string(name='trialProcess'),
          trialProgram?: string(name='trialProgram'),
          verdict?: string(name='verdict'),
        }(name='caseDomain'),
        mode?: string(name='mode'),
        similarity?: string(name='similarity', example='0.88'),
      }
    ](name='caseResult'),
    currentPage?: int32(name='currentPage', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
    query?: string(name='query'),
    queryKeywords?: [ string ](name='queryKeywords'),
    totalCount?: long(name='totalCount', example='1'),
  }(name='data'),
  httpStatusCode?: long(name='httpStatusCode', example='200'),
  message?: string(name='message'),
  requestId?: string(name='requestId', description='Id of the request', example='C844BE6B-33A9-5AC4-A1AE-97B131849E0F'),
  success?: boolean(name='success', example='True'),
}

model RunSearchCaseFullTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunSearchCaseFullTextResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunSearchCaseFullText  RunSearchCaseFullTextRequest
  * @return RunSearchCaseFullTextResponse
 */
async function runSearchCaseFullText(request: RunSearchCaseFullTextRequest): RunSearchCaseFullTextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunSearchCaseFullText', 'POST', '/{workspaceId}/farui/search/case/fulltext', 'json', true, 'form', request);
}

model RunSearchLawQueryRequest {
  workspaceId?: string(name='workspaceId', example='llm-kqtrcpdee4xm29', position='Path'),
  regionId?: string(name='regionId', position='Host'),
  appId?: string(name='appId', example='farui', position='Body'),
  filterCondition?: {
    lawName?: string(name='lawName'),
  }(name='filterCondition', shrink='json', position='Body'),
  pageParam?: {
    pageNumber?: int32(name='pageNumber', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
  }(name='pageParam', shrink='json', position='Body'),
  query: string(name='query', description='This parameter is required.', position='Body'),
  queryKeywords?: [ string ](name='queryKeywords', shrink='json', position='Body'),
  thread?: {
    messages?: [ 
      {
        content?: string(name='content'),
        role?: string(name='role', example='user'),
      }
    ](name='messages'),
  }(name='thread', shrink='json', position='Body'),
}

model RunSearchLawQueryResponseBody = {
  code?: string(name='code', example='Ok'),
  data?: {
    currentPage?: int32(name='currentPage', example='1'),
    lawResult?: [ 
      {
        lawDomain?: {
          abolitionBasis?: string(name='abolitionBasis'),
          implementYearMonthDate?: string(name='implementYearMonthDate'),
          invalidBasis?: string(name='invalidBasis', example='null'),
          issuingNo?: string(name='issuingNo', example='""'),
          issuingOrgan?: string(name='issuingOrgan'),
          lawId?: string(name='lawId', example='b2274825c8c3bc2343ca73680243ddc8'),
          lawItemId?: string(name='lawItemId', example='ccc209683be1509676174fd6890f24b8'),
          lawName?: string(name='lawName'),
          lawOrder?: string(name='lawOrder'),
          lawSourceContent?: string(name='lawSourceContent'),
          lawTitle?: string(name='lawTitle'),
          modifyBasis?: string(name='modifyBasis', example='"[]"'),
          potencyLevel?: string(name='potencyLevel'),
          releaseYearMonthDate?: string(name='releaseYearMonthDate'),
          thematicClassify?: string(name='thematicClassify', example='null'),
          timeliness?: string(name='timeliness'),
        }(name='lawDomain'),
        similarity?: string(name='similarity', example='0.0050'),
      }
    ](name='lawResult'),
    pageSize?: int32(name='pageSize', example='0'),
    query?: string(name='query'),
    queryKeywords?: [ string ](name='queryKeywords'),
    sortKeyAndDirection?: {
      releaseYearMonthDate?: string(name='releaseYearMonthDate', example='desc'),
      similarity?: string(name='similarity', example='desc'),
    }(name='sortKeyAndDirection'),
    totalCount?: long(name='totalCount', example='0'),
  }(name='data'),
  httpStatusCode?: long(name='httpStatusCode', example='200'),
  message?: string(name='message'),
  requestId?: string(name='requestId', description='Id of the request', example='05062567-EB51-50F6-AF56-0BE44955848D'),
  success?: boolean(name='success', example='true'),
}

model RunSearchLawQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunSearchLawQueryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunSearchLawQuery  RunSearchLawQueryRequest
  * @return RunSearchLawQueryResponse
 */
async function runSearchLawQuery(request: RunSearchLawQueryRequest): RunSearchLawQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunSearchLawQuery', 'POST', '/{workspaceId}/farui/search/law/query', 'json', true, 'form', request);
}

