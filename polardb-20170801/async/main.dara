/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'polardb';
  @version = '2017-08-01';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'polardb.aliyuncs.com',
    cn-beijing = 'polardb.aliyuncs.com',
    cn-hangzhou = 'polardb.aliyuncs.com',
    cn-shanghai = 'polardb.aliyuncs.com',
    cn-shenzhen = 'polardb.aliyuncs.com',
    cn-hongkong = 'polardb.aliyuncs.com',
    ap-southeast-1 = 'polardb.aliyuncs.com',
    us-west-1 = 'polardb.aliyuncs.com',
    us-east-1 = 'polardb.aliyuncs.com',
    cn-hangzhou-finance = 'polardb.aliyuncs.com',
    cn-shanghai-finance-1 = 'polardb.aliyuncs.com',
    cn-shenzhen-finance-1 = 'polardb.aliyuncs.com',
    ap-northeast-2-pop = 'polardb.aliyuncs.com',
    cn-beijing-finance-1 = 'polardb.aliyuncs.com',
    cn-beijing-finance-pop = 'polardb.aliyuncs.com',
    cn-beijing-gov-1 = 'polardb.aliyuncs.com',
    cn-beijing-nu16-b01 = 'polardb.aliyuncs.com',
    cn-edge-1 = 'polardb.aliyuncs.com',
    cn-fujian = 'polardb.aliyuncs.com',
    cn-haidian-cm12-c01 = 'polardb.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'polardb.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'polardb.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'polardb.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'polardb.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'polardb.aliyuncs.com',
    cn-hangzhou-test-306 = 'polardb.aliyuncs.com',
    cn-hongkong-finance-pop = 'polardb.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'polardb.aliyuncs.com',
    cn-north-2-gov-1 = 'polardb.aliyuncs.com',
    cn-qingdao-nebula = 'polardb.aliyuncs.com',
    cn-shanghai-et15-b01 = 'polardb.aliyuncs.com',
    cn-shanghai-et2-b01 = 'polardb.aliyuncs.com',
    cn-shanghai-inner = 'polardb.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'polardb.aliyuncs.com',
    cn-shenzhen-inner = 'polardb.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'polardb.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'polardb.aliyuncs.com',
    cn-wuhan = 'polardb.aliyuncs.com',
    cn-wulanchabu = 'polardb.aliyuncs.com',
    cn-yushanfang = 'polardb.aliyuncs.com',
    cn-zhangbei = 'polardb.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'polardb.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'polardb.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'polardb.aliyuncs.com',
    eu-west-1-oxs = 'polardb.aliyuncs.com',
    rus-west-1-pop = 'polardb.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CancelScheduleTasksRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: string(name='TaskId', position='Query'),
}

model CancelScheduleTasksResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CancelScheduleTasksResponse = {
  headers: map[string]string(name='headers'),
  body: CancelScheduleTasksResponseBody(name='body'),
}

async function cancelScheduleTasks(request: CancelScheduleTasksRequest): CancelScheduleTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelScheduleTasks', 'POST', '/', 'json', false, 'json', request);
}

model CheckAccountNameRequest {
  accountName: string(name='AccountName', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CheckAccountNameResponseBody = {
  requestId?: string(name='RequestId'),
}

model CheckAccountNameResponse = {
  headers: map[string]string(name='headers'),
  body: CheckAccountNameResponseBody(name='body'),
}

async function checkAccountName(request: CheckAccountNameRequest): CheckAccountNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckAccountName', 'POST', '/', 'json', false, 'json', request);
}

model CheckDBNameRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBName: string(name='DBName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CheckDBNameResponseBody = {
  requestId?: string(name='RequestId'),
}

model CheckDBNameResponse = {
  headers: map[string]string(name='headers'),
  body: CheckDBNameResponseBody(name='body'),
}

async function checkDBName(request: CheckDBNameRequest): CheckDBNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckDBName', 'POST', '/', 'json', false, 'json', request);
}

model CloseAITaskRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CloseAITaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  taskId?: string(name='TaskId'),
}

model CloseAITaskResponse = {
  headers: map[string]string(name='headers'),
  body: CloseAITaskResponseBody(name='body'),
}

async function closeAITask(request: CloseAITaskRequest): CloseAITaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloseAITask', 'POST', '/', 'json', false, 'json', request);
}

model CloseDBClusterMigrationRequest {
  continueEnableBinlog?: boolean(name='ContinueEnableBinlog', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CloseDBClusterMigrationResponseBody = {
  requestId?: string(name='RequestId'),
}

model CloseDBClusterMigrationResponse = {
  headers: map[string]string(name='headers'),
  body: CloseDBClusterMigrationResponseBody(name='body'),
}

async function closeDBClusterMigration(request: CloseDBClusterMigrationRequest): CloseDBClusterMigrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloseDBClusterMigration', 'POST', '/', 'json', false, 'json', request);
}

model CreateAccountRequest {
  accountDescription?: string(name='AccountDescription', position='Query'),
  accountName: string(name='AccountName', position='Query'),
  accountPassword: string(name='AccountPassword', position='Query'),
  accountPrivilege?: string(name='AccountPrivilege', position='Query'),
  accountType?: string(name='AccountType', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBName?: string(name='DBName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAccountResponseBody(name='body'),
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateBackupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateBackupResponseBody = {
  backupJobId?: string(name='BackupJobId'),
  requestId?: string(name='RequestId'),
}

model CreateBackupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBackupResponseBody(name='body'),
}

async function createBackup(request: CreateBackupRequest): CreateBackupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBackup', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBClusterRequest {
  autoRenew?: boolean(name='AutoRenew', position='Query'),
  backupRetentionPolicyOnClusterDeletion?: string(name='BackupRetentionPolicyOnClusterDeletion', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  cloneDataPoint?: string(name='CloneDataPoint', position='Query'),
  clusterNetworkType?: string(name='ClusterNetworkType', position='Query'),
  creationCategory?: string(name='CreationCategory', position='Query'),
  creationOption?: string(name='CreationOption', position='Query'),
  DBClusterDescription?: string(name='DBClusterDescription', position='Query'),
  DBMinorVersion?: string(name='DBMinorVersion', position='Query'),
  DBNodeClass: string(name='DBNodeClass', position='Query'),
  DBType: string(name='DBType', position='Query'),
  DBVersion: string(name='DBVersion', position='Query'),
  defaultTimeZone?: string(name='DefaultTimeZone', position='Query'),
  GDNId?: string(name='GDNId', position='Query'),
  lowerCaseTableNames?: string(name='LowerCaseTableNames', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parameterGroupId?: string(name='ParameterGroupId', position='Query'),
  payType: string(name='PayType', position='Query'),
  period?: string(name='Period', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityIPList?: string(name='SecurityIPList', position='Query'),
  sourceResourceId?: string(name='SourceResourceId', position='Query'),
  TDEStatus?: boolean(name='TDEStatus', position='Query'),
  usedTime?: string(name='UsedTime', position='Query'),
  VPCId?: string(name='VPCId', position='Query'),
  vSwitchId?: string(name='VSwitchId', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model CreateDBClusterResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model CreateDBClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBClusterResponseBody(name='body'),
}

async function createDBCluster(request: CreateDBClusterRequest): CreateDBClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBCluster', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBClusterEndpointRequest {
  autoAddNewNodes?: string(name='AutoAddNewNodes', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBEndpointDescription?: string(name='DBEndpointDescription', position='Query'),
  endpointConfig?: string(name='EndpointConfig', position='Query'),
  endpointType: string(name='EndpointType', position='Query'),
  nodes?: string(name='Nodes', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  readWriteMode?: string(name='ReadWriteMode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateDBClusterEndpointResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDBClusterEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBClusterEndpointResponseBody(name='body'),
}

async function createDBClusterEndpoint(request: CreateDBClusterEndpointRequest): CreateDBClusterEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBClusterEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBEndpointAddressRequest {
  connectionStringPrefix?: string(name='ConnectionStringPrefix', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBEndpointId: string(name='DBEndpointId', position='Query'),
  netType: string(name='NetType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateDBEndpointAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDBEndpointAddressResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBEndpointAddressResponseBody(name='body'),
}

async function createDBEndpointAddress(request: CreateDBEndpointAddressRequest): CreateDBEndpointAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBEndpointAddress', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBLinkRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBLinkName: string(name='DBLinkName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceDBName: string(name='SourceDBName', position='Query'),
  targetDBAccount: string(name='TargetDBAccount', position='Query'),
  targetDBInstanceName?: string(name='TargetDBInstanceName', position='Query'),
  targetDBName: string(name='TargetDBName', position='Query'),
  targetDBPasswd: string(name='TargetDBPasswd', position='Query'),
  targetIp?: string(name='TargetIp', position='Query'),
  targetPort?: string(name='TargetPort', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
}

model CreateDBLinkResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDBLinkResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBLinkResponseBody(name='body'),
}

async function createDBLink(request: CreateDBLinkRequest): CreateDBLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBLink', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBNodesRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBNode: [ 
    {
      targetClass?: string(name='TargetClass'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DBNode', position='Query'),
  endpointBindList?: string(name='EndpointBindList', position='Query'),
  imciSwitch?: string(name='ImciSwitch', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  plannedEndTime?: string(name='PlannedEndTime', position='Query'),
  plannedStartTime?: string(name='PlannedStartTime', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateDBNodesResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  DBNodeIds?: {
    DBNodeId?: [ string ](name='DBNodeId')
  }(name='DBNodeIds'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateDBNodesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBNodesResponseBody(name='body'),
}

async function createDBNodes(request: CreateDBNodesRequest): CreateDBNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBNodes', 'POST', '/', 'json', false, 'json', request);
}

model CreateDatabaseRequest {
  accountName?: string(name='AccountName', position='Query'),
  accountPrivilege?: string(name='AccountPrivilege', position='Query'),
  characterSetName: string(name='CharacterSetName', position='Query'),
  collate?: string(name='Collate', position='Query'),
  ctype?: string(name='Ctype', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBDescription?: string(name='DBDescription', position='Query'),
  DBName: string(name='DBName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateDatabaseResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDatabaseResponseBody(name='body'),
}

async function createDatabase(request: CreateDatabaseRequest): CreateDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDatabase', 'POST', '/', 'json', false, 'json', request);
}

model CreateGlobalDatabaseNetworkRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  GDNDescription?: string(name='GDNDescription', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CreateGlobalDatabaseNetworkResponseBody = {
  GDNId?: string(name='GDNId'),
  requestId?: string(name='RequestId'),
}

model CreateGlobalDatabaseNetworkResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGlobalDatabaseNetworkResponseBody(name='body'),
}

async function createGlobalDatabaseNetwork(request: CreateGlobalDatabaseNetworkRequest): CreateGlobalDatabaseNetworkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGlobalDatabaseNetwork', 'POST', '/', 'json', false, 'json', request);
}

model CreateParameterGroupRequest {
  DBType: string(name='DBType', position='Query'),
  DBVersion: string(name='DBVersion', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parameterGroupDesc?: string(name='ParameterGroupDesc', position='Query'),
  parameterGroupName: string(name='ParameterGroupName', position='Query'),
  parameters: string(name='Parameters', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateParameterGroupResponseBody = {
  parameterGroupId?: string(name='ParameterGroupId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateParameterGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateParameterGroupResponseBody(name='body'),
}

async function createParameterGroup(request: CreateParameterGroupRequest): CreateParameterGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateParameterGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateStoragePlanRequest {
  clientToken?: string(name='ClientToken', description='幂等参数', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period: string(name='Period', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  storageClass: string(name='StorageClass', position='Query'),
  storageType: string(name='StorageType', position='Query'),
  usedTime: string(name='UsedTime', position='Query'),
}

model CreateStoragePlanResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateStoragePlanResponse = {
  headers: map[string]string(name='headers'),
  body: CreateStoragePlanResponseBody(name='body'),
}

async function createStoragePlan(request: CreateStoragePlanRequest): CreateStoragePlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateStoragePlan', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAccountRequest {
  accountName: string(name='AccountName', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAccountResponseBody(name='body'),
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAccount', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBackupRequest {
  backupId: string(name='BackupId', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteBackupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteBackupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBackupResponseBody(name='body'),
}

async function deleteBackup(request: DeleteBackupRequest): DeleteBackupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBackup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDBClusterRequest {
  backupRetentionPolicyOnClusterDeletion?: string(name='BackupRetentionPolicyOnClusterDeletion', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDBClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDBClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBClusterResponseBody(name='body'),
}

async function deleteDBCluster(request: DeleteDBClusterRequest): DeleteDBClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBCluster', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDBClusterEndpointRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBEndpointId: string(name='DBEndpointId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDBClusterEndpointResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDBClusterEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBClusterEndpointResponseBody(name='body'),
}

async function deleteDBClusterEndpoint(request: DeleteDBClusterEndpointRequest): DeleteDBClusterEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBClusterEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDBEndpointAddressRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBEndpointId: string(name='DBEndpointId', position='Query'),
  netType: string(name='NetType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDBEndpointAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDBEndpointAddressResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBEndpointAddressResponseBody(name='body'),
}

async function deleteDBEndpointAddress(request: DeleteDBEndpointAddressRequest): DeleteDBEndpointAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBEndpointAddress', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDBLinkRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBLinkName: string(name='DBLinkName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDBLinkResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDBLinkResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBLinkResponseBody(name='body'),
}

async function deleteDBLink(request: DeleteDBLinkRequest): DeleteDBLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBLink', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDBNodesRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBNodeId: [ string ](name='DBNodeId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDBNodesResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model DeleteDBNodesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBNodesResponseBody(name='body'),
}

async function deleteDBNodes(request: DeleteDBNodesRequest): DeleteDBNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBNodes', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDatabaseRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBName: string(name='DBName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDatabaseResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDatabaseResponseBody(name='body'),
}

async function deleteDatabase(request: DeleteDatabaseRequest): DeleteDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDatabase', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGlobalDatabaseNetworkRequest {
  GDNId: string(name='GDNId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteGlobalDatabaseNetworkResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteGlobalDatabaseNetworkResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGlobalDatabaseNetworkResponseBody(name='body'),
}

async function deleteGlobalDatabaseNetwork(request: DeleteGlobalDatabaseNetworkRequest): DeleteGlobalDatabaseNetworkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGlobalDatabaseNetwork', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMaskingRulesRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ruleNameList: string(name='RuleNameList', position='Query'),
}

model DeleteMaskingRulesResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model DeleteMaskingRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMaskingRulesResponseBody(name='body'),
}

async function deleteMaskingRules(request: DeleteMaskingRulesRequest): DeleteMaskingRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMaskingRules', 'POST', '/', 'json', false, 'json', request);
}

model DeleteParameterGroupRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parameterGroupId: string(name='ParameterGroupId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteParameterGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteParameterGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteParameterGroupResponseBody(name='body'),
}

async function deleteParameterGroup(request: DeleteParameterGroupRequest): DeleteParameterGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteParameterGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAITaskStatusRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeAITaskStatusResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  requestId?: string(name='RequestId', description='Id of the request'),
  status?: string(name='Status'),
  statusName?: string(name='StatusName'),
}

model DescribeAITaskStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAITaskStatusResponseBody(name='body'),
}

async function describeAITaskStatus(request: DescribeAITaskStatusRequest): DescribeAITaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAITaskStatus', 'GET', '/', 'json', false, 'json', request);
}

model DescribeAccountsRequest {
  accountName?: string(name='AccountName', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeAccountsResponseBody = {
  accounts?: [ 
    {
      accountDescription?: string(name='AccountDescription'),
      accountLockState?: string(name='AccountLockState'),
      accountName?: string(name='AccountName'),
      accountPasswordValidTime?: string(name='AccountPasswordValidTime'),
      accountStatus?: string(name='AccountStatus'),
      accountType?: string(name='AccountType'),
      databasePrivileges?: [ 
        {
          accountPrivilege?: string(name='AccountPrivilege'),
          DBName?: string(name='DBName'),
        }
      ](name='DatabasePrivileges'),
    }
  ](name='Accounts'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
}

model DescribeAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccountsResponseBody(name='body'),
}

async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccounts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAutoRenewAttributeRequest {
  DBClusterIds?: string(name='DBClusterIds', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeAutoRenewAttributeResponseBody = {
  items?: {
    autoRenewAttribute?: [ 
    {
      autoRenewEnabled?: boolean(name='AutoRenewEnabled'),
      DBClusterId?: string(name='DBClusterId'),
      duration?: int32(name='Duration'),
      periodUnit?: string(name='PeriodUnit'),
      regionId?: string(name='RegionId'),
      renewalStatus?: string(name='RenewalStatus'),
    }
  ](name='AutoRenewAttribute')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoRenewAttributeResponseBody(name='body'),
}

async function describeAutoRenewAttribute(request: DescribeAutoRenewAttributeRequest): DescribeAutoRenewAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAutoRenewAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupLogsRequest {
  backupRegion?: string(name='BackupRegion', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', minimum=30, maximum=100, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeBackupLogsResponseBody = {
  items?: {
    backupLog?: [ 
    {
      backupLogEndTime?: string(name='BackupLogEndTime'),
      backupLogId?: string(name='BackupLogId'),
      backupLogName?: string(name='BackupLogName'),
      backupLogSize?: string(name='BackupLogSize'),
      backupLogStartTime?: string(name='BackupLogStartTime'),
      downloadLink?: string(name='DownloadLink'),
      intranetDownloadLink?: string(name='IntranetDownloadLink'),
      linkExpiredTime?: string(name='LinkExpiredTime'),
    }
  ](name='BackupLog')
  }(name='Items'),
  pageNumber?: string(name='PageNumber'),
  pageRecordCount?: string(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  totalRecordCount?: string(name='TotalRecordCount'),
}

model DescribeBackupLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupLogsResponseBody(name='body'),
}

async function describeBackupLogs(request: DescribeBackupLogsRequest): DescribeBackupLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupPolicyRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeBackupPolicyResponseBody = {
  backupFrequency?: string(name='BackupFrequency'),
  backupRetentionPolicyOnClusterDeletion?: string(name='BackupRetentionPolicyOnClusterDeletion'),
  dataLevel1BackupFrequency?: string(name='DataLevel1BackupFrequency'),
  dataLevel1BackupPeriod?: string(name='DataLevel1BackupPeriod'),
  dataLevel1BackupRetentionPeriod?: string(name='DataLevel1BackupRetentionPeriod'),
  dataLevel1BackupTime?: string(name='DataLevel1BackupTime'),
  dataLevel2BackupAnotherRegionRegion?: string(name='DataLevel2BackupAnotherRegionRegion'),
  dataLevel2BackupAnotherRegionRetentionPeriod?: string(name='DataLevel2BackupAnotherRegionRetentionPeriod'),
  dataLevel2BackupPeriod?: string(name='DataLevel2BackupPeriod'),
  dataLevel2BackupRetentionPeriod?: string(name='DataLevel2BackupRetentionPeriod'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
  preferredNextBackupTime?: string(name='PreferredNextBackupTime'),
  requestId?: string(name='RequestId'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupTasksRequest {
  backupJobId?: string(name='BackupJobId', position='Query'),
  backupMode?: string(name='BackupMode', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeBackupTasksResponseBody = {
  items?: {
    backupJob?: [ 
    {
      backupJobId?: string(name='BackupJobId'),
      backupProgressStatus?: string(name='BackupProgressStatus'),
      jobMode?: string(name='JobMode'),
      process?: string(name='Process'),
      startTime?: string(name='StartTime'),
      taskAction?: string(name='TaskAction'),
    }
  ](name='BackupJob')
  }(name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeBackupTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupTasksResponseBody(name='body'),
}

async function describeBackupTasks(request: DescribeBackupTasksRequest): DescribeBackupTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupsRequest {
  backupId?: string(name='BackupId', position='Query'),
  backupMode?: string(name='BackupMode', position='Query'),
  backupRegion?: string(name='BackupRegion', position='Query'),
  backupStatus?: string(name='BackupStatus', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', minimum=30, maximum=100, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeBackupsResponseBody = {
  items?: {
    backup?: [ 
    {
      backupEndTime?: string(name='BackupEndTime'),
      backupId?: string(name='BackupId'),
      backupMethod?: string(name='BackupMethod'),
      backupMode?: string(name='BackupMode'),
      backupSetSize?: string(name='BackupSetSize'),
      backupStartTime?: string(name='BackupStartTime'),
      backupStatus?: string(name='BackupStatus'),
      backupType?: string(name='BackupType'),
      backupsLevel?: string(name='BackupsLevel'),
      consistentTime?: string(name='ConsistentTime'),
      DBClusterId?: string(name='DBClusterId'),
      isAvail?: string(name='IsAvail'),
    }
  ](name='Backup')
  }(name='Items'),
  pageNumber?: string(name='PageNumber'),
  pageRecordCount?: string(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  totalRecordCount?: string(name='TotalRecordCount'),
}

model DescribeBackupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupsResponseBody(name='body'),
}

async function describeBackups(request: DescribeBackupsRequest): DescribeBackupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCharacterSetNameRequest {
  DBClusterId?: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeCharacterSetNameResponseBody = {
  characterSetNameItems?: {
    characterSetName?: [ string ](name='CharacterSetName')
  }(name='CharacterSetNameItems'),
  engine?: string(name='Engine'),
  requestId?: string(name='RequestId'),
}

model DescribeCharacterSetNameResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCharacterSetNameResponseBody(name='body'),
}

async function describeCharacterSetName(request: DescribeCharacterSetNameRequest): DescribeCharacterSetNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCharacterSetName', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterAccessWhitelistRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBClusterAccessWhitelistResponseBody = {
  DBClusterSecurityGroups?: {
    DBClusterSecurityGroup?: [ 
    {
      securityGroupId?: string(name='SecurityGroupId'),
      securityGroupName?: string(name='SecurityGroupName'),
    }
  ](name='DBClusterSecurityGroup')
  }(name='DBClusterSecurityGroups'),
  items?: {
    DBClusterIPArray?: [ 
    {
      DBClusterIPArrayAttribute?: string(name='DBClusterIPArrayAttribute'),
      DBClusterIPArrayName?: string(name='DBClusterIPArrayName'),
      securityIps?: string(name='SecurityIps'),
    }
  ](name='DBClusterIPArray')
  }(name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeDBClusterAccessWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterAccessWhitelistResponseBody(name='body'),
}

async function describeDBClusterAccessWhitelist(request: DescribeDBClusterAccessWhitelistRequest): DescribeDBClusterAccessWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterAccessWhitelist', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterAttributeRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBClusterAttributeResponseBody = {
  blktagTotal?: long(name='BlktagTotal'),
  blktagUsed?: long(name='BlktagUsed'),
  category?: string(name='Category'),
  creationTime?: string(name='CreationTime'),
  DBClusterDescription?: string(name='DBClusterDescription'),
  DBClusterId?: string(name='DBClusterId'),
  DBClusterNetworkType?: string(name='DBClusterNetworkType'),
  DBClusterStatus?: string(name='DBClusterStatus'),
  DBNodes?: [ 
    {
      addedCpuCores?: string(name='AddedCpuCores'),
      creationTime?: string(name='CreationTime'),
      DBNodeClass?: string(name='DBNodeClass'),
      DBNodeId?: string(name='DBNodeId'),
      DBNodeRole?: string(name='DBNodeRole'),
      DBNodeStatus?: string(name='DBNodeStatus'),
      failoverPriority?: int32(name='FailoverPriority'),
      hotReplicaMode?: string(name='HotReplicaMode'),
      imciSwitch?: string(name='ImciSwitch'),
      masterId?: string(name='MasterId'),
      maxConnections?: int32(name='MaxConnections'),
      maxIOPS?: int32(name='MaxIOPS'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DBNodes'),
  DBType?: string(name='DBType'),
  DBVersion?: string(name='DBVersion'),
  DBVersionStatus?: string(name='DBVersionStatus'),
  dataLevel1BackupChainSize?: long(name='DataLevel1BackupChainSize'),
  deletionLock?: int32(name='DeletionLock'),
  engine?: string(name='Engine'),
  expireTime?: string(name='ExpireTime'),
  expired?: string(name='Expired'),
  inodeTotal?: long(name='InodeTotal'),
  inodeUsed?: long(name='InodeUsed'),
  isLatestVersion?: boolean(name='IsLatestVersion'),
  isProxyLatestVersion?: boolean(name='IsProxyLatestVersion'),
  lockMode?: string(name='LockMode'),
  maintainTime?: string(name='MaintainTime'),
  payType?: string(name='PayType'),
  proxyCpuCores?: string(name='ProxyCpuCores'),
  proxyStandardCpuCores?: string(name='ProxyStandardCpuCores'),
  proxyStatus?: string(name='ProxyStatus'),
  proxyType?: string(name='ProxyType'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  SQLSize?: long(name='SQLSize'),
  storageMax?: long(name='StorageMax'),
  storagePayType?: string(name='StoragePayType'),
  storageSpace?: long(name='StorageSpace'),
  storageType?: string(name='StorageType'),
  storageUsed?: long(name='StorageUsed'),
  subCategory?: string(name='SubCategory'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
  zoneIds?: string(name='ZoneIds'),
}

model DescribeDBClusterAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterAttributeResponseBody(name='body'),
}

async function describeDBClusterAttribute(request: DescribeDBClusterAttributeRequest): DescribeDBClusterAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterAuditLogCollectorRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBClusterAuditLogCollectorResponseBody = {
  collectorStatus?: string(name='CollectorStatus'),
  requestId?: string(name='RequestId'),
}

model DescribeDBClusterAuditLogCollectorResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterAuditLogCollectorResponseBody(name='body'),
}

async function describeDBClusterAuditLogCollector(request: DescribeDBClusterAuditLogCollectorRequest): DescribeDBClusterAuditLogCollectorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterAuditLogCollector', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterAvailableResourcesRequest {
  DBNodeClass?: string(name='DBNodeClass', position='Query'),
  DBType?: string(name='DBType', position='Query'),
  DBVersion?: string(name='DBVersion', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  payType: string(name='PayType', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model DescribeDBClusterAvailableResourcesResponseBody = {
  availableZones?: [ 
    {
      regionId?: string(name='RegionId'),
      supportedEngines?: [ 
        {
          availableResources?: [ 
            {
              category?: string(name='Category'),
              DBNodeClass?: string(name='DBNodeClass'),
            }
          ](name='AvailableResources'),
          engine?: string(name='Engine'),
        }
      ](name='SupportedEngines'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='AvailableZones'),
  requestId?: string(name='RequestId'),
}

model DescribeDBClusterAvailableResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterAvailableResourcesResponseBody(name='body'),
}

async function describeDBClusterAvailableResources(request: DescribeDBClusterAvailableResourcesRequest): DescribeDBClusterAvailableResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterAvailableResources', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterEndpointsRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBEndpointId?: string(name='DBEndpointId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBClusterEndpointsResponseBody = {
  items?: [ 
    {
      addressItems?: [ 
        {
          connectionString?: string(name='ConnectionString'),
          IPAddress?: string(name='IPAddress'),
          netType?: string(name='NetType'),
          port?: string(name='Port'),
          privateZoneConnectionString?: string(name='PrivateZoneConnectionString'),
          VPCId?: string(name='VPCId'),
          vSwitchId?: string(name='VSwitchId'),
          vpcInstanceId?: string(name='VpcInstanceId'),
        }
      ](name='AddressItems'),
      autoAddNewNodes?: string(name='AutoAddNewNodes'),
      DBEndpointDescription?: string(name='DBEndpointDescription'),
      DBEndpointId?: string(name='DBEndpointId'),
      endpointConfig?: string(name='EndpointConfig'),
      endpointType?: string(name='EndpointType'),
      nodeWithRoles?: string(name='NodeWithRoles'),
      nodes?: string(name='Nodes'),
      readWriteMode?: string(name='ReadWriteMode'),
    }
  ](name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeDBClusterEndpointsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterEndpointsResponseBody(name='body'),
}

async function describeDBClusterEndpoints(request: DescribeDBClusterEndpointsRequest): DescribeDBClusterEndpointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterEndpoints', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterMigrationRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBClusterMigrationResponseBody = {
  comment?: string(name='Comment'),
  DBClusterEndpointList?: [ 
    {
      addressItems?: [ 
        {
          connectionString?: string(name='ConnectionString'),
          IPAddress?: string(name='IPAddress'),
          netType?: string(name='NetType'),
          port?: string(name='Port'),
          VPCId?: string(name='VPCId'),
          vSwitchId?: string(name='VSwitchId'),
        }
      ](name='AddressItems'),
      DBEndpointId?: string(name='DBEndpointId'),
      endpointType?: string(name='EndpointType'),
    }
  ](name='DBClusterEndpointList'),
  DBClusterId?: string(name='DBClusterId'),
  DBClusterReadWriteMode?: string(name='DBClusterReadWriteMode'),
  delayedSeconds?: int32(name='DelayedSeconds'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  expiredTime?: string(name='ExpiredTime'),
  migrationStatus?: string(name='MigrationStatus'),
  rdsEndpointList?: [ 
    {
      addressItems?: [ 
        {
          connectionString?: string(name='ConnectionString'),
          IPAddress?: string(name='IPAddress'),
          netType?: string(name='NetType'),
          port?: string(name='Port'),
          VPCId?: string(name='VPCId'),
          vSwitchId?: string(name='VSwitchId'),
        }
      ](name='AddressItems'),
      DBEndpointId?: string(name='DBEndpointId'),
      endpointType?: string(name='EndpointType'),
    }
  ](name='RdsEndpointList'),
  rdsReadWriteMode?: string(name='RdsReadWriteMode'),
  requestId?: string(name='RequestId'),
  sourceRDSDBInstanceId?: string(name='SourceRDSDBInstanceId'),
  topologies?: string(name='Topologies'),
}

model DescribeDBClusterMigrationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterMigrationResponseBody(name='body'),
}

async function describeDBClusterMigration(request: DescribeDBClusterMigrationRequest): DescribeDBClusterMigrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterMigration', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterMonitorRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBClusterMonitorResponseBody = {
  period?: string(name='Period'),
  requestId?: string(name='RequestId'),
}

model DescribeDBClusterMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterMonitorResponseBody(name='body'),
}

async function describeDBClusterMonitor(request: DescribeDBClusterMonitorRequest): DescribeDBClusterMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterMonitor', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterParametersRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBClusterParametersResponseBody = {
  DBType?: string(name='DBType'),
  DBVersion?: string(name='DBVersion'),
  engine?: string(name='Engine'),
  requestId?: string(name='RequestId'),
  runningParameters?: {
    parameter?: [ 
    {
      checkingCode?: string(name='CheckingCode'),
      dataType?: string(name='DataType'),
      defaultParameterValue?: string(name='DefaultParameterValue'),
      factor?: string(name='Factor'),
      forceRestart?: boolean(name='ForceRestart'),
      isModifiable?: boolean(name='IsModifiable'),
      isNodeAvailable?: string(name='IsNodeAvailable'),
      paramRelyRule?: string(name='ParamRelyRule'),
      parameterDescription?: string(name='ParameterDescription'),
      parameterName?: string(name='ParameterName'),
      parameterStatus?: string(name='ParameterStatus'),
      parameterValue?: string(name='ParameterValue'),
    }
  ](name='Parameter')
  }(name='RunningParameters'),
}

model DescribeDBClusterParametersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterParametersResponseBody(name='body'),
}

async function describeDBClusterParameters(request: DescribeDBClusterParametersRequest): DescribeDBClusterParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterParameters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterPerformanceRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  key: string(name='Key', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeDBClusterPerformanceResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  DBType?: string(name='DBType'),
  DBVersion?: string(name='DBVersion'),
  endTime?: string(name='EndTime'),
  performanceKeys?: {
    performanceItem?: [ 
    {
      DBNodeId?: string(name='DBNodeId'),
      measurement?: string(name='Measurement'),
      metricName?: string(name='MetricName'),
      points?: {
        performanceItemValue?: [ 
        {
          timestamp?: long(name='Timestamp'),
          value?: string(name='Value'),
        }
      ](name='PerformanceItemValue')
      }(name='Points'),
    }
  ](name='PerformanceItem')
  }(name='PerformanceKeys'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDBClusterPerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterPerformanceResponseBody(name='body'),
}

async function describeDBClusterPerformance(request: DescribeDBClusterPerformanceRequest): DescribeDBClusterPerformanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterPerformance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterSSLRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBClusterSSLResponseBody = {
  items?: [ 
    {
      DBEndpointId?: string(name='DBEndpointId'),
      SSLConnectionString?: string(name='SSLConnectionString'),
      SSLEnabled?: string(name='SSLEnabled'),
      SSLExpireTime?: string(name='SSLExpireTime'),
    }
  ](name='Items'),
  requestId?: string(name='RequestId'),
  SSLAutoRotate?: string(name='SSLAutoRotate'),
}

model DescribeDBClusterSSLResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterSSLResponseBody(name='body'),
}

async function describeDBClusterSSL(request: DescribeDBClusterSSLRequest): DescribeDBClusterSSLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterSSL', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterTDERequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBClusterTDEResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  encryptNewTables?: string(name='EncryptNewTables'),
  encryptionKey?: string(name='EncryptionKey'),
  requestId?: string(name='RequestId'),
  TDEStatus?: string(name='TDEStatus'),
}

model DescribeDBClusterTDEResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterTDEResponseBody(name='body'),
}

async function describeDBClusterTDE(request: DescribeDBClusterTDERequest): DescribeDBClusterTDEResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterTDE', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterVersionRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBClusterVersionResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  DBLatestVersion?: string(name='DBLatestVersion'),
  DBMinorVersion?: string(name='DBMinorVersion'),
  DBRevisionVersion?: string(name='DBRevisionVersion'),
  DBVersion?: string(name='DBVersion'),
  DBVersionStatus?: string(name='DBVersionStatus'),
  isLatestVersion?: string(name='IsLatestVersion'),
  isProxyLatestVersion?: string(name='IsProxyLatestVersion'),
  proxyLatestVersion?: string(name='ProxyLatestVersion'),
  proxyRevisionVersion?: string(name='ProxyRevisionVersion'),
  proxyVersionStatus?: string(name='ProxyVersionStatus'),
  requestId?: string(name='RequestId'),
}

model DescribeDBClusterVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterVersionResponseBody(name='body'),
}

async function describeDBClusterVersion(request: DescribeDBClusterVersionRequest): DescribeDBClusterVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterVersion', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClustersRequest {
  DBClusterDescription?: string(name='DBClusterDescription', position='Query'),
  DBClusterIds?: string(name='DBClusterIds', position='Query'),
  DBClusterStatus?: string(name='DBClusterStatus', position='Query'),
  DBNodeIds?: string(name='DBNodeIds', position='Query'),
  DBType?: string(name='DBType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  payType?: string(name='PayType', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeDBClustersResponseBody = {
  items?: {
    DBCluster?: [ 
    {
      category?: string(name='Category'),
      createTime?: string(name='CreateTime'),
      DBClusterDescription?: string(name='DBClusterDescription'),
      DBClusterId?: string(name='DBClusterId'),
      DBClusterNetworkType?: string(name='DBClusterNetworkType'),
      DBClusterStatus?: string(name='DBClusterStatus'),
      DBNodeClass?: string(name='DBNodeClass'),
      DBNodeNumber?: int32(name='DBNodeNumber'),
      DBNodes?: {
        DBNode?: [ 
        {
          DBNodeClass?: string(name='DBNodeClass'),
          DBNodeId?: string(name='DBNodeId'),
          DBNodeRole?: string(name='DBNodeRole'),
          regionId?: string(name='RegionId'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='DBNode')
      }(name='DBNodes'),
      DBType?: string(name='DBType'),
      DBVersion?: string(name='DBVersion'),
      deletionLock?: int32(name='DeletionLock'),
      engine?: string(name='Engine'),
      expireTime?: string(name='ExpireTime'),
      expired?: string(name='Expired'),
      lockMode?: string(name='LockMode'),
      payType?: string(name='PayType'),
      regionId?: string(name='RegionId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      storagePayType?: string(name='StoragePayType'),
      storageSpace?: long(name='StorageSpace'),
      storageUsed?: long(name='StorageUsed'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DBCluster')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeDBClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClustersResponseBody(name='body'),
}

async function describeDBClusters(request: DescribeDBClustersRequest): DescribeDBClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClustersWithBackupsRequest {
  DBClusterDescription?: string(name='DBClusterDescription', position='Query'),
  DBClusterIds?: string(name='DBClusterIds', position='Query'),
  DBType?: string(name='DBType', position='Query'),
  DBVersion?: string(name='DBVersion', position='Query'),
  isDeleted?: int32(name='IsDeleted', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBClustersWithBackupsResponseBody = {
  items?: {
    DBCluster?: [ 
    {
      createTime?: string(name='CreateTime'),
      DBClusterDescription?: string(name='DBClusterDescription'),
      DBClusterId?: string(name='DBClusterId'),
      DBClusterNetworkType?: string(name='DBClusterNetworkType'),
      DBClusterStatus?: string(name='DBClusterStatus'),
      DBNodeClass?: string(name='DBNodeClass'),
      DBType?: string(name='DBType'),
      DBVersion?: string(name='DBVersion'),
      deletedTime?: string(name='DeletedTime'),
      deletionLock?: int32(name='DeletionLock'),
      engine?: string(name='Engine'),
      expireTime?: string(name='ExpireTime'),
      expired?: string(name='Expired'),
      isDeleted?: int32(name='IsDeleted'),
      lockMode?: string(name='LockMode'),
      payType?: string(name='PayType'),
      regionId?: string(name='RegionId'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DBCluster')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeDBClustersWithBackupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClustersWithBackupsResponseBody(name='body'),
}

async function describeDBClustersWithBackups(request: DescribeDBClustersWithBackupsRequest): DescribeDBClustersWithBackupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClustersWithBackups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInitializeVariableRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBInitializeVariableResponseBody = {
  DBType?: string(name='DBType'),
  DBVersion?: string(name='DBVersion'),
  requestId?: string(name='RequestId'),
  variables?: {
    variable?: [ 
    {
      charset?: string(name='Charset'),
      collate?: string(name='Collate'),
      ctype?: string(name='Ctype'),
    }
  ](name='Variable')
  }(name='Variables'),
}

model DescribeDBInitializeVariableResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInitializeVariableResponseBody(name='body'),
}

async function describeDBInitializeVariable(request: DescribeDBInitializeVariableRequest): DescribeDBInitializeVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInitializeVariable', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBLinksRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBLinkName?: string(name='DBLinkName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBLinksResponseBody = {
  DBInstanceName?: string(name='DBInstanceName'),
  DBLinkInfos?: [ 
    {
      DBInstanceName?: string(name='DBInstanceName'),
      DBLinkName?: string(name='DBLinkName'),
      sourceDBName?: string(name='SourceDBName'),
      targetAccount?: string(name='TargetAccount'),
      targetDBInstanceName?: string(name='TargetDBInstanceName'),
      targetDBName?: string(name='TargetDBName'),
    }
  ](name='DBLinkInfos'),
  requestId?: string(name='RequestId'),
}

model DescribeDBLinksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBLinksResponseBody(name='body'),
}

async function describeDBLinks(request: DescribeDBLinksRequest): DescribeDBLinksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBLinks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBNodePerformanceRequest {
  DBClusterId?: string(name='DBClusterId', position='Query'),
  DBNodeId: string(name='DBNodeId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  key: string(name='Key', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeDBNodePerformanceResponseBody = {
  DBNodeId?: string(name='DBNodeId'),
  DBType?: string(name='DBType'),
  DBVersion?: string(name='DBVersion'),
  endTime?: string(name='EndTime'),
  performanceKeys?: {
    performanceItem?: [ 
    {
      measurement?: string(name='Measurement'),
      metricName?: string(name='MetricName'),
      points?: {
        performanceItemValue?: [ 
        {
          timestamp?: long(name='Timestamp'),
          value?: string(name='Value'),
        }
      ](name='PerformanceItemValue')
      }(name='Points'),
    }
  ](name='PerformanceItem')
  }(name='PerformanceKeys'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDBNodePerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBNodePerformanceResponseBody(name='body'),
}

async function describeDBNodePerformance(request: DescribeDBNodePerformanceRequest): DescribeDBNodePerformanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBNodePerformance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBNodesParametersRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBNodeIds: string(name='DBNodeIds', description='查询指定节点的参数列表', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBNodesParametersResponseBody = {
  DBNodeIds?: [ 
    {
      DBNodeId?: string(name='DBNodeId'),
      runningParameters?: [ 
        {
          checkingCode?: string(name='CheckingCode'),
          dataType?: string(name='DataType'),
          defaultParameterValue?: string(name='DefaultParameterValue'),
          factor?: string(name='Factor'),
          forceRestart?: boolean(name='ForceRestart'),
          isModifiable?: boolean(name='IsModifiable'),
          isNodeAvailable?: string(name='IsNodeAvailable'),
          paramRelyRule?: string(name='ParamRelyRule'),
          parameterDescription?: string(name='ParameterDescription'),
          parameterName?: string(name='ParameterName'),
          parameterStatus?: string(name='ParameterStatus'),
          parameterValue?: string(name='ParameterValue'),
        }
      ](name='RunningParameters'),
    }
  ](name='DBNodeIds'),
  DBType?: string(name='DBType'),
  DBVersion?: string(name='DBVersion'),
  engine?: string(name='Engine'),
  requestId?: string(name='RequestId'),
}

model DescribeDBNodesParametersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBNodesParametersResponseBody(name='body'),
}

async function describeDBNodesParameters(request: DescribeDBNodesParametersRequest): DescribeDBNodesParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBNodesParameters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBProxyPerformanceRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  key: string(name='Key', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeDBProxyPerformanceResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  DBType?: string(name='DBType'),
  DBVersion?: string(name='DBVersion'),
  endTime?: string(name='EndTime'),
  performanceKeys?: {
    performanceItem?: [ 
    {
      DBNodeId?: string(name='DBNodeId'),
      measurement?: string(name='Measurement'),
      metricName?: string(name='MetricName'),
      points?: {
        performanceItemValue?: [ 
        {
          timestamp?: long(name='Timestamp'),
          value?: string(name='Value'),
        }
      ](name='PerformanceItemValue')
      }(name='Points'),
    }
  ](name='PerformanceItem')
  }(name='PerformanceKeys'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDBProxyPerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBProxyPerformanceResponseBody(name='body'),
}

async function describeDBProxyPerformance(request: DescribeDBProxyPerformanceRequest): DescribeDBProxyPerformanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBProxyPerformance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDatabasesRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBName?: string(name='DBName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDatabasesResponseBody = {
  databases?: {
    database?: [ 
    {
      accounts?: {
        account?: [ 
        {
          accountName?: string(name='AccountName'),
          accountPrivilege?: string(name='AccountPrivilege'),
          accountStatus?: string(name='AccountStatus'),
          privilegeStatus?: string(name='PrivilegeStatus'),
        }
      ](name='Account')
      }(name='Accounts'),
      characterSetName?: string(name='CharacterSetName'),
      DBDescription?: string(name='DBDescription'),
      DBName?: string(name='DBName'),
      DBStatus?: string(name='DBStatus'),
      engine?: string(name='Engine'),
    }
  ](name='Database')
  }(name='Databases'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
}

model DescribeDatabasesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDatabasesResponseBody(name='body'),
}

async function describeDatabases(request: DescribeDatabasesRequest): DescribeDatabasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDatabases', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDetachedBackupsRequest {
  backupId?: string(name='BackupId', position='Query'),
  backupMode?: string(name='BackupMode', position='Query'),
  backupRegion?: string(name='BackupRegion', position='Query'),
  backupStatus?: string(name='BackupStatus', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', minimum=30, maximum=100, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeDetachedBackupsResponseBody = {
  items?: {
    backup?: [ 
    {
      backupEndTime?: string(name='BackupEndTime'),
      backupId?: string(name='BackupId'),
      backupMethod?: string(name='BackupMethod'),
      backupMode?: string(name='BackupMode'),
      backupSetSize?: string(name='BackupSetSize'),
      backupStartTime?: string(name='BackupStartTime'),
      backupStatus?: string(name='BackupStatus'),
      backupType?: string(name='BackupType'),
      backupsLevel?: string(name='BackupsLevel'),
      consistentTime?: string(name='ConsistentTime'),
      DBClusterId?: string(name='DBClusterId'),
      isAvail?: string(name='IsAvail'),
      storeStatus?: string(name='StoreStatus'),
    }
  ](name='Backup')
  }(name='Items'),
  pageNumber?: string(name='PageNumber'),
  pageRecordCount?: string(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  totalRecordCount?: string(name='TotalRecordCount'),
}

model DescribeDetachedBackupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDetachedBackupsResponseBody(name='body'),
}

async function describeDetachedBackups(request: DescribeDetachedBackupsRequest): DescribeDetachedBackupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDetachedBackups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGlobalDatabaseNetworkRequest {
  GDNId: string(name='GDNId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGlobalDatabaseNetworkResponseBody = {
  connections?: [ 
    {
      connectionString?: string(name='ConnectionString'),
      netType?: string(name='NetType'),
      port?: string(name='Port'),
    }
  ](name='Connections'),
  createTime?: string(name='CreateTime'),
  DBClusters?: [ 
    {
      DBClusterDescription?: string(name='DBClusterDescription'),
      DBClusterId?: string(name='DBClusterId'),
      DBClusterStatus?: string(name='DBClusterStatus'),
      DBNodeClass?: string(name='DBNodeClass'),
      DBNodes?: [ 
        {
          creationTime?: string(name='CreationTime'),
          DBNodeClass?: string(name='DBNodeClass'),
          DBNodeId?: string(name='DBNodeId'),
          DBNodeRole?: string(name='DBNodeRole'),
          DBNodeStatus?: string(name='DBNodeStatus'),
          failoverPriority?: int32(name='FailoverPriority'),
          maxConnections?: int32(name='MaxConnections'),
          maxIOPS?: int32(name='MaxIOPS'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='DBNodes'),
      DBType?: string(name='DBType'),
      DBVersion?: string(name='DBVersion'),
      expireTime?: string(name='ExpireTime'),
      expired?: string(name='Expired'),
      payType?: string(name='PayType'),
      regionId?: string(name='RegionId'),
      replicaLag?: string(name='ReplicaLag'),
      role?: string(name='Role'),
      storageUsed?: string(name='StorageUsed'),
    }
  ](name='DBClusters'),
  DBType?: string(name='DBType'),
  DBVersion?: string(name='DBVersion'),
  GDNDescription?: string(name='GDNDescription'),
  GDNId?: string(name='GDNId'),
  GDNStatus?: string(name='GDNStatus'),
  requestId?: string(name='RequestId'),
}

model DescribeGlobalDatabaseNetworkResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGlobalDatabaseNetworkResponseBody(name='body'),
}

async function describeGlobalDatabaseNetwork(request: DescribeGlobalDatabaseNetworkRequest): DescribeGlobalDatabaseNetworkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGlobalDatabaseNetwork', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGlobalDatabaseNetworksRequest {
  DBClusterId?: string(name='DBClusterId', position='Query'),
  GDNDescription?: string(name='GDNDescription', position='Query'),
  GDNId?: string(name='GDNId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGlobalDatabaseNetworksResponseBody = {
  items?: [ 
    {
      createTime?: string(name='CreateTime'),
      DBClusters?: [ 
        {
          DBClusterId?: string(name='DBClusterId'),
          regionId?: string(name='RegionId'),
          role?: string(name='Role'),
        }
      ](name='DBClusters'),
      DBType?: string(name='DBType'),
      DBVersion?: string(name='DBVersion'),
      GDNDescription?: string(name='GDNDescription'),
      GDNId?: string(name='GDNId'),
      GDNStatus?: string(name='GDNStatus'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeGlobalDatabaseNetworksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGlobalDatabaseNetworksResponseBody(name='body'),
}

async function describeGlobalDatabaseNetworks(request: DescribeGlobalDatabaseNetworksRequest): DescribeGlobalDatabaseNetworksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGlobalDatabaseNetworks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLogBackupPolicyRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeLogBackupPolicyResponseBody = {
  enableBackupLog?: int32(name='EnableBackupLog'),
  logBackupAnotherRegionRegion?: string(name='LogBackupAnotherRegionRegion'),
  logBackupAnotherRegionRetentionPeriod?: string(name='LogBackupAnotherRegionRetentionPeriod'),
  logBackupRetentionPeriod?: int32(name='LogBackupRetentionPeriod'),
  requestId?: string(name='RequestId'),
}

model DescribeLogBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLogBackupPolicyResponseBody(name='body'),
}

async function describeLogBackupPolicy(request: DescribeLogBackupPolicyRequest): DescribeLogBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMaskingRulesRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ruleNameList?: string(name='RuleNameList', position='Query'),
}

model DescribeMaskingRulesResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  data?: {
    ruleList?: [ string ](name='RuleList'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model DescribeMaskingRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMaskingRulesResponseBody(name='body'),
}

async function describeMaskingRules(request: DescribeMaskingRulesRequest): DescribeMaskingRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMaskingRules', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMetaListRequest {
  backupId?: string(name='BackupId', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  getDbName?: string(name='GetDbName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  restoreTime?: string(name='RestoreTime', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeMetaListResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  items?: [ 
    {
      database?: string(name='Database'),
      tables?: [ string ](name='Tables'),
    }
  ](name='Items'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalPageCount?: string(name='TotalPageCount'),
  totalRecordCount?: string(name='TotalRecordCount'),
}

model DescribeMetaListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMetaListResponseBody(name='body'),
}

async function describeMetaList(request: DescribeMetaListRequest): DescribeMetaListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMetaList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeParameterGroupRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parameterGroupId: string(name='ParameterGroupId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeParameterGroupResponseBody = {
  parameterGroup?: [ 
    {
      createTime?: string(name='CreateTime'),
      DBType?: string(name='DBType'),
      DBVersion?: string(name='DBVersion'),
      forceRestart?: string(name='ForceRestart'),
      parameterCounts?: int32(name='ParameterCounts'),
      parameterDetail?: [ 
        {
          paramName?: string(name='ParamName'),
          paramValue?: string(name='ParamValue'),
        }
      ](name='ParameterDetail'),
      parameterGroupDesc?: string(name='ParameterGroupDesc'),
      parameterGroupId?: string(name='ParameterGroupId'),
      parameterGroupName?: string(name='ParameterGroupName'),
      parameterGroupType?: string(name='ParameterGroupType'),
    }
  ](name='ParameterGroup'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeParameterGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParameterGroupResponseBody(name='body'),
}

async function describeParameterGroup(request: DescribeParameterGroupRequest): DescribeParameterGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParameterGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeParameterGroupsRequest {
  DBType?: string(name='DBType', position='Query'),
  DBVersion?: string(name='DBVersion', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeParameterGroupsResponseBody = {
  parameterGroups?: [ 
    {
      createTime?: string(name='CreateTime'),
      DBType?: string(name='DBType'),
      DBVersion?: string(name='DBVersion'),
      forceRestart?: string(name='ForceRestart'),
      parameterCounts?: long(name='ParameterCounts'),
      parameterGroupDesc?: string(name='ParameterGroupDesc'),
      parameterGroupId?: string(name='ParameterGroupId'),
      parameterGroupName?: string(name='ParameterGroupName'),
      parameterGroupType?: string(name='ParameterGroupType'),
    }
  ](name='ParameterGroups'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeParameterGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParameterGroupsResponseBody(name='body'),
}

async function describeParameterGroups(request: DescribeParameterGroupsRequest): DescribeParameterGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParameterGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeParameterTemplatesRequest {
  DBType: string(name='DBType', position='Query'),
  DBVersion: string(name='DBVersion', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeParameterTemplatesResponseBody = {
  DBType?: string(name='DBType'),
  DBVersion?: string(name='DBVersion'),
  engine?: string(name='Engine'),
  parameterCount?: string(name='ParameterCount'),
  parameters?: {
    templateRecord?: [ 
    {
      checkingCode?: string(name='CheckingCode'),
      forceModify?: string(name='ForceModify'),
      forceRestart?: string(name='ForceRestart'),
      isNodeAvailable?: string(name='IsNodeAvailable'),
      paramRelyRule?: string(name='ParamRelyRule'),
      parameterDescription?: string(name='ParameterDescription'),
      parameterName?: string(name='ParameterName'),
      parameterValue?: string(name='ParameterValue'),
    }
  ](name='TemplateRecord')
  }(name='Parameters'),
  requestId?: string(name='RequestId'),
}

model DescribeParameterTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParameterTemplatesResponseBody(name='body'),
}

async function describeParameterTemplates(request: DescribeParameterTemplatesRequest): DescribeParameterTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParameterTemplates', 'POST', '/', 'json', false, 'json', request);
}

model DescribePendingMaintenanceActionRequest {
  isHistory?: int32(name='IsHistory', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', minimum=10, maximum=100, position='Query'),
  region: string(name='Region', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  taskType: string(name='TaskType', position='Query'),
}

model DescribePendingMaintenanceActionResponseBody = {
  items?: [ 
    {
      createdTime?: string(name='CreatedTime'),
      DBClusterId?: string(name='DBClusterId'),
      DBType?: string(name='DBType'),
      DBVersion?: string(name='DBVersion'),
      deadline?: string(name='Deadline'),
      id?: int32(name='Id'),
      modifiedTime?: string(name='ModifiedTime'),
      prepareInterval?: string(name='PrepareInterval'),
      region?: string(name='Region'),
      resultInfo?: string(name='ResultInfo'),
      startTime?: string(name='StartTime'),
      status?: int32(name='Status'),
      switchTime?: string(name='SwitchTime'),
      taskType?: string(name='TaskType'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribePendingMaintenanceActionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePendingMaintenanceActionResponseBody(name='body'),
}

async function describePendingMaintenanceAction(request: DescribePendingMaintenanceActionRequest): DescribePendingMaintenanceActionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePendingMaintenanceAction', 'POST', '/', 'json', false, 'json', request);
}

model DescribePendingMaintenanceActionsRequest {
  isHistory?: int32(name='IsHistory', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribePendingMaintenanceActionsResponseBody = {
  requestId?: string(name='RequestId'),
  typeList?: [ 
    {
      count?: int32(name='Count'),
      taskType?: string(name='TaskType'),
    }
  ](name='TypeList'),
}

model DescribePendingMaintenanceActionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePendingMaintenanceActionsResponseBody(name='body'),
}

async function describePendingMaintenanceActions(request: DescribePendingMaintenanceActionsRequest): DescribePendingMaintenanceActionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePendingMaintenanceActions', 'POST', '/', 'json', false, 'json', request);
}

model DescribePolarSQLCollectorPolicyRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribePolarSQLCollectorPolicyResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  requestId?: string(name='RequestId'),
  SQLCollectorStatus?: string(name='SQLCollectorStatus'),
}

model DescribePolarSQLCollectorPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePolarSQLCollectorPolicyResponseBody(name='body'),
}

async function describePolarSQLCollectorPolicy(request: DescribePolarSQLCollectorPolicyRequest): DescribePolarSQLCollectorPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePolarSQLCollectorPolicy', 'GET', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      regionId?: string(name='RegionId'),
      zones?: {
        zone?: [ 
        {
          vpcEnabled?: boolean(name='VpcEnabled'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='Zone')
      }(name='Zones'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScheduleTasksRequest {
  DBClusterDescription?: string(name='DBClusterDescription', position='Query'),
  DBClusterId?: string(name='DBClusterId', position='Query'),
  orderId?: string(name='OrderId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  plannedEndTime?: string(name='PlannedEndTime', position='Query'),
  plannedStartTime?: string(name='PlannedStartTime', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', position='Query'),
  taskAction?: string(name='TaskAction', position='Query'),
}

model DescribeScheduleTasksResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    timerInfos?: [ 
      {
        action?: string(name='Action'),
        DBClusterId?: string(name='DBClusterId'),
        dbClusterDescription?: string(name='DbClusterDescription'),
        dbClusterStatus?: string(name='DbClusterStatus'),
        orderId?: string(name='OrderId'),
        plannedEndTime?: string(name='PlannedEndTime'),
        plannedStartTime?: string(name='PlannedStartTime'),
        plannedTime?: string(name='PlannedTime'),
        region?: string(name='Region'),
        status?: string(name='Status'),
        taskCancel?: boolean(name='TaskCancel'),
        taskId?: string(name='TaskId'),
      }
    ](name='TimerInfos'),
    totalRecordCount?: int32(name='TotalRecordCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeScheduleTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScheduleTasksResponseBody(name='body'),
}

async function describeScheduleTasks(request: DescribeScheduleTasksRequest): DescribeScheduleTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScheduleTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlowLogRecordsRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBName?: string(name='DBName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', minimum=30, maximum=100, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  SQLHASH?: string(name='SQLHASH', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeSlowLogRecordsResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  engine?: string(name='Engine'),
  items?: {
    SQLSlowRecord?: [ 
    {
      DBName?: string(name='DBName'),
      DBNodeId?: string(name='DBNodeId'),
      executionStartTime?: string(name='ExecutionStartTime'),
      hostAddress?: string(name='HostAddress'),
      lockTimes?: long(name='LockTimes'),
      parseRowCounts?: long(name='ParseRowCounts'),
      queryTimeMS?: long(name='QueryTimeMS'),
      queryTimes?: long(name='QueryTimes'),
      returnRowCounts?: long(name='ReturnRowCounts'),
      SQLText?: string(name='SQLText'),
    }
  ](name='SQLSlowRecord')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeSlowLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowLogRecordsResponseBody(name='body'),
}

async function describeSlowLogRecords(request: DescribeSlowLogRecordsRequest): DescribeSlowLogRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlowLogRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlowLogsRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBName?: string(name='DBName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', minimum=30, maximum=100, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeSlowLogsResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  engine?: string(name='Engine'),
  items?: {
    SQLSlowLog?: [ 
    {
      createTime?: string(name='CreateTime'),
      DBName?: string(name='DBName'),
      DBNodeId?: string(name='DBNodeId'),
      maxExecutionTime?: long(name='MaxExecutionTime'),
      maxLockTime?: long(name='MaxLockTime'),
      parseMaxRowCount?: long(name='ParseMaxRowCount'),
      parseTotalRowCounts?: long(name='ParseTotalRowCounts'),
      returnMaxRowCount?: long(name='ReturnMaxRowCount'),
      returnTotalRowCounts?: long(name='ReturnTotalRowCounts'),
      SQLHASH?: string(name='SQLHASH'),
      SQLText?: string(name='SQLText'),
      totalExecutionCounts?: long(name='TotalExecutionCounts'),
      totalExecutionTimes?: long(name='TotalExecutionTimes'),
      totalLockTimes?: long(name='TotalLockTimes'),
    }
  ](name='SQLSlowLog')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeSlowLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowLogsResponseBody(name='body'),
}

async function describeSlowLogs(request: DescribeSlowLogsRequest): DescribeSlowLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlowLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStoragePlanRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeStoragePlanResponseBody = {
  items?: [ 
    {
      aliUid?: string(name='AliUid', description='AliUid'),
      commodityCode?: string(name='CommodityCode', description='商品代码'),
      endTimes?: string(name='EndTimes', description='结束时间'),
      initCapaCityViewUnit?: string(name='InitCapaCityViewUnit', description='容量单位'),
      initCapacityViewValue?: string(name='InitCapacityViewValue', description='总量'),
      instanceId?: string(name='InstanceId', description='资源实例ID'),
      periodCapaCityViewUnit?: string(name='PeriodCapaCityViewUnit', description='周期容量单位'),
      periodCapacityViewValue?: string(name='PeriodCapacityViewValue', description='周期容量'),
      periodTime?: string(name='PeriodTime', description='周期时长'),
      prodCode?: string(name='ProdCode', description='产品Code'),
      purchaseTimes?: string(name='PurchaseTimes', description='购买时间'),
      startTimes?: string(name='StartTimes', description='开始时间'),
      status?: string(name='Status', description='状态'),
      storageType?: string(name='StorageType', description='存储包类型'),
      templateName?: string(name='TemplateName', description='资源包类型'),
    }
  ](name='Items'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalRecordCount?: long(name='TotalRecordCount'),
}

model DescribeStoragePlanResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStoragePlanResponseBody(name='body'),
}

async function describeStoragePlan(request: DescribeStoragePlanRequest): DescribeStoragePlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStoragePlan', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTasksRequest {
  DBClusterId?: string(name='DBClusterId', position='Query'),
  DBNodeId?: string(name='DBNodeId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  status?: string(name='Status', position='Query'),
}

model DescribeTasksResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  tasks?: {
    task?: [ 
    {
      beginTime?: string(name='BeginTime'),
      currentStepName?: string(name='CurrentStepName'),
      DBName?: string(name='DBName'),
      expectedFinishTime?: string(name='ExpectedFinishTime'),
      finishTime?: string(name='FinishTime'),
      progress?: int32(name='Progress'),
      progressInfo?: string(name='ProgressInfo'),
      remain?: int32(name='Remain'),
      stepProgressInfo?: string(name='StepProgressInfo'),
      stepsInfo?: string(name='StepsInfo'),
      taskAction?: string(name='TaskAction'),
      taskErrorCode?: string(name='TaskErrorCode'),
      taskErrorMessage?: string(name='TaskErrorMessage'),
      taskId?: string(name='TaskId'),
    }
  ](name='Task')
  }(name='Tasks'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTasksResponseBody(name='body'),
}

async function describeTasks(request: DescribeTasksRequest): DescribeTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTasks', 'POST', '/', 'json', false, 'json', request);
}

model EnableFirewallRulesRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  enable?: boolean(name='Enable', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  ruleNameList: string(name='RuleNameList', position='Query'),
}

model EnableFirewallRulesResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model EnableFirewallRulesResponse = {
  headers: map[string]string(name='headers'),
  body: EnableFirewallRulesResponseBody(name='body'),
}

async function enableFirewallRules(request: EnableFirewallRulesRequest): EnableFirewallRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableFirewallRules', 'POST', '/', 'json', false, 'json', request);
}

model FailoverDBClusterRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  targetDBNodeId?: string(name='TargetDBNodeId', position='Query'),
}

model FailoverDBClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model FailoverDBClusterResponse = {
  headers: map[string]string(name='headers'),
  body: FailoverDBClusterResponseBody(name='body'),
}

async function failoverDBCluster(request: FailoverDBClusterRequest): FailoverDBClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FailoverDBCluster', 'POST', '/', 'json', false, 'json', request);
}

model GrantAccountPrivilegeRequest {
  accountName: string(name='AccountName', position='Query'),
  accountPrivilege: string(name='AccountPrivilege', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBName: string(name='DBName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GrantAccountPrivilegeResponseBody = {
  requestId?: string(name='RequestId'),
}

model GrantAccountPrivilegeResponse = {
  headers: map[string]string(name='headers'),
  body: GrantAccountPrivilegeResponseBody(name='body'),
}

async function grantAccountPrivilege(request: GrantAccountPrivilegeRequest): GrantAccountPrivilegeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantAccountPrivilege', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccountDescriptionRequest {
  accountDescription: string(name='AccountDescription', position='Query'),
  accountName: string(name='AccountName', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyAccountDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccountDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountDescriptionResponseBody(name='body'),
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccountDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccountPasswordRequest {
  accountName: string(name='AccountName', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  newAccountPassword: string(name='NewAccountPassword', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyAccountPasswordResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountPasswordResponseBody(name='body'),
}

async function modifyAccountPassword(request: ModifyAccountPasswordRequest): ModifyAccountPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccountPassword', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAutoRenewAttributeRequest {
  DBClusterIds: string(name='DBClusterIds', position='Query'),
  duration?: string(name='Duration', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  renewalStatus?: string(name='RenewalStatus', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyAutoRenewAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAutoRenewAttributeResponseBody(name='body'),
}

async function modifyAutoRenewAttribute(request: ModifyAutoRenewAttributeRequest): ModifyAutoRenewAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAutoRenewAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBackupPolicyRequest {
  backupFrequency?: string(name='BackupFrequency', position='Query'),
  backupRetentionPolicyOnClusterDeletion?: string(name='BackupRetentionPolicyOnClusterDeletion', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  dataLevel1BackupFrequency?: string(name='DataLevel1BackupFrequency', position='Query'),
  dataLevel1BackupPeriod?: string(name='DataLevel1BackupPeriod', position='Query'),
  dataLevel1BackupRetentionPeriod?: string(name='DataLevel1BackupRetentionPeriod', position='Query'),
  dataLevel1BackupTime?: string(name='DataLevel1BackupTime', position='Query'),
  dataLevel2BackupAnotherRegionRegion?: string(name='DataLevel2BackupAnotherRegionRegion', position='Query'),
  dataLevel2BackupAnotherRegionRetentionPeriod?: string(name='DataLevel2BackupAnotherRegionRetentionPeriod', position='Query'),
  dataLevel2BackupPeriod?: string(name='DataLevel2BackupPeriod', position='Query'),
  dataLevel2BackupRetentionPeriod?: string(name='DataLevel2BackupRetentionPeriod', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod', position='Query'),
  preferredBackupTime?: string(name='PreferredBackupTime', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBackupPolicyResponseBody(name='body'),
}

async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterAccessWhitelistRequest {
  DBClusterIPArrayAttribute?: string(name='DBClusterIPArrayAttribute', position='Query'),
  DBClusterIPArrayName?: string(name='DBClusterIPArrayName', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  modifyMode?: string(name='ModifyMode', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityGroupIds?: string(name='SecurityGroupIds', position='Query'),
  securityIps?: string(name='SecurityIps', position='Query'),
  whiteListType?: string(name='WhiteListType', position='Query'),
}

model ModifyDBClusterAccessWhitelistResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterAccessWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterAccessWhitelistResponseBody(name='body'),
}

async function modifyDBClusterAccessWhitelist(request: ModifyDBClusterAccessWhitelistRequest): ModifyDBClusterAccessWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterAccessWhitelist', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterAndNodesParametersRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBNodeIds?: string(name='DBNodeIds', description='1、修改多个指定节点的参数，以‘，’分割。，修改此集群的集群参数和指定节点的参数
2、当为空时，说明没有指定，则只修改集群参数。', position='Query'),
  fromTimeService?: boolean(name='FromTimeService', description='立即执行或定时执行修改参数并重启取值：  false（默认值）：定时执行 true：立即执行', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parameterGroupId?: string(name='ParameterGroupId', description='参数模板ID。', position='Query'),
  parameters?: string(name='Parameters', description='参数及其值的JSON串，参数的值都是字符串类型，例如{"wait_timeout":"86","innodb_old_blocks_time":"10"}', position='Query'),
  plannedEndTime?: string(name='PlannedEndTime', description='开始执行目标定时任务的最晚时间。格式为YYYY-MM-DDThh:mm:ssZ（UTC）。', position='Query'),
  plannedStartTime?: string(name='PlannedStartTime', description='开始执行定时（即在目标时间段内执行）内核版本升级任务的最早时间。格式为YYYY-MM-DDThh:mm:ssZ（UTC）。', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBClusterAndNodesParametersResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterAndNodesParametersResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterAndNodesParametersResponseBody(name='body'),
}

async function modifyDBClusterAndNodesParameters(request: ModifyDBClusterAndNodesParametersRequest): ModifyDBClusterAndNodesParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterAndNodesParameters', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterAuditLogCollectorRequest {
  collectorStatus: string(name='CollectorStatus', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBClusterAuditLogCollectorResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterAuditLogCollectorResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterAuditLogCollectorResponseBody(name='body'),
}

async function modifyDBClusterAuditLogCollector(request: ModifyDBClusterAuditLogCollectorRequest): ModifyDBClusterAuditLogCollectorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterAuditLogCollector', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterDeletionRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  protection?: boolean(name='Protection', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBClusterDeletionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterDeletionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterDeletionResponseBody(name='body'),
}

async function modifyDBClusterDeletion(request: ModifyDBClusterDeletionRequest): ModifyDBClusterDeletionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterDeletion', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterDescriptionRequest {
  DBClusterDescription: string(name='DBClusterDescription', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBClusterDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterDescriptionResponseBody(name='body'),
}

async function modifyDBClusterDescription(request: ModifyDBClusterDescriptionRequest): ModifyDBClusterDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterEndpointRequest {
  autoAddNewNodes?: string(name='AutoAddNewNodes', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBEndpointDescription?: string(name='DBEndpointDescription', position='Query'),
  DBEndpointId: string(name='DBEndpointId', position='Query'),
  endpointConfig?: string(name='EndpointConfig', position='Query'),
  nodes?: string(name='Nodes', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  readWriteMode?: string(name='ReadWriteMode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBClusterEndpointResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterEndpointResponseBody(name='body'),
}

async function modifyDBClusterEndpoint(request: ModifyDBClusterEndpointRequest): ModifyDBClusterEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterMaintainTimeRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  maintainTime: string(name='MaintainTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBClusterMaintainTimeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterMaintainTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterMaintainTimeResponseBody(name='body'),
}

async function modifyDBClusterMaintainTime(request: ModifyDBClusterMaintainTimeRequest): ModifyDBClusterMaintainTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterMaintainTime', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterMigrationRequest {
  connectionStrings?: string(name='ConnectionStrings', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  newMasterInstanceId: string(name='NewMasterInstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sourceRDSDBInstanceId: string(name='SourceRDSDBInstanceId', position='Query'),
  swapConnectionString?: string(name='SwapConnectionString', position='Query'),
}

model ModifyDBClusterMigrationResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterMigrationResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterMigrationResponseBody(name='body'),
}

async function modifyDBClusterMigration(request: ModifyDBClusterMigrationRequest): ModifyDBClusterMigrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterMigration', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterMonitorRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period: string(name='Period', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBClusterMonitorResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterMonitorResponseBody(name='body'),
}

async function modifyDBClusterMonitor(request: ModifyDBClusterMonitorRequest): ModifyDBClusterMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterMonitor', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterParametersRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  fromTimeService?: boolean(name='FromTimeService', description='立即执行或定时执行修改参数并重启取值：  false（默认值）：定时执行 true：立即执行', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parameterGroupId?: string(name='ParameterGroupId', description='Parameters与ParamGroupId二选一必传', position='Query'),
  parameters?: string(name='Parameters', description='Parameters与ParamGroupId二选一必传', position='Query'),
  plannedEndTime?: string(name='PlannedEndTime', description='开始执行目标定时任务的最晚时间。格式为YYYY-MM-DDThh:mm:ssZ（UTC）。', position='Query'),
  plannedStartTime?: string(name='PlannedStartTime', description='开始执行定时（即在目标时间段内执行）内核版本升级任务的最早时间。格式为YYYY-MM-DDThh:mm:ssZ（UTC）。', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBClusterParametersResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterParametersResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterParametersResponseBody(name='body'),
}

async function modifyDBClusterParameters(request: ModifyDBClusterParametersRequest): ModifyDBClusterParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterParameters', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterPrimaryZoneRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  fromTimeService?: boolean(name='FromTimeService', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  plannedEndTime?: string(name='PlannedEndTime', position='Query'),
  plannedStartTime?: string(name='PlannedStartTime', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vSwitchId?: string(name='VSwitchId', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model ModifyDBClusterPrimaryZoneResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterPrimaryZoneResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterPrimaryZoneResponseBody(name='body'),
}

async function modifyDBClusterPrimaryZone(request: ModifyDBClusterPrimaryZoneRequest): ModifyDBClusterPrimaryZoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterPrimaryZone', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterResourceGroupRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  newResourceGroupId: string(name='NewResourceGroupId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBClusterResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterResourceGroupResponseBody(name='body'),
}

async function modifyDBClusterResourceGroup(request: ModifyDBClusterResourceGroupRequest): ModifyDBClusterResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterSSLRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBEndpointId?: string(name='DBEndpointId', position='Query'),
  netType?: string(name='NetType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  SSLAutoRotate?: string(name='SSLAutoRotate', position='Query'),
  SSLEnabled?: string(name='SSLEnabled', position='Query'),
}

model ModifyDBClusterSSLResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterSSLResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterSSLResponseBody(name='body'),
}

async function modifyDBClusterSSL(request: ModifyDBClusterSSLRequest): ModifyDBClusterSSLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterSSL', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterTDERequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  encryptNewTables?: string(name='EncryptNewTables', position='Query'),
  encryptionKey?: string(name='EncryptionKey', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  roleArn?: string(name='RoleArn', position='Query'),
  TDEStatus: string(name='TDEStatus', position='Query'),
}

model ModifyDBClusterTDEResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterTDEResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterTDEResponseBody(name='body'),
}

async function modifyDBClusterTDE(request: ModifyDBClusterTDERequest): ModifyDBClusterTDEResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterTDE', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBDescriptionRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBDescription: string(name='DBDescription', position='Query'),
  DBName: string(name='DBName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBDescriptionResponseBody(name='body'),
}

async function modifyDBDescription(request: ModifyDBDescriptionRequest): ModifyDBDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBEndpointAddressRequest {
  connectionStringPrefix?: string(name='ConnectionStringPrefix', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBEndpointId: string(name='DBEndpointId', position='Query'),
  netType: string(name='NetType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  port?: string(name='Port', position='Query'),
  privateZoneAddressPrefix?: string(name='PrivateZoneAddressPrefix', position='Query'),
  privateZoneName?: string(name='PrivateZoneName', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBEndpointAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBEndpointAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBEndpointAddressResponseBody(name='body'),
}

async function modifyDBEndpointAddress(request: ModifyDBEndpointAddressRequest): ModifyDBEndpointAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBEndpointAddress', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBNodeClassRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBNodeTargetClass: string(name='DBNodeTargetClass', position='Query'),
  modifyType: string(name='ModifyType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  plannedEndTime?: string(name='PlannedEndTime', position='Query'),
  plannedStartTime?: string(name='PlannedStartTime', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  subCategory?: string(name='SubCategory', position='Query'),
}

model ModifyDBNodeClassResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model ModifyDBNodeClassResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBNodeClassResponseBody(name='body'),
}

async function modifyDBNodeClass(request: ModifyDBNodeClassRequest): ModifyDBNodeClassResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBNodeClass', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBNodesClassRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBNode: [ 
    {
      DBNodeId?: string(name='DBNodeId'),
      targetClass?: string(name='TargetClass'),
    }
  ](name='DBNode', position='Query'),
  modifyType: string(name='ModifyType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  plannedEndTime?: string(name='PlannedEndTime', position='Query'),
  plannedStartTime?: string(name='PlannedStartTime', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  subCategory?: string(name='SubCategory', position='Query'),
}

model ModifyDBNodesClassResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model ModifyDBNodesClassResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBNodesClassResponseBody(name='body'),
}

async function modifyDBNodesClass(request: ModifyDBNodesClassRequest): ModifyDBNodesClassResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBNodesClass', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBNodesParametersRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBNodeIds: string(name='DBNodeIds', description='节点名称，多个节点名按照“，”分割', position='Query'),
  fromTimeService?: boolean(name='FromTimeService', description='立即执行或定时执行修改参数并重启取值：  false（默认值）：定时执行 true：立即执行', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parameterGroupId?: string(name='ParameterGroupId', description='参数模板ID。', position='Query'),
  parameters?: string(name='Parameters', description='参数及其值的JSON串，参数的值都是字符串类型，例如{"wait_timeout":"86","innodb_old_blocks_time":"10"}', position='Query'),
  plannedEndTime?: string(name='PlannedEndTime', description='开始执行目标定时任务的最晚时间。格式为YYYY-MM-DDThh:mm:ssZ（UTC）。', position='Query'),
  plannedStartTime?: string(name='PlannedStartTime', description='开始执行定时（即在目标时间段内执行）内核版本升级任务的最早时间。格式为YYYY-MM-DDThh:mm:ssZ（UTC）。', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBNodesParametersResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBNodesParametersResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBNodesParametersResponseBody(name='body'),
}

async function modifyDBNodesParameters(request: ModifyDBNodesParametersRequest): ModifyDBNodesParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBNodesParameters', 'POST', '/', 'json', false, 'json', request);
}

model ModifyGlobalDatabaseNetworkRequest {
  GDNDescription: string(name='GDNDescription', position='Query'),
  GDNId: string(name='GDNId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyGlobalDatabaseNetworkResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyGlobalDatabaseNetworkResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyGlobalDatabaseNetworkResponseBody(name='body'),
}

async function modifyGlobalDatabaseNetwork(request: ModifyGlobalDatabaseNetworkRequest): ModifyGlobalDatabaseNetworkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyGlobalDatabaseNetwork', 'POST', '/', 'json', false, 'json', request);
}

model ModifyLogBackupPolicyRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  logBackupAnotherRegionRegion?: string(name='LogBackupAnotherRegionRegion', position='Query'),
  logBackupAnotherRegionRetentionPeriod?: string(name='LogBackupAnotherRegionRetentionPeriod', position='Query'),
  logBackupRetentionPeriod?: string(name='LogBackupRetentionPeriod', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyLogBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyLogBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLogBackupPolicyResponseBody(name='body'),
}

async function modifyLogBackupPolicy(request: ModifyLogBackupPolicyRequest): ModifyLogBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyLogBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyMaskingRulesRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  enable?: string(name='Enable', position='Query'),
  ruleConfig?: string(name='RuleConfig', position='Query'),
  ruleName?: string(name='RuleName', position='Query'),
  ruleNameList?: string(name='RuleNameList', position='Query'),
}

model ModifyMaskingRulesResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyMaskingRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyMaskingRulesResponseBody(name='body'),
}

async function modifyMaskingRules(request: ModifyMaskingRulesRequest): ModifyMaskingRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyMaskingRules', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPendingMaintenanceActionRequest {
  ids: string(name='Ids', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  switchTime: string(name='SwitchTime', position='Query'),
}

model ModifyPendingMaintenanceActionResponseBody = {
  ids?: string(name='Ids'),
  requestId?: string(name='RequestId'),
}

model ModifyPendingMaintenanceActionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPendingMaintenanceActionResponseBody(name='body'),
}

async function modifyPendingMaintenanceAction(request: ModifyPendingMaintenanceActionRequest): ModifyPendingMaintenanceActionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPendingMaintenanceAction', 'POST', '/', 'json', false, 'json', request);
}

model OpenAITaskRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  password?: string(name='Password', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  username?: string(name='Username', position='Query'),
}

model OpenAITaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  taskId?: string(name='TaskId'),
}

model OpenAITaskResponse = {
  headers: map[string]string(name='headers'),
  body: OpenAITaskResponseBody(name='body'),
}

async function openAITask(request: OpenAITaskRequest): OpenAITaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenAITask', 'POST', '/', 'json', false, 'json', request);
}

model RefreshDBClusterStorageUsageRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  syncRealTime?: boolean(name='SyncRealTime', position='Query'),
}

model RefreshDBClusterStorageUsageResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  requestId?: string(name='RequestId', description='Id of the request'),
  usedStorage?: string(name='UsedStorage'),
  usedStorageModified?: string(name='UsedStorageModified'),
}

model RefreshDBClusterStorageUsageResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshDBClusterStorageUsageResponseBody(name='body'),
}

async function refreshDBClusterStorageUsage(request: RefreshDBClusterStorageUsageRequest): RefreshDBClusterStorageUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshDBClusterStorageUsage', 'POST', '/', 'json', false, 'json', request);
}

model RemoveDBClusterFromGDNRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  GDNId: string(name='GDNId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model RemoveDBClusterFromGDNResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveDBClusterFromGDNResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveDBClusterFromGDNResponseBody(name='body'),
}

async function removeDBClusterFromGDN(request: RemoveDBClusterFromGDNRequest): RemoveDBClusterFromGDNResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveDBClusterFromGDN', 'POST', '/', 'json', false, 'json', request);
}

model ResetAccountRequest {
  accountName: string(name='AccountName', position='Query'),
  accountPassword?: string(name='AccountPassword', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ResetAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetAccountResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAccountResponseBody(name='body'),
}

async function resetAccount(request: ResetAccountRequest): ResetAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAccount', 'POST', '/', 'json', false, 'json', request);
}

model RestartDBNodeRequest {
  DBNodeId: string(name='DBNodeId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RestartDBNodeResponseBody = {
  requestId?: string(name='RequestId'),
}

model RestartDBNodeResponse = {
  headers: map[string]string(name='headers'),
  body: RestartDBNodeResponseBody(name='body'),
}

async function restartDBNode(request: RestartDBNodeRequest): RestartDBNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartDBNode', 'POST', '/', 'json', false, 'json', request);
}

model RestoreTableRequest {
  backupId?: string(name='BackupId', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  restoreTime?: string(name='RestoreTime', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tableMeta: string(name='TableMeta', position='Query'),
}

model RestoreTableResponseBody = {
  requestId?: string(name='RequestId'),
}

model RestoreTableResponse = {
  headers: map[string]string(name='headers'),
  body: RestoreTableResponseBody(name='body'),
}

async function restoreTable(request: RestoreTableRequest): RestoreTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestoreTable', 'POST', '/', 'json', false, 'json', request);
}

model RevokeAccountPrivilegeRequest {
  accountName: string(name='AccountName', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBName: string(name='DBName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RevokeAccountPrivilegeResponseBody = {
  requestId?: string(name='RequestId'),
}

model RevokeAccountPrivilegeResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeAccountPrivilegeResponseBody(name='body'),
}

async function revokeAccountPrivilege(request: RevokeAccountPrivilegeRequest): RevokeAccountPrivilegeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeAccountPrivilege', 'POST', '/', 'json', false, 'json', request);
}

model SwitchOverGlobalDatabaseNetworkRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  GDNId: string(name='GDNId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SwitchOverGlobalDatabaseNetworkResponseBody = {
  requestId?: string(name='RequestId'),
}

model SwitchOverGlobalDatabaseNetworkResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchOverGlobalDatabaseNetworkResponseBody(name='body'),
}

async function switchOverGlobalDatabaseNetwork(request: SwitchOverGlobalDatabaseNetworkRequest): SwitchOverGlobalDatabaseNetworkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchOverGlobalDatabaseNetwork', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model TempModifyDBNodeRequest {
  clientToken?: string(name='ClientToken', description='幂等参数', position='Query'),
  DBClusterId: string(name='DBClusterId', description='实例Id', position='Query'),
  DBNode: [ 
    {
      targetClass?: string(name='TargetClass'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DBNode', position='Query'),
  modifyType: string(name='ModifyType', description='变更类型', position='Query'),
  operationType: string(name='OperationType', description='操作类型（Add:增加节点; Modify:变配）', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  restoreTime: string(name='RestoreTime', description='变更还原时间(说明：还原时间不能早于当前时间推后1小时，不能晚于集群到期时间的前1天)', position='Query'),
}

model TempModifyDBNodeResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  DBNodeIds?: [ string ](name='DBNodeIds'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model TempModifyDBNodeResponse = {
  headers: map[string]string(name='headers'),
  body: TempModifyDBNodeResponseBody(name='body'),
}

async function tempModifyDBNode(request: TempModifyDBNodeRequest): TempModifyDBNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TempModifyDBNode', 'POST', '/', 'json', false, 'json', request);
}

model TransformDBClusterPayTypeRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  payType: string(name='PayType', position='Query'),
  period?: string(name='Period', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  usedTime?: string(name='UsedTime', position='Query'),
}

model TransformDBClusterPayTypeResponseBody = {
  chargeType?: string(name='ChargeType'),
  DBClusterId?: string(name='DBClusterId'),
  expiredTime?: string(name='ExpiredTime'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model TransformDBClusterPayTypeResponse = {
  headers: map[string]string(name='headers'),
  body: TransformDBClusterPayTypeResponseBody(name='body'),
}

async function transformDBClusterPayType(request: TransformDBClusterPayTypeRequest): TransformDBClusterPayTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransformDBClusterPayType', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeDBClusterMinorVersionRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  fromTimeService?: boolean(name='FromTimeService', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  plannedEndTime?: string(name='PlannedEndTime', position='Query'),
  plannedStartTime?: string(name='PlannedStartTime', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpgradeDBClusterMinorVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpgradeDBClusterMinorVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeDBClusterMinorVersionResponseBody(name='body'),
}

async function upgradeDBClusterMinorVersion(request: UpgradeDBClusterMinorVersionRequest): UpgradeDBClusterMinorVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeDBClusterMinorVersion', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeDBClusterVersionRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  fromTimeService?: boolean(name='FromTimeService', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  plannedEndTime?: string(name='PlannedEndTime', position='Query'),
  plannedStartTime?: string(name='PlannedStartTime', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  upgradeLabel?: string(name='UpgradeLabel', position='Query'),
  upgradePolicy?: string(name='UpgradePolicy', position='Query'),
  upgradeType?: string(name='UpgradeType', position='Query'),
}

model UpgradeDBClusterVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpgradeDBClusterVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeDBClusterVersionResponseBody(name='body'),
}

async function upgradeDBClusterVersion(request: UpgradeDBClusterVersionRequest): UpgradeDBClusterVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeDBClusterVersion', 'POST', '/', 'json', false, 'json', request);
}

