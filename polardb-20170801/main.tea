/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    cn-qingdao = 'polardb.aliyuncs.com',
    cn-beijing = 'polardb.aliyuncs.com',
    cn-hangzhou = 'polardb.aliyuncs.com',
    cn-shanghai = 'polardb.aliyuncs.com',
    cn-shenzhen = 'polardb.aliyuncs.com',
    cn-hongkong = 'polardb.aliyuncs.com',
    ap-southeast-1 = 'polardb.aliyuncs.com',
    us-west-1 = 'polardb.aliyuncs.com',
    us-east-1 = 'polardb.aliyuncs.com',
    cn-hangzhou-finance = 'polardb.aliyuncs.com',
    cn-shanghai-finance-1 = 'polardb.aliyuncs.com',
    cn-shenzhen-finance-1 = 'polardb.aliyuncs.com',
    ap-northeast-2-pop = 'polardb.aliyuncs.com',
    cn-beijing-finance-1 = 'polardb.aliyuncs.com',
    cn-beijing-finance-pop = 'polardb.aliyuncs.com',
    cn-beijing-gov-1 = 'polardb.aliyuncs.com',
    cn-beijing-nu16-b01 = 'polardb.aliyuncs.com',
    cn-edge-1 = 'polardb.aliyuncs.com',
    cn-fujian = 'polardb.aliyuncs.com',
    cn-haidian-cm12-c01 = 'polardb.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'polardb.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'polardb.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'polardb.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'polardb.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'polardb.aliyuncs.com',
    cn-hangzhou-test-306 = 'polardb.aliyuncs.com',
    cn-hongkong-finance-pop = 'polardb.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'polardb.aliyuncs.com',
    cn-north-2-gov-1 = 'polardb.aliyuncs.com',
    cn-qingdao-nebula = 'polardb.aliyuncs.com',
    cn-shanghai-et15-b01 = 'polardb.aliyuncs.com',
    cn-shanghai-et2-b01 = 'polardb.aliyuncs.com',
    cn-shanghai-inner = 'polardb.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'polardb.aliyuncs.com',
    cn-shenzhen-inner = 'polardb.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'polardb.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'polardb.aliyuncs.com',
    cn-wuhan = 'polardb.aliyuncs.com',
    cn-wulanchabu = 'polardb.aliyuncs.com',
    cn-yushanfang = 'polardb.aliyuncs.com',
    cn-zhangbei = 'polardb.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'polardb.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'polardb.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'polardb.aliyuncs.com',
    eu-west-1-oxs = 'polardb.aliyuncs.com',
    rus-west-1-pop = 'polardb.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('polardb', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CancelScheduleTasksRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  taskId?: string(name='TaskId'),
}

model CancelScheduleTasksResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CancelScheduleTasksResponse = {
  headers: map[string]string(name='headers'),
  body: CancelScheduleTasksResponseBody(name='body'),
}

async function cancelScheduleTasksWithOptions(request: CancelScheduleTasksRequest, runtime: Util.RuntimeOptions): CancelScheduleTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelScheduleTasks', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelScheduleTasks(request: CancelScheduleTasksRequest): CancelScheduleTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelScheduleTasksWithOptions(request, runtime);
}

model CheckAccountNameRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  accountName?: string(name='AccountName'),
}

model CheckAccountNameResponseBody = {
  requestId?: string(name='RequestId'),
}

model CheckAccountNameResponse = {
  headers: map[string]string(name='headers'),
  body: CheckAccountNameResponseBody(name='body'),
}

async function checkAccountNameWithOptions(request: CheckAccountNameRequest, runtime: Util.RuntimeOptions): CheckAccountNameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckAccountName', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkAccountName(request: CheckAccountNameRequest): CheckAccountNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkAccountNameWithOptions(request, runtime);
}

model CheckDBNameRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  DBName?: string(name='DBName'),
}

model CheckDBNameResponseBody = {
  requestId?: string(name='RequestId'),
}

model CheckDBNameResponse = {
  headers: map[string]string(name='headers'),
  body: CheckDBNameResponseBody(name='body'),
}

async function checkDBNameWithOptions(request: CheckDBNameRequest, runtime: Util.RuntimeOptions): CheckDBNameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckDBName', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkDBName(request: CheckDBNameRequest): CheckDBNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkDBNameWithOptions(request, runtime);
}

model CloseDBClusterMigrationRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  continueEnableBinlog?: boolean(name='ContinueEnableBinlog'),
}

model CloseDBClusterMigrationResponseBody = {
  requestId?: string(name='RequestId'),
}

model CloseDBClusterMigrationResponse = {
  headers: map[string]string(name='headers'),
  body: CloseDBClusterMigrationResponseBody(name='body'),
}

async function closeDBClusterMigrationWithOptions(request: CloseDBClusterMigrationRequest, runtime: Util.RuntimeOptions): CloseDBClusterMigrationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CloseDBClusterMigration', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function closeDBClusterMigration(request: CloseDBClusterMigrationRequest): CloseDBClusterMigrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return closeDBClusterMigrationWithOptions(request, runtime);
}

model CreateAccountRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
  accountType?: string(name='AccountType'),
  accountDescription?: string(name='AccountDescription'),
  DBName?: string(name='DBName'),
  accountPrivilege?: string(name='AccountPrivilege'),
  clientToken?: string(name='ClientToken'),
}

model CreateAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAccountResponseBody(name='body'),
}

async function createAccountWithOptions(request: CreateAccountRequest, runtime: Util.RuntimeOptions): CreateAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAccount', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccountWithOptions(request, runtime);
}

model CreateBackupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  clientToken?: string(name='ClientToken'),
}

model CreateBackupResponseBody = {
  requestId?: string(name='RequestId'),
  backupJobId?: string(name='BackupJobId'),
}

model CreateBackupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBackupResponseBody(name='body'),
}

async function createBackupWithOptions(request: CreateBackupRequest, runtime: Util.RuntimeOptions): CreateBackupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateBackup', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createBackup(request: CreateBackupRequest): CreateBackupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBackupWithOptions(request, runtime);
}

model CreateDatabaseRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  DBName?: string(name='DBName'),
  characterSetName?: string(name='CharacterSetName'),
  DBDescription?: string(name='DBDescription'),
  accountName?: string(name='AccountName'),
  accountPrivilege?: string(name='AccountPrivilege'),
  collate?: string(name='Collate'),
  ctype?: string(name='Ctype'),
}

model CreateDatabaseResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDatabaseResponseBody(name='body'),
}

async function createDatabaseWithOptions(request: CreateDatabaseRequest, runtime: Util.RuntimeOptions): CreateDatabaseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDatabase', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDatabase(request: CreateDatabaseRequest): CreateDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDatabaseWithOptions(request, runtime);
}

model CreateDBClusterRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  zoneId?: string(name='ZoneId'),
  engine?: string(name='Engine'),
  DBType?: string(name='DBType'),
  DBVersion?: string(name='DBVersion'),
  DBNodeClass?: string(name='DBNodeClass'),
  clusterNetworkType?: string(name='ClusterNetworkType'),
  DBClusterDescription?: string(name='DBClusterDescription'),
  payType?: string(name='PayType'),
  autoRenew?: boolean(name='AutoRenew'),
  period?: string(name='Period'),
  usedTime?: string(name='UsedTime'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
  creationOption?: string(name='CreationOption'),
  sourceResourceId?: string(name='SourceResourceId'),
  cloneDataPoint?: string(name='CloneDataPoint'),
  clientToken?: string(name='ClientToken'),
  resourceGroupId?: string(name='ResourceGroupId'),
  securityIPList?: string(name='SecurityIPList'),
  TDEStatus?: boolean(name='TDEStatus'),
  GDNId?: string(name='GDNId'),
  creationCategory?: string(name='CreationCategory'),
  defaultTimeZone?: string(name='DefaultTimeZone'),
  lowerCaseTableNames?: string(name='LowerCaseTableNames'),
  backupRetentionPolicyOnClusterDeletion?: string(name='BackupRetentionPolicyOnClusterDeletion'),
  DBMinorVersion?: string(name='DBMinorVersion'),
}

model CreateDBClusterResponseBody = {
  requestId?: string(name='RequestId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  DBClusterId?: string(name='DBClusterId'),
  orderId?: string(name='OrderId'),
}

model CreateDBClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBClusterResponseBody(name='body'),
}

async function createDBClusterWithOptions(request: CreateDBClusterRequest, runtime: Util.RuntimeOptions): CreateDBClusterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDBCluster', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDBCluster(request: CreateDBClusterRequest): CreateDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBClusterWithOptions(request, runtime);
}

model CreateDBClusterEndpointRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  endpointType?: string(name='EndpointType'),
  nodes?: string(name='Nodes'),
  readWriteMode?: string(name='ReadWriteMode'),
  autoAddNewNodes?: string(name='AutoAddNewNodes'),
  endpointConfig?: string(name='EndpointConfig'),
  clientToken?: string(name='ClientToken'),
  DBEndpointDescription?: string(name='DBEndpointDescription'),
}

model CreateDBClusterEndpointResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDBClusterEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBClusterEndpointResponseBody(name='body'),
}

async function createDBClusterEndpointWithOptions(request: CreateDBClusterEndpointRequest, runtime: Util.RuntimeOptions): CreateDBClusterEndpointResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDBClusterEndpoint', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDBClusterEndpoint(request: CreateDBClusterEndpointRequest): CreateDBClusterEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBClusterEndpointWithOptions(request, runtime);
}

model CreateDBEndpointAddressRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  DBEndpointId?: string(name='DBEndpointId'),
  connectionStringPrefix?: string(name='ConnectionStringPrefix'),
  netType?: string(name='NetType'),
}

model CreateDBEndpointAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDBEndpointAddressResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBEndpointAddressResponseBody(name='body'),
}

async function createDBEndpointAddressWithOptions(request: CreateDBEndpointAddressRequest, runtime: Util.RuntimeOptions): CreateDBEndpointAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDBEndpointAddress', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDBEndpointAddress(request: CreateDBEndpointAddressRequest): CreateDBEndpointAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBEndpointAddressWithOptions(request, runtime);
}

model CreateDBLinkRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  DBLinkName?: string(name='DBLinkName'),
  targetDBInstanceName?: string(name='TargetDBInstanceName'),
  targetDBAccount?: string(name='TargetDBAccount'),
  targetDBPasswd?: string(name='TargetDBPasswd'),
  targetDBName?: string(name='TargetDBName'),
  sourceDBName?: string(name='SourceDBName'),
  targetIp?: string(name='TargetIp'),
  targetPort?: string(name='TargetPort'),
  vpcId?: string(name='VpcId'),
  regionId?: string(name='RegionId'),
  clientToken?: string(name='ClientToken'),
}

model CreateDBLinkResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDBLinkResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBLinkResponseBody(name='body'),
}

async function createDBLinkWithOptions(request: CreateDBLinkRequest, runtime: Util.RuntimeOptions): CreateDBLinkResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDBLink', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDBLink(request: CreateDBLinkRequest): CreateDBLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBLinkWithOptions(request, runtime);
}

model CreateDBNodesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  clientToken?: string(name='ClientToken'),
  endpointBindList?: string(name='EndpointBindList'),
  plannedStartTime?: string(name='PlannedStartTime'),
  plannedEndTime?: string(name='PlannedEndTime'),
  DBNode?: [ 
    {
      targetClass?: string(name='TargetClass'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DBNode'),
}

model CreateDBNodesResponseBody = {
  DBNodeIds?: {
    DBNodeId?: [ string ](name='DBNodeId')
  }(name='DBNodeIds'),
  requestId?: string(name='RequestId'),
  DBClusterId?: string(name='DBClusterId'),
  orderId?: string(name='OrderId'),
}

model CreateDBNodesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBNodesResponseBody(name='body'),
}

async function createDBNodesWithOptions(request: CreateDBNodesRequest, runtime: Util.RuntimeOptions): CreateDBNodesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDBNodes', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDBNodes(request: CreateDBNodesRequest): CreateDBNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBNodesWithOptions(request, runtime);
}

model DeleteAccountRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  accountName?: string(name='AccountName'),
}

model DeleteAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAccountResponseBody(name='body'),
}

async function deleteAccountWithOptions(request: DeleteAccountRequest, runtime: Util.RuntimeOptions): DeleteAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAccount', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccountWithOptions(request, runtime);
}

model DeleteBackupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  backupId?: string(name='BackupId'),
}

model DeleteBackupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteBackupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBackupResponseBody(name='body'),
}

async function deleteBackupWithOptions(request: DeleteBackupRequest, runtime: Util.RuntimeOptions): DeleteBackupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteBackup', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteBackup(request: DeleteBackupRequest): DeleteBackupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBackupWithOptions(request, runtime);
}

model DeleteDatabaseRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  DBName?: string(name='DBName'),
}

model DeleteDatabaseResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDatabaseResponseBody(name='body'),
}

async function deleteDatabaseWithOptions(request: DeleteDatabaseRequest, runtime: Util.RuntimeOptions): DeleteDatabaseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDatabase', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDatabase(request: DeleteDatabaseRequest): DeleteDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDatabaseWithOptions(request, runtime);
}

model DeleteDBClusterRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  backupRetentionPolicyOnClusterDeletion?: string(name='BackupRetentionPolicyOnClusterDeletion'),
}

model DeleteDBClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDBClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBClusterResponseBody(name='body'),
}

async function deleteDBClusterWithOptions(request: DeleteDBClusterRequest, runtime: Util.RuntimeOptions): DeleteDBClusterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDBCluster', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDBCluster(request: DeleteDBClusterRequest): DeleteDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBClusterWithOptions(request, runtime);
}

model DeleteDBClusterEndpointRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  DBEndpointId?: string(name='DBEndpointId'),
}

model DeleteDBClusterEndpointResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDBClusterEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBClusterEndpointResponseBody(name='body'),
}

async function deleteDBClusterEndpointWithOptions(request: DeleteDBClusterEndpointRequest, runtime: Util.RuntimeOptions): DeleteDBClusterEndpointResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDBClusterEndpoint', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDBClusterEndpoint(request: DeleteDBClusterEndpointRequest): DeleteDBClusterEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBClusterEndpointWithOptions(request, runtime);
}

model DeleteDBEndpointAddressRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  DBEndpointId?: string(name='DBEndpointId'),
  netType?: string(name='NetType'),
}

model DeleteDBEndpointAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDBEndpointAddressResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBEndpointAddressResponseBody(name='body'),
}

async function deleteDBEndpointAddressWithOptions(request: DeleteDBEndpointAddressRequest, runtime: Util.RuntimeOptions): DeleteDBEndpointAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDBEndpointAddress', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDBEndpointAddress(request: DeleteDBEndpointAddressRequest): DeleteDBEndpointAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBEndpointAddressWithOptions(request, runtime);
}

model DeleteDBLinkRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  DBLinkName?: string(name='DBLinkName'),
}

model DeleteDBLinkResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDBLinkResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBLinkResponseBody(name='body'),
}

async function deleteDBLinkWithOptions(request: DeleteDBLinkRequest, runtime: Util.RuntimeOptions): DeleteDBLinkResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDBLink', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDBLink(request: DeleteDBLinkRequest): DeleteDBLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBLinkWithOptions(request, runtime);
}

model DeleteDBNodesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  clientToken?: string(name='ClientToken'),
  DBNodeId?: [ string ](name='DBNodeId'),
}

model DeleteDBNodesResponseBody = {
  requestId?: string(name='RequestId'),
  DBClusterId?: string(name='DBClusterId'),
  orderId?: string(name='OrderId'),
}

model DeleteDBNodesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBNodesResponseBody(name='body'),
}

async function deleteDBNodesWithOptions(request: DeleteDBNodesRequest, runtime: Util.RuntimeOptions): DeleteDBNodesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDBNodes', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDBNodes(request: DeleteDBNodesRequest): DeleteDBNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBNodesWithOptions(request, runtime);
}

model DescribeAccountsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  accountName?: string(name='AccountName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeAccountsResponseBody = {
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  accounts?: [ 
    {
      accountStatus?: string(name='AccountStatus'),
      databasePrivileges?: [ 
        {
          DBName?: string(name='DBName'),
          accountPrivilege?: string(name='AccountPrivilege'),
        }
      ](name='DatabasePrivileges'),
      accountDescription?: string(name='AccountDescription'),
      accountPasswordValidTime?: string(name='AccountPasswordValidTime'),
      accountType?: string(name='AccountType'),
      accountLockState?: string(name='AccountLockState'),
      accountName?: string(name='AccountName'),
    }
  ](name='Accounts'),
}

model DescribeAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccountsResponseBody(name='body'),
}

async function describeAccountsWithOptions(request: DescribeAccountsRequest, runtime: Util.RuntimeOptions): DescribeAccountsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAccounts', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountsWithOptions(request, runtime);
}

model DescribeAutoRenewAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterIds?: string(name='DBClusterIds'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeAutoRenewAttributeResponseBody = {
  totalRecordCount?: int32(name='TotalRecordCount'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  items?: {
    autoRenewAttribute?: [ 
    {
      DBClusterId?: string(name='DBClusterId'),
      periodUnit?: string(name='PeriodUnit'),
      duration?: int32(name='Duration'),
      renewalStatus?: string(name='RenewalStatus'),
      autoRenewEnabled?: boolean(name='AutoRenewEnabled'),
      regionId?: string(name='RegionId'),
    }
  ](name='AutoRenewAttribute')
  }(name='Items'),
}

model DescribeAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoRenewAttributeResponseBody(name='body'),
}

async function describeAutoRenewAttributeWithOptions(request: DescribeAutoRenewAttributeRequest, runtime: Util.RuntimeOptions): DescribeAutoRenewAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAutoRenewAttribute', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAutoRenewAttribute(request: DescribeAutoRenewAttributeRequest): DescribeAutoRenewAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoRenewAttributeWithOptions(request, runtime);
}

model DescribeBackupLogsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeBackupLogsResponseBody = {
  totalRecordCount?: string(name='TotalRecordCount'),
  pageRecordCount?: string(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  pageNumber?: string(name='PageNumber'),
  items?: {
    backupLog?: [ 
    {
      backupLogId?: string(name='BackupLogId'),
      intranetDownloadLink?: string(name='IntranetDownloadLink'),
      linkExpiredTime?: string(name='LinkExpiredTime'),
      backupLogStartTime?: string(name='BackupLogStartTime'),
      backupLogEndTime?: string(name='BackupLogEndTime'),
      downloadLink?: string(name='DownloadLink'),
      backupLogSize?: string(name='BackupLogSize'),
      backupLogName?: string(name='BackupLogName'),
    }
  ](name='BackupLog')
  }(name='Items'),
}

model DescribeBackupLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupLogsResponseBody(name='body'),
}

async function describeBackupLogsWithOptions(request: DescribeBackupLogsRequest, runtime: Util.RuntimeOptions): DescribeBackupLogsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupLogs', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupLogs(request: DescribeBackupLogsRequest): DescribeBackupLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupLogsWithOptions(request, runtime);
}

model DescribeBackupPolicyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeBackupPolicyResponseBody = {
  preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
  dataLevel1BackupRetentionPeriod?: string(name='DataLevel1BackupRetentionPeriod'),
  requestId?: string(name='RequestId'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
  backupRetentionPolicyOnClusterDeletion?: string(name='BackupRetentionPolicyOnClusterDeletion'),
  preferredNextBackupTime?: string(name='PreferredNextBackupTime'),
  dataLevel2BackupRetentionPeriod?: string(name='DataLevel2BackupRetentionPeriod'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicyWithOptions(request: DescribeBackupPolicyRequest, runtime: Util.RuntimeOptions): DescribeBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupPolicy', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPolicyWithOptions(request, runtime);
}

model DescribeBackupsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  backupId?: string(name='BackupId'),
  backupStatus?: string(name='BackupStatus'),
  backupMode?: string(name='BackupMode'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeBackupsResponseBody = {
  totalRecordCount?: string(name='TotalRecordCount'),
  pageRecordCount?: string(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  pageNumber?: string(name='PageNumber'),
  items?: {
    backup?: [ 
    {
      backupSetSize?: string(name='BackupSetSize'),
      consistentTime?: string(name='ConsistentTime'),
      backupStatus?: string(name='BackupStatus'),
      backupType?: string(name='BackupType'),
      backupStartTime?: string(name='BackupStartTime'),
      isAvail?: string(name='IsAvail'),
      backupEndTime?: string(name='BackupEndTime'),
      backupId?: string(name='BackupId'),
      DBClusterId?: string(name='DBClusterId'),
      backupsLevel?: string(name='BackupsLevel'),
      backupMode?: string(name='BackupMode'),
      backupMethod?: string(name='BackupMethod'),
    }
  ](name='Backup')
  }(name='Items'),
}

model DescribeBackupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupsResponseBody(name='body'),
}

async function describeBackupsWithOptions(request: DescribeBackupsRequest, runtime: Util.RuntimeOptions): DescribeBackupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackups', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackups(request: DescribeBackupsRequest): DescribeBackupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupsWithOptions(request, runtime);
}

model DescribeBackupTasksRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterId?: string(name='DBClusterId'),
  backupJobId?: string(name='BackupJobId'),
  backupMode?: string(name='BackupMode'),
}

model DescribeBackupTasksResponseBody = {
  requestId?: string(name='RequestId'),
  items?: {
    backupJob?: [ 
    {
      startTime?: string(name='StartTime'),
      process?: string(name='Process'),
      backupJobId?: string(name='BackupJobId'),
      jobMode?: string(name='JobMode'),
      backupProgressStatus?: string(name='BackupProgressStatus'),
      taskAction?: string(name='TaskAction'),
    }
  ](name='BackupJob')
  }(name='Items'),
}

model DescribeBackupTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupTasksResponseBody(name='body'),
}

async function describeBackupTasksWithOptions(request: DescribeBackupTasksRequest, runtime: Util.RuntimeOptions): DescribeBackupTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupTasks', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupTasks(request: DescribeBackupTasksRequest): DescribeBackupTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupTasksWithOptions(request, runtime);
}

model DescribeCharacterSetNameRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeCharacterSetNameResponseBody = {
  requestId?: string(name='RequestId'),
  characterSetNameItems?: {
    characterSetName?: [ string ](name='CharacterSetName')
  }(name='CharacterSetNameItems'),
  engine?: string(name='Engine'),
}

model DescribeCharacterSetNameResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCharacterSetNameResponseBody(name='body'),
}

async function describeCharacterSetNameWithOptions(request: DescribeCharacterSetNameRequest, runtime: Util.RuntimeOptions): DescribeCharacterSetNameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCharacterSetName', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCharacterSetName(request: DescribeCharacterSetNameRequest): DescribeCharacterSetNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCharacterSetNameWithOptions(request, runtime);
}

model DescribeDatabasesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  DBName?: string(name='DBName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDatabasesResponseBody = {
  pageRecordCount?: int32(name='PageRecordCount'),
  databases?: {
    database?: [ 
    {
      DBDescription?: string(name='DBDescription'),
      DBStatus?: string(name='DBStatus'),
      DBName?: string(name='DBName'),
      engine?: string(name='Engine'),
      characterSetName?: string(name='CharacterSetName'),
      accounts?: {
        account?: [ 
        {
          privilegeStatus?: string(name='PrivilegeStatus'),
          accountStatus?: string(name='AccountStatus'),
          accountPrivilege?: string(name='AccountPrivilege'),
          accountName?: string(name='AccountName'),
        }
      ](name='Account')
      }(name='Accounts'),
    }
  ](name='Database')
  }(name='Databases'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeDatabasesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDatabasesResponseBody(name='body'),
}

async function describeDatabasesWithOptions(request: DescribeDatabasesRequest, runtime: Util.RuntimeOptions): DescribeDatabasesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDatabases', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDatabases(request: DescribeDatabasesRequest): DescribeDatabasesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDatabasesWithOptions(request, runtime);
}

model DescribeDBClusterAccessWhitelistRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeDBClusterAccessWhitelistResponseBody = {
  requestId?: string(name='RequestId'),
  items?: {
    DBClusterIPArray?: [ 
    {
      DBClusterIPArrayAttribute?: string(name='DBClusterIPArrayAttribute'),
      DBClusterIPArrayName?: string(name='DBClusterIPArrayName'),
      securityIps?: string(name='SecurityIps'),
    }
  ](name='DBClusterIPArray')
  }(name='Items'),
  DBClusterSecurityGroups?: {
    DBClusterSecurityGroup?: [ 
    {
      securityGroupId?: string(name='SecurityGroupId'),
      securityGroupName?: string(name='SecurityGroupName'),
    }
  ](name='DBClusterSecurityGroup')
  }(name='DBClusterSecurityGroups'),
}

model DescribeDBClusterAccessWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterAccessWhitelistResponseBody(name='body'),
}

async function describeDBClusterAccessWhitelistWithOptions(request: DescribeDBClusterAccessWhitelistRequest, runtime: Util.RuntimeOptions): DescribeDBClusterAccessWhitelistResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBClusterAccessWhitelist', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBClusterAccessWhitelist(request: DescribeDBClusterAccessWhitelistRequest): DescribeDBClusterAccessWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterAccessWhitelistWithOptions(request, runtime);
}

model DescribeDBClusterAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeDBClusterAttributeResponseBody = {
  deletionLock?: int32(name='DeletionLock'),
  category?: string(name='Category'),
  resourceGroupId?: string(name='ResourceGroupId'),
  dataLevel1BackupChainSize?: long(name='DataLevel1BackupChainSize'),
  DBClusterId?: string(name='DBClusterId'),
  DBType?: string(name='DBType'),
  DBClusterNetworkType?: string(name='DBClusterNetworkType'),
  isLatestVersion?: boolean(name='IsLatestVersion'),
  storageMax?: long(name='StorageMax'),
  DBVersion?: string(name='DBVersion'),
  DBNodes?: [ 
    {
      creationTime?: string(name='CreationTime'),
      failoverPriority?: int32(name='FailoverPriority'),
      maxIOPS?: int32(name='MaxIOPS'),
      DBNodeClass?: string(name='DBNodeClass'),
      DBNodeRole?: string(name='DBNodeRole'),
      zoneId?: string(name='ZoneId'),
      maxConnections?: int32(name='MaxConnections'),
      DBNodeStatus?: string(name='DBNodeStatus'),
      DBNodeId?: string(name='DBNodeId'),
    }
  ](name='DBNodes'),
  zoneIds?: string(name='ZoneIds'),
  maintainTime?: string(name='MaintainTime'),
  engine?: string(name='Engine'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
  requestId?: string(name='RequestId'),
  VPCId?: string(name='VPCId'),
  DBClusterStatus?: string(name='DBClusterStatus'),
  vSwitchId?: string(name='VSwitchId'),
  DBClusterDescription?: string(name='DBClusterDescription'),
  expired?: string(name='Expired'),
  payType?: string(name='PayType'),
  lockMode?: string(name='LockMode'),
  storageUsed?: long(name='StorageUsed'),
  DBVersionStatus?: string(name='DBVersionStatus'),
  creationTime?: string(name='CreationTime'),
  SQLSize?: long(name='SQLSize'),
  regionId?: string(name='RegionId'),
  expireTime?: string(name='ExpireTime'),
}

model DescribeDBClusterAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterAttributeResponseBody(name='body'),
}

async function describeDBClusterAttributeWithOptions(request: DescribeDBClusterAttributeRequest, runtime: Util.RuntimeOptions): DescribeDBClusterAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBClusterAttribute', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBClusterAttribute(request: DescribeDBClusterAttributeRequest): DescribeDBClusterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterAttributeWithOptions(request, runtime);
}

model DescribeDBClusterAuditLogCollectorRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBClusterId?: string(name='DBClusterId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeDBClusterAuditLogCollectorResponseBody = {
  collectorStatus?: string(name='CollectorStatus'),
  requestId?: string(name='RequestId'),
}

model DescribeDBClusterAuditLogCollectorResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterAuditLogCollectorResponseBody(name='body'),
}

async function describeDBClusterAuditLogCollectorWithOptions(request: DescribeDBClusterAuditLogCollectorRequest, runtime: Util.RuntimeOptions): DescribeDBClusterAuditLogCollectorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBClusterAuditLogCollector', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBClusterAuditLogCollector(request: DescribeDBClusterAuditLogCollectorRequest): DescribeDBClusterAuditLogCollectorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterAuditLogCollectorWithOptions(request, runtime);
}

model DescribeDBClusterAvailableResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  payType?: string(name='PayType'),
  DBType?: string(name='DBType'),
  DBVersion?: string(name='DBVersion'),
  DBNodeClass?: string(name='DBNodeClass'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
}

model DescribeDBClusterAvailableResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  availableZones?: [ 
    {
      supportedEngines?: [ 
        {
          engine?: string(name='Engine'),
          availableResources?: [ 
            {
              DBNodeClass?: string(name='DBNodeClass'),
              category?: string(name='Category'),
            }
          ](name='AvailableResources'),
        }
      ](name='SupportedEngines'),
      zoneId?: string(name='ZoneId'),
      regionId?: string(name='RegionId'),
    }
  ](name='AvailableZones'),
}

model DescribeDBClusterAvailableResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterAvailableResourcesResponseBody(name='body'),
}

async function describeDBClusterAvailableResourcesWithOptions(request: DescribeDBClusterAvailableResourcesRequest, runtime: Util.RuntimeOptions): DescribeDBClusterAvailableResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBClusterAvailableResources', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBClusterAvailableResources(request: DescribeDBClusterAvailableResourcesRequest): DescribeDBClusterAvailableResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterAvailableResourcesWithOptions(request, runtime);
}

model DescribeDBClusterEndpointsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  DBEndpointId?: string(name='DBEndpointId'),
}

model DescribeDBClusterEndpointsResponseBody = {
  requestId?: string(name='RequestId'),
  items?: [ 
    {
      nodeWithRoles?: string(name='NodeWithRoles'),
      nodes?: string(name='Nodes'),
      readWriteMode?: string(name='ReadWriteMode'),
      addressItems?: [ 
        {
          vSwitchId?: string(name='VSwitchId'),
          privateZoneConnectionString?: string(name='PrivateZoneConnectionString'),
          connectionString?: string(name='ConnectionString'),
          netType?: string(name='NetType'),
          port?: string(name='Port'),
          vpcInstanceId?: string(name='VpcInstanceId'),
          VPCId?: string(name='VPCId'),
          IPAddress?: string(name='IPAddress'),
        }
      ](name='AddressItems'),
      DBEndpointId?: string(name='DBEndpointId'),
      endpointConfig?: string(name='EndpointConfig'),
      DBEndpointDescription?: string(name='DBEndpointDescription'),
      endpointType?: string(name='EndpointType'),
      autoAddNewNodes?: string(name='AutoAddNewNodes'),
    }
  ](name='Items'),
}

model DescribeDBClusterEndpointsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterEndpointsResponseBody(name='body'),
}

async function describeDBClusterEndpointsWithOptions(request: DescribeDBClusterEndpointsRequest, runtime: Util.RuntimeOptions): DescribeDBClusterEndpointsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBClusterEndpoints', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBClusterEndpoints(request: DescribeDBClusterEndpointsRequest): DescribeDBClusterEndpointsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterEndpointsWithOptions(request, runtime);
}

model DescribeDBClusterMigrationRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeDBClusterMigrationResponseBody = {
  DBClusterEndpointList?: [ 
    {
      addressItems?: [ 
        {
          vSwitchId?: string(name='VSwitchId'),
          connectionString?: string(name='ConnectionString'),
          netType?: string(name='NetType'),
          port?: string(name='Port'),
          VPCId?: string(name='VPCId'),
          IPAddress?: string(name='IPAddress'),
        }
      ](name='AddressItems'),
      DBEndpointId?: string(name='DBEndpointId'),
      endpointType?: string(name='EndpointType'),
    }
  ](name='DBClusterEndpointList'),
  comment?: string(name='Comment'),
  requestId?: string(name='RequestId'),
  expiredTime?: string(name='ExpiredTime'),
  DBClusterId?: string(name='DBClusterId'),
  topologies?: string(name='Topologies'),
  rdsReadWriteMode?: string(name='RdsReadWriteMode'),
  sourceRDSDBInstanceId?: string(name='SourceRDSDBInstanceId'),
  DBClusterReadWriteMode?: string(name='DBClusterReadWriteMode'),
  delayedSeconds?: int32(name='DelayedSeconds'),
  migrationStatus?: string(name='MigrationStatus'),
  rdsEndpointList?: [ 
    {
      addressItems?: [ 
        {
          vSwitchId?: string(name='VSwitchId'),
          connectionString?: string(name='ConnectionString'),
          netType?: string(name='NetType'),
          port?: string(name='Port'),
          VPCId?: string(name='VPCId'),
          IPAddress?: string(name='IPAddress'),
        }
      ](name='AddressItems'),
      DBEndpointId?: string(name='DBEndpointId'),
      endpointType?: string(name='EndpointType'),
    }
  ](name='RdsEndpointList'),
}

model DescribeDBClusterMigrationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterMigrationResponseBody(name='body'),
}

async function describeDBClusterMigrationWithOptions(request: DescribeDBClusterMigrationRequest, runtime: Util.RuntimeOptions): DescribeDBClusterMigrationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBClusterMigration', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBClusterMigration(request: DescribeDBClusterMigrationRequest): DescribeDBClusterMigrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterMigrationWithOptions(request, runtime);
}

model DescribeDBClusterMonitorRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBClusterId?: string(name='DBClusterId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeDBClusterMonitorResponseBody = {
  requestId?: string(name='RequestId'),
  period?: string(name='Period'),
}

model DescribeDBClusterMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterMonitorResponseBody(name='body'),
}

async function describeDBClusterMonitorWithOptions(request: DescribeDBClusterMonitorRequest, runtime: Util.RuntimeOptions): DescribeDBClusterMonitorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBClusterMonitor', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBClusterMonitor(request: DescribeDBClusterMonitorRequest): DescribeDBClusterMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterMonitorWithOptions(request, runtime);
}

model DescribeDBClusterParametersRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeDBClusterParametersResponseBody = {
  runningParameters?: {
    parameter?: [ 
    {
      checkingCode?: string(name='CheckingCode'),
      dataType?: string(name='DataType'),
      parameterName?: string(name='ParameterName'),
      parameterValue?: string(name='ParameterValue'),
      forceRestart?: boolean(name='ForceRestart'),
      parameterDescription?: string(name='ParameterDescription'),
      parameterStatus?: string(name='ParameterStatus'),
      defaultParameterValue?: string(name='DefaultParameterValue'),
      isModifiable?: boolean(name='IsModifiable'),
    }
  ](name='Parameter')
  }(name='RunningParameters'),
  DBVersion?: string(name='DBVersion'),
  requestId?: string(name='RequestId'),
  DBType?: string(name='DBType'),
  engine?: string(name='Engine'),
}

model DescribeDBClusterParametersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterParametersResponseBody(name='body'),
}

async function describeDBClusterParametersWithOptions(request: DescribeDBClusterParametersRequest, runtime: Util.RuntimeOptions): DescribeDBClusterParametersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBClusterParameters', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBClusterParameters(request: DescribeDBClusterParametersRequest): DescribeDBClusterParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterParametersWithOptions(request, runtime);
}

model DescribeDBClusterPerformanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  key?: string(name='Key'),
  metric?: string(name='Metric'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDBClusterPerformanceResponseBody = {
  performanceKeys?: {
    performanceItem?: [ 
    {
      metricName?: string(name='MetricName'),
      measurement?: string(name='Measurement'),
      points?: {
        performanceItemValue?: [ 
        {
          value?: string(name='Value'),
          timestamp?: long(name='Timestamp'),
        }
      ](name='PerformanceItemValue')
      }(name='Points'),
      DBNodeId?: string(name='DBNodeId'),
    }
  ](name='PerformanceItem')
  }(name='PerformanceKeys'),
  DBVersion?: string(name='DBVersion'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  DBClusterId?: string(name='DBClusterId'),
  DBType?: string(name='DBType'),
}

model DescribeDBClusterPerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterPerformanceResponseBody(name='body'),
}

async function describeDBClusterPerformanceWithOptions(request: DescribeDBClusterPerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBClusterPerformanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBClusterPerformance', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBClusterPerformance(request: DescribeDBClusterPerformanceRequest): DescribeDBClusterPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterPerformanceWithOptions(request, runtime);
}

model DescribeDBClustersRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterIds?: string(name='DBClusterIds'),
  DBClusterDescription?: string(name='DBClusterDescription'),
  DBClusterStatus?: string(name='DBClusterStatus'),
  DBType?: string(name='DBType'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeDBClustersResponseBody = {
  totalRecordCount?: int32(name='TotalRecordCount'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  items?: {
    DBCluster?: [ 
    {
      vpcId?: string(name='VpcId'),
      expireTime?: string(name='ExpireTime'),
      expired?: string(name='Expired'),
      DBNodeNumber?: int32(name='DBNodeNumber'),
      createTime?: string(name='CreateTime'),
      payType?: string(name='PayType'),
      DBNodeClass?: string(name='DBNodeClass'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      DBType?: string(name='DBType'),
      lockMode?: string(name='LockMode'),
      DBNodes?: {
        DBNode?: [ 
        {
          DBNodeClass?: string(name='DBNodeClass'),
          zoneId?: string(name='ZoneId'),
          DBNodeRole?: string(name='DBNodeRole'),
          DBNodeId?: string(name='DBNodeId'),
          regionId?: string(name='RegionId'),
        }
      ](name='DBNode')
      }(name='DBNodes'),
      regionId?: string(name='RegionId'),
      deletionLock?: int32(name='DeletionLock'),
      DBVersion?: string(name='DBVersion'),
      DBClusterId?: string(name='DBClusterId'),
      DBClusterStatus?: string(name='DBClusterStatus'),
      resourceGroupId?: string(name='ResourceGroupId'),
      storageUsed?: long(name='StorageUsed'),
      DBClusterNetworkType?: string(name='DBClusterNetworkType'),
      DBClusterDescription?: string(name='DBClusterDescription'),
      zoneId?: string(name='ZoneId'),
      engine?: string(name='Engine'),
    }
  ](name='DBCluster')
  }(name='Items'),
}

model DescribeDBClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClustersResponseBody(name='body'),
}

async function describeDBClustersWithOptions(request: DescribeDBClustersRequest, runtime: Util.RuntimeOptions): DescribeDBClustersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBClusters', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBClusters(request: DescribeDBClustersRequest): DescribeDBClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClustersWithOptions(request, runtime);
}

model DescribeDBClusterSSLRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeDBClusterSSLResponseBody = {
  requestId?: string(name='RequestId'),
  items?: [ 
    {
      SSLExpireTime?: string(name='SSLExpireTime'),
      SSLEnabled?: string(name='SSLEnabled'),
      SSLConnectionString?: string(name='SSLConnectionString'),
      DBEndpointId?: string(name='DBEndpointId'),
    }
  ](name='Items'),
}

model DescribeDBClusterSSLResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterSSLResponseBody(name='body'),
}

async function describeDBClusterSSLWithOptions(request: DescribeDBClusterSSLRequest, runtime: Util.RuntimeOptions): DescribeDBClusterSSLResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBClusterSSL', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBClusterSSL(request: DescribeDBClusterSSLRequest): DescribeDBClusterSSLResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterSSLWithOptions(request, runtime);
}

model DescribeDBClustersWithBackupsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterIds?: string(name='DBClusterIds'),
  DBClusterDescription?: string(name='DBClusterDescription'),
  DBType?: string(name='DBType'),
  isDeleted?: int32(name='IsDeleted'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  DBVersion?: string(name='DBVersion'),
}

model DescribeDBClustersWithBackupsResponseBody = {
  totalRecordCount?: int32(name='TotalRecordCount'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  items?: {
    DBCluster?: [ 
    {
      vpcId?: string(name='VpcId'),
      deletedTime?: string(name='DeletedTime'),
      expireTime?: string(name='ExpireTime'),
      expired?: string(name='Expired'),
      createTime?: string(name='CreateTime'),
      payType?: string(name='PayType'),
      DBNodeClass?: string(name='DBNodeClass'),
      DBType?: string(name='DBType'),
      lockMode?: string(name='LockMode'),
      regionId?: string(name='RegionId'),
      DBVersion?: string(name='DBVersion'),
      deletionLock?: int32(name='DeletionLock'),
      DBClusterId?: string(name='DBClusterId'),
      DBClusterStatus?: string(name='DBClusterStatus'),
      isDeleted?: int32(name='IsDeleted'),
      DBClusterNetworkType?: string(name='DBClusterNetworkType'),
      DBClusterDescription?: string(name='DBClusterDescription'),
      zoneId?: string(name='ZoneId'),
      engine?: string(name='Engine'),
    }
  ](name='DBCluster')
  }(name='Items'),
}

model DescribeDBClustersWithBackupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClustersWithBackupsResponseBody(name='body'),
}

async function describeDBClustersWithBackupsWithOptions(request: DescribeDBClustersWithBackupsRequest, runtime: Util.RuntimeOptions): DescribeDBClustersWithBackupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBClustersWithBackups', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBClustersWithBackups(request: DescribeDBClustersWithBackupsRequest): DescribeDBClustersWithBackupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClustersWithBackupsWithOptions(request, runtime);
}

model DescribeDBClusterTDERequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeDBClusterTDEResponseBody = {
  TDEStatus?: string(name='TDEStatus'),
  requestId?: string(name='RequestId'),
  DBClusterId?: string(name='DBClusterId'),
  encryptionKey?: string(name='EncryptionKey'),
}

model DescribeDBClusterTDEResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterTDEResponseBody(name='body'),
}

async function describeDBClusterTDEWithOptions(request: DescribeDBClusterTDERequest, runtime: Util.RuntimeOptions): DescribeDBClusterTDEResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBClusterTDE', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBClusterTDE(request: DescribeDBClusterTDERequest): DescribeDBClusterTDEResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterTDEWithOptions(request, runtime);
}

model DescribeDBClusterVersionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeDBClusterVersionResponseBody = {
  isLatestVersion?: string(name='IsLatestVersion'),
  DBVersion?: string(name='DBVersion'),
  DBRevisionVersion?: string(name='DBRevisionVersion'),
  requestId?: string(name='RequestId'),
  DBVersionStatus?: string(name='DBVersionStatus'),
  DBClusterId?: string(name='DBClusterId'),
  DBMinorVersion?: string(name='DBMinorVersion'),
}

model DescribeDBClusterVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterVersionResponseBody(name='body'),
}

async function describeDBClusterVersionWithOptions(request: DescribeDBClusterVersionRequest, runtime: Util.RuntimeOptions): DescribeDBClusterVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBClusterVersion', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBClusterVersion(request: DescribeDBClusterVersionRequest): DescribeDBClusterVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterVersionWithOptions(request, runtime);
}

model DescribeDBInitializeVariableRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeDBInitializeVariableResponseBody = {
  variables?: {
    variable?: [ 
    {
      charset?: string(name='Charset'),
      collate?: string(name='Collate'),
      ctype?: string(name='Ctype'),
    }
  ](name='Variable')
  }(name='Variables'),
  DBVersion?: string(name='DBVersion'),
  requestId?: string(name='RequestId'),
  DBType?: string(name='DBType'),
}

model DescribeDBInitializeVariableResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInitializeVariableResponseBody(name='body'),
}

async function describeDBInitializeVariableWithOptions(request: DescribeDBInitializeVariableRequest, runtime: Util.RuntimeOptions): DescribeDBInitializeVariableResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInitializeVariable', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInitializeVariable(request: DescribeDBInitializeVariableRequest): DescribeDBInitializeVariableResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInitializeVariableWithOptions(request, runtime);
}

model DescribeDBLinksRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  DBLinkName?: string(name='DBLinkName'),
}

model DescribeDBLinksResponseBody = {
  requestId?: string(name='RequestId'),
  DBLinkInfos?: [ 
    {
      DBInstanceName?: string(name='DBInstanceName'),
      DBLinkName?: string(name='DBLinkName'),
      sourceDBName?: string(name='SourceDBName'),
      targetDBName?: string(name='TargetDBName'),
      targetDBInstanceName?: string(name='TargetDBInstanceName'),
      targetAccount?: string(name='TargetAccount'),
    }
  ](name='DBLinkInfos'),
  DBInstanceName?: string(name='DBInstanceName'),
}

model DescribeDBLinksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBLinksResponseBody(name='body'),
}

async function describeDBLinksWithOptions(request: DescribeDBLinksRequest, runtime: Util.RuntimeOptions): DescribeDBLinksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBLinks', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBLinks(request: DescribeDBLinksRequest): DescribeDBLinksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBLinksWithOptions(request, runtime);
}

model DescribeDBNodePerformanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBNodeId?: string(name='DBNodeId'),
  key?: string(name='Key'),
  metric?: string(name='Metric'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeDBNodePerformanceResponseBody = {
  performanceKeys?: {
    performanceItem?: [ 
    {
      metricName?: string(name='MetricName'),
      measurement?: string(name='Measurement'),
      points?: {
        performanceItemValue?: [ 
        {
          value?: string(name='Value'),
          timestamp?: long(name='Timestamp'),
        }
      ](name='PerformanceItemValue')
      }(name='Points'),
    }
  ](name='PerformanceItem')
  }(name='PerformanceKeys'),
  DBVersion?: string(name='DBVersion'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  DBType?: string(name='DBType'),
  DBNodeId?: string(name='DBNodeId'),
}

model DescribeDBNodePerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBNodePerformanceResponseBody(name='body'),
}

async function describeDBNodePerformanceWithOptions(request: DescribeDBNodePerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBNodePerformanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBNodePerformance', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBNodePerformance(request: DescribeDBNodePerformanceRequest): DescribeDBNodePerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBNodePerformanceWithOptions(request, runtime);
}

model DescribeDetachedBackupsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  backupId?: string(name='BackupId'),
  backupStatus?: string(name='BackupStatus'),
  backupMode?: string(name='BackupMode'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeDetachedBackupsResponseBody = {
  totalRecordCount?: string(name='TotalRecordCount'),
  pageRecordCount?: string(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  pageNumber?: string(name='PageNumber'),
  items?: {
    backup?: [ 
    {
      backupSetSize?: string(name='BackupSetSize'),
      consistentTime?: string(name='ConsistentTime'),
      storeStatus?: string(name='StoreStatus'),
      backupStatus?: string(name='BackupStatus'),
      backupType?: string(name='BackupType'),
      backupStartTime?: string(name='BackupStartTime'),
      isAvail?: string(name='IsAvail'),
      backupEndTime?: string(name='BackupEndTime'),
      backupId?: string(name='BackupId'),
      DBClusterId?: string(name='DBClusterId'),
      backupsLevel?: string(name='BackupsLevel'),
      backupMode?: string(name='BackupMode'),
      backupMethod?: string(name='BackupMethod'),
    }
  ](name='Backup')
  }(name='Items'),
}

model DescribeDetachedBackupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDetachedBackupsResponseBody(name='body'),
}

async function describeDetachedBackupsWithOptions(request: DescribeDetachedBackupsRequest, runtime: Util.RuntimeOptions): DescribeDetachedBackupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDetachedBackups', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDetachedBackups(request: DescribeDetachedBackupsRequest): DescribeDetachedBackupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDetachedBackupsWithOptions(request, runtime);
}

model DescribeGlobalDatabaseNetworksRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeGlobalDatabaseNetworksResponseBody = {
  totalRecordCount?: int32(name='TotalRecordCount'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  items?: [ 
    {
      DBVersion?: string(name='DBVersion'),
      GDNId?: string(name='GDNId'),
      createTime?: string(name='CreateTime'),
      GDNStatus?: string(name='GDNStatus'),
      DBClusters?: [ 
        {
          DBClusterId?: string(name='DBClusterId'),
          role?: string(name='Role'),
          regionId?: string(name='RegionId'),
        }
      ](name='DBClusters'),
      DBType?: string(name='DBType'),
      GDNDescription?: string(name='GDNDescription'),
    }
  ](name='Items'),
}

model DescribeGlobalDatabaseNetworksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGlobalDatabaseNetworksResponseBody(name='body'),
}

async function describeGlobalDatabaseNetworksWithOptions(request: DescribeGlobalDatabaseNetworksRequest, runtime: Util.RuntimeOptions): DescribeGlobalDatabaseNetworksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGlobalDatabaseNetworks', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGlobalDatabaseNetworks(request: DescribeGlobalDatabaseNetworksRequest): DescribeGlobalDatabaseNetworksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGlobalDatabaseNetworksWithOptions(request, runtime);
}

model DescribeLogBackupPolicyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeLogBackupPolicyResponseBody = {
  logBackupRetentionPeriod?: int32(name='LogBackupRetentionPeriod'),
  requestId?: string(name='RequestId'),
  enableBackupLog?: int32(name='EnableBackupLog'),
}

model DescribeLogBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLogBackupPolicyResponseBody(name='body'),
}

async function describeLogBackupPolicyWithOptions(request: DescribeLogBackupPolicyRequest, runtime: Util.RuntimeOptions): DescribeLogBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLogBackupPolicy', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLogBackupPolicy(request: DescribeLogBackupPolicyRequest): DescribeLogBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogBackupPolicyWithOptions(request, runtime);
}

model DescribeMetaListRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  backupId?: string(name='BackupId'),
  restoreTime?: string(name='RestoreTime'),
  getDbName?: string(name='GetDbName'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeMetaListResponseBody = {
  totalPageCount?: string(name='TotalPageCount'),
  totalRecordCount?: string(name='TotalRecordCount'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: string(name='PageNumber'),
  items?: [ 
    {
      database?: string(name='Database'),
      tables?: [ string ](name='Tables'),
    }
  ](name='Items'),
}

model DescribeMetaListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMetaListResponseBody(name='body'),
}

async function describeMetaListWithOptions(request: DescribeMetaListRequest, runtime: Util.RuntimeOptions): DescribeMetaListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMetaList', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMetaList(request: DescribeMetaListRequest): DescribeMetaListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMetaListWithOptions(request, runtime);
}

model DescribePendingMaintenanceActionRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  region?: string(name='Region'),
  taskType?: string(name='TaskType'),
  isHistory?: int32(name='IsHistory'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribePendingMaintenanceActionResponseBody = {
  totalRecordCount?: int32(name='TotalRecordCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  items?: [ 
    {
      status?: int32(name='Status'),
      prepareInterval?: string(name='PrepareInterval'),
      deadline?: string(name='Deadline'),
      DBType?: string(name='DBType'),
      taskType?: string(name='TaskType'),
      startTime?: string(name='StartTime'),
      DBVersion?: string(name='DBVersion'),
      modifiedTime?: string(name='ModifiedTime'),
      DBClusterId?: string(name='DBClusterId'),
      region?: string(name='Region'),
      resultInfo?: string(name='ResultInfo'),
      createdTime?: string(name='CreatedTime'),
      id?: int32(name='Id'),
      switchTime?: string(name='SwitchTime'),
    }
  ](name='Items'),
}

model DescribePendingMaintenanceActionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePendingMaintenanceActionResponseBody(name='body'),
}

async function describePendingMaintenanceActionWithOptions(request: DescribePendingMaintenanceActionRequest, runtime: Util.RuntimeOptions): DescribePendingMaintenanceActionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePendingMaintenanceAction', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePendingMaintenanceAction(request: DescribePendingMaintenanceActionRequest): DescribePendingMaintenanceActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePendingMaintenanceActionWithOptions(request, runtime);
}

model DescribePendingMaintenanceActionsRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  isHistory?: int32(name='IsHistory'),
}

model DescribePendingMaintenanceActionsResponseBody = {
  requestId?: string(name='RequestId'),
  typeList?: [ 
    {
      taskType?: string(name='TaskType'),
      count?: int32(name='Count'),
    }
  ](name='TypeList'),
}

model DescribePendingMaintenanceActionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePendingMaintenanceActionsResponseBody(name='body'),
}

async function describePendingMaintenanceActionsWithOptions(request: DescribePendingMaintenanceActionsRequest, runtime: Util.RuntimeOptions): DescribePendingMaintenanceActionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePendingMaintenanceActions', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePendingMaintenanceActions(request: DescribePendingMaintenanceActionsRequest): DescribePendingMaintenanceActionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePendingMaintenanceActionsWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: {
    region?: [ 
    {
      zones?: {
        zone?: [ 
        {
          zoneId?: string(name='ZoneId'),
          vpcEnabled?: boolean(name='VpcEnabled'),
        }
      ](name='Zone')
      }(name='Zones'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeScheduleTasksRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  status?: string(name='Status'),
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  taskAction?: string(name='TaskAction'),
}

model DescribeScheduleTasksResponseBody = {
  message?: string(name='Message'),
  data?: {
    timerInfos?: [ 
      {
        status?: string(name='Status'),
        action?: string(name='Action'),
        plannedEndTime?: string(name='PlannedEndTime'),
        plannedTime?: string(name='PlannedTime'),
        DBClusterId?: string(name='DBClusterId'),
        region?: string(name='Region'),
        plannedStartTime?: string(name='PlannedStartTime'),
        taskId?: string(name='TaskId'),
        orderId?: string(name='OrderId'),
      }
    ](name='TimerInfos'),
    totalRecordCount?: int32(name='TotalRecordCount'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model DescribeScheduleTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScheduleTasksResponseBody(name='body'),
}

async function describeScheduleTasksWithOptions(request: DescribeScheduleTasksRequest, runtime: Util.RuntimeOptions): DescribeScheduleTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeScheduleTasks', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeScheduleTasks(request: DescribeScheduleTasksRequest): DescribeScheduleTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScheduleTasksWithOptions(request, runtime);
}

model DescribeSlowLogRecordsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterId?: string(name='DBClusterId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  DBName?: string(name='DBName'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  SQLHASH?: string(name='SQLHASH'),
}

model DescribeSlowLogRecordsResponseBody = {
  totalRecordCount?: int32(name='TotalRecordCount'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  DBClusterId?: string(name='DBClusterId'),
  items?: {
    SQLSlowRecord?: [ 
    {
      executionStartTime?: string(name='ExecutionStartTime'),
      hostAddress?: string(name='HostAddress'),
      queryTimes?: long(name='QueryTimes'),
      SQLText?: string(name='SQLText'),
      returnRowCounts?: long(name='ReturnRowCounts'),
      parseRowCounts?: long(name='ParseRowCounts'),
      DBName?: string(name='DBName'),
      lockTimes?: long(name='LockTimes'),
      DBNodeId?: string(name='DBNodeId'),
    }
  ](name='SQLSlowRecord')
  }(name='Items'),
  engine?: string(name='Engine'),
}

model DescribeSlowLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowLogRecordsResponseBody(name='body'),
}

async function describeSlowLogRecordsWithOptions(request: DescribeSlowLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeSlowLogRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSlowLogRecords', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSlowLogRecords(request: DescribeSlowLogRecordsRequest): DescribeSlowLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowLogRecordsWithOptions(request, runtime);
}

model DescribeSQLExplorerPolicyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeSQLExplorerPolicyResponseBody = {
  requestId?: string(name='RequestId'),
  SQLCollectorStatus?: string(name='SQLCollectorStatus'),
}

model DescribeSQLExplorerPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLExplorerPolicyResponseBody(name='body'),
}

async function describeSQLExplorerPolicyWithOptions(request: DescribeSQLExplorerPolicyRequest, runtime: Util.RuntimeOptions): DescribeSQLExplorerPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSQLExplorerPolicy', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSQLExplorerPolicy(request: DescribeSQLExplorerPolicyRequest): DescribeSQLExplorerPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLExplorerPolicyWithOptions(request, runtime);
}

model DescribeSQLExplorerRetentionRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeSQLExplorerRetentionResponseBody = {
  configValue?: string(name='ConfigValue'),
  requestId?: string(name='RequestId'),
  DBInstanceID?: int32(name='DBInstanceID'),
  DBInstanceName?: string(name='DBInstanceName'),
}

model DescribeSQLExplorerRetentionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLExplorerRetentionResponseBody(name='body'),
}

async function describeSQLExplorerRetentionWithOptions(request: DescribeSQLExplorerRetentionRequest, runtime: Util.RuntimeOptions): DescribeSQLExplorerRetentionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSQLExplorerRetention', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSQLExplorerRetention(request: DescribeSQLExplorerRetentionRequest): DescribeSQLExplorerRetentionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLExplorerRetentionWithOptions(request, runtime);
}

model DescribeSQLExplorerVersionRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeSQLExplorerVersionResponseBody = {
  configValue?: string(name='ConfigValue'),
  requestId?: string(name='RequestId'),
  DBInstanceID?: int32(name='DBInstanceID'),
  DBInstanceName?: string(name='DBInstanceName'),
}

model DescribeSQLExplorerVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLExplorerVersionResponseBody(name='body'),
}

async function describeSQLExplorerVersionWithOptions(request: DescribeSQLExplorerVersionRequest, runtime: Util.RuntimeOptions): DescribeSQLExplorerVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSQLExplorerVersion', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSQLExplorerVersion(request: DescribeSQLExplorerVersionRequest): DescribeSQLExplorerVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLExplorerVersionWithOptions(request, runtime);
}

model DescribeSQLLogRecordsRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  maxRecordsPerPage?: int32(name='MaxRecordsPerPage'),
  pageNumbers?: int32(name='PageNumbers'),
  queryKeyword?: string(name='QueryKeyword'),
  hostAddress?: string(name='HostAddress'),
  DBName?: string(name='DBName'),
  tableName?: string(name='TableName'),
  sortKey?: string(name='SortKey'),
  sortMethod?: string(name='SortMethod'),
  minConsume?: long(name='MinConsume'),
  maxConsume?: long(name='MaxConsume'),
  minScanRows?: long(name='MinScanRows'),
  maxScanRows?: long(name='MaxScanRows'),
  state?: string(name='State'),
  sqlType?: string(name='SqlType'),
  accountName?: string(name='AccountName'),
  threadID?: string(name='ThreadID'),
  pagingID?: string(name='PagingID'),
  logicalOperator?: string(name='LogicalOperator'),
  childDBInstanceIDs?: string(name='ChildDBInstanceIDs'),
  jobId?: string(name='JobId'),
}

model DescribeSQLLogRecordsResponseBody = {
  itemsNumbers?: int32(name='ItemsNumbers'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  maxRecordsPerPage?: int32(name='MaxRecordsPerPage'),
  DBInstanceID?: string(name='DBInstanceID'),
  totalRecords?: int32(name='TotalRecords'),
  items?: {
    SQLLogRecord?: [ 
    {
      hostAddress?: string(name='HostAddress'),
      SQLText?: string(name='SQLText'),
      updateRows?: long(name='UpdateRows'),
      state?: string(name='State'),
      threadID?: int32(name='ThreadID'),
      originTime?: string(name='OriginTime'),
      insName?: string(name='InsName'),
      scanRows?: long(name='ScanRows'),
      consume?: long(name='Consume'),
      DBName?: string(name='DBName'),
      executeTime?: string(name='ExecuteTime'),
      vip?: string(name='Vip'),
      accountName?: string(name='AccountName'),
      sqlType?: string(name='SqlType'),
    }
  ](name='SQLLogRecord')
  }(name='Items'),
  pageNumbers?: int32(name='PageNumbers'),
  finish?: string(name='Finish'),
  jobId?: string(name='JobId'),
  DBInstanceName?: string(name='DBInstanceName'),
  pagingID?: string(name='PagingID'),
}

model DescribeSQLLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLLogRecordsResponseBody(name='body'),
}

async function describeSQLLogRecordsWithOptions(request: DescribeSQLLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeSQLLogRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSQLLogRecords', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSQLLogRecords(request: DescribeSQLLogRecordsRequest): DescribeSQLLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogRecordsWithOptions(request, runtime);
}

model DescribeSQLLogTemplatesRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  maxRecordsPerPage?: int32(name='MaxRecordsPerPage'),
  pageNumbers?: int32(name='PageNumbers'),
  minAvgConsume?: float(name='MinAvgConsume'),
  maxAvgConsume?: float(name='MaxAvgConsume'),
  minAvgScanRows?: float(name='MinAvgScanRows'),
  maxAvgScanRows?: float(name='MaxAvgScanRows'),
  pagingId?: string(name='PagingId'),
  sortKey?: string(name='SortKey'),
  sortMethod?: string(name='SortMethod'),
  sqlType?: string(name='SqlType'),
  jobId?: string(name='JobId'),
  childDBInstanceIDs?: string(name='ChildDBInstanceIDs'),
}

model DescribeSQLLogTemplatesResponseBody = {
  itemsNumbers?: int32(name='ItemsNumbers'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  maxRecordsPerPage?: int32(name='MaxRecordsPerPage'),
  DBInstanceID?: int32(name='DBInstanceID'),
  totalRecords?: int32(name='TotalRecords'),
  items?: {
    template?: [ 
    {
      totalConsume?: long(name='TotalConsume'),
      avgUpdateRows?: float(name='AvgUpdateRows'),
      totalScanRows?: long(name='TotalScanRows'),
      template?: string(name='Template'),
      templateHash?: string(name='TemplateHash'),
      itemID?: int32(name='ItemID'),
      totalUpdateRows?: long(name='TotalUpdateRows'),
      totalCounts?: long(name='TotalCounts'),
      avgScanRows?: float(name='AvgScanRows'),
      sqlType?: string(name='SqlType'),
      avgConsume?: float(name='AvgConsume'),
    }
  ](name='Template')
  }(name='Items'),
  pageNumbers?: int32(name='PageNumbers'),
  finish?: string(name='Finish'),
  jobId?: string(name='JobId'),
  DBInstanceName?: string(name='DBInstanceName'),
  pagingID?: string(name='PagingID'),
}

model DescribeSQLLogTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLLogTemplatesResponseBody(name='body'),
}

async function describeSQLLogTemplatesWithOptions(request: DescribeSQLLogTemplatesRequest, runtime: Util.RuntimeOptions): DescribeSQLLogTemplatesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSQLLogTemplates', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSQLLogTemplates(request: DescribeSQLLogTemplatesRequest): DescribeSQLLogTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogTemplatesWithOptions(request, runtime);
}

model DescribeSqlLogTrialStatusRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeSqlLogTrialStatusResponseBody = {
  requestId?: string(name='RequestId'),
  everTrialed?: string(name='EverTrialed'),
  openTrial?: string(name='OpenTrial'),
  remainDays?: string(name='RemainDays'),
  DBInstanceName?: string(name='DBInstanceName'),
  usedDays?: string(name='UsedDays'),
}

model DescribeSqlLogTrialStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSqlLogTrialStatusResponseBody(name='body'),
}

async function describeSqlLogTrialStatusWithOptions(request: DescribeSqlLogTrialStatusRequest, runtime: Util.RuntimeOptions): DescribeSqlLogTrialStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSqlLogTrialStatus', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSqlLogTrialStatus(request: DescribeSqlLogTrialStatusRequest): DescribeSqlLogTrialStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSqlLogTrialStatusWithOptions(request, runtime);
}

model DescribeTasksRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  DBNodeId?: string(name='DBNodeId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  status?: string(name='Status'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeTasksResponseBody = {
  totalRecordCount?: int32(name='TotalRecordCount'),
  pageRecordCount?: int32(name='PageRecordCount'),
  tasks?: {
    task?: [ 
    {
      finishTime?: string(name='FinishTime'),
      stepsInfo?: string(name='StepsInfo'),
      progress?: int32(name='Progress'),
      expectedFinishTime?: string(name='ExpectedFinishTime'),
      beginTime?: string(name='BeginTime'),
      taskErrorCode?: string(name='TaskErrorCode'),
      progressInfo?: string(name='ProgressInfo'),
      currentStepName?: string(name='CurrentStepName'),
      stepProgressInfo?: string(name='StepProgressInfo'),
      taskErrorMessage?: string(name='TaskErrorMessage'),
      taskAction?: string(name='TaskAction'),
      DBName?: string(name='DBName'),
      remain?: int32(name='Remain'),
      taskId?: string(name='TaskId'),
    }
  ](name='Task')
  }(name='Tasks'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  startTime?: string(name='StartTime'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTasksResponseBody(name='body'),
}

async function describeTasksWithOptions(request: DescribeTasksRequest, runtime: Util.RuntimeOptions): DescribeTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTasks', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTasks(request: DescribeTasksRequest): DescribeTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTasksWithOptions(request, runtime);
}

model FailoverDBClusterRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  targetDBNodeId?: string(name='TargetDBNodeId'),
  clientToken?: string(name='ClientToken'),
}

model FailoverDBClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model FailoverDBClusterResponse = {
  headers: map[string]string(name='headers'),
  body: FailoverDBClusterResponseBody(name='body'),
}

async function failoverDBClusterWithOptions(request: FailoverDBClusterRequest, runtime: Util.RuntimeOptions): FailoverDBClusterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('FailoverDBCluster', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function failoverDBCluster(request: FailoverDBClusterRequest): FailoverDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return failoverDBClusterWithOptions(request, runtime);
}

model GrantAccountPrivilegeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  accountName?: string(name='AccountName'),
  DBName?: string(name='DBName'),
  accountPrivilege?: string(name='AccountPrivilege'),
}

model GrantAccountPrivilegeResponseBody = {
  requestId?: string(name='RequestId'),
}

model GrantAccountPrivilegeResponse = {
  headers: map[string]string(name='headers'),
  body: GrantAccountPrivilegeResponseBody(name='body'),
}

async function grantAccountPrivilegeWithOptions(request: GrantAccountPrivilegeRequest, runtime: Util.RuntimeOptions): GrantAccountPrivilegeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GrantAccountPrivilege', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function grantAccountPrivilege(request: GrantAccountPrivilegeRequest): GrantAccountPrivilegeResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantAccountPrivilegeWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  nextToken?: string(name='NextToken'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceType?: string(name='ResourceType'),
      tagValue?: string(name='TagValue'),
      resourceId?: string(name='ResourceId'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagResources', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ModifyAccountDescriptionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  accountName?: string(name='AccountName'),
  accountDescription?: string(name='AccountDescription'),
}

model ModifyAccountDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccountDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountDescriptionResponseBody(name='body'),
}

async function modifyAccountDescriptionWithOptions(request: ModifyAccountDescriptionRequest, runtime: Util.RuntimeOptions): ModifyAccountDescriptionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAccountDescription', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountDescriptionWithOptions(request, runtime);
}

model ModifyAccountPasswordRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  accountName?: string(name='AccountName'),
  newAccountPassword?: string(name='NewAccountPassword'),
}

model ModifyAccountPasswordResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountPasswordResponseBody(name='body'),
}

async function modifyAccountPasswordWithOptions(request: ModifyAccountPasswordRequest, runtime: Util.RuntimeOptions): ModifyAccountPasswordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAccountPassword', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAccountPassword(request: ModifyAccountPasswordRequest): ModifyAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountPasswordWithOptions(request, runtime);
}

model ModifyAutoRenewAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterIds?: string(name='DBClusterIds'),
  regionId?: string(name='RegionId'),
  renewalStatus?: string(name='RenewalStatus'),
  duration?: string(name='Duration'),
  periodUnit?: string(name='PeriodUnit'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model ModifyAutoRenewAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAutoRenewAttributeResponseBody(name='body'),
}

async function modifyAutoRenewAttributeWithOptions(request: ModifyAutoRenewAttributeRequest, runtime: Util.RuntimeOptions): ModifyAutoRenewAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAutoRenewAttribute', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAutoRenewAttribute(request: ModifyAutoRenewAttributeRequest): ModifyAutoRenewAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAutoRenewAttributeWithOptions(request, runtime);
}

model ModifyBackupPolicyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
  backupRetentionPeriod?: string(name='BackupRetentionPeriod'),
  dataLevel1BackupRetentionPeriod?: string(name='DataLevel1BackupRetentionPeriod'),
  dataLevel2BackupRetentionPeriod?: string(name='DataLevel2BackupRetentionPeriod'),
  backupRetentionPolicyOnClusterDeletion?: string(name='BackupRetentionPolicyOnClusterDeletion'),
}

model ModifyBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBackupPolicyResponseBody(name='body'),
}

async function modifyBackupPolicyWithOptions(request: ModifyBackupPolicyRequest, runtime: Util.RuntimeOptions): ModifyBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyBackupPolicy', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBackupPolicyWithOptions(request, runtime);
}

model ModifyDBClusterAccessWhitelistRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  securityIps?: string(name='SecurityIps'),
  DBClusterIPArrayName?: string(name='DBClusterIPArrayName'),
  DBClusterIPArrayAttribute?: string(name='DBClusterIPArrayAttribute'),
  whiteListType?: string(name='WhiteListType'),
  securityGroupIds?: string(name='SecurityGroupIds'),
  modifyMode?: string(name='ModifyMode'),
}

model ModifyDBClusterAccessWhitelistResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterAccessWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterAccessWhitelistResponseBody(name='body'),
}

async function modifyDBClusterAccessWhitelistWithOptions(request: ModifyDBClusterAccessWhitelistRequest, runtime: Util.RuntimeOptions): ModifyDBClusterAccessWhitelistResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBClusterAccessWhitelist', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBClusterAccessWhitelist(request: ModifyDBClusterAccessWhitelistRequest): ModifyDBClusterAccessWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterAccessWhitelistWithOptions(request, runtime);
}

model ModifyDBClusterAuditLogCollectorRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBClusterId?: string(name='DBClusterId'),
  collectorStatus?: string(name='CollectorStatus'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ModifyDBClusterAuditLogCollectorResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterAuditLogCollectorResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterAuditLogCollectorResponseBody(name='body'),
}

async function modifyDBClusterAuditLogCollectorWithOptions(request: ModifyDBClusterAuditLogCollectorRequest, runtime: Util.RuntimeOptions): ModifyDBClusterAuditLogCollectorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBClusterAuditLogCollector', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBClusterAuditLogCollector(request: ModifyDBClusterAuditLogCollectorRequest): ModifyDBClusterAuditLogCollectorResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterAuditLogCollectorWithOptions(request, runtime);
}

model ModifyDBClusterDescriptionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  DBClusterDescription?: string(name='DBClusterDescription'),
}

model ModifyDBClusterDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterDescriptionResponseBody(name='body'),
}

async function modifyDBClusterDescriptionWithOptions(request: ModifyDBClusterDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDBClusterDescriptionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBClusterDescription', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBClusterDescription(request: ModifyDBClusterDescriptionRequest): ModifyDBClusterDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterDescriptionWithOptions(request, runtime);
}

model ModifyDBClusterEndpointRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  DBEndpointId?: string(name='DBEndpointId'),
  nodes?: string(name='Nodes'),
  readWriteMode?: string(name='ReadWriteMode'),
  autoAddNewNodes?: string(name='AutoAddNewNodes'),
  endpointConfig?: string(name='EndpointConfig'),
  DBEndpointDescription?: string(name='DBEndpointDescription'),
}

model ModifyDBClusterEndpointResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterEndpointResponseBody(name='body'),
}

async function modifyDBClusterEndpointWithOptions(request: ModifyDBClusterEndpointRequest, runtime: Util.RuntimeOptions): ModifyDBClusterEndpointResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBClusterEndpoint', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBClusterEndpoint(request: ModifyDBClusterEndpointRequest): ModifyDBClusterEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterEndpointWithOptions(request, runtime);
}

model ModifyDBClusterMaintainTimeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  maintainTime?: string(name='MaintainTime'),
}

model ModifyDBClusterMaintainTimeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterMaintainTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterMaintainTimeResponseBody(name='body'),
}

async function modifyDBClusterMaintainTimeWithOptions(request: ModifyDBClusterMaintainTimeRequest, runtime: Util.RuntimeOptions): ModifyDBClusterMaintainTimeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBClusterMaintainTime', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBClusterMaintainTime(request: ModifyDBClusterMaintainTimeRequest): ModifyDBClusterMaintainTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterMaintainTimeWithOptions(request, runtime);
}

model ModifyDBClusterMigrationRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  sourceRDSDBInstanceId?: string(name='SourceRDSDBInstanceId'),
  newMasterInstanceId?: string(name='NewMasterInstanceId'),
  swapConnectionString?: string(name='SwapConnectionString'),
}

model ModifyDBClusterMigrationResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterMigrationResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterMigrationResponseBody(name='body'),
}

async function modifyDBClusterMigrationWithOptions(request: ModifyDBClusterMigrationRequest, runtime: Util.RuntimeOptions): ModifyDBClusterMigrationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBClusterMigration', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBClusterMigration(request: ModifyDBClusterMigrationRequest): ModifyDBClusterMigrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterMigrationWithOptions(request, runtime);
}

model ModifyDBClusterMonitorRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBClusterId?: string(name='DBClusterId'),
  period?: string(name='Period'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ModifyDBClusterMonitorResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterMonitorResponseBody(name='body'),
}

async function modifyDBClusterMonitorWithOptions(request: ModifyDBClusterMonitorRequest, runtime: Util.RuntimeOptions): ModifyDBClusterMonitorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBClusterMonitor', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBClusterMonitor(request: ModifyDBClusterMonitorRequest): ModifyDBClusterMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterMonitorWithOptions(request, runtime);
}

model ModifyDBClusterParametersRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  parameters?: string(name='Parameters'),
  effectiveTime?: string(name='EffectiveTime'),
}

model ModifyDBClusterParametersResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterParametersResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterParametersResponseBody(name='body'),
}

async function modifyDBClusterParametersWithOptions(request: ModifyDBClusterParametersRequest, runtime: Util.RuntimeOptions): ModifyDBClusterParametersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBClusterParameters', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBClusterParameters(request: ModifyDBClusterParametersRequest): ModifyDBClusterParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterParametersWithOptions(request, runtime);
}

model ModifyDBClusterPrimaryZoneRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  zoneId?: string(name='ZoneId'),
  vSwitchId?: string(name='VSwitchId'),
  plannedStartTime?: string(name='PlannedStartTime'),
  plannedEndTime?: string(name='PlannedEndTime'),
  fromTimeService?: boolean(name='FromTimeService'),
}

model ModifyDBClusterPrimaryZoneResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterPrimaryZoneResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterPrimaryZoneResponseBody(name='body'),
}

async function modifyDBClusterPrimaryZoneWithOptions(request: ModifyDBClusterPrimaryZoneRequest, runtime: Util.RuntimeOptions): ModifyDBClusterPrimaryZoneResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBClusterPrimaryZone', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBClusterPrimaryZone(request: ModifyDBClusterPrimaryZoneRequest): ModifyDBClusterPrimaryZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterPrimaryZoneWithOptions(request, runtime);
}

model ModifyDBClusterSSLRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  SSLEnabled?: string(name='SSLEnabled'),
  DBEndpointId?: string(name='DBEndpointId'),
  netType?: string(name='NetType'),
}

model ModifyDBClusterSSLResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterSSLResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterSSLResponseBody(name='body'),
}

async function modifyDBClusterSSLWithOptions(request: ModifyDBClusterSSLRequest, runtime: Util.RuntimeOptions): ModifyDBClusterSSLResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBClusterSSL', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBClusterSSL(request: ModifyDBClusterSSLRequest): ModifyDBClusterSSLResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterSSLWithOptions(request, runtime);
}

model ModifyDBClusterTDERequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  TDEStatus?: string(name='TDEStatus'),
  roleArn?: string(name='RoleArn'),
  encryptionKey?: string(name='EncryptionKey'),
}

model ModifyDBClusterTDEResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterTDEResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterTDEResponseBody(name='body'),
}

async function modifyDBClusterTDEWithOptions(request: ModifyDBClusterTDERequest, runtime: Util.RuntimeOptions): ModifyDBClusterTDEResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBClusterTDE', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBClusterTDE(request: ModifyDBClusterTDERequest): ModifyDBClusterTDEResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterTDEWithOptions(request, runtime);
}

model ModifyDBDescriptionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  DBName?: string(name='DBName'),
  DBDescription?: string(name='DBDescription'),
}

model ModifyDBDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBDescriptionResponseBody(name='body'),
}

async function modifyDBDescriptionWithOptions(request: ModifyDBDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDBDescriptionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBDescription', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBDescription(request: ModifyDBDescriptionRequest): ModifyDBDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBDescriptionWithOptions(request, runtime);
}

model ModifyDBEndpointAddressRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  DBEndpointId?: string(name='DBEndpointId'),
  netType?: string(name='NetType'),
  connectionStringPrefix?: string(name='ConnectionStringPrefix'),
  privateZoneAddressPrefix?: string(name='PrivateZoneAddressPrefix'),
  privateZoneName?: string(name='PrivateZoneName'),
  port?: string(name='Port'),
}

model ModifyDBEndpointAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBEndpointAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBEndpointAddressResponseBody(name='body'),
}

async function modifyDBEndpointAddressWithOptions(request: ModifyDBEndpointAddressRequest, runtime: Util.RuntimeOptions): ModifyDBEndpointAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBEndpointAddress', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBEndpointAddress(request: ModifyDBEndpointAddressRequest): ModifyDBEndpointAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBEndpointAddressWithOptions(request, runtime);
}

model ModifyDBNodeClassRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  modifyType?: string(name='ModifyType'),
  DBNodeTargetClass?: string(name='DBNodeTargetClass'),
  clientToken?: string(name='ClientToken'),
  plannedStartTime?: string(name='PlannedStartTime'),
  plannedEndTime?: string(name='PlannedEndTime'),
}

model ModifyDBNodeClassResponseBody = {
  requestId?: string(name='RequestId'),
  DBClusterId?: string(name='DBClusterId'),
  orderId?: string(name='OrderId'),
}

model ModifyDBNodeClassResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBNodeClassResponseBody(name='body'),
}

async function modifyDBNodeClassWithOptions(request: ModifyDBNodeClassRequest, runtime: Util.RuntimeOptions): ModifyDBNodeClassResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBNodeClass', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBNodeClass(request: ModifyDBNodeClassRequest): ModifyDBNodeClassResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBNodeClassWithOptions(request, runtime);
}

model ModifyLogBackupPolicyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  logBackupRetentionPeriod?: string(name='LogBackupRetentionPeriod'),
}

model ModifyLogBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyLogBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLogBackupPolicyResponseBody(name='body'),
}

async function modifyLogBackupPolicyWithOptions(request: ModifyLogBackupPolicyRequest, runtime: Util.RuntimeOptions): ModifyLogBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyLogBackupPolicy', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyLogBackupPolicy(request: ModifyLogBackupPolicyRequest): ModifyLogBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLogBackupPolicyWithOptions(request, runtime);
}

model ModifyPendingMaintenanceActionRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  ids?: string(name='Ids'),
  switchTime?: string(name='SwitchTime'),
}

model ModifyPendingMaintenanceActionResponseBody = {
  requestId?: string(name='RequestId'),
  ids?: string(name='Ids'),
}

model ModifyPendingMaintenanceActionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPendingMaintenanceActionResponseBody(name='body'),
}

async function modifyPendingMaintenanceActionWithOptions(request: ModifyPendingMaintenanceActionRequest, runtime: Util.RuntimeOptions): ModifyPendingMaintenanceActionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyPendingMaintenanceAction', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyPendingMaintenanceAction(request: ModifyPendingMaintenanceActionRequest): ModifyPendingMaintenanceActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPendingMaintenanceActionWithOptions(request, runtime);
}

model ResetAccountRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
}

model ResetAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetAccountResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAccountResponseBody(name='body'),
}

async function resetAccountWithOptions(request: ResetAccountRequest, runtime: Util.RuntimeOptions): ResetAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetAccount', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetAccount(request: ResetAccountRequest): ResetAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAccountWithOptions(request, runtime);
}

model RestartDBNodeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBNodeId?: string(name='DBNodeId'),
}

model RestartDBNodeResponseBody = {
  requestId?: string(name='RequestId'),
}

model RestartDBNodeResponse = {
  headers: map[string]string(name='headers'),
  body: RestartDBNodeResponseBody(name='body'),
}

async function restartDBNodeWithOptions(request: RestartDBNodeRequest, runtime: Util.RuntimeOptions): RestartDBNodeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RestartDBNode', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function restartDBNode(request: RestartDBNodeRequest): RestartDBNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartDBNodeWithOptions(request, runtime);
}

model RestoreTableRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  tableMeta?: string(name='TableMeta'),
  backupId?: string(name='BackupId'),
  restoreTime?: string(name='RestoreTime'),
}

model RestoreTableResponseBody = {
  requestId?: string(name='RequestId'),
}

model RestoreTableResponse = {
  headers: map[string]string(name='headers'),
  body: RestoreTableResponseBody(name='body'),
}

async function restoreTableWithOptions(request: RestoreTableRequest, runtime: Util.RuntimeOptions): RestoreTableResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RestoreTable', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function restoreTable(request: RestoreTableRequest): RestoreTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return restoreTableWithOptions(request, runtime);
}

model RevokeAccountPrivilegeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  accountName?: string(name='AccountName'),
  DBName?: string(name='DBName'),
}

model RevokeAccountPrivilegeResponseBody = {
  requestId?: string(name='RequestId'),
}

model RevokeAccountPrivilegeResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeAccountPrivilegeResponseBody(name='body'),
}

async function revokeAccountPrivilegeWithOptions(request: RevokeAccountPrivilegeRequest, runtime: Util.RuntimeOptions): RevokeAccountPrivilegeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RevokeAccountPrivilege', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function revokeAccountPrivilege(request: RevokeAccountPrivilegeRequest): RevokeAccountPrivilegeResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeAccountPrivilegeWithOptions(request, runtime);
}

model TagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagResources', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpgradeDBClusterMinorVersionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  plannedStartTime?: string(name='PlannedStartTime'),
  plannedEndTime?: string(name='PlannedEndTime'),
  fromTimeService?: boolean(name='FromTimeService'),
}

model UpgradeDBClusterMinorVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpgradeDBClusterMinorVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeDBClusterMinorVersionResponseBody(name='body'),
}

async function upgradeDBClusterMinorVersionWithOptions(request: UpgradeDBClusterMinorVersionRequest, runtime: Util.RuntimeOptions): UpgradeDBClusterMinorVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpgradeDBClusterMinorVersion', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function upgradeDBClusterMinorVersion(request: UpgradeDBClusterMinorVersionRequest): UpgradeDBClusterMinorVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeDBClusterMinorVersionWithOptions(request, runtime);
}

model UpgradeDBClusterVersionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  plannedStartTime?: string(name='PlannedStartTime'),
  plannedEndTime?: string(name='PlannedEndTime'),
  fromTimeService?: boolean(name='FromTimeService'),
}

model UpgradeDBClusterVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpgradeDBClusterVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeDBClusterVersionResponseBody(name='body'),
}

async function upgradeDBClusterVersionWithOptions(request: UpgradeDBClusterVersionRequest, runtime: Util.RuntimeOptions): UpgradeDBClusterVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpgradeDBClusterVersion', '2017-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function upgradeDBClusterVersion(request: UpgradeDBClusterVersionRequest): UpgradeDBClusterVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeDBClusterVersionWithOptions(request, runtime);
}

