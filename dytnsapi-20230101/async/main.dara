/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Dytnsapi';
  @version = '2023-01-01';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DescribeNumberHLRRequest {
  authCode?: string(name='AuthCode', example='示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber?: string(name='PhoneNumber', example='示例值示例值示例值', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeNumberHLRResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='None'),
  code?: string(name='Code', example='OK'),
  data?: {
    blocked?: string(name='Blocked', example='示例值示例值'),
    call?: {
      cleansedCode?: string(name='CleansedCode', description='call', example='示例值'),
      maxLength?: long(name='MaxLength', example='22'),
      minLength?: long(name='MinLength', example='21'),
    }(name='Call'),
    carrier?: string(name='Carrier', example='示例值示例值示例值'),
    city?: string(name='City', example='示例值示例值'),
    countryIso3?: string(name='CountryIso3', example='示例值示例值'),
    live?: {
      deviceStatus?: string(name='DeviceStatus', example='示例值'),
      roaming?: string(name='Roaming', example='示例值示例值'),
      roamingCountry?: string(name='RoamingCountry', example='示例值'),
      subscriberStatus?: string(name='SubscriberStatus', example='示例值'),
    }(name='Live'),
    phoneType?: string(name='PhoneType', example='示例值示例值'),
    sms?: {
      cleansedCode?: long(name='CleansedCode', description='sms', example='58'),
      maxLength?: long(name='MaxLength', example='59'),
      minLength?: long(name='MinLength', example='2'),
    }(name='Sms'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='1C3B8084-3A7D-570B-BC84-BF945A9CF65E'),
}

model DescribeNumberHLRResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNumberHLRResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeNumberHLR  DescribeNumberHLRRequest
  * @return DescribeNumberHLRResponse
 */
async function describeNumberHLR(request: DescribeNumberHLRRequest): DescribeNumberHLRResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNumberHLR', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNumberMccMncRequest {
  authCode?: string(name='AuthCode', example='示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber?: string(name='PhoneNumber', example='86123434345', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeNumberMccMncResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='-'),
  code?: string(name='Code', example='OK'),
  data?: {
    countryIso3?: string(name='CountryIso3', example='示例值示例值'),
    mcc?: string(name='Mcc', example='示例值示例值'),
    mnc?: string(name='Mnc', example='示例值示例值'),
    ported?: boolean(name='Ported', example='true'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CC3BB6D2-2FDF-4321-9DCE-B38165CE4C47'),
}

model DescribeNumberMccMncResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNumberMccMncResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeNumberMccMnc  DescribeNumberMccMncRequest
  * @return DescribeNumberMccMncResponse
 */
async function describeNumberMccMnc(request: DescribeNumberMccMncRequest): DescribeNumberMccMncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNumberMccMnc', 'POST', '/', 'json', false, 'json', request);
}

model GetPhoneNumberIdentificationResultRequest {
  authCode: string(name='AuthCode', description='The authorization code.

This parameter is required.', example='K***9i7CIe', position='Query'),
  outId: string(name='OutId', description='The external ID.

This parameter is required.', example='149b03d2-a749-4e6e-8f5b-34******5815', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='The phone number of the subscriber. The phone number to be verified must be in the Mobile Station International Subscriber Directory Number (MSISDN) format.

This parameter is required.', example='628211****113', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sessionId: string(name='SessionId', description='The session ID.

This parameter is required.', example='8636b75e2fcb40c53ffecc2b5947115c.149b03d2a7494e6e8f5b34c915245815.707c7f0d93f4409db0761aa5da94ce01.1686******041', position='Query'),
  sessionPayload: string(name='SessionPayload', description='The session payload.

This parameter is required.', example='uQne0vsuNywXVvI4VP5taHsgDNsd3BwcbmrhjXi58WbxBGFW+e8ufMEi9j89YonphV6NZ1PIeKvboHtU1nsSjZMTcoFPfkjqaORIHdSlPb6vmIzqOnJMsP1KPQ8K1JLXSaAKsB2lQ5A9HCkX2HzDEwje14HYQsnPd/Ka2YWgXuL0N8GE9oYi25d4DdlU0XR52YjSj8GMLSgbW7yNxEPvUCOQG83FZfQqmIWG2+0C/fQ3gdG9WI7AeeHZo4IRKGtQnpjKGtZZl8VoLPNIswDqZeeyjCyZlKUXKrAt4Co9c4I4q8G1jZm53COQJ+DuTiWH7w+tois3WJwFV/HmdlAKt8SqpiVrEv47VQ9V+8FYsdKz3A3CRyBVgNj6wYKKbwaI9BdQoOkbYzzA8CfAKO5w1oYVD2nOcYS/AffbPbE31PJj7SdVvKghwPL56OVdjS9Hd0iW0SMBWD0F1iRNCUNHL3ffHcFjJLdhTrMt8VHSRn0nOlvO1ZaWqMQ0yE0q*************************kXTpoQLo0+0h+CEcf90hTg8XdMhj9B0A3SOINceLlmoZb3czvYl00+CC0075DjOX41YtnuAUfaNYPgLIZkjYyq+JopBQFAkxPUbJHC0oCzB9dQahUthWY38OPBs=', position='Query'),
}

model GetPhoneNumberIdentificationResultResponseBody = {
  code?: string(name='Code', description='The return code. Valid values:

*   OK: The request is successful.
*   NoIdentificationResult: No verification result is available or the verification failed.
*   SessionNotValid: The session is invalid or expired.
*   MobileNumberIllegal: The format of the phone number is invalid.', example='OK'),
  data?: {
    isIdentified?: string(name='IsIdentified', description='Indicates whether the phone number passed the verification.', example='true'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The description of the return code.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='68A40250-50CD-034C-B728-0BD******177'),
}

model GetPhoneNumberIdentificationResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhoneNumberIdentificationResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPhoneNumberIdentificationResult  GetPhoneNumberIdentificationResultRequest
  * @return GetPhoneNumberIdentificationResultResponse
 */
async function getPhoneNumberIdentificationResult(request: GetPhoneNumberIdentificationResultRequest): GetPhoneNumberIdentificationResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPhoneNumberIdentificationResult', 'POST', '/', 'json', false, 'json', request);
}

model GetPhoneNumberIdentificationUrlRequest {
  authCode: string(name='AuthCode', description='The authorization code.

This parameter is required.', example='K***9i7CIe', position='Query'),
  ip?: string(name='Ip', description='The IP address of the subscriber\\"s phone.', example='114.124.***.13', position='Query'),
  outId: string(name='OutId', description='The external ID.

This parameter is required.', example='149b03d2-a749-4e6e-8f5b-34******5815', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='The phone number of the subscriber. The phone number is in the Mobile Station International Subscriber Directory Number (MSISDN) format.

This parameter is required.', example='628211****113', position='Query'),
  rememberPhoneNumber?: boolean(name='RememberPhoneNumber', description='Specifies whether to remember the phone number.', example='true', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetPhoneNumberIdentificationUrlResponseBody = {
  code?: string(name='Code', description='The return code. Valid values:

*   **OK**: The request is successful.
*   **IdentificationNotAvailable**: The verification system does not support the phone number that corresponds to the IP address.
*   **MobileNumberIllegal**: The format of the phone number is invalid.', example='OK'),
  data?: {
    identificationUrl?: string(name='IdentificationUrl', description='The verification URL.', example='https://global-ip-auth.dycpaas.com/global/biz/ip_auth/start?ipa_s_c_c=IPF0000000000000******&ipa_s_i=8636b75e2fcb40c53ffecc2b59******'),
    sessionId?: string(name='SessionId', description='The session ID.', example='8636b75e2fcb40c53ffecc2b5947115c.149b03d2a7494e6e8f5b34c915245815.707c7f0d93f4409db0761aa5da94ce01.1686******041'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The description of the return code.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='68A40250-50CD-034C-B728-0BD******177'),
}

model GetPhoneNumberIdentificationUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhoneNumberIdentificationUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPhoneNumberIdentificationUrl  GetPhoneNumberIdentificationUrlRequest
  * @return GetPhoneNumberIdentificationUrlResponse
 */
async function getPhoneNumberIdentificationUrl(request: GetPhoneNumberIdentificationUrlRequest): GetPhoneNumberIdentificationUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPhoneNumberIdentificationUrl', 'POST', '/', 'json', false, 'json', request);
}

