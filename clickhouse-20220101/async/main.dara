/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'clickhouse';
  @version = '2022-01-01';
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-2-pop' = 'clickhouse.aliyuncs.com',
    'ap-southeast-1' = 'clickhouse.aliyuncs.com',
    'cn-beijing' = 'clickhouse.aliyuncs.com',
    'cn-beijing-finance-1' = 'clickhouse.aliyuncs.com',
    'cn-beijing-finance-pop' = 'clickhouse.aliyuncs.com',
    'cn-beijing-gov-1' = 'clickhouse.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'clickhouse.aliyuncs.com',
    'cn-edge-1' = 'clickhouse.aliyuncs.com',
    'cn-fujian' = 'clickhouse.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'clickhouse.aliyuncs.com',
    'cn-hangzhou' = 'clickhouse.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'clickhouse.aliyuncs.com',
    'cn-hangzhou-finance' = 'clickhouse.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'clickhouse.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'clickhouse.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'clickhouse.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'clickhouse.aliyuncs.com',
    'cn-hangzhou-test-306' = 'clickhouse.aliyuncs.com',
    'cn-hongkong' = 'clickhouse.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'clickhouse.aliyuncs.com',
    'cn-north-2-gov-1' = 'clickhouse.aliyuncs.com',
    'cn-qingdao' = 'clickhouse.aliyuncs.com',
    'cn-qingdao-nebula' = 'clickhouse.aliyuncs.com',
    'cn-shanghai' = 'clickhouse.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'clickhouse.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'clickhouse.aliyuncs.com',
    'cn-shanghai-finance-1' = 'clickhouse.aliyuncs.com',
    'cn-shanghai-inner' = 'clickhouse.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'clickhouse.aliyuncs.com',
    'cn-shenzhen' = 'clickhouse.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'clickhouse.aliyuncs.com',
    'cn-shenzhen-inner' = 'clickhouse.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'clickhouse.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'clickhouse.aliyuncs.com',
    'cn-wuhan' = 'clickhouse.aliyuncs.com',
    'cn-yushanfang' = 'clickhouse.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'clickhouse.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'clickhouse.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'clickhouse.aliyuncs.com',
    'eu-west-1-oxs' = 'clickhouse.aliyuncs.com',
    'me-east-1' = 'clickhouse.aliyuncs.com',
    'rus-west-1-pop' = 'clickhouse.aliyuncs.com',
    'us-east-1' = 'clickhouse.aliyuncs.com',
    'us-west-1' = 'clickhouse.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AllocateVirtualWareHousePublicConnectionRequest {
  DBClusterId?: string(name='DBClusterId', example='cc-bp108z124a8o7****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  virtualWareHouseId: string(name='VirtualWareHouseId', description='This parameter is required.', example='vw-uf6a499c0m3w5****', position='Query'),
}

model AllocateVirtualWareHousePublicConnectionResponseBody = {
  requestId?: string(name='RequestId', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
}

model AllocateVirtualWareHousePublicConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AllocateVirtualWareHousePublicConnectionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AllocateVirtualWareHousePublicConnection  AllocateVirtualWareHousePublicConnectionRequest
  * @return AllocateVirtualWareHousePublicConnectionResponse
 */
async function allocateVirtualWareHousePublicConnection(request: AllocateVirtualWareHousePublicConnectionRequest): AllocateVirtualWareHousePublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateVirtualWareHousePublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model CheckCreateClusterRequest {
  autoRenew?: boolean(name='AutoRenew', example='true', position='Query'),
  DBClusterDescription?: string(name='DBClusterDescription', example='test', position='Query'),
  payType: string(name='PayType', description='This parameter is required.', example='Postpaid', position='Query'),
  period?: string(name='Period', example='Month', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  usedTime?: string(name='UsedTime', example='1', position='Query'),
  virtualWareHouseCacheStorage: int32(name='VirtualWareHouseCacheStorage', description='This parameter is required.', example='200', position='Query'),
  virtualWareHouseClass: string(name='VirtualWareHouseClass', description='This parameter is required.', example='n1.xlarge', position='Query'),
  virtualWareHouseDescription?: string(name='VirtualWareHouseDescription', example='test', position='Query'),
  vpcId: string(name='VpcId', description='VPC IDã€‚

This parameter is required.', example='vpc-uf6xmupdn7v6ui9f7****', position='Query'),
  vswitchId: string(name='VswitchId', description='This parameter is required.', example='vsw-uf632qye9oqt4x4sr5****', position='Query'),
  zoneId: string(name='ZoneId', description='This parameter is required.', example='cn-hangzhou-h', position='Query'),
}

model CheckCreateClusterResponseBody = {
  data?: {
    expectedDBClusterStatus?: string(name='ExpectedDBClusterStatus', example='Creating'),
    expectedOrderFinishSeconds?: long(name='ExpectedOrderFinishSeconds', example='60'),
    expectedTargetVirtualWareHouseStatus?: string(name='ExpectedTargetVirtualWareHouseStatus', example='Creating'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='9A23C87D-87DF-4DA0-A50E-CB13F4F7923D'),
}

model CheckCreateClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckCreateClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckCreateCluster  CheckCreateClusterRequest
  * @return CheckCreateClusterResponse
 */
async function checkCreateCluster(request: CheckCreateClusterRequest): CheckCreateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckCreateCluster', 'POST', '/', 'json', false, 'json', request);
}

model CheckCreateVirtualWareHouseRequest {
  DBClusterId: string(name='DBClusterId', description='This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  virtualWareHouseCacheStorage: int32(name='VirtualWareHouseCacheStorage', description='This parameter is required.', example='200', position='Query'),
  virtualWareHouseClass: string(name='VirtualWareHouseClass', description='This parameter is required.', example='n1.xlarge', position='Query'),
  virtualWareHouseDescription?: string(name='VirtualWareHouseDescription', example='test', position='Query'),
  vswitchId?: string(name='VswitchId', example='vsw-uf632qye9oqt4x4sr****', position='Query'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-h', position='Query'),
}

model CheckCreateVirtualWareHouseResponseBody = {
  data?: {
    expectedDBClusterStatus?: string(name='ExpectedDBClusterStatus', example='ResourceChanging'),
    expectedOrderFinishSeconds?: long(name='ExpectedOrderFinishSeconds', example='60'),
    expectedTargetVirtualWareHouseStatus?: string(name='ExpectedTargetVirtualWareHouseStatus', example='Creating'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='9A23C87D-87DF-4DA0-A50E-CB13F4F7923D'),
}

model CheckCreateVirtualWareHouseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckCreateVirtualWareHouseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckCreateVirtualWareHouse  CheckCreateVirtualWareHouseRequest
  * @return CheckCreateVirtualWareHouseResponse
 */
async function checkCreateVirtualWareHouse(request: CheckCreateVirtualWareHouseRequest): CheckCreateVirtualWareHouseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckCreateVirtualWareHouse', 'POST', '/', 'json', false, 'json', request);
}

model CheckDeleteVirtualWareHouseRequest {
  DBClusterId?: string(name='DBClusterId', example='cc-bp1qx68m06981****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  virtualWareHouseId: string(name='VirtualWareHouseId', description='This parameter is required.', example='vw-uf6a499c0m3w5****', position='Query'),
}

model CheckDeleteVirtualWareHouseResponseBody = {
  data?: {
    expectedDBClusterStatus?: string(name='ExpectedDBClusterStatus', example='ResourceChanging'),
    expectedOrderFinishSeconds?: long(name='ExpectedOrderFinishSeconds', example='60'),
    expectedTargetVirtualWareHouseStatus?: string(name='ExpectedTargetVirtualWareHouseStatus', example='Deleting'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='9A23C87D-87DF-4DA0-A50E-CB13F4F7923D'),
}

model CheckDeleteVirtualWareHouseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckDeleteVirtualWareHouseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckDeleteVirtualWareHouse  CheckDeleteVirtualWareHouseRequest
  * @return CheckDeleteVirtualWareHouseResponse
 */
async function checkDeleteVirtualWareHouse(request: CheckDeleteVirtualWareHouseRequest): CheckDeleteVirtualWareHouseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckDeleteVirtualWareHouse', 'POST', '/', 'json', false, 'json', request);
}

model CheckModifyVirtualWareHouseResourceRequest {
  DBClusterId?: string(name='DBClusterId', example='cc-bp108z124a8o7****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  virtualWareHouseCacheStorage: int32(name='VirtualWareHouseCacheStorage', description='This parameter is required.', example='200', position='Query'),
  virtualWareHouseClass: string(name='VirtualWareHouseClass', description='This parameter is required.', example='n1.xlarge', position='Query'),
  virtualWareHouseId: string(name='VirtualWareHouseId', description='This parameter is required.', example='vw-uf6a499c0m3w5****', position='Query'),
}

model CheckModifyVirtualWareHouseResourceResponseBody = {
  data?: {
    expectedDBClusterStatus?: string(name='ExpectedDBClusterStatus', example='ResourceChanging'),
    expectedOrderFinishSeconds?: long(name='ExpectedOrderFinishSeconds', example='60'),
    expectedTargetVirtualWareHouseStatus?: string(name='ExpectedTargetVirtualWareHouseStatus', example='ResourceChanging'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='05321590-BB65-4720-8CB6-8218E041CDD0'),
}

model CheckModifyVirtualWareHouseResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckModifyVirtualWareHouseResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckModifyVirtualWareHouseResource  CheckModifyVirtualWareHouseResourceRequest
  * @return CheckModifyVirtualWareHouseResourceResponse
 */
async function checkModifyVirtualWareHouseResource(request: CheckModifyVirtualWareHouseResourceRequest): CheckModifyVirtualWareHouseResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckModifyVirtualWareHouseResource', 'POST', '/', 'json', false, 'json', request);
}

model CreateAccountRequest {
  account: string(name='Account', description='This parameter is required.', example='test', position='Query'),
  comment?: string(name='Comment', example='test', position='Query'),
  DBClusterId: string(name='DBClusterId', description='This parameter is required.', example='cc-8vbsom12x476u****', position='Query'),
  password?: string(name='Password', example='123456Aa', position='Query'),
  passwordSha256Hex?: string(name='PasswordSha256Hex', example='b17e1e0450dac425ea318253f6f852972d69731d6c7499c001468b695b6da219', position='Query'),
  privilegeType: string(name='PrivilegeType', description='This parameter is required.', example='Normal', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model CreateAccountResponseBody = {
  requestId?: string(name='RequestId', example='8FE02123-D2A3-5CDE-939D-E9B477E00E68'),
}

model CreateAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAccount  CreateAccountRequest
  * @return CreateAccountResponse
 */
async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateClusterRequest {
  autoRenew?: boolean(name='AutoRenew', example='false', position='Query'),
  DBClusterDescription?: string(name='DBClusterDescription', example='test', position='Query'),
  payType: string(name='PayType', description='This parameter is required.', example='Postpaid', position='Query'),
  period?: string(name='Period', example='Month', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  usedTime?: string(name='UsedTime', example='1', position='Query'),
  virtualWareHouseCacheStorage: int32(name='VirtualWareHouseCacheStorage', description='This parameter is required.', example='400', position='Query'),
  virtualWareHouseClass: string(name='VirtualWareHouseClass', description='This parameter is required.', example='n1.xlarge', position='Query'),
  virtualWareHouseDescription?: string(name='VirtualWareHouseDescription', example='test', position='Query'),
  vpcId: string(name='VpcId', description='VPC IDã€‚

This parameter is required.', example='vpc-uf6xmupdn7v6ui9f****', position='Query'),
  vswitchId: string(name='VswitchId', description='This parameter is required.', example='vsw-uf632qye9oqt4x4sr****', position='Query'),
  zoneId: string(name='ZoneId', description='This parameter is required.', example='cn-hangzhou-h', position='Query'),
}

model CreateClusterResponseBody = {
  data?: {
    DBClusterId?: string(name='DBClusterId', example='cc-bp123bm6vy801****'),
    orderId?: long(name='OrderId', example='21154955706****'),
    virtualWareHouseId?: string(name='VirtualWareHouseId', example='vw-uf6a499c0m3w5****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
}

model CreateClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateCluster  CreateClusterRequest
  * @return CreateClusterResponse
 */
async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCluster', 'POST', '/', 'json', false, 'json', request);
}

model CreateVirtualWareHouseRequest {
  DBClusterId: string(name='DBClusterId', description='This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  virtualWareHouseCacheStorage: int32(name='VirtualWareHouseCacheStorage', description='This parameter is required.', example='200', position='Query'),
  virtualWareHouseClass: string(name='VirtualWareHouseClass', description='This parameter is required.', example='n1.xlarge', position='Query'),
  virtualWareHouseDescription?: string(name='VirtualWareHouseDescription', example='test', position='Query'),
  vswitchId?: string(name='VswitchId', example='vsw-uf632qye9oqt4x4sr****', position='Query'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-h', position='Query'),
}

model CreateVirtualWareHouseResponseBody = {
  data?: {
    orderId?: long(name='OrderId', example='21155221661****'),
    virtualWareHouseId?: string(name='VirtualWareHouseId', example='vw-bp1w2728d535t****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='2FED790E-FB61-4721-8C1C-07C627FA5A19'),
}

model CreateVirtualWareHouseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVirtualWareHouseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateVirtualWareHouse  CreateVirtualWareHouseRequest
  * @return CreateVirtualWareHouseResponse
 */
async function createVirtualWareHouse(request: CreateVirtualWareHouseRequest): CreateVirtualWareHouseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVirtualWareHouse', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAccountRequest {
  account: string(name='Account', description='This parameter is required.', example='test', position='Query'),
  DBClusterId: string(name='DBClusterId', description='This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteAccountResponseBody = {
  requestId?: string(name='RequestId', example='2FED790E-FB61-4721-8C1C-07C627FA5A19'),
}

model DeleteAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAccount  DeleteAccountRequest
  * @return DeleteAccountResponse
 */
async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAccount', 'POST', '/', 'json', false, 'json', request);
}

model DeleteClusterRequest {
  DBClusterId: string(name='DBClusterId', description='This parameter is required.', example='cc-bp1qx68m06981****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteClusterResponseBody = {
  data?: {
    orderId?: long(name='OrderId', example='21152382576****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='5B1C3974-F13D-5510-9131-DC4A4C8B09C6'),
}

model DeleteClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCluster  DeleteClusterRequest
  * @return DeleteClusterResponse
 */
async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCluster', 'POST', '/', 'json', false, 'json', request);
}

model DeleteClusterSecurityIPGroupRequest {
  DBClusterId: string(name='DBClusterId', description='This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  groupName: string(name='GroupName', description='This parameter is required.', example='test', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteClusterSecurityIPGroupResponseBody = {
  requestId?: string(name='RequestId', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
}

model DeleteClusterSecurityIPGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteClusterSecurityIPGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteClusterSecurityIPGroup  DeleteClusterSecurityIPGroupRequest
  * @return DeleteClusterSecurityIPGroupResponse
 */
async function deleteClusterSecurityIPGroup(request: DeleteClusterSecurityIPGroupRequest): DeleteClusterSecurityIPGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteClusterSecurityIPGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVirtualWareHouseRequest {
  DBClusterId?: string(name='DBClusterId', example='cc-bp1qx68m06981****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  virtualWareHouseId: string(name='VirtualWareHouseId', description='This parameter is required.', example='vw-bp1w2728d535t****', position='Query'),
}

model DeleteVirtualWareHouseResponseBody = {
  data?: {
    orderId?: long(name='OrderId', example='21152153510****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='D0CEC6AC-7760-409A-A0D5-E6CD8660E9CC'),
}

model DeleteVirtualWareHouseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVirtualWareHouseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteVirtualWareHouse  DeleteVirtualWareHouseRequest
  * @return DeleteVirtualWareHouseResponse
 */
async function deleteVirtualWareHouse(request: DeleteVirtualWareHouseRequest): DeleteVirtualWareHouseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVirtualWareHouse', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccountRequest {
  account: string(name='Account', description='This parameter is required.', example='test', position='Query'),
  DBClusterId: string(name='DBClusterId', description='This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeAccountResponseBody = {
  data?: {
    account?: string(name='Account', example='test'),
    comment?: string(name='Comment', example='test'),
    passwordSha256Hex?: string(name='PasswordSha256Hex', example='cd0289a263bf4146a2e00888321178234b65e8c050142074ad05683e3749****'),
    privilegeDescription?: string(name='PrivilegeDescription'),
    privilegeType?: string(name='PrivilegeType', example='Super'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='92016D5B-899D-5B77-A8A7-EFE523D4C80A'),
}

model DescribeAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAccount  DescribeAccountRequest
  * @return DescribeAccountResponse
 */
async function describeAccount(request: DescribeAccountRequest): DescribeAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClusterRequest {
  DBClusterId: string(name='DBClusterId', description='This parameter is required.', example='cc-uf6a499c0m3w5****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeClusterResponseBody = {
  data?: {
    aliUid?: long(name='AliUid', example='140692647406****'),
    cacheStorageSizeGiB?: int32(name='CacheStorageSizeGiB', example='200'),
    cacheStorageType?: string(name='CacheStorageType', example='CloudESSD'),
    commodityCode?: string(name='CommodityCode', example='clickhouse_go_public_cn'),
    createTime?: string(name='CreateTime', example='2022-03-18T08:14:48Z'),
    DBClusterDescription?: string(name='DBClusterDescription', example='test'),
    DBClusterId?: string(name='DBClusterId', example='cc-uf6a499c0m3w5****'),
    DBClusterStatus?: string(name='DBClusterStatus', example='Running'),
    engineVersion?: string(name='EngineVersion', example='21.8'),
    expireTime?: string(name='ExpireTime', example='2022-04-17T08:14:48Z'),
    lockMode?: string(name='LockMode', example='Unlock'),
    lockReason?: string(name='LockReason', example='DISK_FULL'),
    objectStoreSizeGiB?: long(name='ObjectStoreSizeGiB', example='0'),
    payType?: string(name='PayType', example='Postpaid'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    resourceCpuCores?: int32(name='ResourceCpuCores', example='8'),
    resourceMemoryGiB?: int32(name='ResourceMemoryGiB', example='32'),
    virtualWareHouses?: [ 
      {
        ports?: string(name='Ports', example='tcp:9000,http:8123,mysql:9004'),
        virtualWareHouseCacheStorage?: int32(name='VirtualWareHouseCacheStorage', example='200'),
        virtualWareHouseClass?: string(name='VirtualWareHouseClass', example='n1.xlarge'),
        virtualWareHouseDescription?: string(name='VirtualWareHouseDescription', example='test'),
        virtualWareHouseId?: string(name='VirtualWareHouseId', example='vw-bp1w2728d535t****'),
        virtualWareHouseStatus?: string(name='VirtualWareHouseStatus', example='Running'),
        vswitchId?: string(name='VswitchId', example='vsw-2vcmrf8c878scsv43****'),
        zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
      }
    ](name='VirtualWareHouses'),
    vpcId?: string(name='VpcId', description='VPC IDã€‚', example='vpc-wz9duj8xd6r1gzhsg*****'),
    vswitchId?: string(name='VswitchId', example='vsw-2vcmrf8c878scsv43****'),
    zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='9140518B-F330-5364-82FE-EC7298816EDF'),
}

model DescribeClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCluster  DescribeClusterRequest
  * @return DescribeClusterResponse
 */
async function describeCluster(request: DescribeClusterRequest): DescribeClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCluster', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClusterSecurityInfoRequest {
  DBClusterId: string(name='DBClusterId', description='This parameter is required.', example='cc-bp1p816075e21****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeClusterSecurityInfoResponseBody = {
  data?: {
    securityIpGroups?: [ 
      {
        groupName?: string(name='GroupName', example='test'),
        securityIps?: string(name='SecurityIps', example='192.168.xx.xx,192.168.xx.xx'),
      }
    ](name='SecurityIpGroups'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='2371CC7A-E9C3-5817-97C9-F6333D74BA6C'),
}

model DescribeClusterSecurityInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeClusterSecurityInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeClusterSecurityInfo  DescribeClusterSecurityInfoRequest
  * @return DescribeClusterSecurityInfoResponse
 */
async function describeClusterSecurityInfo(request: DescribeClusterSecurityInfoRequest): DescribeClusterSecurityInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusterSecurityInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClusterStatusSetRequest {
}

model DescribeClusterStatusSetResponseBody = {
  data?: [ 
    {
      desc?: string(name='Desc'),
      value?: string(name='Value', example='Running'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
}

model DescribeClusterStatusSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeClusterStatusSetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeClusterStatusSet  DescribeClusterStatusSetRequest
  * @return DescribeClusterStatusSetResponse
 */
async function describeClusterStatusSet(request: DescribeClusterStatusSetRequest): DescribeClusterStatusSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusterStatusSet', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-h', position='Query'),
}

model DescribeRegionsResponseBody = {
  data?: [ 
    {
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      zones?: [ 
        {
          vpcEnabled?: boolean(name='VpcEnabled', example='true'),
          zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
        }
      ](name='Zones'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRegions  DescribeRegionsRequest
  * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRunningQueryRequest {
  DBClusterId?: string(name='DBClusterId', example='cc-bp1qx68m06981****', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='30', position='Query'),
  queryDurationMs?: long(name='QueryDurationMs', example='1000', position='Query'),
  queryId?: string(name='QueryId', example='c8cbcbaf-d4ab-4e74-900d-90d7c0aecaae', position='Query'),
  queryKeyWord?: string(name='QueryKeyWord', example='order by', position='Query'),
  queryUser?: string(name='QueryUser', example='test', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  virtualWareHouseId: string(name='VirtualWareHouseId', description='This parameter is required.', example='vw-uf62965t8lt50****', position='Query'),
}

model DescribeRunningQueryResponseBody = {
  data?: [ 
    {
      initialAddress?: string(name='InitialAddress', example='::ffff:10.1.XX.XX'),
      initialQueryId?: string(name='InitialQueryId', example='7c28bbbb-753b-4eba-98b1-efcbe2b9bdf6'),
      initialUser?: string(name='InitialUser', example='test'),
      query?: string(name='Query', example='select * from test order by score limit 1;'),
      queryDurationMs?: long(name='QueryDurationMs', example='2000'),
      queryStartTime?: string(name='QueryStartTime', example='2021-02-02T09:14:48Z'),
    }
  ](name='Data'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  requestId?: string(name='RequestId', example='48CBEEBE-FA07-5A06-8BA4-567B92ADD6A0'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeRunningQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRunningQueryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRunningQuery  DescribeRunningQueryRequest
  * @return DescribeRunningQueryResponse
 */
async function describeRunningQuery(request: DescribeRunningQueryRequest): DescribeRunningQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRunningQuery', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlowQueryRequest {
  DBClusterId?: string(name='DBClusterId', example='cc-bp1qx68m06981****', position='Query'),
  endTime?: string(name='EndTime', example='2021-02-02T09:30:00Z', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='30', position='Query'),
  queryDurationMs?: long(name='QueryDurationMs', example='1000', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  startTime?: string(name='StartTime', example='2021-02-02T08:30:00Z', position='Query'),
  virtualWareHouseId: string(name='VirtualWareHouseId', description='This parameter is required.', example='vw-uf62965t8lt50****', position='Query'),
}

model DescribeSlowQueryResponseBody = {
  data?: [ 
    {
      initialAddress?: string(name='InitialAddress', example='::ffff:10.1.XX.XX'),
      initialQueryId?: string(name='InitialQueryId', example='7c28bbbb-753b-4eba-98b1-efcbe2b9bdf6'),
      initialUser?: string(name='InitialUser', example='test'),
      memoryUsage?: long(name='MemoryUsage', example='1024000000'),
      query?: string(name='Query', example='select * from test order by score limit 1;'),
      queryDurationMs?: long(name='QueryDurationMs', example='2000'),
      queryStartTime?: string(name='QueryStartTime', example='2021-02-02T08:30:00Z'),
      queryState?: string(name='QueryState', example='QueryFinish'),
      readBytes?: long(name='ReadBytes', example='9141300000'),
      readRows?: long(name='ReadRows', example='1000000'),
      resultBytes?: long(name='ResultBytes', example='8174'),
      resultRows?: long(name='ResultRows', example='1'),
    }
  ](name='Data'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  requestId?: string(name='RequestId', example='48CBEEBE-FA07-5A06-8BA4-567B92ADD6A0'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeSlowQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSlowQueryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSlowQuery  DescribeSlowQueryRequest
  * @return DescribeSlowQueryResponse
 */
async function describeSlowQuery(request: DescribeSlowQueryRequest): DescribeSlowQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlowQuery', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlowQueryTrendRequest {
  DBClusterId?: string(name='DBClusterId', example='cc-bp1qx68m06981****', position='Query'),
  endTime?: string(name='EndTime', example='2021-02-02T09:00:00Z', position='Query'),
  queryDurationMs?: long(name='QueryDurationMs', example='1000', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  startTime?: string(name='StartTime', example='2021-02-02T08:00:00Z', position='Query'),
  virtualWareHouseId: string(name='VirtualWareHouseId', description='This parameter is required.', example='vw-uf62965t8lt50****', position='Query'),
}

model DescribeSlowQueryTrendResponseBody = {
  data?: [ 
    {
      avgDurationMs?: long(name='AvgDurationMs', example='2000'),
      count?: int32(name='Count', example='1'),
      maxDurationMs?: long(name='MaxDurationMs', example='3000'),
      minDurationMs?: long(name='MinDurationMs', example='1000'),
      startTime?: string(name='StartTime', example='2021-02-02T08:00:00Z'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='48CBEEBE-FA07-5A06-8BA4-567B92ADD6A0'),
}

model DescribeSlowQueryTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSlowQueryTrendResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSlowQueryTrend  DescribeSlowQueryTrendRequest
  * @return DescribeSlowQueryTrendResponse
 */
async function describeSlowQueryTrend(request: DescribeSlowQueryTrendRequest): DescribeSlowQueryTrendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlowQueryTrend', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVirtualWareHouseRequest {
  DBClusterId?: string(name='DBClusterId', example='cc-bp108z124a8o7****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  virtualWareHouseId: string(name='VirtualWareHouseId', description='This parameter is required.', example='vw-bp1w2728d535t****', position='Query'),
}

model DescribeVirtualWareHouseResponseBody = {
  data?: {
    ports?: string(name='Ports', example='tcp:9000,http:8123,mysql:9004'),
    virtualWareHouseCacheStorage?: int32(name='VirtualWareHouseCacheStorage', example='200'),
    virtualWareHouseClass?: string(name='VirtualWareHouseClass', example='n1.xlarge'),
    virtualWareHouseDescription?: string(name='VirtualWareHouseDescription', example='test'),
    virtualWareHouseId?: string(name='VirtualWareHouseId', example='vw-bp1w2728d535t****'),
    virtualWareHouseStatus?: string(name='VirtualWareHouseStatus', example='Running'),
    vswitchId?: string(name='VswitchId', example='vsw-bp1tg609m5j85jejq****'),
    zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F543E6CC-6868-523D-8D28-0E92CF977ED2'),
}

model DescribeVirtualWareHouseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVirtualWareHouseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVirtualWareHouse  DescribeVirtualWareHouseRequest
  * @return DescribeVirtualWareHouseResponse
 */
async function describeVirtualWareHouse(request: DescribeVirtualWareHouseRequest): DescribeVirtualWareHouseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVirtualWareHouse', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVirtualWareHouseClassSetRequest {
}

model DescribeVirtualWareHouseClassSetResponseBody = {
  data?: [ 
    {
      cacheStorageStep?: int32(name='CacheStorageStep', example='100'),
      cpuCores?: int32(name='CpuCores', example='16'),
      maxCacheStorage?: int32(name='MaxCacheStorage', example='32000'),
      memoryGiB?: int32(name='MemoryGiB', example='64'),
      minCacheStorage?: int32(name='MinCacheStorage', example='200'),
      value?: string(name='Value', example='n1.2xlarge'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
}

model DescribeVirtualWareHouseClassSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVirtualWareHouseClassSetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVirtualWareHouseClassSet  DescribeVirtualWareHouseClassSetRequest
  * @return DescribeVirtualWareHouseClassSetResponse
 */
async function describeVirtualWareHouseClassSet(request: DescribeVirtualWareHouseClassSetRequest): DescribeVirtualWareHouseClassSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVirtualWareHouseClassSet', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVirtualWareHouseEndpointInfoRequest {
  DBClusterId?: string(name='DBClusterId', example='cc-bp1qx68m06981****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  virtualWareHouseId: string(name='VirtualWareHouseId', description='This parameter is required.', example='vw-bp11gxp8g992f****', position='Query'),
}

model DescribeVirtualWareHouseEndpointInfoResponseBody = {
  data?: [ 
    {
      endpointType?: string(name='EndpointType', example='slb'),
      ip?: string(name='Ip', example='10.0.xx.xx'),
      netType?: string(name='NetType', example='intranet'),
      ports?: string(name='Ports', example='tcp:9000,http:8123,mysql:9004'),
      status?: string(name='Status', example='Ready'),
      url?: string(name='Url', example='vw-bp11gxp8g992f****.clickhouse.ads.aliyuncs.com'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='7EE0EF77-B7BA-5EE3-9B11-F8DE7B65BAB8'),
}

model DescribeVirtualWareHouseEndpointInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVirtualWareHouseEndpointInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVirtualWareHouseEndpointInfo  DescribeVirtualWareHouseEndpointInfoRequest
  * @return DescribeVirtualWareHouseEndpointInfoResponse
 */
async function describeVirtualWareHouseEndpointInfo(request: DescribeVirtualWareHouseEndpointInfoRequest): DescribeVirtualWareHouseEndpointInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVirtualWareHouseEndpointInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVirtualWareHouseStatusSetRequest {
}

model DescribeVirtualWareHouseStatusSetResponseBody = {
  data?: [ 
    {
      desc?: string(name='Desc'),
      value?: string(name='Value', example='Running'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='FDF272C3-8FD0-507B-8E63-A19495217339'),
}

model DescribeVirtualWareHouseStatusSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVirtualWareHouseStatusSetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVirtualWareHouseStatusSet  DescribeVirtualWareHouseStatusSetRequest
  * @return DescribeVirtualWareHouseStatusSetResponse
 */
async function describeVirtualWareHouseStatusSet(request: DescribeVirtualWareHouseStatusSetRequest): DescribeVirtualWareHouseStatusSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVirtualWareHouseStatusSet', 'POST', '/', 'json', false, 'json', request);
}

model GetDistributedTablesBufferSizeRequest {
  DBClusterId?: string(name='DBClusterId', example='cc-bp1qx68m06981****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  virtualWareHouseId: string(name='VirtualWareHouseId', description='This parameter is required.', example='vw-uf62965t8lt50****', position='Query'),
}

model GetDistributedTablesBufferSizeResponseBody = {
  data?: {
    bufferSizeGiB?: int32(name='BufferSizeGiB', example='100'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='48CBEEBE-FA07-5A06-8BA4-567B92ADD6A0'),
}

model GetDistributedTablesBufferSizeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDistributedTablesBufferSizeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDistributedTablesBufferSize  GetDistributedTablesBufferSizeRequest
  * @return GetDistributedTablesBufferSizeResponse
 */
async function getDistributedTablesBufferSize(request: GetDistributedTablesBufferSizeRequest): GetDistributedTablesBufferSizeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDistributedTablesBufferSize', 'POST', '/', 'json', false, 'json', request);
}

model KillQueryRequest {
  DBClusterId?: string(name='DBClusterId', example='cc-bp1qx68m06981****', position='Query'),
  queryIds?: string(name='QueryIds', example='21152382576****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  virtualWareHouseId: string(name='VirtualWareHouseId', description='This parameter is required.', example='vw-uf62965t8lt50****', position='Query'),
}

model KillQueryResponseBody = {
  requestId?: string(name='RequestId', example='48CBEEBE-FA07-5A06-8BA4-567B92ADD6A0'),
}

model KillQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: KillQueryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of KillQuery  KillQueryRequest
  * @return KillQueryResponse
 */
async function killQuery(request: KillQueryRequest): KillQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'KillQuery', 'POST', '/', 'json', false, 'json', request);
}

model ListAccountsRequest {
  DBClusterId: string(name='DBClusterId', description='This parameter is required.', example='cc-bp1qx68m06981****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListAccountsResponseBody = {
  data?: [ 
    {
      account?: string(name='Account', example='test'),
      comment?: string(name='Comment', example='test'),
      passwordSha256Hex?: string(name='PasswordSha256Hex', example='cd0289a263bf4146a2e00888321178234b65e8c050142074ad05683e3749****'),
      privilegeDescription?: string(name='PrivilegeDescription'),
      privilegeType?: string(name='PrivilegeType', example='Normal'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='E889A8CD-A4B4-5676-8EDB-80E06E072353'),
}

model ListAccountsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAccountsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAccounts  ListAccountsRequest
  * @return ListAccountsResponse
 */
async function listAccounts(request: ListAccountsRequest): ListAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccounts', 'POST', '/', 'json', false, 'json', request);
}

model ListClustersRequest {
  DBClusterDescription?: string(name='DBClusterDescription', example='test', position='Query'),
  DBClusterId?: string(name='DBClusterId', example='cc-bp108z124a8o7****', position='Query'),
  DBClusterStatus?: string(name='DBClusterStatus', example='Running', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='30', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ListClustersResponseBody = {
  data?: [ 
    {
      aliUid?: long(name='AliUid', example='140692647406****'),
      cacheStorageSizeGiB?: int32(name='CacheStorageSizeGiB', example='200'),
      cacheStorageType?: string(name='CacheStorageType', example='CloudESSD'),
      commodityCode?: string(name='CommodityCode', example='clickhouse_go_public_cn'),
      createTime?: string(name='CreateTime', example='2022-03-18T08:14:48Z'),
      DBClusterDescription?: string(name='DBClusterDescription', example='test'),
      DBClusterId?: string(name='DBClusterId', example='cc-bp108z124a8o7****'),
      DBClusterStatus?: string(name='DBClusterStatus', example='Running'),
      engineVersion?: string(name='EngineVersion', example='21.8'),
      expireTime?: string(name='ExpireTime', example='2022-04-17T08:14:48Z'),
      lockMode?: string(name='LockMode', example='Unlock'),
      lockReason?: string(name='LockReason', example='DISK_FULL'),
      objectStoreSizeGiB?: long(name='ObjectStoreSizeGiB', example='0'),
      payType?: string(name='PayType', example='Postpaid'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceCpuCores?: int32(name='ResourceCpuCores', example='8'),
      resourceMemoryGiB?: int32(name='ResourceMemoryGiB', example='32'),
      virtualWareHouses?: [ 
        {
          ports?: string(name='Ports', example='tcp:9000,http:8123,mysql:9004'),
          virtualWareHouseCacheStorage?: int32(name='VirtualWareHouseCacheStorage', example='200'),
          virtualWareHouseClass?: string(name='VirtualWareHouseClass', example='n1.xlarge'),
          virtualWareHouseDescription?: string(name='VirtualWareHouseDescription', example='test'),
          virtualWareHouseId?: string(name='VirtualWareHouseId', example='vw-uf6a499c0m3w5****'),
          virtualWareHouseStatus?: string(name='VirtualWareHouseStatus', example='Running'),
          vswitchId?: string(name='VswitchId', example='vsw-bp1tg609m5j85jejq****'),
          zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
        }
      ](name='VirtualWareHouses'),
      vpcId?: string(name='VpcId', description='VPC IDã€‚', example='vpc-2zedznmtm8j7fksbc****'),
      vswitchId?: string(name='VswitchId', example='vsw-bp1tg609m5j85jejq****'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
    }
  ](name='Data'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  requestId?: string(name='RequestId', example='DDB109DC-E37D-5475-8D49-47542C57BD38'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListClustersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClustersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListClusters  ListClustersRequest
  * @return ListClustersResponse
 */
async function listClusters(request: ListClustersRequest): ListClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusters', 'POST', '/', 'json', false, 'json', request);
}

model ListVirtualWareHouseConfigsRequest {
  DBClusterId?: string(name='DBClusterId', example='cc-bp1p816075e21****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  virtualWareHouseId: string(name='VirtualWareHouseId', description='This parameter is required.', example='vw-uf6a499c0m3w5****', position='Query'),
}

model ListVirtualWareHouseConfigsResponseBody = {
  data?: [ 
    {
      configFullPath?: string(name='ConfigFullPath', example='keep_alive_timeout'),
      configType?: string(name='ConfigType', example='config.xml'),
      defaultValue?: string(name='DefaultValue', example='300'),
      description?: string(name='Description', example='The number of seconds that ClickHouse HTTP server waits for incoming requests before closing the connection'),
      needRestart?: boolean(name='NeedRestart', example='true'),
      spec?: string(name='Spec', example='>=10'),
      value?: string(name='Value', example='300'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='87B839E3-7384-52D5-9CAB-756DD3BF7B9B'),
}

model ListVirtualWareHouseConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVirtualWareHouseConfigsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListVirtualWareHouseConfigs  ListVirtualWareHouseConfigsRequest
  * @return ListVirtualWareHouseConfigsResponse
 */
async function listVirtualWareHouseConfigs(request: ListVirtualWareHouseConfigsRequest): ListVirtualWareHouseConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVirtualWareHouseConfigs', 'POST', '/', 'json', false, 'json', request);
}

model ListVirtualWareHousesRequest {
  DBClusterId: string(name='DBClusterId', description='This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListVirtualWareHousesResponseBody = {
  data?: [ 
    {
      ports?: string(name='Ports', example='tcp:9000,http:8123,mysql:9004'),
      virtualWareHouseCacheStorage?: int32(name='VirtualWareHouseCacheStorage', example='200'),
      virtualWareHouseClass?: string(name='VirtualWareHouseClass', example='n1.xlarge'),
      virtualWareHouseDescription?: string(name='VirtualWareHouseDescription', example='test'),
      virtualWareHouseId?: string(name='VirtualWareHouseId', example='vw-bp1w2728d535t****'),
      virtualWareHouseStatus?: string(name='VirtualWareHouseStatus', example='Running'),
      vswitchId?: string(name='VswitchId', example='vsw-bp1tg609m5j85jejq****'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='DD4F7C49-09BC-5BA7-BAC9-F0887E368126'),
}

model ListVirtualWareHousesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVirtualWareHousesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListVirtualWareHouses  ListVirtualWareHousesRequest
  * @return ListVirtualWareHousesResponse
 */
async function listVirtualWareHouses(request: ListVirtualWareHousesRequest): ListVirtualWareHousesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVirtualWareHouses', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccountDescriptionRequest {
  account: string(name='Account', description='This parameter is required.', example='test', position='Query'),
  comment: string(name='Comment', description='This parameter is required.', example='test', position='Query'),
  DBClusterId: string(name='DBClusterId', description='This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ModifyAccountDescriptionResponseBody = {
  requestId?: string(name='RequestId', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
}

model ModifyAccountDescriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAccountDescriptionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAccountDescription  ModifyAccountDescriptionRequest
  * @return ModifyAccountDescriptionResponse
 */
async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccountDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccountPrivilegeRequest {
  account: string(name='Account', description='This parameter is required.', example='test', position='Query'),
  DBClusterId: string(name='DBClusterId', description='This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  privilegeType: string(name='PrivilegeType', description='This parameter is required.', example='Normal', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ModifyAccountPrivilegeResponseBody = {
  requestId?: string(name='RequestId', example='2FED790E-FB61-4721-8C1C-07C627FA5A19'),
}

model ModifyAccountPrivilegeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAccountPrivilegeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAccountPrivilege  ModifyAccountPrivilegeRequest
  * @return ModifyAccountPrivilegeResponse
 */
async function modifyAccountPrivilege(request: ModifyAccountPrivilegeRequest): ModifyAccountPrivilegeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccountPrivilege', 'POST', '/', 'json', false, 'json', request);
}

model ModifyClusterDescriptionRequest {
  DBClusterDescription: string(name='DBClusterDescription', description='This parameter is required.', example='test', position='Query'),
  DBClusterId: string(name='DBClusterId', description='This parameter is required.', example='cc-bp1qx68m06981****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ModifyClusterDescriptionResponseBody = {
  requestId?: string(name='RequestId', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
}

model ModifyClusterDescriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyClusterDescriptionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyClusterDescription  ModifyClusterDescriptionRequest
  * @return ModifyClusterDescriptionResponse
 */
async function modifyClusterDescription(request: ModifyClusterDescriptionRequest): ModifyClusterDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyClusterDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVirtualWareHouseConfigRequest {
  configChanges: [ 
    {
      configFullPath: string(name='ConfigFullPath', description='This parameter is required.', example='keep_alive_timeout'),
      value: string(name='Value', description='This parameter is required.', example='300'),
    }
  ](name='ConfigChanges', description='This parameter is required.', shrink='json', position='Query'),
  DBClusterId?: string(name='DBClusterId', example='cc-bp1qx68m06981****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  virtualWareHouseId: string(name='VirtualWareHouseId', description='This parameter is required.', example='vw-uf62965t8lt50****', position='Query'),
}

model ModifyVirtualWareHouseConfigResponseBody = {
  requestId?: string(name='RequestId', example='108B73B2-F513-5250-81DD-48A63E48C373'),
}

model ModifyVirtualWareHouseConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVirtualWareHouseConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyVirtualWareHouseConfig  ModifyVirtualWareHouseConfigRequest
  * @return ModifyVirtualWareHouseConfigResponse
 */
async function modifyVirtualWareHouseConfig(request: ModifyVirtualWareHouseConfigRequest): ModifyVirtualWareHouseConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVirtualWareHouseConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVirtualWareHouseDescriptionRequest {
  DBClusterId?: string(name='DBClusterId', example='cc-bp108z124a8o7****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  virtualWareHouseDescription: string(name='VirtualWareHouseDescription', description='This parameter is required.', example='test', position='Query'),
  virtualWareHouseId: string(name='VirtualWareHouseId', description='This parameter is required.', example='vw-bp1w2728d535t****', position='Query'),
}

model ModifyVirtualWareHouseDescriptionResponseBody = {
  requestId?: string(name='RequestId', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
}

model ModifyVirtualWareHouseDescriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVirtualWareHouseDescriptionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyVirtualWareHouseDescription  ModifyVirtualWareHouseDescriptionRequest
  * @return ModifyVirtualWareHouseDescriptionResponse
 */
async function modifyVirtualWareHouseDescription(request: ModifyVirtualWareHouseDescriptionRequest): ModifyVirtualWareHouseDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVirtualWareHouseDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVirtualWareHouseResourceRequest {
  DBClusterId?: string(name='DBClusterId', example='cc-bp108z124a8o7****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  virtualWareHouseCacheStorage: int32(name='VirtualWareHouseCacheStorage', description='This parameter is required.', example='200', position='Query'),
  virtualWareHouseClass: string(name='VirtualWareHouseClass', description='This parameter is required.', example='n1.xlarge', position='Query'),
  virtualWareHouseId: string(name='VirtualWareHouseId', description='This parameter is required.', example='vw-uf62965t8lt50****', position='Query'),
}

model ModifyVirtualWareHouseResourceResponseBody = {
  data?: {
    orderId?: long(name='OrderId', example='21152548723****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='D0CEC6AC-7760-409A-A0D5-E6CD8660E9CC'),
}

model ModifyVirtualWareHouseResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVirtualWareHouseResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyVirtualWareHouseResource  ModifyVirtualWareHouseResourceRequest
  * @return ModifyVirtualWareHouseResourceResponse
 */
async function modifyVirtualWareHouseResource(request: ModifyVirtualWareHouseResourceRequest): ModifyVirtualWareHouseResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVirtualWareHouseResource', 'POST', '/', 'json', false, 'json', request);
}

model PatchClusterSecurityIPGroupRequest {
  DBClusterId: string(name='DBClusterId', description='This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  groupName: string(name='GroupName', description='This parameter is required.', example='test', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  securityIps: string(name='SecurityIps', description='This parameter is required.', example='192.168.xx.xx', position='Query'),
}

model PatchClusterSecurityIPGroupResponseBody = {
  requestId?: string(name='RequestId', example='05321590-BB65-4720-8CB6-8218E041CDD0'),
}

model PatchClusterSecurityIPGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PatchClusterSecurityIPGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PatchClusterSecurityIPGroup  PatchClusterSecurityIPGroupRequest
  * @return PatchClusterSecurityIPGroupResponse
 */
async function patchClusterSecurityIPGroup(request: PatchClusterSecurityIPGroupRequest): PatchClusterSecurityIPGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PatchClusterSecurityIPGroup', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseVirtualWareHousePublicConnectionRequest {
  DBClusterId?: string(name='DBClusterId', example='cc-bp108z124a8o7****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  virtualWareHouseId: string(name='VirtualWareHouseId', description='This parameter is required.', example='vw-bp1w2728d535t****', position='Query'),
}

model ReleaseVirtualWareHousePublicConnectionResponseBody = {
  requestId?: string(name='RequestId', example='05321590-BB65-4720-8CB6-8218E041CDD0'),
}

model ReleaseVirtualWareHousePublicConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseVirtualWareHousePublicConnectionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReleaseVirtualWareHousePublicConnection  ReleaseVirtualWareHousePublicConnectionRequest
  * @return ReleaseVirtualWareHousePublicConnectionResponse
 */
async function releaseVirtualWareHousePublicConnection(request: ReleaseVirtualWareHousePublicConnectionRequest): ReleaseVirtualWareHousePublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseVirtualWareHousePublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model ResetAccountPasswordRequest {
  account: string(name='Account', description='This parameter is required.', example='test', position='Query'),
  DBClusterId: string(name='DBClusterId', description='This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  password?: string(name='Password', example='123456Aa', position='Query'),
  passwordSha256Hex?: string(name='PasswordSha256Hex', example='b17e1e0450dac425ea318253f6f852972d69731d6c7499c001468b695b6da219', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ResetAccountPasswordResponseBody = {
  requestId?: string(name='RequestId', example='5A6A077A-577C-536E-AC13-8E715D7A34C8'),
}

model ResetAccountPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetAccountPasswordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResetAccountPassword  ResetAccountPasswordRequest
  * @return ResetAccountPasswordResponse
 */
async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAccountPassword', 'POST', '/', 'json', false, 'json', request);
}

model RestartVirtualWareHouseRequest {
  DBClusterId?: string(name='DBClusterId', example='cc-bp1p816075e21****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  virtualWareHouseId: string(name='VirtualWareHouseId', description='This parameter is required.', example='vw-bp1w2728d535t****', position='Query'),
}

model RestartVirtualWareHouseResponseBody = {
  requestId?: string(name='RequestId', example='DE1F69AE-6F82-5227-B691-DF14AD36A460'),
}

model RestartVirtualWareHouseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartVirtualWareHouseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RestartVirtualWareHouse  RestartVirtualWareHouseRequest
  * @return RestartVirtualWareHouseResponse
 */
async function restartVirtualWareHouse(request: RestartVirtualWareHouseRequest): RestartVirtualWareHouseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartVirtualWareHouse', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeClusterRequest {
  DBClusterId: string(name='DBClusterId', description='This parameter is required.', example='cc-8vbsom12x476u****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model UpgradeClusterResponseBody = {
  requestId?: string(name='RequestId', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
}

model UpgradeClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpgradeCluster  UpgradeClusterRequest
  * @return UpgradeClusterResponse
 */
async function upgradeCluster(request: UpgradeClusterRequest): UpgradeClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeCluster', 'POST', '/', 'json', false, 'json', request);
}

model UpsertClusterSecurityIPGroupRequest {
  DBClusterId: string(name='DBClusterId', description='This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  groupName: string(name='GroupName', description='This parameter is required.', example='test', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  securityIps: string(name='SecurityIps', description='This parameter is required.', example='192.168.xx.xx', position='Query'),
}

model UpsertClusterSecurityIPGroupResponseBody = {
  requestId?: string(name='RequestId', example='A6DB2D3E-3E87-5804-9D42-9D51EC7A7D33'),
}

model UpsertClusterSecurityIPGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpsertClusterSecurityIPGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpsertClusterSecurityIPGroup  UpsertClusterSecurityIPGroupRequest
  * @return UpsertClusterSecurityIPGroupResponse
 */
async function upsertClusterSecurityIPGroup(request: UpsertClusterSecurityIPGroupRequest): UpsertClusterSecurityIPGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpsertClusterSecurityIPGroup', 'POST', '/', 'json', false, 'json', request);
}

