/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'clickhouse.aliyuncs.com',
    ap-southeast-1 = 'clickhouse.aliyuncs.com',
    cn-beijing = 'clickhouse.aliyuncs.com',
    cn-beijing-finance-1 = 'clickhouse.aliyuncs.com',
    cn-beijing-finance-pop = 'clickhouse.aliyuncs.com',
    cn-beijing-gov-1 = 'clickhouse.aliyuncs.com',
    cn-beijing-nu16-b01 = 'clickhouse.aliyuncs.com',
    cn-edge-1 = 'clickhouse.aliyuncs.com',
    cn-fujian = 'clickhouse.aliyuncs.com',
    cn-haidian-cm12-c01 = 'clickhouse.aliyuncs.com',
    cn-hangzhou = 'clickhouse.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-finance = 'clickhouse.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-test-306 = 'clickhouse.aliyuncs.com',
    cn-hongkong = 'clickhouse.aliyuncs.com',
    cn-hongkong-finance-pop = 'clickhouse.aliyuncs.com',
    cn-north-2-gov-1 = 'clickhouse.aliyuncs.com',
    cn-qingdao = 'clickhouse.aliyuncs.com',
    cn-qingdao-nebula = 'clickhouse.aliyuncs.com',
    cn-shanghai = 'clickhouse.aliyuncs.com',
    cn-shanghai-et15-b01 = 'clickhouse.aliyuncs.com',
    cn-shanghai-et2-b01 = 'clickhouse.aliyuncs.com',
    cn-shanghai-finance-1 = 'clickhouse.aliyuncs.com',
    cn-shanghai-inner = 'clickhouse.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'clickhouse.aliyuncs.com',
    cn-shenzhen = 'clickhouse.aliyuncs.com',
    cn-shenzhen-finance-1 = 'clickhouse.aliyuncs.com',
    cn-shenzhen-inner = 'clickhouse.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'clickhouse.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'clickhouse.aliyuncs.com',
    cn-wuhan = 'clickhouse.aliyuncs.com',
    cn-yushanfang = 'clickhouse.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'clickhouse.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'clickhouse.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'clickhouse.aliyuncs.com',
    eu-west-1-oxs = 'clickhouse.aliyuncs.com',
    me-east-1 = 'clickhouse.aliyuncs.com',
    rus-west-1-pop = 'clickhouse.aliyuncs.com',
    us-east-1 = 'clickhouse.aliyuncs.com',
    us-west-1 = 'clickhouse.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('clickhouse', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AllocateVirtualWareHousePublicConnectionRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  virtualWareHouseId?: string(name='VirtualWareHouseId', description='计算组ID'),
}

model AllocateVirtualWareHousePublicConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model AllocateVirtualWareHousePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateVirtualWareHousePublicConnectionResponseBody(name='body'),
}

async function allocateVirtualWareHousePublicConnectionWithOptions(request: AllocateVirtualWareHousePublicConnectionRequest, runtime: Util.RuntimeOptions): AllocateVirtualWareHousePublicConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.virtualWareHouseId)) {
    query['VirtualWareHouseId'] = request.virtualWareHouseId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllocateVirtualWareHousePublicConnection',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function allocateVirtualWareHousePublicConnection(request: AllocateVirtualWareHousePublicConnectionRequest): AllocateVirtualWareHousePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateVirtualWareHousePublicConnectionWithOptions(request, runtime);
}

model CheckCreateClusterRequest {
  autoRenew?: boolean(name='AutoRenew', description='是否自动续费'),
  DBClusterDescription?: string(name='DBClusterDescription', description='实例描述信息'),
  payType?: string(name='PayType', description='付费类型 Prepaid | Postpaid'),
  period?: string(name='Period', description='预付费周期 Year | Month'),
  regionId?: string(name='RegionId'),
  usedTime?: string(name='UsedTime', description='预付费时长'),
  virtualWareHouseCacheStorage?: int32(name='VirtualWareHouseCacheStorage', description='计算组本地缓存空间 GiB'),
  virtualWareHouseClass?: string(name='VirtualWareHouseClass', description='计算组规格码'),
  virtualWareHouseDescription?: string(name='VirtualWareHouseDescription', description='计算组描述信息'),
  vpcId?: string(name='VpcId'),
  vswitchId?: string(name='VswitchId', description='默认交换机ID'),
  zoneId?: string(name='ZoneId', description='可用区ID'),
}

model CheckCreateClusterResponseBody = {
  data?: {
    expectedDBClusterStatus?: string(name='ExpectedDBClusterStatus', description='预期变更后的实例状态'),
    expectedOrderFinishSeconds?: long(name='ExpectedOrderFinishSeconds', description='预期变更完成需要的时间 秒'),
    expectedTargetVirtualWareHouseStatus?: string(name='ExpectedTargetVirtualWareHouseStatus', description='预期变更后的计算组状态'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model CheckCreateClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CheckCreateClusterResponseBody(name='body'),
}

async function checkCreateClusterWithOptions(request: CheckCreateClusterRequest, runtime: Util.RuntimeOptions): CheckCreateClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.DBClusterDescription)) {
    query['DBClusterDescription'] = request.DBClusterDescription;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.usedTime)) {
    query['UsedTime'] = request.usedTime;
  }
  if (!Util.isUnset(request.virtualWareHouseCacheStorage)) {
    query['VirtualWareHouseCacheStorage'] = request.virtualWareHouseCacheStorage;
  }
  if (!Util.isUnset(request.virtualWareHouseClass)) {
    query['VirtualWareHouseClass'] = request.virtualWareHouseClass;
  }
  if (!Util.isUnset(request.virtualWareHouseDescription)) {
    query['VirtualWareHouseDescription'] = request.virtualWareHouseDescription;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vswitchId)) {
    query['VswitchId'] = request.vswitchId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckCreateCluster',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkCreateCluster(request: CheckCreateClusterRequest): CheckCreateClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkCreateClusterWithOptions(request, runtime);
}

model CheckCreateVirtualWareHouseRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  virtualWareHouseCacheStorage?: int32(name='VirtualWareHouseCacheStorage', description='计算组本地缓存空间 GiB'),
  virtualWareHouseClass?: string(name='VirtualWareHouseClass', description='计算组规格码'),
  virtualWareHouseDescription?: string(name='VirtualWareHouseDescription', description='计算组描述信息'),
  vswitchId?: string(name='VswitchId', description='交换机ID'),
  zoneId?: string(name='ZoneId', description='可用区ID'),
}

model CheckCreateVirtualWareHouseResponseBody = {
  data?: {
    expectedDBClusterStatus?: string(name='ExpectedDBClusterStatus', description='预期变更后的实例状态'),
    expectedOrderFinishSeconds?: long(name='ExpectedOrderFinishSeconds', description='预期变更完成需要的时间 秒'),
    expectedTargetVirtualWareHouseStatus?: string(name='ExpectedTargetVirtualWareHouseStatus', description='预期变更后的计算组状态'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model CheckCreateVirtualWareHouseResponse = {
  headers: map[string]string(name='headers'),
  body: CheckCreateVirtualWareHouseResponseBody(name='body'),
}

async function checkCreateVirtualWareHouseWithOptions(request: CheckCreateVirtualWareHouseRequest, runtime: Util.RuntimeOptions): CheckCreateVirtualWareHouseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.virtualWareHouseCacheStorage)) {
    query['VirtualWareHouseCacheStorage'] = request.virtualWareHouseCacheStorage;
  }
  if (!Util.isUnset(request.virtualWareHouseClass)) {
    query['VirtualWareHouseClass'] = request.virtualWareHouseClass;
  }
  if (!Util.isUnset(request.virtualWareHouseDescription)) {
    query['VirtualWareHouseDescription'] = request.virtualWareHouseDescription;
  }
  if (!Util.isUnset(request.vswitchId)) {
    query['VswitchId'] = request.vswitchId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckCreateVirtualWareHouse',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkCreateVirtualWareHouse(request: CheckCreateVirtualWareHouseRequest): CheckCreateVirtualWareHouseResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkCreateVirtualWareHouseWithOptions(request, runtime);
}

model CheckDeleteVirtualWareHouseRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  virtualWareHouseId?: string(name='VirtualWareHouseId', description='计算组ID'),
}

model CheckDeleteVirtualWareHouseResponseBody = {
  data?: {
    expectedDBClusterStatus?: string(name='ExpectedDBClusterStatus', description='预期变更后的实例状态'),
    expectedOrderFinishSeconds?: long(name='ExpectedOrderFinishSeconds', description='预期变更完成需要的时间 秒'),
    expectedTargetVirtualWareHouseStatus?: string(name='ExpectedTargetVirtualWareHouseStatus', description='预期变更后的计算组状态'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model CheckDeleteVirtualWareHouseResponse = {
  headers: map[string]string(name='headers'),
  body: CheckDeleteVirtualWareHouseResponseBody(name='body'),
}

async function checkDeleteVirtualWareHouseWithOptions(request: CheckDeleteVirtualWareHouseRequest, runtime: Util.RuntimeOptions): CheckDeleteVirtualWareHouseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.virtualWareHouseId)) {
    query['VirtualWareHouseId'] = request.virtualWareHouseId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckDeleteVirtualWareHouse',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkDeleteVirtualWareHouse(request: CheckDeleteVirtualWareHouseRequest): CheckDeleteVirtualWareHouseResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkDeleteVirtualWareHouseWithOptions(request, runtime);
}

model CheckModifyVirtualWareHouseResourceRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  virtualWareHouseCacheStorage?: int32(name='VirtualWareHouseCacheStorage', description='计算组本地缓存空间 GiB'),
  virtualWareHouseClass?: string(name='VirtualWareHouseClass', description='计算组规格码'),
  virtualWareHouseId?: string(name='VirtualWareHouseId', description='计算组ID'),
}

model CheckModifyVirtualWareHouseResourceResponseBody = {
  data?: {
    expectedDBClusterStatus?: string(name='ExpectedDBClusterStatus', description='预期变更后的实例状态'),
    expectedOrderFinishSeconds?: long(name='ExpectedOrderFinishSeconds', description='预期变更完成需要的时间 秒'),
    expectedTargetVirtualWareHouseStatus?: string(name='ExpectedTargetVirtualWareHouseStatus', description='预期变更后的计算组状态'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model CheckModifyVirtualWareHouseResourceResponse = {
  headers: map[string]string(name='headers'),
  body: CheckModifyVirtualWareHouseResourceResponseBody(name='body'),
}

async function checkModifyVirtualWareHouseResourceWithOptions(request: CheckModifyVirtualWareHouseResourceRequest, runtime: Util.RuntimeOptions): CheckModifyVirtualWareHouseResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.virtualWareHouseCacheStorage)) {
    query['VirtualWareHouseCacheStorage'] = request.virtualWareHouseCacheStorage;
  }
  if (!Util.isUnset(request.virtualWareHouseClass)) {
    query['VirtualWareHouseClass'] = request.virtualWareHouseClass;
  }
  if (!Util.isUnset(request.virtualWareHouseId)) {
    query['VirtualWareHouseId'] = request.virtualWareHouseId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckModifyVirtualWareHouseResource',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkModifyVirtualWareHouseResource(request: CheckModifyVirtualWareHouseResourceRequest): CheckModifyVirtualWareHouseResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkModifyVirtualWareHouseResourceWithOptions(request, runtime);
}

model CreateAccountRequest {
  account?: string(name='Account', description='账户名称'),
  comment?: string(name='Comment', description='账户备注信息'),
  DBClusterId?: string(name='DBClusterId'),
  password?: string(name='Password', description='账户明文密码'),
  passwordSha256Hex?: string(name='PasswordSha256Hex', description='账户密码sha256hex 优先使用明文密码'),
  privilegeType?: string(name='PrivilegeType', description='账户权限类型 Normal:普通账户 | Readonly:只读账户 | Dml:DML账户-禁止DDL | Super:超级账户'),
  regionId?: string(name='RegionId'),
}

model CreateAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAccountResponseBody(name='body'),
}

async function createAccountWithOptions(request: CreateAccountRequest, runtime: Util.RuntimeOptions): CreateAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.account)) {
    query['Account'] = request.account;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.passwordSha256Hex)) {
    query['PasswordSha256Hex'] = request.passwordSha256Hex;
  }
  if (!Util.isUnset(request.privilegeType)) {
    query['PrivilegeType'] = request.privilegeType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAccount',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccountWithOptions(request, runtime);
}

model CreateClusterRequest {
  autoRenew?: boolean(name='AutoRenew', description='是否自动续费'),
  DBClusterDescription?: string(name='DBClusterDescription', description='实例描述信息'),
  payType?: string(name='PayType', description='付费类型 Prepaid | Postpaid'),
  period?: string(name='Period', description='预付费周期 Year | Month'),
  regionId?: string(name='RegionId'),
  usedTime?: string(name='UsedTime', description='预付费时长'),
  virtualWareHouseCacheStorage?: int32(name='VirtualWareHouseCacheStorage', description='计算组本地缓存空间 GiB'),
  virtualWareHouseClass?: string(name='VirtualWareHouseClass', description='计算组规格码'),
  virtualWareHouseDescription?: string(name='VirtualWareHouseDescription', description='计算组描述信息'),
  vpcId?: string(name='VpcId'),
  vswitchId?: string(name='VswitchId', description='默认交换机ID'),
  zoneId?: string(name='ZoneId', description='可用区ID'),
}

model CreateClusterResponseBody = {
  data?: {
    DBClusterId?: string(name='DBClusterId'),
    orderId?: long(name='OrderId'),
    virtualWareHouseId?: string(name='VirtualWareHouseId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model CreateClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateClusterResponseBody(name='body'),
}

async function createClusterWithOptions(request: CreateClusterRequest, runtime: Util.RuntimeOptions): CreateClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.DBClusterDescription)) {
    query['DBClusterDescription'] = request.DBClusterDescription;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.usedTime)) {
    query['UsedTime'] = request.usedTime;
  }
  if (!Util.isUnset(request.virtualWareHouseCacheStorage)) {
    query['VirtualWareHouseCacheStorage'] = request.virtualWareHouseCacheStorage;
  }
  if (!Util.isUnset(request.virtualWareHouseClass)) {
    query['VirtualWareHouseClass'] = request.virtualWareHouseClass;
  }
  if (!Util.isUnset(request.virtualWareHouseDescription)) {
    query['VirtualWareHouseDescription'] = request.virtualWareHouseDescription;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vswitchId)) {
    query['VswitchId'] = request.vswitchId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCluster',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createClusterWithOptions(request, runtime);
}

model CreateVirtualWareHouseRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  virtualWareHouseCacheStorage?: int32(name='VirtualWareHouseCacheStorage', description='计算组本地缓存空间 GiB'),
  virtualWareHouseClass?: string(name='VirtualWareHouseClass', description='计算组规格码'),
  virtualWareHouseDescription?: string(name='VirtualWareHouseDescription', description='计算组描述信息'),
  vswitchId?: string(name='VswitchId', description='交换机ID'),
  zoneId?: string(name='ZoneId', description='可用区ID'),
}

model CreateVirtualWareHouseResponseBody = {
  data?: {
    orderId?: long(name='OrderId'),
    virtualWareHouseId?: string(name='VirtualWareHouseId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model CreateVirtualWareHouseResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVirtualWareHouseResponseBody(name='body'),
}

async function createVirtualWareHouseWithOptions(request: CreateVirtualWareHouseRequest, runtime: Util.RuntimeOptions): CreateVirtualWareHouseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.virtualWareHouseCacheStorage)) {
    query['VirtualWareHouseCacheStorage'] = request.virtualWareHouseCacheStorage;
  }
  if (!Util.isUnset(request.virtualWareHouseClass)) {
    query['VirtualWareHouseClass'] = request.virtualWareHouseClass;
  }
  if (!Util.isUnset(request.virtualWareHouseDescription)) {
    query['VirtualWareHouseDescription'] = request.virtualWareHouseDescription;
  }
  if (!Util.isUnset(request.vswitchId)) {
    query['VswitchId'] = request.vswitchId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVirtualWareHouse',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVirtualWareHouse(request: CreateVirtualWareHouseRequest): CreateVirtualWareHouseResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVirtualWareHouseWithOptions(request, runtime);
}

model DeleteAccountRequest {
  account?: string(name='Account', description='账户名称'),
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
}

model DeleteAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAccountResponseBody(name='body'),
}

async function deleteAccountWithOptions(request: DeleteAccountRequest, runtime: Util.RuntimeOptions): DeleteAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.account)) {
    query['Account'] = request.account;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAccount',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccountWithOptions(request, runtime);
}

model DeleteClusterRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
}

model DeleteClusterResponseBody = {
  data?: {
    orderId?: long(name='OrderId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DeleteClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteClusterResponseBody(name='body'),
}

async function deleteClusterWithOptions(request: DeleteClusterRequest, runtime: Util.RuntimeOptions): DeleteClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCluster',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteClusterWithOptions(request, runtime);
}

model DeleteClusterSecurityIPGroupRequest {
  DBClusterId?: string(name='DBClusterId'),
  groupName?: string(name='GroupName', description='安全组名称'),
  regionId?: string(name='RegionId'),
}

model DeleteClusterSecurityIPGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteClusterSecurityIPGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteClusterSecurityIPGroupResponseBody(name='body'),
}

async function deleteClusterSecurityIPGroupWithOptions(request: DeleteClusterSecurityIPGroupRequest, runtime: Util.RuntimeOptions): DeleteClusterSecurityIPGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteClusterSecurityIPGroup',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteClusterSecurityIPGroup(request: DeleteClusterSecurityIPGroupRequest): DeleteClusterSecurityIPGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteClusterSecurityIPGroupWithOptions(request, runtime);
}

model DeleteVirtualWareHouseRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  virtualWareHouseId?: string(name='VirtualWareHouseId', description='计算组ID'),
}

model DeleteVirtualWareHouseResponseBody = {
  data?: {
    orderId?: long(name='OrderId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DeleteVirtualWareHouseResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVirtualWareHouseResponseBody(name='body'),
}

async function deleteVirtualWareHouseWithOptions(request: DeleteVirtualWareHouseRequest, runtime: Util.RuntimeOptions): DeleteVirtualWareHouseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.virtualWareHouseId)) {
    query['VirtualWareHouseId'] = request.virtualWareHouseId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVirtualWareHouse',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVirtualWareHouse(request: DeleteVirtualWareHouseRequest): DeleteVirtualWareHouseResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVirtualWareHouseWithOptions(request, runtime);
}

model DescribeAccountRequest {
  account?: string(name='Account', description='账户名称'),
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
}

model DescribeAccountResponseBody = {
  data?: {
    account?: string(name='Account', description='账户名称'),
    comment?: string(name='Comment', description='账户备注'),
    passwordSha256Hex?: string(name='PasswordSha256Hex', description='账户密码sha256hex'),
    privilegeDescription?: string(name='PrivilegeDescription', description='账户权限描述'),
    privilegeType?: string(name='PrivilegeType', description='账户权限类型'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccountResponseBody(name='body'),
}

async function describeAccountWithOptions(request: DescribeAccountRequest, runtime: Util.RuntimeOptions): DescribeAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.account)) {
    query['Account'] = request.account;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccount',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAccount(request: DescribeAccountRequest): DescribeAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountWithOptions(request, runtime);
}

model DescribeClusterRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
}

model DescribeClusterResponseBody = {
  data?: {
    aliUid?: long(name='AliUid', description='实例所属账户Uid'),
    cacheStorageSizeGiB?: int32(name='CacheStorageSizeGiB', description='实例总本地缓存空间 GiB'),
    cacheStorageType?: string(name='CacheStorageType', description='实例本地缓存类型'),
    commodityCode?: string(name='CommodityCode', description='商品Code'),
    createTime?: string(name='CreateTime', description='实例创建时间 UTC时间'),
    DBClusterDescription?: string(name='DBClusterDescription', description='实例描述信息'),
    DBClusterId?: string(name='DBClusterId'),
    DBClusterStatus?: string(name='DBClusterStatus', description='实例状态 详见describeClusterStatusSet接口'),
    engineVersion?: string(name='EngineVersion', description='内核版本'),
    expireTime?: string(name='ExpireTime', description='实例到期时间 UTC时间'),
    lockMode?: string(name='LockMode', description='实例锁定状态 Unlock:正常 | ManualLock:手动锁定 | LockByExpiration:过期锁定'),
    lockReason?: string(name='LockReason', description='实例锁定原因'),
    objectStoreSizeGiB?: long(name='ObjectStoreSizeGiB', description='实例总对象存储空间 GiB'),
    payType?: string(name='PayType', description='付费类型'),
    regionId?: string(name='RegionId'),
    resourceCpuCores?: int32(name='ResourceCpuCores', description='实例总CPU资源 cores'),
    resourceMemoryGiB?: int32(name='ResourceMemoryGiB', description='实例总内存资源 GiB'),
    virtualWareHouses?: [ 
      {
        ports?: string(name='Ports', description='端口信息 英文逗号分隔'),
        virtualWareHouseCacheStorage?: int32(name='VirtualWareHouseCacheStorage', description='计算组本地缓存空间GiB'),
        virtualWareHouseClass?: string(name='VirtualWareHouseClass', description='计算组规格码'),
        virtualWareHouseDescription?: string(name='VirtualWareHouseDescription', description='计算组描述信息'),
        virtualWareHouseId?: string(name='VirtualWareHouseId'),
        virtualWareHouseStatus?: string(name='VirtualWareHouseStatus', description='计算组状态 详见describeVirtualWareHouseStatusSet接口'),
        vswitchId?: string(name='VswitchId', description='交换机ID'),
        zoneId?: string(name='ZoneId', description='可用区'),
      }
    ](name='VirtualWareHouses', description='计算组列表'),
    vpcId?: string(name='VpcId'),
    vswitchId?: string(name='VswitchId', description='默认交换机ID'),
    zoneId?: string(name='ZoneId', description='默认可用区'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterResponseBody(name='body'),
}

async function describeClusterWithOptions(request: DescribeClusterRequest, runtime: Util.RuntimeOptions): DescribeClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCluster',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCluster(request: DescribeClusterRequest): DescribeClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterWithOptions(request, runtime);
}

model DescribeClusterSecurityInfoRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
}

model DescribeClusterSecurityInfoResponseBody = {
  data?: {
    securityIpGroups?: [ 
      {
        groupName?: string(name='GroupName', description='安全组名称'),
        securityIps?: string(name='SecurityIps', description='IP列表 英文逗号分隔'),
      }
    ](name='SecurityIpGroups', description='安全组列表'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeClusterSecurityInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterSecurityInfoResponseBody(name='body'),
}

async function describeClusterSecurityInfoWithOptions(request: DescribeClusterSecurityInfoRequest, runtime: Util.RuntimeOptions): DescribeClusterSecurityInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterSecurityInfo',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterSecurityInfo(request: DescribeClusterSecurityInfoRequest): DescribeClusterSecurityInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterSecurityInfoWithOptions(request, runtime);
}

model DescribeClusterStatusSetResponseBody = {
  data?: [ 
    {
      desc?: string(name='Desc', description='描述'),
      value?: string(name='Value', description='状态值'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeClusterStatusSetResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterStatusSetResponseBody(name='body'),
}

async function describeClusterStatusSetWithOptions(runtime: Util.RuntimeOptions): DescribeClusterStatusSetResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeClusterStatusSet',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterStatusSet(): DescribeClusterStatusSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterStatusSetWithOptions(runtime);
}

model DescribeRegionsRequest {
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId', description='可用区ID'),
}

model DescribeRegionsResponseBody = {
  data?: [ 
    {
      regionId?: string(name='RegionId'),
      zones?: [ 
        {
          vpcEnabled?: boolean(name='VpcEnabled'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='Zones'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeRunningQueryRequest {
  DBClusterId?: string(name='DBClusterId'),
  pageNumber?: int32(name='PageNumber', description='分页码 从1开始 默认值1'),
  pageSize?: int32(name='PageSize', description='分页大小 默认值30'),
  queryDurationMs?: long(name='QueryDurationMs', description='指定查询最小持续时间 毫秒 最小值1000 默认值1000'),
  queryId?: string(name='QueryId', description='指定查询ID'),
  queryKeyWord?: string(name='QueryKeyWord', description='指定查询关键字'),
  queryUser?: string(name='QueryUser', description='指定查询用户'),
  regionId?: string(name='RegionId'),
  virtualWareHouseId?: string(name='VirtualWareHouseId', description='计算组ID'),
}

model DescribeRunningQueryResponseBody = {
  data?: [ 
    {
      initialAddress?: string(name='InitialAddress', description='查询源地址'),
      initialQueryId?: string(name='InitialQueryId', description='查询ID'),
      initialUser?: string(name='InitialUser', description='查询用户'),
      query?: string(name='Query'),
      queryDurationMs?: long(name='QueryDurationMs', description='查询持续时间 毫秒'),
      queryStartTime?: string(name='QueryStartTime', description='查询起始时间 UTC时间'),
    }
  ](name='Data'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeRunningQueryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRunningQueryResponseBody(name='body'),
}

async function describeRunningQueryWithOptions(request: DescribeRunningQueryRequest, runtime: Util.RuntimeOptions): DescribeRunningQueryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryDurationMs)) {
    query['QueryDurationMs'] = request.queryDurationMs;
  }
  if (!Util.isUnset(request.queryId)) {
    query['QueryId'] = request.queryId;
  }
  if (!Util.isUnset(request.queryKeyWord)) {
    query['QueryKeyWord'] = request.queryKeyWord;
  }
  if (!Util.isUnset(request.queryUser)) {
    query['QueryUser'] = request.queryUser;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.virtualWareHouseId)) {
    query['VirtualWareHouseId'] = request.virtualWareHouseId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRunningQuery',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRunningQuery(request: DescribeRunningQueryRequest): DescribeRunningQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRunningQueryWithOptions(request, runtime);
}

model DescribeSlowQueryRequest {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime', description='时间窗口终点 UTC时间 默认值当前时间'),
  pageNumber?: int32(name='PageNumber', description='分页码 从1开始 默认值1'),
  pageSize?: int32(name='PageSize', description='分页大小 默认值30'),
  queryDurationMs?: long(name='QueryDurationMs', description='查询最小持续时间 毫秒 最小值1000 默认值1000'),
  regionId?: string(name='RegionId'),
  startTime?: string(name='StartTime', description='时间窗口起点 UTC时间 默认值当前时间减1小时'),
  virtualWareHouseId?: string(name='VirtualWareHouseId', description='计算组ID'),
}

model DescribeSlowQueryResponseBody = {
  data?: [ 
    {
      initialAddress?: string(name='InitialAddress', description='查询源地址'),
      initialQueryId?: string(name='InitialQueryId', description='查询ID'),
      initialUser?: string(name='InitialUser', description='查询用户'),
      memoryUsage?: long(name='MemoryUsage', description='查询内存使用峰值'),
      query?: string(name='Query'),
      queryDurationMs?: long(name='QueryDurationMs', description='查询持续时间 毫秒'),
      queryStartTime?: string(name='QueryStartTime', description='查询起始时间 UTC时间'),
      queryState?: string(name='QueryState', description='查询状态'),
      readBytes?: long(name='ReadBytes'),
      readRows?: long(name='ReadRows'),
      resultBytes?: long(name='ResultBytes'),
      resultRows?: long(name='ResultRows'),
    }
  ](name='Data'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSlowQueryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowQueryResponseBody(name='body'),
}

async function describeSlowQueryWithOptions(request: DescribeSlowQueryRequest, runtime: Util.RuntimeOptions): DescribeSlowQueryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryDurationMs)) {
    query['QueryDurationMs'] = request.queryDurationMs;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.virtualWareHouseId)) {
    query['VirtualWareHouseId'] = request.virtualWareHouseId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSlowQuery',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSlowQuery(request: DescribeSlowQueryRequest): DescribeSlowQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowQueryWithOptions(request, runtime);
}

model DescribeSlowQueryTrendRequest {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime', description='时间窗口终点 UTC时间 默认值当前时间'),
  queryDurationMs?: long(name='QueryDurationMs', description='查询最小持续时间 毫秒 最小值1000 默认值1000'),
  regionId?: string(name='RegionId'),
  startTime?: string(name='StartTime', description='时间窗口起点 UTC时间 默认值当前时间减1小时'),
  virtualWareHouseId?: string(name='VirtualWareHouseId', description='计算组ID'),
}

model DescribeSlowQueryTrendResponseBody = {
  data?: [ 
    {
      avgDurationMs?: long(name='AvgDurationMs', description='平均查询耗时 毫秒'),
      count?: int32(name='Count', description='慢查询数量'),
      maxDurationMs?: long(name='MaxDurationMs', description='最大查询耗时 毫秒'),
      minDurationMs?: long(name='MinDurationMs', description='最小查询耗时 毫秒'),
      startTime?: string(name='StartTime', description='统计时间窗口起点 UTC时间'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeSlowQueryTrendResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowQueryTrendResponseBody(name='body'),
}

async function describeSlowQueryTrendWithOptions(request: DescribeSlowQueryTrendRequest, runtime: Util.RuntimeOptions): DescribeSlowQueryTrendResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.queryDurationMs)) {
    query['QueryDurationMs'] = request.queryDurationMs;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.virtualWareHouseId)) {
    query['VirtualWareHouseId'] = request.virtualWareHouseId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSlowQueryTrend',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSlowQueryTrend(request: DescribeSlowQueryTrendRequest): DescribeSlowQueryTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowQueryTrendWithOptions(request, runtime);
}

model DescribeVirtualWareHouseRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  virtualWareHouseId?: string(name='VirtualWareHouseId', description='计算组ID'),
}

model DescribeVirtualWareHouseResponseBody = {
  data?: {
    ports?: string(name='Ports', description='端口信息 英文逗号分隔'),
    virtualWareHouseCacheStorage?: int32(name='VirtualWareHouseCacheStorage', description='计算组本地缓存空间GiB'),
    virtualWareHouseClass?: string(name='VirtualWareHouseClass', description='计算组规格码'),
    virtualWareHouseDescription?: string(name='VirtualWareHouseDescription', description='计算组描述信息'),
    virtualWareHouseId?: string(name='VirtualWareHouseId'),
    virtualWareHouseStatus?: string(name='VirtualWareHouseStatus', description='计算组状态 详见describeVirtualWareHouseStatusSet接口'),
    vswitchId?: string(name='VswitchId', description='交换机ID'),
    zoneId?: string(name='ZoneId', description='可用区'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeVirtualWareHouseResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVirtualWareHouseResponseBody(name='body'),
}

async function describeVirtualWareHouseWithOptions(request: DescribeVirtualWareHouseRequest, runtime: Util.RuntimeOptions): DescribeVirtualWareHouseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.virtualWareHouseId)) {
    query['VirtualWareHouseId'] = request.virtualWareHouseId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVirtualWareHouse',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVirtualWareHouse(request: DescribeVirtualWareHouseRequest): DescribeVirtualWareHouseResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVirtualWareHouseWithOptions(request, runtime);
}

model DescribeVirtualWareHouseClassSetResponseBody = {
  data?: [ 
    {
      cacheStorageStep?: int32(name='CacheStorageStep', description='最大本地缓存空间调整步长 GiB'),
      cpuCores?: int32(name='CpuCores', description='CPU资源 cores'),
      maxCacheStorage?: int32(name='MaxCacheStorage', description='最大本地缓存空间 GiB'),
      memoryGiB?: int32(name='MemoryGiB', description='内存资源 GiB'),
      minCacheStorage?: int32(name='MinCacheStorage', description='最小本地缓存空间 GiB'),
      value?: string(name='Value', description='规格码'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeVirtualWareHouseClassSetResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVirtualWareHouseClassSetResponseBody(name='body'),
}

async function describeVirtualWareHouseClassSetWithOptions(runtime: Util.RuntimeOptions): DescribeVirtualWareHouseClassSetResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeVirtualWareHouseClassSet',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVirtualWareHouseClassSet(): DescribeVirtualWareHouseClassSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVirtualWareHouseClassSetWithOptions(runtime);
}

model DescribeVirtualWareHouseEndpointInfoRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  virtualWareHouseId?: string(name='VirtualWareHouseId', description='计算组ID'),
}

model DescribeVirtualWareHouseEndpointInfoResponseBody = {
  data?: [ 
    {
      endpointType?: string(name='EndpointType', description='Endpoint类型'),
      ip?: string(name='Ip'),
      netType?: string(name='NetType', description='网络类型 intranet:内网 | internet:公网'),
      ports?: string(name='Ports', description='端口信息 英文逗号分隔'),
      status?: string(name='Status', description='创建状态 Creating:创建中 | Ready:可使用 | Deleting:删除中'),
      url?: string(name='Url', description='链接串'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeVirtualWareHouseEndpointInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVirtualWareHouseEndpointInfoResponseBody(name='body'),
}

async function describeVirtualWareHouseEndpointInfoWithOptions(request: DescribeVirtualWareHouseEndpointInfoRequest, runtime: Util.RuntimeOptions): DescribeVirtualWareHouseEndpointInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.virtualWareHouseId)) {
    query['VirtualWareHouseId'] = request.virtualWareHouseId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVirtualWareHouseEndpointInfo',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVirtualWareHouseEndpointInfo(request: DescribeVirtualWareHouseEndpointInfoRequest): DescribeVirtualWareHouseEndpointInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVirtualWareHouseEndpointInfoWithOptions(request, runtime);
}

model DescribeVirtualWareHouseStatusSetResponseBody = {
  data?: [ 
    {
      desc?: string(name='Desc', description='描述'),
      value?: string(name='Value', description='状态值'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeVirtualWareHouseStatusSetResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVirtualWareHouseStatusSetResponseBody(name='body'),
}

async function describeVirtualWareHouseStatusSetWithOptions(runtime: Util.RuntimeOptions): DescribeVirtualWareHouseStatusSetResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeVirtualWareHouseStatusSet',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVirtualWareHouseStatusSet(): DescribeVirtualWareHouseStatusSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVirtualWareHouseStatusSetWithOptions(runtime);
}

model KillQueryRequest {
  DBClusterId?: string(name='DBClusterId'),
  queryIds?: string(name='QueryIds', description='指定查询ID列表 英文逗号分隔 不指定则匹配所有查询'),
  regionId?: string(name='RegionId'),
  virtualWareHouseId?: string(name='VirtualWareHouseId', description='计算组ID'),
}

model KillQueryResponseBody = {
  requestId?: string(name='RequestId'),
}

model KillQueryResponse = {
  headers: map[string]string(name='headers'),
  body: KillQueryResponseBody(name='body'),
}

async function killQueryWithOptions(request: KillQueryRequest, runtime: Util.RuntimeOptions): KillQueryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.queryIds)) {
    query['QueryIds'] = request.queryIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.virtualWareHouseId)) {
    query['VirtualWareHouseId'] = request.virtualWareHouseId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'KillQuery',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function killQuery(request: KillQueryRequest): KillQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return killQueryWithOptions(request, runtime);
}

model ListAccountsRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
}

model ListAccountsResponseBody = {
  data?: [ 
    {
      account?: string(name='Account', description='账户名称'),
      comment?: string(name='Comment', description='账户备注'),
      passwordSha256Hex?: string(name='PasswordSha256Hex', description='账户密码sha256hex'),
      privilegeDescription?: string(name='PrivilegeDescription', description='账户权限描述'),
      privilegeType?: string(name='PrivilegeType', description='账户权限类型'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model ListAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAccountsResponseBody(name='body'),
}

async function listAccountsWithOptions(request: ListAccountsRequest, runtime: Util.RuntimeOptions): ListAccountsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAccounts',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAccounts(request: ListAccountsRequest): ListAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAccountsWithOptions(request, runtime);
}

model ListClustersRequest {
  DBClusterDescription?: string(name='DBClusterDescription', description='指定实例描述子串'),
  DBClusterId?: string(name='DBClusterId', description='指定实例ID子串'),
  DBClusterStatus?: string(name='DBClusterStatus', description='指定实例状态'),
  pageNumber?: int32(name='PageNumber', description='分页码 从1开始 默认值1'),
  pageSize?: int32(name='PageSize', description='分页大小 默认值30'),
  regionId?: string(name='RegionId'),
}

model ListClustersResponseBody = {
  data?: [ 
    {
      aliUid?: long(name='AliUid', description='实例所属账户Uid'),
      cacheStorageSizeGiB?: int32(name='CacheStorageSizeGiB', description='实例总本地缓存空间 GiB'),
      cacheStorageType?: string(name='CacheStorageType', description='实例本地缓存类型'),
      commodityCode?: string(name='CommodityCode', description='商品Code'),
      createTime?: string(name='CreateTime', description='实例创建时间 UTC时间'),
      DBClusterDescription?: string(name='DBClusterDescription', description='实例描述信息'),
      DBClusterId?: string(name='DBClusterId'),
      DBClusterStatus?: string(name='DBClusterStatus', description='实例状态 详见describeClusterStatusSet接口'),
      engineVersion?: string(name='EngineVersion', description='内核版本'),
      expireTime?: string(name='ExpireTime', description='实例到期时间 UTC时间'),
      lockMode?: string(name='LockMode', description='实例锁定状态 Unlock:正常 | ManualLock:手动锁定 | LockByExpiration:过期锁定'),
      lockReason?: string(name='LockReason', description='实例锁定原因'),
      objectStoreSizeGiB?: long(name='ObjectStoreSizeGiB', description='实例总对象存储空间 GiB'),
      payType?: string(name='PayType', description='付费类型'),
      regionId?: string(name='RegionId'),
      resourceCpuCores?: int32(name='ResourceCpuCores', description='实例总CPU资源 cores'),
      resourceMemoryGiB?: int32(name='ResourceMemoryGiB', description='实例总内存资源 GiB'),
      virtualWareHouses?: [ 
        {
          ports?: string(name='Ports', description='端口信息 英文逗号分隔'),
          virtualWareHouseCacheStorage?: int32(name='VirtualWareHouseCacheStorage', description='计算组本地缓存空间GiB'),
          virtualWareHouseClass?: string(name='VirtualWareHouseClass', description='计算组规格码'),
          virtualWareHouseDescription?: string(name='VirtualWareHouseDescription', description='计算组描述信息'),
          virtualWareHouseId?: string(name='VirtualWareHouseId'),
          virtualWareHouseStatus?: string(name='VirtualWareHouseStatus', description='计算组状态 详见describeVirtualWareHouseStatusSet接口'),
          vswitchId?: string(name='VswitchId', description='交换机ID'),
          zoneId?: string(name='ZoneId', description='可用区'),
        }
      ](name='VirtualWareHouses', description='计算组列表'),
      vpcId?: string(name='VpcId'),
      vswitchId?: string(name='VswitchId', description='默认交换机ID'),
      zoneId?: string(name='ZoneId', description='默认可用区'),
    }
  ](name='Data'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListClustersResponse = {
  headers: map[string]string(name='headers'),
  body: ListClustersResponseBody(name='body'),
}

async function listClustersWithOptions(request: ListClustersRequest, runtime: Util.RuntimeOptions): ListClustersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterDescription)) {
    query['DBClusterDescription'] = request.DBClusterDescription;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.DBClusterStatus)) {
    query['DBClusterStatus'] = request.DBClusterStatus;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClusters',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listClusters(request: ListClustersRequest): ListClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClustersWithOptions(request, runtime);
}

model ListVirtualWareHouseConfigsRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  virtualWareHouseId?: string(name='VirtualWareHouseId', description='计算组ID'),
}

model ListVirtualWareHouseConfigsResponseBody = {
  data?: [ 
    {
      configFullPath?: string(name='ConfigFullPath', description='参数路径'),
      configType?: string(name='ConfigType', description='参数类型 config.xml | users.xml'),
      defaultValue?: string(name='DefaultValue', description='参数默认值 为空代表未设置'),
      description?: string(name='Description', description='参数描述'),
      needRestart?: boolean(name='NeedRestart', description='修改后是否需要重启'),
      spec?: string(name='Spec', description='修改规范'),
      value?: string(name='Value', description='参数设定值'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model ListVirtualWareHouseConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: ListVirtualWareHouseConfigsResponseBody(name='body'),
}

async function listVirtualWareHouseConfigsWithOptions(request: ListVirtualWareHouseConfigsRequest, runtime: Util.RuntimeOptions): ListVirtualWareHouseConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.virtualWareHouseId)) {
    query['VirtualWareHouseId'] = request.virtualWareHouseId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVirtualWareHouseConfigs',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVirtualWareHouseConfigs(request: ListVirtualWareHouseConfigsRequest): ListVirtualWareHouseConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVirtualWareHouseConfigsWithOptions(request, runtime);
}

model ListVirtualWareHousesRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
}

model ListVirtualWareHousesResponseBody = {
  data?: [ 
    {
      ports?: string(name='Ports', description='端口信息 英文逗号分隔'),
      virtualWareHouseCacheStorage?: int32(name='VirtualWareHouseCacheStorage', description='计算组本地缓存空间GiB'),
      virtualWareHouseClass?: string(name='VirtualWareHouseClass', description='计算组规格码'),
      virtualWareHouseDescription?: string(name='VirtualWareHouseDescription', description='计算组描述信息'),
      virtualWareHouseId?: string(name='VirtualWareHouseId'),
      virtualWareHouseStatus?: string(name='VirtualWareHouseStatus', description='计算组状态 详见describeVirtualWareHouseStatusSet接口'),
      vswitchId?: string(name='VswitchId', description='交换机ID'),
      zoneId?: string(name='ZoneId', description='可用区'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model ListVirtualWareHousesResponse = {
  headers: map[string]string(name='headers'),
  body: ListVirtualWareHousesResponseBody(name='body'),
}

async function listVirtualWareHousesWithOptions(request: ListVirtualWareHousesRequest, runtime: Util.RuntimeOptions): ListVirtualWareHousesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVirtualWareHouses',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVirtualWareHouses(request: ListVirtualWareHousesRequest): ListVirtualWareHousesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVirtualWareHousesWithOptions(request, runtime);
}

model ModifyAccountDescriptionRequest {
  account?: string(name='Account', description='账户名称'),
  comment?: string(name='Comment', description='账户备注'),
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
}

model ModifyAccountDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccountDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountDescriptionResponseBody(name='body'),
}

async function modifyAccountDescriptionWithOptions(request: ModifyAccountDescriptionRequest, runtime: Util.RuntimeOptions): ModifyAccountDescriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.account)) {
    query['Account'] = request.account;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAccountDescription',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountDescriptionWithOptions(request, runtime);
}

model ModifyAccountPrivilegeRequest {
  account?: string(name='Account', description='账户名称'),
  DBClusterId?: string(name='DBClusterId'),
  privilegeType?: string(name='PrivilegeType', description='账户权限类型 Normal:普通账户 | Readonly:只读账户 | Dml:DML账户-禁止DDL | Super:超级账户'),
  regionId?: string(name='RegionId'),
}

model ModifyAccountPrivilegeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccountPrivilegeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountPrivilegeResponseBody(name='body'),
}

async function modifyAccountPrivilegeWithOptions(request: ModifyAccountPrivilegeRequest, runtime: Util.RuntimeOptions): ModifyAccountPrivilegeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.account)) {
    query['Account'] = request.account;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.privilegeType)) {
    query['PrivilegeType'] = request.privilegeType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAccountPrivilege',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAccountPrivilege(request: ModifyAccountPrivilegeRequest): ModifyAccountPrivilegeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountPrivilegeWithOptions(request, runtime);
}

model ModifyClusterDescriptionRequest {
  DBClusterDescription?: string(name='DBClusterDescription', description='实例描述信息'),
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
}

model ModifyClusterDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyClusterDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyClusterDescriptionResponseBody(name='body'),
}

async function modifyClusterDescriptionWithOptions(request: ModifyClusterDescriptionRequest, runtime: Util.RuntimeOptions): ModifyClusterDescriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterDescription)) {
    query['DBClusterDescription'] = request.DBClusterDescription;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyClusterDescription',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyClusterDescription(request: ModifyClusterDescriptionRequest): ModifyClusterDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyClusterDescriptionWithOptions(request, runtime);
}

model ModifyVirtualWareHouseConfigRequest {
  configChanges?: [ 
    {
      configFullPath?: string(name='ConfigFullPath', description='参数路径'),
      value?: string(name='Value', description='参数设定值'),
    }
  ](name='ConfigChanges', description='参数变更列表'),
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  virtualWareHouseId?: string(name='VirtualWareHouseId', description='计算组ID'),
}

model ModifyVirtualWareHouseConfigShrinkRequest {
  configChangesShrink?: string(name='ConfigChanges', description='参数变更列表'),
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  virtualWareHouseId?: string(name='VirtualWareHouseId', description='计算组ID'),
}

model ModifyVirtualWareHouseConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyVirtualWareHouseConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVirtualWareHouseConfigResponseBody(name='body'),
}

async function modifyVirtualWareHouseConfigWithOptions(tmpReq: ModifyVirtualWareHouseConfigRequest, runtime: Util.RuntimeOptions): ModifyVirtualWareHouseConfigResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyVirtualWareHouseConfigShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.configChanges)) {
    request.configChangesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.configChanges, 'ConfigChanges', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.configChangesShrink)) {
    query['ConfigChanges'] = request.configChangesShrink;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.virtualWareHouseId)) {
    query['VirtualWareHouseId'] = request.virtualWareHouseId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVirtualWareHouseConfig',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVirtualWareHouseConfig(request: ModifyVirtualWareHouseConfigRequest): ModifyVirtualWareHouseConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVirtualWareHouseConfigWithOptions(request, runtime);
}

model ModifyVirtualWareHouseDescriptionRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  virtualWareHouseDescription?: string(name='VirtualWareHouseDescription', description='计算组描述信息'),
  virtualWareHouseId?: string(name='VirtualWareHouseId', description='计算组ID'),
}

model ModifyVirtualWareHouseDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyVirtualWareHouseDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVirtualWareHouseDescriptionResponseBody(name='body'),
}

async function modifyVirtualWareHouseDescriptionWithOptions(request: ModifyVirtualWareHouseDescriptionRequest, runtime: Util.RuntimeOptions): ModifyVirtualWareHouseDescriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.virtualWareHouseDescription)) {
    query['VirtualWareHouseDescription'] = request.virtualWareHouseDescription;
  }
  if (!Util.isUnset(request.virtualWareHouseId)) {
    query['VirtualWareHouseId'] = request.virtualWareHouseId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVirtualWareHouseDescription',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVirtualWareHouseDescription(request: ModifyVirtualWareHouseDescriptionRequest): ModifyVirtualWareHouseDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVirtualWareHouseDescriptionWithOptions(request, runtime);
}

model ModifyVirtualWareHouseResourceRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  virtualWareHouseCacheStorage?: int32(name='VirtualWareHouseCacheStorage', description='计算组本地缓存空间 GiB'),
  virtualWareHouseClass?: string(name='VirtualWareHouseClass', description='计算组规格码'),
  virtualWareHouseId?: string(name='VirtualWareHouseId', description='计算组ID'),
}

model ModifyVirtualWareHouseResourceResponseBody = {
  data?: {
    orderId?: long(name='OrderId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model ModifyVirtualWareHouseResourceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVirtualWareHouseResourceResponseBody(name='body'),
}

async function modifyVirtualWareHouseResourceWithOptions(request: ModifyVirtualWareHouseResourceRequest, runtime: Util.RuntimeOptions): ModifyVirtualWareHouseResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.virtualWareHouseCacheStorage)) {
    query['VirtualWareHouseCacheStorage'] = request.virtualWareHouseCacheStorage;
  }
  if (!Util.isUnset(request.virtualWareHouseClass)) {
    query['VirtualWareHouseClass'] = request.virtualWareHouseClass;
  }
  if (!Util.isUnset(request.virtualWareHouseId)) {
    query['VirtualWareHouseId'] = request.virtualWareHouseId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVirtualWareHouseResource',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVirtualWareHouseResource(request: ModifyVirtualWareHouseResourceRequest): ModifyVirtualWareHouseResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVirtualWareHouseResourceWithOptions(request, runtime);
}

model PatchClusterSecurityIPGroupRequest {
  DBClusterId?: string(name='DBClusterId'),
  groupName?: string(name='GroupName', description='安全组名称'),
  regionId?: string(name='RegionId'),
  securityIps?: string(name='SecurityIps', description='IP列表 英文逗号分隔'),
}

model PatchClusterSecurityIPGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model PatchClusterSecurityIPGroupResponse = {
  headers: map[string]string(name='headers'),
  body: PatchClusterSecurityIPGroupResponseBody(name='body'),
}

async function patchClusterSecurityIPGroupWithOptions(request: PatchClusterSecurityIPGroupRequest, runtime: Util.RuntimeOptions): PatchClusterSecurityIPGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.securityIps)) {
    query['SecurityIps'] = request.securityIps;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PatchClusterSecurityIPGroup',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function patchClusterSecurityIPGroup(request: PatchClusterSecurityIPGroupRequest): PatchClusterSecurityIPGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return patchClusterSecurityIPGroupWithOptions(request, runtime);
}

model ReleaseVirtualWareHousePublicConnectionRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  virtualWareHouseId?: string(name='VirtualWareHouseId', description='计算组ID'),
}

model ReleaseVirtualWareHousePublicConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseVirtualWareHousePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseVirtualWareHousePublicConnectionResponseBody(name='body'),
}

async function releaseVirtualWareHousePublicConnectionWithOptions(request: ReleaseVirtualWareHousePublicConnectionRequest, runtime: Util.RuntimeOptions): ReleaseVirtualWareHousePublicConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.virtualWareHouseId)) {
    query['VirtualWareHouseId'] = request.virtualWareHouseId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseVirtualWareHousePublicConnection',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseVirtualWareHousePublicConnection(request: ReleaseVirtualWareHousePublicConnectionRequest): ReleaseVirtualWareHousePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseVirtualWareHousePublicConnectionWithOptions(request, runtime);
}

model ResetAccountPasswordRequest {
  account?: string(name='Account', description='账户名称'),
  DBClusterId?: string(name='DBClusterId'),
  password?: string(name='Password', description='账户明文密码'),
  passwordSha256Hex?: string(name='PasswordSha256Hex', description='账户密码sha256hex 优先使用明文密码'),
  regionId?: string(name='RegionId'),
}

model ResetAccountPasswordResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAccountPasswordResponseBody(name='body'),
}

async function resetAccountPasswordWithOptions(request: ResetAccountPasswordRequest, runtime: Util.RuntimeOptions): ResetAccountPasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.account)) {
    query['Account'] = request.account;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.passwordSha256Hex)) {
    query['PasswordSha256Hex'] = request.passwordSha256Hex;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetAccountPassword',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAccountPasswordWithOptions(request, runtime);
}

model RestartVirtualWareHouseRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  virtualWareHouseId?: string(name='VirtualWareHouseId', description='计算组ID'),
}

model RestartVirtualWareHouseResponseBody = {
  requestId?: string(name='RequestId'),
}

model RestartVirtualWareHouseResponse = {
  headers: map[string]string(name='headers'),
  body: RestartVirtualWareHouseResponseBody(name='body'),
}

async function restartVirtualWareHouseWithOptions(request: RestartVirtualWareHouseRequest, runtime: Util.RuntimeOptions): RestartVirtualWareHouseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.virtualWareHouseId)) {
    query['VirtualWareHouseId'] = request.virtualWareHouseId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RestartVirtualWareHouse',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function restartVirtualWareHouse(request: RestartVirtualWareHouseRequest): RestartVirtualWareHouseResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartVirtualWareHouseWithOptions(request, runtime);
}

model UpsertClusterSecurityIPGroupRequest {
  DBClusterId?: string(name='DBClusterId'),
  groupName?: string(name='GroupName', description='安全组名称'),
  regionId?: string(name='RegionId'),
  securityIps?: string(name='SecurityIps', description='IP列表 英文逗号分隔'),
}

model UpsertClusterSecurityIPGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpsertClusterSecurityIPGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpsertClusterSecurityIPGroupResponseBody(name='body'),
}

async function upsertClusterSecurityIPGroupWithOptions(request: UpsertClusterSecurityIPGroupRequest, runtime: Util.RuntimeOptions): UpsertClusterSecurityIPGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.securityIps)) {
    query['SecurityIps'] = request.securityIps;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpsertClusterSecurityIPGroup',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upsertClusterSecurityIPGroup(request: UpsertClusterSecurityIPGroupRequest): UpsertClusterSecurityIPGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return upsertClusterSecurityIPGroupWithOptions(request, runtime);
}

