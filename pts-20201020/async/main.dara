/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'PTS';
  @version = '2020-10-20';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AdjustJMeterSceneSpeedRequest {
  reportId: string(name='ReportId', description='报告id', example='DYYPZIH', position='Query'),
  speed: int32(name='Speed', description='要调整到的压力值', example='100', minimum=1, position='Query'),
}

model AdjustJMeterSceneSpeedResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  reportId?: string(name='ReportId', description='报告ID', example='DYYPZIH'),
  requestId?: string(name='RequestId', example='DC4E31DDA77-6745-4925-B423-4E89VV34221A'),
  success?: boolean(name='Success', example='true'),
}

model AdjustJMeterSceneSpeedResponse = {
  headers: map[string]string(name='headers'),
  body: AdjustJMeterSceneSpeedResponseBody(name='body'),
}

async function adjustJMeterSceneSpeed(request: AdjustJMeterSceneSpeedRequest): AdjustJMeterSceneSpeedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AdjustJMeterSceneSpeed', 'POST', '/', 'json', false, 'json', request);
}

model CreatePtsSceneRequest {
  scene: string(name='Scene', position='Query'),
}

model CreatePtsSceneResponseBody = {
  code?: string(name='Code', example='4001'),
  httpStatusCode?: int32(name='HttpStatusCode', example='400'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='4F7D2CE0-AE4C-4143-955A-8E4595AF86A6'),
  sceneId?: string(name='SceneId', example='SDR3CX'),
  success?: boolean(name='Success', example='false'),
}

model CreatePtsSceneResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePtsSceneResponseBody(name='body'),
}

async function createPtsScene(request: CreatePtsSceneRequest): CreatePtsSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePtsScene', 'POST', '/', 'json', false, 'json', request);
}

model CreatePtsSceneBaseLineFromReportRequest {
  reportId: string(name='ReportId', example='HNB78HB', position='Query'),
  sceneId: string(name='SceneId', example='VCB78HB', position='Query'),
}

model CreatePtsSceneBaseLineFromReportResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='4F7D2CE0-AE4C-4143-954A-8E4595AF86A6'),
  success?: boolean(name='Success', example='true'),
}

model CreatePtsSceneBaseLineFromReportResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePtsSceneBaseLineFromReportResponseBody(name='body'),
}

async function createPtsSceneBaseLineFromReport(request: CreatePtsSceneBaseLineFromReportRequest): CreatePtsSceneBaseLineFromReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePtsSceneBaseLineFromReport', 'POST', '/', 'json', false, 'json', request);
}

model DeletePtsSceneRequest {
  sceneId: string(name='SceneId', example='XANH3H', position='Query'),
}

model DeletePtsSceneResponseBody = {
  code?: string(name='Code', example='4001'),
  httpStatusCode?: int32(name='HttpStatusCode', example='400'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A3ED870E-C3BF-44F4-B460-A30785E0256B'),
  success?: boolean(name='Success', example='false'),
}

model DeletePtsSceneResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePtsSceneResponseBody(name='body'),
}

async function deletePtsScene(request: DeletePtsSceneRequest): DeletePtsSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePtsScene', 'POST', '/', 'json', false, 'json', request);
}

model DeletePtsSceneBaseLineRequest {
  sceneId: string(name='SceneId', example='NHGV4CDG', position='Query'),
}

model DeletePtsSceneBaseLineResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='4F7D2XE0-AE4C-4143-955A-8E4595AF86A6'),
  success?: boolean(name='Success', example='true'),
}

model DeletePtsSceneBaseLineResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePtsSceneBaseLineResponseBody(name='body'),
}

async function deletePtsSceneBaseLine(request: DeletePtsSceneBaseLineRequest): DeletePtsSceneBaseLineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePtsSceneBaseLine', 'POST', '/', 'json', false, 'json', request);
}

model DeletePtsScenesRequest {
  sceneIds: [ string ](name='SceneIds', example='["XVB4DF","AFG3CV"]', shrink='json', position='Query'),
}

model DeletePtsScenesResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='35290A5B-AB50-46BD-81E0-E316F86128C4'),
  success?: boolean(name='Success', example='true'),
}

model DeletePtsScenesResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePtsScenesResponseBody(name='body'),
}

async function deletePtsScenes(request: DeletePtsScenesRequest): DeletePtsScenesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePtsScenes', 'POST', '/', 'json', false, 'json', request);
}

model GetAllRegionsRequest {
}

model GetAllRegionsResponseBody = {
  allRegions?: map[string]string(name='AllRegions'),
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='73D16B8D-0FCD-5596-B7BE-A47042989318'),
  success?: boolean(name='Success', example='True'),
}

model GetAllRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: GetAllRegionsResponseBody(name='body'),
}

async function getAllRegions(request: GetAllRegionsRequest): GetAllRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAllRegions', 'POST', '/', 'json', false, 'json', request);
}

model GetJMeterLogsRequest {
  agentIndex?: int32(name='AgentIndex', description='第几台引擎，起始为0', example='0', position='Query'),
  beginTime?: long(name='BeginTime', description='开始时间', example='1637115306000', position='Query'),
  endTime?: long(name='EndTime', description='结束时间', example='1637115309000', position='Query'),
  keyword?: string(name='Keyword', description='关键字', example='test', position='Query'),
  level?: string(name='Level', description='日志等级', example='INFO', position='Query'),
  pageNumber: int32(name='PageNumber', example='1', minimum=1, maximum=10000000, position='Query'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=200, position='Query'),
  reportId: string(name='ReportId', description='报告ID', example='KS2YE3J2', position='Query'),
  thread?: string(name='Thread', description='线程名', example='main', position='Query'),
}

model GetJMeterLogsResponseBody = {
  agentCount?: int32(name='AgentCount', description='引擎数量，想要获得第几台引擎的日志可以根据引擎数量传值', example='3'),
  code?: string(name='Code', example='200'),
  logs?: [  map[string]any ](name='Logs', description='日志内容', example='{ "timeTS":1637114804326, "instanceId":0, "level":"INFO", "logger":"org.apache.jmeter.util.JMeterUtils", "sceneId":251546, 	"planId":1501546, "thread":"main", "time":"2021-11-17T10:06Z", "taskId":15015460000, "logText":"Setting Locale to en_EN\\n" }'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='A8E16480-15C1-555A-922F-B736A005E52D'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='100'),
}

model GetJMeterLogsResponse = {
  headers: map[string]string(name='headers'),
  body: GetJMeterLogsResponseBody(name='body'),
}

async function getJMeterLogs(request: GetJMeterLogsRequest): GetJMeterLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetJMeterLogs', 'POST', '/', 'json', false, 'json', request);
}

model GetJMeterSampleMetricsRequest {
  beginTime?: long(name='BeginTime', description='开始时间', example='1637157070000', position='Query'),
  endTime?: long(name='EndTime', description='结束时间', example='1637157073000', position='Query'),
  reportId: string(name='ReportId', description='报告ID', example='7R4RE352', position='Query'),
  samplerId?: int32(name='SamplerId', description='采样器索引，从0开始。-1返回全场景', example='0', position='Query'),
}

model GetJMeterSampleMetricsResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A8E16480-15C1-555A-922F-B736A005E52D'),
  sampleMetricList?: [ string ](name='SampleMetricList', description='采样器聚合数据列表'),
  samplerMap?: map[string]any(name='SamplerMap', description='采样器列表，可根据该列表传递需要查询的采样器', example='{0:"Http Request"}'),
  success?: boolean(name='Success', example='true'),
}

model GetJMeterSampleMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: GetJMeterSampleMetricsResponseBody(name='body'),
}

async function getJMeterSampleMetrics(request: GetJMeterSampleMetricsRequest): GetJMeterSampleMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetJMeterSampleMetrics', 'POST', '/', 'json', false, 'json', request);
}

model GetJMeterSamplingLogsRequest {
  agentId?: long(name='AgentId', description='压测引擎编号', example='14238000', position='Query'),
  beginTime?: long(name='BeginTime', description='开始时间', example='1637157073000', position='Query'),
  endTime?: long(name='EndTime', description='结束时间', example='1637157076000', position='Query'),
  keyword?: string(name='Keyword', description='关键字', example='test', position='Query'),
  maxRT?: int32(name='MaxRT', description='最大响应时间，单位ms', example='1000', position='Query'),
  minRT?: int32(name='MinRT', description='最小响应时间，单位ms', example='0', position='Query'),
  pageNumber: int32(name='PageNumber', example='1', minimum=1, maximum=10000000, position='Query'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=200, position='Query'),
  reportId: string(name='ReportId', description='报告ID', example='7R4RE352', position='Query'),
  responseCode?: string(name='ResponseCode', example='200', position='Query'),
  samplerId?: int32(name='SamplerId', description='第几个采样器，从0开始', example='0', position='Query'),
  success?: boolean(name='Success', description='采样结果是否成功', example='true', position='Query'),
  thread?: string(name='Thread', description='线程', example='main', position='Query'),
}

model GetJMeterSamplingLogsResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='A8E16480-15C1-555A-922F-B736A005E52D'),
  sampleResults?: [ string ](name='SampleResults', description='采样器的采样结果'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='100'),
}

model GetJMeterSamplingLogsResponse = {
  headers: map[string]string(name='headers'),
  body: GetJMeterSamplingLogsResponseBody(name='body'),
}

async function getJMeterSamplingLogs(request: GetJMeterSamplingLogsRequest): GetJMeterSamplingLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetJMeterSamplingLogs', 'POST', '/', 'json', false, 'json', request);
}

model GetJMeterSceneRunningDataRequest {
  sceneId: string(name='SceneId', description='场景id', example='DYYPZIH', position='Query'),
}

model GetJMeterSceneRunningDataResponseBody = {
  code?: string(name='Code', example='200'),
  documentUrl?: string(name='DocumentUrl'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A8E16480-15C1-555A-922F-B736A005E52D'),
  runningData?: {
    agentCount?: int32(name='AgentCount', description='压测引擎数量', example='2'),
    agentIdList?: [ string ](name='AgentIdList', description='压测引擎列表'),
    allSampleStat?: map[string]any(name='AllSampleStat', description='场景整体的采样状态', example='{ "failTps":0,"successRtAvg":33,"successRtMin":29,"successRtSum":99407,         "rtAvg":33.459104678559406,"rtMin":29,"failRtMax":0,"duration":997,         "samplerId":-1, "successRtMax":133,"fullStat":{       "requestBytesSum":629926,"successRtAvg":33,"successRtMin":29,"successRtSum":174551,"count":5206,"rtSeg99":53, "successTps":2397.9732842008293,"rtSeg90":36, "rtSeg50":32,            "rtSeg99Sum":53,"rtAvg":33.528812908182864, "rtMin":29,             "failRtMax":0,"duration":2171, "successCount":5206,            "rtSegStatCount":1,"tps":2397.9732842008293 }, "successCount":2971, "failRtSum":0,"failCount":0,"count":2971,"concurrency":100, "successTps":2979.939819458375,"tps":2979.939819458375,"failRtAvg":0,         "failRtMin":0,  "rtMax":133}'),
    concurrency?: int32(name='Concurrency', description='并发量', example='1000'),
    hasReport?: boolean(name='HasReport', description='是否生成了报告', example='false'),
    holdFor?: int32(name='HoldFor', description='压测计划持续时间，单位s', example='600'),
    isDebugging?: boolean(name='IsDebugging', description='是否是调试', example='false'),
    sampleStatList?: [  map[string]any ](name='SampleStatList', description='每一个采样器的状态'),
    sceneId?: string(name='SceneId', description='场景id', example='DYYPZIH'),
    sceneName?: string(name='SceneName', description='场景名称', example='test'),
    stageName?: string(name='StageName', description='当前所处阶段', example='任务执行'),
    startTimeTS?: long(name='StartTimeTS', description='压测计划开始时间戳，单位ms', example='1639970040000'),
    status?: string(name='Status', description='状态', example='RUNNING'),
    vum?: long(name='Vum', description='目前消耗的vum', example='100'),
  }(name='RunningData', description='运行中的数据'),
  success?: boolean(name='Success', example='true'),
}

model GetJMeterSceneRunningDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetJMeterSceneRunningDataResponseBody(name='body'),
}

async function getJMeterSceneRunningData(request: GetJMeterSceneRunningDataRequest): GetJMeterSceneRunningDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetJMeterSceneRunningData', 'POST', '/', 'json', false, 'json', request);
}

model GetOpenJMeterSceneRequest {
  sceneId: string(name='SceneId', description='场景ID', example='DYYPZIH', position='Query'),
}

model GetOpenJMeterSceneResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A8E16480-15C1-555A-922F-B736A005E52D'),
  scene?: {
    agentCount?: int32(name='AgentCount', description='施压机数量', example='2'),
    baseInfo?: {
      createName?: string(name='CreateName', description='创建人名', example='张三'),
      modifyName?: string(name='ModifyName', description='修改人名', example='里斯'),
      operateType?: string(name='OperateType', description='操作类型', example='保存去压测'),
      principal?: string(name='Principal', description='场景压测负责人', example='test-person'),
      remark?: string(name='Remark', description='备注', example='小心压测'),
      resource?: string(name='Resource', description='场景来源', example='create'),
    }(name='BaseInfo', description='基本信息'),
    concurrency?: int32(name='Concurrency', description='最大并发，并发模式下生效', example='1000'),
    constantThroughputTimerType?: string(name='ConstantThroughputTimerType', description='constantThroughputTimerType', example='STAND_ALONE'),
    dnsCacheConfig?: {
      clearCacheEachIteration?: boolean(name='ClearCacheEachIteration', description='是否清除缓存', example='false'),
      dnsServers?: [ string ](name='DnsServers', description='DNS服务器'),
      hostTable?: map[string]any(name='HostTable', description='域名绑定', example='{"server.com":"6.6.6.6"}'),
    }(name='DnsCacheConfig', description='DNS配置'),
    duration?: int32(name='Duration', description='压测持续时间，单位为s', example='600'),
    environmentId?: string(name='EnvironmentId', description='环境id', example='EEDT7'),
    fileList?: [ 
      {
        fileName?: string(name='FileName', description='文件名', example='json.jar'),
        fileOssAddress?: string(name='FileOssAddress', description='文件地址', example='https://test.oss-cn-shanghai.aliyuncs.com/json.jar'),
        fileSize?: long(name='FileSize', description='文件大小', example='700'),
        fileType?: string(name='FileType', description='文件类型', example='jar'),
        id?: long(name='Id', description='文件ID', example='61660'),
        md5?: string(name='Md5', description='文件的md5值', example='43B584026CE5E570F3DE638FA7EEF9E0'),
        splitCsv?: boolean(name='SplitCsv', description='csv文件是否切分', example='false'),
      }
    ](name='FileList', description='文件列表'),
    isVpcTest?: boolean(name='IsVpcTest', description='是否为VPC压测', example='false'),
    maxRps?: int32(name='MaxRps', example='true'),
    mode?: string(name='Mode', description='施压模式，concurrency_mode表示并发压测,tps_mode表示RPS压测', example='concurrency_mode'),
    pool?: string(name='Pool', description='压力来源。“”表示公网，intranet-vpc表示VPC', example='VPC'),
    rampUp?: int32(name='RampUp', description='递增时间，单位s', example='100'),
    regionId?: string(name='RegionId', description='VPC压测时配置', example='cn-beijing'),
    sceneId?: string(name='SceneId', description='场景id', example='DYYPZIH'),
    sceneName?: string(name='SceneName', description='场景名', example='test'),
    securityGroupId?: string(name='SecurityGroupId', description='安全组id，VPC压测时配置', example='sg-2zeid0dd7bhahsgdahspaly'),
    startConcurrency?: int32(name='StartConcurrency', example='true'),
    startRps?: int32(name='StartRps', example='true'),
    steps?: int32(name='Steps', description='递增阶梯数。预热时间和预热阶段数都不配置时 使用固定压力值 只配置预热时间，不配置阶段数时 使用均匀递增 预热时间和阶段数都配置时，并且steps<rampUp 使用阶梯递增 不能只配置steps，不配置rampUp 如果这样配置，默认使用固定压力值', example='3'),
    syncTimerType?: string(name='SyncTimerType', description='synchronizing timer 类型', example='GLOBAL'),
    testFile?: string(name='TestFile', description='测试文件', example='baidu.jmx'),
    vSwitchId?: string(name='VSwitchId', description='交换机id，VPC压测时配置', example='vsw-2zehsgdhsahw1r'),
    vpcId?: string(name='VpcId', description='vpc的id，VPC压测时配置', example='vpc-2ze2sahjdgahsebjkqhf4pyj'),
  }(name='Scene', description='场景详情'),
  success?: boolean(name='Success', example='true'),
}

model GetOpenJMeterSceneResponse = {
  headers: map[string]string(name='headers'),
  body: GetOpenJMeterSceneResponseBody(name='body'),
}

async function getOpenJMeterScene(request: GetOpenJMeterSceneRequest): GetOpenJMeterSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOpenJMeterScene', 'POST', '/', 'json', false, 'json', request);
}

model GetPtsReportDetailsRequest {
  planId: string(name='PlanId', example='OH5HA3VB', position='Query'),
  sceneId: string(name='SceneId', example='G5HCVS', position='Query'),
}

model GetPtsReportDetailsResponseBody = {
  apiMetricsList?: [ 
    {
      allCount?: long(name='AllCount', example='1000'),
      apiName?: string(name='ApiName'),
      avgRt?: float(name='AvgRt', example='34.5'),
      avgTps?: float(name='AvgTps', example='55'),
      failCountBiz?: long(name='FailCountBiz', example='30'),
      failCountReq?: long(name='FailCountReq', example='40'),
      maxRt?: float(name='MaxRt', example='50'),
      minRt?: float(name='MinRt', example='10'),
      seg50Rt?: float(name='Seg50Rt', example='39'),
      seg75Rt?: float(name='Seg75Rt', example='26'),
      seg90Rt?: float(name='Seg90Rt', example='23'),
      seg99Rt?: float(name='Seg99Rt', example='35'),
      successRateBiz?: float(name='SuccessRateBiz', example='0.98'),
      successRateReq?: float(name='SuccessRateReq', example='0.99'),
    }
  ](name='ApiMetricsList'),
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  reportOverView?: {
    agentCount?: int32(name='AgentCount', example='1'),
    endTime?: string(name='EndTime', example='1988203944'),
    reportId?: string(name='ReportId', example='GHB56VD'),
    reportName?: string(name='ReportName'),
    startTime?: string(name='StartTime', example='1988202944'),
    vum?: long(name='Vum', example='100'),
  }(name='ReportOverView'),
  requestId?: string(name='RequestId', example='DC4E3177-6745-4925-B423-4E89VV34221A'),
  sceneMetrics?: {
    allCount?: long(name='AllCount', example='100000'),
    avgRt?: float(name='AvgRt', example='23'),
    avgTps?: float(name='AvgTps', example='78'),
    failCountBiz?: long(name='FailCountBiz', example='35'),
    failCountReq?: long(name='FailCountReq', example='34'),
    seg90Rt?: float(name='Seg90Rt', example='35'),
    seg99Rt?: float(name='Seg99Rt', example='56'),
    successRateBiz?: float(name='SuccessRateBiz', example='0.97'),
    successRateReq?: float(name='SuccessRateReq', example='0.99'),
  }(name='SceneMetrics'),
  sceneSnapShot?: {
    advanceSetting?: {
      connectionTimeoutInSecond?: int32(name='ConnectionTimeoutInSecond', example='5'),
      domainBindingList?: [ 
        {
          domain?: string(name='Domain', example='www.xxx.com'),
          ips?: [ string ](name='Ips'),
        }
      ](name='DomainBindingList'),
      logRate?: int32(name='LogRate', example='1'),
      successCode?: string(name='SuccessCode', example='429,404'),
    }(name='AdvanceSetting'),
    createTime?: string(name='CreateTime', example='12684449000'),
    fileParameterList?: [ 
      {
        fileName?: string(name='FileName', example='city.csv'),
        fileOssAddress?: string(name='FileOssAddress', example='https://www.sss.ccv'),
      }
    ](name='FileParameterList'),
    globalParameterList?: [ 
      {
        paramName?: string(name='ParamName', example='userName'),
        paramValue?: string(name='ParamValue', example='lisi'),
      }
    ](name='GlobalParameterList'),
    loadConfig?: {
      agentCount?: int32(name='AgentCount', example='1'),
      apiLoadConfigList?: [ 
        {
          rpsBegin?: int32(name='RpsBegin', example='10'),
          rpsLimit?: int32(name='RpsLimit', example='10'),
        }
      ](name='ApiLoadConfigList'),
      configuration?: {
        allConcurrencyBegin?: int32(name='AllConcurrencyBegin', example='10'),
        allConcurrencyLimit?: int32(name='AllConcurrencyLimit', example='10'),
        allRpsBegin?: int32(name='AllRpsBegin', example='80'),
        allRpsLimit?: int32(name='AllRpsLimit', example='160'),
      }(name='Configuration'),
      maxRunningTime?: int32(name='MaxRunningTime', example='2'),
      relationLoadConfigList?: [ 
        {
          concurrencyBegin?: int32(name='ConcurrencyBegin', example='10'),
          concurrencyLimit?: int32(name='ConcurrencyLimit', example='20'),
        }
      ](name='RelationLoadConfigList'),
      testMode?: string(name='TestMode', example='tps_mode'),
    }(name='LoadConfig'),
    modifiedTime?: string(name='ModifiedTime', example='2020-10-10 10:10:10'),
    relationList?: [ 
      {
        apiList?: [ 
          {
            apiId?: string(name='ApiId', description='API ID。', example='MNB45'),
            apiName?: string(name='ApiName'),
            body?: {
              bodyValue?: string(name='BodyValue', example='{key:value}'),
              contentType?: string(name='ContentType', example='application/x-www-form-urlencoded'),
            }(name='Body'),
            checkPointList?: [ 
              {
                checkPoint?: string(name='CheckPoint', example='userId'),
                checkType?: string(name='CheckType', example='EXPORTED_PARAM'),
                expectValue?: string(name='ExpectValue', example='111'),
                operator?: string(name='Operator', example='ctn'),
              }
            ](name='CheckPointList'),
            exportList?: [ 
              {
                count?: string(name='Count', example='1'),
                exportName?: string(name='ExportName', example='userId'),
                exportType?: string(name='ExportType', example='BODY_JSON'),
                exportValue?: string(name='ExportValue', example='data.userId'),
              }
            ](name='ExportList'),
            headerList?: [ 
              {
                headerName?: string(name='HeaderName', example='userName'),
                headerValue?: string(name='HeaderValue', example='1111'),
              }
            ](name='HeaderList'),
            method?: string(name='Method', example='GET'),
            redirectCountLimit?: int32(name='RedirectCountLimit', example='5'),
            timeoutInSecond?: int32(name='TimeoutInSecond', example='5'),
            url?: string(name='Url', example='https://www.xxx.com'),
          }
        ](name='ApiList'),
        fileParameterExplainList?: [ 
          {
            baseFile?: boolean(name='BaseFile', example='true'),
            cycleOnce?: boolean(name='CycleOnce', example='true'),
            fileName?: string(name='FileName', example='city.csv'),
            fileParamName?: string(name='FileParamName', example='address,name'),
          }
        ](name='FileParameterExplainList'),
        relationId?: string(name='RelationId', example='HGBN4D'),
        relationName?: string(name='RelationName'),
      }
    ](name='RelationList'),
    sceneId?: string(name='SceneId', example='7HBNS3'),
    sceneName?: string(name='SceneName'),
    status?: string(name='Status', example='STOPPED'),
  }(name='SceneSnapShot'),
  success?: boolean(name='Success', example='true'),
}

model GetPtsReportDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: GetPtsReportDetailsResponseBody(name='body'),
}

async function getPtsReportDetails(request: GetPtsReportDetailsRequest): GetPtsReportDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPtsReportDetails', 'POST', '/', 'json', false, 'json', request);
}

model GetPtsReportsBySceneIdRequest {
  pageNumber: int32(name='PageNumber', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize: int32(name='PageSize', example='10', minimum=5, maximum=100, position='Query'),
  sceneId: string(name='SceneId', example='NGBCD4K', position='Query'),
}

model GetPtsReportsBySceneIdResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  reportOverViewList?: [ 
    {
      agentCount?: int32(name='AgentCount', example='1'),
      endTime?: string(name='EndTime', example='2021-02-26 16:38:30'),
      reportId?: string(name='ReportId', example='NGGB5FV'),
      reportName?: string(name='ReportName'),
      startTime?: string(name='StartTime', example='2021-02-26 16:28:30'),
      vum?: long(name='Vum', example='100'),
    }
  ](name='ReportOverViewList'),
  requestId?: string(name='RequestId', example='DC4E3177-6745-4925-B423-4E89VV34221A'),
  success?: boolean(name='Success', example='true'),
}

model GetPtsReportsBySceneIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetPtsReportsBySceneIdResponseBody(name='body'),
}

async function getPtsReportsBySceneId(request: GetPtsReportsBySceneIdRequest): GetPtsReportsBySceneIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPtsReportsBySceneId', 'POST', '/', 'json', false, 'json', request);
}

model GetPtsSceneRequest {
  sceneId: string(name='SceneId', example='NKJBSH', position='Query'),
}

model GetPtsSceneResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='DC4E3177-6745-4925-B423-4E89VV34221A'),
  scene?: {
    advanceSetting?: {
      connectionTimeoutInSecond?: int32(name='ConnectionTimeoutInSecond', example='5'),
      domainBindingList?: [ 
        {
          domain?: string(name='Domain', example='www.aliyundoc.com'),
          ips?: [ string ](name='Ips'),
        }
      ](name='DomainBindingList'),
      logRate?: int32(name='LogRate', example='1'),
      successCode?: string(name='SuccessCode', example='429,304'),
    }(name='AdvanceSetting'),
    createTime?: string(name='CreateTime', example='2021-02-26 15:30:30'),
    fileParameterList?: [ 
      {
        fileName?: string(name='FileName', example='city.csv'),
        fileOssAddress?: string(name='FileOssAddress', example='https://test.oss-cn-shanghai.aliyuncs.com/json.jar'),
      }
    ](name='FileParameterList'),
    globalParameterList?: [ 
      {
        paramName?: string(name='ParamName', example='userName'),
        paramValue?: string(name='ParamValue', example='lisi'),
      }
    ](name='GlobalParameterList'),
    headers?: [ 
      {
        name?: string(name='Name'),
        value?: string(name='Value'),
      }
    ](name='Headers'),
    loadConfig?: {
      agentCount?: int32(name='AgentCount', example='1'),
      apiLoadConfigList?: [ 
        {
          apiId?: string(name='ApiId', example='GBFDCV8'),
          rpsBegin?: int32(name='RpsBegin', example='10'),
          rpsLimit?: int32(name='RpsLimit', example='20'),
        }
      ](name='ApiLoadConfigList'),
      autoStep?: boolean(name='AutoStep', example='false'),
      configuration?: {
        allConcurrencyBegin?: int32(name='AllConcurrencyBegin', example='100'),
        allConcurrencyLimit?: int32(name='AllConcurrencyLimit', example='200'),
        allRpsBegin?: int32(name='AllRpsBegin', example='100'),
        allRpsLimit?: int32(name='AllRpsLimit', example='200'),
      }(name='Configuration'),
      increment?: int32(name='Increment', example='10'),
      keepTime?: int32(name='KeepTime', example='2'),
      maxRunningTime?: int32(name='MaxRunningTime', example='2'),
      relationLoadConfigList?: [ 
        {
          concurrencyBegin?: int32(name='ConcurrencyBegin', example='10'),
          concurrencyLimit?: int32(name='ConcurrencyLimit', example='20'),
          relationId?: string(name='RelationId', example='HNBGS7M'),
        }
      ](name='RelationLoadConfigList'),
      testMode?: string(name='TestMode', example='TPS'),
      vpcLoadConfig?: {
        regionId?: string(name='RegionId', example='cn-beijing'),
        securityGroupId?: string(name='SecurityGroupId', example='sg-jkasgfieiajidsjakjscb'),
        vSwitchId?: string(name='VSwitchId', example='vsw-skjfhlahsljkhsfalkjdoiw'),
        vpcId?: string(name='VpcId', example='vpc-akjhsdajgjsfggahjkga'),
      }(name='VpcLoadConfig'),
    }(name='LoadConfig'),
    modifiedTime?: string(name='ModifiedTime', example='2021-03-26 15:30:30'),
    relationList?: [ 
      {
        apiList?: [ 
          {
            apiId?: string(name='ApiId', example='GBFDCV8'),
            apiName?: string(name='ApiName'),
            body?: {
              bodyValue?: string(name='BodyValue', example='{\\"key1\\":\\"111\\",\\"key2\\":\\"222\\"}'),
              contentType?: string(name='ContentType', example='application/x-www-form-urlencoded'),
            }(name='Body'),
            checkPointList?: [ 
              {
                checkPoint?: string(name='CheckPoint', example='userId'),
                checkType?: string(name='CheckType', example='EXPORTED_PARAM'),
                expectValue?: string(name='ExpectValue', example='111'),
                operator?: string(name='Operator', example='ctn'),
              }
            ](name='CheckPointList'),
            exportList?: [ 
              {
                count?: string(name='Count', example='0'),
                exportName?: string(name='ExportName', example='data.username'),
                exportType?: string(name='ExportType', example='BODY_JSON'),
                exportValue?: string(name='ExportValue', example='username'),
              }
            ](name='ExportList'),
            headerList?: [ 
              {
                headerName?: string(name='HeaderName', example='userId'),
                headerValue?: string(name='HeaderValue', example='1111'),
              }
            ](name='HeaderList'),
            method?: string(name='Method', example='GET'),
            redirectCountLimit?: int32(name='RedirectCountLimit', example='5'),
            timeoutInSecond?: int32(name='TimeoutInSecond', example='5'),
            url?: string(name='Url', example='https://www.aliyundoc.com'),
          }
        ](name='ApiList'),
        fileParameterExplainList?: [ 
          {
            baseFile?: boolean(name='BaseFile', example='true'),
            cycleOnce?: boolean(name='CycleOnce', example='true'),
            fileName?: string(name='FileName', example='city.csv'),
            fileParamName?: string(name='FileParamName', example='userName,age'),
          }
        ](name='FileParameterExplainList'),
        relationId?: string(name='RelationId', example='HNBGS7M'),
        relationName?: string(name='RelationName'),
      }
    ](name='RelationList'),
    sceneId?: string(name='SceneId', example='BGFJ7GV'),
    sceneName?: string(name='SceneName'),
    status?: string(name='Status', example='Running'),
  }(name='Scene'),
  success?: boolean(name='Success', example='true'),
}

model GetPtsSceneResponse = {
  headers: map[string]string(name='headers'),
  body: GetPtsSceneResponseBody(name='body'),
}

async function getPtsScene(request: GetPtsSceneRequest): GetPtsSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPtsScene', 'POST', '/', 'json', false, 'json', request);
}

model GetPtsSceneBaseLineRequest {
  sceneId: string(name='SceneId', example='NB54CV', position='Query'),
}

model GetPtsSceneBaseLineResponseBody = {
  baseline?: {
    apiBaselines?: [ 
      {
        avgRt?: float(name='AvgRt', example='10'),
        avgTps?: float(name='AvgTps', example='1000'),
        failCountBiz?: long(name='FailCountBiz', example='100'),
        failCountReq?: long(name='FailCountReq', example='100'),
        id?: long(name='Id', example='76543'),
        maxRt?: int32(name='MaxRt', example='50'),
        minRt?: int32(name='MinRt', example='8'),
        name?: string(name='Name'),
        seg90Rt?: float(name='Seg90Rt', example='40'),
        seg99Rt?: float(name='Seg99Rt', example='50'),
        successRateBiz?: float(name='SuccessRateBiz', example='0.1'),
        successRateReq?: float(name='SuccessRateReq', example='0.9'),
      }
    ](name='ApiBaselines'),
    name?: string(name='Name'),
    sceneBaseline?: {
      avgRt?: float(name='AvgRt', example='10'),
      avgTps?: float(name='AvgTps', example='1000'),
      failCountBiz?: long(name='FailCountBiz', example='1000'),
      failCountReq?: long(name='FailCountReq', example='1000'),
      seg90Rt?: float(name='Seg90Rt', example='10'),
      seg99Rt?: float(name='Seg99Rt', example='10'),
      successRateBiz?: float(name='SuccessRateBiz', example='0.1'),
      successRateReq?: float(name='SuccessRateReq', example='0.9'),
    }(name='SceneBaseline'),
  }(name='Baseline'),
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='4F7D2CE0-AE4C-4143-955A-8E4595AF86A6'),
  sceneId?: string(name='SceneId', example='NHG67BF'),
  success?: boolean(name='Success', example='true'),
}

model GetPtsSceneBaseLineResponse = {
  headers: map[string]string(name='headers'),
  body: GetPtsSceneBaseLineResponseBody(name='body'),
}

async function getPtsSceneBaseLine(request: GetPtsSceneBaseLineRequest): GetPtsSceneBaseLineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPtsSceneBaseLine', 'POST', '/', 'json', false, 'json', request);
}

model GetPtsSceneRunningDataRequest {
  planId: string(name='PlanId', example='NHBGVF8', position='Query'),
  sceneId: string(name='SceneId', example='NKKI6GB', position='Query'),
}

model GetPtsSceneRunningDataResponseBody = {
  agentLocation?: [ 
    {
      count?: int32(name='Count', example='10'),
      isp?: string(name='Isp'),
      province?: string(name='Province'),
      region?: string(name='Region'),
    }
  ](name='AgentLocation'),
  aliveAgents?: int32(name='AliveAgents', example='10'),
  averageRt?: long(name='AverageRt', example='45'),
  beginTime?: long(name='BeginTime', example='1651895518339'),
  chainMonitorDataList?: [ 
    {
      apiId?: string(name='ApiId', example='ANBDC8B'),
      apiName?: string(name='ApiName'),
      averageRt?: int32(name='AverageRt', example='46'),
      checkPointResult?: {
        failedBusinessCount?: long(name='FailedBusinessCount', example='1000'),
        failedBusinessQps?: float(name='FailedBusinessQps', example='78'),
        succeedBusinessCount?: long(name='SucceedBusinessCount', example='908'),
        succeedBusinessQps?: float(name='SucceedBusinessQps', example='89'),
      }(name='CheckPointResult'),
      concurrency?: float(name='Concurrency', example='100'),
      configQps?: int32(name='ConfigQps', example='78'),
      count2XX?: long(name='Count2XX', example='7890'),
      failedCount?: long(name='FailedCount', example='456'),
      failedQps?: float(name='FailedQps', example='15'),
      maxRt?: int32(name='MaxRt', example='56'),
      minRt?: int32(name='MinRt', example='16'),
      nodeId?: long(name='NodeId', example='78509'),
      qps2XX?: float(name='Qps2XX', example='78'),
      realQps?: float(name='RealQps', example='23'),
      timePoint?: long(name='TimePoint', example='1278908899'),
    }
  ](name='ChainMonitorDataList'),
  code?: string(name='Code', example='4001'),
  concurrency?: int32(name='Concurrency', example='10'),
  concurrencyLimit?: int32(name='ConcurrencyLimit', example='20'),
  failedBusinessCount?: long(name='FailedBusinessCount', example='78'),
  failedRequestCount?: long(name='FailedRequestCount', example='90'),
  hasReport?: boolean(name='HasReport', example='false'),
  httpStatusCode?: int32(name='HttpStatusCode', example='400'),
  message?: string(name='Message', example='no message'),
  requestBps?: string(name='RequestBps', example='89kb'),
  requestId?: string(name='RequestId', example='DC4E3177-6745-4925-B423-4E89VV34221A'),
  responseBps?: string(name='ResponseBps', example='8kb'),
  seg90Rt?: long(name='Seg90Rt', example='45'),
  status?: int32(name='Status', example='6'),
  success?: boolean(name='Success', example='true'),
  totalAgents?: int32(name='TotalAgents', example='10'),
  totalRealQps?: int32(name='TotalRealQps'),
  totalRequestCount?: long(name='TotalRequestCount', example='8900'),
  tpsLimit?: int32(name='TpsLimit', example='80'),
  vum?: long(name='Vum', example='100'),
}

model GetPtsSceneRunningDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetPtsSceneRunningDataResponseBody(name='body'),
}

async function getPtsSceneRunningData(request: GetPtsSceneRunningDataRequest): GetPtsSceneRunningDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPtsSceneRunningData', 'POST', '/', 'json', false, 'json', request);
}

model GetPtsSceneRunningStatusRequest {
  sceneId: string(name='SceneId', example='NHBG6V', position='Query'),
}

model GetPtsSceneRunningStatusResponseBody = {
  code?: string(name='Code', example='4001'),
  createTime?: string(name='CreateTime', example='2021-03-01 16:05:56'),
  httpStatusCode?: int32(name='HttpStatusCode', example='400'),
  message?: string(name='Message'),
  modifiedTime?: string(name='ModifiedTime', example='2021-03-26 16:03:56'),
  requestId?: string(name='RequestId', example='DC4E3177-6745-4925-B423-4E89VV34221A'),
  sceneName?: string(name='SceneName'),
  status?: string(name='Status', example='RUNNING'),
  success?: boolean(name='Success', example='false'),
}

model GetPtsSceneRunningStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetPtsSceneRunningStatusResponseBody(name='body'),
}

async function getPtsSceneRunningStatus(request: GetPtsSceneRunningStatusRequest): GetPtsSceneRunningStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPtsSceneRunningStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetUserVpcSecurityGroupRequest {
  pageNumber: int32(name='PageNumber', example='1', minimum=1, maximum=2147483646, position='Query'),
  pageSize: int32(name='PageSize', example='1', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  vpcId: string(name='VpcId', example='vpc-bp10xjz7c7oqjgasodihj1kx7t', position='Query'),
}

model GetUserVpcSecurityGroupResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='61B15017-1A68-5C47-834F-87E2BBC44F2C'),
  securityGroupCount?: int32(name='SecurityGroupCount', example='9'),
  securityGroupList?: [ 
    {
      description?: string(name='Description'),
      securityGroupId?: string(name='SecurityGroupId', example='sg-bp16bt3zuugxpfjkasdfvthxth8'),
      securityGroupName?: string(name='SecurityGroupName', example='my-security-group'),
      vpcId?: string(name='VpcId', example='vpc-uf6tar2ohlasdhsatjln37h30bv'),
    }
  ](name='SecurityGroupList'),
  success?: boolean(name='Success', example='true'),
}

model GetUserVpcSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserVpcSecurityGroupResponseBody(name='body'),
}

async function getUserVpcSecurityGroup(request: GetUserVpcSecurityGroupRequest): GetUserVpcSecurityGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserVpcSecurityGroup', 'POST', '/', 'json', false, 'json', request);
}

model GetUserVpcVSwitchRequest {
  pageNumber: int32(name='PageNumber', example='1', minimum=1, maximum=2147483646, position='Query'),
  pageSize: int32(name='PageSize', example='1', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  vpcId: string(name='VpcId', example='vpc-2ze22scdz2ebdfjasdfjkqhf4pyj', position='Query'),
}

model GetUserVpcVSwitchResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='5'),
  requestId?: string(name='RequestId', example='0235E5FC-4C7C-5F0C-843C-FC674F15F947'),
  success?: boolean(name='Success', example='true'),
  vSwitchCount?: int32(name='VSwitchCount', example='6'),
  vSwitchList?: [ 
    {
      availableIpAddressCount?: long(name='AvailableIpAddressCount', example='1000'),
      maxAgentCount?: int32(name='MaxAgentCount', example='1000'),
      vSwitchId?: string(name='VSwitchId', example='vsw-bp1eil9df23rsd8l1sevebiszooj'),
      vSwitchName?: string(name='VSwitchName', example='my-vswitch'),
      vpcId?: string(name='VpcId', example='vpc-wz9bpdaebft6j23fesdf84v2f1um3a'),
    }
  ](name='VSwitchList'),
}

model GetUserVpcVSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserVpcVSwitchResponseBody(name='body'),
}

async function getUserVpcVSwitch(request: GetUserVpcVSwitchRequest): GetUserVpcVSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserVpcVSwitch', 'POST', '/', 'json', false, 'json', request);
}

model GetUserVpcsRequest {
  pageNumber: int32(name='PageNumber', example='1', minimum=1, maximum=2147483646, position='Query'),
  pageSize: int32(name='PageSize', example='1', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  vpcId?: string(name='VpcId', example='vpc-2ze22asdfuwiea2ebjkqhf4pyj', position='Query'),
}

model GetUserVpcsResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='CEE46204-E1CF-5F48-B094-67362DD4B73F'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='100'),
  vpcs?: [ 
    {
      cidrBlock?: string(name='CidrBlock', example='172.16.80.0/20'),
      description?: string(name='Description'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm3fzmgkehpewjertna'),
      routerTableIds?: [ string ](name='RouterTableIds'),
      vSwitchIds?: [ string ](name='VSwitchIds'),
      vpcId?: string(name='VpcId', example='vpc-uf6gc56wdjpafoiwej6adqb4qn72xtw'),
      vpcName?: string(name='VpcName', example='shanghai-vpc'),
    }
  ](name='Vpcs'),
}

model GetUserVpcsResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserVpcsResponseBody(name='body'),
}

async function getUserVpcs(request: GetUserVpcsRequest): GetUserVpcsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserVpcs', 'POST', '/', 'json', false, 'json', request);
}

model ListEnvsRequest {
  envId?: string(name='EnvId', description='环境ID', example='10YPA8H', position='Query'),
  envName?: string(name='EnvName', description='环境名', example='test-create', position='Query'),
  pageNumber: int32(name='PageNumber', example='1', minimum=1, maximum=10000000, position='Query'),
  pageSize: int32(name='PageSize', example='10', minimum=5, maximum=200, position='Query'),
}

model ListEnvsResponseBody = {
  code?: string(name='Code', example='200'),
  envs?: [ 
    {
      createTime?: long(name='CreateTime', description='创建时间', example='1637053715165'),
      envId?: string(name='EnvId', description='环境ID', example='86S1LH'),
      envName?: string(name='EnvName', description='环境名', example='test-create'),
      envVersion?: string(name='EnvVersion', description='依赖的jmeter版本', example='5.0'),
      files?: [ 
        {
          fileId?: long(name='FileId', description='文件ID', example='61660'),
          fileName?: string(name='FileName', description='文件名', example='json.jar'),
          fileOssAddress?: string(name='FileOssAddress', description='文件的oss地址', example='https://test.oss-cn-shanghai.aliyuncs.com/json.jar'),
          fileSize?: long(name='FileSize', description='文件大小，单位为Byte', example='788'),
          md5?: string(name='Md5', description='jar包的md5值', example='43B584026CE5E570F3DE638FA7EEF9E0'),
        }
      ](name='Files', description='包含的jar包'),
      modifiedTime?: long(name='ModifiedTime', description='修改时间', example='1637053719165'),
      properties?: [ 
        {
          description?: string(name='Description', description='描述', example='远程主机'),
          name?: string(name='Name', description='属性名', example='remote_hosts'),
          value?: string(name='Value', description='属性值', example='127.0.0.1'),
        }
      ](name='Properties', description='jmeter属性'),
      relatedScenes?: [ string ](name='RelatedScenes', description='关联的场景'),
      runningScenes?: [ string ](name='RunningScenes', description='关联的场景id'),
      usedCapacity?: long(name='UsedCapacity', description='环境的文件总大小', example='26668'),
    }
  ](name='Envs', description='环境列表'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='A8E16480-15C1-555A-922F-B736A005E52D'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListEnvsResponse = {
  headers: map[string]string(name='headers'),
  body: ListEnvsResponseBody(name='body'),
}

async function listEnvs(request: ListEnvsRequest): ListEnvsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEnvs', 'POST', '/', 'json', false, 'json', request);
}

model ListJMeterReportsRequest {
  beginTime?: long(name='BeginTime', description='报告的起始时间，单位为ms', example='1637115303000', minimum=0, maximum=9223372036854775807, position='Query'),
  endTime?: long(name='EndTime', description='报告的结束时间', example='1637115306000', minimum=0, maximum=9223372036854775807, position='Query'),
  keyword?: string(name='Keyword', description='报告关键字', example='test', position='Query'),
  pageNumber: int32(name='PageNumber', example='1', minimum=1, maximum=50, position='Query'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=20, position='Query'),
  reportId?: string(name='ReportId', description='报告ID', example='7R4RE352', position='Query'),
  sceneId?: string(name='SceneId', description='要查看的报告的场景id', example='10YPA8H', position='Query'),
}

model ListJMeterReportsResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  reports?: [ 
    {
      actualStartTime?: long(name='ActualStartTime', description='压测开始时间', example='1637157073000'),
      duration?: string(name='Duration', description='压测持续时间', example='10分钟'),
      reportId?: string(name='ReportId', description='报告id', example='7R4RE352'),
      reportName?: string(name='ReportName', description='报告名称', example='test'),
      vum?: long(name='Vum', description='消耗的vum', example='1000'),
    }
  ](name='Reports'),
  requestId?: string(name='RequestId', example='A8E16480-15C1-555A-922F-B736A005E52D'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListJMeterReportsResponse = {
  headers: map[string]string(name='headers'),
  body: ListJMeterReportsResponseBody(name='body'),
}

async function listJMeterReports(request: ListJMeterReportsRequest): ListJMeterReportsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListJMeterReports', 'POST', '/', 'json', false, 'json', request);
}

model ListOpenJMeterScenesRequest {
  pageNumber: int32(name='PageNumber', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize: int32(name='PageSize', example='10', minimum=10, maximum=1000, position='Query'),
  sceneId?: string(name='SceneId', description='场景id', example='DYYPZIH', position='Query'),
  sceneName?: string(name='SceneName', description='场景名', example='test', position='Query'),
}

model ListOpenJMeterScenesResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  jMeterScene?: [ 
    {
      durationStr?: string(name='DurationStr', description='压测持续时间', example='10分钟'),
      sceneId?: string(name='SceneId', description='场景id', example='DYYPZIH'),
      sceneName?: string(name='SceneName', description='场景名', example='test'),
    }
  ](name='JMeterScene'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='A8E16480-15C1-555A-922F-B736A005E52D'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListOpenJMeterScenesResponse = {
  headers: map[string]string(name='headers'),
  body: ListOpenJMeterScenesResponseBody(name='body'),
}

async function listOpenJMeterScenes(request: ListOpenJMeterScenesRequest): ListOpenJMeterScenesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOpenJMeterScenes', 'POST', '/', 'json', false, 'json', request);
}

model ListPtsSceneRequest {
  keyWord?: string(name='KeyWord', position='Query'),
  pageNumber: int32(name='PageNumber', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize: int32(name='PageSize', example='10', minimum=10, maximum=1000, position='Query'),
}

model ListPtsSceneResponseBody = {
  code?: string(name='Code', example='4001'),
  httpStatusCode?: int32(name='HttpStatusCode', example='400'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='DD6F2ED8-E31B-497F-85AB-C4E358A5F667'),
  sceneViewList?: [ 
    {
      createTime?: string(name='CreateTime', example='2021-02-26 15:28:39'),
      sceneId?: string(name='SceneId', example='DFGVS3S'),
      sceneName?: string(name='SceneName'),
    }
  ](name='SceneViewList'),
  success?: boolean(name='Success', example='false'),
}

model ListPtsSceneResponse = {
  headers: map[string]string(name='headers'),
  body: ListPtsSceneResponseBody(name='body'),
}

async function listPtsScene(request: ListPtsSceneRequest): ListPtsSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPtsScene', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPtsSceneRequest {
  scene: string(name='Scene', example='SD6YZCI', position='Body'),
}

model ModifyPtsSceneResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='449ADAFB-8DA4-4317-A284-4922D04DE828'),
  success?: boolean(name='Success', example='true'),
}

model ModifyPtsSceneResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPtsSceneResponseBody(name='body'),
}

async function modifyPtsScene(request: ModifyPtsSceneRequest): ModifyPtsSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPtsScene', 'POST', '/', 'json', true, 'form', request);
}

model RemoveEnvRequest {
  envId: string(name='EnvId', description='要删除的环境ID', example='10YPA8H', maxLength=20, position='Query'),
}

model RemoveEnvResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A8E16480-15C1-555A-922F-B736A005E52D'),
  success?: boolean(name='Success', example='true'),
}

model RemoveEnvResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveEnvResponseBody(name='body'),
}

async function removeEnv(request: RemoveEnvRequest): RemoveEnvResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveEnv', 'POST', '/', 'json', false, 'json', request);
}

model RemoveOpenJMeterSceneRequest {
  sceneId: string(name='SceneId', description='场景ID', example='DYYPZIH', position='Query'),
}

model RemoveOpenJMeterSceneResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A8E16480-15C1-555A-922F-B736A005E52D'),
  success?: boolean(name='Success', example='true'),
}

model RemoveOpenJMeterSceneResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveOpenJMeterSceneResponseBody(name='body'),
}

async function removeOpenJMeterScene(request: RemoveOpenJMeterSceneRequest): RemoveOpenJMeterSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveOpenJMeterScene', 'POST', '/', 'json', false, 'json', request);
}

model SaveEnvRequest {
  env: {
    envId?: string(name='EnvId', description='环境id，不填表示新建环境，填了表示修改该环境', example='10YPA8H', maxLength=20),
    envName: string(name='EnvName', description='环境名称', example='test-create', minLength=1, maxLength=50),
    files: [ 
      {
        fileName: string(name='FileName', description='文件名', example='json.jar', minLength=1, maxLength=100),
        fileOssAddress: string(name='FileOssAddress', description='文件oss地址，目前只支持上海region的oss地址', example='https://test.oss-cn-shanghai.aliyuncs.com/json.jar', minLength=1, maxLength=200),
      }
    ](name='Files', description='环境依赖的文件'),
    jmeterPluginLabel?: string(name='JmeterPluginLabel', description='jmeter插件的环境标签', example='test', maxLength=32),
    properties?: [ 
      {
        description?: string(name='Description', description='描述', example='远程主机', maxLength=1024),
        name?: string(name='Name', description='属性名', example='remote_hosts', minLength=1, maxLength=1024),
        value?: string(name='Value', description='属性值', example='127.0.0.1', minLength=1, maxLength=1024),
      }
    ](name='Properties', description='jmeter属性'),
  }(name='Env', description='环境', shrink='json', position='Query'),
}

model SaveEnvResponseBody = {
  code?: string(name='Code', example='200'),
  envId?: string(name='EnvId', description='操作的环境id', example='10YPA8H'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A8E16480-15C1-555A-922F-B736A005E52D'),
  success?: boolean(name='Success', example='true'),
}

model SaveEnvResponse = {
  headers: map[string]string(name='headers'),
  body: SaveEnvResponseBody(name='body'),
}

async function saveEnv(request: SaveEnvRequest): SaveEnvResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveEnv', 'POST', '/', 'json', false, 'json', request);
}

model SaveOpenJMeterSceneRequest {
  openJMeterScene: {
    agentCount: int32(name='AgentCount', description='施压引擎数量', example='2'),
    concurrency?: int32(name='Concurrency', description='最大并发', example='1000'),
    constantThroughputTimerType?: string(name='ConstantThroughputTimerType', description='constantThroughputTimerType', example='GLOBAL'),
    dnsCacheConfig?: {
      clearCacheEachIteration?: boolean(name='ClearCacheEachIteration', example='true'),
      dnsServers?: [ string ](name='DnsServers'),
      hostTable?: map[string]string(name='HostTable'),
    }(name='DnsCacheConfig', description='DNS配置'),
    duration: int32(name='Duration', description='压测持续时间', example='600'),
    environmentId?: string(name='EnvironmentId', description='关联的环境id', example='I8PZIH'),
    fileList: [ 
      {
        fileId?: long(name='FileId', description='文件id', example='61232'),
        fileName: string(name='FileName', description='文件名', example='baidu.jmx'),
        fileOssAddress: string(name='FileOssAddress', description='文件公网可访问的oss地址', example='https://test.cn-shanghai.aliyuncs.com/baidu.jmx'),
        fileSize?: long(name='FileSize', description='文件大小，单位byte', example='28880'),
        md5?: string(name='Md5', description='文件的MD5', example='DA70F97A74D76B6A3BEF9CC8AE0D89EB'),
        splitCsv?: boolean(name='SplitCsv', description='是否切分，仅针对csv有效', example='false'),
        tags?: string(name='Tags', description='文件tag'),
      }
    ](name='FileList', description='文件列表'),
    isVpcTest?: boolean(name='IsVpcTest', description='是否为VPC测试，默认为false表示公网测试，此值为true时VPC相关配置才生效', example='true'),
    jMeterProperties?: [ 
      {
        name?: string(name='Name', example='https.sessioncontext.shared'),
        value?: string(name='Value', example='false'),
      }
    ](name='JMeterProperties', description='Jmeter属性'),
    jmeterPluginLabel?: string(name='JmeterPluginLabel', description='jmeter插件的环境标签', example='test', maxLength=32),
    maxRps?: int32(name='MaxRps', example='100'),
    mode: string(name='Mode', description='压力模式', example='CONCURRENCY'),
    rampUp?: int32(name='RampUp', description='预热时间', example='600'),
    regionId?: string(name='RegionId', description='region的id，VPC压测时配置', example='cn-beijing'),
    sceneId?: string(name='SceneId', description='场景ID', example='DYYPZIH'),
    sceneName: string(name='SceneName', description='场景名', example='test'),
    securityGroupId?: string(name='SecurityGroupId', description='安全组id，VPC压测时配置', example='sg-2zeid0dd7bhahsgdahspaly'),
    startConcurrency?: int32(name='StartConcurrency', example='10'),
    startRps?: int32(name='StartRps', example='10'),
    steps?: int32(name='Steps', description='预热阶段', example='3'),
    syncTimerType?: string(name='SyncTimerType', description='synchronizing timer 类型', example='GLOBAL'),
    testFile: string(name='TestFile', description='测试文件', example='baidu.jmx'),
    vSwitchId?: string(name='VSwitchId', description='交换机id，VPC压测时配置', example='vsw-2zehsgdhsahw1r'),
    vpcId?: string(name='VpcId', description='vpc的id，VPC压测时配置', example='vpc-2ze2sahjdgahsebjkqhf4pyj'),
  }(name='OpenJMeterScene', description='场景详情', shrink='json', position='Query'),
}

model SaveOpenJMeterSceneResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A8E16480-15C1-555A-922F-B736A005E52D'),
  sceneId?: string(name='SceneId', description='场景id', example='DYYPZIH'),
  success?: boolean(name='Success', example='true'),
}

model SaveOpenJMeterSceneResponse = {
  headers: map[string]string(name='headers'),
  body: SaveOpenJMeterSceneResponseBody(name='body'),
}

async function saveOpenJMeterScene(request: SaveOpenJMeterSceneRequest): SaveOpenJMeterSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveOpenJMeterScene', 'POST', '/', 'json', false, 'json', request);
}

model SavePtsSceneRequest {
  scene: {
    advanceSetting?: {
      connectionTimeoutInSecond?: int32(name='ConnectionTimeoutInSecond', description='超时时间，单位秒', example='5'),
      domainBindingList?: [ 
        {
          domain?: string(name='Domain', description='域名', example='www.example.com'),
          ips?: [ string ](name='Ips', description='对应的IP'),
        }
      ](name='DomainBindingList', description='域名绑定IP关系'),
      logRate?: int32(name='LogRate', description='日志采样率，[1,50]，且是10的倍数', example='1'),
      successCode?: string(name='SuccessCode', description='新增成功状态码，多个用英文逗号隔开', example='205'),
    }(name='AdvanceSetting', description='高级设置'),
    fileParameterList?: [ 
      {
        fileName?: string(name='FileName', description='文件名', example='test.csv'),
        fileOssAddress?: string(name='FileOssAddress', description='文件的oss地址，必须是公网可访问的', example='https://jmeter-pts-testing-version.oss-cn-shanghai.aliyuncs.com/param-file.csv'),
      }
    ](name='FileParameterList', description='文件参数'),
    globalParameterList?: [ 
      {
        paramName?: string(name='ParamName', description='参数名', example='global'),
        paramValue?: string(name='ParamValue', description='全局参数值，不可参数化', example='11111'),
      }
    ](name='GlobalParameterList', description='全局自定义参数'),
    loadConfig: {
      agentCount?: int32(name='AgentCount', description='指定机器数，并发必须大于250(RPS大于2000)才能使用，最大扩展机器数不能超过 最大并发/250(最大RPS/2000)', example='1'),
      apiLoadConfigList?: [ 
        {
          apiId: string(name='ApiId', description='API ID。', example='1'),
          rpsBegin: int32(name='RpsBegin', description='起始RPS值', example='100'),
          rpsLimit: int32(name='RpsLimit', description='最大RPS值', example='100'),
        }
      ](name='ApiLoadConfigList', description='API的起始、最大RPS值设置，在RPS模式下使用'),
      autoStep?: boolean(name='AutoStep', description='是否自动递增，只有在并发模式下有效，即 testMode=concurrency_mode 时', example='true'),
      configuration: {
        allConcurrencyBegin?: int32(name='AllConcurrencyBegin', description='所有链路的起始并发总值，均分给每个链路，在并发模式下使用，若不设置该值，则relationLoadConfig必须填写', example='100'),
        allConcurrencyLimit?: int32(name='AllConcurrencyLimit', description='所有链路的最大并发总值，均分给每个链路，在并发模式下使用，若不设置该值，则relationLoadConfig必须填写', example='100'),
        allRpsBegin?: int32(name='AllRpsBegin', description='所有API的起始RPS总值，均分给每个API，在RPS模式下使用，若不设置该值，则apiLoadConfig必须填写', example='100'),
        allRpsLimit?: int32(name='AllRpsLimit', description='所有API的最大RPS总值，均分给每个API，在RPS模式下使用，若不设置该值，则apiLoadConfig必须填写', example='100'),
      }(name='Configuration', description='场景施压量级配置信息'),
      increment?: int32(name='Increment', description='递增百分比，取值范围[10,100]，且是整十倍；只有在并发模式且是自动递增模式下有效，即 testMode=concurrency_mode 且 autoStep=true 时', example='30'),
      keepTime?: int32(name='KeepTime', description='单量级持续时长，单位分钟，一定是小于施压时长 maxRunningTime', example='3'),
      maxRunningTime: int32(name='MaxRunningTime', description='施压时长，单位分钟，[1-1440]', example='10'),
      relationLoadConfigList?: [ 
        {
          concurrencyBegin: int32(name='ConcurrencyBegin', description='concurrencyBegin', example='100'),
          concurrencyLimit: int32(name='ConcurrencyLimit', description='最大并发', example='100'),
          relationId?: string(name='RelationId', description='链路id', example='1'),
        }
      ](name='RelationLoadConfigList', description='链路的起始、最大并发值设置，在并发模式下使用'),
      testMode: string(name='TestMode', description='施压模式，并发模式(concurrency_mode) 和RPS模式(tps_mode)', example='concurrency_mode'),
      vpcLoadConfig?: {
        regionId: string(name='RegionId', description='regionId', example='cn-beijing'),
        securityGroupId: string(name='SecurityGroupId', description='安全组的Id', example='sg-jkasgfieiajidsjakjscb'),
        vSwitchId: string(name='VSwitchId', description='交换机的Id', example='vsw-skjfhlahsljkhsfalkjdoiw'),
        vpcId: string(name='VpcId', description='VPC ID。', example='vpc-akjhsdajgjsfggahjkga'),
      }(name='VpcLoadConfig', description='VPC配置'),
    }(name='LoadConfig', description='施压配置'),
    relationList: [ 
      {
        apiList: [ 
          {
            apiId?: string(name='ApiId', description='API的id', example='1'),
            apiName: string(name='ApiName', description='API名', example='api'),
            body?: {
              bodyValue?: string(name='BodyValue', description='body 的实际内容 形式 {"key1":"value2","key2":"value2"}', example='{\\"global\\":\\"${global}\\",\\"name\\":\\"${name}\\"}'),
              contentType?: string(name='ContentType', description='body 类型，默认 application/x-www-form-urlencoded', example='application/x-www-form-urlencoded'),
            }(name='Body', description='请求body'),
            checkPointList?: [ 
              {
                checkPoint?: string(name='CheckPoint', description='检查对象 type=HEADER 时，表示header中的字段，type=EXPORTED_PARAM ，表示出参名', example='userId'),
                checkType?: string(name='CheckType', description='检查点类型 响应body(BODY_TEXT)，响应header(HEADER)， 响应状态码(STATUS_CODE) ，出参（EXPORTED_PARAM）', example='EXPORTED_PARAM'),
                expectValue?: string(name='ExpectValue', description='检查内容，即期望值', example='111'),
                operator?: string(name='Operator', description='检查条件 CheckPointOperator 中', example='ctn'),
              }
            ](name='CheckPointList', description='检查点'),
            exportList?: [ 
              {
                count?: string(name='Count', description='第几个匹配项，可以是数字 或 random（ BODY_TEXT情况下才需要count）', example='0'),
                exportName?: string(name='ExportName', description='出参名', example='test'),
                exportType?: string(name='ExportType', description='出参来源 请求体(BODY_TEXT)，请求体(BODY_JSON)，请求头(HEADER)，响应状态码(STATUS_CODE)', example='BODY_JSON'),
                exportValue?: string(name='ExportValue', description='出参的解析表达式', example='data.itemlist[0]'),
              }
            ](name='ExportList', description='出参'),
            headerList?: [ 
              {
                headerName?: string(name='HeaderName', description='header参数名', example='Accept-Encoding'),
                headerValue?: string(name='HeaderValue', description='参数对应的值', example='gzip, deflate, br'),
              }
            ](name='HeaderList', description='headerList'),
            method: string(name='Method', description='请求方法', example='GET'),
            redirectCountLimit: int32(name='RedirectCountLimit', description='重定向次数，只能是0（允许重定向）或者10（不允许重定向）', example='0'),
            timeoutInSecond?: int32(name='TimeoutInSecond', description='API超时时间，单位秒，默认5s，范围[1-60]', example='5'),
            url: string(name='Url', description='压测URL', example='http://www.example.com'),
          }
        ](name='ApiList', description='链路下的API信息'),
        fileParameterExplainList?: [ 
          {
            baseFile?: boolean(name='BaseFile', description='是否作为基准文件', example='true'),
            cycleOnce?: boolean(name='CycleOnce', description='文件是否轮询一次', example='true'),
            fileName: string(name='FileName', description='文件名', example='fileName.csv'),
            fileParamName: string(name='FileParamName', description='文件使用的参数列名', example='name,uid,age'),
          }
        ](name='FileParameterExplainList', description='链路中的文件参数配置信息'),
        relationId?: string(name='RelationId', description='链路id', example='1'),
        relationName: string(name='RelationName', description='链路名'),
      }
    ](name='RelationList', description='链路配置'),
    sceneId?: string(name='SceneId', description='场景ID，不传为新建，传递为修改', example='IUYAHGJ'),
    sceneName: string(name='SceneName', description='场景名', example='test'),
  }(name='Scene', description='场景详细信息', shrink='json', position='Query'),
}

model SavePtsSceneResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A8E16480-15C1-555A-922F-B736A005E52D'),
  sceneId?: string(name='SceneId', description='场景ID', example='IUYAHGJ'),
  success?: boolean(name='Success', example='true'),
}

model SavePtsSceneResponse = {
  headers: map[string]string(name='headers'),
  body: SavePtsSceneResponseBody(name='body'),
}

async function savePtsScene(request: SavePtsSceneRequest): SavePtsSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SavePtsScene', 'POST', '/', 'json', false, 'json', request);
}

model StartDebugPtsSceneRequest {
  sceneId: string(name='SceneId', example='NHBGB8B', position='Query'),
}

model StartDebugPtsSceneResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  planId?: string(name='PlanId', example='NJJBH8B'),
  requestId?: string(name='RequestId', example='C1905194-EE28-4F78-AD81-85A40D52D1BC'),
  success?: boolean(name='Success', example='true'),
}

model StartDebugPtsSceneResponse = {
  headers: map[string]string(name='headers'),
  body: StartDebugPtsSceneResponseBody(name='body'),
}

async function startDebugPtsScene(request: StartDebugPtsSceneRequest): StartDebugPtsSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDebugPtsScene', 'POST', '/', 'json', false, 'json', request);
}

model StartDebuggingJMeterSceneRequest {
  sceneId: string(name='SceneId', description='场景id', example='DYYPZIH', position='Query'),
}

model StartDebuggingJMeterSceneResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  reportId?: string(name='ReportId', example='MH0SU1I'),
  requestId?: string(name='RequestId', example='A8E16480-15C1-555A-922F-B736A005E52D'),
  success?: boolean(name='Success', example='true'),
}

model StartDebuggingJMeterSceneResponse = {
  headers: map[string]string(name='headers'),
  body: StartDebuggingJMeterSceneResponseBody(name='body'),
}

async function startDebuggingJMeterScene(request: StartDebuggingJMeterSceneRequest): StartDebuggingJMeterSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDebuggingJMeterScene', 'POST', '/', 'json', false, 'json', request);
}

model StartPtsSceneRequest {
  sceneId: string(name='SceneId', example='FGSRA3', position='Query'),
}

model StartPtsSceneResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  planId?: string(name='PlanId', example='SFVAFE'),
  requestId?: string(name='RequestId', example='BD12DCC9-5E48-4E77-9657-8D34D8C0F97B'),
  success?: boolean(name='Success', example='true'),
}

model StartPtsSceneResponse = {
  headers: map[string]string(name='headers'),
  body: StartPtsSceneResponseBody(name='body'),
}

async function startPtsScene(request: StartPtsSceneRequest): StartPtsSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartPtsScene', 'POST', '/', 'json', false, 'json', request);
}

model StartTestingJMeterSceneRequest {
  sceneId: string(name='SceneId', description='场景id', example='DYYPZIH', position='Query'),
}

model StartTestingJMeterSceneResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  reportId?: string(name='ReportId', example='MH0SU1I'),
  requestId?: string(name='RequestId', example='A8E16480-15C1-555A-922F-B736A005E52D'),
  success?: boolean(name='Success', example='true'),
}

model StartTestingJMeterSceneResponse = {
  headers: map[string]string(name='headers'),
  body: StartTestingJMeterSceneResponseBody(name='body'),
}

async function startTestingJMeterScene(request: StartTestingJMeterSceneRequest): StartTestingJMeterSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartTestingJMeterScene', 'POST', '/', 'json', false, 'json', request);
}

model StopDebugPtsSceneRequest {
  planId: string(name='PlanId', example='FVDC7HB', position='Query'),
  sceneId: string(name='SceneId', example='RDDCF7', position='Query'),
}

model StopDebugPtsSceneResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='0AE6505C-55CE-444A-B73B-810D0ED27C66'),
  success?: boolean(name='Success', example='true'),
}

model StopDebugPtsSceneResponse = {
  headers: map[string]string(name='headers'),
  body: StopDebugPtsSceneResponseBody(name='body'),
}

async function stopDebugPtsScene(request: StopDebugPtsSceneRequest): StopDebugPtsSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDebugPtsScene', 'POST', '/', 'json', false, 'json', request);
}

model StopDebuggingJMeterSceneRequest {
  sceneId: string(name='SceneId', description='场景id', example='DYYPZIH', position='Query'),
}

model StopDebuggingJMeterSceneResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A8E16480-15C1-555A-922F-B736A005E52D'),
  success?: boolean(name='Success', example='true'),
}

model StopDebuggingJMeterSceneResponse = {
  headers: map[string]string(name='headers'),
  body: StopDebuggingJMeterSceneResponseBody(name='body'),
}

async function stopDebuggingJMeterScene(request: StopDebuggingJMeterSceneRequest): StopDebuggingJMeterSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDebuggingJMeterScene', 'POST', '/', 'json', false, 'json', request);
}

model StopPtsSceneRequest {
  sceneId: string(name='SceneId', example='GV4DEBG', position='Query'),
}

model StopPtsSceneResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='DD6F2ED8-E31B-497F-85AB-C4E358A5F6F9'),
  success?: boolean(name='Success', example='true'),
}

model StopPtsSceneResponse = {
  headers: map[string]string(name='headers'),
  body: StopPtsSceneResponseBody(name='body'),
}

async function stopPtsScene(request: StopPtsSceneRequest): StopPtsSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopPtsScene', 'POST', '/', 'json', false, 'json', request);
}

model StopTestingJMeterSceneRequest {
  sceneId: string(name='SceneId', description='场景id', example='DYYPZIH', position='Query'),
}

model StopTestingJMeterSceneResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A8E16480-15C1-555A-922F-B736A005E52D'),
  success?: boolean(name='Success', example='true'),
}

model StopTestingJMeterSceneResponse = {
  headers: map[string]string(name='headers'),
  body: StopTestingJMeterSceneResponseBody(name='body'),
}

async function stopTestingJMeterScene(request: StopTestingJMeterSceneRequest): StopTestingJMeterSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopTestingJMeterScene', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePtsSceneBaseLineRequest {
  apiBaselines?: map[string]any(name='ApiBaselines', example='[{"avgRt":1,"avgTps":1,"failCountBiz":1,"failCountReq":182381,"id":362447,"maxRt":3051,"minRt":0,"name":"1-1","seg50Rt":1,"seg75Rt":1,"seg90Rt":1,"seg99Rt":3,"successRateBiz":1,"successRateReq":0,"timingConnAvg":0},{"avgRt":1.06,"avgTps":1,"failCountBiz":0,"failCountReq":151143,"id":362446,"maxRt":3068,"minRt":0,"name":"dd","seg50Rt":1,"seg75Rt":1,"seg90Rt":1,"seg99Rt":2,"successRateBiz":1,"successRateReq":0}]', shrink='json', position='Query'),
  sceneBaseline?: map[string]any(name='SceneBaseline', example='{"avgRt":1,"avgTps":1,"failCountBiz":1,"failCountReq":1,"seg90Rt":1,"seg99Rt":2,"successRateBiz":0.5,"successRateReq":1}', shrink='json', position='Query'),
  sceneId: string(name='SceneId', example='NB54CV', position='Query'),
}

model UpdatePtsSceneBaseLineResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='4F7D2CE0-AE4C-4143-955A-8E4595AF86A6'),
  success?: boolean(name='Success', example='true'),
}

model UpdatePtsSceneBaseLineResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePtsSceneBaseLineResponseBody(name='body'),
}

async function updatePtsSceneBaseLine(request: UpdatePtsSceneBaseLineRequest): UpdatePtsSceneBaseLineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePtsSceneBaseLine', 'POST', '/', 'json', false, 'json', request);
}

