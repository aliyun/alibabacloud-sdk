/**
 *
 */
import Credential;
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('objectdet', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DetectObjectElement {
  height?: long(name='Height', example='200'),
  score?: float(name='Score', example='0.68225745'),
  type?: string(name='Type', example='VEHICLE'),
  width?: long(name='Width', example='100'),
  x?: long(name='X', example='5'),
  y?: long(name='Y', example='10'),
}

model DetectObjectFrame {
  elements?: [
    DetectObjectElement
  ](name='Elements'),
  time?: long(name='Time'),
}

model DetectIPCObjectRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='https://viapi-test.oss-cn-shanghai.aliyuncs.com/objectdet/detect-ipc-xxxx.jpg'),
}

model DetectIPCObjectAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='https://viapi-test.oss-cn-shanghai.aliyuncs.com/objectdet/detect-ipc-xxxx.jpg'),
}

model DetectIPCObjectResponseBody = {
  data?: {
    elements?: [ 
      {
        box?: [ long ](name='Box'),
        score?: float(name='Score', example='0.7138671875'),
        targetRate?: float(name='TargetRate', example='0.8566723958333333'),
        type?: string(name='Type', example='DOG'),
      }
    ](name='Elements'),
    height?: long(name='Height', example='1200'),
    width?: long(name='Width', example='1600'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='7AE23740-A3E5-5607-8E10-895DCBD4C260'),
}

model DetectIPCObjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetectIPCObjectResponseBody(name='body'),
}

/**
 * @summary IPC目标检测
 *
 * @param request DetectIPCObjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetectIPCObjectResponse
 */
@context("detectIPCObjectWithContext")
async function detectIPCObjectWithOptions(request: DetectIPCObjectRequest, runtime: $RuntimeOptions): DetectIPCObjectResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DetectIPCObject',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary IPC目标检测
 *
 * @param request DetectIPCObjectRequest
 * @return DetectIPCObjectResponse
 */
async function detectIPCObject(request: DetectIPCObjectRequest): DetectIPCObjectResponse {
  var runtime = new $RuntimeOptions{};
  return detectIPCObjectWithOptions(request, runtime);
}

async function detectIPCObjectAdvance(request: DetectIPCObjectAdvanceRequest, runtime: $RuntimeOptions): DetectIPCObjectResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'objectdet',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var detectIPCObjectReq = new DetectIPCObjectRequest{};
  OpenApiUtil.convert(request, detectIPCObjectReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    detectIPCObjectReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var detectIPCObjectResp = detectIPCObjectWithOptions(detectIPCObjectReq, runtime);
  return detectIPCObjectResp;
}

model DetectKitchenAnimalsRequest {
  imageURLA?: string(name='ImageURLA', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/objectdet/DetectKitchenAnimals/DetectKitchenAnimals-left1.png'),
  imageURLB?: string(name='ImageURLB', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/objectdet/DetectKitchenAnimals/DetectKitchenAnimals-right1.png'),
}

model DetectKitchenAnimalsAdvanceRequest {
  imageURLAObject?: readable(name='ImageURLA', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/objectdet/DetectKitchenAnimals/DetectKitchenAnimals-left1.png'),
  imageURLBObject?: readable(name='ImageURLB', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/objectdet/DetectKitchenAnimals/DetectKitchenAnimals-right1.png'),
}

model DetectKitchenAnimalsResponseBody = {
  data?: {
    elements?: [ 
      {
        rectangles?: {
          height?: long(name='Height', example='64'),
          left?: long(name='Left', example='292'),
          top?: long(name='Top', example='1048'),
          width?: long(name='Width', example='64'),
        }(name='Rectangles'),
        score?: float(name='Score', example='0.75105053'),
        type?: string(name='Type', example='mouse'),
      }
    ](name='Elements'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='C306F16F-30E1-54F4-93DF-A52CCF6664D1'),
}

model DetectKitchenAnimalsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetectKitchenAnimalsResponseBody(name='body'),
}

/**
 * @summary 猫鼠识别
 *
 * @param request DetectKitchenAnimalsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetectKitchenAnimalsResponse
 */
@context("detectKitchenAnimalsWithContext")
async function detectKitchenAnimalsWithOptions(request: DetectKitchenAnimalsRequest, runtime: $RuntimeOptions): DetectKitchenAnimalsResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURLA)) {
    body['ImageURLA'] = request.imageURLA;
  }
  if (!$isNull(request.imageURLB)) {
    body['ImageURLB'] = request.imageURLB;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DetectKitchenAnimals',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 猫鼠识别
 *
 * @param request DetectKitchenAnimalsRequest
 * @return DetectKitchenAnimalsResponse
 */
async function detectKitchenAnimals(request: DetectKitchenAnimalsRequest): DetectKitchenAnimalsResponse {
  var runtime = new $RuntimeOptions{};
  return detectKitchenAnimalsWithOptions(request, runtime);
}

async function detectKitchenAnimalsAdvance(request: DetectKitchenAnimalsAdvanceRequest, runtime: $RuntimeOptions): DetectKitchenAnimalsResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'objectdet',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var detectKitchenAnimalsReq = new DetectKitchenAnimalsRequest{};
  OpenApiUtil.convert(request, detectKitchenAnimalsReq);

  if(!$isNull(request.imageURLAObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLAObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    detectKitchenAnimalsReq.imageURLA = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  if(!$isNull(request.imageURLBObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLBObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    detectKitchenAnimalsReq.imageURLB = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var detectKitchenAnimalsResp = detectKitchenAnimalsWithOptions(detectKitchenAnimalsReq, runtime);
  return detectKitchenAnimalsResp;
}

model DetectMainBodyRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/objectdet/DetectMainBody/DetectMainBody1.jpg'),
}

model DetectMainBodyAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/objectdet/DetectMainBody/DetectMainBody1.jpg'),
}

model DetectMainBodyResponseBody = {
  data?: {
    location?: {
      height?: int32(name='Height', example='320'),
      width?: int32(name='Width', example='583'),
      x?: int32(name='X', example='28'),
      y?: int32(name='Y', example='20'),
    }(name='Location'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='2E59C333-5480-4231-A8AB-BEE1001EA7FE'),
}

model DetectMainBodyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetectMainBodyResponseBody(name='body'),
}

/**
 * @param request DetectMainBodyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetectMainBodyResponse
 */
@context("detectMainBodyWithContext")
async function detectMainBodyWithOptions(request: DetectMainBodyRequest, runtime: $RuntimeOptions): DetectMainBodyResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.imageURL)) {
    query['ImageURL'] = request.imageURL;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DetectMainBody',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DetectMainBodyRequest
 * @return DetectMainBodyResponse
 */
async function detectMainBody(request: DetectMainBodyRequest): DetectMainBodyResponse {
  var runtime = new $RuntimeOptions{};
  return detectMainBodyWithOptions(request, runtime);
}

async function detectMainBodyAdvance(request: DetectMainBodyAdvanceRequest, runtime: $RuntimeOptions): DetectMainBodyResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'objectdet',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var detectMainBodyReq = new DetectMainBodyRequest{};
  OpenApiUtil.convert(request, detectMainBodyReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    detectMainBodyReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var detectMainBodyResp = detectMainBodyWithOptions(detectMainBodyReq, runtime);
  return detectMainBodyResp;
}

model DetectObjectRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/objectdet/DetectObject/DetectObject1.jpg'),
}

model DetectObjectAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/objectdet/DetectObject/DetectObject1.jpg'),
}

model DetectObjectResponseBody = {
  data?: {
    elements?: [ 
      {
        boxes?: [ int32 ](name='Boxes'),
        score?: float(name='Score', example='0.266'),
        type?: string(name='Type', example='chair'),
      }
    ](name='Elements'),
    height?: int32(name='Height', example='300'),
    width?: int32(name='Width', example='533'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6EF97B44-2763-4EAD-8737-FB9F5EE25FE2'),
}

model DetectObjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetectObjectResponseBody(name='body'),
}

/**
 * @param request DetectObjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetectObjectResponse
 */
@context("detectObjectWithContext")
async function detectObjectWithOptions(request: DetectObjectRequest, runtime: $RuntimeOptions): DetectObjectResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DetectObject',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DetectObjectRequest
 * @return DetectObjectResponse
 */
async function detectObject(request: DetectObjectRequest): DetectObjectResponse {
  var runtime = new $RuntimeOptions{};
  return detectObjectWithOptions(request, runtime);
}

async function detectObjectAdvance(request: DetectObjectAdvanceRequest, runtime: $RuntimeOptions): DetectObjectResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'objectdet',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var detectObjectReq = new DetectObjectRequest{};
  OpenApiUtil.convert(request, detectObjectReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    detectObjectReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var detectObjectResp = detectObjectWithOptions(detectObjectReq, runtime);
  return detectObjectResp;
}

model DetectVehicleICongestionRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/objectdet/DetectVehicleICongestion/DetectVehicleICongestion1.jpg'),
  preRegionIntersectFeatures?: [ 
    {
      features?: [ string ](name='Features'),
    }
  ](name='PreRegionIntersectFeatures'),
  roadRegions?: [ 
    {
      roadRegion?: [ 
        {
          point?: {
            x?: long(name='X', description='This parameter is required.', example='400'),
            y?: long(name='Y', description='This parameter is required.', example='400'),
          }(name='Point', description='This parameter is required.'),
        }
      ](name='RoadRegion', description='This parameter is required.'),
    }
  ](name='RoadRegions', description='This parameter is required.'),
}

model DetectVehicleICongestionAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/objectdet/DetectVehicleICongestion/DetectVehicleICongestion1.jpg'),
  preRegionIntersectFeatures?: [ 
    {
      features?: [ string ](name='Features'),
    }
  ](name='PreRegionIntersectFeatures'),
  roadRegions?: [ 
    {
      roadRegion?: [ 
        {
          point?: {
            x?: long(name='X', description='This parameter is required.', example='400'),
            y?: long(name='Y', description='This parameter is required.', example='400'),
          }(name='Point', description='This parameter is required.'),
        }
      ](name='RoadRegion', description='This parameter is required.'),
    }
  ](name='RoadRegions', description='This parameter is required.'),
}

model DetectVehicleICongestionShrinkRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/objectdet/DetectVehicleICongestion/DetectVehicleICongestion1.jpg'),
  preRegionIntersectFeaturesShrink?: string(name='PreRegionIntersectFeatures'),
  roadRegionsShrink?: string(name='RoadRegions', description='This parameter is required.'),
}

model DetectVehicleICongestionResponseBody = {
  data?: {
    elements?: [ 
      {
        boxes?: [ 
          {
            bottom?: long(name='Bottom', example='576'),
            left?: long(name='Left', example='341'),
            right?: long(name='Right', example='589'),
            top?: long(name='Top', example='434'),
          }
        ](name='Boxes'),
        id?: long(name='Id', example='1'),
        score?: float(name='Score', example='0.962890625'),
        typeName?: string(name='TypeName', example='vehicle'),
      }
    ](name='Elements'),
    regionIntersectFeatures?: [ 
      {
        features?: [ string ](name='Features'),
      }
    ](name='RegionIntersectFeatures'),
    regionIntersectMatched?: [ 
      {
        ids?: [ long ](name='Ids'),
      }
    ](name='RegionIntersectMatched'),
    regionIntersects?: [ 
      {
        ids?: [ long ](name='Ids'),
      }
    ](name='RegionIntersects'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='4FC381BB-04F2-50F4-B54B-593042BCF3C6'),
}

model DetectVehicleICongestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetectVehicleICongestionResponseBody(name='body'),
}

/**
 * @summary 车辆拥堵检测
 *
 * @param tmpReq DetectVehicleICongestionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetectVehicleICongestionResponse
 */
@context("detectVehicleICongestionWithContext")
async function detectVehicleICongestionWithOptions(tmpReq: DetectVehicleICongestionRequest, runtime: $RuntimeOptions): DetectVehicleICongestionResponse {
  tmpReq.validate();
  var request = new DetectVehicleICongestionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.preRegionIntersectFeatures)) {
    request.preRegionIntersectFeaturesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.preRegionIntersectFeatures, 'PreRegionIntersectFeatures', 'json');
  }
  if (!$isNull(tmpReq.roadRegions)) {
    request.roadRegionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roadRegions, 'RoadRegions', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  if (!$isNull(request.preRegionIntersectFeaturesShrink)) {
    body['PreRegionIntersectFeatures'] = request.preRegionIntersectFeaturesShrink;
  }
  if (!$isNull(request.roadRegionsShrink)) {
    body['RoadRegions'] = request.roadRegionsShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DetectVehicleICongestion',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 车辆拥堵检测
 *
 * @param request DetectVehicleICongestionRequest
 * @return DetectVehicleICongestionResponse
 */
async function detectVehicleICongestion(request: DetectVehicleICongestionRequest): DetectVehicleICongestionResponse {
  var runtime = new $RuntimeOptions{};
  return detectVehicleICongestionWithOptions(request, runtime);
}

async function detectVehicleICongestionAdvance(request: DetectVehicleICongestionAdvanceRequest, runtime: $RuntimeOptions): DetectVehicleICongestionResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'objectdet',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var detectVehicleICongestionReq = new DetectVehicleICongestionRequest{};
  OpenApiUtil.convert(request, detectVehicleICongestionReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    detectVehicleICongestionReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var detectVehicleICongestionResp = detectVehicleICongestionWithOptions(detectVehicleICongestionReq, runtime);
  return detectVehicleICongestionResp;
}

model DetectVehicleIllegalParkingRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/objectdet/DetectVehicleIllegalParking/DetectVehicleIllegalParking2.jpg'),
  roadRegions?: [ 
    {
      roadRegion?: [ 
        {
          point?: {
            x?: long(name='X', description='This parameter is required.', example='400'),
            y?: long(name='Y', description='This parameter is required.', example='400'),
          }(name='Point', description='This parameter is required.'),
        }
      ](name='RoadRegion', description='This parameter is required.'),
    }
  ](name='RoadRegions', description='This parameter is required.'),
}

model DetectVehicleIllegalParkingAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/objectdet/DetectVehicleIllegalParking/DetectVehicleIllegalParking2.jpg'),
  roadRegions?: [ 
    {
      roadRegion?: [ 
        {
          point?: {
            x?: long(name='X', description='This parameter is required.', example='400'),
            y?: long(name='Y', description='This parameter is required.', example='400'),
          }(name='Point', description='This parameter is required.'),
        }
      ](name='RoadRegion', description='This parameter is required.'),
    }
  ](name='RoadRegions', description='This parameter is required.'),
}

model DetectVehicleIllegalParkingShrinkRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/objectdet/DetectVehicleIllegalParking/DetectVehicleIllegalParking2.jpg'),
  roadRegionsShrink?: string(name='RoadRegions', description='This parameter is required.'),
}

model DetectVehicleIllegalParkingResponseBody = {
  data?: {
    elements?: [ 
      {
        boxes?: [ 
          {
            bottom?: long(name='Bottom', example='268'),
            left?: long(name='Left', example='413'),
            right?: long(name='Right', example='499'),
            top?: long(name='Top', example='138'),
          }
        ](name='Boxes'),
        id?: long(name='Id', example='1'),
        score?: float(name='Score', example='0.9599609375'),
        typeName?: string(name='TypeName', example='vehicle'),
      }
    ](name='Elements'),
    regionIntersects?: [ 
      {
        ids?: [ long ](name='Ids'),
      }
    ](name='RegionIntersects'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='DB882EDD-991A-5A0C-A19B-CC7C4BA65E35'),
}

model DetectVehicleIllegalParkingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetectVehicleIllegalParkingResponseBody(name='body'),
}

/**
 * @summary 车辆违停检测
 *
 * @param tmpReq DetectVehicleIllegalParkingRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetectVehicleIllegalParkingResponse
 */
@context("detectVehicleIllegalParkingWithContext")
async function detectVehicleIllegalParkingWithOptions(tmpReq: DetectVehicleIllegalParkingRequest, runtime: $RuntimeOptions): DetectVehicleIllegalParkingResponse {
  tmpReq.validate();
  var request = new DetectVehicleIllegalParkingShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.roadRegions)) {
    request.roadRegionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roadRegions, 'RoadRegions', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  if (!$isNull(request.roadRegionsShrink)) {
    body['RoadRegions'] = request.roadRegionsShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DetectVehicleIllegalParking',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 车辆违停检测
 *
 * @param request DetectVehicleIllegalParkingRequest
 * @return DetectVehicleIllegalParkingResponse
 */
async function detectVehicleIllegalParking(request: DetectVehicleIllegalParkingRequest): DetectVehicleIllegalParkingResponse {
  var runtime = new $RuntimeOptions{};
  return detectVehicleIllegalParkingWithOptions(request, runtime);
}

async function detectVehicleIllegalParkingAdvance(request: DetectVehicleIllegalParkingAdvanceRequest, runtime: $RuntimeOptions): DetectVehicleIllegalParkingResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'objectdet',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var detectVehicleIllegalParkingReq = new DetectVehicleIllegalParkingRequest{};
  OpenApiUtil.convert(request, detectVehicleIllegalParkingReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    detectVehicleIllegalParkingReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var detectVehicleIllegalParkingResp = detectVehicleIllegalParkingWithOptions(detectVehicleIllegalParkingReq, runtime);
  return detectVehicleIllegalParkingResp;
}

model DetectVideoIPCObjectRequest {
  callbackOnlyHasObject?: boolean(name='CallbackOnlyHasObject', example='true'),
  startTimestamp?: long(name='StartTimestamp', example='1629086400'),
  videoURL?: string(name='VideoURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/objectdet/DetectVideoIPCObject/DetectVideoIPCObject1.mp4'),
}

model DetectVideoIPCObjectAdvanceRequest {
  callbackOnlyHasObject?: boolean(name='CallbackOnlyHasObject', example='true'),
  startTimestamp?: long(name='StartTimestamp', example='1629086400'),
  videoURLObject?: readable(name='VideoURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/objectdet/DetectVideoIPCObject/DetectVideoIPCObject1.mp4'),
}

model DetectVideoIPCObjectResponseBody = {
  data?: {
    frames?: [ 
      {
        elements?: [ 
          {
            height?: long(name='Height', example='156'),
            score?: float(name='Score', example='0.7812'),
            type?: string(name='Type', example='PERSON'),
            width?: long(name='Width', example='100'),
            x?: long(name='X', example='289'),
            y?: long(name='Y', example='271'),
          }
        ](name='Elements'),
        time?: long(name='Time', example='6124533574'),
      }
    ](name='Frames'),
    height?: long(name='Height', example='720'),
    inputFile?: string(name='InputFile', example='oss://viapi-test/viapi-3.0domepic/objectdet/DetectVideoIPCObject/DetectVideoIPCObject4.mp4'),
    width?: long(name='Width', example='1280'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='35B11E1B-800C-4598-B5AA-577E3BDBD917'),
}

model DetectVideoIPCObjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetectVideoIPCObjectResponseBody(name='body'),
}

/**
 * @summary IPC视频文件目标检测
 *
 * @param request DetectVideoIPCObjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetectVideoIPCObjectResponse
 */
@context("detectVideoIPCObjectWithContext")
async function detectVideoIPCObjectWithOptions(request: DetectVideoIPCObjectRequest, runtime: $RuntimeOptions): DetectVideoIPCObjectResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.callbackOnlyHasObject)) {
    body['CallbackOnlyHasObject'] = request.callbackOnlyHasObject;
  }
  if (!$isNull(request.startTimestamp)) {
    body['StartTimestamp'] = request.startTimestamp;
  }
  if (!$isNull(request.videoURL)) {
    body['VideoURL'] = request.videoURL;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DetectVideoIPCObject',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary IPC视频文件目标检测
 *
 * @param request DetectVideoIPCObjectRequest
 * @return DetectVideoIPCObjectResponse
 */
async function detectVideoIPCObject(request: DetectVideoIPCObjectRequest): DetectVideoIPCObjectResponse {
  var runtime = new $RuntimeOptions{};
  return detectVideoIPCObjectWithOptions(request, runtime);
}

async function detectVideoIPCObjectAdvance(request: DetectVideoIPCObjectAdvanceRequest, runtime: $RuntimeOptions): DetectVideoIPCObjectResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'objectdet',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var detectVideoIPCObjectReq = new DetectVideoIPCObjectRequest{};
  OpenApiUtil.convert(request, detectVideoIPCObjectReq);

  if(!$isNull(request.videoURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.videoURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    detectVideoIPCObjectReq.videoURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var detectVideoIPCObjectResp = detectVideoIPCObjectWithOptions(detectVideoIPCObjectReq, runtime);
  return detectVideoIPCObjectResp;
}

model DetectWhiteBaseImageRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/objectdet/DetectWhiteBaseImage/DetectWhiteBaseImage1.jpg'),
}

model DetectWhiteBaseImageAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/objectdet/DetectWhiteBaseImage/DetectWhiteBaseImage1.jpg'),
}

model DetectWhiteBaseImageResponseBody = {
  data?: {
    elements?: [ 
      {
        whiteBase?: int32(name='WhiteBase', example='0'),
      }
    ](name='Elements'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='7A7F9EEB-44C4-4592-9089-A6185B222B23'),
}

model DetectWhiteBaseImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetectWhiteBaseImageResponseBody(name='body'),
}

/**
 * @param request DetectWhiteBaseImageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetectWhiteBaseImageResponse
 */
@context("detectWhiteBaseImageWithContext")
async function detectWhiteBaseImageWithOptions(request: DetectWhiteBaseImageRequest, runtime: $RuntimeOptions): DetectWhiteBaseImageResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DetectWhiteBaseImage',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DetectWhiteBaseImageRequest
 * @return DetectWhiteBaseImageResponse
 */
async function detectWhiteBaseImage(request: DetectWhiteBaseImageRequest): DetectWhiteBaseImageResponse {
  var runtime = new $RuntimeOptions{};
  return detectWhiteBaseImageWithOptions(request, runtime);
}

async function detectWhiteBaseImageAdvance(request: DetectWhiteBaseImageAdvanceRequest, runtime: $RuntimeOptions): DetectWhiteBaseImageResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'objectdet',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var detectWhiteBaseImageReq = new DetectWhiteBaseImageRequest{};
  OpenApiUtil.convert(request, detectWhiteBaseImageReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    detectWhiteBaseImageReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var detectWhiteBaseImageResp = detectWhiteBaseImageWithOptions(detectWhiteBaseImageReq, runtime);
  return detectWhiteBaseImageResp;
}

model DetectWorkwearRequest {
  clothes?: {
    maxNum?: long(name='MaxNum', example='1'),
    threshold?: double(name='Threshold', example='0.4'),
  }(name='Clothes'),
  imageUrl?: string(name='ImageUrl', example='https://viapi-test.oss-cn-shanghai.aliyuncs.com/test-team/zhangchaorun/tiyan/xxxx.jpg'),
  labels?: [ string ](name='Labels', description='1'),
}

model DetectWorkwearAdvanceRequest {
  clothes?: {
    maxNum?: long(name='MaxNum', example='1'),
    threshold?: double(name='Threshold', example='0.4'),
  }(name='Clothes'),
  imageUrlObject?: readable(name='ImageUrl', example='https://viapi-test.oss-cn-shanghai.aliyuncs.com/test-team/zhangchaorun/tiyan/xxxx.jpg'),
  labels?: [ string ](name='Labels', description='1'),
}

model DetectWorkwearShrinkRequest {
  clothesShrink?: string(name='Clothes'),
  imageUrl?: string(name='ImageUrl', example='https://viapi-test.oss-cn-shanghai.aliyuncs.com/test-team/zhangchaorun/tiyan/xxxx.jpg'),
  labels?: [ string ](name='Labels', description='1'),
}

model DetectWorkwearResponseBody = {
  data?: {
    elements?: [ 
      {
        property?: [ 
          {
            label?: string(name='Label', example='hat'),
            probability?: {
              no?: double(name='No', example='0.00036084422'),
              threshold?: long(name='Threshold', example='0'),
              unknown?: double(name='Unknown', example='0.0006906331'),
              yes?: double(name='Yes', example='0.9989485'),
            }(name='Probability'),
          }
        ](name='Property'),
        rectangles?: {
          height?: long(name='Height', example='96'),
          left?: long(name='Left', example='1067'),
          top?: long(name='Top', example='426'),
          width?: long(name='Width', example='88'),
        }(name='Rectangles'),
        score?: double(name='Score', example='0.63913465'),
        type?: string(name='Type', example='1'),
      }
    ](name='Elements'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='16CA8094-D7BC-51D4-8D55-6AC59AB20E0B'),
}

model DetectWorkwearResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetectWorkwearResponseBody(name='body'),
}

/**
 * @summary 着装检测
 *
 * @param tmpReq DetectWorkwearRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetectWorkwearResponse
 */
@context("detectWorkwearWithContext")
async function detectWorkwearWithOptions(tmpReq: DetectWorkwearRequest, runtime: $RuntimeOptions): DetectWorkwearResponse {
  tmpReq.validate();
  var request = new DetectWorkwearShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.clothes)) {
    request.clothesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.clothes, 'Clothes', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.clothesShrink)) {
    body['Clothes'] = request.clothesShrink;
  }
  if (!$isNull(request.imageUrl)) {
    body['ImageUrl'] = request.imageUrl;
  }
  if (!$isNull(request.labels)) {
    body['Labels'] = request.labels;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DetectWorkwear',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 着装检测
 *
 * @param request DetectWorkwearRequest
 * @return DetectWorkwearResponse
 */
async function detectWorkwear(request: DetectWorkwearRequest): DetectWorkwearResponse {
  var runtime = new $RuntimeOptions{};
  return detectWorkwearWithOptions(request, runtime);
}

async function detectWorkwearAdvance(request: DetectWorkwearAdvanceRequest, runtime: $RuntimeOptions): DetectWorkwearResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'objectdet',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var detectWorkwearReq = new DetectWorkwearRequest{};
  OpenApiUtil.convert(request, detectWorkwearReq);

  if(!$isNull(request.imageUrlObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageUrlObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    detectWorkwearReq.imageUrl = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var detectWorkwearResp = detectWorkwearWithOptions(detectWorkwearReq, runtime);
  return detectWorkwearResp;
}

model GetAsyncJobResultRequest {
  jobId?: string(name='JobId', description='This parameter is required.', example='35B11E1B-800C-4598-B5AA-577E3BDBD917'),
}

model GetAsyncJobResultResponseBody = {
  data?: {
    errorCode?: string(name='ErrorCode', example='InvalidParameter'),
    errorMessage?: string(name='ErrorMessage', example='paramsIllegal'),
    jobId?: string(name='JobId', example='35B11E1B-800C-4598-B5AA-577E3BDBD917'),
    result?: string(name='Result', example='{\\\\"inputFile\\\\":\\\\"oss://public-vigen-video/guotian.xgt/test_images/test_video\\\\",\\\\"width\\\\":1280,\\\\"height\\\\":720,\\\\"frames\\\\":[{\\\\"time\\\\":6124533574,\\\\"elements\\\\":[{\\\\"type\\\\":\\\\"PERSON\\\\",\\\\"score\\\\":0.7812,\\\\"x\\\\":289,\\\\"y\\\\":271,\\\\"width\\\\":100,\\\\"height\\\\":156},{\\\\"type\\\\":\\\\"PERSON\\\\",\\\\"score\\\\":0.4377,\\\\"x\\\\":917,\\\\"y\\\\":267,\\\\"width\\\\":34,\\\\"height\\\\":51}]}]}]}"}'),
    status?: string(name='Status', example='PROCESS_SUCCESS'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='87FC80D2-2571-4BBD-BD61-AFF7912C556D'),
}

model GetAsyncJobResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAsyncJobResultResponseBody(name='body'),
}

/**
 * @summary 查询异步任务结果
 *
 * @param request GetAsyncJobResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAsyncJobResultResponse
 */
@context("getAsyncJobResultWithContext")
async function getAsyncJobResultWithOptions(request: GetAsyncJobResultRequest, runtime: $RuntimeOptions): GetAsyncJobResultResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetAsyncJobResult',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询异步任务结果
 *
 * @param request GetAsyncJobResultRequest
 * @return GetAsyncJobResultResponse
 */
async function getAsyncJobResult(request: GetAsyncJobResultRequest): GetAsyncJobResultResponse {
  var runtime = new $RuntimeOptions{};
  return getAsyncJobResultWithOptions(request, runtime);
}

api _postOSSObject(bucketName: string, form: object): object {
  var boundary = $Form.getBoundary();
  __request.protocol = 'HTTPS';
  __request.method = 'POST';
  __request.pathname = `/`;
  __request.headers = {
    host = $string(form.host),
    date = OpenApiUtil.getDateUTCString(),
    user-agent = OpenApiUtil.getUserAgent(''),
  };
  __request.headers.content-type = `multipart/form-data; boundary=${boundary}`;
  __request.body = $Form.toFileForm(form, boundary);
} returns {
  var respMap : object = null;
  var bodyStr = $Stream.readAsString(__response.body);
  if ((__response.statusCode >= 400) && (__response.statusCode < 600)) {
    respMap = $XML.parseXml(bodyStr, null);
    var err = $object(respMap.Error);
    throw new OpenApi.Client{
      code = $string(err.Code),
      message = $string(err.Message),
      data = {
        httpCode = __response.statusCode,
        requestId = $string(err.RequestId),
        hostId = $string(err.HostId),
      }
    };
  }
  respMap = $XML.parseXml(bodyStr, null);
  return {
    ...respMap,
  };
}
