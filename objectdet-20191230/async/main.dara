/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'objectdet';
  @version = '2019-12-30';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DetectObjectElement {
  height?: long(name='Height', example='200'),
  score?: float(name='Score', example='0.68225745'),
  type?: string(name='Type', example='VEHICLE'),
  width?: long(name='Width', example='100'),
  x?: long(name='X', example='5'),
  y?: long(name='Y', example='10'),
}

model DetectObjectFrame {
  elements?: [
    DetectObjectElement
  ](name='Elements'),
  time?: long(name='Time'),
}

model GetAsyncJobResultRequest {
  jobId: string(name='JobId', description='This parameter is required.', example='35B11E1B-800C-4598-B5AA-577E3BDBD917', position='Body'),
}

model GetAsyncJobResultResponseBody = {
  data?: {
    errorCode?: string(name='ErrorCode', example='InvalidParameter'),
    errorMessage?: string(name='ErrorMessage', example='paramsIllegal'),
    jobId?: string(name='JobId', example='35B11E1B-800C-4598-B5AA-577E3BDBD917'),
    result?: string(name='Result', example='{\\"inputFile\\":\\"oss://public-vigen-video/guotian.xgt/test_images/test_video\\",\\"width\\":1280,\\"height\\":720,\\"frames\\":[{\\"time\\":6124533574,\\"elements\\":[{\\"type\\":\\"PERSON\\",\\"score\\":0.7812,\\"x\\":289,\\"y\\":271,\\"width\\":100,\\"height\\":156},{\\"type\\":\\"PERSON\\",\\"score\\":0.4377,\\"x\\":917,\\"y\\":267,\\"width\\":34,\\"height\\":51}]}]}]}"}'),
    status?: string(name='Status', example='PROCESS_SUCCESS'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='87FC80D2-2571-4BBD-BD61-AFF7912C556D'),
}

model GetAsyncJobResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAsyncJobResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAsyncJobResult  GetAsyncJobResultRequest
  * @return GetAsyncJobResultResponse
 */
async function getAsyncJobResult(request: GetAsyncJobResultRequest): GetAsyncJobResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAsyncJobResult', 'POST', '/', 'json', true, 'form', request);
}

