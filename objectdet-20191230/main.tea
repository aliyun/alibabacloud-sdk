import OSS;
import OpenPlatform;
import RPCUtil;
import RPC;
import OSSUtil;
import Util;
import FileForm;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint(@productId, @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model DetectTransparentImageRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model DetectTransparentImageResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    elements: [
      {
        transparentImage: integer(name='TransparentImage', description='transparentImage'),
      }
    ](name='Elements', description='elements'),
  }(name='Data', description='data'),
}

async function detectTransparentImage(request: DetectTransparentImageRequest, runtime: Util.RuntimeOptions): DetectTransparentImageResponse {
  Util.validateModel(request);
  return doRequest('DetectTransparentImage', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model DetectTransparentImageAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function detectTransparentImageAdvance(request: DetectTransparentImageAdvanceRequest, runtime: Util.RuntimeOptions): DetectTransparentImageResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'objectdet',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var detectTransparentImagereq = new DetectTransparentImageRequest{};
  RPCUtil.convert(request, detectTransparentImagereq);
  detectTransparentImagereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var detectTransparentImageResp = detectTransparentImage(detectTransparentImagereq, runtime);
  return detectTransparentImageResp;
}

model DetectObjectRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model DetectObjectResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    width: integer(name='Width', description='width'),
    height: integer(name='Height', description='height'),
    elements: [
      {
        score: float(name='Score', description='score'),
        type: string(name='Type', description='type'),
        boxes: [ integer ](name='Boxes', description='boxes'),
      }
    ](name='Elements', description='elements'),
  }(name='Data', description='data'),
}

async function detectObject(request: DetectObjectRequest, runtime: Util.RuntimeOptions): DetectObjectResponse {
  Util.validateModel(request);
  return doRequest('DetectObject', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model DetectObjectAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function detectObjectAdvance(request: DetectObjectAdvanceRequest, runtime: Util.RuntimeOptions): DetectObjectResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'objectdet',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var detectObjectreq = new DetectObjectRequest{};
  RPCUtil.convert(request, detectObjectreq);
  detectObjectreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var detectObjectResp = detectObject(detectObjectreq, runtime);
  return detectObjectResp;
}

model DetectWhiteBaseImageRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model DetectWhiteBaseImageResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    elements: [
      {
        whiteBase: integer(name='WhiteBase', description='whiteBase'),
      }
    ](name='Elements', description='elements'),
  }(name='Data', description='data'),
}

async function detectWhiteBaseImage(request: DetectWhiteBaseImageRequest, runtime: Util.RuntimeOptions): DetectWhiteBaseImageResponse {
  Util.validateModel(request);
  return doRequest('DetectWhiteBaseImage', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model DetectWhiteBaseImageAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function detectWhiteBaseImageAdvance(request: DetectWhiteBaseImageAdvanceRequest, runtime: Util.RuntimeOptions): DetectWhiteBaseImageResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'objectdet',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var detectWhiteBaseImagereq = new DetectWhiteBaseImageRequest{};
  RPCUtil.convert(request, detectWhiteBaseImagereq);
  detectWhiteBaseImagereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var detectWhiteBaseImageResp = detectWhiteBaseImage(detectWhiteBaseImagereq, runtime);
  return detectWhiteBaseImageResp;
}

model ClassifyVehicleInsuranceRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model ClassifyVehicleInsuranceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    threshold: float(name='Threshold', description='threshold'),
    labels: [
      {
        score: float(name='Score', description='score'),
        name: string(name='Name', description='name'),
      }
    ](name='Labels', description='labels'),
  }(name='Data', description='data'),
}

async function classifyVehicleInsurance(request: ClassifyVehicleInsuranceRequest, runtime: Util.RuntimeOptions): ClassifyVehicleInsuranceResponse {
  Util.validateModel(request);
  return doRequest('ClassifyVehicleInsurance', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model ClassifyVehicleInsuranceAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function classifyVehicleInsuranceAdvance(request: ClassifyVehicleInsuranceAdvanceRequest, runtime: Util.RuntimeOptions): ClassifyVehicleInsuranceResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'objectdet',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var classifyVehicleInsurancereq = new ClassifyVehicleInsuranceRequest{};
  RPCUtil.convert(request, classifyVehicleInsurancereq);
  classifyVehicleInsurancereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var classifyVehicleInsuranceResp = classifyVehicleInsurance(classifyVehicleInsurancereq, runtime);
  return classifyVehicleInsuranceResp;
}

model RecognizeVehicleDashboardRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model RecognizeVehicleDashboardResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    elements: [
      {
        score: float(name='Score', description='score'),
        className: string(name='ClassName', description='className'),
        label: string(name='Label', description='label'),
        boxes: [ float ](name='Boxes', description='boxes'),
      }
    ](name='Elements', description='elements'),
  }(name='Data', description='data'),
}

async function recognizeVehicleDashboard(request: RecognizeVehicleDashboardRequest, runtime: Util.RuntimeOptions): RecognizeVehicleDashboardResponse {
  Util.validateModel(request);
  return doRequest('RecognizeVehicleDashboard', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeVehicleDashboardAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function recognizeVehicleDashboardAdvance(request: RecognizeVehicleDashboardAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeVehicleDashboardResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'objectdet',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeVehicleDashboardreq = new RecognizeVehicleDashboardRequest{};
  RPCUtil.convert(request, recognizeVehicleDashboardreq);
  recognizeVehicleDashboardreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeVehicleDashboardResp = recognizeVehicleDashboard(recognizeVehicleDashboardreq, runtime);
  return recognizeVehicleDashboardResp;
}

model RecognizeVehicleDamageRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model RecognizeVehicleDamageResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    elements: [
      {
        score: float(name='Score', description='score'),
        type: string(name='Type', description='type'),
        scores: [ float ](name='Scores', description='scores'),
        boxes: [ integer ](name='Boxes', description='boxes'),
      }
    ](name='Elements', description='elements'),
  }(name='Data', description='data'),
}

async function recognizeVehicleDamage(request: RecognizeVehicleDamageRequest, runtime: Util.RuntimeOptions): RecognizeVehicleDamageResponse {
  Util.validateModel(request);
  return doRequest('RecognizeVehicleDamage', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeVehicleDamageAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function recognizeVehicleDamageAdvance(request: RecognizeVehicleDamageAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeVehicleDamageResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'objectdet',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeVehicleDamagereq = new RecognizeVehicleDamageRequest{};
  RPCUtil.convert(request, recognizeVehicleDamagereq);
  recognizeVehicleDamagereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeVehicleDamageResp = recognizeVehicleDamage(recognizeVehicleDamagereq, runtime);
  return recognizeVehicleDamageResp;
}

model RecognizeVehiclePartsRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model RecognizeVehiclePartsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    elements: [
      {
        score: float(name='Score', description='score'),
        type: string(name='Type', description='type'),
        boxes: [ integer ](name='Boxes', description='boxes'),
      }
    ](name='Elements', description='elements'),
    originShapes: [ integer ](name='OriginShapes', description='originShapes'),
  }(name='Data', description='data'),
}

async function recognizeVehicleParts(request: RecognizeVehiclePartsRequest, runtime: Util.RuntimeOptions): RecognizeVehiclePartsResponse {
  Util.validateModel(request);
  return doRequest('RecognizeVehicleParts', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeVehiclePartsAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function recognizeVehiclePartsAdvance(request: RecognizeVehiclePartsAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeVehiclePartsResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'objectdet',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeVehiclePartsreq = new RecognizeVehiclePartsRequest{};
  RPCUtil.convert(request, recognizeVehiclePartsreq);
  recognizeVehiclePartsreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeVehiclePartsResp = recognizeVehicleParts(recognizeVehiclePartsreq, runtime);
  return recognizeVehiclePartsResp;
}

model DetectVehicleRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model DetectVehicleResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    width: integer(name='Width', description='width'),
    height: integer(name='Height', description='height'),
    detectObjectInfoList: [
      {
        score: float(name='Score', description='score'),
        type: string(name='Type', description='type'),
        id: integer(name='Id', description='id'),
        boxes: [ integer ](name='Boxes', description='boxes'),
      }
    ](name='DetectObjectInfoList', description='detectObjectInfoList'),
  }(name='Data', description='data'),
}

async function detectVehicle(request: DetectVehicleRequest, runtime: Util.RuntimeOptions): DetectVehicleResponse {
  Util.validateModel(request);
  return doRequest('DetectVehicle', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model DetectVehicleAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function detectVehicleAdvance(request: DetectVehicleAdvanceRequest, runtime: Util.RuntimeOptions): DetectVehicleResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'objectdet',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var detectVehiclereq = new DetectVehicleRequest{};
  RPCUtil.convert(request, detectVehiclereq);
  detectVehiclereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var detectVehicleResp = detectVehicle(detectVehiclereq, runtime);
  return detectVehicleResp;
}

model DetectMainBodyRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model DetectMainBodyResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    location: {
      x: integer(name='X', description='x'),
      y: integer(name='Y', description='y'),
      width: integer(name='Width', description='width'),
      height: integer(name='Height', description='height'),
    }(name='Location', description='location'),
  }(name='Data', description='data'),
}

async function detectMainBody(request: DetectMainBodyRequest, runtime: Util.RuntimeOptions): DetectMainBodyResponse {
  Util.validateModel(request);
  return doRequest('DetectMainBody', 'HTTPS', 'GET' , '2019-12-30', 'AK', request, null, runtime);
}

model DetectMainBodyAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function detectMainBodyAdvance(request: DetectMainBodyAdvanceRequest, runtime: Util.RuntimeOptions): DetectMainBodyResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'objectdet',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var detectMainBodyreq = new DetectMainBodyRequest{};
  RPCUtil.convert(request, detectMainBodyreq);
  detectMainBodyreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var detectMainBodyResp = detectMainBody(detectMainBodyreq, runtime);
  return detectMainBodyResp;
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
