/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @signatureAlgorithm = 'v2';
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('appstream-center', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model GetConnectionTicketRequest {
  appId?: string(name='AppId'),
  appInstanceGroupId?: string(name='AppInstanceGroupId'),
  appVersion?: string(name='AppVersion'),
  bizRegionId?: string(name='BizRegionId'),
  clientId?: string(name='ClientId'),
  clientIp?: string(name='ClientIp'),
  clientOS?: string(name='ClientOS'),
  clientVersion?: string(name='ClientVersion'),
  endUserId?: string(name='EndUserId'),
  loginRegionId?: string(name='LoginRegionId'),
  loginToken?: string(name='LoginToken'),
  param?: string(name='Param'),
  productType?: string(name='ProductType'),
  sessionId?: string(name='SessionId'),
  taskId?: string(name='TaskId'),
  tenantId?: string(name='TenantId'),
  uuid?: string(name='Uuid'),
}

model GetConnectionTicketResponseBody = {
  appInstanceGroupId?: string(name='AppInstanceGroupId'),
  appInstanceId?: string(name='AppInstanceId'),
  code?: string(name='Code'),
  loginToken?: string(name='LoginToken'),
  message?: string(name='Message'),
  osType?: string(name='OsType'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  retryTimes?: int32(name='RetryTimes'),
  taskId?: string(name='TaskId'),
  taskStatus?: string(name='TaskStatus'),
  ticket?: string(name='Ticket'),
}

model GetConnectionTicketResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetConnectionTicketResponseBody(name='body'),
}

async function getConnectionTicketWithOptions(request: GetConnectionTicketRequest, runtime: Util.RuntimeOptions): GetConnectionTicketResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.appVersion)) {
    body['AppVersion'] = request.appVersion;
  }
  if (!Util.isUnset(request.bizRegionId)) {
    body['BizRegionId'] = request.bizRegionId;
  }
  if (!Util.isUnset(request.clientId)) {
    body['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.clientIp)) {
    body['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.clientOS)) {
    body['ClientOS'] = request.clientOS;
  }
  if (!Util.isUnset(request.clientVersion)) {
    body['ClientVersion'] = request.clientVersion;
  }
  if (!Util.isUnset(request.endUserId)) {
    body['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.loginRegionId)) {
    body['LoginRegionId'] = request.loginRegionId;
  }
  if (!Util.isUnset(request.loginToken)) {
    body['LoginToken'] = request.loginToken;
  }
  if (!Util.isUnset(request.param)) {
    body['Param'] = request.param;
  }
  if (!Util.isUnset(request.productType)) {
    body['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.sessionId)) {
    body['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.uuid)) {
    body['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetConnectionTicket',
    version = '2021-09-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getConnectionTicket(request: GetConnectionTicketRequest): GetConnectionTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConnectionTicketWithOptions(request, runtime);
}

model ListPublishedAppInfoRequest {
  appName?: string(name='AppName'),
  bizRegionId?: string(name='BizRegionId'),
  categoryId?: long(name='CategoryId'),
  categoryType?: long(name='CategoryType'),
  clientId?: string(name='ClientId'),
  clientIp?: string(name='ClientIp'),
  clientOS?: string(name='ClientOS'),
  clientVersion?: string(name='ClientVersion'),
  endUserId?: string(name='EndUserId'),
  loginRegionId?: string(name='LoginRegionId'),
  loginToken?: string(name='LoginToken'),
  productType?: string(name='ProductType'),
  sessionId?: string(name='SessionId'),
  tenantId?: string(name='TenantId'),
}

model ListPublishedAppInfoResponseBody = {
  appModels?: [ 
    {
      appCenterImageId?: string(name='AppCenterImageId'),
      appId?: string(name='AppId'),
      appName?: string(name='AppName'),
      appVersion?: string(name='AppVersion'),
      appVersionName?: string(name='AppVersionName'),
      categoryId?: long(name='CategoryId'),
      categoryType?: long(name='CategoryType'),
      iconUrl?: string(name='IconUrl'),
      isAuth?: boolean(name='IsAuth'),
      usedInSession?: boolean(name='UsedInSession'),
    }
  ](name='AppModels'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model ListPublishedAppInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPublishedAppInfoResponseBody(name='body'),
}

async function listPublishedAppInfoWithOptions(request: ListPublishedAppInfoRequest, runtime: Util.RuntimeOptions): ListPublishedAppInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.bizRegionId)) {
    query['BizRegionId'] = request.bizRegionId;
  }
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.categoryType)) {
    query['CategoryType'] = request.categoryType;
  }
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.clientIp)) {
    query['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.clientOS)) {
    query['ClientOS'] = request.clientOS;
  }
  if (!Util.isUnset(request.clientVersion)) {
    query['ClientVersion'] = request.clientVersion;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.loginRegionId)) {
    query['LoginRegionId'] = request.loginRegionId;
  }
  if (!Util.isUnset(request.loginToken)) {
    query['LoginToken'] = request.loginToken;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPublishedAppInfo',
    version = '2021-09-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPublishedAppInfo(request: ListPublishedAppInfoRequest): ListPublishedAppInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPublishedAppInfoWithOptions(request, runtime);
}

model ListRunningAppsRequest {
  bizRegionId?: string(name='BizRegionId'),
  clientId?: string(name='ClientId'),
  clientIp?: string(name='ClientIp'),
  clientOS?: string(name='ClientOS'),
  clientVersion?: string(name='ClientVersion'),
  endUserId?: string(name='EndUserId'),
  loginRegionId?: string(name='LoginRegionId'),
  loginToken?: string(name='LoginToken'),
  productType?: string(name='ProductType'),
  sessionId?: string(name='SessionId'),
  tenantId?: string(name='TenantId'),
  uuid?: string(name='Uuid'),
}

model ListRunningAppsResponseBody = {
  requestId?: string(name='RequestId'),
  runningCloudApps?: [ 
    {
      appId?: string(name='AppId'),
      appInstanceGroupId?: string(name='AppInstanceGroupId'),
      appInstanceId?: string(name='AppInstanceId'),
      appName?: string(name='AppName'),
      appVersion?: string(name='AppVersion'),
      appVersionName?: string(name='AppVersionName'),
      duration?: long(name='Duration'),
      iconUrl?: string(name='IconUrl'),
      osType?: string(name='OsType'),
      regionId?: string(name='RegionId'),
      startTime?: string(name='StartTime'),
    }
  ](name='RunningCloudApps'),
}

model ListRunningAppsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRunningAppsResponseBody(name='body'),
}

async function listRunningAppsWithOptions(request: ListRunningAppsRequest, runtime: Util.RuntimeOptions): ListRunningAppsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizRegionId)) {
    query['BizRegionId'] = request.bizRegionId;
  }
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.clientIp)) {
    query['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.clientOS)) {
    query['ClientOS'] = request.clientOS;
  }
  if (!Util.isUnset(request.clientVersion)) {
    query['ClientVersion'] = request.clientVersion;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.loginRegionId)) {
    query['LoginRegionId'] = request.loginRegionId;
  }
  if (!Util.isUnset(request.loginToken)) {
    query['LoginToken'] = request.loginToken;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRunningApps',
    version = '2021-09-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRunningApps(request: ListRunningAppsRequest): ListRunningAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRunningAppsWithOptions(request, runtime);
}

model StopAppRequest {
  aliUid?: long(name='AliUid'),
  apiType?: string(name='ApiType'),
  appId?: string(name='AppId'),
  appInstanceGroupId?: string(name='AppInstanceGroupId'),
  appInstanceId?: string(name='AppInstanceId'),
  bizRegionId?: string(name='BizRegionId'),
  clientChannel?: string(name='ClientChannel'),
  clientId?: string(name='ClientId'),
  clientIp?: string(name='ClientIp'),
  clientOS?: string(name='ClientOS'),
  clientVersion?: string(name='ClientVersion'),
  endUserId?: string(name='EndUserId'),
  forceStop?: boolean(name='ForceStop'),
  idpId?: string(name='IdpId'),
  loginRegionId?: string(name='LoginRegionId'),
  loginToken?: string(name='LoginToken'),
  productType?: string(name='ProductType'),
  regionId?: string(name='RegionId'),
  sessionId?: string(name='SessionId'),
  uuid?: string(name='Uuid'),
  wyId?: string(name='WyId'),
}

model StopAppResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopAppResponseBody(name='body'),
}

async function stopAppWithOptions(request: StopAppRequest, runtime: Util.RuntimeOptions): StopAppResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.aliUid)) {
    body['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.apiType)) {
    body['ApiType'] = request.apiType;
  }
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.appInstanceId)) {
    body['AppInstanceId'] = request.appInstanceId;
  }
  if (!Util.isUnset(request.bizRegionId)) {
    body['BizRegionId'] = request.bizRegionId;
  }
  if (!Util.isUnset(request.clientChannel)) {
    body['ClientChannel'] = request.clientChannel;
  }
  if (!Util.isUnset(request.clientId)) {
    body['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.clientIp)) {
    body['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.clientOS)) {
    body['ClientOS'] = request.clientOS;
  }
  if (!Util.isUnset(request.clientVersion)) {
    body['ClientVersion'] = request.clientVersion;
  }
  if (!Util.isUnset(request.endUserId)) {
    body['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.forceStop)) {
    body['ForceStop'] = request.forceStop;
  }
  if (!Util.isUnset(request.idpId)) {
    body['IdpId'] = request.idpId;
  }
  if (!Util.isUnset(request.loginRegionId)) {
    body['LoginRegionId'] = request.loginRegionId;
  }
  if (!Util.isUnset(request.loginToken)) {
    body['LoginToken'] = request.loginToken;
  }
  if (!Util.isUnset(request.productType)) {
    body['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sessionId)) {
    body['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.uuid)) {
    body['Uuid'] = request.uuid;
  }
  if (!Util.isUnset(request.wyId)) {
    body['WyId'] = request.wyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StopApp',
    version = '2021-09-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopApp(request: StopAppRequest): StopAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopAppWithOptions(request, runtime);
}

model UnbindRequest {
  appId?: string(name='AppId'),
  appInstanceGroupId?: string(name='AppInstanceGroupId'),
  clientId?: string(name='ClientId'),
  clientIp?: string(name='ClientIp'),
  clientOS?: string(name='ClientOS'),
  clientVersion?: string(name='ClientVersion'),
  endUserId?: string(name='EndUserId'),
  loginRegionId?: string(name='LoginRegionId'),
  loginToken?: string(name='LoginToken'),
  productType?: string(name='ProductType'),
  sessionId?: string(name='SessionId'),
  tenantId?: long(name='TenantId'),
}

model UnbindResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindResponseBody(name='body'),
}

async function unbindWithOptions(request: UnbindRequest, runtime: Util.RuntimeOptions): UnbindResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.clientId)) {
    body['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.clientIp)) {
    body['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.clientOS)) {
    body['ClientOS'] = request.clientOS;
  }
  if (!Util.isUnset(request.clientVersion)) {
    body['ClientVersion'] = request.clientVersion;
  }
  if (!Util.isUnset(request.endUserId)) {
    body['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.loginRegionId)) {
    body['LoginRegionId'] = request.loginRegionId;
  }
  if (!Util.isUnset(request.loginToken)) {
    body['LoginToken'] = request.loginToken;
  }
  if (!Util.isUnset(request.productType)) {
    body['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.sessionId)) {
    body['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'Unbind',
    version = '2021-09-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbind(request: UnbindRequest): UnbindResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindWithOptions(request, runtime);
}

