/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'scdn';
  @version = '2017-11-15';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'scdn.aliyuncs.com',
    ap-northeast-2-pop = 'scdn.aliyuncs.com',
    ap-south-1 = 'scdn.aliyuncs.com',
    ap-southeast-1 = 'scdn.aliyuncs.com',
    ap-southeast-2 = 'scdn.aliyuncs.com',
    ap-southeast-3 = 'scdn.aliyuncs.com',
    ap-southeast-5 = 'scdn.aliyuncs.com',
    cn-beijing = 'scdn.aliyuncs.com',
    cn-beijing-finance-1 = 'scdn.aliyuncs.com',
    cn-beijing-finance-pop = 'scdn.aliyuncs.com',
    cn-beijing-gov-1 = 'scdn.aliyuncs.com',
    cn-beijing-nu16-b01 = 'scdn.aliyuncs.com',
    cn-chengdu = 'scdn.aliyuncs.com',
    cn-edge-1 = 'scdn.aliyuncs.com',
    cn-fujian = 'scdn.aliyuncs.com',
    cn-haidian-cm12-c01 = 'scdn.aliyuncs.com',
    cn-hangzhou = 'scdn.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'scdn.aliyuncs.com',
    cn-hangzhou-finance = 'scdn.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'scdn.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'scdn.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'scdn.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'scdn.aliyuncs.com',
    cn-hangzhou-test-306 = 'scdn.aliyuncs.com',
    cn-hongkong = 'scdn.aliyuncs.com',
    cn-hongkong-finance-pop = 'scdn.aliyuncs.com',
    cn-huhehaote = 'scdn.aliyuncs.com',
    cn-north-2-gov-1 = 'scdn.aliyuncs.com',
    cn-qingdao = 'scdn.aliyuncs.com',
    cn-qingdao-nebula = 'scdn.aliyuncs.com',
    cn-shanghai = 'scdn.aliyuncs.com',
    cn-shanghai-et15-b01 = 'scdn.aliyuncs.com',
    cn-shanghai-et2-b01 = 'scdn.aliyuncs.com',
    cn-shanghai-finance-1 = 'scdn.aliyuncs.com',
    cn-shanghai-inner = 'scdn.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'scdn.aliyuncs.com',
    cn-shenzhen = 'scdn.aliyuncs.com',
    cn-shenzhen-finance-1 = 'scdn.aliyuncs.com',
    cn-shenzhen-inner = 'scdn.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'scdn.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'scdn.aliyuncs.com',
    cn-wuhan = 'scdn.aliyuncs.com',
    cn-yushanfang = 'scdn.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'scdn.aliyuncs.com',
    cn-zhangjiakou = 'scdn.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'scdn.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'scdn.aliyuncs.com',
    eu-central-1 = 'scdn.aliyuncs.com',
    eu-west-1 = 'scdn.aliyuncs.com',
    eu-west-1-oxs = 'scdn.aliyuncs.com',
    me-east-1 = 'scdn.aliyuncs.com',
    rus-west-1-pop = 'scdn.aliyuncs.com',
    us-east-1 = 'scdn.aliyuncs.com',
    us-west-1 = 'scdn.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddScdnDomainRequest {
  checkUrl?: string(name='CheckUrl', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  scope?: string(name='Scope', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sources: string(name='Sources', position='Query'),
}

model AddScdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddScdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: AddScdnDomainResponseBody(name='body'),
}

async function addScdnDomain(request: AddScdnDomainRequest): AddScdnDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddScdnDomain', 'POST', '/', 'json', false, 'json', request);
}

model BatchDeleteScdnDomainConfigsRequest {
  domainNames: string(name='DomainNames', position='Query'),
  functionNames: string(name='FunctionNames', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model BatchDeleteScdnDomainConfigsResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchDeleteScdnDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteScdnDomainConfigsResponseBody(name='body'),
}

async function batchDeleteScdnDomainConfigs(request: BatchDeleteScdnDomainConfigsRequest): BatchDeleteScdnDomainConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchDeleteScdnDomainConfigs', 'POST', '/', 'json', false, 'json', request);
}

model BatchSetScdnDomainConfigsRequest {
  domainNames: string(name='DomainNames', position='Query'),
  functions: string(name='Functions', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model BatchSetScdnDomainConfigsResponseBody = {
  domainConfigList?: {
    domainConfigModel?: [ 
    {
      configId?: long(name='ConfigId'),
      domainName?: string(name='DomainName'),
      functionName?: string(name='FunctionName'),
    }
  ](name='DomainConfigModel')
  }(name='DomainConfigList'),
  requestId?: string(name='RequestId'),
}

model BatchSetScdnDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetScdnDomainConfigsResponseBody(name='body'),
}

async function batchSetScdnDomainConfigs(request: BatchSetScdnDomainConfigsRequest): BatchSetScdnDomainConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchSetScdnDomainConfigs', 'POST', '/', 'json', false, 'json', request);
}

model BatchStartScdnDomainRequest {
  domainNames: string(name='DomainNames', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model BatchStartScdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchStartScdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BatchStartScdnDomainResponseBody(name='body'),
}

async function batchStartScdnDomain(request: BatchStartScdnDomainRequest): BatchStartScdnDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchStartScdnDomain', 'POST', '/', 'json', false, 'json', request);
}

model BatchStopScdnDomainRequest {
  domainNames: string(name='DomainNames', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model BatchStopScdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchStopScdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BatchStopScdnDomainResponseBody(name='body'),
}

async function batchStopScdnDomain(request: BatchStopScdnDomainRequest): BatchStopScdnDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchStopScdnDomain', 'POST', '/', 'json', false, 'json', request);
}

model BatchUpdateScdnDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sources?: string(name='Sources', position='Query'),
  topLevelDomain?: string(name='TopLevelDomain', position='Query'),
}

model BatchUpdateScdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchUpdateScdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUpdateScdnDomainResponseBody(name='body'),
}

async function batchUpdateScdnDomain(request: BatchUpdateScdnDomainRequest): BatchUpdateScdnDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUpdateScdnDomain', 'POST', '/', 'json', false, 'json', request);
}

model CheckScdnServiceRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CheckScdnServiceResponseBody = {
  enabled?: boolean(name='Enabled'),
  inDebt?: boolean(name='InDebt'),
  inDebtOverdue?: boolean(name='InDebtOverdue'),
  onService?: boolean(name='OnService'),
  requestId?: string(name='RequestId'),
}

model CheckScdnServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CheckScdnServiceResponseBody(name='body'),
}

async function checkScdnService(request: CheckScdnServiceRequest): CheckScdnServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckScdnService', 'POST', '/', 'json', false, 'json', request);
}

model DeleteScdnDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteScdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteScdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteScdnDomainResponseBody(name='body'),
}

async function deleteScdnDomain(request: DeleteScdnDomainRequest): DeleteScdnDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteScdnDomain', 'POST', '/', 'json', false, 'json', request);
}

model DeleteScdnSpecificConfigRequest {
  configId: string(name='ConfigId', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteScdnSpecificConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteScdnSpecificConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteScdnSpecificConfigResponseBody(name='body'),
}

async function deleteScdnSpecificConfig(request: DeleteScdnSpecificConfigRequest): DeleteScdnSpecificConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteScdnSpecificConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnCcInfoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeScdnCcInfoResponseBody = {
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeScdnCcInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnCcInfoResponseBody(name='body'),
}

async function describeScdnCcInfo(request: DescribeScdnCcInfoRequest): DescribeScdnCcInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnCcInfo', 'GET', '/', 'json', false, 'json', request);
}

model DescribeScdnCcQpsInfoRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeScdnCcQpsInfoResponseBody = {
  attacks?: {
    attack?: [ string ](name='Attack')
  }(name='Attacks'),
  requestId?: string(name='RequestId'),
  timeScopes?: {
    timeScope?: [ 
    {
      interval?: string(name='Interval'),
      start?: string(name='Start'),
    }
  ](name='TimeScope')
  }(name='TimeScopes'),
  totals?: {
    total?: [ string ](name='Total')
  }(name='Totals'),
}

model DescribeScdnCcQpsInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnCcQpsInfoResponseBody(name='body'),
}

async function describeScdnCcQpsInfo(request: DescribeScdnCcQpsInfoRequest): DescribeScdnCcQpsInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnCcQpsInfo', 'GET', '/', 'json', false, 'json', request);
}

model DescribeScdnCcTopIpRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: string(name='PageNumber', position='Query'),
  pageSize?: string(name='PageSize', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeScdnCcTopIpResponseBody = {
  attackIpDataList?: {
    attackIpDatas?: [ 
    {
      attackCount?: string(name='AttackCount'),
      ip?: string(name='Ip'),
    }
  ](name='AttackIpDatas')
  }(name='AttackIpDataList'),
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
  total?: string(name='Total'),
}

model DescribeScdnCcTopIpResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnCcTopIpResponseBody(name='body'),
}

async function describeScdnCcTopIp(request: DescribeScdnCcTopIpRequest): DescribeScdnCcTopIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnCcTopIp', 'GET', '/', 'json', false, 'json', request);
}

model DescribeScdnCcTopUrlRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: string(name='PageNumber', position='Query'),
  pageSize?: string(name='PageSize', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeScdnCcTopUrlResponseBody = {
  attackUrlDataList?: {
    attackUrlDatas?: [ 
    {
      attackCount?: string(name='AttackCount'),
      url?: string(name='Url'),
    }
  ](name='AttackUrlDatas')
  }(name='AttackUrlDataList'),
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
  total?: string(name='Total'),
}

model DescribeScdnCcTopUrlResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnCcTopUrlResponseBody(name='body'),
}

async function describeScdnCcTopUrl(request: DescribeScdnCcTopUrlRequest): DescribeScdnCcTopUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnCcTopUrl', 'GET', '/', 'json', false, 'json', request);
}

model DescribeScdnCertificateDetailRequest {
  certName: string(name='CertName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeScdnCertificateDetailResponseBody = {
  cert?: string(name='Cert'),
  certId?: long(name='CertId'),
  certName?: string(name='CertName'),
  key?: string(name='Key'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnCertificateDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnCertificateDetailResponseBody(name='body'),
}

async function describeScdnCertificateDetail(request: DescribeScdnCertificateDetailRequest): DescribeScdnCertificateDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnCertificateDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnCertificateListRequest {
  domainName?: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeScdnCertificateListResponseBody = {
  certificateListModel?: {
    certList?: {
      cert?: [ 
      {
        certId?: long(name='CertId'),
        certName?: string(name='CertName'),
        common?: string(name='Common'),
        fingerprint?: string(name='Fingerprint'),
        issuer?: string(name='Issuer'),
        lastTime?: long(name='LastTime'),
      }
    ](name='Cert')
    }(name='CertList'),
    count?: int32(name='Count'),
  }(name='CertificateListModel'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnCertificateListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnCertificateListResponseBody(name='body'),
}

async function describeScdnCertificateList(request: DescribeScdnCertificateListRequest): DescribeScdnCertificateListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnCertificateList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnDDoSInfoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeScdnDDoSInfoResponseBody = {
  elasticBandwidth?: int32(name='ElasticBandwidth'),
  requestId?: string(name='RequestId'),
  secBandwidth?: int32(name='SecBandwidth'),
}

model DescribeScdnDDoSInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDDoSInfoResponseBody(name='body'),
}

async function describeScdnDDoSInfo(request: DescribeScdnDDoSInfoRequest): DescribeScdnDDoSInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDDoSInfo', 'GET', '/', 'json', false, 'json', request);
}

model DescribeScdnDDoSTrafficInfoRequest {
  endTime: string(name='EndTime', position='Query'),
  line: string(name='Line', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeScdnDDoSTrafficInfoResponseBody = {
  bpsDrops?: {
    bpsDrop?: [ string ](name='BpsDrop')
  }(name='BpsDrops'),
  bpsTotals?: {
    bpsTotal?: [ string ](name='BpsTotal')
  }(name='BpsTotals'),
  ppsDrops?: {
    ppsDrop?: [ string ](name='PpsDrop')
  }(name='PpsDrops'),
  ppsTotals?: {
    ppsTotal?: [ string ](name='PpsTotal')
  }(name='PpsTotals'),
  requestId?: string(name='RequestId'),
  timeScopes?: {
    timeScope?: [ 
    {
      interval?: string(name='Interval'),
      start?: string(name='Start'),
    }
  ](name='TimeScope')
  }(name='TimeScopes'),
}

model DescribeScdnDDoSTrafficInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDDoSTrafficInfoResponseBody(name='body'),
}

async function describeScdnDDoSTrafficInfo(request: DescribeScdnDDoSTrafficInfoRequest): DescribeScdnDDoSTrafficInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDDoSTrafficInfo', 'GET', '/', 'json', false, 'json', request);
}

model DescribeScdnDomainBpsDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeScdnDomainBpsDataResponseBody = {
  bpsDataPerInterval?: {
    dataModule?: [ 
    {
      bpsValue?: string(name='BpsValue'),
      httpBpsValue?: string(name='HttpBpsValue'),
      httpsBpsValue?: string(name='HttpsBpsValue'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='BpsDataPerInterval'),
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainBpsDataResponseBody(name='body'),
}

async function describeScdnDomainBpsData(request: DescribeScdnDomainBpsDataRequest): DescribeScdnDomainBpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDomainBpsData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnDomainCertificateInfoRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeScdnDomainCertificateInfoResponseBody = {
  certInfos?: {
    certInfo?: [ 
    {
      certDomainName?: string(name='CertDomainName'),
      certExpireTime?: string(name='CertExpireTime'),
      certLife?: string(name='CertLife'),
      certName?: string(name='CertName'),
      certOrg?: string(name='CertOrg'),
      certType?: string(name='CertType'),
      domainName?: string(name='DomainName'),
      SSLProtocol?: string(name='SSLProtocol'),
      SSLPub?: string(name='SSLPub'),
      status?: string(name='Status'),
    }
  ](name='CertInfo')
  }(name='CertInfos'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnDomainCertificateInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainCertificateInfoResponseBody(name='body'),
}

async function describeScdnDomainCertificateInfo(request: DescribeScdnDomainCertificateInfoRequest): DescribeScdnDomainCertificateInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDomainCertificateInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnDomainCnameRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeScdnDomainCnameResponseBody = {
  cnameDatas?: {
    data?: [ 
    {
      cname?: string(name='Cname'),
      domain?: string(name='Domain'),
      status?: int32(name='Status'),
    }
  ](name='Data')
  }(name='CnameDatas'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnDomainCnameResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainCnameResponseBody(name='body'),
}

async function describeScdnDomainCname(request: DescribeScdnDomainCnameRequest): DescribeScdnDomainCnameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDomainCname', 'GET', '/', 'json', false, 'json', request);
}

model DescribeScdnDomainConfigsRequest {
  configId?: string(name='ConfigId', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  functionNames: string(name='FunctionNames', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeScdnDomainConfigsResponseBody = {
  domainConfigs?: {
    domainConfig?: [ 
    {
      configId?: string(name='ConfigId'),
      functionArgs?: {
        functionArg?: [ 
        {
          argName?: string(name='ArgName'),
          argValue?: string(name='ArgValue'),
        }
      ](name='FunctionArg')
      }(name='FunctionArgs'),
      functionName?: string(name='FunctionName'),
      status?: string(name='Status'),
    }
  ](name='DomainConfig')
  }(name='DomainConfigs'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainConfigsResponseBody(name='body'),
}

async function describeScdnDomainConfigs(request: DescribeScdnDomainConfigsRequest): DescribeScdnDomainConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDomainConfigs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnDomainDetailRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeScdnDomainDetailResponseBody = {
  domainDetail?: {
    certName?: string(name='CertName'),
    cname?: string(name='Cname'),
    description?: string(name='Description'),
    domainName?: string(name='DomainName'),
    domainStatus?: string(name='DomainStatus'),
    gmtCreated?: string(name='GmtCreated'),
    gmtModified?: string(name='GmtModified'),
    resourceGroupId?: string(name='ResourceGroupId'),
    SSLProtocol?: string(name='SSLProtocol'),
    SSLPub?: string(name='SSLPub'),
    scope?: string(name='Scope'),
    sources?: {
      source?: [ 
      {
        content?: string(name='Content'),
        enabled?: string(name='Enabled'),
        port?: int32(name='Port'),
        priority?: string(name='Priority'),
        type?: string(name='Type'),
      }
    ](name='Source')
    }(name='Sources'),
  }(name='DomainDetail'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainDetailResponseBody(name='body'),
}

async function describeScdnDomainDetail(request: DescribeScdnDomainDetailRequest): DescribeScdnDomainDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDomainDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnDomainHitRateDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeScdnDomainHitRateDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  hitRatePerInterval?: {
    dataModule?: [ 
    {
      byteHitRate?: string(name='ByteHitRate'),
      reqHitRate?: string(name='ReqHitRate'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='HitRatePerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainHitRateDataResponseBody(name='body'),
}

async function describeScdnDomainHitRateData(request: DescribeScdnDomainHitRateDataRequest): DescribeScdnDomainHitRateDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDomainHitRateData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnDomainHttpCodeDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeScdnDomainHttpCodeDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  dataPerInterval?: {
    dataModule?: [ 
    {
      httpCodeDataPerInterval?: {
        httpCodeDataModule?: [ 
        {
          code?: string(name='Code'),
          count?: string(name='Count'),
          proportion?: string(name='Proportion'),
        }
      ](name='HttpCodeDataModule')
      }(name='HttpCodeDataPerInterval'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='DataPerInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainHttpCodeDataResponseBody(name='body'),
}

async function describeScdnDomainHttpCodeData(request: DescribeScdnDomainHttpCodeDataRequest): DescribeScdnDomainHttpCodeDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDomainHttpCodeData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnDomainIspDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeScdnDomainIspDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  value?: {
    ISPProportionData?: [ 
    {
      avgObjectSize?: string(name='AvgObjectSize'),
      avgResponseRate?: string(name='AvgResponseRate'),
      avgResponseTime?: string(name='AvgResponseTime'),
      bps?: string(name='Bps'),
      bytesProportion?: string(name='BytesProportion'),
      ISP?: string(name='ISP'),
      ispEname?: string(name='IspEname'),
      proportion?: string(name='Proportion'),
      qps?: string(name='Qps'),
      reqErrRate?: string(name='ReqErrRate'),
      totalBytes?: string(name='TotalBytes'),
      totalQuery?: string(name='TotalQuery'),
    }
  ](name='ISPProportionData')
  }(name='Value'),
}

model DescribeScdnDomainIspDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainIspDataResponseBody(name='body'),
}

async function describeScdnDomainIspData(request: DescribeScdnDomainIspDataRequest): DescribeScdnDomainIspDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDomainIspData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnDomainLogRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: long(name='PageNumber', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeScdnDomainLogResponseBody = {
  domainLogDetails?: {
    domainLogDetail?: [ 
    {
      logCount?: long(name='LogCount'),
      logInfos?: {
        logInfoDetail?: [ 
        {
          endTime?: string(name='EndTime'),
          logName?: string(name='LogName'),
          logPath?: string(name='LogPath'),
          logSize?: long(name='LogSize'),
          startTime?: string(name='StartTime'),
        }
      ](name='LogInfoDetail')
      }(name='LogInfos'),
      pageInfos?: {
        pageNumber?: long(name='PageNumber'),
        pageSize?: long(name='PageSize'),
        total?: long(name='Total'),
      }(name='PageInfos'),
    }
  ](name='DomainLogDetail')
  }(name='DomainLogDetails'),
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnDomainLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainLogResponseBody(name='body'),
}

async function describeScdnDomainLog(request: DescribeScdnDomainLogRequest): DescribeScdnDomainLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDomainLog', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnDomainOriginBpsDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeScdnDomainOriginBpsDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  originBpsDataPerInterval?: {
    dataModule?: [ 
    {
      httpOriginBpsValue?: string(name='HttpOriginBpsValue'),
      httpsOriginBpsValue?: string(name='HttpsOriginBpsValue'),
      originBpsValue?: string(name='OriginBpsValue'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='OriginBpsDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainOriginBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainOriginBpsDataResponseBody(name='body'),
}

async function describeScdnDomainOriginBpsData(request: DescribeScdnDomainOriginBpsDataRequest): DescribeScdnDomainOriginBpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDomainOriginBpsData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnDomainOriginTrafficDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeScdnDomainOriginTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  originTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      httpTrafficValue?: string(name='HttpTrafficValue'),
      httpsTrafficValue?: string(name='HttpsTrafficValue'),
      timeStamp?: string(name='TimeStamp'),
      trafficValue?: string(name='TrafficValue'),
    }
  ](name='DataModule')
  }(name='OriginTrafficDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainOriginTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainOriginTrafficDataResponseBody(name='body'),
}

async function describeScdnDomainOriginTrafficData(request: DescribeScdnDomainOriginTrafficDataRequest): DescribeScdnDomainOriginTrafficDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDomainOriginTrafficData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnDomainPvDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeScdnDomainPvDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  pvDataInterval?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='UsageData')
  }(name='PvDataInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainPvDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainPvDataResponseBody(name='body'),
}

async function describeScdnDomainPvData(request: DescribeScdnDomainPvDataRequest): DescribeScdnDomainPvDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDomainPvData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnDomainQpsDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeScdnDomainQpsDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  qpsDataPerInterval?: {
    dataModule?: [ 
    {
      accValue?: string(name='AccValue'),
      httpAccValue?: string(name='HttpAccValue'),
      httpQpsValue?: string(name='HttpQpsValue'),
      httpsAccValue?: string(name='HttpsAccValue'),
      httpsQpsValue?: string(name='HttpsQpsValue'),
      qpsValue?: string(name='QpsValue'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='QpsDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainQpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainQpsDataResponseBody(name='body'),
}

async function describeScdnDomainQpsData(request: DescribeScdnDomainQpsDataRequest): DescribeScdnDomainQpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDomainQpsData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnDomainRealTimeBpsDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeScdnDomainRealTimeBpsDataResponseBody = {
  data?: {
    bpsModel?: [ 
    {
      bps?: float(name='Bps'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='BpsModel')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnDomainRealTimeBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainRealTimeBpsDataResponseBody(name='body'),
}

async function describeScdnDomainRealTimeBpsData(request: DescribeScdnDomainRealTimeBpsDataRequest): DescribeScdnDomainRealTimeBpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDomainRealTimeBpsData', 'GET', '/', 'json', false, 'json', request);
}

model DescribeScdnDomainRealTimeByteHitRateDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeScdnDomainRealTimeByteHitRateDataResponseBody = {
  data?: {
    byteHitRateDataModel?: [ 
    {
      byteHitRate?: float(name='ByteHitRate'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='ByteHitRateDataModel')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnDomainRealTimeByteHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainRealTimeByteHitRateDataResponseBody(name='body'),
}

async function describeScdnDomainRealTimeByteHitRateData(request: DescribeScdnDomainRealTimeByteHitRateDataRequest): DescribeScdnDomainRealTimeByteHitRateDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDomainRealTimeByteHitRateData', 'GET', '/', 'json', false, 'json', request);
}

model DescribeScdnDomainRealTimeHttpCodeDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeScdnDomainRealTimeHttpCodeDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  realTimeHttpCodeData?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: {
        realTimeCodeProportionData?: [ 
        {
          code?: string(name='Code'),
          count?: string(name='Count'),
          proportion?: string(name='Proportion'),
        }
      ](name='RealTimeCodeProportionData')
      }(name='Value'),
    }
  ](name='UsageData')
  }(name='RealTimeHttpCodeData'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainRealTimeHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainRealTimeHttpCodeDataResponseBody(name='body'),
}

async function describeScdnDomainRealTimeHttpCodeData(request: DescribeScdnDomainRealTimeHttpCodeDataRequest): DescribeScdnDomainRealTimeHttpCodeDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDomainRealTimeHttpCodeData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnDomainRealTimeQpsDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeScdnDomainRealTimeQpsDataResponseBody = {
  data?: {
    qpsModel?: [ 
    {
      qps?: float(name='Qps'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='QpsModel')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnDomainRealTimeQpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainRealTimeQpsDataResponseBody(name='body'),
}

async function describeScdnDomainRealTimeQpsData(request: DescribeScdnDomainRealTimeQpsDataRequest): DescribeScdnDomainRealTimeQpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDomainRealTimeQpsData', 'GET', '/', 'json', false, 'json', request);
}

model DescribeScdnDomainRealTimeReqHitRateDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeScdnDomainRealTimeReqHitRateDataResponseBody = {
  data?: {
    reqHitRateDataModel?: [ 
    {
      reqHitRate?: float(name='ReqHitRate'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='ReqHitRateDataModel')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnDomainRealTimeReqHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainRealTimeReqHitRateDataResponseBody(name='body'),
}

async function describeScdnDomainRealTimeReqHitRateData(request: DescribeScdnDomainRealTimeReqHitRateDataRequest): DescribeScdnDomainRealTimeReqHitRateDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDomainRealTimeReqHitRateData', 'GET', '/', 'json', false, 'json', request);
}

model DescribeScdnDomainRealTimeSrcBpsDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeScdnDomainRealTimeSrcBpsDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  realTimeSrcBpsDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='RealTimeSrcBpsDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainRealTimeSrcBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainRealTimeSrcBpsDataResponseBody(name='body'),
}

async function describeScdnDomainRealTimeSrcBpsData(request: DescribeScdnDomainRealTimeSrcBpsDataRequest): DescribeScdnDomainRealTimeSrcBpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDomainRealTimeSrcBpsData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnDomainRealTimeSrcTrafficDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeScdnDomainRealTimeSrcTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  realTimeSrcTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='RealTimeSrcTrafficDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainRealTimeSrcTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainRealTimeSrcTrafficDataResponseBody(name='body'),
}

async function describeScdnDomainRealTimeSrcTrafficData(request: DescribeScdnDomainRealTimeSrcTrafficDataRequest): DescribeScdnDomainRealTimeSrcTrafficDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDomainRealTimeSrcTrafficData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnDomainRealTimeTrafficDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeScdnDomainRealTimeTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  realTimeTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='RealTimeTrafficDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainRealTimeTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainRealTimeTrafficDataResponseBody(name='body'),
}

async function describeScdnDomainRealTimeTrafficData(request: DescribeScdnDomainRealTimeTrafficDataRequest): DescribeScdnDomainRealTimeTrafficDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDomainRealTimeTrafficData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnDomainRegionDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeScdnDomainRegionDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  value?: {
    regionProportionData?: [ 
    {
      avgObjectSize?: string(name='AvgObjectSize'),
      avgResponseRate?: string(name='AvgResponseRate'),
      avgResponseTime?: string(name='AvgResponseTime'),
      bps?: string(name='Bps'),
      bytesProportion?: string(name='BytesProportion'),
      proportion?: string(name='Proportion'),
      qps?: string(name='Qps'),
      region?: string(name='Region'),
      regionEname?: string(name='RegionEname'),
      reqErrRate?: string(name='ReqErrRate'),
      totalBytes?: string(name='TotalBytes'),
      totalQuery?: string(name='TotalQuery'),
    }
  ](name='RegionProportionData')
  }(name='Value'),
}

model DescribeScdnDomainRegionDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainRegionDataResponseBody(name='body'),
}

async function describeScdnDomainRegionData(request: DescribeScdnDomainRegionDataRequest): DescribeScdnDomainRegionDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDomainRegionData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnDomainTopReferVisitRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeScdnDomainTopReferVisitResponseBody = {
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  topReferList?: {
    referList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      referDetail?: string(name='ReferDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='ReferList')
  }(name='TopReferList'),
}

model DescribeScdnDomainTopReferVisitResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainTopReferVisitResponseBody(name='body'),
}

async function describeScdnDomainTopReferVisit(request: DescribeScdnDomainTopReferVisitRequest): DescribeScdnDomainTopReferVisitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDomainTopReferVisit', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnDomainTopUrlVisitRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeScdnDomainTopUrlVisitResponseBody = {
  allUrlList?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='AllUrlList'),
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  url200List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url200List'),
  url300List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url300List'),
  url400List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url400List'),
  url500List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url500List'),
}

model DescribeScdnDomainTopUrlVisitResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainTopUrlVisitResponseBody(name='body'),
}

async function describeScdnDomainTopUrlVisit(request: DescribeScdnDomainTopUrlVisitRequest): DescribeScdnDomainTopUrlVisitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDomainTopUrlVisit', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnDomainTrafficDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeScdnDomainTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  trafficDataPerInterval?: {
    dataModule?: [ 
    {
      httpTrafficValue?: string(name='HttpTrafficValue'),
      httpsTrafficValue?: string(name='HttpsTrafficValue'),
      timeStamp?: string(name='TimeStamp'),
      trafficValue?: string(name='TrafficValue'),
    }
  ](name='DataModule')
  }(name='TrafficDataPerInterval'),
}

model DescribeScdnDomainTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainTrafficDataResponseBody(name='body'),
}

async function describeScdnDomainTrafficData(request: DescribeScdnDomainTrafficDataRequest): DescribeScdnDomainTrafficDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDomainTrafficData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnDomainUvDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeScdnDomainUvDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  uvDataInterval?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='UsageData')
  }(name='UvDataInterval'),
}

model DescribeScdnDomainUvDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainUvDataResponseBody(name='body'),
}

async function describeScdnDomainUvData(request: DescribeScdnDomainUvDataRequest): DescribeScdnDomainUvDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnDomainUvData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnRefreshQuotaRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeScdnRefreshQuotaResponseBody = {
  blockQuota?: string(name='BlockQuota'),
  dirQuota?: string(name='DirQuota'),
  dirRemain?: string(name='DirRemain'),
  preloadQuota?: string(name='PreloadQuota'),
  preloadRemain?: string(name='PreloadRemain'),
  requestId?: string(name='RequestId'),
  urlQuota?: string(name='UrlQuota'),
  urlRemain?: string(name='UrlRemain'),
  blockRemain?: string(name='blockRemain'),
}

model DescribeScdnRefreshQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnRefreshQuotaResponseBody(name='body'),
}

async function describeScdnRefreshQuota(request: DescribeScdnRefreshQuotaRequest): DescribeScdnRefreshQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnRefreshQuota', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnRefreshTasksRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  objectPath?: string(name='ObjectPath', position='Query'),
  objectType?: string(name='ObjectType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=42949672, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  status?: string(name='Status', position='Query'),
  taskId?: string(name='TaskId', position='Query'),
}

model DescribeScdnRefreshTasksResponseBody = {
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  tasks?: {
    task?: [ 
    {
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      objectPath?: string(name='ObjectPath'),
      objectType?: string(name='ObjectType'),
      process?: string(name='Process'),
      status?: string(name='Status'),
      taskId?: string(name='TaskId'),
    }
  ](name='Task')
  }(name='Tasks'),
  totalCount?: long(name='TotalCount'),
}

model DescribeScdnRefreshTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnRefreshTasksResponseBody(name='body'),
}

async function describeScdnRefreshTasks(request: DescribeScdnRefreshTasksRequest): DescribeScdnRefreshTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnRefreshTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnServiceRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeScdnServiceResponseBody = {
  bandwidth?: string(name='Bandwidth'),
  bandwidthValue?: string(name='BandwidthValue'),
  ccProtection?: string(name='CcProtection'),
  ccProtectionValue?: string(name='CcProtectionValue'),
  changingAffectTime?: string(name='ChangingAffectTime'),
  changingChargeType?: string(name='ChangingChargeType'),
  currentBandwidth?: string(name='CurrentBandwidth'),
  currentBandwidthValue?: string(name='CurrentBandwidthValue'),
  currentCcProtection?: string(name='CurrentCcProtection'),
  currentCcProtectionValue?: string(name='CurrentCcProtectionValue'),
  currentDDoSBasic?: string(name='CurrentDDoSBasic'),
  currentDDoSBasicValue?: string(name='CurrentDDoSBasicValue'),
  currentDomainCount?: string(name='CurrentDomainCount'),
  currentDomainCountValue?: string(name='CurrentDomainCountValue'),
  currentElasticProtection?: string(name='CurrentElasticProtection'),
  currentElasticProtectionValue?: string(name='CurrentElasticProtectionValue'),
  currentProtectType?: string(name='CurrentProtectType'),
  currentProtectTypeValue?: string(name='CurrentProtectTypeValue'),
  DDoSBasic?: string(name='DDoSBasic'),
  DDoSBasicValue?: string(name='DDoSBasicValue'),
  domainCount?: string(name='DomainCount'),
  domainCountValue?: string(name='DomainCountValue'),
  elasticProtection?: string(name='ElasticProtection'),
  elasticProtectionValue?: string(name='ElasticProtectionValue'),
  endTime?: string(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  internetChargeType?: string(name='InternetChargeType'),
  openTime?: string(name='OpenTime'),
  operationLocks?: {
    lockReason?: [ 
    {
      lockReason?: string(name='LockReason'),
    }
  ](name='LockReason')
  }(name='OperationLocks'),
  priceType?: string(name='PriceType'),
  pricingCycle?: string(name='PricingCycle'),
  protectType?: string(name='ProtectType'),
  protectTypeValue?: string(name='ProtectTypeValue'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnServiceResponseBody(name='body'),
}

async function describeScdnService(request: DescribeScdnServiceRequest): DescribeScdnServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnService', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnTopDomainsByFlowRequest {
  endTime?: string(name='EndTime', position='Query'),
  limit?: long(name='Limit', minimum=1, maximum=100, position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  product?: string(name='Product', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeScdnTopDomainsByFlowResponseBody = {
  domainCount?: long(name='DomainCount'),
  domainOnlineCount?: long(name='DomainOnlineCount'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  topDomains?: {
    topDomain?: [ 
    {
      domainName?: string(name='DomainName'),
      maxBps?: long(name='MaxBps'),
      maxBpsTime?: string(name='MaxBpsTime'),
      rank?: long(name='Rank'),
      totalAccess?: long(name='TotalAccess'),
      totalTraffic?: string(name='TotalTraffic'),
      trafficPercent?: string(name='TrafficPercent'),
    }
  ](name='TopDomain')
  }(name='TopDomains'),
}

model DescribeScdnTopDomainsByFlowResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnTopDomainsByFlowResponseBody(name='body'),
}

async function describeScdnTopDomainsByFlow(request: DescribeScdnTopDomainsByFlowRequest): DescribeScdnTopDomainsByFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnTopDomainsByFlow', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnUserDomainsRequest {
  changeEndTime?: string(name='ChangeEndTime', position='Query'),
  changeStartTime?: string(name='ChangeStartTime', position='Query'),
  checkDomainShow?: boolean(name='CheckDomainShow', position='Query'),
  domainName?: string(name='DomainName', position='Query'),
  domainSearchType?: string(name='DomainSearchType', position='Query'),
  domainStatus?: string(name='DomainStatus', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=500, position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeScdnUserDomainsResponseBody = {
  domains?: {
    pageData?: [ 
    {
      cname?: string(name='Cname'),
      description?: string(name='Description'),
      domainName?: string(name='DomainName'),
      domainStatus?: string(name='DomainStatus'),
      gmtCreated?: string(name='GmtCreated'),
      gmtModified?: string(name='GmtModified'),
      resourceGroupId?: string(name='ResourceGroupId'),
      SSLProtocol?: string(name='SSLProtocol'),
      sandbox?: string(name='Sandbox'),
      sources?: {
        source?: [ 
        {
          content?: string(name='Content'),
          port?: int32(name='Port'),
          priority?: string(name='Priority'),
          type?: string(name='Type'),
        }
      ](name='Source')
      }(name='Sources'),
    }
  ](name='PageData')
  }(name='Domains'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeScdnUserDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnUserDomainsResponseBody(name='body'),
}

async function describeScdnUserDomains(request: DescribeScdnUserDomainsRequest): DescribeScdnUserDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnUserDomains', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScdnUserProtectInfoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeScdnUserProtectInfoResponseBody = {
  requestId?: string(name='RequestId'),
  serviceDDoS?: int32(name='ServiceDDoS'),
}

model DescribeScdnUserProtectInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnUserProtectInfoResponseBody(name='body'),
}

async function describeScdnUserProtectInfo(request: DescribeScdnUserProtectInfoRequest): DescribeScdnUserProtectInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnUserProtectInfo', 'GET', '/', 'json', false, 'json', request);
}

model DescribeScdnUserQuotaRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeScdnUserQuotaResponseBody = {
  blockQuota?: int32(name='BlockQuota'),
  blockRemain?: int32(name='BlockRemain'),
  domainQuota?: int32(name='DomainQuota'),
  preloadQuota?: int32(name='PreloadQuota'),
  preloadRemain?: int32(name='PreloadRemain'),
  refreshDirQuota?: int32(name='RefreshDirQuota'),
  refreshDirRemain?: int32(name='RefreshDirRemain'),
  refreshUrlQuota?: int32(name='RefreshUrlQuota'),
  refreshUrlRemain?: int32(name='RefreshUrlRemain'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnUserQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnUserQuotaResponseBody(name='body'),
}

async function describeScdnUserQuota(request: DescribeScdnUserQuotaRequest): DescribeScdnUserQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScdnUserQuota', 'POST', '/', 'json', false, 'json', request);
}

model OpenScdnServiceRequest {
  bandwidth: int32(name='Bandwidth', position='Query'),
  ccProtection: int32(name='CcProtection', position='Query'),
  DDoSBasic: int32(name='DDoSBasic', position='Query'),
  domainCount: int32(name='DomainCount', position='Query'),
  elasticProtection: int32(name='ElasticProtection', position='Query'),
  endDate?: string(name='EndDate', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  protectType: string(name='ProtectType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startDate?: string(name='StartDate', position='Query'),
}

model OpenScdnServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model OpenScdnServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenScdnServiceResponseBody(name='body'),
}

async function openScdnService(request: OpenScdnServiceRequest): OpenScdnServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenScdnService', 'POST', '/', 'json', false, 'json', request);
}

model PreloadScdnObjectCachesRequest {
  area?: string(name='Area', position='Query'),
  objectPath: string(name='ObjectPath', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model PreloadScdnObjectCachesResponseBody = {
  preloadTaskId?: string(name='PreloadTaskId'),
  requestId?: string(name='RequestId'),
}

model PreloadScdnObjectCachesResponse = {
  headers: map[string]string(name='headers'),
  body: PreloadScdnObjectCachesResponseBody(name='body'),
}

async function preloadScdnObjectCaches(request: PreloadScdnObjectCachesRequest): PreloadScdnObjectCachesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PreloadScdnObjectCaches', 'POST', '/', 'json', false, 'json', request);
}

model RefreshScdnObjectCachesRequest {
  objectPath: string(name='ObjectPath', position='Query'),
  objectType?: string(name='ObjectType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model RefreshScdnObjectCachesResponseBody = {
  refreshTaskId?: string(name='RefreshTaskId'),
  requestId?: string(name='RequestId'),
}

model RefreshScdnObjectCachesResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshScdnObjectCachesResponseBody(name='body'),
}

async function refreshScdnObjectCaches(request: RefreshScdnObjectCachesRequest): RefreshScdnObjectCachesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshScdnObjectCaches', 'POST', '/', 'json', false, 'json', request);
}

model SetScdnBotInfoRequest {
  domainName: string(name='DomainName', position='Query'),
  enable: string(name='Enable', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  status: string(name='Status', position='Query'),
}

model SetScdnBotInfoResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetScdnBotInfoResponse = {
  headers: map[string]string(name='headers'),
  body: SetScdnBotInfoResponseBody(name='body'),
}

async function setScdnBotInfo(request: SetScdnBotInfoRequest): SetScdnBotInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetScdnBotInfo', 'GET', '/', 'json', false, 'json', request);
}

model SetScdnCcInfoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  status: string(name='Status', position='Query'),
}

model SetScdnCcInfoResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetScdnCcInfoResponse = {
  headers: map[string]string(name='headers'),
  body: SetScdnCcInfoResponseBody(name='body'),
}

async function setScdnCcInfo(request: SetScdnCcInfoRequest): SetScdnCcInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetScdnCcInfo', 'GET', '/', 'json', false, 'json', request);
}

model SetScdnDDoSInfoRequest {
  elasticBandwidth: int32(name='ElasticBandwidth', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model SetScdnDDoSInfoResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetScdnDDoSInfoResponse = {
  headers: map[string]string(name='headers'),
  body: SetScdnDDoSInfoResponseBody(name='body'),
}

async function setScdnDDoSInfo(request: SetScdnDDoSInfoRequest): SetScdnDDoSInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetScdnDDoSInfo', 'GET', '/', 'json', false, 'json', request);
}

model SetScdnDomainBizInfoRequest {
  bizName: string(name='BizName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model SetScdnDomainBizInfoResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetScdnDomainBizInfoResponse = {
  headers: map[string]string(name='headers'),
  body: SetScdnDomainBizInfoResponseBody(name='body'),
}

async function setScdnDomainBizInfo(request: SetScdnDomainBizInfoRequest): SetScdnDomainBizInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetScdnDomainBizInfo', 'GET', '/', 'json', false, 'json', request);
}

model SetScdnDomainCertificateRequest {
  certName?: string(name='CertName', position='Query'),
  certType?: string(name='CertType', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  forceSet?: string(name='ForceSet', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  region?: string(name='Region', position='Query'),
  SSLPri?: string(name='SSLPri', position='Query'),
  SSLProtocol: string(name='SSLProtocol', position='Query'),
  SSLPub?: string(name='SSLPub', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetScdnDomainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetScdnDomainCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: SetScdnDomainCertificateResponseBody(name='body'),
}

async function setScdnDomainCertificate(request: SetScdnDomainCertificateRequest): SetScdnDomainCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetScdnDomainCertificate', 'POST', '/', 'json', false, 'json', request);
}

model StartScdnDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model StartScdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartScdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StartScdnDomainResponseBody(name='body'),
}

async function startScdnDomain(request: StartScdnDomainRequest): StartScdnDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartScdnDomain', 'POST', '/', 'json', false, 'json', request);
}

model StopScdnDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model StopScdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopScdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StopScdnDomainResponseBody(name='body'),
}

async function stopScdnDomain(request: StopScdnDomainRequest): StopScdnDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopScdnDomain', 'POST', '/', 'json', false, 'json', request);
}

model UpdateScdnDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sources?: string(name='Sources', position='Query'),
}

model UpdateScdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateScdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateScdnDomainResponseBody(name='body'),
}

async function updateScdnDomain(request: UpdateScdnDomainRequest): UpdateScdnDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateScdnDomain', 'POST', '/', 'json', false, 'json', request);
}

