/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'scdn.aliyuncs.com',
    ap-northeast-2-pop = 'scdn.aliyuncs.com',
    ap-south-1 = 'scdn.aliyuncs.com',
    ap-southeast-1 = 'scdn.aliyuncs.com',
    ap-southeast-2 = 'scdn.aliyuncs.com',
    ap-southeast-3 = 'scdn.aliyuncs.com',
    ap-southeast-5 = 'scdn.aliyuncs.com',
    cn-beijing = 'scdn.aliyuncs.com',
    cn-beijing-finance-1 = 'scdn.aliyuncs.com',
    cn-beijing-finance-pop = 'scdn.aliyuncs.com',
    cn-beijing-gov-1 = 'scdn.aliyuncs.com',
    cn-beijing-nu16-b01 = 'scdn.aliyuncs.com',
    cn-chengdu = 'scdn.aliyuncs.com',
    cn-edge-1 = 'scdn.aliyuncs.com',
    cn-fujian = 'scdn.aliyuncs.com',
    cn-haidian-cm12-c01 = 'scdn.aliyuncs.com',
    cn-hangzhou = 'scdn.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'scdn.aliyuncs.com',
    cn-hangzhou-finance = 'scdn.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'scdn.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'scdn.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'scdn.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'scdn.aliyuncs.com',
    cn-hangzhou-test-306 = 'scdn.aliyuncs.com',
    cn-hongkong = 'scdn.aliyuncs.com',
    cn-hongkong-finance-pop = 'scdn.aliyuncs.com',
    cn-huhehaote = 'scdn.aliyuncs.com',
    cn-north-2-gov-1 = 'scdn.aliyuncs.com',
    cn-qingdao = 'scdn.aliyuncs.com',
    cn-qingdao-nebula = 'scdn.aliyuncs.com',
    cn-shanghai = 'scdn.aliyuncs.com',
    cn-shanghai-et15-b01 = 'scdn.aliyuncs.com',
    cn-shanghai-et2-b01 = 'scdn.aliyuncs.com',
    cn-shanghai-finance-1 = 'scdn.aliyuncs.com',
    cn-shanghai-inner = 'scdn.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'scdn.aliyuncs.com',
    cn-shenzhen = 'scdn.aliyuncs.com',
    cn-shenzhen-finance-1 = 'scdn.aliyuncs.com',
    cn-shenzhen-inner = 'scdn.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'scdn.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'scdn.aliyuncs.com',
    cn-wuhan = 'scdn.aliyuncs.com',
    cn-yushanfang = 'scdn.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'scdn.aliyuncs.com',
    cn-zhangjiakou = 'scdn.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'scdn.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'scdn.aliyuncs.com',
    eu-central-1 = 'scdn.aliyuncs.com',
    eu-west-1 = 'scdn.aliyuncs.com',
    eu-west-1-oxs = 'scdn.aliyuncs.com',
    me-east-1 = 'scdn.aliyuncs.com',
    rus-west-1-pop = 'scdn.aliyuncs.com',
    us-east-1 = 'scdn.aliyuncs.com',
    us-west-1 = 'scdn.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('scdn', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddScdnDomainRequest {
  checkUrl?: string(name='CheckUrl'),
  domainName?: string(name='DomainName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  scope?: string(name='Scope'),
  securityToken?: string(name='SecurityToken'),
  sources?: string(name='Sources'),
}

model AddScdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddScdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: AddScdnDomainResponseBody(name='body'),
}

async function addScdnDomainWithOptions(request: AddScdnDomainRequest, runtime: Util.RuntimeOptions): AddScdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkUrl)) {
    query['CheckUrl'] = request.checkUrl;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sources)) {
    query['Sources'] = request.sources;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddScdnDomain',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addScdnDomain(request: AddScdnDomainRequest): AddScdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return addScdnDomainWithOptions(request, runtime);
}

model BatchDeleteScdnDomainConfigsRequest {
  domainNames?: string(name='DomainNames'),
  functionNames?: string(name='FunctionNames'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model BatchDeleteScdnDomainConfigsResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchDeleteScdnDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteScdnDomainConfigsResponseBody(name='body'),
}

async function batchDeleteScdnDomainConfigsWithOptions(request: BatchDeleteScdnDomainConfigsRequest, runtime: Util.RuntimeOptions): BatchDeleteScdnDomainConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainNames)) {
    query['DomainNames'] = request.domainNames;
  }
  if (!Util.isUnset(request.functionNames)) {
    query['FunctionNames'] = request.functionNames;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchDeleteScdnDomainConfigs',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchDeleteScdnDomainConfigs(request: BatchDeleteScdnDomainConfigsRequest): BatchDeleteScdnDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeleteScdnDomainConfigsWithOptions(request, runtime);
}

model BatchSetScdnDomainConfigsRequest {
  domainNames?: string(name='DomainNames'),
  functions?: string(name='Functions'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model BatchSetScdnDomainConfigsResponseBody = {
  domainConfigList?: {
    domainConfigModel?: [ 
    {
      configId?: long(name='ConfigId'),
      domainName?: string(name='DomainName'),
      functionName?: string(name='FunctionName'),
    }
  ](name='DomainConfigModel')
  }(name='DomainConfigList'),
  requestId?: string(name='RequestId'),
}

model BatchSetScdnDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetScdnDomainConfigsResponseBody(name='body'),
}

async function batchSetScdnDomainConfigsWithOptions(request: BatchSetScdnDomainConfigsRequest, runtime: Util.RuntimeOptions): BatchSetScdnDomainConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainNames)) {
    query['DomainNames'] = request.domainNames;
  }
  if (!Util.isUnset(request.functions)) {
    query['Functions'] = request.functions;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchSetScdnDomainConfigs',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchSetScdnDomainConfigs(request: BatchSetScdnDomainConfigsRequest): BatchSetScdnDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchSetScdnDomainConfigsWithOptions(request, runtime);
}

model BatchStartScdnDomainRequest {
  domainNames?: string(name='DomainNames'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model BatchStartScdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchStartScdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BatchStartScdnDomainResponseBody(name='body'),
}

async function batchStartScdnDomainWithOptions(request: BatchStartScdnDomainRequest, runtime: Util.RuntimeOptions): BatchStartScdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainNames)) {
    query['DomainNames'] = request.domainNames;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchStartScdnDomain',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchStartScdnDomain(request: BatchStartScdnDomainRequest): BatchStartScdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchStartScdnDomainWithOptions(request, runtime);
}

model BatchStopScdnDomainRequest {
  domainNames?: string(name='DomainNames'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model BatchStopScdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchStopScdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BatchStopScdnDomainResponseBody(name='body'),
}

async function batchStopScdnDomainWithOptions(request: BatchStopScdnDomainRequest, runtime: Util.RuntimeOptions): BatchStopScdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainNames)) {
    query['DomainNames'] = request.domainNames;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchStopScdnDomain',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchStopScdnDomain(request: BatchStopScdnDomainRequest): BatchStopScdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchStopScdnDomainWithOptions(request, runtime);
}

model BatchUpdateScdnDomainRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  securityToken?: string(name='SecurityToken'),
  sources?: string(name='Sources'),
  topLevelDomain?: string(name='TopLevelDomain'),
}

model BatchUpdateScdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchUpdateScdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUpdateScdnDomainResponseBody(name='body'),
}

async function batchUpdateScdnDomainWithOptions(request: BatchUpdateScdnDomainRequest, runtime: Util.RuntimeOptions): BatchUpdateScdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sources)) {
    query['Sources'] = request.sources;
  }
  if (!Util.isUnset(request.topLevelDomain)) {
    query['TopLevelDomain'] = request.topLevelDomain;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchUpdateScdnDomain',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchUpdateScdnDomain(request: BatchUpdateScdnDomainRequest): BatchUpdateScdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchUpdateScdnDomainWithOptions(request, runtime);
}

model CheckScdnServiceRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model CheckScdnServiceResponseBody = {
  enabled?: boolean(name='Enabled'),
  inDebt?: boolean(name='InDebt'),
  inDebtOverdue?: boolean(name='InDebtOverdue'),
  onService?: boolean(name='OnService'),
  requestId?: string(name='RequestId'),
}

model CheckScdnServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CheckScdnServiceResponseBody(name='body'),
}

async function checkScdnServiceWithOptions(request: CheckScdnServiceRequest, runtime: Util.RuntimeOptions): CheckScdnServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckScdnService',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkScdnService(request: CheckScdnServiceRequest): CheckScdnServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkScdnServiceWithOptions(request, runtime);
}

model DeleteScdnDomainRequest {
  domainName?: string(name='DomainName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteScdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteScdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteScdnDomainResponseBody(name='body'),
}

async function deleteScdnDomainWithOptions(request: DeleteScdnDomainRequest, runtime: Util.RuntimeOptions): DeleteScdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteScdnDomain',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteScdnDomain(request: DeleteScdnDomainRequest): DeleteScdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteScdnDomainWithOptions(request, runtime);
}

model DeleteScdnSpecificConfigRequest {
  configId?: string(name='ConfigId'),
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteScdnSpecificConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteScdnSpecificConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteScdnSpecificConfigResponseBody(name='body'),
}

async function deleteScdnSpecificConfigWithOptions(request: DeleteScdnSpecificConfigRequest, runtime: Util.RuntimeOptions): DeleteScdnSpecificConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteScdnSpecificConfig',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteScdnSpecificConfig(request: DeleteScdnSpecificConfigRequest): DeleteScdnSpecificConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteScdnSpecificConfigWithOptions(request, runtime);
}

model DescribeScdnCcInfoRequest {
  ownerId?: long(name='OwnerId'),
}

model DescribeScdnCcInfoResponseBody = {
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeScdnCcInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnCcInfoResponseBody(name='body'),
}

async function describeScdnCcInfoWithOptions(request: DescribeScdnCcInfoRequest, runtime: Util.RuntimeOptions): DescribeScdnCcInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnCcInfo',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnCcInfo(request: DescribeScdnCcInfoRequest): DescribeScdnCcInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnCcInfoWithOptions(request, runtime);
}

model DescribeScdnCcQpsInfoRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnCcQpsInfoResponseBody = {
  attacks?: {
    attack?: [ string ](name='Attack')
  }(name='Attacks'),
  requestId?: string(name='RequestId'),
  timeScopes?: {
    timeScope?: [ 
    {
      interval?: string(name='Interval'),
      start?: string(name='Start'),
    }
  ](name='TimeScope')
  }(name='TimeScopes'),
  totals?: {
    total?: [ string ](name='Total')
  }(name='Totals'),
}

model DescribeScdnCcQpsInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnCcQpsInfoResponseBody(name='body'),
}

async function describeScdnCcQpsInfoWithOptions(request: DescribeScdnCcQpsInfoRequest, runtime: Util.RuntimeOptions): DescribeScdnCcQpsInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnCcQpsInfo',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnCcQpsInfo(request: DescribeScdnCcQpsInfoRequest): DescribeScdnCcQpsInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnCcQpsInfoWithOptions(request, runtime);
}

model DescribeScdnCcTopIpRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnCcTopIpResponseBody = {
  attackIpDataList?: {
    attackIpDatas?: [ 
    {
      attackCount?: string(name='AttackCount'),
      ip?: string(name='Ip'),
    }
  ](name='AttackIpDatas')
  }(name='AttackIpDataList'),
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
  total?: string(name='Total'),
}

model DescribeScdnCcTopIpResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnCcTopIpResponseBody(name='body'),
}

async function describeScdnCcTopIpWithOptions(request: DescribeScdnCcTopIpRequest, runtime: Util.RuntimeOptions): DescribeScdnCcTopIpResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnCcTopIp',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnCcTopIp(request: DescribeScdnCcTopIpRequest): DescribeScdnCcTopIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnCcTopIpWithOptions(request, runtime);
}

model DescribeScdnCcTopUrlRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnCcTopUrlResponseBody = {
  attackUrlDataList?: {
    attackUrlDatas?: [ 
    {
      attackCount?: string(name='AttackCount'),
      url?: string(name='Url'),
    }
  ](name='AttackUrlDatas')
  }(name='AttackUrlDataList'),
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
  total?: string(name='Total'),
}

model DescribeScdnCcTopUrlResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnCcTopUrlResponseBody(name='body'),
}

async function describeScdnCcTopUrlWithOptions(request: DescribeScdnCcTopUrlRequest, runtime: Util.RuntimeOptions): DescribeScdnCcTopUrlResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnCcTopUrl',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnCcTopUrl(request: DescribeScdnCcTopUrlRequest): DescribeScdnCcTopUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnCcTopUrlWithOptions(request, runtime);
}

model DescribeScdnCertificateDetailRequest {
  certName?: string(name='CertName'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeScdnCertificateDetailResponseBody = {
  cert?: string(name='Cert'),
  certId?: long(name='CertId'),
  certName?: string(name='CertName'),
  key?: string(name='Key'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnCertificateDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnCertificateDetailResponseBody(name='body'),
}

async function describeScdnCertificateDetailWithOptions(request: DescribeScdnCertificateDetailRequest, runtime: Util.RuntimeOptions): DescribeScdnCertificateDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certName)) {
    query['CertName'] = request.certName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnCertificateDetail',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnCertificateDetail(request: DescribeScdnCertificateDetailRequest): DescribeScdnCertificateDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnCertificateDetailWithOptions(request, runtime);
}

model DescribeScdnCertificateListRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeScdnCertificateListResponseBody = {
  certificateListModel?: {
    certList?: {
      cert?: [ 
      {
        certId?: long(name='CertId'),
        certName?: string(name='CertName'),
        common?: string(name='Common'),
        fingerprint?: string(name='Fingerprint'),
        issuer?: string(name='Issuer'),
        lastTime?: long(name='LastTime'),
      }
    ](name='Cert')
    }(name='CertList'),
    count?: int32(name='Count'),
  }(name='CertificateListModel'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnCertificateListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnCertificateListResponseBody(name='body'),
}

async function describeScdnCertificateListWithOptions(request: DescribeScdnCertificateListRequest, runtime: Util.RuntimeOptions): DescribeScdnCertificateListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnCertificateList',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnCertificateList(request: DescribeScdnCertificateListRequest): DescribeScdnCertificateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnCertificateListWithOptions(request, runtime);
}

model DescribeScdnDDoSInfoRequest {
  ownerId?: long(name='OwnerId'),
}

model DescribeScdnDDoSInfoResponseBody = {
  elasticBandwidth?: int32(name='ElasticBandwidth'),
  requestId?: string(name='RequestId'),
  secBandwidth?: int32(name='SecBandwidth'),
}

model DescribeScdnDDoSInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDDoSInfoResponseBody(name='body'),
}

async function describeScdnDDoSInfoWithOptions(request: DescribeScdnDDoSInfoRequest, runtime: Util.RuntimeOptions): DescribeScdnDDoSInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDDoSInfo',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDDoSInfo(request: DescribeScdnDDoSInfoRequest): DescribeScdnDDoSInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDDoSInfoWithOptions(request, runtime);
}

model DescribeScdnDDoSTrafficInfoRequest {
  endTime?: string(name='EndTime'),
  line?: string(name='Line'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDDoSTrafficInfoResponseBody = {
  bpsDrops?: {
    bpsDrop?: [ string ](name='BpsDrop')
  }(name='BpsDrops'),
  bpsTotals?: {
    bpsTotal?: [ string ](name='BpsTotal')
  }(name='BpsTotals'),
  ppsDrops?: {
    ppsDrop?: [ string ](name='PpsDrop')
  }(name='PpsDrops'),
  ppsTotals?: {
    ppsTotal?: [ string ](name='PpsTotal')
  }(name='PpsTotals'),
  requestId?: string(name='RequestId'),
  timeScopes?: {
    timeScope?: [ 
    {
      interval?: string(name='Interval'),
      start?: string(name='Start'),
    }
  ](name='TimeScope')
  }(name='TimeScopes'),
}

model DescribeScdnDDoSTrafficInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDDoSTrafficInfoResponseBody(name='body'),
}

async function describeScdnDDoSTrafficInfoWithOptions(request: DescribeScdnDDoSTrafficInfoRequest, runtime: Util.RuntimeOptions): DescribeScdnDDoSTrafficInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDDoSTrafficInfo',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDDoSTrafficInfo(request: DescribeScdnDDoSTrafficInfoRequest): DescribeScdnDDoSTrafficInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDDoSTrafficInfoWithOptions(request, runtime);
}

model DescribeScdnDomainBpsDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainBpsDataResponseBody = {
  bpsDataPerInterval?: {
    dataModule?: [ 
    {
      bpsValue?: string(name='BpsValue'),
      httpBpsValue?: string(name='HttpBpsValue'),
      httpsBpsValue?: string(name='HttpsBpsValue'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='BpsDataPerInterval'),
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainBpsDataResponseBody(name='body'),
}

async function describeScdnDomainBpsDataWithOptions(request: DescribeScdnDomainBpsDataRequest, runtime: Util.RuntimeOptions): DescribeScdnDomainBpsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDomainBpsData',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDomainBpsData(request: DescribeScdnDomainBpsDataRequest): DescribeScdnDomainBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDomainBpsDataWithOptions(request, runtime);
}

model DescribeScdnDomainCertificateInfoRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
}

model DescribeScdnDomainCertificateInfoResponseBody = {
  certInfos?: {
    certInfo?: [ 
    {
      certDomainName?: string(name='CertDomainName'),
      certExpireTime?: string(name='CertExpireTime'),
      certLife?: string(name='CertLife'),
      certName?: string(name='CertName'),
      certOrg?: string(name='CertOrg'),
      certType?: string(name='CertType'),
      domainName?: string(name='DomainName'),
      SSLProtocol?: string(name='SSLProtocol'),
      SSLPub?: string(name='SSLPub'),
      status?: string(name='Status'),
    }
  ](name='CertInfo')
  }(name='CertInfos'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnDomainCertificateInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainCertificateInfoResponseBody(name='body'),
}

async function describeScdnDomainCertificateInfoWithOptions(request: DescribeScdnDomainCertificateInfoRequest, runtime: Util.RuntimeOptions): DescribeScdnDomainCertificateInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDomainCertificateInfo',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDomainCertificateInfo(request: DescribeScdnDomainCertificateInfoRequest): DescribeScdnDomainCertificateInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDomainCertificateInfoWithOptions(request, runtime);
}

model DescribeScdnDomainCnameRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
}

model DescribeScdnDomainCnameResponseBody = {
  cnameDatas?: {
    data?: [ 
    {
      cname?: string(name='Cname'),
      domain?: string(name='Domain'),
      status?: int32(name='Status'),
    }
  ](name='Data')
  }(name='CnameDatas'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnDomainCnameResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainCnameResponseBody(name='body'),
}

async function describeScdnDomainCnameWithOptions(request: DescribeScdnDomainCnameRequest, runtime: Util.RuntimeOptions): DescribeScdnDomainCnameResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDomainCname',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDomainCname(request: DescribeScdnDomainCnameRequest): DescribeScdnDomainCnameResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDomainCnameWithOptions(request, runtime);
}

model DescribeScdnDomainConfigsRequest {
  configId?: string(name='ConfigId'),
  domainName?: string(name='DomainName'),
  functionNames?: string(name='FunctionNames'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeScdnDomainConfigsResponseBody = {
  domainConfigs?: {
    domainConfig?: [ 
    {
      configId?: string(name='ConfigId'),
      functionArgs?: {
        functionArg?: [ 
        {
          argName?: string(name='ArgName'),
          argValue?: string(name='ArgValue'),
        }
      ](name='FunctionArg')
      }(name='FunctionArgs'),
      functionName?: string(name='FunctionName'),
      parentId?: long(name='ParentId'),
      status?: string(name='Status'),
    }
  ](name='DomainConfig')
  }(name='DomainConfigs'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainConfigsResponseBody(name='body'),
}

async function describeScdnDomainConfigsWithOptions(request: DescribeScdnDomainConfigsRequest, runtime: Util.RuntimeOptions): DescribeScdnDomainConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.functionNames)) {
    query['FunctionNames'] = request.functionNames;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDomainConfigs',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDomainConfigs(request: DescribeScdnDomainConfigsRequest): DescribeScdnDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDomainConfigsWithOptions(request, runtime);
}

model DescribeScdnDomainDetailRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeScdnDomainDetailResponseBody = {
  domainDetail?: {
    certName?: string(name='CertName'),
    cname?: string(name='Cname'),
    description?: string(name='Description'),
    domainName?: string(name='DomainName'),
    domainStatus?: string(name='DomainStatus'),
    gmtCreated?: string(name='GmtCreated'),
    gmtModified?: string(name='GmtModified'),
    resourceGroupId?: string(name='ResourceGroupId'),
    SSLProtocol?: string(name='SSLProtocol'),
    SSLPub?: string(name='SSLPub'),
    scope?: string(name='Scope'),
    sources?: {
      source?: [ 
      {
        content?: string(name='Content'),
        enabled?: string(name='Enabled'),
        port?: int32(name='Port'),
        priority?: string(name='Priority'),
        type?: string(name='Type'),
      }
    ](name='Source')
    }(name='Sources'),
  }(name='DomainDetail'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainDetailResponseBody(name='body'),
}

async function describeScdnDomainDetailWithOptions(request: DescribeScdnDomainDetailRequest, runtime: Util.RuntimeOptions): DescribeScdnDomainDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDomainDetail',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDomainDetail(request: DescribeScdnDomainDetailRequest): DescribeScdnDomainDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDomainDetailWithOptions(request, runtime);
}

model DescribeScdnDomainHitRateDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainHitRateDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  hitRatePerInterval?: {
    dataModule?: [ 
    {
      byteHitRate?: string(name='ByteHitRate'),
      reqHitRate?: string(name='ReqHitRate'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='HitRatePerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainHitRateDataResponseBody(name='body'),
}

async function describeScdnDomainHitRateDataWithOptions(request: DescribeScdnDomainHitRateDataRequest, runtime: Util.RuntimeOptions): DescribeScdnDomainHitRateDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDomainHitRateData',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDomainHitRateData(request: DescribeScdnDomainHitRateDataRequest): DescribeScdnDomainHitRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDomainHitRateDataWithOptions(request, runtime);
}

model DescribeScdnDomainHttpCodeDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainHttpCodeDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  dataPerInterval?: {
    dataModule?: [ 
    {
      httpCodeDataPerInterval?: {
        httpCodeDataModule?: [ 
        {
          code?: string(name='Code'),
          count?: string(name='Count'),
          proportion?: string(name='Proportion'),
        }
      ](name='HttpCodeDataModule')
      }(name='HttpCodeDataPerInterval'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='DataPerInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainHttpCodeDataResponseBody(name='body'),
}

async function describeScdnDomainHttpCodeDataWithOptions(request: DescribeScdnDomainHttpCodeDataRequest, runtime: Util.RuntimeOptions): DescribeScdnDomainHttpCodeDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDomainHttpCodeData',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDomainHttpCodeData(request: DescribeScdnDomainHttpCodeDataRequest): DescribeScdnDomainHttpCodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDomainHttpCodeDataWithOptions(request, runtime);
}

model DescribeScdnDomainIspDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainIspDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  value?: {
    ISPProportionData?: [ 
    {
      avgObjectSize?: string(name='AvgObjectSize'),
      avgResponseRate?: string(name='AvgResponseRate'),
      avgResponseTime?: string(name='AvgResponseTime'),
      bps?: string(name='Bps'),
      bytesProportion?: string(name='BytesProportion'),
      ISP?: string(name='ISP'),
      ispEname?: string(name='IspEname'),
      proportion?: string(name='Proportion'),
      qps?: string(name='Qps'),
      reqErrRate?: string(name='ReqErrRate'),
      totalBytes?: string(name='TotalBytes'),
      totalQuery?: string(name='TotalQuery'),
    }
  ](name='ISPProportionData')
  }(name='Value'),
}

model DescribeScdnDomainIspDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainIspDataResponseBody(name='body'),
}

async function describeScdnDomainIspDataWithOptions(request: DescribeScdnDomainIspDataRequest, runtime: Util.RuntimeOptions): DescribeScdnDomainIspDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDomainIspData',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDomainIspData(request: DescribeScdnDomainIspDataRequest): DescribeScdnDomainIspDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDomainIspDataWithOptions(request, runtime);
}

model DescribeScdnDomainLogRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainLogResponseBody = {
  domainLogDetails?: {
    domainLogDetail?: [ 
    {
      logCount?: long(name='LogCount'),
      logInfos?: {
        logInfoDetail?: [ 
        {
          endTime?: string(name='EndTime'),
          logName?: string(name='LogName'),
          logPath?: string(name='LogPath'),
          logSize?: long(name='LogSize'),
          startTime?: string(name='StartTime'),
        }
      ](name='LogInfoDetail')
      }(name='LogInfos'),
      pageInfos?: {
        pageNumber?: long(name='PageNumber'),
        pageSize?: long(name='PageSize'),
        total?: long(name='Total'),
      }(name='PageInfos'),
    }
  ](name='DomainLogDetail')
  }(name='DomainLogDetails'),
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnDomainLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainLogResponseBody(name='body'),
}

async function describeScdnDomainLogWithOptions(request: DescribeScdnDomainLogRequest, runtime: Util.RuntimeOptions): DescribeScdnDomainLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDomainLog',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDomainLog(request: DescribeScdnDomainLogRequest): DescribeScdnDomainLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDomainLogWithOptions(request, runtime);
}

model DescribeScdnDomainOriginBpsDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainOriginBpsDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  originBpsDataPerInterval?: {
    dataModule?: [ 
    {
      httpOriginBpsValue?: string(name='HttpOriginBpsValue'),
      httpsOriginBpsValue?: string(name='HttpsOriginBpsValue'),
      originBpsValue?: string(name='OriginBpsValue'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='OriginBpsDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainOriginBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainOriginBpsDataResponseBody(name='body'),
}

async function describeScdnDomainOriginBpsDataWithOptions(request: DescribeScdnDomainOriginBpsDataRequest, runtime: Util.RuntimeOptions): DescribeScdnDomainOriginBpsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDomainOriginBpsData',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDomainOriginBpsData(request: DescribeScdnDomainOriginBpsDataRequest): DescribeScdnDomainOriginBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDomainOriginBpsDataWithOptions(request, runtime);
}

model DescribeScdnDomainOriginTrafficDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainOriginTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  originTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      httpTrafficValue?: string(name='HttpTrafficValue'),
      httpsTrafficValue?: string(name='HttpsTrafficValue'),
      timeStamp?: string(name='TimeStamp'),
      trafficValue?: string(name='TrafficValue'),
    }
  ](name='DataModule')
  }(name='OriginTrafficDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainOriginTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainOriginTrafficDataResponseBody(name='body'),
}

async function describeScdnDomainOriginTrafficDataWithOptions(request: DescribeScdnDomainOriginTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeScdnDomainOriginTrafficDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDomainOriginTrafficData',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDomainOriginTrafficData(request: DescribeScdnDomainOriginTrafficDataRequest): DescribeScdnDomainOriginTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDomainOriginTrafficDataWithOptions(request, runtime);
}

model DescribeScdnDomainPvDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainPvDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  pvDataInterval?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='UsageData')
  }(name='PvDataInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainPvDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainPvDataResponseBody(name='body'),
}

async function describeScdnDomainPvDataWithOptions(request: DescribeScdnDomainPvDataRequest, runtime: Util.RuntimeOptions): DescribeScdnDomainPvDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDomainPvData',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDomainPvData(request: DescribeScdnDomainPvDataRequest): DescribeScdnDomainPvDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDomainPvDataWithOptions(request, runtime);
}

model DescribeScdnDomainQpsDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainQpsDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  qpsDataPerInterval?: {
    dataModule?: [ 
    {
      accValue?: string(name='AccValue'),
      httpAccValue?: string(name='HttpAccValue'),
      httpQpsValue?: string(name='HttpQpsValue'),
      httpsAccValue?: string(name='HttpsAccValue'),
      httpsQpsValue?: string(name='HttpsQpsValue'),
      qpsValue?: string(name='QpsValue'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='QpsDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainQpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainQpsDataResponseBody(name='body'),
}

async function describeScdnDomainQpsDataWithOptions(request: DescribeScdnDomainQpsDataRequest, runtime: Util.RuntimeOptions): DescribeScdnDomainQpsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDomainQpsData',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDomainQpsData(request: DescribeScdnDomainQpsDataRequest): DescribeScdnDomainQpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDomainQpsDataWithOptions(request, runtime);
}

model DescribeScdnDomainRealTimeBpsDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainRealTimeBpsDataResponseBody = {
  data?: {
    bpsModel?: [ 
    {
      bps?: float(name='Bps'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='BpsModel')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnDomainRealTimeBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainRealTimeBpsDataResponseBody(name='body'),
}

async function describeScdnDomainRealTimeBpsDataWithOptions(request: DescribeScdnDomainRealTimeBpsDataRequest, runtime: Util.RuntimeOptions): DescribeScdnDomainRealTimeBpsDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDomainRealTimeBpsData',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDomainRealTimeBpsData(request: DescribeScdnDomainRealTimeBpsDataRequest): DescribeScdnDomainRealTimeBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDomainRealTimeBpsDataWithOptions(request, runtime);
}

model DescribeScdnDomainRealTimeByteHitRateDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainRealTimeByteHitRateDataResponseBody = {
  data?: {
    byteHitRateDataModel?: [ 
    {
      byteHitRate?: float(name='ByteHitRate'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='ByteHitRateDataModel')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnDomainRealTimeByteHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainRealTimeByteHitRateDataResponseBody(name='body'),
}

async function describeScdnDomainRealTimeByteHitRateDataWithOptions(request: DescribeScdnDomainRealTimeByteHitRateDataRequest, runtime: Util.RuntimeOptions): DescribeScdnDomainRealTimeByteHitRateDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDomainRealTimeByteHitRateData',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDomainRealTimeByteHitRateData(request: DescribeScdnDomainRealTimeByteHitRateDataRequest): DescribeScdnDomainRealTimeByteHitRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDomainRealTimeByteHitRateDataWithOptions(request, runtime);
}

model DescribeScdnDomainRealTimeHttpCodeDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainRealTimeHttpCodeDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  realTimeHttpCodeData?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: {
        realTimeCodeProportionData?: [ 
        {
          code?: string(name='Code'),
          count?: string(name='Count'),
          proportion?: string(name='Proportion'),
        }
      ](name='RealTimeCodeProportionData')
      }(name='Value'),
    }
  ](name='UsageData')
  }(name='RealTimeHttpCodeData'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainRealTimeHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainRealTimeHttpCodeDataResponseBody(name='body'),
}

async function describeScdnDomainRealTimeHttpCodeDataWithOptions(request: DescribeScdnDomainRealTimeHttpCodeDataRequest, runtime: Util.RuntimeOptions): DescribeScdnDomainRealTimeHttpCodeDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDomainRealTimeHttpCodeData',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDomainRealTimeHttpCodeData(request: DescribeScdnDomainRealTimeHttpCodeDataRequest): DescribeScdnDomainRealTimeHttpCodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDomainRealTimeHttpCodeDataWithOptions(request, runtime);
}

model DescribeScdnDomainRealTimeQpsDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainRealTimeQpsDataResponseBody = {
  data?: {
    qpsModel?: [ 
    {
      qps?: float(name='Qps'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='QpsModel')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnDomainRealTimeQpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainRealTimeQpsDataResponseBody(name='body'),
}

async function describeScdnDomainRealTimeQpsDataWithOptions(request: DescribeScdnDomainRealTimeQpsDataRequest, runtime: Util.RuntimeOptions): DescribeScdnDomainRealTimeQpsDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDomainRealTimeQpsData',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDomainRealTimeQpsData(request: DescribeScdnDomainRealTimeQpsDataRequest): DescribeScdnDomainRealTimeQpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDomainRealTimeQpsDataWithOptions(request, runtime);
}

model DescribeScdnDomainRealTimeReqHitRateDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainRealTimeReqHitRateDataResponseBody = {
  data?: {
    reqHitRateDataModel?: [ 
    {
      reqHitRate?: float(name='ReqHitRate'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='ReqHitRateDataModel')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnDomainRealTimeReqHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainRealTimeReqHitRateDataResponseBody(name='body'),
}

async function describeScdnDomainRealTimeReqHitRateDataWithOptions(request: DescribeScdnDomainRealTimeReqHitRateDataRequest, runtime: Util.RuntimeOptions): DescribeScdnDomainRealTimeReqHitRateDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDomainRealTimeReqHitRateData',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDomainRealTimeReqHitRateData(request: DescribeScdnDomainRealTimeReqHitRateDataRequest): DescribeScdnDomainRealTimeReqHitRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDomainRealTimeReqHitRateDataWithOptions(request, runtime);
}

model DescribeScdnDomainRealTimeSrcBpsDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainRealTimeSrcBpsDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  realTimeSrcBpsDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='RealTimeSrcBpsDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainRealTimeSrcBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainRealTimeSrcBpsDataResponseBody(name='body'),
}

async function describeScdnDomainRealTimeSrcBpsDataWithOptions(request: DescribeScdnDomainRealTimeSrcBpsDataRequest, runtime: Util.RuntimeOptions): DescribeScdnDomainRealTimeSrcBpsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDomainRealTimeSrcBpsData',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDomainRealTimeSrcBpsData(request: DescribeScdnDomainRealTimeSrcBpsDataRequest): DescribeScdnDomainRealTimeSrcBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDomainRealTimeSrcBpsDataWithOptions(request, runtime);
}

model DescribeScdnDomainRealTimeSrcTrafficDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainRealTimeSrcTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  realTimeSrcTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='RealTimeSrcTrafficDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainRealTimeSrcTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainRealTimeSrcTrafficDataResponseBody(name='body'),
}

async function describeScdnDomainRealTimeSrcTrafficDataWithOptions(request: DescribeScdnDomainRealTimeSrcTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeScdnDomainRealTimeSrcTrafficDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDomainRealTimeSrcTrafficData',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDomainRealTimeSrcTrafficData(request: DescribeScdnDomainRealTimeSrcTrafficDataRequest): DescribeScdnDomainRealTimeSrcTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDomainRealTimeSrcTrafficDataWithOptions(request, runtime);
}

model DescribeScdnDomainRealTimeTrafficDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainRealTimeTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  realTimeTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='RealTimeTrafficDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainRealTimeTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainRealTimeTrafficDataResponseBody(name='body'),
}

async function describeScdnDomainRealTimeTrafficDataWithOptions(request: DescribeScdnDomainRealTimeTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeScdnDomainRealTimeTrafficDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDomainRealTimeTrafficData',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDomainRealTimeTrafficData(request: DescribeScdnDomainRealTimeTrafficDataRequest): DescribeScdnDomainRealTimeTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDomainRealTimeTrafficDataWithOptions(request, runtime);
}

model DescribeScdnDomainRegionDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainRegionDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  value?: {
    regionProportionData?: [ 
    {
      avgObjectSize?: string(name='AvgObjectSize'),
      avgResponseRate?: string(name='AvgResponseRate'),
      avgResponseTime?: string(name='AvgResponseTime'),
      bps?: string(name='Bps'),
      bytesProportion?: string(name='BytesProportion'),
      proportion?: string(name='Proportion'),
      qps?: string(name='Qps'),
      region?: string(name='Region'),
      regionEname?: string(name='RegionEname'),
      reqErrRate?: string(name='ReqErrRate'),
      totalBytes?: string(name='TotalBytes'),
      totalQuery?: string(name='TotalQuery'),
    }
  ](name='RegionProportionData')
  }(name='Value'),
}

model DescribeScdnDomainRegionDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainRegionDataResponseBody(name='body'),
}

async function describeScdnDomainRegionDataWithOptions(request: DescribeScdnDomainRegionDataRequest, runtime: Util.RuntimeOptions): DescribeScdnDomainRegionDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDomainRegionData',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDomainRegionData(request: DescribeScdnDomainRegionDataRequest): DescribeScdnDomainRegionDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDomainRegionDataWithOptions(request, runtime);
}

model DescribeScdnDomainTopReferVisitRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  sortBy?: string(name='SortBy'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainTopReferVisitResponseBody = {
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  topReferList?: {
    referList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      referDetail?: string(name='ReferDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='ReferList')
  }(name='TopReferList'),
}

model DescribeScdnDomainTopReferVisitResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainTopReferVisitResponseBody(name='body'),
}

async function describeScdnDomainTopReferVisitWithOptions(request: DescribeScdnDomainTopReferVisitRequest, runtime: Util.RuntimeOptions): DescribeScdnDomainTopReferVisitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDomainTopReferVisit',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDomainTopReferVisit(request: DescribeScdnDomainTopReferVisitRequest): DescribeScdnDomainTopReferVisitResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDomainTopReferVisitWithOptions(request, runtime);
}

model DescribeScdnDomainTopUrlVisitRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  sortBy?: string(name='SortBy'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainTopUrlVisitResponseBody = {
  allUrlList?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='AllUrlList'),
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  url200List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url200List'),
  url300List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url300List'),
  url400List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url400List'),
  url500List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url500List'),
}

model DescribeScdnDomainTopUrlVisitResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainTopUrlVisitResponseBody(name='body'),
}

async function describeScdnDomainTopUrlVisitWithOptions(request: DescribeScdnDomainTopUrlVisitRequest, runtime: Util.RuntimeOptions): DescribeScdnDomainTopUrlVisitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDomainTopUrlVisit',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDomainTopUrlVisit(request: DescribeScdnDomainTopUrlVisitRequest): DescribeScdnDomainTopUrlVisitResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDomainTopUrlVisitWithOptions(request, runtime);
}

model DescribeScdnDomainTrafficDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  trafficDataPerInterval?: {
    dataModule?: [ 
    {
      httpTrafficValue?: string(name='HttpTrafficValue'),
      httpsTrafficValue?: string(name='HttpsTrafficValue'),
      timeStamp?: string(name='TimeStamp'),
      trafficValue?: string(name='TrafficValue'),
    }
  ](name='DataModule')
  }(name='TrafficDataPerInterval'),
}

model DescribeScdnDomainTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainTrafficDataResponseBody(name='body'),
}

async function describeScdnDomainTrafficDataWithOptions(request: DescribeScdnDomainTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeScdnDomainTrafficDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDomainTrafficData',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDomainTrafficData(request: DescribeScdnDomainTrafficDataRequest): DescribeScdnDomainTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDomainTrafficDataWithOptions(request, runtime);
}

model DescribeScdnDomainUvDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnDomainUvDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  uvDataInterval?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='UsageData')
  }(name='UvDataInterval'),
}

model DescribeScdnDomainUvDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnDomainUvDataResponseBody(name='body'),
}

async function describeScdnDomainUvDataWithOptions(request: DescribeScdnDomainUvDataRequest, runtime: Util.RuntimeOptions): DescribeScdnDomainUvDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnDomainUvData',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnDomainUvData(request: DescribeScdnDomainUvDataRequest): DescribeScdnDomainUvDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnDomainUvDataWithOptions(request, runtime);
}

model DescribeScdnRefreshQuotaRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeScdnRefreshQuotaResponseBody = {
  blockQuota?: string(name='BlockQuota'),
  dirQuota?: string(name='DirQuota'),
  dirRemain?: string(name='DirRemain'),
  preloadQuota?: string(name='PreloadQuota'),
  preloadRemain?: string(name='PreloadRemain'),
  requestId?: string(name='RequestId'),
  urlQuota?: string(name='UrlQuota'),
  urlRemain?: string(name='UrlRemain'),
  blockRemain?: string(name='blockRemain'),
}

model DescribeScdnRefreshQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnRefreshQuotaResponseBody(name='body'),
}

async function describeScdnRefreshQuotaWithOptions(request: DescribeScdnRefreshQuotaRequest, runtime: Util.RuntimeOptions): DescribeScdnRefreshQuotaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnRefreshQuota',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnRefreshQuota(request: DescribeScdnRefreshQuotaRequest): DescribeScdnRefreshQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnRefreshQuotaWithOptions(request, runtime);
}

model DescribeScdnRefreshTasksRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  objectPath?: string(name='ObjectPath'),
  objectType?: string(name='ObjectType'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceGroupId?: string(name='ResourceGroupId'),
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime'),
  status?: string(name='Status'),
  taskId?: string(name='TaskId'),
}

model DescribeScdnRefreshTasksResponseBody = {
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  tasks?: {
    task?: [ 
    {
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      objectPath?: string(name='ObjectPath'),
      objectType?: string(name='ObjectType'),
      process?: string(name='Process'),
      status?: string(name='Status'),
      taskId?: string(name='TaskId'),
    }
  ](name='Task')
  }(name='Tasks'),
  totalCount?: long(name='TotalCount'),
}

model DescribeScdnRefreshTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnRefreshTasksResponseBody(name='body'),
}

async function describeScdnRefreshTasksWithOptions(request: DescribeScdnRefreshTasksRequest, runtime: Util.RuntimeOptions): DescribeScdnRefreshTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.objectPath)) {
    query['ObjectPath'] = request.objectPath;
  }
  if (!Util.isUnset(request.objectType)) {
    query['ObjectType'] = request.objectType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnRefreshTasks',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnRefreshTasks(request: DescribeScdnRefreshTasksRequest): DescribeScdnRefreshTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnRefreshTasksWithOptions(request, runtime);
}

model DescribeScdnServiceRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeScdnServiceResponseBody = {
  bandwidth?: string(name='Bandwidth'),
  bandwidthValue?: string(name='BandwidthValue'),
  ccProtection?: string(name='CcProtection'),
  ccProtectionValue?: string(name='CcProtectionValue'),
  changingAffectTime?: string(name='ChangingAffectTime'),
  changingChargeType?: string(name='ChangingChargeType'),
  currentBandwidth?: string(name='CurrentBandwidth'),
  currentBandwidthValue?: string(name='CurrentBandwidthValue'),
  currentCcProtection?: string(name='CurrentCcProtection'),
  currentCcProtectionValue?: string(name='CurrentCcProtectionValue'),
  currentDDoSBasic?: string(name='CurrentDDoSBasic'),
  currentDDoSBasicValue?: string(name='CurrentDDoSBasicValue'),
  currentDomainCount?: string(name='CurrentDomainCount'),
  currentDomainCountValue?: string(name='CurrentDomainCountValue'),
  currentElasticProtection?: string(name='CurrentElasticProtection'),
  currentElasticProtectionValue?: string(name='CurrentElasticProtectionValue'),
  currentProtectType?: string(name='CurrentProtectType'),
  currentProtectTypeValue?: string(name='CurrentProtectTypeValue'),
  DDoSBasic?: string(name='DDoSBasic'),
  DDoSBasicValue?: string(name='DDoSBasicValue'),
  domainCount?: string(name='DomainCount'),
  domainCountValue?: string(name='DomainCountValue'),
  elasticProtection?: string(name='ElasticProtection'),
  elasticProtectionValue?: string(name='ElasticProtectionValue'),
  endTime?: string(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  internetChargeType?: string(name='InternetChargeType'),
  openTime?: string(name='OpenTime'),
  operationLocks?: {
    lockReason?: [ 
    {
      lockReason?: string(name='LockReason'),
    }
  ](name='LockReason')
  }(name='OperationLocks'),
  priceType?: string(name='PriceType'),
  pricingCycle?: string(name='PricingCycle'),
  protectType?: string(name='ProtectType'),
  protectTypeValue?: string(name='ProtectTypeValue'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnServiceResponseBody(name='body'),
}

async function describeScdnServiceWithOptions(request: DescribeScdnServiceRequest, runtime: Util.RuntimeOptions): DescribeScdnServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnService',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnService(request: DescribeScdnServiceRequest): DescribeScdnServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnServiceWithOptions(request, runtime);
}

model DescribeScdnTopDomainsByFlowRequest {
  endTime?: string(name='EndTime'),
  limit?: long(name='Limit'),
  ownerId?: long(name='OwnerId'),
  product?: string(name='Product'),
  startTime?: string(name='StartTime'),
}

model DescribeScdnTopDomainsByFlowResponseBody = {
  domainCount?: long(name='DomainCount'),
  domainOnlineCount?: long(name='DomainOnlineCount'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  topDomains?: {
    topDomain?: [ 
    {
      domainName?: string(name='DomainName'),
      maxBps?: long(name='MaxBps'),
      maxBpsTime?: string(name='MaxBpsTime'),
      rank?: long(name='Rank'),
      totalAccess?: long(name='TotalAccess'),
      totalTraffic?: string(name='TotalTraffic'),
      trafficPercent?: string(name='TrafficPercent'),
    }
  ](name='TopDomain')
  }(name='TopDomains'),
}

model DescribeScdnTopDomainsByFlowResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnTopDomainsByFlowResponseBody(name='body'),
}

async function describeScdnTopDomainsByFlowWithOptions(request: DescribeScdnTopDomainsByFlowRequest, runtime: Util.RuntimeOptions): DescribeScdnTopDomainsByFlowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.product)) {
    query['Product'] = request.product;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnTopDomainsByFlow',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnTopDomainsByFlow(request: DescribeScdnTopDomainsByFlowRequest): DescribeScdnTopDomainsByFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnTopDomainsByFlowWithOptions(request, runtime);
}

model DescribeScdnUserDomainsRequest {
  changeEndTime?: string(name='ChangeEndTime'),
  changeStartTime?: string(name='ChangeStartTime'),
  checkDomainShow?: boolean(name='CheckDomainShow'),
  domainName?: string(name='DomainName'),
  domainSearchType?: string(name='DomainSearchType'),
  domainStatus?: string(name='DomainStatus'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceGroupId?: string(name='ResourceGroupId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeScdnUserDomainsResponseBody = {
  domains?: {
    pageData?: [ 
    {
      cname?: string(name='Cname'),
      description?: string(name='Description'),
      domainName?: string(name='DomainName'),
      domainStatus?: string(name='DomainStatus'),
      gmtCreated?: string(name='GmtCreated'),
      gmtModified?: string(name='GmtModified'),
      resourceGroupId?: string(name='ResourceGroupId'),
      SSLProtocol?: string(name='SSLProtocol'),
      sandbox?: string(name='Sandbox'),
      sources?: {
        source?: [ 
        {
          content?: string(name='Content'),
          port?: int32(name='Port'),
          priority?: string(name='Priority'),
          type?: string(name='Type'),
        }
      ](name='Source')
      }(name='Sources'),
    }
  ](name='PageData')
  }(name='Domains'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeScdnUserDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnUserDomainsResponseBody(name='body'),
}

async function describeScdnUserDomainsWithOptions(request: DescribeScdnUserDomainsRequest, runtime: Util.RuntimeOptions): DescribeScdnUserDomainsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.changeEndTime)) {
    query['ChangeEndTime'] = request.changeEndTime;
  }
  if (!Util.isUnset(request.changeStartTime)) {
    query['ChangeStartTime'] = request.changeStartTime;
  }
  if (!Util.isUnset(request.checkDomainShow)) {
    query['CheckDomainShow'] = request.checkDomainShow;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.domainSearchType)) {
    query['DomainSearchType'] = request.domainSearchType;
  }
  if (!Util.isUnset(request.domainStatus)) {
    query['DomainStatus'] = request.domainStatus;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnUserDomains',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnUserDomains(request: DescribeScdnUserDomainsRequest): DescribeScdnUserDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnUserDomainsWithOptions(request, runtime);
}

model DescribeScdnUserProtectInfoRequest {
  ownerId?: long(name='OwnerId'),
}

model DescribeScdnUserProtectInfoResponseBody = {
  requestId?: string(name='RequestId'),
  serviceDDoS?: int32(name='ServiceDDoS'),
}

model DescribeScdnUserProtectInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnUserProtectInfoResponseBody(name='body'),
}

async function describeScdnUserProtectInfoWithOptions(request: DescribeScdnUserProtectInfoRequest, runtime: Util.RuntimeOptions): DescribeScdnUserProtectInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnUserProtectInfo',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnUserProtectInfo(request: DescribeScdnUserProtectInfoRequest): DescribeScdnUserProtectInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnUserProtectInfoWithOptions(request, runtime);
}

model DescribeScdnUserQuotaRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeScdnUserQuotaResponseBody = {
  blockQuota?: int32(name='BlockQuota'),
  blockRemain?: int32(name='BlockRemain'),
  domainQuota?: int32(name='DomainQuota'),
  preloadQuota?: int32(name='PreloadQuota'),
  preloadRemain?: int32(name='PreloadRemain'),
  refreshDirQuota?: int32(name='RefreshDirQuota'),
  refreshDirRemain?: int32(name='RefreshDirRemain'),
  refreshUrlQuota?: int32(name='RefreshUrlQuota'),
  refreshUrlRemain?: int32(name='RefreshUrlRemain'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnUserQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnUserQuotaResponseBody(name='body'),
}

async function describeScdnUserQuotaWithOptions(request: DescribeScdnUserQuotaRequest, runtime: Util.RuntimeOptions): DescribeScdnUserQuotaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnUserQuota',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnUserQuota(request: DescribeScdnUserQuotaRequest): DescribeScdnUserQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnUserQuotaWithOptions(request, runtime);
}

model DescribeScdnVerifyContentRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
}

model DescribeScdnVerifyContentResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeScdnVerifyContentResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScdnVerifyContentResponseBody(name='body'),
}

async function describeScdnVerifyContentWithOptions(request: DescribeScdnVerifyContentRequest, runtime: Util.RuntimeOptions): DescribeScdnVerifyContentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScdnVerifyContent',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScdnVerifyContent(request: DescribeScdnVerifyContentRequest): DescribeScdnVerifyContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScdnVerifyContentWithOptions(request, runtime);
}

model OpenScdnServiceRequest {
  bandwidth?: int32(name='Bandwidth'),
  ccProtection?: int32(name='CcProtection'),
  DDoSBasic?: int32(name='DDoSBasic'),
  domainCount?: int32(name='DomainCount'),
  elasticProtection?: int32(name='ElasticProtection'),
  endDate?: string(name='EndDate'),
  ownerId?: long(name='OwnerId'),
  protectType?: string(name='ProtectType'),
  securityToken?: string(name='SecurityToken'),
  startDate?: string(name='StartDate'),
}

model OpenScdnServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model OpenScdnServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenScdnServiceResponseBody(name='body'),
}

async function openScdnServiceWithOptions(request: OpenScdnServiceRequest, runtime: Util.RuntimeOptions): OpenScdnServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.ccProtection)) {
    query['CcProtection'] = request.ccProtection;
  }
  if (!Util.isUnset(request.DDoSBasic)) {
    query['DDoSBasic'] = request.DDoSBasic;
  }
  if (!Util.isUnset(request.domainCount)) {
    query['DomainCount'] = request.domainCount;
  }
  if (!Util.isUnset(request.elasticProtection)) {
    query['ElasticProtection'] = request.elasticProtection;
  }
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.protectType)) {
    query['ProtectType'] = request.protectType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenScdnService',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openScdnService(request: OpenScdnServiceRequest): OpenScdnServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openScdnServiceWithOptions(request, runtime);
}

model PreloadScdnObjectCachesRequest {
  area?: string(name='Area'),
  l2Preload?: boolean(name='L2Preload'),
  objectPath?: string(name='ObjectPath'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model PreloadScdnObjectCachesResponseBody = {
  preloadTaskId?: string(name='PreloadTaskId'),
  requestId?: string(name='RequestId'),
}

model PreloadScdnObjectCachesResponse = {
  headers: map[string]string(name='headers'),
  body: PreloadScdnObjectCachesResponseBody(name='body'),
}

async function preloadScdnObjectCachesWithOptions(request: PreloadScdnObjectCachesRequest, runtime: Util.RuntimeOptions): PreloadScdnObjectCachesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.area)) {
    query['Area'] = request.area;
  }
  if (!Util.isUnset(request.l2Preload)) {
    query['L2Preload'] = request.l2Preload;
  }
  if (!Util.isUnset(request.objectPath)) {
    query['ObjectPath'] = request.objectPath;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PreloadScdnObjectCaches',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function preloadScdnObjectCaches(request: PreloadScdnObjectCachesRequest): PreloadScdnObjectCachesResponse {
  var runtime = new Util.RuntimeOptions{};
  return preloadScdnObjectCachesWithOptions(request, runtime);
}

model RefreshScdnObjectCachesRequest {
  objectPath?: string(name='ObjectPath'),
  objectType?: string(name='ObjectType'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model RefreshScdnObjectCachesResponseBody = {
  refreshTaskId?: string(name='RefreshTaskId'),
  requestId?: string(name='RequestId'),
}

model RefreshScdnObjectCachesResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshScdnObjectCachesResponseBody(name='body'),
}

async function refreshScdnObjectCachesWithOptions(request: RefreshScdnObjectCachesRequest, runtime: Util.RuntimeOptions): RefreshScdnObjectCachesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.objectPath)) {
    query['ObjectPath'] = request.objectPath;
  }
  if (!Util.isUnset(request.objectType)) {
    query['ObjectType'] = request.objectType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RefreshScdnObjectCaches',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function refreshScdnObjectCaches(request: RefreshScdnObjectCachesRequest): RefreshScdnObjectCachesResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshScdnObjectCachesWithOptions(request, runtime);
}

model SetScdnBotInfoRequest {
  domainName?: string(name='DomainName'),
  enable?: string(name='Enable'),
  ownerId?: long(name='OwnerId'),
  status?: string(name='Status'),
}

model SetScdnBotInfoResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetScdnBotInfoResponse = {
  headers: map[string]string(name='headers'),
  body: SetScdnBotInfoResponseBody(name='body'),
}

async function setScdnBotInfoWithOptions(request: SetScdnBotInfoRequest, runtime: Util.RuntimeOptions): SetScdnBotInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetScdnBotInfo',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setScdnBotInfo(request: SetScdnBotInfoRequest): SetScdnBotInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return setScdnBotInfoWithOptions(request, runtime);
}

model SetScdnCcInfoRequest {
  ownerId?: long(name='OwnerId'),
  status?: string(name='Status'),
}

model SetScdnCcInfoResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetScdnCcInfoResponse = {
  headers: map[string]string(name='headers'),
  body: SetScdnCcInfoResponseBody(name='body'),
}

async function setScdnCcInfoWithOptions(request: SetScdnCcInfoRequest, runtime: Util.RuntimeOptions): SetScdnCcInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetScdnCcInfo',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setScdnCcInfo(request: SetScdnCcInfoRequest): SetScdnCcInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return setScdnCcInfoWithOptions(request, runtime);
}

model SetScdnDDoSInfoRequest {
  elasticBandwidth?: int32(name='ElasticBandwidth'),
  ownerId?: long(name='OwnerId'),
}

model SetScdnDDoSInfoResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetScdnDDoSInfoResponse = {
  headers: map[string]string(name='headers'),
  body: SetScdnDDoSInfoResponseBody(name='body'),
}

async function setScdnDDoSInfoWithOptions(request: SetScdnDDoSInfoRequest, runtime: Util.RuntimeOptions): SetScdnDDoSInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetScdnDDoSInfo',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setScdnDDoSInfo(request: SetScdnDDoSInfoRequest): SetScdnDDoSInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return setScdnDDoSInfoWithOptions(request, runtime);
}

model SetScdnDomainBizInfoRequest {
  bizName?: string(name='BizName'),
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
}

model SetScdnDomainBizInfoResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetScdnDomainBizInfoResponse = {
  headers: map[string]string(name='headers'),
  body: SetScdnDomainBizInfoResponseBody(name='body'),
}

async function setScdnDomainBizInfoWithOptions(request: SetScdnDomainBizInfoRequest, runtime: Util.RuntimeOptions): SetScdnDomainBizInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetScdnDomainBizInfo',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setScdnDomainBizInfo(request: SetScdnDomainBizInfoRequest): SetScdnDomainBizInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return setScdnDomainBizInfoWithOptions(request, runtime);
}

model SetScdnDomainCertificateRequest {
  certName?: string(name='CertName'),
  certType?: string(name='CertType'),
  domainName?: string(name='DomainName'),
  forceSet?: string(name='ForceSet'),
  ownerId?: long(name='OwnerId'),
  region?: string(name='Region'),
  SSLPri?: string(name='SSLPri'),
  SSLProtocol?: string(name='SSLProtocol'),
  SSLPub?: string(name='SSLPub'),
  securityToken?: string(name='SecurityToken'),
}

model SetScdnDomainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetScdnDomainCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: SetScdnDomainCertificateResponseBody(name='body'),
}

async function setScdnDomainCertificateWithOptions(request: SetScdnDomainCertificateRequest, runtime: Util.RuntimeOptions): SetScdnDomainCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certName)) {
    query['CertName'] = request.certName;
  }
  if (!Util.isUnset(request.certType)) {
    query['CertType'] = request.certType;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.forceSet)) {
    query['ForceSet'] = request.forceSet;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.SSLPri)) {
    query['SSLPri'] = request.SSLPri;
  }
  if (!Util.isUnset(request.SSLProtocol)) {
    query['SSLProtocol'] = request.SSLProtocol;
  }
  if (!Util.isUnset(request.SSLPub)) {
    query['SSLPub'] = request.SSLPub;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetScdnDomainCertificate',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setScdnDomainCertificate(request: SetScdnDomainCertificateRequest): SetScdnDomainCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setScdnDomainCertificateWithOptions(request, runtime);
}

model StartScdnDomainRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model StartScdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartScdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StartScdnDomainResponseBody(name='body'),
}

async function startScdnDomainWithOptions(request: StartScdnDomainRequest, runtime: Util.RuntimeOptions): StartScdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartScdnDomain',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startScdnDomain(request: StartScdnDomainRequest): StartScdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return startScdnDomainWithOptions(request, runtime);
}

model StopScdnDomainRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model StopScdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopScdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StopScdnDomainResponseBody(name='body'),
}

async function stopScdnDomainWithOptions(request: StopScdnDomainRequest, runtime: Util.RuntimeOptions): StopScdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopScdnDomain',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopScdnDomain(request: StopScdnDomainRequest): StopScdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopScdnDomainWithOptions(request, runtime);
}

model UpdateScdnDomainRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  securityToken?: string(name='SecurityToken'),
  sources?: string(name='Sources'),
}

model UpdateScdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateScdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateScdnDomainResponseBody(name='body'),
}

async function updateScdnDomainWithOptions(request: UpdateScdnDomainRequest, runtime: Util.RuntimeOptions): UpdateScdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sources)) {
    query['Sources'] = request.sources;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateScdnDomain',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateScdnDomain(request: UpdateScdnDomainRequest): UpdateScdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateScdnDomainWithOptions(request, runtime);
}

model VerifyScdnDomainOwnerRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  verifyType?: string(name='VerifyType'),
}

model VerifyScdnDomainOwnerResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model VerifyScdnDomainOwnerResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyScdnDomainOwnerResponseBody(name='body'),
}

async function verifyScdnDomainOwnerWithOptions(request: VerifyScdnDomainOwnerRequest, runtime: Util.RuntimeOptions): VerifyScdnDomainOwnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.verifyType)) {
    query['VerifyType'] = request.verifyType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VerifyScdnDomainOwner',
    version = '2017-11-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function verifyScdnDomainOwner(request: VerifyScdnDomainOwnerRequest): VerifyScdnDomainOwnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyScdnDomainOwnerWithOptions(request, runtime);
}

