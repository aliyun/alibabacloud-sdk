/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'rds-data';
  @version = '2022-03-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model BatchExecuteStatementResult {
  generatedFieldsList?: [[
    Field
  ]  ](name='GeneratedFieldsList'),
}

model BeginTransactionResult {
  transactionId?: string(name='TransactionId'),
}

model ColumnMetadata {
  arrayBaseColumnType?: int32(name='ArrayBaseColumnType'),
  isAutoIncrement?: boolean(name='IsAutoIncrement'),
  isCaseSensitive?: boolean(name='IsCaseSensitive'),
  isCurrency?: boolean(name='IsCurrency'),
  isSigned?: boolean(name='IsSigned'),
  label?: string(name='Label'),
  name?: string(name='Name'),
  nullable?: int32(name='Nullable'),
  precision?: int32(name='Precision'),
  scale?: int32(name='Scale'),
  schemaName?: string(name='SchemaName'),
  tableName?: string(name='TableName'),
  type?: int32(name='Type'),
  typeName?: string(name='TypeName'),
}

model CommitTransactionResult {
  transactionStatus?: string(name='TransactionStatus'),
}

model DeleteResult {
  numberOfRecordsUpdated?: long(name='NumberOfRecordsUpdated'),
}

model ExecuteStatementResult {
  columnMetadata?: [
    ColumnMetadata
  ](name='ColumnMetadata'),
  formattedRecords?: string(name='FormattedRecords'),
  generatedFields?: [
    Field
  ](name='GeneratedFields'),
  numberOfRecordsUpdated?: long(name='NumberOfRecordsUpdated'),
  records?: [[
    Field
  ]  ](name='Records'),
}

model Field {
  arrayValue?: string(name='ArrayValue'),
  blobValue?: string(name='BlobValue'),
  booleanValue?: boolean(name='BooleanValue'),
  isNull?: boolean(name='IsNull'),
  longValue?: long(name='LongValue'),
  stringValue?: string(name='StringValue'),
}

model InsertListResult {
  autoIncrementKeys?: [ long ](name='AutoIncrementKeys'),
  numberOfRecordsUpdated?: long(name='NumberOfRecordsUpdated'),
}

model InsertResult {
  autoIncrementKey?: long(name='AutoIncrementKey'),
  numberOfRecordsUpdated?: long(name='NumberOfRecordsUpdated'),
}

model ResultSetOptions {
  decimalReturnType?: string(name='DecimalReturnType'),
  longReturnType?: string(name='LongReturnType'),
}

model RollbackTransactionResult {
  transactionStatus?: string(name='TransactionStatus'),
}

model SelectResult {
  records?: [ map[string]any ](name='Records'),
}

model Selector {
  eq?: string(name='Eq'),
  ge?: string(name='Ge'),
  gt?: string(name='Gt'),
  le?: string(name='Le'),
  like?: string(name='Like'),
  lt?: string(name='Lt'),
  ne?: string(name='Ne'),
}

model SqlParameter {
  name?: string(name='Name'),
  typeHint?: string(name='TypeHint'),
  value?: Field(name='Value'),
}

model UpdateResult {
  numberOfRecordsUpdated?: long(name='NumberOfRecordsUpdated'),
}

model BatchExecuteStatementRequest {
  database?: string(name='Database', example='test', position='Body'),
  parameterSets?: [[
    SqlParameter
  ]  ](name='ParameterSets', shrink='json', position='Body'),
  resourceArn: string(name='ResourceArn', position='Body'),
  secretArn: string(name='SecretArn', example='acs:rds-api:cn-hangzhou:1266348003******:rds-db-credentials/mySecret-Uy****', position='Body'),
  sql: string(name='Sql', example='insert into users(name) values(:name)', position='Body'),
  transactionId?: string(name='TransactionId', example='8609****-94e1-45ce-8e25-354e3dd8****', position='Body'),
}

model BatchExecuteStatementResponseBody = {
  code?: string(name='Code', example='200'),
  data?: BatchExecuteStatementResult(name='Data'),
  message?: string(name='Message', example='There is an error in the call.'),
  requestId?: string(name='RequestId', example='CDAEE474-87E5-5AE3-A534-922F90D5867D'),
  success?: boolean(name='Success', example='true'),
}

model BatchExecuteStatementResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchExecuteStatementResponseBody(name='body'),
}

async function batchExecuteStatement(request: BatchExecuteStatementRequest): BatchExecuteStatementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchExecuteStatement', 'POST', '/', 'json', true, 'form', request);
}

model BeginTransactionRequest {
  database: string(name='Database', example='test', position='Body'),
  resourceArn: string(name='ResourceArn', position='Body'),
  secretArn: string(name='SecretArn', example='acs:rds:cn-hangzhou:1335786916******:rds-db-credent****/zha***Test03-21****', position='Body'),
}

model BeginTransactionResponseBody = {
  code?: string(name='Code', example='200'),
  data?: BeginTransactionResult(name='Data'),
  message?: string(name='Message', example='There is an error in the call.'),
  requestId?: string(name='RequestId', example='4FD736C2-D774-5ACF-8366-8A72114BE7F9'),
  success?: boolean(name='Success', example='true'),
}

model BeginTransactionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BeginTransactionResponseBody(name='body'),
}

async function beginTransaction(request: BeginTransactionRequest): BeginTransactionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BeginTransaction', 'POST', '/', 'json', true, 'form', request);
}

model CommitTransactionRequest {
  resourceArn: string(name='ResourceArn', position='Body'),
  secretArn: string(name='SecretArn', example='acs:rds-api:cn-hangzhou:1266348003******:rds-db-credentials/mySecret-Uy****', position='Body'),
  transactionId: string(name='TransactionId', example='8609****-94e1-45ce-8e25-354e3dd8****', position='Body'),
}

model CommitTransactionResponseBody = {
  code?: string(name='Code', example='200'),
  data?: CommitTransactionResult(name='Data'),
  message?: string(name='Message', example='There is an error in the call.'),
  requestId?: string(name='RequestId', example='9689CF67-B653-5A0F-B9E3-3CC6BBD580ED'),
  success?: boolean(name='Success', example='true'),
}

model CommitTransactionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CommitTransactionResponseBody(name='body'),
}

async function commitTransaction(request: CommitTransactionRequest): CommitTransactionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CommitTransaction', 'POST', '/', 'json', true, 'form', request);
}

model DeleteRequest {
  database: string(name='Database', example='photoview', position='Body'),
  filter: map[string]Selector(name='Filter', shrink='json', position='Body'),
  resourceArn: string(name='ResourceArn', position='Body'),
  secretArn: string(name='SecretArn', example='acs:rds:cn-hangzhou:1335786916******:rds-db-credent****/zha***Test03-21****', position='Body'),
  table: string(name='Table', example='users', position='Body'),
  transactionId?: string(name='TransactionId', example='8609****-94e1-45ce-8e25-354e3dd8****', position='Body'),
}

model DeleteResponseBody = {
  code?: string(name='Code', example='200'),
  data?: DeleteResult(name='Data'),
  message?: string(name='Message', example='There is an error in the call.'),
  requestId?: string(name='RequestId', example='4FD736C2-D774-5ACF-8366-8A72114BE7F9'),
  success?: boolean(name='Success', example='true'),
}

model DeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteResponseBody(name='body'),
}

async function delete(request: DeleteRequest): DeleteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Delete', 'POST', '/', 'json', true, 'form', request);
}

model ExecuteStatementRequest {
  continueAfterTimeout?: boolean(name='ContinueAfterTimeout', example='true', position='Body'),
  database: string(name='Database', example='test', position='Body'),
  formatRecordsAs?: string(name='FormatRecordsAs', example='JSON', position='Body'),
  includeResultMetadata?: boolean(name='IncludeResultMetadata', example='true', position='Body'),
  parameters?: [
    SqlParameter
  ](name='Parameters', shrink='json', position='Body'),
  resourceArn: string(name='ResourceArn', position='Body'),
  resultSetOptions?: {
    decimalReturnType?: string(name='DecimalReturnType', example='STRING'),
    longReturnType?: string(name='LongReturnType', example='STRING'),
  }(name='ResultSetOptions', shrink='json', position='Body'),
  secretArn: string(name='SecretArn', example='acs:rds-api:cn-hangzhou:1266348003******:rds-db-credentials/mySecret-Uy****', position='Body'),
  sql: string(name='Sql', example='select * from users', position='Body'),
  transactionId?: string(name='TransactionId', example='8609****-94e1-45ce-8e25-354e3dd8****', position='Body'),
}

model ExecuteStatementResponseBody = {
  code?: string(name='Code', example='200'),
  data?: ExecuteStatementResult(name='Data'),
  message?: string(name='Message', example='There is an error in the call.'),
  requestId?: string(name='RequestId', example='CDAEE474-87E5-5AE3-A534-922F90D5867D'),
  success?: boolean(name='Success', example='true'),
}

model ExecuteStatementResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExecuteStatementResponseBody(name='body'),
}

async function executeStatement(request: ExecuteStatementRequest): ExecuteStatementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteStatement', 'POST', '/', 'json', true, 'form', request);
}

model InsertRequest {
  database?: string(name='Database', example='photoview', position='Body'),
  record?: map[string]any(name='Record', shrink='json', position='Body'),
  resourceArn: string(name='ResourceArn', position='Body'),
  secretArn: string(name='SecretArn', example='acs:rds-api:cn-hangzhou:1266348003******:rds-db-credentials/mySecret-Uy****', position='Body'),
  table: string(name='Table', example='users', position='Body'),
  transactionId?: string(name='TransactionId', example='8609****-94e1-45ce-8e25-354e3dd8****', position='Body'),
}

model InsertResponseBody = {
  code?: string(name='Code', example='200'),
  data?: InsertResult(name='Data'),
  message?: string(name='Message', example='There is an error in the call'),
  requestId?: string(name='RequestId', example='9689CF67-B653-5A0F-B9E3-3CC6BBD580ED'),
  success?: boolean(name='Success', example='true'),
}

model InsertResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InsertResponseBody(name='body'),
}

async function insert(request: InsertRequest): InsertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Insert', 'POST', '/', 'json', true, 'form', request);
}

model InsertListRequest {
  database?: string(name='Database', example='test_db', position='Body'),
  records?: [ map[string]any ](name='Records', shrink='json', position='Body'),
  resourceArn: string(name='ResourceArn', position='Body'),
  secretArn: string(name='SecretArn', example='acs:rds-api:cn-hangzhou:1266348003******:rds-db-credenti***/mySecret-Uy****', position='Body'),
  table: string(name='Table', example='user', position='Body'),
  transactionId?: string(name='TransactionId', example='8609****-94e1-45ce-8e25-354e3dd8****', position='Body'),
}

model InsertListResponseBody = {
  code?: string(name='Code', example='200'),
  data?: InsertListResult(name='Data'),
  message?: string(name='Message', example='There is an error in the call.'),
  requestId?: string(name='RequestId', example='D2FEE6D7-DCA6-57B4-946A-9E670B773518'),
  success?: boolean(name='Success', example='true'),
}

model InsertListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InsertListResponseBody(name='body'),
}

async function insertList(request: InsertListRequest): InsertListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InsertList', 'POST', '/', 'json', true, 'form', request);
}

model RollbackTransactionRequest {
  resourceArn: string(name='ResourceArn', position='Body'),
  secretArn: string(name='SecretArn', example='acs:rds-api:cn-hangzhou:1266348003******:rds-db-credenti***/mySecret-Uy****', position='Body'),
  transactionId: string(name='TransactionId', example='8609****-94e1-45ce-8e25-354e3dd8****', position='Body'),
}

model RollbackTransactionResponseBody = {
  code?: string(name='Code', example='200'),
  data?: RollbackTransactionResult(name='Data'),
  message?: string(name='Message', example='There is an error in the call.'),
  requestId?: string(name='RequestId', example='D2FEE6D7-DCA6-57B4-946A-9E670B773518'),
  success?: boolean(name='Success', example='true'),
}

model RollbackTransactionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RollbackTransactionResponseBody(name='body'),
}

async function rollbackTransaction(request: RollbackTransactionRequest): RollbackTransactionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RollbackTransaction', 'POST', '/', 'json', true, 'form', request);
}

model SelectRequest {
  database: string(name='Database', example='photoview', position='Body'),
  filter: map[string]Selector(name='Filter', shrink='json', position='Body'),
  pageNumber?: long(name='PageNumber', example='1', position='Body'),
  pageSize?: long(name='PageSize', example='10', position='Body'),
  resourceArn: string(name='ResourceArn', position='Body'),
  secretArn: string(name='SecretArn', example='acs:rds-api:cn-hangzhou:1266348003******:rds-db-credentials/mySecret-Uy****', position='Body'),
  table: string(name='Table', example='users', position='Body'),
  transactionId?: string(name='TransactionId', example='8609****-94e1-45ce-8e25-354e3dd8****', position='Body'),
}

model SelectResponseBody = {
  code?: string(name='Code', example='200'),
  data?: SelectResult(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='CDAEE474-87E5-5AE3-A534-922F90D5867D'),
  success?: boolean(name='Success', example='true'),
}

model SelectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SelectResponseBody(name='body'),
}

async function select(request: SelectRequest): SelectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Select', 'POST', '/', 'json', true, 'form', request);
}

model UpdateRequest {
  database: string(name='Database', example='photoview', position='Body'),
  filter: map[string]Selector(name='Filter', shrink='json', position='Body'),
  record?: map[string]any(name='Record', shrink='json', position='Body'),
  resourceArn: string(name='ResourceArn', example='acs:rds:cn-hangzhou:1484143351265396:dbinstance/rm-bp1b8h01q6t19p8s6', position='Body'),
  secretArn: string(name='SecretArn', example='acs:rds-api:cn-hangzhou:1266348003******:rds-db-credentials/mySecret-Uy****', position='Body'),
  table: string(name='Table', example='users', position='Body'),
  transactionId?: string(name='TransactionId', example='8609****-94e1-45ce-8e25-354e3dd8****', position='Body'),
}

model UpdateResponseBody = {
  code?: string(name='Code', example='200'),
  data?: UpdateResult(name='Data'),
  message?: string(name='Message', example='There is an error in the call.'),
  requestId?: string(name='RequestId', example='9689CF67-B653-5A0F-B9E3-3CC6BBD580ED'),
  success?: boolean(name='Success', example='true'),
}

model UpdateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateResponseBody(name='body'),
}

async function update(request: UpdateRequest): UpdateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Update', 'POST', '/', 'json', true, 'form', request);
}

