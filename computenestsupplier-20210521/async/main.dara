/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ComputeNestSupplier';
  @version = '2021-05-21';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddServiceSharedAccountsRequest {
  clientToken?: string(name='ClientToken', example='BBBAAfu+XtuBE55iRLHEYYuojI4=', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceId: string(name='ServiceId', example='service-63b8a060e9d54cxxxxxx', position='Query'),
  sharedAccounts: [ 
    {
      permission: string(name='Permission', example='Accessible'),
      userAliUid: string(name='UserAliUid', example='123456'),
    }
  ](name='SharedAccounts', position='Query'),
  type?: string(name='Type', example='SharedAccount', position='Query'),
}

model AddServiceSharedAccountsResponseBody = {
  requestId?: string(name='RequestId', example='E2815213-EA4F-5759-8EA1-56DD051BB3FD'),
}

model AddServiceSharedAccountsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddServiceSharedAccountsResponseBody(name='body'),
}

async function addServiceSharedAccounts(request: AddServiceSharedAccountsRequest): AddServiceSharedAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddServiceSharedAccounts', 'POST', '/', 'json', false, 'json', request);
}

model ContinueDeployServiceInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  parameters?: string(name='Parameters', example='{"NodeCount": 3, "SystemDiskSize": 40, "InstancePassword": "******"}', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceInstanceId: string(name='ServiceInstanceId', example='si-0e6fca6a51a54420****', position='Query'),
}

model ContinueDeployServiceInstanceResponseBody = {
  dryRunResult?: {
    parametersAllowedToBeModified?: [ string ](name='ParametersAllowedToBeModified'),
    parametersConditionallyAllowedToBeModified?: [ string ](name='ParametersConditionallyAllowedToBeModified'),
    parametersNotAllowedToBeModified?: [ string ](name='ParametersNotAllowedToBeModified'),
  }(name='DryRunResult'),
  requestId?: string(name='RequestId', example='82DF27ED-E538-5AC0-A11C-39334A873189'),
  serviceInstanceId?: string(name='ServiceInstanceId', example='si-d6ab3a63ccbb4b17****'),
}

model ContinueDeployServiceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ContinueDeployServiceInstanceResponseBody(name='body'),
}

async function continueDeployServiceInstance(request: ContinueDeployServiceInstanceRequest): ContinueDeployServiceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ContinueDeployServiceInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateArtifactRequest {
  artifactId?: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx', position='Query'),
  artifactProperty?: {
    commodityCode?: string(name='CommodityCode', example='cmjj00xxxx'),
    commodityVersion?: string(name='CommodityVersion', example='V1.0'),
    fileScriptMetadata?: string(name='FileScriptMetadata', example='{\\"WorkDir\\":\\"/root\\",\\"CommandType\\":\\"RunShellScript\\",\\"Platform\\":\\"Linux\\",\\"Script\\":\\"echo hello\\"}'),
    imageId?: string(name='ImageId', example='m-0xij191j9cuev6xxxxxx'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    repoId?: string(name='RepoId'),
    repoName?: string(name='RepoName'),
    scriptMetadata?: string(name='ScriptMetadata', example='{"ScriptMetadata":"{\\"CommandType\\":\\"RunShellScript\\",\\"Platform\\":\\"Linux\\",\\"Script\\":\\"ls\\"}"}'),
    tag?: string(name='Tag'),
    url?: string(name='Url', example='https://service-info-private.oss-cn-hangzhou.aliyuncs.com/1309208528xxxxxx/template/2e1ce8fc-xxxx-481c-9e8e-789ba9db487d.json'),
  }(name='ArtifactProperty', shrink='json', position='Query'),
  artifactType: string(name='ArtifactType', example='EcsImage', position='Query'),
  description?: string(name='Description', position='Query'),
  name: string(name='Name', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  supportRegionIds?: [ string ](name='SupportRegionIds', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  versionName: string(name='VersionName', example='v1', position='Query'),
}

model CreateArtifactResponseBody = {
  artifactId?: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx'),
  artifactProperty?: string(name='ArtifactProperty', example='{\\"CommodityCode\\":\\"cmjj0005xxxx\\",\\"CommodityVersion\\":\\"V2022xxxx\\"}'),
  artifactType?: string(name='ArtifactType', example='EcsImage'),
  artifactVersion?: string(name='ArtifactVersion', example='2'),
  description?: string(name='Description'),
  gmtModified?: string(name='GmtModified', example='2022-11-11T12:00:00Z'),
  maxVersion?: long(name='MaxVersion', example='1'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId', example='B1A0198B-F316-1B72-B8DD-28B6F6D6XXXX'),
  status?: string(name='Status', example='Created'),
  supportRegionIds?: string(name='SupportRegionIds', example='[
			"cn-beijing",
			"cn-hangzhou",
			"cn-shanghai"
		]'),
  versionName?: string(name='VersionName', example='v1'),
}

model CreateArtifactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateArtifactResponseBody(name='body'),
}

async function createArtifact(request: CreateArtifactRequest): CreateArtifactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateArtifact', 'POST', '/', 'json', false, 'json', request);
}

model CreateServiceRequest {
  alarmMetadata?: string(name='AlarmMetadata', position='Query'),
  approvalType?: string(name='ApprovalType', example='Manual', position='Query'),
  buildParameters?: string(name='BuildParameters', position='Query'),
  clientToken?: string(name='ClientToken', example='10CM943JP0EN9D51H', position='Query'),
  deployMetadata?: string(name='DeployMetadata', position='Query'),
  deployType: string(name='DeployType', example='ros', position='Query'),
  duration?: long(name='Duration', example='0', position='Query'),
  isSupportOperated?: boolean(name='IsSupportOperated', example='false', position='Query'),
  licenseMetadata?: string(name='LicenseMetadata', position='Query'),
  logMetadata?: string(name='LogMetadata', position='Query'),
  operationMetadata?: string(name='OperationMetadata', example='{\\"PrometheusConfigMap\\":{\\"New_Vpc_Ack_And_Jumpserver\\":{}}}', position='Query'),
  policyNames?: string(name='PolicyNames', example='policyName1, policyName2', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resellable?: boolean(name='Resellable', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  serviceId?: string(name='ServiceId', example='service-0e6fca6a51a544xxxxxx', position='Query'),
  serviceInfo?: [ 
    {
      agreements?: [ 
        {
          name?: string(name='Name'),
          url?: string(name='Url'),
        }
      ](name='Agreements'),
      image?: string(name='Image', example='http://img.tidb.oss.url'),
      locale: string(name='Locale', example='zh-CN'),
      longDescriptionUrl?: string(name='LongDescriptionUrl'),
      name: string(name='Name', example='TiDB Database'),
      shortDescription?: string(name='ShortDescription'),
    }
  ](name='ServiceInfo', position='Query'),
  serviceType?: string(name='ServiceType', example='private', position='Query'),
  shareType?: string(name='ShareType', example='Public', position='Query'),
  sourceServiceId?: string(name='SourceServiceId', position='Query'),
  sourceServiceVersion?: string(name='SourceServiceVersion', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='Usage'),
      value?: string(name='Value', example='Web'),
    }
  ](name='Tag', position='Query'),
  tenantType?: string(name='TenantType', example='SingleTenant', position='Query'),
  trialDuration?: long(name='TrialDuration', example='7', position='Query'),
  upgradeMetadata?: string(name='UpgradeMetadata', example='{\\"Description\\":\\"xxx\\",\\"SupportRollback\\":true,\\"SupportUpgradeFromVersions\\":[],\\"UpgradeComponents\\":[\\"Configuration\\"]}', position='Query'),
  versionName?: string(name='VersionName', example='Draft', position='Query'),
}

model CreateServiceResponseBody = {
  requestId?: string(name='RequestId', example='4DB0F536-B3BE-4F0D-BD29-E83FB56D550C'),
  serviceId?: string(name='ServiceId', example='service-0e6fca6a51a544xxxxxx'),
  status?: string(name='Status', example='Created'),
  version?: string(name='Version', example='draft'),
}

model CreateServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServiceResponseBody(name='body'),
}

async function createService(request: CreateServiceRequest): CreateServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateService', 'POST', '/', 'json', false, 'json', request);
}

model CreateServiceInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  name?: string(name='Name', example='TestName', position='Query'),
  parameters?: map[string]any(name='Parameters', example='{"NodeCount": 3, "SystemDiskSize": 40, "InstancePassword": "******"}', shrink='json', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzuqyxxxxxx', position='Query'),
  serviceId: string(name='ServiceId', example='service-0e6fca6a51a54420****', position='Query'),
  serviceVersion?: string(name='ServiceVersion', example='1', position='Query'),
  specificationName?: string(name='SpecificationName', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tag', position='Query'),
  templateName?: string(name='TemplateName', position='Query'),
  userId?: string(name='UserId', example='1563457855xxxxxx', position='Query'),
}

model CreateServiceInstanceResponseBody = {
  requestId?: string(name='RequestId', example='4DB0F536-B3BE-4F0D-BD29-E83FB56D****'),
  serviceInstanceId?: string(name='ServiceInstanceId', example='si-d6ab3a63ccbb4b17****'),
  status?: string(name='Status', example='Created'),
}

model CreateServiceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServiceInstanceResponseBody(name='body'),
}

async function createServiceInstance(request: CreateServiceInstanceRequest): CreateServiceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServiceInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteArtifactRequest {
  artifactId: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx', position='Query'),
  artifactVersion?: string(name='ArtifactVersion', example='2', position='Query'),
}

model DeleteArtifactResponseBody = {
  requestId?: string(name='RequestId', example='B1A0198B-F316-1B72-B8DD-28B6F6D6XXXX'),
}

model DeleteArtifactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteArtifactResponseBody(name='body'),
}

async function deleteArtifact(request: DeleteArtifactRequest): DeleteArtifactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteArtifact', 'POST', '/', 'json', false, 'json', request);
}

model DeleteServiceRequest {
  clientToken?: string(name='ClientToken', example='10CM943JP0EN9D51H', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceId: string(name='ServiceId', example='service-0e6fca6a51a54420****', position='Query'),
  serviceVersion: string(name='ServiceVersion', example='2', position='Query'),
}

model DeleteServiceResponseBody = {
  requestId?: string(name='RequestId', example='4DB0F536-B3BE-4F0D-BD29-E83FB56D****'),
}

model DeleteServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteServiceResponseBody(name='body'),
}

async function deleteService(request: DeleteServiceRequest): DeleteServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteService', 'POST', '/', 'json', false, 'json', request);
}

model DeleteServiceInstancesRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceInstanceId: [ string ](name='ServiceInstanceId', position='Query'),
}

model DeleteServiceInstancesResponseBody = {
  requestId?: string(name='RequestId', example='DB140E67-D75F-5585-946E-41D8DC8F4E00'),
}

model DeleteServiceInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteServiceInstancesResponseBody(name='body'),
}

async function deleteServiceInstances(request: DeleteServiceInstancesRequest): DeleteServiceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteServiceInstances', 'POST', '/', 'json', false, 'json', request);
}

model DeployServiceInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceInstanceId: string(name='ServiceInstanceId', example='si-0e6fca6a51a54420****', position='Query'),
}

model DeployServiceInstanceResponseBody = {
  requestId?: string(name='RequestId', example='B8A6AEA6-0D8F-589A-A7FF-B44FD842456E'),
}

model DeployServiceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeployServiceInstanceResponseBody(name='body'),
}

async function deployServiceInstance(request: DeployServiceInstanceRequest): DeployServiceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeployServiceInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetArtifactRequest {
  artifactId?: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx', position='Query'),
  artifactName?: string(name='ArtifactName', example='gpu-test', position='Query'),
  artifactVersion?: string(name='ArtifactVersion', example='1', position='Query'),
}

model GetArtifactResponseBody = {
  artifactId?: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx'),
  artifactProperty?: string(name='ArtifactProperty', example='{\\"CommodityCode\\":\\"cmjj0005xxxx\\",\\"CommodityVersion\\":\\"V2022xxxx\\"}'),
  artifactType?: string(name='ArtifactType', example='EcsImage'),
  artifactVersion?: string(name='ArtifactVersion', example='2'),
  description?: string(name='Description'),
  gmtModified?: string(name='GmtModified', example='2022-10-20T02:19:55Z'),
  maxVersion?: long(name='MaxVersion', example='2'),
  name?: string(name='Name'),
  progress?: string(name='Progress', example='100'),
  requestId?: string(name='RequestId', example='B1A0198B-F316-1B72-B8DD-28B6F6D6XXXX'),
  resourceGroupId?: string(name='ResourceGroupId'),
  status?: string(name='Status', example='Available'),
  supportRegionIds?: string(name='SupportRegionIds', example='["cn-hangzhou","cn-beijing"]'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
  versionName?: string(name='VersionName', example='v1'),
}

model GetArtifactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetArtifactResponseBody(name='body'),
}

async function getArtifact(request: GetArtifactRequest): GetArtifactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetArtifact', 'POST', '/', 'json', false, 'json', request);
}

model GetArtifactRepositoryCredentialsRequest {
  artifactType: string(name='ArtifactType', example='File', position='Query'),
  deployRegionId?: string(name='DeployRegionId', example='cn-hangzhou', position='Query'),
}

model GetArtifactRepositoryCredentialsResponseBody = {
  availableResources?: [ 
    {
      path?: string(name='Path', example='"/xxx/"'),
      regionId?: string(name='RegionId', example='oss-cn-hangzhou'),
      repositoryName?: string(name='RepositoryName', example='computenest-artifacts-draft-cn-hangzhou'),
    }
  ](name='AvailableResources'),
  credentials?: {
    accessKeyId?: string(name='AccessKeyId', example='STS.xxx'),
    accessKeySecret?: string(name='AccessKeySecret', example='xxx'),
    password?: string(name='Password', example='eyJ0aW1lIjoiMTUyNjU0OTc5:0705733****'),
    securityToken?: string(name='SecurityToken', example='xxx'),
    username?: string(name='Username', example='xxx'),
  }(name='Credentials'),
  expireDate?: string(name='ExpireDate', example='1526549792000'),
  requestId?: string(name='RequestId', example='94E89857-B994-44B6-9C4F-DBD200E9XXXX'),
}

model GetArtifactRepositoryCredentialsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetArtifactRepositoryCredentialsResponseBody(name='body'),
}

async function getArtifactRepositoryCredentials(request: GetArtifactRepositoryCredentialsRequest): GetArtifactRepositoryCredentialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetArtifactRepositoryCredentials', 'POST', '/', 'json', false, 'json', request);
}

model GetServiceRequest {
  filterAliUid?: boolean(name='FilterAliUid', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceId: string(name='ServiceId', example='service-4ee86df83fd948******', position='Query'),
  serviceVersion?: string(name='ServiceVersion', example='1', position='Query'),
  sharedAccountType?: string(name='SharedAccountType', position='Query'),
  showDetail?: [ string ](name='ShowDetail', position='Query'),
}

model GetServiceResponseBody = {
  alarmMetadata?: string(name='AlarmMetadata'),
  approvalType?: string(name='ApprovalType', example='Manual'),
  billEntityMappings?: {
    mappingConfig?: [ 
      {
        mappings?: [ 
          {
            billCode?: string(name='BillCode'),
            entity?: string(name='Entity'),
            meteringAssist?: string(name='MeteringAssist'),
          }
        ](name='Mappings'),
        predefinedParameters?: string(name='PredefinedParameters'),
        templateName?: string(name='TemplateName'),
      }
    ](name='MappingConfig'),
    type?: string(name='Type'),
  }(name='BillEntityMappings'),
  buildInfo?: string(name='BuildInfo'),
  categories?: string(name='Categories'),
  commodity?: {
    chargeType?: string(name='ChargeType'),
    commodityCode?: string(name='CommodityCode'),
    components?: [ string ](name='Components'),
    cssMetadata?: {
      componentsMappings?: [ 
        {
          mappings?: map[string]string(name='Mappings'),
          templateName?: string(name='TemplateName'),
        }
      ](name='ComponentsMappings'),
    }(name='CssMetadata'),
    marketplaceMetadata?: {
      meteringEntityExtraInfos?: [ 
        {
          entityId?: string(name='EntityId'),
          metricName?: string(name='MetricName'),
          promql?: string(name='Promql'),
          type?: string(name='Type'),
        }
      ](name='MeteringEntityExtraInfos'),
      meteringEntityMappings?: [ 
        {
          entityIds?: string(name='EntityIds'),
          specificationName?: string(name='SpecificationName'),
          templateName?: string(name='TemplateName'),
        }
      ](name='MeteringEntityMappings'),
      specificationMappings?: [ 
        {
          specificationCode?: string(name='SpecificationCode'),
          specificationName?: string(name='SpecificationName'),
          templateName?: string(name='TemplateName'),
          trialType?: string(name='TrialType'),
        }
      ](name='SpecificationMappings'),
    }(name='MarketplaceMetadata'),
    meteringEntities?: [ 
      {
        entityId?: string(name='EntityId'),
        name?: string(name='Name'),
      }
    ](name='MeteringEntities'),
    orderTime?: map[string][ string ](name='OrderTime'),
    saasBoostMetadata?: string(name='SaasBoostMetadata'),
    specifications?: [ 
      {
        code?: string(name='Code'),
        name?: string(name='Name'),
        times?: [ string ](name='Times'),
      }
    ](name='Specifications'),
    type?: string(name='Type'),
  }(name='Commodity'),
  commodityCode?: string(name='CommodityCode', example='cmjj00xxxx'),
  commodityEntities?: [ 
    {
      entityIds?: [ string ](name='EntityIds'),
      predefinedParameterName?: string(name='PredefinedParameterName'),
      templateName?: string(name='TemplateName', example='Custom_Image_Ecs'),
    }
  ](name='CommodityEntities'),
  commoditySpecifications?: [ 
    {
      predefinedParameterName?: string(name='PredefinedParameterName'),
      specificationCode?: string(name='SpecificationCode', example='yuncode4814xxxxxx'),
      templateName?: string(name='TemplateName'),
    }
  ](name='CommoditySpecifications'),
  componentsConfigs?: [ 
    {
      componentsMappings?: map[string]string(name='ComponentsMappings'),
      templateName?: string(name='TemplateName'),
    }
  ](name='ComponentsConfigs'),
  createTime?: string(name='CreateTime', example='2021-05-20T00:00:00Z'),
  crossRegionConnectionStatus?: string(name='CrossRegionConnectionStatus'),
  defaultLicenseDays?: long(name='DefaultLicenseDays', example='1'),
  deployMetadata?: string(name='DeployMetadata'),
  deployType?: string(name='DeployType', example='ros'),
  duration?: long(name='Duration', example='259200'),
  entityAdditionalInfo?: map[string]EntityAdditionalInfoValue(name='EntityAdditionalInfo'),
  entitySource?: map[string]string(name='EntitySource'),
  isSupportOperated?: boolean(name='IsSupportOperated', example='false'),
  licenseMetadata?: string(name='LicenseMetadata'),
  logMetadata?: string(name='LogMetadata'),
  operationMetadata?: string(name='OperationMetadata', example='{\\"PrometheusConfigMap\\":{\\"New_Vpc_Ack_And_Jumpserver\\":{}}}'),
  payFromType?: string(name='PayFromType', example='None'),
  payType?: string(name='PayType', example='Permanent'),
  permission?: string(name='Permission', example='Deployable'),
  policyNames?: string(name='PolicyNames', example='policyName1, policyName2'),
  progress?: long(name='Progress', example='90'),
  publishTime?: string(name='PublishTime', example='2021-05-21T00:00:00Z'),
  registrationId?: string(name='RegistrationId', example='sr-04056c2ab4b94bxxxxxx'),
  requestId?: string(name='RequestId', example='B1A0198B-F316-1B72-B8DD-28B6F6D6XXXX'),
  resellable?: boolean(name='Resellable'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzuqyxxxxxx'),
  serviceAuditDocumentUrl?: string(name='ServiceAuditDocumentUrl'),
  serviceDiscoverable?: string(name='ServiceDiscoverable'),
  serviceDocUrl?: string(name='ServiceDocUrl', example='http://example1.com'),
  serviceId?: string(name='ServiceId', example='service-70a3b15bb62643xxxxxx'),
  serviceInfos?: [ 
    {
      agreements?: [ 
        {
          name?: string(name='Name'),
          url?: string(name='Url'),
        }
      ](name='Agreements'),
      image?: string(name='Image', example='https://example.com/service-image/c1c4a559-cc60-4af1-b976-98f356602462.png'),
      locale?: string(name='Locale', example='zh-CN'),
      longDescriptionUrl?: string(name='LongDescriptionUrl'),
      name?: string(name='Name'),
      shortDescription?: string(name='ShortDescription'),
    }
  ](name='ServiceInfos'),
  serviceProductUrl?: string(name='ServiceProductUrl', example='http://example2.com'),
  serviceType?: string(name='ServiceType', example='private'),
  shareType?: string(name='ShareType', example='Public'),
  shareTypeStatus?: string(name='ShareTypeStatus'),
  sourceServiceId?: string(name='SourceServiceId'),
  sourceServiceVersion?: string(name='SourceServiceVersion'),
  sourceSupplierName?: string(name='SourceSupplierName'),
  statistic?: {
    accumulativeInstanceCount?: int32(name='AccumulativeInstanceCount'),
    accumulativePocAmount?: double(name='AccumulativePocAmount'),
    accumulativeUserCount?: int32(name='AccumulativeUserCount'),
    averagePocAmount?: double(name='AveragePocAmount'),
    averagePocDuration?: double(name='AveragePocDuration'),
    averagePocUnitAmount?: double(name='AveragePocUnitAmount'),
    deployedServiceInstanceCount?: int32(name='DeployedServiceInstanceCount'),
    deployedUserCount?: int32(name='DeployedUserCount'),
    submittedUsageCount?: int32(name='SubmittedUsageCount'),
  }(name='Statistic'),
  status?: string(name='Status', example='Online'),
  statusDetail?: string(name='StatusDetail', example='deploy successfully'),
  supplierName?: string(name='SupplierName'),
  supplierUrl?: string(name='SupplierUrl', example='http://example.com'),
  tags?: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tags'),
  tenantType?: string(name='TenantType', example='SingleTenant'),
  testStatus?: string(name='TestStatus', example='SERVICE_TEST_SUCCEED'),
  trialDuration?: long(name='TrialDuration', example='7'),
  trialType?: string(name='TrialType', example='Trial'),
  updateTime?: string(name='UpdateTime', example='2021-05-22T00:00:00Z'),
  upgradeMetadata?: string(name='UpgradeMetadata', example='{\\"Description\\":\\"xxx\\",\\"SupportRollback\\":true,\\"SupportUpgradeFromVersions\\":[],\\"UpgradeComponents\\":[\\"Configuration\\"]}'),
  version?: string(name='Version', example='1.0'),
  versionName?: string(name='VersionName', example='v1'),
  virtualInternetService?: string(name='VirtualInternetService'),
  virtualInternetServiceId?: string(name='VirtualInternetServiceId'),
}

model GetServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceResponseBody(name='body'),
}

async function getService(request: GetServiceRequest): GetServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetService', 'POST', '/', 'json', false, 'json', request);
}

model GetServiceEstimateCostRequest {
  clientToken?: string(name='ClientToken', example='mRdxWuW2ts', position='Query'),
  commodity?: {
    payPeriod?: int32(name='PayPeriod'),
    payPeriodUnit?: string(name='PayPeriodUnit'),
  }(name='Commodity', shrink='json', position='Query'),
  parameters?: map[string]any(name='Parameters', example='{\\"PayType\\":\\"PostPaid\\",\\"InstancePassword\\":\\"xxxxxxxxxx\\",\\"EcsInstanceType\\":\\"ecs.g6.large\\",\\"VSwitchId\\":\\"vsw-0jlueyydpuekoxxxxxxxx\\",\\"VpcId\\":\\"vpc-0jlps6mjbgvpqxxxxxxxx\\",\\"ZoneId\\":\\"cn-wulanchabu-a\\",\\"Enable\\":false,\\"RegionId\\":\\"cn-wulanchabu\\"}', shrink='json', position='Query'),
  regionId?: string(name='RegionId', example='cn-wulanchabu', position='Query'),
  serviceId: string(name='ServiceId', example='service-16fbd358d75e49xxxxxx', position='Query'),
  serviceInstanceId?: string(name='ServiceInstanceId', example='si-d6ab3a63ccbb4b17****', position='Query'),
  serviceVersion?: string(name='ServiceVersion', example='draft', position='Query'),
  specificationName?: string(name='SpecificationName', position='Query'),
  templateName?: string(name='TemplateName', example='Custom_Image_Ecs', position='Query'),
}

model GetServiceEstimateCostResponseBody = {
  commodity?: map[string]any(name='Commodity'),
  requestId?: string(name='RequestId', example='E73F09DC-6C13-5CB1-A10F-7A4E125ABD2C'),
  resources?: map[string]any(name='Resources', example='{
      "ECSInstances":{
        "Type":"ALIYUN::ECS::InstanceGroup",
        "Success":true,
        "Result":{
          "Order":{
            "Currency":"CNY",
            "RuleIds":[
              1752723
            ],
            "DetailInfos":{
              "ResourcePriceModel":[
                {
                  "Resource":"bandwidth",
                  "TradeAmount":0.0,
                  "SubRuleIds":[],
                  "OriginalAmount":0.0,
                  "DiscountAmount":0.0
                },
                {
                  "Resource":"image",
                  "TradeAmount":0.0,
                  "SubRuleIds":[],
                  "OriginalAmount":0.0,
                  "DiscountAmount":0.0
                },
                {
                  "Resource":"instanceType",
                  "TradeAmount":0.006966,
                  "SubRuleIds":[],
                  "OriginalAmount":0.45,
                  "DiscountAmount":0.443034
                },
                {
                  "Resource":"systemDisk",
                  "TradeAmount":0.000867,
                  "SubRuleIds":[],
                  "OriginalAmount":0.056,
                  "DiscountAmount":0.055133
                },
                {
                  "Resource":"dataDisk",
                  "TradeAmount":0.002167,
                  "SubRuleIds":[],
                  "OriginalAmount":0.14,
                  "DiscountAmount":0.137833
                }
              ]
            }'),
}

model GetServiceEstimateCostResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceEstimateCostResponseBody(name='body'),
}

async function getServiceEstimateCost(request: GetServiceEstimateCostRequest): GetServiceEstimateCostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceEstimateCost', 'POST', '/', 'json', false, 'json', request);
}

model GetServiceInstanceRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceInstanceId: string(name='ServiceInstanceId', example='si-d6ab3a63ccbb4b17****', position='Query'),
}

model GetServiceInstanceResponseBody = {
  bizStatus?: string(name='BizStatus'),
  createTime?: string(name='CreateTime', example='2021-05-20T00:00:00Z'),
  enableInstanceOps?: boolean(name='EnableInstanceOps', example='true'),
  enableUserPrometheus?: boolean(name='EnableUserPrometheus', example='true'),
  endTime?: string(name='EndTime', example='2022-01-01T12:00:00'),
  grafanaDashBoardUrl?: string(name='GrafanaDashBoardUrl'),
  isOperated?: boolean(name='IsOperated', example='true'),
  licenseMetadata?: string(name='LicenseMetadata', example='{"renewType":"MONTHLY"}'),
  name?: string(name='Name', example='TestName'),
  networkConfig?: {
    endpointId?: string(name='EndpointId', example='ep-m5ei37240541816b****'),
    endpointServiceId?: string(name='EndpointServiceId', example='epsrv-5ei07324541816bxxxx'),
    privateVpcConnections?: [ 
      {
        connectionConfigs?: [ 
          {
            connectBandwidth?: int32(name='ConnectBandwidth'),
            domainName?: string(name='DomainName'),
            endpointIps?: [ string ](name='EndpointIps'),
            ingressEndpointStatus?: string(name='IngressEndpointStatus', example='Ready'),
            networkServiceStatus?: string(name='NetworkServiceStatus', example='Ready'),
            securityGroups?: [ string ](name='SecurityGroups'),
            vSwitches?: [ string ](name='VSwitches'),
            vpcId?: string(name='VpcId', example='vpc-bp1vwnn14rqpyiczj****'),
          }
        ](name='ConnectionConfigs'),
        endpointId?: string(name='EndpointId', example='ep-m5ei37240541816b****'),
        endpointServiceId?: string(name='EndpointServiceId', example='epsrv-5ei07324541816bxxxx'),
        privateZoneName?: string(name='PrivateZoneName', example='test.computenest.aliyuncs.com'),
      }
    ](name='PrivateVpcConnections'),
    reversePrivateVpcConnections?: [ 
      {
        endpointId?: string(name='EndpointId', example='ep-m5ei42370541816b****'),
        endpointServiceId?: string(name='EndpointServiceId', example='epsrv-5ei07324541816bxxxx'),
      }
    ](name='ReversePrivateVpcConnections'),
  }(name='NetworkConfig'),
  operatedServiceInstanceId?: string(name='OperatedServiceInstanceId', example='si-d6ab3a63ccbb4b17****'),
  operationEndTime?: string(name='OperationEndTime', example='2022-01-28T06:48:56Z'),
  operationStartTime?: string(name='OperationStartTime', example='2021-12-29T06:48:56Z'),
  outputs?: string(name='Outputs', example='{
      "InstanceIds": [
            "i-hp38ofxl0dsyfi7z****"
      ]
}'),
  parameters?: string(name='Parameters', example='{
      "param": "value"
}'),
  payType?: string(name='PayType', example='Subscription'),
  predefinedParameterName?: string(name='PredefinedParameterName'),
  progress?: long(name='Progress', example='90'),
  rdAccountLoginUrl?: string(name='RdAccountLoginUrl'),
  requestId?: string(name='RequestId', example='4DB0F536-B3BE-4F0D-BD29-E83FB56D550C'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resources?: string(name='Resources', example='[
      {
            "StackId": "stack-xxx"
      }
]'),
  service?: {
    deployMetadata?: string(name='DeployMetadata'),
    deployType?: string(name='DeployType', example='ros'),
    publishTime?: string(name='PublishTime', example='2021-05-21T00:00:00Z'),
    serviceDocUrl?: string(name='ServiceDocUrl', example='http://example.com'),
    serviceId?: string(name='ServiceId', example='service-9c8a3522528b4fe8****'),
    serviceInfos?: [ 
      {
        image?: string(name='Image', example='https://example.com/service-image/c1c4a559-cc60-4af1-b976-98f356602462.png'),
        locale?: string(name='Locale', example='zh-CN'),
        name?: string(name='Name'),
        shortDescription?: string(name='ShortDescription'),
      }
    ](name='ServiceInfos'),
    serviceProductUrl?: string(name='ServiceProductUrl', example='https://service-info-private.oss-cn-hangzhou.aliyuncs.com'),
    serviceType?: string(name='ServiceType', example='private'),
    status?: string(name='Status', example='Online'),
    supplierName?: string(name='SupplierName'),
    supplierUrl?: string(name='SupplierUrl', example='http://example.com'),
    upgradableServiceVersions?: [ string ](name='UpgradableServiceVersions'),
    version?: string(name='Version', example='1'),
    versionName?: string(name='VersionName'),
  }(name='Service'),
  serviceInstanceId?: string(name='ServiceInstanceId', example='si-d6ab3a63ccbb4b17****'),
  serviceType?: string(name='ServiceType', example='private'),
  source?: string(name='Source', example='User'),
  status?: string(name='Status', example='Deployed'),
  statusDetail?: string(name='StatusDetail', example='deploy successfully'),
  supplierUid?: long(name='SupplierUid', example='1964460391538545'),
  tags?: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tags'),
  templateName?: string(name='TemplateName'),
  updateTime?: string(name='UpdateTime', example='2021-05-20T00:00:00Z'),
  userId?: long(name='UserId', example='1234567'),
}

model GetServiceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceInstanceResponseBody(name='body'),
}

async function getServiceInstance(request: GetServiceInstanceRequest): GetServiceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetServiceTemplateParameterConstraintsRequest {
  clientToken?: string(name='ClientToken', example='10CM943JP0EN9D51H', position='Query'),
  deployRegionId: string(name='DeployRegionId', example='cn-huhehaote', position='Query'),
  enablePrivateVpcConnection?: boolean(name='EnablePrivateVpcConnection', example='true', position='Query'),
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey', example='PayType'),
      parameterValue?: string(name='ParameterValue', example='PostPaid'),
    }
  ](name='Parameters', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceId: string(name='ServiceId', example='service-1c11f365190c44xxxxxx', position='Query'),
  serviceInstanceId?: string(name='ServiceInstanceId', example='si-d6ab3a63ccbb4b17****', position='Query'),
  serviceVersion?: string(name='ServiceVersion', example='draft', position='Query'),
  templateName: string(name='TemplateName', position='Query'),
}

model GetServiceTemplateParameterConstraintsResponseBody = {
  familyConstraints?: [ string ](name='FamilyConstraints'),
  parameterConstraints?: [ 
    {
      allowedValues?: [ string ](name='AllowedValues'),
      associationParameterNames?: [ string ](name='AssociationParameterNames'),
      behavior?: string(name='Behavior', example='NoLimit'),
      behaviorReason?: string(name='BehaviorReason', example='none'),
      originalConstraints?: [ 
        {
          allowedValues?: [ string ](name='AllowedValues'),
          propertyName?: string(name='PropertyName', example='lnch_Source'),
          resourceName?: string(name='ResourceName', example='i-8vb0smn1lf6g77md****'),
          resourceType?: string(name='ResourceType', example='serviceinstance'),
        }
      ](name='OriginalConstraints'),
      parameterKey?: string(name='ParameterKey', example='PayType'),
      type?: string(name='Type', example='String'),
    }
  ](name='ParameterConstraints'),
  requestId?: string(name='RequestId', example='C81C0732-DEBC-559C-B563-7EB2BEB21088'),
}

model GetServiceTemplateParameterConstraintsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceTemplateParameterConstraintsResponseBody(name='body'),
}

async function getServiceTemplateParameterConstraints(request: GetServiceTemplateParameterConstraintsRequest): GetServiceTemplateParameterConstraintsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceTemplateParameterConstraints', 'POST', '/', 'json', false, 'json', request);
}

model GetUploadCredentialsRequest {
  fileName: string(name='FileName', position='Query'),
}

model GetUploadCredentialsResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    accessKeyId?: string(name='AccessKeyId', example='STS.NUCe19W1FKaHAYAhe********'),
    accessKeySecret?: string(name='AccessKeySecret', example='8LQGp59mY23pcXeTdcvSA1cUQZBeD92sFrXi********'),
    bucketName?: string(name='BucketName', example='service-info-private'),
    expireDate?: string(name='ExpireDate', example='2023-05-18T12:27:59Z'),
    key?: string(name='Key', example='221514575922756034/cn-hangzhou/d57c62fbd508xxxxxxxx.json'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    securityToken?: string(name='SecurityToken', example='CAISzQN1q6Ft5B2yfSjIr5b2LouNuu5n/KOjQ3/wjGUHYdlagYGdmzz2IH1Le3NrBO8esfgymGFU6v8dlo1dYLQeHhadQI5cs80HtFqLSNaE65LswPlZ2M2ISETPJzfV9pCK'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Success.'),
  requestId?: string(name='RequestId', example='FCC3321E-D518-1BC4-861E-588E9D4DAFB7'),
  success?: boolean(name='Success', example='true'),
}

model GetUploadCredentialsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUploadCredentialsResponseBody(name='body'),
}

async function getUploadCredentials(request: GetUploadCredentialsRequest): GetUploadCredentialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUploadCredentials', 'POST', '/', 'json', false, 'json', request);
}

model ListAcrImageRepositoriesRequest {
  artifactType?: string(name='ArtifactType', example='AcrImage', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAWns8w4MmhzeptXVRG0PUEU=', position='Query'),
  repoName?: string(name='RepoName', example='wordpress', position='Query'),
}

model ListAcrImageRepositoriesResponseBody = {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAfu+XtuBE55iRLHEYYuojI4='),
  repositories?: [ 
    {
      createTime?: string(name='CreateTime', example='2021-05-20T00:00:00Z'),
      modifiedTime?: string(name='ModifiedTime', example='2021-05-20T00:00:00Z'),
      repoId?: string(name='RepoId', example='crr-3gqhkza0wbxxxxxx'),
      repoName?: string(name='RepoName', example='wordpress'),
    }
  ](name='Repositories'),
  requestId?: string(name='RequestId', example='C4A145D8-6F6C-532A-9001-9730CDA27578'),
  totalCount?: int32(name='TotalCount', example='4'),
}

model ListAcrImageRepositoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAcrImageRepositoriesResponseBody(name='body'),
}

async function listAcrImageRepositories(request: ListAcrImageRepositoriesRequest): ListAcrImageRepositoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAcrImageRepositories', 'POST', '/', 'json', false, 'json', request);
}

model ListAcrImageTagsRequest {
  artifactType?: string(name='ArtifactType', example='AcrImage', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAW8kZY+u1sYOaYf5JmgmDQQ=', position='Query'),
  repoId?: string(name='RepoId', example='crr-3gqhkza0wbxxxxxx', position='Query'),
}

model ListAcrImageTagsResponseBody = {
  images?: [ 
    {
      createTime?: string(name='CreateTime', example='2021-05-20T00:00:00Z'),
      imageSize?: string(name='ImageSize', example='188394616'),
      modifiedTime?: string(name='ModifiedTime', example='2021-05-20T00:00:00Z'),
      tag?: string(name='Tag', example='5.7.2'),
    }
  ](name='Images'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='ey14..'),
  requestId?: string(name='RequestId', example='FEF343B9-1A15-5789-BE88-7B36190F5BF6'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListAcrImageTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAcrImageTagsResponseBody(name='body'),
}

async function listAcrImageTags(request: ListAcrImageTagsRequest): ListAcrImageTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAcrImageTags', 'POST', '/', 'json', false, 'json', request);
}

model ListArtifactVersionsRequest {
  artifactId: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAc3HCuYhJi/wvpk4xOr0VLbfVwapgMwCN1wYzPVzLbItEdB0uWSY7AGnM3qCgm/YnjuEfwSnMwiMkcUoI0hRQzE=', position='Query'),
}

model ListArtifactVersionsResponseBody = {
  artifacts?: [ 
    {
      artifactId?: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx'),
      artifactProperty?: string(name='ArtifactProperty', example='{\\"CommodityCode\\":\\"cmjj0005xxxx\\",\\"CommodityVersion\\":\\"V2022xxxx\\"}'),
      artifactType?: string(name='ArtifactType', example='EcsImage'),
      artifactVersion?: string(name='ArtifactVersion', example='2'),
      gmtCreate?: string(name='GmtCreate', example='2022-10-20T02:19:53Z'),
      gmtModified?: string(name='GmtModified', example='2022-10-20T02:19:55Z'),
      imageDelivery?: map[string]string(name='ImageDelivery'),
      progress?: string(name='Progress', example='100'),
      resultFile?: string(name='ResultFile'),
      securityAuditResult?: string(name='SecurityAuditResult', example='Normal'),
      status?: string(name='Status', example='Available'),
      supportRegionIds?: string(name='SupportRegionIds', example='[
					"cn-beijing",
					"cn-hangzhou",
					"cn-shanghai"
				]'),
      versionName?: string(name='VersionName', example='v1'),
    }
  ](name='Artifacts'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAc3HCuYhJi/wvpk4xOr0VLbfVwapgMwCN1wYzPVzLbItEdB0uWSY7AGnM3qCgm/YnjuEfwSnMwiMkcUoI0hRQzE='),
  requestId?: string(name='RequestId', example='46577928-3162-15A6-9084-69820EB9xxxx'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListArtifactVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListArtifactVersionsResponseBody(name='body'),
}

async function listArtifactVersions(request: ListArtifactVersionsRequest): ListArtifactVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListArtifactVersions', 'POST', '/', 'json', false, 'json', request);
}

model ListArtifactsRequest {
  filter?: [ 
    {
      name?: string(name='Name', example='ArtifactType'),
      values?: [ string ](name='Values'),
    }
  ](name='Filter', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAc3HCuYhJi/wvpk4xOr0VLbfVwapgMwCN1wYzPVzLbItEdB0uWSY7AGnM3qCgm/YnjuEfwSnMwiMkcUoI0hRQzE=', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model ListArtifactsResponseBody = {
  artifacts?: [ 
    {
      artifactId?: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx'),
      artifactType?: string(name='ArtifactType', example='EcsImage'),
      description?: string(name='Description'),
      gmtModified?: string(name='GmtModified', example='2022-10-20T02:19:55Z'),
      maxVersion?: string(name='MaxVersion', example='2'),
      name?: string(name='Name'),
      resourceGroupId?: string(name='ResourceGroupId'),
      status?: string(name='Status', example='Created'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
    }
  ](name='Artifacts'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAc3HCuYhJi/wvpk4xOr0VLbfVwapgMwCN1wYzPVzLbItEdB0uWSY7AGnM3qCgm/YnjuEfwSnMwiMkcUoI0hRQzE='),
  requestId?: string(name='RequestId', example='46577928-3162-15A6-9084-69820EB9xxxx'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListArtifactsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListArtifactsResponseBody(name='body'),
}

async function listArtifacts(request: ListArtifactsRequest): ListArtifactsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListArtifacts', 'POST', '/', 'json', false, 'json', request);
}

model ListServiceInstancesRequest {
  filter?: [ 
    {
      name?: string(name='Name', example='ServiceInstanceId'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='BBBAAfu+XtuBE55iRLHEYYuojI4=', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  showDeleted?: boolean(name='ShowDeleted', example='false', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tag', position='Query'),
}

model ListServiceInstancesResponseBody = {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAfu+XtuBE55iRLHEYYuojI4='),
  requestId?: string(name='RequestId', example='E50287CB-AABF-4877-92C0-289B339A1546'),
  serviceInstances?: [ 
    {
      bizStatus?: string(name='BizStatus'),
      createTime?: string(name='CreateTime', example='2021-05-20T00:00:00Z'),
      enableInstanceOps?: boolean(name='EnableInstanceOps', example='true'),
      endTime?: string(name='EndTime', example='2022-01-01T12:00:00'),
      isOperated?: boolean(name='IsOperated', example='true'),
      name?: string(name='Name', example='TestName'),
      operatedServiceInstanceId?: string(name='OperatedServiceInstanceId', example='si-d6ab3a63ccbb4b17****'),
      operationEndTime?: string(name='OperationEndTime', example='2021-12-29T06:48:56Z'),
      operationStartTime?: string(name='OperationStartTime', example='2021-12-29T06:48:56Z'),
      parameters?: string(name='Parameters', example='{"param":"value"}'),
      payType?: string(name='PayType', example='Subscription'),
      progress?: long(name='Progress', example='90'),
      resourceGroupId?: string(name='ResourceGroupId'),
      service?: {
        deployMetadata?: string(name='DeployMetadata'),
        deployType?: string(name='DeployType', example='ros'),
        enablePrivateVpcConnection?: boolean(name='EnablePrivateVpcConnection', example='false'),
        publishTime?: string(name='PublishTime', example='2021-05-21T00:00:00Z'),
        serviceId?: string(name='ServiceId', example='service-0e6fca6a51a54420****'),
        serviceInfos?: [ 
          {
            image?: string(name='Image', example='https://example.com/service-image/c1c4a559-cc60-4af1-b976-98f356602462.png'),
            locale?: string(name='Locale', example='zh-CN'),
            name?: string(name='Name'),
            shortDescription?: string(name='ShortDescription'),
          }
        ](name='ServiceInfos'),
        serviceType?: string(name='ServiceType', example='private'),
        sourceSupplierName?: string(name='SourceSupplierName'),
        status?: string(name='Status', example='Online'),
        supplierName?: string(name='SupplierName'),
        supplierUrl?: string(name='SupplierUrl', example='http://example.com'),
        version?: string(name='Version', example='1.0'),
        versionName?: string(name='VersionName'),
      }(name='Service'),
      serviceInstanceId?: string(name='ServiceInstanceId', example='si-d6ab3a63ccbb4b17****'),
      serviceType?: string(name='ServiceType', example='private'),
      source?: string(name='Source', example='Supplier'),
      status?: string(name='Status', example='Deployed'),
      statusDetail?: string(name='StatusDetail', example='deploy successfully'),
      tags?: [ 
        {
          key?: string(name='Key', example='key1'),
          value?: string(name='Value', example='value1'),
        }
      ](name='Tags'),
      templateName?: string(name='TemplateName'),
      updateTime?: string(name='UpdateTime', example='2021-05-20T00:00:00Z'),
      userId?: long(name='UserId', example='1234567'),
    }
  ](name='ServiceInstances'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListServiceInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServiceInstancesResponseBody(name='body'),
}

async function listServiceInstances(request: ListServiceInstancesRequest): ListServiceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServiceInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListServiceUsagesRequest {
  filter?: [ 
    {
      name?: string(name='Name', example='ServiceId'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAWns8w4MmhzeptXVRG0PUEU=', position='Query'),
  supplierRole?: string(name='SupplierRole', position='Query'),
}

model ListServiceUsagesResponseBody = {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAYChudnQUoBH+mGWFpb6oP0='),
  requestId?: string(name='RequestId', example='18AD0960-A9FE-1AC8-ADF8-22131Fxxxxxx'),
  serviceUsages?: [ 
    {
      comments?: string(name='Comments'),
      createTime?: string(name='CreateTime', example='2022-05-25T02:02:02Z'),
      serviceId?: string(name='ServiceId', example='service-c9f36ec6d19b4exxxxxx'),
      serviceName?: string(name='ServiceName'),
      status?: string(name='Status', example='Submitted'),
      supplierName?: string(name='SupplierName'),
      updateTime?: string(name='UpdateTime', example='2022-05-25T02:02:02Z'),
      userAliUid?: long(name='UserAliUid', example='127383705958xxxx'),
      userInformation?: map[string]string(name='UserInformation'),
    }
  ](name='ServiceUsages'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListServiceUsagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServiceUsagesResponseBody(name='body'),
}

async function listServiceUsages(request: ListServiceUsagesRequest): ListServiceUsagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServiceUsages', 'POST', '/', 'json', false, 'json', request);
}

model ListServicesRequest {
  allVersions?: boolean(name='AllVersions', example='false', position='Query'),
  filter?: [ 
    {
      name?: string(name='Name', example='Status'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='BBBAAfu+XtuBE55iRLHEYYuojI4=', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tag', position='Query'),
}

model ListServicesResponseBody = {
  maxResults?: int32(name='MaxResults', example='1'),
  nextToken?: string(name='NextToken', example='AAAAAfu+XtuBE55iRLHEYYuojI4='),
  requestId?: string(name='RequestId', example='51945B04-6AA6-410D-93BA-236E0248B104'),
  services?: [ 
    {
      approvalType?: string(name='ApprovalType', example='AutoPass'),
      artifactId?: string(name='ArtifactId', example='artifact-21ca53ac16a643xxxxxx'),
      artifactVersion?: string(name='ArtifactVersion', example='draft'),
      buildInfo?: string(name='BuildInfo'),
      categories?: string(name='Categories'),
      commodity?: {
        commodityCode?: string(name='CommodityCode'),
        saasBoostMetadata?: string(name='SaasBoostMetadata'),
        type?: string(name='Type'),
      }(name='Commodity'),
      commodityCode?: string(name='CommodityCode', example='cmjj00xxxx'),
      createTime?: string(name='CreateTime', example='2021-05-20T00:00:00Z'),
      defaultVersion?: boolean(name='DefaultVersion', example='true'),
      deployType?: string(name='DeployType', example='ros'),
      hasBeta?: boolean(name='HasBeta'),
      hasDraft?: boolean(name='HasDraft'),
      latestResellSourceServiceVersion?: string(name='LatestResellSourceServiceVersion'),
      publishTime?: string(name='PublishTime', example='2021-05-21T00:00:00Z'),
      relationType?: string(name='RelationType', example='ServiceDeployment'),
      resellApplyStatus?: string(name='ResellApplyStatus'),
      resellServiceId?: string(name='ResellServiceId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      serviceDiscoverable?: string(name='ServiceDiscoverable'),
      serviceId?: string(name='ServiceId', example='service-70a3b15bb62643xxxxxx'),
      serviceInfos?: [ 
        {
          image?: string(name='Image', example='http://img.tidb.oss.url'),
          locale?: string(name='Locale', example='zh-CN'),
          name?: string(name='Name'),
          shortDescription?: string(name='ShortDescription'),
        }
      ](name='ServiceInfos'),
      serviceType?: string(name='ServiceType', example='private'),
      shareType?: string(name='ShareType', example='Public'),
      sourceImage?: string(name='SourceImage', example='centos_7'),
      sourceServiceId?: string(name='SourceServiceId'),
      sourceServiceVersion?: string(name='SourceServiceVersion'),
      sourceSupplierName?: string(name='SourceSupplierName'),
      status?: string(name='Status', example='Online'),
      supplierName?: string(name='SupplierName'),
      supplierUrl?: string(name='SupplierUrl', example='http://example.com'),
      tags?: [ 
        {
          key?: string(name='Key', example='key1'),
          value?: string(name='Value', example='value1'),
        }
      ](name='Tags'),
      tenantType?: string(name='TenantType', example='SingleTenant'),
      trialType?: string(name='TrialType', example='Trial'),
      updateTime?: string(name='UpdateTime', example='2021-05-21T00:00:00Z'),
      version?: string(name='Version', example='1.0'),
      versionName?: string(name='VersionName', example='v2.0.0'),
      virtualInternetService?: string(name='VirtualInternetService'),
    }
  ](name='Services'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListServicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServicesResponseBody(name='body'),
}

async function listServices(request: ListServicesRequest): ListServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServices', 'POST', '/', 'json', false, 'json', request);
}

model ModifyServiceInstanceResourcesRequest {
  resources?: string(name='Resources', example='{
  "RegionId": "cn-hangzhou",
  "Type": "ResourceIds",
  "ResourceIds": {
    "ALIYUN::ECS::INSTANCE": ["i-xxx", "i-yyy"],
    "ALIYUN::RDS::INSTANCE": ["rm-xxx", "rm-yyy"],
    "ALIYUN::VPC::VPC": ["vpc-xxx", "vpc-yyy"],
    "ALIYUN::SLB::INSTANCE": ["lb-xxx", "lb-yyy"]
  }
}', position='Query'),
  serviceInstanceId: string(name='ServiceInstanceId', example='si-d8a0cc2a1ee04dce****', position='Query'),
  serviceInstanceResourcesAction?: string(name='ServiceInstanceResourcesAction', example='Import', position='Query'),
}

model ModifyServiceInstanceResourcesResponseBody = {
  requestId?: string(name='RequestId', example='46577928-3162-15A6-9084-69820EB9xxxx'),
}

model ModifyServiceInstanceResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyServiceInstanceResourcesResponseBody(name='body'),
}

async function modifyServiceInstanceResources(request: ModifyServiceInstanceResourcesRequest): ModifyServiceInstanceResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyServiceInstanceResources', 'POST', '/', 'json', false, 'json', request);
}

model PushMeteringDataRequest {
  metering: string(name='Metering', example='[{\\"StartTime\\":1681264800,\\"EndTime\\":1681268400,\\"Entities\\":[{\\"Key\\":\\"Unit\\",\\"Value\\":\\"0\\"}]}]', position='Query'),
  serviceInstanceId: string(name='ServiceInstanceId', example='si-0e6fca6a51a54420****', position='Query'),
}

model PushMeteringDataResponseBody = {
  requestId?: string(name='RequestId', example='94E89857-B994-44B6-9C4F-DBD200E9XXXX'),
}

model PushMeteringDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushMeteringDataResponseBody(name='body'),
}

async function pushMeteringData(request: PushMeteringDataRequest): PushMeteringDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PushMeteringData', 'POST', '/', 'json', false, 'json', request);
}

model RegisterServiceRequest {
  clientToken?: string(name='ClientToken', example='10CM943JP0EN9D51H', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceId: string(name='ServiceId', example='service-f7024a22ea5149xxxxxx', position='Query'),
}

model RegisterServiceResponseBody = {
  registrationId?: string(name='RegistrationId', example='sr-72dd5071e90c40xxxxxx'),
  requestId?: string(name='RequestId', example='A361BA9E-2713-52C8-AFFC-C26E5180456E'),
}

model RegisterServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterServiceResponseBody(name='body'),
}

async function registerService(request: RegisterServiceRequest): RegisterServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterService', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseArtifactRequest {
  artifactId: string(name='ArtifactId', example='artifact-9feded91880e4c78xxxx', position='Query'),
}

model ReleaseArtifactResponseBody = {
  artifactId?: string(name='ArtifactId', example='artifact-9feded91880e4c78xxxx'),
  artifactProperty?: string(name='ArtifactProperty', example='"{\\"Url\\":\\"https://computenest-artifacts-draft-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/130920852836xxxx/cn-hangzhou/service-8072a04e5a134382xxxx/165095355xxxx/changes.txt\\",\\"ConfigurationMetadata\\":\\"{\\\\\\"WorkDir\\\\\\":\\\\\\"/root\\\\\\",\\\\\\"Platform\\\\\\":\\\\\\"Linux\\\\\\",\\\\\\"CommandType\\\\\\":\\\\\\"RunShellScript\\\\\\",\\\\\\"UpgradeScript\\\\\\":\\\\\\"cd /root\\\\\\\\ncp changes.txt cpchanges.txt\\\\\\\\nmv changes.txt mvchangge.txt\\\\\\"}\\"}"'),
  artifactType?: string(name='ArtifactType', example='File'),
  artifactVersion?: string(name='ArtifactVersion', example='draft'),
  description?: string(name='Description'),
  gmtModified?: string(name='GmtModified', example='1650954178000'),
  requestId?: string(name='RequestId', example='3818BA7D-3F50-1A44-9FF3-04A52A59XXXX'),
  status?: string(name='Status', example='Created'),
  versionName?: string(name='VersionName'),
}

model ReleaseArtifactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseArtifactResponseBody(name='body'),
}

async function releaseArtifact(request: ReleaseArtifactRequest): ReleaseArtifactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseArtifact', 'POST', '/', 'json', false, 'json', request);
}

model UpdateArtifactRequest {
  artifactId: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx', position='Query'),
  artifactProperty: {
    commodityCode?: string(name='CommodityCode', example='cmjj00xxxx'),
    commodityVersion?: string(name='CommodityVersion', example='V1.0'),
    fileScriptMetadata?: string(name='FileScriptMetadata', example='{\\"WorkDir\\":\\"/root\\",\\"CommandType\\":\\"RunShellScript\\",\\"Platform\\":\\"Linux\\",\\"Script\\":\\"echo hello\\"}'),
    imageId?: string(name='ImageId', example='m-0xij191j9cuev6ucxxxx'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    scriptMetadata?: string(name='ScriptMetadata', example='{"ScriptMetadata":"{\\"CommandType\\":\\"RunShellScript\\",\\"Platform\\":\\"Linux\\",\\"Script\\":\\"ls\\"}"}'),
    url?: string(name='Url', example='https://service-info-private.oss-cn-hangzhou.aliyuncs.com/1309208528xxxxxx/template/2e1ce8fc-xxxx-481c-9e8e-789ba9db487d.json'),
  }(name='ArtifactProperty', shrink='json', position='Query'),
  description?: string(name='Description', position='Query'),
  supportRegionIds?: [ string ](name='SupportRegionIds', position='Query'),
  versionName: string(name='VersionName', example='v1', position='Query'),
}

model UpdateArtifactResponseBody = {
  artifactId?: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx'),
  artifactProperty?: string(name='ArtifactProperty', example='{\\"CommodityCode\\":\\"cmjj0005xxxx\\",\\"CommodityVersion\\":\\"V2022xxxx\\"}'),
  artifactType?: string(name='ArtifactType', example='EcsImage'),
  artifactVersion?: string(name='ArtifactVersion', example='2'),
  description?: string(name='Description'),
  gmtModified?: string(name='GmtModified', example='2022-10-20T02:19:55Z'),
  requestId?: string(name='RequestId', example='B1A0198B-F316-1B72-B8DD-28B6F6D6XXXX'),
  status?: string(name='Status', example='Available'),
  supportRegionIds?: string(name='SupportRegionIds', example='[
			"cn-beijing",
			"cn-hangzhou",
			"cn-shanghai"
		]'),
  versionName?: string(name='VersionName', example='v1'),
}

model UpdateArtifactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateArtifactResponseBody(name='body'),
}

async function updateArtifact(request: UpdateArtifactRequest): UpdateArtifactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateArtifact', 'POST', '/', 'json', false, 'json', request);
}

model UpdateServiceRequest {
  alarmMetadata?: string(name='AlarmMetadata', example='{\\"CmsTemplateId\\":1162921,\\"TemplateUrl\\":\\"https://service-info-private.oss-cn-hangzhou.aliyuncs.com/1760465342xxxxxx/template/c072ef50-6c03-4d9c-8f0e-d1c440xxxxxx.json\\"}', position='Query'),
  clientToken?: string(name='ClientToken', example='788E7CP0EN9D51P', position='Query'),
  deployMetadata?: string(name='DeployMetadata', example='{\\"EstimateTime\\":null,\\"SupplierDeployMetadata\\":{\\"DeployTimeout\\":7200},\\"EnableVnc\\":false}', position='Query'),
  deployType?: string(name='DeployType', example='ros', position='Query'),
  duration?: long(name='Duration', example='259200', position='Query'),
  isSupportOperated?: boolean(name='IsSupportOperated', example='false', position='Query'),
  licenseMetadata?: string(name='LicenseMetadata', position='Query'),
  logMetadata?: string(name='LogMetadata', position='Query'),
  operationMetadata?: string(name='OperationMetadata', example='{\\"PrometheusConfigMap\\":{\\"Custom_Image_Ecs\\":{\\"EnablePrometheus\\":false}}}', position='Query'),
  policyNames?: string(name='PolicyNames', example='policyName1, policyName2', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resellable?: boolean(name='Resellable', position='Query'),
  serviceId: string(name='ServiceId', example='service-1dda29c3eca648xxxxxx', position='Query'),
  serviceInfo?: [ 
    {
      agreements?: [ 
        {
          name?: string(name='Name'),
          url?: string(name='Url'),
        }
      ](name='Agreements'),
      image?: string(name='Image', example='http://img.tidb.oss.url'),
      locale?: string(name='Locale', example='zh-CN'),
      longDescriptionUrl?: string(name='LongDescriptionUrl'),
      name?: string(name='Name'),
      shortDescription?: string(name='ShortDescription'),
    }
  ](name='ServiceInfo', position='Query'),
  serviceType?: string(name='ServiceType', example='private', position='Query'),
  serviceVersion?: string(name='ServiceVersion', example='1', position='Query'),
  tenantType?: string(name='TenantType', example='SingleTenant', position='Query'),
  trialDuration?: int32(name='TrialDuration', example='7', position='Query'),
  updateOption?: {
    updateFrom?: string(name='UpdateFrom'),
  }(name='UpdateOption', shrink='json', position='Query'),
  upgradeMetadata?: string(name='UpgradeMetadata', example='{\\"Description\\":\\"xxx\\",\\"SupportRollback\\":true,\\"SupportUpgradeFromVersions\\":[],\\"UpgradeComponents\\":[\\"Configuration\\"]}', position='Query'),
  versionName?: string(name='VersionName', example='Draft', position='Query'),
}

model UpdateServiceResponseBody = {
  requestId?: string(name='RequestId', example='DF0F666F-FBBC-55C3-A368-C955DE7B4839'),
}

model UpdateServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateServiceResponseBody(name='body'),
}

async function updateService(request: UpdateServiceRequest): UpdateServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateService', 'POST', '/', 'json', false, 'json', request);
}

model UpdateServiceInstanceAttributeRequest {
  endTime?: string(name='EndTime', example='2023-12-25T02:28:40Z', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceInstanceId: string(name='ServiceInstanceId', example='si-3df88e962cdexxxxxxxx', position='Query'),
}

model UpdateServiceInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId', example='0CB2E0A9-B4DF-5C16-86AD-C511C483144B'),
}

model UpdateServiceInstanceAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateServiceInstanceAttributeResponseBody(name='body'),
}

async function updateServiceInstanceAttribute(request: UpdateServiceInstanceAttributeRequest): UpdateServiceInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateServiceInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateServiceInstanceSpecRequest {
  enableUserPrometheus?: boolean(name='EnableUserPrometheus', example='true', position='Query'),
  operationName?: string(name='OperationName', position='Query'),
  parameters?: map[string]any(name='Parameters', example='{\\"EcsInstanceParameter\\":\\"4vCPU 8GiB\\",\\"ZoneId\\":\\"cn-heyuan-a\\",\\"SystemDiskSize\\":50,\\"DataDiskSize\\":150,\\"InternetMaxBandwidthOut\\":2,\\"RegionId\\":\\"cn-heyuan\\"}', shrink='json', position='Query'),
  predefinedParametersName?: string(name='PredefinedParametersName', position='Query'),
  serviceInstanceId?: string(name='ServiceInstanceId', example='si-0e6fca6a51a54420****', position='Query'),
}

model UpdateServiceInstanceSpecResponseBody = {
  requestId?: string(name='RequestId', example='DF0F666F-FBBC-55C3-A368-C955DE7B4839'),
}

model UpdateServiceInstanceSpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateServiceInstanceSpecResponseBody(name='body'),
}

async function updateServiceInstanceSpec(request: UpdateServiceInstanceSpecRequest): UpdateServiceInstanceSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateServiceInstanceSpec', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeServiceInstanceRequest {
  clientToken?: string(name='ClientToken', example='10CM943JP0EN9D51H', position='Query'),
  dryRun?: string(name='DryRun', example='false', position='Query'),
  parameters?: map[string]any(name='Parameters', shrink='json', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceInstanceId?: string(name='ServiceInstanceId', example='si-5cbae874da0e47xxxxxx', position='Query'),
  serviceVersion?: string(name='ServiceVersion', example='2', position='Query'),
}

model UpgradeServiceInstanceResponseBody = {
  requestId?: string(name='RequestId', example='F224E002-AB0E-5FD9-A87E-54AEE56F6CAE'),
  serviceInstanceId?: string(name='ServiceInstanceId', example='si-5cbae874da0e47xxxxxx'),
  status?: string(name='Status', example='Created'),
  upgradeRequiredParameters?: [ string ](name='UpgradeRequiredParameters'),
}

model UpgradeServiceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeServiceInstanceResponseBody(name='body'),
}

async function upgradeServiceInstance(request: UpgradeServiceInstanceRequest): UpgradeServiceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeServiceInstance', 'POST', '/', 'json', false, 'json', request);
}

model EntityAdditionalInfoValue = {
  type?: string(name='Type'),
  promql?: string(name='Promql'),
}

