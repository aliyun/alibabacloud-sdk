/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ComputeNestSupplier';
  @version = '2021-05-21';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateArtifactRequest {
  artifactId?: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx', position='Query'),
  artifactProperty?: {
    commodityCode?: string(name='CommodityCode', example='cmjj00xxxx'),
    commodityVersion?: string(name='CommodityVersion', example='V1.0'),
    fileScriptMetadata?: string(name='FileScriptMetadata', example='{\\"WorkDir\\":\\"/root\\",\\"CommandType\\":\\"RunShellScript\\",\\"Platform\\":\\"Linux\\",\\"Script\\":\\"echo hello\\"}'),
    imageId?: string(name='ImageId', example='m-0xij191j9cuev6xxxxxx'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    scriptMetadata?: string(name='ScriptMetadata', example='{"ScriptMetadata":"{\\"CommandType\\":\\"RunShellScript\\",\\"Platform\\":\\"Linux\\",\\"Script\\":\\"ls\\"}"}'),
    url?: string(name='Url', example='https://service-info-private.oss-cn-hangzhou.aliyuncs.com/1309208528xxxxxx/template/2e1ce8fc-xxxx-481c-9e8e-789ba9db487d.json'),
  }(name='ArtifactProperty', shrink='json', position='Query'),
  artifactType: string(name='ArtifactType', example='EcsImage', position='Query'),
  description?: string(name='Description', position='Query'),
  name: string(name='Name', position='Query'),
  supportRegionIds?: [ string ](name='SupportRegionIds', position='Query'),
  versionName: string(name='VersionName', example='v1', position='Query'),
}

model CreateArtifactResponseBody = {
  artifactId?: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx'),
  artifactProperty?: string(name='ArtifactProperty', example='{\\"CommodityCode\\":\\"cmjj0005xxxx\\",\\"CommodityVersion\\":\\"V2022xxxx\\"}'),
  artifactType?: string(name='ArtifactType', example='EcsImage'),
  artifactVersion?: string(name='ArtifactVersion', example='2'),
  description?: string(name='Description'),
  gmtModified?: string(name='GmtModified', example='2022-11-11T12:00:00Z'),
  maxVersion?: long(name='MaxVersion', example='1'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId', example='B1A0198B-F316-1B72-B8DD-28B6F6D6XXXX'),
  status?: string(name='Status', example='Created'),
  supportRegionIds?: string(name='SupportRegionIds', example='[
			"cn-beijing",
			"cn-hangzhou",
			"cn-shanghai"
		]'),
  versionName?: string(name='VersionName', example='v1'),
}

model CreateArtifactResponse = {
  headers: map[string]string(name='headers'),
  body: CreateArtifactResponseBody(name='body'),
}

async function createArtifact(request: CreateArtifactRequest): CreateArtifactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateArtifact', 'POST', '/', 'json', false, 'json', request);
}

model DeleteArtifactRequest {
  artifactId: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx', position='Query'),
  artifactVersion?: string(name='ArtifactVersion', example='2', position='Query'),
}

model DeleteArtifactResponseBody = {
  requestId?: string(name='RequestId', example='B1A0198B-F316-1B72-B8DD-28B6F6D6XXXX'),
}

model DeleteArtifactResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteArtifactResponseBody(name='body'),
}

async function deleteArtifact(request: DeleteArtifactRequest): DeleteArtifactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteArtifact', 'POST', '/', 'json', false, 'json', request);
}

model GetArtifactRequest {
  artifactId: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx', position='Query'),
  artifactVersion?: string(name='ArtifactVersion', example='1', position='Query'),
}

model GetArtifactResponseBody = {
  artifactId?: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx'),
  artifactProperty?: string(name='ArtifactProperty', example='{\\"CommodityCode\\":\\"cmjj0005xxxx\\",\\"CommodityVersion\\":\\"V2022xxxx\\"}'),
  artifactType?: string(name='ArtifactType', example='EcsImage'),
  artifactVersion?: string(name='ArtifactVersion', example='2'),
  description?: string(name='Description'),
  gmtModified?: string(name='GmtModified', example='2022-10-20T02:19:55Z'),
  maxVersion?: long(name='MaxVersion', example='2'),
  name?: string(name='Name'),
  progress?: string(name='Progress', example='100'),
  requestId?: string(name='RequestId', example='B1A0198B-F316-1B72-B8DD-28B6F6D6XXXX'),
  status?: string(name='Status', example='Available'),
  supportRegionIds?: string(name='SupportRegionIds', example='["cn-hangzhou","cn-beijing"]'),
  versionName?: string(name='VersionName', example='v1'),
}

model GetArtifactResponse = {
  headers: map[string]string(name='headers'),
  body: GetArtifactResponseBody(name='body'),
}

async function getArtifact(request: GetArtifactRequest): GetArtifactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetArtifact', 'POST', '/', 'json', false, 'json', request);
}

model GetArtifactRepositoryCredentialsRequest {
  artifactType: string(name='ArtifactType', example='File', position='Query'),
  deployRegionId?: string(name='DeployRegionId', example='cn-hangzhou', position='Query'),
}

model GetArtifactRepositoryCredentialsResponseBody = {
  availableResources?: [ 
    {
      path?: string(name='Path', example='"/xxx/"'),
      regionId?: string(name='RegionId', example='oss-cn-hangzhou'),
      repositoryName?: string(name='RepositoryName', example='computenest-artifacts-draft-cn-hangzhou'),
    }
  ](name='AvailableResources'),
  credentials?: {
    accessKeyId?: string(name='AccessKeyId', example='STS.xxx'),
    accessKeySecret?: string(name='AccessKeySecret', example='xxx'),
    password?: string(name='Password', example='eyJ0aW1lIjoiMTUyNjU0OTc5:0705733****'),
    securityToken?: string(name='SecurityToken', example='xxx'),
    username?: string(name='Username', example='xxx'),
  }(name='Credentials'),
  expireDate?: string(name='ExpireDate', example='1526549792000'),
  requestId?: string(name='RequestId', example='94E89857-B994-44B6-9C4F-DBD200E9XXXX'),
}

model GetArtifactRepositoryCredentialsResponse = {
  headers: map[string]string(name='headers'),
  body: GetArtifactRepositoryCredentialsResponseBody(name='body'),
}

async function getArtifactRepositoryCredentials(request: GetArtifactRepositoryCredentialsRequest): GetArtifactRepositoryCredentialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetArtifactRepositoryCredentials', 'POST', '/', 'json', false, 'json', request);
}

model GetServiceInstanceRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceInstanceId: string(name='ServiceInstanceId', example='si-d6ab3a63ccbb4b17****', position='Query'),
}

model GetServiceInstanceResponseBody = {
  createTime?: string(name='CreateTime', example='2021-05-20T00:00:00Z'),
  enableInstanceOps?: boolean(name='EnableInstanceOps', example='true'),
  endTime?: string(name='EndTime', example='2022-01-01T12:00:00'),
  isOperated?: boolean(name='IsOperated', example='true'),
  licenseMetadata?: string(name='LicenseMetadata', example='{"renewType":"MONTHLY"}'),
  name?: string(name='Name', example='TestName'),
  networkConfig?: {
    endpointId?: string(name='EndpointId', example='ep-m5ei37240541816b****'),
    endpointServiceId?: string(name='EndpointServiceId', example='epsrv-5ei07324541816bxxxx'),
    privateVpcConnections?: [ 
      {
        connectionConfigs?: [ 
          {
            endpointIps?: [ string ](name='EndpointIps'),
            ingressEndpointStatus?: string(name='IngressEndpointStatus'),
            networkServiceStatus?: string(name='NetworkServiceStatus'),
            securityGroups?: [ string ](name='SecurityGroups'),
            vSwitches?: [ string ](name='VSwitches'),
            vpcId?: string(name='VpcId'),
          }
        ](name='ConnectionConfigs'),
        endpointId?: string(name='EndpointId', example='ep-m5ei37240541816b****'),
        endpointServiceId?: string(name='EndpointServiceId', example='epsrv-5ei07324541816bxxxx'),
        privateZoneName?: string(name='PrivateZoneName'),
      }
    ](name='PrivateVpcConnections'),
    reversePrivateVpcConnections?: [ 
      {
        endpointId?: string(name='EndpointId', example='ep-m5ei42370541816b****'),
        endpointServiceId?: string(name='EndpointServiceId', example='epsrv-5ei07324541816bxxxx'),
      }
    ](name='ReversePrivateVpcConnections'),
  }(name='NetworkConfig'),
  operatedServiceInstanceId?: string(name='OperatedServiceInstanceId', example='si-d6ab3a63ccbb4b17****'),
  operationEndTime?: string(name='OperationEndTime', example='2022-01-28T06:48:56Z'),
  operationStartTime?: string(name='OperationStartTime', example='2021-12-29T06:48:56Z'),
  outputs?: string(name='Outputs', example='{
      "InstanceIds": [
            "i-hp38ofxl0dsyfi7z****"
      ]
}'),
  parameters?: string(name='Parameters', example='{
      "param": "value"
}'),
  payType?: string(name='PayType', example='Subscription'),
  progress?: long(name='Progress', example='90'),
  requestId?: string(name='RequestId', example='4DB0F536-B3BE-4F0D-BD29-E83FB56D550C'),
  resources?: string(name='Resources', example='[
      {
            "StackId": "stack-xxx"
      }
]'),
  service?: {
    deployMetadata?: string(name='DeployMetadata'),
    deployType?: string(name='DeployType', example='ros'),
    publishTime?: string(name='PublishTime', example='2021-05-21T00:00:00Z'),
    serviceDocUrl?: string(name='ServiceDocUrl', example='http://example.com'),
    serviceId?: string(name='ServiceId', example='service-9c8a3522528b4fe8****'),
    serviceInfos?: [ 
      {
        image?: string(name='Image', example='https://example.com/service-image/c1c4a559-cc60-4af1-b976-98f356602462.png'),
        locale?: string(name='Locale', example='zh-CN'),
        name?: string(name='Name'),
        shortDescription?: string(name='ShortDescription'),
      }
    ](name='ServiceInfos'),
    serviceProductUrl?: string(name='ServiceProductUrl', example='https://service-info-private.oss-cn-hangzhou.aliyuncs.com'),
    serviceType?: string(name='ServiceType', example='private'),
    status?: string(name='Status', example='Online'),
    supplierName?: string(name='SupplierName'),
    supplierUrl?: string(name='SupplierUrl', example='http://example.com'),
    version?: string(name='Version', example='1'),
    versionName?: string(name='VersionName'),
  }(name='Service'),
  serviceInstanceId?: string(name='ServiceInstanceId', example='si-d6ab3a63ccbb4b17****'),
  serviceType?: string(name='ServiceType', example='private'),
  source?: string(name='Source', example='User'),
  status?: string(name='Status', example='Deployed'),
  statusDetail?: string(name='StatusDetail', example='deploy successfully'),
  supplierUid?: long(name='SupplierUid', example='1964460391538545'),
  tags?: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tags'),
  templateName?: string(name='TemplateName'),
  updateTime?: string(name='UpdateTime', example='2021-05-20T00:00:00Z'),
  userId?: long(name='UserId', example='1234567'),
}

model GetServiceInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceInstanceResponseBody(name='body'),
}

async function getServiceInstance(request: GetServiceInstanceRequest): GetServiceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceInstance', 'POST', '/', 'json', false, 'json', request);
}

model ListArtifactVersionsRequest {
  artifactId: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx', position='Query'),
  maxResult?: string(name='MaxResult', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAc3HCuYhJi/wvpk4xOr0VLbfVwapgMwCN1wYzPVzLbItEdB0uWSY7AGnM3qCgm/YnjuEfwSnMwiMkcUoI0hRQzE=', position='Query'),
}

model ListArtifactVersionsResponseBody = {
  artifacts?: [ 
    {
      artifactId?: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx'),
      artifactProperty?: string(name='ArtifactProperty', example='{\\"CommodityCode\\":\\"cmjj0005xxxx\\",\\"CommodityVersion\\":\\"V2022xxxx\\"}'),
      artifactType?: string(name='ArtifactType', example='EcsImage'),
      artifactVersion?: string(name='ArtifactVersion', example='2'),
      gmtCreate?: string(name='GmtCreate', example='2022-10-20T02:19:53Z'),
      gmtModified?: string(name='GmtModified', example='2022-10-20T02:19:55Z'),
      imageDelivery?: map[string]string(name='ImageDelivery'),
      progress?: string(name='Progress', example='100'),
      resultFile?: string(name='ResultFile'),
      securityAuditResult?: string(name='SecurityAuditResult', example='Normal'),
      status?: string(name='Status', example='Available'),
      supportRegionIds?: string(name='SupportRegionIds', example='[
					"cn-beijing",
					"cn-hangzhou",
					"cn-shanghai"
				]'),
      versionName?: string(name='VersionName', example='v1'),
    }
  ](name='Artifacts'),
  maxResults?: string(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAc3HCuYhJi/wvpk4xOr0VLbfVwapgMwCN1wYzPVzLbItEdB0uWSY7AGnM3qCgm/YnjuEfwSnMwiMkcUoI0hRQzE='),
  requestId?: string(name='RequestId', example='46577928-3162-15A6-9084-69820EB9xxxx'),
  totalCount?: string(name='TotalCount', example='2'),
}

model ListArtifactVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListArtifactVersionsResponseBody(name='body'),
}

async function listArtifactVersions(request: ListArtifactVersionsRequest): ListArtifactVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListArtifactVersions', 'POST', '/', 'json', false, 'json', request);
}

model ListArtifactsRequest {
  filter?: [ 
    {
      name?: string(name='Name', example='ArtifactType'),
      values?: [ string ](name='Values'),
    }
  ](name='Filter', position='Query'),
  maxResults?: string(name='MaxResults', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAc3HCuYhJi/wvpk4xOr0VLbfVwapgMwCN1wYzPVzLbItEdB0uWSY7AGnM3qCgm/YnjuEfwSnMwiMkcUoI0hRQzE=', position='Query'),
}

model ListArtifactsResponseBody = {
  artifacts?: [ 
    {
      artifactId?: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx'),
      artifactType?: string(name='ArtifactType', example='EcsImage'),
      description?: string(name='Description'),
      gmtModified?: string(name='GmtModified', example='2022-10-20T02:19:55Z'),
      maxVersion?: string(name='MaxVersion', example='2'),
      name?: string(name='Name'),
      status?: string(name='Status', example='Created'),
    }
  ](name='Artifacts'),
  maxResults?: string(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAc3HCuYhJi/wvpk4xOr0VLbfVwapgMwCN1wYzPVzLbItEdB0uWSY7AGnM3qCgm/YnjuEfwSnMwiMkcUoI0hRQzE='),
  requestId?: string(name='RequestId', example='46577928-3162-15A6-9084-69820EB9xxxx'),
  totalCount?: string(name='TotalCount', example='2'),
}

model ListArtifactsResponse = {
  headers: map[string]string(name='headers'),
  body: ListArtifactsResponseBody(name='body'),
}

async function listArtifacts(request: ListArtifactsRequest): ListArtifactsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListArtifacts', 'POST', '/', 'json', false, 'json', request);
}

model ListServiceInstancesRequest {
  filter?: [ 
    {
      name?: string(name='Name', example='ServiceInstanceId'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter', position='Query'),
  maxResults?: string(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='BBBAAfu+XtuBE55iRLHEYYuojI4=', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tag', position='Query'),
}

model ListServiceInstancesResponseBody = {
  maxResults?: string(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAfu+XtuBE55iRLHEYYuojI4='),
  requestId?: string(name='RequestId', example='E50287CB-AABF-4877-92C0-289B339A1546'),
  serviceInstances?: [ 
    {
      createTime?: string(name='CreateTime', example='2021-05-20T00:00:00Z'),
      enableInstanceOps?: boolean(name='EnableInstanceOps', example='true'),
      endTime?: string(name='EndTime', example='2022-01-01T12:00:00'),
      isOperated?: boolean(name='IsOperated'),
      name?: string(name='Name', example='TestName'),
      operatedServiceInstanceId?: string(name='OperatedServiceInstanceId', example='si-d6ab3a63ccbb4b17****'),
      operationEndTime?: string(name='OperationEndTime', example='2021-12-29T06:48:56Z'),
      operationStartTime?: string(name='OperationStartTime', example='2021-12-29T06:48:56Z'),
      parameters?: string(name='Parameters', example='{"param":"value"}'),
      payType?: string(name='PayType', example='Subscription'),
      progress?: long(name='Progress', example='90'),
      service?: {
        deployMetadata?: string(name='DeployMetadata'),
        deployType?: string(name='DeployType', example='ros'),
        publishTime?: string(name='PublishTime', example='2021-05-21T00:00:00Z'),
        serviceId?: string(name='ServiceId', example='service-0e6fca6a51a54420****'),
        serviceInfos?: [ 
          {
            image?: string(name='Image', example='https://example.com/service-image/c1c4a559-cc60-4af1-b976-98f356602462.png'),
            locale?: string(name='Locale', example='zh-CN'),
            name?: string(name='Name'),
            shortDescription?: string(name='ShortDescription'),
          }
        ](name='ServiceInfos'),
        serviceType?: string(name='ServiceType', example='private'),
        status?: string(name='Status', example='Online'),
        supplierName?: string(name='SupplierName'),
        supplierUrl?: string(name='SupplierUrl', example='http://example.com'),
        version?: string(name='Version', example='1.0'),
        versionName?: string(name='VersionName'),
      }(name='Service'),
      serviceInstanceId?: string(name='ServiceInstanceId', example='si-d6ab3a63ccbb4b17****'),
      serviceType?: string(name='ServiceType', example='private'),
      source?: string(name='Source', example='Supplier'),
      status?: string(name='Status', example='Deployed'),
      statusDetail?: string(name='StatusDetail', example='deploy successfully'),
      tags?: [ 
        {
          key?: string(name='Key', example='key1'),
          value?: string(name='Value', example='value1'),
        }
      ](name='Tags'),
      templateName?: string(name='TemplateName'),
      updateTime?: string(name='UpdateTime', example='2021-05-20T00:00:00Z'),
      userId?: long(name='UserId', example='1234567'),
    }
  ](name='ServiceInstances'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListServiceInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListServiceInstancesResponseBody(name='body'),
}

async function listServiceInstances(request: ListServiceInstancesRequest): ListServiceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServiceInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListServiceUsagesRequest {
  filter?: [ 
    {
      name?: string(name='Name', example='ServiceId'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAWns8w4MmhzeptXVRG0PUEU=', position='Query'),
}

model ListServiceUsagesResponseBody = {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', description='NextToken', example='AAAAAYChudnQUoBH+mGWFpb6oP0='),
  requestId?: string(name='RequestId', description='Id of the request', example='18AD0960-A9FE-1AC8-ADF8-22131Fxxxxxx'),
  serviceUsages?: [ 
    {
      comments?: string(name='Comments'),
      createTime?: string(name='CreateTime', example='2022-05-25T02:02:02Z'),
      serviceId?: string(name='ServiceId', example='service-c9f36ec6d19b4exxxxxx'),
      serviceName?: string(name='ServiceName'),
      status?: string(name='Status', example='Submitted'),
      supplierName?: string(name='SupplierName'),
      updateTime?: string(name='UpdateTime', example='2022-05-25T02:02:02Z'),
      userAliUid?: long(name='UserAliUid', example='127383705958xxxx'),
      userInformation?: {
        company?: string(name='Company', example='alibaba'),
        country?: string(name='Country', example='china'),
        emailAddress?: string(name='EmailAddress', example='a****@xyc.com'),
        industry?: string(name='Industry'),
        name?: string(name='Name'),
        source?: string(name='Source', example='223.2.1.3.xxxx'),
        telephone?: string(name='Telephone', example='12345xxxxxx'),
        title?: string(name='Title'),
      }(name='UserInformation'),
    }
  ](name='ServiceUsages'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListServiceUsagesResponse = {
  headers: map[string]string(name='headers'),
  body: ListServiceUsagesResponseBody(name='body'),
}

async function listServiceUsages(request: ListServiceUsagesRequest): ListServiceUsagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServiceUsages', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseArtifactRequest {
  artifactId: string(name='ArtifactId', example='artifact-9feded91880e4c78xxxx', position='Query'),
}

model ReleaseArtifactResponseBody = {
  artifactId?: string(name='ArtifactId', example='artifact-9feded91880e4c78xxxx'),
  artifactProperty?: string(name='ArtifactProperty', example='"{\\"Url\\":\\"https://computenest-artifacts-draft-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/130920852836xxxx/cn-hangzhou/service-8072a04e5a134382xxxx/165095355xxxx/changes.txt\\",\\"ConfigurationMetadata\\":\\"{\\\\\\"WorkDir\\\\\\":\\\\\\"/root\\\\\\",\\\\\\"Platform\\\\\\":\\\\\\"Linux\\\\\\",\\\\\\"CommandType\\\\\\":\\\\\\"RunShellScript\\\\\\",\\\\\\"UpgradeScript\\\\\\":\\\\\\"cd /root\\\\\\\\ncp changes.txt cpchanges.txt\\\\\\\\nmv changes.txt mvchangge.txt\\\\\\"}\\"}"'),
  artifactType?: string(name='ArtifactType', example='File'),
  artifactVersion?: string(name='ArtifactVersion', example='draft'),
  description?: string(name='Description'),
  gmtModified?: string(name='GmtModified', example='1650954178000'),
  requestId?: string(name='RequestId', example='3818BA7D-3F50-1A44-9FF3-04A52A59XXXX'),
  status?: string(name='Status', example='Created'),
  versionName?: string(name='VersionName'),
}

model ReleaseArtifactResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseArtifactResponseBody(name='body'),
}

async function releaseArtifact(request: ReleaseArtifactRequest): ReleaseArtifactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseArtifact', 'POST', '/', 'json', false, 'json', request);
}

model UpdateArtifactRequest {
  artifactId: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx', position='Query'),
  artifactProperty: {
    commodityCode?: string(name='CommodityCode', example='cmjj00xxxx'),
    commodityVersion?: string(name='CommodityVersion', example='V1.0'),
    fileScriptMetadata?: string(name='FileScriptMetadata', example='{\\"WorkDir\\":\\"/root\\",\\"CommandType\\":\\"RunShellScript\\",\\"Platform\\":\\"Linux\\",\\"Script\\":\\"echo hello\\"}'),
    imageId?: string(name='ImageId', example='m-0xij191j9cuev6ucxxxx'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    scriptMetadata?: string(name='ScriptMetadata', example='{"ScriptMetadata":"{\\"CommandType\\":\\"RunShellScript\\",\\"Platform\\":\\"Linux\\",\\"Script\\":\\"ls\\"}"}'),
    url?: string(name='Url', example='https://service-info-private.oss-cn-hangzhou.aliyuncs.com/1309208528xxxxxx/template/2e1ce8fc-xxxx-481c-9e8e-789ba9db487d.json'),
  }(name='ArtifactProperty', shrink='json', position='Query'),
  description?: string(name='Description', position='Query'),
  supportRegionIds?: [ string ](name='SupportRegionIds', position='Query'),
  versionName: string(name='VersionName', example='v1', position='Query'),
}

model UpdateArtifactResponseBody = {
  artifactId?: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx'),
  artifactProperty?: string(name='ArtifactProperty', example='{\\"CommodityCode\\":\\"cmjj0005xxxx\\",\\"CommodityVersion\\":\\"V2022xxxx\\"}'),
  artifactType?: string(name='ArtifactType', example='EcsImage'),
  artifactVersion?: string(name='ArtifactVersion', example='2'),
  description?: string(name='Description'),
  gmtModified?: string(name='GmtModified', example='2022-10-20T02:19:55Z'),
  requestId?: string(name='RequestId', example='B1A0198B-F316-1B72-B8DD-28B6F6D6XXXX'),
  status?: string(name='Status', example='Available'),
  supportRegionIds?: string(name='SupportRegionIds', example='[
			"cn-beijing",
			"cn-hangzhou",
			"cn-shanghai"
		]'),
  versionName?: string(name='VersionName', example='v1'),
}

model UpdateArtifactResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateArtifactResponseBody(name='body'),
}

async function updateArtifact(request: UpdateArtifactRequest): UpdateArtifactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateArtifact', 'POST', '/', 'json', false, 'json', request);
}

