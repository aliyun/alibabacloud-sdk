/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('computenestsupplier', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model InvokeServiceInstanceOperationAPIRequest {
  serviceInstanceId?: string(name='ServiceInstanceId'),
  regionId?: string(name='RegionId'),
  operationProduct?: string(name='OperationProduct'),
  operationAction?: string(name='OperationAction'),
  operationVersion?: string(name='OperationVersion'),
  operationParameters?: string(name='OperationParameters'),
}

model InvokeServiceInstanceOperationAPIResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  operationResults?: string(name='OperationResults'),
}

model InvokeServiceInstanceOperationAPIResponse = {
  headers: map[string]string(name='headers'),
  body: InvokeServiceInstanceOperationAPIResponseBody(name='body'),
}

async function invokeServiceInstanceOperationAPIWithOptions(request: InvokeServiceInstanceOperationAPIRequest, runtime: Util.RuntimeOptions): InvokeServiceInstanceOperationAPIResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InvokeServiceInstanceOperationAPI', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function invokeServiceInstanceOperationAPI(request: InvokeServiceInstanceOperationAPIRequest): InvokeServiceInstanceOperationAPIResponse {
  var runtime = new Util.RuntimeOptions{};
  return invokeServiceInstanceOperationAPIWithOptions(request, runtime);
}

model GetServiceInstanceRequest {
  serviceInstanceId?: string(name='ServiceInstanceId'),
  regionId?: string(name='RegionId'),
}

model GetServiceInstanceResponseBody = {
  status?: string(name='Status'),
  templateName?: string(name='TemplateName'),
  updateTime?: string(name='UpdateTime'),
  requestId?: string(name='RequestId'),
  serviceInstanceId?: string(name='ServiceInstanceId'),
  createTime?: string(name='CreateTime'),
  userId?: long(name='UserId'),
  service?: {
    status?: string(name='Status'),
    publishTime?: string(name='PublishTime'),
    version?: string(name='Version'),
    deployMetadata?: string(name='DeployMetadata'),
    deployType?: string(name='DeployType'),
    serviceId?: string(name='ServiceId'),
    supplierUrl?: string(name='SupplierUrl'),
    serviceType?: string(name='ServiceType'),
    supplierName?: string(name='SupplierName'),
    serviceInfos?: [ 
      {
        locale?: string(name='Locale'),
        image?: string(name='Image'),
        name?: string(name='Name'),
        shortDescription?: string(name='ShortDescription'),
      }
    ](name='ServiceInfos'),
  }(name='Service'),
  parameters?: string(name='Parameters'),
  progress?: long(name='Progress'),
  statusDetail?: string(name='StatusDetail'),
  operationStartTime?: string(name='OperationStartTime'),
  operationEndTime?: string(name='OperationEndTime'),
  operatedServiceInstanceId?: string(name='OperatedServiceInstanceId'),
  isOperated?: boolean(name='IsOperated'),
  enableInstanceOps?: boolean(name='EnableInstanceOps'),
  resources?: string(name='Resources'),
}

model GetServiceInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceInstanceResponseBody(name='body'),
}

async function getServiceInstanceWithOptions(request: GetServiceInstanceRequest, runtime: Util.RuntimeOptions): GetServiceInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetServiceInstance', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getServiceInstance(request: GetServiceInstanceRequest): GetServiceInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getServiceInstanceWithOptions(request, runtime);
}

model DeleteServiceRequest {
  regionId?: string(name='RegionId'),
  serviceId?: string(name='ServiceId'),
  serviceVersion?: string(name='ServiceVersion'),
  clientToken?: string(name='ClientToken'),
}

model DeleteServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceResponseBody(name='body'),
}

async function deleteServiceWithOptions(request: DeleteServiceRequest, runtime: Util.RuntimeOptions): DeleteServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteService', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteService(request: DeleteServiceRequest): DeleteServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteServiceWithOptions(request, runtime);
}

model DeleteDeploymentVersionRequest {
  regionId?: string(name='RegionId'),
  deploymentId?: string(name='DeploymentId'),
  deploymentVersion?: string(name='DeploymentVersion'),
  clientToken?: string(name='ClientToken'),
}

model DeleteDeploymentVersionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteDeploymentVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeploymentVersionResponseBody(name='body'),
}

async function deleteDeploymentVersionWithOptions(request: DeleteDeploymentVersionRequest, runtime: Util.RuntimeOptions): DeleteDeploymentVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDeploymentVersion', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDeploymentVersion(request: DeleteDeploymentVersionRequest): DeleteDeploymentVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeploymentVersionWithOptions(request, runtime);
}

model CancelServiceRegistrationRequest {
  regionId?: string(name='RegionId'),
  registrationId?: string(name='RegistrationId'),
  clientToken?: string(name='ClientToken'),
}

model CancelServiceRegistrationResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelServiceRegistrationResponse = {
  headers: map[string]string(name='headers'),
  body: CancelServiceRegistrationResponseBody(name='body'),
}

async function cancelServiceRegistrationWithOptions(request: CancelServiceRegistrationRequest, runtime: Util.RuntimeOptions): CancelServiceRegistrationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelServiceRegistration', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelServiceRegistration(request: CancelServiceRegistrationRequest): CancelServiceRegistrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelServiceRegistrationWithOptions(request, runtime);
}

model DeleteDeploymentRequest {
  regionId?: string(name='RegionId'),
  deploymentId?: string(name='DeploymentId'),
  clientToken?: string(name='ClientToken'),
}

model DeleteDeploymentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteDeploymentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeploymentResponseBody(name='body'),
}

async function deleteDeploymentWithOptions(request: DeleteDeploymentRequest, runtime: Util.RuntimeOptions): DeleteDeploymentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDeployment', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDeployment(request: DeleteDeploymentRequest): DeleteDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeploymentWithOptions(request, runtime);
}

model ValidateTemplateRequest {
  regionId?: string(name='RegionId'),
  clientToken?: string(name='ClientToken'),
  templateBody?: string(name='TemplateBody'),
  templateType?: string(name='TemplateType'),
}

model ValidateTemplateResponseBody = {
  parameters?: [  map[string]any ](name='Parameters'),
  requestId?: string(name='RequestId'),
  outputs?: [ 
    {
      outputKey?: string(name='OutputKey'),
      description?: string(name='Description'),
    }
  ](name='Outputs'),
  description?: string(name='Description'),
}

model ValidateTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ValidateTemplateResponseBody(name='body'),
}

async function validateTemplateWithOptions(request: ValidateTemplateRequest, runtime: Util.RuntimeOptions): ValidateTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ValidateTemplate', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function validateTemplate(request: ValidateTemplateRequest): ValidateTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return validateTemplateWithOptions(request, runtime);
}

model GetSupplierInformationRequest {
  regionId?: string(name='RegionId'),
}

model GetSupplierInformationResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  supplierName?: string(name='SupplierName'),
  supplierUrl?: string(name='SupplierUrl'),
  supplierDesc?: string(name='SupplierDesc'),
  operationIp?: string(name='OperationIp'),
  operationMfaPresent?: boolean(name='OperationMfaPresent'),
  deliverySettings?: {
    ossEnabled?: boolean(name='OssEnabled'),
    ossBucketName?: string(name='OssBucketName'),
    ossPath?: string(name='OssPath'),
    ossExpirationDays?: long(name='OssExpirationDays'),
  }(name='DeliverySettings'),
}

model GetSupplierInformationResponse = {
  headers: map[string]string(name='headers'),
  body: GetSupplierInformationResponseBody(name='body'),
}

async function getSupplierInformationWithOptions(request: GetSupplierInformationRequest, runtime: Util.RuntimeOptions): GetSupplierInformationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetSupplierInformation', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getSupplierInformation(request: GetSupplierInformationRequest): GetSupplierInformationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSupplierInformationWithOptions(request, runtime);
}

model ListServiceInstancesRequest {
  regionId?: string(name='RegionId'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  filter?: [ 
    {
      value?: [ string ](name='Value'),
      name?: string(name='Name'),
    }
  ](name='Filter'),
}

model ListServiceInstancesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  maxResults?: string(name='MaxResults'),
  serviceInstances?: [ 
    {
      status?: string(name='Status'),
      updateTime?: string(name='UpdateTime'),
      serviceInstanceId?: string(name='ServiceInstanceId'),
      createTime?: string(name='CreateTime'),
      userId?: long(name='UserId'),
      service?: {
        status?: string(name='Status'),
        publishTime?: string(name='PublishTime'),
        version?: string(name='Version'),
        deployType?: string(name='DeployType'),
        serviceId?: string(name='ServiceId'),
        supplierUrl?: string(name='SupplierUrl'),
        serviceType?: string(name='ServiceType'),
        supplierName?: string(name='SupplierName'),
        serviceInfos?: [ 
          {
            locale?: string(name='Locale'),
            image?: string(name='Image'),
            name?: string(name='Name'),
            shortDescription?: string(name='ShortDescription'),
          }
        ](name='ServiceInfos'),
      }(name='Service'),
      parameters?: string(name='Parameters'),
      progress?: long(name='Progress'),
      statusDetail?: string(name='StatusDetail'),
      templateName?: string(name='TemplateName'),
      operatedServiceInstanceId?: string(name='OperatedServiceInstanceId'),
      operationStartTime?: string(name='OperationStartTime'),
      operationEndTime?: string(name='OperationEndTime'),
      enableInstanceOps?: boolean(name='EnableInstanceOps'),
    }
  ](name='ServiceInstances'),
}

model ListServiceInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListServiceInstancesResponseBody(name='body'),
}

async function listServiceInstancesWithOptions(request: ListServiceInstancesRequest, runtime: Util.RuntimeOptions): ListServiceInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListServiceInstances', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listServiceInstances(request: ListServiceInstancesRequest): ListServiceInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listServiceInstancesWithOptions(request, runtime);
}

model RegisterServiceRequest {
  regionId?: string(name='RegionId'),
  serviceId?: string(name='ServiceId'),
  clientToken?: string(name='ClientToken'),
}

model RegisterServiceResponseBody = {
  registrationId?: string(name='RegistrationId'),
  requestId?: string(name='RequestId'),
}

model RegisterServiceResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterServiceResponseBody(name='body'),
}

async function registerServiceWithOptions(request: RegisterServiceRequest, runtime: Util.RuntimeOptions): RegisterServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RegisterService', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function registerService(request: RegisterServiceRequest): RegisterServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerServiceWithOptions(request, runtime);
}

model ListDeploymentVersionsRequest {
  regionId?: string(name='RegionId'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  filter?: [ 
    {
      value?: [ string ](name='Value'),
      name?: string(name='Name'),
    }
  ](name='Filter'),
}

model ListDeploymentVersionsResponseBody = {
  totalCount?: int32(name='TotalCount', description='TotalCount本次请求条件下的数据总量，此参数为可选参数，默认可不返回'),
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: string(name='NextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  maxResults?: int32(name='MaxResults', description='MaxResults本次请求所返回的最大记录条数'),
  deploymentVersions?: [ 
    {
      deploymentId?: string(name='DeploymentId'),
      version?: string(name='Version'),
      deployMetadata?: string(name='DeployMetadata'),
      serviceId?: string(name='ServiceId'),
      isDefault?: boolean(name='IsDefault'),
    }
  ](name='DeploymentVersions'),
}

model ListDeploymentVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeploymentVersionsResponseBody(name='body'),
}

async function listDeploymentVersionsWithOptions(request: ListDeploymentVersionsRequest, runtime: Util.RuntimeOptions): ListDeploymentVersionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListDeploymentVersions', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listDeploymentVersions(request: ListDeploymentVersionsRequest): ListDeploymentVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeploymentVersionsWithOptions(request, runtime);
}

model ListPoliciesRequest {
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
}

model ListPoliciesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: string(name='NextToken', description='NextToken'),
  policies?: [ 
    {
      description?: string(name='Description'),
      policyName?: string(name='PolicyName'),
      policyType?: string(name='PolicyType'),
      policyDocument?: string(name='PolicyDocument'),
    }
  ](name='Policies'),
  maxResults?: string(name='MaxResults'),
}

model ListPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPoliciesResponseBody(name='body'),
}

async function listPoliciesWithOptions(request: ListPoliciesRequest, runtime: Util.RuntimeOptions): ListPoliciesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListPolicies', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listPolicies(request: ListPoliciesRequest): ListPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPoliciesWithOptions(request, runtime);
}

model GetDeploymentVersionRequest {
  regionId?: string(name='RegionId'),
  deploymentId?: string(name='DeploymentId'),
  deploymentVersion?: string(name='DeploymentVersion'),
  clientToken?: string(name='ClientToken'),
}

model GetDeploymentVersionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  serviceId?: string(name='ServiceId'),
  deploymentId?: string(name='DeploymentId'),
  version?: string(name='Version'),
  deployType?: string(name='DeployType'),
  deployMetadata?: string(name='DeployMetadata'),
  isDefault?: boolean(name='IsDefault'),
}

model GetDeploymentVersionResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeploymentVersionResponseBody(name='body'),
}

async function getDeploymentVersionWithOptions(request: GetDeploymentVersionRequest, runtime: Util.RuntimeOptions): GetDeploymentVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDeploymentVersion', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDeploymentVersion(request: GetDeploymentVersionRequest): GetDeploymentVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeploymentVersionWithOptions(request, runtime);
}

model LaunchServiceRequest {
  regionId?: string(name='RegionId'),
  serviceId?: string(name='ServiceId'),
  serviceVersion?: string(name='ServiceVersion'),
  clientToken?: string(name='ClientToken'),
}

model LaunchServiceResponseBody = {
  requestId?: string(name='RequestId'),
  serviceId?: string(name='ServiceId'),
  version?: string(name='Version'),
  status?: string(name='Status'),
}

model LaunchServiceResponse = {
  headers: map[string]string(name='headers'),
  body: LaunchServiceResponseBody(name='body'),
}

async function launchServiceWithOptions(request: LaunchServiceRequest, runtime: Util.RuntimeOptions): LaunchServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('LaunchService', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function launchService(request: LaunchServiceRequest): LaunchServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return launchServiceWithOptions(request, runtime);
}

model UpdateDeploymentRequest {
  regionId?: string(name='RegionId'),
  deploymentId?: string(name='DeploymentId'),
  description?: string(name='Description'),
  clientToken?: string(name='ClientToken'),
  deploymentName?: string(name='DeploymentName'),
  defaultVersion?: string(name='DefaultVersion'),
}

model UpdateDeploymentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  deploymentId?: string(name='DeploymentId'),
  version?: string(name='Version'),
  deployMetadata?: string(name='DeployMetadata'),
}

model UpdateDeploymentResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDeploymentResponseBody(name='body'),
}

async function updateDeploymentWithOptions(request: UpdateDeploymentRequest, runtime: Util.RuntimeOptions): UpdateDeploymentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDeployment', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDeployment(request: UpdateDeploymentRequest): UpdateDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDeploymentWithOptions(request, runtime);
}

model WithdrawServiceRequest {
  regionId?: string(name='RegionId'),
  serviceId?: string(name='ServiceId'),
  serviceVersion?: string(name='ServiceVersion'),
  clientToken?: string(name='ClientToken'),
}

model WithdrawServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model WithdrawServiceResponse = {
  headers: map[string]string(name='headers'),
  body: WithdrawServiceResponseBody(name='body'),
}

async function withdrawServiceWithOptions(request: WithdrawServiceRequest, runtime: Util.RuntimeOptions): WithdrawServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('WithdrawService', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function withdrawService(request: WithdrawServiceRequest): WithdrawServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return withdrawServiceWithOptions(request, runtime);
}

model GetServiceProviderKeyRequest {
  serviceId?: string(name='ServiceId'),
}

model GetServiceProviderKeyResponseBody = {
  requestId?: string(name='RequestId'),
  serviceKey?: string(name='ServiceKey'),
}

model GetServiceProviderKeyResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceProviderKeyResponseBody(name='body'),
}

async function getServiceProviderKeyWithOptions(request: GetServiceProviderKeyRequest, runtime: Util.RuntimeOptions): GetServiceProviderKeyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetServiceProviderKey', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getServiceProviderKey(request: GetServiceProviderKeyRequest): GetServiceProviderKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getServiceProviderKeyWithOptions(request, runtime);
}

model UpdateSupplierInformationRequest {
  regionId?: string(name='RegionId'),
  operationIp?: string(name='OperationIp'),
  operationMfaPresent?: boolean(name='OperationMfaPresent'),
  deliverySettings?: {
    ossEnabled?: boolean(name='OssEnabled'),
    ossBucketName?: string(name='OssBucketName'),
    ossPath?: string(name='OssPath'),
    ossExpirationDays?: long(name='OssExpirationDays'),
  }(name='DeliverySettings'),
}

model UpdateSupplierInformationResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  supplierName?: string(name='SupplierName'),
  supplierUrl?: string(name='SupplierUrl'),
  supplierDesc?: string(name='SupplierDesc'),
}

model UpdateSupplierInformationResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSupplierInformationResponseBody(name='body'),
}

async function updateSupplierInformationWithOptions(request: UpdateSupplierInformationRequest, runtime: Util.RuntimeOptions): UpdateSupplierInformationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateSupplierInformation', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateSupplierInformation(request: UpdateSupplierInformationRequest): UpdateSupplierInformationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSupplierInformationWithOptions(request, runtime);
}

model GetDeploymentRequest {
  regionId?: string(name='RegionId'),
  deploymentId?: string(name='DeploymentId'),
  deploymentVersion?: string(name='DeploymentVersion'),
  clientToken?: string(name='ClientToken'),
}

model GetDeploymentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  serviceId?: string(name='ServiceId'),
  deploymentId?: string(name='DeploymentId'),
  version?: string(name='Version'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  deployType?: string(name='DeployType'),
  deployMetadata?: string(name='DeployMetadata'),
  defaultVersion?: string(name='DefaultVersion'),
}

model GetDeploymentResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeploymentResponseBody(name='body'),
}

async function getDeploymentWithOptions(request: GetDeploymentRequest, runtime: Util.RuntimeOptions): GetDeploymentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDeployment', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDeployment(request: GetDeploymentRequest): GetDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeploymentWithOptions(request, runtime);
}

model ListServicesRequest {
  regionId?: string(name='RegionId'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  allVersions?: boolean(name='AllVersions'),
  filter?: [ 
    {
      value?: [ string ](name='Value'),
      name?: string(name='Name'),
    }
  ](name='Filter'),
  requestTags?: [ 
    {
      value?: string(name='Value'),
      key?: string(name='Key'),
    }
  ](name='RequestTags'),
}

model ListServicesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
  maxResults?: int32(name='MaxResults'),
  services?: [ 
    {
      status?: string(name='Status'),
      defaultVersion?: boolean(name='DefaultVersion'),
      publishTime?: string(name='PublishTime'),
      version?: string(name='Version'),
      deployType?: string(name='DeployType'),
      serviceId?: string(name='ServiceId'),
      supplierUrl?: string(name='SupplierUrl'),
      serviceType?: string(name='ServiceType'),
      supplierName?: string(name='SupplierName'),
      serviceInfos?: [ 
        {
          locale?: string(name='Locale'),
          image?: string(name='Image'),
          name?: string(name='Name'),
          shortDescription?: string(name='ShortDescription'),
        }
      ](name='ServiceInfos'),
      commodityCode?: string(name='CommodityCode'),
    }
  ](name='Services'),
}

model ListServicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListServicesResponseBody(name='body'),
}

async function listServicesWithOptions(request: ListServicesRequest, runtime: Util.RuntimeOptions): ListServicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListServices', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listServices(request: ListServicesRequest): ListServicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listServicesWithOptions(request, runtime);
}

model ListServiceRegistrationsRequest {
  regionId?: string(name='RegionId'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  filter?: [ 
    {
      value?: [ string ](name='Value'),
      name?: string(name='Name'),
    }
  ](name='Filter'),
}

model ListServiceRegistrationsResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
  maxResults?: int32(name='MaxResults'),
  serviceRegistrations?: [ 
    {
      status?: string(name='Status'),
      registrationId?: string(name='RegistrationId'),
      finishTime?: string(name='FinishTime'),
      comment?: string(name='Comment'),
      serviceId?: string(name='ServiceId'),
      submitTime?: string(name='SubmitTime'),
    }
  ](name='ServiceRegistrations'),
}

model ListServiceRegistrationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListServiceRegistrationsResponseBody(name='body'),
}

async function listServiceRegistrationsWithOptions(request: ListServiceRegistrationsRequest, runtime: Util.RuntimeOptions): ListServiceRegistrationsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListServiceRegistrations', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listServiceRegistrations(request: ListServiceRegistrationsRequest): ListServiceRegistrationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listServiceRegistrationsWithOptions(request, runtime);
}

model ListDeploymentsRequest {
  regionId?: string(name='RegionId'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  filter?: [ 
    {
      value?: [ string ](name='Value'),
      name?: string(name='Name'),
    }
  ](name='Filter'),
}

model ListDeploymentsResponseBody = {
  totalCount?: int32(name='TotalCount', description='TotalCount本次请求条件下的数据总量，此参数为可选参数，默认可不返回'),
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: string(name='NextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  maxResults?: int32(name='MaxResults', description='MaxResults本次请求所返回的最大记录条数'),
  deployments?: [ 
    {
      deploymentId?: string(name='DeploymentId'),
      name?: string(name='Name'),
      deployType?: string(name='DeployType'),
      serviceId?: string(name='ServiceId'),
      defaultVersion?: string(name='DefaultVersion'),
    }
  ](name='Deployments'),
}

model ListDeploymentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeploymentsResponseBody(name='body'),
}

async function listDeploymentsWithOptions(request: ListDeploymentsRequest, runtime: Util.RuntimeOptions): ListDeploymentsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListDeployments', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listDeployments(request: ListDeploymentsRequest): ListDeploymentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeploymentsWithOptions(request, runtime);
}

model UpdateDeploymentVersionRequest {
  regionId?: string(name='RegionId'),
  deploymentId?: string(name='DeploymentId'),
  deploymentVersion?: string(name='DeploymentVersion'),
  clientToken?: string(name='ClientToken'),
  deployMetadata?: string(name='DeployMetadata'),
}

model UpdateDeploymentVersionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  deploymentId?: string(name='DeploymentId'),
  version?: string(name='Version'),
  deployMetadata?: string(name='DeployMetadata'),
}

model UpdateDeploymentVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDeploymentVersionResponseBody(name='body'),
}

async function updateDeploymentVersionWithOptions(request: UpdateDeploymentVersionRequest, runtime: Util.RuntimeOptions): UpdateDeploymentVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDeploymentVersion', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDeploymentVersion(request: UpdateDeploymentVersionRequest): UpdateDeploymentVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDeploymentVersionWithOptions(request, runtime);
}

model DeployApplicationsRequest {
  regionId?: string(name='RegionId'),
  deploymentId?: string(name='DeploymentId'),
  clientToken?: string(name='ClientToken'),
  deploymentVersion?: string(name='DeploymentVersion'),
  applicationGroupNames?: [ string ](name='ApplicationGroupNames'),
}

model DeployApplicationsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  data?: {
    executionId?: string(name='ExecutionId', description='Id of the execution'),
  }(name='Data'),
}

model DeployApplicationsResponse = {
  headers: map[string]string(name='headers'),
  body: DeployApplicationsResponseBody(name='body'),
}

async function deployApplicationsWithOptions(request: DeployApplicationsRequest, runtime: Util.RuntimeOptions): DeployApplicationsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeployApplications', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deployApplications(request: DeployApplicationsRequest): DeployApplicationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployApplicationsWithOptions(request, runtime);
}

model CreateDeploymentRequest {
  regionId?: string(name='RegionId'),
  deploymentName?: string(name='DeploymentName'),
  deploymentVersion?: string(name='DeploymentVersion'),
  clientToken?: string(name='ClientToken'),
  serviceId?: string(name='ServiceId'),
  deployType?: string(name='DeployType'),
  deployMetadata?: string(name='DeployMetadata'),
  description?: string(name='Description'),
}

model CreateDeploymentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  deploymentId?: string(name='DeploymentId'),
  serviceId?: string(name='ServiceId'),
  version?: string(name='Version'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  deployType?: string(name='DeployType'),
  deployMetadata?: string(name='DeployMetadata'),
  isDefault?: boolean(name='IsDefault'),
}

model CreateDeploymentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeploymentResponseBody(name='body'),
}

async function createDeploymentWithOptions(request: CreateDeploymentRequest, runtime: Util.RuntimeOptions): CreateDeploymentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDeployment', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDeployment(request: CreateDeploymentRequest): CreateDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeploymentWithOptions(request, runtime);
}

model CreateServiceRequest {
  regionId?: string(name='RegionId'),
  supplierName?: string(name='SupplierName'),
  supplierUrl?: string(name='SupplierUrl'),
  clientToken?: string(name='ClientToken'),
  serviceId?: string(name='ServiceId'),
  deployType?: string(name='DeployType'),
  deployMetadata?: string(name='DeployMetadata'),
  serviceType?: string(name='ServiceType'),
  serviceInfo?: [ 
    {
      locale?: string(name='Locale'),
      shortDescription?: string(name='ShortDescription'),
      image?: string(name='Image'),
      name?: string(name='Name'),
    }
  ](name='ServiceInfo'),
  isSupportOperated?: boolean(name='IsSupportOperated'),
  policyNames?: string(name='PolicyNames'),
  duration?: long(name='Duration'),
  requestTags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='RequestTags'),
}

model CreateServiceResponseBody = {
  status?: string(name='Status'),
  requestId?: string(name='RequestId'),
  version?: string(name='Version'),
  serviceId?: string(name='ServiceId'),
}

model CreateServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceResponseBody(name='body'),
}

async function createServiceWithOptions(request: CreateServiceRequest, runtime: Util.RuntimeOptions): CreateServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateService', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createService(request: CreateServiceRequest): CreateServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceWithOptions(request, runtime);
}

model UpdateServiceRequest {
  regionId?: string(name='RegionId'),
  supplierName?: string(name='SupplierName'),
  supplierUrl?: string(name='SupplierUrl'),
  deployType?: string(name='DeployType'),
  deployMetadata?: string(name='DeployMetadata'),
  clientToken?: string(name='ClientToken'),
  serviceId?: string(name='ServiceId'),
  serviceType?: string(name='ServiceType'),
  serviceInfo?: [ 
    {
      locale?: string(name='Locale'),
      shortDescription?: string(name='ShortDescription'),
      image?: string(name='Image'),
      name?: string(name='Name'),
    }
  ](name='ServiceInfo'),
  isSupportOperated?: boolean(name='IsSupportOperated'),
  policyNames?: string(name='PolicyNames'),
  duration?: long(name='Duration'),
}

model UpdateServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateServiceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceResponseBody(name='body'),
}

async function updateServiceWithOptions(request: UpdateServiceRequest, runtime: Util.RuntimeOptions): UpdateServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateService', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateService(request: UpdateServiceRequest): UpdateServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateServiceWithOptions(request, runtime);
}

model CreateDeploymentVersionRequest {
  regionId?: string(name='RegionId'),
  deploymentId?: string(name='DeploymentId'),
  deploymentVersion?: string(name='DeploymentVersion'),
  clientToken?: string(name='ClientToken'),
  deployMetadata?: string(name='DeployMetadata'),
  deployType?: string(name='DeployType'),
}

model CreateDeploymentVersionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  deploymentId?: string(name='DeploymentId'),
  serviceId?: string(name='ServiceId'),
  version?: string(name='Version'),
  deployType?: string(name='DeployType'),
  isDefault?: boolean(name='IsDefault'),
}

model CreateDeploymentVersionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeploymentVersionResponseBody(name='body'),
}

async function createDeploymentVersionWithOptions(request: CreateDeploymentVersionRequest, runtime: Util.RuntimeOptions): CreateDeploymentVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDeploymentVersion', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDeploymentVersion(request: CreateDeploymentVersionRequest): CreateDeploymentVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeploymentVersionWithOptions(request, runtime);
}

model GetServiceRequest {
  regionId?: string(name='RegionId'),
  serviceId?: string(name='ServiceId'),
  serviceVersion?: string(name='ServiceVersion'),
}

model GetServiceResponseBody = {
  status?: string(name='Status'),
  deployMetadata?: string(name='DeployMetadata'),
  publishTime?: string(name='PublishTime'),
  requestId?: string(name='RequestId'),
  version?: string(name='Version'),
  deployType?: string(name='DeployType'),
  serviceId?: string(name='ServiceId'),
  supplierUrl?: string(name='SupplierUrl'),
  serviceType?: string(name='ServiceType'),
  supplierName?: string(name='SupplierName'),
  serviceInfos?: [ 
    {
      locale?: string(name='Locale'),
      image?: string(name='Image'),
      name?: string(name='Name'),
      shortDescription?: string(name='ShortDescription'),
    }
  ](name='ServiceInfos'),
  commodityCode?: string(name='CommodityCode'),
  isSupportOperated?: boolean(name='IsSupportOperated'),
  policyNames?: string(name='PolicyNames'),
  duration?: long(name='Duration'),
}

model GetServiceResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceResponseBody(name='body'),
}

async function getServiceWithOptions(request: GetServiceRequest, runtime: Util.RuntimeOptions): GetServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetService', '2021-05-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getService(request: GetServiceRequest): GetServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getServiceWithOptions(request, runtime);
}

