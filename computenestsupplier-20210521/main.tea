/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('computenestsupplier', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ContinueDeployServiceInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', example='false'),
  parameters?: string(name='Parameters', example='{"NodeCount": 3, "SystemDiskSize": 40, "InstancePassword": "******"}'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  serviceInstanceId?: string(name='ServiceInstanceId', example='si-0e6fca6a51a54420****'),
}

model ContinueDeployServiceInstanceResponseBody = {
  dryRunResult?: {
    parametersAllowedToBeModified?: [ string ](name='ParametersAllowedToBeModified'),
    parametersConditionallyAllowedToBeModified?: [ string ](name='ParametersConditionallyAllowedToBeModified'),
    parametersNotAllowedToBeModified?: [ string ](name='ParametersNotAllowedToBeModified'),
  }(name='DryRunResult'),
  requestId?: string(name='RequestId', example='82DF27ED-E538-5AC0-A11C-39334A873189'),
  serviceInstanceId?: string(name='ServiceInstanceId', example='si-d6ab3a63ccbb4b17****'),
}

model ContinueDeployServiceInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ContinueDeployServiceInstanceResponseBody(name='body'),
}

async function continueDeployServiceInstanceWithOptions(request: ContinueDeployServiceInstanceRequest, runtime: Util.RuntimeOptions): ContinueDeployServiceInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.parameters)) {
    query['Parameters'] = request.parameters;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceInstanceId)) {
    query['ServiceInstanceId'] = request.serviceInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ContinueDeployServiceInstance',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function continueDeployServiceInstance(request: ContinueDeployServiceInstanceRequest): ContinueDeployServiceInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return continueDeployServiceInstanceWithOptions(request, runtime);
}

model CreateArtifactRequest {
  artifactId?: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx'),
  artifactProperty?: {
    commodityCode?: string(name='CommodityCode', example='cmjj00xxxx'),
    commodityVersion?: string(name='CommodityVersion', example='V1.0'),
    fileScriptMetadata?: string(name='FileScriptMetadata', example='{\\"WorkDir\\":\\"/root\\",\\"CommandType\\":\\"RunShellScript\\",\\"Platform\\":\\"Linux\\",\\"Script\\":\\"echo hello\\"}'),
    imageId?: string(name='ImageId', example='m-0xij191j9cuev6xxxxxx'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    repoId?: string(name='RepoId'),
    repoName?: string(name='RepoName'),
    scriptMetadata?: string(name='ScriptMetadata', example='{"ScriptMetadata":"{\\"CommandType\\":\\"RunShellScript\\",\\"Platform\\":\\"Linux\\",\\"Script\\":\\"ls\\"}"}'),
    tag?: string(name='Tag'),
    url?: string(name='Url', example='https://service-info-private.oss-cn-hangzhou.aliyuncs.com/1309208528xxxxxx/template/2e1ce8fc-xxxx-481c-9e8e-789ba9db487d.json'),
  }(name='ArtifactProperty'),
  artifactType?: string(name='ArtifactType', example='EcsImage'),
  description?: string(name='Description'),
  name?: string(name='Name'),
  supportRegionIds?: [ string ](name='SupportRegionIds'),
  versionName?: string(name='VersionName', example='v1'),
}

model CreateArtifactShrinkRequest {
  artifactId?: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx'),
  artifactPropertyShrink?: string(name='ArtifactProperty'),
  artifactType?: string(name='ArtifactType', example='EcsImage'),
  description?: string(name='Description'),
  name?: string(name='Name'),
  supportRegionIds?: [ string ](name='SupportRegionIds'),
  versionName?: string(name='VersionName', example='v1'),
}

model CreateArtifactResponseBody = {
  artifactId?: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx'),
  artifactProperty?: string(name='ArtifactProperty', example='{\\"CommodityCode\\":\\"cmjj0005xxxx\\",\\"CommodityVersion\\":\\"V2022xxxx\\"}'),
  artifactType?: string(name='ArtifactType', example='EcsImage'),
  artifactVersion?: string(name='ArtifactVersion', example='2'),
  description?: string(name='Description'),
  gmtModified?: string(name='GmtModified', example='2022-11-11T12:00:00Z'),
  maxVersion?: long(name='MaxVersion', example='1'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId', example='B1A0198B-F316-1B72-B8DD-28B6F6D6XXXX'),
  status?: string(name='Status', example='Created'),
  supportRegionIds?: string(name='SupportRegionIds', example='[
			"cn-beijing",
			"cn-hangzhou",
			"cn-shanghai"
		]'),
  versionName?: string(name='VersionName', example='v1'),
}

model CreateArtifactResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateArtifactResponseBody(name='body'),
}

async function createArtifactWithOptions(tmpReq: CreateArtifactRequest, runtime: Util.RuntimeOptions): CreateArtifactResponse {
  Util.validateModel(tmpReq);
  var request = new CreateArtifactShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.artifactProperty)) {
    request.artifactPropertyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.artifactProperty, 'ArtifactProperty', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.artifactId)) {
    query['ArtifactId'] = request.artifactId;
  }
  if (!Util.isUnset(request.artifactPropertyShrink)) {
    query['ArtifactProperty'] = request.artifactPropertyShrink;
  }
  if (!Util.isUnset(request.artifactType)) {
    query['ArtifactType'] = request.artifactType;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.supportRegionIds)) {
    query['SupportRegionIds'] = request.supportRegionIds;
  }
  if (!Util.isUnset(request.versionName)) {
    query['VersionName'] = request.versionName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateArtifact',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createArtifact(request: CreateArtifactRequest): CreateArtifactResponse {
  var runtime = new Util.RuntimeOptions{};
  return createArtifactWithOptions(request, runtime);
}

model CreateServiceRequest {
  alarmMetadata?: string(name='AlarmMetadata'),
  approvalType?: string(name='ApprovalType', example='Manual'),
  clientToken?: string(name='ClientToken', example='10CM943JP0EN9D51H'),
  deployMetadata?: string(name='DeployMetadata'),
  deployType?: string(name='DeployType', example='ros'),
  duration?: long(name='Duration', example='0'),
  isSupportOperated?: boolean(name='IsSupportOperated', example='false'),
  licenseMetadata?: string(name='LicenseMetadata'),
  logMetadata?: string(name='LogMetadata'),
  operationMetadata?: string(name='OperationMetadata', example='{\\"PrometheusConfigMap\\":{\\"New_Vpc_Ack_And_Jumpserver\\":{}}}'),
  policyNames?: string(name='PolicyNames', example='policyName1, policyName2'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId'),
  serviceId?: string(name='ServiceId', example='service-0e6fca6a51a544xxxxxx'),
  serviceInfo?: [ 
    {
      image?: string(name='Image', example='http://img.tidb.oss.url'),
      locale?: string(name='Locale', example='zh-CN'),
      longDescriptionUrl?: string(name='LongDescriptionUrl'),
      name?: string(name='Name', example='TiDB Database'),
      shortDescription?: string(name='ShortDescription'),
    }
  ](name='ServiceInfo'),
  serviceType?: string(name='ServiceType', example='private'),
  shareType?: string(name='ShareType', example='Public'),
  sourceServiceId?: string(name='SourceServiceId'),
  sourceServiceVersion?: string(name='SourceServiceVersion'),
  tag?: [ 
    {
      key?: string(name='Key', example='Usage'),
      value?: string(name='Value', example='Web'),
    }
  ](name='Tag'),
  tenantType?: string(name='TenantType', example='SingleTenant'),
  trialDuration?: long(name='TrialDuration', example='7'),
  upgradeMetadata?: string(name='UpgradeMetadata', example='{\\"Description\\":\\"xxx\\",\\"SupportRollback\\":true,\\"SupportUpgradeFromVersions\\":[],\\"UpgradeComponents\\":[\\"Configuration\\"]}'),
  versionName?: string(name='VersionName', example='Draft'),
}

model CreateServiceResponseBody = {
  requestId?: string(name='RequestId', example='4DB0F536-B3BE-4F0D-BD29-E83FB56D550C'),
  serviceId?: string(name='ServiceId', example='service-0e6fca6a51a544xxxxxx'),
  status?: string(name='Status', example='Created'),
  version?: string(name='Version', example='draft'),
}

model CreateServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateServiceResponseBody(name='body'),
}

async function createServiceWithOptions(request: CreateServiceRequest, runtime: Util.RuntimeOptions): CreateServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alarmMetadata)) {
    query['AlarmMetadata'] = request.alarmMetadata;
  }
  if (!Util.isUnset(request.approvalType)) {
    query['ApprovalType'] = request.approvalType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.deployMetadata)) {
    query['DeployMetadata'] = request.deployMetadata;
  }
  if (!Util.isUnset(request.deployType)) {
    query['DeployType'] = request.deployType;
  }
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.isSupportOperated)) {
    query['IsSupportOperated'] = request.isSupportOperated;
  }
  if (!Util.isUnset(request.licenseMetadata)) {
    query['LicenseMetadata'] = request.licenseMetadata;
  }
  if (!Util.isUnset(request.logMetadata)) {
    query['LogMetadata'] = request.logMetadata;
  }
  if (!Util.isUnset(request.operationMetadata)) {
    query['OperationMetadata'] = request.operationMetadata;
  }
  if (!Util.isUnset(request.policyNames)) {
    query['PolicyNames'] = request.policyNames;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.serviceInfo)) {
    query['ServiceInfo'] = request.serviceInfo;
  }
  if (!Util.isUnset(request.serviceType)) {
    query['ServiceType'] = request.serviceType;
  }
  if (!Util.isUnset(request.shareType)) {
    query['ShareType'] = request.shareType;
  }
  if (!Util.isUnset(request.sourceServiceId)) {
    query['SourceServiceId'] = request.sourceServiceId;
  }
  if (!Util.isUnset(request.sourceServiceVersion)) {
    query['SourceServiceVersion'] = request.sourceServiceVersion;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.tenantType)) {
    query['TenantType'] = request.tenantType;
  }
  if (!Util.isUnset(request.trialDuration)) {
    query['TrialDuration'] = request.trialDuration;
  }
  if (!Util.isUnset(request.upgradeMetadata)) {
    query['UpgradeMetadata'] = request.upgradeMetadata;
  }
  if (!Util.isUnset(request.versionName)) {
    query['VersionName'] = request.versionName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateService',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createService(request: CreateServiceRequest): CreateServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceWithOptions(request, runtime);
}

model CreateServiceInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun'),
  name?: string(name='Name', example='TestName'),
  parameters?: map[string]any(name='Parameters', example='{"NodeCount": 3, "SystemDiskSize": 40, "InstancePassword": "******"}'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzuqyxxxxxx'),
  serviceId?: string(name='ServiceId', example='service-0e6fca6a51a54420****'),
  serviceVersion?: string(name='ServiceVersion', example='1'),
  specificationName?: string(name='SpecificationName'),
  tag?: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tag'),
  templateName?: string(name='TemplateName'),
  userId?: string(name='UserId', example='1563457855xxxxxx'),
}

model CreateServiceInstanceShrinkRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun'),
  name?: string(name='Name', example='TestName'),
  parametersShrink?: string(name='Parameters', example='{"NodeCount": 3, "SystemDiskSize": 40, "InstancePassword": "******"}'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzuqyxxxxxx'),
  serviceId?: string(name='ServiceId', example='service-0e6fca6a51a54420****'),
  serviceVersion?: string(name='ServiceVersion', example='1'),
  specificationName?: string(name='SpecificationName'),
  tag?: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tag'),
  templateName?: string(name='TemplateName'),
  userId?: string(name='UserId', example='1563457855xxxxxx'),
}

model CreateServiceInstanceResponseBody = {
  requestId?: string(name='RequestId', example='4DB0F536-B3BE-4F0D-BD29-E83FB56D****'),
  serviceInstanceId?: string(name='ServiceInstanceId', example='si-d6ab3a63ccbb4b17****'),
  status?: string(name='Status', example='Created'),
}

model CreateServiceInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateServiceInstanceResponseBody(name='body'),
}

async function createServiceInstanceWithOptions(tmpReq: CreateServiceInstanceRequest, runtime: Util.RuntimeOptions): CreateServiceInstanceResponse {
  Util.validateModel(tmpReq);
  var request = new CreateServiceInstanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.parameters)) {
    request.parametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.parameters, 'Parameters', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.parametersShrink)) {
    query['Parameters'] = request.parametersShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.serviceVersion)) {
    query['ServiceVersion'] = request.serviceVersion;
  }
  if (!Util.isUnset(request.specificationName)) {
    query['SpecificationName'] = request.specificationName;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateServiceInstance',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createServiceInstance(request: CreateServiceInstanceRequest): CreateServiceInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceInstanceWithOptions(request, runtime);
}

model DeleteArtifactRequest {
  artifactId?: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx'),
  artifactVersion?: string(name='ArtifactVersion', example='2'),
}

model DeleteArtifactResponseBody = {
  requestId?: string(name='RequestId', example='B1A0198B-F316-1B72-B8DD-28B6F6D6XXXX'),
}

model DeleteArtifactResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteArtifactResponseBody(name='body'),
}

async function deleteArtifactWithOptions(request: DeleteArtifactRequest, runtime: Util.RuntimeOptions): DeleteArtifactResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.artifactId)) {
    query['ArtifactId'] = request.artifactId;
  }
  if (!Util.isUnset(request.artifactVersion)) {
    query['ArtifactVersion'] = request.artifactVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteArtifact',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteArtifact(request: DeleteArtifactRequest): DeleteArtifactResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteArtifactWithOptions(request, runtime);
}

model DeleteServiceRequest {
  clientToken?: string(name='ClientToken', example='10CM943JP0EN9D51H'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  serviceId?: string(name='ServiceId', example='service-0e6fca6a51a54420****'),
  serviceVersion?: string(name='ServiceVersion', example='2'),
}

model DeleteServiceResponseBody = {
  requestId?: string(name='RequestId', example='4DB0F536-B3BE-4F0D-BD29-E83FB56D****'),
}

model DeleteServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteServiceResponseBody(name='body'),
}

async function deleteServiceWithOptions(request: DeleteServiceRequest, runtime: Util.RuntimeOptions): DeleteServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.serviceVersion)) {
    query['ServiceVersion'] = request.serviceVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteService',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteService(request: DeleteServiceRequest): DeleteServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteServiceWithOptions(request, runtime);
}

model DeleteServiceInstancesRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  serviceInstanceId?: [ string ](name='ServiceInstanceId'),
}

model DeleteServiceInstancesResponseBody = {
  requestId?: string(name='RequestId', example='DB140E67-D75F-5585-946E-41D8DC8F4E00'),
}

model DeleteServiceInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteServiceInstancesResponseBody(name='body'),
}

async function deleteServiceInstancesWithOptions(request: DeleteServiceInstancesRequest, runtime: Util.RuntimeOptions): DeleteServiceInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceInstanceId)) {
    query['ServiceInstanceId'] = request.serviceInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteServiceInstances',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteServiceInstances(request: DeleteServiceInstancesRequest): DeleteServiceInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteServiceInstancesWithOptions(request, runtime);
}

model DeployServiceInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  serviceInstanceId?: string(name='ServiceInstanceId', example='si-0e6fca6a51a54420****'),
}

model DeployServiceInstanceResponseBody = {
  requestId?: string(name='RequestId', example='B8A6AEA6-0D8F-589A-A7FF-B44FD842456E'),
}

model DeployServiceInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeployServiceInstanceResponseBody(name='body'),
}

async function deployServiceInstanceWithOptions(request: DeployServiceInstanceRequest, runtime: Util.RuntimeOptions): DeployServiceInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceInstanceId)) {
    query['ServiceInstanceId'] = request.serviceInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeployServiceInstance',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deployServiceInstance(request: DeployServiceInstanceRequest): DeployServiceInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployServiceInstanceWithOptions(request, runtime);
}

model GetArtifactRequest {
  artifactId?: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx'),
  artifactName?: string(name='ArtifactName', example='gpu-test'),
  artifactVersion?: string(name='ArtifactVersion', example='1'),
}

model GetArtifactResponseBody = {
  artifactId?: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx'),
  artifactProperty?: string(name='ArtifactProperty', example='{\\"CommodityCode\\":\\"cmjj0005xxxx\\",\\"CommodityVersion\\":\\"V2022xxxx\\"}'),
  artifactType?: string(name='ArtifactType', example='EcsImage'),
  artifactVersion?: string(name='ArtifactVersion', example='2'),
  description?: string(name='Description'),
  gmtModified?: string(name='GmtModified', example='2022-10-20T02:19:55Z'),
  maxVersion?: long(name='MaxVersion', example='2'),
  name?: string(name='Name'),
  progress?: string(name='Progress', example='100'),
  requestId?: string(name='RequestId', example='B1A0198B-F316-1B72-B8DD-28B6F6D6XXXX'),
  status?: string(name='Status', example='Available'),
  supportRegionIds?: string(name='SupportRegionIds', example='["cn-hangzhou","cn-beijing"]'),
  versionName?: string(name='VersionName', example='v1'),
}

model GetArtifactResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetArtifactResponseBody(name='body'),
}

async function getArtifactWithOptions(request: GetArtifactRequest, runtime: Util.RuntimeOptions): GetArtifactResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.artifactId)) {
    query['ArtifactId'] = request.artifactId;
  }
  if (!Util.isUnset(request.artifactName)) {
    query['ArtifactName'] = request.artifactName;
  }
  if (!Util.isUnset(request.artifactVersion)) {
    query['ArtifactVersion'] = request.artifactVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetArtifact',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getArtifact(request: GetArtifactRequest): GetArtifactResponse {
  var runtime = new Util.RuntimeOptions{};
  return getArtifactWithOptions(request, runtime);
}

model GetArtifactRepositoryCredentialsRequest {
  artifactType?: string(name='ArtifactType', example='File'),
  deployRegionId?: string(name='DeployRegionId', example='cn-hangzhou'),
}

model GetArtifactRepositoryCredentialsResponseBody = {
  availableResources?: [ 
    {
      path?: string(name='Path', example='"/xxx/"'),
      regionId?: string(name='RegionId', example='oss-cn-hangzhou'),
      repositoryName?: string(name='RepositoryName', example='computenest-artifacts-draft-cn-hangzhou'),
    }
  ](name='AvailableResources'),
  credentials?: {
    accessKeyId?: string(name='AccessKeyId', example='STS.xxx'),
    accessKeySecret?: string(name='AccessKeySecret', example='xxx'),
    password?: string(name='Password', example='eyJ0aW1lIjoiMTUyNjU0OTc5:0705733****'),
    securityToken?: string(name='SecurityToken', example='xxx'),
    username?: string(name='Username', example='xxx'),
  }(name='Credentials'),
  expireDate?: string(name='ExpireDate', example='1526549792000'),
  requestId?: string(name='RequestId', example='94E89857-B994-44B6-9C4F-DBD200E9XXXX'),
}

model GetArtifactRepositoryCredentialsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetArtifactRepositoryCredentialsResponseBody(name='body'),
}

async function getArtifactRepositoryCredentialsWithOptions(request: GetArtifactRepositoryCredentialsRequest, runtime: Util.RuntimeOptions): GetArtifactRepositoryCredentialsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.artifactType)) {
    query['ArtifactType'] = request.artifactType;
  }
  if (!Util.isUnset(request.deployRegionId)) {
    query['DeployRegionId'] = request.deployRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetArtifactRepositoryCredentials',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getArtifactRepositoryCredentials(request: GetArtifactRepositoryCredentialsRequest): GetArtifactRepositoryCredentialsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getArtifactRepositoryCredentialsWithOptions(request, runtime);
}

model GetServiceRequest {
  filterAliUid?: boolean(name='FilterAliUid'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  serviceId?: string(name='ServiceId', example='service-4ee86df83fd948******'),
  serviceVersion?: string(name='ServiceVersion', example='1'),
  sharedAccountType?: string(name='SharedAccountType'),
  showDetail?: [ string ](name='ShowDetail'),
}

model GetServiceResponseBody = {
  alarmMetadata?: string(name='AlarmMetadata'),
  approvalType?: string(name='ApprovalType', example='Manual'),
  commodityCode?: string(name='CommodityCode', example='cmjj00xxxx'),
  commodityEntities?: [ 
    {
      entityIds?: [ string ](name='EntityIds'),
      predefinedParameterName?: string(name='PredefinedParameterName'),
      templateName?: string(name='TemplateName', example='Custom_Image_Ecs'),
    }
  ](name='CommodityEntities'),
  commoditySpecifications?: [ 
    {
      predefinedParameterName?: string(name='PredefinedParameterName'),
      specificationCode?: string(name='SpecificationCode', example='yuncode4814xxxxxx'),
      templateName?: string(name='TemplateName'),
    }
  ](name='CommoditySpecifications'),
  createTime?: string(name='CreateTime', example='2021-05-20T00:00:00Z'),
  defaultLicenseDays?: long(name='DefaultLicenseDays', example='1'),
  deployMetadata?: string(name='DeployMetadata'),
  deployType?: string(name='DeployType', example='ros'),
  duration?: long(name='Duration', example='259200'),
  isSupportOperated?: boolean(name='IsSupportOperated', example='false'),
  licenseMetadata?: string(name='LicenseMetadata'),
  logMetadata?: string(name='LogMetadata'),
  operationMetadata?: string(name='OperationMetadata', example='{\\"PrometheusConfigMap\\":{\\"New_Vpc_Ack_And_Jumpserver\\":{}}}'),
  payFromType?: string(name='PayFromType', example='None'),
  payType?: string(name='PayType', example='Permanent'),
  permission?: string(name='Permission', example='Deployable'),
  policyNames?: string(name='PolicyNames', example='policyName1, policyName2'),
  progress?: long(name='Progress', example='90'),
  publishTime?: string(name='PublishTime', example='2021-05-21T00:00:00Z'),
  registrationId?: string(name='RegistrationId', example='sr-04056c2ab4b94bxxxxxx'),
  requestId?: string(name='RequestId', example='B1A0198B-F316-1B72-B8DD-28B6F6D6XXXX'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzuqyxxxxxx'),
  serviceDocUrl?: string(name='ServiceDocUrl', example='http://example1.com'),
  serviceId?: string(name='ServiceId', example='service-70a3b15bb62643xxxxxx'),
  serviceInfos?: [ 
    {
      image?: string(name='Image', example='https://example.com/service-image/c1c4a559-cc60-4af1-b976-98f356602462.png'),
      locale?: string(name='Locale', example='zh-CN'),
      longDescriptionUrl?: string(name='LongDescriptionUrl'),
      name?: string(name='Name'),
      shortDescription?: string(name='ShortDescription'),
    }
  ](name='ServiceInfos'),
  serviceProductUrl?: string(name='ServiceProductUrl', example='http://example2.com'),
  serviceType?: string(name='ServiceType', example='private'),
  shareType?: string(name='ShareType', example='Public'),
  sourceServiceId?: string(name='SourceServiceId'),
  sourceServiceVersion?: string(name='SourceServiceVersion'),
  sourceSupplierName?: string(name='SourceSupplierName'),
  statistic?: {
    accumulativeInstanceCount?: int32(name='AccumulativeInstanceCount'),
    accumulativePocAmount?: double(name='AccumulativePocAmount'),
    accumulativeUserCount?: int32(name='AccumulativeUserCount'),
    averagePocAmount?: double(name='AveragePocAmount'),
    averagePocDuration?: double(name='AveragePocDuration'),
    averagePocUnitAmount?: double(name='AveragePocUnitAmount'),
    deployedServiceInstanceCount?: int32(name='DeployedServiceInstanceCount'),
    deployedUserCount?: int32(name='DeployedUserCount'),
    submittedUsageCount?: int32(name='SubmittedUsageCount'),
  }(name='Statistic'),
  status?: string(name='Status', example='Online'),
  statusDetail?: string(name='StatusDetail', example='deploy successfully'),
  supplierName?: string(name='SupplierName'),
  supplierUrl?: string(name='SupplierUrl', example='http://example.com'),
  tags?: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tags'),
  tenantType?: string(name='TenantType', example='SingleTenant'),
  testStatus?: string(name='TestStatus', example='SERVICE_TEST_SUCCEED'),
  trialDuration?: long(name='TrialDuration', example='7'),
  trialType?: string(name='TrialType', example='Trial'),
  updateTime?: string(name='UpdateTime', example='2021-05-22T00:00:00Z'),
  upgradeMetadata?: string(name='UpgradeMetadata', example='{\\"Description\\":\\"xxx\\",\\"SupportRollback\\":true,\\"SupportUpgradeFromVersions\\":[],\\"UpgradeComponents\\":[\\"Configuration\\"]}'),
  version?: string(name='Version', example='1.0'),
  versionName?: string(name='VersionName', example='v1'),
}

model GetServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetServiceResponseBody(name='body'),
}

async function getServiceWithOptions(request: GetServiceRequest, runtime: Util.RuntimeOptions): GetServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filterAliUid)) {
    query['FilterAliUid'] = request.filterAliUid;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.serviceVersion)) {
    query['ServiceVersion'] = request.serviceVersion;
  }
  if (!Util.isUnset(request.sharedAccountType)) {
    query['SharedAccountType'] = request.sharedAccountType;
  }
  if (!Util.isUnset(request.showDetail)) {
    query['ShowDetail'] = request.showDetail;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetService',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getService(request: GetServiceRequest): GetServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getServiceWithOptions(request, runtime);
}

model GetServiceEstimateCostRequest {
  clientToken?: string(name='ClientToken', example='mRdxWuW2ts'),
  parameters?: map[string]any(name='Parameters', example='{\\"PayType\\":\\"PostPaid\\",\\"InstancePassword\\":\\"xxxxxxxxxx\\",\\"EcsInstanceType\\":\\"ecs.g6.large\\",\\"VSwitchId\\":\\"vsw-0jlueyydpuekoxxxxxxxx\\",\\"VpcId\\":\\"vpc-0jlps6mjbgvpqxxxxxxxx\\",\\"ZoneId\\":\\"cn-wulanchabu-a\\",\\"Enable\\":false,\\"RegionId\\":\\"cn-wulanchabu\\"}'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
  serviceId?: string(name='ServiceId', example='service-16fbd358d75e49xxxxxx'),
  serviceInstanceId?: string(name='ServiceInstanceId', example='si-d6ab3a63ccbb4b17****'),
  serviceVersion?: string(name='ServiceVersion', example='draft'),
  templateName?: string(name='TemplateName', example='Custom_Image_Ecs'),
}

model GetServiceEstimateCostShrinkRequest {
  clientToken?: string(name='ClientToken', example='mRdxWuW2ts'),
  parametersShrink?: string(name='Parameters', example='{\\"PayType\\":\\"PostPaid\\",\\"InstancePassword\\":\\"xxxxxxxxxx\\",\\"EcsInstanceType\\":\\"ecs.g6.large\\",\\"VSwitchId\\":\\"vsw-0jlueyydpuekoxxxxxxxx\\",\\"VpcId\\":\\"vpc-0jlps6mjbgvpqxxxxxxxx\\",\\"ZoneId\\":\\"cn-wulanchabu-a\\",\\"Enable\\":false,\\"RegionId\\":\\"cn-wulanchabu\\"}'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
  serviceId?: string(name='ServiceId', example='service-16fbd358d75e49xxxxxx'),
  serviceInstanceId?: string(name='ServiceInstanceId', example='si-d6ab3a63ccbb4b17****'),
  serviceVersion?: string(name='ServiceVersion', example='draft'),
  templateName?: string(name='TemplateName', example='Custom_Image_Ecs'),
}

model GetServiceEstimateCostResponseBody = {
  requestId?: string(name='RequestId', example='E73F09DC-6C13-5CB1-A10F-7A4E125ABD2C'),
  resources?: map[string]any(name='Resources', example='{
      "ECSInstances":{
        "Type":"ALIYUN::ECS::InstanceGroup",
        "Success":true,
        "Result":{
          "Order":{
            "Currency":"CNY",
            "RuleIds":[
              1752723
            ],
            "DetailInfos":{
              "ResourcePriceModel":[
                {
                  "Resource":"bandwidth",
                  "TradeAmount":0.0,
                  "SubRuleIds":[],
                  "OriginalAmount":0.0,
                  "DiscountAmount":0.0
                },
                {
                  "Resource":"image",
                  "TradeAmount":0.0,
                  "SubRuleIds":[],
                  "OriginalAmount":0.0,
                  "DiscountAmount":0.0
                },
                {
                  "Resource":"instanceType",
                  "TradeAmount":0.006966,
                  "SubRuleIds":[],
                  "OriginalAmount":0.45,
                  "DiscountAmount":0.443034
                },
                {
                  "Resource":"systemDisk",
                  "TradeAmount":0.000867,
                  "SubRuleIds":[],
                  "OriginalAmount":0.056,
                  "DiscountAmount":0.055133
                },
                {
                  "Resource":"dataDisk",
                  "TradeAmount":0.002167,
                  "SubRuleIds":[],
                  "OriginalAmount":0.14,
                  "DiscountAmount":0.137833
                }
              ]
            }'),
}

model GetServiceEstimateCostResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetServiceEstimateCostResponseBody(name='body'),
}

async function getServiceEstimateCostWithOptions(tmpReq: GetServiceEstimateCostRequest, runtime: Util.RuntimeOptions): GetServiceEstimateCostResponse {
  Util.validateModel(tmpReq);
  var request = new GetServiceEstimateCostShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.parameters)) {
    request.parametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.parameters, 'Parameters', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.parametersShrink)) {
    query['Parameters'] = request.parametersShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.serviceInstanceId)) {
    query['ServiceInstanceId'] = request.serviceInstanceId;
  }
  if (!Util.isUnset(request.serviceVersion)) {
    query['ServiceVersion'] = request.serviceVersion;
  }
  if (!Util.isUnset(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetServiceEstimateCost',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getServiceEstimateCost(request: GetServiceEstimateCostRequest): GetServiceEstimateCostResponse {
  var runtime = new Util.RuntimeOptions{};
  return getServiceEstimateCostWithOptions(request, runtime);
}

model GetServiceInstanceRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  serviceInstanceId?: string(name='ServiceInstanceId', example='si-d6ab3a63ccbb4b17****'),
}

model GetServiceInstanceResponseBody = {
  bizStatus?: string(name='BizStatus'),
  createTime?: string(name='CreateTime', example='2021-05-20T00:00:00Z'),
  enableInstanceOps?: boolean(name='EnableInstanceOps', example='true'),
  enableUserPrometheus?: string(name='EnableUserPrometheus', example='true'),
  endTime?: string(name='EndTime', example='2022-01-01T12:00:00'),
  isOperated?: boolean(name='IsOperated', example='true'),
  licenseMetadata?: string(name='LicenseMetadata', example='{"renewType":"MONTHLY"}'),
  name?: string(name='Name', example='TestName'),
  networkConfig?: {
    endpointId?: string(name='EndpointId', example='ep-m5ei37240541816b****'),
    endpointServiceId?: string(name='EndpointServiceId', example='epsrv-5ei07324541816bxxxx'),
    privateVpcConnections?: [ 
      {
        connectionConfigs?: [ 
          {
            connectBandwidth?: int32(name='ConnectBandwidth'),
            domainName?: string(name='DomainName'),
            endpointIps?: [ string ](name='EndpointIps'),
            ingressEndpointStatus?: string(name='IngressEndpointStatus', example='Ready'),
            networkServiceStatus?: string(name='NetworkServiceStatus', example='Ready'),
            securityGroups?: [ string ](name='SecurityGroups'),
            vSwitches?: [ string ](name='VSwitches'),
            vpcId?: string(name='VpcId', example='vpc-bp1vwnn14rqpyiczj****'),
          }
        ](name='ConnectionConfigs'),
        endpointId?: string(name='EndpointId', example='ep-m5ei37240541816b****'),
        endpointServiceId?: string(name='EndpointServiceId', example='epsrv-5ei07324541816bxxxx'),
        privateZoneName?: string(name='PrivateZoneName', example='test.computenest.aliyuncs.com'),
      }
    ](name='PrivateVpcConnections'),
    reversePrivateVpcConnections?: [ 
      {
        endpointId?: string(name='EndpointId', example='ep-m5ei42370541816b****'),
        endpointServiceId?: string(name='EndpointServiceId', example='epsrv-5ei07324541816bxxxx'),
      }
    ](name='ReversePrivateVpcConnections'),
  }(name='NetworkConfig'),
  operatedServiceInstanceId?: string(name='OperatedServiceInstanceId', example='si-d6ab3a63ccbb4b17****'),
  operationEndTime?: string(name='OperationEndTime', example='2022-01-28T06:48:56Z'),
  operationStartTime?: string(name='OperationStartTime', example='2021-12-29T06:48:56Z'),
  outputs?: string(name='Outputs', example='{
      "InstanceIds": [
            "i-hp38ofxl0dsyfi7z****"
      ]
}'),
  parameters?: string(name='Parameters', example='{
      "param": "value"
}'),
  payType?: string(name='PayType', example='Subscription'),
  predefinedParameterName?: string(name='PredefinedParameterName'),
  progress?: long(name='Progress', example='90'),
  rdAccountLoginUrl?: string(name='RdAccountLoginUrl'),
  requestId?: string(name='RequestId', example='4DB0F536-B3BE-4F0D-BD29-E83FB56D550C'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resources?: string(name='Resources', example='[
      {
            "StackId": "stack-xxx"
      }
]'),
  service?: {
    deployMetadata?: string(name='DeployMetadata'),
    deployType?: string(name='DeployType', example='ros'),
    publishTime?: string(name='PublishTime', example='2021-05-21T00:00:00Z'),
    serviceDocUrl?: string(name='ServiceDocUrl', example='http://example.com'),
    serviceId?: string(name='ServiceId', example='service-9c8a3522528b4fe8****'),
    serviceInfos?: [ 
      {
        image?: string(name='Image', example='https://example.com/service-image/c1c4a559-cc60-4af1-b976-98f356602462.png'),
        locale?: string(name='Locale', example='zh-CN'),
        name?: string(name='Name'),
        shortDescription?: string(name='ShortDescription'),
      }
    ](name='ServiceInfos'),
    serviceProductUrl?: string(name='ServiceProductUrl', example='https://service-info-private.oss-cn-hangzhou.aliyuncs.com'),
    serviceType?: string(name='ServiceType', example='private'),
    status?: string(name='Status', example='Online'),
    supplierName?: string(name='SupplierName'),
    supplierUrl?: string(name='SupplierUrl', example='http://example.com'),
    upgradableServiceVersions?: [ string ](name='UpgradableServiceVersions'),
    version?: string(name='Version', example='1'),
    versionName?: string(name='VersionName'),
  }(name='Service'),
  serviceInstanceId?: string(name='ServiceInstanceId', example='si-d6ab3a63ccbb4b17****'),
  serviceType?: string(name='ServiceType', example='private'),
  source?: string(name='Source', example='User'),
  status?: string(name='Status', example='Deployed'),
  statusDetail?: string(name='StatusDetail', example='deploy successfully'),
  supplierUid?: long(name='SupplierUid', example='1964460391538545'),
  tags?: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tags'),
  templateName?: string(name='TemplateName'),
  updateTime?: string(name='UpdateTime', example='2021-05-20T00:00:00Z'),
  userId?: long(name='UserId', example='1234567'),
}

model GetServiceInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetServiceInstanceResponseBody(name='body'),
}

async function getServiceInstanceWithOptions(request: GetServiceInstanceRequest, runtime: Util.RuntimeOptions): GetServiceInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceInstanceId)) {
    query['ServiceInstanceId'] = request.serviceInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetServiceInstance',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getServiceInstance(request: GetServiceInstanceRequest): GetServiceInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getServiceInstanceWithOptions(request, runtime);
}

model GetUploadCredentialsRequest {
  fileName?: string(name='FileName'),
}

model GetUploadCredentialsResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    accessKeyId?: string(name='AccessKeyId', example='STS.NUCe19W1FKaHAYAhe********'),
    accessKeySecret?: string(name='AccessKeySecret', example='8LQGp59mY23pcXeTdcvSA1cUQZBeD92sFrXi********'),
    bucketName?: string(name='BucketName', example='service-info-private'),
    expireDate?: string(name='ExpireDate', example='2023-05-18T12:27:59Z'),
    key?: string(name='Key', example='221514575922756034/cn-hangzhou/d57c62fbd508xxxxxxxx.json'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    securityToken?: string(name='SecurityToken', example='CAISzQN1q6Ft5B2yfSjIr5b2LouNuu5n/KOjQ3/wjGUHYdlagYGdmzz2IH1Le3NrBO8esfgymGFU6v8dlo1dYLQeHhadQI5cs80HtFqLSNaE65LswPlZ2M2ISETPJzfV9pCK'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Success.'),
  requestId?: string(name='RequestId', example='FCC3321E-D518-1BC4-861E-588E9D4DAFB7'),
  success?: boolean(name='Success', example='true'),
}

model GetUploadCredentialsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUploadCredentialsResponseBody(name='body'),
}

async function getUploadCredentialsWithOptions(request: GetUploadCredentialsRequest, runtime: Util.RuntimeOptions): GetUploadCredentialsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUploadCredentials',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUploadCredentials(request: GetUploadCredentialsRequest): GetUploadCredentialsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUploadCredentialsWithOptions(request, runtime);
}

model ListAcrImageRepositoriesRequest {
  artifactType?: string(name='ArtifactType', example='AcrImage'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAWns8w4MmhzeptXVRG0PUEU='),
  repoName?: string(name='RepoName', example='wordpress'),
}

model ListAcrImageRepositoriesResponseBody = {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAfu+XtuBE55iRLHEYYuojI4='),
  repositories?: [ 
    {
      createTime?: string(name='CreateTime', example='2021-05-20T00:00:00Z'),
      modifiedTime?: string(name='ModifiedTime', example='2021-05-20T00:00:00Z'),
      repoId?: string(name='RepoId', example='crr-3gqhkza0wbxxxxxx'),
      repoName?: string(name='RepoName', example='wordpress'),
    }
  ](name='Repositories'),
  requestId?: string(name='RequestId', example='C4A145D8-6F6C-532A-9001-9730CDA27578'),
  totalCount?: int32(name='TotalCount', example='4'),
}

model ListAcrImageRepositoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAcrImageRepositoriesResponseBody(name='body'),
}

async function listAcrImageRepositoriesWithOptions(request: ListAcrImageRepositoriesRequest, runtime: Util.RuntimeOptions): ListAcrImageRepositoriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.artifactType)) {
    query['ArtifactType'] = request.artifactType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.repoName)) {
    query['RepoName'] = request.repoName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAcrImageRepositories',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAcrImageRepositories(request: ListAcrImageRepositoriesRequest): ListAcrImageRepositoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAcrImageRepositoriesWithOptions(request, runtime);
}

model ListAcrImageTagsRequest {
  artifactType?: string(name='ArtifactType', example='AcrImage'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAW8kZY+u1sYOaYf5JmgmDQQ='),
  repoId?: string(name='RepoId', example='crr-3gqhkza0wbxxxxxx'),
}

model ListAcrImageTagsResponseBody = {
  images?: [ 
    {
      createTime?: string(name='CreateTime', example='2021-05-20T00:00:00Z'),
      imageSize?: string(name='ImageSize', example='188394616'),
      modifiedTime?: string(name='ModifiedTime', example='2021-05-20T00:00:00Z'),
      tag?: string(name='Tag', example='5.7.2'),
    }
  ](name='Images'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='ey14..'),
  requestId?: string(name='RequestId', example='FEF343B9-1A15-5789-BE88-7B36190F5BF6'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListAcrImageTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAcrImageTagsResponseBody(name='body'),
}

async function listAcrImageTagsWithOptions(request: ListAcrImageTagsRequest, runtime: Util.RuntimeOptions): ListAcrImageTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.artifactType)) {
    query['ArtifactType'] = request.artifactType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.repoId)) {
    query['RepoId'] = request.repoId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAcrImageTags',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAcrImageTags(request: ListAcrImageTagsRequest): ListAcrImageTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAcrImageTagsWithOptions(request, runtime);
}

model ListArtifactVersionsRequest {
  artifactId?: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx'),
  maxResult?: int32(name='MaxResult', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAc3HCuYhJi/wvpk4xOr0VLbfVwapgMwCN1wYzPVzLbItEdB0uWSY7AGnM3qCgm/YnjuEfwSnMwiMkcUoI0hRQzE='),
}

model ListArtifactVersionsResponseBody = {
  artifacts?: [ 
    {
      artifactId?: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx'),
      artifactProperty?: string(name='ArtifactProperty', example='{\\"CommodityCode\\":\\"cmjj0005xxxx\\",\\"CommodityVersion\\":\\"V2022xxxx\\"}'),
      artifactType?: string(name='ArtifactType', example='EcsImage'),
      artifactVersion?: string(name='ArtifactVersion', example='2'),
      gmtCreate?: string(name='GmtCreate', example='2022-10-20T02:19:53Z'),
      gmtModified?: string(name='GmtModified', example='2022-10-20T02:19:55Z'),
      imageDelivery?: map[string]string(name='ImageDelivery'),
      progress?: string(name='Progress', example='100'),
      resultFile?: string(name='ResultFile'),
      securityAuditResult?: string(name='SecurityAuditResult', example='Normal'),
      status?: string(name='Status', example='Available'),
      supportRegionIds?: string(name='SupportRegionIds', example='[
					"cn-beijing",
					"cn-hangzhou",
					"cn-shanghai"
				]'),
      versionName?: string(name='VersionName', example='v1'),
    }
  ](name='Artifacts'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAc3HCuYhJi/wvpk4xOr0VLbfVwapgMwCN1wYzPVzLbItEdB0uWSY7AGnM3qCgm/YnjuEfwSnMwiMkcUoI0hRQzE='),
  requestId?: string(name='RequestId', example='46577928-3162-15A6-9084-69820EB9xxxx'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListArtifactVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListArtifactVersionsResponseBody(name='body'),
}

async function listArtifactVersionsWithOptions(request: ListArtifactVersionsRequest, runtime: Util.RuntimeOptions): ListArtifactVersionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.artifactId)) {
    query['ArtifactId'] = request.artifactId;
  }
  if (!Util.isUnset(request.maxResult)) {
    query['MaxResult'] = request.maxResult;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListArtifactVersions',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listArtifactVersions(request: ListArtifactVersionsRequest): ListArtifactVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listArtifactVersionsWithOptions(request, runtime);
}

model ListArtifactsRequest {
  filter?: [ 
    {
      name?: string(name='Name', example='ArtifactType'),
      values?: [ string ](name='Values'),
    }
  ](name='Filter'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAc3HCuYhJi/wvpk4xOr0VLbfVwapgMwCN1wYzPVzLbItEdB0uWSY7AGnM3qCgm/YnjuEfwSnMwiMkcUoI0hRQzE='),
}

model ListArtifactsResponseBody = {
  artifacts?: [ 
    {
      artifactId?: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx'),
      artifactType?: string(name='ArtifactType', example='EcsImage'),
      description?: string(name='Description'),
      gmtModified?: string(name='GmtModified', example='2022-10-20T02:19:55Z'),
      maxVersion?: string(name='MaxVersion', example='2'),
      name?: string(name='Name'),
      status?: string(name='Status', example='Created'),
    }
  ](name='Artifacts'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAc3HCuYhJi/wvpk4xOr0VLbfVwapgMwCN1wYzPVzLbItEdB0uWSY7AGnM3qCgm/YnjuEfwSnMwiMkcUoI0hRQzE='),
  requestId?: string(name='RequestId', example='46577928-3162-15A6-9084-69820EB9xxxx'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListArtifactsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListArtifactsResponseBody(name='body'),
}

async function listArtifactsWithOptions(request: ListArtifactsRequest, runtime: Util.RuntimeOptions): ListArtifactsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListArtifacts',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listArtifacts(request: ListArtifactsRequest): ListArtifactsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listArtifactsWithOptions(request, runtime);
}

model ListServiceInstancesRequest {
  filter?: [ 
    {
      name?: string(name='Name', example='ServiceInstanceId'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='BBBAAfu+XtuBE55iRLHEYYuojI4='),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId'),
  showDeleted?: boolean(name='ShowDeleted', example='false'),
  tag?: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tag'),
}

model ListServiceInstancesResponseBody = {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAfu+XtuBE55iRLHEYYuojI4='),
  requestId?: string(name='RequestId', example='E50287CB-AABF-4877-92C0-289B339A1546'),
  serviceInstances?: [ 
    {
      createTime?: string(name='CreateTime', example='2021-05-20T00:00:00Z'),
      enableInstanceOps?: boolean(name='EnableInstanceOps', example='true'),
      endTime?: string(name='EndTime', example='2022-01-01T12:00:00'),
      isOperated?: boolean(name='IsOperated', example='true'),
      name?: string(name='Name', example='TestName'),
      operatedServiceInstanceId?: string(name='OperatedServiceInstanceId', example='si-d6ab3a63ccbb4b17****'),
      operationEndTime?: string(name='OperationEndTime', example='2021-12-29T06:48:56Z'),
      operationStartTime?: string(name='OperationStartTime', example='2021-12-29T06:48:56Z'),
      parameters?: string(name='Parameters', example='{"param":"value"}'),
      payType?: string(name='PayType', example='Subscription'),
      progress?: long(name='Progress', example='90'),
      resourceGroupId?: string(name='ResourceGroupId'),
      service?: {
        deployMetadata?: string(name='DeployMetadata'),
        deployType?: string(name='DeployType', example='ros'),
        enablePrivateVpcConnection?: boolean(name='EnablePrivateVpcConnection', example='false'),
        publishTime?: string(name='PublishTime', example='2021-05-21T00:00:00Z'),
        serviceId?: string(name='ServiceId', example='service-0e6fca6a51a54420****'),
        serviceInfos?: [ 
          {
            image?: string(name='Image', example='https://example.com/service-image/c1c4a559-cc60-4af1-b976-98f356602462.png'),
            locale?: string(name='Locale', example='zh-CN'),
            name?: string(name='Name'),
            shortDescription?: string(name='ShortDescription'),
          }
        ](name='ServiceInfos'),
        serviceType?: string(name='ServiceType', example='private'),
        sourceSupplierName?: string(name='SourceSupplierName'),
        status?: string(name='Status', example='Online'),
        supplierName?: string(name='SupplierName'),
        supplierUrl?: string(name='SupplierUrl', example='http://example.com'),
        version?: string(name='Version', example='1.0'),
        versionName?: string(name='VersionName'),
      }(name='Service'),
      serviceInstanceId?: string(name='ServiceInstanceId', example='si-d6ab3a63ccbb4b17****'),
      serviceType?: string(name='ServiceType', example='private'),
      source?: string(name='Source', example='Supplier'),
      status?: string(name='Status', example='Deployed'),
      statusDetail?: string(name='StatusDetail', example='deploy successfully'),
      tags?: [ 
        {
          key?: string(name='Key', example='key1'),
          value?: string(name='Value', example='value1'),
        }
      ](name='Tags'),
      templateName?: string(name='TemplateName'),
      updateTime?: string(name='UpdateTime', example='2021-05-20T00:00:00Z'),
      userId?: long(name='UserId', example='1234567'),
    }
  ](name='ServiceInstances'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListServiceInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListServiceInstancesResponseBody(name='body'),
}

async function listServiceInstancesWithOptions(request: ListServiceInstancesRequest, runtime: Util.RuntimeOptions): ListServiceInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.showDeleted)) {
    query['ShowDeleted'] = request.showDeleted;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListServiceInstances',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listServiceInstances(request: ListServiceInstancesRequest): ListServiceInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listServiceInstancesWithOptions(request, runtime);
}

model ListServiceUsagesRequest {
  filter?: [ 
    {
      name?: string(name='Name', example='ServiceId'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAWns8w4MmhzeptXVRG0PUEU='),
}

model ListServiceUsagesResponseBody = {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAYChudnQUoBH+mGWFpb6oP0='),
  requestId?: string(name='RequestId', example='18AD0960-A9FE-1AC8-ADF8-22131Fxxxxxx'),
  serviceUsages?: [ 
    {
      comments?: string(name='Comments'),
      createTime?: string(name='CreateTime', example='2022-05-25T02:02:02Z'),
      serviceId?: string(name='ServiceId', example='service-c9f36ec6d19b4exxxxxx'),
      serviceName?: string(name='ServiceName'),
      status?: string(name='Status', example='Submitted'),
      supplierName?: string(name='SupplierName'),
      updateTime?: string(name='UpdateTime', example='2022-05-25T02:02:02Z'),
      userAliUid?: long(name='UserAliUid', example='127383705958xxxx'),
      userInformation?: {
        company?: string(name='Company', example='alibaba'),
        country?: string(name='Country', example='china'),
        emailAddress?: string(name='EmailAddress', example='a****@xyc.com'),
        industry?: string(name='Industry'),
        name?: string(name='Name'),
        source?: string(name='Source', example='223.2.1.3.xxxx'),
        telephone?: string(name='Telephone', example='12345xxxxxx'),
        title?: string(name='Title'),
      }(name='UserInformation'),
    }
  ](name='ServiceUsages'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListServiceUsagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListServiceUsagesResponseBody(name='body'),
}

async function listServiceUsagesWithOptions(request: ListServiceUsagesRequest, runtime: Util.RuntimeOptions): ListServiceUsagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListServiceUsages',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listServiceUsages(request: ListServiceUsagesRequest): ListServiceUsagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listServiceUsagesWithOptions(request, runtime);
}

model ListServicesRequest {
  allVersions?: boolean(name='AllVersions', example='false'),
  filter?: [ 
    {
      name?: string(name='Name', example='Status'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='BBBAAfu+XtuBE55iRLHEYYuojI4='),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tag'),
}

model ListServicesResponseBody = {
  maxResults?: int32(name='MaxResults', example='1'),
  nextToken?: string(name='NextToken', example='AAAAAfu+XtuBE55iRLHEYYuojI4='),
  requestId?: string(name='RequestId', example='51945B04-6AA6-410D-93BA-236E0248B104'),
  services?: [ 
    {
      approvalType?: string(name='ApprovalType', example='AutoPass'),
      artifactId?: string(name='ArtifactId', example='artifact-21ca53ac16a643xxxxxx'),
      artifactVersion?: string(name='ArtifactVersion', example='draft'),
      commodityCode?: string(name='CommodityCode', example='cmjj00xxxx'),
      createTime?: string(name='CreateTime', example='2021-05-20T00:00:00Z'),
      defaultVersion?: boolean(name='DefaultVersion', example='true'),
      deployType?: string(name='DeployType', example='ros'),
      latestResellSourceServiceVersion?: string(name='LatestResellSourceServiceVersion'),
      publishTime?: string(name='PublishTime', example='2021-05-21T00:00:00Z'),
      relationType?: string(name='RelationType', example='ServiceDeployment'),
      resellServiceId?: string(name='ResellServiceId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      serviceId?: string(name='ServiceId', example='service-70a3b15bb62643xxxxxx'),
      serviceInfos?: [ 
        {
          image?: string(name='Image', example='http://img.tidb.oss.url'),
          locale?: string(name='Locale', example='zh-CN'),
          name?: string(name='Name'),
          shortDescription?: string(name='ShortDescription'),
        }
      ](name='ServiceInfos'),
      serviceType?: string(name='ServiceType', example='private'),
      shareType?: string(name='ShareType', example='Public'),
      sourceImage?: string(name='SourceImage', example='centos_7'),
      sourceServiceId?: string(name='SourceServiceId'),
      sourceServiceVersion?: string(name='SourceServiceVersion'),
      sourceSupplierName?: string(name='SourceSupplierName'),
      status?: string(name='Status', example='Online'),
      supplierName?: string(name='SupplierName'),
      supplierUrl?: string(name='SupplierUrl', example='http://example.com'),
      tags?: [ 
        {
          key?: string(name='Key', example='key1'),
          value?: string(name='Value', example='value1'),
        }
      ](name='Tags'),
      tenantType?: string(name='TenantType', example='SingleTenant'),
      trialType?: string(name='TrialType', example='Trial'),
      updateTime?: string(name='UpdateTime', example='2021-05-21T00:00:00Z'),
      version?: string(name='Version', example='1.0'),
      versionName?: string(name='VersionName', example='v2.0.0'),
    }
  ](name='Services'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListServicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListServicesResponseBody(name='body'),
}

async function listServicesWithOptions(request: ListServicesRequest, runtime: Util.RuntimeOptions): ListServicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allVersions)) {
    query['AllVersions'] = request.allVersions;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListServices',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listServices(request: ListServicesRequest): ListServicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listServicesWithOptions(request, runtime);
}

model ModifyServiceInstanceResourcesRequest {
  resources?: string(name='Resources', example='{
  "RegionId": "cn-hangzhou",
  "Type": "ResourceIds",
  "ResourceIds": {
    "ALIYUN::ECS::INSTANCE": ["i-xxx", "i-yyy"],
    "ALIYUN::RDS::INSTANCE": ["rm-xxx", "rm-yyy"],
    "ALIYUN::VPC::VPC": ["vpc-xxx", "vpc-yyy"],
    "ALIYUN::SLB::INSTANCE": ["lb-xxx", "lb-yyy"]
  }
}'),
  serviceInstanceId?: string(name='ServiceInstanceId', example='si-d8a0cc2a1ee04dce****'),
  serviceInstanceResourcesAction?: string(name='ServiceInstanceResourcesAction', example='Import'),
}

model ModifyServiceInstanceResourcesResponseBody = {
  requestId?: string(name='RequestId', example='46577928-3162-15A6-9084-69820EB9xxxx'),
}

model ModifyServiceInstanceResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyServiceInstanceResourcesResponseBody(name='body'),
}

async function modifyServiceInstanceResourcesWithOptions(request: ModifyServiceInstanceResourcesRequest, runtime: Util.RuntimeOptions): ModifyServiceInstanceResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resources)) {
    query['Resources'] = request.resources;
  }
  if (!Util.isUnset(request.serviceInstanceId)) {
    query['ServiceInstanceId'] = request.serviceInstanceId;
  }
  if (!Util.isUnset(request.serviceInstanceResourcesAction)) {
    query['ServiceInstanceResourcesAction'] = request.serviceInstanceResourcesAction;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyServiceInstanceResources',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyServiceInstanceResources(request: ModifyServiceInstanceResourcesRequest): ModifyServiceInstanceResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyServiceInstanceResourcesWithOptions(request, runtime);
}

model PushMeteringDataRequest {
  metering?: string(name='Metering', example='[{\\"StartTime\\":1681264800,\\"EndTime\\":1681268400,\\"Entities\\":[{\\"Key\\":\\"Unit\\",\\"Value\\":\\"0\\"}]}]'),
  serviceInstanceId?: string(name='ServiceInstanceId', example='si-0e6fca6a51a54420****'),
}

model PushMeteringDataResponseBody = {
  requestId?: string(name='RequestId', example='94E89857-B994-44B6-9C4F-DBD200E9XXXX'),
}

model PushMeteringDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PushMeteringDataResponseBody(name='body'),
}

async function pushMeteringDataWithOptions(request: PushMeteringDataRequest, runtime: Util.RuntimeOptions): PushMeteringDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.metering)) {
    query['Metering'] = request.metering;
  }
  if (!Util.isUnset(request.serviceInstanceId)) {
    query['ServiceInstanceId'] = request.serviceInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PushMeteringData',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pushMeteringData(request: PushMeteringDataRequest): PushMeteringDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushMeteringDataWithOptions(request, runtime);
}

model RegisterServiceRequest {
  clientToken?: string(name='ClientToken', example='10CM943JP0EN9D51H'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  serviceId?: string(name='ServiceId', example='service-f7024a22ea5149xxxxxx'),
}

model RegisterServiceResponseBody = {
  registrationId?: string(name='RegistrationId', example='sr-72dd5071e90c40xxxxxx'),
  requestId?: string(name='RequestId', example='A361BA9E-2713-52C8-AFFC-C26E5180456E'),
}

model RegisterServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RegisterServiceResponseBody(name='body'),
}

async function registerServiceWithOptions(request: RegisterServiceRequest, runtime: Util.RuntimeOptions): RegisterServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RegisterService',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function registerService(request: RegisterServiceRequest): RegisterServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerServiceWithOptions(request, runtime);
}

model ReleaseArtifactRequest {
  artifactId?: string(name='ArtifactId', example='artifact-9feded91880e4c78xxxx'),
}

model ReleaseArtifactResponseBody = {
  artifactId?: string(name='ArtifactId', example='artifact-9feded91880e4c78xxxx'),
  artifactProperty?: string(name='ArtifactProperty', example='"{\\"Url\\":\\"https://computenest-artifacts-draft-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/130920852836xxxx/cn-hangzhou/service-8072a04e5a134382xxxx/165095355xxxx/changes.txt\\",\\"ConfigurationMetadata\\":\\"{\\\\\\"WorkDir\\\\\\":\\\\\\"/root\\\\\\",\\\\\\"Platform\\\\\\":\\\\\\"Linux\\\\\\",\\\\\\"CommandType\\\\\\":\\\\\\"RunShellScript\\\\\\",\\\\\\"UpgradeScript\\\\\\":\\\\\\"cd /root\\\\\\\\ncp changes.txt cpchanges.txt\\\\\\\\nmv changes.txt mvchangge.txt\\\\\\"}\\"}"'),
  artifactType?: string(name='ArtifactType', example='File'),
  artifactVersion?: string(name='ArtifactVersion', example='draft'),
  description?: string(name='Description'),
  gmtModified?: string(name='GmtModified', example='1650954178000'),
  requestId?: string(name='RequestId', example='3818BA7D-3F50-1A44-9FF3-04A52A59XXXX'),
  status?: string(name='Status', example='Created'),
  versionName?: string(name='VersionName'),
}

model ReleaseArtifactResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseArtifactResponseBody(name='body'),
}

async function releaseArtifactWithOptions(request: ReleaseArtifactRequest, runtime: Util.RuntimeOptions): ReleaseArtifactResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.artifactId)) {
    query['ArtifactId'] = request.artifactId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseArtifact',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseArtifact(request: ReleaseArtifactRequest): ReleaseArtifactResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseArtifactWithOptions(request, runtime);
}

model UpdateArtifactRequest {
  artifactId?: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx'),
  artifactProperty?: {
    commodityCode?: string(name='CommodityCode', example='cmjj00xxxx'),
    commodityVersion?: string(name='CommodityVersion', example='V1.0'),
    fileScriptMetadata?: string(name='FileScriptMetadata', example='{\\"WorkDir\\":\\"/root\\",\\"CommandType\\":\\"RunShellScript\\",\\"Platform\\":\\"Linux\\",\\"Script\\":\\"echo hello\\"}'),
    imageId?: string(name='ImageId', example='m-0xij191j9cuev6ucxxxx'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    scriptMetadata?: string(name='ScriptMetadata', example='{"ScriptMetadata":"{\\"CommandType\\":\\"RunShellScript\\",\\"Platform\\":\\"Linux\\",\\"Script\\":\\"ls\\"}"}'),
    url?: string(name='Url', example='https://service-info-private.oss-cn-hangzhou.aliyuncs.com/1309208528xxxxxx/template/2e1ce8fc-xxxx-481c-9e8e-789ba9db487d.json'),
  }(name='ArtifactProperty'),
  description?: string(name='Description'),
  supportRegionIds?: [ string ](name='SupportRegionIds'),
  versionName?: string(name='VersionName', example='v1'),
}

model UpdateArtifactShrinkRequest {
  artifactId?: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx'),
  artifactPropertyShrink?: string(name='ArtifactProperty'),
  description?: string(name='Description'),
  supportRegionIds?: [ string ](name='SupportRegionIds'),
  versionName?: string(name='VersionName', example='v1'),
}

model UpdateArtifactResponseBody = {
  artifactId?: string(name='ArtifactId', example='artifact-eea08d1e2d3a43aexxxx'),
  artifactProperty?: string(name='ArtifactProperty', example='{\\"CommodityCode\\":\\"cmjj0005xxxx\\",\\"CommodityVersion\\":\\"V2022xxxx\\"}'),
  artifactType?: string(name='ArtifactType', example='EcsImage'),
  artifactVersion?: string(name='ArtifactVersion', example='2'),
  description?: string(name='Description'),
  gmtModified?: string(name='GmtModified', example='2022-10-20T02:19:55Z'),
  requestId?: string(name='RequestId', example='B1A0198B-F316-1B72-B8DD-28B6F6D6XXXX'),
  status?: string(name='Status', example='Available'),
  supportRegionIds?: string(name='SupportRegionIds', example='[
			"cn-beijing",
			"cn-hangzhou",
			"cn-shanghai"
		]'),
  versionName?: string(name='VersionName', example='v1'),
}

model UpdateArtifactResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateArtifactResponseBody(name='body'),
}

async function updateArtifactWithOptions(tmpReq: UpdateArtifactRequest, runtime: Util.RuntimeOptions): UpdateArtifactResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateArtifactShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.artifactProperty)) {
    request.artifactPropertyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.artifactProperty, 'ArtifactProperty', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.artifactId)) {
    query['ArtifactId'] = request.artifactId;
  }
  if (!Util.isUnset(request.artifactPropertyShrink)) {
    query['ArtifactProperty'] = request.artifactPropertyShrink;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.supportRegionIds)) {
    query['SupportRegionIds'] = request.supportRegionIds;
  }
  if (!Util.isUnset(request.versionName)) {
    query['VersionName'] = request.versionName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateArtifact',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateArtifact(request: UpdateArtifactRequest): UpdateArtifactResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateArtifactWithOptions(request, runtime);
}

model UpdateServiceRequest {
  alarmMetadata?: string(name='AlarmMetadata', example='{\\"CmsTemplateId\\":1162921,\\"TemplateUrl\\":\\"https://service-info-private.oss-cn-hangzhou.aliyuncs.com/1760465342xxxxxx/template/c072ef50-6c03-4d9c-8f0e-d1c440xxxxxx.json\\"}'),
  clientToken?: string(name='ClientToken', example='788E7CP0EN9D51P'),
  deployMetadata?: string(name='DeployMetadata', example='{\\"EstimateTime\\":null,\\"SupplierDeployMetadata\\":{\\"DeployTimeout\\":7200},\\"EnableVnc\\":false}'),
  deployType?: string(name='DeployType', example='ros'),
  duration?: long(name='Duration', example='259200'),
  isSupportOperated?: boolean(name='IsSupportOperated', example='false'),
  licenseMetadata?: string(name='LicenseMetadata'),
  logMetadata?: string(name='LogMetadata'),
  operationMetadata?: string(name='OperationMetadata', example='{\\"PrometheusConfigMap\\":{\\"Custom_Image_Ecs\\":{\\"EnablePrometheus\\":false}}}'),
  policyNames?: string(name='PolicyNames', example='policyName1, policyName2'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  serviceId?: string(name='ServiceId', example='service-1dda29c3eca648xxxxxx'),
  serviceInfo?: [ 
    {
      image?: string(name='Image', example='http://img.tidb.oss.url'),
      locale?: string(name='Locale', example='zh-CN'),
      longDescriptionUrl?: string(name='LongDescriptionUrl'),
      name?: string(name='Name'),
      shortDescription?: string(name='ShortDescription'),
    }
  ](name='ServiceInfo'),
  serviceType?: string(name='ServiceType', example='private'),
  serviceVersion?: string(name='ServiceVersion', example='1'),
  tenantType?: string(name='TenantType', example='SingleTenant'),
  trialDuration?: int32(name='TrialDuration', example='7'),
  upgradeMetadata?: string(name='UpgradeMetadata', example='{\\"Description\\":\\"xxx\\",\\"SupportRollback\\":true,\\"SupportUpgradeFromVersions\\":[],\\"UpgradeComponents\\":[\\"Configuration\\"]}'),
  versionName?: string(name='VersionName', example='Draft'),
}

model UpdateServiceResponseBody = {
  requestId?: string(name='RequestId', example='DF0F666F-FBBC-55C3-A368-C955DE7B4839'),
}

model UpdateServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateServiceResponseBody(name='body'),
}

async function updateServiceWithOptions(request: UpdateServiceRequest, runtime: Util.RuntimeOptions): UpdateServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alarmMetadata)) {
    query['AlarmMetadata'] = request.alarmMetadata;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.deployMetadata)) {
    query['DeployMetadata'] = request.deployMetadata;
  }
  if (!Util.isUnset(request.deployType)) {
    query['DeployType'] = request.deployType;
  }
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.isSupportOperated)) {
    query['IsSupportOperated'] = request.isSupportOperated;
  }
  if (!Util.isUnset(request.licenseMetadata)) {
    query['LicenseMetadata'] = request.licenseMetadata;
  }
  if (!Util.isUnset(request.logMetadata)) {
    query['LogMetadata'] = request.logMetadata;
  }
  if (!Util.isUnset(request.operationMetadata)) {
    query['OperationMetadata'] = request.operationMetadata;
  }
  if (!Util.isUnset(request.policyNames)) {
    query['PolicyNames'] = request.policyNames;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.serviceInfo)) {
    query['ServiceInfo'] = request.serviceInfo;
  }
  if (!Util.isUnset(request.serviceType)) {
    query['ServiceType'] = request.serviceType;
  }
  if (!Util.isUnset(request.serviceVersion)) {
    query['ServiceVersion'] = request.serviceVersion;
  }
  if (!Util.isUnset(request.tenantType)) {
    query['TenantType'] = request.tenantType;
  }
  if (!Util.isUnset(request.trialDuration)) {
    query['TrialDuration'] = request.trialDuration;
  }
  if (!Util.isUnset(request.upgradeMetadata)) {
    query['UpgradeMetadata'] = request.upgradeMetadata;
  }
  if (!Util.isUnset(request.versionName)) {
    query['VersionName'] = request.versionName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateService',
    version = '2021-05-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateService(request: UpdateServiceRequest): UpdateServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateServiceWithOptions(request, runtime);
}

