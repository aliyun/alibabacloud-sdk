/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('retailbot', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ListIndustryPackagesRequest {
  operatorId?: string(name='OperatorId', description='操作用户id'),
  operatorName?: string(name='OperatorName', description='操作用户名称'),
  domain?: string(name='Domain', description='领域'),
  maxResults?: int32(name='MaxResults', description='每页条数'),
  nextToken?: int32(name='NextToken', description='当前页'),
}

model ListIndustryPackagesResponseBody = {
  requestId?: string(name='RequestId', description='请求id'),
  packagePage?: {
    nextToken?: int32(name='NextToken', description='页码'),
    maxResults?: int32(name='MaxResults', description='每页条数'),
    totalCount?: int32(name='TotalCount', description='总条数'),
    packages?: [ 
      {
        packageName?: string(name='PackageName', description='包名'),
        packageCode?: string(name='PackageCode', description='包code'),
        packageType?: string(name='PackageType', description='包类型'),
        packageDescription?: string(name='PackageDescription', description='包描述'),
        createTime?: string(name='CreateTime', description='创建时间'),
        modifyTime?: string(name='ModifyTime', description='修改时间'),
        createUserId?: string(name='CreateUserId', description='创建人id'),
        modifyUserId?: string(name='ModifyUserId', description='修改人id'),
      }
    ](name='Packages', description='包集合'),
  }(name='PackagePage'),
}

model ListIndustryPackagesResponse = {
  headers: map[string]string(name='headers'),
  body: ListIndustryPackagesResponseBody(name='body'),
}

async function listIndustryPackagesWithOptions(request: ListIndustryPackagesRequest, runtime: Util.RuntimeOptions): ListIndustryPackagesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListIndustryPackages', '2021-02-24', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listIndustryPackages(request: ListIndustryPackagesRequest): ListIndustryPackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIndustryPackagesWithOptions(request, runtime);
}

model ListCategoriesRequest {
  robotCode?: string(name='RobotCode', description='机器人code'),
  operatorId?: string(name='OperatorId', description='操作用户id'),
  operatorName?: string(name='OperatorName', description='操作用户名称'),
}

model ListCategoriesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  categories?: [ 
    {
      categoryId?: long(name='CategoryId', description='类目id'),
      parentCategoryId?: long(name='ParentCategoryId', description='父类目id'),
      categoryName?: string(name='CategoryName', description='类目名称'),
      children?: [ 
        {
          categoryId?: long(name='CategoryId', description='类目id'),
          parentCategoryId?: long(name='ParentCategoryId', description='父类目id'),
          categoryName?: string(name='CategoryName', description='类目名称'),
        }
      ](name='Children', description='子级类目集合'),
    }
  ](name='Categories', description='知识类目集合'),
}

model ListCategoriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListCategoriesResponseBody(name='body'),
}

async function listCategoriesWithOptions(request: ListCategoriesRequest, runtime: Util.RuntimeOptions): ListCategoriesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListCategories', '2021-02-24', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listCategories(request: ListCategoriesRequest): ListCategoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCategoriesWithOptions(request, runtime);
}

model EnableSceneRequest {
  knowledgeIds?: [ long ](name='KnowledgeIds', description='知识id集合'),
  robotCode?: string(name='RobotCode', description='机器人code'),
  operatorId?: string(name='OperatorId', description='操作用户id'),
  operatorName?: string(name='OperatorName', description='操作用户名称'),
}

model EnableSceneShrinkRequest {
  knowledgeIdsShrink?: string(name='KnowledgeIds', description='知识id集合'),
  robotCode?: string(name='RobotCode', description='机器人code'),
  operatorId?: string(name='OperatorId', description='操作用户id'),
  operatorName?: string(name='OperatorName', description='操作用户名称'),
}

model EnableSceneResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model EnableSceneResponse = {
  headers: map[string]string(name='headers'),
  body: EnableSceneResponseBody(name='body'),
}

async function enableSceneWithOptions(tmpReq: EnableSceneRequest, runtime: Util.RuntimeOptions): EnableSceneResponse {
  Util.validateModel(tmpReq);
  var request = new EnableSceneShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.knowledgeIds)) {
    request.knowledgeIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.knowledgeIds, 'KnowledgeIds', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableScene', '2021-02-24', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableScene(request: EnableSceneRequest): EnableSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableSceneWithOptions(request, runtime);
}

model ListPackageKnowledgesRequest {
  packageCode?: string(name='PackageCode', description='包code'),
  packageVersion?: string(name='PackageVersion', description='包version'),
  operatorId?: string(name='OperatorId', description='操作用户id'),
  operatorName?: string(name='OperatorName', description='操作用户名称'),
}

model ListPackageKnowledgesResponseBody = {
  knowledges?: [ 
    {
      knowledgeId?: long(name='KnowledgeId', description='知识id'),
      knowledgeTitle?: string(name='KnowledgeTitle', description='知识标题'),
      knowledgeStatus?: string(name='KnowledgeStatus', description='"online":在用，"disabled":禁用'),
      sceneKey?: string(name='SceneKey', description='场景key'),
      knowledgeDescription?: string(name='KnowledgeDescription', description='知识描述'),
      createTime?: string(name='CreateTime', description='创建时间格式：yyyy-MM-dd HH:mm:ss'),
      modifyTime?: string(name='ModifyTime', description='修改时间格式：yyyy-MM-dd HH:mm:ss'),
      createUserId?: string(name='CreateUserId', description='创建用户id'),
      modifyUserId?: string(name='ModifyUserId', description='修改用户id'),
      similarQuestions?: [ 
        {
          similarQuestionId?: long(name='SimilarQuestionId', description='问法id'),
          similarQuestionTitle?: string(name='SimilarQuestionTitle', description='示例问法标题'),
          similarQuestionType?: string(name='SimilarQuestionType', description='"similar":相似问法，"sample":例句，"keyword":关键字'),
          similarQuestionEffectType?: string(name='SimilarQuestionEffectType', description='"positive":正向，"negative":负向'),
          createTime?: string(name='CreateTime', description='创建时间格式：yyyy-MM-dd HH:mm:ss'),
          modifyTime?: string(name='ModifyTime', description='修改时间格式：yyyy-MM-dd HH:mm:ss'),
          createUserId?: string(name='CreateUserId', description='创建用户id'),
          modifyUserId?: string(name='ModifyUserId', description='修改用户id'),
        }
      ](name='SimilarQuestions', description='示例问法、正负例句、正负关键字'),
    }
  ](name='Knowledges', description='知识集合'),
  requestId?: string(name='RequestId'),
}

model ListPackageKnowledgesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPackageKnowledgesResponseBody(name='body'),
}

async function listPackageKnowledgesWithOptions(request: ListPackageKnowledgesRequest, runtime: Util.RuntimeOptions): ListPackageKnowledgesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListPackageKnowledges', '2021-02-24', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listPackageKnowledges(request: ListPackageKnowledgesRequest): ListPackageKnowledgesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPackageKnowledgesWithOptions(request, runtime);
}

model GetKnowledgeRequest {
  robotCode?: string(name='RobotCode', description='机器人code'),
  operatorId?: string(name='OperatorId', description='操作人id'),
  operatorName?: string(name='OperatorName', description='操作人名称'),
  knowledgeId?: long(name='KnowledgeId', description='知识id'),
}

model GetKnowledgeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  knowledge?: {
    knowledgeId?: long(name='KnowledgeId', description='知识id'),
    knowledgeTitle?: string(name='KnowledgeTitle', description='知识标题'),
    knowledgeStatus?: string(name='KnowledgeStatus', description='知识状态'),
    sceneKey?: string(name='SceneKey', description='场景key'),
    knowledgeDescription?: string(name='KnowledgeDescription', description='场景描述'),
    createTime?: string(name='CreateTime', description='创建时间'),
    createUserId?: string(name='CreateUserId', description='创建用户id'),
    modifyUserId?: string(name='ModifyUserId', description='修改用户id'),
    modifyTime?: string(name='ModifyTime', description='修改时间'),
    similarQuestions?: [ 
      {
        similarQuestionId?: long(name='SimilarQuestionId', description='问法id'),
        similarQuestionTitle?: string(name='SimilarQuestionTitle', description='示例问法标题'),
        similarQuestionType?: string(name='SimilarQuestionType', description='问法类型'),
        similarQuestionEffectType?: string(name='SimilarQuestionEffectType', description='问法影响类型'),
        createTime?: string(name='CreateTime', description='创建时间'),
        modifyTime?: string(name='ModifyTime', description='修改时间'),
        createUserId?: string(name='CreateUserId', description='创建用户id'),
        modifyUserId?: string(name='ModifyUserId', description='修改用户id'),
      }
    ](name='SimilarQuestions', description='示例问法集合'),
    solutions?: [ 
      {
        solutionId?: long(name='SolutionId', description='答案id'),
        knowledgeId?: long(name='KnowledgeId', description='知识id'),
        solutionType?: string(name='SolutionType', description='答案类型,'),
        solutionSource?: string(name='SolutionSource', description='答案来源'),
        solutionContent?: string(name='SolutionContent', description='答案正文'),
        conditions?: [ 
          {
            knowledgeId?: long(name='KnowledgeId', description='知识id'),
            solutionId?: long(name='SolutionId', description='答案id'),
            conditionType?: string(name='ConditionType', description='生效模式'),
            conditionValue?: string(name='ConditionValue', description='生效模式值'),
          }
        ](name='Conditions', description='答案约束集合'),
        extraContent?: string(name='ExtraContent', description='答案扩展信息'),
        solutionVariables?: [ 
          {
            knowledgeId?: long(name='KnowledgeId', description='知识id'),
            solutionId?: long(name='SolutionId', description='答案id'),
            variableName?: string(name='VariableName', description='变量名称'),
            variableType?: string(name='VariableType', description='变量类型'),
          }
        ](name='SolutionVariables', description='变量集合'),
      }
    ](name='Solutions', description='答案集合'),
  }(name='Knowledge', description='知识'),
}

model GetKnowledgeResponse = {
  headers: map[string]string(name='headers'),
  body: GetKnowledgeResponseBody(name='body'),
}

async function getKnowledgeWithOptions(request: GetKnowledgeRequest, runtime: Util.RuntimeOptions): GetKnowledgeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetKnowledge', '2021-02-24', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getKnowledge(request: GetKnowledgeRequest): GetKnowledgeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getKnowledgeWithOptions(request, runtime);
}

model DisableSceneRequest {
  knowledgeIds?: [ long ](name='KnowledgeIds', description='知识id集合'),
  robotCode?: string(name='RobotCode', description='机器人code'),
  operatorId?: string(name='OperatorId', description='操作用户id'),
  operatorName?: string(name='OperatorName', description='操作用户名称'),
}

model DisableSceneShrinkRequest {
  knowledgeIdsShrink?: string(name='KnowledgeIds', description='知识id集合'),
  robotCode?: string(name='RobotCode', description='机器人code'),
  operatorId?: string(name='OperatorId', description='操作用户id'),
  operatorName?: string(name='OperatorName', description='操作用户名称'),
}

model DisableSceneResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model DisableSceneResponse = {
  headers: map[string]string(name='headers'),
  body: DisableSceneResponseBody(name='body'),
}

async function disableSceneWithOptions(tmpReq: DisableSceneRequest, runtime: Util.RuntimeOptions): DisableSceneResponse {
  Util.validateModel(tmpReq);
  var request = new DisableSceneShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.knowledgeIds)) {
    request.knowledgeIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.knowledgeIds, 'KnowledgeIds', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DisableScene', '2021-02-24', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableScene(request: DisableSceneRequest): DisableSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableSceneWithOptions(request, runtime);
}

model DeleteSolutionRequest {
  robotCode?: string(name='RobotCode', description='机器人code'),
  knowledgeId?: long(name='KnowledgeId', description='知识id'),
  solutionIds?: [ long ](name='SolutionIds', description='答案id集合'),
  operatorId?: string(name='OperatorId', description='操作用户id'),
  operatorName?: string(name='OperatorName', description='操作用户名称'),
}

model DeleteSolutionShrinkRequest {
  robotCode?: string(name='RobotCode', description='机器人code'),
  knowledgeId?: long(name='KnowledgeId', description='知识id'),
  solutionIdsShrink?: string(name='SolutionIds', description='答案id集合'),
  operatorId?: string(name='OperatorId', description='操作用户id'),
  operatorName?: string(name='OperatorName', description='操作用户名称'),
}

model DeleteSolutionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model DeleteSolutionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSolutionResponseBody(name='body'),
}

async function deleteSolutionWithOptions(tmpReq: DeleteSolutionRequest, runtime: Util.RuntimeOptions): DeleteSolutionResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteSolutionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.solutionIds)) {
    request.solutionIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.solutionIds, 'SolutionIds', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSolution', '2021-02-24', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSolution(request: DeleteSolutionRequest): DeleteSolutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSolutionWithOptions(request, runtime);
}

model UpdateSolutionRequest {
  robotCode?: string(name='RobotCode', description='机器人code'),
  knowledgeId?: long(name='KnowledgeId', description='知识id'),
  operatorId?: string(name='OperatorId', description='操作用户id'),
  operatorName?: string(name='OperatorName', description='操作用户名称'),
  solution?: {
    solutionId?: long(name='SolutionId', description='答案id'),
    knowledgeId?: long(name='KnowledgeId', description='知识id'),
    solutionType?: string(name='SolutionType', description='答案类型, "text"：文本答案'),
    solutionSource?: string(name='SolutionSource', description='答案来源'),
    solutionContent?: string(name='SolutionContent', description='答案正文'),
    conditions?: [ 
      {
        knowledgeId?: long(name='KnowledgeId', description='知识id'),
        solutionId?: long(name='SolutionId', description='答案id'),
        conditionType?: string(name='ConditionType', description='生效模式：EffectiveMode'),
        conditionValue?: string(name='ConditionValue', description='生效模式："disable":全部不生效，"auto":全自动，"assistant":智能辅助，"enable":全部生效'),
      }
    ](name='Conditions', description='答案约束'),
    extraContent?: string(name='ExtraContent', description='答案扩展信息'),
    solutionVariables?: [ 
      {
        knowledgeId?: long(name='KnowledgeId', description='知识id'),
        solutionId?: long(name='SolutionId', description='答案id'),
        variableName?: string(name='VariableName', description='变量名称'),
        variableType?: string(name='VariableType', description='变量类型'),
      }
    ](name='SolutionVariables', description='答案变量'),
  }(name='Solution', description='答案数据'),
}

model UpdateSolutionShrinkRequest {
  robotCode?: string(name='RobotCode', description='机器人code'),
  knowledgeId?: long(name='KnowledgeId', description='知识id'),
  operatorId?: string(name='OperatorId', description='操作用户id'),
  operatorName?: string(name='OperatorName', description='操作用户名称'),
  solutionShrink?: string(name='Solution', description='答案数据'),
}

model UpdateSolutionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model UpdateSolutionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSolutionResponseBody(name='body'),
}

async function updateSolutionWithOptions(tmpReq: UpdateSolutionRequest, runtime: Util.RuntimeOptions): UpdateSolutionResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateSolutionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.solution)) {
    request.solutionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.solution, 'Solution', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateSolution', '2021-02-24', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateSolution(request: UpdateSolutionRequest): UpdateSolutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSolutionWithOptions(request, runtime);
}

model ListPackageVersionsRequest {
  packageCodes?: [ string ](name='PackageCodes', description='包code集合'),
  operatorId?: string(name='OperatorId', description='操作人id'),
  operatorName?: string(name='OperatorName', description='操作人名称'),
}

model ListPackageVersionsShrinkRequest {
  packageCodesShrink?: string(name='PackageCodes', description='包code集合'),
  operatorId?: string(name='OperatorId', description='操作人id'),
  operatorName?: string(name='OperatorName', description='操作人名称'),
}

model ListPackageVersionsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  packages?: [ 
    {
      packageName?: string(name='PackageName', description='包名'),
      packageCode?: string(name='PackageCode', description='包code'),
      packageDetails?: [ 
        {
          packageVersion?: string(name='PackageVersion', description='包版本'),
          packageDetailDescription?: string(name='PackageDetailDescription', description='包详细描述'),
          createTime?: string(name='CreateTime', description='创建时间'),
          modifyTime?: string(name='ModifyTime', description='修改时间'),
          createUserId?: string(name='CreateUserId', description='创建人id'),
          modifyUserId?: string(name='ModifyUserId', description='修改人id'),
          publishTime?: string(name='PublishTime', description='发布时间'),
        }
      ](name='PackageDetails', description='包详细信息'),
    }
  ](name='Packages', description='包集合'),
}

model ListPackageVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPackageVersionsResponseBody(name='body'),
}

async function listPackageVersionsWithOptions(tmpReq: ListPackageVersionsRequest, runtime: Util.RuntimeOptions): ListPackageVersionsResponse {
  Util.validateModel(tmpReq);
  var request = new ListPackageVersionsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.packageCodes)) {
    request.packageCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.packageCodes, 'PackageCodes', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListPackageVersions', '2021-02-24', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listPackageVersions(request: ListPackageVersionsRequest): ListPackageVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPackageVersionsWithOptions(request, runtime);
}

model ListSubscribedPackageKnowledgesRequest {
  categoryId?: long(name='CategoryId', description='类目id'),
  packageCodes?: [ string ](name='PackageCodes', description='查询指定包的场景'),
  robotCode?: string(name='RobotCode', description='机器人code'),
  operatorId?: string(name='OperatorId', description='操作用户id'),
  operatorName?: string(name='OperatorName', description='操作用户名称'),
}

model ListSubscribedPackageKnowledgesResponseBody = {
  knowledges?: [ 
    {
      knowledgeId?: long(name='KnowledgeId', description='知识id'),
      knowledgeTitle?: string(name='KnowledgeTitle', description='知识标题'),
      knowledgeStatus?: string(name='KnowledgeStatus', description='"online":在用，"disabled":禁用'),
      knowledgeDescription?: string(name='KnowledgeDescription', description='知识描述'),
      createTime?: string(name='CreateTime', description='创建时间格式：yyyy-MM-dd HH:mm:ss'),
      modifyTime?: string(name='ModifyTime', description='修改时间格式：yyyy-MM-dd HH:mm:ss'),
      createUserId?: string(name='CreateUserId', description='创建用户id'),
      modifyUserId?: string(name='ModifyUserId', description='修改用户id'),
      similarQuestions?: [ 
        {
          similarQuestionId?: long(name='SimilarQuestionId', description='问法id'),
          similarQuestionTitle?: string(name='SimilarQuestionTitle', description='示例问法标题'),
          similarQuestionType?: string(name='SimilarQuestionType', description='"similar":相似问法，"sample":例句，"keyword":关键字'),
          similarQuestionEffectType?: string(name='SimilarQuestionEffectType', description='"positive":正向，"negative":负向'),
          createTime?: string(name='CreateTime', description='创建时间格式：yyyy-MM-dd HH:mm:ss'),
          modifyTime?: string(name='ModifyTime', description='修改时间格式：yyyy-MM-dd HH:mm:ss'),
          createUserId?: string(name='CreateUserId', description='创建用户id'),
          modifyUserId?: string(name='ModifyUserId', description='修改用户id'),
        }
      ](name='SimilarQuestions', description='示例问法、正负例句、正负关键字'),
      solutions?: [ 
        {
          solutionId?: long(name='SolutionId', description='答案id'),
          knowledgeId?: long(name='KnowledgeId', description='场景id'),
          solutionType?: string(name='SolutionType', description='答案类型,"text":文本答案'),
          solutionSource?: string(name='SolutionSource', description='答案来源'),
          solutionContent?: string(name='SolutionContent', description='答案正文'),
          conditions?: [ 
            {
              knowledgeId?: long(name='KnowledgeId', description='知识id'),
              solutionId?: long(name='SolutionId', description='答案id'),
              conditionType?: string(name='ConditionType', description='生效模式：EffectiveMode'),
              conditionValue?: string(name='ConditionValue', description='生效模式："disable":全部不生效，"auto":全自动，"assistant":智能辅助，"enable":全部生效'),
            }
          ](name='Conditions', description='答案约束'),
          extraContent?: string(name='ExtraContent', description='答案扩展信息'),
        }
      ](name='Solutions', description='答案'),
    }
  ](name='Knowledges', description='知识集合'),
  requestId?: string(name='RequestId'),
}

model ListSubscribedPackageKnowledgesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSubscribedPackageKnowledgesResponseBody(name='body'),
}

async function listSubscribedPackageKnowledgesWithOptions(request: ListSubscribedPackageKnowledgesRequest, runtime: Util.RuntimeOptions): ListSubscribedPackageKnowledgesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSubscribedPackageKnowledges', '2021-02-24', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSubscribedPackageKnowledges(request: ListSubscribedPackageKnowledgesRequest): ListSubscribedPackageKnowledgesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSubscribedPackageKnowledgesWithOptions(request, runtime);
}

model GetPackageVersionRequest {
  operatorId?: string(name='OperatorId', description='操作人id'),
  operatorName?: string(name='OperatorName', description='操作人名称'),
  packageCode?: string(name='PackageCode', description='包code'),
}

model GetPackageVersionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  packageName?: string(name='PackageName', description='包名称'),
  packageCode?: string(name='PackageCode', description='包code'),
  packageDetails?: [ 
    {
      packageVersion?: string(name='PackageVersion', description='包版本'),
      packageDetailDescription?: string(name='PackageDetailDescription', description='包详细描述'),
      createTime?: string(name='CreateTime', description='创建时间'),
      modifyTime?: string(name='ModifyTime', description='修改时间'),
      createUserId?: string(name='CreateUserId', description='创建人id'),
      modifyUserId?: string(name='ModifyUserId', description='修改人id'),
      publishTime?: string(name='PublishTime', description='发布时间'),
    }
  ](name='PackageDetails', description='包的详细信息'),
}

model GetPackageVersionResponse = {
  headers: map[string]string(name='headers'),
  body: GetPackageVersionResponseBody(name='body'),
}

async function getPackageVersionWithOptions(request: GetPackageVersionRequest, runtime: Util.RuntimeOptions): GetPackageVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetPackageVersion', '2021-02-24', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getPackageVersion(request: GetPackageVersionRequest): GetPackageVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPackageVersionWithOptions(request, runtime);
}

model AddSolutionRequest {
  robotCode?: string(name='RobotCode', description='机器人code'),
  knowledgeId?: long(name='KnowledgeId', description='知识id'),
  solution?: {
    knowledgeId?: long(name='KnowledgeId', description='知识id'),
    solutionType?: string(name='SolutionType', description='答案类型, "text":文本知识'),
    solutionSource?: string(name='SolutionSource', description='答案来源,乐言不需要填'),
    solutionContent?: string(name='SolutionContent', description='答案正文'),
    conditions?: [ 
      {
        knowledgeId?: long(name='KnowledgeId', description='知识id'),
        conditionType?: string(name='ConditionType', description='生效模式：EffectiveMode  分支：BranchId'),
        conditionValue?: string(name='ConditionValue', description='生效模式："disable":全部不生效，"auto":全自动，"assistant":智能辅助，"enable":全部生效  分支：分支id'),
      }
    ](name='Conditions', description='答案约束'),
    extraContent?: string(name='ExtraContent', description='答案扩展信息'),
    solutionVariables?: [ 
      {
        knowledgeId?: long(name='KnowledgeId', description='知识id'),
        solutionId?: long(name='SolutionId', description='答案id'),
        variableName?: string(name='VariableName', description='变量名称'),
        variableType?: string(name='VariableType', description='变量类型'),
      }
    ](name='SolutionVariables', description='答案变量'),
  }(name='Solution', description='答案'),
  operatorId?: string(name='OperatorId', description='操作人id'),
  operatorName?: string(name='OperatorName', description='操作人名称'),
}

model AddSolutionShrinkRequest {
  robotCode?: string(name='RobotCode', description='机器人code'),
  knowledgeId?: long(name='KnowledgeId', description='知识id'),
  solutionShrink?: string(name='Solution', description='答案'),
  operatorId?: string(name='OperatorId', description='操作人id'),
  operatorName?: string(name='OperatorName', description='操作人名称'),
}

model AddSolutionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  solutionId?: long(name='SolutionId', description='答案id'),
}

model AddSolutionResponse = {
  headers: map[string]string(name='headers'),
  body: AddSolutionResponseBody(name='body'),
}

async function addSolutionWithOptions(tmpReq: AddSolutionRequest, runtime: Util.RuntimeOptions): AddSolutionResponse {
  Util.validateModel(tmpReq);
  var request = new AddSolutionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.solution)) {
    request.solutionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.solution, 'Solution', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddSolution', '2021-02-24', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addSolution(request: AddSolutionRequest): AddSolutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return addSolutionWithOptions(request, runtime);
}

model GetSolutionRequest {
  robotCode?: string(name='RobotCode', description='机器人code'),
  knowledgeId?: long(name='KnowledgeId', description='知识id'),
  solutionId?: long(name='SolutionId', description='答案id'),
  operatorId?: string(name='OperatorId', description='操作用户id'),
  operatorName?: string(name='OperatorName', description='操作用户名称'),
}

model GetSolutionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  solution?: {
    solutionId?: long(name='SolutionId', description='答案id'),
    knowledgeId?: long(name='KnowledgeId', description='知识id'),
    solutionType?: string(name='SolutionType', description='答案类型,"text":文本答案'),
    solutionSource?: string(name='SolutionSource', description='答案来源'),
    solutionContent?: string(name='SolutionContent', description='答案正文'),
    conditions?: [ 
      {
        knowledgeId?: long(name='KnowledgeId', description='知识id'),
        solutionId?: long(name='SolutionId', description='答案id'),
        conditionType?: string(name='ConditionType', description='生效模式：EffectiveMode'),
        conditionValue?: string(name='ConditionValue', description='生效模式："disable":全部不生效，"auto":全自动，"assistant":智能辅助，"enable":全部生效'),
      }
    ](name='Conditions', description='答案约束'),
    solutionVariables?: [ 
      {
        knowledgeId?: long(name='KnowledgeId', description='知识id'),
        solutionId?: long(name='SolutionId', description='答案id'),
        variableName?: string(name='VariableName', description='变量名称'),
        variableType?: string(name='VariableType', description='变量类型'),
      }
    ](name='SolutionVariables', description='答案变量'),
    extraContent?: string(name='ExtraContent', description='答案扩展信息'),
  }(name='Solution', description='答案'),
}

model GetSolutionResponse = {
  headers: map[string]string(name='headers'),
  body: GetSolutionResponseBody(name='body'),
}

async function getSolutionWithOptions(request: GetSolutionRequest, runtime: Util.RuntimeOptions): GetSolutionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetSolution', '2021-02-24', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getSolution(request: GetSolutionRequest): GetSolutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSolutionWithOptions(request, runtime);
}

