/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'QuanMiaoLightApp';
  @version = '2024-08-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model GenerateBroadcastNewsRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', example='llm-xxx', position='Path'),
  prompt: string(name='prompt', position='Body'),
}

model GenerateBroadcastNewsResponseBody = {
  code?: string(name='code', example='xx'),
  data?: {
    hotTopicSummaries?: [ 
      {
        category?: string(name='category'),
        hotTopic?: string(name='hotTopic'),
        hotTopicVersion?: string(name='hotTopicVersion', example='2024-09-13_08'),
        hotValue?: double(name='hotValue', example='1000000'),
        id?: string(name='id', example='1458tb3bjo7531kap42a'),
        images?: [ 
          {
            url?: string(name='url', example='http://xxx.com/xxx.jpeg'),
          }
        ](name='images'),
        textSummary?: string(name='textSummary', example='xxx'),
      }
    ](name='hotTopicSummaries'),
    sessionId?: string(name='sessionId', example='2bb0ea82dafd48a8817fadc4c90e2b52'),
    taskId?: string(name='taskId', example='3feb69ed02d9b1a17d0f1a942675d300'),
    text?: string(name='text'),
    usage?: {
      inputTokens?: long(name='inputTokens', example='1'),
      outputTokens?: long(name='outputTokens', example='2'),
      totalTokens?: long(name='totalTokens', example='3'),
    }(name='usage'),
  }(name='data'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='117F5ABE-CF02-5502-9A3F-E56BC9081A64'),
  success?: boolean(name='success', example='True'),
}

model GenerateBroadcastNewsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateBroadcastNewsResponseBody(name='body'),
}

async function generateBroadcastNews(request: GenerateBroadcastNewsRequest): GenerateBroadcastNewsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GenerateBroadcastNews', 'POST', '/{workspaceId}/quanmiao/lightapp/GenerateBroadcastNews', 'json', true, 'form', request);
}

model ListHotTopicSummariesRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', example='llm-xxx', position='Path'),
  category?: string(name='category', example='xx', position='Body'),
  hotTopic?: string(name='hotTopic', example='xx', position='Body'),
  hotTopicVersion?: string(name='hotTopicVersion', example='2024-09-13_12', position='Body'),
  maxResults?: int32(name='maxResults', example='20', minimum=0, maximum=1000, position='Body'),
  nextToken?: string(name='nextToken', example='JlroP3CjgQh5PQDlH3ArzADkBTPZgVqo+64jhZRglNq0mEYoV5SlGb/Juvo8CdfYE9rlwEr2pIJQwdaYotak9g==', position='Body'),
}

model ListHotTopicSummariesResponseBody = {
  code?: string(name='code', example='xx'),
  data?: [ 
    {
      category?: string(name='category'),
      hotTopic?: string(name='hotTopic', example='xx'),
      hotTopicVersion?: string(name='hotTopicVersion', example='2024-09-13_12'),
      hotValue?: double(name='hotValue', example='1000000'),
      id?: string(name='id', example='db5dc5b3d8954a30b65ba700c9dda3bb'),
      news?: [ 
        {
          comments?: [ 
            {
              text?: string(name='text', example='xx'),
            }
          ](name='comments'),
          content?: string(name='content', example='xx'),
          pubTime?: string(name='pubTime', example='2024-09-10 15:32:00'),
          title?: string(name='title', example='xx'),
          url?: string(name='url', description='url', example='http://xxx'),
        }
      ](name='news'),
      summary?: {
        summaries?: [ 
          {
            summary?: string(name='summary', example='xx'),
            title?: string(name='title', example='xx'),
          }
        ](name='summaries'),
      }(name='summary'),
      textSummary?: string(name='textSummary', example='xx'),
    }
  ](name='data'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  maxResults?: int32(name='maxResults', example='20'),
  message?: string(name='message', example='success'),
  nextToken?: string(name='nextToken', example='JlroP3CjgQh5PQDlH3ArzADkBTPZgVqo+64jhZRglNq0mEYoV5SlGb/Juvo8CdfYE9rlwEr2pIJQwdaYotak9g=='),
  requestId?: string(name='requestId', example='117F5ABE-CF02-5502-9A3F-E56BC9081A64'),
  success?: boolean(name='success', example='True'),
  totalCount?: int32(name='totalCount', example='200'),
}

model ListHotTopicSummariesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHotTopicSummariesResponseBody(name='body'),
}

async function listHotTopicSummaries(request: ListHotTopicSummariesRequest): ListHotTopicSummariesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListHotTopicSummaries', 'POST', '/{workspaceId}/quanmiao/lightapp/listHotTopicSummaries', 'json', true, 'form', request);
}

model RunCommentGenerationRequest {
  workspaceId?: string(name='workspaceId', example='llm-rz8db8d00rcn2p0u', position='Path'),
  regionId?: string(name='regionId', position='Host'),
  length?: string(name='length', example='20', position='Body'),
  numComments?: string(name='numComments', example='10', position='Body'),
  sourceMaterial?: string(name='sourceMaterial', position='Body'),
  style?: string(name='style', position='Body'),
}

model RunCommentGenerationResponseBody = {
  end?: boolean(name='end'),
  header?: {
    event?: string(name='event', example='result-generated'),
    eventInfo?: string(name='eventInfo'),
    requestId?: string(name='requestId', example='F8A35034-EDCF-5C50-95A5-1044316F36E3'),
    sessionId?: string(name='sessionId', example='tcm9xac9dsfbfgm8hf5k94l3cqybwh9o3mn0iuyytdgd9qoejxf1crxsdvuvr8fu0zuhbe8anhdaoeif2wbkmebagnezh23cuhkiazx2tmjh4eml791eak7t95sshvtkz14bh2lnbktzvdhialzd8reoaem0pktw41slinwyoabe75xlnxsqb5eo1i6ly70'),
    taskId?: string(name='taskId', example='task-fu1918oghtodbis3chgpfr'),
    traceId?: string(name='traceId', example='21507c3517074446017046500ed5f1'),
  }(name='header'),
  payload?: {
    output?: {
      text?: string(name='text'),
    }(name='output'),
    usage?: {
      inputTokens?: long(name='inputTokens', example='100'),
      outputTokens?: long(name='outputTokens', example='100'),
      totalTokens?: long(name='totalTokens', example='200'),
    }(name='usage'),
  }(name='payload'),
}

model RunCommentGenerationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunCommentGenerationResponseBody(name='body'),
}

async function runCommentGeneration(request: RunCommentGenerationRequest): RunCommentGenerationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunCommentGeneration', 'POST', '/{workspaceId}/quanmiao/lightapp/runCommentGeneration', 'json', true, 'form', request);
}

async function runCommentGenerationWithAsyncResponseHandler(request: RunCommentGenerationRequest, responseHandler: AsyncResponseHandler): RunCommentGenerationResponse {
  @handler.validateRequestModel(request);
  return @handler.doResponseHandler('RESTFUL', 'RunCommentGeneration', 'POST', '/{workspaceId}/quanmiao/lightapp/runCommentGeneration', 'json', true, 'form', request, responseHandler);
}

function runCommentGenerationWithResponseIterable(request: RunCommentGenerationRequest): iterator[RunCommentGenerationResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunCommentGeneration', 'POST', '/{workspaceId}/quanmiao/lightapp/runCommentGeneration', 'json', true, 'form', request);
}

model RunMarketingInformationExtractRequest {
  workspaceId?: string(name='workspaceId', example='w-08a4a3ba7104917c', position='Path'),
  regionId?: string(name='regionId', position='Host'),
  customPrompt?: string(name='customPrompt', position='Body'),
  extractType?: string(name='extractType', position='Body'),
  modelId?: string(name='modelId', example='qwen-max
qwen-plus', position='Body'),
  sourceMaterials?: [ string ](name='sourceMaterials', shrink='json', position='Body'),
}

model RunMarketingInformationExtractResponseBody = {
  end?: boolean(name='end', example='{\\"TimeZone\\": \\"Asia/Shanghai\\", \\"DateTime\\": \\"2024-03-07T17:00:09+08:00\\"}'),
  header?: {
    event?: string(name='event', example='result-generated'),
    eventInfo?: string(name='eventInfo'),
    requestId?: string(name='requestId', example='F08C71C0-9399-548C-838B-1DA01DE211B0'),
    sessionId?: string(name='sessionId', example='121dlsga4o7golrl1hojazg0u9lvytjc17ebgzzj2u4zukgh122tfg7wj1e6a1vcowy1ewzinauxriai9atcr6r323mm9ddbr0bg5m61ij8hxnf8664tstlfkfol6m8luc4shs3gums7l46uauyy0xndqmhdjtdon6coyhb4x17bo762bg9e3tb2geufg2'),
    taskId?: string(name='taskId', example='12826092918145'),
    traceId?: string(name='traceId', example='2150432017236011824686132ecdbc'),
  }(name='header'),
  payload?: {
    output?: {
      text?: string(name='text'),
    }(name='output'),
    usage?: {
      inputTokens?: long(name='inputTokens', example='100'),
      outputTokens?: long(name='outputTokens', example='100'),
      totalTokens?: long(name='totalTokens', example='200'),
    }(name='usage'),
  }(name='payload'),
}

model RunMarketingInformationExtractResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunMarketingInformationExtractResponseBody(name='body'),
}

async function runMarketingInformationExtract(request: RunMarketingInformationExtractRequest): RunMarketingInformationExtractResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunMarketingInformationExtract', 'POST', '/{workspaceId}/quanmiao/lightapp/runMarketingInformationExtract', 'json', true, 'form', request);
}

async function runMarketingInformationExtractWithAsyncResponseHandler(request: RunMarketingInformationExtractRequest, responseHandler: AsyncResponseHandler): RunMarketingInformationExtractResponse {
  @handler.validateRequestModel(request);
  return @handler.doResponseHandler('RESTFUL', 'RunMarketingInformationExtract', 'POST', '/{workspaceId}/quanmiao/lightapp/runMarketingInformationExtract', 'json', true, 'form', request, responseHandler);
}

function runMarketingInformationExtractWithResponseIterable(request: RunMarketingInformationExtractRequest): iterator[RunMarketingInformationExtractResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunMarketingInformationExtract', 'POST', '/{workspaceId}/quanmiao/lightapp/runMarketingInformationExtract', 'json', true, 'form', request);
}

model RunMarketingInformationWritingRequest {
  workspaceId?: string(name='workspaceId', example='w-26ca1703f6d71e6e', position='Path'),
  regionId?: string(name='regionId', position='Host'),
  customPrompt?: string(name='customPrompt', position='Body'),
  modelId?: string(name='modelId', example='qwen-max
qwen-plus', position='Body'),
  sourceMaterial?: string(name='sourceMaterial', position='Body'),
  writingType?: string(name='writingType', position='Body'),
}

model RunMarketingInformationWritingResponseBody = {
  end?: boolean(name='end', example='2024-06-21T10:29:52+08:00'),
  header?: {
    event?: string(name='event', example='result-generated'),
    eventInfo?: string(name='eventInfo'),
    requestId?: string(name='requestId', example='436BC5AE-0573-59D8-9803-6B5FDCD3BBA1'),
    sessionId?: string(name='sessionId', example='uqubxgqzlnf4exfektij032lgb3yvix678p232n56387aqxdo4uutdt9wstqzovvz6j3ho7wnbgye785u79yn5q3euqmsvzmqdn3nmfq2826oscjvsi43kof8b8uxufpp1x97jjukk6jd3183hy8ni6hqpskuhuascpd'),
    taskId?: string(name='taskId', example='13312125943232'),
    traceId?: string(name='traceId', example='213e20e517049392478441155e8b2a'),
  }(name='header'),
  payload?: {
    output?: {
      text?: string(name='text'),
    }(name='output'),
    usage?: {
      inputTokens?: long(name='inputTokens', example='100'),
      outputTokens?: long(name='outputTokens', example='100'),
      totalTokens?: long(name='totalTokens', example='200'),
    }(name='usage'),
  }(name='payload'),
}

model RunMarketingInformationWritingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunMarketingInformationWritingResponseBody(name='body'),
}

async function runMarketingInformationWriting(request: RunMarketingInformationWritingRequest): RunMarketingInformationWritingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunMarketingInformationWriting', 'POST', '/{workspaceId}/quanmiao/lightapp/runMarketingInformationWriting', 'json', true, 'form', request);
}

async function runMarketingInformationWritingWithAsyncResponseHandler(request: RunMarketingInformationWritingRequest, responseHandler: AsyncResponseHandler): RunMarketingInformationWritingResponse {
  @handler.validateRequestModel(request);
  return @handler.doResponseHandler('RESTFUL', 'RunMarketingInformationWriting', 'POST', '/{workspaceId}/quanmiao/lightapp/runMarketingInformationWriting', 'json', true, 'form', request, responseHandler);
}

function runMarketingInformationWritingWithResponseIterable(request: RunMarketingInformationWritingRequest): iterator[RunMarketingInformationWritingResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunMarketingInformationWriting', 'POST', '/{workspaceId}/quanmiao/lightapp/runMarketingInformationWriting', 'json', true, 'form', request);
}

model RunScriptContinueRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', example='llm-e9zzbkg0aj2mlXX', position='Path'),
  scriptSummary?: string(name='scriptSummary', example='一队全副武装的执法人员和消防员闯入了一间明显已被遗弃多日、门窗紧闭并用胶带封死的公寓，面对着屋内令人作呕的恶臭和门厅里的混乱场面，他们似乎在寻找某种隐藏的真相或危险源，而一封日期为16号的信件成为了揭开谜团的关键线索，随着便衣探员深入探索，一系列封闭的房间暗示着这里曾发生过不为人知的秘密事件。', maxLength=5000, position='Body'),
  scriptTypeKeyword?: string(name='scriptTypeKeyword', example='悬疑，都市，惊悚', maxLength=5000, position='Body'),
  userProvidedContent: string(name='userProvidedContent', example='门厅一片狼藉。朝向天井的窗户开着。公寓门突然被撞开了。\\n一名便衣探员、两名穿制服的警察和几位消防员———也身着工作服———进来，四下张望。他们都戴着手套以及盖住口鼻的面罩。在他们身后，门房和他妻子也挤进门厅。他们都捂着鼻子。门房的另一只手里拿着一叠信件和促销广告单。他们身后，跟着一位女邻居。\\n便衣探员（对门房和邻居）：请在外面等候。\\n他向一名警察示意，警察正忙着把好奇的旁观者请出门外。\\n警察（对门房，指着那一叠信件）：最近的一封是哪天的？\\n门房（查对信件）：最近的一封似乎是16号的......等一下......\\n便衣探员想打开左侧的门，却是徒劳。门用胶带封上了。\\n便衣探员（对消防员）：你来试一下好吗？\\n消防员摆弄门的时候，便衣探员进了卧室隔壁的餐厅。他迅速打开窗，转身，想经过对开门进左侧的房间。这两扇门也锁着，门缝被贴上了胶带。他右转进入起居室，也打开了窗户', maxLength=5000, position='Body'),
}

model RunScriptContinueResponseBody = {
  end?: boolean(name='end'),
  header?: {
    errorCode?: string(name='errorCode', example='403'),
    errorMessage?: string(name='errorMessage', example='Pop sign mismatch, please check.'),
    event?: string(name='event', example='result-generated'),
    eventInfo?: string(name='eventInfo', example='模型生成事件'),
    requestId?: string(name='requestId', example='0EB27AE3-CA53-5FAE-83C6-EE66CA4DF5DF'),
    sessionId?: string(name='sessionId', example='3cd10828-0e42-471c-8f1a-931cde20b035'),
    taskId?: string(name='taskId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
    traceId?: string(name='traceId', example='2150451a17191950923411783e2927'),
  }(name='header'),
  payload?: {
    output?: {
      text?: string(name='text', example='这是测试输出'),
    }(name='output'),
    usage?: {
      inputTokens?: long(name='inputTokens', example='100'),
      outputTokens?: long(name='outputTokens', example='100'),
      totalTokens?: long(name='totalTokens', example='200'),
    }(name='usage'),
  }(name='payload'),
}

model RunScriptContinueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunScriptContinueResponseBody(name='body'),
}

async function runScriptContinue(request: RunScriptContinueRequest): RunScriptContinueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunScriptContinue', 'POST', '/{workspaceId}/quanmiao/lightapp/runScriptContinue', 'json', true, 'form', request);
}

async function runScriptContinueWithAsyncResponseHandler(request: RunScriptContinueRequest, responseHandler: AsyncResponseHandler): RunScriptContinueResponse {
  @handler.validateRequestModel(request);
  return @handler.doResponseHandler('RESTFUL', 'RunScriptContinue', 'POST', '/{workspaceId}/quanmiao/lightapp/runScriptContinue', 'json', true, 'form', request, responseHandler);
}

function runScriptContinueWithResponseIterable(request: RunScriptContinueRequest): iterator[RunScriptContinueResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunScriptContinue', 'POST', '/{workspaceId}/quanmiao/lightapp/runScriptContinue', 'json', true, 'form', request);
}

model RunScriptPlanningRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', example='llm-e9zzbkg0aj2mlXX', position='Path'),
  additionalNote?: string(name='additionalNote', example='故事尽可能狗血', maxLength=5000, position='Body'),
  dialogueInScene?: boolean(name='dialogueInScene', position='Body'),
  plotConflict?: boolean(name='plotConflict', position='Body'),
  scriptName?: string(name='scriptName', example='都市战神', maxLength=5000, position='Body'),
  scriptShotCount?: int32(name='scriptShotCount', example='3', minimum=1, maximum=10, position='Body'),
  scriptSummary: string(name='scriptSummary', example='在一个宁静的小镇上，每个家庭都在同一天收到一个神秘的、没有标记的包裹。', maxLength=5000, position='Body'),
  scriptTypeKeyword?: string(name='scriptTypeKeyword', example='现代，都市，爱情，玄幻', maxLength=5000, position='Body'),
}

model RunScriptPlanningResponseBody = {
  end?: boolean(name='end'),
  header?: {
    errorCode?: string(name='errorCode', example='403'),
    errorMessage?: string(name='errorMessage', example='Pop sign mismatch, please check.'),
    event?: string(name='event', example='result-generated'),
    eventInfo?: string(name='eventInfo', example='模型生成事件'),
    requestId?: string(name='requestId', example='0EB27AE3-CA53-5FAE-83C6-EE66CA4DF5DF'),
    sessionId?: string(name='sessionId', example='3cd10828-0e42-471c-8f1a-931cde20b035'),
    taskId?: string(name='taskId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
    traceId?: string(name='traceId', example='2150451a17191950923411783e2927'),
  }(name='header'),
  payload?: {
    output?: {
      text?: string(name='text', example='这是测试输出'),
    }(name='output'),
    usage?: {
      inputTokens?: long(name='inputTokens', example='100'),
      outputTokens?: long(name='outputTokens', example='100'),
      totalTokens?: long(name='totalTokens', example='200'),
    }(name='usage'),
  }(name='payload'),
}

model RunScriptPlanningResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunScriptPlanningResponseBody(name='body'),
}

async function runScriptPlanning(request: RunScriptPlanningRequest): RunScriptPlanningResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunScriptPlanning', 'POST', '/{workspaceId}/quanmiao/lightapp/runScriptPlanning', 'json', true, 'form', request);
}

async function runScriptPlanningWithAsyncResponseHandler(request: RunScriptPlanningRequest, responseHandler: AsyncResponseHandler): RunScriptPlanningResponse {
  @handler.validateRequestModel(request);
  return @handler.doResponseHandler('RESTFUL', 'RunScriptPlanning', 'POST', '/{workspaceId}/quanmiao/lightapp/runScriptPlanning', 'json', true, 'form', request, responseHandler);
}

function runScriptPlanningWithResponseIterable(request: RunScriptPlanningRequest): iterator[RunScriptPlanningResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunScriptPlanning', 'POST', '/{workspaceId}/quanmiao/lightapp/runScriptPlanning', 'json', true, 'form', request);
}

model RunStyleWritingRequest {
  workspaceId: string(name='workspaceId', example='llm-2setzb9xb8mx', position='Path'),
  regionId?: string(name='regionId', position='Host'),
  learningSamples: [ string ](name='learningSamples', shrink='json', position='Body'),
  referenceMaterials: [ string ](name='referenceMaterials', shrink='json', position='Body'),
  styleFeature?: string(name='styleFeature', maxLength=1000, position='Body'),
  writingTheme: string(name='writingTheme', maxLength=1000, position='Body'),
}

model RunStyleWritingResponseBody = {
  end?: boolean(name='end', example='true'),
  header?: {
    errorCode?: string(name='errorCode', example='403'),
    errorMessage?: string(name='errorMessage', example='Pop sign mismatch, please check log.'),
    event?: string(name='event', example='task-progress-start-generating'),
    eventInfo?: string(name='eventInfo'),
    requestId?: string(name='requestId', example='0EB27AE3-CA53-5FAE-83C6-EE66CA4DF5DF'),
    sessionId?: string(name='sessionId', example='3cd10828-0e42-471c-8f1a-931cde20b035'),
    taskId?: string(name='taskId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
    traceId?: string(name='traceId', example='2150451a17191950923411783e2927'),
  }(name='header', example='{"event":"task-progress-start-generating","sessionId":"3cd10828-0e42-471c-8f1a-931cde20b035","taskId":"d3be9981-ca2d-4e17-bf31-1c0a628e9f99","traceId":"66bef4a7f5d61ff3c43f3b710574e175"}'),
  payload?: {
    output?: {
      text?: string(name='text'),
    }(name='output'),
    usage?: {
      inputTokens?: long(name='inputTokens', example='100'),
      outputTokens?: long(name='outputTokens', example='100'),
      totalTokens?: long(name='totalTokens', example='200'),
    }(name='usage', example='{
        "inputTokens": 1816,
        "outputTokens": 96,
        "totalTokens": 1912
    }'),
  }(name='payload'),
}

model RunStyleWritingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunStyleWritingResponseBody(name='body'),
}

async function runStyleWriting(request: RunStyleWritingRequest): RunStyleWritingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunStyleWriting', 'POST', '/{workspaceId}/quanmiao/lightapp/runStyleWriting', 'json', true, 'form', request);
}

async function runStyleWritingWithAsyncResponseHandler(request: RunStyleWritingRequest, responseHandler: AsyncResponseHandler): RunStyleWritingResponse {
  @handler.validateRequestModel(request);
  return @handler.doResponseHandler('RESTFUL', 'RunStyleWriting', 'POST', '/{workspaceId}/quanmiao/lightapp/runStyleWriting', 'json', true, 'form', request, responseHandler);
}

function runStyleWritingWithResponseIterable(request: RunStyleWritingRequest): iterator[RunStyleWritingResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunStyleWriting', 'POST', '/{workspaceId}/quanmiao/lightapp/runStyleWriting', 'json', true, 'form', request);
}

model RunVideoAnalysisRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', example='llm-xxx', position='Path'),
  generateOptions?: [ string ](name='generateOptions', shrink='json', position='Body'),
  modelCustomPromptTemplate?: string(name='modelCustomPromptTemplate', position='Body'),
  modelCustomPromptTemplateId?: string(name='modelCustomPromptTemplateId', example='PlotDetail', position='Body'),
  modelId?: string(name='modelId', example='qwen-max', position='Body'),
  originalSessionId?: string(name='originalSessionId', example='a3d1c2ac-f086-4a21-9069-f5631542f5ax', position='Body'),
  snapshotInterval?: double(name='snapshotInterval', position='Body'),
  taskId?: string(name='taskId', example='a3d1c2ac-f086-4a21-9069-f5631542f5a2', position='Body'),
  videoExtraInfo?: string(name='videoExtraInfo', position='Body'),
  videoModelCustomPromptTemplate?: string(name='videoModelCustomPromptTemplate', position='Body'),
  videoModelId?: string(name='videoModelId', example='qwen-vl-max', position='Body'),
  videoUrl?: string(name='videoUrl', example='http://xxxx.mp4', position='Body'),
}

model RunVideoAnalysisResponseBody = {
  header?: {
    errorCode?: string(name='errorCode', example='InvalidParam'),
    errorMessage?: string(name='errorMessage', example='Pop sign mismatch, please check log.'),
    event?: string(name='event', example='task-progress-start-generating'),
    eventInfo?: string(name='eventInfo'),
    sessionId?: string(name='sessionId', example='xxx'),
    taskId?: string(name='taskId', example='xxx'),
    traceId?: string(name='traceId', example='2150432017236011824686132ecdbc'),
  }(name='header'),
  payload?: {
    output?: {
      videoAnalysisResult?: {
        generateFinished?: boolean(name='generateFinished', example='true'),
        text?: string(name='text'),
        usage?: {
          inputTokens?: long(name='inputTokens', example='1'),
          outputTokens?: long(name='outputTokens', example='1'),
          totalTokens?: long(name='totalTokens', example='1'),
        }(name='usage'),
        videoShotAnalysisResults?: [ 
          {
            endTime?: long(name='endTime', example='10000'),
            startTime?: long(name='startTime', example='1000'),
            text?: string(name='text'),
          }
        ](name='videoShotAnalysisResults'),
      }(name='videoAnalysisResult'),
      videoCaptionResult?: {
        generateFinished?: boolean(name='generateFinished', example='true'),
        videoCaptions?: [ 
          {
            endTime?: long(name='endTime', example='1710432000000'),
            endTimeFormat?: string(name='endTimeFormat', example='00:01'),
            startTime?: long(name='startTime', example='0'),
            startTimeFormat?: string(name='startTimeFormat', example='00:01'),
            text?: string(name='text', example='xxx'),
          }
        ](name='videoCaptions'),
      }(name='videoCaptionResult'),
      videoGenerateResult?: {
        generateFinished?: boolean(name='generateFinished', example='true'),
        text?: string(name='text'),
        usage?: {
          inputTokens?: long(name='inputTokens', example='1'),
          outputTokens?: long(name='outputTokens', example='1'),
          totalTokens?: long(name='totalTokens', example='1'),
        }(name='usage'),
      }(name='videoGenerateResult'),
      videoMindMappingGenerateResult?: {
        generateFinished?: boolean(name='generateFinished', example='true'),
        text?: string(name='text'),
        usage?: {
          inputTokens?: long(name='inputTokens', example='1'),
          outputTokens?: long(name='outputTokens', example='1'),
          totalTokens?: long(name='totalTokens', example='1'),
        }(name='usage'),
        videoMindMappings?: [ 
          {
            childNodes?: [ 
              {
                childNodes?: [ 
                  {
                    name?: string(name='name'),
                  }
                ](name='childNodes'),
                name?: string(name='name'),
              }
            ](name='childNodes'),
            name?: string(name='name'),
          }
        ](name='videoMindMappings'),
      }(name='videoMindMappingGenerateResult'),
      videoTitleGenerateResult?: {
        generateFinished?: boolean(name='generateFinished', example='true'),
        text?: string(name='text'),
        usage?: {
          inputTokens?: long(name='inputTokens', example='1'),
          outputTokens?: long(name='outputTokens', example='1'),
          totalTokens?: long(name='totalTokens', example='2'),
        }(name='usage'),
      }(name='videoTitleGenerateResult'),
    }(name='output'),
    usage?: {
      inputTokens?: long(name='inputTokens'),
      outputTokens?: long(name='outputTokens'),
      totalTokens?: long(name='totalTokens'),
    }(name='usage'),
  }(name='payload'),
  requestId?: string(name='requestId', example='117F5ABE-CF02-5502-9A3F-E56BC9081A64'),
}

model RunVideoAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunVideoAnalysisResponseBody(name='body'),
}

async function runVideoAnalysis(request: RunVideoAnalysisRequest): RunVideoAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunVideoAnalysis', 'POST', '/{workspaceId}/quanmiao/lightapp/runVideoAnalysis', 'json', true, 'form', request);
}

async function runVideoAnalysisWithAsyncResponseHandler(request: RunVideoAnalysisRequest, responseHandler: AsyncResponseHandler): RunVideoAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.doResponseHandler('RESTFUL', 'RunVideoAnalysis', 'POST', '/{workspaceId}/quanmiao/lightapp/runVideoAnalysis', 'json', true, 'form', request, responseHandler);
}

function runVideoAnalysisWithResponseIterable(request: RunVideoAnalysisRequest): iterator[RunVideoAnalysisResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunVideoAnalysis', 'POST', '/{workspaceId}/quanmiao/lightapp/runVideoAnalysis', 'json', true, 'form', request);
}

