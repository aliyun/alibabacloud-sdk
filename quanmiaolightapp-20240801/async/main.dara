/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'QuanMiaoLightApp';
  @version = '2024-08-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CancelAsyncTaskRequest {
  workspaceId?: string(name='workspaceId', example='llm-xxxxxxx', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  taskId?: string(name='taskId', example='a3d1c2ac-f086-4a21-9069-f5631542f5a2', position='Body'),
}

model CancelAsyncTaskResponseBody = {
  code?: string(name='code', example='NoPermission'),
  data?: boolean(name='data', example='true'),
  httpStatusCode?: int32(name='httpStatusCode', example='403'),
  message?: string(name='message'),
  requestId?: string(name='requestId', description='Id of the request', example='117F5ABE-CF02-5502-9A3F-E56BC9081A64'),
  success?: boolean(name='success', example='false'),
}

model CancelAsyncTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelAsyncTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelAsyncTask  CancelAsyncTaskRequest
  * @return CancelAsyncTaskResponse
 */
async function cancelAsyncTask(request: CancelAsyncTaskRequest): CancelAsyncTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelAsyncTask', 'POST', '/{workspaceId}/quanmiao/lightapp/cancelAsyncTask', 'json', true, 'form', request);
}

model ExportAnalysisTagDetailByTaskIdRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId?: string(name='workspaceId', example='llm-xxxxxxxx', position='Path'),
  categories?: [ string ](name='categories', shrink='json', position='Body'),
  category?: string(name='category', position='Body'),
  taskId: string(name='taskId', description='This parameter is required.', example='a3d1c2ac-f086-4a21-9069-f5631542f5a2', position='Body'),
}

model ExportAnalysisTagDetailByTaskIdResponseBody = {
  code?: string(name='code', example='xx'),
  data?: string(name='data', example='http://www.example.com/xxxx.xlsx'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message', example='ok'),
  requestId?: string(name='requestId', description='Id of the request', example='085BE2D2-BB7E-59A6-B688-F2CB32124E7F'),
}

model ExportAnalysisTagDetailByTaskIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportAnalysisTagDetailByTaskIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExportAnalysisTagDetailByTaskId  ExportAnalysisTagDetailByTaskIdRequest
  * @return ExportAnalysisTagDetailByTaskIdResponse
 */
async function exportAnalysisTagDetailByTaskId(request: ExportAnalysisTagDetailByTaskIdRequest): ExportAnalysisTagDetailByTaskIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExportAnalysisTagDetailByTaskId', 'POST', '/{workspaceId}/quanmiao/lightapp/exportAnalysisTagDetailByTaskId', 'json', true, 'form', request);
}

model GenerateBroadcastNewsRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-xxx', position='Path'),
  prompt: string(name='prompt', description='This parameter is required.', position='Body'),
}

model GenerateBroadcastNewsResponseBody = {
  code?: string(name='code', example='xx'),
  data?: {
    hotTopicSummaries?: [ 
      {
        category?: string(name='category'),
        hotTopic?: string(name='hotTopic'),
        hotTopicVersion?: string(name='hotTopicVersion', example='2024-09-13_08'),
        hotValue?: double(name='hotValue', example='1000000'),
        id?: string(name='id', example='1458tb3bjo7531kap42a'),
        images?: [ 
          {
            url?: string(name='url', example='http://xxx.com/xxx.jpeg'),
          }
        ](name='images'),
        textSummary?: string(name='textSummary', example='xxx'),
      }
    ](name='hotTopicSummaries'),
    sessionId?: string(name='sessionId', example='2bb0ea82dafd48a8817fadc4c90e2b52'),
    taskId?: string(name='taskId', example='3feb69ed02d9b1a17d0f1a942675d300'),
    text?: string(name='text'),
    usage?: {
      inputTokens?: long(name='inputTokens', example='1'),
      outputTokens?: long(name='outputTokens', example='2'),
      totalTokens?: long(name='totalTokens', example='3'),
    }(name='usage'),
  }(name='data'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='117F5ABE-CF02-5502-9A3F-E56BC9081A64'),
  success?: boolean(name='success', example='True'),
}

model GenerateBroadcastNewsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateBroadcastNewsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenerateBroadcastNews  GenerateBroadcastNewsRequest
  * @return GenerateBroadcastNewsResponse
 */
async function generateBroadcastNews(request: GenerateBroadcastNewsRequest): GenerateBroadcastNewsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GenerateBroadcastNews', 'POST', '/{workspaceId}/quanmiao/lightapp/GenerateBroadcastNews', 'json', true, 'form', request);
}

model GenerateOutputFormatRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-xxxxxxx', position='Path'),
  businessType?: string(name='businessType', example='clueMining', position='Body'),
  content?: string(name='content', example='待分析文本', position='Body'),
  extraInfo?: string(name='extraInfo', example='额外信息', position='Body'),
  tags: [ 
    {
      tagDefinePrompt?: string(name='tagDefinePrompt', example='xxxx'),
      tagName?: string(name='tagName', example='xxxx'),
    }
  ](name='tags', description='This parameter is required.', shrink='json', position='Body'),
  taskDescription?: string(name='taskDescription', example='给你一条待分析文本数据，请你按照标签体系来对数据进行打标。', position='Body'),
}

model GenerateOutputFormatResponseBody = {
  code?: string(name='code', example='successful'),
  data?: {
    outputFormat?: string(name='outputFormat'),
  }(name='data'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message', example='ok'),
  requestId?: string(name='requestId', description='Id of the request', example='117F5ABE-CF02-5502-9A3F-E56BC9081A64'),
  success?: boolean(name='success', example='True'),
}

model GenerateOutputFormatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateOutputFormatResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenerateOutputFormat  GenerateOutputFormatRequest
  * @return GenerateOutputFormatResponse
 */
async function generateOutputFormat(request: GenerateOutputFormatRequest): GenerateOutputFormatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GenerateOutputFormat', 'POST', '/{workspaceId}/quanmiao/lightapp/generateOutputFormat', 'json', true, 'form', request);
}

model GetEnterpriseVocAnalysisTaskRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId?: string(name='workspaceId', example='llm-xxx', position='Path'),
  taskId?: string(name='taskId', example='a3d1c2ac-f086-4a21-9069-f5631542f5a2', position='Query'),
}

model GetEnterpriseVocAnalysisTaskResponseBody = {
  code?: string(name='code', example='NoPermission'),
  data?: {
    errorMessage?: string(name='errorMessage'),
    modelId?: string(name='modelId', example='qwen-max'),
    modelName?: string(name='modelName'),
    statisticsOverview?: {
      count?: int32(name='count', example='17'),
      filterDimensionStatistics?: {
        tagValueCountStatistic?: [ 
          {
            tagName?: string(name='tagName'),
            valueCount?: int32(name='valueCount', example='10'),
          }
        ](name='tagValueCountStatistic'),
      }(name='filterDimensionStatistics'),
      tagDimensionStatistics?: {
        tagValueCountStatistic?: [ 
          {
            tagName?: string(name='tagName'),
            valueCount?: int32(name='valueCount', example='10'),
          }
        ](name='tagValueCountStatistic'),
      }(name='tagDimensionStatistics'),
    }(name='statisticsOverview'),
    status?: string(name='status', example='PENDING'),
    usage?: {
      inputTokens?: int32(name='inputTokens', example='1'),
      outputTokens?: int32(name='outputTokens', example='2'),
    }(name='usage'),
  }(name='data'),
  httpStatusCode?: int32(name='httpStatusCode', example='403'),
  message?: string(name='message'),
  requestId?: string(name='requestId', description='Id of the request', example='117F5ABE-CF02-5502-9A3F-E56BC9081A64'),
  success?: boolean(name='success', example='false'),
}

model GetEnterpriseVocAnalysisTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEnterpriseVocAnalysisTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetEnterpriseVocAnalysisTask  GetEnterpriseVocAnalysisTaskRequest
  * @return GetEnterpriseVocAnalysisTaskResponse
 */
async function getEnterpriseVocAnalysisTask(request: GetEnterpriseVocAnalysisTaskRequest): GetEnterpriseVocAnalysisTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetEnterpriseVocAnalysisTask', 'GET', '/{workspaceId}/quanmiao/lightapp/getEnterpriseVocAnalysisTask', 'json', false, 'json', request);
}

model GetTagMiningAnalysisTaskRequest {
  workspaceId?: string(name='workspaceId', description='workspaceId', example='llm-xx', position='Path'),
  regionId?: string(name='regionId', position='Host'),
  taskId?: string(name='taskId', example='a3d1c2ac-f086-4a21-9069-f5631542f5a2', position='Query'),
}

model GetTagMiningAnalysisTaskResponseBody = {
  code?: string(name='code', example='successful'),
  data?: {
    errorCode?: string(name='errorCode'),
    errorMessage?: string(name='errorMessage'),
    results?: [ 
      {
        customId?: string(name='customId', example='1'),
        header?: {
          errorCode?: string(name='errorCode', example='DataNotExists'),
          errorMessage?: string(name='errorMessage'),
          event?: string(name='event', example='task-finished'),
          requestId?: string(name='requestId', example='085BE2D2-BB7E-59A6-B688-F2CB32124E7F'),
        }(name='header'),
        payload?: {
          output?: {
            text?: string(name='text', example='xxxx'),
          }(name='output'),
          usage?: {
            inputToken?: long(name='inputToken', example='100'),
            outputToken?: long(name='outputToken', example='200'),
            totalToken?: long(name='totalToken', example='300'),
          }(name='usage'),
        }(name='payload'),
      }
    ](name='results'),
    status?: string(name='status', example='RUNNIN'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='DataNotExists'),
  requestId?: string(name='requestId', description='requestId', example='085BE2D2-BB7E-59A6-B688-F2CB32124E7F'),
  success?: boolean(name='success', example='true'),
}

model GetTagMiningAnalysisTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTagMiningAnalysisTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTagMiningAnalysisTask  GetTagMiningAnalysisTaskRequest
  * @return GetTagMiningAnalysisTaskResponse
 */
async function getTagMiningAnalysisTask(request: GetTagMiningAnalysisTaskRequest): GetTagMiningAnalysisTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTagMiningAnalysisTask', 'GET', '/{workspaceId}/quanmiao/lightapp/getTagMiningAnalysisTask', 'json', false, 'json', request);
}

model GetVideoAnalysisConfigRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-xx', position='Path'),
}

model GetVideoAnalysisConfigResponseBody = {
  code?: string(name='code', example='xx'),
  data?: {
    asyncConcurrency?: int32(name='asyncConcurrency', example='2'),
  }(name='data'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message', example='ok'),
  requestId?: string(name='requestId', description='Id of the request', example='085BE2D2-BB7E-59A6-B688-F2CB32124E7F'),
  success?: boolean(name='success', example='True'),
}

model GetVideoAnalysisConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVideoAnalysisConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetVideoAnalysisConfig  GetVideoAnalysisConfigRequest
  * @return GetVideoAnalysisConfigResponse
 */
async function getVideoAnalysisConfig(request: GetVideoAnalysisConfigRequest): GetVideoAnalysisConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetVideoAnalysisConfig', 'GET', '/{workspaceId}/quanmiao/lightapp/videoAnalysis/getVideoAnalysisConfig', 'json', false, 'json', request);
}

model GetVideoAnalysisTaskRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-xxxx', position='Path'),
  taskId: string(name='taskId', description='This parameter is required.', example='a3d1c2ac-f086-4a21-9069-f5631542f5a2', position='Query'),
}

model GetVideoAnalysisTaskResponseBody = {
  code?: string(name='code', example='successful'),
  data?: {
    errorMessage?: string(name='errorMessage', example='Access was denied, message: No such namespace namespaces/mjp-test-default.'),
    header?: {
      errorCode?: string(name='errorCode', example='success'),
      errorMessage?: string(name='errorMessage', example='Deduct task already success,Please do not resubmit.token \\"369e8f2c-d283-424a-96c4-c83efe08c89e\\"'),
      event?: string(name='event', example='TIMEOUT_CLOSE_ORDER'),
      eventInfo?: string(name='eventInfo', example='xxx'),
      sessionId?: string(name='sessionId', example='d5c38cf6-a4bf-4a57-a697-9f449926f0c9'),
      taskId?: string(name='taskId', example='6e223291-729b-4e84-9271-c13ada1a776b'),
      traceId?: string(name='traceId', example='215045f817272303448235204efdef'),
    }(name='header'),
    payload?: {
      output?: {
        resultJsonFileUrl?: string(name='resultJsonFileUrl'),
        videoAnalysisResult?: {
          generateFinished?: boolean(name='generateFinished', example='true'),
          text?: string(name='text', example='xxx'),
          usage?: {
            inputTokens?: long(name='inputTokens', example='0'),
            outputTokens?: long(name='outputTokens', example='0'),
            totalTokens?: long(name='totalTokens', example='0'),
          }(name='usage'),
          videoShotAnalysisResults?: [ 
            {
              endTime?: long(name='endTime', example='1710432000000'),
              startTime?: long(name='startTime', example='2024-10-05 06:22:00'),
              text?: string(name='text'),
            }
          ](name='videoShotAnalysisResults'),
        }(name='videoAnalysisResult'),
        videoCaptionResult?: {
          generateFinished?: boolean(name='generateFinished', example='true'),
          videoCaptions?: [ 
            {
              endTime?: long(name='endTime', example='1736129678000'),
              endTimeFormat?: string(name='endTimeFormat', example='00:01'),
              speaker?: string(name='speaker', example='张三'),
              startTime?: long(name='startTime', example='00:01'),
              startTimeFormat?: string(name='startTimeFormat', example='2025-01-07 11:52:06'),
              text?: string(name='text', example='xxxx'),
            }
          ](name='videoCaptions'),
        }(name='videoCaptionResult'),
        videoGenerateResult?: {
          generateFinished?: boolean(name='generateFinished', example='true'),
          index?: int32(name='index'),
          modelId?: string(name='modelId'),
          modelReduce?: boolean(name='modelReduce'),
          reasonText?: string(name='reasonText'),
          text?: string(name='text', example='xxx'),
          usage?: {
            inputTokens?: long(name='inputTokens', example='1'),
            outputTokens?: long(name='outputTokens', example='1'),
            totalTokens?: long(name='totalTokens', example='2'),
          }(name='usage'),
        }(name='videoGenerateResult'),
        videoGenerateResults?: [ 
          {
            generateFinished?: boolean(name='generateFinished'),
            index?: int32(name='index'),
            modelId?: string(name='modelId'),
            reasonText?: string(name='reasonText'),
            text?: string(name='text'),
            usage?: {
              inputTokens?: long(name='inputTokens'),
              outputTokens?: long(name='outputTokens'),
              totalTokens?: long(name='totalTokens'),
            }(name='usage'),
          }
        ](name='videoGenerateResults'),
        videoMindMappingGenerateResult?: {
          generateFinished?: boolean(name='generateFinished', example='true'),
          text?: string(name='text'),
          usage?: {
            inputTokens?: long(name='inputTokens', example='1'),
            outputTokens?: long(name='outputTokens', example='1'),
            totalTokens?: long(name='totalTokens', example='2'),
          }(name='usage'),
          videoMindMappings?: [ 
            {
              childNodes?: [ 
                {
                  childNodes?: [ 
                    {
                      name?: string(name='name'),
                    }
                  ](name='childNodes'),
                  name?: string(name='name'),
                }
              ](name='childNodes'),
              name?: string(name='name'),
            }
          ](name='videoMindMappings'),
        }(name='videoMindMappingGenerateResult'),
        videoTitleGenerateResult?: {
          generateFinished?: boolean(name='generateFinished', example='true'),
          text?: string(name='text', example='xxxx'),
          usage?: {
            inputTokens?: long(name='inputTokens', example='0'),
            outputTokens?: long(name='outputTokens', example='0'),
            totalTokens?: long(name='totalTokens', example='0'),
          }(name='usage'),
        }(name='videoTitleGenerateResult'),
      }(name='output'),
      usage?: {
        inputTokens?: long(name='inputTokens', example='0'),
        outputTokens?: long(name='outputTokens', example='0'),
        totalTokens?: long(name='totalTokens', example='0'),
      }(name='usage'),
    }(name='payload'),
    taskId?: string(name='taskId', example='3feb69ed02d9b1a17d0f1a942675d300'),
    taskRunInfo?: {
      concurrentChargeEnable?: boolean(name='concurrentChargeEnable', example='true'),
      responseTime?: long(name='responseTime', example='1'),
    }(name='taskRunInfo'),
    taskStatus?: string(name='taskStatus', example='SUCCESSED'),
  }(name='data'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', description='Id of the request', example='5D0E915E-655D-59A8-894F-93873F73AAE5'),
  success?: boolean(name='success', example='True'),
}

model GetVideoAnalysisTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVideoAnalysisTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetVideoAnalysisTask  GetVideoAnalysisTaskRequest
  * @return GetVideoAnalysisTaskResponse
 */
async function getVideoAnalysisTask(request: GetVideoAnalysisTaskRequest): GetVideoAnalysisTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetVideoAnalysisTask', 'GET', '/{workspaceId}/quanmiao/lightapp/videoAnalysis/getVideoAnalysisTask', 'json', false, 'json', request);
}

model HotNewsRecommendRequest {
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-xxx', position='Path'),
  prompt?: string(name='prompt', position='Body'),
}

model HotNewsRecommendResponseBody = {
  code?: string(name='code', example='200'),
  data?: {
    news?: [ 
      {
        content?: string(name='content', example='xx'),
        imageUrls?: [ string ](name='imageUrls'),
        pubTime?: string(name='pubTime', example='2024-09-10 15:32:00'),
        searchSource?: string(name='searchSource'),
        source?: string(name='source'),
        title?: string(name='title', example='xx'),
        url?: string(name='url', example='http://xxx'),
      }
    ](name='news'),
  }(name='data'),
  message?: string(name='message', example='ok'),
  requestId?: string(name='requestId', example='575D5893-01DB-5C81-A899-74F67616762A'),
  success?: boolean(name='success', example='True'),
}

model HotNewsRecommendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HotNewsRecommendResponseBody(name='body'),
}

/**
  * @param request  the request parameters of HotNewsRecommend  HotNewsRecommendRequest
  * @return HotNewsRecommendResponse
 */
async function hotNewsRecommend(request: HotNewsRecommendRequest): HotNewsRecommendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'HotNewsRecommend', 'POST', '/{workspaceId}/quanmiao/lightapp/hotNewsRecommend', 'json', true, 'form', request);
}

model ListAnalysisTagDetailByTaskIdRequest {
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-xxx', position='Path'),
  regionId?: string(name='regionId', position='Host'),
  maxResults?: int32(name='maxResults', example='20', position='Query'),
  nextToken?: string(name='nextToken', example='JlroP3CjgQh5PQDlH3ArzADkBTPZgVqo+64jhZRglNq0mEYoV5SlGb/Juvo8CdfYE9rlwEr2pIJQwdaYotak9g==', position='Query'),
  taskId: string(name='taskId', description='This parameter is required.', example='a3d1c2ac-f086-4a21-9069-f5631542f5a2', position='Query'),
}

model ListAnalysisTagDetailByTaskIdResponseBody = {
  code?: string(name='code', example='DataNotExists'),
  data?: [ 
    {
      content?: string(name='content', example='xxxx'),
      contentTags?: [ 
        {
          tagName?: string(name='tagName'),
          tags?: [ string ](name='tags'),
        }
      ](name='contentTags'),
      originResponse?: string(name='originResponse'),
      sourceList?: [ string ](name='sourceList'),
    }
  ](name='data'),
  maxResults?: int32(name='maxResults', example='100'),
  message?: string(name='message', example='成功'),
  nextToken: string(name='nextToken', description='This parameter is required.', example='xxxxx'),
  requestId?: string(name='requestId', description='Id of the request', example='xxxxxxx'),
  success?: boolean(name='success', example='false'),
  totalCount?: int32(name='totalCount', example='200'),
}

model ListAnalysisTagDetailByTaskIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAnalysisTagDetailByTaskIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAnalysisTagDetailByTaskId  ListAnalysisTagDetailByTaskIdRequest
  * @return ListAnalysisTagDetailByTaskIdResponse
 */
async function listAnalysisTagDetailByTaskId(request: ListAnalysisTagDetailByTaskIdRequest): ListAnalysisTagDetailByTaskIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAnalysisTagDetailByTaskId', 'GET', '/{workspaceId}/quanmiao/lightapp/listAnalysisTagDetailByTaskId', 'json', false, 'json', request);
}

model ListHotTopicSummariesRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-xxx', position='Path'),
  category?: string(name='category', example='xx', position='Body'),
  hotTopic?: string(name='hotTopic', example='xx', position='Body'),
  hotTopicVersion?: string(name='hotTopicVersion', example='2024-09-13_12', position='Body'),
  maxResults?: int32(name='maxResults', example='20', minimum=0, maximum=1000, position='Body'),
  nextToken?: string(name='nextToken', example='JlroP3CjgQh5PQDlH3ArzADkBTPZgVqo+64jhZRglNq0mEYoV5SlGb/Juvo8CdfYE9rlwEr2pIJQwdaYotak9g==', position='Body'),
}

model ListHotTopicSummariesResponseBody = {
  code?: string(name='code', example='xx'),
  data?: [ 
    {
      category?: string(name='category'),
      hotTopic?: string(name='hotTopic', example='xx'),
      hotTopicVersion?: string(name='hotTopicVersion', example='2024-09-13_12'),
      hotValue?: double(name='hotValue', example='1000000'),
      id?: string(name='id', example='db5dc5b3d8954a30b65ba700c9dda3bb'),
      news?: [ 
        {
          comments?: [ 
            {
              text?: string(name='text', example='xx'),
            }
          ](name='comments'),
          content?: string(name='content', example='xx'),
          pubTime?: string(name='pubTime', example='2024-09-10 15:32:00'),
          title?: string(name='title', example='xx'),
          url?: string(name='url', description='url', example='http://xxx'),
        }
      ](name='news'),
      summary?: {
        summaries?: [ 
          {
            summary?: string(name='summary', example='xx'),
            title?: string(name='title', example='xx'),
          }
        ](name='summaries'),
      }(name='summary'),
      textSummary?: string(name='textSummary', example='xx'),
    }
  ](name='data'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  maxResults?: int32(name='maxResults', example='20'),
  message?: string(name='message', example='success'),
  nextToken?: string(name='nextToken', example='JlroP3CjgQh5PQDlH3ArzADkBTPZgVqo+64jhZRglNq0mEYoV5SlGb/Juvo8CdfYE9rlwEr2pIJQwdaYotak9g=='),
  requestId?: string(name='requestId', example='117F5ABE-CF02-5502-9A3F-E56BC9081A64'),
  success?: boolean(name='success', example='True'),
  totalCount?: int32(name='totalCount', example='200'),
}

model ListHotTopicSummariesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHotTopicSummariesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListHotTopicSummaries  ListHotTopicSummariesRequest
  * @return ListHotTopicSummariesResponse
 */
async function listHotTopicSummaries(request: ListHotTopicSummariesRequest): ListHotTopicSummariesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListHotTopicSummaries', 'POST', '/{workspaceId}/quanmiao/lightapp/listHotTopicSummaries', 'json', true, 'form', request);
}

model RunEnterpriseVocAnalysisRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-xx', position='Path'),
  akProxy?: string(name='akProxy', position='Body'),
  apiKey?: string(name='apiKey', position='Body'),
  content?: string(name='content', description='需要进行VOC分析的文本内容（content、contents、url、fileKey 四选一。优先级从小到大）', example='这是一段需要分析的文本内容', position='Body'),
  extraInfo?: string(name='extraInfo', position='Body'),
  filterTags?: [ 
    {
      tagDefinePrompt?: string(name='tagDefinePrompt', description='标签定义提示词', example='标签定义提示词'),
      tagName?: string(name='tagName', description='标签名称', example='标签名称'),
    }
  ](name='filterTags', description='过滤标签，用于筛选符合条件的内容。', shrink='json', position='Body'),
  modelId?: string(name='modelId', example='qwen-max', position='Body'),
  outputFormat?: string(name='outputFormat', description='指定返回结果的格式，支持json或text', example='按照如下格式输出：{"text1": "xxxx", "text2": "xxxx"}', position='Body'),
  sourceTrace?: boolean(name='sourceTrace', position='Body'),
  tags?: [ 
    {
      tagDefinePrompt?: string(name='tagDefinePrompt', description='标签定义提示词', example='标签定义提示词'),
      tagName?: string(name='tagName', description='标签名称', example='标签名称'),
    }
  ](name='tags', description='业务标签体系，用于对文本内容进行分类和分析。', shrink='json', position='Body'),
  taskDescription?: string(name='taskDescription', example='你是一名经验丰富的数据分析师，擅长从文本评论中提取结构化信息。你需要从用户评论列表中识别和提取出与以下四个维度相关的关键词和短语：
            
            索引：输入评论JSON数组中的索引（从零开始）表示针对该条索引抽取的维度。
            购买动机：描述用户购买产品的原因、需求或驱动力的关键词或短语。
            未满足需求点：用户在使用产品过程中提到的未满足需求或问题的关键词或短语。
            使用场景：用户提到的具体使用场景、使用方式或环境的关键词或短语。
            正负面观点：明确表示用户对产品或服务的正面或负面看法的关键词或短语。', position='Body'),
}

model RunEnterpriseVocAnalysisResponseBody = {
  header?: {
    errorCode?: string(name='errorCode', example='AccessForbidden'),
    errorMessage?: string(name='errorMessage', example='错误信息'),
    event?: string(name='event', example='task-finished'),
    sessionId?: string(name='sessionId', example='xxxx'),
    taskId?: string(name='taskId', example='xxxx'),
    traceId?: string(name='traceId', example='xxxxx'),
  }(name='header'),
  payload?: {
    output?: {
      filterResult?: {
        filterResults?: [ 
          {
            hit?: boolean(name='hit', example='true'),
            tagName?: string(name='tagName'),
            tagValue?: string(name='tagValue'),
          }
        ](name='filterResults'),
      }(name='filterResult'),
      reasonContent?: string(name='reasonContent'),
      text?: string(name='text'),
    }(name='output'),
    usage?: {
      inputTokens?: long(name='inputTokens', example='100'),
      outputTokens?: long(name='outputTokens', example='100'),
      totalTokens?: long(name='totalTokens', example='200'),
    }(name='usage'),
  }(name='payload'),
  requestId?: string(name='requestId', description='Id of the request', example='49483FFC-0CB9-5163-8D3E-234E276E6DA8'),
}

model RunEnterpriseVocAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunEnterpriseVocAnalysisResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunEnterpriseVocAnalysis  RunEnterpriseVocAnalysisRequest
  * @return RunEnterpriseVocAnalysisResponse
 */
async function runEnterpriseVocAnalysis(request: RunEnterpriseVocAnalysisRequest): RunEnterpriseVocAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunEnterpriseVocAnalysis', 'POST', '/{workspaceId}/quanmiao/lightapp/runEnterpriseVocAnalysis', 'json', true, 'form', request);
}

async function runEnterpriseVocAnalysisWithAsyncResponseHandler(request: RunEnterpriseVocAnalysisRequest, responseHandler: AsyncResponseHandler): RunEnterpriseVocAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.doResponseHandler('RESTFUL', 'RunEnterpriseVocAnalysis', 'POST', '/{workspaceId}/quanmiao/lightapp/runEnterpriseVocAnalysis', 'json', true, 'form', request, responseHandler);
}

function runEnterpriseVocAnalysisWithResponseIterable(request: RunEnterpriseVocAnalysisRequest): iterator[RunEnterpriseVocAnalysisResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunEnterpriseVocAnalysis', 'POST', '/{workspaceId}/quanmiao/lightapp/runEnterpriseVocAnalysis', 'json', true, 'form', request);
}

model RunHotTopicChatRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-xx', position='Path'),
  category?: string(name='category', position='Body'),
  generateOptions?: [ string ](name='generateOptions', shrink='json', position='Body'),
  hotTopicVersion?: string(name='hotTopicVersion', example='2024-09-13_12', position='Body'),
  hotTopics?: [ string ](name='hotTopics', shrink='json', position='Body'),
  imageCount?: int32(name='imageCount', example='1', position='Body'),
  messages?: [ 
    {
      content?: string(name='content', example='xxx'),
      createTime?: string(name='createTime', example='2024-12-10 18:51:29'),
      role?: string(name='role', example='user'),
    }
  ](name='messages', shrink='json', position='Body'),
  modelCustomPromptTemplate?: string(name='modelCustomPromptTemplate', example='xx', position='Body'),
  modelId?: string(name='modelId', example='qwen-max', position='Body'),
  originalSessionId?: string(name='originalSessionId', example='a3d1c2ac-f086-4a21-9069-f5631542f5ax', position='Body'),
  prompt?: string(name='prompt', position='Body'),
  stepForBroadcastContentConfig?: {
    categories?: [ string ](name='categories'),
    customHotValueWeights?: [ 
      {
        dimension?: string(name='dimension', example='comments'),
        weight?: int32(name='weight', example='1'),
      }
    ](name='customHotValueWeights'),
    topicCount?: int32(name='topicCount', example='20'),
  }(name='stepForBroadcastContentConfig', shrink='json', position='Body'),
  taskId?: string(name='taskId', example='a3d1c2ac-f086-4a21-9069-f5631542f5a2', position='Body'),
}

model RunHotTopicChatResponseBody = {
  header?: {
    errorCode?: string(name='errorCode', example='InvalidParam'),
    errorMessage?: string(name='errorMessage', example='xx'),
    event?: string(name='event', example='task-finished'),
    eventInfo?: string(name='eventInfo', example='xx'),
    sessionId?: string(name='sessionId', example='xxx'),
    taskId?: string(name='taskId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
    traceId?: string(name='traceId', example='2150451a17191950923411783e2927'),
  }(name='header'),
  payload?: {
    output?: {
      articles?: [ 
        {
          content?: string(name='content', example='xxx'),
          pubTime?: string(name='pubTime', example='2024-09-22 16:45:06'),
          score?: double(name='score'),
          searchSourceName?: string(name='searchSourceName'),
          select?: boolean(name='select'),
          summary?: string(name='summary', example='xx'),
          title?: string(name='title', example='test'),
          url?: string(name='url', example='http://xxx'),
        }
      ](name='articles'),
      category?: string(name='category'),
      hotTopicSummaries?: [ 
        {
          customHotValue?: double(name='customHotValue', example='100000'),
          customTextSummary?: string(name='customTextSummary', example='xxx'),
          hotTopic?: string(name='hotTopic', example='xx'),
          hotTopicVersion?: string(name='hotTopicVersion', example='2024-09-13_08'),
          hotValue?: double(name='hotValue', example='100000'),
          images?: [ 
            {
              url?: string(name='url', example='http://xxx'),
            }
          ](name='images'),
          news?: [ 
            {
              title?: string(name='title', example='xxx'),
              url?: string(name='url', example='http://xxx'),
            }
          ](name='news'),
          pubTime?: string(name='pubTime'),
          textSummary?: string(name='textSummary', example='xxx'),
          url?: string(name='url'),
        }
      ](name='hotTopicSummaries'),
      keyword?: string(name='keyword'),
      location?: string(name='location'),
      multimodalMedias?: [ 
        {
          fileUrl?: string(name='fileUrl', example='http://xxxx'),
          mediaType?: string(name='mediaType', example='image'),
          sortScore?: double(name='sortScore'),
        }
      ](name='multimodalMedias'),
      recommendQueries?: [ string ](name='recommendQueries'),
      searchQuery?: string(name='searchQuery'),
      text?: string(name='text', example='xx'),
    }(name='output'),
    usage?: {
      inputTokens?: long(name='inputTokens', example='100'),
      outputTokens?: long(name='outputTokens', example='100'),
      totalTokens?: long(name='totalTokens', example='200'),
    }(name='usage'),
  }(name='payload'),
  requestId?: string(name='requestId', example='04DA1A52-4E51-56CB-BA64-FDDA0B53BAE8'),
}

model RunHotTopicChatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunHotTopicChatResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunHotTopicChat  RunHotTopicChatRequest
  * @return RunHotTopicChatResponse
 */
async function runHotTopicChat(request: RunHotTopicChatRequest): RunHotTopicChatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunHotTopicChat', 'POST', '/{workspaceId}/quanmiao/lightapp/runHotTopicChat', 'json', true, 'form', request);
}

async function runHotTopicChatWithAsyncResponseHandler(request: RunHotTopicChatRequest, responseHandler: AsyncResponseHandler): RunHotTopicChatResponse {
  @handler.validateRequestModel(request);
  return @handler.doResponseHandler('RESTFUL', 'RunHotTopicChat', 'POST', '/{workspaceId}/quanmiao/lightapp/runHotTopicChat', 'json', true, 'form', request, responseHandler);
}

function runHotTopicChatWithResponseIterable(request: RunHotTopicChatRequest): iterator[RunHotTopicChatResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunHotTopicChat', 'POST', '/{workspaceId}/quanmiao/lightapp/runHotTopicChat', 'json', true, 'form', request);
}

model RunHotTopicSummaryRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-xxx', position='Path'),
  hotTopicVersion: string(name='hotTopicVersion', description='This parameter is required.', example='2024-10-16_8', position='Body'),
  stepForCustomSummaryStyleConfig: {
    summaryImageCount?: int32(name='summaryImageCount', example='2'),
    summaryModel?: string(name='summaryModel', example='qwen-max'),
    summaryPrompt?: string(name='summaryPrompt', example='xxxx'),
  }(name='stepForCustomSummaryStyleConfig', description='This parameter is required.', shrink='json', position='Body'),
  topicIds: [ string ](name='topicIds', description='This parameter is required.', example='xxxxx', shrink='json', position='Body'),
}

model RunHotTopicSummaryResponseBody = {
  header?: {
    errorCode?: string(name='errorCode', example='AccessForbidden'),
    errorMessage?: string(name='errorMessage', example='错误信息'),
    event?: string(name='event', example='task-finished'),
    sessionId?: string(name='sessionId', example='xxxx'),
    taskId?: string(name='taskId', example='xxxx'),
    traceId?: string(name='traceId', example='xxxxx'),
  }(name='header'),
  payload?: {
    output?: {
      text?: string(name='text'),
      topicId?: string(name='topicId'),
    }(name='output'),
    usage?: {
      inputTokens?: long(name='inputTokens', example='100'),
      outputTokens?: long(name='outputTokens', example='100'),
      totalTokens?: long(name='totalTokens', example='200'),
    }(name='usage'),
  }(name='payload'),
  requestId?: string(name='requestId', description='Id of the request', example='5D0E915E-655D-59A8-894F-93873F73AAE5'),
}

model RunHotTopicSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunHotTopicSummaryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunHotTopicSummary  RunHotTopicSummaryRequest
  * @return RunHotTopicSummaryResponse
 */
async function runHotTopicSummary(request: RunHotTopicSummaryRequest): RunHotTopicSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunHotTopicSummary', 'POST', '/{workspaceId}/quanmiao/lightapp/runHotTopicSummary', 'json', true, 'form', request);
}

async function runHotTopicSummaryWithAsyncResponseHandler(request: RunHotTopicSummaryRequest, responseHandler: AsyncResponseHandler): RunHotTopicSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.doResponseHandler('RESTFUL', 'RunHotTopicSummary', 'POST', '/{workspaceId}/quanmiao/lightapp/runHotTopicSummary', 'json', true, 'form', request, responseHandler);
}

function runHotTopicSummaryWithResponseIterable(request: RunHotTopicSummaryRequest): iterator[RunHotTopicSummaryResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunHotTopicSummary', 'POST', '/{workspaceId}/quanmiao/lightapp/runHotTopicSummary', 'json', true, 'form', request);
}

model RunMarketingInformationExtractRequest {
  workspaceId?: string(name='workspaceId', example='w-08a4a3ba7104917c', position='Path'),
  regionId?: string(name='regionId', position='Host'),
  customPrompt?: string(name='customPrompt', position='Body'),
  extractType?: string(name='extractType', position='Body'),
  modelId?: string(name='modelId', example='qwen-max
qwen-plus', position='Body'),
  sourceMaterials?: [ string ](name='sourceMaterials', shrink='json', position='Body'),
}

model RunMarketingInformationExtractResponseBody = {
  end?: boolean(name='end', example='{\\"TimeZone\\": \\"Asia/Shanghai\\", \\"DateTime\\": \\"2024-03-07T17:00:09+08:00\\"}'),
  header?: {
    event?: string(name='event', example='result-generated'),
    eventInfo?: string(name='eventInfo'),
    requestId?: string(name='requestId', example='F08C71C0-9399-548C-838B-1DA01DE211B0'),
    sessionId?: string(name='sessionId', example='121dlsga4o7golrl1hojazg0u9lvytjc17ebgzzj2u4zukgh122tfg7wj1e6a1vcowy1ewzinauxriai9atcr6r323mm9ddbr0bg5m61ij8hxnf8664tstlfkfol6m8luc4shs3gums7l46uauyy0xndqmhdjtdon6coyhb4x17bo762bg9e3tb2geufg2'),
    taskId?: string(name='taskId', example='12826092918145'),
    traceId?: string(name='traceId', example='2150432017236011824686132ecdbc'),
  }(name='header'),
  payload?: {
    output?: {
      text?: string(name='text'),
    }(name='output'),
    usage?: {
      inputTokens?: long(name='inputTokens', example='100'),
      outputTokens?: long(name='outputTokens', example='100'),
      totalTokens?: long(name='totalTokens', example='200'),
    }(name='usage'),
  }(name='payload'),
}

model RunMarketingInformationExtractResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunMarketingInformationExtractResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunMarketingInformationExtract  RunMarketingInformationExtractRequest
  * @return RunMarketingInformationExtractResponse
 */
async function runMarketingInformationExtract(request: RunMarketingInformationExtractRequest): RunMarketingInformationExtractResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunMarketingInformationExtract', 'POST', '/{workspaceId}/quanmiao/lightapp/runMarketingInformationExtract', 'json', true, 'form', request);
}

async function runMarketingInformationExtractWithAsyncResponseHandler(request: RunMarketingInformationExtractRequest, responseHandler: AsyncResponseHandler): RunMarketingInformationExtractResponse {
  @handler.validateRequestModel(request);
  return @handler.doResponseHandler('RESTFUL', 'RunMarketingInformationExtract', 'POST', '/{workspaceId}/quanmiao/lightapp/runMarketingInformationExtract', 'json', true, 'form', request, responseHandler);
}

function runMarketingInformationExtractWithResponseIterable(request: RunMarketingInformationExtractRequest): iterator[RunMarketingInformationExtractResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunMarketingInformationExtract', 'POST', '/{workspaceId}/quanmiao/lightapp/runMarketingInformationExtract', 'json', true, 'form', request);
}

model RunMarketingInformationWritingRequest {
  workspaceId?: string(name='workspaceId', example='w-26ca1703f6d71e6e', position='Path'),
  regionId?: string(name='regionId', position='Host'),
  apiKey?: string(name='apiKey', position='Body'),
  customLimitation?: string(name='customLimitation', position='Body'),
  customPrompt?: string(name='customPrompt', position='Body'),
  inputExample?: string(name='inputExample', position='Body'),
  modelId?: string(name='modelId', example='qwen-max
qwen-plus', position='Body'),
  outputExample?: string(name='outputExample', position='Body'),
  sourceMaterial?: string(name='sourceMaterial', position='Body'),
  writingType?: string(name='writingType', position='Body'),
}

model RunMarketingInformationWritingResponseBody = {
  end?: boolean(name='end', example='2024-06-21T10:29:52+08:00'),
  header?: {
    errorMessage?: string(name='errorMessage'),
    event?: string(name='event', example='result-generated'),
    eventInfo?: string(name='eventInfo'),
    requestId?: string(name='requestId', example='436BC5AE-0573-59D8-9803-6B5FDCD3BBA1'),
    sessionId?: string(name='sessionId', example='uqubxgqzlnf4exfektij032lgb3yvix678p232n56387aqxdo4uutdt9wstqzovvz6j3ho7wnbgye785u79yn5q3euqmsvzmqdn3nmfq2826oscjvsi43kof8b8uxufpp1x97jjukk6jd3183hy8ni6hqpskuhuascpd'),
    taskId?: string(name='taskId', example='13312125943232'),
    traceId?: string(name='traceId', example='213e20e517049392478441155e8b2a'),
  }(name='header'),
  payload?: {
    output?: {
      text?: string(name='text'),
    }(name='output'),
    usage?: {
      inputTokens?: long(name='inputTokens', example='100'),
      outputTokens?: long(name='outputTokens', example='100'),
      totalTokens?: long(name='totalTokens', example='200'),
    }(name='usage'),
  }(name='payload'),
}

model RunMarketingInformationWritingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunMarketingInformationWritingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunMarketingInformationWriting  RunMarketingInformationWritingRequest
  * @return RunMarketingInformationWritingResponse
 */
async function runMarketingInformationWriting(request: RunMarketingInformationWritingRequest): RunMarketingInformationWritingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunMarketingInformationWriting', 'POST', '/{workspaceId}/quanmiao/lightapp/runMarketingInformationWriting', 'json', true, 'form', request);
}

async function runMarketingInformationWritingWithAsyncResponseHandler(request: RunMarketingInformationWritingRequest, responseHandler: AsyncResponseHandler): RunMarketingInformationWritingResponse {
  @handler.validateRequestModel(request);
  return @handler.doResponseHandler('RESTFUL', 'RunMarketingInformationWriting', 'POST', '/{workspaceId}/quanmiao/lightapp/runMarketingInformationWriting', 'json', true, 'form', request, responseHandler);
}

function runMarketingInformationWritingWithResponseIterable(request: RunMarketingInformationWritingRequest): iterator[RunMarketingInformationWritingResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunMarketingInformationWriting', 'POST', '/{workspaceId}/quanmiao/lightapp/runMarketingInformationWriting', 'json', true, 'form', request);
}

model RunNetworkContentAuditRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-xx', position='Path'),
  apiKey?: string(name='apiKey', position='Body'),
  businessType?: string(name='businessType', example='clueMining', position='Body'),
  content: string(name='content', description='This parameter is required.', example='待分析文本', position='Body'),
  extraInfo?: string(name='extraInfo', example='额外信息', position='Body'),
  modelId?: string(name='modelId', example='qwen-max', position='Body'),
  outputFormat?: string(name='outputFormat', example='请返回如下JSON格式，{"key1":"","key2":""}', position='Body'),
  tags?: [ 
    {
      tagDefinePrompt?: string(name='tagDefinePrompt', example='xxxx'),
      tagName?: string(name='tagName', example='xxxx'),
    }
  ](name='tags', shrink='json', position='Body'),
  taskDescription?: string(name='taskDescription', example='给你一条待分析文本数据，请你按照标签体系来对数据进行打标。', position='Body'),
}

model RunNetworkContentAuditResponseBody = {
  header?: {
    errorCode?: string(name='errorCode', example='AccessForbidden'),
    errorMessage?: string(name='errorMessage', example='错误信息'),
    event?: string(name='event', example='task-finished'),
    sessionId?: string(name='sessionId', example='xxxx'),
    taskId?: string(name='taskId', example='xxxx'),
    traceId?: string(name='traceId', example='xxxxx'),
  }(name='header'),
  payload?: {
    output?: {
      text?: string(name='text', example='xxxx'),
    }(name='output'),
    usage?: {
      inputTokens?: long(name='inputTokens', example='100'),
      outputTokens?: long(name='outputTokens', example='100'),
      totalTokens?: long(name='totalTokens', example='200'),
    }(name='usage'),
  }(name='payload'),
  requestId?: string(name='requestId', description='Id of the request', example='5D0E915E-655D-59A8-894F-93873F73AAE5'),
}

model RunNetworkContentAuditResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunNetworkContentAuditResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunNetworkContentAudit  RunNetworkContentAuditRequest
  * @return RunNetworkContentAuditResponse
 */
async function runNetworkContentAudit(request: RunNetworkContentAuditRequest): RunNetworkContentAuditResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunNetworkContentAudit', 'POST', '/{workspaceId}/quanmiao/lightapp/runNetworkContentAudit', 'json', true, 'form', request);
}

async function runNetworkContentAuditWithAsyncResponseHandler(request: RunNetworkContentAuditRequest, responseHandler: AsyncResponseHandler): RunNetworkContentAuditResponse {
  @handler.validateRequestModel(request);
  return @handler.doResponseHandler('RESTFUL', 'RunNetworkContentAudit', 'POST', '/{workspaceId}/quanmiao/lightapp/runNetworkContentAudit', 'json', true, 'form', request, responseHandler);
}

function runNetworkContentAuditWithResponseIterable(request: RunNetworkContentAuditRequest): iterator[RunNetworkContentAuditResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunNetworkContentAudit', 'POST', '/{workspaceId}/quanmiao/lightapp/runNetworkContentAudit', 'json', true, 'form', request);
}

model RunScriptChatRequest {
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-rz8db8d00rcn2p0xc', position='Path'),
  regionId?: string(name='regionId', position='Host'),
  prompt: string(name='prompt', description='This parameter is required.', maxLength=9000, position='Body'),
  taskId?: string(name='taskId', example='a3d1c2ac-f086-4a21-9069-f5631542f5a2', maxLength=1000, position='Body'),
}

model RunScriptChatResponseBody = {
  end?: boolean(name='end', example='true'),
  header?: {
    errorCode?: string(name='errorCode', example='403'),
    errorMessage?: string(name='errorMessage', example='Pop sign mismatch, please check log.'),
    event?: string(name='event', example='result-generated'),
    eventInfo?: string(name='eventInfo'),
    requestId?: string(name='requestId', example='F8A35034-EDCF-5C50-95A5-1044316F36E3'),
    sessionId?: string(name='sessionId', example='147648697127_914847410985_1730600302167'),
    taskId?: string(name='taskId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
    traceId?: string(name='traceId', example='2150432017236011824686132ecdbc'),
  }(name='header'),
  payload?: {
    output?: {
      text?: string(name='text'),
    }(name='output'),
    usage?: {
      inputTokens?: long(name='inputTokens', example='100'),
      outputTokens?: long(name='outputTokens', example='100'),
      totalTokens?: long(name='totalTokens', example='200'),
    }(name='usage'),
  }(name='payload'),
}

model RunScriptChatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunScriptChatResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunScriptChat  RunScriptChatRequest
  * @return RunScriptChatResponse
 */
async function runScriptChat(request: RunScriptChatRequest): RunScriptChatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunScriptChat', 'POST', '/{workspaceId}/quanmiao/lightapp/runScriptChat', 'json', true, 'form', request);
}

async function runScriptChatWithAsyncResponseHandler(request: RunScriptChatRequest, responseHandler: AsyncResponseHandler): RunScriptChatResponse {
  @handler.validateRequestModel(request);
  return @handler.doResponseHandler('RESTFUL', 'RunScriptChat', 'POST', '/{workspaceId}/quanmiao/lightapp/runScriptChat', 'json', true, 'form', request, responseHandler);
}

function runScriptChatWithResponseIterable(request: RunScriptChatRequest): iterator[RunScriptChatResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunScriptChat', 'POST', '/{workspaceId}/quanmiao/lightapp/runScriptChat', 'json', true, 'form', request);
}

model RunScriptContinueRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-e9zzbkg0aj2mlXX', position='Path'),
  scriptSummary?: string(name='scriptSummary', example='一队全副武装的执法人员和消防员闯入了一间明显已被遗弃多日、门窗紧闭并用胶带封死的公寓，面对着屋内令人作呕的恶臭和门厅里的混乱场面，他们似乎在寻找某种隐藏的真相或危险源，而一封日期为16号的信件成为了揭开谜团的关键线索，随着便衣探员深入探索，一系列封闭的房间暗示着这里曾发生过不为人知的秘密事件。', maxLength=5000, position='Body'),
  scriptTypeKeyword?: string(name='scriptTypeKeyword', example='悬疑，都市，惊悚', maxLength=5000, position='Body'),
  userProvidedContent: string(name='userProvidedContent', description='This parameter is required.', example='门厅一片狼藉。朝向天井的窗户开着。公寓门突然被撞开了。\\n一名便衣探员、两名穿制服的警察和几位消防员———也身着工作服———进来，四下张望。他们都戴着手套以及盖住口鼻的面罩。在他们身后，门房和他妻子也挤进门厅。他们都捂着鼻子。门房的另一只手里拿着一叠信件和促销广告单。他们身后，跟着一位女邻居。\\n便衣探员（对门房和邻居）：请在外面等候。\\n他向一名警察示意，警察正忙着把好奇的旁观者请出门外。\\n警察（对门房，指着那一叠信件）：最近的一封是哪天的？\\n门房（查对信件）：最近的一封似乎是16号的......等一下......\\n便衣探员想打开左侧的门，却是徒劳。门用胶带封上了。\\n便衣探员（对消防员）：你来试一下好吗？\\n消防员摆弄门的时候，便衣探员进了卧室隔壁的餐厅。他迅速打开窗，转身，想经过对开门进左侧的房间。这两扇门也锁着，门缝被贴上了胶带。他右转进入起居室，也打开了窗户', maxLength=5000, position='Body'),
}

model RunScriptContinueResponseBody = {
  end?: boolean(name='end'),
  header?: {
    errorCode?: string(name='errorCode', example='403'),
    errorMessage?: string(name='errorMessage', example='Pop sign mismatch, please check.'),
    event?: string(name='event', example='result-generated'),
    eventInfo?: string(name='eventInfo', example='模型生成事件'),
    requestId?: string(name='requestId', example='0EB27AE3-CA53-5FAE-83C6-EE66CA4DF5DF'),
    sessionId?: string(name='sessionId', example='3cd10828-0e42-471c-8f1a-931cde20b035'),
    taskId?: string(name='taskId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
    traceId?: string(name='traceId', example='2150451a17191950923411783e2927'),
  }(name='header'),
  payload?: {
    output?: {
      text?: string(name='text', example='这是测试输出'),
    }(name='output'),
    usage?: {
      inputTokens?: long(name='inputTokens', example='100'),
      outputTokens?: long(name='outputTokens', example='100'),
      totalTokens?: long(name='totalTokens', example='200'),
    }(name='usage'),
  }(name='payload'),
}

model RunScriptContinueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunScriptContinueResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunScriptContinue  RunScriptContinueRequest
  * @return RunScriptContinueResponse
 */
async function runScriptContinue(request: RunScriptContinueRequest): RunScriptContinueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunScriptContinue', 'POST', '/{workspaceId}/quanmiao/lightapp/runScriptContinue', 'json', true, 'form', request);
}

async function runScriptContinueWithAsyncResponseHandler(request: RunScriptContinueRequest, responseHandler: AsyncResponseHandler): RunScriptContinueResponse {
  @handler.validateRequestModel(request);
  return @handler.doResponseHandler('RESTFUL', 'RunScriptContinue', 'POST', '/{workspaceId}/quanmiao/lightapp/runScriptContinue', 'json', true, 'form', request, responseHandler);
}

function runScriptContinueWithResponseIterable(request: RunScriptContinueRequest): iterator[RunScriptContinueResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunScriptContinue', 'POST', '/{workspaceId}/quanmiao/lightapp/runScriptContinue', 'json', true, 'form', request);
}

model RunScriptPlanningRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-e9zzbkg0aj2mlXX', position='Path'),
  additionalNote?: string(name='additionalNote', example='故事尽可能狗血', maxLength=5000, position='Body'),
  dialogueInScene?: boolean(name='dialogueInScene', position='Body'),
  plotConflict?: boolean(name='plotConflict', position='Body'),
  scriptName?: string(name='scriptName', example='都市战神', maxLength=5000, position='Body'),
  scriptShotCount?: int32(name='scriptShotCount', example='3', minimum=1, maximum=10, position='Body'),
  scriptSummary: string(name='scriptSummary', description='This parameter is required.', example='在一个宁静的小镇上，每个家庭都在同一天收到一个神秘的、没有标记的包裹。', maxLength=5000, position='Body'),
  scriptTypeKeyword?: string(name='scriptTypeKeyword', example='现代，都市，爱情，玄幻', maxLength=5000, position='Body'),
}

model RunScriptPlanningResponseBody = {
  end?: boolean(name='end'),
  header?: {
    errorCode?: string(name='errorCode', example='403'),
    errorMessage?: string(name='errorMessage', example='Pop sign mismatch, please check.'),
    event?: string(name='event', example='result-generated'),
    eventInfo?: string(name='eventInfo', example='模型生成事件'),
    requestId?: string(name='requestId', example='0EB27AE3-CA53-5FAE-83C6-EE66CA4DF5DF'),
    sessionId?: string(name='sessionId', example='3cd10828-0e42-471c-8f1a-931cde20b035'),
    taskId?: string(name='taskId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
    traceId?: string(name='traceId', example='2150451a17191950923411783e2927'),
  }(name='header'),
  payload?: {
    output?: {
      text?: string(name='text', example='这是测试输出'),
    }(name='output'),
    usage?: {
      inputTokens?: long(name='inputTokens', example='100'),
      outputTokens?: long(name='outputTokens', example='100'),
      totalTokens?: long(name='totalTokens', example='200'),
    }(name='usage'),
  }(name='payload'),
}

model RunScriptPlanningResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunScriptPlanningResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunScriptPlanning  RunScriptPlanningRequest
  * @return RunScriptPlanningResponse
 */
async function runScriptPlanning(request: RunScriptPlanningRequest): RunScriptPlanningResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunScriptPlanning', 'POST', '/{workspaceId}/quanmiao/lightapp/runScriptPlanning', 'json', true, 'form', request);
}

async function runScriptPlanningWithAsyncResponseHandler(request: RunScriptPlanningRequest, responseHandler: AsyncResponseHandler): RunScriptPlanningResponse {
  @handler.validateRequestModel(request);
  return @handler.doResponseHandler('RESTFUL', 'RunScriptPlanning', 'POST', '/{workspaceId}/quanmiao/lightapp/runScriptPlanning', 'json', true, 'form', request, responseHandler);
}

function runScriptPlanningWithResponseIterable(request: RunScriptPlanningRequest): iterator[RunScriptPlanningResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunScriptPlanning', 'POST', '/{workspaceId}/quanmiao/lightapp/runScriptPlanning', 'json', true, 'form', request);
}

model RunScriptRefineRequest {
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-zna577pdximvztk5', position='Path'),
  regionId?: string(name='regionId', position='Host'),
  taskId?: string(name='taskId', example='a3d1c2ac-f086-4a21-9069-f5631542f5a2', maxLength=1000, position='Body'),
}

model RunScriptRefineResponseBody = {
  end?: boolean(name='end'),
  header?: {
    errorCode?: string(name='errorCode', example='403'),
    errorMessage?: string(name='errorMessage', example='Pop sign mismatch, please check log.'),
    event?: string(name='event', example='result-generated'),
    eventInfo?: string(name='eventInfo'),
    requestId?: string(name='requestId', example='F8A35034-EDCF-5C50-95A5-1044316F36E3'),
    sessionId?: string(name='sessionId', example='17dc8bcd-f34a-46d1-a7a3-0fa3d1ce3824'),
    taskId?: string(name='taskId', example='14356391-6c6c-40d5-b80a-8ecd03b69d72'),
    traceId?: string(name='traceId', example='2150432017236011824686132ecdbc'),
  }(name='header'),
  payload?: {
    output?: {
      content?: [ map[string]string ](name='content'),
      outline?: string(name='outline'),
      role?: string(name='role'),
      scene?: string(name='scene'),
      summary?: string(name='summary'),
      text?: string(name='text', example='xx'),
    }(name='output'),
    usage?: {
      inputTokens?: long(name='inputTokens', example='100'),
      outputTokens?: long(name='outputTokens', example='100'),
      totalTokens?: long(name='totalTokens', example='200'),
    }(name='usage'),
  }(name='payload'),
}

model RunScriptRefineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunScriptRefineResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunScriptRefine  RunScriptRefineRequest
  * @return RunScriptRefineResponse
 */
async function runScriptRefine(request: RunScriptRefineRequest): RunScriptRefineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunScriptRefine', 'POST', '/{workspaceId}/quanmiao/lightapp/runScriptRefine', 'json', true, 'form', request);
}

async function runScriptRefineWithAsyncResponseHandler(request: RunScriptRefineRequest, responseHandler: AsyncResponseHandler): RunScriptRefineResponse {
  @handler.validateRequestModel(request);
  return @handler.doResponseHandler('RESTFUL', 'RunScriptRefine', 'POST', '/{workspaceId}/quanmiao/lightapp/runScriptRefine', 'json', true, 'form', request, responseHandler);
}

function runScriptRefineWithResponseIterable(request: RunScriptRefineRequest): iterator[RunScriptRefineResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunScriptRefine', 'POST', '/{workspaceId}/quanmiao/lightapp/runScriptRefine', 'json', true, 'form', request);
}

model RunStyleWritingRequest {
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2setzb9xb8mx', position='Path'),
  regionId?: string(name='regionId', position='Host'),
  learningSamples?: [ string ](name='learningSamples', shrink='json', position='Body'),
  processStage?: string(name='processStage', position='Body'),
  referenceMaterials?: [ string ](name='referenceMaterials', shrink='json', position='Body'),
  styleFeature?: string(name='styleFeature', maxLength=1000, position='Body'),
  useSearch?: boolean(name='useSearch', position='Body'),
  writingTheme?: string(name='writingTheme', maxLength=2000, position='Body'),
}

model RunStyleWritingResponseBody = {
  end?: boolean(name='end', example='true'),
  header?: {
    errorCode?: string(name='errorCode', example='403'),
    errorMessage?: string(name='errorMessage', example='Pop sign mismatch, please check log.'),
    event?: string(name='event', example='task-progress-start-generating'),
    eventInfo?: string(name='eventInfo'),
    requestId?: string(name='requestId', example='0EB27AE3-CA53-5FAE-83C6-EE66CA4DF5DF'),
    sessionId?: string(name='sessionId', example='3cd10828-0e42-471c-8f1a-931cde20b035'),
    taskId?: string(name='taskId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
    traceId?: string(name='traceId', example='2150451a17191950923411783e2927'),
  }(name='header', example='{"event":"task-progress-start-generating","sessionId":"3cd10828-0e42-471c-8f1a-931cde20b035","taskId":"d3be9981-ca2d-4e17-bf31-1c0a628e9f99","traceId":"66bef4a7f5d61ff3c43f3b710574e175"}'),
  payload?: {
    output?: {
      text?: string(name='text'),
    }(name='output'),
    usage?: {
      inputTokens?: long(name='inputTokens', example='100'),
      outputTokens?: long(name='outputTokens', example='100'),
      totalTokens?: long(name='totalTokens', example='200'),
    }(name='usage', example='{
        "inputTokens": 1816,
        "outputTokens": 96,
        "totalTokens": 1912
    }'),
  }(name='payload'),
}

model RunStyleWritingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunStyleWritingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunStyleWriting  RunStyleWritingRequest
  * @return RunStyleWritingResponse
 */
async function runStyleWriting(request: RunStyleWritingRequest): RunStyleWritingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunStyleWriting', 'POST', '/{workspaceId}/quanmiao/lightapp/runStyleWriting', 'json', true, 'form', request);
}

async function runStyleWritingWithAsyncResponseHandler(request: RunStyleWritingRequest, responseHandler: AsyncResponseHandler): RunStyleWritingResponse {
  @handler.validateRequestModel(request);
  return @handler.doResponseHandler('RESTFUL', 'RunStyleWriting', 'POST', '/{workspaceId}/quanmiao/lightapp/runStyleWriting', 'json', true, 'form', request, responseHandler);
}

function runStyleWritingWithResponseIterable(request: RunStyleWritingRequest): iterator[RunStyleWritingResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunStyleWriting', 'POST', '/{workspaceId}/quanmiao/lightapp/runStyleWriting', 'json', true, 'form', request);
}

model RunTagMiningAnalysisRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='w-08a4a3ba7104917c', position='Path'),
  apiKey?: string(name='apiKey', position='Body'),
  businessType?: string(name='businessType', example='clueMining', position='Body'),
  content: string(name='content', description='This parameter is required.', example='待分析文本', position='Body'),
  extraInfo?: string(name='extraInfo', example='额外信息', position='Body'),
  modelId?: string(name='modelId', example='qwen-max', position='Body'),
  outputFormat?: string(name='outputFormat', example='请返回如下JSON格式，{"key1":"","key2":""}', position='Body'),
  tags?: [ 
    {
      tagDefinePrompt?: string(name='tagDefinePrompt', example='xxxx'),
      tagName?: string(name='tagName', example='xxxx'),
    }
  ](name='tags', shrink='json', position='Body'),
  taskDescription?: string(name='taskDescription', example='给你一条待分析文本数据，请你按照标签体系来对数据进行打标。', position='Body'),
}

model RunTagMiningAnalysisResponseBody = {
  header?: {
    errorCode?: string(name='errorCode', example='AccessForbidden'),
    errorMessage?: string(name='errorMessage', example='错误信息'),
    event?: string(name='event', example='task-finished'),
    sessionId?: string(name='sessionId', example='xxxx'),
    taskId?: string(name='taskId', example='xxxx'),
    traceId?: string(name='traceId', example='xxxxx'),
  }(name='header'),
  payload?: {
    output?: {
      text?: string(name='text'),
    }(name='output'),
    usage?: {
      inputTokens?: long(name='inputTokens', example='100'),
      outputTokens?: long(name='outputTokens', example='100'),
      totalTokens?: long(name='totalTokens', example='200'),
    }(name='usage'),
  }(name='payload'),
  requestId?: string(name='requestId', description='Id of the request', example='085BE2D2-BB7E-59A6-B688-F2CB32124E7F'),
}

model RunTagMiningAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunTagMiningAnalysisResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunTagMiningAnalysis  RunTagMiningAnalysisRequest
  * @return RunTagMiningAnalysisResponse
 */
async function runTagMiningAnalysis(request: RunTagMiningAnalysisRequest): RunTagMiningAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunTagMiningAnalysis', 'POST', '/{workspaceId}/quanmiao/lightapp/runTagMiningAnalysis', 'json', true, 'form', request);
}

async function runTagMiningAnalysisWithAsyncResponseHandler(request: RunTagMiningAnalysisRequest, responseHandler: AsyncResponseHandler): RunTagMiningAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.doResponseHandler('RESTFUL', 'RunTagMiningAnalysis', 'POST', '/{workspaceId}/quanmiao/lightapp/runTagMiningAnalysis', 'json', true, 'form', request, responseHandler);
}

function runTagMiningAnalysisWithResponseIterable(request: RunTagMiningAnalysisRequest): iterator[RunTagMiningAnalysisResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunTagMiningAnalysis', 'POST', '/{workspaceId}/quanmiao/lightapp/runTagMiningAnalysis', 'json', true, 'form', request);
}

model RunVideoAnalysisRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-xxx', position='Path'),
  excludeGenerateOptions?: [ string ](name='excludeGenerateOptions', shrink='json', position='Body'),
  faceIdentitySimilarityMinScore?: float(name='faceIdentitySimilarityMinScore', position='Body'),
  frameSampleMethod?: {
    interval?: double(name='interval'),
    methodName?: string(name='methodName'),
    pixel?: int32(name='pixel'),
  }(name='frameSampleMethod', shrink='json', position='Body'),
  generateOptions?: [ string ](name='generateOptions', shrink='json', position='Body'),
  language?: string(name='language', example='english', position='Body'),
  modelCustomPromptTemplate?: string(name='modelCustomPromptTemplate', position='Body'),
  modelCustomPromptTemplateId?: string(name='modelCustomPromptTemplateId', example='PlotDetail', position='Body'),
  modelId?: string(name='modelId', example='qwen-max', position='Body'),
  originalSessionId?: string(name='originalSessionId', example='a3d1c2ac-f086-4a21-9069-f5631542f5ax', position='Body'),
  snapshotInterval?: double(name='snapshotInterval', position='Body'),
  splitInterval?: int32(name='splitInterval', example='10', position='Body'),
  taskId?: string(name='taskId', example='a3d1c2ac-f086-4a21-9069-f5631542f5a2', position='Body'),
  textProcessTasks?: [ 
    {
      modelCustomPromptTemplate?: string(name='modelCustomPromptTemplate'),
      modelCustomPromptTemplateId?: string(name='modelCustomPromptTemplateId'),
      modelId?: string(name='modelId'),
    }
  ](name='textProcessTasks', shrink='json', position='Body'),
  videoCaptionInfo?: {
    videoCaptionFileUrl?: string(name='videoCaptionFileUrl', example='oss:// | http://'),
    videoCaptions?: [ 
      {
        endTime?: long(name='endTime', example='10000'),
        speaker?: string(name='speaker', example='张三'),
        startTime?: long(name='startTime', example='1000'),
        text?: string(name='text', example='你好'),
      }
    ](name='videoCaptions'),
  }(name='videoCaptionInfo', shrink='json', position='Body'),
  videoExtraInfo?: string(name='videoExtraInfo', position='Body'),
  videoModelCustomPromptTemplate?: string(name='videoModelCustomPromptTemplate', position='Body'),
  videoModelId?: string(name='videoModelId', example='qwen-vl-max', position='Body'),
  videoRoles?: [ 
    {
      roleInfo?: string(name='roleInfo'),
      roleName?: string(name='roleName'),
      urls?: [ string ](name='urls'),
    }
  ](name='videoRoles', shrink='json', position='Body'),
  videoShotFaceIdentityCount?: int32(name='videoShotFaceIdentityCount', position='Body'),
  videoUrl?: string(name='videoUrl', example='http://xxxx.mp4', position='Body'),
}

model RunVideoAnalysisResponseBody = {
  header?: {
    errorCode?: string(name='errorCode', example='InvalidParam'),
    errorMessage?: string(name='errorMessage', example='Pop sign mismatch, please check log.'),
    event?: string(name='event', example='task-progress-start-generating'),
    eventInfo?: string(name='eventInfo'),
    sessionId?: string(name='sessionId', example='xxx'),
    taskId?: string(name='taskId', example='xxx'),
    traceId?: string(name='traceId', example='2150432017236011824686132ecdbc'),
  }(name='header'),
  payload?: {
    output?: {
      resultJsonFileUrl?: string(name='resultJsonFileUrl', example='http://'),
      videoAnalysisResult?: {
        generateFinished?: boolean(name='generateFinished', example='true'),
        modelId?: string(name='modelId', example='qwen-vl-max'),
        text?: string(name='text'),
        usage?: {
          inputTokens?: long(name='inputTokens', example='1'),
          outputTokens?: long(name='outputTokens', example='1'),
          totalTokens?: long(name='totalTokens', example='1'),
        }(name='usage'),
        videoShotAnalysisResults?: [ 
          {
            endTime?: long(name='endTime', example='10000'),
            startTime?: long(name='startTime', example='1000'),
            text?: string(name='text'),
          }
        ](name='videoShotAnalysisResults'),
      }(name='videoAnalysisResult'),
      videoCaptionResult?: {
        generateFinished?: boolean(name='generateFinished', example='true'),
        videoCaptions?: [ 
          {
            endTime?: long(name='endTime', example='1710432000000'),
            endTimeFormat?: string(name='endTimeFormat', example='00:01'),
            speaker?: string(name='speaker', example='张三'),
            startTime?: long(name='startTime', example='0'),
            startTimeFormat?: string(name='startTimeFormat', example='00:01'),
            text?: string(name='text', example='xxx'),
          }
        ](name='videoCaptions'),
      }(name='videoCaptionResult'),
      videoGenerateResult?: {
        generateFinished?: boolean(name='generateFinished', example='true'),
        index?: int32(name='index'),
        modelId?: string(name='modelId', example='qwen-max'),
        modelReduce?: boolean(name='modelReduce'),
        reasonText?: string(name='reasonText'),
        text?: string(name='text'),
        usage?: {
          inputTokens?: long(name='inputTokens', example='1'),
          outputTokens?: long(name='outputTokens', example='1'),
          totalTokens?: long(name='totalTokens', example='1'),
        }(name='usage'),
      }(name='videoGenerateResult'),
      videoGenerateResults?: [ 
        {
          generateFinished?: boolean(name='generateFinished'),
          index?: int32(name='index'),
          modelId?: string(name='modelId'),
          reasonText?: string(name='reasonText'),
          text?: string(name='text'),
          usage?: {
            inputTokens?: long(name='inputTokens'),
            outputTokens?: long(name='outputTokens'),
            totalTokens?: long(name='totalTokens'),
          }(name='usage'),
        }
      ](name='videoGenerateResults'),
      videoMindMappingGenerateResult?: {
        generateFinished?: boolean(name='generateFinished', example='true'),
        modelId?: string(name='modelId', example='true'),
        modelReduce?: boolean(name='modelReduce'),
        text?: string(name='text'),
        usage?: {
          inputTokens?: long(name='inputTokens', example='1'),
          outputTokens?: long(name='outputTokens', example='1'),
          totalTokens?: long(name='totalTokens', example='1'),
        }(name='usage'),
        videoMindMappings?: [ 
          {
            childNodes?: [ 
              {
                childNodes?: [ 
                  {
                    name?: string(name='name'),
                  }
                ](name='childNodes'),
                name?: string(name='name'),
              }
            ](name='childNodes'),
            name?: string(name='name'),
          }
        ](name='videoMindMappings'),
      }(name='videoMindMappingGenerateResult'),
      videoShotSnapshotResult?: {
        videoShots?: [ 
          {
            endTime?: long(name='endTime'),
            endTimeFormat?: string(name='endTimeFormat'),
            startTime?: long(name='startTime'),
            startTimeFormat?: string(name='startTimeFormat'),
            videoSnapshots?: [ 
              {
                url?: string(name='url'),
              }
            ](name='videoSnapshots'),
          }
        ](name='videoShots'),
      }(name='videoShotSnapshotResult'),
      videoTitleGenerateResult?: {
        generateFinished?: boolean(name='generateFinished', example='true'),
        modelId?: string(name='modelId', example='qwen-max'),
        modelReduce?: boolean(name='modelReduce'),
        text?: string(name='text'),
        usage?: {
          inputTokens?: long(name='inputTokens', example='1'),
          outputTokens?: long(name='outputTokens', example='1'),
          totalTokens?: long(name='totalTokens', example='2'),
        }(name='usage'),
      }(name='videoTitleGenerateResult'),
    }(name='output'),
    usage?: {
      inputTokens?: long(name='inputTokens'),
      outputTokens?: long(name='outputTokens'),
      totalTokens?: long(name='totalTokens'),
    }(name='usage'),
  }(name='payload'),
  requestId?: string(name='requestId', example='117F5ABE-CF02-5502-9A3F-E56BC9081A64'),
}

model RunVideoAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunVideoAnalysisResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunVideoAnalysis  RunVideoAnalysisRequest
  * @return RunVideoAnalysisResponse
 */
async function runVideoAnalysis(request: RunVideoAnalysisRequest): RunVideoAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunVideoAnalysis', 'POST', '/{workspaceId}/quanmiao/lightapp/runVideoAnalysis', 'json', true, 'form', request);
}

async function runVideoAnalysisWithAsyncResponseHandler(request: RunVideoAnalysisRequest, responseHandler: AsyncResponseHandler): RunVideoAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.doResponseHandler('RESTFUL', 'RunVideoAnalysis', 'POST', '/{workspaceId}/quanmiao/lightapp/runVideoAnalysis', 'json', true, 'form', request, responseHandler);
}

function runVideoAnalysisWithResponseIterable(request: RunVideoAnalysisRequest): iterator[RunVideoAnalysisResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunVideoAnalysis', 'POST', '/{workspaceId}/quanmiao/lightapp/runVideoAnalysis', 'json', true, 'form', request);
}

model SubmitEnterpriseVocAnalysisTaskRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId?: string(name='workspaceId', example='llm-xx', position='Path'),
  apiKey?: string(name='apiKey', position='Body'),
  contents?: [ 
    {
      id?: string(name='id', example='id-xxxxx'),
      text?: string(name='text', example='xxxx'),
    }
  ](name='contents', shrink='json', position='Body'),
  extraInfo?: string(name='extraInfo', position='Body'),
  fileKey?: string(name='fileKey', example='oss://default/aimiaobi-service-prod/aimiaobi/temp/public/government_service_experience_feedback_summary.txt', position='Body'),
  filterTags?: [ 
    {
      tagDefinePrompt?: string(name='tagDefinePrompt'),
      tagName?: string(name='tagName'),
    }
  ](name='filterTags', shrink='json', position='Body'),
  modelId?: string(name='modelId', example='qwen-max', position='Body'),
  outputFormat?: string(name='outputFormat', position='Body'),
  sourceTrace?: boolean(name='sourceTrace', position='Body'),
  tags?: [ 
    {
      tagDefinePrompt?: string(name='tagDefinePrompt', example='xxxx'),
      tagName?: string(name='tagName', example='xxxx'),
    }
  ](name='tags', shrink='json', position='Body'),
  taskDescription?: string(name='taskDescription', position='Body'),
  url?: string(name='url', example='http://www.example.com/xxxx.txt', position='Body'),
}

model SubmitEnterpriseVocAnalysisTaskResponseBody = {
  code?: string(name='code', example='NoPermission'),
  data?: {
    taskId?: string(name='taskId', example='a0cc71ec-fe07-47e5-bf12-6e1c46081c98'),
  }(name='data'),
  httpStatusCode?: int32(name='httpStatusCode', example='403'),
  message?: string(name='message'),
  requestId?: string(name='requestId', description='Id of the request', example='117F5ABE-CF02-5502-9A3F-E56BC9081A64'),
  success?: boolean(name='success', example='false'),
}

model SubmitEnterpriseVocAnalysisTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitEnterpriseVocAnalysisTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitEnterpriseVocAnalysisTask  SubmitEnterpriseVocAnalysisTaskRequest
  * @return SubmitEnterpriseVocAnalysisTaskResponse
 */
async function submitEnterpriseVocAnalysisTask(request: SubmitEnterpriseVocAnalysisTaskRequest): SubmitEnterpriseVocAnalysisTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitEnterpriseVocAnalysisTask', 'POST', '/{workspaceId}/quanmiao/lightapp/submitEnterpriseVocAnalysisTask', 'json', true, 'form', request);
}

model SubmitTagMiningAnalysisTaskRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-xx', position='Path'),
  apiKey?: string(name='apiKey', position='Body'),
  businessType?: string(name='businessType', example='clueMining', position='Body'),
  contents?: [ string ](name='contents', shrink='json', position='Body'),
  extraInfo?: string(name='extraInfo', example='额外信息', position='Body'),
  modelId?: string(name='modelId', example='qwen-max', position='Body'),
  outputFormat?: string(name='outputFormat', example='请返回如下JSON格式，{"key1":"","key2":""}', position='Body'),
  tags?: [ 
    {
      tagDefinePrompt?: string(name='tagDefinePrompt', example='xxxx'),
      tagName?: string(name='tagName', example='xxxx'),
    }
  ](name='tags', shrink='json', position='Body'),
  taskDescription?: string(name='taskDescription', example='给你一条待分析文本数据，请你按照标签体系来对数据进行打标。', position='Body'),
  url?: string(name='url', example='http://www.example.com/xxxx.txt', maxLength=2000, position='Body'),
}

model SubmitTagMiningAnalysisTaskResponseBody = {
  code?: string(name='code', example='successful'),
  data?: {
    taskId?: string(name='taskId', example='3feb69ed02d9b1a17d0f1a942675d300'),
  }(name='data'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message', example='ok'),
  requestId?: string(name='requestId', description='Id of the request', example='117F5ABE-CF02-5502-9A3F-E56BC9081A64'),
  success?: boolean(name='success', example='true'),
}

model SubmitTagMiningAnalysisTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitTagMiningAnalysisTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitTagMiningAnalysisTask  SubmitTagMiningAnalysisTaskRequest
  * @return SubmitTagMiningAnalysisTaskResponse
 */
async function submitTagMiningAnalysisTask(request: SubmitTagMiningAnalysisTaskRequest): SubmitTagMiningAnalysisTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitTagMiningAnalysisTask', 'POST', '/{workspaceId}/quanmiao/lightapp/submitTagMiningAnalysisTask', 'json', true, 'form', request);
}

model SubmitVideoAnalysisTaskRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-xxx', position='Path'),
  deduplicationId?: string(name='deduplicationId', example='1', position='Body'),
  excludeGenerateOptions?: [ string ](name='excludeGenerateOptions', shrink='json', position='Body'),
  faceIdentitySimilarityMinScore?: float(name='faceIdentitySimilarityMinScore', position='Body'),
  frameSampleMethod?: {
    interval?: double(name='interval', example='2'),
    methodName?: string(name='methodName', example='standard'),
    pixel?: int32(name='pixel', example='768'),
  }(name='frameSampleMethod', shrink='json', position='Body'),
  generateOptions?: [ string ](name='generateOptions', shrink='json', position='Body'),
  language?: string(name='language', example='chinese', position='Body'),
  modelCustomPromptTemplate?: string(name='modelCustomPromptTemplate', position='Body'),
  modelCustomPromptTemplateId?: string(name='modelCustomPromptTemplateId', example='PlotDetail', position='Body'),
  modelId?: string(name='modelId', example='qwen-max', position='Body'),
  snapshotInterval?: double(name='snapshotInterval', example='2', position='Body'),
  splitInterval?: int32(name='splitInterval', example='10', position='Body'),
  textProcessTasks?: [ 
    {
      modelCustomPromptTemplate?: string(name='modelCustomPromptTemplate'),
      modelCustomPromptTemplateId?: string(name='modelCustomPromptTemplateId'),
      modelId?: string(name='modelId'),
    }
  ](name='textProcessTasks', shrink='json', position='Body'),
  videoCaptionInfo?: {
    videoCaptionFileUrl?: string(name='videoCaptionFileUrl', example='oss:// | http://'),
    videoCaptions?: [ 
      {
        endTime?: long(name='endTime', example='10000'),
        speaker?: string(name='speaker', example='张三'),
        startTime?: long(name='startTime', example='1000'),
        text?: string(name='text', example='你好'),
      }
    ](name='videoCaptions'),
  }(name='videoCaptionInfo', shrink='json', position='Body'),
  videoExtraInfo?: string(name='videoExtraInfo', position='Body'),
  videoModelCustomPromptTemplate?: string(name='videoModelCustomPromptTemplate', position='Body'),
  videoModelId?: string(name='videoModelId', example='qwen-vl-max-latest', position='Body'),
  videoRoles?: [ 
    {
      roleInfo?: string(name='roleInfo'),
      roleName?: string(name='roleName'),
      urls?: [ string ](name='urls'),
    }
  ](name='videoRoles', shrink='json', position='Body'),
  videoShotFaceIdentityCount?: int32(name='videoShotFaceIdentityCount', position='Body'),
  videoUrl: string(name='videoUrl', description='This parameter is required.', example='http://xxxx.mp4', position='Body'),
}

model SubmitVideoAnalysisTaskResponseBody = {
  code?: string(name='code', example='xx'),
  data?: {
    taskId?: string(name='taskId', example='3feb69ed02d9b1a17d0f1a942675d300'),
  }(name='data'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='085BE2D2-BB7E-59A6-B688-F2CB32124E7F'),
  success?: boolean(name='success', example='True'),
}

model SubmitVideoAnalysisTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitVideoAnalysisTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitVideoAnalysisTask  SubmitVideoAnalysisTaskRequest
  * @return SubmitVideoAnalysisTaskResponse
 */
async function submitVideoAnalysisTask(request: SubmitVideoAnalysisTaskRequest): SubmitVideoAnalysisTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitVideoAnalysisTask', 'POST', '/{workspaceId}/quanmiao/lightapp/videoAnalysis/submitVideoAnalysisTask', 'json', true, 'form', request);
}

model UpdateVideoAnalysisConfigRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-xxx', position='Path'),
  asyncConcurrency: int32(name='asyncConcurrency', description='This parameter is required.', example='2', position='Body'),
}

model UpdateVideoAnalysisConfigResponseBody = {
  code?: string(name='code', example='xx'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message', example='ok'),
  requestId?: string(name='requestId', description='Id of the request', example='5D0E915E-655D-59A8-894F-93873F73AAE5'),
  success?: boolean(name='success', example='True'),
}

model UpdateVideoAnalysisConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateVideoAnalysisConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateVideoAnalysisConfig  UpdateVideoAnalysisConfigRequest
  * @return UpdateVideoAnalysisConfigResponse
 */
async function updateVideoAnalysisConfig(request: UpdateVideoAnalysisConfigRequest): UpdateVideoAnalysisConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateVideoAnalysisConfig', 'PUT', '/{workspaceId}/quanmiao/lightapp/videoAnalysis/updateVideoAnalysisConfig', 'json', true, 'form', request);
}

model UpdateVideoAnalysisTaskRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-xxx', position='Path'),
  taskId: string(name='taskId', description='This parameter is required.', example='xxxx', position='Body'),
  taskStatus: string(name='taskStatus', description='This parameter is required.', example='CANCELED', position='Body'),
}

model UpdateVideoAnalysisTaskResponseBody = {
  code?: string(name='code', example='DataNotExists'),
  data?: {
    taskErrorMessage?: string(name='taskErrorMessage'),
    taskId?: string(name='taskId', example='3feb69ed02d9b1a17d0f1a942675d300'),
    taskStatus?: string(name='taskStatus', example='CANCELED'),
  }(name='data'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='117F5ABE-CF02-5502-9A3F-E56BC9081A64'),
  success?: boolean(name='success', example='false'),
}

model UpdateVideoAnalysisTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateVideoAnalysisTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateVideoAnalysisTask  UpdateVideoAnalysisTaskRequest
  * @return UpdateVideoAnalysisTaskResponse
 */
async function updateVideoAnalysisTask(request: UpdateVideoAnalysisTaskRequest): UpdateVideoAnalysisTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateVideoAnalysisTask', 'PUT', '/{workspaceId}/quanmiao/lightapp/videoAnalysis/updateVideoAnalysisTask', 'json', true, 'form', request);
}

