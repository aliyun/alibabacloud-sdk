/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('quanmiaolightapp', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model RunMarketingInformationExtractRequest {
  customPrompt?: string(name='customPrompt'),
  extractType?: string(name='extractType'),
  modelId?: string(name='modelId', example='qwen-max
qwen-plus'),
  sourceMaterials?: [ string ](name='sourceMaterials'),
}

model RunMarketingInformationExtractShrinkRequest {
  customPrompt?: string(name='customPrompt'),
  extractType?: string(name='extractType'),
  modelId?: string(name='modelId', example='qwen-max
qwen-plus'),
  sourceMaterialsShrink?: string(name='sourceMaterials'),
}

model RunMarketingInformationExtractResponseBody = {
  end?: boolean(name='end', example='{\\\\"TimeZone\\\\": \\\\"Asia/Shanghai\\\\", \\\\"DateTime\\\\": \\\\"2024-03-07T17:00:09+08:00\\\\"}'),
  header?: {
    event?: string(name='event', example='result-generated'),
    eventInfo?: string(name='eventInfo'),
    requestId?: string(name='requestId', example='F08C71C0-9399-548C-838B-1DA01DE211B0'),
    sessionId?: string(name='sessionId', example='121dlsga4o7golrl1hojazg0u9lvytjc17ebgzzj2u4zukgh122tfg7wj1e6a1vcowy1ewzinauxriai9atcr6r323mm9ddbr0bg5m61ij8hxnf8664tstlfkfol6m8luc4shs3gums7l46uauyy0xndqmhdjtdon6coyhb4x17bo762bg9e3tb2geufg2'),
    taskId?: string(name='taskId', example='12826092918145'),
    traceId?: string(name='traceId', example='2150432017236011824686132ecdbc'),
  }(name='header'),
  payload?: {
    output?: {
      text?: string(name='text'),
    }(name='output'),
    usage?: {
      inputTokens?: long(name='inputTokens', example='100'),
      outputTokens?: long(name='outputTokens', example='100'),
      totalTokens?: long(name='totalTokens', example='200'),
    }(name='usage'),
  }(name='payload'),
}

model RunMarketingInformationExtractResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunMarketingInformationExtractResponseBody(name='body'),
}

/**
 * @summary 营销信息抽取服务
 *
 * @param tmpReq RunMarketingInformationExtractRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RunMarketingInformationExtractResponse
 */
async function runMarketingInformationExtractWithOptions(workspaceId: string, tmpReq: RunMarketingInformationExtractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RunMarketingInformationExtractResponse {
  Util.validateModel(tmpReq);
  var request = new RunMarketingInformationExtractShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.sourceMaterials)) {
    request.sourceMaterialsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sourceMaterials, 'sourceMaterials', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.customPrompt)) {
    body['customPrompt'] = request.customPrompt;
  }
  if (!Util.isUnset(request.extractType)) {
    body['extractType'] = request.extractType;
  }
  if (!Util.isUnset(request.modelId)) {
    body['modelId'] = request.modelId;
  }
  if (!Util.isUnset(request.sourceMaterialsShrink)) {
    body['sourceMaterials'] = request.sourceMaterialsShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunMarketingInformationExtract',
    version = '2024-08-01',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(workspaceId)}/quanmiao/lightapp/runMarketingInformationExtract`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 营销信息抽取服务
 *
 * @param request RunMarketingInformationExtractRequest
 * @return RunMarketingInformationExtractResponse
 */
async function runMarketingInformationExtract(workspaceId: string, request: RunMarketingInformationExtractRequest): RunMarketingInformationExtractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return runMarketingInformationExtractWithOptions(workspaceId, request, headers, runtime);
}

model RunMarketingInformationWritingRequest {
  customPrompt?: string(name='customPrompt'),
  modelId?: string(name='modelId', example='qwen-max
qwen-plus'),
  sourceMaterial?: string(name='sourceMaterial'),
  writingType?: string(name='writingType'),
}

model RunMarketingInformationWritingResponseBody = {
  end?: boolean(name='end', example='2024-06-21T10:29:52+08:00'),
  header?: {
    event?: string(name='event', example='result-generated'),
    eventInfo?: string(name='eventInfo'),
    requestId?: string(name='requestId', example='436BC5AE-0573-59D8-9803-6B5FDCD3BBA1'),
    sessionId?: string(name='sessionId', example='uqubxgqzlnf4exfektij032lgb3yvix678p232n56387aqxdo4uutdt9wstqzovvz6j3ho7wnbgye785u79yn5q3euqmsvzmqdn3nmfq2826oscjvsi43kof8b8uxufpp1x97jjukk6jd3183hy8ni6hqpskuhuascpd'),
    taskId?: string(name='taskId', example='13312125943232'),
    traceId?: string(name='traceId', example='213e20e517049392478441155e8b2a'),
  }(name='header'),
  payload?: {
    output?: {
      text?: string(name='text'),
    }(name='output'),
    usage?: {
      inputTokens?: long(name='inputTokens', example='100'),
      outputTokens?: long(name='outputTokens', example='100'),
      totalTokens?: long(name='totalTokens', example='200'),
    }(name='usage'),
  }(name='payload'),
}

model RunMarketingInformationWritingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunMarketingInformationWritingResponseBody(name='body'),
}

/**
 * @summary 营销文案写作服务
 *
 * @param request RunMarketingInformationWritingRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RunMarketingInformationWritingResponse
 */
async function runMarketingInformationWritingWithOptions(workspaceId: string, request: RunMarketingInformationWritingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RunMarketingInformationWritingResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.customPrompt)) {
    body['customPrompt'] = request.customPrompt;
  }
  if (!Util.isUnset(request.modelId)) {
    body['modelId'] = request.modelId;
  }
  if (!Util.isUnset(request.sourceMaterial)) {
    body['sourceMaterial'] = request.sourceMaterial;
  }
  if (!Util.isUnset(request.writingType)) {
    body['writingType'] = request.writingType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunMarketingInformationWriting',
    version = '2024-08-01',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(workspaceId)}/quanmiao/lightapp/runMarketingInformationWriting`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 营销文案写作服务
 *
 * @param request RunMarketingInformationWritingRequest
 * @return RunMarketingInformationWritingResponse
 */
async function runMarketingInformationWriting(workspaceId: string, request: RunMarketingInformationWritingRequest): RunMarketingInformationWritingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return runMarketingInformationWritingWithOptions(workspaceId, request, headers, runtime);
}

model RunStyleWritingRequest {
  learningSamples?: [ string ](name='learningSamples', description='This parameter is required.'),
  referenceMaterials?: [ string ](name='referenceMaterials', description='This parameter is required.'),
  styleFeature?: string(name='styleFeature'),
  writingTheme?: string(name='writingTheme', description='This parameter is required.'),
}

model RunStyleWritingShrinkRequest {
  learningSamplesShrink?: string(name='learningSamples', description='This parameter is required.'),
  referenceMaterialsShrink?: string(name='referenceMaterials', description='This parameter is required.'),
  styleFeature?: string(name='styleFeature'),
  writingTheme?: string(name='writingTheme', description='This parameter is required.'),
}

model RunStyleWritingResponseBody = {
  end?: boolean(name='end', example='true'),
  header?: {
    errorCode?: string(name='errorCode', example='403'),
    errorMessage?: string(name='errorMessage', example='Pop sign mismatch, please check log.'),
    event?: string(name='event', example='task-progress-start-generating'),
    eventInfo?: string(name='eventInfo'),
    requestId?: string(name='requestId', example='0EB27AE3-CA53-5FAE-83C6-EE66CA4DF5DF'),
    sessionId?: string(name='sessionId', example='3cd10828-0e42-471c-8f1a-931cde20b035'),
    taskId?: string(name='taskId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
    traceId?: string(name='traceId', example='2150451a17191950923411783e2927'),
  }(name='header', example='{"event":"task-progress-start-generating","sessionId":"3cd10828-0e42-471c-8f1a-931cde20b035","taskId":"d3be9981-ca2d-4e17-bf31-1c0a628e9f99","traceId":"66bef4a7f5d61ff3c43f3b710574e175"}'),
  payload?: {
    output?: {
      text?: string(name='text'),
    }(name='output'),
    usage?: {
      inputTokens?: long(name='inputTokens', example='100'),
      outputTokens?: long(name='outputTokens', example='100'),
      totalTokens?: long(name='totalTokens', example='200'),
    }(name='usage', example='{
        "inputTokens": 1816,
        "outputTokens": 96,
        "totalTokens": 1912
    }'),
  }(name='payload'),
}

model RunStyleWritingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunStyleWritingResponseBody(name='body'),
}

/**
 * @summary 文体学习和写作推理服务
 *
 * @param tmpReq RunStyleWritingRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RunStyleWritingResponse
 */
async function runStyleWritingWithOptions(workspaceId: string, tmpReq: RunStyleWritingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RunStyleWritingResponse {
  Util.validateModel(tmpReq);
  var request = new RunStyleWritingShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.learningSamples)) {
    request.learningSamplesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.learningSamples, 'learningSamples', 'json');
  }
  if (!Util.isUnset(tmpReq.referenceMaterials)) {
    request.referenceMaterialsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.referenceMaterials, 'referenceMaterials', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.learningSamplesShrink)) {
    body['learningSamples'] = request.learningSamplesShrink;
  }
  if (!Util.isUnset(request.referenceMaterialsShrink)) {
    body['referenceMaterials'] = request.referenceMaterialsShrink;
  }
  if (!Util.isUnset(request.styleFeature)) {
    body['styleFeature'] = request.styleFeature;
  }
  if (!Util.isUnset(request.writingTheme)) {
    body['writingTheme'] = request.writingTheme;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunStyleWriting',
    version = '2024-08-01',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(workspaceId)}/quanmiao/lightapp/runStyleWriting`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 文体学习和写作推理服务
 *
 * @param request RunStyleWritingRequest
 * @return RunStyleWritingResponse
 */
async function runStyleWriting(workspaceId: string, request: RunStyleWritingRequest): RunStyleWritingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return runStyleWritingWithOptions(workspaceId, request, headers, runtime);
}

model RunVideoAnalysisRequest {
  generateOptions?: [ string ](name='generateOptions'),
  modelCustomPromptTemplate?: string(name='modelCustomPromptTemplate'),
  modelCustomPromptTemplateId?: string(name='modelCustomPromptTemplateId', example='PlotDetail'),
  modelId?: string(name='modelId', example='qwen-max'),
  originalSessionId?: string(name='originalSessionId', example='a3d1c2ac-f086-4a21-9069-f5631542f5ax'),
  taskId?: string(name='taskId', example='a3d1c2ac-f086-4a21-9069-f5631542f5a2'),
  videoModelCustomPromptTemplate?: string(name='videoModelCustomPromptTemplate'),
  videoModelId?: string(name='videoModelId', example='qwen-vl-max'),
  videoUrl?: string(name='videoUrl', example='http://xxxx.mp4'),
}

model RunVideoAnalysisShrinkRequest {
  generateOptionsShrink?: string(name='generateOptions'),
  modelCustomPromptTemplate?: string(name='modelCustomPromptTemplate'),
  modelCustomPromptTemplateId?: string(name='modelCustomPromptTemplateId', example='PlotDetail'),
  modelId?: string(name='modelId', example='qwen-max'),
  originalSessionId?: string(name='originalSessionId', example='a3d1c2ac-f086-4a21-9069-f5631542f5ax'),
  taskId?: string(name='taskId', example='a3d1c2ac-f086-4a21-9069-f5631542f5a2'),
  videoModelCustomPromptTemplate?: string(name='videoModelCustomPromptTemplate'),
  videoModelId?: string(name='videoModelId', example='qwen-vl-max'),
  videoUrl?: string(name='videoUrl', example='http://xxxx.mp4'),
}

model RunVideoAnalysisResponseBody = {
  header?: {
    errorCode?: string(name='errorCode', example='InvalidParam'),
    errorMessage?: string(name='errorMessage', example='Pop sign mismatch, please check log.'),
    event?: string(name='event', example='task-progress-start-generating'),
    eventInfo?: string(name='eventInfo'),
    sessionId?: string(name='sessionId', example='xxx'),
    taskId?: string(name='taskId', example='xxx'),
    traceId?: string(name='traceId', example='2150432017236011824686132ecdbc'),
  }(name='header'),
  payload?: {
    output?: {
      videoAnalysisResult?: {
        generateFinished?: boolean(name='generateFinished', example='true'),
        text?: string(name='text'),
        usage?: {
          inputTokens?: long(name='inputTokens', example='1'),
          outputTokens?: long(name='outputTokens', example='1'),
          totalTokens?: long(name='totalTokens', example='1'),
        }(name='usage'),
        videoShotAnalysisResults?: [ 
          {
            endTime?: long(name='endTime', example='10000'),
            startTime?: long(name='startTime', example='1000'),
            text?: string(name='text'),
          }
        ](name='videoShotAnalysisResults'),
      }(name='videoAnalysisResult'),
      videoCaptionResult?: {
        generateFinished?: boolean(name='generateFinished', example='true'),
        videoCaptions?: [ 
          {
            endTime?: long(name='endTime', example='1710432000000'),
            endTimeFormat?: string(name='endTimeFormat', example='00:01'),
            startTime?: long(name='startTime', example='0'),
            startTimeFormat?: string(name='startTimeFormat', example='00:01'),
            text?: string(name='text', example='xxx'),
          }
        ](name='videoCaptions'),
      }(name='videoCaptionResult'),
      videoGenerateResult?: {
        generateFinished?: boolean(name='generateFinished', example='true'),
        text?: string(name='text'),
        usage?: {
          inputTokens?: long(name='inputTokens', example='1'),
          outputTokens?: long(name='outputTokens', example='1'),
          totalTokens?: long(name='totalTokens', example='1'),
        }(name='usage'),
      }(name='videoGenerateResult'),
      videoMindMappingGenerateResult?: {
        generateFinished?: boolean(name='generateFinished', example='true'),
        text?: string(name='text'),
        usage?: {
          inputTokens?: long(name='inputTokens', example='1'),
          outputTokens?: long(name='outputTokens', example='1'),
          totalTokens?: long(name='totalTokens', example='1'),
        }(name='usage'),
        videoMindMappings?: [ 
          {
            childNodes?: [ 
              {
                childNodes?: [ 
                  {
                    name?: string(name='name'),
                  }
                ](name='childNodes'),
                name?: string(name='name'),
              }
            ](name='childNodes'),
            name?: string(name='name'),
          }
        ](name='videoMindMappings'),
      }(name='videoMindMappingGenerateResult'),
      videoTitleGenerateResult?: {
        generateFinished?: boolean(name='generateFinished', example='true'),
        text?: string(name='text'),
        usage?: {
          inputTokens?: long(name='inputTokens', example='1'),
          outputTokens?: long(name='outputTokens', example='1'),
          totalTokens?: long(name='totalTokens', example='2'),
        }(name='usage'),
      }(name='videoTitleGenerateResult'),
    }(name='output'),
  }(name='payload'),
  requestId?: string(name='requestId', example='117F5ABE-CF02-5502-9A3F-E56BC9081A64'),
}

model RunVideoAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunVideoAnalysisResponseBody(name='body'),
}

/**
 * @summary 轻应用-视频理解
 *
 * @param tmpReq RunVideoAnalysisRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RunVideoAnalysisResponse
 */
async function runVideoAnalysisWithOptions(workspaceId: string, tmpReq: RunVideoAnalysisRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RunVideoAnalysisResponse {
  Util.validateModel(tmpReq);
  var request = new RunVideoAnalysisShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.generateOptions)) {
    request.generateOptionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.generateOptions, 'generateOptions', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.generateOptionsShrink)) {
    body['generateOptions'] = request.generateOptionsShrink;
  }
  if (!Util.isUnset(request.modelCustomPromptTemplate)) {
    body['modelCustomPromptTemplate'] = request.modelCustomPromptTemplate;
  }
  if (!Util.isUnset(request.modelCustomPromptTemplateId)) {
    body['modelCustomPromptTemplateId'] = request.modelCustomPromptTemplateId;
  }
  if (!Util.isUnset(request.modelId)) {
    body['modelId'] = request.modelId;
  }
  if (!Util.isUnset(request.originalSessionId)) {
    body['originalSessionId'] = request.originalSessionId;
  }
  if (!Util.isUnset(request.taskId)) {
    body['taskId'] = request.taskId;
  }
  if (!Util.isUnset(request.videoModelCustomPromptTemplate)) {
    body['videoModelCustomPromptTemplate'] = request.videoModelCustomPromptTemplate;
  }
  if (!Util.isUnset(request.videoModelId)) {
    body['videoModelId'] = request.videoModelId;
  }
  if (!Util.isUnset(request.videoUrl)) {
    body['videoUrl'] = request.videoUrl;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunVideoAnalysis',
    version = '2024-08-01',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(workspaceId)}/quanmiao/lightapp/runVideoAnalysis`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 轻应用-视频理解
 *
 * @param request RunVideoAnalysisRequest
 * @return RunVideoAnalysisResponse
 */
async function runVideoAnalysis(workspaceId: string, request: RunVideoAnalysisRequest): RunVideoAnalysisResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return runVideoAnalysisWithOptions(workspaceId, request, headers, runtime);
}

