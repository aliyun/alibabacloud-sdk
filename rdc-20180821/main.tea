/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  

  checkConfig(config);
  @endpoint = getEndpoint('rdc', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddEnterpriseMemberRequest {
  instanceId?: string(name='InstanceId'),
  staffId?: string(name='StaffId'),
  operator?: string(name='Operator'),
}

model AddEnterpriseMemberResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: boolean(name='Data'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model AddEnterpriseMemberResponse = {
  headers: map[string]string(name='headers'),
  body: AddEnterpriseMemberResponseBody(name='body'),
}

async function addEnterpriseMemberWithOptions(request: AddEnterpriseMemberRequest, runtime: Util.RuntimeOptions): AddEnterpriseMemberResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddEnterpriseMember', '2018-08-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addEnterpriseMember(request: AddEnterpriseMemberRequest): AddEnterpriseMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return addEnterpriseMemberWithOptions(request, runtime);
}

model AddRamMemberRequest {
  corpIdentifier?: string(name='CorpIdentifier'),
  staffIdentifier?: string(name='StaffIdentifier'),
}

model AddRamMemberResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ string ](name='Data'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model AddRamMemberResponse = {
  headers: map[string]string(name='headers'),
  body: AddRamMemberResponseBody(name='body'),
}

async function addRamMemberWithOptions(request: AddRamMemberRequest, runtime: Util.RuntimeOptions): AddRamMemberResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddRamMember', '2018-08-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addRamMember(request: AddRamMemberRequest): AddRamMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return addRamMemberWithOptions(request, runtime);
}

model ApproveJoinCompanyRequest {
  corpIdentifier?: string(name='CorpIdentifier'),
  applicationIds?: string(name='ApplicationIds'),
}

model ApproveJoinCompanyResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ string ](name='Data'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model ApproveJoinCompanyResponse = {
  headers: map[string]string(name='headers'),
  body: ApproveJoinCompanyResponseBody(name='body'),
}

async function approveJoinCompanyWithOptions(request: ApproveJoinCompanyRequest, runtime: Util.RuntimeOptions): ApproveJoinCompanyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ApproveJoinCompany', '2018-08-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function approveJoinCompany(request: ApproveJoinCompanyRequest): ApproveJoinCompanyResponse {
  var runtime = new Util.RuntimeOptions{};
  return approveJoinCompanyWithOptions(request, runtime);
}

model CreateEnterpriseRequest {
  name?: string(name='Name'),
  description?: string(name='Description'),
  emails?: map[string]any(name='Emails'),
  domain?: string(name='Domain'),
  creatorStaffId?: string(name='CreatorStaffId'),
}

model CreateEnterpriseShrinkRequest {
  name?: string(name='Name'),
  description?: string(name='Description'),
  emailsShrink?: string(name='Emails'),
  domain?: string(name='Domain'),
  creatorStaffId?: string(name='CreatorStaffId'),
}

model CreateEnterpriseResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    status?: int32(name='Status'),
    type?: int32(name='Type'),
    prohibitCode?: int32(name='ProhibitCode'),
    identifier?: string(name='Identifier'),
    name?: string(name='Name'),
    id?: long(name='Id'),
  }(name='Data'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model CreateEnterpriseResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEnterpriseResponseBody(name='body'),
}

async function createEnterpriseWithOptions(tmpReq: CreateEnterpriseRequest, runtime: Util.RuntimeOptions): CreateEnterpriseResponse {
  Util.validateModel(tmpReq);
  var request = new CreateEnterpriseShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.emails)) {
    request.emailsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.emails, 'Emails', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateEnterprise', '2018-08-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createEnterprise(request: CreateEnterpriseRequest): CreateEnterpriseResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEnterpriseWithOptions(request, runtime);
}

model CreateWorkitemRequest {
  corpIdentifier?: string(name='CorpIdentifier'),
  author?: string(name='Author'),
  assignedTo?: string(name='AssignedTo'),
  templateId?: int32(name='TemplateId'),
  subject?: string(name='Subject'),
  description?: string(name='Description'),
  stamp?: string(name='Stamp'),
  AKProjectId?: int32(name='AKProjectId'),
  cfList?: string(name='CfList'),
  verifier?: string(name='Verifier'),
  priorityId?: int32(name='PriorityId'),
  seriousLevelId?: int32(name='SeriousLevelId'),
  watcherUsers?: string(name='WatcherUsers'),
  moduleIds?: string(name='ModuleIds'),
}

model CreateWorkitemResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: int32(name='Data'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model CreateWorkitemResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWorkitemResponseBody(name='body'),
}

async function createWorkitemWithOptions(request: CreateWorkitemRequest, runtime: Util.RuntimeOptions): CreateWorkitemResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateWorkitem', '2018-08-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createWorkitem(request: CreateWorkitemRequest): CreateWorkitemResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWorkitemWithOptions(request, runtime);
}

model GetBindedUserByDingIdRequest {
  dingId?: string(name='DingId'),
}

model GetBindedUserByDingIdResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    uuid?: string(name='Uuid'),
    guid?: string(name='Guid'),
    dingtalkUser?: {
      dingtalkUserId?: int32(name='DingtalkUserId'),
      dingId?: string(name='DingId'),
      unionId?: string(name='UnionId'),
      nick?: string(name='Nick'),
      codeUserName?: string(name='CodeUserName'),
      id?: int32(name='Id'),
    }(name='DingtalkUser'),
    userProfileDTO?: {
      dataSource?: string(name='DataSource'),
      avatar?: string(name='Avatar'),
      email?: string(name='Email'),
      mobile?: string(name='Mobile'),
      userId?: int32(name='UserId'),
      createdAt?: long(name='CreatedAt'),
      englishName?: string(name='EnglishName'),
      nickName?: string(name='NickName'),
      name?: string(name='Name'),
    }(name='UserProfileDTO'),
    nickName?: string(name='NickName'),
    mainAccountType?: string(name='MainAccountType'),
    aliyunUser?: {
      email?: string(name='Email'),
      havanaId?: string(name='HavanaId'),
      taobaoNick?: string(name='TaobaoNick'),
      kp?: string(name='Kp'),
      realname?: string(name='Realname'),
      nickName?: string(name='NickName'),
      accountStructure?: int32(name='AccountStructure'),
      aliyunId?: string(name='AliyunId'),
      id?: int32(name='Id'),
    }(name='AliyunUser'),
    isValid?: boolean(name='IsValid'),
    id?: int32(name='Id'),
  }(name='Data'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model GetBindedUserByDingIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetBindedUserByDingIdResponseBody(name='body'),
}

async function getBindedUserByDingIdWithOptions(request: GetBindedUserByDingIdRequest, runtime: Util.RuntimeOptions): GetBindedUserByDingIdResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetBindedUserByDingId', '2018-08-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getBindedUserByDingId(request: GetBindedUserByDingIdRequest): GetBindedUserByDingIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBindedUserByDingIdWithOptions(request, runtime);
}

model GetChangeLogRequest {
  targetType?: string(name='TargetType'),
  targetIds?: map[string]any(name='TargetIds'),
  corpIdentifier?: string(name='CorpIdentifier'),
}

model GetChangeLogShrinkRequest {
  targetType?: string(name='TargetType'),
  targetIdsShrink?: string(name='TargetIds'),
  corpIdentifier?: string(name='CorpIdentifier'),
}

model GetChangeLogResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      oldValue?: string(name='OldValue'),
      propertyType?: string(name='PropertyType'),
      propertyKey?: string(name='PropertyKey'),
      targetId?: int32(name='TargetId'),
      other?: string(name='Other'),
      newValue?: string(name='NewValue'),
      targetType?: string(name='TargetType'),
    }
  ](name='Data'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model GetChangeLogResponse = {
  headers: map[string]string(name='headers'),
  body: GetChangeLogResponseBody(name='body'),
}

async function getChangeLogWithOptions(tmpReq: GetChangeLogRequest, runtime: Util.RuntimeOptions): GetChangeLogResponse {
  Util.validateModel(tmpReq);
  var request = new GetChangeLogShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.targetIds)) {
    request.targetIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.targetIds, 'TargetIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetChangeLog', '2018-08-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getChangeLog(request: GetChangeLogRequest): GetChangeLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getChangeLogWithOptions(request, runtime);
}

model GetCustomFieldsByTemplateIdRequest {
  AKProjectId?: int32(name='AKProjectId'),
  templateId?: int32(name='TemplateId'),
  corpIdentifier?: string(name='CorpIdentifier'),
}

model GetCustomFieldsByTemplateIdResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      type?: string(name='Type'),
      editable?: boolean(name='Editable'),
      createdAt?: long(name='CreatedAt'),
      isRemember?: boolean(name='IsRemember'),
      isDelete?: boolean(name='IsDelete'),
      defaultValue?: string(name='DefaultValue'),
      maxLength?: int32(name='MaxLength'),
      fieldFormat?: string(name='FieldFormat'),
      description?: string(name='Description'),
      dynamic?: boolean(name='Dynamic'),
      isRequired?: boolean(name='IsRequired'),
      nameI18N?: string(name='NameI18N'),
      possibleValues?: string(name='PossibleValues'),
      minLength?: int32(name='MinLength'),
      updatedAt?: long(name='UpdatedAt'),
      name?: string(name='Name'),
      other?: string(name='Other'),
      id?: int32(name='Id'),
    }
  ](name='Data'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model GetCustomFieldsByTemplateIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetCustomFieldsByTemplateIdResponseBody(name='body'),
}

async function getCustomFieldsByTemplateIdWithOptions(request: GetCustomFieldsByTemplateIdRequest, runtime: Util.RuntimeOptions): GetCustomFieldsByTemplateIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetCustomFieldsByTemplateId', '2018-08-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getCustomFieldsByTemplateId(request: GetCustomFieldsByTemplateIdRequest): GetCustomFieldsByTemplateIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCustomFieldsByTemplateIdWithOptions(request, runtime);
}

model GetIssueByIdRequest {
  id?: int32(name='Id'),
  corpIdentifier?: string(name='CorpIdentifier'),
}

model GetIssueByIdResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    skipCollab?: boolean(name='SkipCollab'),
    sendWangwang?: boolean(name='SendWangwang'),
    versionList?: string(name='VersionList'),
    akProjectId?: int32(name='AkProjectId'),
    userId?: int32(name='UserId'),
    idPath?: string(name='IdPath'),
    ignoreIntegrate?: boolean(name='IgnoreIntegrate'),
    attachmentIds?: string(name='AttachmentIds'),
    commitDate?: long(name='CommitDate'),
    updateStatusAt?: long(name='UpdateStatusAt'),
    trackers?: string(name='Trackers'),
    subject?: string(name='Subject'),
    userStaffId?: string(name='UserStaffId'),
    attachmentList?: string(name='AttachmentList'),
    verifierId?: int32(name='VerifierId'),
    ignoreCheck?: boolean(name='IgnoreCheck'),
    moduleList?: string(name='ModuleList'),
    attachmented?: boolean(name='Attachmented'),
    seriousLevelId?: int32(name='SeriousLevelId'),
    tagIdList?: string(name='TagIdList'),
    watched?: boolean(name='Watched'),
    assignedTo?: string(name='AssignedTo'),
    assignedToIds?: string(name='AssignedToIds'),
    priorityId?: int32(name='PriorityId'),
    recordChangeLog?: boolean(name='RecordChangeLog'),
    updatedAt?: long(name='UpdatedAt'),
    templateId?: int32(name='TemplateId'),
    verifier?: string(name='Verifier'),
    status?: string(name='Status'),
    relatedUserIds?: string(name='RelatedUserIds'),
    relatedAKProjectIds?: string(name='RelatedAKProjectIds'),
    relatedAKProjectGuids?: string(name='RelatedAKProjectGuids'),
    createdAt?: long(name='CreatedAt'),
    assignedToIdList?: string(name='AssignedToIdList'),
    cfsList?: [ 
      {
        type?: string(name='Type'),
        value?: string(name='Value'),
        name?: string(name='Name'),
        id?: string(name='Id'),
      }
    ](name='CfsList'),
    priority?: string(name='Priority'),
    statusStage?: int32(name='StatusStage'),
    assignedToStaffId?: string(name='AssignedToStaffId'),
    parentId?: int32(name='ParentId'),
    description?: string(name='Description'),
    logicalStatus?: string(name='LogicalStatus'),
    versionIds?: string(name='VersionIds'),
    seriousLevel?: string(name='SeriousLevel'),
    statusId?: int32(name='StatusId'),
    stamp?: string(name='Stamp'),
    user?: string(name='User'),
    trackerIds?: string(name='TrackerIds'),
    assignedToId?: int32(name='AssignedToId'),
    changeLogList?: string(name='ChangeLogList'),
    issueTypeId?: int32(name='IssueTypeId'),
    regionId?: int32(name='RegionId'),
    guid?: string(name='Guid'),
    assignedToMaps?: string(name='AssignedToMaps'),
    blackListNotice?: string(name='BlackListNotice'),
    moduleUpdated?: boolean(name='ModuleUpdated'),
    projectIds?: string(name='ProjectIds'),
    commentList?: string(name='CommentList'),
    verifierStaffId?: string(name='VerifierStaffId'),
    moduleIds?: string(name='ModuleIds'),
    id?: int32(name='Id'),
  }(name='Data'),
  code?: int32(name='Code'),
  success?: string(name='Success'),
}

model GetIssueByIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetIssueByIdResponseBody(name='body'),
}

async function getIssueByIdWithOptions(request: GetIssueByIdRequest, runtime: Util.RuntimeOptions): GetIssueByIdResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetIssueById', '2018-08-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getIssueById(request: GetIssueByIdRequest): GetIssueByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getIssueByIdWithOptions(request, runtime);
}

model GetJoinCodeRequest {
  corpIdentifier?: string(name='CorpIdentifier'),
}

model GetJoinCodeResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    code?: string(name='Code'),
  }(name='Data'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model GetJoinCodeResponse = {
  headers: map[string]string(name='headers'),
  body: GetJoinCodeResponseBody(name='body'),
}

async function getJoinCodeWithOptions(request: GetJoinCodeRequest, runtime: Util.RuntimeOptions): GetJoinCodeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetJoinCode', '2018-08-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getJoinCode(request: GetJoinCodeRequest): GetJoinCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getJoinCodeWithOptions(request, runtime);
}

model GetProjectMembersRequest {
  corpIdentifier?: string(name='CorpIdentifier'),
  projectId?: int32(name='ProjectId'),
  staffId?: string(name='StaffId'),
}

model GetProjectMembersResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      identifier?: string(name='Identifier'),
      users?: [ 
        {
          avatar?: string(name='Avatar'),
          email?: string(name='Email'),
          realName?: string(name='RealName'),
          staffId?: string(name='StaffId'),
          nickName?: string(name='NickName'),
          id?: int32(name='Id'),
        }
      ](name='Users'),
      name?: string(name='Name'),
      id?: int32(name='Id'),
    }
  ](name='Data'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model GetProjectMembersResponse = {
  headers: map[string]string(name='headers'),
  body: GetProjectMembersResponseBody(name='body'),
}

async function getProjectMembersWithOptions(request: GetProjectMembersRequest, runtime: Util.RuntimeOptions): GetProjectMembersResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetProjectMembers', '2018-08-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getProjectMembers(request: GetProjectMembersRequest): GetProjectMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProjectMembersWithOptions(request, runtime);
}

model GetUserByAliyunPkRequest {
  pk?: string(name='Pk'),
}

model GetUserByAliyunPkResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    uuid?: string(name='Uuid'),
    guid?: string(name='Guid'),
    dingtalkUser?: {
      dingtalkUserId?: int32(name='DingtalkUserId'),
      dingId?: string(name='DingId'),
      unionId?: string(name='UnionId'),
      nick?: string(name='Nick'),
      codeUserName?: string(name='CodeUserName'),
      id?: int32(name='Id'),
    }(name='DingtalkUser'),
    userProfileDTO?: {
      dataSource?: string(name='DataSource'),
      avatar?: string(name='Avatar'),
      email?: string(name='Email'),
      mobile?: string(name='Mobile'),
      userId?: int32(name='UserId'),
      createdAt?: long(name='CreatedAt'),
      englishName?: string(name='EnglishName'),
      nickName?: string(name='NickName'),
      name?: string(name='Name'),
    }(name='UserProfileDTO'),
    nickName?: string(name='NickName'),
    mainAccountType?: string(name='MainAccountType'),
    aliyunUser?: {
      email?: string(name='Email'),
      havanaId?: string(name='HavanaId'),
      taobaoNick?: string(name='TaobaoNick'),
      kp?: string(name='Kp'),
      realname?: string(name='Realname'),
      nickName?: string(name='NickName'),
      accountStructure?: int32(name='AccountStructure'),
      aliyunId?: string(name='AliyunId'),
      id?: int32(name='Id'),
    }(name='AliyunUser'),
    isValid?: boolean(name='IsValid'),
    id?: int32(name='Id'),
  }(name='Data'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model GetUserByAliyunPkResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserByAliyunPkResponseBody(name='body'),
}

async function getUserByAliyunPkWithOptions(request: GetUserByAliyunPkRequest, runtime: Util.RuntimeOptions): GetUserByAliyunPkResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetUserByAliyunPk', '2018-08-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getUserByAliyunPk(request: GetUserByAliyunPkRequest): GetUserByAliyunPkResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserByAliyunPkWithOptions(request, runtime);
}

model GetWorkitemByIdRequest {
  id?: int32(name='Id'),
  corpIdentifier?: string(name='CorpIdentifier'),
}

model GetWorkitemByIdResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    skipCollab?: boolean(name='SkipCollab'),
    sendWangwang?: boolean(name='SendWangwang'),
    versionList?: string(name='VersionList'),
    akProjectId?: int32(name='AkProjectId'),
    userId?: int32(name='UserId'),
    idPath?: string(name='IdPath'),
    ignoreIntegrate?: boolean(name='IgnoreIntegrate'),
    attachmentIds?: string(name='AttachmentIds'),
    commitDate?: long(name='CommitDate'),
    updateStatusAt?: long(name='UpdateStatusAt'),
    trackers?: string(name='Trackers'),
    subject?: string(name='Subject'),
    userStaffId?: string(name='UserStaffId'),
    attachmentList?: string(name='AttachmentList'),
    verifierId?: int32(name='VerifierId'),
    ignoreCheck?: boolean(name='IgnoreCheck'),
    moduleList?: string(name='ModuleList'),
    attachmented?: boolean(name='Attachmented'),
    seriousLevelId?: int32(name='SeriousLevelId'),
    tagIdList?: string(name='TagIdList'),
    watched?: boolean(name='Watched'),
    assignedTo?: string(name='AssignedTo'),
    assignedToIds?: string(name='AssignedToIds'),
    priorityId?: int32(name='PriorityId'),
    recordChangeLog?: boolean(name='RecordChangeLog'),
    updatedAt?: long(name='UpdatedAt'),
    templateId?: int32(name='TemplateId'),
    verifier?: string(name='Verifier'),
    status?: string(name='Status'),
    relatedUserIds?: string(name='RelatedUserIds'),
    relatedAKProjectIds?: string(name='RelatedAKProjectIds'),
    relatedAKProjectGuids?: string(name='RelatedAKProjectGuids'),
    createdAt?: long(name='CreatedAt'),
    assignedToIdList?: string(name='AssignedToIdList'),
    cfsList?: [ 
      {
        type?: string(name='Type'),
        value?: string(name='Value'),
        name?: string(name='Name'),
        id?: string(name='Id'),
      }
    ](name='CfsList'),
    priority?: string(name='Priority'),
    statusStage?: int32(name='StatusStage'),
    assignedToStaffId?: string(name='AssignedToStaffId'),
    parentId?: int32(name='ParentId'),
    description?: string(name='Description'),
    logicalStatus?: string(name='LogicalStatus'),
    versionIds?: string(name='VersionIds'),
    seriousLevel?: string(name='SeriousLevel'),
    statusId?: int32(name='StatusId'),
    stamp?: string(name='Stamp'),
    user?: string(name='User'),
    trackerIds?: string(name='TrackerIds'),
    assignedToId?: int32(name='AssignedToId'),
    changeLogList?: string(name='ChangeLogList'),
    issueTypeId?: int32(name='IssueTypeId'),
    regionId?: int32(name='RegionId'),
    guid?: string(name='Guid'),
    assignedToMaps?: string(name='AssignedToMaps'),
    blackListNotice?: string(name='BlackListNotice'),
    moduleUpdated?: boolean(name='ModuleUpdated'),
    projectIds?: string(name='ProjectIds'),
    commentList?: string(name='CommentList'),
    verifierStaffId?: string(name='VerifierStaffId'),
    moduleIds?: string(name='ModuleIds'),
    id?: int32(name='Id'),
  }(name='Data'),
  code?: int32(name='Code'),
  success?: string(name='Success'),
}

model GetWorkitemByIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetWorkitemByIdResponseBody(name='body'),
}

async function getWorkitemByIdWithOptions(request: GetWorkitemByIdRequest, runtime: Util.RuntimeOptions): GetWorkitemByIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetWorkitemById', '2018-08-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getWorkitemById(request: GetWorkitemByIdRequest): GetWorkitemByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWorkitemByIdWithOptions(request, runtime);
}

model JoinCompanyRequest {
  code?: string(name='Code'),
}

model JoinCompanyResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    applicationId?: string(name='ApplicationId'),
  }(name='Data'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model JoinCompanyResponse = {
  headers: map[string]string(name='headers'),
  body: JoinCompanyResponseBody(name='body'),
}

async function joinCompanyWithOptions(request: JoinCompanyRequest, runtime: Util.RuntimeOptions): JoinCompanyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('JoinCompany', '2018-08-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function joinCompany(request: JoinCompanyRequest): JoinCompanyResponse {
  var runtime = new Util.RuntimeOptions{};
  return joinCompanyWithOptions(request, runtime);
}

model SearchProjectsByRegionRequest {
  corpIdentifier?: string(name='CorpIdentifier'),
  region?: string(name='Region'),
  status?: string(name='Status'),
  toPage?: int32(name='ToPage'),
  pageSize?: int32(name='PageSize'),
}

model SearchProjectsByRegionResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      status?: string(name='Status'),
      type?: string(name='Type'),
      aoneType?: string(name='AoneType'),
      stamp?: string(name='Stamp'),
      fullName?: string(name='FullName'),
      icons?: [ string ](name='Icons'),
      idPath?: string(name='IdPath'),
      mode?: string(name='Mode'),
      aoneId?: int32(name='AoneId'),
      parentId?: int32(name='ParentId'),
      description?: string(name='Description'),
      customFieldMap?: [ string ](name='CustomFieldMap'),
      name?: string(name='Name'),
      id?: int32(name='Id'),
    }
  ](name='Data'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model SearchProjectsByRegionResponse = {
  headers: map[string]string(name='headers'),
  body: SearchProjectsByRegionResponseBody(name='body'),
}

async function searchProjectsByRegionWithOptions(request: SearchProjectsByRegionRequest, runtime: Util.RuntimeOptions): SearchProjectsByRegionResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('SearchProjectsByRegion', '2018-08-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function searchProjectsByRegion(request: SearchProjectsByRegionRequest): SearchProjectsByRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchProjectsByRegionWithOptions(request, runtime);
}

model SearchTestCaseRequest {
  pageSize?: int32(name='PageSize'),
  corpIdentifier?: string(name='CorpIdentifier'),
  akProjectId?: string(name='AkProjectId'),
  caseTag?: string(name='CaseTag'),
  pageNum?: string(name='PageNum'),
  createDateStart?: string(name='CreateDateStart'),
  createDateEnd?: string(name='CreateDateEnd'),
  updateDateStart?: string(name='UpdateDateStart'),
  updateDateEnd?: string(name='UpdateDateEnd'),
}

model SearchTestCaseResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    pageNum?: string(name='PageNum'),
    cases?: string(name='Cases'),
    pageSize?: string(name='PageSize'),
    pageTotal?: string(name='PageTotal'),
    totalCount?: string(name='TotalCount'),
  }(name='Data'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model SearchTestCaseResponse = {
  headers: map[string]string(name='headers'),
  body: SearchTestCaseResponseBody(name='body'),
}

async function searchTestCaseWithOptions(request: SearchTestCaseRequest, runtime: Util.RuntimeOptions): SearchTestCaseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SearchTestCase', '2018-08-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function searchTestCase(request: SearchTestCaseRequest): SearchTestCaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchTestCaseWithOptions(request, runtime);
}

model SearchWorkitemRequest {
  stamp?: string(name='Stamp'),
  AKProjectId?: int32(name='AKProjectId'),
  toPage?: int32(name='ToPage'),
  pageSize?: int32(name='PageSize'),
  corpIdentifier?: string(name='CorpIdentifier'),
  sprintId?: int32(name='SprintId'),
  createdAtStart?: string(name='CreatedAtStart'),
  createdAtEnd?: string(name='CreatedAtEnd'),
}

model SearchWorkitemResponseBody = {
  totalCount?: int32(name='TotalCount'),
  toPage?: int32(name='ToPage'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalPages?: int32(name='TotalPages'),
  data?: [ 
    {
      fixedUserId?: int32(name='FixedUserId'),
      sendWangwang?: boolean(name='SendWangwang'),
      skipCollab?: boolean(name='SkipCollab'),
      versionList?: string(name='VersionList'),
      akProjectId?: int32(name='AkProjectId'),
      projectId?: int32(name='ProjectId'),
      userId?: int32(name='UserId'),
      versionId?: int32(name='VersionId'),
      idPath?: string(name='IdPath'),
      ignoreIntegrate?: boolean(name='IgnoreIntegrate'),
      attachmentIds?: string(name='AttachmentIds'),
      commitDate?: long(name='CommitDate'),
      akVersionIds?: string(name='AkVersionIds'),
      region?: string(name='Region'),
      trackers?: string(name='Trackers'),
      subject?: string(name='Subject'),
      solution?: int32(name='Solution'),
      attachmentList?: string(name='AttachmentList'),
      userStaffId?: string(name='UserStaffId'),
      ignoreCheck?: boolean(name='IgnoreCheck'),
      akPaths?: string(name='AkPaths'),
      verifierId?: int32(name='VerifierId'),
      moduleList?: string(name='ModuleList'),
      attachmented?: boolean(name='Attachmented'),
      sourceId?: int32(name='SourceId'),
      seriousLevelId?: int32(name='SeriousLevelId'),
      tagIdList?: string(name='TagIdList'),
      watched?: boolean(name='Watched'),
      assignedTo?: string(name='AssignedTo'),
      assignedToIds?: string(name='AssignedToIds'),
      closedDuration?: int32(name='ClosedDuration'),
      priorityId?: int32(name='PriorityId'),
      recordChangeLog?: boolean(name='RecordChangeLog'),
      issueRelations?: string(name='IssueRelations'),
      updatedAt?: long(name='UpdatedAt'),
      templateId?: int32(name='TemplateId'),
      verifier?: string(name='Verifier'),
      status?: string(name='Status'),
      relatedUserIds?: string(name='RelatedUserIds'),
      relatedAKProjectGuids?: string(name='RelatedAKProjectGuids'),
      relatedAKProjectIds?: string(name='RelatedAKProjectIds'),
      watcherIdList?: string(name='WatcherIdList'),
      createdAt?: long(name='CreatedAt'),
      assignedToIdList?: string(name='AssignedToIdList'),
      priority?: string(name='Priority'),
      statusStage?: int32(name='StatusStage'),
      assignedToStaffId?: string(name='AssignedToStaffId'),
      parentId?: int32(name='ParentId'),
      logicalStatus?: string(name='LogicalStatus'),
      versionIds?: string(name='VersionIds'),
      scope?: int32(name='Scope'),
      seriousLevel?: string(name='SeriousLevel'),
      statusId?: int32(name='StatusId'),
      stamp?: string(name='Stamp'),
      user?: string(name='User'),
      source?: string(name='Source'),
      assignedToId?: int32(name='AssignedToId'),
      trackerIds?: string(name='TrackerIds'),
      issueTypeId?: int32(name='IssueTypeId'),
      changeLogList?: string(name='ChangeLogList'),
      fixedDuration?: int32(name='FixedDuration'),
      scopeUserIds?: string(name='ScopeUserIds'),
      devDuration?: int32(name='DevDuration'),
      linePath?: string(name='LinePath'),
      blackListNotice?: string(name='BlackListNotice'),
      projectIds?: string(name='ProjectIds'),
      testsuiteId?: int32(name='TestsuiteId'),
      moduleUpdated?: boolean(name='ModuleUpdated'),
      commentList?: string(name='CommentList'),
      sprintId?: int32(name='SprintId'),
      respondDuration?: int32(name='RespondDuration'),
      moduleIds?: string(name='ModuleIds'),
      verifierStaffId?: string(name='VerifierStaffId'),
      id?: int32(name='Id'),
    }
  ](name='Data'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model SearchWorkitemResponse = {
  headers: map[string]string(name='headers'),
  body: SearchWorkitemResponseBody(name='body'),
}

async function searchWorkitemWithOptions(request: SearchWorkitemRequest, runtime: Util.RuntimeOptions): SearchWorkitemResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SearchWorkitem', '2018-08-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function searchWorkitem(request: SearchWorkitemRequest): SearchWorkitemResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchWorkitemWithOptions(request, runtime);
}

model SearchWorkitemWithTotalCountRequest {
  stamp?: string(name='Stamp'),
  AKProjectId?: int32(name='AKProjectId'),
  toPage?: int32(name='ToPage'),
  pageSize?: int32(name='PageSize'),
  corpIdentifier?: string(name='CorpIdentifier'),
  sprintId?: int32(name='SprintId'),
}

model SearchWorkitemWithTotalCountResponseBody = {
  totalCount?: int32(name='TotalCount'),
  toPage?: int32(name='ToPage'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalPages?: int32(name='TotalPages'),
  data?: [ 
    {
      fixedUserId?: int32(name='FixedUserId'),
      sendWangwang?: boolean(name='SendWangwang'),
      skipCollab?: boolean(name='SkipCollab'),
      versionList?: string(name='VersionList'),
      akProjectId?: int32(name='AkProjectId'),
      projectId?: int32(name='ProjectId'),
      userId?: int32(name='UserId'),
      versionId?: int32(name='VersionId'),
      idPath?: string(name='IdPath'),
      ignoreIntegrate?: boolean(name='IgnoreIntegrate'),
      attachmentIds?: string(name='AttachmentIds'),
      commitDate?: long(name='CommitDate'),
      akVersionIds?: string(name='AkVersionIds'),
      region?: string(name='Region'),
      trackers?: string(name='Trackers'),
      subject?: string(name='Subject'),
      solution?: int32(name='Solution'),
      attachmentList?: string(name='AttachmentList'),
      userStaffId?: string(name='UserStaffId'),
      ignoreCheck?: boolean(name='IgnoreCheck'),
      akPaths?: string(name='AkPaths'),
      verifierId?: int32(name='VerifierId'),
      moduleList?: string(name='ModuleList'),
      attachmented?: boolean(name='Attachmented'),
      sourceId?: int32(name='SourceId'),
      seriousLevelId?: int32(name='SeriousLevelId'),
      tagIdList?: string(name='TagIdList'),
      watched?: boolean(name='Watched'),
      assignedTo?: string(name='AssignedTo'),
      assignedToIds?: string(name='AssignedToIds'),
      closedDuration?: int32(name='ClosedDuration'),
      priorityId?: int32(name='PriorityId'),
      recordChangeLog?: boolean(name='RecordChangeLog'),
      issueRelations?: string(name='IssueRelations'),
      updatedAt?: long(name='UpdatedAt'),
      templateId?: int32(name='TemplateId'),
      verifier?: string(name='Verifier'),
      status?: string(name='Status'),
      relatedUserIds?: string(name='RelatedUserIds'),
      relatedAKProjectGuids?: string(name='RelatedAKProjectGuids'),
      relatedAKProjectIds?: string(name='RelatedAKProjectIds'),
      watcherIdList?: string(name='WatcherIdList'),
      createdAt?: long(name='CreatedAt'),
      assignedToIdList?: string(name='AssignedToIdList'),
      priority?: string(name='Priority'),
      statusStage?: int32(name='StatusStage'),
      assignedToStaffId?: string(name='AssignedToStaffId'),
      parentId?: int32(name='ParentId'),
      logicalStatus?: string(name='LogicalStatus'),
      versionIds?: string(name='VersionIds'),
      scope?: int32(name='Scope'),
      seriousLevel?: string(name='SeriousLevel'),
      statusId?: int32(name='StatusId'),
      stamp?: string(name='Stamp'),
      user?: string(name='User'),
      source?: string(name='Source'),
      assignedToId?: int32(name='AssignedToId'),
      trackerIds?: string(name='TrackerIds'),
      issueTypeId?: int32(name='IssueTypeId'),
      changeLogList?: string(name='ChangeLogList'),
      fixedDuration?: int32(name='FixedDuration'),
      scopeUserIds?: string(name='ScopeUserIds'),
      devDuration?: int32(name='DevDuration'),
      linePath?: string(name='LinePath'),
      blackListNotice?: string(name='BlackListNotice'),
      projectIds?: string(name='ProjectIds'),
      testsuiteId?: int32(name='TestsuiteId'),
      moduleUpdated?: boolean(name='ModuleUpdated'),
      commentList?: string(name='CommentList'),
      sprintId?: int32(name='SprintId'),
      respondDuration?: int32(name='RespondDuration'),
      moduleIds?: string(name='ModuleIds'),
      verifierStaffId?: string(name='VerifierStaffId'),
      id?: int32(name='Id'),
    }
  ](name='Data'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model SearchWorkitemWithTotalCountResponse = {
  headers: map[string]string(name='headers'),
  body: SearchWorkitemWithTotalCountResponseBody(name='body'),
}

async function searchWorkitemWithTotalCountWithOptions(request: SearchWorkitemWithTotalCountRequest, runtime: Util.RuntimeOptions): SearchWorkitemWithTotalCountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SearchWorkitemWithTotalCount', '2018-08-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function searchWorkitemWithTotalCount(request: SearchWorkitemWithTotalCountRequest): SearchWorkitemWithTotalCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchWorkitemWithTotalCountWithOptions(request, runtime);
}

model SyncUserToRdcRequest {
  loginTicket?: string(name='LoginTicket'),
}

model SyncUserToRdcResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    isValid?: boolean(name='IsValid'),
  }(name='Data'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model SyncUserToRdcResponse = {
  headers: map[string]string(name='headers'),
  body: SyncUserToRdcResponseBody(name='body'),
}

async function syncUserToRdcWithOptions(request: SyncUserToRdcRequest, runtime: Util.RuntimeOptions): SyncUserToRdcResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SyncUserToRdc', '2018-08-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function syncUserToRdc(request: SyncUserToRdcRequest): SyncUserToRdcResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncUserToRdcWithOptions(request, runtime);
}

model UpdateWorkitemRequest {
  AKProjectId?: int32(name='AKProjectId'),
  corpIdentifier?: string(name='CorpIdentifier'),
  modifier?: string(name='Modifier'),
  assignedTo?: string(name='AssignedTo'),
  templateId?: int32(name='TemplateId'),
  subject?: string(name='Subject'),
  description?: string(name='Description'),
  stamp?: string(name='Stamp'),
  cfList?: map[string]any(name='CfList'),
  issueId?: int32(name='IssueId'),
  status?: string(name='Status'),
  priority?: string(name='Priority'),
  seriousLevel?: string(name='SeriousLevel'),
  verifier?: string(name='Verifier'),
  sprintId?: int32(name='SprintId'),
  ignoreCheck?: boolean(name='IgnoreCheck'),
  cfs?: map[string]any(name='Cfs'),
}

model UpdateWorkitemShrinkRequest {
  AKProjectId?: int32(name='AKProjectId'),
  corpIdentifier?: string(name='CorpIdentifier'),
  modifier?: string(name='Modifier'),
  assignedTo?: string(name='AssignedTo'),
  templateId?: int32(name='TemplateId'),
  subject?: string(name='Subject'),
  description?: string(name='Description'),
  stamp?: string(name='Stamp'),
  cfListShrink?: string(name='CfList'),
  issueId?: int32(name='IssueId'),
  status?: string(name='Status'),
  priority?: string(name='Priority'),
  seriousLevel?: string(name='SeriousLevel'),
  verifier?: string(name='Verifier'),
  sprintId?: int32(name='SprintId'),
  ignoreCheck?: boolean(name='IgnoreCheck'),
  cfsShrink?: string(name='Cfs'),
}

model UpdateWorkitemResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: boolean(name='Data'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model UpdateWorkitemResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateWorkitemResponseBody(name='body'),
}

async function updateWorkitemWithOptions(tmpReq: UpdateWorkitemRequest, runtime: Util.RuntimeOptions): UpdateWorkitemResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateWorkitemShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.cfList)) {
    request.cfListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.cfList, 'CfList', 'json');
  }
  if (!Util.isUnset(tmpReq.cfs)) {
    request.cfsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.cfs, 'Cfs', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateWorkitem', '2018-08-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateWorkitem(request: UpdateWorkitemRequest): UpdateWorkitemResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWorkitemWithOptions(request, runtime);
}

