/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Rdc';
  @version = '2018-08-21';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddEnterpriseMemberRequest {
  instanceId: string(name='InstanceId', position='Query'),
  operator: string(name='Operator', position='Query'),
  staffId: string(name='StaffId', position='Query'),
}

model AddEnterpriseMemberResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddEnterpriseMemberResponse = {
  headers: map[string]string(name='headers'),
  body: AddEnterpriseMemberResponseBody(name='body'),
}

async function addEnterpriseMember(request: AddEnterpriseMemberRequest): AddEnterpriseMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddEnterpriseMember', 'POST', '/', 'json', false, 'json', request);
}

model AddRamMemberRequest {
  corpIdentifier: string(name='CorpIdentifier', position='Body'),
  staffIdentifier: string(name='StaffIdentifier', position='Body'),
}

model AddRamMemberResponseBody = {
  code?: int32(name='Code'),
  data?: [ string ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddRamMemberResponse = {
  headers: map[string]string(name='headers'),
  body: AddRamMemberResponseBody(name='body'),
}

async function addRamMember(request: AddRamMemberRequest): AddRamMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddRamMember', 'POST', '/', 'json', true, 'form', request);
}

model ApproveJoinCompanyRequest {
  applicationIds: string(name='ApplicationIds', position='Body'),
  corpIdentifier: string(name='CorpIdentifier', position='Query'),
}

model ApproveJoinCompanyResponseBody = {
  code?: int32(name='Code'),
  data?: [ string ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ApproveJoinCompanyResponse = {
  headers: map[string]string(name='headers'),
  body: ApproveJoinCompanyResponseBody(name='body'),
}

async function approveJoinCompany(request: ApproveJoinCompanyRequest): ApproveJoinCompanyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApproveJoinCompany', 'POST', '/', 'json', true, 'form', request);
}

model CreateEnterpriseRequest {
  creatorStaffId: string(name='CreatorStaffId', position='Query'),
  description?: string(name='Description', position='Query'),
  domain: string(name='Domain', position='Query'),
  emails?: map[string]any(name='Emails', position='Query'),
  name: string(name='Name', position='Query'),
}

model CreateEnterpriseResponseBody = {
  code?: int32(name='Code'),
  data?: {
    id?: long(name='Id'),
    identifier?: string(name='Identifier'),
    name?: string(name='Name'),
    prohibitCode?: int32(name='ProhibitCode'),
    status?: int32(name='Status'),
    type?: int32(name='Type'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateEnterpriseResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEnterpriseResponseBody(name='body'),
}

async function createEnterprise(request: CreateEnterpriseRequest): CreateEnterpriseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEnterprise', 'POST', '/', 'json', false, 'json', request);
}

model CreateWorkitemRequest {
  AKProjectId: int32(name='AKProjectId', position='Body'),
  assignedTo: string(name='AssignedTo', position='Body'),
  author: string(name='Author', position='Body'),
  cfList?: string(name='CfList', position='Body'),
  corpIdentifier: string(name='CorpIdentifier', position='Query'),
  description?: string(name='Description', position='Body'),
  moduleIds?: string(name='ModuleIds', position='Body'),
  priorityId?: int32(name='PriorityId', position='Body'),
  seriousLevelId?: int32(name='SeriousLevelId', position='Body'),
  stamp: string(name='Stamp', position='Body'),
  subject: string(name='Subject', position='Body'),
  templateId: int32(name='TemplateId', position='Body'),
  verifier?: string(name='Verifier', position='Body'),
  watcherUsers?: string(name='WatcherUsers', position='Body'),
}

model CreateWorkitemResponseBody = {
  code?: int32(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateWorkitemResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWorkitemResponseBody(name='body'),
}

async function createWorkitem(request: CreateWorkitemRequest): CreateWorkitemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWorkitem', 'POST', '/', 'json', true, 'form', request);
}

model GetBindedUserByDingIdRequest {
  dingId: string(name='DingId', position='Query'),
}

model GetBindedUserByDingIdResponseBody = {
  code?: int32(name='Code'),
  data?: {
    aliyunUser?: {
      accountStructure?: int32(name='AccountStructure'),
      aliyunId?: string(name='AliyunId'),
      email?: string(name='Email'),
      havanaId?: string(name='HavanaId'),
      id?: int32(name='Id'),
      kp?: string(name='Kp'),
      nickName?: string(name='NickName'),
      realname?: string(name='Realname'),
      taobaoNick?: string(name='TaobaoNick'),
    }(name='AliyunUser'),
    dingtalkUser?: {
      codeUserName?: string(name='CodeUserName'),
      dingId?: string(name='DingId'),
      dingtalkUserId?: int32(name='DingtalkUserId'),
      id?: int32(name='Id'),
      nick?: string(name='Nick'),
      unionId?: string(name='UnionId'),
    }(name='DingtalkUser'),
    guid?: string(name='Guid'),
    id?: int32(name='Id'),
    isValid?: boolean(name='IsValid'),
    mainAccountType?: string(name='MainAccountType'),
    nickName?: string(name='NickName'),
    userProfileDTO?: {
      avatar?: string(name='Avatar'),
      createdAt?: long(name='CreatedAt'),
      dataSource?: string(name='DataSource'),
      email?: string(name='Email'),
      englishName?: string(name='EnglishName'),
      mobile?: string(name='Mobile'),
      name?: string(name='Name'),
      nickName?: string(name='NickName'),
      userId?: int32(name='UserId'),
    }(name='UserProfileDTO'),
    uuid?: string(name='Uuid'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetBindedUserByDingIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetBindedUserByDingIdResponseBody(name='body'),
}

async function getBindedUserByDingId(request: GetBindedUserByDingIdRequest): GetBindedUserByDingIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBindedUserByDingId', 'GET', '/', 'json', false, 'json', request);
}

model GetChangeLogRequest {
  corpIdentifier: string(name='CorpIdentifier', position='Query'),
  targetIds: map[string]any(name='TargetIds', position='Body'),
  targetType: string(name='TargetType', position='Body'),
}

model GetChangeLogResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      newValue?: string(name='NewValue'),
      oldValue?: string(name='OldValue'),
      other?: string(name='Other'),
      propertyKey?: string(name='PropertyKey'),
      propertyType?: string(name='PropertyType'),
      targetId?: int32(name='TargetId'),
      targetType?: string(name='TargetType'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetChangeLogResponse = {
  headers: map[string]string(name='headers'),
  body: GetChangeLogResponseBody(name='body'),
}

async function getChangeLog(request: GetChangeLogRequest): GetChangeLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetChangeLog', 'GET', '/', 'json', true, 'form', request);
}

model GetCustomFieldsByTemplateIdRequest {
  AKProjectId: int32(name='AKProjectId', position='Body'),
  corpIdentifier: string(name='CorpIdentifier', position='Query'),
  templateId: int32(name='TemplateId', position='Body'),
}

model GetCustomFieldsByTemplateIdResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      createdAt?: long(name='CreatedAt'),
      defaultValue?: string(name='DefaultValue'),
      description?: string(name='Description'),
      dynamic?: boolean(name='Dynamic'),
      editable?: boolean(name='Editable'),
      fieldFormat?: string(name='FieldFormat'),
      id?: int32(name='Id'),
      isDelete?: boolean(name='IsDelete'),
      isRemember?: boolean(name='IsRemember'),
      isRequired?: boolean(name='IsRequired'),
      maxLength?: int32(name='MaxLength'),
      minLength?: int32(name='MinLength'),
      name?: string(name='Name'),
      nameI18N?: string(name='NameI18N'),
      other?: string(name='Other'),
      possibleValues?: string(name='PossibleValues'),
      type?: string(name='Type'),
      updatedAt?: long(name='UpdatedAt'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetCustomFieldsByTemplateIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetCustomFieldsByTemplateIdResponseBody(name='body'),
}

async function getCustomFieldsByTemplateId(request: GetCustomFieldsByTemplateIdRequest): GetCustomFieldsByTemplateIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCustomFieldsByTemplateId', 'POST', '/', 'json', true, 'form', request);
}

model GetIssueByIdRequest {
  corpIdentifier: string(name='CorpIdentifier', position='Query'),
  id: int32(name='Id', position='Body'),
}

model GetIssueByIdResponseBody = {
  code?: int32(name='Code'),
  data?: {
    akProjectId?: int32(name='AkProjectId'),
    assignedTo?: string(name='AssignedTo'),
    assignedToId?: int32(name='AssignedToId'),
    assignedToIdList?: string(name='AssignedToIdList'),
    assignedToIds?: string(name='AssignedToIds'),
    assignedToMaps?: string(name='AssignedToMaps'),
    assignedToStaffId?: string(name='AssignedToStaffId'),
    attachmentIds?: string(name='AttachmentIds'),
    attachmentList?: string(name='AttachmentList'),
    attachmented?: boolean(name='Attachmented'),
    blackListNotice?: string(name='BlackListNotice'),
    cfsList?: [ 
      {
        id?: string(name='Id'),
        name?: string(name='Name'),
        type?: string(name='Type'),
        value?: string(name='Value'),
      }
    ](name='CfsList'),
    changeLogList?: string(name='ChangeLogList'),
    commentList?: string(name='CommentList'),
    commitDate?: long(name='CommitDate'),
    createdAt?: long(name='CreatedAt'),
    description?: string(name='Description'),
    guid?: string(name='Guid'),
    id?: int32(name='Id'),
    idPath?: string(name='IdPath'),
    ignoreCheck?: boolean(name='IgnoreCheck'),
    ignoreIntegrate?: boolean(name='IgnoreIntegrate'),
    issueTypeId?: int32(name='IssueTypeId'),
    logicalStatus?: string(name='LogicalStatus'),
    moduleIds?: string(name='ModuleIds'),
    moduleList?: string(name='ModuleList'),
    moduleUpdated?: boolean(name='ModuleUpdated'),
    parentId?: int32(name='ParentId'),
    priority?: string(name='Priority'),
    priorityId?: int32(name='PriorityId'),
    projectIds?: string(name='ProjectIds'),
    recordChangeLog?: boolean(name='RecordChangeLog'),
    regionId?: int32(name='RegionId'),
    relatedAKProjectGuids?: string(name='RelatedAKProjectGuids'),
    relatedAKProjectIds?: string(name='RelatedAKProjectIds'),
    relatedUserIds?: string(name='RelatedUserIds'),
    sendWangwang?: boolean(name='SendWangwang'),
    seriousLevel?: string(name='SeriousLevel'),
    seriousLevelId?: int32(name='SeriousLevelId'),
    skipCollab?: boolean(name='SkipCollab'),
    stamp?: string(name='Stamp'),
    status?: string(name='Status'),
    statusId?: int32(name='StatusId'),
    statusStage?: int32(name='StatusStage'),
    subject?: string(name='Subject'),
    tagIdList?: string(name='TagIdList'),
    templateId?: int32(name='TemplateId'),
    trackerIds?: string(name='TrackerIds'),
    trackers?: string(name='Trackers'),
    updateStatusAt?: long(name='UpdateStatusAt'),
    updatedAt?: long(name='UpdatedAt'),
    user?: string(name='User'),
    userId?: int32(name='UserId'),
    userStaffId?: string(name='UserStaffId'),
    verifier?: string(name='Verifier'),
    verifierId?: int32(name='VerifierId'),
    verifierStaffId?: string(name='VerifierStaffId'),
    versionIds?: string(name='VersionIds'),
    versionList?: string(name='VersionList'),
    watched?: boolean(name='Watched'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model GetIssueByIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetIssueByIdResponseBody(name='body'),
}

async function getIssueById(request: GetIssueByIdRequest): GetIssueByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIssueById', 'GET', '/', 'json', true, 'form', request);
}

model GetJoinCodeRequest {
  corpIdentifier: string(name='CorpIdentifier', position='Query'),
}

model GetJoinCodeResponseBody = {
  code?: int32(name='Code'),
  data?: {
    code?: string(name='Code'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetJoinCodeResponse = {
  headers: map[string]string(name='headers'),
  body: GetJoinCodeResponseBody(name='body'),
}

async function getJoinCode(request: GetJoinCodeRequest): GetJoinCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetJoinCode', 'POST', '/', 'json', false, 'json', request);
}

model GetProjectMembersRequest {
  corpIdentifier: string(name='CorpIdentifier', position='Query'),
  projectId: int32(name='ProjectId', position='Query'),
  staffId?: string(name='StaffId', position='Query'),
}

model GetProjectMembersResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      id?: int32(name='Id'),
      identifier?: string(name='Identifier'),
      name?: string(name='Name'),
      users?: [ 
        {
          avatar?: string(name='Avatar'),
          email?: string(name='Email'),
          id?: int32(name='Id'),
          nickName?: string(name='NickName'),
          realName?: string(name='RealName'),
          staffId?: string(name='StaffId'),
        }
      ](name='Users'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetProjectMembersResponse = {
  headers: map[string]string(name='headers'),
  body: GetProjectMembersResponseBody(name='body'),
}

async function getProjectMembers(request: GetProjectMembersRequest): GetProjectMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProjectMembers', 'GET', '/', 'json', false, 'json', request);
}

model GetUserByAliyunPkRequest {
  pk: string(name='Pk', position='Query'),
}

model GetUserByAliyunPkResponseBody = {
  code?: int32(name='Code'),
  data?: {
    aliyunUser?: {
      accountStructure?: int32(name='AccountStructure'),
      aliyunId?: string(name='AliyunId'),
      email?: string(name='Email'),
      havanaId?: string(name='HavanaId'),
      id?: int32(name='Id'),
      kp?: string(name='Kp'),
      nickName?: string(name='NickName'),
      realname?: string(name='Realname'),
      taobaoNick?: string(name='TaobaoNick'),
    }(name='AliyunUser'),
    dingtalkUser?: {
      codeUserName?: string(name='CodeUserName'),
      dingId?: string(name='DingId'),
      dingtalkUserId?: int32(name='DingtalkUserId'),
      id?: int32(name='Id'),
      nick?: string(name='Nick'),
      unionId?: string(name='UnionId'),
    }(name='DingtalkUser'),
    guid?: string(name='Guid'),
    id?: int32(name='Id'),
    isValid?: boolean(name='IsValid'),
    mainAccountType?: string(name='MainAccountType'),
    nickName?: string(name='NickName'),
    userProfileDTO?: {
      avatar?: string(name='Avatar'),
      createdAt?: long(name='CreatedAt'),
      dataSource?: string(name='DataSource'),
      email?: string(name='Email'),
      englishName?: string(name='EnglishName'),
      mobile?: string(name='Mobile'),
      name?: string(name='Name'),
      nickName?: string(name='NickName'),
      userId?: int32(name='UserId'),
    }(name='UserProfileDTO'),
    uuid?: string(name='Uuid'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetUserByAliyunPkResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserByAliyunPkResponseBody(name='body'),
}

async function getUserByAliyunPk(request: GetUserByAliyunPkRequest): GetUserByAliyunPkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserByAliyunPk', 'GET', '/', 'json', false, 'json', request);
}

model GetWorkitemByIdRequest {
  corpIdentifier: string(name='CorpIdentifier', position='Query'),
  id: int32(name='Id', position='Body'),
}

model GetWorkitemByIdResponseBody = {
  code?: int32(name='Code'),
  data?: {
    akProjectId?: int32(name='AkProjectId'),
    assignedTo?: string(name='AssignedTo'),
    assignedToId?: int32(name='AssignedToId'),
    assignedToIdList?: string(name='AssignedToIdList'),
    assignedToIds?: string(name='AssignedToIds'),
    assignedToMaps?: string(name='AssignedToMaps'),
    assignedToStaffId?: string(name='AssignedToStaffId'),
    attachmentIds?: string(name='AttachmentIds'),
    attachmentList?: string(name='AttachmentList'),
    attachmented?: boolean(name='Attachmented'),
    blackListNotice?: string(name='BlackListNotice'),
    cfsList?: [ 
      {
        id?: string(name='Id'),
        name?: string(name='Name'),
        type?: string(name='Type'),
        value?: string(name='Value'),
      }
    ](name='CfsList'),
    changeLogList?: string(name='ChangeLogList'),
    commentList?: string(name='CommentList'),
    commitDate?: long(name='CommitDate'),
    createdAt?: long(name='CreatedAt'),
    description?: string(name='Description'),
    guid?: string(name='Guid'),
    id?: int32(name='Id'),
    idPath?: string(name='IdPath'),
    ignoreCheck?: boolean(name='IgnoreCheck'),
    ignoreIntegrate?: boolean(name='IgnoreIntegrate'),
    issueTypeId?: int32(name='IssueTypeId'),
    logicalStatus?: string(name='LogicalStatus'),
    moduleIds?: string(name='ModuleIds'),
    moduleList?: string(name='ModuleList'),
    moduleUpdated?: boolean(name='ModuleUpdated'),
    parentId?: int32(name='ParentId'),
    priority?: string(name='Priority'),
    priorityId?: int32(name='PriorityId'),
    projectIds?: string(name='ProjectIds'),
    recordChangeLog?: boolean(name='RecordChangeLog'),
    regionId?: int32(name='RegionId'),
    relatedAKProjectGuids?: string(name='RelatedAKProjectGuids'),
    relatedAKProjectIds?: string(name='RelatedAKProjectIds'),
    relatedUserIds?: string(name='RelatedUserIds'),
    sendWangwang?: boolean(name='SendWangwang'),
    seriousLevel?: string(name='SeriousLevel'),
    seriousLevelId?: int32(name='SeriousLevelId'),
    skipCollab?: boolean(name='SkipCollab'),
    stamp?: string(name='Stamp'),
    status?: string(name='Status'),
    statusId?: int32(name='StatusId'),
    statusStage?: int32(name='StatusStage'),
    subject?: string(name='Subject'),
    tagIdList?: string(name='TagIdList'),
    templateId?: int32(name='TemplateId'),
    trackerIds?: string(name='TrackerIds'),
    trackers?: string(name='Trackers'),
    updateStatusAt?: long(name='UpdateStatusAt'),
    updatedAt?: long(name='UpdatedAt'),
    user?: string(name='User'),
    userId?: int32(name='UserId'),
    userStaffId?: string(name='UserStaffId'),
    verifier?: string(name='Verifier'),
    verifierId?: int32(name='VerifierId'),
    verifierStaffId?: string(name='VerifierStaffId'),
    versionIds?: string(name='VersionIds'),
    versionList?: string(name='VersionList'),
    watched?: boolean(name='Watched'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model GetWorkitemByIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetWorkitemByIdResponseBody(name='body'),
}

async function getWorkitemById(request: GetWorkitemByIdRequest): GetWorkitemByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWorkitemById', 'POST', '/', 'json', true, 'form', request);
}

model JoinCompanyRequest {
  code?: string(name='Code', position='Body'),
}

model JoinCompanyResponseBody = {
  code?: int32(name='Code'),
  data?: {
    applicationId?: string(name='ApplicationId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model JoinCompanyResponse = {
  headers: map[string]string(name='headers'),
  body: JoinCompanyResponseBody(name='body'),
}

async function joinCompany(request: JoinCompanyRequest): JoinCompanyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'JoinCompany', 'POST', '/', 'json', true, 'form', request);
}

model SearchProjectsByRegionRequest {
  corpIdentifier: string(name='CorpIdentifier', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  region: string(name='Region', position='Query'),
  status?: string(name='Status', position='Query'),
  toPage?: int32(name='ToPage', position='Query'),
}

model SearchProjectsByRegionResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      aoneId?: int32(name='AoneId'),
      aoneType?: string(name='AoneType'),
      customFieldMap?: [ string ](name='CustomFieldMap'),
      description?: string(name='Description'),
      fullName?: string(name='FullName'),
      icons?: [ string ](name='Icons'),
      id?: int32(name='Id'),
      idPath?: string(name='IdPath'),
      mode?: string(name='Mode'),
      name?: string(name='Name'),
      parentId?: int32(name='ParentId'),
      stamp?: string(name='Stamp'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SearchProjectsByRegionResponse = {
  headers: map[string]string(name='headers'),
  body: SearchProjectsByRegionResponseBody(name='body'),
}

async function searchProjectsByRegion(request: SearchProjectsByRegionRequest): SearchProjectsByRegionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchProjectsByRegion', 'GET', '/', 'json', false, 'json', request);
}

model SearchTestCaseRequest {
  akProjectId: string(name='AkProjectId', position='Body'),
  caseTag?: string(name='CaseTag', position='Body'),
  corpIdentifier: string(name='CorpIdentifier', position='Query'),
  createDateEnd?: string(name='CreateDateEnd', position='Body'),
  createDateStart?: string(name='CreateDateStart', position='Body'),
  pageNum?: string(name='PageNum', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  updateDateEnd?: string(name='UpdateDateEnd', position='Body'),
  updateDateStart?: string(name='UpdateDateStart', position='Body'),
}

model SearchTestCaseResponseBody = {
  code?: int32(name='Code'),
  data?: {
    cases?: string(name='Cases'),
    pageNum?: string(name='PageNum'),
    pageSize?: string(name='PageSize'),
    pageTotal?: string(name='PageTotal'),
    totalCount?: string(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SearchTestCaseResponse = {
  headers: map[string]string(name='headers'),
  body: SearchTestCaseResponseBody(name='body'),
}

async function searchTestCase(request: SearchTestCaseRequest): SearchTestCaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchTestCase', 'POST', '/', 'json', true, 'form', request);
}

model SearchWorkitemRequest {
  AKProjectId: int32(name='AKProjectId', position='Body'),
  corpIdentifier: string(name='CorpIdentifier', position='Query'),
  createdAtEnd?: string(name='CreatedAtEnd', position='Body'),
  createdAtStart?: string(name='CreatedAtStart', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  sprintId?: int32(name='SprintId', position='Body'),
  stamp?: string(name='Stamp', position='Body'),
  toPage?: int32(name='ToPage', position='Body'),
}

model SearchWorkitemResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      akPaths?: string(name='AkPaths'),
      akProjectId?: int32(name='AkProjectId'),
      akVersionIds?: string(name='AkVersionIds'),
      assignedTo?: string(name='AssignedTo'),
      assignedToId?: int32(name='AssignedToId'),
      assignedToIdList?: string(name='AssignedToIdList'),
      assignedToIds?: string(name='AssignedToIds'),
      assignedToStaffId?: string(name='AssignedToStaffId'),
      attachmentIds?: string(name='AttachmentIds'),
      attachmentList?: string(name='AttachmentList'),
      attachmented?: boolean(name='Attachmented'),
      blackListNotice?: string(name='BlackListNotice'),
      changeLogList?: string(name='ChangeLogList'),
      closedDuration?: int32(name='ClosedDuration'),
      commentList?: string(name='CommentList'),
      commitDate?: long(name='CommitDate'),
      createdAt?: long(name='CreatedAt'),
      devDuration?: int32(name='DevDuration'),
      fixedDuration?: int32(name='FixedDuration'),
      fixedUserId?: int32(name='FixedUserId'),
      id?: int32(name='Id'),
      idPath?: string(name='IdPath'),
      ignoreCheck?: boolean(name='IgnoreCheck'),
      ignoreIntegrate?: boolean(name='IgnoreIntegrate'),
      issueRelations?: string(name='IssueRelations'),
      issueTypeId?: int32(name='IssueTypeId'),
      linePath?: string(name='LinePath'),
      logicalStatus?: string(name='LogicalStatus'),
      moduleIds?: string(name='ModuleIds'),
      moduleList?: string(name='ModuleList'),
      moduleUpdated?: boolean(name='ModuleUpdated'),
      parentId?: int32(name='ParentId'),
      priority?: string(name='Priority'),
      priorityId?: int32(name='PriorityId'),
      projectId?: int32(name='ProjectId'),
      projectIds?: string(name='ProjectIds'),
      recordChangeLog?: boolean(name='RecordChangeLog'),
      region?: string(name='Region'),
      relatedAKProjectGuids?: string(name='RelatedAKProjectGuids'),
      relatedAKProjectIds?: string(name='RelatedAKProjectIds'),
      relatedUserIds?: string(name='RelatedUserIds'),
      respondDuration?: int32(name='RespondDuration'),
      scope?: int32(name='Scope'),
      scopeUserIds?: string(name='ScopeUserIds'),
      sendWangwang?: boolean(name='SendWangwang'),
      seriousLevel?: string(name='SeriousLevel'),
      seriousLevelId?: int32(name='SeriousLevelId'),
      skipCollab?: boolean(name='SkipCollab'),
      solution?: int32(name='Solution'),
      source?: string(name='Source'),
      sourceId?: int32(name='SourceId'),
      sprintId?: int32(name='SprintId'),
      stamp?: string(name='Stamp'),
      status?: string(name='Status'),
      statusId?: int32(name='StatusId'),
      statusStage?: int32(name='StatusStage'),
      subject?: string(name='Subject'),
      tagIdList?: string(name='TagIdList'),
      templateId?: int32(name='TemplateId'),
      testsuiteId?: int32(name='TestsuiteId'),
      trackerIds?: string(name='TrackerIds'),
      trackers?: string(name='Trackers'),
      updatedAt?: long(name='UpdatedAt'),
      user?: string(name='User'),
      userId?: int32(name='UserId'),
      userStaffId?: string(name='UserStaffId'),
      verifier?: string(name='Verifier'),
      verifierId?: int32(name='VerifierId'),
      verifierStaffId?: string(name='VerifierStaffId'),
      versionId?: int32(name='VersionId'),
      versionIds?: string(name='VersionIds'),
      versionList?: string(name='VersionList'),
      watched?: boolean(name='Watched'),
      watcherIdList?: string(name='WatcherIdList'),
    }
  ](name='Data'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  toPage?: int32(name='ToPage'),
  totalCount?: int32(name='TotalCount'),
  totalPages?: int32(name='TotalPages'),
}

model SearchWorkitemResponse = {
  headers: map[string]string(name='headers'),
  body: SearchWorkitemResponseBody(name='body'),
}

async function searchWorkitem(request: SearchWorkitemRequest): SearchWorkitemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchWorkitem', 'POST', '/', 'json', true, 'form', request);
}

model SearchWorkitemWithTotalCountRequest {
  AKProjectId: int32(name='AKProjectId', position='Body'),
  corpIdentifier: string(name='CorpIdentifier', position='Query'),
  pageSize?: int32(name='PageSize', position='Body'),
  sprintId?: int32(name='SprintId', position='Body'),
  stamp?: string(name='Stamp', position='Body'),
  toPage?: int32(name='ToPage', position='Body'),
}

model SearchWorkitemWithTotalCountResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      akPaths?: string(name='AkPaths'),
      akProjectId?: int32(name='AkProjectId'),
      akVersionIds?: string(name='AkVersionIds'),
      assignedTo?: string(name='AssignedTo'),
      assignedToId?: int32(name='AssignedToId'),
      assignedToIdList?: string(name='AssignedToIdList'),
      assignedToIds?: string(name='AssignedToIds'),
      assignedToStaffId?: string(name='AssignedToStaffId'),
      attachmentIds?: string(name='AttachmentIds'),
      attachmentList?: string(name='AttachmentList'),
      attachmented?: boolean(name='Attachmented'),
      blackListNotice?: string(name='BlackListNotice'),
      changeLogList?: string(name='ChangeLogList'),
      closedDuration?: int32(name='ClosedDuration'),
      commentList?: string(name='CommentList'),
      commitDate?: long(name='CommitDate'),
      createdAt?: long(name='CreatedAt'),
      devDuration?: int32(name='DevDuration'),
      fixedDuration?: int32(name='FixedDuration'),
      fixedUserId?: int32(name='FixedUserId'),
      id?: int32(name='Id'),
      idPath?: string(name='IdPath'),
      ignoreCheck?: boolean(name='IgnoreCheck'),
      ignoreIntegrate?: boolean(name='IgnoreIntegrate'),
      issueRelations?: string(name='IssueRelations'),
      issueTypeId?: int32(name='IssueTypeId'),
      linePath?: string(name='LinePath'),
      logicalStatus?: string(name='LogicalStatus'),
      moduleIds?: string(name='ModuleIds'),
      moduleList?: string(name='ModuleList'),
      moduleUpdated?: boolean(name='ModuleUpdated'),
      parentId?: int32(name='ParentId'),
      priority?: string(name='Priority'),
      priorityId?: int32(name='PriorityId'),
      projectId?: int32(name='ProjectId'),
      projectIds?: string(name='ProjectIds'),
      recordChangeLog?: boolean(name='RecordChangeLog'),
      region?: string(name='Region'),
      relatedAKProjectGuids?: string(name='RelatedAKProjectGuids'),
      relatedAKProjectIds?: string(name='RelatedAKProjectIds'),
      relatedUserIds?: string(name='RelatedUserIds'),
      respondDuration?: int32(name='RespondDuration'),
      scope?: int32(name='Scope'),
      scopeUserIds?: string(name='ScopeUserIds'),
      sendWangwang?: boolean(name='SendWangwang'),
      seriousLevel?: string(name='SeriousLevel'),
      seriousLevelId?: int32(name='SeriousLevelId'),
      skipCollab?: boolean(name='SkipCollab'),
      solution?: int32(name='Solution'),
      source?: string(name='Source'),
      sourceId?: int32(name='SourceId'),
      sprintId?: int32(name='SprintId'),
      stamp?: string(name='Stamp'),
      status?: string(name='Status'),
      statusId?: int32(name='StatusId'),
      statusStage?: int32(name='StatusStage'),
      subject?: string(name='Subject'),
      tagIdList?: string(name='TagIdList'),
      templateId?: int32(name='TemplateId'),
      testsuiteId?: int32(name='TestsuiteId'),
      trackerIds?: string(name='TrackerIds'),
      trackers?: string(name='Trackers'),
      updatedAt?: long(name='UpdatedAt'),
      user?: string(name='User'),
      userId?: int32(name='UserId'),
      userStaffId?: string(name='UserStaffId'),
      verifier?: string(name='Verifier'),
      verifierId?: int32(name='VerifierId'),
      verifierStaffId?: string(name='VerifierStaffId'),
      versionId?: int32(name='VersionId'),
      versionIds?: string(name='VersionIds'),
      versionList?: string(name='VersionList'),
      watched?: boolean(name='Watched'),
      watcherIdList?: string(name='WatcherIdList'),
    }
  ](name='Data'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  toPage?: int32(name='ToPage'),
  totalCount?: int32(name='TotalCount'),
  totalPages?: int32(name='TotalPages'),
}

model SearchWorkitemWithTotalCountResponse = {
  headers: map[string]string(name='headers'),
  body: SearchWorkitemWithTotalCountResponseBody(name='body'),
}

async function searchWorkitemWithTotalCount(request: SearchWorkitemWithTotalCountRequest): SearchWorkitemWithTotalCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchWorkitemWithTotalCount', 'POST', '/', 'json', true, 'form', request);
}

model SyncUserToRdcRequest {
  loginTicket?: string(name='LoginTicket', position='Body'),
}

model SyncUserToRdcResponseBody = {
  code?: int32(name='Code'),
  data?: {
    isValid?: boolean(name='IsValid'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SyncUserToRdcResponse = {
  headers: map[string]string(name='headers'),
  body: SyncUserToRdcResponseBody(name='body'),
}

async function syncUserToRdc(request: SyncUserToRdcRequest): SyncUserToRdcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncUserToRdc', 'POST', '/', 'json', true, 'form', request);
}

model UpdateWorkitemRequest {
  AKProjectId: int32(name='AKProjectId', position='Body'),
  assignedTo?: string(name='AssignedTo', position='Body'),
  cfList?: map[string]any(name='CfList', position='Body'),
  cfs?: map[string]any(name='Cfs', position='Body'),
  corpIdentifier: string(name='CorpIdentifier', position='Query'),
  description?: string(name='Description', position='Body'),
  ignoreCheck?: boolean(name='IgnoreCheck', position='Body'),
  issueId: int32(name='IssueId', position='Body'),
  modifier: string(name='Modifier', position='Body'),
  priority?: string(name='Priority', position='Body'),
  seriousLevel?: string(name='SeriousLevel', position='Body'),
  sprintId?: int32(name='SprintId', position='Body'),
  stamp?: string(name='Stamp', position='Body'),
  status?: string(name='Status', position='Body'),
  subject?: string(name='Subject', position='Body'),
  templateId?: int32(name='TemplateId', position='Body'),
  verifier?: string(name='Verifier', position='Body'),
}

model UpdateWorkitemResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateWorkitemResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateWorkitemResponseBody(name='body'),
}

async function updateWorkitem(request: UpdateWorkitemRequest): UpdateWorkitemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWorkitem', 'POST', '/', 'json', true, 'form', request);
}

