/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ContactCenterAI';
  @version = '2024-06-03';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model RunCompletionRequest {
  workspaceId: string(name='workspaceId', example='llm-ik******RVYCKzt', position='Path'),
  appId: string(name='appId', example='097d65c9c7004f8dad2b454850ac232b', position='Path'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Host'),
  dialogue: {
    sentences?: [ 
      {
        chatId?: string(name='ChatId'),
        role: string(name='Role', example='user'),
        text: string(name='Text'),
      }
    ](name='Sentences'),
    sessionId?: string(name='SessionId', example='d25zc9c7004f8dad2b454d'),
  }(name='Dialogue', position='Body'),
  dimensions?: [ 
    {
      desc?: string(name='Desc'),
      name: string(name='Name'),
    }
  ](name='Dimensions', position='Body'),
  fields?: [ 
    {
      code?: string(name='Code', example='phoneNumber'),
      desc?: string(name='Desc'),
      enums?: [ string ](name='Enums'),
      name: string(name='Name'),
    }
  ](name='Fields', position='Body'),
  modelCode?: string(name='ModelCode', example='ccai-14b', position='Body'),
  stream?: boolean(name='Stream', example='false', position='Body'),
  templateIds: [ long ](name='TemplateIds', position='Body'),
}

model RunCompletionResponseBody = {
  finishReason?: string(name='FinishReason'),
  requestId?: string(name='RequestId', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  text?: string(name='Text'),
}

model RunCompletionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunCompletionResponseBody(name='body'),
}

async function runCompletion(request: RunCompletionRequest): RunCompletionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunCompletion', 'POST', '/{workspaceId}/ccai/app/{appId}/completion', 'json', false, 'json', request);
}

function runCompletionWithResponseIterable(request: RunCompletionRequest): iterator[RunCompletionResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunCompletion', 'POST', '/{workspaceId}/ccai/app/{appId}/completion', 'json', false, 'json', request);
}

model RunCompletionMessageRequest {
  workspaceId: string(name='workspaceId', example='llm-ik******RVYCKzt', position='Path'),
  appId: string(name='appId', example='097d65c9c7004f8dad2b454850ac232b', position='Path'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Host'),
  messages: [ 
    {
      content: string(name='Content'),
      role: string(name='Role', example='user'),
    }
  ](name='Messages', position='Body'),
  modelCode?: string(name='ModelCode', example='ccai-14b', position='Body'),
  stream?: boolean(name='Stream', example='false', position='Body'),
}

model RunCompletionMessageResponseBody = {
  finishReason?: string(name='FinishReason'),
  requestId?: string(name='RequestId', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  text?: string(name='Text'),
}

model RunCompletionMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunCompletionMessageResponseBody(name='body'),
}

async function runCompletionMessage(request: RunCompletionMessageRequest): RunCompletionMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunCompletionMessage', 'POST', '/{workspaceId}/ccai/app/{appId}/completion_message', 'json', false, 'json', request);
}

function runCompletionMessageWithResponseIterable(request: RunCompletionMessageRequest): iterator[RunCompletionMessageResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunCompletionMessage', 'POST', '/{workspaceId}/ccai/app/{appId}/completion_message', 'json', false, 'json', request);
}

