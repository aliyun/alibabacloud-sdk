/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ContactCenterAI';
  @version = '2024-06-03';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AnalyzeConversationRequest {
  workspaceId: string(name='workspaceId', example='llm-368******3ifum', position='Path'),
  appId: string(name='appId', example='a070a49c681f4a95a0f0*********35c', position='Path'),
  regionId?: string(name='regionId', position='Host'),
  dialogue: {
    sentences: [ 
      {
        role: string(name='role', example='user'),
        text: string(name='text'),
      }
    ](name='sentences'),
    sessionId?: string(name='sessionId', example='session-01'),
  }(name='dialogue', position='Body'),
  examples?: [ 
    {
      output: string(name='output'),
      sentences: [ 
        {
          chatId?: string(name='chatId'),
          role: string(name='role'),
          text: string(name='text'),
        }
      ](name='sentences'),
    }
  ](name='examples', position='Body'),
  fields?: [ 
    {
      code?: string(name='code', example='phoneNumber'),
      desc: string(name='desc'),
      enumValues?: [ 
        {
          desc: string(name='desc'),
          enumValue: string(name='enumValue'),
        }
      ](name='enumValues'),
      name: string(name='name'),
    }
  ](name='fields', position='Body'),
  modelCode?: string(name='modelCode', example='tyxmTurbo', position='Body'),
  resultTypes: [ string ](name='resultTypes', position='Body'),
  sceneName?: string(name='sceneName', position='Body'),
  serviceInspection?: {
    inspectionContents: [ 
      {
        content: string(name='content'),
        title: string(name='title'),
      }
    ](name='inspectionContents'),
    inspectionIntroduction: string(name='inspectionIntroduction'),
    sceneIntroduction: string(name='sceneIntroduction'),
  }(name='serviceInspection', position='Body'),
  stream: boolean(name='stream', example='false', position='Body'),
}

model AnalyzeConversationResponseBody = {
  errorCode?: string(name='errorCode', example='InvalidUser.NotFound'),
  errorInfo?: string(name='errorInfo'),
  finishReason?: string(name='finishReason', example='stop'),
  requestId?: string(name='requestId', example='968A8634-FA2C-5381-9B3E-C552DED7E8BF'),
  success?: boolean(name='success', example='True'),
  text?: string(name='text'),
}

model AnalyzeConversationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AnalyzeConversationResponseBody(name='body'),
}

async function analyzeConversation(request: AnalyzeConversationRequest): AnalyzeConversationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AnalyzeConversation', 'POST', '/{workspaceId}/ccai/app/{appId}/analyze_conversation', 'json', false, 'json', request);
}

function analyzeConversationWithResponseIterable(request: AnalyzeConversationRequest): iterator[AnalyzeConversationResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'AnalyzeConversation', 'POST', '/{workspaceId}/ccai/app/{appId}/analyze_conversation', 'json', false, 'json', request);
}

model RunCompletionRequest {
  workspaceId: string(name='workspaceId', example='llm-ik******RVYCKzt', position='Path'),
  appId: string(name='appId', example='097d65c9c7004f8dad2b454850ac232b', position='Path'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Host'),
  dialogue: {
    sentences?: [ 
      {
        chatId?: string(name='ChatId'),
        role: string(name='Role', example='user'),
        text: string(name='Text'),
      }
    ](name='Sentences'),
    sessionId?: string(name='SessionId', example='d25zc9c7004f8dad2b454d'),
  }(name='Dialogue', position='Body'),
  fields?: [ 
    {
      code?: string(name='Code', example='phoneNumber'),
      desc?: string(name='Desc'),
      enumValues?: [ 
        {
          desc?: string(name='Desc'),
          enumValue: string(name='EnumValue'),
        }
      ](name='EnumValues'),
      name: string(name='Name'),
    }
  ](name='Fields', position='Body'),
  modelCode?: string(name='ModelCode', example='ccai-14b', position='Body'),
  serviceInspection?: {
    inspectionContents?: [ 
      {
        content?: string(name='Content'),
        title: string(name='Title'),
      }
    ](name='InspectionContents'),
    inspectionIntroduction?: string(name='InspectionIntroduction'),
    sceneIntroduction?: string(name='SceneIntroduction'),
  }(name='ServiceInspection', position='Body'),
  stream?: boolean(name='Stream', example='false', position='Body'),
  templateIds: [ long ](name='TemplateIds', position='Body'),
}

model RunCompletionResponseBody = {
  finishReason?: string(name='FinishReason'),
  requestId?: string(name='RequestId', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  text?: string(name='Text'),
}

model RunCompletionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunCompletionResponseBody(name='body'),
}

async function runCompletion(request: RunCompletionRequest): RunCompletionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunCompletion', 'POST', '/{workspaceId}/ccai/app/{appId}/completion', 'json', false, 'json', request);
}

function runCompletionWithResponseIterable(request: RunCompletionRequest): iterator[RunCompletionResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunCompletion', 'POST', '/{workspaceId}/ccai/app/{appId}/completion', 'json', false, 'json', request);
}

model RunCompletionMessageRequest {
  workspaceId: string(name='workspaceId', example='llm-ik******RVYCKzt', position='Path'),
  appId: string(name='appId', example='097d65c9c7004f8dad2b454850ac232b', position='Path'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Host'),
  messages: [ 
    {
      content: string(name='Content'),
      role: string(name='Role', example='user'),
    }
  ](name='Messages', position='Body'),
  modelCode?: string(name='ModelCode', example='ccai-14b', position='Body'),
  stream?: boolean(name='Stream', example='false', position='Body'),
}

model RunCompletionMessageResponseBody = {
  finishReason?: string(name='FinishReason'),
  requestId?: string(name='RequestId', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  text?: string(name='Text'),
}

model RunCompletionMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunCompletionMessageResponseBody(name='body'),
}

async function runCompletionMessage(request: RunCompletionMessageRequest): RunCompletionMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunCompletionMessage', 'POST', '/{workspaceId}/ccai/app/{appId}/completion_message', 'json', false, 'json', request);
}

function runCompletionMessageWithResponseIterable(request: RunCompletionMessageRequest): iterator[RunCompletionMessageResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunCompletionMessage', 'POST', '/{workspaceId}/ccai/app/{appId}/completion_message', 'json', false, 'json', request);
}

