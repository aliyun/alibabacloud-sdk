/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ContactCenterAI';
  @version = '2024-06-03';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AnalyzeAudioSyncRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-ik******RVYCKzt', position='Path'),
  appId: string(name='appId', description='This parameter is required.', example='a070a49c681f4a95a0f0*********35c', position='Path'),
  categoryTags?: [ 
    {
      tagDesc?: string(name='tagDesc'),
      tagName?: string(name='tagName'),
    }
  ](name='categoryTags', position='Body'),
  customPrompt?: string(name='customPrompt', position='Body'),
  fields?: [ 
    {
      code?: string(name='code', example='phoneNumber'),
      desc?: string(name='desc'),
      enumValues?: [ 
        {
          desc?: string(name='desc'),
          enumValue?: string(name='enumValue'),
        }
      ](name='enumValues'),
      name?: string(name='name'),
    }
  ](name='fields', position='Body'),
  modelCode?: string(name='modelCode', example='tyxmTurbo', position='Body'),
  responseFormatType?: string(name='responseFormatType', example='jsonObject', position='Body'),
  resultTypes?: [ string ](name='resultTypes', position='Body'),
  serviceInspection?: {
    inspectionContents?: [ 
      {
        content?: string(name='content'),
        title?: string(name='title'),
      }
    ](name='inspectionContents'),
    inspectionIntroduction?: string(name='inspectionIntroduction'),
    sceneIntroduction?: string(name='sceneIntroduction'),
  }(name='serviceInspection', position='Body'),
  stream: boolean(name='stream', description='This parameter is required.', example='false', position='Body'),
  templateIds?: [ string ](name='templateIds', position='Body'),
  transcription?: {
    asrModelCode?: string(name='asrModelCode', example='nls'),
    autoSplit?: int32(name='autoSplit', example='1'),
    clientChannel?: int32(name='clientChannel', example='1'),
    fileName: string(name='fileName', description='This parameter is required.', example='sss.mp3'),
    level?: string(name='level', example='low'),
    serviceChannel?: int32(name='serviceChannel', example='1'),
    serviceChannelKeywords?: [ string ](name='serviceChannelKeywords'),
    vocabularyId?: string(name='vocabularyId', example='esnvknv*****skdnvjksd'),
    voiceFileUrl: string(name='voiceFileUrl', description='This parameter is required.', example='http://1111.com/sss.mp3'),
  }(name='transcription', position='Body'),
  variables?: [ 
    {
      variableCode?: string(name='variableCode', example='name'),
      variableValue?: string(name='variableValue'),
    }
  ](name='variables', position='Body'),
}

model AnalyzeAudioSyncResponseBody = {
  finishReason?: string(name='finishReason', example='stop'),
  inputTokens?: string(name='inputTokens', example='1000'),
  outputTokens?: string(name='outputTokens', example='2000'),
  requestId?: string(name='requestId', example='968A8634-FA2C-5381-9B3E-*******F'),
  success?: boolean(name='success', example='True'),
  text?: string(name='text'),
  totalTokens?: string(name='totalTokens', example='3000'),
}

model AnalyzeAudioSyncResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AnalyzeAudioSyncResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AnalyzeAudioSync  AnalyzeAudioSyncRequest
  * @return AnalyzeAudioSyncResponse
 */
async function analyzeAudioSync(request: AnalyzeAudioSyncRequest): AnalyzeAudioSyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AnalyzeAudioSync', 'POST', '/{workspaceId}/ccai/app/{appId}/analyzeAudioSync', 'json', false, 'json', request);
}

function analyzeAudioSyncWithResponseIterable(request: AnalyzeAudioSyncRequest): iterator[AnalyzeAudioSyncResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'AnalyzeAudioSync', 'POST', '/{workspaceId}/ccai/app/{appId}/analyzeAudioSync', 'json', false, 'json', request);
}

model AnalyzeConversationRequest {
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-368******3ifum', position='Path'),
  appId: string(name='appId', description='This parameter is required.', example='a070a49c681f4a95a0f0*********35c', position='Path'),
  regionId?: string(name='regionId', position='Host'),
  categoryTags?: [ 
    {
      tagDesc?: string(name='tagDesc'),
      tagName?: string(name='tagName'),
    }
  ](name='categoryTags', position='Body'),
  customPrompt?: string(name='customPrompt', position='Body'),
  dialogue?: {
    sentences: [ 
      {
        role: string(name='role', description='This parameter is required.', example='user'),
        text: string(name='text', description='This parameter is required.'),
      }
    ](name='sentences', description='This parameter is required.'),
    sessionId?: string(name='sessionId', example='session-01'),
  }(name='dialogue', position='Body'),
  examples?: [ 
    {
      output: string(name='output', description='This parameter is required.'),
      sentences: [ 
        {
          chatId?: string(name='chatId'),
          role: string(name='role', description='This parameter is required.'),
          text: string(name='text', description='This parameter is required.'),
        }
      ](name='sentences', description='This parameter is required.'),
    }
  ](name='examples', position='Body'),
  fields?: [ 
    {
      code?: string(name='code', example='phoneNumber'),
      desc: string(name='desc', description='This parameter is required.'),
      enumValues?: [ 
        {
          desc: string(name='desc', description='This parameter is required.'),
          enumValue: string(name='enumValue', description='This parameter is required.'),
        }
      ](name='enumValues'),
      name: string(name='name', description='This parameter is required.'),
    }
  ](name='fields', position='Body'),
  modelCode?: string(name='modelCode', example='tyxmTurbo', position='Body'),
  responseFormatType?: string(name='responseFormatType', position='Body'),
  resultTypes: [ string ](name='resultTypes', description='This parameter is required.', position='Body'),
  sceneName?: string(name='sceneName', position='Body'),
  serviceInspection?: {
    inspectionContents: [ 
      {
        content: string(name='content', description='This parameter is required.'),
        title: string(name='title', description='This parameter is required.'),
      }
    ](name='inspectionContents', description='This parameter is required.'),
    inspectionIntroduction: string(name='inspectionIntroduction', description='This parameter is required.'),
    sceneIntroduction: string(name='sceneIntroduction', description='This parameter is required.'),
  }(name='serviceInspection', position='Body'),
  sourceCallerUid?: string(name='sourceCallerUid', position='Body'),
  stream: boolean(name='stream', description='This parameter is required.', example='false', position='Body'),
  timeConstraintList?: [ string ](name='timeConstraintList', position='Body'),
  userProfiles?: [ 
    {
      name?: string(name='name'),
      value?: string(name='value'),
    }
  ](name='userProfiles', position='Body'),
}

model AnalyzeConversationResponseBody = {
  errorCode?: string(name='errorCode', example='InvalidUser.NotFound'),
  errorInfo?: string(name='errorInfo'),
  finishReason?: string(name='finishReason', example='stop'),
  inputTokens?: string(name='inputTokens'),
  outputTokens?: string(name='outputTokens'),
  requestId?: string(name='requestId', example='968A8634-FA2C-5381-9B3E-C552DED7E8BF'),
  success?: boolean(name='success', example='True'),
  text?: string(name='text'),
  totalTokens?: string(name='totalTokens'),
}

model AnalyzeConversationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AnalyzeConversationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AnalyzeConversation  AnalyzeConversationRequest
  * @return AnalyzeConversationResponse
 */
async function analyzeConversation(request: AnalyzeConversationRequest): AnalyzeConversationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AnalyzeConversation', 'POST', '/{workspaceId}/ccai/app/{appId}/analyze_conversation', 'json', false, 'json', request);
}

async function analyzeConversationWithAsyncResponseHandler(request: AnalyzeConversationRequest, responseHandler: AsyncResponseHandler): AnalyzeConversationResponse {
  @handler.validateRequestModel(request);
  return @handler.doResponseHandler('RESTFUL', 'AnalyzeConversation', 'POST', '/{workspaceId}/ccai/app/{appId}/analyze_conversation', 'json', false, 'json', request, responseHandler);
}

function analyzeConversationWithResponseIterable(request: AnalyzeConversationRequest): iterator[AnalyzeConversationResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'AnalyzeConversation', 'POST', '/{workspaceId}/ccai/app/{appId}/analyze_conversation', 'json', false, 'json', request);
}

model AnalyzeImageRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId?: string(name='workspaceId', example='llm-ik******RVYCKzt', position='Path'),
  appId?: string(name='appId', example='a070a49c681f4a95a0f0*********35c', position='Path'),
  imageUrls?: [ string ](name='imageUrls', position='Body'),
  responseFormatType?: string(name='responseFormatType', position='Body'),
  resultTypes?: [ string ](name='resultTypes', position='Body'),
  stream: boolean(name='stream', description='This parameter is required.', example='false', position='Body'),
}

model AnalyzeImageResponseBody = {
  finishReason?: string(name='finishReason', example='stop'),
  inputTokens?: string(name='inputTokens', example='1000'),
  outputTokens?: string(name='outputTokens', example='2000'),
  requestId?: string(name='requestId', example='9*****-AE0D-5EE3-B1AF-48632CB0831C'),
  success?: boolean(name='success', example='True'),
  text?: string(name='text'),
  totalTokens?: string(name='totalTokens', example='3000'),
}

model AnalyzeImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AnalyzeImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AnalyzeImage  AnalyzeImageRequest
  * @return AnalyzeImageResponse
 */
async function analyzeImage(request: AnalyzeImageRequest): AnalyzeImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AnalyzeImage', 'POST', '/{workspaceId}/ccai/app/{appId}/analyzeImage', 'json', false, 'json', request);
}

function analyzeImageWithResponseIterable(request: AnalyzeImageRequest): iterator[AnalyzeImageResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'AnalyzeImage', 'POST', '/{workspaceId}/ccai/app/{appId}/analyzeImage', 'json', false, 'json', request);
}

model CreateTaskRequest {
  workspaceId?: string(name='workspaceId', example='llm-ik******RVYCKzt', position='Path'),
  appId?: string(name='appId', example='a070a49c681f4a95a0f0*********35c', position='Path'),
  regionId?: string(name='regionId', position='Host'),
  callBackUrl?: string(name='callBackUrl', position='Body'),
  categoryTags?: [ 
    {
      tagDesc?: string(name='tagDesc'),
      tagName?: string(name='tagName'),
    }
  ](name='categoryTags', position='Body'),
  customPrompt?: string(name='customPrompt', position='Body'),
  dialogue?: {
    sentences: [ 
      {
        role: string(name='role', description='This parameter is required.', example='user'),
        text: string(name='text', description='This parameter is required.'),
      }
    ](name='sentences', description='This parameter is required.'),
    sessionId?: string(name='sessionId', example='session-01'),
  }(name='dialogue', position='Body'),
  examples?: {
    output?: string(name='output'),
    sentences: [ 
      {
        role: string(name='role', description='This parameter is required.', example='user'),
        text: string(name='text', description='This parameter is required.'),
      }
    ](name='sentences', description='This parameter is required.'),
  }(name='examples', position='Body'),
  fields?: [ 
    {
      code?: string(name='code', example='phoneNumber'),
      desc: string(name='desc', description='This parameter is required.'),
      enumValues?: [ 
        {
          desc: string(name='desc', description='This parameter is required.'),
          enumValue: string(name='enumValue', description='This parameter is required.'),
        }
      ](name='enumValues'),
      name: string(name='name', description='This parameter is required.'),
    }
  ](name='fields', position='Body'),
  modelCode: string(name='modelCode', description='This parameter is required.', example='tyxmTurbo', position='Body'),
  responseFormatType?: string(name='responseFormatType', position='Body'),
  resultTypes?: [ string ](name='resultTypes', position='Body'),
  serviceInspection?: {
    inspectionContents: [ 
      {
        content: string(name='content', description='This parameter is required.'),
        title: string(name='title', description='This parameter is required.'),
      }
    ](name='inspectionContents', description='This parameter is required.'),
    inspectionIntroduction: string(name='inspectionIntroduction', description='This parameter is required.'),
    sceneIntroduction: string(name='sceneIntroduction', description='This parameter is required.'),
  }(name='serviceInspection', position='Body'),
  taskType: string(name='taskType', description='This parameter is required.', example='text', position='Body'),
  templateIds?: [ string ](name='templateIds', position='Body'),
  transcription?: {
    asrModelCode?: string(name='asrModelCode'),
    autoSplit?: int32(name='autoSplit', example='1'),
    clientChannel?: int32(name='clientChannel', example='1'),
    fileName: string(name='fileName', description='This parameter is required.', example='sss.mp3'),
    level?: string(name='level'),
    roleIdentification?: boolean(name='roleIdentification'),
    serviceChannel?: int32(name='serviceChannel', example='1'),
    serviceChannelKeywords?: [ string ](name='serviceChannelKeywords'),
    vocabularyId?: string(name='vocabularyId'),
    voiceFileUrl: string(name='voiceFileUrl', description='This parameter is required.', example='http://1111.com/sss.mp3'),
  }(name='transcription', position='Body'),
  variables?: [ 
    {
      variableCode?: string(name='variableCode'),
      variableValue?: string(name='variableValue'),
    }
  ](name='variables', position='Body'),
}

model CreateTaskResponseBody = {
  data?: {
    taskId?: string(name='taskId', example='20240905-********-93E9-5D45-B4EF-045743A34071'),
  }(name='data'),
  requestId?: string(name='requestId', example='9F1DB065-AE0D-5EE3-B1AF-48632CB0831C'),
  success?: string(name='success', example='True'),
}

model CreateTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateTask  CreateTaskRequest
  * @return CreateTaskResponse
 */
async function createTask(request: CreateTaskRequest): CreateTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTask', 'POST', '/{workspaceId}/ccai/app/{appId}/createTask', 'json', false, 'json', request);
}

model CreateVocabRequest {
  regionId?: string(name='regionId', position='Host'),
  audioModelCode?: string(name='audioModelCode', example='nls', position='Body'),
  description?: string(name='description', position='Body'),
  name: string(name='name', description='This parameter is required.', position='Body'),
  wordWeightList: [ 
    {
      weight: int32(name='weight', description='This parameter is required.', example='2'),
      word: string(name='word', description='This parameter is required.'),
    }
  ](name='wordWeightList', description='This parameter is required.', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-9****me1', position='Body'),
}

model CreateVocabResponseBody = {
  data?: {
    vocabularyId?: string(name='vocabularyId', example='f3d82*******7'),
  }(name='data'),
  requestId?: string(name='requestId', example='968A8634-FA2C-5381-9B3E-*******F'),
  success?: string(name='success', example='True'),
}

model CreateVocabResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVocabResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateVocab  CreateVocabRequest
  * @return CreateVocabResponse
 */
async function createVocab(request: CreateVocabRequest): CreateVocabResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateVocab', 'POST', '/vocab/createVocab', 'json', false, 'json', request);
}

model DeleteVocabRequest {
  regionId?: string(name='regionId', position='Host'),
  vocabularyId: string(name='vocabularyId', description='This parameter is required.', example='ern*******rve', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-0*****jlg8s', position='Body'),
}

model DeleteVocabResponseBody = {
  data?: string(name='data', example='true'),
  requestId?: string(name='requestId', example='968A8634-FA2C-5381-9B3E-*******F'),
  success?: string(name='success', example='true'),
}

model DeleteVocabResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVocabResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteVocab  DeleteVocabRequest
  * @return DeleteVocabResponse
 */
async function deleteVocab(request: DeleteVocabRequest): DeleteVocabResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteVocab', 'POST', '/vocab/deleteVocab', 'json', false, 'json', request);
}

model GetTaskResultRequest {
  regionId?: string(name='regionId', position='Host'),
  requiredFieldList?: [ string ](name='requiredFieldList', shrink='simple', position='Query'),
  taskId?: string(name='taskId', example='20240905-********-93E9-5D45-B4EF-045743A34071', position='Query'),
}

model GetTaskResultResponseBody = {
  data?: {
    asrResult?: [ 
      {
        begin?: long(name='begin'),
        emotionValue?: int32(name='emotionValue'),
        end?: long(name='end'),
        role?: string(name='role'),
        speechRate?: int32(name='speechRate'),
        words?: string(name='words'),
      }
    ](name='asrResult'),
    extra?: string(name='extra'),
    taskErrorMessage?: string(name='taskErrorMessage'),
    taskId?: string(name='taskId', example='20240905-********-93E9-5D45-B4EF-045743A34071'),
    taskStatus?: string(name='taskStatus', example='FINISH'),
    text?: string(name='text'),
  }(name='data'),
  requestId?: string(name='requestId', example='968A8634-FA2C-5381-9B3E-C552DED7E8BF'),
  success?: string(name='success', example='True'),
}

model GetTaskResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTaskResult  GetTaskResultRequest
  * @return GetTaskResultResponse
 */
async function getTaskResult(request: GetTaskResultRequest): GetTaskResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTaskResult', 'GET', '/ccai/app/getTaskResult', 'json', false, 'json', request);
}

model GetVocabRequest {
  regionId?: string(name='regionId', position='Host'),
  vocabularyId: string(name='vocabularyId', description='This parameter is required.', example='dhbf***rbrdb', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-9864***1', position='Body'),
}

model GetVocabResponseBody = {
  data?: {
    audioModelCode?: string(name='audioModelCode', example='nls'),
    description?: string(name='description'),
    name?: string(name='name'),
    vocabularyId?: string(name='vocabularyId', example='rrbe***jrvrdd'),
    wordWeightList?: [ 
      {
        weight?: int32(name='weight', example='1'),
        word?: string(name='word'),
      }
    ](name='wordWeightList'),
  }(name='data'),
  requestId?: string(name='requestId', example='968A8634-FA2C-5381-9B3E-*******F'),
  success?: string(name='success', example='true'),
}

model GetVocabResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVocabResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetVocab  GetVocabRequest
  * @return GetVocabResponse
 */
async function getVocab(request: GetVocabRequest): GetVocabResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetVocab', 'POST', '/vocab/getVocab', 'json', false, 'json', request);
}

model ListVocabRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-jhfr****8v', position='Body'),
}

model ListVocabResponseBody = {
  data?: [ 
    {
      audioModelCode?: string(name='audioModelCode', example='nls'),
      description?: string(name='description'),
      name?: string(name='name'),
      vocabularyId?: string(name='vocabularyId', example='dv*****erverve'),
      wordWeightList?: [ 
        {
          weight?: int32(name='weight', example='3'),
          word?: string(name='word'),
        }
      ](name='wordWeightList'),
    }
  ](name='data'),
  requestId?: string(name='requestId', example='968A8634-FA2C-5381-9B3E-*******F'),
  success?: string(name='success', example='true'),
}

model ListVocabResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVocabResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListVocab  ListVocabRequest
  * @return ListVocabResponse
 */
async function listVocab(request: ListVocabRequest): ListVocabResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListVocab', 'POST', '/vocab/listVocab', 'json', false, 'json', request);
}

model RunCompletionRequest {
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-ik******RVYCKzt', position='Path'),
  appId: string(name='appId', description='This parameter is required.', example='097d65c9c7004f8dad2b454850ac232b', position='Path'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Host'),
  dialogue: {
    sentences?: [ 
      {
        chatId?: string(name='ChatId'),
        role: string(name='Role', description='This parameter is required.', example='user'),
        text: string(name='Text', description='This parameter is required.'),
      }
    ](name='Sentences'),
    sessionId?: string(name='SessionId', example='d25zc9c7004f8dad2b454d'),
  }(name='Dialogue', description='This parameter is required.', position='Body'),
  fields?: [ 
    {
      code?: string(name='Code', example='phoneNumber'),
      desc?: string(name='Desc'),
      enumValues?: [ 
        {
          desc?: string(name='Desc'),
          enumValue: string(name='EnumValue', description='This parameter is required.'),
        }
      ](name='EnumValues'),
      name: string(name='Name', description='This parameter is required.'),
    }
  ](name='Fields', position='Body'),
  modelCode?: string(name='ModelCode', example='ccai-14b', position='Body'),
  serviceInspection?: {
    inspectionContents?: [ 
      {
        content?: string(name='Content'),
        title: string(name='Title', description='This parameter is required.'),
      }
    ](name='InspectionContents'),
    inspectionIntroduction?: string(name='InspectionIntroduction'),
    sceneIntroduction?: string(name='SceneIntroduction'),
  }(name='ServiceInspection', position='Body'),
  stream?: boolean(name='Stream', example='false', position='Body'),
  templateIds: [ long ](name='TemplateIds', description='This parameter is required.', position='Body'),
  responseFormatType?: string(name='responseFormatType', position='Body'),
  variables?: [ 
    {
      variableCode?: string(name='variableCode'),
      variableValue?: string(name='variableValue'),
    }
  ](name='variables', position='Body'),
}

model RunCompletionResponseBody = {
  finishReason?: string(name='FinishReason'),
  requestId?: string(name='RequestId', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  text?: string(name='Text'),
  inputTokens?: string(name='inputTokens'),
  outputTokens?: string(name='outputTokens'),
  totalTokens?: string(name='totalTokens'),
}

model RunCompletionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunCompletionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunCompletion  RunCompletionRequest
  * @return RunCompletionResponse
 */
async function runCompletion(request: RunCompletionRequest): RunCompletionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunCompletion', 'POST', '/{workspaceId}/ccai/app/{appId}/completion', 'json', false, 'json', request);
}

function runCompletionWithResponseIterable(request: RunCompletionRequest): iterator[RunCompletionResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunCompletion', 'POST', '/{workspaceId}/ccai/app/{appId}/completion', 'json', false, 'json', request);
}

model RunCompletionMessageRequest {
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-ik******RVYCKzt', position='Path'),
  appId: string(name='appId', description='This parameter is required.', example='097d65c9c7004f8dad2b454850ac232b', position='Path'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Host'),
  messages: [ 
    {
      content: string(name='Content', description='This parameter is required.'),
      role: string(name='Role', description='This parameter is required.', example='user'),
    }
  ](name='Messages', description='This parameter is required.', position='Body'),
  modelCode?: string(name='ModelCode', example='ccai-14b', position='Body'),
  stream?: boolean(name='Stream', example='false', position='Body'),
  responseFormatType?: string(name='responseFormatType', position='Body'),
}

model RunCompletionMessageResponseBody = {
  finishReason?: string(name='FinishReason'),
  requestId?: string(name='RequestId', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  text?: string(name='Text'),
  inputTokens?: string(name='inputTokens'),
  outputTokens?: string(name='outputTokens'),
  totalTokens?: string(name='totalTokens'),
}

model RunCompletionMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunCompletionMessageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunCompletionMessage  RunCompletionMessageRequest
  * @return RunCompletionMessageResponse
 */
async function runCompletionMessage(request: RunCompletionMessageRequest): RunCompletionMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunCompletionMessage', 'POST', '/{workspaceId}/ccai/app/{appId}/completion_message', 'json', false, 'json', request);
}

function runCompletionMessageWithResponseIterable(request: RunCompletionMessageRequest): iterator[RunCompletionMessageResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunCompletionMessage', 'POST', '/{workspaceId}/ccai/app/{appId}/completion_message', 'json', false, 'json', request);
}

model UpdateVocabRequest {
  regionId?: string(name='regionId', position='Host'),
  description?: string(name='description', position='Body'),
  name?: string(name='name', position='Body'),
  vocabularyId: string(name='vocabularyId', description='This parameter is required.', example='dsvsv***dsvv', position='Body'),
  wordWeightList?: [ 
    {
      weight: int32(name='weight', description='This parameter is required.', example='2'),
      word: string(name='word', description='This parameter is required.'),
    }
  ](name='wordWeightList', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-jhfr****w8v', position='Body'),
}

model UpdateVocabResponseBody = {
  data?: string(name='data', example='true'),
  requestId?: string(name='requestId', example='968A8634-FA2C-5381-9B3E-*******F'),
  success?: string(name='success', example='true'),
}

model UpdateVocabResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateVocabResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateVocab  UpdateVocabRequest
  * @return UpdateVocabResponse
 */
async function updateVocab(request: UpdateVocabRequest): UpdateVocabResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateVocab', 'POST', '/vocab/updateVocab', 'json', false, 'json', request);
}

