/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aligenie', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ExecuteSceneRequest {
  sceneId?: string(name='SceneId', example='a84a55aa410e460a9ac753570c76fecc'),
}

model ExecuteSceneResponseBody = {
  requestId?: string(name='RequestId', example='191C79AD-F9F9-531E-B8C1-73DF6433B920'),
}

model ExecuteSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteSceneResponseBody(name='body'),
}

/**
 * @summary 执行场景
 *
 * @param request ExecuteSceneRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExecuteSceneResponse
 */
async function executeSceneWithOptions(request: ExecuteSceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecuteSceneResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.sceneId)) {
    body['SceneId'] = request.sceneId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ExecuteScene',
    version = 'oauth2_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/oauth2/iot/scene/execute`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 执行场景
 *
 * @param request ExecuteSceneRequest
 * @return ExecuteSceneResponse
 */
async function executeScene(request: ExecuteSceneRequest): ExecuteSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return executeSceneWithOptions(request, headers, runtime);
}

model GetSceneListResponseBody = {
  requestId?: string(name='RequestId', example='435CF567-58DC-5761-AFA8-650772602E2D'),
  sceneList?: [ 
    {
      sceneId?: string(name='SceneId', example='840960b85c3c48e0bd7260c1718295fd'),
      sceneName?: string(name='SceneName'),
    }
  ](name='SceneList'),
}

model GetSceneListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSceneListResponseBody(name='body'),
}

/**
 * @summary 获取场景列表
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSceneListResponse
 */
async function getSceneListWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): GetSceneListResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetSceneList',
    version = 'oauth2_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/oauth2/iot/scene/list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取场景列表
 *
 * @return GetSceneListResponse
 */
async function getSceneList(): GetSceneListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getSceneListWithOptions(headers, runtime);
}

model GetUserBasicInfoResponseBody = {
  avatarUrl?: string(name='AvatarUrl', example='https://xxxxxx'),
  nickname?: string(name='Nickname', example='xxxxxx'),
  openId?: string(name='OpenId', example='3hPPBd9YuhfJQCzZ/07AAWdoO3K8zCb/KAqW96zPHXPiFkzjB/JfcWuuFHQQDaGZ4wVbNMV6wYuj075p/rhVLg=='),
  requestId?: string(name='RequestId', example='4070039E-5822-1F32-9295-1D2883E48BA5'),
}

model GetUserBasicInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserBasicInfoResponseBody(name='body'),
}

/**
 * @summary 获取
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetUserBasicInfoResponse
 */
async function getUserBasicInfoWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): GetUserBasicInfoResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetUserBasicInfo',
    version = 'oauth2_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/oauth2/users/basic`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取
 *
 * @return GetUserBasicInfoResponse
 */
async function getUserBasicInfo(): GetUserBasicInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getUserBasicInfoWithOptions(headers, runtime);
}

model OAuth2RevocationEndpointHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model OAuth2RevocationEndpointRequest {
  token?: string(name='Token', example='UJMiksSwuMJvwXrJLULMykSw6qZ6VqaxOkN4qd5cW1Q4HhsLxvUR5xVOIv1WB3br5LoP20lPa8xiYLSMbt8JqHACXdSdw7fNkhRTIHnadxWW5jfDg7BELUB0FcFfPiv0'),
  tokenTypeHint?: string(name='TokenTypeHint', example='refresh_token'),
}

model OAuth2RevocationEndpointResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='4070039E-5822-1F32-9295-1D2883E48BA5'),
}

model OAuth2RevocationEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OAuth2RevocationEndpointResponseBody(name='body'),
}

/**
 * @summary OAuth2令牌撤销端点
 *
 * @param request OAuth2RevocationEndpointRequest
 * @param headers OAuth2RevocationEndpointHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return OAuth2RevocationEndpointResponse
 */
async function oAuth2RevocationEndpointWithOptions(request: OAuth2RevocationEndpointRequest, headers: OAuth2RevocationEndpointHeaders, runtime: Util.RuntimeOptions): OAuth2RevocationEndpointResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.token)) {
    body['Token'] = request.token;
  }
  if (!Util.isUnset(request.tokenTypeHint)) {
    body['TokenTypeHint'] = request.tokenTypeHint;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'OAuth2RevocationEndpoint',
    version = 'oauth2_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/oauth2/revoke`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary OAuth2令牌撤销端点
 *
 * @param request OAuth2RevocationEndpointRequest
 * @return OAuth2RevocationEndpointResponse
 */
async function oAuth2RevocationEndpoint(request: OAuth2RevocationEndpointRequest): OAuth2RevocationEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new OAuth2RevocationEndpointHeaders{};
  return oAuth2RevocationEndpointWithOptions(request, headers, runtime);
}

model OAuth2TokenEndpointHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model OAuth2TokenEndpointRequest {
  code?: string(name='Code', example='rf3mi4JOU-xRIX2zEuRLHi-U9mPnvISeSphbwiBHJ5mEKZtG-xJsbBWrq8RmhQEPRYh0JOd3DaS_VZ90soD_YrsT4OBtgD06DmdIKL2_5KFfI6p_SjXX2-UMJuGfXDkB'),
  grantType?: string(name='GrantType', example='authorization_code'),
  redirectUri?: string(name='RedirectUri', example='https://xxx.xxx.com/xxx'),
  refreshToken?: string(name='RefreshToken', example='zsEcmaUeb8-NZW4IIUDD7qdgBNflrj6fH8BXJYbW9iXihZTgvbcr1_utC9p5HJLn_lXVwhfivBTgUQZBCGvGl5lxqaxFhmFtt-OrBduFQKL9x8p2lpEMKlxuKHZZZJ3A'),
}

model OAuth2TokenEndpointResponseBody = {
  accessToken?: string(name='AccessToken', example='UJMiksSwuMJvwXrJLULMykSw6qZ6VqaxOkN4qd5cW1Q4HhsLxvUR5xVOIv1WB3br5LoP20lPa8xiYLSMbt8JqHACXdSdw7fNkhRTIHnadxWW5jfDg7BELUB0FcFfPiv0'),
  expiresIn?: long(name='ExpiresIn', example='604799'),
  refreshToken?: string(name='RefreshToken', example='zsEcmaUeb8-NZW4IIUDD7qdgBNflrj6fH8BXJYbW9iXihZTgvbcr1_utC9p5HJLn_lXVwhfivBTgUQZBCGvGl5lxqaxFhmFtt-OrBduFQKL9x8p2lpEMKlxuKHZZZJ3A'),
  requestId?: string(name='RequestId', example='4070039E-5822-1F32-9295-1D2883E48BA5'),
  scope?: string(name='Scope', example='aligenie:user:basic:read aligenie:iot:scene:read'),
  tokenType?: string(name='TokenType', example='Bearer'),
}

model OAuth2TokenEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OAuth2TokenEndpointResponseBody(name='body'),
}

/**
 * @summary OAuth2令牌端点
 *
 * @param request OAuth2TokenEndpointRequest
 * @param headers OAuth2TokenEndpointHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return OAuth2TokenEndpointResponse
 */
async function oAuth2TokenEndpointWithOptions(request: OAuth2TokenEndpointRequest, headers: OAuth2TokenEndpointHeaders, runtime: Util.RuntimeOptions): OAuth2TokenEndpointResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['Code'] = request.code;
  }
  if (!Util.isUnset(request.grantType)) {
    body['GrantType'] = request.grantType;
  }
  if (!Util.isUnset(request.redirectUri)) {
    body['RedirectUri'] = request.redirectUri;
  }
  if (!Util.isUnset(request.refreshToken)) {
    body['RefreshToken'] = request.refreshToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'OAuth2TokenEndpoint',
    version = 'oauth2_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/oauth2/token`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary OAuth2令牌端点
 *
 * @param request OAuth2TokenEndpointRequest
 * @return OAuth2TokenEndpointResponse
 */
async function oAuth2TokenEndpoint(request: OAuth2TokenEndpointRequest): OAuth2TokenEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new OAuth2TokenEndpointHeaders{};
  return oAuth2TokenEndpointWithOptions(request, headers, runtime);
}

