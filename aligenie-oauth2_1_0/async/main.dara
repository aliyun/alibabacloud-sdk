/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'AliGenie';
  @version = 'oauth2_1.0';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreatePlayingListRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='UC_CLIENT_ID'),
    id: string(name='Id', description='This parameter is required.', example='123'),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
  openCreatePlayingListRequest: {
    contentList: [ 
      {
        rawId: string(name='RawId', description='This parameter is required.', example='12345'),
        source: string(name='Source', description='This parameter is required.', example='ximalayaH5'),
      }
    ](name='ContentList', description='This parameter is required.'),
    contentType: string(name='ContentType', description='This parameter is required.', example='content'),
    extendInfo?: map[string]any(name='ExtendInfo', example='{}'),
    index?: int32(name='Index', example='1'),
    needAlbumContinued?: boolean(name='NeedAlbumContinued', example='true'),
    playFrom?: string(name='PlayFrom', example='default'),
    playMode?: string(name='PlayMode', example='Normal'),
  }(name='OpenCreatePlayingListRequest', description='This parameter is required.', shrink='json', position='Body'),
}

model CreatePlayingListResponseBody = {
  requestId?: string(name='RequestId', example='10002398812'),
}

model CreatePlayingListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePlayingListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePlayingList  CreatePlayingListRequest
  * @return CreatePlayingListResponse
 */
async function createPlayingList(request: CreatePlayingListRequest): CreatePlayingListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePlayingList', 'POST', '/v1.0/oauth2/content/playing/create', 'json', true, 'form', request);
}

model ExecuteSceneRequest {
  sceneId?: string(name='SceneId', example='a84a55aa410e460a9ac753570c76fecc', position='Body'),
}

model ExecuteSceneResponseBody = {
  requestId?: string(name='RequestId', example='191C79AD-F9F9-531E-B8C1-73DF6433B920'),
}

model ExecuteSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteSceneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExecuteScene  ExecuteSceneRequest
  * @return ExecuteSceneResponse
 */
async function executeScene(request: ExecuteSceneRequest): ExecuteSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExecuteScene', 'POST', '/v1.0/oauth2/iot/scene/execute', 'json', true, 'form', request);
}

model ExecuteSmartHomeSceneRequest {
  familyId: string(name='FamilyId', description='This parameter is required.', example='2iS1AH5eo8qrw1PYBL/Ulq==', position='Body'),
  sceneId: string(name='SceneId', description='This parameter is required.', example='Y1lCALepjYmTEouxsTrkjB==', position='Body'),
}

model ExecuteSmartHomeSceneResponseBody = {
  requestId?: string(name='RequestId', example='435CF567-12DC-5761-AFA8-650774502E2D'),
}

model ExecuteSmartHomeSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteSmartHomeSceneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExecuteSmartHomeScene  ExecuteSmartHomeSceneRequest
  * @return ExecuteSmartHomeSceneResponse
 */
async function executeSmartHomeScene(request: ExecuteSmartHomeSceneRequest): ExecuteSmartHomeSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExecuteSmartHomeScene', 'POST', '/v1.0/oauth2/iot/smart_home/scene/execute', 'json', true, 'form', request);
}

model GetSceneListRequest {
}

model GetSceneListResponseBody = {
  requestId?: string(name='RequestId', example='435CF567-58DC-5761-AFA8-650772602E2D'),
  sceneList?: [ 
    {
      sceneId?: string(name='SceneId', example='840960b85c3c48e0bd7260c1718295fd'),
      sceneName?: string(name='SceneName'),
    }
  ](name='SceneList'),
}

model GetSceneListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSceneListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSceneList  GetSceneListRequest
  * @return GetSceneListResponse
 */
async function getSceneList(request: GetSceneListRequest): GetSceneListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSceneList', 'GET', '/v1.0/oauth2/iot/scene/list', 'json', false, 'json', request);
}

model GetSmartHomeSceneListRequest {
}

model GetSmartHomeSceneListResponseBody = {
  familySceneList?: [ 
    {
      familyId?: string(name='familyId', example='2iS1AH5eo8qrw1PYBL/Ulq=='),
      familyName?: string(name='familyName'),
      sceneList?: [ 
        {
          sceneId?: string(name='SceneId', example='6813AH5586qrw1P5ln/123=='),
          sceneName?: string(name='SceneName'),
        }
      ](name='sceneList'),
    }
  ](name='FamilySceneList'),
  requestId?: string(name='RequestId', example='435CF567-12DC-5761-AFA8-650774502E2D'),
}

model GetSmartHomeSceneListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSmartHomeSceneListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSmartHomeSceneList  GetSmartHomeSceneListRequest
  * @return GetSmartHomeSceneListResponse
 */
async function getSmartHomeSceneList(request: GetSmartHomeSceneListRequest): GetSmartHomeSceneListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSmartHomeSceneList', 'GET', '/v1.0/oauth2/iot/smart_home/scene/list', 'json', false, 'json', request);
}

model GetUserBasicInfoRequest {
}

model GetUserBasicInfoResponseBody = {
  avatarUrl?: string(name='AvatarUrl', example='https://xxxxxx'),
  nickname?: string(name='Nickname', example='xxxxxx'),
  openId?: string(name='OpenId', example='3hPPBd9YuhfJQCzZ/07AAWdoO3K8zCb/KAqW96zPHXPiFkzjB/JfcWuuFHQQDaGZ4wVbNMV6wYuj075p/rhVLg=='),
  requestId?: string(name='RequestId', example='4070039E-5822-1F32-9295-1D2883E48BA5'),
  unionIds?: [ 
    {
      organizationId?: string(name='OrganizationId'),
      unionId?: string(name='UnionId'),
    }
  ](name='UnionIds'),
}

model GetUserBasicInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserBasicInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserBasicInfo  GetUserBasicInfoRequest
  * @return GetUserBasicInfoResponse
 */
async function getUserBasicInfo(request: GetUserBasicInfoRequest): GetUserBasicInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUserBasicInfo', 'GET', '/v1.0/oauth2/users/basic', 'json', false, 'json', request);
}

model GetUserPhoneRequest {
}

model GetUserPhoneResponseBody = {
  phone?: string(name='Phone', example='18612345678'),
  requestId?: string(name='RequestId', description='Id of the request', example='CEADB586-51CB-1B6B-95BD-AB85A7A08E97'),
}

model GetUserPhoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserPhoneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserPhone  GetUserPhoneRequest
  * @return GetUserPhoneResponse
 */
async function getUserPhone(request: GetUserPhoneRequest): GetUserPhoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUserPhone', 'GET', '/v1.0/oauth2/user/profile/phone', 'json', false, 'json', request);
}

model OAuth2RevocationEndpointRequest {
  token?: string(name='Token', example='UJMiksSwuMJvwXrJLULMykSw6qZ6VqaxOkN4qd5cW1Q4HhsLxvUR5xVOIv1WB3br5LoP20lPa8xiYLSMbt8JqHACXdSdw7fNkhRTIHnadxWW5jfDg7BELUB0FcFfPiv0', position='Body'),
  tokenTypeHint?: string(name='TokenTypeHint', example='refresh_token', position='Body'),
}

model OAuth2RevocationEndpointResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='4070039E-5822-1F32-9295-1D2883E48BA5'),
}

model OAuth2RevocationEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OAuth2RevocationEndpointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OAuth2RevocationEndpoint  OAuth2RevocationEndpointRequest
  * @return OAuth2RevocationEndpointResponse
 */
async function oAuth2RevocationEndpoint(request: OAuth2RevocationEndpointRequest): OAuth2RevocationEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'OAuth2RevocationEndpoint', 'POST', '/v1.0/oauth2/revoke', 'json', true, 'form', request);
}

model OAuth2TokenEndpointRequest {
  code?: string(name='Code', example='rf3mi4JOU-xRIX2zEuRLHi-U9mPnvISeSphbwiBHJ5mEKZtG-xJsbBWrq8RmhQEPRYh0JOd3DaS_VZ90soD_YrsT4OBtgD06DmdIKL2_5KFfI6p_SjXX2-UMJuGfXDkB', position='Body'),
  grantType?: string(name='GrantType', example='authorization_code', position='Body'),
  redirectUri?: string(name='RedirectUri', example='https://xxx.xxx.com/xxx', position='Body'),
  refreshToken?: string(name='RefreshToken', example='zsEcmaUeb8-NZW4IIUDD7qdgBNflrj6fH8BXJYbW9iXihZTgvbcr1_utC9p5HJLn_lXVwhfivBTgUQZBCGvGl5lxqaxFhmFtt-OrBduFQKL9x8p2lpEMKlxuKHZZZJ3A', position='Body'),
}

model OAuth2TokenEndpointResponseBody = {
  accessToken?: string(name='AccessToken', example='UJMiksSwuMJvwXrJLULMykSw6qZ6VqaxOkN4qd5cW1Q4HhsLxvUR5xVOIv1WB3br5LoP20lPa8xiYLSMbt8JqHACXdSdw7fNkhRTIHnadxWW5jfDg7BELUB0FcFfPiv0'),
  expiresIn?: long(name='ExpiresIn', example='604799'),
  refreshToken?: string(name='RefreshToken', example='zsEcmaUeb8-NZW4IIUDD7qdgBNflrj6fH8BXJYbW9iXihZTgvbcr1_utC9p5HJLn_lXVwhfivBTgUQZBCGvGl5lxqaxFhmFtt-OrBduFQKL9x8p2lpEMKlxuKHZZZJ3A'),
  requestId?: string(name='RequestId', example='4070039E-5822-1F32-9295-1D2883E48BA5'),
  scope?: string(name='Scope', example='aligenie:user:basic:read aligenie:iot:scene:read'),
  tokenType?: string(name='TokenType', example='Bearer'),
}

model OAuth2TokenEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OAuth2TokenEndpointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OAuth2TokenEndpoint  OAuth2TokenEndpointRequest
  * @return OAuth2TokenEndpointResponse
 */
async function oAuth2TokenEndpoint(request: OAuth2TokenEndpointRequest): OAuth2TokenEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'OAuth2TokenEndpoint', 'POST', '/v1.0/oauth2/token', 'json', true, 'form', request);
}

model PushDeviceNotificationRequest {
  tenantInfo?: {
    subjectId?: string(name='SubjectId', example='12797******304102'),
  }(name='TenantInfo', shrink='json', position='Body'),
  body?: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='1923792******8R7392'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    isDebug?: boolean(name='IsDebug', example='false'),
    messageTemplateId: string(name='MessageTemplateId', description='This parameter is required.', example='2iU81*****G9elJ'),
    organizationId?: string(name='OrganizationId', example='29837******2938'),
    placeHolder?: map[string]string(name='PlaceHolder'),
    sendTarget: {
      targetIdentity?: string(name='TargetIdentity', example='2VpiDQ6aMjxz******Eo7r6e08oIVZ3fKrm5TyEfY='),
      targetType?: string(name='TargetType', example='DEVICE_OPEN_ID'),
    }(name='SendTarget', description='This parameter is required.'),
  }(name='body', shrink='json', position='Body'),
}

model PushDeviceNotificationResponseBody = {
  requestId?: string(name='requestId', example='908FA068-529C-0C20-8DB5-63B0EF7CFF1F'),
}

model PushDeviceNotificationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushDeviceNotificationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PushDeviceNotification  PushDeviceNotificationRequest
  * @return PushDeviceNotificationResponse
 */
async function pushDeviceNotification(request: PushDeviceNotificationRequest): PushDeviceNotificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PushDeviceNotification', 'POST', '/v1.0/oauth2/device/notification/push', 'json', true, 'form', request);
}

model QueryDeviceListRequest {
}

model QueryDeviceListResponseBody = {
  deviceList?: [ 
    {
      deviceIconUrl?: string(name='DeviceIconUrl', example='https://XXXXXX'),
      deviceName?: string(name='DeviceName'),
      deviceOpenId?: string(name='DeviceOpenId', example='jMR2********ojVJXk='),
      deviceUnionIds?: [ 
        {
          organizationId?: string(name='OrganizationId'),
          unionId?: string(name='UnionId'),
        }
      ](name='DeviceUnionIds'),
      online?: string(name='Online', example='1'),
    }
  ](name='DeviceList'),
  encodeKey?: string(name='EncodeKey', example='125****0946'),
  encodeType?: string(name='EncodeType', example='PROJECT_ID'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
}

model QueryDeviceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDeviceListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDeviceList  QueryDeviceListRequest
  * @return QueryDeviceListResponse
 */
async function queryDeviceList(request: QueryDeviceListRequest): QueryDeviceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryDeviceList', 'GET', '/v1.0/oauth2/device/list', 'json', false, 'json', request);
}

