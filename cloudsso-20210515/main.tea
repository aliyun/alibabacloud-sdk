/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('cloudsso', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddExternalSAMLIdPCertificateRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  x509Certificate?: string(name='X509Certificate', description='The X.509 certificate in the PEM format.

The certificate is provided by the SAML IdP.', example='MIIC8DCCAdigAwIBAgIQP9eomUYGeoND****'),
}

model AddExternalSAMLIdPCertificateResponseBody = {
  certificateId?: string(name='CertificateId', description='The ID of the SAML signing certificate.', example='idp-c-00wk2fb4foracls0****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='12B3E332-DD16-515B-B695-39BA233AA172'),
}

model AddExternalSAMLIdPCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddExternalSAMLIdPCertificateResponseBody(name='body'),
}

/**
  * You can add up to two SAML signing certificates.
  * This topic provides an example on how to add a SAML signing certificate to the directory `d-00fc2p61****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request AddExternalSAMLIdPCertificateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AddExternalSAMLIdPCertificateResponse
 */
async function addExternalSAMLIdPCertificateWithOptions(request: AddExternalSAMLIdPCertificateRequest, runtime: Util.RuntimeOptions): AddExternalSAMLIdPCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.x509Certificate)) {
    query['X509Certificate'] = request.x509Certificate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddExternalSAMLIdPCertificate',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can add up to two SAML signing certificates.
  * This topic provides an example on how to add a SAML signing certificate to the directory `d-00fc2p61****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request AddExternalSAMLIdPCertificateRequest
  * @return AddExternalSAMLIdPCertificateResponse
 */
async function addExternalSAMLIdPCertificate(request: AddExternalSAMLIdPCertificateRequest): AddExternalSAMLIdPCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return addExternalSAMLIdPCertificateWithOptions(request, runtime);
}

model AddPermissionPolicyToAccessConfigurationRequest {
  accessConfigurationId?: string(name='AccessConfigurationId', description='The ID of the access configuration.', example='ac-00jhtfl8thteu6uj****'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  inlinePolicyDocument?: string(name='InlinePolicyDocument', description='The configurations of the inline policy.

The value can be up to 4,096 characters in length.

If you set `PermissionPolicyType` to `Inline`, you must specify this parameter. For more information about the syntax and structure of RAM policies, see [Policy syntax and structure](~~93739~~).', example='{"Statement": [{"Action": "*","Effect": "Allow","Resource": "*"}],"Version": "1"}'),
  permissionPolicyName?: string(name='PermissionPolicyName', description='The name of the policy.

*   If you set `PermissionPolicyType` to `System`, you must set this parameter to the name of the system policy. You can obtain the name of the system policy from RAM.
*   If you set `PermissionPolicyType` to `Inline`, you must set this parameter to the name of the inline policy. A custom value is supported.', example='AliyunECSFullAccess'),
  permissionPolicyType?: string(name='PermissionPolicyType', description='The type of the policy. Valid values:

*   System: system policy. Resource Access Management (RAM) system policies are reused.
*   Inline: inline policy. Inline policies are created based on the RAM policy syntax and structure.', example='System'),
}

model AddPermissionPolicyToAccessConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B7C6E839-FB65-59BE-B753-003AA8AF7DF7'),
}

model AddPermissionPolicyToAccessConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddPermissionPolicyToAccessConfigurationResponseBody(name='body'),
}

/**
  * This topic provides an example on how to add the system policy `AliyunECSFullAccess` to the access configuration `ac-00jhtfl8thteu6uj****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request AddPermissionPolicyToAccessConfigurationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AddPermissionPolicyToAccessConfigurationResponse
 */
async function addPermissionPolicyToAccessConfigurationWithOptions(request: AddPermissionPolicyToAccessConfigurationRequest, runtime: Util.RuntimeOptions): AddPermissionPolicyToAccessConfigurationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessConfigurationId)) {
    query['AccessConfigurationId'] = request.accessConfigurationId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.inlinePolicyDocument)) {
    query['InlinePolicyDocument'] = request.inlinePolicyDocument;
  }
  if (!Util.isUnset(request.permissionPolicyName)) {
    query['PermissionPolicyName'] = request.permissionPolicyName;
  }
  if (!Util.isUnset(request.permissionPolicyType)) {
    query['PermissionPolicyType'] = request.permissionPolicyType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddPermissionPolicyToAccessConfiguration',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to add the system policy `AliyunECSFullAccess` to the access configuration `ac-00jhtfl8thteu6uj****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request AddPermissionPolicyToAccessConfigurationRequest
  * @return AddPermissionPolicyToAccessConfigurationResponse
 */
async function addPermissionPolicyToAccessConfiguration(request: AddPermissionPolicyToAccessConfigurationRequest): AddPermissionPolicyToAccessConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return addPermissionPolicyToAccessConfigurationWithOptions(request, runtime);
}

model AddUserToGroupRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  groupId?: string(name='GroupId', description='The ID of the group.', example='g-00jqzghi2n3o5hkh****'),
  userId?: string(name='UserId', description='The ID of the user.', example='u-00q8wbq42wiltcrk****'),
}

model AddUserToGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F76AF4FC-25E4-5CF1-B7CB-74F3CB72F0F0'),
}

model AddUserToGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddUserToGroupResponseBody(name='body'),
}

/**
  * If System for Cross-domain Identity Management (SCIM) synchronization is enabled, you cannot add a user to a group that is synchronized by using SCIM.
  * This topic provides an example of how to add the user `u-00q8wbq42wiltcrk****` to the group `g-00jqzghi2n3o5hkh****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request AddUserToGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AddUserToGroupResponse
 */
async function addUserToGroupWithOptions(request: AddUserToGroupRequest, runtime: Util.RuntimeOptions): AddUserToGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddUserToGroup',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If System for Cross-domain Identity Management (SCIM) synchronization is enabled, you cannot add a user to a group that is synchronized by using SCIM.
  * This topic provides an example of how to add the user `u-00q8wbq42wiltcrk****` to the group `g-00jqzghi2n3o5hkh****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request AddUserToGroupRequest
  * @return AddUserToGroupResponse
 */
async function addUserToGroup(request: AddUserToGroupRequest): AddUserToGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addUserToGroupWithOptions(request, runtime);
}

model ClearExternalSAMLIdentityProviderRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
}

model ClearExternalSAMLIdentityProviderResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='96D1E5FF-0301-5636-8D33-071E033CFB82'),
}

model ClearExternalSAMLIdentityProviderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ClearExternalSAMLIdentityProviderResponseBody(name='body'),
}

/**
  * If single sign-on (SSO) logon is disabled, you can clear the configurations of a SAML IdP. If SSO logon is enabled, you cannot clear the configurations.
  * This topic provides an example on how to clear the configurations of the SAML IdP within the directory `d-00fc2p61****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ClearExternalSAMLIdentityProviderRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ClearExternalSAMLIdentityProviderResponse
 */
async function clearExternalSAMLIdentityProviderWithOptions(request: ClearExternalSAMLIdentityProviderRequest, runtime: Util.RuntimeOptions): ClearExternalSAMLIdentityProviderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ClearExternalSAMLIdentityProvider',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If single sign-on (SSO) logon is disabled, you can clear the configurations of a SAML IdP. If SSO logon is enabled, you cannot clear the configurations.
  * This topic provides an example on how to clear the configurations of the SAML IdP within the directory `d-00fc2p61****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ClearExternalSAMLIdentityProviderRequest
  * @return ClearExternalSAMLIdentityProviderResponse
 */
async function clearExternalSAMLIdentityProvider(request: ClearExternalSAMLIdentityProviderRequest): ClearExternalSAMLIdentityProviderResponse {
  var runtime = new Util.RuntimeOptions{};
  return clearExternalSAMLIdentityProviderWithOptions(request, runtime);
}

model CreateAccessAssignmentRequest {
  accessConfigurationId?: string(name='AccessConfigurationId', description='The ID of the access configuration.', example='ac-00jhtfl8thteu6uj****'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  principalId?: string(name='PrincipalId', description='The ID of the CloudSSO identity.

*   If you set `PrincipalType` to `User`, set `PrincipalId` to the ID of the CloudSSO user.
*   If you set `PrincipalType` to `Group`, set `PrincipalId` to the ID of the CloudSSO group.', example='u-00q8wbq42wiltcrk****'),
  principalType?: string(name='PrincipalType', description='The type of the CloudSSO identity. Valid values:

*   User
*   Group', example='User'),
  targetId?: string(name='TargetId', description='The ID of the task object.', example='114240524784****'),
  targetType?: string(name='TargetType', description='The type of the task object. Set the value to RD-Account, which indicates an account in your resource directory.', example='RD-Account'),
}

model CreateAccessAssignmentResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4726AA56-E138-5C99-85E4-F493536D042F'),
  task?: {
    accessConfigurationId?: string(name='AccessConfigurationId', description='The ID of the access configuration.', example='ac-00jhtfl8thteu6uj****'),
    accessConfigurationName?: string(name='AccessConfigurationName', description='The name of the access configuration.', example='ECS-Admin'),
    principalId?: string(name='PrincipalId', description='The ID of the CloudSSO identity.', example='u-00q8wbq42wiltcrk****'),
    principalName?: string(name='PrincipalName', description='The name of the CloudSSO identity.', example='Alice'),
    principalType?: string(name='PrincipalType', description='The type of the CloudSSO identity. Valid values:

*   User
*   Group', example='User'),
    status?: string(name='Status', description='The status of the task. Valid values:

*   InProgress: The task is running.
*   Success: The task is successful.
*   Failed: The task failed.', example='InProgress'),
    targetId?: string(name='TargetId', description='The ID of the task object.', example='114240524784****'),
    targetName?: string(name='TargetName', description='The name of the task object.', example='dev-test'),
    targetPath?: string(name='TargetPath', description='The path ID of the task object in your resource directory.', example='rd-3G****/r-Wm****/114240524784****'),
    targetPathName?: string(name='TargetPathName', description='The path name of the task object in your resource directory.', example='rd-3G****/root/dev-test'),
    targetType?: string(name='TargetType', description='The type of the task object. The value is fixed as RD-Account, which indicates an account in your resource directory.', example='RD-Account'),
    taskId?: string(name='TaskId', description='The ID of the task.', example='t-sh6tceylhvgejpip****'),
    taskType?: string(name='TaskType', description='The type of the task. The value is fixed as CreateAccessAssignment, which indicates that access permissions on an account in your resource directory are assigned.', example='CreateAccessAssignment'),
  }(name='Task', description='The information about the task.'),
}

model CreateAccessAssignmentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAccessAssignmentResponseBody(name='body'),
}

/**
  * When you call this operation, an asynchronous task is created. You can call the [GetTask](~~340670~~) operation to query the progress of task execution by using the value of the `TaskId` response parameter.
  * For more information about how to assign permissions on an account in your resource directory, see [Overview of multi-account authorization](~~266726~~).
  * This topic provides an example on how to assign access permissions on the account `114240524784****` in your resource directory to the CloudSSO user `u-00q8wbq42wiltcrk****` by using the access configuration `ac-00jhtfl8thteu6uj****`. After the call is successful, the CloudSSO user can access resources within the account in the resource directory.
  * ## Limits
  * You can call this operation up to 20 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request CreateAccessAssignmentRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateAccessAssignmentResponse
 */
async function createAccessAssignmentWithOptions(request: CreateAccessAssignmentRequest, runtime: Util.RuntimeOptions): CreateAccessAssignmentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessConfigurationId)) {
    query['AccessConfigurationId'] = request.accessConfigurationId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.principalId)) {
    query['PrincipalId'] = request.principalId;
  }
  if (!Util.isUnset(request.principalType)) {
    query['PrincipalType'] = request.principalType;
  }
  if (!Util.isUnset(request.targetId)) {
    query['TargetId'] = request.targetId;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAccessAssignment',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, an asynchronous task is created. You can call the [GetTask](~~340670~~) operation to query the progress of task execution by using the value of the `TaskId` response parameter.
  * For more information about how to assign permissions on an account in your resource directory, see [Overview of multi-account authorization](~~266726~~).
  * This topic provides an example on how to assign access permissions on the account `114240524784****` in your resource directory to the CloudSSO user `u-00q8wbq42wiltcrk****` by using the access configuration `ac-00jhtfl8thteu6uj****`. After the call is successful, the CloudSSO user can access resources within the account in the resource directory.
  * ## Limits
  * You can call this operation up to 20 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request CreateAccessAssignmentRequest
  * @return CreateAccessAssignmentResponse
 */
async function createAccessAssignment(request: CreateAccessAssignmentRequest): CreateAccessAssignmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccessAssignmentWithOptions(request, runtime);
}

model CreateAccessConfigurationRequest {
  accessConfigurationName?: string(name='AccessConfigurationName', description='The name of the access configuration.

The name can contain letters, digits, and hyphens (-).

The name can be up to 32 characters in length.', example='ECS-Admin'),
  description?: string(name='Description', description='The description of the access configuration.

The description can be up to 1,024 characters in length.', example='This is an access configuration.'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  relayState?: string(name='RelayState', description='The initial web page that is displayed after a CloudSSO user accesses an account in your resource directory by using the access configuration.

The web page must be a page of the Alibaba Cloud Management Console. By default, this parameter is empty, which indicates that the initial web page is the homepage of the Alibaba Cloud Management Console.', example='https://cloudsso.console.aliyun.com'),
  sessionDuration?: int32(name='SessionDuration', description='The duration of a session in which a CloudSSO user accesses an account in your resource directory by using the access configuration.

Unit: seconds.

Valid values: 900 to 43200. The value 900 indicates 15 minutes. The value 43200 indicates 12 hours.

Default value: 3600. The value indicates 1 hour.', example='3600'),
}

model CreateAccessConfigurationResponseBody = {
  accessConfiguration?: {
    accessConfigurationId?: string(name='AccessConfigurationId', description='The ID of the access configuration.', example='ac-00jhtfl8thteu6uj****'),
    accessConfigurationName?: string(name='AccessConfigurationName', description='The name of the access configuration.', example='ECS-Admin'),
    createTime?: string(name='CreateTime', description='The time when the access configuration was created.', example='2021-11-02T08:44:23Z'),
    description?: string(name='Description', description='The description of the access configuration.', example='This is an access configuration.'),
    relayState?: string(name='RelayState', description='The initial web page that is displayed after a CloudSSO user accesses an account in your resource directory by using the access configuration.', example='https://cloudsso.console.aliyun.com'),
    sessionDuration?: int32(name='SessionDuration', description='The duration of a session in which a CloudSSO user accesses an account in your resource directory by using the access configuration.

Unit: seconds.', example='3600'),
    statusNotifications?: [ string ](name='StatusNotifications', description='The status notification.'),
    updateTime?: string(name='UpdateTime', description='The time when the information about the access configuration was modified.', example='2021-11-02T08:44:23Z'),
  }(name='AccessConfiguration', description='The information about the access configuration.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A3A41736-A050-50B6-ABC5-590F376A0044'),
}

model CreateAccessConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAccessConfigurationResponseBody(name='body'),
}

/**
  * For more information about access configurations, see [Overview of access configurations](~~266737~~).
  * This topic provides an example on how to create an access configuration named `ECS-Admin`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request CreateAccessConfigurationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateAccessConfigurationResponse
 */
async function createAccessConfigurationWithOptions(request: CreateAccessConfigurationRequest, runtime: Util.RuntimeOptions): CreateAccessConfigurationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessConfigurationName)) {
    query['AccessConfigurationName'] = request.accessConfigurationName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.relayState)) {
    query['RelayState'] = request.relayState;
  }
  if (!Util.isUnset(request.sessionDuration)) {
    query['SessionDuration'] = request.sessionDuration;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAccessConfiguration',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * For more information about access configurations, see [Overview of access configurations](~~266737~~).
  * This topic provides an example on how to create an access configuration named `ECS-Admin`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request CreateAccessConfigurationRequest
  * @return CreateAccessConfigurationResponse
 */
async function createAccessConfiguration(request: CreateAccessConfigurationRequest): CreateAccessConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccessConfigurationWithOptions(request, runtime);
}

model CreateDirectoryRequest {
  directoryName?: string(name='DirectoryName', description='The name of the directory. The name must be globally unique.

The name can contain lowercase letters, digits, and hyphens (-). The name cannot start or end with a hyphen (-) and cannot contain two consecutive hyphens (-). The name cannot start with d-.

The name must be 2 to 64 characters in length.

>  If you do not specify this parameter, the value of this parameter is automatically generated by the system.', example='example'),
}

model CreateDirectoryResponseBody = {
  directory?: {
    createTime?: string(name='CreateTime', description='The time when the directory was created. The time is displayed in UTC.', example='2021-10-10T04:04:04Z'),
    directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
    directoryName?: string(name='DirectoryName', description='The name of the directory.', example='example'),
    region?: string(name='Region', description='The region ID of the directory.', example='cn-shanghai'),
    updateTime?: string(name='UpdateTime', description='The time when the directory was modified. The time is displayed in UTC.', example='2021-10-10T04:04:04Z'),
  }(name='Directory', description='The information about the directory.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ADADC31D-90EE-5459-99B0-D83DF07769A3'),
}

model CreateDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDirectoryResponseBody(name='body'),
}

/**
  * A directory is a CloudSSO instance. Before you can use CloudSSO, you must create a directory. The directory is used to manage all CloudSSO resources.
  * To create a directory, you must select a region. Alibaba Cloud stores data in the directory only in the region that you select. However, you can deploy Alibaba Cloud resources including Elastic Compute Service (ECS) instances and ApsaraDB RDS instances in other regions. You can also use your cloud account for logons and access the Alibaba Cloud resources in other regions. You can select a region to create a directory based on your security compliance requirements and the geographic location of specific users. If you do not have strict security compliance requirements, we recommend that you select a region that is the closest to the geographical location of the specific users. This way, access to cloud resources is accelerated. You can create the CloudSSO directory in the China (Shanghai), China (Hong Kong), US (Silicon Valley), or Germany (Frankfurt) region.
  * This topic provides an example on how to create a directory named `example` in the China (Shanghai) region.
  * ## Limits
  * - You can create only one directory for a management account.
  * - If you want to change the region of a directory, you must delete the directory and then create a directory in a different region.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request CreateDirectoryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateDirectoryResponse
 */
async function createDirectoryWithOptions(request: CreateDirectoryRequest, runtime: Util.RuntimeOptions): CreateDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryName)) {
    query['DirectoryName'] = request.directoryName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDirectory',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * A directory is a CloudSSO instance. Before you can use CloudSSO, you must create a directory. The directory is used to manage all CloudSSO resources.
  * To create a directory, you must select a region. Alibaba Cloud stores data in the directory only in the region that you select. However, you can deploy Alibaba Cloud resources including Elastic Compute Service (ECS) instances and ApsaraDB RDS instances in other regions. You can also use your cloud account for logons and access the Alibaba Cloud resources in other regions. You can select a region to create a directory based on your security compliance requirements and the geographic location of specific users. If you do not have strict security compliance requirements, we recommend that you select a region that is the closest to the geographical location of the specific users. This way, access to cloud resources is accelerated. You can create the CloudSSO directory in the China (Shanghai), China (Hong Kong), US (Silicon Valley), or Germany (Frankfurt) region.
  * This topic provides an example on how to create a directory named `example` in the China (Shanghai) region.
  * ## Limits
  * - You can create only one directory for a management account.
  * - If you want to change the region of a directory, you must delete the directory and then create a directory in a different region.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request CreateDirectoryRequest
  * @return CreateDirectoryResponse
 */
async function createDirectory(request: CreateDirectoryRequest): CreateDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDirectoryWithOptions(request, runtime);
}

model CreateGroupRequest {
  description?: string(name='Description', description='The description of the group.

The description can be up to 1,024 characters in length.', example='This is a group.'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  groupName?: string(name='GroupName', description='The name of the group.

The name can contain letters, digits, underscores (\\_), hyphens (-), and periods (.).

The name can be up to 128 characters in length.', example='TestGroup'),
}

model CreateGroupResponseBody = {
  group?: {
    createTime?: string(name='CreateTime', description='The time when the group was created.', example='2021-11-01T02:38:27Z'),
    description?: string(name='Description', description='The description of the group.', example='This is a group.'),
    groupId?: string(name='GroupId', description='The ID of the group.', example='g-00jqzghi2n3o5hkh****'),
    groupName?: string(name='GroupName', description='The name of the group.', example='TestGroup'),
    provisionType?: string(name='ProvisionType', description='The type of the group. The value is fixed as Manual, which indicates that the group is manually created.', example='Manual'),
    updateTime?: string(name='UpdateTime', description='The time when the information about the group was modified.', example='2021-11-01T02:38:27Z'),
  }(name='Group', description='The information about the group.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='20E9650E-EC23-593E-933F-EA0D280D040C'),
}

model CreateGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateGroupResponseBody(name='body'),
}

/**
  * This topic provides an example on how to create a group named `TestGroup`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request CreateGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateGroupResponse
 */
async function createGroupWithOptions(request: CreateGroupRequest, runtime: Util.RuntimeOptions): CreateGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateGroup',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to create a group named `TestGroup`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request CreateGroupRequest
  * @return CreateGroupResponse
 */
async function createGroup(request: CreateGroupRequest): CreateGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createGroupWithOptions(request, runtime);
}

model CreateSCIMServerCredentialRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
}

model CreateSCIMServerCredentialResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='2D2E5180-7ACF-57FF-A56C-26A49ABEBFF7'),
  SCIMServerCredential?: {
    createTime?: string(name='CreateTime', description='The time when the SCIM credential was created.', example='2021-11-09T08:12:52Z'),
    credentialId?: string(name='CredentialId', description='The ID of the SCIM credential.', example='scimcred-004whl0kvfwcypbi****'),
    credentialSecret?: string(name='CredentialSecret', description='The SCIM credential.

>  The SCIM credential is returned only when it is created. After the SCIM credential is created, you cannot query it. Keep the SCIM credential confidential.', example='8aAJCtpbyPJ8saXeYDgyw****'),
    credentialType?: string(name='CredentialType', description='The type of the SCIM credential.', example='BearerToken'),
    directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
    expireTime?: string(name='ExpireTime', description='The time when the SCIM credential expires.', example='2022-11-09T08:12:52Z'),
    status?: string(name='Status', description='The status of the SCIM credential. The value is fixed as Enabled, which indicates that the SCIM credential is enabled.', example='Enabled'),
  }(name='SCIMServerCredential', description='The information about the SCIM credential.'),
}

model CreateSCIMServerCredentialResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSCIMServerCredentialResponseBody(name='body'),
}

/**
  * SCIM credentials are required for SCIM synchronization. You can create up to two SCIM credentials.
  * This topic provides an example on how to create a SCIM credential within the directory `d-00fc2p61****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request CreateSCIMServerCredentialRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateSCIMServerCredentialResponse
 */
async function createSCIMServerCredentialWithOptions(request: CreateSCIMServerCredentialRequest, runtime: Util.RuntimeOptions): CreateSCIMServerCredentialResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSCIMServerCredential',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * SCIM credentials are required for SCIM synchronization. You can create up to two SCIM credentials.
  * This topic provides an example on how to create a SCIM credential within the directory `d-00fc2p61****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request CreateSCIMServerCredentialRequest
  * @return CreateSCIMServerCredentialResponse
 */
async function createSCIMServerCredential(request: CreateSCIMServerCredentialRequest): CreateSCIMServerCredentialResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSCIMServerCredentialWithOptions(request, runtime);
}

model CreateUserRequest {
  description?: string(name='Description', description='The description of the user.

The description can be up to 1,024 characters in length.', example='This is a user.'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  displayName?: string(name='DisplayName', description='The display name of the user.

The name can be up to 256 characters in length.', example='Alice'),
  email?: string(name='Email', description='The email address of the user. The email address must be unique within the directory.

The email address can be up to 128 characters in length.', example='Alice@example.com'),
  firstName?: string(name='FirstName', description='The first name of the user.

The name can be up to 64 characters in length.', example='Alice'),
  lastName?: string(name='LastName', description='The last name of the user.

The name can be up to 64 characters in length.', example='Lee'),
  status?: string(name='Status', description='The status of the user. Valid values:

*   Enabled: The logon of the user is enabled. This is the default value.
*   Disabled: The logon of the user is disabled.', example='Enabled'),
  userName?: string(name='UserName', description='The name of the user. The name must be unique within the directory. The name cannot be changed.

The name can contain numbers, letters, and the following special characters: `@_-.`

The name can be up to 64 characters in length.', example='Alice'),
}

model CreateUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F6F90F3D-4502-5877-B80B-97476F6AE2CC'),
  user?: {
    createTime?: string(name='CreateTime', description='The time when the user was created.', example='2021-10-26T03:03:42Z'),
    description?: string(name='Description', description='The description of the user.', example='This is a user.'),
    displayName?: string(name='DisplayName', description='The display name of the user.', example='Alice'),
    email?: string(name='Email', description='The email address of the user.', example='Alice@example.com'),
    firstName?: string(name='FirstName', description='The first name of the user.', example='Alice'),
    lastName?: string(name='LastName', description='The last name of the user.', example='Lee'),
    provisionType?: string(name='ProvisionType', description='The type of the user. Valid values:

*   Manual: The user is manually created.
*   Synchronized: The user is synchronized from an external identity provider (IdP).', example='Manual'),
    status?: string(name='Status', description='The status of the user. Valid values:

*   Enabled: The logon of the user is enabled.
*   Disabled: The logon of the user is disabled.', example='Enabled'),
    updateTime?: string(name='UpdateTime', description='The time when the user was modified.', example='2021-10-26T03:03:42Z'),
    userId?: string(name='UserId', description='The ID of the user.', example='u-00q8wbq42wiltcrk****'),
    userName?: string(name='UserName', description='The name of the user.', example='Alice'),
  }(name='User', description='The information about the user.'),
}

model CreateUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUserResponseBody(name='body'),
}

/**
  * This topic provides an example on how to create a user named `Alice`.  
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request CreateUserRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateUserResponse
 */
async function createUserWithOptions(request: CreateUserRequest, runtime: Util.RuntimeOptions): CreateUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  if (!Util.isUnset(request.firstName)) {
    query['FirstName'] = request.firstName;
  }
  if (!Util.isUnset(request.lastName)) {
    query['LastName'] = request.lastName;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateUser',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to create a user named `Alice`.  
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request CreateUserRequest
  * @return CreateUserResponse
 */
async function createUser(request: CreateUserRequest): CreateUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserWithOptions(request, runtime);
}

model DeleteAccessAssignmentRequest {
  accessConfigurationId?: string(name='AccessConfigurationId', description='The ID of the access configuration.', example='ac-00jhtfl8thteu6uj****'),
  deprovisionStrategy?: string(name='DeprovisionStrategy', description='Specifies whether to de-provision the access configuration when you remove the access permissions from the CloudSSO identity. The access configuration is used to assign the access permissions, and the identity is the only one that uses the access configuration and is associated with the account. Valid values:

*   DeprovisionForLastAccessAssignmentOnAccount: de-provisions the access configuration.
*   None: does not de-provision the access configuration. This is the default value.', example='None'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  principalId?: string(name='PrincipalId', description='The ID of the CloudSSO identity.

*   If you set `PrincipalType` to `User`, set `PrincipalId` to the ID of the CloudSSO user.
*   If you set `PrincipalType` to `Group`, set `PrincipalId` to the ID of the CloudSSO group.', example='u-00q8wbq42wiltcrk****'),
  principalType?: string(name='PrincipalType', description='The type of the CloudSSO identity. Valid values:

*   User
*   Group', example='User'),
  targetId?: string(name='TargetId', description='The ID of the task object.', example='114240524784****'),
  targetType?: string(name='TargetType', description='The type of the task object. The value is fixed as RD-Account, which indicates the accounts in the resource directory.', example='RD-Account'),
}

model DeleteAccessAssignmentResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5C9D0CF4-5CE8-5CE6-932A-826EF4ADD007'),
  task?: {
    accessConfigurationId?: string(name='AccessConfigurationId', description='The ID of the access configuration.', example='ac-00jhtfl8thteu6uj****'),
    accessConfigurationName?: string(name='AccessConfigurationName', description='The name of the access configuration.', example='ECS-Admin'),
    principalId?: string(name='PrincipalId', description='The ID of the CloudSSO identity.', example='u-00q8wbq42wiltcrk****'),
    principalName?: string(name='PrincipalName', description='The name of the CloudSSO identity.', example='Alice'),
    principalType?: string(name='PrincipalType', description='The type of the CloudSSO identity. Valid values:

*   User
*   Group', example='User'),
    status?: string(name='Status', description='The status of the task. Valid values:

*   InProgress: The task is running.
*   Success: The task is successful.
*   Failed: The task failed.', example='InProgress'),
    targetId?: string(name='TargetId', description='The ID of the task object.', example='114240524784****'),
    targetName?: string(name='TargetName', description='The name of the task object.', example='dev-test'),
    targetPath?: string(name='TargetPath', description='The path ID of the task object in the resource directory.', example='rd-3G****/r-Wm****/114240524784****'),
    targetPathName?: string(name='TargetPathName', description='The path name of the task object in the resource directory.', example='rd-3G****/root/dev-test'),
    targetType?: string(name='TargetType', description='The type of the task object. The value is fixed as RD-Account, which indicates the accounts in the resource directory.', example='RD-Account'),
    taskId?: string(name='TaskId', description='The ID of the task.', example='t-shfqw1u1edszvxw5****'),
    taskType?: string(name='TaskType', description='The type of the task. The value is fixed as DeleteAccessAssignment, which indicates that access permissions on an account in your resource directory are removed.', example='DeleteAccessAssignment'),
  }(name='Task', description='The information about the task.'),
}

model DeleteAccessAssignmentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAccessAssignmentResponseBody(name='body'),
}

/**
  * When you call this operation, an asynchronous task is created. You can call the [GetTask](~~340670~~) operation to query the progress of the task based on the value of the `TaskId` response parameter.
  * This topic provides an example on how to remove the access permissions on the account `114240524784****` in the resource directory from the CloudSSO user `u-00q8wbq42wiltcrk****`. The access permissions are assigned by using the access configuration `ac-00jhtfl8thteu6uj****`.
  * ## Limits
  * You can call this operation up to 20 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request DeleteAccessAssignmentRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteAccessAssignmentResponse
 */
async function deleteAccessAssignmentWithOptions(request: DeleteAccessAssignmentRequest, runtime: Util.RuntimeOptions): DeleteAccessAssignmentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessConfigurationId)) {
    query['AccessConfigurationId'] = request.accessConfigurationId;
  }
  if (!Util.isUnset(request.deprovisionStrategy)) {
    query['DeprovisionStrategy'] = request.deprovisionStrategy;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.principalId)) {
    query['PrincipalId'] = request.principalId;
  }
  if (!Util.isUnset(request.principalType)) {
    query['PrincipalType'] = request.principalType;
  }
  if (!Util.isUnset(request.targetId)) {
    query['TargetId'] = request.targetId;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAccessAssignment',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, an asynchronous task is created. You can call the [GetTask](~~340670~~) operation to query the progress of the task based on the value of the `TaskId` response parameter.
  * This topic provides an example on how to remove the access permissions on the account `114240524784****` in the resource directory from the CloudSSO user `u-00q8wbq42wiltcrk****`. The access permissions are assigned by using the access configuration `ac-00jhtfl8thteu6uj****`.
  * ## Limits
  * You can call this operation up to 20 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request DeleteAccessAssignmentRequest
  * @return DeleteAccessAssignmentResponse
 */
async function deleteAccessAssignment(request: DeleteAccessAssignmentRequest): DeleteAccessAssignmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccessAssignmentWithOptions(request, runtime);
}

model DeleteAccessConfigurationRequest {
  accessConfigurationId?: string(name='AccessConfigurationId', description='The ID of the access configuration.', example='ac-001j9mcm3k7335bc****'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  forceRemovePermissionPolicies?: boolean(name='ForceRemovePermissionPolicies', description='Specifies whether to forcibly remove system policies and inline policies. Valid values:

*   true: When you delete the access configuration, the associated system policies and inline policies are forcibly removed.
*   false: When you delete the access configuration, the associated system policies and inline policies are not forcibly removed. This is the default value. If these policies exist in the access configuration, the deletion fails. Before you delete the access configuration, you must remove the system policies and inline policies. For more information, see [RemovePermissionPolicyFromAccessConfiguration](~~336904~~).', example='false'),
}

model DeleteAccessConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B13E4EE-3853-5852-9165-597C32AD8FB7'),
}

model DeleteAccessConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAccessConfigurationResponseBody(name='body'),
}

/**
  * This topic provides an example on how to delete the access configuration whose ID is `ac-001j9mcm3k7335bc****`.
  * ## Prerequisites
  * The access configuration that you want to delete is de-provisioned from the accounts in your resource directory. For more information, see [DeprovisionAccessConfiguration](~~338352~~).
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request DeleteAccessConfigurationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteAccessConfigurationResponse
 */
async function deleteAccessConfigurationWithOptions(request: DeleteAccessConfigurationRequest, runtime: Util.RuntimeOptions): DeleteAccessConfigurationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessConfigurationId)) {
    query['AccessConfigurationId'] = request.accessConfigurationId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.forceRemovePermissionPolicies)) {
    query['ForceRemovePermissionPolicies'] = request.forceRemovePermissionPolicies;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAccessConfiguration',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to delete the access configuration whose ID is `ac-001j9mcm3k7335bc****`.
  * ## Prerequisites
  * The access configuration that you want to delete is de-provisioned from the accounts in your resource directory. For more information, see [DeprovisionAccessConfiguration](~~338352~~).
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request DeleteAccessConfigurationRequest
  * @return DeleteAccessConfigurationResponse
 */
async function deleteAccessConfiguration(request: DeleteAccessConfigurationRequest): DeleteAccessConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccessConfigurationWithOptions(request, runtime);
}

model DeleteDirectoryRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
}

model DeleteDirectoryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B182C041-8C64-5F2F-A07B-FC67FAF89CF9'),
}

model DeleteDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDirectoryResponseBody(name='body'),
}

/**
  * This topic provides an example on how to delete a directory whose ID is `d-00fc2p61****`.
  * ## Prerequisites
  * No resources are contained in the directory that you want to delete.
  * *   Access permissions on the accounts in your resource directory are removed from all users and groups. For more information, see [DeleteAccessAssignment](~~338350~~).
  * *   Users are deleted. For more information, see [DeleteUser](~~341671~~).
  * *   Groups are deleted. For more information, see [DeleteGroup](~~341821~~).
  * *   Access configurations are deleted. For more information, see [DeleteAccessConfiguration](~~336907~~).
  * *   System for Cross-domain Identity Management (SCIM) credentials are deleted. For more information, see [DeleteSCIMServerCredential](~~341842~~).
  * *   SSO logon configurations are deleted. For more information, see [ClearExternalSAMLIdentityProvider](~~341573~~).
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request DeleteDirectoryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteDirectoryResponse
 */
async function deleteDirectoryWithOptions(request: DeleteDirectoryRequest, runtime: Util.RuntimeOptions): DeleteDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDirectory',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to delete a directory whose ID is `d-00fc2p61****`.
  * ## Prerequisites
  * No resources are contained in the directory that you want to delete.
  * *   Access permissions on the accounts in your resource directory are removed from all users and groups. For more information, see [DeleteAccessAssignment](~~338350~~).
  * *   Users are deleted. For more information, see [DeleteUser](~~341671~~).
  * *   Groups are deleted. For more information, see [DeleteGroup](~~341821~~).
  * *   Access configurations are deleted. For more information, see [DeleteAccessConfiguration](~~336907~~).
  * *   System for Cross-domain Identity Management (SCIM) credentials are deleted. For more information, see [DeleteSCIMServerCredential](~~341842~~).
  * *   SSO logon configurations are deleted. For more information, see [ClearExternalSAMLIdentityProvider](~~341573~~).
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request DeleteDirectoryRequest
  * @return DeleteDirectoryResponse
 */
async function deleteDirectory(request: DeleteDirectoryRequest): DeleteDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDirectoryWithOptions(request, runtime);
}

model DeleteGroupRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  groupId?: string(name='GroupId', description='The ID of the group.', example='g-00jqzghi2n3o5hkh****'),
}

model DeleteGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F723DE01-6276-5DC4-9B1F-9CBE3E1748B2'),
}

model DeleteGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGroupResponseBody(name='body'),
}

/**
  * If System for Cross-domain Identity Management (SCIM) synchronization is enabled, you cannot delete a group that is synchronized by using SCIM.
  * ## Prerequisites
  * The group that you want to delete is not associated with the following resources. If the group is associated with the resources, the deletion fails.
  * *   Users: You must remove users from the group. For more information, see [RemoveUserFromGroup](~~335116~~).
  * *   Access permissions: You must remove the access permissions on the accounts in your resource directory from the group. For more information, see [DeleteAccessAssignment](~~338350~~).
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request DeleteGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteGroupResponse
 */
async function deleteGroupWithOptions(request: DeleteGroupRequest, runtime: Util.RuntimeOptions): DeleteGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGroup',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If System for Cross-domain Identity Management (SCIM) synchronization is enabled, you cannot delete a group that is synchronized by using SCIM.
  * ## Prerequisites
  * The group that you want to delete is not associated with the following resources. If the group is associated with the resources, the deletion fails.
  * *   Users: You must remove users from the group. For more information, see [RemoveUserFromGroup](~~335116~~).
  * *   Access permissions: You must remove the access permissions on the accounts in your resource directory from the group. For more information, see [DeleteAccessAssignment](~~338350~~).
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request DeleteGroupRequest
  * @return DeleteGroupResponse
 */
async function deleteGroup(request: DeleteGroupRequest): DeleteGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGroupWithOptions(request, runtime);
}

model DeleteMFADeviceForUserRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  MFADeviceId?: string(name='MFADeviceId', description='The ID of the MFA device.

You can call the [ListMFADevicesForUser](~~333531~~) operation to query the IDs of MFA devices.', example='mfa-00ujhet8pycljj7j****'),
  userId?: string(name='UserId', description='The ID of the user.', example='u-00q8wbq42wiltcrk****'),
}

model DeleteMFADeviceForUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8B9982ED-FD0D-5622-8EA0-7B768685DCE7'),
}

model DeleteMFADeviceForUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMFADeviceForUserResponseBody(name='body'),
}

/**
  * This topic provides an example on how to unbind the MFA device `mfa-00ujhet8pycljj7j****` from the user `u-00q8wbq42wiltcrk****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request DeleteMFADeviceForUserRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteMFADeviceForUserResponse
 */
async function deleteMFADeviceForUserWithOptions(request: DeleteMFADeviceForUserRequest, runtime: Util.RuntimeOptions): DeleteMFADeviceForUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.MFADeviceId)) {
    query['MFADeviceId'] = request.MFADeviceId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMFADeviceForUser',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to unbind the MFA device `mfa-00ujhet8pycljj7j****` from the user `u-00q8wbq42wiltcrk****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request DeleteMFADeviceForUserRequest
  * @return DeleteMFADeviceForUserResponse
 */
async function deleteMFADeviceForUser(request: DeleteMFADeviceForUserRequest): DeleteMFADeviceForUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMFADeviceForUserWithOptions(request, runtime);
}

model DeleteSCIMServerCredentialRequest {
  credentialId?: string(name='CredentialId', description='The ID of the SCIM credential.', example='scimcred-004whl0kvfwcypbi****'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
}

model DeleteSCIMServerCredentialResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8CE8B990-193D-50CE-A604-69F3E7DCE740'),
}

model DeleteSCIMServerCredentialResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSCIMServerCredentialResponseBody(name='body'),
}

/**
  * After a SCIM credential is deleted, the synchronization task that uses the SCIM credential fails.
  * This topic provides an example on how to delete the SCIM credential whose ID is `scimcred-004whl0kvfwcypbi****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request DeleteSCIMServerCredentialRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteSCIMServerCredentialResponse
 */
async function deleteSCIMServerCredentialWithOptions(request: DeleteSCIMServerCredentialRequest, runtime: Util.RuntimeOptions): DeleteSCIMServerCredentialResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.credentialId)) {
    query['CredentialId'] = request.credentialId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSCIMServerCredential',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * After a SCIM credential is deleted, the synchronization task that uses the SCIM credential fails.
  * This topic provides an example on how to delete the SCIM credential whose ID is `scimcred-004whl0kvfwcypbi****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request DeleteSCIMServerCredentialRequest
  * @return DeleteSCIMServerCredentialResponse
 */
async function deleteSCIMServerCredential(request: DeleteSCIMServerCredentialRequest): DeleteSCIMServerCredentialResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSCIMServerCredentialWithOptions(request, runtime);
}

model DeleteUserRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  userId?: string(name='UserId', description='The ID of the user.', example='u-00q8wbq42wiltcrk****'),
}

model DeleteUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='E598602-AC67-56EF-B7CC-2927C30AA0A8'),
}

model DeleteUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteUserResponseBody(name='body'),
}

/**
  * If System for Cross-domain Identity Management (SCIM) synchronization is enabled, you cannot delete a user that is synchronized by using SCIM.
  * ## Prerequisites
  * The user that you want to delete is not associated with the following resources. If the user is associated with the resources, the deletion fails.
  * *   Multi-factor authentication (MFA) devices: You must unbind the MFA devices from the user. For more information, see [DeleteMFADeviceForUser](~~341675~~).
  * *   Access permissions: You must remove the access permissions on the accounts in your resource directory from the user. For more information, see [DeleteAccessAssignment](~~338350~~).
  * *   Groups: You must remove the user from groups. For more information, see [RemoveUserFromGroup](~~335116~~).
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request DeleteUserRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteUserResponse
 */
async function deleteUserWithOptions(request: DeleteUserRequest, runtime: Util.RuntimeOptions): DeleteUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUser',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If System for Cross-domain Identity Management (SCIM) synchronization is enabled, you cannot delete a user that is synchronized by using SCIM.
  * ## Prerequisites
  * The user that you want to delete is not associated with the following resources. If the user is associated with the resources, the deletion fails.
  * *   Multi-factor authentication (MFA) devices: You must unbind the MFA devices from the user. For more information, see [DeleteMFADeviceForUser](~~341675~~).
  * *   Access permissions: You must remove the access permissions on the accounts in your resource directory from the user. For more information, see [DeleteAccessAssignment](~~338350~~).
  * *   Groups: You must remove the user from groups. For more information, see [RemoveUserFromGroup](~~335116~~).
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request DeleteUserRequest
  * @return DeleteUserResponse
 */
async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserWithOptions(request, runtime);
}

model DeprovisionAccessConfigurationRequest {
  accessConfigurationId?: string(name='AccessConfigurationId', description='The ID of the access configuration.', example='ac-00jhtfl8thteu6uj****'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  targetId?: string(name='TargetId', description='The ID of the task object.', example='114240524784****'),
  targetType?: string(name='TargetType', description='The type of the task object. Set the value to RD-Account, which indicates an account in your resource directory.', example='RD-Account'),
}

model DeprovisionAccessConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='584FE9D0-D1AC-5B19-A39C-8D244FC0538C'),
  tasks?: [ 
    {
      accessConfigurationId?: string(name='AccessConfigurationId', description='The ID of the access configuration.', example='ac-00jhtfl8thteu6uj****'),
      accessConfigurationName?: string(name='AccessConfigurationName', description='The name of the access configuration.', example='ECS-Admin'),
      status?: string(name='Status', description='The status of the task. Valid values:

*   InProgress: The task is running.
*   Success: The task is successful.
*   Failed: The task failed.', example='InProgress'),
      targetId?: string(name='TargetId', description='The ID of the task object.', example='114240524784****'),
      targetName?: string(name='TargetName', description='The name of the task object.', example='dev-test'),
      targetPath?: string(name='TargetPath', description='The path ID of the task object in your resource directory.', example='rd-3G****/r-Wm****/114240524784****'),
      targetPathName?: string(name='TargetPathName', description='The path name of the task object in your resource directory.', example='rd-3G****/root/dev-test'),
      targetType?: string(name='TargetType', description='The type of the task object. The value is fixed as RD-Account, which indicates an accounts in your resource directory.', example='RD-Account'),
      taskId?: string(name='TaskId', description='The ID of the task.', example='t-sh0655wnq8pdlrlc****'),
      taskType?: string(name='TaskType', description='The type of the task. The value is fixed as DeprovisionAccessConfiguration, which indicates that the access configuration is de-provisioned.', example='DeprovisionAccessConfiguration'),
    }
  ](name='Tasks', description='The information about the task.'),
}

model DeprovisionAccessConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeprovisionAccessConfigurationResponseBody(name='body'),
}

/**
  * When you call this operation, an asynchronous task is automatically created. You can call the [GetTask](~~340670~~) operation to query the progress of the task based on the value of the `TaskId` response parameter.
  * This topic provides an example on how to de-provision the access configuration `ac-00jhtfl8thteu6uj****` from the account `114240524784****` in your resource directory.
  * ## Limits
  * You can call this operation up to 20 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request DeprovisionAccessConfigurationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeprovisionAccessConfigurationResponse
 */
async function deprovisionAccessConfigurationWithOptions(request: DeprovisionAccessConfigurationRequest, runtime: Util.RuntimeOptions): DeprovisionAccessConfigurationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessConfigurationId)) {
    query['AccessConfigurationId'] = request.accessConfigurationId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.targetId)) {
    query['TargetId'] = request.targetId;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeprovisionAccessConfiguration',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, an asynchronous task is automatically created. You can call the [GetTask](~~340670~~) operation to query the progress of the task based on the value of the `TaskId` response parameter.
  * This topic provides an example on how to de-provision the access configuration `ac-00jhtfl8thteu6uj****` from the account `114240524784****` in your resource directory.
  * ## Limits
  * You can call this operation up to 20 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request DeprovisionAccessConfigurationRequest
  * @return DeprovisionAccessConfigurationResponse
 */
async function deprovisionAccessConfiguration(request: DeprovisionAccessConfigurationRequest): DeprovisionAccessConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deprovisionAccessConfigurationWithOptions(request, runtime);
}

model DisableServiceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='3257EAD2-8723-1F26-B69C-F8707D8B565D'),
}

model DisableServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableServiceResponseBody(name='body'),
}

/**
  * If your CloudSSO has no directory, you can disable CloudSSO based on your business requirements. After you disable CloudSSO, you can enable it at any time.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request DisableServiceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DisableServiceResponse
 */
async function disableServiceWithOptions(runtime: Util.RuntimeOptions): DisableServiceResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DisableService',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If your CloudSSO has no directory, you can disable CloudSSO based on your business requirements. After you disable CloudSSO, you can enable it at any time.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @return DisableServiceResponse
 */
async function disableService(): DisableServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableServiceWithOptions(runtime);
}

model EnableServiceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='3D57EAD2-8723-1F26-B69C-F8707D8B565D'),
}

model EnableServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableServiceResponseBody(name='body'),
}

/**
  * You can call this operation only if your account belongs to the management account that is used to enable a resource directory and has permissions to enable CloudSSO. For more information, see [Enable CloudSSO](~~262819~~).
  * If you call this operation, you agree to the [Alibaba Cloud International Website Product Terms of Service](https://www.alibabacloud.com/help/doc-detail/42416.htm).
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request EnableServiceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return EnableServiceResponse
 */
async function enableServiceWithOptions(runtime: Util.RuntimeOptions): EnableServiceResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'EnableService',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation only if your account belongs to the management account that is used to enable a resource directory and has permissions to enable CloudSSO. For more information, see [Enable CloudSSO](~~262819~~).
  * If you call this operation, you agree to the [Alibaba Cloud International Website Product Terms of Service](https://www.alibabacloud.com/help/doc-detail/42416.htm).
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @return EnableServiceResponse
 */
async function enableService(): EnableServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableServiceWithOptions(runtime);
}

model GetAccessConfigurationRequest {
  accessConfigurationId?: string(name='AccessConfigurationId', description='The ID of the access configuration.', example='ac-00ccule7tadaijxc****'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
}

model GetAccessConfigurationResponseBody = {
  accessConfiguration?: {
    accessConfigurationId?: string(name='AccessConfigurationId', description='The ID of the access configuration.', example='ac-00ccule7tadaijxc****'),
    accessConfigurationName?: string(name='AccessConfigurationName', description='The name of the access configuration.', example='VPC-Admin'),
    createTime?: string(name='CreateTime', description='The time when the access configuration was created.', example='2021-06-30T09:39:44Z'),
    description?: string(name='Description', description='The description of the access configuration.', example='This is an access configuration.'),
    relayState?: string(name='RelayState', description='The initial web page that is displayed after a CloudSSO user accesses an account in your resource directory by using the access configuration.', example='https://cloudsso.console.aliyun.com'),
    sessionDuration?: int32(name='SessionDuration', description='The duration of a session in which a CloudSSO user accesses an account in your resource directory by using the access configuration.

Unit: seconds.', example='3600'),
    statusNotifications?: [ string ](name='StatusNotifications', description='The status notification.'),
    updateTime?: string(name='UpdateTime', description='The time when the information about the access configuration was modified.', example='2021-07-26T03:02:11Z'),
  }(name='AccessConfiguration', description='The information about the access configuration.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D5E40508-483B-52F6-993C-D880B0F87591'),
}

model GetAccessConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAccessConfigurationResponseBody(name='body'),
}

/**
  * ## Usage notes
  * This topic provides an example on how to query the information about the access configuration whose ID is `ac-00ccule7tadaijxc****`.
  *
  * @param request GetAccessConfigurationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetAccessConfigurationResponse
 */
async function getAccessConfigurationWithOptions(request: GetAccessConfigurationRequest, runtime: Util.RuntimeOptions): GetAccessConfigurationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessConfigurationId)) {
    query['AccessConfigurationId'] = request.accessConfigurationId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAccessConfiguration',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Usage notes
  * This topic provides an example on how to query the information about the access configuration whose ID is `ac-00ccule7tadaijxc****`.
  *
  * @param request GetAccessConfigurationRequest
  * @return GetAccessConfigurationResponse
 */
async function getAccessConfiguration(request: GetAccessConfigurationRequest): GetAccessConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAccessConfigurationWithOptions(request, runtime);
}

model GetDirectoryRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
}

model GetDirectoryResponseBody = {
  directory?: {
    createTime?: string(name='CreateTime', description='The time when the directory was created.', example='2021-06-30T08:35:26Z'),
    directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
    directoryName?: string(name='DirectoryName', description='The name of the directory.', example='example'),
    region?: string(name='Region', description='The region ID of the directory.', example='cn-shanghai'),
    updateTime?: string(name='UpdateTime', description='The time when the directory was modified.', example='2021-10-25T07:18:46Z'),
  }(name='Directory', description='The information about the directory.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AA6A9E4B-8A61-59E1-AA87-F61CA18258A3'),
}

model GetDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDirectoryResponseBody(name='body'),
}

/**
  * This topic provides an example on how to query information about the directory whose ID is `d-00fc2p61****`.  
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request GetDirectoryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetDirectoryResponse
 */
async function getDirectoryWithOptions(request: GetDirectoryRequest, runtime: Util.RuntimeOptions): GetDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDirectory',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to query information about the directory whose ID is `d-00fc2p61****`.  
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request GetDirectoryRequest
  * @return GetDirectoryResponse
 */
async function getDirectory(request: GetDirectoryRequest): GetDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDirectoryWithOptions(request, runtime);
}

model GetDirectorySAMLServiceProviderInfoRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
}

model GetDirectorySAMLServiceProviderInfoResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4632107D-BCE1-5A96-B30B-182EE0709625'),
  SAMLServiceProvider?: {
    acsUrl?: string(name='AcsUrl', description='The Assertion Consumer Service (ACS) URL of the SP.', example='https://signin-cn-shanghai.alibabacloudsso.com/saml/acs/51d298a9-2a3f-4e23-97c7-7ad1cfa9****'),
    directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
    encodedMetadataDocument?: string(name='EncodedMetadataDocument', description='The metadata file of the SP. The value of this parameter is Base64-encoded.', example='PD94bWwgdmVyc2lv****'),
    entityId?: string(name='EntityId', description='The entity ID of the SP.', example='https://signin-cn-shanghai.alibabacloudsso.com/saml/sp/d-00fc2p61****'),
  }(name='SAMLServiceProvider', description='The information about the SP.'),
}

model GetDirectorySAMLServiceProviderInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDirectorySAMLServiceProviderInfoResponseBody(name='body'),
}

/**
  * During SAML 2.0-based single sign-on (SSO) logon, CloudSSO is an SP, and the identity management system of an enterprise is an identity provider (IdP).
  * This topic provides an example on how to query the information about the SP within the directory `d-00fc2p61****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request GetDirectorySAMLServiceProviderInfoRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetDirectorySAMLServiceProviderInfoResponse
 */
async function getDirectorySAMLServiceProviderInfoWithOptions(request: GetDirectorySAMLServiceProviderInfoRequest, runtime: Util.RuntimeOptions): GetDirectorySAMLServiceProviderInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDirectorySAMLServiceProviderInfo',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * During SAML 2.0-based single sign-on (SSO) logon, CloudSSO is an SP, and the identity management system of an enterprise is an identity provider (IdP).
  * This topic provides an example on how to query the information about the SP within the directory `d-00fc2p61****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request GetDirectorySAMLServiceProviderInfoRequest
  * @return GetDirectorySAMLServiceProviderInfoResponse
 */
async function getDirectorySAMLServiceProviderInfo(request: GetDirectorySAMLServiceProviderInfoRequest): GetDirectorySAMLServiceProviderInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDirectorySAMLServiceProviderInfoWithOptions(request, runtime);
}

model GetDirectoryStatisticsRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
}

model GetDirectoryStatisticsResponseBody = {
  directoryStatistics?: {
    accessAssignmentCount?: int32(name='AccessAssignmentCount', description='The number of access permissions that are assigned.', example='5'),
    accessConfigurationCount?: int32(name='AccessConfigurationCount', description='The number of access configurations.', example='6'),
    accessConfigurationQuota?: int32(name='AccessConfigurationQuota', description='The quota for access configurations.', example='1000'),
    directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
    directoryName?: string(name='DirectoryName', description='The name of the directory.', example='new-example'),
    groupCount?: int32(name='GroupCount', description='The number of groups.', example='4'),
    groupQuota?: int32(name='GroupQuota', description='The quota for groups.', example='500'),
    inProgressTaskCount?: int32(name='InProgressTaskCount', description='The number of tasks that are being performed.', example='0'),
    region?: string(name='Region', description='The region ID of the directory.', example='cn-shanghai'),
    SCIMServerCredentialCount?: int32(name='SCIMServerCredentialCount', description='The number of SCIM credentials.', example='2'),
    SCIMSyncEnabled?: boolean(name='SCIMSyncEnabled', description='Indicates whether SCIM synchronization is enabled. Valid values:

*   true: SCIM synchronization is enabled.
*   false: SCIM synchronization is disabled.', example='true'),
    SSOEnabled?: boolean(name='SSOEnabled', description='Indicates whether SSO logon is enabled. Valid values:

*   true: SSO logon is enabled.
*   false: SSO logon is disabled.', example='false'),
    systemPolicyPerAccessConfigurationQuota?: int32(name='SystemPolicyPerAccessConfigurationQuota'),
    userCount?: int32(name='UserCount', description='The number of users.', example='16'),
    userQuota?: int32(name='UserQuota', description='The quota for users.', example='1000'),
  }(name='DirectoryStatistics', description='The statistics of the directory.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7B7228B0-A435-5D27-A6B2-ED3571F0654B'),
}

model GetDirectoryStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDirectoryStatisticsResponseBody(name='body'),
}

/**
  * This topic provides an example on how to query the statistics of a directory whose ID is `d-00fc2p61****`. The statistics include the number of users, quota for users, number of groups, quota for groups, number of access configurations, quota for access configurations, number of access permissions that are assigned, number of System for Cross-domain Identity Management (SCIM) credentials, number of asynchronous tasks, status of single sign-on (SSO) logon, and status of SCIM synchronization.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request GetDirectoryStatisticsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetDirectoryStatisticsResponse
 */
async function getDirectoryStatisticsWithOptions(request: GetDirectoryStatisticsRequest, runtime: Util.RuntimeOptions): GetDirectoryStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDirectoryStatistics',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to query the statistics of a directory whose ID is `d-00fc2p61****`. The statistics include the number of users, quota for users, number of groups, quota for groups, number of access configurations, quota for access configurations, number of access permissions that are assigned, number of System for Cross-domain Identity Management (SCIM) credentials, number of asynchronous tasks, status of single sign-on (SSO) logon, and status of SCIM synchronization.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request GetDirectoryStatisticsRequest
  * @return GetDirectoryStatisticsResponse
 */
async function getDirectoryStatistics(request: GetDirectoryStatisticsRequest): GetDirectoryStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDirectoryStatisticsWithOptions(request, runtime);
}

model GetExternalSAMLIdentityProviderRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
}

model GetExternalSAMLIdentityProviderResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='96D1E5FF-0301-5636-8D33-071E033CFB82'),
  SAMLIdentityProviderConfiguration?: {
    certificateIds?: [ string ](name='CertificateIds', description='The ID of the SAML signing certificate.'),
    createTime?: string(name='CreateTime', description='The time when the IdP was configured for the first time.', example='2021-11-09T09:30:13Z'),
    directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
    encodedMetadataDocument?: string(name='EncodedMetadataDocument', description='The metadata file of the IdP. The value of this parameter is Base64-encoded.', example='PD94bWwgdmVyc2lvbj0iMS4****'),
    entityId?: string(name='EntityId', description='The entity ID of the IdP.', example='http://www.okta.com/exk3qwgtjhetR2Od****'),
    loginUrl?: string(name='LoginUrl', description='The logon URL of the IdP.', example='https://dev-xxxxxx.okta.com/app/dev-xxxxxx_cloudssodemo_1/exk3qwgtjhetR2Od****/sso/saml'),
    SSOStatus?: string(name='SSOStatus', description='The status of SSO logon. Valid values:

*   Enabled
*   Disabled', example='Enabled'),
    updateTime?: string(name='UpdateTime', description='The time when the IdP configurations were last modified.', example='2021-11-09T09:30:22Z'),
    wantRequestSigned?: boolean(name='WantRequestSigned', description='Indicates whether CloudSSO needs to sign SAML requests. The requests are sent when users log on to the CloudSSO user portal to initiate SAML-based SSO. Valid values:

*   true: yes
*   false: no (default)', example='false'),
  }(name='SAMLIdentityProviderConfiguration', description='The configurations of the IdP.'),
}

model GetExternalSAMLIdentityProviderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetExternalSAMLIdentityProviderResponseBody(name='body'),
}

/**
  * This topic provides an example on how to query the configurations of the SAML IdP within the directory `d-00fc2p61****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request GetExternalSAMLIdentityProviderRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetExternalSAMLIdentityProviderResponse
 */
async function getExternalSAMLIdentityProviderWithOptions(request: GetExternalSAMLIdentityProviderRequest, runtime: Util.RuntimeOptions): GetExternalSAMLIdentityProviderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetExternalSAMLIdentityProvider',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to query the configurations of the SAML IdP within the directory `d-00fc2p61****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request GetExternalSAMLIdentityProviderRequest
  * @return GetExternalSAMLIdentityProviderResponse
 */
async function getExternalSAMLIdentityProvider(request: GetExternalSAMLIdentityProviderRequest): GetExternalSAMLIdentityProviderResponse {
  var runtime = new Util.RuntimeOptions{};
  return getExternalSAMLIdentityProviderWithOptions(request, runtime);
}

model GetGroupRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  groupId?: string(name='GroupId', description='The ID of the group.', example='g-00jqzghi2n3o5hkh****'),
}

model GetGroupResponseBody = {
  group?: {
    createTime?: string(name='CreateTime', description='The time when the group was created.', example='2021-11-01T02:38:27Z'),
    description?: string(name='Description', description='The description of the group.', example='This is a group.'),
    groupId?: string(name='GroupId', description='The ID of the group.', example='g-00jqzghi2n3o5hkh****'),
    groupName?: string(name='GroupName', description='The name of the group.', example='TestGroup'),
    provisionType?: string(name='ProvisionType', description='The type of the group. Valid values:

*   Manual: The group is manually created.
*   Synchronized: The group is synchronized from an external identity provider (IdP).', example='Manual'),
    updateTime?: string(name='UpdateTime', description='The time when the information about the group was modified.', example='2021-11-01T02:38:27Z'),
  }(name='Group', description='The information about the group.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='768F908D-A66A-5A5D-816C-20C93CBBFEE3'),
}

model GetGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGroupResponseBody(name='body'),
}

/**
  * This topic provides an example on how to query the information about the group `g-00jqzghi2n3o5hkh****` in the directory `d-00fc2p61****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request GetGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetGroupResponse
 */
async function getGroupWithOptions(request: GetGroupRequest, runtime: Util.RuntimeOptions): GetGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetGroup',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to query the information about the group `g-00jqzghi2n3o5hkh****` in the directory `d-00fc2p61****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request GetGroupRequest
  * @return GetGroupResponse
 */
async function getGroup(request: GetGroupRequest): GetGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGroupWithOptions(request, runtime);
}

model GetMFAAuthenticationSettingInfoRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='u-00q8wbq42wiltcrk****'),
}

model GetMFAAuthenticationSettingInfoResponseBody = {
  MFAAuthenticationSettingInfo?: {
    mfaAuthenticationAdvanceSettings?: string(name='MfaAuthenticationAdvanceSettings', description='The MFA policy of all users. Valid values:

*   Enabled: MFA is enabled for all users.
*   Byuser: User-specific settings are applied. For more information about how to configure MFA for a single user, see [UpdateUserMFAAuthenticationSettings](~~450135~~).
*   Disabled: MFA is disabled for all users.
*   OnlyRiskyLogin: MFA is required only for unusual logons.', example='OnlyRiskyLogin'),
    operationForRiskLogin?: string(name='OperationForRiskLogin', description='The MFA policy for unusual logons. Valid values:

*   Autonomous: MFA is prompted for users who initiated unusual logons. However, the users are allowed to skip MFA. If an MFA device is bound to a user who initiated an unusual logon, the user must pass MFA.
*   EnforceVerify: MFA is required. If no MFA devices are bound to a user who initiated an unusual logon, the user must bind an MFA device. If an MFA device is already bound to a user who initiated an unusual logon, the user must pass MFA.

> This parameter is displayed only when Byuser or OnlyRiskyLogin is returned for the MfaAuthenticationAdvanceSettings parameter.', example='EnforceVerify'),
  }(name='MFAAuthenticationSettingInfo', description='The MFA setting of all users.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='95D3B107-DA80-5B34-A3D0-9E82F8F0DA0E'),
}

model GetMFAAuthenticationSettingInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMFAAuthenticationSettingInfoResponseBody(name='body'),
}

/**
  * If you enable username-password logon for CloudSSO users, you can also configure MFA for the users.
  * This topic provides an example on how to query the MFA setting of all CloudSSO users that belong to the directory named `00q8wbq42wiltcrk****`.
  *
  * @param request GetMFAAuthenticationSettingInfoRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetMFAAuthenticationSettingInfoResponse
 */
async function getMFAAuthenticationSettingInfoWithOptions(request: GetMFAAuthenticationSettingInfoRequest, runtime: Util.RuntimeOptions): GetMFAAuthenticationSettingInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMFAAuthenticationSettingInfo',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If you enable username-password logon for CloudSSO users, you can also configure MFA for the users.
  * This topic provides an example on how to query the MFA setting of all CloudSSO users that belong to the directory named `00q8wbq42wiltcrk****`.
  *
  * @param request GetMFAAuthenticationSettingInfoRequest
  * @return GetMFAAuthenticationSettingInfoResponse
 */
async function getMFAAuthenticationSettingInfo(request: GetMFAAuthenticationSettingInfoRequest): GetMFAAuthenticationSettingInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMFAAuthenticationSettingInfoWithOptions(request, runtime);
}

model GetMFAAuthenticationSettingsRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
}

model GetMFAAuthenticationSettingsResponseBody = {
  MFAAuthenticationAdvanceSettings?: string(name='MFAAuthenticationAdvanceSettings', description='Indicates whether MFA is enabled for all users. Valid values:

*   Enabled: MFA is enabled for all users.
*   Byuser: User-specific settings are applied.
*   Disabled: MFA is disabled for all users.', example='Enabled'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A2BC00C5-76A2-5FFC-A340-927940A98377'),
}

model GetMFAAuthenticationSettingsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMFAAuthenticationSettingsResponseBody(name='body'),
}

/**
  * > This operation is no longer maintained and updated. You can call the [GetMFAAuthenticationSettingInfo](~~611286~~) operation to query more detailed information.
  * This topic provides an example on how to query the MFA setting of the users that belong to the directory named `d-00fc2p61****`. The returned result shows that MFA is enabled for all the users.
  *
  * @param request GetMFAAuthenticationSettingsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetMFAAuthenticationSettingsResponse
 */
async function getMFAAuthenticationSettingsWithOptions(request: GetMFAAuthenticationSettingsRequest, runtime: Util.RuntimeOptions): GetMFAAuthenticationSettingsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMFAAuthenticationSettings',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > This operation is no longer maintained and updated. You can call the [GetMFAAuthenticationSettingInfo](~~611286~~) operation to query more detailed information.
  * This topic provides an example on how to query the MFA setting of the users that belong to the directory named `d-00fc2p61****`. The returned result shows that MFA is enabled for all the users.
  *
  * @param request GetMFAAuthenticationSettingsRequest
  * @return GetMFAAuthenticationSettingsResponse
 */
async function getMFAAuthenticationSettings(request: GetMFAAuthenticationSettingsRequest): GetMFAAuthenticationSettingsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMFAAuthenticationSettingsWithOptions(request, runtime);
}

model GetMFAAuthenticationStatusRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
}

model GetMFAAuthenticationStatusResponseBody = {
  MFAAuthenticationStatus?: string(name='MFAAuthenticationStatus', description='The status of MFA. Valid values:

*   Enabled
*   Disabled', example='Enabled'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5E688346-DF1A-5537-9BFC-8A9974D29586'),
}

model GetMFAAuthenticationStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMFAAuthenticationStatusResponseBody(name='body'),
}

/**
  * This topic provides an example on how to check whether MFA is enabled for users in the directory whose ID is `00fc2p61****`. The returned result shows that MFA is in the Enabled state.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request GetMFAAuthenticationStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetMFAAuthenticationStatusResponse
 */
async function getMFAAuthenticationStatusWithOptions(request: GetMFAAuthenticationStatusRequest, runtime: Util.RuntimeOptions): GetMFAAuthenticationStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMFAAuthenticationStatus',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to check whether MFA is enabled for users in the directory whose ID is `00fc2p61****`. The returned result shows that MFA is in the Enabled state.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request GetMFAAuthenticationStatusRequest
  * @return GetMFAAuthenticationStatusResponse
 */
async function getMFAAuthenticationStatus(request: GetMFAAuthenticationStatusRequest): GetMFAAuthenticationStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMFAAuthenticationStatusWithOptions(request, runtime);
}

model GetSCIMSynchronizationStatusRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
}

model GetSCIMSynchronizationStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='7C086C2F-1C66-57B3-B14E-2C1DA70727CD'),
  SCIMSynchronizationStatus?: string(name='SCIMSynchronizationStatus', description='The status of SCIM synchronization. Valid values:

*   Enabled
*   Disabled', example='Enabled'),
}

model GetSCIMSynchronizationStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSCIMSynchronizationStatusResponseBody(name='body'),
}

/**
  * This topic provides an example on how to query the status of SCIM synchronization within the directory `d-00fc2p61****`. The returned result shows that SCIM synchronization is in the Enabled state.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request GetSCIMSynchronizationStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetSCIMSynchronizationStatusResponse
 */
async function getSCIMSynchronizationStatusWithOptions(request: GetSCIMSynchronizationStatusRequest, runtime: Util.RuntimeOptions): GetSCIMSynchronizationStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSCIMSynchronizationStatus',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to query the status of SCIM synchronization within the directory `d-00fc2p61****`. The returned result shows that SCIM synchronization is in the Enabled state.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request GetSCIMSynchronizationStatusRequest
  * @return GetSCIMSynchronizationStatusResponse
 */
async function getSCIMSynchronizationStatus(request: GetSCIMSynchronizationStatusRequest): GetSCIMSynchronizationStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSCIMSynchronizationStatusWithOptions(request, runtime);
}

model GetServiceStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='ADADC31D-90EE-5459-99B0-D83DF07769A3'),
  serviceStatus?: {
    accountId?: string(name='AccountId', description='The ID of your Alibaba Cloud account.', example='151266687691****'),
    prerequisiteCheckResult?: string(name='PrerequisiteCheckResult', description='Indicates whether you have permissions to enable CloudSSO. Valid values:

*   Success: You have permissions to enable CloudSSO.
*   Failed: You do not have permissions to enable CloudSSO.

>  The value of this parameter is returned only if the value of `Status` is `Disabled`.', example='Success'),
    regionsInUse?: [ string ](name='RegionsInUse', description='The ID of the region.'),
    status?: string(name='Status', description='Indicates whether CloudSSO is enabled. Valid values:

*   Enabled
*   Disabled', example='Enabled'),
  }(name='ServiceStatus', description='The status information of CloudSSO.'),
}

model GetServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetServiceStatusResponseBody(name='body'),
}

/**
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request GetServiceStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetServiceStatusResponse
 */
async function getServiceStatusWithOptions(runtime: Util.RuntimeOptions): GetServiceStatusResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetServiceStatus',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @return GetServiceStatusResponse
 */
async function getServiceStatus(): GetServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getServiceStatusWithOptions(runtime);
}

model GetTaskRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='t-shfqw1u1edszvxw5****'),
}

model GetTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='923CA5E8-57BF-5E15-8BA6-E75A966B7E3F'),
  task?: {
    accessConfigurationId?: string(name='AccessConfigurationId', description='The ID of the access configuration.', example='ac-00jhtfl8thteu6uj****'),
    accessConfigurationName?: string(name='AccessConfigurationName', description='The name of the access configuration.', example='ECS-Admin'),
    endTime?: string(name='EndTime', description='The time when the task ended.', example='2021-11-05T02:58:08Z'),
    failureReason?: string(name='FailureReason', description='The cause of the task failure.

>  This parameter is returned only when the value of `Status` is `Failed`.', example='No Permission.'),
    principalId?: string(name='PrincipalId', description='The ID of the CloudSSO identity.', example='u-00q8wbq42wiltcrk****'),
    principalName?: string(name='PrincipalName', description='The name of the CloudSSO identity.', example='Alice'),
    principalType?: string(name='PrincipalType', description='The type of the CloudSSO identity. Valid values:

*   User
*   Group', example='User'),
    startTime?: string(name='StartTime', description='The time when the task started.', example='2021-11-05T02:58:07Z'),
    status?: string(name='Status', description='The status of the task. Valid values:

*   InProgress: The task is running.
*   Success: The task is successful.
*   Failed: The task failed.', example='Success'),
    targetId?: string(name='TargetId', description='The ID of the task object.', example='114240524784****'),
    targetName?: string(name='TargetName', description='The name of the task object.', example='dev-test'),
    targetPath?: string(name='TargetPath', description='The path ID of the task object in the resource directory.', example='rd-3G****/r-Wm****/114240524784****'),
    targetPathName?: string(name='TargetPathName', description='The path name of the task object in the resource directory.', example='rd-3G****/root/dev-test'),
    targetType?: string(name='TargetType', description='The type of the task object. The value is fixed as RD-Account, which indicates the accounts in the resource directory.', example='RD-Account'),
    taskId?: string(name='TaskId', description='The ID of the task.', example='t-shfqw1u1edszvxw5****'),
    taskType?: string(name='TaskType', description='The type of the task. Valid values:

*   ProvisionAccessConfiguration: An access configuration is provisioned.
*   DeprovisionAccessConfiguration: An access configuration is de-provisioned.
*   CreateAccessAssignment: Access permissions on an account in the resource directory are assigned.
*   DeleteAccessAssignment: Access permissions on an account in the resource directory are removed.', example='DeleteAccessAssignment'),
  }(name='Task', description='The information about the task.'),
}

model GetTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTaskResponseBody(name='body'),
}

/**
  * This topic provides an example on how to query the information about the task whose ID is `t-shfqw1u1edszvxw5****`.
  * ## Limits
  * You can call this operation up to 20 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request GetTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetTaskResponse
 */
async function getTaskWithOptions(request: GetTaskRequest, runtime: Util.RuntimeOptions): GetTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTask',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to query the information about the task whose ID is `t-shfqw1u1edszvxw5****`.
  * ## Limits
  * You can call this operation up to 20 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request GetTaskRequest
  * @return GetTaskResponse
 */
async function getTask(request: GetTaskRequest): GetTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTaskWithOptions(request, runtime);
}

model GetTaskStatusRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='t-shfqw1u1edszvxw5****'),
}

model GetTaskStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='005F4623-AE53-504D-830F-44825F7DC211'),
  taskStatus?: {
    endTime?: string(name='EndTime', description='The time when the task ended.', example='2021-11-05T02:58:08Z'),
    failureReason?: string(name='FailureReason', description='The cause of the task failure.

>  This parameter is returned only when the value of `Status` is `Failed`.', example='No Permission.'),
    startTime?: string(name='StartTime', description='The time when the task started.', example='2021-11-05T02:58:07Z'),
    status?: string(name='Status', description='The status of the task. Valid values:

*   InProgress: The task is running.
*   Success: The task is successful.
*   Failed: The task failed.', example='Success'),
    taskId?: string(name='TaskId', description='The ID of the task.', example='t-shfqw1u1edszvxw5****'),
    taskType?: string(name='TaskType', description='The type of the task. Valid values:

*   ProvisionAccessConfiguration: An access configuration is provisioned.
*   DeprovisionAccessConfiguration: An access configuration is de-provisioned.
*   CreateAccessAssignment: Access permissions on an account in the resource directory are assigned.
*   DeleteAccessAssignment: Access permissions on an account in the resource directory are removed.', example='DeleteAccessAssignment'),
  }(name='TaskStatus', description='The status information of the task.'),
}

model GetTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTaskStatusResponseBody(name='body'),
}

/**
  * You can call the GetTaskStatus operation to query the status of an asynchronous task. If you want to query more information about an asynchronous task, you can call the [GetTask](~~340670~~) operation.
  * This topic provides an example on how to query the information about the task whose ID is `t-shfqw1u1edszvxw5****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request GetTaskStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetTaskStatusResponse
 */
async function getTaskStatusWithOptions(request: GetTaskStatusRequest, runtime: Util.RuntimeOptions): GetTaskStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTaskStatus',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call the GetTaskStatus operation to query the status of an asynchronous task. If you want to query more information about an asynchronous task, you can call the [GetTask](~~340670~~) operation.
  * This topic provides an example on how to query the information about the task whose ID is `t-shfqw1u1edszvxw5****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request GetTaskStatusRequest
  * @return GetTaskStatusResponse
 */
async function getTaskStatus(request: GetTaskStatusRequest): GetTaskStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTaskStatusWithOptions(request, runtime);
}

model GetUserRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  userId?: string(name='UserId', description='The ID of the user.', example='u-00q8wbq42wiltcrk****'),
}

model GetUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EE42D2C4-A30A-59B7-ACEB-6D22FB44174A'),
  user?: {
    createTime?: string(name='CreateTime', description='The time when the user was created.', example='2021-10-26T03:03:42Z'),
    description?: string(name='Description', description='The description of the user.', example='This is a user.'),
    displayName?: string(name='DisplayName', description='The display name of the user.', example='Alice'),
    email?: string(name='Email', description='The email address of the user.', example='Alice@example.com'),
    firstName?: string(name='FirstName', description='The first name of the user.', example='Alice'),
    lastName?: string(name='LastName', description='The last name of the user.', example='Lee'),
    provisionType?: string(name='ProvisionType', description='The type of the user. Valid values:

*   Manual: The user is manually created.
*   Synchronized: The user is synchronized from an external identity provider (IdP).', example='Manual'),
    status?: string(name='Status', description='The status of the user. Valid values:

*   Enabled: The logon of the user is enabled.
*   Disabled: The logon of the user is disabled.', example='Enabled'),
    updateTime?: string(name='UpdateTime', description='The time when the information about the user was modified.', example='2021-10-26T06:43:55Z'),
    userId?: string(name='UserId', description='The ID of the user.', example='u-00q8wbq42wiltcrk****'),
    userName?: string(name='UserName', description='The name of the user.', example='Alice'),
  }(name='User', description='The information about the user.'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserResponseBody(name='body'),
}

/**
  * This topic provides an example on how to query information about the user whose ID is `u-00q8wbq42wiltcrk****` in the `d-00fc2p61****` directory.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request GetUserRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetUserResponse
 */
async function getUserWithOptions(request: GetUserRequest, runtime: Util.RuntimeOptions): GetUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUser',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to query information about the user whose ID is `u-00q8wbq42wiltcrk****` in the `d-00fc2p61****` directory.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request GetUserRequest
  * @return GetUserResponse
 */
async function getUser(request: GetUserRequest): GetUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserWithOptions(request, runtime);
}

model GetUserMFAAuthenticationSettingsRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  userId?: string(name='UserId', description='The ID of the user.', example='u-00q8wbq42wiltcrk****'),
}

model GetUserMFAAuthenticationSettingsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5B598B62-85E6-5792-9DF1-246D251B07DA'),
  userMFAAuthenticationSettings?: string(name='UserMFAAuthenticationSettings', description='Indicates whether MFA is enabled for the user. Valid values:

*   Enabled: MFA is enabled for the user.
*   Disabled: MFA is disabled for the user.', example='Enabled'),
}

model GetUserMFAAuthenticationSettingsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserMFAAuthenticationSettingsResponseBody(name='body'),
}

/**
  * This topic provides an example on how to query the MFA setting of the user named `u-00q8wbq42wiltcrk****`. The returned result shows that MFA is enabled for the user.
  *
  * @param request GetUserMFAAuthenticationSettingsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetUserMFAAuthenticationSettingsResponse
 */
async function getUserMFAAuthenticationSettingsWithOptions(request: GetUserMFAAuthenticationSettingsRequest, runtime: Util.RuntimeOptions): GetUserMFAAuthenticationSettingsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUserMFAAuthenticationSettings',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to query the MFA setting of the user named `u-00q8wbq42wiltcrk****`. The returned result shows that MFA is enabled for the user.
  *
  * @param request GetUserMFAAuthenticationSettingsRequest
  * @return GetUserMFAAuthenticationSettingsResponse
 */
async function getUserMFAAuthenticationSettings(request: GetUserMFAAuthenticationSettingsRequest): GetUserMFAAuthenticationSettingsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserMFAAuthenticationSettingsWithOptions(request, runtime);
}

model ListAccessAssignmentsRequest {
  accessConfigurationId?: string(name='AccessConfigurationId', description='The ID of the access configuration. The ID can be used to filter access permissions.', example='ac-00jhtfl8thteu6uj****'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Valid values: 1 to 20.

Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The token to return for the next page. If this is your first time to call this operation, you do not need to specify `NextToken`.

When you call this operation for the first time, if the total number of entries to return exceeds the value of `MaxResults`, the entries are truncated. Only the entries that match the value of `MaxResults` are returned, and the excess entries are not returned. In this case, the value of the response parameter `IsTruncated` is `true`, and `NextToken` is returned. In the next call, you can use the value of `NextToken` and maintain the settings of the other request parameters to query the excess entries. You can repeat the call until the value of `IsTruncated` becomes `false`. This way, all entries are returned.', example='K1c3o9K7pFxoTtxH1Nm7MMLb7zrDGvftYBQBPDVv7AD3a8yhRb3Mk8L9ivmN6bFSjfkZNTAg3h4****'),
  principalId?: string(name='PrincipalId', description='The ID of the CloudSSO identity. The ID can be used to filter access permissions.

*   If you set `PrincipalType` to User, set `PrincipalId` to the ID of the Cloud SSO user.
*   If you set `PrincipalType` to Group, set `PrincipalId` to the ID of the CloudSSO group.

>  You can use the ID to filter access permissions only if you specify both `PrincipalId` and `PrincipalType`.', example='u-00q8wbq42wiltcrk****'),
  principalType?: string(name='PrincipalType', description='The type of the CloudSSO identity. The type can be used to filter access permissions. Valid values:

*   User
*   Group

>  You can use the type to filter access permissions only if you specify both `PrincipalId` and `PrincipalType`.', example='User'),
  targetId?: string(name='TargetId', description='The ID of the task object. The ID can be used to filter access permissions.

>  You can use the ID to filter access permissions only if you specify both `TargetId` and `TargetType`.', example='114240524784****'),
  targetType?: string(name='TargetType', description='The type of the task object. The type can be used to filter access permissions.

Set the value to RD-Account, which indicates an account in your resource directory.

>  You can use the type to filter access permissions only if you specify both `TargetId` and `TargetType`.', example='RD-Account'),
}

model ListAccessAssignmentsResponseBody = {
  accessAssignments?: [ 
    {
      accessConfigurationId?: string(name='AccessConfigurationId', description='The ID of the access configuration.', example='ac-00jhtfl8thteu6uj****'),
      accessConfigurationName?: string(name='AccessConfigurationName', description='The name of the access configuration.', example='ECS-Admin'),
      createTime?: string(name='CreateTime', description='The time when the access permissions were assigned.', example='2021-11-04T10:03:08Z'),
      principalId?: string(name='PrincipalId', description='The ID of the CloudSSO identity.', example='u-00q8wbq42wiltcrk****'),
      principalName?: string(name='PrincipalName', description='The name of the CloudSSO identity.', example='Alice'),
      principalType?: string(name='PrincipalType', description='The type of the CloudSSO identity. Valid values:

*   User
*   Group', example='User'),
      targetId?: string(name='TargetId', description='The ID of the task object.', example='114240524784****'),
      targetName?: string(name='TargetName', description='The name of the task object.', example='dev-test'),
      targetPath?: string(name='TargetPath', description='The path ID of the task object in your resource directory.', example='rd-3G****/r-Wm****/114240524784****'),
      targetPathName?: string(name='TargetPathName', description='The path name of the task object in your resource directory.', example='rd-3G****/root/dev-test'),
      targetType?: string(name='TargetType', description='The type of the task object.

The value is fixed as RD-Account, which indicates an account in your resource directory.', example='RD-Account'),
    }
  ](name='AccessAssignments', description='The access permissions that are assigned.'),
  isTruncated?: boolean(name='IsTruncated', description='Indicates whether the queried entries are truncated. Valid values:

*   true: The queried entries are truncated.
*   false: The queried entries are not truncated.', example='false'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='10'),
  nextToken?: string(name='NextToken', description='The token that is returned for the next page.

>  This parameter is returned only when the value of `IsTruncated` is `true`.', example='K1c3o9K7pFxoTtxH1Nm7MMLb7zrDGvftYBQBPDVv7AD3a8yhRb3Mk8L9ivmN6bFSjfkZNTAg3h4****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='66898413-EB80-556D-9429-06FE3548F672'),
  totalCounts?: int32(name='TotalCounts', description='The total number of entries returned.', example='1'),
}

model ListAccessAssignmentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAccessAssignmentsResponseBody(name='body'),
}

/**
  * This topic provides an example on how to query the assigned access permissions on the account `114240524784****` in your resource directory. The returned result shows that access permissions on the account in your resource directory is assigned to one user.
  * ## Limits
  * You can call this operation up to 20 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ListAccessAssignmentsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListAccessAssignmentsResponse
 */
async function listAccessAssignmentsWithOptions(request: ListAccessAssignmentsRequest, runtime: Util.RuntimeOptions): ListAccessAssignmentsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessConfigurationId)) {
    query['AccessConfigurationId'] = request.accessConfigurationId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.principalId)) {
    query['PrincipalId'] = request.principalId;
  }
  if (!Util.isUnset(request.principalType)) {
    query['PrincipalType'] = request.principalType;
  }
  if (!Util.isUnset(request.targetId)) {
    query['TargetId'] = request.targetId;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAccessAssignments',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to query the assigned access permissions on the account `114240524784****` in your resource directory. The returned result shows that access permissions on the account in your resource directory is assigned to one user.
  * ## Limits
  * You can call this operation up to 20 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ListAccessAssignmentsRequest
  * @return ListAccessAssignmentsResponse
 */
async function listAccessAssignments(request: ListAccessAssignmentsRequest): ListAccessAssignmentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAccessAssignmentsWithOptions(request, runtime);
}

model ListAccessConfigurationProvisioningsRequest {
  accessConfigurationId?: string(name='AccessConfigurationId', description='The ID of the access configuration. The ID can be used to filter accounts.', example='ac-00ccule7tadaijxc****'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Valid values: 1 to 20.

Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The token to return for the next page. If this is your first time to call this operation, you do not need to specify `NextToken`.

When you call this operation for the first time, if the total number of entries to return exceeds the value of `MaxResults`, the entries are truncated. Only the entries that match the value of `MaxResults` are returned, and the excess entries are not returned. In this case, the value of the response parameter `IsTruncated` is `true`, and `NextToken` is returned. In the next call, you can use the value of `NextToken` and maintain the settings of the other request parameters to query the excess entries. You can repeat the call until the value of `IsTruncated` becomes `false`. This way, all entries are returned.', example='K1c3o9K7pFxoTtxH1Nm7MMLb7zrDGvftYBQBPDVv7AD3a8yhRb3Mk8L9ivmN6bFSjfkZNTAg3h4****'),
  provisioningStatus?: string(name='ProvisioningStatus', description='The status of the access configuration. The value can be used to filter accounts. Valid values:

*   Provisioned: The access configuration is provisioned.
*   ReprovisionRequired: The access configuration needs to be re-provisioned.
*   DeprovisionFailed: The access configuration failed to be provisioned.', example='Provisioned'),
  targetId?: string(name='TargetId', description='The ID of the task object. The ID can be used to filter accounts.

>  You can use the ID to filter accounts only if you specify both `TargetId` and `TargetType`.', example='114240524784****'),
  targetType?: string(name='TargetType', description='The type of the task object. The type can be used to filter accounts.

Set the value to RD-Account, which indicates an account in your resource directory.

>  You can use the type to filter accounts only if you specify both `TargetId` and `TargetType`.', example='RD-Account'),
}

model ListAccessConfigurationProvisioningsResponseBody = {
  accessConfigurationProvisionings?: [ 
    {
      accessConfigurationId?: string(name='AccessConfigurationId', description='The ID of the access configuration.', example='ac-00ccule7tadaijxc****'),
      accessConfigurationName?: string(name='AccessConfigurationName', description='The name of the access configuration.', example='VPC-Admin'),
      createTime?: string(name='CreateTime', description='The first time when the access configuration was provisioned.', example='2021-07-26T08:54:14Z'),
      RAMPolicyNames?: [ string ](name='RAMPolicyNames', description='The name of the custom policy that is created for an account in your resource directory.'),
      RAMRoleName?: string(name='RAMRoleName', description='The name of the RAM role that is created for an account in your resource directory.', example='AliyunReservedSSO-VPC-Admin'),
      SAMLProviderName?: string(name='SAMLProviderName', description='The name of the Security Assertion Markup Language (SAML) identity provider (IdP) that is created within an account in your resource directory.', example='AliyunReservedSSO-d-00fc2p61****'),
      status?: string(name='Status', description='The status of the access configuration. Valid values:

*   Provisioned: The access configuration is provisioned.
*   ReprovisionRequired: The access configuration needs to be re-provisioned.
*   DeprovisionFailed: The access configuration failed to be provisioned.', example='Provisioned'),
      targetId?: string(name='TargetId', description='The ID of the task object.

If the value of TargetType is `RD-Account`, the value of this parameter is the UID of an account in your resource directory.', example='101522521960****'),
      targetName?: string(name='TargetName', description='The name of the task object.', example='SharedServices_5009****'),
      targetPath?: string(name='TargetPath', description='The path ID of the task object in your resource directory.', example='rd-3G****/r-Wm****/fd-pjM8oy****/101522521960****'),
      targetPathName?: string(name='TargetPathName', description='The path name of the task object in your resource directory.', example='rd-3G****/root/Core/SharedServices_5009****'),
      targetType?: string(name='TargetType', description='The type of the task object.

The value is fixed as RD-Account, which indicates an account in your resource directory.', example='RD-Account'),
      updateTime?: string(name='UpdateTime', description='The last time when the access configuration was provisioned.', example='2021-07-26T08:54:18Z'),
    }
  ](name='AccessConfigurationProvisionings', description='The accounts for which the access configuration is provisioned.'),
  isTruncated?: boolean(name='IsTruncated', description='Indicates whether the queried entries are truncated. Valid values:

*   true: The queried entries are truncated.
*   false: The queried entries are not truncated.', example='false'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='10'),
  nextToken?: string(name='NextToken', description='The token that is returned for the next page.

>  This parameter is returned only when the value of `IsTruncated` is `true`.', example='K1c3o9K7pFxoTtxH1Nm7MMLb7zrDGvftYBQBPDVv7AD3a8yhRb3Mk8L9ivmN6bFSjfkZNTAg3h4****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6BA1BDF1-D845-5D2C-B742-74BE2970E4C1'),
  totalCounts?: int32(name='TotalCounts', description='The total number of entries returned.', example='2'),
}

model ListAccessConfigurationProvisioningsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAccessConfigurationProvisioningsResponseBody(name='body'),
}

/**
  * ## Usage notes
  * This topic provides an example on how to query the accounts for which the access permission `ac-00ccule7tadaijxc****` is provisioned. The returned result shows that the access configuration is provisioned for two accounts in your resource directory.
  *
  * @param request ListAccessConfigurationProvisioningsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListAccessConfigurationProvisioningsResponse
 */
async function listAccessConfigurationProvisioningsWithOptions(request: ListAccessConfigurationProvisioningsRequest, runtime: Util.RuntimeOptions): ListAccessConfigurationProvisioningsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessConfigurationId)) {
    query['AccessConfigurationId'] = request.accessConfigurationId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.provisioningStatus)) {
    query['ProvisioningStatus'] = request.provisioningStatus;
  }
  if (!Util.isUnset(request.targetId)) {
    query['TargetId'] = request.targetId;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAccessConfigurationProvisionings',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Usage notes
  * This topic provides an example on how to query the accounts for which the access permission `ac-00ccule7tadaijxc****` is provisioned. The returned result shows that the access configuration is provisioned for two accounts in your resource directory.
  *
  * @param request ListAccessConfigurationProvisioningsRequest
  * @return ListAccessConfigurationProvisioningsResponse
 */
async function listAccessConfigurationProvisionings(request: ListAccessConfigurationProvisioningsRequest): ListAccessConfigurationProvisioningsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAccessConfigurationProvisioningsWithOptions(request, runtime);
}

model ListAccessConfigurationsRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  filter?: string(name='Filter', description='The filter condition.

Specify the value in the \\<Attribute> \\<Operator> \\<Value> format. The value is not case sensitive. You can set \\<Attribute> only to AccessConfigurationName and \\<Operator> only to eq or sw. The value eq indicates Equals. The value sw indicates Starts With.

For example, if you set Filter to AccessConfigurationName sw test, the operation queries all access configurations whose names start with test. If you set Filter to AccessConfigurationName eq TestAccessConfiguration, the operation queries the access configuration whose name is TestAccessConfiguration.', example='AccessConfigurationName sw test'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Valid values: 1 to 100.

Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The token to return for the next page. If this is your first time to call this operation, you do not need to specify the `NextToken` parameter.

When you call this operation for the first time, if the total number of entries to return exceeds the value of `MaxResults`, the entries are truncated. Only the entries that match the value of `MaxResults` are returned, and the excess entries are not returned. In this case, the value of the response parameter `IsTruncated` is `true`, and `NextToken` is returned. In the next call, you can use the value of `NextToken` and maintain the settings of the other request parameters to query the excess entries. You can repeat the call until the value of `IsTruncated` becomes `false`. This way, all entries are returned.', example='K1c3o9K7pFxoTtxH1Nm7MMLb7zrDGvftYBQBPDVv7AD3a8yhRb3Mk8L9ivmN6bFSjfkZNTAg3h4****'),
  statusNotifications?: string(name='StatusNotifications', description='The status notification. The status notification can be used to filter access configurations.

Set the value to ReprovisionRequired, which indicates that the operation queries all access configurations that need to be re-provisioned.', example='ReprovisionRequired'),
}

model ListAccessConfigurationsResponseBody = {
  accessConfigurations?: [ 
    {
      accessConfigurationId?: string(name='AccessConfigurationId', description='The ID of the access configuration.', example='ac-00jhtfl8thteu6uj****'),
      accessConfigurationName?: string(name='AccessConfigurationName', description='The name of the access configuration.', example='ECS-Admin'),
      createTime?: string(name='CreateTime', description='The time when the access configuration was created.', example='2021-11-02T08:44:23Z'),
      description?: string(name='Description', description='The description of the access configuration.', example='This is an access configuration.'),
      relayState?: string(name='RelayState', description='The initial web page that is displayed after a CloudSSO user accesses an account in your resource directory by using the access configuration.', example='https://cloudsso.console.aliyun.com'),
      sessionDuration?: int32(name='SessionDuration', description='The duration of a session in which a CloudSSO user accesses an account in your resource directory by using the access configuration.

Unit: seconds.', example='900'),
      statusNotifications?: [ string ](name='StatusNotifications', description='The status notification.'),
      updateTime?: string(name='UpdateTime', description='The time when the information about the access configuration was modified.', example='2021-11-02T08:44:23Z'),
    }
  ](name='AccessConfigurations', description='The access configurations.'),
  isTruncated?: boolean(name='IsTruncated', description='Indicates whether the queried entries are truncated. Valid values:

*   true: The queried entries are truncated.
*   false: The queried entries are not truncated.', example='false'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='10'),
  nextToken?: string(name='NextToken', description='The token that is returned for the next page.

>  This parameter is returned only when the `IsTruncated` parameter is set to `true`.', example='K1c3o9K7pFxoTtxH1Nm7MMLb7zrDGvftYBQBPDVv7AD3a8yhRb3Mk8L9ivmN6bFSjfkZNTAg3h4****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2BC0CBAC-45E1-5BD3-BF6E-F69D1D5391C2'),
  totalCounts?: int32(name='TotalCounts', description='The total number of entries returned.', example='2'),
}

model ListAccessConfigurationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAccessConfigurationsResponseBody(name='body'),
}

/**
  * ## Usage notes
  * This topic provides an example on how to query the access configurations within the directory `d-00fc2p61****`. The returned result shows that the directory contains the `VPC-Admin` and `ECS-Admin` access configurations.
  *
  * @param request ListAccessConfigurationsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListAccessConfigurationsResponse
 */
async function listAccessConfigurationsWithOptions(request: ListAccessConfigurationsRequest, runtime: Util.RuntimeOptions): ListAccessConfigurationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.statusNotifications)) {
    query['StatusNotifications'] = request.statusNotifications;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAccessConfigurations',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Usage notes
  * This topic provides an example on how to query the access configurations within the directory `d-00fc2p61****`. The returned result shows that the directory contains the `VPC-Admin` and `ECS-Admin` access configurations.
  *
  * @param request ListAccessConfigurationsRequest
  * @return ListAccessConfigurationsResponse
 */
async function listAccessConfigurations(request: ListAccessConfigurationsRequest): ListAccessConfigurationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAccessConfigurationsWithOptions(request, runtime);
}

model ListDirectoriesResponseBody = {
  directories?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the directory was created.', example='2021-06-30T08:35:26Z'),
      directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
      directoryName?: string(name='DirectoryName', description='The name of the directory.', example='new-example'),
      region?: string(name='Region', description='The region ID of the directory.', example='cn-shanghai'),
      updateTime?: string(name='UpdateTime', description='The time when the directory was modified.', example='2021-10-25T09:13:24Z'),
    }
  ](name='Directories', description='The directories.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9A504392-F06D-5029-AB64-6654CB9F1DC1'),
  totalCounts?: int32(name='TotalCounts', description='The number of directories.', example='1'),
}

model ListDirectoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDirectoriesResponseBody(name='body'),
}

/**
  * This topic provides an example on how to query the directories within your Alibaba Cloud account. The returned result shows that only one directory with the ID `d-00fc2p61****` is created within your Alibaba Cloud account.  
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ListDirectoriesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListDirectoriesResponse
 */
async function listDirectoriesWithOptions(runtime: Util.RuntimeOptions): ListDirectoriesResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListDirectories',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to query the directories within your Alibaba Cloud account. The returned result shows that only one directory with the ID `d-00fc2p61****` is created within your Alibaba Cloud account.  
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @return ListDirectoriesResponse
 */
async function listDirectories(): ListDirectoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDirectoriesWithOptions(runtime);
}

model ListExternalSAMLIdPCertificatesRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
}

model ListExternalSAMLIdPCertificatesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='400979BC-92EC-58B9-B47C-6913BD56A6FD'),
  SAMLIdPCertificates?: [ 
    {
      certificateId?: string(name='CertificateId', description='The ID of the certificate.', example='idp-c-00dt9gnl7fmjaw9c****'),
      issuer?: string(name='Issuer', description='The issuer of the certificate.', example='1.2.840.113549.1.9.1=#160d696e666f406f6b74612e63****,CN=dev-xxxxxx,OU=SSOProvider,O=Okta,L=San Francisco,ST=California,C=US'),
      notAfter?: string(name='NotAfter', description='The time when the certificate expires.', example='2030-06-23T07:04:37Z'),
      notBefore?: string(name='NotBefore', description='The time when the certificate was created.', example='2020-06-23T07:03:37Z'),
      publicKey?: string(name='PublicKey', description='The public key of the certificate. The value of this paremeter is in the PEM format and is Base64-encoded.', example='MIIBIjANBgkqhkiG****'),
      serialNumber?: string(name='SerialNumber', description='The serial number of the certificate.', example='159289587****'),
      signatureAlgorithm?: string(name='SignatureAlgorithm', description='The signature algorithm of the certificate.', example='SHA256withRSA'),
      subject?: string(name='Subject', description='The subject of the certificate.', example='1.2.840.113549.1.9.1=#160d696e666f406f6b74612e63****,CN=dev-xxxxxx,OU=SSOProvider,O=Okta,L=San Francisco,ST=California,C=US'),
      version?: int32(name='Version', description='The version of the certificate.', example='3'),
      x509Certificate?: string(name='X509Certificate', description='The X.509 certificate in the PEM format.', example='MIIDpDCCAoygAwIBAgIG****'),
    }
  ](name='SAMLIdPCertificates', description='The SAML signing certificates.'),
  totalCounts?: int32(name='TotalCounts', description='The total number of entries returned.', example='1'),
}

model ListExternalSAMLIdPCertificatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListExternalSAMLIdPCertificatesResponseBody(name='body'),
}

/**
  * This topic provides an example on how to query the SAML signing certificates within the directory `d-00fc2p61****`. The returned result shows that the directory contains one SAML signing certificate.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ListExternalSAMLIdPCertificatesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListExternalSAMLIdPCertificatesResponse
 */
async function listExternalSAMLIdPCertificatesWithOptions(request: ListExternalSAMLIdPCertificatesRequest, runtime: Util.RuntimeOptions): ListExternalSAMLIdPCertificatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListExternalSAMLIdPCertificates',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to query the SAML signing certificates within the directory `d-00fc2p61****`. The returned result shows that the directory contains one SAML signing certificate.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ListExternalSAMLIdPCertificatesRequest
  * @return ListExternalSAMLIdPCertificatesResponse
 */
async function listExternalSAMLIdPCertificates(request: ListExternalSAMLIdPCertificatesRequest): ListExternalSAMLIdPCertificatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listExternalSAMLIdPCertificatesWithOptions(request, runtime);
}

model ListGroupMembersRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  groupId?: string(name='GroupId', description='The ID of the group.', example='g-00jqzghi2n3o5hkh****'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Valid values: 1 to 100.

Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The token to return for the next page. If this is your first time to call this operation, you do not need to specify `NextToken` .

When you call this operation for the first time, if the total number of entries to return exceeds the value of `MaxResults`, the entries are truncated. Only the entries that match the value of `MaxResults` are returned, and the excess entries are not returned. In this case, the value of the response parameter `IsTruncated` is `true`, and `NextToken` is returned. In the next call, you can use the value of `NextToken` and maintain the settings of the other request parameters to query the excess entries. You can repeat the call until the value of `IsTruncated` becomes `false`. This way, all entries are returned.', example='K1c3o9K7pFxoTtxH1Nm7MMLb7zrDGvftYBQBPDVv7AD3a8yhRb3Mk8L9ivmN6bFSjfkZNTAg3h4****'),
}

model ListGroupMembersResponseBody = {
  groupMembers?: [ 
    {
      description?: string(name='Description', description='The description of the user.', example='This is a user.'),
      displayName?: string(name='DisplayName', description='The display name of the user.', example='Alice'),
      email?: string(name='Email', description='The email address of the user.', example='AliceLee@example.com'),
      groupId?: string(name='GroupId', description='The ID of the group.', example='g-00jqzghi2n3o5hkh****'),
      joinTime?: string(name='JoinTime', description='The time when the user was added to the user group.', example='2021-11-01T06:58:18Z'),
      provisionType?: string(name='ProvisionType', description='The type of the user. Valid values:

*   Manual: The user is manually created.
*   Synchronized: The user is synchronized from an external identity provider (IdP).', example='Manual'),
      status?: string(name='Status', description='The status of the user. Valid values:

*   Enabled: The logon of the user is enabled.
*   Disabled: The logon of the user is disabled.', example='Enabled'),
      userId?: string(name='UserId', description='The ID of the user.', example='u-00q8wbq42wiltcrk****'),
      userName?: string(name='UserName', description='The name of the user.', example='Alice'),
    }
  ](name='GroupMembers', description='The users in the group.'),
  isTruncated?: boolean(name='IsTruncated', description='Indicates whether the queried entries are truncated. Valid values:

*   true: The queried entries are truncated.
*   false: The queried entries are not truncated.', example='false'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='10'),
  nextToken?: string(name='NextToken', description='The token that is returned for the next page.

>  This parameter is returned only when the value of `IsTruncated` is `true`.', example='K1c3o9K7pFxoTtxH1Nm7MMLb7zrDGvftYBQBPDVv7AD3a8yhRb3Mk8L9ivmN6bFSjfkZNTAg3h4****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BB759F84-2C64-5C36-B6C6-253172C5C370'),
  totalCounts?: int32(name='TotalCounts', description='The total number of entries returned.', example='2'),
}

model ListGroupMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGroupMembersResponseBody(name='body'),
}

/**
  * This topic provides an example on how to query the users in the group `g-00jqzghi2n3o5hkh****`. The returned result shows that the group contains the user `Alice` and the user `user1`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ListGroupMembersRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListGroupMembersResponse
 */
async function listGroupMembersWithOptions(request: ListGroupMembersRequest, runtime: Util.RuntimeOptions): ListGroupMembersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGroupMembers',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to query the users in the group `g-00jqzghi2n3o5hkh****`. The returned result shows that the group contains the user `Alice` and the user `user1`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ListGroupMembersRequest
  * @return ListGroupMembersResponse
 */
async function listGroupMembers(request: ListGroupMembersRequest): ListGroupMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGroupMembersWithOptions(request, runtime);
}

model ListGroupsRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  filter?: string(name='Filter', description='The filter condition.

Specify the value in the \\<Attribute> \\<Operator> \\<Value> format. The value is not case sensitive. You can set \\<Attribute> only to `GroupName` and \\<Operator> only to `eq` or `sw`. The value eq indicates Equals. The value sw indicates Starts With.

For example, if you set Filter to GroupName sw test, the operation queries the groups whose names start with test. If you set Filter to GroupName eq testgroup, the operation queries the group whose name is testgroup.', example='GroupName eq testgroup'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Valid values: 1 to 100.

Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The token to return for the next page. If this is your first time to call this operation, you do not need to specify `NextToken`.

When you call this operation for the first time, if the total number of entries to return exceeds the value of `MaxResults`, the entries are truncated. Only the entries that match the value of `MaxResults` are returned, and the excess entries are not returned. In this case, the value of the response parameter `IsTruncated` is `true`, and `NextToken` is returned. In the next call, you can use the value of `NextToken` and maintain the settings of the other request parameters to query the excess entries. You can repeat the call until the value of `IsTruncated` becomes `false`. This way, all entries are returned.', example='K1c3o9K7pFxoTtxH1Nm7MMLb7zrDGvftYBQBPDVv7AD3a8yhRb3Mk8L9ivmN6bFSjfkZNTAg3h4****'),
  provisionType?: string(name='ProvisionType', description='The type of the group. The type can be used to filter groups. Valid values:

*   Manual: The group is manually created.
*   Synchronized: The group is synchronized from an external identity provider (IdP).', example='Manual'),
}

model ListGroupsResponseBody = {
  groups?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the group was created.', example='2021-11-01T02:38:27Z'),
      description?: string(name='Description', description='The description of the group.', example='This is a group.'),
      groupId?: string(name='GroupId', description='The ID of the group.', example='g-00jqzghi2n3o5hkh****'),
      groupName?: string(name='GroupName', description='The name of the group.', example='TestGroup'),
      provisionType?: string(name='ProvisionType', description='The type of the group. Valid values:

*   Manual: The group is manually created.
*   Synchronized: The group is synchronized from an external IdP.', example='Manual'),
      updateTime?: string(name='UpdateTime', description='The time when the information about the group was modified.', example='2021-11-01T02:38:27Z'),
    }
  ](name='Groups', description='The groups.'),
  isTruncated?: boolean(name='IsTruncated', description='Indicates whether the queried entries are truncated. Valid values:

*   true: The queried entries are truncated.
*   false: The queried entries are not truncated.', example='false'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='10'),
  nextToken?: string(name='NextToken', description='The token that is returned for the next page.

>  This parameter is returned only when the `IsTruncated` parameter is set to `true`.', example='K1c3o9K7pFxoTtxH1Nm7MMLb7zrDGvftYBQBPDVv7AD3a8yhRb3Mk8L9ivmN6bFSjfkZNTAg3h4****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='768F908D-A66A-5A5D-816C-20C93CBBFEE3'),
  totalCounts?: int32(name='TotalCounts', description='The total number of entries returned.', example='3'),
}

model ListGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGroupsResponseBody(name='body'),
}

/**
  * This topic provides an example on how to query the groups in the directory `d-00fc2p61****`. The returned result shows that the directory contains three groups. The groups `group1` and `group2` are synchronized from an external identity provider (IdP). The group `TestGroup` is manually created in CloudSSO.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ListGroupsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListGroupsResponse
 */
async function listGroupsWithOptions(request: ListGroupsRequest, runtime: Util.RuntimeOptions): ListGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.provisionType)) {
    query['ProvisionType'] = request.provisionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGroups',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to query the groups in the directory `d-00fc2p61****`. The returned result shows that the directory contains three groups. The groups `group1` and `group2` are synchronized from an external identity provider (IdP). The group `TestGroup` is manually created in CloudSSO.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ListGroupsRequest
  * @return ListGroupsResponse
 */
async function listGroups(request: ListGroupsRequest): ListGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGroupsWithOptions(request, runtime);
}

model ListJoinedGroupsForUserRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Valid values: 1 to 100.

Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The token to return for the next page. If this is your first time to call this operation, you do not need to specify `NextToken` .

When you call this operation for the first time, if the total number of entries to return exceeds the value of `MaxResults`, the entries are truncated. Only the entries that match the value of `MaxResults` are returned, and the excess entries are not returned. In this case, the value of the response parameter `IsTruncated` is `true`, and `NextToken` is returned. In the next call, you can use the value of `NextToken` and maintain the settings of the other request parameters to query the excess entries. You can repeat the call until the value of `IsTruncated` becomes `false`. This way, all entries are returned.', example='K1c3o9K7pFxoTtxH1Nm7MMLb7zrDGvftYBQBPDVv7AD3a8yhRb3Mk8L9ivmN6bFSjfkZNTAg3h4****'),
  userId?: string(name='UserId', description='The ID of the user.', example='u-00q8wbq42wiltcrk****'),
}

model ListJoinedGroupsForUserResponseBody = {
  isTruncated?: boolean(name='IsTruncated', description='Indicates whether the queried entries are truncated. Valid values:

*   true: The queried entries are truncated.
*   false: The queried entries are not truncated.', example='false'),
  joinedGroups?: [ 
    {
      description?: string(name='Description', description='The description of the group.', example='This is a group.'),
      groupId?: string(name='GroupId', description='The ID of the group.', example='g-00jqzghi2n3o5hkh****'),
      groupName?: string(name='GroupName', description='The name of the group.', example='TestGroup'),
      joinTime?: string(name='JoinTime', description='The time when the user was added to the user group.', example='2021-11-01T06:58:18Z'),
      provisionType?: string(name='ProvisionType', description='The type of the group. Valid values:

*   Manual: The group is manually created.
*   Synchronized: The user is synchronized from an external identity provider (IdP).', example='Manual'),
      userId?: string(name='UserId', description='The ID of the user.', example='u-00q8wbq42wiltcrk****'),
    }
  ](name='JoinedGroups', description='The groups to which the user is added.'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='10'),
  nextToken?: string(name='NextToken', description='The token that is returned for the next page.

>  This parameter is returned only when the value of `IsTruncated` is `true`.', example='K1c3o9K7pFxoTtxH1Nm7MMLb7zrDGvftYBQBPDVv7AD3a8yhRb3Mk8L9ivmN6bFSjfkZNTAg3h4****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E9BBB45F-7877-5DE9-96A5-20E6CFA48929'),
  totalCounts?: int32(name='TotalCounts', description='The total number of entries returned.', example='2'),
}

model ListJoinedGroupsForUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListJoinedGroupsForUserResponseBody(name='body'),
}

/**
  * This topic provides an example on how to query the groups to which the user `u-00q8wbq42wiltcrk****` is added. The returned result shows that the user is added to both the `TestGroup` and the `group1` groups.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ListJoinedGroupsForUserRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListJoinedGroupsForUserResponse
 */
async function listJoinedGroupsForUserWithOptions(request: ListJoinedGroupsForUserRequest, runtime: Util.RuntimeOptions): ListJoinedGroupsForUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListJoinedGroupsForUser',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to query the groups to which the user `u-00q8wbq42wiltcrk****` is added. The returned result shows that the user is added to both the `TestGroup` and the `group1` groups.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ListJoinedGroupsForUserRequest
  * @return ListJoinedGroupsForUserResponse
 */
async function listJoinedGroupsForUser(request: ListJoinedGroupsForUserRequest): ListJoinedGroupsForUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listJoinedGroupsForUserWithOptions(request, runtime);
}

model ListMFADevicesForUserRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  userId?: string(name='UserId', description='The ID of the user.', example='u-00q8wbq42wiltcrk****'),
}

model ListMFADevicesForUserResponseBody = {
  MFADevices?: [ 
    {
      deviceId?: string(name='DeviceId', description='The ID of the MFA device.', example='mfa-00ujhet8pycljj7j****'),
      deviceName?: string(name='DeviceName', description='The name of the MFA device.', example='Alice-MFA1'),
      deviceType?: string(name='DeviceType', description='The type of the MFA device. The value is fixed as TOTP, which indicates a virtual MFA device. Virtual MFA devices are based on the Time-based One-time Password (TOTP) algorithm.', example='TOTP'),
      effectiveTime?: string(name='EffectiveTime', description='The time when the MFA device was enabled.', example='2021-10-29T09:14:06Z'),
      userId?: string(name='UserId', description='The ID of the user.', example='u-00q8wbq42wiltcrk****'),
    }
  ](name='MFADevices', description='The MFA devices.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8B9982ED-FD0D-5622-8EA0-7B768685DCE7'),
  totalCounts?: int32(name='TotalCounts', description='The total number of MFA devices.', example='1'),
}

model ListMFADevicesForUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMFADevicesForUserResponseBody(name='body'),
}

/**
  * This topic provides an example on how to query the MFA devices that are bound to the user `u-00q8wbq42wiltcrk****`. The returned result shows that the MFA device named `Alice-MFA1` is bound to the user.  
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ListMFADevicesForUserRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListMFADevicesForUserResponse
 */
async function listMFADevicesForUserWithOptions(request: ListMFADevicesForUserRequest, runtime: Util.RuntimeOptions): ListMFADevicesForUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMFADevicesForUser',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to query the MFA devices that are bound to the user `u-00q8wbq42wiltcrk****`. The returned result shows that the MFA device named `Alice-MFA1` is bound to the user.  
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ListMFADevicesForUserRequest
  * @return ListMFADevicesForUserResponse
 */
async function listMFADevicesForUser(request: ListMFADevicesForUserRequest): ListMFADevicesForUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMFADevicesForUserWithOptions(request, runtime);
}

model ListPermissionPoliciesInAccessConfigurationRequest {
  accessConfigurationId?: string(name='AccessConfigurationId', description='The ID of the access configuration.', example='ac-00jhtfl8thteu6uj****'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  permissionPolicyType?: string(name='PermissionPolicyType', description='The type of the policy. The type can be used to filter policies. Valid values:

*   System: system policy
*   Inline: inline policy

If you do not specify this parameter, all types of policies are queried.', example='System'),
}

model ListPermissionPoliciesInAccessConfigurationResponseBody = {
  permissionPolicies?: [ 
    {
      addTime?: string(name='AddTime', description='The time when the policy was created for the access configuration.', example='2021-11-03T06:37:25Z'),
      permissionPolicyDocument?: string(name='PermissionPolicyDocument', description='The configurations of the inline policy.

>  This parameter is returned only when the value of the PermissionPolicyType parameter is Inline.', example='{\\"Statement\\": [{\\"Action\\": \\"*\\",\\"Effect\\": \\"Allow\\",\\"Resource\\": \\"*\\"}],\\"Version\\": \\"1\\"}'),
      permissionPolicyName?: string(name='PermissionPolicyName', description='The name of the policy.', example='AliyunECSFullAccess'),
      permissionPolicyType?: string(name='PermissionPolicyType', description='The type of the policy.', example='System'),
    }
  ](name='PermissionPolicies', description='The policies.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3A5E771F-1F5A-5555-A64E-579748AAFD98'),
  totalCounts?: int32(name='TotalCounts', description='The total number of policies.', example='2'),
}

model ListPermissionPoliciesInAccessConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPermissionPoliciesInAccessConfigurationResponseBody(name='body'),
}

/**
  * This topic provides an example on how to query the policies that are created for the access configuration `ac-00jhtfl8thteu6uj****`. The returned result shows that the access configuration contains one system policy and one inline policy.  
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ListPermissionPoliciesInAccessConfigurationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListPermissionPoliciesInAccessConfigurationResponse
 */
async function listPermissionPoliciesInAccessConfigurationWithOptions(request: ListPermissionPoliciesInAccessConfigurationRequest, runtime: Util.RuntimeOptions): ListPermissionPoliciesInAccessConfigurationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessConfigurationId)) {
    query['AccessConfigurationId'] = request.accessConfigurationId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.permissionPolicyType)) {
    query['PermissionPolicyType'] = request.permissionPolicyType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPermissionPoliciesInAccessConfiguration',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to query the policies that are created for the access configuration `ac-00jhtfl8thteu6uj****`. The returned result shows that the access configuration contains one system policy and one inline policy.  
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ListPermissionPoliciesInAccessConfigurationRequest
  * @return ListPermissionPoliciesInAccessConfigurationResponse
 */
async function listPermissionPoliciesInAccessConfiguration(request: ListPermissionPoliciesInAccessConfigurationRequest): ListPermissionPoliciesInAccessConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPermissionPoliciesInAccessConfigurationWithOptions(request, runtime);
}

model ListSCIMServerCredentialsRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
}

model ListSCIMServerCredentialsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='FE4B7037-C315-5DD5-826E-57A87950BCD1'),
  SCIMServerCredentials?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the SCIM credential was created.', example='2021-11-09T08:12:52Z'),
      credentialId?: string(name='CredentialId', description='The ID of the SCIM credential.', example='scimcred-004whl0kvfwcypbi****'),
      credentialType?: string(name='CredentialType', description='The type of the SCIM credential.', example='BearerToken'),
      directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
      expireTime?: string(name='ExpireTime', description='The time when the SCIM credential expires.', example='2022-11-09T08:12:52Z'),
      status?: string(name='Status', description='The status of the SCIM credential. Valid values:

*   Enabled: The SCIM credential is enabled.
*   Disabled: The SCIM credential is disabled.', example='Enabled'),
    }
  ](name='SCIMServerCredentials', description='The SCIM credentials.'),
  totalCounts?: int32(name='TotalCounts', description='The total number of entries returned.', example='1'),
}

model ListSCIMServerCredentialsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSCIMServerCredentialsResponseBody(name='body'),
}

/**
  * This topic provides an example on how to query the SCIM credentials within the `d-00fc2p61****` directory.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ListSCIMServerCredentialsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListSCIMServerCredentialsResponse
 */
async function listSCIMServerCredentialsWithOptions(request: ListSCIMServerCredentialsRequest, runtime: Util.RuntimeOptions): ListSCIMServerCredentialsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSCIMServerCredentials',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to query the SCIM credentials within the `d-00fc2p61****` directory.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ListSCIMServerCredentialsRequest
  * @return ListSCIMServerCredentialsResponse
 */
async function listSCIMServerCredentials(request: ListSCIMServerCredentialsRequest): ListSCIMServerCredentialsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSCIMServerCredentialsWithOptions(request, runtime);
}

model ListTasksRequest {
  accessConfigurationId?: string(name='AccessConfigurationId', description='The ID of the access configuration. The ID can be used to filter asynchronous tasks.', example='ac-00jhtfl8thteu6uj****'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  filter?: string(name='Filter', description='The filter condition.

Specify the value in the \\<Attribute> \\<Operator> \\<Value> format. The value is not case sensitive. You can set Attribute only to StartTime and Operator only to ge. You must set Value in the YYYY-MM-DDTHH:mm:SSZ format and enter a value that is no more than 7 days from the current time. The value ge indicates Greater Than or Equals.

For example, if you set Filter to StartTime ge 2021-03-15T01:12:23Z, the operation queries the tasks from 2021-03-15T01:12:23 GMT.

>  If you do not specify this parameter, the operation queries the tasks within the previous 24 hours by default.', example='StartTime ge 2021-03-15T01:12:23Z'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Valid values: 1 to 20.

Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The token to return for the next page. If this is your first time to call this operation, you do not need to specify `NextToken`.

When you call this operation for the first time, if the total number of entries to return exceeds the value of `MaxResults`, the entries are truncated. Only the entries that match the value of `MaxResults` are returned, and the excess entries are not returned. In this case, the value of the response parameter `IsTruncated` is `true`, and `NextToken` is returned. In the next call, you can use the value of `NextToken` and maintain the settings of the other request parameters to query the excess entries. You can repeat the call until the value of `IsTruncated` becomes `false`. This way, all entries are returned.', example='K1c3o9K7pFxoTtxH1Nm7MMLb7zrDGvftYBQBPDVv7AD3a8yhRb3Mk8L9ivmN6bFSjfkZNTAg3h4****'),
  principalId?: string(name='PrincipalId', description='The ID of the CloudSSO identity. The ID can be used to filter asynchronous tasks.

*   If you set `PrincipalType` to `User`, set `PrincipalId` to the ID of the CloudSSO user.
*   If you set `PrincipalType` to `Group`, set `PrincipalId` to the ID of the CloudSSO group.

>  You can use the ID to filter asynchronous tasks only if you specify both `PrincipalId` and `PrincipalType`.', example='u-00q8wbq42wiltcrk****'),
  principalType?: string(name='PrincipalType', description='The type of the CloudSSO identity. The type can be used to filter asynchronous tasks. Valid values:

*   User
*   Group

>  You can use the type to filter asynchronous tasks only if you specify both `PrincipalId` and `PrincipalType`.', example='User'),
  status?: string(name='Status', description='The ID of the task. The ID can be used to filter asynchronous tasks. Valid values:

*   InProgress: The task is running.
*   Success: The task is successful.
*   Failed: The task failed.', example='Success'),
  targetId?: string(name='TargetId', description='The ID of the task object. The ID can be used to filter asynchronous tasks.

>  You can use the ID to filter asynchronous tasks only if you specify both `TargetId` and `TargetType`.', example='114240524784****'),
  targetType?: string(name='TargetType', description='The type of the task object. The type can be used to filter asynchronous tasks.

Set the value to RD-Account, which indicates an account in your resource directory.

>  You can use the type to filter asynchronous tasks only if you specify both `TargetId` and `TargetType`.', example='RD-Account'),
  taskType?: string(name='TaskType', description='The type of the task. The type can be used to filter asynchronous tasks. Valid values:

*   ProvisionAccessConfiguration: An access configuration is provisioned.
*   DeprovisionAccessConfiguration: An access configuration is de-provisioned.
*   CreateAccessAssignment: Access permissions on an account in your resource directory are assigned.
*   DeleteAccessAssignment: Access permissions on an account in your resource directory are removed.', example='CreateAccessAssignment'),
}

model ListTasksResponseBody = {
  isTruncated?: boolean(name='IsTruncated', description='Indicates whether the queried entries are truncated. Valid values:

*   true: The queried entries are truncated.
*   false: The queried entries are not truncated.', example='false'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='10'),
  nextToken?: string(name='NextToken', description='The token that is returned for the next page.

>  This parameter is returned only when the value of `IsTruncated` is `true`.', example='K1c3o9K7pFxoTtxH1Nm7MMLb7zrDGvftYBQBPDVv7AD3a8yhRb3Mk8L9ivmN6bFSjfkZNTAg3h4****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C0DA2DFC-EB18-59EF-BD82-C30862EBA3A3'),
  tasks?: [ 
    {
      accessConfigurationId?: string(name='AccessConfigurationId', description='The ID of the access configuration.', example='ac-00jhtfl8thteu6uj****'),
      accessConfigurationName?: string(name='AccessConfigurationName', description='The name of the access configuration.', example='ECS-Admin'),
      endTime?: string(name='EndTime', description='The time when the task ended.', example='2021-11-09T05:50:50Z'),
      failureReason?: string(name='FailureReason', description='The cause of the task failure.

>  This parameter is returned only when the value of `Status` is `Failed`.', example='No Permission.'),
      principalId?: string(name='PrincipalId', description='The ID of the CloudSSO identity.', example='u-00q8wbq42wiltcrk****'),
      principalName?: string(name='PrincipalName', description='The name of the CloudSSO identity.', example='Alice'),
      principalType?: string(name='PrincipalType', description='The type of the CloudSSO identity. Valid values:

*   User
*   Group', example='User'),
      startTime?: string(name='StartTime', description='The time when the task started.', example='2021-11-09T05:50:50Z'),
      status?: string(name='Status', description='The status of the task. Valid values:

*   InProgress: The task is running.
*   Success: The task is successful.
*   Failed: The task failed.', example='Success'),
      targetId?: string(name='TargetId', description='The ID of the task object.', example='114240524784****'),
      targetName?: string(name='TargetName', description='The name of the task object.', example='dev-test'),
      targetPath?: string(name='TargetPath', description='The path ID of the task object in your resource directory.', example='rd-3G****/r-Wm****/114240524784****'),
      targetPathName?: string(name='TargetPathName', description='The path name of the task object in your resource directory.', example='rd-3G****/root/dev-test'),
      targetType?: string(name='TargetType', description='The type of the task object.

The value is fixed as RD-Account, which indicates an account in your resource directory.', example='RD-Account'),
      taskId?: string(name='TaskId', description='The ID of the task.', example='t-sh5k4gesm6twlrqb****'),
      taskType?: string(name='TaskType', description='The type of the task. Valid values:

*   ProvisionAccessConfiguration: An access configuration is provisioned.
*   DeprovisionAccessConfiguration: An access configuration is de-provisioned.
*   CreateAccessAssignment: Access permissions on an account in your resource directory are assigned.
*   DeleteAccessAssignment: Access permissions on an account in your resource directory are removed.', example='CreateAccessAssignment'),
    }
  ](name='Tasks', description='The tasks.'),
  totalCounts?: int32(name='TotalCounts', description='The total number of entries returned.', example='1'),
}

model ListTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTasksResponseBody(name='body'),
}

/**
  * By default, this operation queries the tasks within the previous 24 hours. This operation allows you to query the tasks within a maximum of 7 days. You can specify the start time of the query by using `Filter`.
  * This topic provides an example on how to query the tasks within the previous 24 hours.
  * ## Limits
  * You can call this operation up to 20 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ListTasksRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListTasksResponse
 */
async function listTasksWithOptions(request: ListTasksRequest, runtime: Util.RuntimeOptions): ListTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessConfigurationId)) {
    query['AccessConfigurationId'] = request.accessConfigurationId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.principalId)) {
    query['PrincipalId'] = request.principalId;
  }
  if (!Util.isUnset(request.principalType)) {
    query['PrincipalType'] = request.principalType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.targetId)) {
    query['TargetId'] = request.targetId;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTasks',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * By default, this operation queries the tasks within the previous 24 hours. This operation allows you to query the tasks within a maximum of 7 days. You can specify the start time of the query by using `Filter`.
  * This topic provides an example on how to query the tasks within the previous 24 hours.
  * ## Limits
  * You can call this operation up to 20 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ListTasksRequest
  * @return ListTasksResponse
 */
async function listTasks(request: ListTasksRequest): ListTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTasksWithOptions(request, runtime);
}

model ListUsersRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  filter?: string(name='Filter', description='The filter condition.

Specify the value in the `<Attribute> <Operator> <Value>` format. The value is not case-sensitive. You can set `<Attribute>` only to `UserName` and `Operator` only to `eq` or `sw`. The value eq indicates Equals, and the value sw indicates Starts With.

For example, if you set Filter to UserName sw test, the operation queries the users whose names start with test. If you set Filter to UserName eq testuser, the operation queries the user whose name is `testuser`.', example='UserName sw test'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Valid values: 1 to 100.

Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The token to return for the next page. If this is your first time to call this operation, you do not need to specify `NextToken` .

When you call this operation for the first time, if the total number of entries to return exceeds the value of `MaxResults`, the entries are truncated. Only the entries that match the value of `MaxResults` are returned, and the excess entries are not returned. In this case, the value of the response parameter `IsTruncated` is `true`, and `NextToken` is returned. In the next call, you can use the value of `NextToken` and maintain the settings of the other request parameters to query the excess entries. You can repeat the call until the value of `IsTruncated` becomes `false`. This way, all entries are returned.', example='K1c3o9K7pFxoTtxH1Nm7MMLb7zrDGvftYBQBPDVv7AD3a8yhRb3Mk8L9ivmN6bFSjfkZNTAg3h4****'),
  provisionType?: string(name='ProvisionType', description='The type of the user. The type can be used to filter users. Valid values:

*   Manual: The user is manually created.
*   Synchronized: The user is synchronized from an external IdP.', example='Manual'),
  status?: string(name='Status', description='The status of the user. The status can be used to filter users. Valid values:

*   Enabled: The logon of the user is enabled.
*   Disabled: The logon of the user is disabled.', example='Enabled'),
}

model ListUsersResponseBody = {
  isTruncated?: boolean(name='IsTruncated', description='Indicates whether the queried entries are truncated. Valid values:

*   true: The queried entries are truncated.
*   false: The queried entries are not truncated.', example='false'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='10'),
  nextToken?: string(name='NextToken', description='The token that is returned for the next page.

>  This parameter is returned only when the value of `IsTruncated` is `true`.', example='K1c3o9K7pFxoTtxH1Nm7MMLb7zrDGvftYBQBPDVv7AD3a8yhRb3Mk8L9ivmN6bFSjfkZNTAg3h4****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='734D9AAC-9A8E-5DF6-A633-ADE70FF2A9B1'),
  totalCounts?: int32(name='TotalCounts', description='The total number of entries returned.', example='2'),
  users?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the user was created.', example='2021-06-30T09:20:08Z'),
      description?: string(name='Description', description='The description of the user.', example='This is a user.'),
      displayName?: string(name='DisplayName', description='The display name of the user.', example='AliceLee'),
      email?: string(name='Email', description='The email address of the user.', example='AliceLee@example.onmicrosoft.com'),
      firstName?: string(name='FirstName', description='The first name of the user.', example='Alice'),
      lastName?: string(name='LastName', description='The last name of the user.', example='Lee'),
      provisionType?: string(name='ProvisionType', description='The type of the user. Valid values:

*   Manual: The user is manually created.
*   Synchronized: The user is synchronized from an external IdP.', example='Synchronized'),
      status?: string(name='Status', description='The status of the user. Valid values:

*   Enabled: The logon of the user is enabled.
*   Disabled: The logon of the user is disabled.', example='Enabled'),
      updateTime?: string(name='UpdateTime', description='The time when the information about the user was modified.', example='2021-06-30T09:20:08Z'),
      userId?: string(name='UserId', description='The ID of the user.', example='u-00bikzkuzbb58luh****'),
      userName?: string(name='UserName', description='The name of the user.', example='AliceLee@example.onmicrosoft.com'),
    }
  ](name='Users', description='The users.'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUsersResponseBody(name='body'),
}

/**
  * This topic provides an example on how to query users in the `d-00fc2p61****` directory. The returned result shows that the directory contains two users. The user `AliceLee` is synchronized from an external identity provider (IdP). The user `user1` is manually created within CloudSSO.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ListUsersRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListUsersResponse
 */
async function listUsersWithOptions(request: ListUsersRequest, runtime: Util.RuntimeOptions): ListUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.provisionType)) {
    query['ProvisionType'] = request.provisionType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUsers',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to query users in the `d-00fc2p61****` directory. The returned result shows that the directory contains two users. The user `AliceLee` is synchronized from an external identity provider (IdP). The user `user1` is manually created within CloudSSO.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ListUsersRequest
  * @return ListUsersResponse
 */
async function listUsers(request: ListUsersRequest): ListUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUsersWithOptions(request, runtime);
}

model ProvisionAccessConfigurationRequest {
  accessConfigurationId?: string(name='AccessConfigurationId', description='The ID of the access configuration.', example='ac-00jhtfl8thteu6uj****'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  targetId?: string(name='TargetId', description='The ID of the task object.', example='114240524784****'),
  targetType?: string(name='TargetType', description='The type of the task object. Set the value to RD-Account, which indicates an account in your resource directory.', example='RD-Account'),
}

model ProvisionAccessConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='DFDC16B2-4509-5FA6-9FA5-3CD35E4292FB'),
  tasks?: [ 
    {
      accessConfigurationId?: string(name='AccessConfigurationId', description='The ID of the access configuration.', example='ac-00jhtfl8thteu6uj****'),
      accessConfigurationName?: string(name='AccessConfigurationName', description='The name of the access configuration.', example='ECS-Admin'),
      status?: string(name='Status', description='The status of the task. Valid values:

*   InProgress: The task is running.
*   Success: The task is successful.
*   Failed: The task failed.', example='InProgress'),
      targetId?: string(name='TargetId', description='The ID of the task object.', example='114240524784****'),
      targetName?: string(name='TargetName', description='The name of the task object.', example='dev-test'),
      targetPath?: string(name='TargetPath', description='The path ID of the task object in your resource directory.', example='rd-3G****/r-Wm****/114240524784****'),
      targetPathName?: string(name='TargetPathName', description='The path name of the task object in your resource directory.', example='rd-3G****/root/dev-test'),
      targetType?: string(name='TargetType', description='The type of the task object. The value is fixed as RD-Account, which indicates an account your resource directory.', example='RD-Account'),
      taskId?: string(name='TaskId', description='The ID of the task.', example='t-shqlhd8uvt280rtm****'),
      taskType?: string(name='TaskType', description='The type of the task. The value is fixed as ProvisionAccessConfiguration, which indicates that an access configuration is provisioned.', example='ProvisionAccessConfiguration'),
    }
  ](name='Tasks', description='The information about the task.'),
}

model ProvisionAccessConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ProvisionAccessConfigurationResponseBody(name='body'),
}

/**
  * When you call this operation, an asynchronous task is automatically created. You can call the [GetTask](~~340670~~) operation to query the progress of the task based on the value of the `TaskId` response parameter.
  * This topic provides an example on how to provision the access configuration `ac-00jhtfl8thteu6uj****` for the account `114240524784****` in your resource directory.
  * ## Limits
  * You can call this operation up to 20 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ProvisionAccessConfigurationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ProvisionAccessConfigurationResponse
 */
async function provisionAccessConfigurationWithOptions(request: ProvisionAccessConfigurationRequest, runtime: Util.RuntimeOptions): ProvisionAccessConfigurationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessConfigurationId)) {
    query['AccessConfigurationId'] = request.accessConfigurationId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.targetId)) {
    query['TargetId'] = request.targetId;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ProvisionAccessConfiguration',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, an asynchronous task is automatically created. You can call the [GetTask](~~340670~~) operation to query the progress of the task based on the value of the `TaskId` response parameter.
  * This topic provides an example on how to provision the access configuration `ac-00jhtfl8thteu6uj****` for the account `114240524784****` in your resource directory.
  * ## Limits
  * You can call this operation up to 20 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ProvisionAccessConfigurationRequest
  * @return ProvisionAccessConfigurationResponse
 */
async function provisionAccessConfiguration(request: ProvisionAccessConfigurationRequest): ProvisionAccessConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return provisionAccessConfigurationWithOptions(request, runtime);
}

model RemoveExternalSAMLIdPCertificateRequest {
  certificateId?: string(name='CertificateId', description='The ID of the certificate.

You can call the [ListExternalSAMLIdPCertificates](~~341629~~) operation to query the IDs of certificates.', example='idp-c-00dt9gnl7fmjaw9c****'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
}

model RemoveExternalSAMLIdPCertificateResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='400979BC-92EC-58B9-B47C-6913BD56A6FD'),
}

model RemoveExternalSAMLIdPCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveExternalSAMLIdPCertificateResponseBody(name='body'),
}

/**
  * This topic provides an example on how to remove the SAML signing certificate whose ID is `idp-c-00dt9gnl7fmjaw9c****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request RemoveExternalSAMLIdPCertificateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RemoveExternalSAMLIdPCertificateResponse
 */
async function removeExternalSAMLIdPCertificateWithOptions(request: RemoveExternalSAMLIdPCertificateRequest, runtime: Util.RuntimeOptions): RemoveExternalSAMLIdPCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certificateId)) {
    query['CertificateId'] = request.certificateId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveExternalSAMLIdPCertificate',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to remove the SAML signing certificate whose ID is `idp-c-00dt9gnl7fmjaw9c****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request RemoveExternalSAMLIdPCertificateRequest
  * @return RemoveExternalSAMLIdPCertificateResponse
 */
async function removeExternalSAMLIdPCertificate(request: RemoveExternalSAMLIdPCertificateRequest): RemoveExternalSAMLIdPCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeExternalSAMLIdPCertificateWithOptions(request, runtime);
}

model RemovePermissionPolicyFromAccessConfigurationRequest {
  accessConfigurationId?: string(name='AccessConfigurationId', description='The ID of the access configuration.', example='ac-00jhtfl8thteu6uj****'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  permissionPolicyName?: string(name='PermissionPolicyName', description='The name of the policy.', example='AliyunECSFullAccess'),
  permissionPolicyType?: string(name='PermissionPolicyType', description='The type of the policy. Valid values:

*   System: system policy
*   Inline: inline policy', example='System'),
}

model RemovePermissionPolicyFromAccessConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B13E4EE-3853-5852-9165-597C32AD8FB7'),
}

model RemovePermissionPolicyFromAccessConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemovePermissionPolicyFromAccessConfigurationResponseBody(name='body'),
}

/**
  * After you remove an inline policy from an access configuration, the policy cannot be restored.
  * This topic provides an example on how to remove the system policy `AliyunECSFullAccess` from the access configuration `ac-00jhtfl8thteu6uj****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request RemovePermissionPolicyFromAccessConfigurationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RemovePermissionPolicyFromAccessConfigurationResponse
 */
async function removePermissionPolicyFromAccessConfigurationWithOptions(request: RemovePermissionPolicyFromAccessConfigurationRequest, runtime: Util.RuntimeOptions): RemovePermissionPolicyFromAccessConfigurationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessConfigurationId)) {
    query['AccessConfigurationId'] = request.accessConfigurationId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.permissionPolicyName)) {
    query['PermissionPolicyName'] = request.permissionPolicyName;
  }
  if (!Util.isUnset(request.permissionPolicyType)) {
    query['PermissionPolicyType'] = request.permissionPolicyType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemovePermissionPolicyFromAccessConfiguration',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * After you remove an inline policy from an access configuration, the policy cannot be restored.
  * This topic provides an example on how to remove the system policy `AliyunECSFullAccess` from the access configuration `ac-00jhtfl8thteu6uj****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request RemovePermissionPolicyFromAccessConfigurationRequest
  * @return RemovePermissionPolicyFromAccessConfigurationResponse
 */
async function removePermissionPolicyFromAccessConfiguration(request: RemovePermissionPolicyFromAccessConfigurationRequest): RemovePermissionPolicyFromAccessConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return removePermissionPolicyFromAccessConfigurationWithOptions(request, runtime);
}

model RemoveUserFromGroupRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  groupId?: string(name='GroupId', description='The ID of the group.', example='g-00jqzghi2n3o5hkh****'),
  userId?: string(name='UserId', description='The ID of the user.', example='u-00q8wbq42wiltcrk****'),
}

model RemoveUserFromGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F723DE01-6276-5DC4-9B1F-9CBE3E1748B2'),
}

model RemoveUserFromGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveUserFromGroupResponseBody(name='body'),
}

/**
  * If System for Cross-domain Identity Management (SCIM) synchronization is enabled, you cannot remove a user from a group that is synchronized by using SCIM.  
  * This topic provides an example on how to remove the user `u-00q8wbq42wiltcrk****` from the group `g-00jqzghi2n3o5hkh****`.  
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request RemoveUserFromGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RemoveUserFromGroupResponse
 */
async function removeUserFromGroupWithOptions(request: RemoveUserFromGroupRequest, runtime: Util.RuntimeOptions): RemoveUserFromGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveUserFromGroup',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If System for Cross-domain Identity Management (SCIM) synchronization is enabled, you cannot remove a user from a group that is synchronized by using SCIM.  
  * This topic provides an example on how to remove the user `u-00q8wbq42wiltcrk****` from the group `g-00jqzghi2n3o5hkh****`.  
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request RemoveUserFromGroupRequest
  * @return RemoveUserFromGroupResponse
 */
async function removeUserFromGroup(request: RemoveUserFromGroupRequest): RemoveUserFromGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeUserFromGroupWithOptions(request, runtime);
}

model ResetUserPasswordRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  generateRandomPassword?: boolean(name='GenerateRandomPassword', description='Specifies whether to enable the system to automatically generate a new password. Valid values:

*   True: The new password is automatically generated by the system.
*   False: The new password must be manually specified. This is the default value.', example='True'),
  password?: string(name='Password', description='The new password.

The password must contain the following types of characters: uppercase letters, lowercase letters, digits, and special characters.

The password must be 8 to 32 characters in length.

>  If you set `GenerateRandomPassword` to `False`, you must specify `Password` .', example='uc)XK$?ictf72CKFDy9vtWaFmISl****'),
  requirePasswordResetForNextLogin?: boolean(name='RequirePasswordResetForNextLogin', description='Specifies whether password reset is required upon the next logon. Valid values:

*   True: Password reset is required upon the next logon.
*   False: Password reset is not required upon the next logon. This is the default value.', example='False'),
  userId?: string(name='UserId', description='The ID of the user.', example='u-00q8wbq42wiltcrk****'),
}

model ResetUserPasswordResponseBody = {
  newPassword?: string(name='NewPassword', description='The new password.

>  This parameter is returned only when the new password is automatically generated by the system.', example='W2koInFIm0Wy2wVZ$oB)MzD$nY!G****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F44F02EC-70D1-5E51-8E8E-FA9AC4EF952A'),
}

model ResetUserPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetUserPasswordResponseBody(name='body'),
}

/**
  * If you forget your password or your password expires or is at risk, you must contact a CloudSSO administrator to reset your password.
  * >  After you enable SSO logon, your password cannot be reset.
  * This topic provides an example on how to reset the password of the user `u-00q8wbq42wiltcrk****`. The new password is automatically generated by the system.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ResetUserPasswordRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ResetUserPasswordResponse
 */
async function resetUserPasswordWithOptions(request: ResetUserPasswordRequest, runtime: Util.RuntimeOptions): ResetUserPasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.generateRandomPassword)) {
    query['GenerateRandomPassword'] = request.generateRandomPassword;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.requirePasswordResetForNextLogin)) {
    query['RequirePasswordResetForNextLogin'] = request.requirePasswordResetForNextLogin;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetUserPassword',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If you forget your password or your password expires or is at risk, you must contact a CloudSSO administrator to reset your password.
  * >  After you enable SSO logon, your password cannot be reset.
  * This topic provides an example on how to reset the password of the user `u-00q8wbq42wiltcrk****`. The new password is automatically generated by the system.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request ResetUserPasswordRequest
  * @return ResetUserPasswordResponse
 */
async function resetUserPassword(request: ResetUserPasswordRequest): ResetUserPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetUserPasswordWithOptions(request, runtime);
}

model SetExternalSAMLIdentityProviderRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  encodedMetadataDocument?: string(name='EncodedMetadataDocument', description='The metadata file of the IdP. The value of this parameter is Base64-encoded.

The file is provided by the IdP that supports SAML 2.0.', example='PD94bWwgdmVyc2lvbj0iMS4****'),
  entityId?: string(name='EntityId', description='The entity ID of the IdP.', example='http://www.okta.com/exk3qwgtjhetR2Od****'),
  loginUrl?: string(name='LoginUrl', description='The logon URL of the IdP.', example='https://dev-xxxxxx.okta.com/app/dev-xxxxxx_cloudssodemo_1/exk3qwgtjhetR2Od****/sso/saml'),
  SSOStatus?: string(name='SSOStatus', description='The status of SSO logon. Valid values:

*   Enabled
*   Disabled (default)', example='Disabled'),
  wantRequestSigned?: boolean(name='WantRequestSigned', description='Specifies whether CloudSSO needs to sign SAML requests. The requests are sent when users log on to the CloudSSO user portal to initiate SAML-based SSO. Valid values:

*   true: yes
*   false: no (default)', example='false'),
  x509Certificate?: string(name='X509Certificate', description='The X.509 certificate in the PEM format. If you specify this parameter, all existing certificates are replaced.', example='MIIC8DCCAdigAwIBAgIQP9eomUYGeoND****'),
}

model SetExternalSAMLIdentityProviderResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='63160579-2E1B-57B0-8273-B27427172385'),
  SAMLIdentityProviderConfiguration?: {
    certificateIds?: [ string ](name='CertificateIds', description='The ID of the SAML signing certificate.'),
    createTime?: string(name='CreateTime', description='The time when the IdP was configured for the first time.', example='2021-11-10T02:57:16Z'),
    directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
    encodedMetadataDocument?: string(name='EncodedMetadataDocument', description='The metadata file of the IdP. The value of this parameter is Base64-encoded.', example='PD94bWwgdmVyc2lvbj0iMS4****'),
    entityId?: string(name='EntityId', description='The entity ID of the IdP.', example='http://www.okta.com/exk3qwgtjhetR2Od****'),
    loginUrl?: string(name='LoginUrl', description='The logon URL of the IdP.', example='https://dev-xxxxxx.okta.com/app/dev-xxxxxx_cloudssodemo_1/exk3qwgtjhetR2Od****/sso/saml'),
    SSOStatus?: string(name='SSOStatus', description='The status of SSO logon. Valid values:

*   Enabled
*   Disabled', example='Disabled'),
    updateTime?: string(name='UpdateTime', description='The time when the IdP configurations were last modified.', example='2021-11-10T02:57:16Z'),
    wantRequestSigned?: boolean(name='WantRequestSigned', description='Indicates whether CloudSSO needs to sign SAML requests. The requests are sent when users log on to the CloudSSO user portal to initiate SAML-based SSO. Valid values:

*   true: yes
*   false: no (default)', example='false'),
  }(name='SAMLIdentityProviderConfiguration', description='The configurations of the IdP.'),
}

model SetExternalSAMLIdentityProviderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetExternalSAMLIdentityProviderResponseBody(name='body'),
}

/**
  * ## Usage notes
  * During SAML 2.0-based single sign-on (SSO) logon, CloudSSO is an SP, and the identity management system of an enterprise is an IdP.
  * You can use one of the following methods to configure a SAML IdP. You can obtain the required metadata file or parameter values from your IdP.
  * *   Use the metadata file. You can specify the `EncodedMetadataDocument` parameter to upload the metadata file.
  * *   Manually configure the IdP. You can manually specifythe following parameters for your IdP: `EntityId`, `LoginUrl`, `WantRequestSigned`, and `X509Certificate`.
  * If you have configured a SAML IdP, the existing configurations are replaced after you call this operation.
  * *   If the IdP is configured by using the metadata file, all existing configurations are replaced with new configurations.
  * *   If the IdP is manually configured, the original parameter values that are different from the new parameter values are replaced.
  * >  If SSO logon is enabled, new configurations immediately take effect. Take note of the impacts on the production environment.
  * This topic provides an example on how to configure an IdP by using the metadata file within the directory `d-00fc2p61****`.
  *
  * @param request SetExternalSAMLIdentityProviderRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetExternalSAMLIdentityProviderResponse
 */
async function setExternalSAMLIdentityProviderWithOptions(request: SetExternalSAMLIdentityProviderRequest, runtime: Util.RuntimeOptions): SetExternalSAMLIdentityProviderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.encodedMetadataDocument)) {
    query['EncodedMetadataDocument'] = request.encodedMetadataDocument;
  }
  if (!Util.isUnset(request.entityId)) {
    query['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.loginUrl)) {
    query['LoginUrl'] = request.loginUrl;
  }
  if (!Util.isUnset(request.SSOStatus)) {
    query['SSOStatus'] = request.SSOStatus;
  }
  if (!Util.isUnset(request.wantRequestSigned)) {
    query['WantRequestSigned'] = request.wantRequestSigned;
  }
  if (!Util.isUnset(request.x509Certificate)) {
    query['X509Certificate'] = request.x509Certificate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetExternalSAMLIdentityProvider',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Usage notes
  * During SAML 2.0-based single sign-on (SSO) logon, CloudSSO is an SP, and the identity management system of an enterprise is an IdP.
  * You can use one of the following methods to configure a SAML IdP. You can obtain the required metadata file or parameter values from your IdP.
  * *   Use the metadata file. You can specify the `EncodedMetadataDocument` parameter to upload the metadata file.
  * *   Manually configure the IdP. You can manually specifythe following parameters for your IdP: `EntityId`, `LoginUrl`, `WantRequestSigned`, and `X509Certificate`.
  * If you have configured a SAML IdP, the existing configurations are replaced after you call this operation.
  * *   If the IdP is configured by using the metadata file, all existing configurations are replaced with new configurations.
  * *   If the IdP is manually configured, the original parameter values that are different from the new parameter values are replaced.
  * >  If SSO logon is enabled, new configurations immediately take effect. Take note of the impacts on the production environment.
  * This topic provides an example on how to configure an IdP by using the metadata file within the directory `d-00fc2p61****`.
  *
  * @param request SetExternalSAMLIdentityProviderRequest
  * @return SetExternalSAMLIdentityProviderResponse
 */
async function setExternalSAMLIdentityProvider(request: SetExternalSAMLIdentityProviderRequest): SetExternalSAMLIdentityProviderResponse {
  var runtime = new Util.RuntimeOptions{};
  return setExternalSAMLIdentityProviderWithOptions(request, runtime);
}

model SetMFAAuthenticationStatusRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  MFAAuthenticationStatus?: string(name='MFAAuthenticationStatus', description='The status of MFA. Valid values:

*   Enabled
*   Disabled', example='Enabled'),
}

model SetMFAAuthenticationStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='14E2B1A9-7713-5E6F-8409-8DE12DF51AF4'),
}

model SetMFAAuthenticationStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetMFAAuthenticationStatusResponseBody(name='body'),
}

/**
  * If a CloudSSO administrator enables username-password logon for users, CloudSSO automatically enables MFA to improve security. The administrator can call this operation to enable or disable MFA based on the business requirements.
  * This topic provides an example on how to enable MFA for users.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request SetMFAAuthenticationStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetMFAAuthenticationStatusResponse
 */
async function setMFAAuthenticationStatusWithOptions(request: SetMFAAuthenticationStatusRequest, runtime: Util.RuntimeOptions): SetMFAAuthenticationStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.MFAAuthenticationStatus)) {
    query['MFAAuthenticationStatus'] = request.MFAAuthenticationStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetMFAAuthenticationStatus',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If a CloudSSO administrator enables username-password logon for users, CloudSSO automatically enables MFA to improve security. The administrator can call this operation to enable or disable MFA based on the business requirements.
  * This topic provides an example on how to enable MFA for users.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request SetMFAAuthenticationStatusRequest
  * @return SetMFAAuthenticationStatusResponse
 */
async function setMFAAuthenticationStatus(request: SetMFAAuthenticationStatusRequest): SetMFAAuthenticationStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setMFAAuthenticationStatusWithOptions(request, runtime);
}

model SetSCIMSynchronizationStatusRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  SCIMSynchronizationStatus?: string(name='SCIMSynchronizationStatus', description='The status of SCIM synchronization. Valid values:

*   Enabled
*   Disabled', example='Enabled'),
}

model SetSCIMSynchronizationStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='3BF1FC78-5D20-54CC-BAEB-8CC33AE21D01'),
}

model SetSCIMSynchronizationStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetSCIMSynchronizationStatusResponseBody(name='body'),
}

/**
  * You can synchronize users or groups from an external identity provider (IdP) that supports SCIM 2.0 to CloudSSO only after SCIM synchronization is enabled. If you disable SCIM synchronization, you can no longer synchronize users or groups to CloudSSO. The following list describes the impacts after SCIM synchronization is enabled or disabled:
  * *   After you enable SCIM synchronization, you cannot modify or delete the users or groups that are synchronized to CloudSSO by using SCIM. In addition, you cannot add users to or remove users from the groups. However, you can change the passwords of the users and enable or disable the logon of the users.
  * *   After you disable SCIM synchronization, you can modify and delete the users and groups that are synchronized to CloudSSO by using SCIM. You can also add users to or remove users from the groups.
  * This topic provides an example on how to enable SCIM synchronization within the directory `d-00fc2p61****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request SetSCIMSynchronizationStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetSCIMSynchronizationStatusResponse
 */
async function setSCIMSynchronizationStatusWithOptions(request: SetSCIMSynchronizationStatusRequest, runtime: Util.RuntimeOptions): SetSCIMSynchronizationStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.SCIMSynchronizationStatus)) {
    query['SCIMSynchronizationStatus'] = request.SCIMSynchronizationStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetSCIMSynchronizationStatus',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can synchronize users or groups from an external identity provider (IdP) that supports SCIM 2.0 to CloudSSO only after SCIM synchronization is enabled. If you disable SCIM synchronization, you can no longer synchronize users or groups to CloudSSO. The following list describes the impacts after SCIM synchronization is enabled or disabled:
  * *   After you enable SCIM synchronization, you cannot modify or delete the users or groups that are synchronized to CloudSSO by using SCIM. In addition, you cannot add users to or remove users from the groups. However, you can change the passwords of the users and enable or disable the logon of the users.
  * *   After you disable SCIM synchronization, you can modify and delete the users and groups that are synchronized to CloudSSO by using SCIM. You can also add users to or remove users from the groups.
  * This topic provides an example on how to enable SCIM synchronization within the directory `d-00fc2p61****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request SetSCIMSynchronizationStatusRequest
  * @return SetSCIMSynchronizationStatusResponse
 */
async function setSCIMSynchronizationStatus(request: SetSCIMSynchronizationStatusRequest): SetSCIMSynchronizationStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setSCIMSynchronizationStatusWithOptions(request, runtime);
}

model UpdateAccessConfigurationRequest {
  accessConfigurationId?: string(name='AccessConfigurationId', description='The ID of the access configuration.', example='ac-00jhtfl8thteu6uj****'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  newDescription?: string(name='NewDescription', description='The new description of the access configuration.

The description can be up to 1,024 characters in length.', example='This is an access configuration.'),
  newRelayState?: string(name='NewRelayState', description='The new initial web page that is displayed after a CloudSSO user accesses an account in your resource directory by using the access configuration.

The web page must be a page of the Alibaba Cloud Management Console.', example='https://cloudsso.console.aliyun.com'),
  newSessionDuration?: int32(name='NewSessionDuration', description='The new duration of a session in which a CloudSSO user accesses an account in your resource directory by using the access configuration.

Unit: seconds.

Valid values: 900 to 43200. The value 900 indicates 15 minutes. The value 43200 indicates 12 hours.', example='3600'),
}

model UpdateAccessConfigurationResponseBody = {
  accessConfiguration?: {
    accessConfigurationId?: string(name='AccessConfigurationId', description='The ID of the access configuration.', example='ac-00jhtfl8thteu6uj****'),
    accessConfigurationName?: string(name='AccessConfigurationName', description='The name of the access configuration.', example='ECS-Admin'),
    createTime?: string(name='CreateTime', description='The time when the access configuration was created.', example='2021-11-02T08:44:23Z'),
    description?: string(name='Description', description='The description of the access configuration.', example='This is an access configuration.'),
    relayState?: string(name='RelayState', description='The initial web page that is displayed after a CloudSSO user accesses an account in your resource directory by using the access configuration.', example='https://cloudsso.console.aliyun.com'),
    sessionDuration?: int32(name='SessionDuration', description='The duration of a session in which a CloudSSO user accesses an account in your resource directory by using the access configuration.

Unit: seconds.', example='3600'),
    statusNotifications?: [ string ](name='StatusNotifications', description='The status notification.'),
    updateTime?: string(name='UpdateTime', description='The time when the information about the access configuration was modified.', example='2021-11-02T10:10:01Z'),
  }(name='AccessConfiguration', description='The information about the access configuration.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B13E4EE-3853-5852-9165-597C32AD8FB7'),
}

model UpdateAccessConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAccessConfigurationResponseBody(name='body'),
}

/**
  * You can modify the `Description`, `SessionDuration`, and `RelayState` parameters for an access configuration.
  * This topic provides an example on how to change the initial web page in the access configuration `ac-00jhtfl8thteu6uj****` to `https://cloudsso.console.aliyun.com`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request UpdateAccessConfigurationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateAccessConfigurationResponse
 */
async function updateAccessConfigurationWithOptions(request: UpdateAccessConfigurationRequest, runtime: Util.RuntimeOptions): UpdateAccessConfigurationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessConfigurationId)) {
    query['AccessConfigurationId'] = request.accessConfigurationId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.newDescription)) {
    query['NewDescription'] = request.newDescription;
  }
  if (!Util.isUnset(request.newRelayState)) {
    query['NewRelayState'] = request.newRelayState;
  }
  if (!Util.isUnset(request.newSessionDuration)) {
    query['NewSessionDuration'] = request.newSessionDuration;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAccessConfiguration',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can modify the `Description`, `SessionDuration`, and `RelayState` parameters for an access configuration.
  * This topic provides an example on how to change the initial web page in the access configuration `ac-00jhtfl8thteu6uj****` to `https://cloudsso.console.aliyun.com`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request UpdateAccessConfigurationRequest
  * @return UpdateAccessConfigurationResponse
 */
async function updateAccessConfiguration(request: UpdateAccessConfigurationRequest): UpdateAccessConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAccessConfigurationWithOptions(request, runtime);
}

model UpdateDirectoryRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  newDirectoryName?: string(name='NewDirectoryName', description='The new name of the directory. The name must be globally unique.

The name can contain lowercase letters, digits, and hyphens (-). The name cannot start or end with a hyphen (-) and cannot have two consecutive hyphens (-). If you want to start the new name of the directory starts with `d-`, you must set this parameter to the ID of the directory.

The name must be 2 to 64 characters in length.', example='new-example'),
}

model UpdateDirectoryResponseBody = {
  directory?: {
    createTime?: string(name='CreateTime', description='The time when the directory was created.', example='2021-06-30T08:35:26Z'),
    directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
    directoryName?: string(name='DirectoryName', description='The name of the directory.', example='new-example'),
    region?: string(name='Region', description='The region ID of the directory.', example='cn-shanghai'),
    updateTime?: string(name='UpdateTime', description='The time when the directory was modified.', example='2021-10-25T09:13:24Z'),
  }(name='Directory', description='The information about the directory.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B182C041-8C64-5F2F-A07B-FC67FAF89CF9'),
}

model UpdateDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDirectoryResponseBody(name='body'),
}

/**
  * After you change the name of a directory, the URL that is used to log on to the Cloud SSO user portal is changed. You must notify the Cloud SSO users of the correct URL. 
  * This topic provides an example on how to change the name of a directory to `new-example`.  
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request UpdateDirectoryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateDirectoryResponse
 */
async function updateDirectoryWithOptions(request: UpdateDirectoryRequest, runtime: Util.RuntimeOptions): UpdateDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.newDirectoryName)) {
    query['NewDirectoryName'] = request.newDirectoryName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDirectory',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * After you change the name of a directory, the URL that is used to log on to the Cloud SSO user portal is changed. You must notify the Cloud SSO users of the correct URL. 
  * This topic provides an example on how to change the name of a directory to `new-example`.  
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request UpdateDirectoryRequest
  * @return UpdateDirectoryResponse
 */
async function updateDirectory(request: UpdateDirectoryRequest): UpdateDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDirectoryWithOptions(request, runtime);
}

model UpdateGroupRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  groupId?: string(name='GroupId', description='The ID of the group.', example='g-00jqzghi2n3o5hkh****'),
  newDescription?: string(name='NewDescription', description='The new description of the group.', example='This is a group.'),
  newGroupName?: string(name='NewGroupName', description='The new name of the group.', example='NewTestGroup'),
}

model UpdateGroupResponseBody = {
  group?: {
    createTime?: string(name='CreateTime', description='The time when the group was created.', example='2021-11-01T02:38:27Z'),
    description?: string(name='Description', description='The description of the group.', example='This is a group.'),
    groupId?: string(name='GroupId', description='The ID of the group.', example='g-00jqzghi2n3o5hkh****'),
    groupName?: string(name='GroupName', description='The name of the group.', example='NewTestGroup'),
    provisionType?: string(name='ProvisionType', description='The type of the group. Valid values:

*   Manual: The group is manually created.
*   Synchronized: The user is synchronized from an external identity provider (IdP).', example='Manual'),
    updateTime?: string(name='UpdateTime', description='The time when the information about the group was modified.', example='2021-11-01T06:06:11Z'),
  }(name='Group', description='The information about the group.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F723DE01-6276-5DC4-9B1F-9CBE3E1748B2'),
}

model UpdateGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGroupResponseBody(name='body'),
}

/**
  * You can modify `GroupName` and `Description` for a group.
  * >  If System for Cross-domain Identity Management (SCIM) synchronization is enabled, you cannot modify the information about a group that is synchronized by using SCIM.
  * This topic provides an example on how to change the name of the group `g-00jqzghi2n3o5hkh****` to `NewTestGroup`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request UpdateGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateGroupResponse
 */
async function updateGroupWithOptions(request: UpdateGroupRequest, runtime: Util.RuntimeOptions): UpdateGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.newDescription)) {
    query['NewDescription'] = request.newDescription;
  }
  if (!Util.isUnset(request.newGroupName)) {
    query['NewGroupName'] = request.newGroupName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGroup',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can modify `GroupName` and `Description` for a group.
  * >  If System for Cross-domain Identity Management (SCIM) synchronization is enabled, you cannot modify the information about a group that is synchronized by using SCIM.
  * This topic provides an example on how to change the name of the group `g-00jqzghi2n3o5hkh****` to `NewTestGroup`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request UpdateGroupRequest
  * @return UpdateGroupResponse
 */
async function updateGroup(request: UpdateGroupRequest): UpdateGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGroupWithOptions(request, runtime);
}

model UpdateInlinePolicyForAccessConfigurationRequest {
  accessConfigurationId?: string(name='AccessConfigurationId', description='The ID of the access configuration.', example='ac-00jhtfl8thteu6uj****'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  inlinePolicyName?: string(name='InlinePolicyName', description='The name of the inline policy.', example='InlinePolicy'),
  newInlinePolicyDocument?: string(name='NewInlinePolicyDocument', description='The new configurations of the inline policy.

The value can be up to 4,096 characters in length.

For more information about the syntax and structure of RAM policies, see [Policy syntax and structure](~~93739~~).', example='{"Statement": [{"Action": "*","Effect": "Allow","Resource": "*"}],"Version": "1"}'),
}

model UpdateInlinePolicyForAccessConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B13E4EE-3853-5852-9165-597C32AD8FB7'),
}

model UpdateInlinePolicyForAccessConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateInlinePolicyForAccessConfigurationResponseBody(name='body'),
}

/**
  * This topic provides an example on how to modify an inline policy that is created for the access configuration `ac-00jhtfl8thteu6uj****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request UpdateInlinePolicyForAccessConfigurationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateInlinePolicyForAccessConfigurationResponse
 */
async function updateInlinePolicyForAccessConfigurationWithOptions(request: UpdateInlinePolicyForAccessConfigurationRequest, runtime: Util.RuntimeOptions): UpdateInlinePolicyForAccessConfigurationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessConfigurationId)) {
    query['AccessConfigurationId'] = request.accessConfigurationId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.inlinePolicyName)) {
    query['InlinePolicyName'] = request.inlinePolicyName;
  }
  if (!Util.isUnset(request.newInlinePolicyDocument)) {
    query['NewInlinePolicyDocument'] = request.newInlinePolicyDocument;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateInlinePolicyForAccessConfiguration',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to modify an inline policy that is created for the access configuration `ac-00jhtfl8thteu6uj****`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request UpdateInlinePolicyForAccessConfigurationRequest
  * @return UpdateInlinePolicyForAccessConfigurationResponse
 */
async function updateInlinePolicyForAccessConfiguration(request: UpdateInlinePolicyForAccessConfigurationRequest): UpdateInlinePolicyForAccessConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateInlinePolicyForAccessConfigurationWithOptions(request, runtime);
}

model UpdateMFAAuthenticationSettingsRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  MFAAuthenticationSettings?: string(name='MFAAuthenticationSettings', description='Specifies whether to enable MFA for all users. Valid value:

- Enabled: enables MFA for all users.
- Byuser: uses user-specific settings. For more information about how to configure MFA for a single user, see [UpdateUserMFAAuthenticationSettings](~~450135~~).
- Disabled: disables MFA for all users.
- OnlyRiskyLogin: MFA is required only for unusual logons.', example='Enabled'),
  operationForRiskLogin?: string(name='OperationForRiskLogin', description='Specifies whether MFA is required for users who initiated unusual logons. Valid value:

- Autonomous: MFA is prompted for users who initiated unusual logons. However, the users are allowed to skip MFA. If an MFA device is bound to a user who initiated an unusual logon, the user must pass MFA.

- EnforceVerify: MFA is required. If no MFA devices are bound to a user who initiated an unusual logon, the user must bind an MFA device. If an MFA device is already bound to a user who initiated an unusual logon, the user must pass MFA.', example='Autonomous'),
}

model UpdateMFAAuthenticationSettingsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A1C748E3-8944-5593-81BC-7D96AE24F77B'),
}

model UpdateMFAAuthenticationSettingsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMFAAuthenticationSettingsResponseBody(name='body'),
}

/**
  * If you enable username-password logon for CloudSSO users, you can also configure MFA for the users.
  * This topic provides an example on how to enable MFA for all CloudSSO users that belong to the directory named `d-00fc2p61****`.
  *
  * @param request UpdateMFAAuthenticationSettingsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateMFAAuthenticationSettingsResponse
 */
async function updateMFAAuthenticationSettingsWithOptions(request: UpdateMFAAuthenticationSettingsRequest, runtime: Util.RuntimeOptions): UpdateMFAAuthenticationSettingsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.MFAAuthenticationSettings)) {
    query['MFAAuthenticationSettings'] = request.MFAAuthenticationSettings;
  }
  if (!Util.isUnset(request.operationForRiskLogin)) {
    query['OperationForRiskLogin'] = request.operationForRiskLogin;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMFAAuthenticationSettings',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If you enable username-password logon for CloudSSO users, you can also configure MFA for the users.
  * This topic provides an example on how to enable MFA for all CloudSSO users that belong to the directory named `d-00fc2p61****`.
  *
  * @param request UpdateMFAAuthenticationSettingsRequest
  * @return UpdateMFAAuthenticationSettingsResponse
 */
async function updateMFAAuthenticationSettings(request: UpdateMFAAuthenticationSettingsRequest): UpdateMFAAuthenticationSettingsResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMFAAuthenticationSettingsWithOptions(request, runtime);
}

model UpdateSCIMServerCredentialStatusRequest {
  credentialId?: string(name='CredentialId', description='The ID of the SCIM credential.', example='scimcred-004whl0kvfwcypbi****'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  newStatus?: string(name='NewStatus', description='The new status of the SCIM credential. Valid values:

*   Enabled: The SCIM credential is enabled.
*   Disabled: The SCIM credential is disabled.', example='Disabled'),
}

model UpdateSCIMServerCredentialStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='7C086C2F-1C66-57B3-B14E-2C1DA70727CD'),
  SCIMServerCredential?: {
    createTime?: string(name='CreateTime', description='The time when the SCIM credential was created.', example='2021-11-09T08:12:52Z'),
    credentialId?: string(name='CredentialId', description='The ID of the SCIM credential.', example='scimcred-004whl0kvfwcypbi****'),
    credentialType?: string(name='CredentialType', description='The type of the SCIM credential.', example='BearerToken'),
    directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
    expireTime?: string(name='ExpireTime', description='The time when the SCIM credential expires.', example='2022-11-09T08:12:52Z'),
    status?: string(name='Status', description='The status of the SCIM credential. Valid values:

*   Enabled: The SCIM credential is enabled.
*   Disabled: The SCIM credential is disabled.', example='Disabled'),
  }(name='SCIMServerCredential', description='The information about the SCIM credential.'),
}

model UpdateSCIMServerCredentialStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSCIMServerCredentialStatusResponseBody(name='body'),
}

/**
  * This topic provides an example on how to disable the SCIM credential whose ID is `scimcred-004whl0kvfwcypbi****`. After the SCIM credential is disabled, the synchronization task that uses the SCIM credential fails. You can call this operation again to enable the SCIM credential.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request UpdateSCIMServerCredentialStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateSCIMServerCredentialStatusResponse
 */
async function updateSCIMServerCredentialStatusWithOptions(request: UpdateSCIMServerCredentialStatusRequest, runtime: Util.RuntimeOptions): UpdateSCIMServerCredentialStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.credentialId)) {
    query['CredentialId'] = request.credentialId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.newStatus)) {
    query['NewStatus'] = request.newStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSCIMServerCredentialStatus',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to disable the SCIM credential whose ID is `scimcred-004whl0kvfwcypbi****`. After the SCIM credential is disabled, the synchronization task that uses the SCIM credential fails. You can call this operation again to enable the SCIM credential.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request UpdateSCIMServerCredentialStatusRequest
  * @return UpdateSCIMServerCredentialStatusResponse
 */
async function updateSCIMServerCredentialStatus(request: UpdateSCIMServerCredentialStatusRequest): UpdateSCIMServerCredentialStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSCIMServerCredentialStatusWithOptions(request, runtime);
}

model UpdateUserRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  newDescription?: string(name='NewDescription', description='The new description of the user.', example='This is a user.'),
  newDisplayName?: string(name='NewDisplayName', description='The new display name of the user.', example='AliceLee'),
  newEmail?: string(name='NewEmail', description='The new email address of the user.', example='AliceLee@example.com'),
  newFirstName?: string(name='NewFirstName', description='The new first name of the user.', example='Alice'),
  newLastName?: string(name='NewLastName', description='The new last name of the user.', example='Lee'),
  userId?: string(name='UserId', description='The ID of the user.', example='u-00q8wbq42wiltcrk****'),
}

model UpdateUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F44F02EC-70D1-5E51-8E8E-FA9AC4EF952A'),
  user?: {
    createTime?: string(name='CreateTime', description='The time when the user was created.', example='2021-10-26T03:03:42Z'),
    description?: string(name='Description', description='The description of the user.', example='This is a user.'),
    displayName?: string(name='DisplayName', description='The display name of the user.', example='Alice'),
    email?: string(name='Email', description='The email address of the user.', example='AliceLee@example.com'),
    firstName?: string(name='FirstName', description='The first name of the user.', example='Alice'),
    lastName?: string(name='LastName', description='The last name of the user.', example='Lee'),
    provisionType?: string(name='ProvisionType', description='The type of the user. Valid values:

*   Manual: The user is manually created.
*   Synchronized: The user is synchronized from an external identity provider (IdP).', example='Manual'),
    status?: string(name='Status', description='The status of the user. Valid values:

*   Enabled: The logon of the user is enabled.
*   Disabled: The logon of the user is disabled.', example='Enabled'),
    updateTime?: string(name='UpdateTime', description='The time when the information about the user was modified.', example='2021-10-26T07:32:32Z'),
    userId?: string(name='UserId', description='The ID of the user.', example='u-00q8wbq42wiltcrk****'),
    userName?: string(name='UserName', description='The name of the user.', example='Alice'),
  }(name='User', description='The information about the user.'),
}

model UpdateUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateUserResponseBody(name='body'),
}

/**
  * You can modify `FirstName`, `LastName`, `DisplayName`, `Email`, and `Description` for a user. You cannot modify `UserName` for a user.
  * >  If System for Cross-domain Identity Management (SCIM) synchronization is enabled, you cannot modify the information about a user that is synchronized by using SCIM.
  * This topic provides an example on how to change the email address of the user whose ID is `u-00q8wbq42wiltcrk****` to `AliceLee@example.com`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request UpdateUserRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateUserResponse
 */
async function updateUserWithOptions(request: UpdateUserRequest, runtime: Util.RuntimeOptions): UpdateUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.newDescription)) {
    query['NewDescription'] = request.newDescription;
  }
  if (!Util.isUnset(request.newDisplayName)) {
    query['NewDisplayName'] = request.newDisplayName;
  }
  if (!Util.isUnset(request.newEmail)) {
    query['NewEmail'] = request.newEmail;
  }
  if (!Util.isUnset(request.newFirstName)) {
    query['NewFirstName'] = request.newFirstName;
  }
  if (!Util.isUnset(request.newLastName)) {
    query['NewLastName'] = request.newLastName;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateUser',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can modify `FirstName`, `LastName`, `DisplayName`, `Email`, and `Description` for a user. You cannot modify `UserName` for a user.
  * >  If System for Cross-domain Identity Management (SCIM) synchronization is enabled, you cannot modify the information about a user that is synchronized by using SCIM.
  * This topic provides an example on how to change the email address of the user whose ID is `u-00q8wbq42wiltcrk****` to `AliceLee@example.com`.
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request UpdateUserRequest
  * @return UpdateUserResponse
 */
async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUserWithOptions(request, runtime);
}

model UpdateUserMFAAuthenticationSettingsRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  userId?: string(name='UserId', description='The ID of the user.', example='u-00q8wbq42wiltcrk****'),
  userMFAAuthenticationSettings?: string(name='UserMFAAuthenticationSettings', description='Specifies whether to enable MFA for the user. Valid values:

*   Enabled: enables MFA for the user.
*   Disabled: disables MFA for the user.', example='Enabled'),
}

model UpdateUserMFAAuthenticationSettingsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5E6C6049-E9B0-5F6F-A104-6150E3B1F4D7'),
}

model UpdateUserMFAAuthenticationSettingsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateUserMFAAuthenticationSettingsResponseBody(name='body'),
}

/**
  * If you call the [UpdateMFAAuthenticationSettings](~~450134~~) operation to set the MFAAuthenticationSettings parameter to `Byuser`, user-specific settings are applied. Then, you must call the UpdateUserMFAAuthenticationSettings operation to configure MFA for each user.
  * By default, the MFAAuthenticationSettings parameter is set to `Enabled` for a new user.
  * This topic provides an example on how to enable MFA for the user named `u-00q8wbq42wiltcrk****`.
  *
  * @param request UpdateUserMFAAuthenticationSettingsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateUserMFAAuthenticationSettingsResponse
 */
async function updateUserMFAAuthenticationSettingsWithOptions(request: UpdateUserMFAAuthenticationSettingsRequest, runtime: Util.RuntimeOptions): UpdateUserMFAAuthenticationSettingsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.userMFAAuthenticationSettings)) {
    query['UserMFAAuthenticationSettings'] = request.userMFAAuthenticationSettings;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateUserMFAAuthenticationSettings',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If you call the [UpdateMFAAuthenticationSettings](~~450134~~) operation to set the MFAAuthenticationSettings parameter to `Byuser`, user-specific settings are applied. Then, you must call the UpdateUserMFAAuthenticationSettings operation to configure MFA for each user.
  * By default, the MFAAuthenticationSettings parameter is set to `Enabled` for a new user.
  * This topic provides an example on how to enable MFA for the user named `u-00q8wbq42wiltcrk****`.
  *
  * @param request UpdateUserMFAAuthenticationSettingsRequest
  * @return UpdateUserMFAAuthenticationSettingsResponse
 */
async function updateUserMFAAuthenticationSettings(request: UpdateUserMFAAuthenticationSettingsRequest): UpdateUserMFAAuthenticationSettingsResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUserMFAAuthenticationSettingsWithOptions(request, runtime);
}

model UpdateUserStatusRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='d-00fc2p61****'),
  newStatus?: string(name='NewStatus', description='The new status of the user. Valid values:

*   Enabled: The logon of the user is enabled.
*   Disabled: The logon of the user is disabled.', example='Disabled'),
  userId?: string(name='UserId', description='The ID of the user.', example='u-00q8wbq42wiltcrk****'),
}

model UpdateUserStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EE598602-AC67-56EF-B7CC-2927C30AA0A8'),
}

model UpdateUserStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateUserStatusResponseBody(name='body'),
}

/**
  * This topic provides an example on how to change the status of the user whose ID is `u-00q8wbq42wiltcrk****` to Disabled. Users in the Disabled state cannot log on to the CloudSSO user portal. 
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request UpdateUserStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateUserStatusResponse
 */
async function updateUserStatusWithOptions(request: UpdateUserStatusRequest, runtime: Util.RuntimeOptions): UpdateUserStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.newStatus)) {
    query['NewStatus'] = request.newStatus;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateUserStatus',
    version = '2021-05-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This topic provides an example on how to change the status of the user whose ID is `u-00q8wbq42wiltcrk****` to Disabled. Users in the Disabled state cannot log on to the CloudSSO user portal. 
  * ## Limits
  * You can call this operation up to 100 times per second per account. This operation is globally limited to 100 times per second across all accounts. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request UpdateUserStatusRequest
  * @return UpdateUserStatusResponse
 */
async function updateUserStatus(request: UpdateUserStatusRequest): UpdateUserStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUserStatusWithOptions(request, runtime);
}

