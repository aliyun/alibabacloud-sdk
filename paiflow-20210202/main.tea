/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  @endpointMap = {
    cn-beijing = 'pai.cn-beijing.aliyuncs.com',
    cn-hangzhou = 'pai.cn-hangzhou.data.aliyun.com',
    cn-shanghai = 'pai.cn-shanghai.aliyuncs.com',
    cn-shenzhen = 'pai.cn-shenzhen.aliyuncs.com',
    cn-hongkong = 'pai.cn-hongkong.aliyuncs.com',
    ap-southeast-1 = 'pai.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'pai.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'pai.ap-southeast-3.aliyuncs.com',
    ap-southeast-5 = 'pai.ap-southeast-5.aliyuncs.com',
    us-west-1 = 'pai.us-west-1.aliyuncs.com',
    us-east-1 = 'pai.us-east-1.aliyuncs.com',
    eu-central-1 = 'pai.eu-central-1.aliyuncs.com',
    me-east-1 = 'pai.me-east-1.aliyuncs.com',
    ap-south-1 = 'pai.ap-south-1.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('paiflow', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model UpdateRunRequest {
  name?: string(name='Name'),
}

model UpdateRunResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateRunResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRunResponseBody(name='body'),
}

async function updateRun(RunId: string, request: UpdateRunRequest): UpdateRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateRunWithOptions(RunId, request, headers, runtime);
}

async function updateRunWithOptions(RunId: string, request: UpdateRunRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateRunResponse {
  Util.validateModel(request);
  RunId = OpenApiUtil.getEncodeParam(RunId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.name)) {
    body.Name = request.name;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateRun', '2021-02-02', 'HTTPS', 'PUT', 'AK', `/api/v1/runs/${RunId}`, 'json', req, runtime);
}

model UpdatePipelinePrivilegesRequest {
  users?: [ string ](name='Users'),
}

model UpdatePipelinePrivilegesResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdatePipelinePrivilegesResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePipelinePrivilegesResponseBody(name='body'),
}

async function updatePipelinePrivileges(PipelineId: string, request: UpdatePipelinePrivilegesRequest): UpdatePipelinePrivilegesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updatePipelinePrivilegesWithOptions(PipelineId, request, headers, runtime);
}

async function updatePipelinePrivilegesWithOptions(PipelineId: string, request: UpdatePipelinePrivilegesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdatePipelinePrivilegesResponse {
  Util.validateModel(request);
  PipelineId = OpenApiUtil.getEncodeParam(PipelineId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.users)) {
    body.Users = request.users;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdatePipelinePrivileges', '2021-02-02', 'HTTPS', 'PUT', 'AK', `/api/v1/pipelines/${PipelineId}/privileges`, 'json', req, runtime);
}

model GetNodeRequest {
  depth?: int32(name='Depth'),
}

model GetNodeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  apiVersion?: string(name='ApiVersion'),
  metadata?: {
    identifier?: string(name='Identifier', description='标识符'),
    name?: string(name='Name', description='名字'),
    provider?: string(name='Provider', description='提供方'),
    nodeId?: string(name='NodeId', description='节点id'),
    version?: string(name='Version', description='版本'),
    displayName?: string(name='DisplayName', description='展现名'),
  }(name='Metadata'),
  spec?: {
    hasPipelines?: boolean(name='HasPipelines', description='是否有pipeline'),
    dependencies?: [ string ](name='Dependencies', description='依赖列表'),
    pipelines?: [  map[string]any ](name='Pipelines', description='pipeline列表'),
    inputs?: {
      artifacts?: [  map[string]any ](name='Artifacts', description='artifacts'),
      parameters?: [  map[string]any ](name='Parameters', description='参数'),
    }(name='Inputs', description='输入'),
    outputs?: {
      artifacts?: [  map[string]any ](name='Artifacts', description='artifacts'),
      parameters?: [  map[string]any ](name='Parameters', description='参数'),
    }(name='Outputs', description='输出'),
  }(name='Spec', description='算法体'),
  statusInfo?: {
    finishedAt?: string(name='FinishedAt', description='结束时间'),
    startedAt?: string(name='StartedAt', description='开始时间'),
    status?: string(name='Status', description='状态'),
  }(name='StatusInfo', description='状态'),
}

model GetNodeResponse = {
  headers: map[string]string(name='headers'),
  body: GetNodeResponseBody(name='body'),
}

async function getNode(RunId: string, NodeId: string, request: GetNodeRequest): GetNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getNodeWithOptions(RunId, NodeId, request, headers, runtime);
}

async function getNodeWithOptions(RunId: string, NodeId: string, request: GetNodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetNodeResponse {
  Util.validateModel(request);
  RunId = OpenApiUtil.getEncodeParam(RunId);
  NodeId = OpenApiUtil.getEncodeParam(NodeId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.depth)) {
    query.Depth = request.depth;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetNode', '2021-02-02', 'HTTPS', 'GET', 'AK', `/api/v1/runs/${RunId}/nodes/${NodeId}`, 'json', req, runtime);
}

model GetPipelineSchemaResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  pipelineId?: string(name='PipelineId'),
  provider?: string(name='Provider'),
  identifier?: string(name='Identifier'),
  version?: string(name='Version'),
  manifest?: string(name='Manifest'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  uuid?: string(name='Uuid'),
  workspaceId?: string(name='WorkspaceId'),
}

model GetPipelineSchemaResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineSchemaResponseBody(name='body'),
}

async function getPipelineSchema(PipelineId: string): GetPipelineSchemaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPipelineSchemaWithOptions(PipelineId, headers, runtime);
}

async function getPipelineSchemaWithOptions(PipelineId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetPipelineSchemaResponse {
  PipelineId = OpenApiUtil.getEncodeParam(PipelineId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetPipelineSchema', '2021-02-02', 'HTTPS', 'GET', 'AK', `/api/v1/pipelines/${PipelineId}/schema`, 'json', req, runtime);
}

model CreatePipelineRequest {
  workspaceId?: string(name='WorkspaceId'),
  manifest?: string(name='Manifest'),
}

model CreatePipelineResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  pipelineId?: string(name='PipelineId'),
}

model CreatePipelineResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePipelineResponseBody(name='body'),
}

async function createPipeline(request: CreatePipelineRequest): CreatePipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createPipelineWithOptions(request, headers, runtime);
}

async function createPipelineWithOptions(request: CreatePipelineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreatePipelineResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.workspaceId)) {
    body.WorkspaceId = request.workspaceId;
  }
  if (!Util.isUnset(request.manifest)) {
    body.Manifest = request.manifest;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreatePipeline', '2021-02-02', 'HTTPS', 'POST', 'AK', `/api/v1/pipelines`, 'json', req, runtime);
}

model ListPipelinesRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  pipelineIdentifier?: string(name='PipelineIdentifier'),
  pipelineProvider?: string(name='PipelineProvider'),
  pipelineVersion?: string(name='PipelineVersion'),
  workspaceId?: string(name='WorkspaceId'),
}

model ListPipelinesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  pipelines?: [ 
    {
      pipelineId?: string(name='PipelineId'),
      gmtCreateTime?: string(name='GmtCreateTime'),
      gmtModifiedTime?: string(name='GmtModifiedTime'),
      provider?: string(name='Provider'),
      identifier?: string(name='Identifier'),
      version?: string(name='Version'),
      uuid?: string(name='Uuid'),
      workspaceId?: string(name='WorkspaceId'),
    }
  ](name='Pipelines'),
  totalCount?: long(name='TotalCount'),
}

model ListPipelinesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPipelinesResponseBody(name='body'),
}

async function listPipelines(request: ListPipelinesRequest): ListPipelinesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPipelinesWithOptions(request, headers, runtime);
}

async function listPipelinesWithOptions(request: ListPipelinesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPipelinesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageNumber)) {
    query.PageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.PageSize = request.pageSize;
  }
  if (!Util.isUnset(request.pipelineIdentifier)) {
    query.PipelineIdentifier = request.pipelineIdentifier;
  }
  if (!Util.isUnset(request.pipelineProvider)) {
    query.PipelineProvider = request.pipelineProvider;
  }
  if (!Util.isUnset(request.pipelineVersion)) {
    query.PipelineVersion = request.pipelineVersion;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query.WorkspaceId = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListPipelines', '2021-02-02', 'HTTPS', 'GET', 'AK', `/api/v1/pipelines`, 'json', req, runtime);
}

model ListRunsRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  experimentId?: string(name='ExperimentId'),
  name?: string(name='Name'),
  pipelineId?: string(name='PipelineId'),
  runId?: string(name='RunId'),
  sortBy?: string(name='SortBy'),
  order?: string(name='Order'),
  source?: string(name='Source'),
  status?: string(name='Status'),
  workspaceId?: string(name='WorkspaceId'),
  userId?: string(name='UserId', description='用户id'),
}

model ListRunsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  runs?: [ 
    {
      runId?: string(name='RunId'),
      name?: string(name='Name'),
      status?: string(name='Status'),
      userId?: string(name='UserId'),
      parentUserId?: string(name='ParentUserId'),
      startedAt?: string(name='StartedAt'),
      finishedAt?: string(name='FinishedAt'),
      nodeId?: string(name='NodeId'),
      duration?: long(name='Duration'),
      workspaceId?: string(name='WorkspaceId'),
      message?: string(name='Message'),
      source?: string(name='Source'),
      experimentId?: string(name='ExperimentId'),
      gmtCreateTime?: string(name='GmtCreateTime', description='创建时间'),
      gmtModifiedTime?: string(name='GmtModifiedTime', description='修改时间'),
    }
  ](name='Runs'),
  totalCount?: long(name='TotalCount'),
}

model ListRunsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRunsResponseBody(name='body'),
}

async function listRuns(request: ListRunsRequest): ListRunsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listRunsWithOptions(request, headers, runtime);
}

async function listRunsWithOptions(request: ListRunsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRunsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageNumber)) {
    query.PageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.PageSize = request.pageSize;
  }
  if (!Util.isUnset(request.experimentId)) {
    query.ExperimentId = request.experimentId;
  }
  if (!Util.isUnset(request.name)) {
    query.Name = request.name;
  }
  if (!Util.isUnset(request.pipelineId)) {
    query.PipelineId = request.pipelineId;
  }
  if (!Util.isUnset(request.runId)) {
    query.RunId = request.runId;
  }
  if (!Util.isUnset(request.sortBy)) {
    query.SortBy = request.sortBy;
  }
  if (!Util.isUnset(request.order)) {
    query.Order = request.order;
  }
  if (!Util.isUnset(request.source)) {
    query.Source = request.source;
  }
  if (!Util.isUnset(request.status)) {
    query.Status = request.status;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query.WorkspaceId = request.workspaceId;
  }
  if (!Util.isUnset(request.userId)) {
    query.UserId = request.userId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListRuns', '2021-02-02', 'HTTPS', 'GET', 'AK', `/api/v1/runs`, 'json', req, runtime);
}

model ListRunsStatusRequest {
  runs?: [ string ](name='Runs'),
  nodes?: [ 
    {
      runId?: string(name='RunId'),
      nodeId?: string(name='NodeId'),
    }
  ](name='Nodes'),
  workspaceId?: string(name='WorkspaceId'),
}

model ListRunsStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  runs?: [ 
    {
      runId?: string(name='RunId', description='run的id'),
      status?: string(name='Status', description='run状态'),
      name?: string(name='Name', description='run名字'),
      userId?: string(name='UserId', description='用户id'),
      parentUserId?: string(name='ParentUserId', description='父账户id'),
      nodeId?: string(name='NodeId', description='节点id'),
      experimentId?: string(name='ExperimentId', description='实验id'),
      isDeleted?: boolean(name='IsDeleted', description='是否被删除'),
    }
  ](name='Runs'),
  nodes?: [ 
    {
      runId?: string(name='RunId', description='运行Id'),
      nodeId?: string(name='NodeId', description='节点Id'),
      status?: string(name='Status', description='状态'),
      inputArtifactArchived?: boolean(name='InputArtifactArchived', description='输入artifact是否已保存'),
      outputArtifactArchived?: boolean(name='OutputArtifactArchived', description='输出artifact是否已保存'),
      startedAt?: string(name='StartedAt', description='修改 UTC 时间，日期格式 iso8601'),
      finishedAt?: string(name='FinishedAt', description='修改 UTC 时间，日期格式 iso8601'),
      nodeName?: string(name='NodeName', description='节点名'),
    }
  ](name='Nodes'),
}

model ListRunsStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ListRunsStatusResponseBody(name='body'),
}

async function listRunsStatus(request: ListRunsStatusRequest): ListRunsStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listRunsStatusWithOptions(request, headers, runtime);
}

async function listRunsStatusWithOptions(request: ListRunsStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRunsStatusResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.runs)) {
    body.Runs = request.runs;
  }
  if (!Util.isUnset(request.nodes)) {
    body.Nodes = request.nodes;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body.WorkspaceId = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListRunsStatus', '2021-02-02', 'HTTPS', 'PUT', 'AK', `/api/v1/runs`, 'json', req, runtime);
}

model CreatePipelineReleaseRequest {
  targetPipelineProvider?: string(name='TargetPipelineProvider'),
}

model CreatePipelineReleaseResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  pipelineId?: string(name='PipelineId'),
}

model CreatePipelineReleaseResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePipelineReleaseResponseBody(name='body'),
}

async function createPipelineRelease(PipelineId: string, request: CreatePipelineReleaseRequest): CreatePipelineReleaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createPipelineReleaseWithOptions(PipelineId, request, headers, runtime);
}

async function createPipelineReleaseWithOptions(PipelineId: string, request: CreatePipelineReleaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreatePipelineReleaseResponse {
  Util.validateModel(request);
  PipelineId = OpenApiUtil.getEncodeParam(PipelineId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.targetPipelineProvider)) {
    body.TargetPipelineProvider = request.targetPipelineProvider;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreatePipelineRelease', '2021-02-02', 'HTTPS', 'PUT', 'AK', `/api/v1/pipelines/${PipelineId}/releases`, 'json', req, runtime);
}

model ListNodeOutputsRequest {
  depth?: int32(name='Depth', description='节点往下拿多少层子节点'),
  name?: string(name='Name', description='节点名字'),
  pageNumber?: int32(name='PageNumber', description='当前页，页码从1开始'),
  pageSize?: int32(name='PageSize', description='每页返回的输出数目'),
  sortBy?: string(name='SortBy', description='排序字段'),
  order?: string(name='Order', description='排序顺序， 顺序：ASC，倒序：DESC'),
  type?: string(name='Type', description='artifact 类型'),
}

model ListNodeOutputsResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的作业数量'),
  outputs?: [ 
    {
      name?: string(name='Name', description='名字'),
      type?: string(name='Type', description='类型'),
      gmtCreateTime?: string(name='GmtCreateTime', description='创建时间'),
      id?: string(name='Id'),
      nodeId?: string(name='NodeId', description='输出所属节点 id'),
      value?: string(name='Value', description='输出内容'),
      expandedArtifactIndex?: long(name='ExpandedArtifactIndex', description='被扩展artifact的索引号，以0开始'),
      expandableArtifactName?: string(name='ExpandableArtifactName', description='可扩展artifact的名字'),
      info?: map[string]any(name='Info', description='artifact内容'),
      producer?: string(name='Producer', description='rtifact生产者'),
    }
  ](name='Outputs', description='输出列表'),
}

model ListNodeOutputsResponse = {
  headers: map[string]string(name='headers'),
  body: ListNodeOutputsResponseBody(name='body'),
}

async function listNodeOutputs(RunId: string, NodeId: string, request: ListNodeOutputsRequest): ListNodeOutputsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listNodeOutputsWithOptions(RunId, NodeId, request, headers, runtime);
}

async function listNodeOutputsWithOptions(RunId: string, NodeId: string, request: ListNodeOutputsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListNodeOutputsResponse {
  Util.validateModel(request);
  RunId = OpenApiUtil.getEncodeParam(RunId);
  NodeId = OpenApiUtil.getEncodeParam(NodeId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.depth)) {
    query.Depth = request.depth;
  }
  if (!Util.isUnset(request.name)) {
    query.Name = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query.PageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.PageSize = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query.SortBy = request.sortBy;
  }
  if (!Util.isUnset(request.order)) {
    query.Order = request.order;
  }
  if (!Util.isUnset(request.type)) {
    query.Type = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListNodeOutputs', '2021-02-02', 'HTTPS', 'GET', 'AK', `/api/v1/runs/${RunId}/nodes/${NodeId}/outputs`, 'json', req, runtime);
}

model GetPipelineResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  pipelineId?: string(name='PipelineId'),
  provider?: string(name='Provider'),
  identifier?: string(name='Identifier'),
  version?: string(name='Version'),
  manifest?: string(name='Manifest'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  uuid?: string(name='Uuid'),
  workspaceId?: string(name='WorkspaceId'),
}

model GetPipelineResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineResponseBody(name='body'),
}

async function getPipeline(PipelineId: string): GetPipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPipelineWithOptions(PipelineId, headers, runtime);
}

async function getPipelineWithOptions(PipelineId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetPipelineResponse {
  PipelineId = OpenApiUtil.getEncodeParam(PipelineId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetPipeline', '2021-02-02', 'HTTPS', 'GET', 'AK', `/api/v1/pipelines/${PipelineId}`, 'json', req, runtime);
}

model ListPipelinesWithLatestRunInfoRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  pipelineIdentifier?: string(name='PipelineIdentifier'),
  pipelineProvider?: string(name='PipelineProvider'),
  pipelineVersion?: string(name='PipelineVersion'),
  workspaceId?: string(name='WorkspaceId'),
}

model ListPipelinesWithLatestRunInfoResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  pipelines?: [ 
    {
      pipelineId?: string(name='PipelineId'),
      gmtCreateTime?: string(name='GmtCreateTime'),
      gmtModifiedTime?: string(name='GmtModifiedTime'),
      provider?: string(name='Provider'),
      identifier?: string(name='Identifier'),
      version?: string(name='Version'),
      uuid?: string(name='Uuid'),
      workspaceId?: string(name='WorkspaceId'),
    }
  ](name='Pipelines'),
  totalCount?: long(name='TotalCount'),
}

model ListPipelinesWithLatestRunInfoResponse = {
  headers: map[string]string(name='headers'),
  body: ListPipelinesWithLatestRunInfoResponseBody(name='body'),
}

async function listPipelinesWithLatestRunInfo(request: ListPipelinesWithLatestRunInfoRequest): ListPipelinesWithLatestRunInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPipelinesWithLatestRunInfoWithOptions(request, headers, runtime);
}

async function listPipelinesWithLatestRunInfoWithOptions(request: ListPipelinesWithLatestRunInfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPipelinesWithLatestRunInfoResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageNumber)) {
    query.PageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.PageSize = request.pageSize;
  }
  if (!Util.isUnset(request.pipelineIdentifier)) {
    query.PipelineIdentifier = request.pipelineIdentifier;
  }
  if (!Util.isUnset(request.pipelineProvider)) {
    query.PipelineProvider = request.pipelineProvider;
  }
  if (!Util.isUnset(request.pipelineVersion)) {
    query.PipelineVersion = request.pipelineVersion;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query.WorkspaceId = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListPipelinesWithLatestRunInfo', '2021-02-02', 'HTTPS', 'GET', 'AK', `/api/v1/lightness/pipelines`, 'json', req, runtime);
}

model DeleteRunResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteRunResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRunResponseBody(name='body'),
}

async function deleteRun(RunId: string): DeleteRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteRunWithOptions(RunId, headers, runtime);
}

async function deleteRunWithOptions(RunId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteRunResponse {
  RunId = OpenApiUtil.getEncodeParam(RunId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DeleteRun', '2021-02-02', 'HTTPS', 'DELETE', 'AK', `/api/v1/runs/${RunId}`, 'json', req, runtime);
}

model ListPipelinePrivilegesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  pipelineId?: string(name='PipelineId'),
  users?: [ string ](name='Users', description='[ "*" ]'),
  actions?: [ string ](name='Actions', description='[     "DescribeRun",     "PutRun",     "ListPipeline",     "GetPipeline"  ]'),
}

model ListPipelinePrivilegesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPipelinePrivilegesResponseBody(name='body'),
}

async function listPipelinePrivileges(PipelineId: string): ListPipelinePrivilegesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPipelinePrivilegesWithOptions(PipelineId, headers, runtime);
}

async function listPipelinePrivilegesWithOptions(PipelineId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListPipelinePrivilegesResponse {
  PipelineId = OpenApiUtil.getEncodeParam(PipelineId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('ListPipelinePrivileges', '2021-02-02', 'HTTPS', 'GET', 'AK', `/api/v1/pipelines/${PipelineId}/privileges`, 'json', req, runtime);
}

model CreateRunRequest {
  pipelineId?: string(name='PipelineId'),
  name?: string(name='Name'),
  pipelineManifest?: string(name='PipelineManifest'),
  arguments?: string(name='Arguments'),
  noConfirmRequired?: boolean(name='NoConfirmRequired'),
  workspaceId?: string(name='WorkspaceId'),
  source?: string(name='Source'),
  experimentId?: string(name='ExperimentId'),
  options?: string(name='Options'),
}

model CreateRunResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  runId?: string(name='RunId'),
}

model CreateRunResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRunResponseBody(name='body'),
}

async function createRun(request: CreateRunRequest): CreateRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createRunWithOptions(request, headers, runtime);
}

async function createRunWithOptions(request: CreateRunRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateRunResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.pipelineId)) {
    body.PipelineId = request.pipelineId;
  }
  if (!Util.isUnset(request.name)) {
    body.Name = request.name;
  }
  if (!Util.isUnset(request.pipelineManifest)) {
    body.PipelineManifest = request.pipelineManifest;
  }
  if (!Util.isUnset(request.arguments)) {
    body.Arguments = request.arguments;
  }
  if (!Util.isUnset(request.noConfirmRequired)) {
    body.NoConfirmRequired = request.noConfirmRequired;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body.WorkspaceId = request.workspaceId;
  }
  if (!Util.isUnset(request.source)) {
    body.Source = request.source;
  }
  if (!Util.isUnset(request.experimentId)) {
    body.ExperimentId = request.experimentId;
  }
  if (!Util.isUnset(request.options)) {
    body.Options = request.options;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateRun', '2021-02-02', 'HTTPS', 'POST', 'AK', `/api/v1/runs`, 'json', req, runtime);
}

model DeletePipelineResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeletePipelineResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePipelineResponseBody(name='body'),
}

async function deletePipeline(PipelineId: string): DeletePipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deletePipelineWithOptions(PipelineId, headers, runtime);
}

async function deletePipelineWithOptions(PipelineId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeletePipelineResponse {
  PipelineId = OpenApiUtil.getEncodeParam(PipelineId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DeletePipeline', '2021-02-02', 'HTTPS', 'DELETE', 'AK', `/api/v1/pipelines/${PipelineId}`, 'json', req, runtime);
}

model GetCallerProviderResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  provider?: string(name='Provider'),
}

model GetCallerProviderResponse = {
  headers: map[string]string(name='headers'),
  body: GetCallerProviderResponseBody(name='body'),
}

async function getCallerProvider(): GetCallerProviderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getCallerProviderWithOptions(headers, runtime);
}

async function getCallerProviderWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): GetCallerProviderResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetCallerProvider', '2021-02-02', 'HTTPS', 'GET', 'AK', `/api/v1/provider`, 'json', req, runtime);
}

model TerminateRunResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model TerminateRunResponse = {
  headers: map[string]string(name='headers'),
  body: TerminateRunResponseBody(name='body'),
}

async function terminateRun(RunId: string): TerminateRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return terminateRunWithOptions(RunId, headers, runtime);
}

async function terminateRunWithOptions(RunId: string, headers: map[string]string, runtime: Util.RuntimeOptions): TerminateRunResponse {
  RunId = OpenApiUtil.getEncodeParam(RunId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('TerminateRun', '2021-02-02', 'HTTPS', 'PUT', 'AK', `/api/v1/runs/${RunId}/termination`, 'json', req, runtime);
}

model GetRunRequest {
  verbose?: boolean(name='Verbose', description='是否返回详细信息，目前详细信息包含： RuntimeManifest'),
}

model GetRunResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  pipelineId?: string(name='PipelineId', description='pipeline的id'),
  runId?: string(name='RunId', description='run的id'),
  name?: string(name='Name', description='run的名字'),
  status?: string(name='Status', description='run的状态'),
  manifest?: string(name='Manifest', description='run的manifest'),
  arguments?: string(name='Arguments', description='run的参数'),
  userId?: string(name='UserId', description='用户uid'),
  parentUserId?: string(name='ParentUserId', description='用户主账户的uid'),
  startedAt?: string(name='StartedAt', description='run的开始 UTC 时间，格式 iso8601'),
  finishedAt?: string(name='FinishedAt', description='run的结束 UTC 时间，格式 iso8601'),
  nodeId?: string(name='NodeId', description='run的根节点id'),
  duration?: long(name='Duration', description='run的运行时长，以s为单位'),
  workspaceId?: string(name='WorkspaceId', description='工作空间id'),
  message?: string(name='Message', description='错误消息'),
  source?: string(name='Source', description='run的来源'),
  experimentId?: string(name='ExperimentId', description='run关联的实验id'),
  options?: string(name='Options', description='选项'),
  runtimeManifest?: string(name='RuntimeManifest', description='RuntimeManifest'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='修改时间'),
}

model GetRunResponse = {
  headers: map[string]string(name='headers'),
  body: GetRunResponseBody(name='body'),
}

async function getRun(RunId: string, request: GetRunRequest): GetRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getRunWithOptions(RunId, request, headers, runtime);
}

async function getRunWithOptions(RunId: string, request: GetRunRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetRunResponse {
  Util.validateModel(request);
  RunId = OpenApiUtil.getEncodeParam(RunId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.verbose)) {
    query.Verbose = request.verbose;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetRun', '2021-02-02', 'HTTPS', 'GET', 'AK', `/api/v1/runs/${RunId}`, 'json', req, runtime);
}

model GetRunStatisticsRequest {
  pipelineId?: string(name='PipelineId', description='pipeline的id'),
  status?: [ string ](name='Status', description='run的状态'),
  name?: string(name='Name', description='run的名字'),
  source?: string(name='Source', description='run的来源'),
  scope?: string(name='Scope', description='run的范围'),
  experimentId?: string(name='ExperimentId', description='实验的id'),
  workspaceId?: string(name='WorkspaceId', description='工作空间id 该字段仅对Scope为User有效，统计该用户在该工作空间下的数据'),
  isShowAll?: boolean(name='IsShowAll', description='是否统计主账户下所有子账户的数据'),
}

model GetRunStatisticsShrinkRequest {
  pipelineId?: string(name='PipelineId', description='pipeline的id'),
  statusShrink?: string(name='Status', description='run的状态'),
  name?: string(name='Name', description='run的名字'),
  source?: string(name='Source', description='run的来源'),
  scope?: string(name='Scope', description='run的范围'),
  experimentId?: string(name='ExperimentId', description='实验的id'),
  workspaceId?: string(name='WorkspaceId', description='工作空间id 该字段仅对Scope为User有效，统计该用户在该工作空间下的数据'),
  isShowAll?: boolean(name='IsShowAll', description='是否统计主账户下所有子账户的数据'),
}

model GetRunStatisticsResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  running?: long(name='Running', description='运行中run的个数'),
  failed?: long(name='Failed', description='失败run的个数'),
}

model GetRunStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetRunStatisticsResponseBody(name='body'),
}

async function getRunStatistics(request: GetRunStatisticsRequest): GetRunStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getRunStatisticsWithOptions(request, headers, runtime);
}

async function getRunStatisticsWithOptions(tmpReq: GetRunStatisticsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetRunStatisticsResponse {
  Util.validateModel(tmpReq);
  var request = new GetRunStatisticsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.status)) {
    request.statusShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.status, 'Status', 'json');
  }
  var query : map[string]any= {};
  if (!Util.isUnset(request.pipelineId)) {
    query.PipelineId = request.pipelineId;
  }
  if (!Util.isUnset(request.statusShrink)) {
    query.Status = request.statusShrink;
  }
  if (!Util.isUnset(request.name)) {
    query.Name = request.name;
  }
  if (!Util.isUnset(request.source)) {
    query.Source = request.source;
  }
  if (!Util.isUnset(request.scope)) {
    query.Scope = request.scope;
  }
  if (!Util.isUnset(request.experimentId)) {
    query.ExperimentId = request.experimentId;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query.WorkspaceId = request.workspaceId;
  }
  if (!Util.isUnset(request.isShowAll)) {
    query.IsShowAll = request.isShowAll;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetRunStatistics', '2021-02-02', 'HTTPS', 'GET', 'AK', `/api/v1/statistics/runs`, 'json', req, runtime);
}

model UpdatePipelineRequest {
  manifest?: string(name='Manifest'),
}

model UpdatePipelineResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdatePipelineResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePipelineResponseBody(name='body'),
}

async function updatePipeline(PipelineId: string, request: UpdatePipelineRequest): UpdatePipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updatePipelineWithOptions(PipelineId, request, headers, runtime);
}

async function updatePipelineWithOptions(PipelineId: string, request: UpdatePipelineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdatePipelineResponse {
  Util.validateModel(request);
  PipelineId = OpenApiUtil.getEncodeParam(PipelineId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.manifest)) {
    body.Manifest = request.manifest;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdatePipeline', '2021-02-02', 'HTTPS', 'PUT', 'AK', `/api/v1/pipelines/${PipelineId}`, 'json', req, runtime);
}

model GetRunStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  status?: string(name='Status', description='run状态'),
  nodes?: {
    finishedAt?: string(name='FinishedAt', description='结束时间'),
    startedAt?: string(name='StartedAt', description='开始时间'),
    status?: string(name='Status', description='状态'),
    name?: string(name='Name', description='node的名字'),
    id?: string(name='Id', description='node的id'),
  }(name='Nodes', description='node集合状态'),
}

model GetRunStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetRunStatusResponseBody(name='body'),
}

async function getRunStatus(RunId: string): GetRunStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getRunStatusWithOptions(RunId, headers, runtime);
}

async function getRunStatusWithOptions(RunId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetRunStatusResponse {
  RunId = OpenApiUtil.getEncodeParam(RunId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetRunStatus', '2021-02-02', 'HTTPS', 'GET', 'AK', `/api/v1/runs/${RunId}/status`, 'json', req, runtime);
}

model ListNodeLogsRequest {
  offset?: int32(name='Offset', description='当前偏移量'),
  pageSize?: int32(name='PageSize', description='每页返回的log数目'),
  fromTimeInSeconds?: long(name='FromTimeInSeconds', description='开始时间'),
  keyword?: string(name='Keyword', description='搜索词'),
  reverse?: boolean(name='Reverse', description='是否倒排'),
  toTimeInSeconds?: long(name='ToTimeInSeconds', description='结束时间'),
}

model ListNodeLogsResponseBody = {
  requestId?: string(name='RequestId', description='请求 ID'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的作业数量'),
  logs?: [ string ](name='Logs', description='日志列表'),
}

model ListNodeLogsResponse = {
  headers: map[string]string(name='headers'),
  body: ListNodeLogsResponseBody(name='body'),
}

async function listNodeLogs(RunId: string, NodeId: string, request: ListNodeLogsRequest): ListNodeLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listNodeLogsWithOptions(RunId, NodeId, request, headers, runtime);
}

async function listNodeLogsWithOptions(RunId: string, NodeId: string, request: ListNodeLogsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListNodeLogsResponse {
  Util.validateModel(request);
  RunId = OpenApiUtil.getEncodeParam(RunId);
  NodeId = OpenApiUtil.getEncodeParam(NodeId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.offset)) {
    query.Offset = request.offset;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.PageSize = request.pageSize;
  }
  if (!Util.isUnset(request.fromTimeInSeconds)) {
    query.FromTimeInSeconds = request.fromTimeInSeconds;
  }
  if (!Util.isUnset(request.keyword)) {
    query.Keyword = request.keyword;
  }
  if (!Util.isUnset(request.reverse)) {
    query.Reverse = request.reverse;
  }
  if (!Util.isUnset(request.toTimeInSeconds)) {
    query.ToTimeInSeconds = request.toTimeInSeconds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListNodeLogs', '2021-02-02', 'HTTPS', 'GET', 'AK', `/api/v1/runs/${RunId}/nodes/${NodeId}/logs`, 'json', req, runtime);
}

model StartRunResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StartRunResponse = {
  headers: map[string]string(name='headers'),
  body: StartRunResponseBody(name='body'),
}

async function startRun(RunId: string): StartRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startRunWithOptions(RunId, headers, runtime);
}

async function startRunWithOptions(RunId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StartRunResponse {
  RunId = OpenApiUtil.getEncodeParam(RunId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('StartRun', '2021-02-02', 'HTTPS', 'PUT', 'AK', `/api/v1/runs/${RunId}/start`, 'json', req, runtime);
}

