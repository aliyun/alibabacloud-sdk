/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  @endpointMap = {
    cn-beijing = 'pai.cn-beijing.aliyuncs.com',
    cn-hangzhou = 'pai.cn-hangzhou.data.aliyun.com',
    cn-shanghai = 'pai.cn-shanghai.aliyuncs.com',
    cn-shenzhen = 'pai.cn-shenzhen.aliyuncs.com',
    cn-hongkong = 'pai.cn-hongkong.aliyuncs.com',
    ap-southeast-1 = 'pai.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'pai.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'pai.ap-southeast-3.aliyuncs.com',
    ap-southeast-5 = 'pai.ap-southeast-5.aliyuncs.com',
    us-west-1 = 'pai.us-west-1.aliyuncs.com',
    us-east-1 = 'pai.us-east-1.aliyuncs.com',
    eu-central-1 = 'pai.eu-central-1.aliyuncs.com',
    me-east-1 = 'pai.me-east-1.aliyuncs.com',
    ap-south-1 = 'pai.ap-south-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('paiflow', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model Pipeline {
  gmtCreateTime?: string(name='GmtCreateTime', description='创建UTC时间，日期格式iso8601。'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='修改UTC时间，日期格式iso8601。'),
  identifier?: string(name='Identifier', description='Pipeline标识。'),
  pipelineId?: string(name='PipelineId', description='Pipeline ID。'),
  provider?: string(name='Provider', description='用户自定义Pipeline时，为用户ID。 官方Pipeline为pai。'),
  uuid?: string(name='Uuid', description='Pipeline当前版本标识，用户每次更新，会生成该uuid。'),
  version?: string(name='Version', description='Pipeline版本。'),
  workspaceId?: string(name='WorkspaceId', description='AI工作空间ID。'),
}

model Run {
  accessibility?: string(name='Accessibility', description='实验可见度，目前有PUBLIC（公开）、PRIVATE（私有）。'),
  duration?: long(name='Duration', description='运行时长，单位为秒。'),
  experimentId?: string(name='ExperimentId', description='实验ID。'),
  finishedAt?: long(name='FinishedAt', description='Run运行完成时间。'),
  gmtCreateTime?: string(name='GmtCreateTime', description='Run的创建UTC时间，格式iso8601。'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='Run最近修改的UTC时间，格式iso8601。'),
  message?: string(name='Message', description='错误信息。'),
  name?: string(name='Name', description='Run的名称。'),
  nodeId?: string(name='NodeId', description='节点ID。'),
  parentUserId?: string(name='ParentUserId', description='Owner ID。'),
  runId?: string(name='RunId', description='Run ID。'),
  source?: string(name='Source', description='来源。'),
  startedAt?: long(name='StartedAt', description='Run运行开始时间。'),
  status?: string(name='Status', description='Run的状态，目前如下几种状态。  Initialized Running Succeeded Failed Suspended Terminated Unknown Skipped Terminating'),
  userId?: string(name='UserId', description='创建人ID。'),
  workspaceId?: string(name='WorkspaceId', description='所属工作空间ID。'),
}

model CreatePipelineRequest {
  manifest?: string(name='Manifest'),
  workspaceId?: string(name='WorkspaceId'),
}

model CreatePipelineResponseBody = {
  pipelineId?: string(name='PipelineId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreatePipelineResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePipelineResponseBody(name='body'),
}

async function createPipeline(request: CreatePipelineRequest): CreatePipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createPipelineWithOptions(request, headers, runtime);
}

async function createPipelineWithOptions(request: CreatePipelineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreatePipelineResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.manifest)) {
    body['Manifest'] = request.manifest;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreatePipeline',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/pipelines`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreatePipelineReleaseRequest {
  targetPipelineProvider?: string(name='TargetPipelineProvider'),
}

model CreatePipelineReleaseResponseBody = {
  pipelineId?: string(name='PipelineId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreatePipelineReleaseResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePipelineReleaseResponseBody(name='body'),
}

async function createPipelineRelease(PipelineId: string, request: CreatePipelineReleaseRequest): CreatePipelineReleaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createPipelineReleaseWithOptions(PipelineId, request, headers, runtime);
}

async function createPipelineReleaseWithOptions(PipelineId: string, request: CreatePipelineReleaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreatePipelineReleaseResponse {
  Util.validateModel(request);
  PipelineId = OpenApiUtil.getEncodeParam(PipelineId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.targetPipelineProvider)) {
    body['TargetPipelineProvider'] = request.targetPipelineProvider;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreatePipelineRelease',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/pipelines/${PipelineId}/releases`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateRunRequest {
  accessibility?: string(name='Accessibility', description='PUBLIC 公开；PRIVATE 私有'),
  arguments?: string(name='Arguments', description='参数'),
  experimentId?: string(name='ExperimentId', description='实验id'),
  name?: string(name='Name', description='Run的名字，若为空，则自动生成名字'),
  noConfirmRequired?: boolean(name='NoConfirmRequired', description='true代表直接启动; false代表只创建run但先不启动'),
  options?: string(name='Options', description='选项，json格式'),
  pipelineId?: string(name='PipelineId', description='Pipeline的id; PipelineId和PipelineManifest 二选一'),
  pipelineManifest?: string(name='PipelineManifest', description='Pipeline内容; PipelineId和PipelineManifest 二选一一'),
  source?: string(name='Source', description='来源，支持如下值：SDK; PAI_STUDIO; M6; UNKNOWN;'),
  workspaceId?: string(name='WorkspaceId', description='项目空间id'),
}

model CreateRunResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  runId?: string(name='RunId', description='run的id'),
}

model CreateRunResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRunResponseBody(name='body'),
}

async function createRun(request: CreateRunRequest): CreateRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createRunWithOptions(request, headers, runtime);
}

async function createRunWithOptions(request: CreateRunRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateRunResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accessibility)) {
    body['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.arguments)) {
    body['Arguments'] = request.arguments;
  }
  if (!Util.isUnset(request.experimentId)) {
    body['ExperimentId'] = request.experimentId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.noConfirmRequired)) {
    body['NoConfirmRequired'] = request.noConfirmRequired;
  }
  if (!Util.isUnset(request.options)) {
    body['Options'] = request.options;
  }
  if (!Util.isUnset(request.pipelineId)) {
    body['PipelineId'] = request.pipelineId;
  }
  if (!Util.isUnset(request.pipelineManifest)) {
    body['PipelineManifest'] = request.pipelineManifest;
  }
  if (!Util.isUnset(request.source)) {
    body['Source'] = request.source;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateRun',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/runs`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeletePipelineResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeletePipelineResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePipelineResponseBody(name='body'),
}

async function deletePipeline(PipelineId: string): DeletePipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deletePipelineWithOptions(PipelineId, headers, runtime);
}

async function deletePipelineWithOptions(PipelineId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeletePipelineResponse {
  PipelineId = OpenApiUtil.getEncodeParam(PipelineId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeletePipeline',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/pipelines/${PipelineId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteRunResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteRunResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRunResponseBody(name='body'),
}

async function deleteRun(RunId: string): DeleteRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteRunWithOptions(RunId, headers, runtime);
}

async function deleteRunWithOptions(RunId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteRunResponse {
  RunId = OpenApiUtil.getEncodeParam(RunId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteRun',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/runs/${RunId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetCallerProviderResponseBody = {
  provider?: string(name='Provider'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetCallerProviderResponse = {
  headers: map[string]string(name='headers'),
  body: GetCallerProviderResponseBody(name='body'),
}

async function getCallerProvider(): GetCallerProviderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getCallerProviderWithOptions(headers, runtime);
}

async function getCallerProviderWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): GetCallerProviderResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetCallerProvider',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/provider`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetNodeRequest {
  depth?: int32(name='Depth', description='查询深度'),
}

model GetNodeResponseBody = {
  apiVersion?: string(name='ApiVersion', description='api 版本'),
  metadata?: {
    displayName?: string(name='DisplayName', description='展示名称'),
    identifier?: string(name='Identifier', description='标识符'),
    name?: string(name='Name', description='名字'),
    namespace?: string(name='Namespace', description='所在命名空间'),
    nodeId?: string(name='NodeId', description='节点 id'),
    nodeType?: string(name='NodeType', description='节点类型'),
    provider?: string(name='Provider', description='提供方'),
    relatedNodeIds?: [ string ](name='RelatedNodeIds', description='Alink逻辑节点所对应的物理节点ID / Alink物理节点所对应的逻辑节点ID'),
    version?: string(name='Version', description='版本'),
  }(name='Metadata', description='node 的元信息'),
  requestId?: string(name='RequestId', description='请求 id'),
  spec?: {
    dependencies?: [ string ](name='Dependencies', description='依赖'),
    hasPipelines?: boolean(name='HasPipelines', description='是否有子 pipeline'),
    inputs?: {
      artifacts?: [  map[string]any ](name='Artifacts', description='产物'),
      parameters?: [  map[string]any ](name='Parameters', description='参数'),
    }(name='Inputs', description='输入'),
    outputs?: {
      artifacts?: [  map[string]any ](name='Artifacts', description='产物'),
      parameters?: [  map[string]any ](name='Parameters', description='参数'),
    }(name='Outputs', description='输出'),
    pipelines?: [  map[string]any ](name='Pipelines', description='子 pipeline 列表'),
  }(name='Spec', description='算法体'),
  statusInfo?: {
    finishedAt?: string(name='FinishedAt', description='结束时间'),
    startedAt?: string(name='StartedAt', description='开始时间'),
    status?: string(name='Status', description='状态'),
  }(name='StatusInfo', description='node 运行状态'),
}

model GetNodeResponse = {
  headers: map[string]string(name='headers'),
  body: GetNodeResponseBody(name='body'),
}

async function getNode(RunId: string, NodeId: string, request: GetNodeRequest): GetNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getNodeWithOptions(RunId, NodeId, request, headers, runtime);
}

async function getNodeWithOptions(RunId: string, NodeId: string, request: GetNodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetNodeResponse {
  Util.validateModel(request);
  RunId = OpenApiUtil.getEncodeParam(RunId);
  NodeId = OpenApiUtil.getEncodeParam(NodeId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.depth)) {
    query['Depth'] = request.depth;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetNode',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/runs/${RunId}/nodes/${NodeId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetPipelineResponseBody = {
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  identifier?: string(name='Identifier'),
  manifest?: string(name='Manifest'),
  pipelineId?: string(name='PipelineId'),
  provider?: string(name='Provider'),
  requestId?: string(name='RequestId', description='Id of the request'),
  uuid?: string(name='Uuid'),
  version?: string(name='Version'),
  workspaceId?: string(name='WorkspaceId'),
}

model GetPipelineResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineResponseBody(name='body'),
}

async function getPipeline(PipelineId: string): GetPipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPipelineWithOptions(PipelineId, headers, runtime);
}

async function getPipelineWithOptions(PipelineId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetPipelineResponse {
  PipelineId = OpenApiUtil.getEncodeParam(PipelineId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetPipeline',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/pipelines/${PipelineId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetPipelineSchemaResponseBody = {
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  identifier?: string(name='Identifier'),
  manifest?: string(name='Manifest'),
  pipelineId?: string(name='PipelineId'),
  provider?: string(name='Provider'),
  requestId?: string(name='RequestId', description='Id of the request'),
  uuid?: string(name='Uuid'),
  version?: string(name='Version'),
  workspaceId?: string(name='WorkspaceId'),
}

model GetPipelineSchemaResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineSchemaResponseBody(name='body'),
}

async function getPipelineSchema(PipelineId: string): GetPipelineSchemaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPipelineSchemaWithOptions(PipelineId, headers, runtime);
}

async function getPipelineSchemaWithOptions(PipelineId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetPipelineSchemaResponse {
  PipelineId = OpenApiUtil.getEncodeParam(PipelineId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetPipelineSchema',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/pipelines/${PipelineId}/schema`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetRunRequest {
  manifestType?: string(name='ManifestType'),
  verbose?: boolean(name='Verbose', description='是否返回详细信息，目前详细信息包含： RuntimeManifest'),
}

model GetRunResponseBody = {
  arguments?: string(name='Arguments', description='run的参数'),
  duration?: long(name='Duration', description='run的运行时长，以s为单位'),
  experimentId?: string(name='ExperimentId', description='run关联的实验id'),
  finishedAt?: long(name='FinishedAt', description='run的结束 UTC 时间，格式 iso8601'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='修改时间'),
  manifest?: string(name='Manifest', description='run的manifest'),
  message?: string(name='Message', description='错误消息'),
  name?: string(name='Name', description='run的名字'),
  nodeId?: string(name='NodeId', description='run的根节点id'),
  options?: string(name='Options', description='选项'),
  parentUserId?: string(name='ParentUserId', description='用户主账户的uid'),
  pipelineId?: string(name='PipelineId', description='pipeline的id'),
  requestId?: string(name='RequestId', description='Id of the request'),
  runId?: string(name='RunId', description='run的id'),
  source?: string(name='Source', description='run的来源'),
  startedAt?: long(name='StartedAt', description='run的开始 UTC 时间，格式 iso8601'),
  status?: string(name='Status', description='run的状态'),
  userId?: string(name='UserId', description='用户uid'),
  workspaceId?: string(name='WorkspaceId', description='工作空间id'),
}

model GetRunResponse = {
  headers: map[string]string(name='headers'),
  body: GetRunResponseBody(name='body'),
}

async function getRun(RunId: string, request: GetRunRequest): GetRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getRunWithOptions(RunId, request, headers, runtime);
}

async function getRunWithOptions(RunId: string, request: GetRunRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetRunResponse {
  Util.validateModel(request);
  RunId = OpenApiUtil.getEncodeParam(RunId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.manifestType)) {
    query['ManifestType'] = request.manifestType;
  }
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRun',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/runs/${RunId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetRunStatisticsRequest {
  experimentId?: string(name='ExperimentId', description='实验的id'),
  isShowAll?: boolean(name='IsShowAll', description='是否统计主账户下所有子账户的数据'),
  name?: string(name='Name', description='run的名字'),
  pipelineId?: string(name='PipelineId', description='pipeline的id'),
  scope?: string(name='Scope', description='run的范围'),
  source?: string(name='Source', description='run的来源'),
  status?: [ string ](name='Status', description='run的状态'),
  workspaceId?: string(name='WorkspaceId', description='工作空间id 该字段仅对Scope为User有效，统计该用户在该工作空间下的数据'),
}

model GetRunStatisticsShrinkRequest {
  experimentId?: string(name='ExperimentId', description='实验的id'),
  isShowAll?: boolean(name='IsShowAll', description='是否统计主账户下所有子账户的数据'),
  name?: string(name='Name', description='run的名字'),
  pipelineId?: string(name='PipelineId', description='pipeline的id'),
  scope?: string(name='Scope', description='run的范围'),
  source?: string(name='Source', description='run的来源'),
  statusShrink?: string(name='Status', description='run的状态'),
  workspaceId?: string(name='WorkspaceId', description='工作空间id 该字段仅对Scope为User有效，统计该用户在该工作空间下的数据'),
}

model GetRunStatisticsResponseBody = {
  failed?: long(name='Failed', description='失败run的个数'),
  running?: long(name='Running', description='运行中run的个数'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetRunStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetRunStatisticsResponseBody(name='body'),
}

async function getRunStatistics(request: GetRunStatisticsRequest): GetRunStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getRunStatisticsWithOptions(request, headers, runtime);
}

async function getRunStatisticsWithOptions(tmpReq: GetRunStatisticsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetRunStatisticsResponse {
  Util.validateModel(tmpReq);
  var request = new GetRunStatisticsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.status)) {
    request.statusShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.status, 'Status', 'json');
  }
  var query : map[string]any= {};
  if (!Util.isUnset(request.experimentId)) {
    query['ExperimentId'] = request.experimentId;
  }
  if (!Util.isUnset(request.isShowAll)) {
    query['IsShowAll'] = request.isShowAll;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pipelineId)) {
    query['PipelineId'] = request.pipelineId;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.statusShrink)) {
    query['Status'] = request.statusShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRunStatistics',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/statistics/runs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListNodeLogsRequest {
  fromTimeInSeconds?: long(name='FromTimeInSeconds', description='开始时间'),
  keyword?: string(name='Keyword', description='搜索词'),
  offset?: int32(name='Offset', description='当前偏移量'),
  pageSize?: int32(name='PageSize', description='每页返回的log数目'),
  reverse?: boolean(name='Reverse', description='是否倒排'),
  toTimeInSeconds?: long(name='ToTimeInSeconds', description='结束时间'),
}

model ListNodeLogsResponseBody = {
  logs?: [ string ](name='Logs', description='日志列表'),
  requestId?: string(name='RequestId', description='请求 ID'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的作业数量'),
}

model ListNodeLogsResponse = {
  headers: map[string]string(name='headers'),
  body: ListNodeLogsResponseBody(name='body'),
}

async function listNodeLogs(RunId: string, NodeId: string, request: ListNodeLogsRequest): ListNodeLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listNodeLogsWithOptions(RunId, NodeId, request, headers, runtime);
}

async function listNodeLogsWithOptions(RunId: string, NodeId: string, request: ListNodeLogsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListNodeLogsResponse {
  Util.validateModel(request);
  RunId = OpenApiUtil.getEncodeParam(RunId);
  NodeId = OpenApiUtil.getEncodeParam(NodeId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.fromTimeInSeconds)) {
    query['FromTimeInSeconds'] = request.fromTimeInSeconds;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.offset)) {
    query['Offset'] = request.offset;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.reverse)) {
    query['Reverse'] = request.reverse;
  }
  if (!Util.isUnset(request.toTimeInSeconds)) {
    query['ToTimeInSeconds'] = request.toTimeInSeconds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListNodeLogs',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/runs/${RunId}/nodes/${NodeId}/logs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListNodeOutputsRequest {
  depth?: int32(name='Depth', description='节点往下拿多少层子节点'),
  name?: string(name='Name', description='节点名字'),
  order?: string(name='Order', description='排序顺序， 顺序：ASC，倒序：DESC'),
  pageNumber?: int32(name='PageNumber', description='当前页，页码从1开始'),
  pageSize?: int32(name='PageSize', description='每页返回的输出数目'),
  sortBy?: string(name='SortBy', description='排序字段'),
  type?: string(name='Type', description='artifact 类型'),
}

model ListNodeOutputsResponseBody = {
  outputs?: [ 
    {
      expandableArtifactName?: string(name='ExpandableArtifactName', description='可扩展artifact的名字'),
      expandedArtifactIndex?: long(name='ExpandedArtifactIndex', description='被扩展artifact的索引号，以0开始'),
      gmtCreateTime?: string(name='GmtCreateTime', description='创建时间'),
      id?: string(name='Id', description='id'),
      info?: map[string]any(name='Info', description='artifact内容'),
      name?: string(name='Name', description='名字'),
      nodeId?: string(name='NodeId', description='输出所属节点 id'),
      producer?: string(name='Producer', description='rtifact生产者'),
      type?: string(name='Type', description='类型'),
      value?: string(name='Value', description='输出内容'),
    }
  ](name='Outputs', description='输出列表'),
  requestId?: string(name='RequestId', description='请求ID'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的作业数量'),
}

model ListNodeOutputsResponse = {
  headers: map[string]string(name='headers'),
  body: ListNodeOutputsResponseBody(name='body'),
}

async function listNodeOutputs(RunId: string, NodeId: string, request: ListNodeOutputsRequest): ListNodeOutputsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listNodeOutputsWithOptions(RunId, NodeId, request, headers, runtime);
}

async function listNodeOutputsWithOptions(RunId: string, NodeId: string, request: ListNodeOutputsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListNodeOutputsResponse {
  Util.validateModel(request);
  RunId = OpenApiUtil.getEncodeParam(RunId);
  NodeId = OpenApiUtil.getEncodeParam(NodeId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.depth)) {
    query['Depth'] = request.depth;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListNodeOutputs',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/runs/${RunId}/nodes/${NodeId}/outputs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListNodeStatusRequest {
  depth?: long(name='Depth', description='深度'),
  type?: string(name='Type', description='类型'),
}

model ListNodeStatusResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  status?: [ 
    {
      finishedAt?: string(name='FinishedAt', description='节点结束运行时间'),
      nodeId?: string(name='NodeId', description='工作流中节点ID'),
      nodeName?: string(name='NodeName', description='工作流中节点名字'),
      runtimeInfo?: string(name='RuntimeInfo', description='节点运行时信息'),
      startedAt?: string(name='StartedAt', description='节点开始运行时间'),
      status?: string(name='Status', description='节点运行状态'),
    }
  ](name='Status', description='工作流任务的节点状态列表'),
}

model ListNodeStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ListNodeStatusResponseBody(name='body'),
}

async function listNodeStatus(RunId: string, NodeId: string, request: ListNodeStatusRequest): ListNodeStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listNodeStatusWithOptions(RunId, NodeId, request, headers, runtime);
}

async function listNodeStatusWithOptions(RunId: string, NodeId: string, request: ListNodeStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListNodeStatusResponse {
  Util.validateModel(request);
  RunId = OpenApiUtil.getEncodeParam(RunId);
  NodeId = OpenApiUtil.getEncodeParam(NodeId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.depth)) {
    query['Depth'] = request.depth;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListNodeStatus',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/runs/${RunId}/nodes/${NodeId}/status`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListPipelinePrivilegesResponseBody = {
  actions?: [ string ](name='Actions', description='[     "DescribeRun",     "PutRun",     "ListPipeline",     "GetPipeline"  ]'),
  pipelineId?: string(name='PipelineId'),
  requestId?: string(name='RequestId', description='Id of the request'),
  users?: [ string ](name='Users', description='[ "*" ]'),
}

model ListPipelinePrivilegesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPipelinePrivilegesResponseBody(name='body'),
}

async function listPipelinePrivileges(PipelineId: string): ListPipelinePrivilegesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPipelinePrivilegesWithOptions(PipelineId, headers, runtime);
}

async function listPipelinePrivilegesWithOptions(PipelineId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListPipelinePrivilegesResponse {
  PipelineId = OpenApiUtil.getEncodeParam(PipelineId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListPipelinePrivileges',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/pipelines/${PipelineId}/privileges`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListPipelinesRequest {
  fuzzyMatching?: boolean(name='FuzzyMatching', description='模糊匹配'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  pipelineIdentifier?: string(name='PipelineIdentifier'),
  pipelineProvider?: string(name='PipelineProvider'),
  pipelineVersion?: string(name='PipelineVersion'),
  workspaceId?: string(name='WorkspaceId'),
}

model ListPipelinesResponseBody = {
  pipelines?: [ 
    {
      gmtCreateTime?: string(name='GmtCreateTime'),
      gmtModifiedTime?: string(name='GmtModifiedTime'),
      identifier?: string(name='Identifier'),
      pipelineId?: string(name='PipelineId'),
      provider?: string(name='Provider'),
      uuid?: string(name='Uuid'),
      version?: string(name='Version'),
      workspaceId?: string(name='WorkspaceId'),
    }
  ](name='Pipelines'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: long(name='TotalCount'),
}

model ListPipelinesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPipelinesResponseBody(name='body'),
}

async function listPipelines(request: ListPipelinesRequest): ListPipelinesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPipelinesWithOptions(request, headers, runtime);
}

async function listPipelinesWithOptions(request: ListPipelinesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPipelinesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.fuzzyMatching)) {
    query['FuzzyMatching'] = request.fuzzyMatching;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pipelineIdentifier)) {
    query['PipelineIdentifier'] = request.pipelineIdentifier;
  }
  if (!Util.isUnset(request.pipelineProvider)) {
    query['PipelineProvider'] = request.pipelineProvider;
  }
  if (!Util.isUnset(request.pipelineVersion)) {
    query['PipelineVersion'] = request.pipelineVersion;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPipelines',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/pipelines`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListRunsRequest {
  experimentId?: string(name='ExperimentId'),
  name?: string(name='Name'),
  order?: string(name='Order'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  pipelineId?: string(name='PipelineId'),
  pipelineIds?: string(name='PipelineIds', description='Pipeline的id集合，只有Source为M6可以使用该参数'),
  runId?: string(name='RunId'),
  sortBy?: string(name='SortBy'),
  source?: string(name='Source'),
  status?: string(name='Status'),
  userId?: string(name='UserId', description='用户id'),
  workspaceId?: string(name='WorkspaceId'),
}

model ListRunsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  runs?: [ 
    {
      accessibility?: string(name='Accessibility', description='PUBLIC 公开；PRIVATE 私有'),
      duration?: long(name='Duration'),
      experimentId?: string(name='ExperimentId'),
      finishedAt?: long(name='FinishedAt'),
      gmtCreateTime?: string(name='GmtCreateTime', description='创建时间'),
      gmtModifiedTime?: string(name='GmtModifiedTime', description='修改时间'),
      message?: string(name='Message'),
      name?: string(name='Name'),
      nodeId?: string(name='NodeId'),
      parentUserId?: string(name='ParentUserId'),
      runId?: string(name='RunId'),
      source?: string(name='Source'),
      startedAt?: long(name='StartedAt'),
      status?: string(name='Status'),
      userId?: string(name='UserId'),
      workspaceId?: string(name='WorkspaceId'),
    }
  ](name='Runs'),
  totalCount?: long(name='TotalCount'),
}

model ListRunsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRunsResponseBody(name='body'),
}

async function listRuns(request: ListRunsRequest): ListRunsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listRunsWithOptions(request, headers, runtime);
}

async function listRunsWithOptions(request: ListRunsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRunsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.experimentId)) {
    query['ExperimentId'] = request.experimentId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pipelineId)) {
    query['PipelineId'] = request.pipelineId;
  }
  if (!Util.isUnset(request.pipelineIds)) {
    query['PipelineIds'] = request.pipelineIds;
  }
  if (!Util.isUnset(request.runId)) {
    query['RunId'] = request.runId;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRuns',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/runs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListRunsStatusRequest {
  nodes?: [ 
    {
      nodeId?: string(name='NodeId'),
      runId?: string(name='RunId'),
    }
  ](name='Nodes'),
  runs?: [ string ](name='Runs'),
  workspaceId?: string(name='WorkspaceId'),
}

model ListRunsStatusResponseBody = {
  nodes?: [ 
    {
      finishedAt?: string(name='FinishedAt', description='修改 UTC 时间，日期格式 iso8601'),
      inputArtifactArchived?: boolean(name='InputArtifactArchived', description='输入artifact是否已保存'),
      nodeId?: string(name='NodeId', description='节点Id'),
      nodeName?: string(name='NodeName', description='节点名'),
      outputArtifactArchived?: boolean(name='OutputArtifactArchived', description='输出artifact是否已保存'),
      runId?: string(name='RunId', description='运行Id'),
      startedAt?: string(name='StartedAt', description='修改 UTC 时间，日期格式 iso8601'),
      status?: string(name='Status', description='状态'),
    }
  ](name='Nodes'),
  requestId?: string(name='RequestId', description='Id of the request'),
  runs?: [ 
    {
      experimentId?: string(name='ExperimentId', description='实验id'),
      isDeleted?: boolean(name='IsDeleted', description='是否被删除'),
      name?: string(name='Name', description='run名字'),
      nodeId?: string(name='NodeId', description='节点id'),
      parentUserId?: string(name='ParentUserId', description='父账户id'),
      runId?: string(name='RunId', description='run的id'),
      status?: string(name='Status', description='run状态'),
      userId?: string(name='UserId', description='用户id'),
    }
  ](name='Runs'),
}

model ListRunsStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ListRunsStatusResponseBody(name='body'),
}

async function listRunsStatus(request: ListRunsStatusRequest): ListRunsStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listRunsStatusWithOptions(request, headers, runtime);
}

async function listRunsStatusWithOptions(request: ListRunsStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRunsStatusResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.nodes)) {
    body['Nodes'] = request.nodes;
  }
  if (!Util.isUnset(request.runs)) {
    body['Runs'] = request.runs;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListRunsStatus',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/runs`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model StartRunResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StartRunResponse = {
  headers: map[string]string(name='headers'),
  body: StartRunResponseBody(name='body'),
}

async function startRun(RunId: string): StartRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startRunWithOptions(RunId, headers, runtime);
}

async function startRunWithOptions(RunId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StartRunResponse {
  RunId = OpenApiUtil.getEncodeParam(RunId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StartRun',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/runs/${RunId}/start`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model TerminateRunResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model TerminateRunResponse = {
  headers: map[string]string(name='headers'),
  body: TerminateRunResponseBody(name='body'),
}

async function terminateRun(RunId: string): TerminateRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return terminateRunWithOptions(RunId, headers, runtime);
}

async function terminateRunWithOptions(RunId: string, headers: map[string]string, runtime: Util.RuntimeOptions): TerminateRunResponse {
  RunId = OpenApiUtil.getEncodeParam(RunId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'TerminateRun',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/runs/${RunId}/termination`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdatePipelineRequest {
  manifest?: string(name='Manifest'),
}

model UpdatePipelineResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdatePipelineResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePipelineResponseBody(name='body'),
}

async function updatePipeline(PipelineId: string, request: UpdatePipelineRequest): UpdatePipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updatePipelineWithOptions(PipelineId, request, headers, runtime);
}

async function updatePipelineWithOptions(PipelineId: string, request: UpdatePipelineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdatePipelineResponse {
  Util.validateModel(request);
  PipelineId = OpenApiUtil.getEncodeParam(PipelineId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.manifest)) {
    body['Manifest'] = request.manifest;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePipeline',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/pipelines/${PipelineId}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdatePipelinePrivilegesRequest {
  users?: [ string ](name='Users'),
}

model UpdatePipelinePrivilegesResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdatePipelinePrivilegesResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePipelinePrivilegesResponseBody(name='body'),
}

async function updatePipelinePrivileges(PipelineId: string, request: UpdatePipelinePrivilegesRequest): UpdatePipelinePrivilegesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updatePipelinePrivilegesWithOptions(PipelineId, request, headers, runtime);
}

async function updatePipelinePrivilegesWithOptions(PipelineId: string, request: UpdatePipelinePrivilegesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdatePipelinePrivilegesResponse {
  Util.validateModel(request);
  PipelineId = OpenApiUtil.getEncodeParam(PipelineId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.users)) {
    body['Users'] = request.users;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePipelinePrivileges',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/pipelines/${PipelineId}/privileges`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateRunRequest {
  name?: string(name='Name'),
}

model UpdateRunResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateRunResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRunResponseBody(name='body'),
}

async function updateRun(RunId: string, request: UpdateRunRequest): UpdateRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateRunWithOptions(RunId, request, headers, runtime);
}

async function updateRunWithOptions(RunId: string, request: UpdateRunRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateRunResponse {
  Util.validateModel(request);
  RunId = OpenApiUtil.getEncodeParam(RunId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRun',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/runs/${RunId}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

