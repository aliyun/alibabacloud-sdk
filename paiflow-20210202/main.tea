/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('paiflow', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model BriefPipelineRun {
  accessibility?: string(name='Accessibility', description='工作流任务的可见性。'),
  duration?: long(name='Duration', description='工作流任务的运行时长，单位为秒。'),
  finishedAt?: string(name='FinishedAt', description='工作流任务的结束UTC时间，格式iso8601。'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建UTC时间，格式iso8601。'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='最近修改UTC时间，格式iso8601。'),
  message?: string(name='Message', description='工作流任务失败提示信息。'),
  name?: string(name='Name', description='工作流任务名字。'),
  nodeId?: string(name='NodeId', description='工作流任务的根节点ID。'),
  parentUserId?: string(name='ParentUserId', description='用户主账户的ID。'),
  pipelineId?: string(name='PipelineId', description='工作流ID。'),
  pipelineRunId?: string(name='PipelineRunId', description='工作流任务ID。'),
  sourceId?: string(name='SourceId', description='工作流任务的来源ID。'),
  sourceType?: string(name='SourceType', description='工作流任务的来源类型。'),
  startedAt?: string(name='StartedAt', description='工作流任务的开始UTC时间，格式iso8601。'),
  status?: string(name='Status', description='需要过滤的工作流任务的状态，目前有如下几种状态：  Initialized Running Succeeded Failed Suspended Terminated Unknown Skipped Terminating'),
  userId?: string(name='UserId', description='创建用户ID。'),
  workspaceId?: string(name='WorkspaceId', description='所属工作空间ID。'),
}

model FullPipelineRun {
  accessibility?: string(name='Accessibility', description='工作流任务的可见性。'),
  arguments?: string(name='Arguments', description='工作流任务的参数。'),
  duration?: long(name='Duration', description='工作流任务的运行时长，单位为秒。'),
  finishedAt?: string(name='FinishedAt', description='工作流任务的结束UTC时间，格式iso8601。'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建UTC时间，格式iso8601。'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='最近修改UTC时间，格式iso8601。'),
  manifest?: string(name='Manifest', description='工作流任务的定义。'),
  message?: string(name='Message', description='工作流任务失败提示信息。'),
  name?: string(name='Name', description='工作流任务名字。'),
  nodeId?: string(name='NodeId', description='工作流任务的根节点ID。'),
  options?: string(name='Options', description='工作流任务选项，格式为JSON。'),
  parentUserId?: string(name='ParentUserId', description='用户主账户的ID。'),
  pipelineId?: string(name='PipelineId', description='工作流ID。'),
  pipelineRunId?: string(name='PipelineRunId', description='工作流任务ID。'),
  sourceId?: string(name='SourceId', description='工作流任务的来源ID。'),
  sourceType?: string(name='SourceType', description='工作流任务的来源类型。'),
  startedAt?: string(name='StartedAt', description='工作流任务的开始UTC时间，格式iso8601。'),
  status?: string(name='Status', description='需要过滤的工作流任务的状态，目前有如下几种状态：  Initialized Running Succeeded Failed Suspended Terminated Unknown Skipped Terminating'),
  userId?: string(name='UserId', description='创建用户ID。'),
  workspaceId?: string(name='WorkspaceId', description='所属工作空间ID。'),
}

model Node {
  apiVersion?: string(name='ApiVersion', description='工作流定义的版本。'),
  metadata?: {
    displayName?: string(name='DisplayName', description='节点的展示名称（可能会被修改）。'),
    identifier?: string(name='Identifier', description='节点所对应的工作流的标识名。'),
    name?: string(name='Name', description='节点的名字。'),
    nodeId?: string(name='NodeId', description='节点的ID。'),
    nodeType?: string(name='NodeType', description='节点的类型，包含有以下类型：  Task，具体运行的一个节点 ；Dag，复合类型节点，本质是一个由子节点组成的Dag图；Loop，循环节点'),
    provider?: string(name='Provider', description='节点所对应的工作流的提供方，通常情况下指代工作流的上传者（官方提供的工作流Provider为pai）。'),
    relatedNodeIds?: [ string ](name='RelatedNodeIds', description='Alink逻辑节点所对应的物理节点ID / Alink物理节点所对应的逻辑节点ID'),
    version?: string(name='Version', description='节点所对应的工作流的版本。'),
  }(name='Metadata', description='节点的元信息。'),
  spec?: {
    dependencies?: [ string ](name='Dependencies', description='节点与其他节点的依赖关系。'),
    hasPipelines?: boolean(name='HasPipelines', description='该节点是否含有子节点：  true：该节点为复合类型节点，如果需要进一步查询其子节点信息，需要传入更深的Depth参数。 false：该节点为实际运行的节点。'),
    inputs?: NodeIO(name='Inputs', description='节点的输入信息。'),
    outputs?: NodeIO(name='Outputs', description='节点的输出信息。'),
    parallelism?: long(name='Parallelism', description='节点的并行度。'),
    pipelines?: [
      Node
    ](name='Pipelines', description='子工作流列表。'),
    when?: string(name='When', description='节点的条件判断信息。'),
    withItems?: [ string ](name='WithItems', description='定义了一个数组，每一项会扩展为一个节点。'),
    withParam?: string(name='WithParam', description='定义了对一个参数的引用，参数值是一个数组，每一项会扩展为一个节点。'),
    withSequence?: {
      end?: long(name='End', description='结束数字'),
      format?: string(name='Format', description='展现格式'),
      start?: long(name='Start', description='起始数字'),
    }(name='WithSequence', description='定义了一个数字序列，序列每一项会扩展为一个节点。'),
  }(name='Spec', description='节点的执行体信息。'),
  statusInfo?: {
    conditions?: [ 
      {
        status?: string(name='Status', description='状态。'),
        type?: string(name='Type', description='类型。'),
      }
    ](name='Conditions', description='节点的运行状况。'),
    finishedAt?: string(name='FinishedAt', description='节点执行的结束时间。'),
    progress?: string(name='Progress', description='节点的运行进度。'),
    startedAt?: string(name='StartedAt', description='节点执行的开始时间。'),
    status?: string(name='Status', description='节点的运行状态：  Succeed：运行成功。 Running：运行中。 Failed：运行失败。 Skipped：跳过（前序节点失败导致）。 ReadyToSchedule：准备运行（前序节点未完成导致）。 Unknown：未知。'),
  }(name='StatusInfo', description='节点的执行状态信息。'),
}

model NodeIO {
  artifacts?: [  map[string]any ](name='Artifacts', description='节点的产物，例如输入、输出的数据等。'),
  parameters?: [  map[string]any ](name='Parameters', description='节点的参数列表。'),
}

model Pipeline {
  gmtCreateTime?: string(name='GmtCreateTime', description='创建UTC时间，日期格式iso8601。'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='修改UTC时间，日期格式iso8601。'),
  identifier?: string(name='Identifier', description='Pipeline标识。'),
  pipelineId?: string(name='PipelineId', description='Pipeline ID。'),
  provider?: string(name='Provider', description='用户自定义Pipeline时，为用户ID。 官方Pipeline为pai。'),
  uuid?: string(name='Uuid', description='Pipeline当前版本标识，用户每次更新，会生成该uuid。'),
  version?: string(name='Version', description='Pipeline版本。'),
  workspaceId?: string(name='WorkspaceId', description='AI工作空间ID。'),
}

model Run {
  accessibility?: string(name='Accessibility', description='实验可见度，目前有PUBLIC（公开）、PRIVATE（私有）。'),
  duration?: long(name='Duration', description='运行时长，单位为秒。'),
  experimentId?: string(name='ExperimentId', description='实验ID。'),
  finishedAt?: long(name='FinishedAt', description='Run运行完成时间。'),
  gmtCreateTime?: string(name='GmtCreateTime', description='Run的创建UTC时间，格式iso8601。'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='Run最近修改的UTC时间，格式iso8601。'),
  message?: string(name='Message', description='错误信息。'),
  name?: string(name='Name', description='Run的名称。'),
  nodeId?: string(name='NodeId', description='节点ID。'),
  parentUserId?: string(name='ParentUserId', description='Owner ID。'),
  runId?: string(name='RunId', description='Run ID。'),
  source?: string(name='Source', description='来源。'),
  startedAt?: long(name='StartedAt', description='Run运行开始时间。'),
  status?: string(name='Status', description='Run的状态，目前如下几种状态。  Initialized Running Succeeded Failed Suspended Terminated Unknown Skipped Terminating'),
  userId?: string(name='UserId', description='创建人ID。'),
  workspaceId?: string(name='WorkspaceId', description='所属工作空间ID。'),
}

model CreatePipelineRequest {
  manifest?: string(name='Manifest'),
  workspaceId?: string(name='WorkspaceId'),
}

model CreatePipelineResponseBody = {
  pipelineId?: string(name='PipelineId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreatePipelineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePipelineResponseBody(name='body'),
}

async function createPipeline(request: CreatePipelineRequest): CreatePipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createPipelineWithOptions(request, headers, runtime);
}

async function createPipelineWithOptions(request: CreatePipelineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreatePipelineResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.manifest)) {
    body['Manifest'] = request.manifest;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreatePipeline',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/pipelines`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreatePipelineRunRequest {
  accessibility?: string(name='Accessibility', description='PUBLIC 公开；PRIVATE 私有'),
  arguments?: string(name='Arguments', description='参数'),
  name?: string(name='Name', description='Run的名字，若为空，则自动生成名字'),
  noConfirmRequired?: boolean(name='NoConfirmRequired', description='true代表直接启动; false代表只创建run但先不启动'),
  options?: string(name='Options', description='选项，json格式'),
  pipelineId?: string(name='PipelineId', description='Pipeline的id; PipelineId和PipelineManifest 二选一'),
  pipelineManifest?: string(name='PipelineManifest', description='Pipeline内容; PipelineId和PipelineManifest 二选一一'),
  sourceId?: string(name='SourceId', description='实验id'),
  sourceType?: string(name='SourceType', description='来源，支持如下值：SDK; PAI_STUDIO; M6; UNKNOWN;'),
  workspaceId?: string(name='WorkspaceId', description='项目空间id'),
}

model CreatePipelineRunResponseBody = {
  pipelineRunId?: string(name='PipelineRunId', description='run的id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreatePipelineRunResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePipelineRunResponseBody(name='body'),
}

async function createPipelineRun(request: CreatePipelineRunRequest): CreatePipelineRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createPipelineRunWithOptions(request, headers, runtime);
}

async function createPipelineRunWithOptions(request: CreatePipelineRunRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreatePipelineRunResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accessibility)) {
    body['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.arguments)) {
    body['Arguments'] = request.arguments;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.noConfirmRequired)) {
    body['NoConfirmRequired'] = request.noConfirmRequired;
  }
  if (!Util.isUnset(request.options)) {
    body['Options'] = request.options;
  }
  if (!Util.isUnset(request.pipelineId)) {
    body['PipelineId'] = request.pipelineId;
  }
  if (!Util.isUnset(request.pipelineManifest)) {
    body['PipelineManifest'] = request.pipelineManifest;
  }
  if (!Util.isUnset(request.sourceId)) {
    body['SourceId'] = request.sourceId;
  }
  if (!Util.isUnset(request.sourceType)) {
    body['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreatePipelineRun',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/pipelineruns`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeletePipelineResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeletePipelineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePipelineResponseBody(name='body'),
}

async function deletePipeline(PipelineId: string): DeletePipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deletePipelineWithOptions(PipelineId, headers, runtime);
}

async function deletePipelineWithOptions(PipelineId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeletePipelineResponse {
  PipelineId = OpenApiUtil.getEncodeParam(PipelineId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeletePipeline',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/pipelines/${PipelineId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeletePipelineRunResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeletePipelineRunResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePipelineRunResponseBody(name='body'),
}

async function deletePipelineRun(PipelineRunId: string): DeletePipelineRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deletePipelineRunWithOptions(PipelineRunId, headers, runtime);
}

async function deletePipelineRunWithOptions(PipelineRunId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeletePipelineRunResponse {
  PipelineRunId = OpenApiUtil.getEncodeParam(PipelineRunId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeletePipelineRun',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/pipelineruns/${PipelineRunId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetPipelineResponseBody = {
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  identifier?: string(name='Identifier'),
  manifest?: string(name='Manifest'),
  pipelineId?: string(name='PipelineId'),
  provider?: string(name='Provider'),
  requestId?: string(name='RequestId', description='Id of the request'),
  uuid?: string(name='Uuid'),
  version?: string(name='Version'),
  workspaceId?: string(name='WorkspaceId'),
}

model GetPipelineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPipelineResponseBody(name='body'),
}

async function getPipeline(PipelineId: string): GetPipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPipelineWithOptions(PipelineId, headers, runtime);
}

async function getPipelineWithOptions(PipelineId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetPipelineResponse {
  PipelineId = OpenApiUtil.getEncodeParam(PipelineId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetPipeline',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/pipelines/${PipelineId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetPipelineRunRequest {
  manifestType?: string(name='ManifestType'),
  verbose?: boolean(name='Verbose', description='是否返回详细信息，目前详细信息包含： RuntimeManifest'),
}

model GetPipelineRunResponseBody = {
  accessibility?: string(name='Accessibility'),
  arguments?: string(name='Arguments'),
  duration?: long(name='Duration'),
  finishedAt?: string(name='FinishedAt'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  manifest?: string(name='Manifest'),
  message?: string(name='Message'),
  name?: string(name='Name'),
  nodeId?: string(name='NodeId'),
  options?: string(name='Options'),
  parentUserId?: string(name='ParentUserId'),
  pipelineId?: string(name='PipelineId'),
  pipelineRunId?: string(name='PipelineRunId'),
  requestId?: string(name='RequestId'),
  sourceId?: string(name='SourceId'),
  sourceType?: string(name='SourceType'),
  startedAt?: string(name='StartedAt'),
  status?: string(name='Status'),
  userId?: string(name='UserId'),
  workspaceId?: string(name='WorkspaceId'),
}

model GetPipelineRunResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPipelineRunResponseBody(name='body'),
}

async function getPipelineRun(PipelineRunId: string, request: GetPipelineRunRequest): GetPipelineRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPipelineRunWithOptions(PipelineRunId, request, headers, runtime);
}

async function getPipelineRunWithOptions(PipelineRunId: string, request: GetPipelineRunRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPipelineRunResponse {
  Util.validateModel(request);
  PipelineRunId = OpenApiUtil.getEncodeParam(PipelineRunId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.manifestType)) {
    query['ManifestType'] = request.manifestType;
  }
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPipelineRun',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/pipelineruns/${PipelineRunId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetPipelineRunNodeRequest {
  depth?: int32(name='Depth', description='查询深度'),
  type?: string(name='Type'),
}

model GetPipelineRunNodeResponseBody = {
  apiVersion?: string(name='ApiVersion', description='api 版本'),
  metadata?: {
    displayName?: string(name='DisplayName', description='展示名称'),
    identifier?: string(name='Identifier', description='标识符'),
    name?: string(name='Name', description='名字'),
    nodeId?: string(name='NodeId', description='节点 id'),
    nodeType?: string(name='NodeType', description='节点类型'),
    provider?: string(name='Provider', description='提供方'),
    relatedNodeIds?: [ string ](name='RelatedNodeIds', description='Alink逻辑节点所对应的物理节点ID / Alink物理节点所对应的逻辑节点ID'),
    version?: string(name='Version', description='版本'),
  }(name='Metadata', description='node 的元信息'),
  requestId?: string(name='RequestId', description='请求 id'),
  spec?: {
    dependencies?: [ string ](name='Dependencies', description='依赖'),
    hasPipelines?: boolean(name='HasPipelines', description='是否有子 pipeline'),
    inputs?: {
      artifacts?: [  map[string]any ](name='Artifacts'),
      parameters?: [  map[string]any ](name='Parameters'),
    }(name='Inputs'),
    outputs?: {
      artifacts?: [  map[string]any ](name='Artifacts'),
      parameters?: [  map[string]any ](name='Parameters'),
    }(name='Outputs'),
    parallelism?: int32(name='Parallelism'),
    pipelines?: [  map[string]any ](name='Pipelines', description='子 pipeline 列表'),
    when?: string(name='When'),
    withItems?: [ string ](name='WithItems'),
    withParam?: string(name='WithParam'),
    withSequence?: {
      end?: int32(name='End'),
      format?: string(name='Format'),
      start?: int32(name='Start'),
    }(name='WithSequence'),
  }(name='Spec', description='算法体'),
  statusInfo?: {
    conditions?: [  map[string]any ](name='Conditions'),
    finishedAt?: string(name='FinishedAt', description='结束时间'),
    progress?: string(name='Progress'),
    startedAt?: string(name='StartedAt', description='开始时间'),
    status?: string(name='Status', description='状态'),
  }(name='StatusInfo', description='node 运行状态'),
}

model GetPipelineRunNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPipelineRunNodeResponseBody(name='body'),
}

async function getPipelineRunNode(PipelineRunId: string, NodeId: string, request: GetPipelineRunNodeRequest): GetPipelineRunNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPipelineRunNodeWithOptions(PipelineRunId, NodeId, request, headers, runtime);
}

async function getPipelineRunNodeWithOptions(PipelineRunId: string, NodeId: string, request: GetPipelineRunNodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPipelineRunNodeResponse {
  Util.validateModel(request);
  PipelineRunId = OpenApiUtil.getEncodeParam(PipelineRunId);
  NodeId = OpenApiUtil.getEncodeParam(NodeId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.depth)) {
    query['Depth'] = request.depth;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPipelineRunNode',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/pipelineruns/${PipelineRunId}/nodes/${NodeId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListPipelineRunNodeLogsRequest {
  fromTimeInSeconds?: long(name='FromTimeInSeconds', description='开始时间'),
  keyword?: string(name='Keyword', description='搜索词'),
  offset?: int32(name='Offset', description='当前偏移量'),
  pageSize?: int32(name='PageSize', description='每页返回的log数目'),
  reverse?: boolean(name='Reverse', description='是否倒排'),
  toTimeInSeconds?: long(name='ToTimeInSeconds', description='结束时间'),
}

model ListPipelineRunNodeLogsResponseBody = {
  logs?: [ string ](name='Logs', description='日志列表'),
  requestId?: string(name='RequestId', description='请求 ID'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的作业数量'),
}

model ListPipelineRunNodeLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPipelineRunNodeLogsResponseBody(name='body'),
}

async function listPipelineRunNodeLogs(PipelineRunId: string, NodeId: string, request: ListPipelineRunNodeLogsRequest): ListPipelineRunNodeLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPipelineRunNodeLogsWithOptions(PipelineRunId, NodeId, request, headers, runtime);
}

async function listPipelineRunNodeLogsWithOptions(PipelineRunId: string, NodeId: string, request: ListPipelineRunNodeLogsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPipelineRunNodeLogsResponse {
  Util.validateModel(request);
  PipelineRunId = OpenApiUtil.getEncodeParam(PipelineRunId);
  NodeId = OpenApiUtil.getEncodeParam(NodeId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.fromTimeInSeconds)) {
    query['FromTimeInSeconds'] = request.fromTimeInSeconds;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.offset)) {
    query['Offset'] = request.offset;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.reverse)) {
    query['Reverse'] = request.reverse;
  }
  if (!Util.isUnset(request.toTimeInSeconds)) {
    query['ToTimeInSeconds'] = request.toTimeInSeconds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPipelineRunNodeLogs',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/pipelineruns/${PipelineRunId}/nodes/${NodeId}/logs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListPipelineRunNodeOutputsRequest {
  depth?: int32(name='Depth', description='节点往下拿多少层子节点'),
  name?: string(name='Name', description='节点名字'),
  order?: string(name='Order', description='排序顺序， 顺序：ASC，倒序：DESC'),
  pageNumber?: int32(name='PageNumber', description='当前页，页码从1开始'),
  pageSize?: int32(name='PageSize', description='每页返回的输出数目'),
  sortBy?: string(name='SortBy', description='排序字段'),
  type?: string(name='Type', description='artifact 类型'),
}

model ListPipelineRunNodeOutputsResponseBody = {
  outputs?: [ 
    {
      expandableArtifactName?: string(name='ExpandableArtifactName', description='可扩展artifact的名字'),
      expandedArtifactIndex?: long(name='ExpandedArtifactIndex', description='被扩展artifact的索引号，以0开始'),
      gmtCreateTime?: string(name='GmtCreateTime', description='创建时间'),
      id?: string(name='Id', description='id'),
      info?: map[string]any(name='Info', description='artifact内容'),
      name?: string(name='Name', description='名字'),
      nodeId?: string(name='NodeId', description='输出所属节点 id'),
      producer?: string(name='Producer', description='rtifact生产者'),
      type?: string(name='Type', description='类型'),
    }
  ](name='Outputs', description='输出列表'),
  requestId?: string(name='RequestId', description='请求ID'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的作业数量'),
}

model ListPipelineRunNodeOutputsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPipelineRunNodeOutputsResponseBody(name='body'),
}

async function listPipelineRunNodeOutputs(PipelineRunId: string, NodeId: string, request: ListPipelineRunNodeOutputsRequest): ListPipelineRunNodeOutputsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPipelineRunNodeOutputsWithOptions(PipelineRunId, NodeId, request, headers, runtime);
}

async function listPipelineRunNodeOutputsWithOptions(PipelineRunId: string, NodeId: string, request: ListPipelineRunNodeOutputsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPipelineRunNodeOutputsResponse {
  Util.validateModel(request);
  PipelineRunId = OpenApiUtil.getEncodeParam(PipelineRunId);
  NodeId = OpenApiUtil.getEncodeParam(NodeId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.depth)) {
    query['Depth'] = request.depth;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPipelineRunNodeOutputs',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/pipelineruns/${PipelineRunId}/nodes/${NodeId}/outputs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListPipelineRunNodeStatusRequest {
  depth?: long(name='Depth', description='深度'),
  type?: string(name='Type', description='类型'),
}

model ListPipelineRunNodeStatusResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  status?: [ 
    {
      finishedAt?: string(name='FinishedAt', description='节点结束运行时间'),
      nodeId?: string(name='NodeId', description='工作流中节点ID'),
      nodeName?: string(name='NodeName', description='工作流中节点名字'),
      runtimeInfo?: string(name='RuntimeInfo', description='节点运行时信息'),
      startedAt?: string(name='StartedAt', description='节点开始运行时间'),
      status?: string(name='Status', description='节点运行状态'),
    }
  ](name='Status', description='工作流任务的节点状态列表'),
}

model ListPipelineRunNodeStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPipelineRunNodeStatusResponseBody(name='body'),
}

async function listPipelineRunNodeStatus(PipelineRunId: string, NodeId: string, request: ListPipelineRunNodeStatusRequest): ListPipelineRunNodeStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPipelineRunNodeStatusWithOptions(PipelineRunId, NodeId, request, headers, runtime);
}

async function listPipelineRunNodeStatusWithOptions(PipelineRunId: string, NodeId: string, request: ListPipelineRunNodeStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPipelineRunNodeStatusResponse {
  Util.validateModel(request);
  PipelineRunId = OpenApiUtil.getEncodeParam(PipelineRunId);
  NodeId = OpenApiUtil.getEncodeParam(NodeId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.depth)) {
    query['Depth'] = request.depth;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPipelineRunNodeStatus',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/pipelineruns/${PipelineRunId}/nodes/${NodeId}/status`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListPipelineRunsRequest {
  name?: string(name='Name'),
  order?: string(name='Order'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  pipelineIds?: string(name='PipelineIds', description='Pipeline的id集合，只有Source为M6可以使用该参数'),
  sortBy?: string(name='SortBy'),
  sourceId?: string(name='SourceId'),
  sourceType?: string(name='SourceType'),
  status?: string(name='Status'),
  userId?: string(name='UserId', description='用户id'),
  workspaceId?: string(name='WorkspaceId'),
}

model ListPipelineRunsResponseBody = {
  pipelineRuns?: [ 
    {
      accessibility?: string(name='Accessibility'),
      duration?: int32(name='Duration'),
      finishedAt?: string(name='FinishedAt'),
      gmtCreateTime?: string(name='GmtCreateTime'),
      gmtModifiedTime?: string(name='GmtModifiedTime'),
      message?: string(name='Message'),
      name?: string(name='Name'),
      nodeId?: string(name='NodeId'),
      parentUserId?: string(name='ParentUserId'),
      pipelineId?: string(name='PipelineId'),
      pipelineRunId?: string(name='PipelineRunId'),
      sourceId?: string(name='SourceId'),
      sourceType?: string(name='SourceType'),
      startedAt?: string(name='StartedAt'),
      status?: string(name='Status'),
      userId?: string(name='UserId'),
      workspaceId?: string(name='WorkspaceId'),
    }
  ](name='PipelineRuns'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: long(name='TotalCount'),
}

model ListPipelineRunsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPipelineRunsResponseBody(name='body'),
}

async function listPipelineRuns(request: ListPipelineRunsRequest): ListPipelineRunsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPipelineRunsWithOptions(request, headers, runtime);
}

async function listPipelineRunsWithOptions(request: ListPipelineRunsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPipelineRunsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pipelineIds)) {
    query['PipelineIds'] = request.pipelineIds;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.sourceId)) {
    query['SourceId'] = request.sourceId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPipelineRuns',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/pipelineruns`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListPipelineRunsStatusRequest {
  nodes?: [ 
    {
      nodeId?: string(name='NodeId'),
      pipelineRunId?: string(name='PipelineRunId'),
    }
  ](name='Nodes'),
  pipelineRuns?: [ string ](name='PipelineRuns'),
  workspaceId?: string(name='WorkspaceId'),
}

model ListPipelineRunsStatusResponseBody = {
  nodes?: [ 
    {
      finishedAt?: string(name='FinishedAt', description='修改 UTC 时间，日期格式 iso8601'),
      inputArtifactArchived?: boolean(name='InputArtifactArchived', description='输入artifact是否已保存'),
      nodeId?: string(name='NodeId', description='节点Id'),
      nodeName?: string(name='NodeName', description='节点名'),
      outputArtifactArchived?: boolean(name='OutputArtifactArchived', description='输出artifact是否已保存'),
      pipelineRunId?: string(name='PipelineRunId', description='运行Id'),
      startedAt?: string(name='StartedAt', description='修改 UTC 时间，日期格式 iso8601'),
      status?: string(name='Status', description='状态'),
    }
  ](name='Nodes'),
  pipelineRuns?: [ 
    {
      isDeleted?: boolean(name='IsDeleted', description='是否被删除'),
      name?: string(name='Name', description='run名字'),
      nodeId?: string(name='NodeId', description='节点id'),
      parentUserId?: string(name='ParentUserId', description='父账户id'),
      pipelineRunId?: string(name='PipelineRunId', description='run的id'),
      sourceId?: string(name='SourceId', description='实验id'),
      status?: string(name='Status', description='run状态'),
      userId?: string(name='UserId', description='用户id'),
    }
  ](name='PipelineRuns'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ListPipelineRunsStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPipelineRunsStatusResponseBody(name='body'),
}

async function listPipelineRunsStatus(request: ListPipelineRunsStatusRequest): ListPipelineRunsStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPipelineRunsStatusWithOptions(request, headers, runtime);
}

async function listPipelineRunsStatusWithOptions(request: ListPipelineRunsStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPipelineRunsStatusResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.nodes)) {
    body['Nodes'] = request.nodes;
  }
  if (!Util.isUnset(request.pipelineRuns)) {
    body['PipelineRuns'] = request.pipelineRuns;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListPipelineRunsStatus',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/pipelineruns`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListPipelinesRequest {
  fuzzyMatching?: boolean(name='FuzzyMatching', description='模糊匹配'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  pipelineIdentifier?: string(name='PipelineIdentifier'),
  pipelineProvider?: string(name='PipelineProvider'),
  pipelineVersion?: string(name='PipelineVersion'),
  workspaceId?: string(name='WorkspaceId'),
}

model ListPipelinesResponseBody = {
  pipelines?: [ 
    {
      gmtCreateTime?: string(name='GmtCreateTime'),
      gmtModifiedTime?: string(name='GmtModifiedTime'),
      identifier?: string(name='Identifier'),
      pipelineId?: string(name='PipelineId'),
      provider?: string(name='Provider'),
      uuid?: string(name='Uuid'),
      version?: string(name='Version'),
      workspaceId?: string(name='WorkspaceId'),
    }
  ](name='Pipelines'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: long(name='TotalCount'),
}

model ListPipelinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPipelinesResponseBody(name='body'),
}

async function listPipelines(request: ListPipelinesRequest): ListPipelinesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPipelinesWithOptions(request, headers, runtime);
}

async function listPipelinesWithOptions(request: ListPipelinesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPipelinesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.fuzzyMatching)) {
    query['FuzzyMatching'] = request.fuzzyMatching;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pipelineIdentifier)) {
    query['PipelineIdentifier'] = request.pipelineIdentifier;
  }
  if (!Util.isUnset(request.pipelineProvider)) {
    query['PipelineProvider'] = request.pipelineProvider;
  }
  if (!Util.isUnset(request.pipelineVersion)) {
    query['PipelineVersion'] = request.pipelineVersion;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPipelines',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/pipelines`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model StartPipelineRunResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StartPipelineRunResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartPipelineRunResponseBody(name='body'),
}

async function startPipelineRun(PipelineRunId: string): StartPipelineRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startPipelineRunWithOptions(PipelineRunId, headers, runtime);
}

async function startPipelineRunWithOptions(PipelineRunId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StartPipelineRunResponse {
  PipelineRunId = OpenApiUtil.getEncodeParam(PipelineRunId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StartPipelineRun',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/pipelineruns/${PipelineRunId}/start`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model TerminatePipelineRunResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model TerminatePipelineRunResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TerminatePipelineRunResponseBody(name='body'),
}

async function terminatePipelineRun(PipelineRunId: string): TerminatePipelineRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return terminatePipelineRunWithOptions(PipelineRunId, headers, runtime);
}

async function terminatePipelineRunWithOptions(PipelineRunId: string, headers: map[string]string, runtime: Util.RuntimeOptions): TerminatePipelineRunResponse {
  PipelineRunId = OpenApiUtil.getEncodeParam(PipelineRunId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'TerminatePipelineRun',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/pipelineruns/${PipelineRunId}/termination`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdatePipelineRequest {
  manifest?: string(name='Manifest'),
}

model UpdatePipelineResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdatePipelineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdatePipelineResponseBody(name='body'),
}

async function updatePipeline(PipelineId: string, request: UpdatePipelineRequest): UpdatePipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updatePipelineWithOptions(PipelineId, request, headers, runtime);
}

async function updatePipelineWithOptions(PipelineId: string, request: UpdatePipelineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdatePipelineResponse {
  Util.validateModel(request);
  PipelineId = OpenApiUtil.getEncodeParam(PipelineId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.manifest)) {
    body['Manifest'] = request.manifest;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePipeline',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/pipelines/${PipelineId}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdatePipelineRunRequest {
  name?: string(name='Name'),
}

model UpdatePipelineRunResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdatePipelineRunResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdatePipelineRunResponseBody(name='body'),
}

async function updatePipelineRun(PipelineRunId: string, request: UpdatePipelineRunRequest): UpdatePipelineRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updatePipelineRunWithOptions(PipelineRunId, request, headers, runtime);
}

async function updatePipelineRunWithOptions(PipelineRunId: string, request: UpdatePipelineRunRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdatePipelineRunResponse {
  Util.validateModel(request);
  PipelineRunId = OpenApiUtil.getEncodeParam(PipelineRunId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePipelineRun',
    version = '2021-02-02',
    protocol = 'HTTPS',
    pathname = `/api/v1/pipelineruns/${PipelineRunId}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

