/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'PAIFlow';
  @version = '2021-02-02';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model BriefPipelineRun {
  accessibility?: string(name='Accessibility', example='PUBLIC'),
  duration?: long(name='Duration', example='394'),
  finishedAt?: string(name='FinishedAt', example='2021-01-30T12:51:33.028Z'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-30T12:51:33.028Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-30T12:51:33.028Z'),
  message?: string(name='Message', example='error message'),
  name?: string(name='Name', example='testName'),
  nodeId?: string(name='NodeId', example='node-n06d**********fc53'),
  parentUserId?: string(name='ParentUserId', example='155**********904'),
  pipelineId?: string(name='PipelineId', example='pipeline-j94y**********lf7a'),
  pipelineRunId?: string(name='PipelineRunId', example='flow-j94y**********lf7a'),
  sourceId?: string(name='SourceId', example='exp-abcd*********hxfu'),
  sourceType?: string(name='SourceType', example='SDK'),
  startedAt?: string(name='StartedAt', example='2021-01-30T12:51:33.028Z'),
  status?: string(name='Status', example='Succeeded'),
  userId?: string(name='UserId', example='155**********904'),
  workspaceId?: string(name='WorkspaceId', example='1***60'),
}

model FullPipelineRun {
  accessibility?: string(name='Accessibility', example='PUBLIC'),
  arguments?: string(name='Arguments', example='{"arguments":{"parameters":[{"name":"execution","value":{"endpoint":"******","odpsProject":"******"}}]}}'),
  duration?: long(name='Duration', example='394'),
  finishedAt?: string(name='FinishedAt', example='2021-01-30T12:51:33.028Z'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-30T12:51:33.028Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-30T12:51:33.028Z'),
  manifest?: string(name='Manifest', example='{"ApiVersion":"core/v1","Metadata":{"NodeId":"node-n06d**********fc53","Provider":"155**********904","Name":"flow-j94y**********lf7a","Version":"v1","Identifier":"9fe11111-****-****-****-****ec811861","Namespace":null,"DisplayName":"name","NodeType":"Dag"},"Spec":{}}'),
  message?: string(name='Message', example='error message'),
  name?: string(name='Name', example='testName'),
  nodeId?: string(name='NodeId', example='node-n06d**********fc53'),
  options?: string(name='Options', example='{"mlflow":{"experimentId":"exp-**********"}}'),
  parentUserId?: string(name='ParentUserId', example='155**********904'),
  pipelineId?: string(name='PipelineId', example='pipeline-j94y**********lf7a'),
  pipelineRunId?: string(name='PipelineRunId', example='flow-j94y**********lf7a'),
  sourceId?: string(name='SourceId', example='exp-abcd*********hxfu'),
  sourceType?: string(name='SourceType', example='SDK'),
  startedAt?: string(name='StartedAt', example='2021-01-30T12:51:33.028Z'),
  status?: string(name='Status', example='Succeeded'),
  userId?: string(name='UserId', example='155**********904'),
  workspaceId?: string(name='WorkspaceId', example='1***60'),
}

model Node {
  apiVersion?: string(name='ApiVersion', example='core/v1'),
  metadata?: {
    displayName?: string(name='DisplayName', example='test'),
    identifier?: string(name='Identifier', example='composite-pipeline'),
    name?: string(name='Name', example='test'),
    nodeId?: string(name='NodeId', example='node-wcs9z********27ps3'),
    nodeType?: string(name='NodeType', example='Dag'),
    provider?: string(name='Provider', example='15577********904'),
    relatedNodeIds?: [ string ](name='RelatedNodeIds'),
    version?: string(name='Version', example='v1'),
  }(name='Metadata'),
  spec?: {
    dependencies?: [ string ](name='Dependencies'),
    hasPipelines?: boolean(name='HasPipelines', example='true'),
    inputs?: NodeIO(name='Inputs'),
    outputs?: NodeIO(name='Outputs'),
    parallelism?: long(name='Parallelism', example='8'),
    pipelines?: [
      Node
    ](name='Pipelines'),
    when?: string(name='When', example='{{inputs.parameters.parentInput}} == 12'),
    withItems?: [ string ](name='WithItems'),
    withParam?: string(name='WithParam', example='{{pipelines.step1.outputs.parameters.outputparam}}'),
    withSequence?: {
      end?: long(name='End', example='5'),
      format?: string(name='Format', example='test%02X'),
      start?: long(name='Start', example='1'),
    }(name='WithSequence'),
  }(name='Spec'),
  statusInfo?: {
    conditions?: [ 
      {
        status?: string(name='Status', example='True'),
        type?: string(name='Type', example='Completed'),
      }
    ](name='Conditions'),
    finishedAt?: string(name='FinishedAt', example='2021-10-15T10:40:54.000Z'),
    progress?: string(name='Progress', example='9/9'),
    startedAt?: string(name='StartedAt', example='2021-10-15T10:39:58.000Z'),
    status?: string(name='Status', example='Succeeded'),
  }(name='StatusInfo'),
}

model NodeIO {
  artifacts?: [  map[string]any ](name='Artifacts'),
  parameters?: [  map[string]any ](name='Parameters'),
}

model Pipeline {
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35.232Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35.232Z'),
  identifier?: string(name='Identifier', example='SqlWrite'),
  pipelineId?: string(name='PipelineId', example='pipeline-hynm2bv8**********'),
  provider?: string(name='Provider', example='132668**********'),
  uuid?: string(name='Uuid', example='q8dp9hkl**********'),
  version?: string(name='Version', example='v1'),
  workspaceId?: string(name='WorkspaceId', example='72***'),
}

model Run {
  accessibility?: string(name='Accessibility', example='PUBLIC'),
  duration?: long(name='Duration', example='100'),
  experimentId?: string(name='ExperimentId', example='experiment-ybpy***'),
  finishedAt?: long(name='FinishedAt', example='1638430932100'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-30T12:51:33.028Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-30T12:51:33.028Z'),
  message?: string(name='Message', example='error message'),
  name?: string(name='Name', example='MyName'),
  nodeId?: string(name='NodeId', example='node-sdk**********uhrf'),
  parentUserId?: string(name='ParentUserId', example='155**********904'),
  runId?: string(name='RunId', example='flow-r2b034bh**********'),
  source?: string(name='Source', example='PaiStudio'),
  startedAt?: long(name='StartedAt', example='1638430932001'),
  status?: string(name='Status', example='Running'),
  userId?: string(name='UserId', example='155**********904'),
  workspaceId?: string(name='WorkspaceId', example='78***'),
}

model CreatePipelineRequest {
  manifest: string(name='Manifest', example='apiVersion: "core/v1"*********', position='Body'),
  workspaceId: string(name='WorkspaceId', example='72***', position='Body'),
}

model CreatePipelineResponseBody = {
  pipelineId?: string(name='PipelineId', example='pipeline-hynm2bv8**********'),
  requestId?: string(name='RequestId', example='DA869D1B-035A-43B2-ACC1-C56681******'),
}

model CreatePipelineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePipelineResponseBody(name='body'),
}

async function createPipeline(request: CreatePipelineRequest): CreatePipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePipeline', 'POST', '/api/v1/pipelines', 'json', false, 'json', request);
}

model CreatePipelineRunRequest {
  accessibility?: string(name='Accessibility', example='PUBLIC', position='Body'),
  arguments?: string(name='Arguments', example='arguments:   parameters:   - name: "execution_maxcompute"     value:       endpoint: "http://service***"       odpsProject: "pai***"', position='Body'),
  name?: string(name='Name', example='testName', position='Body'),
  noConfirmRequired?: boolean(name='NoConfirmRequired', example='true', position='Body'),
  options?: string(name='Options', example='{"mlflow":{"experimentId":"exp-1jdk***"}}', position='Body'),
  pipelineId?: string(name='PipelineId', example='flow-rer7y***', position='Body'),
  pipelineManifest?: string(name='PipelineManifest', example='apiVersion: "core/v1"*********', position='Body'),
  sourceId?: string(name='SourceId', example='experiment-ybpy***', position='Body'),
  sourceType?: string(name='SourceType', example='UNKNOWN', position='Body'),
  workspaceId: string(name='WorkspaceId', example='84***', position='Body'),
}

model CreatePipelineRunResponseBody = {
  pipelineRunId?: string(name='PipelineRunId', example='flow-rbvg***'),
  requestId?: string(name='RequestId', example='DA869D1B-035A-43B2-ACC1-C56681BD9FAA'),
}

model CreatePipelineRunResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePipelineRunResponseBody(name='body'),
}

async function createPipelineRun(request: CreatePipelineRunRequest): CreatePipelineRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePipelineRun', 'POST', '/api/v1/pipelineruns', 'json', false, 'json', request);
}

model DeletePipelineRequest {
  pipelineId: string(name='PipelineId', example='pipeline-hynm2bv8wqhp5e****', position='Path'),
}

model DeletePipelineResponseBody = {
  requestId?: string(name='RequestId', example='DA869D1B-035A-43B2-ACC1-C56681BD9FAA'),
}

model DeletePipelineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePipelineResponseBody(name='body'),
}

async function deletePipeline(request: DeletePipelineRequest): DeletePipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeletePipeline', 'DELETE', '/api/v1/pipelines/{PipelineId}', 'json', false, 'json', request);
}

model DeletePipelineRunRequest {
  pipelineRunId: string(name='PipelineRunId', example='flow-hynm2bv8wqhp5esfxq', position='Path'),
}

model DeletePipelineRunResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-****-****-****-A3DC0DE3C83E'),
}

model DeletePipelineRunResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePipelineRunResponseBody(name='body'),
}

async function deletePipelineRun(request: DeletePipelineRunRequest): DeletePipelineRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeletePipelineRun', 'DELETE', '/api/v1/pipelineruns/{PipelineRunId}', 'json', false, 'json', request);
}

model GetPipelineRequest {
  pipelineId: string(name='PipelineId', example='pipeline-hynm2bv8wqhp5e****', position='Path'),
}

model GetPipelineResponseBody = {
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35.232Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35.232Z'),
  identifier?: string(name='Identifier', example='SqlWrite'),
  manifest?: string(name='Manifest', example='apiVersion: ****'),
  pipelineId?: string(name='PipelineId', example='pipeline-hynm2bv8wqhp5e****'),
  provider?: string(name='Provider', example='132668941337****'),
  requestId?: string(name='RequestId', example='63EDFF2F-4D51-46F0-9D65-2F8F393B****'),
  uuid?: string(name='Uuid', example='q8dp9hklueznhg****'),
  version?: string(name='Version', example='v1'),
  workspaceId?: string(name='WorkspaceId', example='726**'),
}

model GetPipelineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPipelineResponseBody(name='body'),
}

async function getPipeline(request: GetPipelineRequest): GetPipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPipeline', 'GET', '/api/v1/pipelines/{PipelineId}', 'json', false, 'json', request);
}

model GetPipelineRunRequest {
  pipelineRunId: string(name='PipelineRunId', example='run-rbvg**********ks92', position='Path'),
  manifestType?: string(name='ManifestType', example='Raw', position='Query'),
  tokenId?: string(name='TokenId', position='Query'),
  verbose?: boolean(name='Verbose', example='false', position='Query'),
}

model GetPipelineRunResponseBody = {
  accessibility?: string(name='Accessibility', example='PUBLIC'),
  arguments?: string(name='Arguments', example='{"arguments":{"parameters":[{"name":"execution","value":{"endpoint":"http://service.******","odpsProject":"******","spec":{"endpoint":"http://service.******","odpsProject":"*****"},"resourceType":"MaxCompute"}}]}}'),
  duration?: long(name='Duration', example='60'),
  finishedAt?: string(name='FinishedAt', example='2021-01-30T12:52:33.028Z'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-30T12:51:33.028Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-30T12:51:33.028Z'),
  manifest?: string(name='Manifest', example='{"ApiVersion":"core/v1","Metadata":{"NodeId":"node-n06d**********fc53","Provider":"155**********904","Name":"flow-j94y**********lf7a","Version":"v1","Identifier":"9fe11111-****-****-****-****ec811861","Namespace":null,"DisplayName":"name","NodeType":"Dag"},"Spec":{}}'),
  message?: string(name='Message', example='error message'),
  name?: string(name='Name', example='testName'),
  nodeId?: string(name='NodeId', example='node-n06d**********fc53'),
  options?: string(name='Options', example='{"mlflow":{"experimentId":"exp-**********"}}'),
  parentUserId?: string(name='ParentUserId', example='155**********904'),
  pipelineId?: string(name='PipelineId', example='pipeline-j94y**********lf7a'),
  pipelineRunId?: string(name='PipelineRunId', example='flow-j94y**********lf7a'),
  pipelineRunUri?: string(name='PipelineRunUri'),
  requestId?: string(name='RequestId', example='DA869D1B-035A-43B2-ACC1-C56681BD9FAA'),
  sourceId?: string(name='SourceId', example='abcd*********hxfu'),
  sourceType?: string(name='SourceType', example='UNKNOWN'),
  startedAt?: string(name='StartedAt', example='2021-01-30T12:51:33.028Z'),
  status?: string(name='Status', example='Succeeded'),
  userId?: string(name='UserId', example='155**********904'),
  workspaceId?: string(name='WorkspaceId', example='15945'),
}

model GetPipelineRunResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPipelineRunResponseBody(name='body'),
}

async function getPipelineRun(request: GetPipelineRunRequest): GetPipelineRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPipelineRun', 'GET', '/api/v1/pipelineruns/{PipelineRunId}', 'json', false, 'json', request);
}

model GetPipelineRunNodeRequest {
  pipelineRunId: string(name='PipelineRunId', example='flow-ebppc********5lwea', position='Path'),
  nodeId: string(name='NodeId', example='node-wcs9z********27ps3', position='Path'),
  depth?: int32(name='Depth', example='2', position='Query'),
  tokenId?: string(name='TokenId', position='Query'),
  type?: string(name='Type', example='Logical', position='Query'),
}

model GetPipelineRunNodeResponseBody = {
  apiVersion?: string(name='ApiVersion', example='core/v1'),
  metadata?: {
    displayName?: string(name='DisplayName', example='flow-ebppc********5lwea'),
    identifier?: string(name='Identifier', example='composite-pipeline'),
    name?: string(name='Name', example='flow-ebppc********5lwea'),
    nodeId?: string(name='NodeId', example='node-wcs9z********27ps3'),
    nodeType?: string(name='NodeType', example='Dag'),
    provider?: string(name='Provider', example='15577********904'),
    relatedNodeIds?: [ string ](name='RelatedNodeIds'),
    version?: string(name='Version', example='v1'),
  }(name='Metadata'),
  requestId?: string(name='RequestId', example='0a981ea816**********42244e7ba2'),
  spec?: {
    dependencies?: [ string ](name='Dependencies'),
    hasPipelines?: boolean(name='HasPipelines', example='true'),
    inputs?: {
      artifacts?: [  map[string]any ](name='Artifacts'),
      parameters?: [  map[string]any ](name='Parameters'),
    }(name='Inputs'),
    outputs?: {
      artifacts?: [  map[string]any ](name='Artifacts'),
      parameters?: [  map[string]any ](name='Parameters'),
    }(name='Outputs'),
    parallelism?: int32(name='Parallelism', example='2'),
    pipelines?: [  map[string]any ](name='Pipelines'),
    when?: string(name='When', example='”{{inputs.parameters.skip}} == false“'),
    withItems?: [ string ](name='WithItems'),
    withParam?: string(name='WithParam', example='"{{pipelines.generate.outputs.result}}"'),
    withSequence?: {
      end?: int32(name='End', example='10'),
      format?: string(name='Format', example='"2020-05-%d"'),
      start?: int32(name='Start', example='1'),
    }(name='WithSequence'),
  }(name='Spec'),
  statusInfo?: {
    conditions?: [  map[string]any ](name='Conditions'),
    finishedAt?: string(name='FinishedAt', example='2021-10-15T10:40:54.000Z'),
    progress?: string(name='Progress', example='9/9'),
    startedAt?: string(name='StartedAt', example='2021-10-15T10:39:58.000Z'),
    status?: string(name='Status', example='Succeeded'),
  }(name='StatusInfo'),
}

model GetPipelineRunNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPipelineRunNodeResponseBody(name='body'),
}

async function getPipelineRunNode(request: GetPipelineRunNodeRequest): GetPipelineRunNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPipelineRunNode', 'GET', '/api/v1/pipelineruns/{PipelineRunId}/nodes/{NodeId}', 'json', false, 'json', request);
}

model ListPipelineRunNodeLogsRequest {
  pipelineRunId: string(name='PipelineRunId', example='flow-73186********nku43', position='Path'),
  nodeId: string(name='NodeId', example='node-hh5yc********mz8ms', position='Path'),
  fromTimeInSeconds?: long(name='FromTimeInSeconds', example='1612180056', position='Query'),
  keyword?: string(name='Keyword', example='abc', position='Query'),
  offset?: int32(name='Offset', example='0', position='Query'),
  pageSize?: int32(name='PageSize', example='100', position='Query'),
  reverse?: boolean(name='Reverse', example='false', position='Query'),
  toTimeInSeconds?: long(name='ToTimeInSeconds', example='1612180056', position='Query'),
  tokenId?: string(name='TokenId', position='Query'),
}

model ListPipelineRunNodeLogsResponseBody = {
  logs?: [ string ](name='Logs'),
  requestId?: string(name='RequestId', example='473469C7-****-****-****-A3DC0DE3C83E'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListPipelineRunNodeLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPipelineRunNodeLogsResponseBody(name='body'),
}

async function listPipelineRunNodeLogs(request: ListPipelineRunNodeLogsRequest): ListPipelineRunNodeLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPipelineRunNodeLogs', 'GET', '/api/v1/pipelineruns/{PipelineRunId}/nodes/{NodeId}/logs', 'json', false, 'json', request);
}

model ListPipelineRunNodeOutputsRequest {
  pipelineRunId: string(name='PipelineRunId', example='flow-n06dn********rfc53', position='Path'),
  nodeId: string(name='NodeId', example='node-n06dn********rfc53', position='Path'),
  depth: int32(name='Depth', example='2', minimum=1, maximum=99999, position='Query'),
  name?: string(name='Name', example='myName', position='Query'),
  order?: string(name='Order', example='DESC', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  sortBy?: string(name='SortBy', example='GmtCreateTime', position='Query'),
  tokenId?: string(name='TokenId', position='Query'),
  type?: string(name='Type', example='DataSet', position='Query'),
}

model ListPipelineRunNodeOutputsResponseBody = {
  outputs?: [ 
    {
      expandableArtifactName?: string(name='ExpandableArtifactName', example='inputArtifact'),
      expandedArtifactIndex?: long(name='ExpandedArtifactIndex', example='0'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-30T12:51:33.028Z'),
      id?: string(name='Id', example='artifact-ty1xwv*******s8zf'),
      info?: map[string]any(name='Info', example='{         "metadata": {           "type": {             "Model": {               "locationType": "MaxComputeOfflineModel",               "modelType": "OfflineModel"             }           }         }'),
      name?: string(name='Name', example='model_******'),
      nodeId?: string(name='NodeId', example='node-obpzu*******418grb7'),
      producer?: string(name='Producer', example='id-3d25-************-77856'),
      type?: string(name='Type', example='Model'),
    }
  ](name='Outputs'),
  requestId?: string(name='RequestId', example='473469C7-****-****-****-A3DC0DE3C83E'),
  totalCount?: long(name='TotalCount', example='2'),
}

model ListPipelineRunNodeOutputsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPipelineRunNodeOutputsResponseBody(name='body'),
}

async function listPipelineRunNodeOutputs(request: ListPipelineRunNodeOutputsRequest): ListPipelineRunNodeOutputsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPipelineRunNodeOutputs', 'GET', '/api/v1/pipelineruns/{PipelineRunId}/nodes/{NodeId}/outputs', 'json', false, 'json', request);
}

model ListPipelineRunNodeStatusRequest {
  pipelineRunId: string(name='PipelineRunId', example='flow-rbvg5wzljzjhc9****', position='Path'),
  nodeId: string(name='NodeId', example='node-kdkfkfds****', position='Path'),
  depth?: long(name='Depth', example='2', position='Query'),
  tokenId?: string(name='TokenId', position='Query'),
  type?: string(name='Type', example='Logical', position='Query'),
}

model ListPipelineRunNodeStatusResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-****-****-****-A3DC0DE3C83E'),
  status?: [ 
    {
      finishedAt?: string(name='FinishedAt', example='2021-01-21T17:12:40.232Z'),
      nodeId?: string(name='NodeId', example='node-1jlzg7ncv0j6i3****'),
      nodeName?: string(name='NodeName', example='sql'),
      runtimeInfo?: string(name='RuntimeInfo', example='{\\"DLC_INSTANCE_IDS\\": \\"i-12224afdfsaf,i-22224afdfsaf,i-13224afdfsaf\\"}'),
      startedAt?: string(name='StartedAt', example='2021-01-21T17:12:35.232Z'),
      status?: string(name='Status', example='Succeeded'),
    }
  ](name='Status'),
}

model ListPipelineRunNodeStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPipelineRunNodeStatusResponseBody(name='body'),
}

async function listPipelineRunNodeStatus(request: ListPipelineRunNodeStatusRequest): ListPipelineRunNodeStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPipelineRunNodeStatus', 'GET', '/api/v1/pipelineruns/{PipelineRunId}/nodes/{NodeId}/status', 'json', false, 'json', request);
}

model ListPipelineRunsRequest {
  name?: string(name='Name', example='testName', position='Query'),
  order?: string(name='Order', example='DESC', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  pipelineIds?: string(name='PipelineIds', example='flow-rer7**********0otv, flow-hynm**********sfef', position='Query'),
  pipelineRunId?: string(name='PipelineRunId', position='Query'),
  sortBy?: string(name='SortBy', example='PipelineId', position='Query'),
  sourceId?: string(name='SourceId', example='ybpy**********fb2z', position='Query'),
  sourceType?: string(name='SourceType', example='UNKNOWN', position='Query'),
  status?: string(name='Status', example='Succeeded', position='Query'),
  userId?: string(name='UserId', example='155**********904', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='104623', position='Query'),
}

model ListPipelineRunsResponseBody = {
  pipelineRuns: [ 
    {
      accessibility?: string(name='Accessibility', example='PUBLIC'),
      duration?: int32(name='Duration', example='60'),
      finishedAt?: string(name='FinishedAt', example='2021-01-30T12:52:33.028Z'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-30T12:51:33.028Z'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-30T12:51:33.028Z'),
      message?: string(name='Message', example='error message'),
      name?: string(name='Name', example='testName'),
      nodeId?: string(name='NodeId', example='node-n06d**********fc53'),
      parentUserId?: string(name='ParentUserId', example='155**********904'),
      pipelineId?: string(name='PipelineId', example='pipeline-j94y**********lf7a'),
      pipelineRunId?: string(name='PipelineRunId', example='flow-j94y**********lf7a'),
      pipelineRunUri?: string(name='PipelineRunUri'),
      sourceId?: string(name='SourceId', example='abcd*********hxfu'),
      sourceType?: string(name='SourceType', example='UNKNOWN'),
      startedAt?: string(name='StartedAt', example='2021-01-30T12:51:33.028Z'),
      status?: string(name='Status', example='Succeeded'),
      userId?: string(name='UserId', example='155**********904'),
      workspaceId?: string(name='WorkspaceId', example='15945'),
    }
  ](name='PipelineRuns'),
  requestId?: string(name='RequestId', example='473469C7-****-****-****-A3DC0DE3C83E'),
  totalCount?: long(name='TotalCount', example='15'),
}

model ListPipelineRunsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPipelineRunsResponseBody(name='body'),
}

async function listPipelineRuns(request: ListPipelineRunsRequest): ListPipelineRunsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPipelineRuns', 'GET', '/api/v1/pipelineruns', 'json', false, 'json', request);
}

model ListPipelineRunsStatusRequest {
  nodes?: [ 
    {
      nodeId?: string(name='NodeId', example='node-hynm2bv8wqhp5esfx1'),
      pipelineRunId?: string(name='PipelineRunId', example='flow-hynm2bv8wqhp5esfxq'),
    }
  ](name='Nodes', position='Body'),
  outputType?: string(name='OutputType', position='Body'),
  pipelineRuns?: [ string ](name='PipelineRuns', position='Body'),
  workspaceId?: string(name='WorkspaceId', example='948**', position='Body'),
}

model ListPipelineRunsStatusResponseBody = {
  nodes?: [ 
    {
      finishedAt?: string(name='FinishedAt', example='2021-01-21T17:12:35.232Z'),
      inputArtifactArchived?: boolean(name='InputArtifactArchived', example='true'),
      nodeId?: string(name='NodeId', example='node-hynm2bv8wqhp5esfx1'),
      nodeName?: string(name='NodeName', example='dataSource'),
      outputArtifactArchived?: boolean(name='OutputArtifactArchived', example='true'),
      pipelineRunId?: string(name='PipelineRunId', example='flow-hynm2bv8wqhp5esfxq'),
      startedAt?: string(name='StartedAt', example='2021-01-21T17:12:35.232Z'),
      status?: string(name='Status', example='Running'),
    }
  ](name='Nodes'),
  outputs?: [ 
    {
      expandableArtifactName?: string(name='ExpandableArtifactName'),
      expandedArtifactIndex?: int32(name='ExpandedArtifactIndex'),
      gmtCreateTime?: string(name='GmtCreateTime'),
      id?: string(name='Id'),
      metadata?: map[string]any(name='Metadata'),
      name?: string(name='Name'),
      nodeId?: string(name='NodeId'),
      pipelineRunId?: string(name='PipelineRunId'),
      producer?: string(name='Producer'),
      type?: string(name='Type'),
      value?: string(name='Value'),
    }
  ](name='Outputs'),
  pipelineRuns?: [ 
    {
      isDeleted?: boolean(name='IsDeleted', example='false'),
      name?: string(name='Name', example='myName'),
      nodeId?: string(name='NodeId', example='node-98odqfpcjzwdf3caq3'),
      parentUserId?: string(name='ParentUserId', example='1557702098194904'),
      pipelineRunId?: string(name='PipelineRunId', example='flow-hynm2bv8wqhp5esfxq'),
      sourceId?: string(name='SourceId', example='lmi7d24h3kr0xczjlu'),
      status?: string(name='Status', example='Running'),
      userId?: string(name='UserId', example='1557702098194904'),
    }
  ](name='PipelineRuns'),
  requestId?: string(name='RequestId', example='473469C7-****-****-****-A3DC0DE3C83E'),
}

model ListPipelineRunsStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPipelineRunsStatusResponseBody(name='body'),
}

async function listPipelineRunsStatus(request: ListPipelineRunsStatusRequest): ListPipelineRunsStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPipelineRunsStatus', 'PUT', '/api/v1/pipelineruns', 'json', false, 'json', request);
}

model ListPipelinesRequest {
  fuzzyMatching?: boolean(name='FuzzyMatching', example='false', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  pipelineIdentifier?: string(name='PipelineIdentifier', example='SqlWriteTable_2', position='Query'),
  pipelineProvider?: string(name='PipelineProvider', example='pai', position='Query'),
  pipelineVersion?: string(name='PipelineVersion', example='v1', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='726**', position='Query'),
}

model ListPipelinesResponseBody = {
  pipelines?: [ 
    {
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-06T14:32:50Z'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-06T22:26:24Z'),
      identifier?: string(name='Identifier', example='SqlWriteTable_2'),
      pipelineId?: string(name='PipelineId', example='pipeline-c0h44g3wlwkj8o*****'),
      provider?: string(name='Provider', example='pai'),
      uuid?: string(name='Uuid', example='q8dp9hklueznh*****'),
      version?: string(name='Version', example='v1'),
      workspaceId?: string(name='WorkspaceId', example='726**'),
    }
  ](name='Pipelines'),
  requestId?: string(name='RequestId', example='DA869D1B-035A-43B2-ACC1-C56681B****'),
  totalCount?: long(name='TotalCount', example='15'),
}

model ListPipelinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPipelinesResponseBody(name='body'),
}

async function listPipelines(request: ListPipelinesRequest): ListPipelinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPipelines', 'GET', '/api/v1/pipelines', 'json', false, 'json', request);
}

model RerunPipelineRunRequest {
  pipelineRunId: string(name='PipelineRunId', example='run-rbvg5wzljzjhc9ks92', position='Path'),
}

model RerunPipelineRunResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='DA869D1B-035A-43B2-ACC1-C56681BD9FAA'),
}

model RerunPipelineRunResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RerunPipelineRunResponseBody(name='body'),
}

async function rerunPipelineRun(request: RerunPipelineRunRequest): RerunPipelineRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RerunPipelineRun', 'PUT', '/api/v1/pipelineruns/{PipelineRunId}/rerun', 'json', false, 'json', request);
}

model StartPipelineRunRequest {
  pipelineRunId: string(name='PipelineRunId', example='flow-rbvg5wzljzjhc9ks92', position='Path'),
}

model StartPipelineRunResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-****-****-****-A3DC0DE3C83E'),
}

model StartPipelineRunResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartPipelineRunResponseBody(name='body'),
}

async function startPipelineRun(request: StartPipelineRunRequest): StartPipelineRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartPipelineRun', 'PUT', '/api/v1/pipelineruns/{PipelineRunId}/start', 'json', false, 'json', request);
}

model TerminatePipelineRunRequest {
  pipelineRunId: string(name='PipelineRunId', example='flow-rbvg5wzljzjhc9ks92', position='Path'),
}

model TerminatePipelineRunResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-****-****-****-A3DC0DE3C83E'),
}

model TerminatePipelineRunResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TerminatePipelineRunResponseBody(name='body'),
}

async function terminatePipelineRun(request: TerminatePipelineRunRequest): TerminatePipelineRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TerminatePipelineRun', 'PUT', '/api/v1/pipelineruns/{PipelineRunId}/termination', 'json', false, 'json', request);
}

model UpdatePipelineRequest {
  pipelineId: string(name='PipelineId', example='pipeline-hynm2bv8**********', position='Path'),
  manifest: string(name='Manifest', example='apiVersion: "core/v1"*********', position='Body'),
}

model UpdatePipelineResponseBody = {
  requestId?: string(name='RequestId', example='DA869D1B-035A-43B2-ACC1-C56681******'),
}

model UpdatePipelineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdatePipelineResponseBody(name='body'),
}

async function updatePipeline(request: UpdatePipelineRequest): UpdatePipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdatePipeline', 'PUT', '/api/v1/pipelines/{PipelineId}', 'json', false, 'json', request);
}

model UpdatePipelineRunRequest {
  pipelineRunId: string(name='PipelineRunId', example='flow-rbvg5wzljzjhc9ks92', position='Path'),
  name: string(name='Name', example='testName', position='Body'),
}

model UpdatePipelineRunResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-****-****-****-A3DC0DE3C83E'),
}

model UpdatePipelineRunResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdatePipelineRunResponseBody(name='body'),
}

async function updatePipelineRun(request: UpdatePipelineRunRequest): UpdatePipelineRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdatePipelineRun', 'PUT', '/api/v1/pipelineruns/{PipelineRunId}', 'json', false, 'json', request);
}

