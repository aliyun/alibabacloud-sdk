/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ocr-api';
  @version = '2021-07-07';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model RecognizeAdvancedRequest {
  needRotate?: boolean(name='NeedRotate', description='是否需要自动旋转功能(结构化检测、混贴场景、教育相关场景会自动做旋转，无需设置)，返回角度信息', position='Query'),
  needSortPage?: boolean(name='NeedSortPage', description='是否按顺序输出文字块。false表示从左往右，从上到下的顺序；true表示从上到下，从左往右的顺序', position='Query'),
  noStamp?: boolean(name='NoStamp', description='是否需要去除印章功能，默认不需要。true：需要 false：不需要', position='Query'),
  outputCharInfo?: boolean(name='OutputCharInfo', description='是否输出单字识别结果', position='Query'),
  outputFigure?: boolean(name='OutputFigure', description='是否需要图案检测功能，默认不需要。true：需要 false：不需要', position='Query'),
  outputTable?: boolean(name='OutputTable', description='是否输出表格识别结果，包含单元格信息', position='Query'),
  paragraph?: boolean(name='Paragraph', description='是否需要分段功能，默认不需要。true：需要 false：不需要', position='Query'),
  row?: boolean(name='Row', description='是否需要成行返回功能，默认不需要', position='Query'),
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', maxLength=2048, position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeAdvancedResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: string(name='Data', description='返回数据'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
}

model RecognizeAdvancedResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeAdvancedResponseBody(name='body'),
}

async function recognizeAdvanced(request: RecognizeAdvancedRequest): RecognizeAdvancedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeAdvanced', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeAirItineraryRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeAirItineraryResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeAirItineraryResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeAirItineraryResponseBody(name='body'),
}

async function recognizeAirItinerary(request: RecognizeAirItineraryRequest): RecognizeAirItineraryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeAirItinerary', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeBankAcceptanceRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeBankAcceptanceResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: string(name='Data', description='返回数据'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
}

model RecognizeBankAcceptanceResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeBankAcceptanceResponseBody(name='body'),
}

async function recognizeBankAcceptance(request: RecognizeBankAcceptanceRequest): RecognizeBankAcceptanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeBankAcceptance', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeBankAccountLicenseRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeBankAccountLicenseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeBankAccountLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeBankAccountLicenseResponseBody(name='body'),
}

async function recognizeBankAccountLicense(request: RecognizeBankAccountLicenseRequest): RecognizeBankAccountLicenseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeBankAccountLicense', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeBankCardRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeBankCardResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeBankCardResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeBankCardResponseBody(name='body'),
}

async function recognizeBankCard(request: RecognizeBankCardRequest): RecognizeBankCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeBankCard', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeBasicRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeBasicResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeBasicResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeBasicResponseBody(name='body'),
}

async function recognizeBasic(request: RecognizeBasicRequest): RecognizeBasicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeBasic', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeBirthCertificationRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeBirthCertificationResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeBirthCertificationResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeBirthCertificationResponseBody(name='body'),
}

async function recognizeBirthCertification(request: RecognizeBirthCertificationRequest): RecognizeBirthCertificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeBirthCertification', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeBusShipTicketRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeBusShipTicketResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: string(name='Data', description='返回数据'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
}

model RecognizeBusShipTicketResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeBusShipTicketResponseBody(name='body'),
}

async function recognizeBusShipTicket(request: RecognizeBusShipTicketRequest): RecognizeBusShipTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeBusShipTicket', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeBusinessLicenseRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeBusinessLicenseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeBusinessLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeBusinessLicenseResponseBody(name='body'),
}

async function recognizeBusinessLicense(request: RecognizeBusinessLicenseRequest): RecognizeBusinessLicenseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeBusinessLicense', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeCarInvoiceRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeCarInvoiceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeCarInvoiceResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeCarInvoiceResponseBody(name='body'),
}

async function recognizeCarInvoice(request: RecognizeCarInvoiceRequest): RecognizeCarInvoiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeCarInvoice', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeCarNumberRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeCarNumberResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeCarNumberResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeCarNumberResponseBody(name='body'),
}

async function recognizeCarNumber(request: RecognizeCarNumberRequest): RecognizeCarNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeCarNumber', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeCarVinCodeRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeCarVinCodeResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeCarVinCodeResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeCarVinCodeResponseBody(name='body'),
}

async function recognizeCarVinCode(request: RecognizeCarVinCodeRequest): RecognizeCarVinCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeCarVinCode', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeChinesePassportRequest {
  outputFigure?: boolean(name='OutputFigure', description='是否需要图案检测功能，默认需要', position='Query'),
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeChinesePassportResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: string(name='Data', description='返回数据'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
}

model RecognizeChinesePassportResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeChinesePassportResponseBody(name='body'),
}

async function recognizeChinesePassport(request: RecognizeChinesePassportRequest): RecognizeChinesePassportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeChinesePassport', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeCommonPrintedInvoiceRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeCommonPrintedInvoiceResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: string(name='Data', description='返回数据'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
}

model RecognizeCommonPrintedInvoiceResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeCommonPrintedInvoiceResponseBody(name='body'),
}

async function recognizeCommonPrintedInvoice(request: RecognizeCommonPrintedInvoiceRequest): RecognizeCommonPrintedInvoiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeCommonPrintedInvoice', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeCosmeticProduceLicenseRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeCosmeticProduceLicenseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeCosmeticProduceLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeCosmeticProduceLicenseResponseBody(name='body'),
}

async function recognizeCosmeticProduceLicense(request: RecognizeCosmeticProduceLicenseRequest): RecognizeCosmeticProduceLicenseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeCosmeticProduceLicense', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeCovidTestReportRequest {
  multipleResult?: boolean(name='MultipleResult', position='Query'),
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeCovidTestReportResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: string(name='Data', description='返回数据'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
}

model RecognizeCovidTestReportResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeCovidTestReportResponseBody(name='body'),
}

async function recognizeCovidTestReport(request: RecognizeCovidTestReportRequest): RecognizeCovidTestReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeCovidTestReport', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeCtwoMedicalDeviceManageLicenseRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeCtwoMedicalDeviceManageLicenseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeCtwoMedicalDeviceManageLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeCtwoMedicalDeviceManageLicenseResponseBody(name='body'),
}

async function recognizeCtwoMedicalDeviceManageLicense(request: RecognizeCtwoMedicalDeviceManageLicenseRequest): RecognizeCtwoMedicalDeviceManageLicenseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeCtwoMedicalDeviceManageLicense', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeDocumentStructureRequest {
  needRotate?: boolean(name='NeedRotate', description='是否需要自动旋转功能(结构化检测、混贴场景、教育相关场景会自动做旋转，无需设置)，返回角度信息', position='Query'),
  needSortPage?: boolean(name='NeedSortPage', description='是否按顺序输出文字块。false表示从左往右，从上到下的顺序；true表示从上到下，从左往右的顺序', position='Query'),
  noStamp?: boolean(name='NoStamp', description='是否需要去除印章功能，默认不需要。true：需要 false：不需要', position='Query'),
  outputCharInfo?: boolean(name='OutputCharInfo', description='是否输出单字识别结果', position='Query'),
  outputTable?: boolean(name='OutputTable', description='是否输出表格识别结果，包含单元格信息', position='Query'),
  page?: boolean(name='Page', description='是否需要分页功能，默认不需要。 true：需要 false：不需要', position='Query'),
  paragraph?: boolean(name='Paragraph', description='是否需要分段功能，默认不需要。true：需要 false：不需要', position='Query'),
  row?: boolean(name='Row', description='是否需要成行返回功能，默认不需要。true：需要 false：不需要', position='Query'),
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  useNewStyleOutput?: boolean(name='UseNewStyleOutput', description='是否返回新版格式输出', position='Query'),
  body?: readable(name='body', position='Body'),
}

model RecognizeDocumentStructureResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: string(name='Data', description='返回数据'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
}

model RecognizeDocumentStructureResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeDocumentStructureResponseBody(name='body'),
}

async function recognizeDocumentStructure(request: RecognizeDocumentStructureRequest): RecognizeDocumentStructureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeDocumentStructure', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeDrivingLicenseRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeDrivingLicenseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeDrivingLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeDrivingLicenseResponseBody(name='body'),
}

async function recognizeDrivingLicense(request: RecognizeDrivingLicenseRequest): RecognizeDrivingLicenseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeDrivingLicense', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeEduFormulaRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeEduFormulaResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeEduFormulaResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeEduFormulaResponseBody(name='body'),
}

async function recognizeEduFormula(request: RecognizeEduFormulaRequest): RecognizeEduFormulaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeEduFormula', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeEduOralCalculationRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeEduOralCalculationResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeEduOralCalculationResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeEduOralCalculationResponseBody(name='body'),
}

async function recognizeEduOralCalculation(request: RecognizeEduOralCalculationRequest): RecognizeEduOralCalculationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeEduOralCalculation', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeEduPaperCutRequest {
  cutType: string(name='CutType', description='切题类型', position='Query'),
  imageType: string(name='ImageType', description='图片类型', position='Query'),
  subject?: string(name='Subject', description='年级学科', position='Query'),
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeEduPaperCutResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeEduPaperCutResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeEduPaperCutResponseBody(name='body'),
}

async function recognizeEduPaperCut(request: RecognizeEduPaperCutRequest): RecognizeEduPaperCutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeEduPaperCut', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeEduPaperOcrRequest {
  imageType: string(name='ImageType', description='图片类型', position='Query'),
  outputOricoord?: boolean(name='OutputOricoord', description='是否输出原图坐标信息(如果图片被做过旋转，图片校正等处理)', position='Query'),
  subject?: string(name='Subject', description='年级学科', position='Query'),
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeEduPaperOcrResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeEduPaperOcrResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeEduPaperOcrResponseBody(name='body'),
}

async function recognizeEduPaperOcr(request: RecognizeEduPaperOcrRequest): RecognizeEduPaperOcrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeEduPaperOcr', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeEduPaperStructedRequest {
  needRotate?: boolean(name='NeedRotate', description='是否需要自动旋转功能(结构化检测、混贴场景、教育相关场景会自动做旋转，无需设置)，返回角度信息', position='Query'),
  subject?: string(name='Subject', description='学科类型', position='Query'),
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeEduPaperStructedResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeEduPaperStructedResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeEduPaperStructedResponseBody(name='body'),
}

async function recognizeEduPaperStructed(request: RecognizeEduPaperStructedRequest): RecognizeEduPaperStructedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeEduPaperStructed', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeEduQuestionOcrRequest {
  needRotate?: boolean(name='NeedRotate', description='是否需要自动旋转功能(结构化检测、混贴场景、教育相关场景会自动做旋转，无需设置)，返回角度信息', position='Query'),
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeEduQuestionOcrResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeEduQuestionOcrResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeEduQuestionOcrResponseBody(name='body'),
}

async function recognizeEduQuestionOcr(request: RecognizeEduQuestionOcrRequest): RecognizeEduQuestionOcrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeEduQuestionOcr', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeEnglishRequest {
  needRotate?: boolean(name='NeedRotate', description='是否需要自动旋转功能(结构化检测、混贴场景、教育相关场景会自动做旋转，无需设置)，返回角度信息', position='Query'),
  outputTable?: boolean(name='OutputTable', description='是否输出表格识别结果，包含单元格信息', position='Query'),
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeEnglishResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeEnglishResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeEnglishResponseBody(name='body'),
}

async function recognizeEnglish(request: RecognizeEnglishRequest): RecognizeEnglishResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeEnglish', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeEstateCertificationRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeEstateCertificationResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeEstateCertificationResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeEstateCertificationResponseBody(name='body'),
}

async function recognizeEstateCertification(request: RecognizeEstateCertificationRequest): RecognizeEstateCertificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeEstateCertification', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeExitEntryPermitToHKRequest {
  outputFigure?: boolean(name='OutputFigure', description='图案坐标信息输出，针对结构化，如身份证人脸头像', position='Query'),
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeExitEntryPermitToHKResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: string(name='Data', description='返回数据'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
}

model RecognizeExitEntryPermitToHKResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeExitEntryPermitToHKResponseBody(name='body'),
}

async function recognizeExitEntryPermitToHK(request: RecognizeExitEntryPermitToHKRequest): RecognizeExitEntryPermitToHKResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeExitEntryPermitToHK', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeExitEntryPermitToMainlandRequest {
  outputFigure?: boolean(name='OutputFigure', description='图案坐标信息输出，针对结构化，如身份证人脸头像', position='Query'),
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeExitEntryPermitToMainlandResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: string(name='Data', description='返回数据'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
}

model RecognizeExitEntryPermitToMainlandResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeExitEntryPermitToMainlandResponseBody(name='body'),
}

async function recognizeExitEntryPermitToMainland(request: RecognizeExitEntryPermitToMainlandRequest): RecognizeExitEntryPermitToMainlandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeExitEntryPermitToMainland', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeFoodManageLicenseRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeFoodManageLicenseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeFoodManageLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeFoodManageLicenseResponseBody(name='body'),
}

async function recognizeFoodManageLicense(request: RecognizeFoodManageLicenseRequest): RecognizeFoodManageLicenseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeFoodManageLicense', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeFoodProduceLicenseRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeFoodProduceLicenseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeFoodProduceLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeFoodProduceLicenseResponseBody(name='body'),
}

async function recognizeFoodProduceLicense(request: RecognizeFoodProduceLicenseRequest): RecognizeFoodProduceLicenseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeFoodProduceLicense', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeGeneralRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeGeneralResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeGeneralResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeGeneralResponseBody(name='body'),
}

async function recognizeGeneral(request: RecognizeGeneralRequest): RecognizeGeneralResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeGeneral', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeHandwritingRequest {
  needRotate?: boolean(name='NeedRotate', description='是否需要自动旋转功能(结构化检测、混贴场景、教育相关场景会自动做旋转，无需设置)，返回角度信息', position='Query'),
  needSortPage?: boolean(name='NeedSortPage', description='是否按顺序输出文字块。false表示从左往右，从上到下的顺序；true表示从上到下，从左往右的顺序', position='Query'),
  outputCharInfo?: boolean(name='OutputCharInfo', description='是否输出单字识别结果', position='Query'),
  outputTable?: boolean(name='OutputTable', description='是否输出表格识别结果，包含单元格信息', position='Query'),
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeHandwritingResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeHandwritingResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeHandwritingResponseBody(name='body'),
}

async function recognizeHandwriting(request: RecognizeHandwritingRequest): RecognizeHandwritingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeHandwriting', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeHealthCodeRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeHealthCodeResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: string(name='Data', description='返回数据'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
}

model RecognizeHealthCodeResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeHealthCodeResponseBody(name='body'),
}

async function recognizeHealthCode(request: RecognizeHealthCodeRequest): RecognizeHealthCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeHealthCode', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeHotelConsumeRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeHotelConsumeResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeHotelConsumeResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeHotelConsumeResponseBody(name='body'),
}

async function recognizeHotelConsume(request: RecognizeHotelConsumeRequest): RecognizeHotelConsumeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeHotelConsume', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeHouseholdRequest {
  isResidentPage?: boolean(name='IsResidentPage', position='Query'),
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeHouseholdResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeHouseholdResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeHouseholdResponseBody(name='body'),
}

async function recognizeHousehold(request: RecognizeHouseholdRequest): RecognizeHouseholdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeHousehold', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeIdcardRequest {
  outputFigure?: boolean(name='OutputFigure', description='是否需要图案检测功能，默认不需要', position='Query'),
  outputQualityInfo?: boolean(name='OutputQualityInfo', description='是否需要输出身份证质量检测信息', position='Query'),
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeIdcardResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeIdcardResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeIdcardResponseBody(name='body'),
}

async function recognizeIdcard(request: RecognizeIdcardRequest): RecognizeIdcardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeIdcard', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeInternationalBusinessLicenseRequest {
  country: string(name='Country', description='国家名称', position='Query'),
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeInternationalBusinessLicenseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeInternationalBusinessLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeInternationalBusinessLicenseResponseBody(name='body'),
}

async function recognizeInternationalBusinessLicense(request: RecognizeInternationalBusinessLicenseRequest): RecognizeInternationalBusinessLicenseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeInternationalBusinessLicense', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeInternationalIdcardRequest {
  country: string(name='Country', description='国家名称', position='Query'),
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeInternationalIdcardResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeInternationalIdcardResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeInternationalIdcardResponseBody(name='body'),
}

async function recognizeInternationalIdcard(request: RecognizeInternationalIdcardRequest): RecognizeInternationalIdcardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeInternationalIdcard', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeInvoiceRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeInvoiceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeInvoiceResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeInvoiceResponseBody(name='body'),
}

async function recognizeInvoice(request: RecognizeInvoiceRequest): RecognizeInvoiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeInvoice', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeJanpaneseRequest {
  needRotate?: boolean(name='NeedRotate', description='是否需要自动旋转功能(结构化检测、混贴场景、教育相关场景会自动做旋转，无需设置)，返回角度信息', position='Query'),
  outputCharInfo?: boolean(name='OutputCharInfo', description='是否输出单字识别结果', position='Query'),
  outputTable?: boolean(name='OutputTable', description='是否输出表格识别结果，包含单元格信息', position='Query'),
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeJanpaneseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeJanpaneseResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeJanpaneseResponseBody(name='body'),
}

async function recognizeJanpanese(request: RecognizeJanpaneseRequest): RecognizeJanpaneseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeJanpanese', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeKoreanRequest {
  needRotate?: boolean(name='NeedRotate', description='是否需要自动旋转功能(结构化检测、混贴场景、教育相关场景会自动做旋转，无需设置)，返回角度信息', position='Query'),
  outputCharInfo?: boolean(name='OutputCharInfo', description='是否输出单字识别结果', position='Query'),
  outputTable?: boolean(name='OutputTable', description='是否输出表格识别结果，包含单元格信息', position='Query'),
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeKoreanResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeKoreanResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeKoreanResponseBody(name='body'),
}

async function recognizeKorean(request: RecognizeKoreanRequest): RecognizeKoreanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeKorean', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeLatinRequest {
  needRotate?: boolean(name='NeedRotate', description='是否需要自动旋转功能(结构化检测、混贴场景、教育相关场景会自动做旋转，无需设置)，返回角度信息', position='Query'),
  outputCharInfo?: boolean(name='OutputCharInfo', description='是否输出单字识别结果', position='Query'),
  outputTable?: boolean(name='OutputTable', description='是否输出表格识别结果，包含单元格信息', position='Query'),
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeLatinResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeLatinResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeLatinResponseBody(name='body'),
}

async function recognizeLatin(request: RecognizeLatinRequest): RecognizeLatinResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeLatin', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeMedicalDeviceManageLicenseRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeMedicalDeviceManageLicenseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeMedicalDeviceManageLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeMedicalDeviceManageLicenseResponseBody(name='body'),
}

async function recognizeMedicalDeviceManageLicense(request: RecognizeMedicalDeviceManageLicenseRequest): RecognizeMedicalDeviceManageLicenseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeMedicalDeviceManageLicense', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeMedicalDeviceProduceLicenseRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeMedicalDeviceProduceLicenseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeMedicalDeviceProduceLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeMedicalDeviceProduceLicenseResponseBody(name='body'),
}

async function recognizeMedicalDeviceProduceLicense(request: RecognizeMedicalDeviceProduceLicenseRequest): RecognizeMedicalDeviceProduceLicenseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeMedicalDeviceProduceLicense', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeMixedInvoicesRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeMixedInvoicesResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeMixedInvoicesResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeMixedInvoicesResponseBody(name='body'),
}

async function recognizeMixedInvoices(request: RecognizeMixedInvoicesRequest): RecognizeMixedInvoicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeMixedInvoices', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeMultiLanguageRequest {
  languages: [ string ](name='Languages', description='识别语种', shrink='simple', position='Query'),
  needRotate?: boolean(name='NeedRotate', description='是否需要自动旋转功能(结构化检测、混贴场景、教育相关场景会自动做旋转，无需设置)，返回角度信息', position='Query'),
  needSortPage?: boolean(name='NeedSortPage', description='是否按顺序输出文字块。false表示从左往右，从上到下的顺序；true表示从上到下，从左往右的顺序', position='Query'),
  outputCharInfo?: boolean(name='OutputCharInfo', description='是否输出单字识别结果', position='Query'),
  outputTable?: boolean(name='OutputTable', description='是否输出表格识别结果，包含单元格信息', position='Query'),
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeMultiLanguageResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeMultiLanguageResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeMultiLanguageResponseBody(name='body'),
}

async function recognizeMultiLanguage(request: RecognizeMultiLanguageRequest): RecognizeMultiLanguageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeMultiLanguage', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeNonTaxInvoiceRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeNonTaxInvoiceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeNonTaxInvoiceResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeNonTaxInvoiceResponseBody(name='body'),
}

async function recognizeNonTaxInvoice(request: RecognizeNonTaxInvoiceRequest): RecognizeNonTaxInvoiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeNonTaxInvoice', 'POST', '/', 'json', false, 'json', request);
}

model RecognizePassportRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizePassportResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizePassportResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizePassportResponseBody(name='body'),
}

async function recognizePassport(request: RecognizePassportRequest): RecognizePassportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizePassport', 'POST', '/', 'json', false, 'json', request);
}

model RecognizePaymentRecordRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizePaymentRecordResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizePaymentRecordResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizePaymentRecordResponseBody(name='body'),
}

async function recognizePaymentRecord(request: RecognizePaymentRecordRequest): RecognizePaymentRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizePaymentRecord', 'POST', '/', 'json', false, 'json', request);
}

model RecognizePurchaseRecordRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizePurchaseRecordResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizePurchaseRecordResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizePurchaseRecordResponseBody(name='body'),
}

async function recognizePurchaseRecord(request: RecognizePurchaseRecordRequest): RecognizePurchaseRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizePurchaseRecord', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeQuotaInvoiceRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeQuotaInvoiceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeQuotaInvoiceResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeQuotaInvoiceResponseBody(name='body'),
}

async function recognizeQuotaInvoice(request: RecognizeQuotaInvoiceRequest): RecognizeQuotaInvoiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeQuotaInvoice', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeRideHailingItineraryRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeRideHailingItineraryResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: string(name='Data', description='返回数据'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
}

model RecognizeRideHailingItineraryResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeRideHailingItineraryResponseBody(name='body'),
}

async function recognizeRideHailingItinerary(request: RecognizeRideHailingItineraryRequest): RecognizeRideHailingItineraryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeRideHailingItinerary', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeRollTicketRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeRollTicketResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeRollTicketResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeRollTicketResponseBody(name='body'),
}

async function recognizeRollTicket(request: RecognizeRollTicketRequest): RecognizeRollTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeRollTicket', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeRussianRequest {
  needRotate?: boolean(name='NeedRotate', description='是否需要自动旋转功能(结构化检测、混贴场景、教育相关场景会自动做旋转，无需设置)，返回角度信息', position='Query'),
  outputCharInfo?: boolean(name='OutputCharInfo', description='是否输出单字识别结果', position='Query'),
  outputTable?: boolean(name='OutputTable', description='是否输出表格识别结果，包含单元格信息', position='Query'),
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeRussianResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeRussianResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeRussianResponseBody(name='body'),
}

async function recognizeRussian(request: RecognizeRussianRequest): RecognizeRussianResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeRussian', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeShoppingReceiptRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeShoppingReceiptResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: string(name='Data', description='返回数据'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
}

model RecognizeShoppingReceiptResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeShoppingReceiptResponseBody(name='body'),
}

async function recognizeShoppingReceipt(request: RecognizeShoppingReceiptRequest): RecognizeShoppingReceiptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeShoppingReceipt', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeSocialSecurityCardRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeSocialSecurityCardResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: string(name='Data', description='返回数据'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
}

model RecognizeSocialSecurityCardResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeSocialSecurityCardResponseBody(name='body'),
}

async function recognizeSocialSecurityCard(request: RecognizeSocialSecurityCardRequest): RecognizeSocialSecurityCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeSocialSecurityCard', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeSocialSecurityCardVersionIIRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeSocialSecurityCardVersionIIResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: string(name='Data', description='返回数据'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
}

model RecognizeSocialSecurityCardVersionIIResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeSocialSecurityCardVersionIIResponseBody(name='body'),
}

async function recognizeSocialSecurityCardVersionII(request: RecognizeSocialSecurityCardVersionIIRequest): RecognizeSocialSecurityCardVersionIIResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeSocialSecurityCardVersionII', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeTableOcrRequest {
  lineLess?: boolean(name='LineLess', description='是否无线条', position='Query'),
  needRotate?: boolean(name='NeedRotate', description='是否需要自动旋转功能，默认需要', position='Query'),
  skipDetection?: boolean(name='SkipDetection', description='是否跳过表格识别，如果没有检测到表格，可以设置"skip_detection":true', position='Query'),
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', maxLength=2048, position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeTableOcrResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeTableOcrResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeTableOcrResponseBody(name='body'),
}

async function recognizeTableOcr(request: RecognizeTableOcrRequest): RecognizeTableOcrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeTableOcr', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeTaxClearanceCertificateRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeTaxClearanceCertificateResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: string(name='Data', description='返回数据'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
}

model RecognizeTaxClearanceCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeTaxClearanceCertificateResponseBody(name='body'),
}

async function recognizeTaxClearanceCertificate(request: RecognizeTaxClearanceCertificateRequest): RecognizeTaxClearanceCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeTaxClearanceCertificate', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeTaxiInvoiceRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeTaxiInvoiceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeTaxiInvoiceResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeTaxiInvoiceResponseBody(name='body'),
}

async function recognizeTaxiInvoice(request: RecognizeTaxiInvoiceRequest): RecognizeTaxiInvoiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeTaxiInvoice', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeThaiRequest {
  needRotate?: boolean(name='NeedRotate', description='是否需要自动旋转功能(结构化检测、混贴场景、教育相关场景会自动做旋转，无需设置)，返回角度信息', position='Query'),
  outputCharInfo?: boolean(name='OutputCharInfo', description='是否输出单字识别结果', position='Query'),
  outputTable?: boolean(name='OutputTable', description='是否输出表格识别结果，包含单元格信息', position='Query'),
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeThaiResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeThaiResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeThaiResponseBody(name='body'),
}

async function recognizeThai(request: RecognizeThaiRequest): RecognizeThaiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeThai', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeTollInvoiceRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeTollInvoiceResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: string(name='Data', description='返回数据'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
}

model RecognizeTollInvoiceResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeTollInvoiceResponseBody(name='body'),
}

async function recognizeTollInvoice(request: RecognizeTollInvoiceRequest): RecognizeTollInvoiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeTollInvoice', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeTradeMarkCertificationRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeTradeMarkCertificationResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeTradeMarkCertificationResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeTradeMarkCertificationResponseBody(name='body'),
}

async function recognizeTradeMarkCertification(request: RecognizeTradeMarkCertificationRequest): RecognizeTradeMarkCertificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeTradeMarkCertification', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeTrainInvoiceRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeTrainInvoiceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeTrainInvoiceResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeTrainInvoiceResponseBody(name='body'),
}

async function recognizeTrainInvoice(request: RecognizeTrainInvoiceRequest): RecognizeTrainInvoiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeTrainInvoice', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeTravelCardRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeTravelCardResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: string(name='Data', description='返回数据'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
}

model RecognizeTravelCardResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeTravelCardResponseBody(name='body'),
}

async function recognizeTravelCard(request: RecognizeTravelCardRequest): RecognizeTravelCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeTravelCard', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeUsedCarInvoiceRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeUsedCarInvoiceResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: string(name='Data', description='返回数据'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
}

model RecognizeUsedCarInvoiceResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeUsedCarInvoiceResponseBody(name='body'),
}

async function recognizeUsedCarInvoice(request: RecognizeUsedCarInvoiceRequest): RecognizeUsedCarInvoiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeUsedCarInvoice', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeVehicleCertificationRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeVehicleCertificationResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: string(name='Data', description='返回数据'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
}

model RecognizeVehicleCertificationResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeVehicleCertificationResponseBody(name='body'),
}

async function recognizeVehicleCertification(request: RecognizeVehicleCertificationRequest): RecognizeVehicleCertificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeVehicleCertification', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeVehicleLicenseRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', maxLength=2048, position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeVehicleLicenseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeVehicleLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeVehicleLicenseResponseBody(name='body'),
}

async function recognizeVehicleLicense(request: RecognizeVehicleLicenseRequest): RecognizeVehicleLicenseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeVehicleLicense', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeVehicleRegistrationRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeVehicleRegistrationResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: string(name='Data', description='返回数据'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
}

model RecognizeVehicleRegistrationResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeVehicleRegistrationResponseBody(name='body'),
}

async function recognizeVehicleRegistration(request: RecognizeVehicleRegistrationRequest): RecognizeVehicleRegistrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeVehicleRegistration', 'POST', '/', 'json', false, 'json', request);
}

model RecognizeWaybillRequest {
  url?: string(name='Url', description='图片链接（长度不超 2048，不支持 base64）', position='Query'),
  body?: readable(name='body', description='图片二进制字节流，最大10MB', position='Body'),
}

model RecognizeWaybillResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeWaybillResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeWaybillResponseBody(name='body'),
}

async function recognizeWaybill(request: RecognizeWaybillRequest): RecognizeWaybillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeWaybill', 'POST', '/', 'json', false, 'json', request);
}

model VerifyBusinessLicenseRequest {
  companyName: string(name='CompanyName', description='企业名称', position='Query'),
  creditCode: string(name='CreditCode', description='工商注册号/统一社会信用代码', position='Query'),
  legalPerson: string(name='LegalPerson', description='企业法人姓名', position='Query'),
}

model VerifyBusinessLicenseResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model VerifyBusinessLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyBusinessLicenseResponseBody(name='body'),
}

async function verifyBusinessLicense(request: VerifyBusinessLicenseRequest): VerifyBusinessLicenseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyBusinessLicense', 'POST', '/', 'json', false, 'json', request);
}

model VerifyVATInvoiceRequest {
  invoiceCode?: string(name='InvoiceCode', position='Query'),
  invoiceDate: string(name='InvoiceDate', position='Query'),
  invoiceNo: string(name='InvoiceNo', position='Query'),
  invoiceSum?: string(name='InvoiceSum', position='Query'),
  verifyCode?: string(name='VerifyCode', position='Query'),
}

model VerifyVATInvoiceResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model VerifyVATInvoiceResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyVATInvoiceResponseBody(name='body'),
}

async function verifyVATInvoice(request: VerifyVATInvoiceRequest): VerifyVATInvoiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyVATInvoice', 'POST', '/', 'json', false, 'json', request);
}

