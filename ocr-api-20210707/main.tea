/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('ocr-api', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model RecognizeDrivingLicenseRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeDrivingLicenseResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeDrivingLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeDrivingLicenseResponseBody(name='body'),
}

async function recognizeDrivingLicenseWithOptions(request: RecognizeDrivingLicenseRequest, runtime: Util.RuntimeOptions): RecognizeDrivingLicenseResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeDrivingLicense', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeDrivingLicense(request: RecognizeDrivingLicenseRequest): RecognizeDrivingLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeDrivingLicenseWithOptions(request, runtime);
}

model RecognizeKoreanRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
  outputCharInfo?: boolean(name='OutputCharInfo', description='是否输出单字识别结果'),
  needRotate?: boolean(name='NeedRotate', description='是否需要自动旋转功能(结构化检测、混贴场景、教育相关场景会自动做旋转，无需设置)，返回角度信息'),
  outputTable?: boolean(name='OutputTable', description='是否输出表格识别结果，包含单元格信息'),
}

model RecognizeKoreanResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeKoreanResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeKoreanResponseBody(name='body'),
}

async function recognizeKoreanWithOptions(request: RecognizeKoreanRequest, runtime: Util.RuntimeOptions): RecognizeKoreanResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeKorean', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeKorean(request: RecognizeKoreanRequest): RecognizeKoreanResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeKoreanWithOptions(request, runtime);
}

model RecognizeCarInvoiceRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeCarInvoiceResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeCarInvoiceResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeCarInvoiceResponseBody(name='body'),
}

async function recognizeCarInvoiceWithOptions(request: RecognizeCarInvoiceRequest, runtime: Util.RuntimeOptions): RecognizeCarInvoiceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeCarInvoice', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeCarInvoice(request: RecognizeCarInvoiceRequest): RecognizeCarInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeCarInvoiceWithOptions(request, runtime);
}

model RecognizeMixedInvoicesRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeMixedInvoicesResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeMixedInvoicesResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeMixedInvoicesResponseBody(name='body'),
}

async function recognizeMixedInvoicesWithOptions(request: RecognizeMixedInvoicesRequest, runtime: Util.RuntimeOptions): RecognizeMixedInvoicesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeMixedInvoices', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeMixedInvoices(request: RecognizeMixedInvoicesRequest): RecognizeMixedInvoicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeMixedInvoicesWithOptions(request, runtime);
}

model RecognizeEstateCertificationRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeEstateCertificationResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeEstateCertificationResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeEstateCertificationResponseBody(name='body'),
}

async function recognizeEstateCertificationWithOptions(request: RecognizeEstateCertificationRequest, runtime: Util.RuntimeOptions): RecognizeEstateCertificationResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeEstateCertification', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeEstateCertification(request: RecognizeEstateCertificationRequest): RecognizeEstateCertificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeEstateCertificationWithOptions(request, runtime);
}

model RecognizeCarNumberRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeCarNumberResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeCarNumberResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeCarNumberResponseBody(name='body'),
}

async function recognizeCarNumberWithOptions(request: RecognizeCarNumberRequest, runtime: Util.RuntimeOptions): RecognizeCarNumberResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeCarNumber', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeCarNumber(request: RecognizeCarNumberRequest): RecognizeCarNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeCarNumberWithOptions(request, runtime);
}

model RecognizeEduPaperOcrRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
  imageType?: string(name='ImageType', description='图片类型'),
  subject?: string(name='Subject', description='年级学科'),
  outputOricoord?: boolean(name='OutputOricoord', description='是否输出原图坐标信息(如果图片被做过旋转，图片校正等处理)'),
}

model RecognizeEduPaperOcrResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeEduPaperOcrResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeEduPaperOcrResponseBody(name='body'),
}

async function recognizeEduPaperOcrWithOptions(request: RecognizeEduPaperOcrRequest, runtime: Util.RuntimeOptions): RecognizeEduPaperOcrResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeEduPaperOcr', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeEduPaperOcr(request: RecognizeEduPaperOcrRequest): RecognizeEduPaperOcrResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeEduPaperOcrWithOptions(request, runtime);
}

model RecognizeTradeMarkCertificationRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeTradeMarkCertificationResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeTradeMarkCertificationResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeTradeMarkCertificationResponseBody(name='body'),
}

async function recognizeTradeMarkCertificationWithOptions(request: RecognizeTradeMarkCertificationRequest, runtime: Util.RuntimeOptions): RecognizeTradeMarkCertificationResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeTradeMarkCertification', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeTradeMarkCertification(request: RecognizeTradeMarkCertificationRequest): RecognizeTradeMarkCertificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeTradeMarkCertificationWithOptions(request, runtime);
}

model RecognizeBirthCertificationRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeBirthCertificationResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeBirthCertificationResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeBirthCertificationResponseBody(name='body'),
}

async function recognizeBirthCertificationWithOptions(request: RecognizeBirthCertificationRequest, runtime: Util.RuntimeOptions): RecognizeBirthCertificationResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeBirthCertification', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeBirthCertification(request: RecognizeBirthCertificationRequest): RecognizeBirthCertificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeBirthCertificationWithOptions(request, runtime);
}

model RecognizeDoctypeRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeDoctypeResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeDoctypeResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeDoctypeResponseBody(name='body'),
}

async function recognizeDoctypeWithOptions(request: RecognizeDoctypeRequest, runtime: Util.RuntimeOptions): RecognizeDoctypeResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeDoctype', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeDoctype(request: RecognizeDoctypeRequest): RecognizeDoctypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeDoctypeWithOptions(request, runtime);
}

model RecognizeBankAccountLicenseRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeBankAccountLicenseResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeBankAccountLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeBankAccountLicenseResponseBody(name='body'),
}

async function recognizeBankAccountLicenseWithOptions(request: RecognizeBankAccountLicenseRequest, runtime: Util.RuntimeOptions): RecognizeBankAccountLicenseResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeBankAccountLicense', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeBankAccountLicense(request: RecognizeBankAccountLicenseRequest): RecognizeBankAccountLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeBankAccountLicenseWithOptions(request, runtime);
}

model RecognizeFoodManageLicenseRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeFoodManageLicenseResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeFoodManageLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeFoodManageLicenseResponseBody(name='body'),
}

async function recognizeFoodManageLicenseWithOptions(request: RecognizeFoodManageLicenseRequest, runtime: Util.RuntimeOptions): RecognizeFoodManageLicenseResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeFoodManageLicense', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeFoodManageLicense(request: RecognizeFoodManageLicenseRequest): RecognizeFoodManageLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeFoodManageLicenseWithOptions(request, runtime);
}

model RecognizeRollTicketRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeRollTicketResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeRollTicketResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeRollTicketResponseBody(name='body'),
}

async function recognizeRollTicketWithOptions(request: RecognizeRollTicketRequest, runtime: Util.RuntimeOptions): RecognizeRollTicketResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeRollTicket', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeRollTicket(request: RecognizeRollTicketRequest): RecognizeRollTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeRollTicketWithOptions(request, runtime);
}

model RecognizeEduFormulaRequest {
  url?: string(name='Url', description='图片链接（不支持 base64）,图片最大尺寸 1024*1024'),
}

model RecognizeEduFormulaResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeEduFormulaResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeEduFormulaResponseBody(name='body'),
}

async function recognizeEduFormulaWithOptions(request: RecognizeEduFormulaRequest, runtime: Util.RuntimeOptions): RecognizeEduFormulaResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeEduFormula', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeEduFormula(request: RecognizeEduFormulaRequest): RecognizeEduFormulaResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeEduFormulaWithOptions(request, runtime);
}

model RecognizePassportRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizePassportResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizePassportResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizePassportResponseBody(name='body'),
}

async function recognizePassportWithOptions(request: RecognizePassportRequest, runtime: Util.RuntimeOptions): RecognizePassportResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizePassport', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizePassport(request: RecognizePassportRequest): RecognizePassportResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizePassportWithOptions(request, runtime);
}

model RecognizeTaxiInvoiceRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeTaxiInvoiceResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeTaxiInvoiceResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeTaxiInvoiceResponseBody(name='body'),
}

async function recognizeTaxiInvoiceWithOptions(request: RecognizeTaxiInvoiceRequest, runtime: Util.RuntimeOptions): RecognizeTaxiInvoiceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeTaxiInvoice', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeTaxiInvoice(request: RecognizeTaxiInvoiceRequest): RecognizeTaxiInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeTaxiInvoiceWithOptions(request, runtime);
}

model RecognizeFoodProduceLicenseRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeFoodProduceLicenseResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeFoodProduceLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeFoodProduceLicenseResponseBody(name='body'),
}

async function recognizeFoodProduceLicenseWithOptions(request: RecognizeFoodProduceLicenseRequest, runtime: Util.RuntimeOptions): RecognizeFoodProduceLicenseResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeFoodProduceLicense', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeFoodProduceLicense(request: RecognizeFoodProduceLicenseRequest): RecognizeFoodProduceLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeFoodProduceLicenseWithOptions(request, runtime);
}

model RecognizeMedicalDeviceProduceLicenseRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeMedicalDeviceProduceLicenseResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeMedicalDeviceProduceLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeMedicalDeviceProduceLicenseResponseBody(name='body'),
}

async function recognizeMedicalDeviceProduceLicenseWithOptions(request: RecognizeMedicalDeviceProduceLicenseRequest, runtime: Util.RuntimeOptions): RecognizeMedicalDeviceProduceLicenseResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeMedicalDeviceProduceLicense', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeMedicalDeviceProduceLicense(request: RecognizeMedicalDeviceProduceLicenseRequest): RecognizeMedicalDeviceProduceLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeMedicalDeviceProduceLicenseWithOptions(request, runtime);
}

model RecognizeHandwritingRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
  outputCharInfo?: boolean(name='OutputCharInfo', description='是否输出单字识别结果'),
  needRotate?: boolean(name='NeedRotate', description='是否需要自动旋转功能(结构化检测、混贴场景、教育相关场景会自动做旋转，无需设置)，返回角度信息'),
  outputTable?: boolean(name='OutputTable', description='是否输出表格识别结果，包含单元格信息'),
  needSortPage?: boolean(name='NeedSortPage', description='是否按顺序输出文字块。false表示从左往右，从上到下的顺序；true表示从上到下，从左往右的顺序'),
}

model RecognizeHandwritingResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeHandwritingResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeHandwritingResponseBody(name='body'),
}

async function recognizeHandwritingWithOptions(request: RecognizeHandwritingRequest, runtime: Util.RuntimeOptions): RecognizeHandwritingResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeHandwriting', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeHandwriting(request: RecognizeHandwritingRequest): RecognizeHandwritingResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeHandwritingWithOptions(request, runtime);
}

model RecognizeAirItineraryRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeAirItineraryResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeAirItineraryResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeAirItineraryResponseBody(name='body'),
}

async function recognizeAirItineraryWithOptions(request: RecognizeAirItineraryRequest, runtime: Util.RuntimeOptions): RecognizeAirItineraryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeAirItinerary', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeAirItinerary(request: RecognizeAirItineraryRequest): RecognizeAirItineraryResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeAirItineraryWithOptions(request, runtime);
}

model RecognizeJanpaneseRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
  outputCharInfo?: boolean(name='OutputCharInfo', description='是否输出单字识别结果'),
  needRotate?: boolean(name='NeedRotate', description='是否需要自动旋转功能(结构化检测、混贴场景、教育相关场景会自动做旋转，无需设置)，返回角度信息'),
  outputTable?: boolean(name='OutputTable', description='是否输出表格识别结果，包含单元格信息'),
}

model RecognizeJanpaneseResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeJanpaneseResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeJanpaneseResponseBody(name='body'),
}

async function recognizeJanpaneseWithOptions(request: RecognizeJanpaneseRequest, runtime: Util.RuntimeOptions): RecognizeJanpaneseResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeJanpanese', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeJanpanese(request: RecognizeJanpaneseRequest): RecognizeJanpaneseResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeJanpaneseWithOptions(request, runtime);
}

model RecognizeCtwoMedicalDeviceManageLicenseRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeCtwoMedicalDeviceManageLicenseResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeCtwoMedicalDeviceManageLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeCtwoMedicalDeviceManageLicenseResponseBody(name='body'),
}

async function recognizeCtwoMedicalDeviceManageLicenseWithOptions(request: RecognizeCtwoMedicalDeviceManageLicenseRequest, runtime: Util.RuntimeOptions): RecognizeCtwoMedicalDeviceManageLicenseResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeCtwoMedicalDeviceManageLicense', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeCtwoMedicalDeviceManageLicense(request: RecognizeCtwoMedicalDeviceManageLicenseRequest): RecognizeCtwoMedicalDeviceManageLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeCtwoMedicalDeviceManageLicenseWithOptions(request, runtime);
}

model RecognizeThaiRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
  outputCharInfo?: boolean(name='OutputCharInfo', description='是否输出单字识别结果'),
  needRotate?: boolean(name='NeedRotate', description='是否需要自动旋转功能(结构化检测、混贴场景、教育相关场景会自动做旋转，无需设置)，返回角度信息'),
  outputTable?: boolean(name='OutputTable', description='是否输出表格识别结果，包含单元格信息'),
}

model RecognizeThaiResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeThaiResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeThaiResponseBody(name='body'),
}

async function recognizeThaiWithOptions(request: RecognizeThaiRequest, runtime: Util.RuntimeOptions): RecognizeThaiResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeThai', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeThai(request: RecognizeThaiRequest): RecognizeThaiResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeThaiWithOptions(request, runtime);
}

model RecognizeMedicalDeviceManageLicenseRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeMedicalDeviceManageLicenseResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeMedicalDeviceManageLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeMedicalDeviceManageLicenseResponseBody(name='body'),
}

async function recognizeMedicalDeviceManageLicenseWithOptions(request: RecognizeMedicalDeviceManageLicenseRequest, runtime: Util.RuntimeOptions): RecognizeMedicalDeviceManageLicenseResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeMedicalDeviceManageLicense', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeMedicalDeviceManageLicense(request: RecognizeMedicalDeviceManageLicenseRequest): RecognizeMedicalDeviceManageLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeMedicalDeviceManageLicenseWithOptions(request, runtime);
}

model RecognizeLatinRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
  outputCharInfo?: boolean(name='OutputCharInfo', description='是否输出单字识别结果'),
  needRotate?: boolean(name='NeedRotate', description='是否需要自动旋转功能(结构化检测、混贴场景、教育相关场景会自动做旋转，无需设置)，返回角度信息'),
  outputTable?: boolean(name='OutputTable', description='是否输出表格识别结果，包含单元格信息'),
}

model RecognizeLatinResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeLatinResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeLatinResponseBody(name='body'),
}

async function recognizeLatinWithOptions(request: RecognizeLatinRequest, runtime: Util.RuntimeOptions): RecognizeLatinResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeLatin', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeLatin(request: RecognizeLatinRequest): RecognizeLatinResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeLatinWithOptions(request, runtime);
}

model RecognizeInvoiceRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeInvoiceResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeInvoiceResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeInvoiceResponseBody(name='body'),
}

async function recognizeInvoiceWithOptions(request: RecognizeInvoiceRequest, runtime: Util.RuntimeOptions): RecognizeInvoiceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeInvoice', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeInvoice(request: RecognizeInvoiceRequest): RecognizeInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeInvoiceWithOptions(request, runtime);
}

model RecognizeMixedCardsRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeMixedCardsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeMixedCardsResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeMixedCardsResponseBody(name='body'),
}

async function recognizeMixedCardsWithOptions(request: RecognizeMixedCardsRequest, runtime: Util.RuntimeOptions): RecognizeMixedCardsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeMixedCards', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeMixedCards(request: RecognizeMixedCardsRequest): RecognizeMixedCardsResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeMixedCardsWithOptions(request, runtime);
}

model RecognizeWaybillRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeWaybillResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeWaybillResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeWaybillResponseBody(name='body'),
}

async function recognizeWaybillWithOptions(request: RecognizeWaybillRequest, runtime: Util.RuntimeOptions): RecognizeWaybillResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeWaybill', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeWaybill(request: RecognizeWaybillRequest): RecognizeWaybillResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeWaybillWithOptions(request, runtime);
}

model RecognizeCarVinCodeRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeCarVinCodeResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeCarVinCodeResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeCarVinCodeResponseBody(name='body'),
}

async function recognizeCarVinCodeWithOptions(request: RecognizeCarVinCodeRequest, runtime: Util.RuntimeOptions): RecognizeCarVinCodeResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeCarVinCode', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeCarVinCode(request: RecognizeCarVinCodeRequest): RecognizeCarVinCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeCarVinCodeWithOptions(request, runtime);
}

model RecognizeAdvancedRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
  outputCharInfo?: boolean(name='OutputCharInfo', description='是否输出单字识别结果'),
  needRotate?: boolean(name='NeedRotate', description='是否需要自动旋转功能(结构化检测、混贴场景、教育相关场景会自动做旋转，无需设置)，返回角度信息'),
  outputTable?: boolean(name='OutputTable', description='是否输出表格识别结果，包含单元格信息'),
  needSortPage?: boolean(name='NeedSortPage', description='是否按顺序输出文字块。false表示从左往右，从上到下的顺序；true表示从上到下，从左往右的顺序'),
}

model RecognizeAdvancedResponseBody = {
  requestId?: string(name='RequestId', description='请求唯一 ID'),
  data?: string(name='Data', description='返回数据'),
  code?: string(name='Code', description='错误码'),
  message?: string(name='Message', description='错误提示'),
}

model RecognizeAdvancedResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeAdvancedResponseBody(name='body'),
}

async function recognizeAdvancedWithOptions(request: RecognizeAdvancedRequest, runtime: Util.RuntimeOptions): RecognizeAdvancedResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeAdvanced', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeAdvanced(request: RecognizeAdvancedRequest): RecognizeAdvancedResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeAdvancedWithOptions(request, runtime);
}

model RecognizeVehicleLicenseRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeVehicleLicenseResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeVehicleLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeVehicleLicenseResponseBody(name='body'),
}

async function recognizeVehicleLicenseWithOptions(request: RecognizeVehicleLicenseRequest, runtime: Util.RuntimeOptions): RecognizeVehicleLicenseResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeVehicleLicense', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeVehicleLicense(request: RecognizeVehicleLicenseRequest): RecognizeVehicleLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeVehicleLicenseWithOptions(request, runtime);
}

model RecognizeRussianRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
  outputCharInfo?: boolean(name='OutputCharInfo', description='是否输出单字识别结果'),
  needRotate?: boolean(name='NeedRotate', description='是否需要自动旋转功能(结构化检测、混贴场景、教育相关场景会自动做旋转，无需设置)，返回角度信息'),
  outputTable?: boolean(name='OutputTable', description='是否输出表格识别结果，包含单元格信息'),
}

model RecognizeRussianResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeRussianResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeRussianResponseBody(name='body'),
}

async function recognizeRussianWithOptions(request: RecognizeRussianRequest, runtime: Util.RuntimeOptions): RecognizeRussianResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeRussian', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeRussian(request: RecognizeRussianRequest): RecognizeRussianResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeRussianWithOptions(request, runtime);
}

model RecognizeHouseCertificationRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeHouseCertificationResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeHouseCertificationResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeHouseCertificationResponseBody(name='body'),
}

async function recognizeHouseCertificationWithOptions(request: RecognizeHouseCertificationRequest, runtime: Util.RuntimeOptions): RecognizeHouseCertificationResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeHouseCertification', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeHouseCertification(request: RecognizeHouseCertificationRequest): RecognizeHouseCertificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeHouseCertificationWithOptions(request, runtime);
}

model RecognizeBasicRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeBasicResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeBasicResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeBasicResponseBody(name='body'),
}

async function recognizeBasicWithOptions(request: RecognizeBasicRequest, runtime: Util.RuntimeOptions): RecognizeBasicResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeBasic', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeBasic(request: RecognizeBasicRequest): RecognizeBasicResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeBasicWithOptions(request, runtime);
}

model RecognizeBusinessLicenseRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeBusinessLicenseResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeBusinessLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeBusinessLicenseResponseBody(name='body'),
}

async function recognizeBusinessLicenseWithOptions(request: RecognizeBusinessLicenseRequest, runtime: Util.RuntimeOptions): RecognizeBusinessLicenseResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeBusinessLicense', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeBusinessLicense(request: RecognizeBusinessLicenseRequest): RecognizeBusinessLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeBusinessLicenseWithOptions(request, runtime);
}

model RecognizeBankCardRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeBankCardResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeBankCardResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeBankCardResponseBody(name='body'),
}

async function recognizeBankCardWithOptions(request: RecognizeBankCardRequest, runtime: Util.RuntimeOptions): RecognizeBankCardResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeBankCard', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeBankCard(request: RecognizeBankCardRequest): RecognizeBankCardResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeBankCardWithOptions(request, runtime);
}

model RecognizeEduPaperCutRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
  cutType?: string(name='CutType', description='切题类型'),
  imageType?: string(name='ImageType', description='图片类型'),
  subject?: string(name='Subject', description='年级学科'),
  outputOricoord?: boolean(name='OutputOricoord', description='是否输出原图坐标信息(如果图片被做过旋转，图片校正等处理)'),
}

model RecognizeEduPaperCutResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeEduPaperCutResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeEduPaperCutResponseBody(name='body'),
}

async function recognizeEduPaperCutWithOptions(request: RecognizeEduPaperCutRequest, runtime: Util.RuntimeOptions): RecognizeEduPaperCutResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeEduPaperCut', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeEduPaperCut(request: RecognizeEduPaperCutRequest): RecognizeEduPaperCutResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeEduPaperCutWithOptions(request, runtime);
}

model RecognizeHouseholdRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeHouseholdResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeHouseholdResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeHouseholdResponseBody(name='body'),
}

async function recognizeHouseholdWithOptions(request: RecognizeHouseholdRequest, runtime: Util.RuntimeOptions): RecognizeHouseholdResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeHousehold', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeHousehold(request: RecognizeHouseholdRequest): RecognizeHouseholdResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeHouseholdWithOptions(request, runtime);
}

model RecognizeEduQuestionOcrRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
  needRotate?: boolean(name='NeedRotate', description='是否需要自动旋转功能(结构化检测、混贴场景、教育相关场景会自动做旋转，无需设置)，返回角度信息'),
}

model RecognizeEduQuestionOcrResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeEduQuestionOcrResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeEduQuestionOcrResponseBody(name='body'),
}

async function recognizeEduQuestionOcrWithOptions(request: RecognizeEduQuestionOcrRequest, runtime: Util.RuntimeOptions): RecognizeEduQuestionOcrResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeEduQuestionOcr', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeEduQuestionOcr(request: RecognizeEduQuestionOcrRequest): RecognizeEduQuestionOcrResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeEduQuestionOcrWithOptions(request, runtime);
}

model RecognizeTrainInvoiceRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeTrainInvoiceResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeTrainInvoiceResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeTrainInvoiceResponseBody(name='body'),
}

async function recognizeTrainInvoiceWithOptions(request: RecognizeTrainInvoiceRequest, runtime: Util.RuntimeOptions): RecognizeTrainInvoiceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeTrainInvoice', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeTrainInvoice(request: RecognizeTrainInvoiceRequest): RecognizeTrainInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeTrainInvoiceWithOptions(request, runtime);
}

model RecognizeTableOcrRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeTableOcrResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeTableOcrResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeTableOcrResponseBody(name='body'),
}

async function recognizeTableOcrWithOptions(request: RecognizeTableOcrRequest, runtime: Util.RuntimeOptions): RecognizeTableOcrResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeTableOcr', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeTableOcr(request: RecognizeTableOcrRequest): RecognizeTableOcrResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeTableOcrWithOptions(request, runtime);
}

model RecognizeEnglishRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
  needRotate?: boolean(name='NeedRotate', description='是否需要自动旋转功能(结构化检测、混贴场景、教育相关场景会自动做旋转，无需设置)，返回角度信息'),
  outputTable?: boolean(name='OutputTable', description='是否输出表格识别结果，包含单元格信息'),
}

model RecognizeEnglishResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeEnglishResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeEnglishResponseBody(name='body'),
}

async function recognizeEnglishWithOptions(request: RecognizeEnglishRequest, runtime: Util.RuntimeOptions): RecognizeEnglishResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeEnglish', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeEnglish(request: RecognizeEnglishRequest): RecognizeEnglishResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeEnglishWithOptions(request, runtime);
}

model RecognizeMultiLanguageRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
  languages?: [ string ](name='Languages', description='识别语种'),
  outputCharInfo?: boolean(name='OutputCharInfo', description='是否输出单字识别结果'),
  needRotate?: boolean(name='NeedRotate', description='是否需要自动旋转功能(结构化检测、混贴场景、教育相关场景会自动做旋转，无需设置)，返回角度信息'),
  outputTable?: boolean(name='OutputTable', description='是否输出表格识别结果，包含单元格信息'),
  needSortPage?: boolean(name='NeedSortPage', description='是否按顺序输出文字块。false表示从左往右，从上到下的顺序；true表示从上到下，从左往右的顺序'),
}

model RecognizeMultiLanguageShrinkRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
  languagesShrink?: string(name='Languages', description='识别语种'),
  outputCharInfo?: boolean(name='OutputCharInfo', description='是否输出单字识别结果'),
  needRotate?: boolean(name='NeedRotate', description='是否需要自动旋转功能(结构化检测、混贴场景、教育相关场景会自动做旋转，无需设置)，返回角度信息'),
  outputTable?: boolean(name='OutputTable', description='是否输出表格识别结果，包含单元格信息'),
  needSortPage?: boolean(name='NeedSortPage', description='是否按顺序输出文字块。false表示从左往右，从上到下的顺序；true表示从上到下，从左往右的顺序'),
}

model RecognizeMultiLanguageResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeMultiLanguageResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeMultiLanguageResponseBody(name='body'),
}

async function recognizeMultiLanguageWithOptions(tmpReq: RecognizeMultiLanguageRequest, runtime: Util.RuntimeOptions): RecognizeMultiLanguageResponse {
  Util.validateModel(tmpReq);
  var request = new RecognizeMultiLanguageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.languages)) {
    request.languagesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.languages, 'Languages', 'simple');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeMultiLanguage', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeMultiLanguage(request: RecognizeMultiLanguageRequest): RecognizeMultiLanguageResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeMultiLanguageWithOptions(request, runtime);
}

model RecognizeEduOralCalculationRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeEduOralCalculationResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeEduOralCalculationResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeEduOralCalculationResponseBody(name='body'),
}

async function recognizeEduOralCalculationWithOptions(request: RecognizeEduOralCalculationRequest, runtime: Util.RuntimeOptions): RecognizeEduOralCalculationResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeEduOralCalculation', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeEduOralCalculation(request: RecognizeEduOralCalculationRequest): RecognizeEduOralCalculationResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeEduOralCalculationWithOptions(request, runtime);
}

model RecognizeQuotaInvoiceRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeQuotaInvoiceResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeQuotaInvoiceResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeQuotaInvoiceResponseBody(name='body'),
}

async function recognizeQuotaInvoiceWithOptions(request: RecognizeQuotaInvoiceRequest, runtime: Util.RuntimeOptions): RecognizeQuotaInvoiceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeQuotaInvoice', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeQuotaInvoice(request: RecognizeQuotaInvoiceRequest): RecognizeQuotaInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeQuotaInvoiceWithOptions(request, runtime);
}

model RecognizeGeneralRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeGeneralResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeGeneralResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeGeneralResponseBody(name='body'),
}

async function recognizeGeneralWithOptions(request: RecognizeGeneralRequest, runtime: Util.RuntimeOptions): RecognizeGeneralResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeGeneral', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeGeneral(request: RecognizeGeneralRequest): RecognizeGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeGeneralWithOptions(request, runtime);
}

model RecognizeEduPaperStructedRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
  needRotate?: boolean(name='NeedRotate', description='是否需要自动旋转功能(结构化检测、混贴场景、教育相关场景会自动做旋转，无需设置)，返回角度信息'),
}

model RecognizeEduPaperStructedResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeEduPaperStructedResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeEduPaperStructedResponseBody(name='body'),
}

async function recognizeEduPaperStructedWithOptions(request: RecognizeEduPaperStructedRequest, runtime: Util.RuntimeOptions): RecognizeEduPaperStructedResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeEduPaperStructed', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeEduPaperStructed(request: RecognizeEduPaperStructedRequest): RecognizeEduPaperStructedResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeEduPaperStructedWithOptions(request, runtime);
}

model RecognizeIdcardRequest {
  url?: string(name='Url', description='图片链接（长度不超 1014，不支持 base64）'),
}

model RecognizeIdcardResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecognizeIdcardResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeIdcardResponseBody(name='body'),
}

async function recognizeIdcardWithOptions(request: RecognizeIdcardRequest, runtime: Util.RuntimeOptions): RecognizeIdcardResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RecognizeIdcard', '2021-07-07', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function recognizeIdcard(request: RecognizeIdcardRequest): RecognizeIdcardResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeIdcardWithOptions(request, runtime);
}

