/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('ocr-api', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model RecognizeAdvancedRequest {
  needRotate?: boolean(name='NeedRotate'),
  needSortPage?: boolean(name='NeedSortPage'),
  noStamp?: boolean(name='NoStamp'),
  outputCharInfo?: boolean(name='OutputCharInfo'),
  outputFigure?: boolean(name='OutputFigure'),
  outputTable?: boolean(name='OutputTable'),
  paragraph?: boolean(name='Paragraph'),
  row?: boolean(name='Row'),
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeAdvancedResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeAdvancedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeAdvancedResponseBody(name='body'),
}

async function recognizeAdvancedWithOptions(request: RecognizeAdvancedRequest, runtime: Util.RuntimeOptions): RecognizeAdvancedResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.needRotate)) {
    query['NeedRotate'] = request.needRotate;
  }
  if (!Util.isUnset(request.needSortPage)) {
    query['NeedSortPage'] = request.needSortPage;
  }
  if (!Util.isUnset(request.noStamp)) {
    query['NoStamp'] = request.noStamp;
  }
  if (!Util.isUnset(request.outputCharInfo)) {
    query['OutputCharInfo'] = request.outputCharInfo;
  }
  if (!Util.isUnset(request.outputFigure)) {
    query['OutputFigure'] = request.outputFigure;
  }
  if (!Util.isUnset(request.outputTable)) {
    query['OutputTable'] = request.outputTable;
  }
  if (!Util.isUnset(request.paragraph)) {
    query['Paragraph'] = request.paragraph;
  }
  if (!Util.isUnset(request.row)) {
    query['Row'] = request.row;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeAdvanced',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeAdvanced(request: RecognizeAdvancedRequest): RecognizeAdvancedResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeAdvancedWithOptions(request, runtime);
}

model RecognizeAirItineraryRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeAirItineraryResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeAirItineraryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeAirItineraryResponseBody(name='body'),
}

async function recognizeAirItineraryWithOptions(request: RecognizeAirItineraryRequest, runtime: Util.RuntimeOptions): RecognizeAirItineraryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeAirItinerary',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeAirItinerary(request: RecognizeAirItineraryRequest): RecognizeAirItineraryResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeAirItineraryWithOptions(request, runtime);
}

model RecognizeBankAcceptanceRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeBankAcceptanceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeBankAcceptanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeBankAcceptanceResponseBody(name='body'),
}

async function recognizeBankAcceptanceWithOptions(request: RecognizeBankAcceptanceRequest, runtime: Util.RuntimeOptions): RecognizeBankAcceptanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeBankAcceptance',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeBankAcceptance(request: RecognizeBankAcceptanceRequest): RecognizeBankAcceptanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeBankAcceptanceWithOptions(request, runtime);
}

model RecognizeBankAccountLicenseRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeBankAccountLicenseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeBankAccountLicenseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeBankAccountLicenseResponseBody(name='body'),
}

async function recognizeBankAccountLicenseWithOptions(request: RecognizeBankAccountLicenseRequest, runtime: Util.RuntimeOptions): RecognizeBankAccountLicenseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeBankAccountLicense',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeBankAccountLicense(request: RecognizeBankAccountLicenseRequest): RecognizeBankAccountLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeBankAccountLicenseWithOptions(request, runtime);
}

model RecognizeBankCardRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeBankCardResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeBankCardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeBankCardResponseBody(name='body'),
}

async function recognizeBankCardWithOptions(request: RecognizeBankCardRequest, runtime: Util.RuntimeOptions): RecognizeBankCardResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeBankCard',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeBankCard(request: RecognizeBankCardRequest): RecognizeBankCardResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeBankCardWithOptions(request, runtime);
}

model RecognizeBasicRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeBasicResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeBasicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeBasicResponseBody(name='body'),
}

async function recognizeBasicWithOptions(request: RecognizeBasicRequest, runtime: Util.RuntimeOptions): RecognizeBasicResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeBasic',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeBasic(request: RecognizeBasicRequest): RecognizeBasicResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeBasicWithOptions(request, runtime);
}

model RecognizeBirthCertificationRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeBirthCertificationResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeBirthCertificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeBirthCertificationResponseBody(name='body'),
}

async function recognizeBirthCertificationWithOptions(request: RecognizeBirthCertificationRequest, runtime: Util.RuntimeOptions): RecognizeBirthCertificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeBirthCertification',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeBirthCertification(request: RecognizeBirthCertificationRequest): RecognizeBirthCertificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeBirthCertificationWithOptions(request, runtime);
}

model RecognizeBusShipTicketRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeBusShipTicketResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeBusShipTicketResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeBusShipTicketResponseBody(name='body'),
}

async function recognizeBusShipTicketWithOptions(request: RecognizeBusShipTicketRequest, runtime: Util.RuntimeOptions): RecognizeBusShipTicketResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeBusShipTicket',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeBusShipTicket(request: RecognizeBusShipTicketRequest): RecognizeBusShipTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeBusShipTicketWithOptions(request, runtime);
}

model RecognizeBusinessLicenseRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeBusinessLicenseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeBusinessLicenseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeBusinessLicenseResponseBody(name='body'),
}

async function recognizeBusinessLicenseWithOptions(request: RecognizeBusinessLicenseRequest, runtime: Util.RuntimeOptions): RecognizeBusinessLicenseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeBusinessLicense',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeBusinessLicense(request: RecognizeBusinessLicenseRequest): RecognizeBusinessLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeBusinessLicenseWithOptions(request, runtime);
}

model RecognizeCarInvoiceRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeCarInvoiceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeCarInvoiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeCarInvoiceResponseBody(name='body'),
}

async function recognizeCarInvoiceWithOptions(request: RecognizeCarInvoiceRequest, runtime: Util.RuntimeOptions): RecognizeCarInvoiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeCarInvoice',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeCarInvoice(request: RecognizeCarInvoiceRequest): RecognizeCarInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeCarInvoiceWithOptions(request, runtime);
}

model RecognizeCarNumberRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeCarNumberResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeCarNumberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeCarNumberResponseBody(name='body'),
}

async function recognizeCarNumberWithOptions(request: RecognizeCarNumberRequest, runtime: Util.RuntimeOptions): RecognizeCarNumberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeCarNumber',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeCarNumber(request: RecognizeCarNumberRequest): RecognizeCarNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeCarNumberWithOptions(request, runtime);
}

model RecognizeCarVinCodeRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeCarVinCodeResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeCarVinCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeCarVinCodeResponseBody(name='body'),
}

async function recognizeCarVinCodeWithOptions(request: RecognizeCarVinCodeRequest, runtime: Util.RuntimeOptions): RecognizeCarVinCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeCarVinCode',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeCarVinCode(request: RecognizeCarVinCodeRequest): RecognizeCarVinCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeCarVinCodeWithOptions(request, runtime);
}

model RecognizeChinesePassportRequest {
  outputFigure?: boolean(name='OutputFigure'),
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeChinesePassportResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeChinesePassportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeChinesePassportResponseBody(name='body'),
}

async function recognizeChinesePassportWithOptions(request: RecognizeChinesePassportRequest, runtime: Util.RuntimeOptions): RecognizeChinesePassportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.outputFigure)) {
    query['OutputFigure'] = request.outputFigure;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeChinesePassport',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeChinesePassport(request: RecognizeChinesePassportRequest): RecognizeChinesePassportResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeChinesePassportWithOptions(request, runtime);
}

model RecognizeCommonPrintedInvoiceRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeCommonPrintedInvoiceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeCommonPrintedInvoiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeCommonPrintedInvoiceResponseBody(name='body'),
}

async function recognizeCommonPrintedInvoiceWithOptions(request: RecognizeCommonPrintedInvoiceRequest, runtime: Util.RuntimeOptions): RecognizeCommonPrintedInvoiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeCommonPrintedInvoice',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeCommonPrintedInvoice(request: RecognizeCommonPrintedInvoiceRequest): RecognizeCommonPrintedInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeCommonPrintedInvoiceWithOptions(request, runtime);
}

model RecognizeCosmeticProduceLicenseRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeCosmeticProduceLicenseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeCosmeticProduceLicenseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeCosmeticProduceLicenseResponseBody(name='body'),
}

async function recognizeCosmeticProduceLicenseWithOptions(request: RecognizeCosmeticProduceLicenseRequest, runtime: Util.RuntimeOptions): RecognizeCosmeticProduceLicenseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeCosmeticProduceLicense',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeCosmeticProduceLicense(request: RecognizeCosmeticProduceLicenseRequest): RecognizeCosmeticProduceLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeCosmeticProduceLicenseWithOptions(request, runtime);
}

model RecognizeCovidTestReportRequest {
  multipleResult?: boolean(name='MultipleResult'),
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeCovidTestReportResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeCovidTestReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeCovidTestReportResponseBody(name='body'),
}

async function recognizeCovidTestReportWithOptions(request: RecognizeCovidTestReportRequest, runtime: Util.RuntimeOptions): RecognizeCovidTestReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.multipleResult)) {
    query['MultipleResult'] = request.multipleResult;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeCovidTestReport',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeCovidTestReport(request: RecognizeCovidTestReportRequest): RecognizeCovidTestReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeCovidTestReportWithOptions(request, runtime);
}

model RecognizeCtwoMedicalDeviceManageLicenseRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeCtwoMedicalDeviceManageLicenseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeCtwoMedicalDeviceManageLicenseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeCtwoMedicalDeviceManageLicenseResponseBody(name='body'),
}

async function recognizeCtwoMedicalDeviceManageLicenseWithOptions(request: RecognizeCtwoMedicalDeviceManageLicenseRequest, runtime: Util.RuntimeOptions): RecognizeCtwoMedicalDeviceManageLicenseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeCtwoMedicalDeviceManageLicense',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeCtwoMedicalDeviceManageLicense(request: RecognizeCtwoMedicalDeviceManageLicenseRequest): RecognizeCtwoMedicalDeviceManageLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeCtwoMedicalDeviceManageLicenseWithOptions(request, runtime);
}

model RecognizeDocumentStructureRequest {
  needRotate?: boolean(name='NeedRotate'),
  needSortPage?: boolean(name='NeedSortPage'),
  noStamp?: boolean(name='NoStamp'),
  outputCharInfo?: boolean(name='OutputCharInfo'),
  outputTable?: boolean(name='OutputTable'),
  page?: boolean(name='Page'),
  paragraph?: boolean(name='Paragraph'),
  row?: boolean(name='Row'),
  url?: string(name='Url'),
  useNewStyleOutput?: boolean(name='UseNewStyleOutput'),
  body?: readable(name='body'),
}

model RecognizeDocumentStructureResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeDocumentStructureResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeDocumentStructureResponseBody(name='body'),
}

async function recognizeDocumentStructureWithOptions(request: RecognizeDocumentStructureRequest, runtime: Util.RuntimeOptions): RecognizeDocumentStructureResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.needRotate)) {
    query['NeedRotate'] = request.needRotate;
  }
  if (!Util.isUnset(request.needSortPage)) {
    query['NeedSortPage'] = request.needSortPage;
  }
  if (!Util.isUnset(request.noStamp)) {
    query['NoStamp'] = request.noStamp;
  }
  if (!Util.isUnset(request.outputCharInfo)) {
    query['OutputCharInfo'] = request.outputCharInfo;
  }
  if (!Util.isUnset(request.outputTable)) {
    query['OutputTable'] = request.outputTable;
  }
  if (!Util.isUnset(request.page)) {
    query['Page'] = request.page;
  }
  if (!Util.isUnset(request.paragraph)) {
    query['Paragraph'] = request.paragraph;
  }
  if (!Util.isUnset(request.row)) {
    query['Row'] = request.row;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  if (!Util.isUnset(request.useNewStyleOutput)) {
    query['UseNewStyleOutput'] = request.useNewStyleOutput;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeDocumentStructure',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeDocumentStructure(request: RecognizeDocumentStructureRequest): RecognizeDocumentStructureResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeDocumentStructureWithOptions(request, runtime);
}

model RecognizeDrivingLicenseRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeDrivingLicenseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeDrivingLicenseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeDrivingLicenseResponseBody(name='body'),
}

async function recognizeDrivingLicenseWithOptions(request: RecognizeDrivingLicenseRequest, runtime: Util.RuntimeOptions): RecognizeDrivingLicenseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeDrivingLicense',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeDrivingLicense(request: RecognizeDrivingLicenseRequest): RecognizeDrivingLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeDrivingLicenseWithOptions(request, runtime);
}

model RecognizeEduFormulaRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeEduFormulaResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeEduFormulaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeEduFormulaResponseBody(name='body'),
}

async function recognizeEduFormulaWithOptions(request: RecognizeEduFormulaRequest, runtime: Util.RuntimeOptions): RecognizeEduFormulaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeEduFormula',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeEduFormula(request: RecognizeEduFormulaRequest): RecognizeEduFormulaResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeEduFormulaWithOptions(request, runtime);
}

model RecognizeEduOralCalculationRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeEduOralCalculationResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeEduOralCalculationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeEduOralCalculationResponseBody(name='body'),
}

async function recognizeEduOralCalculationWithOptions(request: RecognizeEduOralCalculationRequest, runtime: Util.RuntimeOptions): RecognizeEduOralCalculationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeEduOralCalculation',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeEduOralCalculation(request: RecognizeEduOralCalculationRequest): RecognizeEduOralCalculationResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeEduOralCalculationWithOptions(request, runtime);
}

model RecognizeEduPaperCutRequest {
  cutType?: string(name='CutType'),
  imageType?: string(name='ImageType'),
  subject?: string(name='Subject'),
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeEduPaperCutResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeEduPaperCutResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeEduPaperCutResponseBody(name='body'),
}

async function recognizeEduPaperCutWithOptions(request: RecognizeEduPaperCutRequest, runtime: Util.RuntimeOptions): RecognizeEduPaperCutResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cutType)) {
    query['CutType'] = request.cutType;
  }
  if (!Util.isUnset(request.imageType)) {
    query['ImageType'] = request.imageType;
  }
  if (!Util.isUnset(request.subject)) {
    query['Subject'] = request.subject;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeEduPaperCut',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeEduPaperCut(request: RecognizeEduPaperCutRequest): RecognizeEduPaperCutResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeEduPaperCutWithOptions(request, runtime);
}

model RecognizeEduPaperOcrRequest {
  imageType?: string(name='ImageType'),
  outputOricoord?: boolean(name='OutputOricoord'),
  subject?: string(name='Subject'),
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeEduPaperOcrResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeEduPaperOcrResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeEduPaperOcrResponseBody(name='body'),
}

async function recognizeEduPaperOcrWithOptions(request: RecognizeEduPaperOcrRequest, runtime: Util.RuntimeOptions): RecognizeEduPaperOcrResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageType)) {
    query['ImageType'] = request.imageType;
  }
  if (!Util.isUnset(request.outputOricoord)) {
    query['OutputOricoord'] = request.outputOricoord;
  }
  if (!Util.isUnset(request.subject)) {
    query['Subject'] = request.subject;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeEduPaperOcr',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeEduPaperOcr(request: RecognizeEduPaperOcrRequest): RecognizeEduPaperOcrResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeEduPaperOcrWithOptions(request, runtime);
}

model RecognizeEduPaperStructedRequest {
  needRotate?: boolean(name='NeedRotate'),
  subject?: string(name='Subject'),
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeEduPaperStructedResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeEduPaperStructedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeEduPaperStructedResponseBody(name='body'),
}

async function recognizeEduPaperStructedWithOptions(request: RecognizeEduPaperStructedRequest, runtime: Util.RuntimeOptions): RecognizeEduPaperStructedResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.needRotate)) {
    query['NeedRotate'] = request.needRotate;
  }
  if (!Util.isUnset(request.subject)) {
    query['Subject'] = request.subject;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeEduPaperStructed',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeEduPaperStructed(request: RecognizeEduPaperStructedRequest): RecognizeEduPaperStructedResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeEduPaperStructedWithOptions(request, runtime);
}

model RecognizeEduQuestionOcrRequest {
  needRotate?: boolean(name='NeedRotate'),
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeEduQuestionOcrResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeEduQuestionOcrResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeEduQuestionOcrResponseBody(name='body'),
}

async function recognizeEduQuestionOcrWithOptions(request: RecognizeEduQuestionOcrRequest, runtime: Util.RuntimeOptions): RecognizeEduQuestionOcrResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.needRotate)) {
    query['NeedRotate'] = request.needRotate;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeEduQuestionOcr',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeEduQuestionOcr(request: RecognizeEduQuestionOcrRequest): RecognizeEduQuestionOcrResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeEduQuestionOcrWithOptions(request, runtime);
}

model RecognizeEnglishRequest {
  needRotate?: boolean(name='NeedRotate'),
  outputTable?: boolean(name='OutputTable'),
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeEnglishResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeEnglishResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeEnglishResponseBody(name='body'),
}

async function recognizeEnglishWithOptions(request: RecognizeEnglishRequest, runtime: Util.RuntimeOptions): RecognizeEnglishResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.needRotate)) {
    query['NeedRotate'] = request.needRotate;
  }
  if (!Util.isUnset(request.outputTable)) {
    query['OutputTable'] = request.outputTable;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeEnglish',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeEnglish(request: RecognizeEnglishRequest): RecognizeEnglishResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeEnglishWithOptions(request, runtime);
}

model RecognizeEstateCertificationRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeEstateCertificationResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeEstateCertificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeEstateCertificationResponseBody(name='body'),
}

async function recognizeEstateCertificationWithOptions(request: RecognizeEstateCertificationRequest, runtime: Util.RuntimeOptions): RecognizeEstateCertificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeEstateCertification',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeEstateCertification(request: RecognizeEstateCertificationRequest): RecognizeEstateCertificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeEstateCertificationWithOptions(request, runtime);
}

model RecognizeExitEntryPermitToHKRequest {
  outputFigure?: boolean(name='OutputFigure'),
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeExitEntryPermitToHKResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeExitEntryPermitToHKResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeExitEntryPermitToHKResponseBody(name='body'),
}

async function recognizeExitEntryPermitToHKWithOptions(request: RecognizeExitEntryPermitToHKRequest, runtime: Util.RuntimeOptions): RecognizeExitEntryPermitToHKResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.outputFigure)) {
    query['OutputFigure'] = request.outputFigure;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeExitEntryPermitToHK',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeExitEntryPermitToHK(request: RecognizeExitEntryPermitToHKRequest): RecognizeExitEntryPermitToHKResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeExitEntryPermitToHKWithOptions(request, runtime);
}

model RecognizeExitEntryPermitToMainlandRequest {
  outputFigure?: boolean(name='OutputFigure'),
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeExitEntryPermitToMainlandResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeExitEntryPermitToMainlandResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeExitEntryPermitToMainlandResponseBody(name='body'),
}

async function recognizeExitEntryPermitToMainlandWithOptions(request: RecognizeExitEntryPermitToMainlandRequest, runtime: Util.RuntimeOptions): RecognizeExitEntryPermitToMainlandResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.outputFigure)) {
    query['OutputFigure'] = request.outputFigure;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeExitEntryPermitToMainland',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeExitEntryPermitToMainland(request: RecognizeExitEntryPermitToMainlandRequest): RecognizeExitEntryPermitToMainlandResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeExitEntryPermitToMainlandWithOptions(request, runtime);
}

model RecognizeFoodManageLicenseRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeFoodManageLicenseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeFoodManageLicenseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeFoodManageLicenseResponseBody(name='body'),
}

async function recognizeFoodManageLicenseWithOptions(request: RecognizeFoodManageLicenseRequest, runtime: Util.RuntimeOptions): RecognizeFoodManageLicenseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeFoodManageLicense',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeFoodManageLicense(request: RecognizeFoodManageLicenseRequest): RecognizeFoodManageLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeFoodManageLicenseWithOptions(request, runtime);
}

model RecognizeFoodProduceLicenseRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeFoodProduceLicenseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeFoodProduceLicenseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeFoodProduceLicenseResponseBody(name='body'),
}

async function recognizeFoodProduceLicenseWithOptions(request: RecognizeFoodProduceLicenseRequest, runtime: Util.RuntimeOptions): RecognizeFoodProduceLicenseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeFoodProduceLicense',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeFoodProduceLicense(request: RecognizeFoodProduceLicenseRequest): RecognizeFoodProduceLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeFoodProduceLicenseWithOptions(request, runtime);
}

model RecognizeGeneralRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeGeneralResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeGeneralResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeGeneralResponseBody(name='body'),
}

async function recognizeGeneralWithOptions(request: RecognizeGeneralRequest, runtime: Util.RuntimeOptions): RecognizeGeneralResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeGeneral',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeGeneral(request: RecognizeGeneralRequest): RecognizeGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeGeneralWithOptions(request, runtime);
}

model RecognizeHandwritingRequest {
  needRotate?: boolean(name='NeedRotate'),
  needSortPage?: boolean(name='NeedSortPage'),
  outputCharInfo?: boolean(name='OutputCharInfo'),
  outputTable?: boolean(name='OutputTable'),
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeHandwritingResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeHandwritingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeHandwritingResponseBody(name='body'),
}

async function recognizeHandwritingWithOptions(request: RecognizeHandwritingRequest, runtime: Util.RuntimeOptions): RecognizeHandwritingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.needRotate)) {
    query['NeedRotate'] = request.needRotate;
  }
  if (!Util.isUnset(request.needSortPage)) {
    query['NeedSortPage'] = request.needSortPage;
  }
  if (!Util.isUnset(request.outputCharInfo)) {
    query['OutputCharInfo'] = request.outputCharInfo;
  }
  if (!Util.isUnset(request.outputTable)) {
    query['OutputTable'] = request.outputTable;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeHandwriting',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeHandwriting(request: RecognizeHandwritingRequest): RecognizeHandwritingResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeHandwritingWithOptions(request, runtime);
}

model RecognizeHealthCodeRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeHealthCodeResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeHealthCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeHealthCodeResponseBody(name='body'),
}

async function recognizeHealthCodeWithOptions(request: RecognizeHealthCodeRequest, runtime: Util.RuntimeOptions): RecognizeHealthCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeHealthCode',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeHealthCode(request: RecognizeHealthCodeRequest): RecognizeHealthCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeHealthCodeWithOptions(request, runtime);
}

model RecognizeHotelConsumeRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeHotelConsumeResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeHotelConsumeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeHotelConsumeResponseBody(name='body'),
}

async function recognizeHotelConsumeWithOptions(request: RecognizeHotelConsumeRequest, runtime: Util.RuntimeOptions): RecognizeHotelConsumeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeHotelConsume',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeHotelConsume(request: RecognizeHotelConsumeRequest): RecognizeHotelConsumeResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeHotelConsumeWithOptions(request, runtime);
}

model RecognizeHouseholdRequest {
  isResidentPage?: boolean(name='IsResidentPage'),
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeHouseholdResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeHouseholdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeHouseholdResponseBody(name='body'),
}

async function recognizeHouseholdWithOptions(request: RecognizeHouseholdRequest, runtime: Util.RuntimeOptions): RecognizeHouseholdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.isResidentPage)) {
    query['IsResidentPage'] = request.isResidentPage;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeHousehold',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeHousehold(request: RecognizeHouseholdRequest): RecognizeHouseholdResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeHouseholdWithOptions(request, runtime);
}

model RecognizeIdcardRequest {
  outputFigure?: boolean(name='OutputFigure'),
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeIdcardResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeIdcardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeIdcardResponseBody(name='body'),
}

async function recognizeIdcardWithOptions(request: RecognizeIdcardRequest, runtime: Util.RuntimeOptions): RecognizeIdcardResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.outputFigure)) {
    query['OutputFigure'] = request.outputFigure;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeIdcard',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeIdcard(request: RecognizeIdcardRequest): RecognizeIdcardResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeIdcardWithOptions(request, runtime);
}

model RecognizeInternationalIdcardRequest {
  country?: string(name='Country'),
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeInternationalIdcardResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeInternationalIdcardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeInternationalIdcardResponseBody(name='body'),
}

async function recognizeInternationalIdcardWithOptions(request: RecognizeInternationalIdcardRequest, runtime: Util.RuntimeOptions): RecognizeInternationalIdcardResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.country)) {
    query['Country'] = request.country;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeInternationalIdcard',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeInternationalIdcard(request: RecognizeInternationalIdcardRequest): RecognizeInternationalIdcardResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeInternationalIdcardWithOptions(request, runtime);
}

model RecognizeInvoiceRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeInvoiceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeInvoiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeInvoiceResponseBody(name='body'),
}

async function recognizeInvoiceWithOptions(request: RecognizeInvoiceRequest, runtime: Util.RuntimeOptions): RecognizeInvoiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeInvoice',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeInvoice(request: RecognizeInvoiceRequest): RecognizeInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeInvoiceWithOptions(request, runtime);
}

model RecognizeJanpaneseRequest {
  needRotate?: boolean(name='NeedRotate'),
  outputCharInfo?: boolean(name='OutputCharInfo'),
  outputTable?: boolean(name='OutputTable'),
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeJanpaneseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeJanpaneseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeJanpaneseResponseBody(name='body'),
}

async function recognizeJanpaneseWithOptions(request: RecognizeJanpaneseRequest, runtime: Util.RuntimeOptions): RecognizeJanpaneseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.needRotate)) {
    query['NeedRotate'] = request.needRotate;
  }
  if (!Util.isUnset(request.outputCharInfo)) {
    query['OutputCharInfo'] = request.outputCharInfo;
  }
  if (!Util.isUnset(request.outputTable)) {
    query['OutputTable'] = request.outputTable;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeJanpanese',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeJanpanese(request: RecognizeJanpaneseRequest): RecognizeJanpaneseResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeJanpaneseWithOptions(request, runtime);
}

model RecognizeKoreanRequest {
  needRotate?: boolean(name='NeedRotate'),
  outputCharInfo?: boolean(name='OutputCharInfo'),
  outputTable?: boolean(name='OutputTable'),
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeKoreanResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeKoreanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeKoreanResponseBody(name='body'),
}

async function recognizeKoreanWithOptions(request: RecognizeKoreanRequest, runtime: Util.RuntimeOptions): RecognizeKoreanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.needRotate)) {
    query['NeedRotate'] = request.needRotate;
  }
  if (!Util.isUnset(request.outputCharInfo)) {
    query['OutputCharInfo'] = request.outputCharInfo;
  }
  if (!Util.isUnset(request.outputTable)) {
    query['OutputTable'] = request.outputTable;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeKorean',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeKorean(request: RecognizeKoreanRequest): RecognizeKoreanResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeKoreanWithOptions(request, runtime);
}

model RecognizeLatinRequest {
  needRotate?: boolean(name='NeedRotate'),
  outputCharInfo?: boolean(name='OutputCharInfo'),
  outputTable?: boolean(name='OutputTable'),
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeLatinResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeLatinResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeLatinResponseBody(name='body'),
}

async function recognizeLatinWithOptions(request: RecognizeLatinRequest, runtime: Util.RuntimeOptions): RecognizeLatinResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.needRotate)) {
    query['NeedRotate'] = request.needRotate;
  }
  if (!Util.isUnset(request.outputCharInfo)) {
    query['OutputCharInfo'] = request.outputCharInfo;
  }
  if (!Util.isUnset(request.outputTable)) {
    query['OutputTable'] = request.outputTable;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeLatin',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeLatin(request: RecognizeLatinRequest): RecognizeLatinResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeLatinWithOptions(request, runtime);
}

model RecognizeMedicalDeviceManageLicenseRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeMedicalDeviceManageLicenseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeMedicalDeviceManageLicenseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeMedicalDeviceManageLicenseResponseBody(name='body'),
}

async function recognizeMedicalDeviceManageLicenseWithOptions(request: RecognizeMedicalDeviceManageLicenseRequest, runtime: Util.RuntimeOptions): RecognizeMedicalDeviceManageLicenseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeMedicalDeviceManageLicense',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeMedicalDeviceManageLicense(request: RecognizeMedicalDeviceManageLicenseRequest): RecognizeMedicalDeviceManageLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeMedicalDeviceManageLicenseWithOptions(request, runtime);
}

model RecognizeMedicalDeviceProduceLicenseRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeMedicalDeviceProduceLicenseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeMedicalDeviceProduceLicenseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeMedicalDeviceProduceLicenseResponseBody(name='body'),
}

async function recognizeMedicalDeviceProduceLicenseWithOptions(request: RecognizeMedicalDeviceProduceLicenseRequest, runtime: Util.RuntimeOptions): RecognizeMedicalDeviceProduceLicenseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeMedicalDeviceProduceLicense',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeMedicalDeviceProduceLicense(request: RecognizeMedicalDeviceProduceLicenseRequest): RecognizeMedicalDeviceProduceLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeMedicalDeviceProduceLicenseWithOptions(request, runtime);
}

model RecognizeMixedInvoicesRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeMixedInvoicesResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeMixedInvoicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeMixedInvoicesResponseBody(name='body'),
}

async function recognizeMixedInvoicesWithOptions(request: RecognizeMixedInvoicesRequest, runtime: Util.RuntimeOptions): RecognizeMixedInvoicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeMixedInvoices',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeMixedInvoices(request: RecognizeMixedInvoicesRequest): RecognizeMixedInvoicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeMixedInvoicesWithOptions(request, runtime);
}

model RecognizeMultiLanguageRequest {
  languages?: [ string ](name='Languages'),
  needRotate?: boolean(name='NeedRotate'),
  needSortPage?: boolean(name='NeedSortPage'),
  outputCharInfo?: boolean(name='OutputCharInfo'),
  outputTable?: boolean(name='OutputTable'),
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeMultiLanguageShrinkRequest {
  languagesShrink?: string(name='Languages'),
  needRotate?: boolean(name='NeedRotate'),
  needSortPage?: boolean(name='NeedSortPage'),
  outputCharInfo?: boolean(name='OutputCharInfo'),
  outputTable?: boolean(name='OutputTable'),
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeMultiLanguageResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeMultiLanguageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeMultiLanguageResponseBody(name='body'),
}

async function recognizeMultiLanguageWithOptions(tmpReq: RecognizeMultiLanguageRequest, runtime: Util.RuntimeOptions): RecognizeMultiLanguageResponse {
  Util.validateModel(tmpReq);
  var request = new RecognizeMultiLanguageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.languages)) {
    request.languagesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.languages, 'Languages', 'simple');
  }
  var query = {};
  if (!Util.isUnset(request.languagesShrink)) {
    query['Languages'] = request.languagesShrink;
  }
  if (!Util.isUnset(request.needRotate)) {
    query['NeedRotate'] = request.needRotate;
  }
  if (!Util.isUnset(request.needSortPage)) {
    query['NeedSortPage'] = request.needSortPage;
  }
  if (!Util.isUnset(request.outputCharInfo)) {
    query['OutputCharInfo'] = request.outputCharInfo;
  }
  if (!Util.isUnset(request.outputTable)) {
    query['OutputTable'] = request.outputTable;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = tmpReq.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeMultiLanguage',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeMultiLanguage(request: RecognizeMultiLanguageRequest): RecognizeMultiLanguageResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeMultiLanguageWithOptions(request, runtime);
}

model RecognizeNonTaxInvoiceRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeNonTaxInvoiceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeNonTaxInvoiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeNonTaxInvoiceResponseBody(name='body'),
}

async function recognizeNonTaxInvoiceWithOptions(request: RecognizeNonTaxInvoiceRequest, runtime: Util.RuntimeOptions): RecognizeNonTaxInvoiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeNonTaxInvoice',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeNonTaxInvoice(request: RecognizeNonTaxInvoiceRequest): RecognizeNonTaxInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeNonTaxInvoiceWithOptions(request, runtime);
}

model RecognizePassportRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizePassportResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizePassportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizePassportResponseBody(name='body'),
}

async function recognizePassportWithOptions(request: RecognizePassportRequest, runtime: Util.RuntimeOptions): RecognizePassportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizePassport',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizePassport(request: RecognizePassportRequest): RecognizePassportResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizePassportWithOptions(request, runtime);
}

model RecognizePaymentRecordRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizePaymentRecordResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizePaymentRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizePaymentRecordResponseBody(name='body'),
}

async function recognizePaymentRecordWithOptions(request: RecognizePaymentRecordRequest, runtime: Util.RuntimeOptions): RecognizePaymentRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizePaymentRecord',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizePaymentRecord(request: RecognizePaymentRecordRequest): RecognizePaymentRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizePaymentRecordWithOptions(request, runtime);
}

model RecognizePurchaseRecordRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizePurchaseRecordResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizePurchaseRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizePurchaseRecordResponseBody(name='body'),
}

async function recognizePurchaseRecordWithOptions(request: RecognizePurchaseRecordRequest, runtime: Util.RuntimeOptions): RecognizePurchaseRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizePurchaseRecord',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizePurchaseRecord(request: RecognizePurchaseRecordRequest): RecognizePurchaseRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizePurchaseRecordWithOptions(request, runtime);
}

model RecognizeQuotaInvoiceRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeQuotaInvoiceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeQuotaInvoiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeQuotaInvoiceResponseBody(name='body'),
}

async function recognizeQuotaInvoiceWithOptions(request: RecognizeQuotaInvoiceRequest, runtime: Util.RuntimeOptions): RecognizeQuotaInvoiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeQuotaInvoice',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeQuotaInvoice(request: RecognizeQuotaInvoiceRequest): RecognizeQuotaInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeQuotaInvoiceWithOptions(request, runtime);
}

model RecognizeRideHailingItineraryRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeRideHailingItineraryResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeRideHailingItineraryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeRideHailingItineraryResponseBody(name='body'),
}

async function recognizeRideHailingItineraryWithOptions(request: RecognizeRideHailingItineraryRequest, runtime: Util.RuntimeOptions): RecognizeRideHailingItineraryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeRideHailingItinerary',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeRideHailingItinerary(request: RecognizeRideHailingItineraryRequest): RecognizeRideHailingItineraryResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeRideHailingItineraryWithOptions(request, runtime);
}

model RecognizeRollTicketRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeRollTicketResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeRollTicketResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeRollTicketResponseBody(name='body'),
}

async function recognizeRollTicketWithOptions(request: RecognizeRollTicketRequest, runtime: Util.RuntimeOptions): RecognizeRollTicketResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeRollTicket',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeRollTicket(request: RecognizeRollTicketRequest): RecognizeRollTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeRollTicketWithOptions(request, runtime);
}

model RecognizeRussianRequest {
  needRotate?: boolean(name='NeedRotate'),
  outputCharInfo?: boolean(name='OutputCharInfo'),
  outputTable?: boolean(name='OutputTable'),
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeRussianResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeRussianResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeRussianResponseBody(name='body'),
}

async function recognizeRussianWithOptions(request: RecognizeRussianRequest, runtime: Util.RuntimeOptions): RecognizeRussianResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.needRotate)) {
    query['NeedRotate'] = request.needRotate;
  }
  if (!Util.isUnset(request.outputCharInfo)) {
    query['OutputCharInfo'] = request.outputCharInfo;
  }
  if (!Util.isUnset(request.outputTable)) {
    query['OutputTable'] = request.outputTable;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeRussian',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeRussian(request: RecognizeRussianRequest): RecognizeRussianResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeRussianWithOptions(request, runtime);
}

model RecognizeShoppingReceiptRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeShoppingReceiptResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeShoppingReceiptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeShoppingReceiptResponseBody(name='body'),
}

async function recognizeShoppingReceiptWithOptions(request: RecognizeShoppingReceiptRequest, runtime: Util.RuntimeOptions): RecognizeShoppingReceiptResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeShoppingReceipt',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeShoppingReceipt(request: RecognizeShoppingReceiptRequest): RecognizeShoppingReceiptResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeShoppingReceiptWithOptions(request, runtime);
}

model RecognizeSocialSecurityCardRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeSocialSecurityCardResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeSocialSecurityCardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeSocialSecurityCardResponseBody(name='body'),
}

async function recognizeSocialSecurityCardWithOptions(request: RecognizeSocialSecurityCardRequest, runtime: Util.RuntimeOptions): RecognizeSocialSecurityCardResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeSocialSecurityCard',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeSocialSecurityCard(request: RecognizeSocialSecurityCardRequest): RecognizeSocialSecurityCardResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeSocialSecurityCardWithOptions(request, runtime);
}

model RecognizeSocialSecurityCardVersionIIRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeSocialSecurityCardVersionIIResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeSocialSecurityCardVersionIIResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeSocialSecurityCardVersionIIResponseBody(name='body'),
}

async function recognizeSocialSecurityCardVersionIIWithOptions(request: RecognizeSocialSecurityCardVersionIIRequest, runtime: Util.RuntimeOptions): RecognizeSocialSecurityCardVersionIIResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeSocialSecurityCardVersionII',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeSocialSecurityCardVersionII(request: RecognizeSocialSecurityCardVersionIIRequest): RecognizeSocialSecurityCardVersionIIResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeSocialSecurityCardVersionIIWithOptions(request, runtime);
}

model RecognizeTableOcrRequest {
  lineLess?: boolean(name='LineLess'),
  needRotate?: boolean(name='NeedRotate'),
  skipDetection?: boolean(name='SkipDetection'),
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeTableOcrResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeTableOcrResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeTableOcrResponseBody(name='body'),
}

async function recognizeTableOcrWithOptions(request: RecognizeTableOcrRequest, runtime: Util.RuntimeOptions): RecognizeTableOcrResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lineLess)) {
    query['LineLess'] = request.lineLess;
  }
  if (!Util.isUnset(request.needRotate)) {
    query['NeedRotate'] = request.needRotate;
  }
  if (!Util.isUnset(request.skipDetection)) {
    query['SkipDetection'] = request.skipDetection;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeTableOcr',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeTableOcr(request: RecognizeTableOcrRequest): RecognizeTableOcrResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeTableOcrWithOptions(request, runtime);
}

model RecognizeTaxClearanceCertificateRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeTaxClearanceCertificateResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeTaxClearanceCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeTaxClearanceCertificateResponseBody(name='body'),
}

async function recognizeTaxClearanceCertificateWithOptions(request: RecognizeTaxClearanceCertificateRequest, runtime: Util.RuntimeOptions): RecognizeTaxClearanceCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeTaxClearanceCertificate',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeTaxClearanceCertificate(request: RecognizeTaxClearanceCertificateRequest): RecognizeTaxClearanceCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeTaxClearanceCertificateWithOptions(request, runtime);
}

model RecognizeTaxiInvoiceRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeTaxiInvoiceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeTaxiInvoiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeTaxiInvoiceResponseBody(name='body'),
}

async function recognizeTaxiInvoiceWithOptions(request: RecognizeTaxiInvoiceRequest, runtime: Util.RuntimeOptions): RecognizeTaxiInvoiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeTaxiInvoice',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeTaxiInvoice(request: RecognizeTaxiInvoiceRequest): RecognizeTaxiInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeTaxiInvoiceWithOptions(request, runtime);
}

model RecognizeThaiRequest {
  needRotate?: boolean(name='NeedRotate'),
  outputCharInfo?: boolean(name='OutputCharInfo'),
  outputTable?: boolean(name='OutputTable'),
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeThaiResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeThaiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeThaiResponseBody(name='body'),
}

async function recognizeThaiWithOptions(request: RecognizeThaiRequest, runtime: Util.RuntimeOptions): RecognizeThaiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.needRotate)) {
    query['NeedRotate'] = request.needRotate;
  }
  if (!Util.isUnset(request.outputCharInfo)) {
    query['OutputCharInfo'] = request.outputCharInfo;
  }
  if (!Util.isUnset(request.outputTable)) {
    query['OutputTable'] = request.outputTable;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeThai',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeThai(request: RecognizeThaiRequest): RecognizeThaiResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeThaiWithOptions(request, runtime);
}

model RecognizeTollInvoiceRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeTollInvoiceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeTollInvoiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeTollInvoiceResponseBody(name='body'),
}

async function recognizeTollInvoiceWithOptions(request: RecognizeTollInvoiceRequest, runtime: Util.RuntimeOptions): RecognizeTollInvoiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeTollInvoice',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeTollInvoice(request: RecognizeTollInvoiceRequest): RecognizeTollInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeTollInvoiceWithOptions(request, runtime);
}

model RecognizeTradeMarkCertificationRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeTradeMarkCertificationResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeTradeMarkCertificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeTradeMarkCertificationResponseBody(name='body'),
}

async function recognizeTradeMarkCertificationWithOptions(request: RecognizeTradeMarkCertificationRequest, runtime: Util.RuntimeOptions): RecognizeTradeMarkCertificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeTradeMarkCertification',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeTradeMarkCertification(request: RecognizeTradeMarkCertificationRequest): RecognizeTradeMarkCertificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeTradeMarkCertificationWithOptions(request, runtime);
}

model RecognizeTrainInvoiceRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeTrainInvoiceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeTrainInvoiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeTrainInvoiceResponseBody(name='body'),
}

async function recognizeTrainInvoiceWithOptions(request: RecognizeTrainInvoiceRequest, runtime: Util.RuntimeOptions): RecognizeTrainInvoiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeTrainInvoice',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeTrainInvoice(request: RecognizeTrainInvoiceRequest): RecognizeTrainInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeTrainInvoiceWithOptions(request, runtime);
}

model RecognizeTravelCardRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeTravelCardResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeTravelCardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeTravelCardResponseBody(name='body'),
}

async function recognizeTravelCardWithOptions(request: RecognizeTravelCardRequest, runtime: Util.RuntimeOptions): RecognizeTravelCardResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeTravelCard',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeTravelCard(request: RecognizeTravelCardRequest): RecognizeTravelCardResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeTravelCardWithOptions(request, runtime);
}

model RecognizeUsedCarInvoiceRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeUsedCarInvoiceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeUsedCarInvoiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeUsedCarInvoiceResponseBody(name='body'),
}

async function recognizeUsedCarInvoiceWithOptions(request: RecognizeUsedCarInvoiceRequest, runtime: Util.RuntimeOptions): RecognizeUsedCarInvoiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeUsedCarInvoice',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeUsedCarInvoice(request: RecognizeUsedCarInvoiceRequest): RecognizeUsedCarInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeUsedCarInvoiceWithOptions(request, runtime);
}

model RecognizeVehicleCertificationRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeVehicleCertificationResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeVehicleCertificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeVehicleCertificationResponseBody(name='body'),
}

async function recognizeVehicleCertificationWithOptions(request: RecognizeVehicleCertificationRequest, runtime: Util.RuntimeOptions): RecognizeVehicleCertificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeVehicleCertification',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeVehicleCertification(request: RecognizeVehicleCertificationRequest): RecognizeVehicleCertificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeVehicleCertificationWithOptions(request, runtime);
}

model RecognizeVehicleLicenseRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeVehicleLicenseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeVehicleLicenseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeVehicleLicenseResponseBody(name='body'),
}

async function recognizeVehicleLicenseWithOptions(request: RecognizeVehicleLicenseRequest, runtime: Util.RuntimeOptions): RecognizeVehicleLicenseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeVehicleLicense',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeVehicleLicense(request: RecognizeVehicleLicenseRequest): RecognizeVehicleLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeVehicleLicenseWithOptions(request, runtime);
}

model RecognizeVehicleRegistrationRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeVehicleRegistrationResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeVehicleRegistrationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeVehicleRegistrationResponseBody(name='body'),
}

async function recognizeVehicleRegistrationWithOptions(request: RecognizeVehicleRegistrationRequest, runtime: Util.RuntimeOptions): RecognizeVehicleRegistrationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeVehicleRegistration',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeVehicleRegistration(request: RecognizeVehicleRegistrationRequest): RecognizeVehicleRegistrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeVehicleRegistrationWithOptions(request, runtime);
}

model RecognizeWaybillRequest {
  url?: string(name='Url'),
  body?: readable(name='body'),
}

model RecognizeWaybillResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeWaybillResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeWaybillResponseBody(name='body'),
}

async function recognizeWaybillWithOptions(request: RecognizeWaybillRequest, runtime: Util.RuntimeOptions): RecognizeWaybillResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = request.body,
    stream = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RecognizeWaybill',
    version = '2021-07-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeWaybill(request: RecognizeWaybillRequest): RecognizeWaybillResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeWaybillWithOptions(request, runtime);
}

