/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'aliding';
  @version = '2023-04-26';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddAttendeeRequest {
  accountContext?: {
    accountId: string(name='accountId', example='123456'),
  }(name='AccountContext', shrink='json', position='Header'),
  attendeesToAdd: [ 
    {
      id?: string(name='id', example='123456'),
      isOptional?: boolean(name='isOptional', example='true'),
    }
  ](name='AttendeesToAdd', shrink='json', position='Body'),
  calendarId: string(name='CalendarId', example='primary', position='Body'),
  eventId: string(name='EventId', example='cnNTbW1YbU9sL2p6aFJZdEgvdlQrQT08', position='Body'),
  chatNotification?: boolean(name='chatNotification', position='Body'),
  pushNotification?: boolean(name='pushNotification', position='Body'),
}

model AddAttendeeResponseBody = {
  content?: {
    data?: any(name='Data', example='[]'),
  }(name='Content'),
  errorCode?: string(name='ErrorCode', example='200'),
  errorCtx?: map[string]any(name='ErrorCtx'),
  errorMsg?: string(name='ErrorMsg', example='error check permissions'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', description='RequestId', example='9BCC17ED-0187-54A0-BD31-56FDBE865447'),
  success?: boolean(name='Success', example='True'),
}

model AddAttendeeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddAttendeeResponseBody(name='body'),
}

async function addAttendee(request: AddAttendeeRequest): AddAttendeeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddAttendee', 'POST', '/dingtalk/v1/calendar/addAttendee', 'json', true, 'form', request);
}

model AddDriveSpaceRequest {
  accountContext: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  name: string(name='Name', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model AddDriveSpaceResponseBody = {
  createTime?: string(name='createTime'),
  modifyTime?: string(name='modifyTime'),
  permissionMode?: string(name='permissionMode'),
  quota?: long(name='quota'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  spaceId?: string(name='spaceId'),
  spaceName?: string(name='spaceName'),
  spaceType?: string(name='spaceType'),
  usedQuota?: long(name='usedQuota'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model AddDriveSpaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddDriveSpaceResponseBody(name='body'),
}

async function addDriveSpace(request: AddDriveSpaceRequest): AddDriveSpaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddDriveSpace', 'POST', '/dingtalk/v1/documents/addDriveSpace', 'json', true, 'form', request);
}

model AddMeetingRoomsRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  calendarId: string(name='CalendarId', example='primary', position='Body'),
  eventId: string(name='EventId', example='U5Kxxxxx', position='Body'),
  meetingRoomsToAdd: [ 
    {
      roomId?: string(name='RoomId', example='4002fxxxxx'),
    }
  ](name='MeetingRoomsToAdd', shrink='json', position='Body'),
}

model AddMeetingRoomsResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model AddMeetingRoomsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddMeetingRoomsResponseBody(name='body'),
}

async function addMeetingRooms(request: AddMeetingRoomsRequest): AddMeetingRoomsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddMeetingRooms', 'POST', '/dingtalk/v1/calendar/addMeetingRooms', 'json', true, 'form', request);
}

model AddScenegroupMemberRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  openConversationId: string(name='OpenConversationId', example='cidt*****Xa4K10w==', position='Body'),
  userIds: string(name='UserIds', example='123xx,224xx', position='Body'),
}

model AddScenegroupMemberResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model AddScenegroupMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddScenegroupMemberResponseBody(name='body'),
}

async function addScenegroupMember(request: AddScenegroupMemberRequest): AddScenegroupMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddScenegroupMember', 'POST', '/dingtalk/v1/im/addScenegroupMember', 'json', true, 'form', request);
}

model AddWorkspaceRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  name: string(name='Name', position='Body'),
  option?: {
    description?: string(name='Description'),
    teamId?: string(name='TeamId', example='lHiicjNFM2iSFYSdz2iPuI8ZwiEiE'),
  }(name='Option', shrink='json', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model AddWorkspaceResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  workspace?: {
    corpId?: string(name='CorpId', example='ding16b241fd05********288'),
    cover?: string(name='Cover', example='https://example/file-manage-files/zh-CN/202***13/ldet/XXXX.jpg'),
    createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
    creatorId?: string(name='CreatorId', example='01472825524039877041'),
    description?: string(name='Description', example='workspace_description'),
    icon?: {
      type?: string(name='Type', example='TEAM'),
      value?: string(name='Value', example='https://example/file-manage-files/zh-CN/202***13/ldet/avatar3.jpg'),
    }(name='Icon'),
    modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
    modifierId?: string(name='ModifierId', example='01472825524039877041'),
    name?: string(name='Name', example='workspace_name'),
    permissionRole?: string(name='PermissionRole', example='READER'),
    rootNodeId?: string(name='RootNodeId', example='root_node_uuid'),
    teamId?: string(name='TeamId', example='lHiicjNFM2iSFYSdz2iPuI8ZwiEiE'),
    type?: string(name='Type', example='TEAM'),
    url?: string(name='Url', example='workspace_url'),
    workspaceId?: string(name='WorkspaceId', example='workspace_id'),
  }(name='workspace'),
}

model AddWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddWorkspaceResponseBody(name='body'),
}

async function addWorkspace(request: AddWorkspaceRequest): AddWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddWorkspace', 'POST', '/dingtalk/v2/documents/addWorkspace', 'json', true, 'form', request);
}

model AddWorkspaceDocMembersRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  members: [ 
    {
      memberId: string(name='MemberId', example='012345'),
      memberType: string(name='MemberType', example='USER'),
      roleType: string(name='RoleType', example='EDITOR'),
    }
  ](name='Members', shrink='json', position='Body'),
  nodeId: string(name='NodeId', example='xxx', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  workspaceId: string(name='WorkspaceId', example='xxx', position='Body'),
}

model AddWorkspaceDocMembersResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model AddWorkspaceDocMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddWorkspaceDocMembersResponseBody(name='body'),
}

async function addWorkspaceDocMembers(request: AddWorkspaceDocMembersRequest): AddWorkspaceDocMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddWorkspaceDocMembers', 'POST', '/dingtalk/v1/documents/addWorkspaceDocMembers', 'json', true, 'form', request);
}

model AddWorkspaceMembersRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  members?: [ 
    {
      memberId?: string(name='MemberId', example='012345'),
      memberType?: string(name='MemberType', example='USER'),
      roleType?: string(name='RoleType', example='EDITOR'),
    }
  ](name='Members', shrink='json', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  workspaceId: string(name='WorkspaceId', example='123', position='Body'),
}

model AddWorkspaceMembersResponseBody = {
  notInOrgList?: [ string ](name='NotInOrgList'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model AddWorkspaceMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddWorkspaceMembersResponseBody(name='body'),
}

async function addWorkspaceMembers(request: AddWorkspaceMembersRequest): AddWorkspaceMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddWorkspaceMembers', 'POST', '/dingtalk/v1/documents/addWorkspaceMembers', 'json', true, 'form', request);
}

model BatchGetFormDataByIdListRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType: string(name='AppType', example='APP_PBKT0xxx', position='Body'),
  formInstanceIdList: [ string ](name='FormInstanceIdList', example='FORM-xxxxx', shrink='json', position='Body'),
  formUuid: string(name='FormUuid', example='FORM-xxxxx', position='Body'),
  needFormInstanceValue?: boolean(name='NeedFormInstanceValue', example='true', position='Body'),
  systemToken: string(name='SystemToken', example='hexxxx', position='Body'),
}

model BatchGetFormDataByIdListResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ 
    {
      createTimeGMT?: string(name='CreateTimeGMT', example='2021-05-01 10:10:10'),
      creatorUserId?: string(name='CreatorUserId', example='012345'),
      formData?: map[string]any(name='FormData'),
      formInstanceId?: string(name='FormInstanceId', example='FINST-xxxx'),
      formUuid?: string(name='FormUuid', example='FORM-xxxx'),
      id?: long(name='Id', example='21044829126'),
      instanceValue?: string(name='InstanceValue', example='{}'),
      modifiedTimeGMT?: string(name='ModifiedTimeGMT', example='2021-05-01 10:10:10'),
      modifier?: string(name='Modifier'),
      modifyUser?: {
        name?: {
          nameInChinese?: string(name='NameInChinese'),
          nameInEnglish?: string(name='NameInEnglish', example='EnglishName'),
        }(name='Name'),
        userId?: string(name='UserId', example='012345'),
      }(name='ModifyUser'),
      originator?: {
        name?: {
          nameInChinese?: string(name='NameInChinese'),
          nameInEnglish?: string(name='NameInEnglish', example='EnglishName'),
        }(name='Name'),
        userId?: string(name='UserId', example='012345'),
      }(name='Originator'),
      sequence?: string(name='Sequence', example='1'),
      serialNumber?: string(name='SerialNumber', example='SA65776'),
      title?: string(name='Title'),
      version?: long(name='Version', example='2'),
    }
  ](name='result', example='[ "FINST-SASNOO39NSIFF780" ]'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model BatchGetFormDataByIdListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchGetFormDataByIdListResponseBody(name='body'),
}

async function batchGetFormDataByIdList(request: BatchGetFormDataByIdListRequest): BatchGetFormDataByIdListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchGetFormDataByIdList', 'POST', '/dingtalk/v1/yida/batchGetFormDataByIdList', 'json', true, 'form', request);
}

model BatchRemovalByFormInstanceIdListRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType: string(name='AppType', example='APP_XCE0EVXS6DYG3YDYC5RD', position='Body'),
  asynchronousExecution?: boolean(name='AsynchronousExecution', example='false', position='Body'),
  executeExpression?: boolean(name='ExecuteExpression', example='false', position='Body'),
  formInstanceIdList: [ string ](name='FormInstanceIdList', example='[]', shrink='json', position='Body'),
  formUuid: string(name='FormUuid', example='FORM-GX866MC1NC1VOFF6WVQW33FD16E23L3CPMKVKA', position='Body'),
  systemToken: string(name='SystemToken', example='09866181UTZVVD4R3DC955FNKIM52HVPU5WWK7', position='Body'),
}

model BatchRemovalByFormInstanceIdListResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model BatchRemovalByFormInstanceIdListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchRemovalByFormInstanceIdListResponseBody(name='body'),
}

async function batchRemovalByFormInstanceIdList(request: BatchRemovalByFormInstanceIdListRequest): BatchRemovalByFormInstanceIdListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchRemovalByFormInstanceIdList', 'POST', '/dingtalk/v1/yida/batchRemovalByFormInstanceIdList', 'json', true, 'form', request);
}

model BatchSaveFormDataRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType?: string(name='AppType', example='APP_XCE0EVXS6DYG3YDYC5RD', position='Body'),
  asynchronousExecution?: boolean(name='AsynchronousExecution', example='false', position='Body'),
  formDataJsonList?: [ string ](name='FormDataJsonList', shrink='json', position='Body'),
  formUuid?: string(name='FormUuid', example='FORM-GX866MC1NC1VOFF6WVQW33FD16E23L3CPMKVKA', position='Body'),
  keepRunningAfterException?: boolean(name='KeepRunningAfterException', example='false', position='Body'),
  noExecuteExpression?: boolean(name='NoExecuteExpression', example='false', position='Body'),
  systemToken?: string(name='SystemToken', example='09866181UTZVVD4R3DC955FNKIM52HVPU5WWK7', position='Body'),
}

model BatchSaveFormDataResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ string ](name='result', example='[ "FINST-SASNOO39NSIFF780" ]'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model BatchSaveFormDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchSaveFormDataResponseBody(name='body'),
}

async function batchSaveFormData(request: BatchSaveFormDataRequest): BatchSaveFormDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchSaveFormData', 'POST', '/dingtalk/v1/yida/batchSaveFormData', 'json', true, 'form', request);
}

model BatchUpdateFormDataByInstanceIdRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType?: string(name='AppType', example='String', position='Body'),
  asynchronousExecution?: boolean(name='AsynchronousExecution', example='true', position='Body'),
  formInstanceIdList: [ string ](name='FormInstanceIdList', example='[ "FINST-J8766S91O2UYN87ZX3XOF1MY8MBA2912BSV0L24" ]', shrink='json', position='Body'),
  formUuid: string(name='FormUuid', example='FORM-GX866MC1NC1VOFF6WVQW33FD16E23L3CPMKVKA', position='Body'),
  ignoreEmpty?: boolean(name='IgnoreEmpty', example='true', position='Body'),
  noExecuteExpression?: boolean(name='NoExecuteExpression', example='false', position='Body'),
  systemToken: string(name='SystemToken', example='09866181UTZVVD4R3DC955FNKIM52HVPU5WWK7', position='Body'),
  updateFormDataJson: string(name='UpdateFormDataJson', example='{\\"countrySelectField_l0c1cwiu\\":[{\\"value\\":\\"US\\"}],\\"addressField_l0c1cwiy\\":{\\"address\\":\\"111\\",\\"regionIds\\":[460000,469027,469023401],\\"regionText\\":[{\\"en_US\\":\\"hai+nan+sheng\\",\\"zh_CN\\":\\"海南省\\"},{\\"en_US\\":\\"cheng+mai+xian\\",\\"zh_CN\\":\\"澄迈县\\"},{\\"en_US\\":\\"guo+ying+hong+gang+nong+chang\\",\\"zh_CN\\":\\"国营红岗农场\\"}]}}', position='Body'),
  useLatestFormSchemaVersion?: boolean(name='UseLatestFormSchemaVersion', example='false', position='Body'),
}

model BatchUpdateFormDataByInstanceIdResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ string ](name='result', example='[ "FINST-SASNOO39NSIFF780" ]'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model BatchUpdateFormDataByInstanceIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchUpdateFormDataByInstanceIdResponseBody(name='body'),
}

async function batchUpdateFormDataByInstanceId(request: BatchUpdateFormDataByInstanceIdRequest): BatchUpdateFormDataByInstanceIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchUpdateFormDataByInstanceId', 'POST', '/dingtalk/v1/yida/batchUpdateFormDataByInstanceId', 'json', true, 'form', request);
}

model BatchUpdateFormDataByInstanceMapRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType?: string(name='AppType', example='String', position='Body'),
  asynchronousExecution?: boolean(name='AsynchronousExecution', example='false', position='Body'),
  formUuid?: string(name='FormUuid', example='FORM-GX866MC1NC1VOFF6WVQW33FD16E23L3CPMKVKA', position='Body'),
  ignoreEmpty?: boolean(name='IgnoreEmpty', example='false', position='Body'),
  noExecuteExpression?: boolean(name='NoExecuteExpression', example='false', position='Body'),
  systemToken?: string(name='SystemToken', example='09866181UTZVVD4R3DC955FNKIM52HVPU5WWK7', position='Body'),
  updateFormDataJsonMap?: map[string]any(name='UpdateFormDataJsonMap', shrink='json', position='Body'),
  useLatestFormSchemaVersion?: boolean(name='UseLatestFormSchemaVersion', example='false', position='Body'),
}

model BatchUpdateFormDataByInstanceMapResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ string ](name='result', example='[ "FINST-SASNOO39NSIFF780" ]'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model BatchUpdateFormDataByInstanceMapResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchUpdateFormDataByInstanceMapResponseBody(name='body'),
}

async function batchUpdateFormDataByInstanceMap(request: BatchUpdateFormDataByInstanceMapRequest): BatchUpdateFormDataByInstanceMapResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchUpdateFormDataByInstanceMap', 'POST', '/dingtalk/v1/yida/batchUpdateFormDataByInstanceMap', 'json', true, 'form', request);
}

model CancelScheduleConferenceRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  scheduleConferenceId: string(name='ScheduleConferenceId', example='2a489xxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model CancelScheduleConferenceResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model CancelScheduleConferenceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelScheduleConferenceResponseBody(name='body'),
}

async function cancelScheduleConference(request: CancelScheduleConferenceRequest): CancelScheduleConferenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelScheduleConference', 'POST', '/dingtalk/v1/ysp/cancelScheduleConference', 'json', true, 'form', request);
}

model CheckUserIsGroupMemberRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  openConversationId?: string(name='OpenConversationId', example='cidB8Pz*******FIWPv2PMA==', position='Body'),
}

model CheckUserIsGroupMemberResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model CheckUserIsGroupMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckUserIsGroupMemberResponseBody(name='body'),
}

async function checkUserIsGroupMember(request: CheckUserIsGroupMemberRequest): CheckUserIsGroupMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckUserIsGroupMember', 'POST', '/dingtalk/v1/im/checkUserIsGroupMember', 'json', true, 'form', request);
}

model ClearRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  rangeAddress: string(name='RangeAddress', example='A3:C3', position='Body'),
  sheetId: string(name='SheetId', example='Sheet1', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  workbookId: string(name='WorkbookId', example='stxxxx', position='Body'),
}

model ClearResponseBody = {
  a1Notation?: string(name='a1Notation', example='A1:B2'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model ClearResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ClearResponseBody(name='body'),
}

async function clear(request: ClearRequest): ClearResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Clear', 'POST', '/dingtalk/v1/documents/clear', 'json', true, 'form', request);
}

model ClearDataRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  rangeAddress: string(name='RangeAddress', example='A3:C3', position='Body'),
  sheetId: string(name='SheetId', example='Sheet1', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  workbookId: string(name='WorkbookId', example='stxxxx', position='Body'),
}

model ClearDataResponseBody = {
  a1Notation?: string(name='a1Notation', example='A1:B2'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model ClearDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ClearDataResponseBody(name='body'),
}

async function clearData(request: ClearDataRequest): ClearDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ClearData', 'POST', '/dingtalk/v1/documents/clearData', 'json', true, 'form', request);
}

model CommentListReportRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  offset: long(name='Offset', example='10', position='Body'),
  reportId: string(name='ReportId', example='173xxxx', position='Body'),
  size: long(name='Size', example='10', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model CommentListReportResponseBody = {
  comments?: [ 
    {
      content?: string(name='Content'),
      createTime?: string(name='CreateTime', example='1678442466000'),
      userid?: string(name='Userid', example='012345'),
    }
  ](name='comments'),
  hasMore?: boolean(name='hasMore', example='true'),
  nextCursor?: long(name='nextCursor', example='1568442466000'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model CommentListReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CommentListReportResponseBody(name='body'),
}

async function commentListReport(request: CommentListReportRequest): CommentListReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CommentListReport', 'POST', '/dingtalk/v1/log/commentListReport', 'json', true, 'form', request);
}

model CreateDeliveryPlanRequest {
  accountContext?: {
    userToken?: string(name='userToken', example='ba3a9b612345678d8fedf544ef69d19e'),
  }(name='AccountContext', shrink='json', position='Header'),
  content?: map[string]any(name='Content', shrink='json', position='Body'),
  endTime?: long(name='EndTime', example='1699265024987', position='Body'),
  resId?: string(name='ResId', example='1028', position='Body'),
  startTime?: long(name='StartTime', example='1699265024987', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
  userIdList?: [ string ](name='UserIdList', shrink='json', position='Body'),
}

model CreateDeliveryPlanResponseBody = {
  arguments?: [ any ](name='arguments', example='[]'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model CreateDeliveryPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDeliveryPlanResponseBody(name='body'),
}

async function createDeliveryPlan(request: CreateDeliveryPlanRequest): CreateDeliveryPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDeliveryPlan', 'POST', '/dingtalk/v1/watt/createDeliveryPlan', 'json', true, 'form', request);
}

model CreateDingtalkPersonalTodoTaskRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  description?: string(name='Description', example='待办备注信息', position='Body'),
  dueTime?: long(name='DueTime', example='1703750708595', position='Body'),
  executorIds: [ string ](name='ExecutorIds', example='[ "012345" ]', shrink='json', position='Body'),
  notifyConfigs?: {
    dingNotify?: string(name='DingNotify', example='1'),
  }(name='NotifyConfigs', shrink='json', position='Body'),
  participantIds?: [ string ](name='ParticipantIds', example='[ "012345" ]', shrink='json', position='Body'),
  subject: string(name='Subject', example='待办标题', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
  userToken?: string(name='UserToken', example='用户token', position='Body'),
}

model CreateDingtalkPersonalTodoTaskResponseBody = {
  createdTime?: long(name='createdTime', example='1703750708595'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  taskId?: string(name='taskId', example='task123abc'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model CreateDingtalkPersonalTodoTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDingtalkPersonalTodoTaskResponseBody(name='body'),
}

async function createDingtalkPersonalTodoTask(request: CreateDingtalkPersonalTodoTaskRequest): CreateDingtalkPersonalTodoTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDingtalkPersonalTodoTask', 'POST', '/dingtalk/v1/task/createDingtalkPersonalTodoTask', 'json', true, 'form', request);
}

model CreateEventRequest {
  accountContext?: {
    accountId: string(name='accountId', example='208579'),
  }(name='AccountContext', shrink='json', position='Header'),
  attendees?: [ 
    {
      id?: string(name='id', example='7845'),
      isOptional?: boolean(name='isOptional', example='true'),
    }
  ](name='Attendees', shrink='json', position='Body'),
  description?: string(name='Description', position='Body'),
  end?: {
    date?: string(name='date', example='"2020-09-21"'),
    dateTime?: string(name='dateTime', example='"2021-09-20T10:15:30+08:00"'),
    timeZone?: string(name='timeZone', example='"Asia/Shanghai"'),
  }(name='End', shrink='json', position='Body'),
  extra?: map[string]string(name='Extra', shrink='json', position='Body'),
  isAllDay?: boolean(name='IsAllDay', example='true', position='Body'),
  location?: {
    displayName?: string(name='displayName'),
  }(name='Location', shrink='json', position='Body'),
  onlineMeetingInfo?: {
    type?: string(name='type', example='dingtalk'),
  }(name='OnlineMeetingInfo', shrink='json', position='Body'),
  recurrence?: {
    pattern?: {
      dayOfMonth?: int32(name='dayOfMonth', example='1'),
      daysOfWeek?: string(name='daysOfWeek', example='"monday"'),
      index?: string(name='index', example='"last"'),
      interval?: int32(name='interval', example='1'),
      type?: string(name='type', example='"daily"'),
    }(name='pattern'),
    range?: {
      endDate?: string(name='endDate', example='"2021-12-31T10:15:30+08:00"'),
      numberOfOccurrences?: int32(name='numberOfOccurrences', example='5'),
      type?: string(name='type', example='"endDate"'),
    }(name='range'),
  }(name='Recurrence', shrink='json', position='Body'),
  reminders?: [ 
    {
      method?: string(name='method', example='dingtalk'),
      minutes?: int32(name='minutes', example='15'),
    }
  ](name='Reminders', shrink='json', position='Body'),
  richTextDescription?: {
    text?: string(name='text'),
  }(name='RichTextDescription', shrink='json', position='Body'),
  summary: string(name='Summary', position='Body'),
  uiConfigs?: [ 
    {
      uiName?: string(name='uiName', example='"updateEventButton"'),
      uiStatus?: string(name='uiStatus', example='"hide"'),
    }
  ](name='UiConfigs', shrink='json', position='Body'),
  calendarId: string(name='calendarId', example='primary', position='Body'),
  start: {
    date?: string(name='date', example='"2021-09-20"'),
    dateTime?: string(name='dateTime', example='"2021-09-20T10:15:30+08:00"'),
    timeZone?: string(name='timeZone', example='"Asia/Shanghai"'),
  }(name='start', shrink='json', position='Body'),
}

model CreateEventResponseBody = {
  attendees?: [ 
    {
      displayName?: string(name='DisplayName'),
      isOptional?: boolean(name='IsOptional', example='true'),
      responseStatus?: string(name='ResponseStatus', example='needsAction'),
      self?: boolean(name='Self', example='true'),
    }
  ](name='attendees'),
  createTime?: string(name='createTime', example='2020-01-01T10:15:30+08:00'),
  description?: string(name='description'),
  end?: {
    date?: string(name='Date', example='2020-01-01'),
    dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
    timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
  }(name='end'),
  id?: string(name='id', example='iiiP35sJadba8aBSgjrwPRKgiEiF'),
  isAllDay?: boolean(name='isAllDay', example='true'),
  location?: {
    displayName?: string(name='DisplayName', example='room 1-2-3'),
  }(name='location'),
  onlineMeetingInfo?: {
    conferenceId?: string(name='ConferenceId', example='123'),
    extraInfo?: map[string]any(name='ExtraInfo'),
    type?: string(name='Type', example='dingtalk'),
    url?: string(name='Url', example='http://meeting'),
  }(name='onlineMeetingInfo'),
  organizer?: {
    displayName?: string(name='DisplayName'),
    id?: string(name='Id', example='123456'),
    responseStatus?: string(name='ResponseStatus', example='accepted'),
    self?: boolean(name='Self', example='true'),
  }(name='organizer'),
  recurrence?: {
    pattern?: {
      dayOfMonth?: int32(name='DayOfMonth', example='14'),
      daysOfWeek?: string(name='DaysOfWeek', example='sunday'),
      index?: string(name='Index', example='first'),
      interval?: int32(name='Interval', example='1'),
      type?: string(name='Type', example='daily'),
    }(name='Pattern'),
    range?: {
      endDate?: string(name='EndDate', example='2020-01-01T10:15:30+08:00'),
      numberOfOccurrences?: int32(name='NumberOfOccurrences', example='5'),
      type?: string(name='Type', example='noEnd'),
    }(name='Range'),
  }(name='recurrence'),
  reminders?: [ 
    {
      method?: string(name='Method', example='dingtalk'),
      minutes?: string(name='Minutes', example='15'),
    }
  ](name='reminders'),
  requestId?: string(name='requestId', description='requestId', example='4248DCC9-785F-5A14-8BE0-830FD52E1261'),
  richTextDescription?: {
    text?: string(name='text'),
  }(name='richTextDescription'),
  start?: {
    date?: string(name='Date', example='2020-01-01'),
    dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
    timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
  }(name='start'),
  summary?: string(name='summary'),
  uiConfigs?: [ 
    {
      uiName?: string(name='UiName', example='updateEventButton'),
      uiStatus?: string(name='UiStatus', example='hide'),
    }
  ](name='uiConfigs'),
  updateTime?: string(name='updateTime', example='2020-01-01T10:15:30+08:00'),
}

model CreateEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEventResponseBody(name='body'),
}

async function createEvent(request: CreateEventRequest): CreateEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateEvent', 'POST', '/dingtalk/v1/calendar/createEvent', 'json', true, 'form', request);
}

model CreateLiveRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  coverUrl?: string(name='CoverUrl', example='http://sss/sss', position='Body'),
  introduction?: string(name='Introduction', example='这是一个直播', position='Body'),
  preEndTime: long(name='PreEndTime', example='1698596800000', position='Body'),
  preStartTime: long(name='PreStartTime', example='1691596800000', position='Body'),
  publicType?: long(name='PublicType', example='0', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  title: string(name='Title', example='标题', position='Body'),
}

model CreateLiveResponseBody = {
  liveId?: string(name='liveId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model CreateLiveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLiveResponseBody(name='body'),
}

async function createLive(request: CreateLiveRequest): CreateLiveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateLive', 'POST', '/dingtalk/v1/ysp/createLive', 'json', true, 'form', request);
}

model CreateMeetingRoomRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  enableCycleReservation?: boolean(name='EnableCycleReservation', position='Body'),
  groupId?: long(name='GroupId', example='4644', position='Body'),
  isvRoomId?: string(name='IsvRoomId', example='xxxIsvRoomId', position='Body'),
  reservationAuthority?: {
    authorizedMembers?: [ 
      {
        memberId?: string(name='MemberId'),
        memberName?: string(name='MemberName'),
        memberType?: string(name='MemberType'),
      }
    ](name='AuthorizedMembers'),
  }(name='ReservationAuthority', shrink='json', position='Body'),
  roomCapacity?: int32(name='RoomCapacity', example='100', position='Body'),
  roomLabelIds?: [ long ](name='RoomLabelIds', shrink='json', position='Body'),
  roomLocation?: {
    desc?: string(name='Desc'),
    title?: string(name='Title'),
  }(name='RoomLocation', shrink='json', position='Body'),
  roomName?: string(name='RoomName', position='Body'),
  roomPicture?: string(name='RoomPicture', example='https://static.dingtalk.com/media/lADPxxxxx.jpg', position='Body'),
  roomStatus?: int32(name='RoomStatus', example='1', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model CreateMeetingRoomResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: string(name='result', example='0ffb718xxxxx'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model CreateMeetingRoomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMeetingRoomResponseBody(name='body'),
}

async function createMeetingRoom(request: CreateMeetingRoomRequest): CreateMeetingRoomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMeetingRoom', 'POST', '/dingtalk/v1/ysp/createMeetingRoom', 'json', true, 'form', request);
}

model CreateMeetingRoomGroupRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  groupName?: string(name='GroupName', example='测试分组', position='Body'),
  parentGroupId: long(name='ParentGroupId', example='172L', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model CreateMeetingRoomGroupResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: long(name='result', example='172'),
}

model CreateMeetingRoomGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMeetingRoomGroupResponseBody(name='body'),
}

async function createMeetingRoomGroup(request: CreateMeetingRoomGroupRequest): CreateMeetingRoomGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMeetingRoomGroup', 'POST', '/dingtalk/v1/ysp/createMeetingRoomGroup', 'json', true, 'form', request);
}

model CreateOrUpdateFormDataRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType?: string(name='AppType', example='APP_XCE0EVXS6DYG3YDYC5RD', position='Body'),
  formDataJson?: string(name='FormDataJson', example='{\\"countrySelectField_l0c1cwiu\\":[{\\"value\\":\\"US\\"}]}', position='Body'),
  formUuid?: string(name='FormUuid', example='FORM-GX866MC1NC1VOFF6WVQW33FD16E23L3CPMKVKA', position='Body'),
  noExecuteExpression?: boolean(name='NoExecuteExpression', example='false', position='Body'),
  searchCondition?: string(name='SearchCondition', position='Body'),
  systemToken?: string(name='SystemToken', example='09866181UTZVVD4R3DC955FNKIM52HVPU5WWK7', position='Body'),
  userId?: string(name='UserId', example='012345', position='Body'),
}

model CreateOrUpdateFormDataResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ string ](name='result', example='[ "FINST-SASNOO39NSIFF780" ]'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model CreateOrUpdateFormDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrUpdateFormDataResponseBody(name='body'),
}

async function createOrUpdateFormData(request: CreateOrUpdateFormDataRequest): CreateOrUpdateFormDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateOrUpdateFormData', 'POST', '/dingtalk/v1/yida/createOrUpdateFormData', 'json', true, 'form', request);
}

model CreateOrgHonorTemplateRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='208579'),
  }(name='AccountContext', shrink='json', position='Header'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='123456'),
  }(name='TenantContext', shrink='json', position='Body'),
  avatarFrameMediaId: string(name='avatarFrameMediaId', example='fsdfasdjf132342d', position='Body'),
  defaultBgColor: string(name='defaultBgColor', example='#FFFBB4', position='Body'),
  medalDesc: string(name='medalDesc', position='Body'),
  medalMediaId: string(name='medalMediaId', example='1273adf23', position='Body'),
  medalName: string(name='medalName', position='Body'),
  orgId: long(name='orgId', example='123456', position='Body'),
  userId: string(name='userId', example='363784', position='Body'),
}

model CreateOrgHonorTemplateResponseBody = {
  honorId?: string(name='honorId', example='21660610'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model CreateOrgHonorTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrgHonorTemplateResponseBody(name='body'),
}

async function createOrgHonorTemplate(request: CreateOrgHonorTemplateRequest): CreateOrgHonorTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateOrgHonorTemplate', 'POST', '/aliding/v1/honor/createOrgHonorTemplate', 'json', true, 'form', request);
}

model CreatePersonalTodoTaskRequest {
  accountContext?: {
    accountId: string(name='accountId', example='ba3a9b612345678d8fedf544ef69d19e'),
  }(name='AccountContext', shrink='json', position='Header'),
  description?: string(name='Description', example='待办备注信息', position='Body'),
  dueTime?: long(name='DueTime', example='1703750708595', position='Body'),
  executorIds: [ string ](name='ExecutorIds', example='[ "012345" ]', shrink='json', position='Body'),
  notifyConfigs?: {
    dingNotify?: string(name='DingNotify', example='1'),
  }(name='NotifyConfigs', shrink='json', position='Body'),
  participantIds?: [ string ](name='ParticipantIds', example='[ "012345" ]', shrink='json', position='Body'),
  subject: string(name='Subject', example='待办标题', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model CreatePersonalTodoTaskResponseBody = {
  createdTime?: long(name='createdTime', example='1703750708595'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  taskId?: string(name='taskId', example='task123abc'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model CreatePersonalTodoTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePersonalTodoTaskResponseBody(name='body'),
}

async function createPersonalTodoTask(request: CreatePersonalTodoTaskRequest): CreatePersonalTodoTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePersonalTodoTask', 'POST', '/dingtalk/v1/task/createPersonalTodoTask', 'json', true, 'form', request);
}

model CreateReportRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  contents: [ 
    {
      content: string(name='Content', example='### 序号1'),
      contentType: string(name='ContentType', example='markdown'),
      key: string(name='Key', example='今日完成工作'),
      sort: long(name='Sort', example='0'),
      type: long(name='Type', example='1'),
    }
  ](name='Contents', example='[]', shrink='json', position='Body'),
  ddFrom: string(name='DdFrom', example='client', position='Body'),
  templateId: string(name='TemplateId', example='sdfafdsfsafdfsaf', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  toChat: boolean(name='ToChat', example='true', position='Body'),
  toCids?: [ string ](name='ToCids', example='[]', shrink='json', position='Body'),
  toUserids?: [ string ](name='ToUserids', example='[123,456]', shrink='json', position='Body'),
}

model CreateReportResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model CreateReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateReportResponseBody(name='body'),
}

async function createReport(request: CreateReportRequest): CreateReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateReport', 'POST', '/dingtalk/v1/log/createReport', 'json', true, 'form', request);
}

model CreateScenegroupRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  addFriendForbidden?: long(name='AddFriendForbidden', example='0', position='Body'),
  allMembersCanCreateCalendar?: long(name='AllMembersCanCreateCalendar', example='0', position='Body'),
  allMembersCanCreateMcsConf?: long(name='AllMembersCanCreateMcsConf', example='0', position='Body'),
  chatBannedType?: long(name='ChatBannedType', example='0', position='Body'),
  groupEmailDisabled?: long(name='GroupEmailDisabled', example='0', position='Body'),
  groupLiveSwitch?: long(name='GroupLiveSwitch', example='1', position='Body'),
  icon?: string(name='Icon', example='@lADOADma*****QKA', position='Body'),
  managementType?: long(name='ManagementType', example='0', position='Body'),
  membersToAdminChat?: long(name='MembersToAdminChat', example='0', position='Body'),
  mentionAllAuthority?: long(name='MentionAllAuthority', example='0', position='Body'),
  onlyAdminCanDing?: long(name='OnlyAdminCanDing', example='0', position='Body'),
  onlyAdminCanSetMsgTop?: long(name='OnlyAdminCanSetMsgTop', example='0', position='Body'),
  searchable?: long(name='Searchable', example='0', position='Body'),
  showHistoryType?: long(name='ShowHistoryType', example='0', position='Body'),
  subadminIds?: string(name='SubadminIds', example='072*****,013*****', position='Body'),
  templateId: string(name='TemplateId', example='c354***-***-***-b4ea-6f1ab***65', position='Body'),
  title: string(name='Title', example='测试群', position='Body'),
  userIds?: string(name='UserIds', example='072*****,013*****', position='Body'),
  uuid?: string(name='Uuid', example='axcf*-*****-*****-23da*', position='Body'),
  validationType?: long(name='ValidationType', example='0', position='Body'),
}

model CreateScenegroupResponseBody = {
  openConversationId?: string(name='openConversationId', example='cid1324wwwerxxx'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model CreateScenegroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateScenegroupResponseBody(name='body'),
}

async function createScenegroup(request: CreateScenegroupRequest): CreateScenegroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateScenegroup', 'POST', '/dingtalk/v1/im/createScenegroup', 'json', true, 'form', request);
}

model CreateScheduleConferenceRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  endTime: long(name='EndTime', example='1687928400000L', position='Body'),
  startTime: long(name='StartTime', example='1687924800000L', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
  title: string(name='Title', example='预约会议标题', position='Body'),
}

model CreateScheduleConferenceResponseBody = {
  phones?: [ string ](name='phones', example='+861234567'),
  requestId?: string(name='requestId', description='requestId', example='1234567'),
  roomCode?: string(name='roomCode', example='83150xxxxxx'),
  scheduleConferenceId?: string(name='scheduleConferenceId', example='5c7c9bb1-b256-4dc5-xxxx-xxxxxxxxxxxx'),
  url?: string(name='url', example='https://meeting.dingtalk.com/j/knvMq1ixxxx'),
}

model CreateScheduleConferenceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateScheduleConferenceResponseBody(name='body'),
}

async function createScheduleConference(request: CreateScheduleConferenceRequest): CreateScheduleConferenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateScheduleConference', 'POST', '/dingtalk/v1/ysp/createScheduleConference', 'json', true, 'form', request);
}

model CreateSearchDomeRequest {
  accountContext?: {
    userToken?: string(name='userToken', example='ba3a9b612345678d8fedf544ef69d19e'),
  }(name='AccountContext', shrink='json', position='Header'),
  content?: string(name='Content', example='{}', position='Body'),
  endTime?: long(name='EndTime', example='1699265024987', position='Body'),
  resId?: string(name='ResId', example='1030', position='Body'),
  startTime?: long(name='StartTime', example='1699265024987', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
  userIdList?: [ string ](name='UserIdList', shrink='json', position='Body'),
}

model CreateSearchDomeResponseBody = {
  arguments?: [ any ](name='arguments', example='[]'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model CreateSearchDomeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSearchDomeResponseBody(name='body'),
}

async function createSearchDome(request: CreateSearchDomeRequest): CreateSearchDomeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSearchDome', 'POST', '/dingtalk/v1/watt/createSearchDome', 'json', true, 'form', request);
}

model CreateSearchKeywordRequest {
  accountContext?: {
    userToken?: string(name='userToken', example='ba3a9b612345678d8fedf544ef69d19e'),
  }(name='AccountContext', shrink='json', position='Header'),
  content?: string(name='Content', example='{}', position='Body'),
  endTime?: long(name='EndTime', example='1699265024987', position='Body'),
  resId?: string(name='ResId', example='1028', position='Body'),
  startTime?: long(name='StartTime', example='1699265024987', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
  userIdList?: [ string ](name='UserIdList', shrink='json', position='Body'),
}

model CreateSearchKeywordResponseBody = {
  arguments?: [ any ](name='arguments', example='[]'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model CreateSearchKeywordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSearchKeywordResponseBody(name='body'),
}

async function createSearchKeyword(request: CreateSearchKeywordRequest): CreateSearchKeywordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSearchKeyword', 'POST', '/dingtalk/v1/watt/createSearchKeyword', 'json', true, 'form', request);
}

model CreateSheetRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  name: string(name='Name', example='Sheet1', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  workbookId: string(name='WorkbookId', example='stxxxx', position='Body'),
}

model CreateSheetResponseBody = {
  id?: string(name='id', example='stxxxx'),
  name?: string(name='name', example='Sheet1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  visibility?: string(name='visibility', example='visible'),
}

model CreateSheetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSheetResponseBody(name='body'),
}

async function createSheet(request: CreateSheetRequest): CreateSheetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSheet', 'POST', '/dingtalk/v1/documents/createSheet', 'json', true, 'form', request);
}

model CreateSubscribedCalendarRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  description?: string(name='Description', position='Body'),
  managers?: [ string ](name='Managers', shrink='json', position='Body'),
  name: string(name='Name', position='Body'),
  subscribeScope: {
    userIds?: [ string ](name='UserIds'),
  }(name='SubscribeScope', shrink='json', position='Body'),
}

model CreateSubscribedCalendarResponseBody = {
  calendarId?: string(name='calendarId', example='M5MjkxNDUxQHVzZXJzLmRpbmd0YWxrLmxxxxxxx'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model CreateSubscribedCalendarResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSubscribedCalendarResponseBody(name='body'),
}

async function createSubscribedCalendar(request: CreateSubscribedCalendarRequest): CreateSubscribedCalendarResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSubscribedCalendar', 'POST', '/dingtalk/v1/calendar/createSubscribedCalendar', 'json', true, 'form', request);
}

model CreateTodoTaskRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  contentFieldList?: [ 
    {
      fieldKey?: string(name='fieldKey', description='fieldKey', example='fieldKey'),
      fieldValue?: string(name='fieldValue', description='fieldValue', example='fieldValue'),
    }
  ](name='contentFieldList', shrink='json', position='Body'),
  creatorId?: string(name='creatorId', example='PUoiinWIpa2yH2ymhiiGiP6g', position='Body'),
  description?: string(name='description', example='应用可以调用该接口发起一个钉钉待办任务，该待办事项会出现在钉钉客户端“待办”页面，需要注意的是，通过开放接口发起的待办，目前仅支持直接跳转ISV应用详情页（ISV在调该接口时需传入自身应用详情页链接）。', position='Body'),
  detailUrl?: {
    appUrl?: string(name='appUrl', example='https://www.dingtalk.com'),
    pcUrl?: string(name='pcUrl', example='https://www.dingtalk.com'),
  }(name='detailUrl', shrink='json', position='Body'),
  dueTime?: long(name='dueTime', example='1617675000000', position='Body'),
  executorIds?: [ string ](name='executorIds', shrink='json', position='Body'),
  isOnlyShowExecutor?: boolean(name='isOnlyShowExecutor', example='true', position='Body'),
  notifyConfigs?: {
    dingNotify?: string(name='dingNotify', example='1'),
  }(name='notifyConfigs', shrink='json', position='Body'),
  operatorId?: string(name='operatorId', example='12345', position='Query'),
  participantIds?: [ string ](name='participantIds', shrink='json', position='Body'),
  priority?: int32(name='priority', example='20', position='Body'),
  sourceId?: string(name='sourceId', example='isv_dingtalkTodo1', position='Body'),
  subject: string(name='subject', example='接入钉钉待办', position='Body'),
}

model CreateTodoTaskResponseBody = {
  bizTag?: string(name='bizTag', example='isv_dingtalkTodo'),
  contentFieldList?: [ 
    {
      fieldKey?: string(name='fieldKey', description='fieldKey', example='fieldKey'),
      fieldValue?: string(name='fieldValue', description='fieldValue', example='fieldValue'),
    }
  ](name='contentFieldList'),
  createdTime?: long(name='createdTime', example='1617675200000'),
  creatorId?: string(name='creatorId', example='PUoiinWIpa2yH2ymhiiGiP6g'),
  description?: string(name='description', example='应用可以调用该接口发起一个钉钉待办任务，该待办事项会出现在钉钉客户端“待办”页面，需要注意的是，通过开放接口发起的待办，目前仅支持直接跳转ISV应用详情页（ISV在调该接口时需传入自身应用详情页链接）。'),
  detailUrl?: {
    appUrl?: string(name='appUrl', example='https://www.dingtalk.com'),
    pcUrl?: string(name='pcUrl', example='https://www.dingtalk.com'),
  }(name='detailUrl'),
  done?: boolean(name='done', example='false'),
  dueTime?: long(name='dueTime', example='1617675100000'),
  executorIds?: [ string ](name='executorIds'),
  finishTime?: long(name='finishTime', example='1617675200000'),
  id?: string(name='id', example='OPJpwtwPVNGIFKURjrzd'),
  isOnlyShowExecutor?: boolean(name='isOnlyShowExecutor', example='true'),
  modifiedTime?: long(name='modifiedTime', example='1617675200000'),
  modifierId?: string(name='modifierId', example='PUoiinWIpa2yH2ymhiiGiP6g'),
  notifyConfigs?: {
    dingNotify?: string(name='dingNotify', example='1'),
  }(name='notifyConfigs'),
  participantIds?: [ string ](name='participantIds'),
  priority?: int32(name='priority', example='20'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  source?: string(name='source', example='isv_dingtalkTodo'),
  sourceId?: string(name='sourceId', example='isv_dingtalkTodo1'),
  startTime?: long(name='startTime', example='1617675000000'),
  subject?: string(name='subject', example='接入钉钉待办'),
}

model CreateTodoTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTodoTaskResponseBody(name='body'),
}

async function createTodoTask(request: CreateTodoTaskRequest): CreateTodoTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTodoTask', 'POST', '/dingtalk/v1/task/createTodoTask', 'json', true, 'form', request);
}

model CreateVideoConferenceRequest {
  accountContext?: {
    accountId: string(name='accountId'),
  }(name='AccountContext', shrink='json', position='Header'),
  confTitle: string(name='ConfTitle', position='Body'),
  inviteCaller?: boolean(name='InviteCaller', example='true', position='Body'),
  inviteUserIds?: [ string ](name='InviteUserIds', shrink='json', position='Body'),
}

model CreateVideoConferenceResponseBody = {
  conferenceId?: string(name='conferenceId', example='607452e01401526ee39609e1'),
  conferencePassword?: string(name='conferencePassword', example='1151302294'),
  externalLinkUrl?: string(name='externalLinkUrl', example='https://pre-meeting.dingtalk.com/app?roomCode=68550708396&token=1_59209c43-431c-4e57-a0f8-11bebdb3db7f'),
  hostPassword?: string(name='hostPassword', example='2142817614'),
  phoneNumbers?: [ string ](name='phoneNumbers'),
  requestId?: string(name='requestId', description='requestId', example='3032809F-8C14-57E2-9B76-7AC2134FE3C8'),
  roomCode?: string(name='roomCode', example='123'),
}

model CreateVideoConferenceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVideoConferenceResponseBody(name='body'),
}

async function createVideoConference(request: CreateVideoConferenceRequest): CreateVideoConferenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateVideoConference', 'POST', '/dingtalk/v1/ysp/createVideoConference', 'json', true, 'form', request);
}

model CreateWorkspaceRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  description?: string(name='Description', position='Body'),
  name: string(name='Name', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model CreateWorkspaceResponseBody = {
  description?: string(name='description', example='知识库描述'),
  name?: string(name='name', example='知识库'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  url?: string(name='url', example='https://xxx/workspaceId'),
  workspaceId?: string(name='workspaceId', example='YRBGvyxxxx'),
}

model CreateWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWorkspaceResponseBody(name='body'),
}

async function createWorkspace(request: CreateWorkspaceRequest): CreateWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateWorkspace', 'POST', '/dingtalk/v1/documents/createWorkspace', 'json', true, 'form', request);
}

model CreateWorkspaceDocRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  docType: string(name='DocType', example='DOC', position='Body'),
  name: string(name='Name', example='测试文档', position='Body'),
  parentNodeId?: string(name='ParentNodeId', example='YRBGv0Ye', position='Body'),
  templateId?: string(name='TemplateId', example='123243', position='Body'),
  templateType?: string(name='TemplateType', example='team_template', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  workspaceId: string(name='WorkspaceId', example='123', position='Body'),
}

model CreateWorkspaceDocResponseBody = {
  docKey?: string(name='docKey', example='QoJGq7xxx'),
  nodeId?: string(name='nodeId', example='YRBGv0Ye'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  url?: string(name='url', example='https://xxx/workspaceId/docs/nodeId'),
  workspaceId?: string(name='workspaceId', example='YRBGvy'),
}

model CreateWorkspaceDocResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWorkspaceDocResponseBody(name='body'),
}

async function createWorkspaceDoc(request: CreateWorkspaceDocRequest): CreateWorkspaceDocResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateWorkspaceDoc', 'POST', '/dingtalk/v1/documents/createWorkspaceDoc', 'json', true, 'form', request);
}

model DeleteColumnsRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  column: long(name='Column', example='1', position='Body'),
  columnCount: long(name='ColumnCount', example='10', position='Body'),
  sheetId: string(name='SheetId', example='Sheet1', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  workbookId: string(name='WorkbookId', example='stxxxx', position='Body'),
}

model DeleteColumnsResponseBody = {
  id?: string(name='id', example='stxxxx'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model DeleteColumnsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteColumnsResponseBody(name='body'),
}

async function deleteColumns(request: DeleteColumnsRequest): DeleteColumnsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteColumns', 'POST', '/dingtalk/v1/documents/deleteColumns', 'json', true, 'form', request);
}

model DeleteDriveSpaceRequest {
  accountContext: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  spaceId: string(name='SpaceId', example='123', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model DeleteDriveSpaceResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model DeleteDriveSpaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDriveSpaceResponseBody(name='body'),
}

async function deleteDriveSpace(request: DeleteDriveSpaceRequest): DeleteDriveSpaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDriveSpace', 'POST', '/dingtalk/v1/documents/deleteDriveSpace', 'json', true, 'form', request);
}

model DeleteEventRequest {
  accountContext?: {
    accountId: string(name='accountId', example='123456'),
  }(name='AccountContext', shrink='json', position='Header'),
  calendarId: string(name='CalendarId', example='primary', position='Body'),
  eventId: string(name='EventId', example='iiiP35sJadba8aBSgjrwPRKgiEiF', position='Body'),
  pushNotification?: boolean(name='pushNotification', position='Body'),
}

model DeleteEventResponseBody = {
  content?: {
    data?: any(name='data', example='[]'),
  }(name='content'),
  errorCode?: string(name='errorCode', example='success'),
  errorCtx?: map[string]any(name='errorCtx'),
  errorMsg?: string(name='errorMsg', example='""'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', description='requestId', example='4248DCC9-785F-5A14-8BE0-830FD52E1261'),
  success?: boolean(name='success', example='True'),
}

model DeleteEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEventResponseBody(name='body'),
}

async function deleteEvent(request: DeleteEventRequest): DeleteEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteEvent', 'POST', '/dingtalk/v1/calendar/deleteEvent', 'json', true, 'form', request);
}

model DeleteFormDataRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType: string(name='AppType', example='APP_PBKTxxx', position='Body'),
  formInstanceId: string(name='FormInstanceId', example='FORM_INST_12345', position='Body'),
  language?: string(name='Language', example='zh_CN', position='Body'),
  systemToken: string(name='SystemToken', example='hexxxx', position='Body'),
}

model DeleteFormDataResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model DeleteFormDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFormDataResponseBody(name='body'),
}

async function deleteFormData(request: DeleteFormDataRequest): DeleteFormDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteFormData', 'POST', '/dingtalk/v1/yida/deleteFormData', 'json', true, 'form', request);
}

model DeleteInstanceRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType?: string(name='AppType', example='APP_PBKTxxx', position='Body'),
  language?: string(name='Language', example='zh_CN', position='Body'),
  processInstanceId?: string(name='ProcessInstanceId', example='f30233fb-72xxx', position='Body'),
  systemToken?: string(name='SystemToken', example='hexxxx', position='Body'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model DeleteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstance', 'POST', '/dingtalk/v1/yida/deleteInstance', 'json', true, 'form', request);
}

model DeleteLiveRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  liveId: string(name='LiveId', example='4d38xxxxx', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model DeleteLiveResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model DeleteLiveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLiveResponseBody(name='body'),
}

async function deleteLive(request: DeleteLiveRequest): DeleteLiveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteLive', 'POST', '/dingtalk/v1/ysp/deleteLive', 'json', true, 'form', request);
}

model DeleteMeetingRoomRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  roomId: string(name='RoomId', example='0ffb7xxxxx', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model DeleteMeetingRoomResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model DeleteMeetingRoomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMeetingRoomResponseBody(name='body'),
}

async function deleteMeetingRoom(request: DeleteMeetingRoomRequest): DeleteMeetingRoomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteMeetingRoom', 'POST', '/dingtalk/v1/ysp/deleteMeetingRoom', 'json', true, 'form', request);
}

model DeleteMeetingRoomGroupRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  groupId: string(name='GroupId', example='172', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model DeleteMeetingRoomGroupResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model DeleteMeetingRoomGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMeetingRoomGroupResponseBody(name='body'),
}

async function deleteMeetingRoomGroup(request: DeleteMeetingRoomGroupRequest): DeleteMeetingRoomGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteMeetingRoomGroup', 'POST', '/dingtalk/v1/ysp/deleteMeetingRoomGroup', 'json', true, 'form', request);
}

model DeleteRowsRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  row: long(name='Row', example='1', position='Body'),
  rowCount: long(name='RowCount', example='10', position='Body'),
  sheetId: string(name='SheetId', example='Sheet1', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  workbookId: string(name='WorkbookId', example='stxxxx', position='Body'),
}

model DeleteRowsResponseBody = {
  id?: string(name='id', example='stxxxx'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model DeleteRowsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRowsResponseBody(name='body'),
}

async function deleteRows(request: DeleteRowsRequest): DeleteRowsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRows', 'POST', '/dingtalk/v1/documents/deleteRows', 'json', true, 'form', request);
}

model DeleteScenegroupMemberRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  openConversationId: string(name='OpenConversationId', example='cidvkLfbOyIiSYqjgvAiWwFow==', position='Body'),
  userIds: string(name='UserIds', example='123xxx,223xxx', position='Body'),
}

model DeleteScenegroupMemberResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model DeleteScenegroupMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteScenegroupMemberResponseBody(name='body'),
}

async function deleteScenegroupMember(request: DeleteScenegroupMemberRequest): DeleteScenegroupMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteScenegroupMember', 'POST', '/dingtalk/v1/im/deleteScenegroupMember', 'json', true, 'form', request);
}

model DeleteSheetRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  sheetId: string(name='SheetId', example='Sheet1', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  workbookId: string(name='WorkbookId', example='stxxxx', position='Body'),
}

model DeleteSheetResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model DeleteSheetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSheetResponseBody(name='body'),
}

async function deleteSheet(request: DeleteSheetRequest): DeleteSheetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSheet', 'POST', '/dingtalk/v1/documents/deleteSheet', 'json', true, 'form', request);
}

model DeleteSubscribedCalendarRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  calendarId: string(name='CalendarId', example='MzM5Mxxx', position='Body'),
}

model DeleteSubscribedCalendarResponseBody = {
  result?: boolean(name='Result', example='true'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model DeleteSubscribedCalendarResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSubscribedCalendarResponseBody(name='body'),
}

async function deleteSubscribedCalendar(request: DeleteSubscribedCalendarRequest): DeleteSubscribedCalendarResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSubscribedCalendar', 'POST', '/dingtalk/v1/calendar/deleteSubscribedCalendar', 'json', true, 'form', request);
}

model DeleteTodoTaskRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  operatorId?: string(name='operatorId', example='12345', position='Body'),
  taskId: string(name='taskId', example='63edc8da7e917d6ecdaab11b', position='Body'),
}

model DeleteTodoTaskResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model DeleteTodoTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTodoTaskResponseBody(name='body'),
}

async function deleteTodoTask(request: DeleteTodoTaskRequest): DeleteTodoTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTodoTask', 'POST', '/dingtalk/v1/task/deleteTodoTask', 'json', true, 'form', request);
}

model DeleteWorkspaceDocMembersRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  members: [ 
    {
      memberId: string(name='MemberId', example='012345'),
      memberType: string(name='MemberType', example='USER'),
    }
  ](name='Members', shrink='json', position='Body'),
  nodeId: string(name='NodeId', example='YRBGv0xxx', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  workspaceId: string(name='WorkspaceId', example='YRBGvyxxx', position='Body'),
}

model DeleteWorkspaceDocMembersResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model DeleteWorkspaceDocMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWorkspaceDocMembersResponseBody(name='body'),
}

async function deleteWorkspaceDocMembers(request: DeleteWorkspaceDocMembersRequest): DeleteWorkspaceDocMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteWorkspaceDocMembers', 'POST', '/dingtalk/v1/documents/deleteWorkspaceDocMembers', 'json', true, 'form', request);
}

model DeleteWorkspaceMembersRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  members: [ 
    {
      memberId: string(name='MemberId', example='012345'),
      memberType: string(name='MemberType', example='USER'),
    }
  ](name='Members', shrink='json', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  workspaceId: string(name='WorkspaceId', example='123', position='Body'),
}

model DeleteWorkspaceMembersResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model DeleteWorkspaceMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWorkspaceMembersResponseBody(name='body'),
}

async function deleteWorkspaceMembers(request: DeleteWorkspaceMembersRequest): DeleteWorkspaceMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteWorkspaceMembers', 'POST', '/dingtalk/v1/documents/deleteWorkspaceMembers', 'json', true, 'form', request);
}

model ExecuteBatchTaskRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType: string(name='AppType', example='APP_PBKTxxx', position='Body'),
  outResult: string(name='OutResult', example='disagree', position='Body'),
  remark?: string(name='Remark', example='remark', position='Body'),
  systemToken: string(name='SystemToken', example='hexxxx', position='Body'),
  taskInformationList: string(name='TaskInformationList', example='[{"taskId":"2291xxx","formInstId":"d84a79xxx"}, {"taskId":"2291xxx","formInstId":"f8035e2axxx"}]', position='Body'),
}

model ExecuteBatchTaskResponseBody = {
  failNumber?: int32(name='failNumber', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  successNumber?: int32(name='successNumber', example='2'),
  total?: int32(name='total', example='3'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model ExecuteBatchTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteBatchTaskResponseBody(name='body'),
}

async function executeBatchTask(request: ExecuteBatchTaskRequest): ExecuteBatchTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExecuteBatchTask', 'POST', '/dingtalk/v1/yida/executeBatchTask', 'json', true, 'form', request);
}

model ExecutePlatformTaskRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType?: string(name='AppType', example='APP_PBxxx', position='Body'),
  formDataJson?: string(name='FormDataJson', example='[]', position='Body'),
  language?: string(name='Language', example='zh_CN', position='Body'),
  noExecuteExpressions?: string(name='NoExecuteExpressions', example='y', position='Body'),
  outResult?: string(name='OutResult', example='Agree', position='Body'),
  processInstanceId?: string(name='ProcessInstanceId', example='f30233fb-72e1-4af4-8cb8-c7e0ea9ee530', position='Body'),
  remark?: string(name='Remark', position='Body'),
  systemToken?: string(name='SystemToken', example='hexxyy', position='Body'),
}

model ExecutePlatformTaskResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model ExecutePlatformTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecutePlatformTaskResponseBody(name='body'),
}

async function executePlatformTask(request: ExecutePlatformTaskRequest): ExecutePlatformTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExecutePlatformTask', 'POST', '/dingtalk/v1/yida/executePlatformTask', 'json', true, 'form', request);
}

model ExecuteTaskRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType?: string(name='AppType', example='APP_PBKT0MFBEBTDO8T7SLVP', position='Body'),
  digitalSignUrl?: string(name='DigitalSignUrl', example='http://', position='Body'),
  formDataJson?: string(name='FormDataJson', example='{}', position='Body'),
  language?: string(name='Language', example='zh_CN', position='Body'),
  noExecuteExpressions?: string(name='NoExecuteExpressions', example='y', position='Body'),
  outResult?: string(name='OutResult', example='AGREE', position='Body'),
  processInstanceId?: string(name='ProcessInstanceId', example='f30233fb-72e1-4af4-8cb8-c7e0ea9ee530', position='Body'),
  remark?: string(name='Remark', position='Body'),
  systemToken?: string(name='SystemToken', example='hexxyy', position='Body'),
  taskId?: long(name='TaskId', example='12002575L', position='Body'),
}

model ExecuteTaskResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model ExecuteTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteTaskResponseBody(name='body'),
}

async function executeTask(request: ExecuteTaskRequest): ExecuteTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExecuteTask', 'POST', '/dingtalk/v1/yida/executeTask', 'json', true, 'form', request);
}

model ExpandGroupCapacityRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  openConversationId: string(name='OpenConversationId', example='cidt*****Xa4K10w==', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model ExpandGroupCapacityResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model ExpandGroupCapacityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExpandGroupCapacityResponseBody(name='body'),
}

async function expandGroupCapacity(request: ExpandGroupCapacityRequest): ExpandGroupCapacityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExpandGroupCapacity', 'POST', '/aliding/v1/im/expandGroupCapacity', 'json', true, 'form', request);
}

model GetActivityListRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType?: string(name='AppType', example='APP_PBxxx', position='Body'),
  language?: string(name='Language', example='zh_CN', position='Body'),
  processCode?: string(name='ProcessCode', example='TPROC--X1Gxx', position='Body'),
  systemToken?: string(name='SystemToken', example='hexxxx', position='Body'),
}

model GetActivityListResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ 
    {
      activityId?: string(name='ActivityId', example='0q8gsudxxx'),
      activityName?: string(name='ActivityName', example='activity123'),
      activityNameInEnglish?: string(name='ActivityNameInEnglish', example='activity123'),
    }
  ](name='result'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetActivityListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetActivityListResponseBody(name='body'),
}

async function getActivityList(request: GetActivityListRequest): GetActivityListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetActivityList', 'POST', '/dingtalk/v1/yida/getActivityList', 'json', true, 'form', request);
}

model GetAllSheetsRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  workbookId: string(name='WorkbookId', example='stxxxx', position='Body'),
}

model GetAllSheetsResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  value?: [ 
    {
      id?: string(name='Id', example='stxxxx'),
      name?: string(name='Name', example='Sheet1'),
    }
  ](name='value', example='[]'),
}

model GetAllSheetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAllSheetsResponseBody(name='body'),
}

async function getAllSheets(request: GetAllSheetsRequest): GetAllSheetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAllSheets', 'POST', '/dingtalk/v1/documents/getAllSheets', 'json', true, 'form', request);
}

model GetConversaionSpaceRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  openConversationId: string(name='OpenConversationId', example='cidB8Pzg****FIWPv2PMA==', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model GetConversaionSpaceResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  space?: {
    corpId?: string(name='CorpId', example='ding1234xxxxx'),
    createTime?: string(name='CreateTime', example='2022-01-01T10:00:00Z'),
    modifiedTime?: string(name='ModifiedTime', example='2022-01-01T10:00:00Z'),
    spaceId?: string(name='SpaceId', example='798xxxxx'),
  }(name='space'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetConversaionSpaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConversaionSpaceResponseBody(name='body'),
}

async function getConversaionSpace(request: GetConversaionSpaceRequest): GetConversaionSpaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetConversaionSpace', 'POST', '/dingtalk/v1/documents/getConversaionSpace', 'json', true, 'form', request);
}

model GetCorpAccomplishmentTasksRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appTypes?: string(name='AppTypes', example='APP_PBKTxxx', position='Body'),
  corpId: string(name='CorpId', example='corpIdxxx', position='Body'),
  createFromTimeGMT?: long(name='CreateFromTimeGMT', example='2021-05-01', position='Body'),
  createToTimeGMT?: long(name='CreateToTimeGMT', example='2021-05-01', position='Body'),
  keyword?: string(name='Keyword', example='**', position='Body'),
  language?: string(name='Language', example='zh-CN', position='Body'),
  pageNumber?: int32(name='PageNumber', example='20', position='Body'),
  pageSize?: int32(name='PageSize', example='20', position='Body'),
  processCodes?: string(name='ProcessCodes', example='["xx","xxx"]', position='Body'),
  token: string(name='Token', example='hexxxx', position='Body'),
}

model GetCorpAccomplishmentTasksResponseBody = {
  data?: [ 
    {
      activeTimeGMT?: string(name='ActiveTimeGMT', example='2020-01-01'),
      actualActionerId?: string(name='ActualActionerId', example='123456'),
      appType?: string(name='AppType', example='APP_XCxxx'),
      createTimeGMT?: string(name='CreateTimeGMT', example='2020-01-01'),
      finishTimeGMT?: string(name='FinishTimeGMT', example='2020-01-01'),
      originatorEmail?: string(name='OriginatorEmail', example='123456@li.com'),
      originatorId?: string(name='OriginatorId', example='123456'),
      originatorName?: string(name='OriginatorName', example='名称'),
      originatorNameInEnglish?: string(name='OriginatorNameInEnglish', example='name'),
      originatorNickName?: string(name='OriginatorNickName', example='昵称'),
      originatorNickNameInEnglish?: string(name='OriginatorNickNameInEnglish', example='english nick'),
      originatorPhoto?: string(name='OriginatorPhoto', example='originatorPhotoexample'),
      outResult?: string(name='OutResult', example='agree'),
      outResultName?: string(name='OutResultName', example='结果名称'),
      processInstanceId?: string(name='ProcessInstanceId', example='instancexxxx'),
      title?: string(name='Title', example='标题'),
    }
  ](name='data', example='[{}]'),
  pageNumber?: long(name='pageNumber', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: long(name='totalCount', example='10'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetCorpAccomplishmentTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCorpAccomplishmentTasksResponseBody(name='body'),
}

async function getCorpAccomplishmentTasks(request: GetCorpAccomplishmentTasksRequest): GetCorpAccomplishmentTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCorpAccomplishmentTasks', 'POST', '/dingtalk/v1/yida/getCorpAccomplishmentTasks', 'json', true, 'form', request);
}

model GetCorpTasksRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appTypes: string(name='AppTypes', example='APP_PBKxxx', position='Body'),
  corpId: string(name='CorpId', example='corpId', position='Body'),
  createFromTimeGMT?: long(name='CreateFromTimeGMT', example='2021-05-01', position='Body'),
  createToTimeGMT?: long(name='CreateToTimeGMT', example='2021-05-01', position='Body'),
  keyword?: string(name='Keyword', example='keyword', position='Body'),
  language?: string(name='Language', example='zh-CN', position='Body'),
  pageNumber?: int32(name='PageNumber', example='20', position='Body'),
  pageSize?: int32(name='PageSize', example='20', position='Body'),
  processCodes?: string(name='ProcessCodes', example='["xx","xxx"]', position='Body'),
  token: string(name='Token', example='hexxxx', position='Body'),
}

model GetCorpTasksResponseBody = {
  data?: [ 
    {
      activeTimeGMT?: string(name='ActiveTimeGMT', example='2020-01-01'),
      actualActionerId?: string(name='ActualActionerId', example='123456'),
      appType?: string(name='AppType', example='APP_XCxxx'),
      createTimeGMT?: string(name='CreateTimeGMT', example='2020-01-01'),
      finishTimeGMT?: string(name='FinishTimeGMT', example='2020-01-01'),
      originatorEmail?: string(name='OriginatorEmail', example='123456@li.com'),
      originatorId?: string(name='OriginatorId', example='123456'),
      originatorName?: string(name='OriginatorName', example='名称'),
      originatorNameInEnglish?: string(name='OriginatorNameInEnglish', example='name'),
      originatorNickName?: string(name='OriginatorNickName', example='昵称'),
      originatorNickNameEn?: string(name='OriginatorNickNameEn', example='nick en'),
      originatorNickNameInEnglish?: string(name='OriginatorNickNameInEnglish', example='english nick'),
      originatorPhoto?: string(name='OriginatorPhoto', example='originatorPhotoexample'),
      outResult?: string(name='OutResult', example='agree'),
      outResultName?: string(name='OutResultName', example='结果名称'),
      processInstanceId?: string(name='ProcessInstanceId', example='instancexxxx'),
      status?: string(name='Status', example='running'),
      taskId?: string(name='TaskId', example='taskId'),
      taskType?: string(name='TaskType', example='running'),
      title?: string(name='Title', example='标题'),
      titleInEnglish?: string(name='TitleInEnglish', example='title'),
    }
  ](name='data', example='[{}]'),
  pageNumber?: long(name='pageNumber', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: long(name='totalCount', example='10'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetCorpTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCorpTasksResponseBody(name='body'),
}

async function getCorpTasks(request: GetCorpTasksRequest): GetCorpTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCorpTasks', 'POST', '/dingtalk/v1/yida/getCorpTasks', 'json', true, 'form', request);
}

model GetDocContentRequest {
  accountContext?: {
    accountId: string(name='accountId', example='ba3a9b612345678d8fedf544ef69d19e'),
  }(name='AccountContext', shrink='json', position='Header'),
  dentryUuid: string(name='DentryUuid', example='dentry_uuid', position='Body'),
  targetFormat?: string(name='TargetFormat', example='markdown', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
  userToken: string(name='userToken', position='Body'),
}

model GetDocContentResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  taskId?: long(name='taskId', example='task123abc'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetDocContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDocContentResponseBody(name='body'),
}

async function getDocContent(request: GetDocContentRequest): GetDocContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDocContent', 'POST', '/dingtalk/v2/documents/getDocContent', 'json', true, 'form', request);
}

model GetDocContentTakIdRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  dentryUuid: string(name='DentryUuid', example='qnYMoO1rWxrkmoj2I5L2PYkoJ47Z3je9', position='Body'),
  targetFormat?: string(name='TargetFormat', example='markdown', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model GetDocContentTakIdResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  taskId?: long(name='taskId', example='72652830001'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetDocContentTakIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDocContentTakIdResponseBody(name='body'),
}

async function getDocContentTakId(request: GetDocContentTakIdRequest): GetDocContentTakIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDocContentTakId', 'POST', '/dingtalk/v2/documents/getDocContentTakId', 'json', true, 'form', request);
}

model GetEventRequest {
  accountContext?: {
    accountId: string(name='accountId', example='123456'),
  }(name='AccountContext', shrink='json', position='Header'),
  calendarId: string(name='CalendarId', example='primary', position='Body'),
  eventId: string(name='EventId', example='311525211', position='Body'),
  maxAttendees?: long(name='MaxAttendees', example='100', position='Query'),
}

model GetEventResponseBody = {
  attendees?: [ 
    {
      displayName?: string(name='DisplayName', example='jack'),
      id?: string(name='Id', example='123456'),
      isOptional?: boolean(name='IsOptional', example='true'),
      responseStatus?: string(name='ResponseStatus', example='accepted'),
      self?: boolean(name='Self', example='true'),
    }
  ](name='attendees'),
  categories?: [ 
    {
      displayName?: string(name='DisplayName'),
    }
  ](name='categories'),
  createTime?: string(name='createTime', example='2020-01-01T10:15:30+08:00'),
  description?: string(name='description', example='2020-01-01T10:15:30+08:00'),
  end?: {
    date?: string(name='Date', example='2020-01-01'),
    dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
    timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
  }(name='end'),
  extendedProperties?: {
    sharedProperties?: {
      belongCorpId?: string(name='BelongCorpId', example='dingd*****1231231'),
      sourceOpenCid?: string(name='SourceOpenCid', example='zxcvasdfvb123===='),
    }(name='SharedProperties'),
  }(name='extendedProperties'),
  id?: string(name='id', example='iiiP35sJxxxxPRKgiEiF'),
  isAllDay?: boolean(name='isAllDay', example='true'),
  location?: {
    displayName?: string(name='DisplayName'),
    meetingRooms?: [ string ](name='MeetingRooms', description='--'),
  }(name='location'),
  meetingRooms?: [ 
    {
      displayName?: string(name='DisplayName', example='room 1-2-3'),
      responseStatus?: string(name='ResponseStatus', example='accepted'),
      roomId?: string(name='RoomId', example='c10315a8b4e740a317813ab6fxxxxxx'),
    }
  ](name='meetingRooms'),
  onlineMeetingInfo?: {
    conferenceId?: string(name='ConferenceId', example='5c4df21d-xxxx-a6db402b9f3a'),
    extraInfo?: map[string]any(name='ExtraInfo'),
    type?: string(name='Type', example='dingtalk'),
    url?: string(name='Url', example='dingtalk://dingtalkclient/page/videoxxxxalendar?confId=5c4df21d-xxxx9f3f&calendarId=127xxxx124'),
  }(name='onlineMeetingInfo'),
  organizer?: {
    displayName?: string(name='DisplayName', example='tony'),
    id?: string(name='Id', example='123456'),
    responseStatus?: string(name='ResponseStatus', example='accepted'),
    self?: boolean(name='Self', example='true'),
  }(name='organizer'),
  originStart?: {
    dateTime?: string(name='DateTime', example='2023-01-01T00:00:00Z'),
  }(name='originStart'),
  recurrence?: {
    pattern?: {
      dayOfMonth?: int32(name='DayOfMonth', example='14'),
      daysOfWeek?: string(name='DaysOfWeek', example='monday'),
      index?: string(name='Index', example='first'),
      interval?: int32(name='Interval', example='1'),
      type?: string(name='Type', example='daily'),
    }(name='Pattern'),
    range?: {
      endDate?: string(name='EndDate', example='2020-01-01T10:15:30+08:00'),
      numberOfOccurrences?: int32(name='NumberOfOccurrences', example='5'),
      type?: string(name='Type', example='noEnd'),
    }(name='Range'),
  }(name='recurrence'),
  reminders?: [ 
    {
      method?: string(name='Method', example='dingtalk'),
      minutes?: string(name='Minutes', example='15'),
    }
  ](name='reminders'),
  requestId?: string(name='requestId', description='requestId', example='requestId'),
  richTextDescription?: {
    text?: string(name='Text'),
  }(name='richTextDescription'),
  seriesMasterId?: string(name='seriesMasterId', example='cnNTbW1YbxxxxvdlQrQT09'),
  start?: {
    date?: string(name='Date', example='2020-01-01'),
    dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
    timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
  }(name='start'),
  status?: string(name='status', example='confirmed'),
  summary?: string(name='summary', example='test event'),
  updateTime?: string(name='updateTime', example='2020-01-01T10:15:30+08:00'),
}

model GetEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEventResponseBody(name='body'),
}

async function getEvent(request: GetEventRequest): GetEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetEvent', 'POST', '/dingtalk/v1/calendar/getEvent', 'json', true, 'form', request);
}

model GetFieldDefByUuidRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType: string(name='AppType', example='APP_PBKT0xxx', position='Body'),
  formUuid: string(name='FormUuid', example='FORM-xxxxx', position='Body'),
  systemToken: string(name='SystemToken', example='hexxxx', position='Body'),
}

model GetFieldDefByUuidResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ 
    {
      behavior?: string(name='Behavior', example='NORMAL'),
      children?: string(name='Children'),
      componentName?: string(name='ComponentName', example='TextareaField'),
      fieldId?: string(name='FieldId', example='textField_laq7xxx'),
      label?: any(name='Label', example='{}'),
      props?: any(name='Props', example='{}'),
      success?: boolean(name='Success', example='true'),
    }
  ](name='result'),
  success?: boolean(name='success', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetFieldDefByUuidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFieldDefByUuidResponseBody(name='body'),
}

async function getFieldDefByUuid(request: GetFieldDefByUuidRequest): GetFieldDefByUuidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFieldDefByUuid', 'POST', '/dingtalk/v1/yida/getFieldDefByUuid', 'json', true, 'form', request);
}

model GetFileDownloadInfoRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  dentryId?: string(name='DentryId', example='798xxxxx', position='Body'),
  option?: {
    preferIntranet?: boolean(name='PreferIntranet', example='true'),
    version?: long(name='Version', example='1'),
  }(name='Option', shrink='json', position='Body'),
  spaceId?: string(name='SpaceId', example='854xxxx', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model GetFileDownloadInfoResponseBody = {
  headerSignatureInfo?: {
    expirationSeconds?: int32(name='ExpirationSeconds', example='900'),
    headers?: map[string]string(name='Headers'),
    internalResourceUrls?: [ string ](name='InternalResourceUrls'),
    region?: string(name='Region', example='ZHANGJIAKOU'),
    resourceUrls?: [ string ](name='ResourceUrls'),
  }(name='headerSignatureInfo'),
  protocol?: string(name='protocol', example='HEADER_SIGNATURE'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetFileDownloadInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFileDownloadInfoResponseBody(name='body'),
}

async function getFileDownloadInfo(request: GetFileDownloadInfoRequest): GetFileDownloadInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFileDownloadInfo', 'POST', '/dingtalk/v1/documents/getFileDownloadInfo', 'json', true, 'form', request);
}

model GetFormComponentDefinitionListRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType: string(name='AppType', example='APP_PBKT0xxx', position='Body'),
  formUuid: string(name='FormUuid', example='FORM-xxxxx', position='Body'),
  language?: string(name='Language', example='zh_CN', position='Body'),
  systemToken: string(name='SystemToken', example='hexxxx', position='Body'),
}

model GetFormComponentDefinitionListResponseBody = {
  result?: [ 
    {
      componentName?: string(name='ComponentName', example='FooterYida'),
      fieldId?: string(name='FieldId', example='formContainer_kksjiuk'),
      label?: string(name='Label', example='{"en_US":""}'),
      parentId?: string(name='ParentId', example='formContainer_kksjiuk'),
    }
  ](name='Result'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetFormComponentDefinitionListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFormComponentDefinitionListResponseBody(name='body'),
}

async function getFormComponentDefinitionList(request: GetFormComponentDefinitionListRequest): GetFormComponentDefinitionListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFormComponentDefinitionList', 'POST', '/dingtalk/v1/yida/getFormComponentDefinitionList', 'json', true, 'form', request);
}

model GetFormDataByIDRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType?: string(name='AppType', example='APP_PBKT0MFBEBTDO8T7SLVP', position='Body'),
  id?: string(name='Id', example='FORM_INST_12345', position='Body'),
  language?: string(name='Language', example='zh_CN', position='Body'),
  systemToken?: string(name='SystemToken', example='hexxxx', position='Body'),
}

model GetFormDataByIDResponseBody = {
  formData?: map[string]any(name='formData'),
  formInstId?: string(name='formInstId', example='FORM_INST_12345'),
  modifiedTimeGMT?: string(name='modifiedTimeGMT', example='2021-05-01'),
  originator?: {
    departmentName?: string(name='DepartmentName', example='开发部'),
    email?: string(name='Email', example='abc@alimail.com'),
    name?: {
      nameInChinese?: string(name='NameInChinese', example='张三'),
      nameInEnglish?: string(name='NameInEnglish', example='ZhangSan'),
      type?: string(name='Type', example='i18n'),
    }(name='Name'),
    userId?: string(name='UserId', example='012345'),
  }(name='originator'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetFormDataByIDResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFormDataByIDResponseBody(name='body'),
}

async function getFormDataByID(request: GetFormDataByIDRequest): GetFormDataByIDResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFormDataByID', 'POST', '/dingtalk/v1/yida/getFormDataByID', 'json', true, 'form', request);
}

model GetFormListInAppRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType: string(name='AppType', example='APP_PBKT0xxx', position='Body'),
  formTypes?: string(name='FormTypes', example='receipt', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='20', position='Body'),
  systemToken: string(name='SystemToken', example='hexxxx', position='Body'),
}

model GetFormListInAppResponseBody = {
  currentPage?: int32(name='currentPage', example='1'),
  data?: [ 
    {
      creator?: string(name='Creator', example='012345'),
      formType?: string(name='FormType', example='receipt'),
      formUuid?: string(name='FormUuid', example='FORM-BAxxxxx'),
      gmtCreate?: string(name='GmtCreate', example='2023-02-22 15:27:07'),
      title?: {
        enUS?: string(name='EnUS', example='form'),
        zhCN?: string(name='ZhCN'),
      }(name='Title'),
    }
  ](name='data'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
  totalCount?: int32(name='totalCount', example='20'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetFormListInAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFormListInAppResponseBody(name='body'),
}

async function getFormListInApp(request: GetFormListInAppRequest): GetFormListInAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFormListInApp', 'POST', '/dingtalk/v1/yida/getFormListInApp', 'json', true, 'form', request);
}

model GetInnerGroupMembersRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  maxResults?: int32(name='MaxResults', example='100', position='Body'),
  nextToken?: string(name='NextToken', example='UZr*****', position='Body'),
  openConversationId?: string(name='OpenConversationId', example='cidB8Pzg****FIWPv2PMA==', position='Body'),
}

model GetInnerGroupMembersResponseBody = {
  hasMore?: boolean(name='hasMore', example='true'),
  nextToken?: string(name='nextToken', example='cdf***'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  userIds?: [ string ](name='userIds', example='["012345"]'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetInnerGroupMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInnerGroupMembersResponseBody(name='body'),
}

async function getInnerGroupMembers(request: GetInnerGroupMembersRequest): GetInnerGroupMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInnerGroupMembers', 'POST', '/dingtalk/v1/im/getInnerGroupMembers', 'json', true, 'form', request);
}

model GetInstanceByIdRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType?: string(name='AppType', example='APP_PBxxx', position='Body'),
  id?: string(name='Id', example='f30233fb-72e1-xxx', position='Body'),
  language?: string(name='Language', example='zh_CN', position='Body'),
  systemToken?: string(name='SystemToken', example='hexxxx', position='Body'),
}

model GetInstanceByIdResponseBody = {
  actionExecutor?: [ 
    {
      deptName?: string(name='DeptName', example='开发部'),
      email?: string(name='Email', example='abc@alimail.com'),
      name?: {
        nameInChinese?: string(name='NameInChinese', example='张三'),
        nameInEnglish?: string(name='NameInEnglish', example='ZhangSan'),
        type?: string(name='Type', example='i18n'),
      }(name='Name'),
      userId?: string(name='UserId', example='manager123'),
    }
  ](name='actionExecutor'),
  approvedResult?: string(name='approvedResult', example='agree'),
  createTimeGMT?: string(name='createTimeGMT', example='2021-05-01'),
  data?: map[string]any(name='data'),
  formUuid?: string(name='formUuid', example='FORM-EF6Y4xxx'),
  instanceStatus?: string(name='instanceStatus', example='RUNNING'),
  modifiedTimeGMT?: string(name='modifiedTimeGMT', example='2021-05-01'),
  originator?: {
    deptName?: string(name='DeptName', example='开发部'),
    email?: string(name='Email', example='abc@alimail.com'),
    name?: {
      nameInChinese?: string(name='NameInChinese', example='张三'),
      nameInEnglish?: string(name='NameInEnglish', example='ZhangSan'),
      type?: string(name='Type', example='i18n'),
    }(name='Name'),
    userId?: string(name='UserId', example='manager123'),
  }(name='originator'),
  processCode?: string(name='processCode', example='TPROC--X1Gxxx'),
  processInstanceId?: string(name='processInstanceId', example='f30233fb-72e1-4xxx'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  title?: string(name='title', example='李四发起的请购单'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
  version?: long(name='version', example='1'),
}

model GetInstanceByIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceByIdResponseBody(name='body'),
}

async function getInstanceById(request: GetInstanceByIdRequest): GetInstanceByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstanceById', 'POST', '/dingtalk/v1/yida/getInstanceById', 'json', true, 'form', request);
}

model GetInstanceIdListRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType?: string(name='AppType', example='APP_PBxxx', position='Body'),
  approvedResult?: string(name='ApprovedResult', example='agree', position='Body'),
  createFromTimeGMT?: string(name='CreateFromTimeGMT', example='2021-05-01', position='Body'),
  createToTimeGMT?: string(name='CreateToTimeGMT', example='2021-05-01', position='Body'),
  formUuid?: string(name='FormUuid', example='FORM-EF6Yxxx', position='Body'),
  instanceStatus?: string(name='InstanceStatus', example='RUNNING', position='Body'),
  language?: string(name='Language', example='zh_CN', position='Body'),
  modifiedFromTimeGMT?: string(name='ModifiedFromTimeGMT', example='2021-05-01', position='Body'),
  modifiedToTimeGMT?: string(name='ModifiedToTimeGMT', example='2021-09-10', position='Body'),
  originatorId?: string(name='OriginatorId', example='012345', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  searchFieldJson?: string(name='SearchFieldJson', example='{\\"textField\\":\\"123\\"}', position='Body'),
  systemToken?: string(name='SystemToken', example='hexxxx', position='Body'),
  taskId?: string(name='TaskId', example='1045001', position='Body'),
}

model GetInstanceIdListResponseBody = {
  data?: [ string ](name='data', example='[ "FINST-BOOxxx" ]'),
  pageNumber?: long(name='pageNumber', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: long(name='totalCount', example='10'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetInstanceIdListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceIdListResponseBody(name='body'),
}

async function getInstanceIdList(request: GetInstanceIdListRequest): GetInstanceIdListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstanceIdList', 'POST', '/dingtalk/v1/yida/getInstanceIdList', 'json', true, 'form', request);
}

model GetInstancesRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType?: string(name='AppType', example='APP_PBxxx', position='Body'),
  approvedResult?: string(name='ApprovedResult', example='agree', position='Body'),
  createFromTimeGMT?: string(name='CreateFromTimeGMT', example='2021-05-01', position='Body'),
  createToTimeGMT?: string(name='CreateToTimeGMT', example='2021-05-01', position='Body'),
  formUuid?: string(name='FormUuid', example='FORM-EF6Yxxx', position='Body'),
  instanceStatus?: string(name='InstanceStatus', example='RUNNING', position='Body'),
  language?: string(name='Language', example='zh_CN', position='Body'),
  modifiedFromTimeGMT?: string(name='ModifiedFromTimeGMT', example='2021-05-01', position='Body'),
  modifiedToTimeGMT?: string(name='ModifiedToTimeGMT', example='2021-09-10', position='Body'),
  orderConfigJson?: string(name='OrderConfigJson', example='{}', position='Body'),
  originatorId?: string(name='OriginatorId', example='012345', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  searchFieldJson?: string(name='SearchFieldJson', example='{\\"textField\\":\\"123\\"}', position='Body'),
  systemToken?: string(name='SystemToken', example='hexxyy', position='Body'),
  taskId?: string(name='TaskId', example='1045001', position='Body'),
}

model GetInstancesResponseBody = {
  data?: [ 
    {
      actionExecutor?: [ 
        {
          deptName?: string(name='DeptName', example='开发部'),
          email?: string(name='Email', example='abc@alimail.com'),
          name?: {
            nameInChinese?: string(name='NameInChinese', example='张三'),
            nameInEnglish?: string(name='NameInEnglish', example='ZhangSan'),
            type?: string(name='Type', example='i18n'),
          }(name='Name'),
          userId?: string(name='UserId', example='manager123'),
        }
      ](name='ActionExecutor'),
      approvedResult?: string(name='ApprovedResult', example='agree'),
      createTimeGMT?: string(name='CreateTimeGMT', example='2021-05-01'),
      data?: map[string]any(name='Data'),
      formUuid?: string(name='FormUuid', example='FORM-EF6Y4G8WO2FN0SUB43TDQ3CGC3FMFQ1G9400RCJ3'),
      instanceStatus?: string(name='InstanceStatus', example='RUNNING'),
      modifiedTimeGMT?: string(name='ModifiedTimeGMT', example='2021-05-01'),
      originator?: {
        deptName?: string(name='DeptName', example='开发部'),
        email?: string(name='Email', example='abc@alimail.com'),
        name?: {
          nameInChinese?: string(name='NameInChinese', example='张三'),
          nameInEnglish?: string(name='NameInEnglish', example='ZhangSan'),
          type?: string(name='Type', example='i18n'),
        }(name='Name'),
        userId?: string(name='UserId', example='manager123'),
      }(name='Originator'),
      processCode?: string(name='ProcessCode', example='TPROC--X1Gxxx'),
      processInstanceId?: string(name='ProcessInstanceId', example='f30233fb-72e1-4af4-8cb8-c7e0ea9ee530'),
      title?: string(name='Title', example='小红发起的请购单'),
      version?: long(name='Version', example='1.0'),
    }
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: long(name='totalCount', example='10'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstancesResponseBody(name='body'),
}

async function getInstances(request: GetInstancesRequest): GetInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstances', 'POST', '/dingtalk/v1/yida/getInstances', 'json', true, 'form', request);
}

model GetInstancesByIdListRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType?: string(name='AppType', example='APP_PBxxx', position='Body'),
  language?: string(name='Language', example='zh_CN', position='Body'),
  processInstanceIds?: string(name='ProcessInstanceIds', example='inst-123,inst-223', position='Body'),
  systemToken?: string(name='SystemToken', example='hexxxx', position='Body'),
}

model GetInstancesByIdListResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ 
    {
      actionExecutor?: [ 
        {
          departmentName?: string(name='DepartmentName', example='开发部'),
          email?: string(name='Email', example='abc@alimail.com'),
          name?: {
            nameInChinese?: string(name='NameInChinese', example='张三'),
            nameInEnglish?: string(name='NameInEnglish', example='ZhangSan'),
            type?: string(name='Type', example='i18n'),
          }(name='Name'),
          userId?: string(name='UserId', example='manager123'),
        }
      ](name='ActionExecutor'),
      approvedResult?: string(name='ApprovedResult', example='agree'),
      data?: map[string]any(name='Data'),
      formUuid?: string(name='FormUuid', example='FORM-EF6Y4G8WO2FN0SUB43TDQ3CGC3FMFQ1G9400RCJ3'),
      instanceStatus?: string(name='InstanceStatus', example='RUNNING'),
      originator?: {
        departmentName?: string(name='DepartmentName', example='开发部'),
        email?: string(name='Email', example='abc@alimail.com'),
        name?: {
          nameInChinese?: string(name='NameInChinese', example='张三'),
          nameInEnglish?: string(name='NameInEnglish', example='ZhangSan'),
          type?: string(name='Type', example='i18n'),
        }(name='Name'),
        userId?: string(name='UserId', example='manager123'),
      }(name='Originator'),
      processCode?: string(name='ProcessCode', example='TPROC--X1Gxxx'),
      processInstanceId?: string(name='ProcessInstanceId', example='f30233fb-72e1-4xxx'),
      title?: string(name='Title', example='李四发起的请购单'),
    }
  ](name='result'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetInstancesByIdListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstancesByIdListResponseBody(name='body'),
}

async function getInstancesByIdList(request: GetInstancesByIdListRequest): GetInstancesByIdListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstancesByIdList', 'POST', '/dingtalk/v1/yida/getInstancesByIdList', 'json', true, 'form', request);
}

model GetLiveReplayUrlRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  liveId: string(name='LiveId', example='4d38xxxxx', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model GetLiveReplayUrlResponseBody = {
  replayUrl?: string(name='replayUrl', example='https://xxxxxxxx'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetLiveReplayUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLiveReplayUrlResponseBody(name='body'),
}

async function getLiveReplayUrl(request: GetLiveReplayUrlRequest): GetLiveReplayUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLiveReplayUrl', 'POST', '/dingtalk/v1/ysp/getLiveReplayUrl', 'json', true, 'form', request);
}

model GetMeCorpSubmissionRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appTypes?: string(name='AppTypes', example='[\\"APP_xxx\\",\\"APP_xxx\\"]', position='Body'),
  corpId?: string(name='CorpId', example='ding123', position='Body'),
  createFromTimeGMT?: long(name='CreateFromTimeGMT', example='2021-05-01', position='Body'),
  createToTimeGMT?: long(name='CreateToTimeGMT', example='2021-05-01', position='Body'),
  keyword?: string(name='Keyword', example='{}', position='Body'),
  language?: string(name='Language', example='zh_CN', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  processCodes?: string(name='ProcessCodes', example='[\\"xx\\",\\"xxx\\"]', position='Body'),
  token?: string(name='Token', example='JHASD123HAXXX', position='Body'),
}

model GetMeCorpSubmissionResponseBody = {
  data?: [ 
    {
      actioner?: [ 
        {
          buName?: string(name='BuName', example='某研究部'),
          email?: string(name='Email', example='abc@alimail.com'),
          employeeType?: string(name='EmployeeType', example='正式'),
          employeeTypeInformation?: string(name='EmployeeTypeInformation', example='official'),
          humanResourceGroupWorkNumber?: string(name='HumanResourceGroupWorkNumber', example='123311221'),
          isSystemAdmin?: boolean(name='IsSystemAdmin', example='true'),
          level?: string(name='Level', example='P7'),
          name?: string(name='Name', example='请购单'),
          nickName?: string(name='NickName', example='与心'),
          orderNumber?: string(name='OrderNumber', example='o-YDJKINSxxx'),
          personalPhoto?: string(name='PersonalPhoto', example='https://abc.com/a.png'),
          personalPhotoUrl?: string(name='PersonalPhotoUrl', example='https://oss/zhangsan.png'),
          pinyinNameAll?: string(name='PinyinNameAll', example='XIAOHONG'),
          pinyinNickName?: string(name='PinyinNickName', example='xiaohong'),
          state?: string(name='State', example='running'),
          superUserId?: string(name='SuperUserId', example='manager123'),
          tbWang?: string(name='TbWang', example='wang123'),
          userId?: string(name='UserId', example='manager123'),
        }
      ](name='Actioner'),
      actionerId?: [ string ](name='ActionerId'),
      actionerName?: [ string ](name='ActionerName'),
      appType?: string(name='AppType', example='APP_PBKT0xxx'),
      createTimeGMT?: string(name='CreateTimeGMT', example='2021-01-01'),
      currentActivityInstances?: [ 
        {
          activityId?: string(name='ActivityId', example='act-xxaanfaf'),
          activityInstanceStatus?: string(name='ActivityInstanceStatus', example='running'),
          activityName?: string(name='ActivityName', example='activity-124'),
          activityNameEn?: string(name='ActivityNameEn', example='redirect task'),
          id?: long(name='Id', example='12345'),
        }
      ](name='CurrentActivityInstances'),
      dataMap?: map[string]any(name='DataMap'),
      dataType?: string(name='DataType', example='edit'),
      finishTimeGMT?: string(name='FinishTimeGMT', example='2021-01-01'),
      formInstanceId?: string(name='FormInstanceId', example='FINST-NJYJxxx'),
      formUuid?: string(name='FormUuid', example='FORM-EF6xxx'),
      instanceValue?: string(name='InstanceValue', example='符合宜搭表单实例格式的json数据'),
      modifiedTimeGMT?: string(name='ModifiedTimeGMT', example='2021-01-01'),
      originatorAvatar?: string(name='OriginatorAvatar', example='zhangsan@mediaId'),
      originatorDisplayName?: string(name='OriginatorDisplayName', example='张三'),
      originatorId?: string(name='OriginatorId', example='manager123'),
      processApprovedResult?: string(name='ProcessApprovedResult', example='同意'),
      processApprovedResultText?: string(name='ProcessApprovedResultText', example='通过'),
      processCode?: string(name='ProcessCode', example='TPROC--X1Gxxx'),
      processId?: long(name='ProcessId', example='52330'),
      processInstanceId?: string(name='ProcessInstanceId', example='f30233fb-72e1-xxx'),
      processInstanceStatus?: string(name='ProcessInstanceStatus', example='finished'),
      processInstanceStatusText?: string(name='ProcessInstanceStatusText', example='已同意'),
      processName?: string(name='ProcessName', example='小红的单子'),
      title?: string(name='Title', example='小红发起的请购单'),
      version?: long(name='Version', example='1'),
    }
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: long(name='totalCount', example='10'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetMeCorpSubmissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMeCorpSubmissionResponseBody(name='body'),
}

async function getMeCorpSubmission(request: GetMeCorpSubmissionRequest): GetMeCorpSubmissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMeCorpSubmission', 'POST', '/dingtalk/v1/yida/getMeCorpSubmission', 'json', true, 'form', request);
}

model GetMeetingRoomsScheduleRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  endTime: string(name='EndTime', example='2020-01-01T10:15:30+08:00', position='Body'),
  roomIds: [ string ](name='RoomIds', example='["4002xxxxx"]', shrink='json', position='Body'),
  startTime: string(name='StartTime', example='2020-01-01T10:15:30+08:00', position='Body'),
}

model GetMeetingRoomsScheduleResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  scheduleInformation?: [ 
    {
      error?: string(name='Error', example='无权限'),
      roomId?: string(name='RoomId', example='4002f89xxxxx'),
      scheduleItems?: [ 
        {
          end?: {
            dateTime?: string(name='DateTime', example='2020-01-02T10:15:30+08:00'),
            timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
          }(name='End'),
          eventId?: string(name='EventId', example='UzZvxxxxx'),
          organizer?: {
            id?: string(name='Id', example='012345'),
          }(name='Organizer'),
          start?: {
            dateTime?: string(name='DateTime', example='2020-01-02T10:15:30+08:00'),
            timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
          }(name='Start'),
          status?: string(name='Status', example='BUSY'),
        }
      ](name='ScheduleItems'),
    }
  ](name='scheduleInformation'),
}

model GetMeetingRoomsScheduleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMeetingRoomsScheduleResponseBody(name='body'),
}

async function getMeetingRoomsSchedule(request: GetMeetingRoomsScheduleRequest): GetMeetingRoomsScheduleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMeetingRoomsSchedule', 'POST', '/dingtalk/v1/calendar/getMeetingRoomsSchedule', 'json', true, 'form', request);
}

model GetMineWorkspaceRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  request?: map[string]any(name='Request', shrink='json', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model GetMineWorkspaceResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  workspace?: {
    corpId?: string(name='CorpId', example='ding16b241fd05********288'),
    cover?: string(name='Cover', example='https://example/file-manage-files/zh-CN/202***13/ldet/XXXX.jpg'),
    createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
    creatorId?: string(name='CreatorId', example='01472825524039877041'),
    description?: string(name='Description', example='workspace_description'),
    icon?: {
      type?: string(name='Type', example='URL'),
      value?: string(name='Value', example='https://example/file-manage-files/zh-CN/202***13/ldet/avatar3.jpg'),
    }(name='Icon'),
    modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
    modifierId?: string(name='ModifierId', example='01472825524039877041'),
    name?: string(name='Name', example='workspace_name'),
    permissionRole?: string(name='PermissionRole', example='READER'),
    rootNodeId?: string(name='RootNodeId', example='MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3'),
    teamId?: string(name='TeamId', example='lHiicjNFM2iSFYSdz2iPuI8ZwiEiE'),
    type?: string(name='Type', example='TEAM'),
    url?: string(name='Url', example='workspace_url'),
    workspaceId?: string(name='WorkspaceId', example='9r09jSO3WARyxd8A'),
  }(name='workspace'),
}

model GetMineWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMineWorkspaceResponseBody(name='body'),
}

async function getMineWorkspace(request: GetMineWorkspaceRequest): GetMineWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMineWorkspace', 'POST', '/dingtalk/v2/documents/getMineWorkspace', 'json', true, 'form', request);
}

model GetNewestInnerGroupsRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  request?: map[string]any(name='Request', example='{}', shrink='json', position='Body'),
}

model GetNewestInnerGroupsResponseBody = {
  groupInfos?: [ 
    {
      icon?: string(name='Icon', example='@lADOADma*****QKA'),
      memberAmount?: string(name='MemberAmount', example='10'),
      openConversationId?: string(name='OpenConversationId', example='cid1e******=='),
      title?: string(name='Title'),
    }
  ](name='groupInfos'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetNewestInnerGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNewestInnerGroupsResponseBody(name='body'),
}

async function getNewestInnerGroups(request: GetNewestInnerGroupsRequest): GetNewestInnerGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetNewestInnerGroups', 'POST', '/dingtalk/v1/im/getNewestInnerGroups', 'json', true, 'form', request);
}

model GetNodeRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  nodeId: string(name='NodeId', example='a9E05BDRVQ9K600yf1NplNDxV63zgkYA', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  withPermissionRole?: boolean(name='WithPermissionRole', example='true', position='Body'),
  withStatisticalInfo?: boolean(name='WithStatisticalInfo', example='true', position='Body'),
}

model GetNodeResponseBody = {
  node?: {
    category?: string(name='Category', example='ALIDOC'),
    createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
    creatorId?: string(name='CreatorId', example='01472825524039877041'),
    extension?: string(name='Extension', example='adoc'),
    hasChildren?: boolean(name='HasChildren', example='true'),
    modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
    modifierId?: string(name='ModifierId', example='01472825524039877041'),
    name?: string(name='Name', example='node_name'),
    nodeId?: string(name='NodeId', example='MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3'),
    permissionRole?: string(name='PermissionRole', example='READER'),
    size?: long(name='Size', example='123123'),
    statisticalInfo?: {
      wordCount?: long(name='WordCount', example='200'),
    }(name='StatisticalInfo'),
    type?: string(name='Type', example='FILE'),
    url?: string(name='Url', example='node_url'),
    workspaceId?: string(name='WorkspaceId', example='By8jQS1ZYjGn5b0M'),
  }(name='node'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model GetNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeResponseBody(name='body'),
}

async function getNode(request: GetNodeRequest): GetNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetNode', 'POST', '/dingtalk/v2/documents/getNode', 'json', true, 'form', request);
}

model GetNodeByUrlRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  option?: {
    withPermissionRole?: boolean(name='WithPermissionRole', example='false'),
    withStatisticalInfo?: boolean(name='WithStatisticalInfo', example='false'),
  }(name='Option', shrink='json', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  url: string(name='Url', example='https://alidocs.dingtalk.com/i/nodes/EpGBa2L*********gN7R35y', position='Body'),
}

model GetNodeByUrlResponseBody = {
  node?: {
    category?: string(name='Category', example='ALIDOC'),
    createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
    creatorId?: string(name='CreatorId', example='01472825524039877041'),
    extension?: string(name='Extension', example='adoc'),
    hasChildren?: boolean(name='HasChildren', example='false'),
    modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
    modifierId?: string(name='ModifierId', example='01472825524039877041'),
    name?: string(name='Name', example='node_name'),
    nodeId?: string(name='NodeId', example='EpGBa2Lm8aRmzkkNhplMx1prWgN7R35y'),
    permissionRole?: string(name='PermissionRole', example='READER'),
    size?: long(name='Size', example='512'),
    statisticalInfo?: {
      wordCount?: long(name='WordCount', example='123'),
    }(name='StatisticalInfo'),
    type?: string(name='Type', example='FILE'),
    url?: string(name='Url', example='node_url'),
    workspaceId?: string(name='WorkspaceId', example='By8jQS1ZYjGn5b0M'),
  }(name='node'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model GetNodeByUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeByUrlResponseBody(name='body'),
}

async function getNodeByUrl(request: GetNodeByUrlRequest): GetNodeByUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetNodeByUrl', 'POST', '/dingtalk/v2/documents/getNodeByUrl', 'json', true, 'form', request);
}

model GetNodesRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  nodeIds: [ string ](name='NodeIds', shrink='json', position='Body'),
  option?: {
    withPermissionRole?: boolean(name='WithPermissionRole', example='false'),
    withStatisticalInfo?: boolean(name='WithStatisticalInfo', example='false'),
  }(name='Option', shrink='json', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model GetNodesResponseBody = {
  nodes?: [ 
    {
      category?: string(name='Category', example='ALIDOC'),
      createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
      creatorId?: string(name='CreatorId', example='01472825524039877041'),
      extension?: string(name='Extension', example='adoc'),
      hasChildren?: boolean(name='HasChildren', example='false'),
      modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
      modifierId?: string(name='ModifierId', example='01472825524039877041'),
      name?: string(name='Name', example='node_name'),
      nodeId?: string(name='NodeId', example='MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3'),
      permissionRole?: string(name='PermissionRole', example='READER'),
      size?: long(name='Size', example='512'),
      statisticalInfo?: {
        wordCount?: long(name='WordCount', example='123'),
      }(name='StatisticalInfo'),
      type?: string(name='Type', example='FILE'),
      url?: string(name='Url', example='node_url'),
      workspaceId?: string(name='WorkspaceId', example='MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3'),
    }
  ](name='nodes'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model GetNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodesResponseBody(name='body'),
}

async function getNodes(request: GetNodesRequest): GetNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetNodes', 'POST', '/dingtalk/v2/documents/getNodes', 'json', true, 'form', request);
}

model GetNotifyMeRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appTypes?: string(name='AppTypes', example='APP_PBKTxxx', position='Body'),
  corpId: string(name='CorpId', example='corpIdxxx', position='Body'),
  createFromTimeGMT?: long(name='CreateFromTimeGMT', example='2021-05-01', position='Body'),
  createToTimeGMT?: long(name='CreateToTimeGMT', example='2021-05-01', position='Body'),
  instanceCreateFromTimeGMT?: long(name='InstanceCreateFromTimeGMT', example='2021-05-01', position='Body'),
  instanceCreateToTimeGMT?: long(name='InstanceCreateToTimeGMT', example='2021-05-01', position='Body'),
  keyword?: string(name='Keyword', example='keyword', position='Body'),
  language?: string(name='Language', example='zh-CN', position='Body'),
  pageNumber?: int32(name='PageNumber', example='20', position='Body'),
  pageSize?: int32(name='PageSize', example='20', position='Body'),
  processCodes?: string(name='ProcessCodes', example='["xx","xxx"]', position='Body'),
  token: string(name='Token', example='hexxxx', position='Body'),
}

model GetNotifyMeResponseBody = {
  data?: [ 
    {
      activityId?: string(name='ActivityId', example='act-xxaanfaf'),
      appType?: string(name='AppType', example='APP_XCxxx'),
      corpId?: string(name='CorpId', example='corpIdxxx'),
      createTimeGMT?: string(name='CreateTimeGMT', example='2020-01-01'),
      creatorUserId?: string(name='CreatorUserId', example='123456'),
      formInstanceId?: string(name='FormInstanceId', example='formxxxx'),
      instStatus?: string(name='InstStatus', example='RUNNING'),
      mobileUrl?: string(name='MobileUrl', example='mobileUrlexample'),
      modifiedTimeGMT?: string(name='ModifiedTimeGMT', example='2020-01-01'),
    }
  ](name='data', example='[{}]'),
  pageNumber?: long(name='pageNumber', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: long(name='totalCount', example='10'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetNotifyMeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNotifyMeResponseBody(name='body'),
}

async function getNotifyMe(request: GetNotifyMeRequest): GetNotifyMeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetNotifyMe', 'POST', '/dingtalk/v1/yida/getNotifyMe', 'json', true, 'form', request);
}

model GetOpenUrlRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType: string(name='AppType', example='APP_PBKT0xxx', position='Body'),
  fileUrl: string(name='FileUrl', example='https://www.aliwork.com/fileHandle?appType=APP_VN7I6xxx&fileName=fileName.xlsx&instId=&type=download', position='Body'),
  language?: string(name='Language', example='zh_CN', position='Body'),
  systemToken: string(name='SystemToken', example='hexxxx', position='Body'),
  timeout?: long(name='Timeout', example='60000L', position='Body'),
}

model GetOpenUrlResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: string(name='result', example='https/www.aliwork.com'),
}

model GetOpenUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOpenUrlResponseBody(name='body'),
}

async function getOpenUrl(request: GetOpenUrlRequest): GetOpenUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetOpenUrl', 'POST', '/dingtalk/v1/yida/getOpenUrl', 'json', true, 'form', request);
}

model GetOperationRecordsRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType?: string(name='AppType', example='APP_PBxxx', position='Body'),
  language?: string(name='Language', example='zh_CN', position='Body'),
  processInstanceId?: string(name='ProcessInstanceId', example='f30233fb-72e1-4af4-8cb8-c7e0ea9ee530', position='Body'),
  systemToken?: string(name='SystemToken', example='hexxyy', position='Body'),
}

model GetOperationRecordsResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ 
    {
      action?: string(name='Action', example='return'),
      actionExit?: string(name='ActionExit', example='同意'),
      activeTimeGMT?: string(name='ActiveTimeGMT', example='2021-02-01'),
      activityId?: string(name='ActivityId', example='act-xxaanfaf'),
      dataId?: long(name='DataId', example='12345'),
      digitalSign?: string(name='DigitalSign', example='https://oss.com/Signature.pdf'),
      files?: string(name='Files', example='https://oss.com/a.pdf'),
      operateTimeGMT?: string(name='OperateTimeGMT', example='2021-01-01'),
      operateType?: string(name='OperateType', example='remove'),
      operatorDisplayName?: string(name='OperatorDisplayName', example='张三'),
      operatorName?: string(name='OperatorName', example='李四'),
      operatorNickName?: string(name='OperatorNickName', example='无冬'),
      operatorPhotoUrl?: string(name='OperatorPhotoUrl', example='https://oss.com/a.jpeg'),
      operatorStatus?: string(name='OperatorStatus', example='良好'),
      operatorUserId?: string(name='OperatorUserId', example='manager123'),
      processInstanceId?: string(name='ProcessInstanceId', example='f30233fb-72e1-4af4-8cb8-c7e0ea9ee530'),
      remark?: string(name='Remark', example='确认同意'),
      showName?: string(name='ShowName', example='请购类型'),
      size?: int32(name='Size', example='12'),
      taskExecuteType?: string(name='TaskExecuteType', example='同步'),
      taskHoldTimeGMT?: long(name='TaskHoldTimeGMT', example='2021-01-01'),
      taskId?: string(name='TaskId', example='task-123'),
      taskType?: string(name='TaskType', example='append task'),
      type?: string(name='Type', example='i18n'),
    }
  ](name='result'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetOperationRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOperationRecordsResponseBody(name='body'),
}

async function getOperationRecords(request: GetOperationRecordsRequest): GetOperationRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetOperationRecords', 'POST', '/dingtalk/v1/yida/getOperationRecords', 'json', true, 'form', request);
}

model GetProcessDefinitionRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType?: string(name='AppType', example='APP_PBxxx', position='Body'),
  corpId?: string(name='CorpId', example='ding123', position='Body'),
  groupId?: string(name='GroupId', example='c-xxafafaf', position='Body'),
  language?: string(name='Language', example='zh_CN', position='Body'),
  nameSpace?: string(name='NameSpace', example='dingtalk', position='Body'),
  orderNumber?: string(name='OrderNumber', example='o-YDJKIxxx', position='Body'),
  processInstanceId?: string(name='ProcessInstanceId', example='f30233fb-72e1-4af4-8cb8-c7e0ea9ee530', position='Body'),
  systemToken?: string(name='SystemToken', example='hexxyy', position='Body'),
  systemType?: string(name='SystemType', example='hexabc1234', position='Body'),
}

model GetProcessDefinitionResponseBody = {
  formUuid?: string(name='formUuid', example='FORM-EF6Y4xxx'),
  originator?: {
    departmentDescription?: string(name='DepartmentDescription', example='开发部成立于2000年'),
    displayEnName?: string(name='DisplayEnName', example='ZhangSan'),
    displayName?: string(name='DisplayName', example='测试应用'),
    masterDataDepartments?: [ 
      {
        deptName?: string(name='DeptName', example='开发部'),
        deptNameInEnglish?: string(name='DeptNameInEnglish', example='development department'),
        deptNo?: string(name='DeptNo', example='develop-A'),
        deptPath?: string(name='DeptPath', example='总部-开发部'),
        humanSourceGroupOrderNumber?: string(name='HumanSourceGroupOrderNumber', example='xxafafaf'),
        humanSourceGroupWorkNo?: string(name='HumanSourceGroupWorkNo', example='123311221'),
        id?: long(name='Id', example='12345'),
        masterWorkNo?: string(name='MasterWorkNo', example='1732245789'),
      }
    ](name='MasterDataDepartments'),
    orderNumber?: string(name='OrderNumber', example='o-YDJKINSxxx'),
    personalPhoto?: string(name='PersonalPhoto', example='https://abc.com/a.png'),
    status?: string(name='Status', example='running'),
    tbWang?: string(name='TbWang', example='wang123'),
    userId?: string(name='UserId', example='manager123'),
    userInfo?: string(name='UserInfo', example='张三'),
  }(name='originator'),
  outResult?: string(name='outResult', example='agree'),
  owners?: [ 
    {
      departmentDescription?: string(name='DepartmentDescription', example='开发部成立于2000年'),
      displayEnName?: string(name='DisplayEnName', example='ZhangSan'),
      displayName?: string(name='DisplayName', example='测试应用'),
      masterDataDepartments?: [ 
        {
          deptName?: string(name='DeptName', example='开发部'),
          deptNameInEnglish?: string(name='DeptNameInEnglish', example='development department'),
          deptNo?: string(name='DeptNo', example='develop-A'),
          deptPath?: string(name='DeptPath', example='总部-开发部'),
          humanSourceGroupOrderNumber?: string(name='HumanSourceGroupOrderNumber', example='xxafafaf'),
          humanSourceGroupWorkNo?: string(name='HumanSourceGroupWorkNo', example='123311221'),
          id?: long(name='Id', example='12345'),
          masterWorkNo?: string(name='MasterWorkNo', example='1732245789'),
        }
      ](name='MasterDataDepartments'),
      orderNumber?: string(name='OrderNumber', example='o-YDJKINSxxx'),
      personalPhoto?: string(name='PersonalPhoto', example='https://abc.com/a.png'),
      status?: string(name='Status', example='running'),
      tbWang?: string(name='TbWang', example='wang123'),
      userId?: string(name='UserId', example='manager123'),
      userInfo?: string(name='UserInfo', example='张三'),
    }
  ](name='owners'),
  processId?: string(name='processId', example='proc-123'),
  processInstanceId?: string(name='processInstanceId', example='f30233fb-72e1-4xxx'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  status?: string(name='status', example='running'),
  tasks?: [ 
    {
      actionerId?: string(name='ActionerId', example='manager123'),
      activity?: {
        activityId?: string(name='ActivityId', example='act-xxaanfaf'),
        activityInstanceStatus?: string(name='ActivityInstanceStatus', example='running'),
        activityName?: string(name='ActivityName', example='activity-124'),
        activityNameInEnglish?: string(name='ActivityNameInEnglish', example='redirect task'),
        id?: long(name='Id', example='12345'),
      }(name='Activity'),
      status?: string(name='Status', example='running'),
      taskId?: long(name='TaskId', example='792'),
    }
  ](name='tasks'),
  title?: string(name='title', example='李四发起的请购单'),
  variables?: map[string]any(name='variables'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetProcessDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProcessDefinitionResponseBody(name='body'),
}

async function getProcessDefinition(request: GetProcessDefinitionRequest): GetProcessDefinitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProcessDefinition', 'POST', '/dingtalk/v1/yida/getProcessDefinition', 'json', true, 'form', request);
}

model GetRangeRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  rangeAddress: string(name='RangeAddress', example='A3:C3', position='Body'),
  select?: string(name='Select', example='values', position='Body'),
  sheetId: string(name='SheetId', example='Sheet1', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  workbookId: string(name='WorkbookId', example='stxxxx', position='Body'),
}

model GetRangeResponseBody = {
  backgroundColors?: [[ 
    {
      red?: int32(name='Red', description='red', example='0'),
      green?: int32(name='Green', description='green', example='0'),
      blue?: int32(name='Blue', description='blue', example='0'),
      hexString?: string(name='HexString', description='hexString', example='#000000'),
    }
  ]  ](name='backgroundColors', example='[]'),
  displayValues?: [[ string ]  ](name='displayValues', example='[]'),
  formulas?: [[ string ]  ](name='formulas', example='[]'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  values?: [[ any ]  ](name='values', example='[]'),
}

model GetRangeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRangeResponseBody(name='body'),
}

async function getRange(request: GetRangeRequest): GetRangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRange', 'POST', '/dingtalk/v1/documents/getRange', 'json', true, 'form', request);
}

model GetRelatedWorkspacesRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  includeRecent?: boolean(name='IncludeRecent', example='true', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model GetRelatedWorkspacesResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
  workspaces?: [ 
    {
      createTime?: long(name='CreateTime', example='1638256965936'),
      deleted?: boolean(name='Deleted', example='false'),
      name?: string(name='Name', example='知识库'),
      owner?: string(name='Owner', example='Q2xwPOKiSLxxxx'),
      recentList?: [ 
        {
          lastEditTime?: long(name='LastEditTime', example='1638256965936'),
          name?: string(name='Name', example='知识库'),
          nodeId?: string(name='NodeId', example='nb9XxxxxxxmyAp'),
          url?: string(name='Url', example='https://alidocs.xxxx/nb9XJKdxxxxmyAp'),
        }
      ](name='RecentList'),
      role?: string(name='Role', example='OWNER'),
      url?: string(name='Url', example='https://alidocs.xxxx/nb9XJKdxxxxmyAp/docs/nb9XxxxxxxmyAp'),
      workspaceId?: string(name='WorkspaceId', example='nb9XJKdxxxxmyAp'),
    }
  ](name='workspaces'),
}

model GetRelatedWorkspacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRelatedWorkspacesResponseBody(name='body'),
}

async function getRelatedWorkspaces(request: GetRelatedWorkspacesRequest): GetRelatedWorkspacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRelatedWorkspaces', 'POST', '/dingtalk/v1/documents/getRelatedWorkspaces', 'json', true, 'form', request);
}

model GetReportTemplateByNameRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  templateName: string(name='TemplateName', example='我管理的模版', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model GetReportTemplateByNameResponseBody = {
  defaultReceivedConvs?: [ 
    {
      conversationId?: string(name='ConversationId', example='cid12334##2341'),
      title?: string(name='Title'),
    }
  ](name='defaultReceivedConvs'),
  defaultReceivers?: [ 
    {
      userName?: string(name='UserName'),
      userid?: string(name='Userid', example='1234'),
    }
  ](name='defaultReceivers'),
  fields?: [ 
    {
      fieldName?: string(name='FieldName', example='key1'),
      sort?: long(name='Sort', example='0'),
      type?: long(name='Type', example='1'),
    }
  ](name='fields'),
  id?: string(name='id', example='11111'),
  name?: string(name='name'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  userName?: string(name='userName'),
  userid?: string(name='userid', example='1234'),
}

model GetReportTemplateByNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetReportTemplateByNameResponseBody(name='body'),
}

async function getReportTemplateByName(request: GetReportTemplateByNameRequest): GetReportTemplateByNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetReportTemplateByName', 'POST', '/dingtalk/v1/log/getReportTemplateByName', 'json', true, 'form', request);
}

model GetReportUnReadCountRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  request?: map[string]any(name='Request', example='null', shrink='json', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model GetReportUnReadCountResponseBody = {
  count?: long(name='count', example='1'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model GetReportUnReadCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetReportUnReadCountResponseBody(name='body'),
}

async function getReportUnReadCount(request: GetReportUnReadCountRequest): GetReportUnReadCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetReportUnReadCount', 'POST', '/dingtalk/v1/log/getReportUnReadCount', 'json', true, 'form', request);
}

model GetRunningTasksRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType: string(name='AppType', example='APP_PBKxxx', position='Body'),
  language?: string(name='Language', example='zh-CN', position='Body'),
  processCodes?: string(name='ProcessCodes', example='["xx","xxx"]', position='Body'),
  processInstanceId?: string(name='ProcessInstanceId', example='instxxxxx', position='Body'),
  systemToken: string(name='SystemToken', example='hexxxx', position='Body'),
}

model GetRunningTasksResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ 
    {
      activeTimeGMT?: string(name='ActiveTimeGMT', example='2020-01-01'),
      activityId?: string(name='ActivityId', example='act-xxaanfaf'),
      actualActionerId?: string(name='ActualActionerId', example='123456'),
      createTimeGMT?: string(name='CreateTimeGMT', example='2020-01-01'),
      finishTimeGMT?: string(name='FinishTimeGMT', example='2020-01-01'),
      originatorId?: string(name='OriginatorId', example='123456'),
      processInstanceId?: string(name='ProcessInstanceId', example='instancexxxx'),
      status?: string(name='Status', example='running'),
      taskId?: string(name='TaskId', example='taskId'),
      taskType?: string(name='TaskType', example='append task'),
      title?: string(name='Title', example='标题'),
      titleInEnglish?: string(name='TitleInEnglish', example='title'),
    }
  ](name='result', example='[{}]'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetRunningTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRunningTasksResponseBody(name='body'),
}

async function getRunningTasks(request: GetRunningTasksRequest): GetRunningTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRunningTasks', 'POST', '/dingtalk/v1/yida/getRunningTasks', 'json', true, 'form', request);
}

model GetSheetRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  sheetId: string(name='SheetId', example='Sheet1', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  workbookId: string(name='WorkbookId', example='stxxxx', position='Body'),
}

model GetSheetResponseBody = {
  columnCount?: long(name='columnCount', example='20'),
  id?: string(name='id', example='stxxxx'),
  lastNonEmptyColumn?: long(name='lastNonEmptyColumn', example='1'),
  lastNonEmptyRow?: long(name='lastNonEmptyRow', example='2'),
  name?: string(name='name', example='Sheet1'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  rowCount?: long(name='rowCount', example='10'),
  visibility?: string(name='visibility', example='visible'),
}

model GetSheetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSheetResponseBody(name='body'),
}

async function getSheet(request: GetSheetRequest): GetSheetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSheet', 'POST', '/dingtalk/v1/documents/getSheet', 'json', true, 'form', request);
}

model GetSpaceDirectoriesRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  dentryId?: string(name='DentryId', example='asdasd', position='Body'),
  maxResults: int32(name='MaxResults', example='30', position='Body'),
  nextToken?: string(name='NextToken', example='123123', position='Body'),
  spaceId: string(name='SpaceId', example='qweqwe', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model GetSpaceDirectoriesResponseBody = {
  children?: [ 
    {
      contentType?: string(name='ContentType', example='alidoc'),
      createdTime?: long(name='CreatedTime', example='12345678'),
      creator?: {
        name?: string(name='Name', example='hello'),
        userId?: string(name='UserId', example='012345'),
      }(name='Creator'),
      dentryId?: string(name='DentryId', example='abc'),
      dentryType?: string(name='DentryType', example='file'),
      dentryUuid?: string(name='DentryUuid', example='cdefg'),
      docKey?: string(name='DocKey', example='aabbcc'),
      extension?: string(name='Extension', example='alidoc'),
      hasChildren?: boolean(name='HasChildren', example='false'),
      linkSourceInfo?: {
        extension?: string(name='Extension', example='docx'),
        iconUrl?: {
          line?: string(name='Line', example='gh'),
          small?: string(name='Small', example='def'),
        }(name='IconUrl'),
        id?: string(name='Id', example='def'),
        linkType?: long(name='LinkType', example='0'),
        spaceId?: string(name='SpaceId', example='def'),
      }(name='LinkSourceInfo'),
      name?: string(name='Name', example='hello'),
      path?: string(name='Path', example='测试组织/测试知识库/abc'),
      space?: {
        cover?: string(name='Cover', example='https://img.alicdn.com/imgextra/i1/O1xxxxx.png'),
        description?: string(name='Description', example='这是简介'),
        hdIconVO?: {
          icon?: string(name='Icon', example='https://img.alicdn.com/imgextra/i1/xxxxx.png'),
          type?: string(name='Type', example='1'),
        }(name='HdIconVO'),
        iconVO?: {
          icon?: string(name='Icon', example='https://img.alicdn.com/imgextra/i1/xxxxx.png'),
          type?: string(name='Type', example='1'),
        }(name='IconVO'),
        id?: string(name='Id', example='n9XJxxxxx'),
        name?: string(name='Name'),
        owner?: {
          name?: string(name='Name', example='小钉'),
          userId?: string(name='UserId', example='012345'),
        }(name='Owner', example='测试知识库'),
        recentList?: [ any ](name='RecentList'),
        type?: int32(name='Type', example='1'),
        url?: string(name='Url', example='https://alidocs.dingtalk.com/i/spaces/n9XJ*******Xy/overview'),
        visitorInfo?: {
          dentryActions?: [ string ](name='DentryActions', example='GET_DENTRY'),
          roleCode?: string(name='RoleCode', example='3'),
          spaceActions?: [ string ](name='SpaceActions', example='GET_SPACE'),
        }(name='VisitorInfo'),
      }(name='Space'),
      spaceId?: string(name='SpaceId', example='bcd'),
      statisticalInfo?: {
        wordCount?: long(name='WordCount', description='WordCount', example='10'),
      }(name='StatisticalInfo'),
      updatedTime?: long(name='UpdatedTime', example='12345678'),
      updater?: {
        name?: string(name='Name', example='hello'),
        userId?: string(name='UserId', example='012345'),
      }(name='Updater'),
      url?: string(name='Url', example='https://xxx.yy'),
      visitorInfo?: {
        dentryActions?: [ string ](name='DentryActions'),
        roleCode?: string(name='RoleCode', example='OWNER'),
        spaceActions?: [ string ](name='SpaceActions'),
      }(name='VisitorInfo'),
    }
  ](name='children'),
  hasMore?: boolean(name='hasMore', example='true'),
  nextToken?: string(name='nextToken', example='1296'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model GetSpaceDirectoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSpaceDirectoriesResponseBody(name='body'),
}

async function getSpaceDirectories(request: GetSpaceDirectoriesRequest): GetSpaceDirectoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSpaceDirectories', 'POST', '/dingtalk/v2/documents/getSpaceDirectories', 'json', true, 'form', request);
}

model GetSubscribedCalendarRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  calendarId: string(name='CalendarId', example='M5MjkxNDUxQHVzZXJzLmRpbmd0YWxrLmNv', position='Body'),
}

model GetSubscribedCalendarResponseBody = {
  author?: string(name='author', example='012345'),
  calendarId?: string(name='calendarId', example='M5MjkxNDUxQHVzZXJzLmRpbmd0YWxrLmNv'),
  description?: string(name='description', example='中国传统日历'),
  managers?: [ string ](name='managers'),
  name?: string(name='name', example='中国传统日历'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  subscribeScope?: {
    corpIds?: [ string ](name='CorpIds'),
    openConversationIds?: [ string ](name='OpenConversationIds'),
    userIds?: [ string ](name='UserIds'),
  }(name='subscribeScope'),
}

model GetSubscribedCalendarResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSubscribedCalendarResponseBody(name='body'),
}

async function getSubscribedCalendar(request: GetSubscribedCalendarRequest): GetSubscribedCalendarResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSubscribedCalendar', 'POST', '/dingtalk/v1/calendar/getSubscribedCalendar', 'json', true, 'form', request);
}

model GetTaskCopiesRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType?: string(name='AppType', example='APP_PBKxxx', position='Body'),
  createFromTimeGMT?: long(name='CreateFromTimeGMT', example='2021-05-01', position='Body'),
  createToTimeGMT?: long(name='CreateToTimeGMT', example='2021-05-01', position='Body'),
  keyword?: string(name='Keyword', example='keyword', position='Body'),
  language?: string(name='Language', example='zh-CN', position='Body'),
  pageNumber?: int32(name='PageNumber', example='20', position='Body'),
  pageSize?: int32(name='PageSize', example='20', position='Body'),
  processCodes?: string(name='ProcessCodes', example='["xx","xxx"]', position='Body'),
  systemToken: string(name='SystemToken', example='hexxxx', position='Body'),
}

model GetTaskCopiesResponseBody = {
  data?: [ 
    {
      actionExecutorId?: [ string ](name='ActionExecutorId', example='[ "actxxx" ]'),
      actionExecutorName?: [ string ](name='ActionExecutorName', example='[ "name" ]'),
      appType?: string(name='AppType', example='APP_XCxxx'),
      carbonActivityId?: string(name='CarbonActivityId', example='g02fbs08xxx'),
      createTimeGMT?: string(name='CreateTimeGMT', example='2020-01-01'),
      currentActivityInstances?: [ 
        {
          activityId?: string(name='ActivityId', example='act-xxaanfaf'),
          activityInstanceStatus?: string(name='ActivityInstanceStatus', example='running'),
          activityName?: string(name='ActivityName', example='act-12345'),
          activityNameInEnglish?: string(name='ActivityNameInEnglish', example='redirect task'),
          id?: long(name='Id', example='12345'),
        }
      ](name='CurrentActivityInstances', example='[]'),
      dataMap?: map[string]any(name='DataMap', example='{}'),
      dataType?: string(name='DataType', example='edit'),
      finishTimeGMT?: string(name='FinishTimeGMT', example='2020-01-01'),
      formInstanceId?: string(name='FormInstanceId', example='formxxxx'),
      formUuid?: string(name='FormUuid', example='uuid'),
      instanceValue?: string(name='InstanceValue', example='value'),
      modifiedTimeGMT?: string(name='ModifiedTimeGMT', example='2020-01-01'),
      originatorAvatar?: string(name='OriginatorAvatar', example='guyagsd'),
      originatorDisplayName?: string(name='OriginatorDisplayName', example='guyagsd'),
      originatorId?: string(name='OriginatorId', example='123456'),
      processApprovedResult?: string(name='ProcessApprovedResult', example='同意'),
      processApprovedResultText?: string(name='ProcessApprovedResultText', example='同意'),
      processCode?: string(name='ProcessCode', example='code'),
      processId?: long(name='ProcessId', example='processxxxx'),
      processInstanceId?: string(name='ProcessInstanceId', example='instancexxxx'),
      processInstanceStatus?: string(name='ProcessInstanceStatus', example='同意'),
      processInstanceStatusText?: string(name='ProcessInstanceStatusText', example='同意'),
      processName?: string(name='ProcessName', example='名称'),
      serialNumber?: string(name='SerialNumber', example='12345'),
      title?: string(name='Title', example='标题'),
      version?: long(name='Version', example='1.0'),
    }
  ](name='data', example='[{}]'),
  pageNumber?: long(name='pageNumber', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: long(name='totalCount', example='10'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetTaskCopiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskCopiesResponseBody(name='body'),
}

async function getTaskCopies(request: GetTaskCopiesRequest): GetTaskCopiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTaskCopies', 'POST', '/dingtalk/v1/yida/getTaskCopies', 'json', true, 'form', request);
}

model GetTemplateListByUserIdRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  offset: long(name='Offset', example='10', position='Body'),
  size: long(name='Size', example='10', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model GetTemplateListByUserIdResponseBody = {
  nextCursor?: long(name='nextCursor', example='12312131231'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  templateList?: [ 
    {
      iconUrl?: string(name='IconUrl'),
      name?: string(name='Name'),
      reportCode?: string(name='ReportCode', example='11111'),
      url?: string(name='Url', example='https://scsss/sss'),
    }
  ](name='templateList'),
}

model GetTemplateListByUserIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTemplateListByUserIdResponseBody(name='body'),
}

async function getTemplateListByUserId(request: GetTemplateListByUserIdRequest): GetTemplateListByUserIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTemplateListByUserId', 'POST', '/dingtalk/v1/log/getTemplateListByUserId', 'json', true, 'form', request);
}

model GetUserRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  language?: string(name='language', example='zh_CN', position='Body'),
}

model GetUserResponseBody = {
  active?: boolean(name='active', example='true'),
  admin?: boolean(name='admin', example='true'),
  avatar?: string(name='avatar', example='xxx'),
  boss?: boolean(name='boss', example='true'),
  deptIdList?: [ long ](name='deptIdList', example='[2,3,4]'),
  deptOrderList?: [ 
    {
      deptId?: long(name='deptId'),
      order?: long(name='order'),
    }
  ](name='deptOrderList'),
  email?: string(name='email', example='test@xxx.com'),
  exclusiveAccount?: boolean(name='exclusiveAccount', example='true'),
  exclusiveAccountCorpId?: string(name='exclusiveAccountCorpId', example='dingxxx'),
  exclusiveAccountCorpName?: string(name='exclusiveAccountCorpName', example='组织名称'),
  exclusiveAccountType?: string(name='exclusiveAccountType', example='dingtalk'),
  extension?: string(name='extension', example='{"爱好":"旅游","年龄":"24"}'),
  hideMobile?: boolean(name='hideMobile', example='false'),
  hiredDate?: long(name='hiredDate', example='1597573616828'),
  jobNumber?: string(name='jobNumber', example='4'),
  leaderInDept?: [ 
    {
      deptId?: long(name='deptId'),
      leader?: boolean(name='leader'),
    }
  ](name='leaderInDept'),
  loginId?: string(name='loginId', example='login_id3'),
  managerUserid?: string(name='managerUserid', example='manager240'),
  mobile?: string(name='mobile', example='18513027676'),
  name?: string(name='name', example='张三'),
  nickname?: string(name='nickname', example='昵称'),
  orgEmail?: string(name='orgEmail', example='test@xxx.com'),
  realAuthed?: boolean(name='realAuthed', example='true'),
  remark?: string(name='remark', example='备注备注'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  roleList?: [ 
    {
      groupName?: string(name='groupName', example='职务'),
      id?: long(name='id'),
      name?: string(name='name', example='张三'),
    }
  ](name='roleList'),
  senior?: boolean(name='senior', example='true'),
  stateCode?: string(name='stateCode', example='86'),
  telephone?: string(name='telephone', example='010-86123456-2345'),
  title?: string(name='title', example='技术总监'),
  unionEmpExt?: {
    corpId?: string(name='corpId', example='dingxxx'),
    unionEmpMapList?: [ 
      {
        cropId?: string(name='cropId', example='dingxxx'),
        userid?: string(name='userid', example='zhangsan'),
      }
    ](name='unionEmpMapList'),
    userid?: string(name='userid', example='zhangsan'),
  }(name='unionEmpExt'),
  userid?: string(name='userid', example='zhangsan'),
  workPlace?: string(name='workPlace', example='未来park'),
}

model GetUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserResponseBody(name='body'),
}

async function getUser(request: GetUserRequest): GetUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUser', 'POST', '/dingtalk/v1/im/getUser', 'json', true, 'form', request);
}

model GetUserLatestPlanRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model GetUserLatestPlanResponseBody = {
  accountHandleStatus?: int32(name='accountHandleStatus', example='1'),
  accountHandleTime?: string(name='accountHandleTime', example='2022-02-02'),
  accountType?: int32(name='accountType', example='0'),
  agreementFirstSignTime?: string(name='agreementFirstSignTime', example='2022-02-05'),
  agreementLastSignTime?: string(name='agreementLastSignTime', example='2022-02-06'),
  agreementStatus?: int32(name='agreementStatus', example='1'),
  dataHandleEndTime?: string(name='dataHandleEndTime', example='2022-02-04'),
  dataHandleStartTime?: string(name='dataHandleStartTime', example='2022-02-03'),
  dataHandleStatus?: int32(name='dataHandleStatus', example='1'),
  exclusivePlan?: int32(name='exclusivePlan', example='1'),
  newAccountUid?: long(name='newAccountUid', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  status?: int32(name='status', example='0'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetUserLatestPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserLatestPlanResponseBody(name='body'),
}

async function getUserLatestPlan(request: GetUserLatestPlanRequest): GetUserLatestPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUserLatestPlan', 'POST', '/aliding/v1/indepding/getUserLatestPlan', 'json', true, 'form', request);
}

model GetWorkspaceRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  withPermissionRole?: boolean(name='WithPermissionRole', example='false', position='Body'),
  workspaceId: string(name='WorkspaceId', example='MJ0pDSKMV9dO20E4', position='Body'),
}

model GetWorkspaceResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  workspace?: {
    corpId?: string(name='CorpId', example='ding16b241fd05********288'),
    cover?: string(name='Cover', example='https://example/file-manage-files/zh-CN/202***13/ldet/XXXX.jpg'),
    createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
    creatorId?: string(name='CreatorId', example='01472825524039877041'),
    description?: string(name='Description', example='workspace_description'),
    icon?: {
      type?: string(name='Type', example='URL'),
      value?: string(name='Value', example='https://example/file-manage-files/zh-CN/202***13/ldet/avatar3.jpg'),
    }(name='Icon'),
    modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
    modifierId?: string(name='ModifierId', example='01472825524039877041'),
    name?: string(name='Name', example='workspace_name'),
    permissionRole?: string(name='PermissionRole', example='READER'),
    rootNodeId?: string(name='RootNodeId', example='ydxXB52LJqqK7xxNTXyo390kJqjMp697'),
    teamId?: string(name='TeamId', example='lHiicjNFM2iSFYSdz2iPuI8ZwiEiE'),
    type?: string(name='Type', example='TEAM'),
    url?: string(name='Url', example='workspace_url'),
    workspaceId?: string(name='WorkspaceId', example='MJ0pDSKMV9dO20E4'),
  }(name='workspace'),
}

model GetWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWorkspaceResponseBody(name='body'),
}

async function getWorkspace(request: GetWorkspaceRequest): GetWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetWorkspace', 'POST', '/dingtalk/v2/documents/getWorkspace', 'json', true, 'form', request);
}

model GetWorkspacesRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  option?: {
    withPermissionRole?: boolean(name='WithPermissionRole', example='true'),
  }(name='Option', shrink='json', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  workspaceIds: [ string ](name='WorkspaceIds', example='workspace_id', shrink='json', position='Body'),
}

model GetWorkspacesResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  workspace?: [ 
    {
      corpId?: string(name='CorpId', example='ding16b241fd05********288'),
      cover?: string(name='Cover', example='https://example/file-manage-files/zh-CN/202***13/ldet/XXXX.jpg'),
      createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
      creatorId?: string(name='CreatorId', example='01472825524039877041'),
      description?: string(name='Description', example='workspace_description'),
      icon?: {
        type?: string(name='Type', example='URL'),
        value?: string(name='Value', example='https://example/file-manage-files/zh-CN/202***13/ldet/avatar3.jpg'),
      }(name='Icon'),
      modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
      modifierId?: string(name='ModifierId', example='01472825524039877041'),
      name?: string(name='Name', example='workspace_name'),
      permissionRole?: string(name='PermissionRole', example='READER'),
      rootNodeId?: string(name='RootNodeId', example='ZgpG2NdyVXXjrKKzIBqMp5zkVMwvDqPk'),
      teamId?: string(name='TeamId', example='lHiicjNFM2iSFYSdz2iPuI8ZwiEiE'),
      type?: string(name='Type', example='TEAM'),
      url?: string(name='Url', example='workspace_url'),
      workspaceId?: string(name='WorkspaceId', example='By8jQS1ZYjGn5b0M'),
    }
  ](name='workspace'),
}

model GetWorkspacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWorkspacesResponseBody(name='body'),
}

async function getWorkspaces(request: GetWorkspacesRequest): GetWorkspacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetWorkspaces', 'POST', '/dingtalk/v2/documents/getWorkspaces', 'json', true, 'form', request);
}

model GrantHonorRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='null'),
  }(name='AccountContext', shrink='json', position='Header'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='null'),
  }(name='TenantContext', shrink='json', position='Body'),
  expirationTime?: long(name='expirationTime', example='null', position='Body'),
  grantReason: string(name='grantReason', position='Body'),
  granterName: string(name='granterName', position='Body'),
  honorId: string(name='honorId', example='21659398', position='Body'),
  noticeAnnouncer?: boolean(name='noticeAnnouncer', example='false', position='Body'),
  noticeSingle?: boolean(name='noticeSingle', example='false', position='Body'),
  openConversationIds?: [ string ](name='openConversationIds', shrink='json', position='Body'),
  orgId: long(name='orgId', example='345391052', position='Body'),
  receiverUserIds: [ string ](name='receiverUserIds', shrink='json', position='Body'),
  senderUserId: string(name='senderUserId', example='363784', position='Body'),
}

model GrantHonorResponseBody = {
  failedUserIds?: [ string ](name='failedUserIds'),
  requestId?: string(name='requestId', description='requestId', example='45b4d029-ab94-4672-aa0f-bd79590374cb'),
  successUserIds?: [ string ](name='successUserIds'),
}

model GrantHonorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GrantHonorResponseBody(name='body'),
}

async function grantHonor(request: GrantHonorRequest): GrantHonorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GrantHonor', 'POST', '/aliding/v1/honor/grantHonor', 'json', true, 'form', request);
}

model InsertColumnsBeforeRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  column: long(name='Column', example='1', position='Body'),
  columnCount: long(name='ColumnCount', example='3', position='Body'),
  sheetId: string(name='SheetId', example='Sheet1', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  workbookId: string(name='WorkbookId', example='stxxxx', position='Body'),
}

model InsertColumnsBeforeResponseBody = {
  id?: string(name='id', example='stxxxx'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model InsertColumnsBeforeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InsertColumnsBeforeResponseBody(name='body'),
}

async function insertColumnsBefore(request: InsertColumnsBeforeRequest): InsertColumnsBeforeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'InsertColumnsBefore', 'POST', '/dingtalk/v1/documents/insertColumnsBefore', 'json', true, 'form', request);
}

model InsertRowsBeforeRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  row: long(name='Row', example='2', position='Body'),
  rowCount: long(name='RowCount', example='10', position='Body'),
  sheetId: string(name='SheetId', example='Sheet1', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  workbookId: string(name='WorkbookId', example='stxxxx', position='Body'),
}

model InsertRowsBeforeResponseBody = {
  id?: string(name='id', example='stxxxx'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model InsertRowsBeforeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InsertRowsBeforeResponseBody(name='body'),
}

async function insertRowsBefore(request: InsertRowsBeforeRequest): InsertRowsBeforeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'InsertRowsBefore', 'POST', '/dingtalk/v1/documents/insertRowsBefore', 'json', true, 'form', request);
}

model InviteUsersRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  inviteeList?: [ 
    {
      nick: string(name='Nick', example='测试用户'),
      userId?: string(name='UserId', example='012345'),
    }
  ](name='InviteeList', shrink='json', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
  conferenceId: string(name='conferenceId', example='61289fxxx', position='Body'),
  phoneInviteeList?: [ 
    {
      nick?: string(name='Nick'),
      phoneNumber?: string(name='PhoneNumber'),
    }
  ](name='phoneInviteeList', shrink='json', position='Body'),
}

model InviteUsersResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model InviteUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InviteUsersResponseBody(name='body'),
}

async function inviteUsers(request: InviteUsersRequest): InviteUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'InviteUsers', 'POST', '/dingtalk/v1/ysp/inviteUsers', 'json', true, 'form', request);
}

model ListApplicationRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appFilter?: string(name='AppFilter', example='createdByMe', position='Body'),
  appNameSearchKeyword?: string(name='AppNameSearchKeyword', example='keyword', position='Body'),
  corpId: string(name='CorpId', example='corpid', position='Body'),
  pageNumber?: int32(name='PageNumber', example='keyword', position='Body'),
  pageSize?: int32(name='PageSize', example='keyword', position='Body'),
  token: string(name='Token', example='keyword', position='Body'),
}

model ListApplicationResponseBody = {
  data?: [ 
    {
      appConfig?: string(name='AppConfig', example='{\\"ODIN_TOPIC_ID\\":\\"256\\"}'),
      appType?: string(name='AppType', example='APP_XCxxx'),
      applicationStatus?: string(name='ApplicationStatus', example='ONLINE'),
      corpId?: string(name='CorpId', example='ding5xxx'),
      creatorUserId?: string(name='CreatorUserId', example='123456'),
      description?: string(name='Description', example='小明创建的宜搭应用'),
      icon?: string(name='Icon', example='appdiqiu%%#0089FF'),
      inexistence?: string(name='Inexistence', example='y'),
      name?: string(name='Name', example='app'),
      subCorpId?: string(name='SubCorpId', example='ding5xxx'),
    }
  ](name='data', example='[{}]'),
  pageNumber?: long(name='pageNumber', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: long(name='totalCount', example='10'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model ListApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApplicationResponseBody(name='body'),
}

async function listApplication(request: ListApplicationRequest): ListApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListApplication', 'POST', '/dingtalk/v1/yida/listApplication', 'json', true, 'form', request);
}

model ListCalendarsRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  request?: map[string]any(name='Request', example='{}', shrink='json', position='Body'),
}

model ListCalendarsResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  response?: {
    calendars?: [ 
      {
        description?: string(name='Description', example='描述'),
        eTag?: string(name='ETag', example='0'),
        id?: string(name='Id', example='cnNTbWxxx'),
        privilege?: string(name='Privilege', example='VIEW_DETAIL'),
        summary?: string(name='Summary', example='标题'),
        timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
        type?: string(name='Type', example='primary'),
      }
    ](name='Calendars'),
  }(name='response'),
}

model ListCalendarsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCalendarsResponseBody(name='body'),
}

async function listCalendars(request: ListCalendarsRequest): ListCalendarsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCalendars', 'POST', '/dingtalk/v1/calendar/listCalendars', 'json', true, 'form', request);
}

model ListDentriesRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  maxResults?: int32(name='MaxResults', example='50', position='Body'),
  nextToken?: string(name='NextToken', example='next_token', position='Body'),
  order?: string(name='Order', example='ASC', position='Body'),
  orderBy?: string(name='OrderBy', example='MODIFIED_TIME', position='Body'),
  parentId: string(name='ParentId', example='0', position='Body'),
  spaceId: string(name='SpaceId', example='854xxxxx', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
  withThumbnail?: boolean(name='WithThumbnail', example='true', position='Body'),
}

model ListDentriesResponseBody = {
  dentries?: [ 
    {
      appProperties?: map[string][ DentriesAppPropertiesValue       ](name='AppProperties'),
      createTime?: string(name='CreateTime', example='2022-01-01T10:00:00Z'),
      creatorId?: string(name='CreatorId', example='cHtUxxxxx'),
      extension?: string(name='Extension', example='txt'),
      id?: string(name='Id', example='657xxxxx'),
      modifiedTime?: string(name='ModifiedTime', example='2022-01-01T10:00:00Z'),
      modifierId?: string(name='ModifierId', example='cHtUxxxxx'),
      name?: string(name='Name', example='测试文件夹'),
      parentId?: string(name='ParentId', example='0'),
      partitionType?: string(name='PartitionType', example='PUBLIC_OSS_PARTITION'),
      path?: string(name='Path', example='./test.txt'),
      properties?: {
        readOnly?: boolean(name='ReadOnly', example='true'),
      }(name='Properties'),
      size?: long(name='Size', example='512'),
      spaceId?: string(name='SpaceId', example='854xxxxx'),
      status?: string(name='Status', example='NORMAL'),
      storageDriver?: string(name='StorageDriver', example='DINGTALK'),
      thumbnail?: {
        height?: int32(name='Height', example='64'),
        url?: string(name='Url', example='url'),
        width?: int32(name='Width', example='64'),
      }(name='Thumbnail'),
      type?: string(name='Type', example='FILE'),
      uuid?: string(name='Uuid', example='123xxxxx'),
      version?: long(name='Version', example='1'),
    }
  ](name='dentries'),
  nextToken?: string(name='nextToken', example='next_token'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model ListDentriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDentriesResponseBody(name='body'),
}

async function listDentries(request: ListDentriesRequest): ListDentriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDentries', 'POST', '/dingtalk/v1/documents/listDentries', 'json', true, 'form', request);
}

model ListDriveSpacesRequest {
  accountContext: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  maxResults: int32(name='MaxResults', example='1', position='Body'),
  nextToken?: string(name='NextToken', example='fekaf', position='Body'),
  spaceType: string(name='SpaceType', example='org', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model ListDriveSpacesResponseBody = {
  nextToken?: string(name='nextToken', example='fekaf'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  spaces?: [ 
    {
      createTime?: string(name='CreateTime', example='2016-02-28T10:47:08Z'),
      modifyTime?: string(name='ModifyTime', example='2016-02-28T10:47:08Z'),
      permissionMode?: string(name='PermissionMode', example='acl'),
      quota?: long(name='Quota', example='2147483648'),
      spaceId?: string(name='SpaceId', example='123456789'),
      spaceName?: string(name='SpaceName'),
      spaceType?: string(name='SpaceType', example='org'),
      usedQuota?: long(name='UsedQuota', example='640445953'),
    }
  ](name='spaces'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model ListDriveSpacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDriveSpacesResponseBody(name='body'),
}

async function listDriveSpaces(request: ListDriveSpacesRequest): ListDriveSpacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDriveSpaces', 'POST', '/dingtalk/v1/documents/listDriveSpaces', 'json', true, 'form', request);
}

model ListEventsRequest {
  accountContext?: {
    accountId: string(name='accountId', example='208579'),
  }(name='AccountContext', shrink='json', position='Header'),
  calendarId: string(name='CalendarId', example='primary', position='Body'),
  maxAttendees?: int32(name='MaxAttendees', example='100', position='Body'),
  maxResults?: int32(name='MaxResults', example='100', position='Body'),
  nextToken?: string(name='NextToken', example='cnNTbW1YbxxxxdlQrQT09', position='Body'),
  seriesMasterId?: string(name='SeriesMasterId', example='cnNTbWxxxxaFJZdEgvdlQrQT09', position='Body'),
  showDeleted?: boolean(name='ShowDeleted', example='true', position='Body'),
  syncToken?: string(name='SyncToken', example='zxcasdfvc000009', position='Body'),
  timeMax?: string(name='TimeMax', example='2023-06-21T00:00:00+08:00', position='Body'),
  timeMin?: string(name='TimeMin', example='2023-06-20T00:00:00+08:00', position='Body'),
}

model ListEventsResponseBody = {
  events?: [ 
    {
      attendees?: [ 
        {
          displayName?: string(name='DisplayName', example='tony'),
          isOptional?: boolean(name='IsOptional', example='true'),
          responseStatus?: string(name='ResponseStatus', example='accepted'),
          self?: boolean(name='Self', example='true'),
        }
      ](name='Attendees'),
      categories?: [ 
        {
          displayName?: string(name='DisplayName'),
        }
      ](name='Categories'),
      createTime?: string(name='CreateTime', example='2020-01-01T10:15:30+08:00'),
      description?: string(name='Description', example='something about this event'),
      end?: {
        date?: string(name='Date', example='2020-01-01'),
        dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
        timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
      }(name='End'),
      extendedProperties?: {
        sharedProperties?: {
          belongCorpId?: string(name='BelongCorpId', example='ding*********31'),
          sourceOpenCid?: string(name='SourceOpenCid', example='zxcv90asdf123==='),
        }(name='SharedProperties'),
      }(name='ExtendedProperties'),
      id?: string(name='Id', example='cnNTbW1YbxxxxdEgvdlQrQT09'),
      isAllDay?: boolean(name='IsAllDay', example='true'),
      location?: {
        displayName?: string(name='DisplayName', example='room 1-2-3'),
        meetingRooms?: [ string ](name='MeetingRooms'),
      }(name='Location'),
      meetingRooms?: [ 
        {
          displayName?: string(name='DisplayName'),
          responseStatus?: string(name='ResponseStatus', example='accepted'),
          roomId?: string(name='RoomId', example='c10315a8b4e740a317813ab6fxxxxxx'),
        }
      ](name='MeetingRooms'),
      onlineMeetingInfo?: {
        conferenceId?: string(name='ConferenceId', example='5c4df21dxxxx-a6db402b9f3a'),
        extraInfo?: map[string]any(name='ExtraInfo'),
        type?: string(name='Type', example='dingtalk'),
        url?: string(name='Url', example='dingtalk://dingtalkclient/page/videoCoxxxxndar?confId=5c4df21dxxxx2b9f3a&calendarId=92xxxx36'),
      }(name='OnlineMeetingInfo'),
      organizer?: {
        displayName?: string(name='DisplayName', example='tony'),
        responseStatus?: string(name='ResponseStatus', example='accepted'),
        self?: boolean(name='Self', example='true'),
      }(name='Organizer'),
      originStart?: {
        dateTime?: string(name='DateTime', example='2023-01-01T00:00:00Z'),
      }(name='OriginStart'),
      recurrence?: {
        pattern?: {
          dayOfMonth?: int32(name='DayOfMonth', example='1'),
          daysOfWeek?: string(name='DaysOfWeek', example='sunday'),
          index?: string(name='Index', example='first'),
          interval?: int32(name='Interval', example='1'),
          type?: string(name='Type', example='daily'),
        }(name='Pattern'),
        range?: {
          endDate?: string(name='EndDate', example='2020-01-01T10:15:30+08:00'),
          numberOfOccurrences?: int32(name='NumberOfOccurrences', example='5'),
          type?: string(name='Type', example='noEnd'),
        }(name='Range'),
      }(name='Recurrence'),
      reminders?: [ 
        {
          method?: string(name='Method', example='dingtalk'),
          minutes?: string(name='Minutes', example='15'),
        }
      ](name='Reminders'),
      richTextDescription?: {
        text?: string(name='Text'),
      }(name='RichTextDescription'),
      seriesMasterId?: string(name='SeriesMasterId', example='cnNTbWxxxxaFJZdEgvdlQrQT09'),
      start?: {
        date?: string(name='Date', example='2020-01-01'),
        dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
        timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
      }(name='Start'),
      status?: string(name='Status', example='confirmed'),
      summary?: string(name='Summary'),
      updateTime?: string(name='UpdateTime', example='2020-01-01T10:15:30+08:00'),
    }
  ](name='events'),
  nextToken?: string(name='nextToken', example='cnNTbW1YbxxxxdlQrQT09'),
  requestId?: string(name='requestId', description='requestId', example='4248DCC9-785F-5A14-8BE0-830FD52E1261'),
  syncToken?: string(name='syncToken', example='zxcasdfvc000009'),
  vendorRequestId?: string(name='vendorRequestId'),
  vendorType?: string(name='vendorType'),
}

model ListEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEventsResponseBody(name='body'),
}

async function listEvents(request: ListEventsRequest): ListEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEvents', 'POST', '/dingtalk/v1/calendar/listEvents', 'json', true, 'form', request);
}

model ListEventsViewRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  calendarId: string(name='CalendarId', example='primary', position='Body'),
  maxAttendees?: int32(name='MaxAttendees', example='100', position='Body'),
  maxResults?: int32(name='MaxResults', example='100', position='Body'),
  nextToken?: string(name='NextToken', example='cnNTbW1xxx', position='Body'),
  timeMax?: string(name='TimeMax', example='2022-11-28T00:00:00+08:00', position='Body'),
  timeMin?: string(name='TimeMin', example='2022-11-27T00:00:00+08:00', position='Body'),
}

model ListEventsViewResponseBody = {
  events?: [ 
    {
      attendees?: [ 
        {
          displayName?: string(name='DisplayName', example='tony'),
          id?: string(name='Id', example='012345'),
          isOptional?: boolean(name='IsOptional', example='false'),
          responseStatus?: string(name='ResponseStatus', example='accepted'),
          self?: boolean(name='Self', example='false'),
        }
      ](name='Attendees'),
      categories?: [ 
        {
          displayName?: string(name='DisplayName', example='tony'),
        }
      ](name='Categories'),
      createTime?: string(name='CreateTime', example='2020-01-01T10:15:30+08:00'),
      description?: string(name='Description', example='something about this event'),
      end?: {
        date?: string(name='Date', example='2020-01-01'),
        dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
        timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
      }(name='End'),
      extendedProperties?: {
        sharedProperties?: {
          belongCorpId?: string(name='BelongCorpId', example='dingd8*****1231'),
          sourceOpenCid?: string(name='SourceOpenCid', example='zxcvasdfa123==='),
        }(name='SharedProperties'),
      }(name='ExtendedProperties'),
      id?: string(name='Id', example='iiiP35xxx'),
      isAllDay?: boolean(name='IsAllDay', example='false'),
      location?: {
        displayName?: string(name='DisplayName', example='tony'),
        meetingRooms?: [ string ](name='MeetingRooms'),
      }(name='Location'),
      meetingRooms?: [ 
        {
          displayName?: string(name='DisplayName', example='tony'),
          responseStatus?: string(name='ResponseStatus', example='accepted'),
          roomId?: string(name='RoomId', example='c10315a8b4e740a317813ab6fxxxxxx'),
        }
      ](name='MeetingRooms'),
      onlineMeetingInfo?: {
        conferenceId?: string(name='ConferenceId', example='5c4df2xxx'),
        extraInfo?: map[string]any(name='ExtraInfo'),
        type?: string(name='Type', example='dingtalk'),
        url?: string(name='Url', example='dingtalk://dingtalkclient/page/xxx?confId=xxx&calendarId=xxx'),
      }(name='OnlineMeetingInfo'),
      organizer?: {
        displayName?: string(name='DisplayName', example='tony'),
        id?: string(name='Id', example='012345'),
        responseStatus?: string(name='ResponseStatus', example='accepted'),
        self?: boolean(name='Self', example='false'),
      }(name='Organizer'),
      originStart?: {
        dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
      }(name='OriginStart'),
      recurrence?: {
        pattern?: {
          dayOfMonth?: int32(name='DayOfMonth', example='14'),
          daysOfWeek?: string(name='DaysOfWeek', example='sunday'),
          index?: string(name='Index', example='first'),
          interval?: int32(name='Interval', example='1'),
          type?: string(name='Type', example='dingtalk'),
        }(name='Pattern'),
        range?: {
          endDate?: string(name='EndDate', example='2020-01-01T10:15:30+08:00'),
          numberOfOccurrences?: int32(name='NumberOfOccurrences', example='5'),
          type?: string(name='Type', example='dingtalk'),
        }(name='Range'),
      }(name='Recurrence'),
      richTextDescription?: {
        text?: string(name='Text'),
      }(name='RichTextDescription'),
      seriesMasterId?: string(name='SeriesMasterId', example='cnNTbxxx'),
      start?: {
        date?: string(name='Date', example='2020-01-01'),
        dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
        timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
      }(name='Start'),
      status?: string(name='Status', example='confirmed'),
      summary?: string(name='Summary', example='test event'),
      updateTime?: string(name='UpdateTime', example='2020-01-01T10:15:30+08:00'),
    }
  ](name='events'),
  nextToken?: string(name='nextToken', example='cnNTbWxxx'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model ListEventsViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEventsViewResponseBody(name='body'),
}

async function listEventsView(request: ListEventsViewRequest): ListEventsViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEventsView', 'POST', '/dingtalk/v1/calendar/listEventsView', 'json', true, 'form', request);
}

model ListFormRemarksRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType: string(name='AppType', example='APP_PBKT0xxx', position='Body'),
  formInstanceIdList: [ string ](name='FormInstanceIdList', example='FORM-xxxxx', shrink='json', position='Body'),
  formUuid: string(name='FormUuid', example='FORM-xxxxx', position='Body'),
  systemToken: string(name='SystemToken', example='hexxxx', position='Body'),
}

model ListFormRemarksResponseBody = {
  formRemarkVoMap?: map[string]any(name='formRemarkVoMap', example='{}'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model ListFormRemarksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFormRemarksResponseBody(name='body'),
}

async function listFormRemarks(request: ListFormRemarksRequest): ListFormRemarksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFormRemarks', 'POST', '/dingtalk/v1/yida/listFormRemarks', 'json', true, 'form', request);
}

model ListNavigationByFormTypeRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType: string(name='AppType', example='APP_PBKTxxx', position='Body'),
  formType: string(name='FormType', example='receipt', position='Body'),
  language?: string(name='Language', example='zh_CN', position='Body'),
  systemToken: string(name='SystemToken', example='hexxxx', position='Body'),
}

model ListNavigationByFormTypeResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ 
    {
      formUuid?: string(name='FormUuid', example='FORM-EF6Yxxx'),
      processCode?: string(name='ProcessCode', example='TPROC--X1Gxxx'),
      title?: {
        nameInChinese?: string(name='NameInChinese', example='张三'),
        nameInEnglish?: string(name='NameInEnglish', example='ZhangSan'),
        type?: string(name='Type', example='未知'),
      }(name='Title'),
    }
  ](name='result'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model ListNavigationByFormTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNavigationByFormTypeResponseBody(name='body'),
}

async function listNavigationByFormType(request: ListNavigationByFormTypeRequest): ListNavigationByFormTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListNavigationByFormType', 'POST', '/dingtalk/v1/yida/listNavigationByFormType', 'json', true, 'form', request);
}

model ListNodesRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  maxResults?: int32(name='MaxResults', example='50', position='Body'),
  nextToken?: string(name='NextToken', example='next_token', position='Body'),
  parentNodeId: string(name='ParentNodeId', example='MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  withPermissionRole?: boolean(name='WithPermissionRole', example='false', position='Body'),
}

model ListNodesResponseBody = {
  nextToken?: string(name='nextToken', example='next_token'),
  nodes?: [ 
    {
      category?: string(name='Category', example='ALIDOC'),
      createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
      creatorId?: string(name='CreatorId', example='01472825524039877041'),
      extension?: string(name='Extension', example='adoc'),
      hasChildren?: boolean(name='HasChildren', example='true'),
      modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
      modifierId?: string(name='ModifierId', example='01472825524039877041'),
      name?: string(name='Name', example='node_name'),
      nodeId?: string(name='NodeId', example='MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3'),
      permissionRole?: string(name='PermissionRole', example='READER'),
      size?: long(name='Size', example='512'),
      statisticalInfo?: {
        wordCount?: long(name='WordCount', example='123'),
      }(name='StatisticalInfo'),
      type?: string(name='Type', example='FILE'),
      url?: string(name='Url', example='node_url'),
      workspaceId?: string(name='WorkspaceId', example='MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3'),
    }
  ](name='nodes'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model ListNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodesResponseBody(name='body'),
}

async function listNodes(request: ListNodesRequest): ListNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListNodes', 'POST', '/dingtalk/v2/documents/listNodes', 'json', true, 'form', request);
}

model ListReportRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  cursor: long(name='Cursor', example='0', position='Body'),
  endTime: long(name='EndTime', example='1507564800000', position='Body'),
  modifiedEndTime?: long(name='ModifiedEndTime', example='1507564800000', position='Body'),
  modifiedStartTime?: long(name='ModifiedStartTime', example='1507564800000', position='Body'),
  size: long(name='Size', example='10', position='Body'),
  startTime: long(name='StartTime', example='1507564800000', position='Body'),
  templateName?: string(name='TemplateName', example='我管理的模版', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model ListReportResponseBody = {
  dataList?: [ 
    {
      contents?: [ 
        {
          key?: string(name='Key', example='env'),
          sort?: string(name='Sort', example='0'),
          type?: string(name='Type', example='1'),
          value?: string(name='Value', example='ce9ab5d4a80a9401f97c7077e6a9634bd'),
        }
      ](name='Contents'),
      createTime?: long(name='CreateTime', example='1678416166000'),
      creatorId?: string(name='CreatorId', example='1127123'),
      creatorName?: string(name='CreatorName', example='admin'),
      deptName?: string(name='DeptName'),
      images?: [ string ](name='Images'),
      latitude?: string(name='Latitude', example='31.1264'),
      longitude?: string(name='Longitude', example='108.938036'),
      modifiedTime?: long(name='ModifiedTime', example='1653543540000'),
      remark?: string(name='Remark'),
      reportId?: string(name='ReportId', example='d64994d09916c76276dd9bfa23637644'),
      templateName?: string(name='TemplateName'),
    }
  ](name='dataList'),
  hasMore?: boolean(name='hasMore', example='true'),
  nextCursor?: long(name='nextCursor', example='12312131231'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  size?: long(name='size', example='20'),
}

model ListReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListReportResponseBody(name='body'),
}

async function listReport(request: ListReportRequest): ListReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListReport', 'POST', '/dingtalk/v1/log/listReport', 'json', true, 'form', request);
}

model ListTableDataByFormInstanceIdTableIdRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType: string(name='AppType', example='APP_PBKT0xxx', position='Body'),
  formInstanceId: string(name='FormInstanceId', example='FORM_PBKT0xxx', position='Body'),
  formUuid: string(name='FormUuid', example='FORM-xxxxx', position='Body'),
  pageNumber?: int32(name='PageNumber', example='20', position='Body'),
  pageSize?: int32(name='PageSize', example='20', position='Body'),
  systemToken: string(name='SystemToken', example='hexxxx', position='Body'),
  tableFieldId: string(name='TableFieldId', example='1111', position='Body'),
}

model ListTableDataByFormInstanceIdTableIdResponseBody = {
  data?: [ string ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: long(name='totalCount', example='20'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model ListTableDataByFormInstanceIdTableIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTableDataByFormInstanceIdTableIdResponseBody(name='body'),
}

async function listTableDataByFormInstanceIdTableId(request: ListTableDataByFormInstanceIdTableIdRequest): ListTableDataByFormInstanceIdTableIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTableDataByFormInstanceIdTableId', 'POST', '/dingtalk/v1/yida/listTableDataByFormInstanceIdTableId', 'json', true, 'form', request);
}

model ListTeamsRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  maxResults?: int32(name='MaxResults', example='30', position='Body'),
  nextToken?: string(name='NextToken', example='2023-05-15T11:29Z', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model ListTeamsResponseBody = {
  nextToken?: string(name='nextToken', example='2023-05-15T11:29Z'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  teams?: [ 
    {
      corpId?: string(name='CorpId', example='ding16b241fd05********288'),
      cover?: string(name='Cover', example='https://example/file-manage-files/zh-CN/202***13/ldet/XXXX.jpg'),
      createTime?: string(name='CreateTime', example='01472825524039877041'),
      creatorId?: string(name='CreatorId', example='012345'),
      description?: string(name='Description', example='team_description'),
      icon?: {
        type?: string(name='Type', example='URL'),
        value?: string(name='Value', example='https://example/file-manage-files/zh-CN/202***13/ldet/avatar3.jpg'),
      }(name='Icon'),
      modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
      modifierId?: string(name='ModifierId', example='012345'),
      name?: string(name='Name', example='team_name'),
      teamId?: string(name='TeamId', example='lHiicjNFM2iSFYSdz2iPuI8ZwiEiE'),
    }
  ](name='teams'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model ListTeamsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTeamsResponseBody(name='body'),
}

async function listTeams(request: ListTeamsRequest): ListTeamsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTeams', 'POST', '/dingtalk/v2/documents/listTeams', 'json', true, 'form', request);
}

model ListWorkspacesRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  maxResults?: int32(name='MaxResults', example='30', position='Body'),
  nextToken?: string(name='NextToken', example='123123', position='Body'),
  orderBy?: string(name='OrderBy', example='VIEW_TIME_DESC', position='Body'),
  teamId?: string(name='TeamId', example='qweqwe', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  withPermissionRole?: boolean(name='WithPermissionRole', example='true', position='Body'),
}

model ListWorkspacesResponseBody = {
  nextToken?: string(name='nextToken', example='next_token'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  workspaces?: [ 
    {
      corpId?: string(name='CorpId', example='ding16b241fd05********288'),
      cover?: string(name='Cover', example='https://example/file-manage-files/zh-CN/202***13/ldet/XXXX.jpg'),
      createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
      creatorId?: string(name='CreatorId', example='workspace_creator_id'),
      description?: string(name='Description', example='workspace_description'),
      icon?: {
        type?: string(name='Type', example='URL'),
        value?: string(name='Value', example='icon_url'),
      }(name='Icon'),
      modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
      modifierId?: string(name='ModifierId', example='workspace_modifier_id'),
      name?: string(name='Name', example='workspace_name'),
      permissionRole?: string(name='PermissionRole', example='READER'),
      rootNodeId?: string(name='RootNodeId', example='ZgpG2NdyVXXjrKKzIBqMp5zkVMwvDqPk'),
      teamId?: string(name='TeamId', example='iPes3KGYA9DxYSdz2iPuI8ZwiEiE'),
      type?: string(name='Type', example='TEAM'),
      url?: string(name='Url', example='workspace_url'),
      workspaceId?: string(name='WorkspaceId', example='By8jQS1ZYjGn5b0M'),
    }
  ](name='workspaces'),
}

model ListWorkspacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkspacesResponseBody(name='body'),
}

async function listWorkspaces(request: ListWorkspacesRequest): ListWorkspacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWorkspaces', 'POST', '/dingtalk/v2/documents/listWorkspaces', 'json', true, 'form', request);
}

model PatchEventRequest {
  accountContext?: {
    accountId: string(name='accountId', example='123456'),
  }(name='AccountContext', shrink='json', position='Header'),
  attendees?: [ 
    {
      id?: string(name='id', example='123456'),
      isOptional?: boolean(name='isOptional', example='false'),
    }
  ](name='Attendees', shrink='json', position='Body'),
  calendarId: string(name='CalendarId', example='primary', position='Body'),
  description?: string(name='Description', position='Body'),
  end?: {
    date?: string(name='date', example='2020-01-01'),
    dateTime?: string(name='dateTime', example='2020-01-01T10:15:30+08:00'),
    timeZone?: string(name='timeZone', example='Asia/Shanghai'),
  }(name='End', shrink='json', position='Body'),
  eventId: string(name='EventId', example='iiiP35sJadba8aBSgjrwPRKgiEiF', position='Body'),
  extra?: map[string]string(name='Extra', shrink='json', position='Body'),
  isAllDay?: boolean(name='IsAllDay', example='true', position='Body'),
  location?: {
    displayName?: string(name='displayName', example='room 1-2-3'),
  }(name='Location', shrink='json', position='Body'),
  recurrence?: {
    pattern?: {
      dayOfMonth?: int32(name='dayOfMonth', example='1'),
      daysOfWeek?: string(name='daysOfWeek', example='sunday'),
      index?: string(name='index', example='last'),
      interval?: int32(name='interval', example='1'),
      type?: string(name='type', example='daily'),
    }(name='pattern'),
    range?: {
      endDate?: string(name='endDate', example='2021-12-31T10:15:30+08:00'),
      numberOfOccurrences?: int32(name='numberOfOccurrences', example='1'),
      type?: string(name='type', example='endDate'),
    }(name='range'),
  }(name='Recurrence', shrink='json', position='Body'),
  reminders?: [ 
    {
      method?: string(name='method', example='dingtalk'),
      minutes?: int32(name='minutes', example='15'),
    }
  ](name='Reminders', shrink='json', position='Body'),
  start?: {
    date?: string(name='date', example='2020-01-01'),
    dateTime?: string(name='dateTime', example='2020-01-01T10:15:30+08:00'),
    timeZone?: string(name='timeZone', example='Asia/Shanghai'),
  }(name='Start', shrink='json', position='Body'),
  summary?: string(name='Summary', position='Body'),
}

model PatchEventResponseBody = {
  attendees?: [ 
    {
      displayName?: string(name='DisplayName', example='tony'),
      id?: string(name='Id', example='123456'),
      isOptional?: boolean(name='IsOptional', example='true'),
      responseStatus?: string(name='ResponseStatus', example='accepted'),
      self?: boolean(name='Self', example='true'),
    }
  ](name='attendees'),
  createTime?: string(name='createTime', example='2022-10-25T02:26:14Z'),
  description?: string(name='description'),
  end?: {
    date?: string(name='Date', example='2020-01-01'),
    dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
    timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
  }(name='end'),
  id?: string(name='id', example='123456'),
  isAllDay?: boolean(name='isAllDay', example='true'),
  location?: {
    displayName?: string(name='DisplayName', example='true'),
    meetingRooms?: [ string ](name='MeetingRooms'),
  }(name='location'),
  organizer?: {
    displayName?: string(name='DisplayName', example='tony'),
    id?: string(name='Id', example='123456'),
    responseStatus?: string(name='ResponseStatus', example='accepted'),
    self?: boolean(name='Self', example='true'),
  }(name='organizer'),
  recurrence?: {
    pattern?: {
      dayOfMonth?: int32(name='DayOfMonth', example='14'),
      daysOfWeek?: string(name='DaysOfWeek', example='sunday'),
      index?: string(name='Index', example='first'),
      interval?: int32(name='Interval', example='1'),
      type?: string(name='Type', example='daily'),
    }(name='Pattern'),
    range?: {
      endDate?: string(name='EndDate', example='2020-01-01T10:15:30+08:00'),
      numberOfOccurrences?: int32(name='NumberOfOccurrences', example='5'),
      type?: string(name='Type', example='noEnd'),
    }(name='Range'),
  }(name='recurrence'),
  reminders?: [ 
    {
      method?: string(name='Method', example='dingtalk'),
      minutes?: string(name='Minutes', example='15'),
    }
  ](name='reminders'),
  requestId?: string(name='requestId', description='requestId', example='4248DCC9-785F-5A14-8BE0-830FD52E1261'),
  start?: {
    date?: string(name='Date', example='2020-01-01'),
    dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
    timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
  }(name='start'),
  summary?: string(name='summary'),
  updateTime?: string(name='updateTime', example='2020-01-01T10:15:30+08:00'),
}

model PatchEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PatchEventResponseBody(name='body'),
}

async function patchEvent(request: PatchEventRequest): PatchEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PatchEvent', 'POST', '/dingtalk/v1/calendar/patchEvent', 'json', true, 'form', request);
}

model QueryCloudRecordTextRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  direction?: string(name='Direction', example='0', position='Body'),
  maxResults?: long(name='MaxResults', example='20000', position='Body'),
  nextToken?: long(name='NextToken', example='1631172045153000', position='Body'),
  startTime?: long(name='StartTime', example='7940', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  conferenceId: string(name='conferenceId', example='61289fxxx', position='Body'),
}

model QueryCloudRecordTextResponseBody = {
  hasMore?: boolean(name='hasMore', example='true'),
  paragraphList?: [ 
    {
      endTime?: long(name='EndTime', example='7940'),
      nextTtoken?: long(name='NextTtoken', example='1631172045153000'),
      nickName?: string(name='NickName', example='小钉'),
      paragraph?: string(name='Paragraph', example='嘿！你好，这里是小钉'),
      recordId?: long(name='RecordId', example='44444'),
      sentenceList?: [ 
        {
          endTime?: long(name='EndTime', example='7940'),
          sentence?: string(name='Sentence', example='这里是小钉'),
          startTime?: long(name='StartTime', example='7940'),
          userId?: string(name='UserId', example='012345'),
          wordList?: [ 
            {
              endTime?: long(name='EndTime', example='7940'),
              startTime?: long(name='StartTime', example='7940'),
              word?: string(name='Word', example='这里'),
              wordId?: string(name='WordId', example='1631172050535000#0'),
            }
          ](name='WordList'),
        }
      ](name='SentenceList'),
      startTime?: long(name='StartTime', example='7940'),
      status?: long(name='Status', example='1'),
      userId?: string(name='UserId', example='012345'),
    }
  ](name='paragraphList'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model QueryCloudRecordTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCloudRecordTextResponseBody(name='body'),
}

async function queryCloudRecordText(request: QueryCloudRecordTextRequest): QueryCloudRecordTextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryCloudRecordText', 'POST', '/dingtalk/v1/ysp/queryCloudRecordText', 'json', true, 'form', request);
}

model QueryCloudRecordVideoRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  conferenceId: string(name='conferenceId', example='61289fxxx', position='Body'),
}

model QueryCloudRecordVideoResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  videoList?: [ 
    {
      duration?: long(name='Duration', example='59886'),
      endTime?: long(name='EndTime', example='1631172094000'),
      fileSize?: long(name='FileSize', example='1127942'),
      mediaId?: string(name='MediaId', example='faa1566c5bc24f21821ae2394f82db2e'),
      recordId?: string(name='RecordId', example='290882268xxx1172033231'),
      recordType?: long(name='RecordType', example='1'),
      regionId?: string(name='RegionId', example='cn-shenzhen'),
      startTime?: long(name='StartTime', example='1631172094000'),
      userId?: string(name='UserId', example='012345'),
    }
  ](name='videoList'),
}

model QueryCloudRecordVideoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCloudRecordVideoResponseBody(name='body'),
}

async function queryCloudRecordVideo(request: QueryCloudRecordVideoRequest): QueryCloudRecordVideoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryCloudRecordVideo', 'POST', '/dingtalk/v1/ysp/queryCloudRecordVideo', 'json', true, 'form', request);
}

model QueryCloudRecordVideoPlayInfoRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  conferenceId: string(name='ConferenceId', example='6139b4xxx', position='Body'),
  mediaId: string(name='MediaId', example='44444444', position='Body'),
  regionId: string(name='RegionId', example='cn-shenzhen', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model QueryCloudRecordVideoPlayInfoResponseBody = {
  duration?: long(name='duration', example='59886'),
  fileSize?: long(name='fileSize', example='1127942'),
  mp4FileUrl?: string(name='mp4FileUrl', example='https://vod.mcs.dingtalk.com/faa1566c5bc24f21821ae2394f82db2e/8bbd1612e686462ab4717919f67bb721-b8531e0d534b2f9747a9fdfxxxxxxxxc-sd.mp4'),
  playUrl?: string(name='playUrl', example='https://vod.mcs.dingtalk.com/faa1566c5bc24f21821ae2394f82db2e/8bbd1612e686462ab4717919f67bb721-ab85cc044a163568c9485xxxxxxxx76d-sd.m3u8'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  status?: long(name='status', example='1'),
}

model QueryCloudRecordVideoPlayInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCloudRecordVideoPlayInfoResponseBody(name='body'),
}

async function queryCloudRecordVideoPlayInfo(request: QueryCloudRecordVideoPlayInfoRequest): QueryCloudRecordVideoPlayInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryCloudRecordVideoPlayInfo', 'POST', '/dingtalk/v1/ysp/queryCloudRecordVideoPlayInfo', 'json', true, 'form', request);
}

model QueryConferenceInfoRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='208579'),
  }(name='AccountContext', shrink='json', position='Header'),
  conferenceId: string(name='conferenceId', example='607452e01401526ee39609e1', position='Body'),
}

model QueryConferenceInfoResponseBody = {
  confInfo?: {
    activeNum?: int32(name='ActiveNum', example='2'),
    attendNum?: int32(name='AttendNum', example='2'),
    confDuration?: long(name='ConfDuration', example='1000000'),
    conferenceId?: string(name='ConferenceId', example='607452e01401526ee39609e1'),
    creatorId?: string(name='CreatorId', example='208579'),
    creatorNick?: string(name='CreatorNick'),
    endTime?: long(name='EndTime', example='1663294270000'),
    externalLinkUrl?: string(name='ExternalLinkUrl', example='https://meeting.dingtalk.com/app?roomCode=42726xxx&token=1_7ac9xxx'),
    invitedNum?: int32(name='InvitedNum', example='2'),
    roomCode?: string(name='RoomCode', example='4272xxxxx'),
    startTime?: long(name='StartTime', example='1663293270000'),
    status?: int32(name='Status', example='0'),
    title?: string(name='Title'),
  }(name='confInfo'),
  requestId?: string(name='requestId', description='requestId', example='4248DCC9-785F-5A14-8BE0-830FD52E1261'),
}

model QueryConferenceInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryConferenceInfoResponseBody(name='body'),
}

async function queryConferenceInfo(request: QueryConferenceInfoRequest): QueryConferenceInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryConferenceInfo', 'POST', '/dingtalk/v1/ysp/queryConferenceInfo', 'json', true, 'form', request);
}

model QueryConferenceMembersRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  maxResults?: int32(name='MaxResults', example='300', position='Body'),
  nextToken?: string(name='NextToken', example='123000000', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  conferenceId: string(name='conferenceId', example='61289fxxx', position='Body'),
}

model QueryConferenceMembersResponseBody = {
  memberModels?: [ 
    {
      attendStatus?: int32(name='AttendStatus', example='6'),
      coHost?: boolean(name='CoHost', example='false'),
      conferenceId?: string(name='ConferenceId', example='6323dxxxxx'),
      duration?: long(name='Duration', example='10000'),
      host?: boolean(name='Host', example='false'),
      joinTime?: long(name='JoinTime', example='1663293270000'),
      leaveTime?: long(name='LeaveTime', example='1663293280000'),
      outerOrgMember?: boolean(name='OuterOrgMember', example='true'),
      pstnJoin?: boolean(name='PstnJoin', example='false'),
      userId?: string(name='UserId', example='-12345'),
      userNick?: string(name='UserNick', example='小钉'),
    }
  ](name='memberModels'),
  nextToken?: string(name='nextToken', example='123000000'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: int32(name='totalCount', example='20'),
}

model QueryConferenceMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryConferenceMembersResponseBody(name='body'),
}

async function queryConferenceMembers(request: QueryConferenceMembersRequest): QueryConferenceMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryConferenceMembers', 'POST', '/dingtalk/v1/ysp/queryConferenceMembers', 'json', true, 'form', request);
}

model QueryDentryRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  dentryId: string(name='DentryId', example='xxx', position='Body'),
  includeSpace?: boolean(name='IncludeSpace', example='true', position='Body'),
  spaceId: string(name='SpaceId', example='space-fxhb96vuddz8htqt', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model QueryDentryResponseBody = {
  contentType?: string(name='contentType', example='alidoc'),
  createdTime?: long(name='createdTime', example='12345678'),
  creator?: {
    name?: string(name='Name', example='hello'),
    userId?: string(name='UserId', example='012345'),
  }(name='creator'),
  dentryId?: string(name='dentryId', example='abc'),
  dentryType?: string(name='dentryType', example='file'),
  dentryUuid?: string(name='dentryUuid', example='cdefg'),
  docKey?: string(name='docKey', example='aabbcc'),
  extension?: string(name='extension', example='alidoc'),
  hasChildren?: boolean(name='hasChildren', example='false'),
  linkSourceInfo?: {
    extension?: string(name='Extension', example='docx'),
    iconUrl?: {
      line?: string(name='Line', example='gh'),
      small?: string(name='Small', example='def'),
    }(name='IconUrl'),
    id?: string(name='Id', example='def'),
    linkType?: long(name='LinkType', example='0'),
    spaceId?: string(name='SpaceId', example='def'),
  }(name='linkSourceInfo'),
  name?: string(name='name', example='hello'),
  path?: string(name='path', example='测试组织/测试知识库/abc'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  space?: {
    cover?: string(name='Cover', example='https://img.alicdn.com/imgextra/i1/O1xxxxx.png'),
    description?: string(name='Description', example='这是简介'),
    hdIconVO?: {
      icon?: string(name='Icon', example='http://'),
      type?: string(name='Type', example='type'),
    }(name='HdIconVO'),
    iconVO?: {
      icon?: string(name='Icon', example='http://'),
      type?: string(name='Type', example='type'),
    }(name='IconVO'),
    id?: string(name='Id', example='n9XJxxxxx'),
    name?: string(name='Name'),
    owner?: {
      name?: string(name='Name', example='小钉'),
      userId?: string(name='UserId', example='012345'),
    }(name='Owner', example='测试知识库'),
    recentList?: [ 
      {
        contentType?: string(name='ContentType', example='alidoc'),
        createdTime?: long(name='CreatedTime', example='12345678'),
        creator?: {
          name?: string(name='Name', example='hello'),
          userId?: string(name='UserId', example='012345'),
        }(name='Creator'),
        dentryId?: string(name='DentryId', example='abc'),
        dentryType?: string(name='DentryType', example='file'),
        dentryUuid?: string(name='DentryUuid', example='cdefg'),
        docKey?: string(name='DocKey', example='aabbcc'),
        extension?: string(name='Extension', example='alidoc'),
        hasChildren?: boolean(name='HasChildren', example='false'),
        linkSourceInfo?: {
          extension?: string(name='Extension', example='docx'),
          iconUrl?: {
            line?: string(name='Line', example='gh'),
            small?: string(name='Small', example='def'),
          }(name='IconUrl'),
          id?: string(name='Id', example='def'),
          linkType?: long(name='LinkType', example='0'),
          spaceId?: string(name='SpaceId', example='def'),
        }(name='LinkSourceInfo'),
        name?: string(name='Name', example='hello'),
        path?: string(name='Path', example='测试组织/测试知识库/abc'),
        space?: any(name='Space'),
        spaceId?: string(name='SpaceId', example='bcd'),
        statisticalInfo?: {
          wordCount?: long(name='WordCount'),
        }(name='StatisticalInfo'),
        updatedTime?: long(name='UpdatedTime', example='12345678'),
        updater?: {
          name?: string(name='Name', example='hello'),
          userId?: string(name='UserId', example='012345'),
        }(name='Updater'),
        url?: string(name='Url', example='https://xxx.yy'),
        visitorInfo?: {
          dentryActions?: [ string ](name='DentryActions'),
          roleCode?: string(name='RoleCode', example='1'),
          spaceActions?: [ string ](name='SpaceActions'),
        }(name='VisitorInfo'),
      }
    ](name='RecentList'),
    type?: int32(name='Type', example='1'),
    url?: string(name='Url', example='https://alidocs.dingtalk.com/i/spaces/n9XJ*******Xy/overview'),
    visitorInfo?: {
      dentryActions?: [ string ](name='DentryActions', example='GET_DENTRY'),
      roleCode?: string(name='RoleCode', example='3'),
      spaceActions?: [ string ](name='SpaceActions', example='GET_SPACE'),
    }(name='VisitorInfo'),
  }(name='space'),
  spaceId?: string(name='spaceId', example='bcd'),
  updatedTime?: long(name='updatedTime', example='12345678'),
  updater?: {
    name?: string(name='Name', example='hello'),
    userId?: string(name='UserId', example='012345'),
  }(name='updater'),
  url?: string(name='url', example='https://xxx.yy'),
  visitorInfo?: {
    dentryActions?: [ string ](name='DentryActions'),
    roleCode?: string(name='RoleCode', example='1'),
    spaceActions?: [ string ](name='SpaceActions'),
  }(name='visitorInfo'),
}

model QueryDentryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDentryResponseBody(name='body'),
}

async function queryDentry(request: QueryDentryRequest): QueryDentryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryDentry', 'POST', '/dingtalk/v2/documents/queryDentry', 'json', true, 'form', request);
}

model QueryLiveInfoRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  liveId: string(name='LiveId', example='4d38xxxxx', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model QueryLiveInfoResponseBody = {
  coverUrl?: string(name='coverUrl', example='http://xxx/kk.jpg'),
  duration?: long(name='duration', example='59886'),
  endTime?: long(name='endTime', example='1662447951960'),
  introduction?: string(name='introduction'),
  liveId?: string(name='liveId', example='1211-3442-122'),
  livePlayUrl?: string(name='livePlayUrl', example='http://ssssss'),
  liveStatus?: int32(name='liveStatus'),
  playbackDuration?: long(name='playbackDuration', example='13414'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  startTime?: long(name='startTime', example='1627353123000'),
  subscribeCount?: int32(name='subscribeCount', example='111'),
  title?: string(name='title'),
  uv?: int32(name='uv', example='10'),
}

model QueryLiveInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryLiveInfoResponseBody(name='body'),
}

async function queryLiveInfo(request: QueryLiveInfoRequest): QueryLiveInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryLiveInfo', 'POST', '/dingtalk/v1/ysp/queryLiveInfo', 'json', true, 'form', request);
}

model QueryLiveWatchDetailRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  liveId: string(name='LiveId', example='4d38xxxxx', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model QueryLiveWatchDetailResponseBody = {
  avgWatchTime?: long(name='avgWatchTime', example='84600'),
  liveUv?: int32(name='liveUv', example='100'),
  msgCount?: int32(name='msgCount', example='10000'),
  playbackUv?: int32(name='playbackUv', example='20'),
  praiseCount?: int32(name='praiseCount', example='30'),
  pv?: int32(name='pv', example='1000'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalWatchTime?: long(name='totalWatchTime', example='1222000'),
  uv?: int32(name='uv', example='10'),
}

model QueryLiveWatchDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryLiveWatchDetailResponseBody(name='body'),
}

async function queryLiveWatchDetail(request: QueryLiveWatchDetailRequest): QueryLiveWatchDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryLiveWatchDetail', 'POST', '/dingtalk/v1/ysp/queryLiveWatchDetail', 'json', true, 'form', request);
}

model QueryLiveWatchUserListRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  liveId: string(name='LiveId', example='4d38xxxxx', position='Body'),
  pageNumber?: int32(name='PageNumber', example='0', position='Body'),
  pageSize: int32(name='PageSize', example='20', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model QueryLiveWatchUserListResponseBody = {
  orgUsesList?: [ 
    {
      deptName?: string(name='DeptName'),
      name?: string(name='Name'),
      userId?: string(name='UserId', example='1234'),
      watchLiveTime?: long(name='WatchLiveTime', example='19999'),
      watchPlaybackTime?: long(name='WatchPlaybackTime', example='131312312'),
      watchProgressMs?: long(name='WatchProgressMs', example='1323132'),
    }
  ](name='orgUsesList'),
  outOrgUserList?: [ 
    {
      name?: string(name='Name'),
      watchLiveTime?: long(name='WatchLiveTime', example='12312312'),
      watchPlaybackTime?: long(name='WatchPlaybackTime', example='21313131'),
      watchProgressMs?: long(name='WatchProgressMs', example='123131'),
    }
  ](name='outOrgUserList'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model QueryLiveWatchUserListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryLiveWatchUserListResponseBody(name='body'),
}

async function queryLiveWatchUserList(request: QueryLiveWatchUserListRequest): QueryLiveWatchUserListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryLiveWatchUserList', 'POST', '/dingtalk/v1/ysp/queryLiveWatchUserList', 'json', true, 'form', request);
}

model QueryMeetingRoomRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  roomId: string(name='RoomId', example='0ffb7xxxxx', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model QueryMeetingRoomResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: {
    corpId?: string(name='CorpId', example='ding994axxxxx'),
    deviceUnionIds?: [ string ](name='DeviceUnionIds', example='[ "2iPOLbpxxxxuwggiiqiPwiEiF" ]'),
    enableCycleReservation?: boolean(name='EnableCycleReservation', example='true'),
    isvRoomId?: string(name='IsvRoomId', example='xxxIsvRoomId'),
    reservationAuthority?: {
      authorizedMembers?: [ 
        {
          memberId?: string(name='MemberId'),
          memberName?: string(name='MemberName'),
          memberType?: string(name='MemberType'),
        }
      ](name='AuthorizedMembers'),
    }(name='ReservationAuthority'),
    roomCapacity?: int32(name='RoomCapacity', example='10'),
    roomGroup?: {
      groupId?: long(name='GroupId', example='1'),
      groupName?: string(name='GroupName', example='测试分组'),
      parentId?: long(name='ParentId', example='0'),
    }(name='RoomGroup'),
    roomId?: string(name='RoomId', example='0ffb7184xxxxx'),
    roomLabels?: [ 
      {
        labelId?: long(name='LabelId', example='1'),
        labelName?: string(name='LabelName', example='电视'),
      }
    ](name='RoomLabels'),
    roomLocation?: {
      desc?: string(name='Desc', example='xx市xx区xx街道xx号'),
      title?: string(name='Title', example='xxx公司'),
    }(name='RoomLocation'),
    roomName?: string(name='RoomName', example='测试会议室'),
    roomPicture?: string(name='RoomPicture', example='https://static.dingtalk.com/media/lADxxxxx.jpg'),
    roomStaffId?: string(name='RoomStaffId', example='0122414'),
    roomStatus?: int32(name='RoomStatus', example='0'),
  }(name='result'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model QueryMeetingRoomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMeetingRoomResponseBody(name='body'),
}

async function queryMeetingRoom(request: QueryMeetingRoomRequest): QueryMeetingRoomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryMeetingRoom', 'POST', '/dingtalk/v1/ysp/queryMeetingRoom', 'json', true, 'form', request);
}

model QueryMeetingRoomGroupRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  groupId: string(name='GroupId', example='172', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model QueryMeetingRoomGroupResponseBody = {
  groupId?: long(name='groupId', example='172'),
  groupName?: string(name='groupName', example='测试分组'),
  parentId?: long(name='parentId', example='0'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model QueryMeetingRoomGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMeetingRoomGroupResponseBody(name='body'),
}

async function queryMeetingRoomGroup(request: QueryMeetingRoomGroupRequest): QueryMeetingRoomGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryMeetingRoomGroup', 'POST', '/dingtalk/v1/ysp/queryMeetingRoomGroup', 'json', true, 'form', request);
}

model QueryMeetingRoomGroupListRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  request?: map[string]any(name='Request', shrink='json', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model QueryMeetingRoomGroupListResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ 
    {
      groupId?: long(name='GroupId', example='172'),
      groupName?: string(name='GroupName', example='测试分组'),
      parentId?: long(name='ParentId', example='0'),
    }
  ](name='result'),
}

model QueryMeetingRoomGroupListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMeetingRoomGroupListResponseBody(name='body'),
}

async function queryMeetingRoomGroupList(request: QueryMeetingRoomGroupListRequest): QueryMeetingRoomGroupListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryMeetingRoomGroupList', 'POST', '/dingtalk/v1/ysp/queryMeetingRoomGroupList', 'json', true, 'form', request);
}

model QueryMeetingRoomListRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  maxResults?: int32(name='MaxResults', example='20', position='Body'),
  nextToken?: long(name='NextToken', example='124L', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model QueryMeetingRoomListResponseBody = {
  hasMore?: boolean(name='hasMore', example='true'),
  nextToken?: long(name='nextToken', example='123'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ 
    {
      corpId?: string(name='CorpId', example='ding994axxxx'),
      isvRoomId?: string(name='IsvRoomId', example='xxxIsvRoomId'),
      roomCapacity?: int32(name='RoomCapacity', example='10'),
      roomGroup?: {
        groupId?: long(name='GroupId', example='1'),
        groupName?: string(name='GroupName', example='测试分组'),
        parentId?: long(name='ParentId', example='0'),
      }(name='RoomGroup'),
      roomId?: string(name='RoomId', example='0ffb7xxxxx'),
      roomLabels?: [ 
        {
          labelId?: long(name='LabelId', example='1'),
          labelName?: string(name='LabelName', example='电视'),
        }
      ](name='RoomLabels'),
      roomLocation?: {
        desc?: string(name='Desc', example='xx市xx区xx街道xx号'),
        title?: string(name='Title', example='xxx公司'),
      }(name='RoomLocation'),
      roomName?: string(name='RoomName', example='测试会议室'),
      roomPicture?: string(name='RoomPicture', example='https://static.dingtalk.com/media/lADPxxxxx.jpg'),
      roomStaffId?: string(name='RoomStaffId', example='012241xxxxx'),
      roomStatus?: int32(name='RoomStatus', example='0'),
    }
  ](name='result'),
}

model QueryMeetingRoomListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMeetingRoomListResponseBody(name='body'),
}

async function queryMeetingRoomList(request: QueryMeetingRoomListRequest): QueryMeetingRoomListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryMeetingRoomList', 'POST', '/dingtalk/v1/ysp/queryMeetingRoomList', 'json', true, 'form', request);
}

model QueryOrgHonorsRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='243331014234180628'),
  }(name='AccountContext', shrink='json', position='Header'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='487986704507650'),
  }(name='TenantContext', shrink='json', position='Body'),
  maxResults?: int32(name='maxResults', example='48', position='Body'),
  nextToken: string(name='nextToken', example='15', position='Body'),
  orgId: long(name='orgId', example='123456', position='Body'),
}

model QueryOrgHonorsResponseBody = {
  nextToken?: string(name='nextToken', example='15'),
  openHonors?: [ 
    {
      honorDesc?: string(name='honorDesc'),
      honorId?: long(name='honorId', example='21658579'),
      honorImgUrl?: string(name='honorImgUrl', example='https://xxxx.ali-cdn.com/jfejfi.jpg'),
      honorName?: string(name='honorName'),
      honorPendantImgUrl?: string(name='honorPendantImgUrl', example='https://xxxx.ali-cdn.com/jfejfi.jpg'),
    }
  ](name='openHonors'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model QueryOrgHonorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryOrgHonorsResponseBody(name='body'),
}

async function queryOrgHonors(request: QueryOrgHonorsRequest): QueryOrgHonorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryOrgHonors', 'POST', '/aliding/v1/honor/queryOrgHonors', 'json', true, 'form', request);
}

model QueryOrgTodoTasksRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  isDone?: boolean(name='isDone', example='true', position='Body'),
  nextToken?: string(name='nextToken', example='0', position='Body'),
}

model QueryOrgTodoTasksResponseBody = {
  nextToken?: string(name='nextToken', example='15'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  todoCards?: [ 
    {
      bizTag?: string(name='bizTag', example='isv_dingtalkTodo'),
      createdTime?: long(name='createdTime', example='1617675000000'),
      creatorId?: string(name='creatorId', example='xxxx'),
      detailUrl?: {
        appUrl?: string(name='appUrl', example='https://www.dingtalk.com'),
        pcUrl?: string(name='pcUrl', example='https://www.dingtalk.com'),
      }(name='detailUrl'),
      dueTime?: long(name='dueTime', example='1617675000000'),
      isDone?: boolean(name='isDone', example='true'),
      modifiedTime?: long(name='modifiedTime', example='1617675000000'),
      priority?: int32(name='priority', example='10'),
      sourceId?: string(name='sourceId', example='isv_dingtalkTodo1'),
      subject?: string(name='subject', example='接入钉钉待办'),
      taskId?: string(name='taskId', example='taskOPJpwtwPVNGIFKURjrzd'),
    }
  ](name='todoCards'),
}

model QueryOrgTodoTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryOrgTodoTasksResponseBody(name='body'),
}

async function queryOrgTodoTasks(request: QueryOrgTodoTasksRequest): QueryOrgTodoTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryOrgTodoTasks', 'POST', '/dingtalk/v1/task/queryOrgTodoTasks', 'json', true, 'form', request);
}

model QueryScheduleConferenceRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
  scheduleConferenceId: string(name='scheduleConferenceId', example='2a489c68-xxxx-xxxx-xxxx-xxxxxxxxxxxx', position='Body'),
}

model QueryScheduleConferenceResponseBody = {
  endTime?: long(name='endTime', example='1687928400000'),
  phones?: [ string ](name='phones', example='[ "+86123xxxx" ]'),
  requestId?: string(name='requestId', example='xxxxx'),
  roomCode?: string(name='roomCode', example='838 722 xxxxx'),
  scheduleConferenceId?: string(name='scheduleConferenceId', example='2a489c68-xxxx-xxxx-xxxx-xxxxxxxxxxxx'),
  startTime?: long(name='startTime', example='1687924800000'),
  title?: string(name='title', example='预约会议标题'),
  url?: string(name='url', example='https://meeting.dingtalk.com/j/Bsbp3ixxxxxUyJJ9'),
}

model QueryScheduleConferenceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryScheduleConferenceResponseBody(name='body'),
}

async function queryScheduleConference(request: QueryScheduleConferenceRequest): QueryScheduleConferenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryScheduleConference', 'POST', '/dingtalk/v1/ysp/queryScheduleConference', 'json', true, 'form', request);
}

model QueryUserHonorsRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='243331014234180628'),
  }(name='AccountContext', shrink='json', position='Header'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='189477710813728'),
  }(name='TenantContext', shrink='json', position='Body'),
  maxResults?: int32(name='maxResults', example='200', position='Body'),
  nextToken: string(name='nextToken', example='15', position='Body'),
  orgId: long(name='orgId', example='123456', position='Body'),
  userId: string(name='userId', example='123123', position='Body'),
}

model QueryUserHonorsResponseBody = {
  honors?: [ 
    {
      expirationTime?: long(name='expirationTime', example='null'),
      grantHistory?: [ 
        {
          grantTime?: long(name='grantTime', example='12312312312312312'),
          senderUserid?: string(name='senderUserid', example='363784'),
        }
      ](name='grantHistory'),
      honorDesc?: string(name='honorDesc'),
      honorId?: string(name='honorId', example='21659398'),
      honorName?: string(name='honorName'),
    }
  ](name='honors'),
  nextToken?: string(name='nextToken', example='http-trigger-nodejs10.luoni-old.1431999136518149.cn-hangzhou.fc.devsapp.net'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model QueryUserHonorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUserHonorsResponseBody(name='body'),
}

async function queryUserHonors(request: QueryUserHonorsRequest): QueryUserHonorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryUserHonors', 'POST', '/aliding/v1/honor/queryUserHonors', 'json', true, 'form', request);
}

model RecallHonorRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='1323845308033417'),
  }(name='AccountContext', shrink='json', position='Header'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='4'),
  }(name='TenantContext', shrink='json', position='Body'),
  honorId: string(name='honorId', example='21660610', position='Body'),
  orgId: long(name='orgId', example='345391052', position='Body'),
  userId: string(name='userId', example='363784', position='Body'),
}

model RecallHonorResponseBody = {
  content?: {
    data?: any(name='data', example='success'),
  }(name='content'),
  errorCode?: string(name='errorCode', example='040008'),
  errorCtx?: map[string]any(name='errorCtx'),
  errorMsg?: string(name='errorMsg'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='True'),
}

model RecallHonorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecallHonorResponseBody(name='body'),
}

async function recallHonor(request: RecallHonorRequest): RecallHonorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RecallHonor', 'POST', '/aliding/v1/honor/recallHonor', 'json', true, 'form', request);
}

model ReceiverListReportRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  offset: long(name='Offset', example='10', position='Body'),
  reportId: string(name='ReportId', example='173xxxx', position='Body'),
  size: long(name='Size', example='10', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model ReceiverListReportResponseBody = {
  hasMore?: boolean(name='hasMore', example='true'),
  nextCursor?: long(name='nextCursor', example='132131312312'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  useridList?: [ string ](name='useridList'),
}

model ReceiverListReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReceiverListReportResponseBody(name='body'),
}

async function receiverListReport(request: ReceiverListReportRequest): ReceiverListReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ReceiverListReport', 'POST', '/dingtalk/v1/log/receiverListReport', 'json', true, 'form', request);
}

model RedirectTaskRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType: string(name='AppType', example='APP_PBKxxx', position='Body'),
  byManager?: string(name='ByManager', example='y', position='Body'),
  language?: string(name='Language', example='zh-CN', position='Body'),
  nowActionExecutorId: string(name='NowActionExecutorId', example='123456', position='Body'),
  processInstanceId: string(name='ProcessInstanceId', example='instxxxx', position='Body'),
  remark?: string(name='Remark', example='remark', position='Body'),
  systemToken: string(name='SystemToken', example='hexxxx', position='Body'),
  taskId: long(name='TaskId', example='hexxxx', position='Body'),
}

model RedirectTaskResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model RedirectTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RedirectTaskResponseBody(name='body'),
}

async function redirectTask(request: RedirectTaskRequest): RedirectTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RedirectTask', 'POST', '/dingtalk/v1/yida/redirectTask', 'json', true, 'form', request);
}

model RemoveAttendeeRequest {
  accountContext?: {
    accountId: string(name='accountId', example='123456'),
  }(name='AccountContext', shrink='json', position='Header'),
  attendeesToRemove?: [ string ](name='AttendeesToRemove', shrink='json', position='Body'),
  calendarId: string(name='CalendarId', example='primary', position='Body'),
  eventId: string(name='EventId', example='iiiP35sJadba8aBSgjrwPRKgiEiF', position='Body'),
}

model RemoveAttendeeResponseBody = {
  content?: {
    data?: any(name='Data', example='[]'),
  }(name='Content'),
  errorCode?: string(name='ErrorCode', example='success'),
  errorCtx?: map[string]any(name='ErrorCtx'),
  errorMsg?: string(name='ErrorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', description='RequestId', example='A348BA5D-FFD4-57E4-9450-23A14D72F331'),
  success?: boolean(name='Success', example='True'),
}

model RemoveAttendeeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveAttendeeResponseBody(name='body'),
}

async function removeAttendee(request: RemoveAttendeeRequest): RemoveAttendeeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveAttendee', 'POST', '/dingtalk/v1/calendar/removeAttendee', 'json', true, 'form', request);
}

model RemoveMeetingRoomsRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  calendarId: string(name='CalendarId', example='primary', position='Body'),
  eventId: string(name='EventId', example='U5Kxxxxx', position='Body'),
  meetingRoomsToRemove?: [ 
    {
      roomId: string(name='RoomId', example='U5Kxxxxx'),
    }
  ](name='MeetingRoomsToRemove', shrink='json', position='Body'),
}

model RemoveMeetingRoomsResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model RemoveMeetingRoomsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveMeetingRoomsResponseBody(name='body'),
}

async function removeMeetingRooms(request: RemoveMeetingRoomsRequest): RemoveMeetingRoomsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveMeetingRooms', 'POST', '/dingtalk/v1/calendar/removeMeetingRooms', 'json', true, 'form', request);
}

model SaveContentRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  contents: [ 
    {
      content: string(name='Content', example='### 序号1'),
      contentType: string(name='ContentType', example='markdown'),
      key: string(name='Key', example='今日完成工作'),
      sort: long(name='Sort', example='1'),
      type: long(name='Type', example='1'),
    }
  ](name='Contents', example='[]', shrink='json', position='Body'),
  ddFrom: string(name='DdFrom', example='client', position='Body'),
  templateId: string(name='TemplateId', example='sdfafdsfsafdfsaf', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model SaveContentResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model SaveContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveContentResponseBody(name='body'),
}

async function saveContent(request: SaveContentRequest): SaveContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SaveContent', 'POST', '/dingtalk/v1/log/saveContent', 'json', true, 'form', request);
}

model SaveFormDataRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType: string(name='AppType', example='APP_PBKxxx', position='Body'),
  formDataJson: string(name='FormDataJson', example='{\\"textField_jcpm6agt\\": \\"单行\\",\\"employeeField_jcos0sar\\": [\\"workno\\"]}', position='Body'),
  formUuid: string(name='FormUuid', example='FORM-EF6Y4G8WO2FN0SUB43TDQ3CGC3FMFQ1G9400RCJ3', position='Body'),
  language?: string(name='Language', example='zh_CN', position='Body'),
  systemToken: string(name='SystemToken', example='hexxxx', position='Body'),
}

model SaveFormDataResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: string(name='result', example='FORM-EF6xxx'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model SaveFormDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveFormDataResponseBody(name='body'),
}

async function saveFormData(request: SaveFormDataRequest): SaveFormDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SaveFormData', 'POST', '/dingtalk/v1/yida/saveFormData', 'json', true, 'form', request);
}

model SaveFormRemarkRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType: string(name='AppType', example='APP_PBKxxx', position='Body'),
  atUserId?: string(name='AtUserId', example='123456', position='Body'),
  content: string(name='Content', example='instxxxx', position='Body'),
  formInstanceId: string(name='FormInstanceId', example='instxxxx', position='Body'),
  language?: string(name='Language', example='zh-CN', position='Body'),
  replyId?: long(name='ReplyId', example='hexxxx', position='Body'),
  systemToken: string(name='SystemToken', example='hexxxx', position='Body'),
}

model SaveFormRemarkResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: long(name='result'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model SaveFormRemarkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveFormRemarkResponseBody(name='body'),
}

async function saveFormRemark(request: SaveFormRemarkRequest): SaveFormRemarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SaveFormRemark', 'POST', '/dingtalk/v1/yida/saveFormRemark', 'json', true, 'form', request);
}

model SearchEmployeeFieldValuesRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType?: string(name='AppType', example='APP_PBKxxx', position='Body'),
  createFromTimeGMT?: string(name='CreateFromTimeGMT', example='2021-05-01', position='Body'),
  createToTimeGMT?: string(name='CreateToTimeGMT', example='2021-05-01', position='Body'),
  formUuid?: string(name='FormUuid', example='FORM-EF6Yxxx', position='Body'),
  language?: string(name='Language', example='zh_CN', position='Body'),
  modifiedFromTimeGMT?: string(name='ModifiedFromTimeGMT', example='2021-05-01', position='Body'),
  modifiedToTimeGMT?: string(name='ModifiedToTimeGMT', example='2021-09-10', position='Body'),
  originatorId?: string(name='OriginatorId', example='112212221', position='Body'),
  searchFieldJson?: string(name='SearchFieldJson', example='{\\"textField_annandfa\\":\\"1212\\"}', position='Body'),
  systemToken?: string(name='SystemToken', example='hexxxx', position='Body'),
  targetFieldJson?: string(name='TargetFieldJson', example='[\\"textField_xahdfna\\"]', position='Body'),
}

model SearchEmployeeFieldValuesResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: string(name='result', example='manager123'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model SearchEmployeeFieldValuesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchEmployeeFieldValuesResponseBody(name='body'),
}

async function searchEmployeeFieldValues(request: SearchEmployeeFieldValuesRequest): SearchEmployeeFieldValuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SearchEmployeeFieldValues', 'POST', '/dingtalk/v1/yida/searchEmployeeFieldValues', 'json', true, 'form', request);
}

model SearchFormDataIdListRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType: string(name='AppType', example='APP_PBKT0xxx', position='Body'),
  createFromTimeGMT?: string(name='CreateFromTimeGMT', example='yyyy-MM-dd', position='Body'),
  createToTimeGMT?: string(name='CreateToTimeGMT', example='yyyy-MM-dd', position='Body'),
  formUuid: string(name='FormUuid', example='FORM-xxxxx', position='Body'),
  language?: string(name='Language', example='zh-CN', position='Body'),
  modifiedFromTimeGMT?: string(name='ModifiedFromTimeGMT', example='yyyy-MM-dd', position='Body'),
  modifiedToTimeGMT?: string(name='ModifiedToTimeGMT', example='yyyy-MM-dd', position='Body'),
  originatorId?: string(name='OriginatorId', example='012345', position='Body'),
  pageNumber?: int32(name='PageNumber', example='20', position='Body'),
  pageSize?: int32(name='PageSize', example='20', position='Body'),
  searchFieldJson?: string(name='SearchFieldJson', example='{}', position='Body'),
  systemToken: string(name='SystemToken', example='hexxxx', position='Body'),
}

model SearchFormDataIdListResponseBody = {
  data?: [ string ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: long(name='totalCount', example='20'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model SearchFormDataIdListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchFormDataIdListResponseBody(name='body'),
}

async function searchFormDataIdList(request: SearchFormDataIdListRequest): SearchFormDataIdListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SearchFormDataIdList', 'POST', '/dingtalk/v1/yida/searchFormDataIdList', 'json', true, 'form', request);
}

model SearchFormDataSecondGenerationRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType: string(name='AppType', example='APP_PBKT0xxx', position='Body'),
  createFromTimeGMT?: string(name='CreateFromTimeGMT', example='yyyy-MM-dd', position='Body'),
  createToTimeGMT?: string(name='CreateToTimeGMT', example='yyyy-MM-dd', position='Body'),
  formUuid: string(name='FormUuid', example='FORM-xxxxx', position='Body'),
  modifiedFromTimeGMT?: string(name='ModifiedFromTimeGMT', example='yyyy-MM-dd', position='Body'),
  modifiedToTimeGMT?: string(name='ModifiedToTimeGMT', example='yyyy-MM-dd', position='Body'),
  orderConfigJson?: string(name='OrderConfigJson', example='{}', position='Body'),
  originatorId?: string(name='OriginatorId', example='012345', position='Body'),
  pageNumber?: int32(name='PageNumber', example='20', position='Body'),
  pageSize?: int32(name='PageSize', example='20', position='Body'),
  searchCondition?: string(name='SearchCondition', example='{}', position='Body'),
  systemToken: string(name='SystemToken', example='hexxxx', position='Body'),
}

model SearchFormDataSecondGenerationResponseBody = {
  data?: [ 
    {
      createTimeGMT?: string(name='CreateTimeGMT', example='2021-05-01 10:10:10'),
      creatorUserId?: string(name='CreatorUserId', example='012345'),
      formData?: map[string]any(name='FormData'),
      formInstanceId?: string(name='FormInstanceId', example='FINST-xxxx'),
      formUuid?: string(name='FormUuid', example='FORM-xxxx'),
      id?: long(name='Id', example='1023'),
      instanceValue?: string(name='InstanceValue', example='{}'),
      modifiedTimeGMT?: string(name='ModifiedTimeGMT', example='2021-05-01 10:10:10'),
      modifier?: string(name='Modifier'),
      modifyUser?: {
        name?: {
          nameInChinese?: string(name='NameInChinese'),
          nameInEnglish?: string(name='NameInEnglish', example='English'),
        }(name='Name'),
        userId?: string(name='UserId', example='012345'),
      }(name='ModifyUser'),
      originator?: {
        name?: {
          nameInChinese?: string(name='NameInChinese'),
          nameInEnglish?: string(name='NameInEnglish', example='English'),
        }(name='Name'),
        userId?: string(name='UserId', example='012345'),
      }(name='Originator'),
      sequence?: string(name='Sequence', example='1'),
      serialNumber?: string(name='SerialNumber', example='sagc1b3090d'),
      title?: string(name='Title'),
      version?: long(name='Version', example='3'),
    }
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: long(name='totalCount', example='20'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model SearchFormDataSecondGenerationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchFormDataSecondGenerationResponseBody(name='body'),
}

async function searchFormDataSecondGeneration(request: SearchFormDataSecondGenerationRequest): SearchFormDataSecondGenerationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SearchFormDataSecondGeneration', 'POST', '/dingtalk/v1/yida/searchFormDataSecondGeneration', 'json', true, 'form', request);
}

model SearchFormDataSecondGenerationNoTableFieldRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType: string(name='AppType', example='APP_PBKT0xxx', position='Body'),
  createFromTimeGMT?: string(name='CreateFromTimeGMT', example='yyyy-MM-dd', position='Body'),
  createToTimeGMT?: string(name='CreateToTimeGMT', example='yyyy-MM-dd', position='Body'),
  formUuid: string(name='FormUuid', example='FORM-xxxxx', position='Body'),
  modifiedFromTimeGMT?: string(name='ModifiedFromTimeGMT', example='yyyy-MM-dd', position='Body'),
  modifiedToTimeGMT?: string(name='ModifiedToTimeGMT', example='yyyy-MM-dd', position='Body'),
  orderConfigJson?: string(name='OrderConfigJson', example='{}', position='Body'),
  originatorId?: string(name='OriginatorId', example='012345', position='Body'),
  pageNumber?: int32(name='PageNumber', example='20', position='Body'),
  pageSize?: int32(name='PageSize', example='20', position='Body'),
  searchCondition?: string(name='SearchCondition', example='{}', position='Body'),
  systemToken: string(name='SystemToken', example='hexxxx', position='Body'),
}

model SearchFormDataSecondGenerationNoTableFieldResponseBody = {
  data?: [ 
    {
      createTimeGMT?: string(name='CreateTimeGMT', example='2021-05-01 10:10:10'),
      creatorUserId?: string(name='CreatorUserId', example='012345'),
      formData?: map[string]any(name='FormData'),
      formInstanceId?: string(name='FormInstanceId', example='FINST-xxxx'),
      formUuid?: string(name='FormUuid', example='FORM-xxxx'),
      id?: long(name='Id', example='54114'),
      instanceValue?: string(name='InstanceValue', example='{}'),
      modifiedTimeGMT?: string(name='ModifiedTimeGMT', example='2021-05-01 10:10:10'),
      modifier?: string(name='Modifier'),
      modifyUser?: {
        name?: {
          nameInChinese?: string(name='NameInChinese'),
          nameInEnglish?: string(name='NameInEnglish', example='English'),
        }(name='Name'),
        userId?: string(name='UserId', example='012345'),
      }(name='ModifyUser'),
      originator?: {
        name?: {
          nameInChinese?: string(name='NameInChinese'),
          nameInEnglish?: string(name='NameInEnglish', example='English'),
        }(name='Name'),
        userId?: string(name='UserId', example='012345'),
      }(name='Originator'),
      sequence?: string(name='Sequence', example='1'),
      serialNumber?: string(name='SerialNumber', example='7CE737P1SS'),
      title?: string(name='Title'),
      version?: long(name='Version', example='3'),
    }
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: long(name='totalCount', example='20'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model SearchFormDataSecondGenerationNoTableFieldResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchFormDataSecondGenerationNoTableFieldResponseBody(name='body'),
}

async function searchFormDataSecondGenerationNoTableField(request: SearchFormDataSecondGenerationNoTableFieldRequest): SearchFormDataSecondGenerationNoTableFieldResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SearchFormDataSecondGenerationNoTableField', 'POST', '/dingtalk/v1/yida/searchFormDataSecondGenerationNoTableField', 'json', true, 'form', request);
}

model SearchFormDatasRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType: string(name='AppType', example='APP_PBKT0xxx', position='Body'),
  createFromTimeGMT?: string(name='CreateFromTimeGMT', example='yyyy-MM-dd', position='Body'),
  createToTimeGMT?: string(name='CreateToTimeGMT', example='yyyy-MM-dd', position='Body'),
  currentPage?: int32(name='CurrentPage', example='20', position='Body'),
  dynamicOrder?: string(name='DynamicOrder', example='20', position='Body'),
  formUuid: string(name='FormUuid', example='FORM-xxxxx', position='Body'),
  language?: string(name='Language', example='en_US', position='Body'),
  modifiedFromTimeGMT?: string(name='ModifiedFromTimeGMT', example='yyyy-MM-dd', position='Body'),
  modifiedToTimeGMT?: string(name='ModifiedToTimeGMT', example='yyyy-MM-dd', position='Body'),
  originatorId?: string(name='OriginatorId', example='012345', position='Body'),
  pageSize?: int32(name='PageSize', example='20', position='Body'),
  searchFieldJson?: string(name='SearchFieldJson', position='Body'),
  systemToken: string(name='SystemToken', example='hexxxx', position='Body'),
}

model SearchFormDatasResponseBody = {
  currentPage?: int32(name='currentPage', example='1'),
  data?: [ 
    {
      createdTimeGMT?: string(name='CreatedTimeGMT', example='2018-01-24 11:22:01'),
      creatorUserId?: string(name='CreatorUserId', example='012345'),
      dataId?: long(name='DataId', example='1002'),
      formData?: map[string]any(name='FormData'),
      formInstanceId?: string(name='FormInstanceId', example='FINST-BNKJDRF'),
      formUuid?: string(name='FormUuid', example='FORM-EF6Y93URN24F1SCX15VA2P918LPEIJ2H3UFORCJ1'),
      instanceValue?: string(name='InstanceValue', example='{}'),
      modelUuid?: string(name='ModelUuid', example='FORM-EF6Y93URN24F1SCX15VA2P918LPEIJ2H3UFORCJ1'),
      modifiedTimeGMT?: string(name='ModifiedTimeGMT', example='2018-01-24 11:22:01'),
      modifierUserId?: string(name='ModifierUserId', example='012345'),
      modifyUser?: {
        userId?: string(name='UserId', example='012345'),
        userName?: {
          nameInChinese?: string(name='NameInChinese'),
          nameInEnglish?: string(name='NameInEnglish', example='EngilishName'),
          type?: string(name='Type', example='ZH-CN'),
        }(name='UserName'),
      }(name='ModifyUser'),
      originator?: {
        userId?: string(name='UserId', example='012345'),
        userName?: {
          nameInChinese?: string(name='NameInChinese'),
          nameInEnglish?: string(name='NameInEnglish', example='EngilishName'),
          type?: string(name='Type', example='ZH-CN'),
        }(name='UserName'),
      }(name='Originator'),
      sequence?: string(name='Sequence', example='1'),
      serialNo?: string(name='SerialNo', example='231008101012015353'),
      title?: string(name='Title'),
      version?: long(name='Version', example='3'),
    }
  ](name='data'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: int32(name='totalCount', example='20'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model SearchFormDatasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchFormDatasResponseBody(name='body'),
}

async function searchFormDatas(request: SearchFormDatasRequest): SearchFormDatasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SearchFormDatas', 'POST', '/dingtalk/v1/yida/searchFormDatas', 'json', true, 'form', request);
}

model SearchInnerGroupsRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  maxResults?: int32(name='MaxResults', example='100', position='Body'),
  searchKey?: string(name='SearchKey', position='Body'),
}

model SearchInnerGroupsResponseBody = {
  groupInfos?: [ 
    {
      icon?: string(name='Icon', example='@lAD*****'),
      memberAmount?: string(name='MemberAmount', example='10'),
      openConversationId?: string(name='OpenConversationId', example='cid13*****=='),
      title?: string(name='Title'),
    }
  ](name='groupInfos'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model SearchInnerGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchInnerGroupsResponseBody(name='body'),
}

async function searchInnerGroups(request: SearchInnerGroupsRequest): SearchInnerGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SearchInnerGroups', 'POST', '/dingtalk/v1/im/searchInnerGroups', 'json', true, 'form', request);
}

model SendBannerRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  content?: map[string]any(name='Content', shrink='json', position='Body'),
  endTime?: long(name='EndTime', example='1693881641000L', position='Body'),
  startTime?: long(name='StartTime', example='1693881641000L', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model SendBannerResponseBody = {
  arguments?: [ any ](name='arguments'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model SendBannerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendBannerResponseBody(name='body'),
}

async function sendBanner(request: SendBannerRequest): SendBannerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SendBanner', 'POST', '/dingtalk/v1/watt/sendBanner', 'json', true, 'form', request);
}

model SendPopupRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  content?: map[string]any(name='Content', shrink='json', position='Body'),
  endTime?: long(name='EndTime', example='1693881641000', position='Body'),
  startTime?: long(name='StartTime', example='1693881641000', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model SendPopupResponseBody = {
  arguments?: [ any ](name='arguments'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model SendPopupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendPopupResponseBody(name='body'),
}

async function sendPopup(request: SendPopupRequest): SendPopupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SendPopup', 'POST', '/dingtalk/v1/watt/sendPopup', 'json', true, 'form', request);
}

model SendSearchShadeRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  content?: map[string]any(name='Content', shrink='json', position='Body'),
  endTime?: long(name='EndTime', example='1693881641000', position='Body'),
  startTime?: long(name='StartTime', example='1693881641000', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model SendSearchShadeResponseBody = {
  arguments?: [ any ](name='arguments'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model SendSearchShadeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendSearchShadeResponseBody(name='body'),
}

async function sendSearchShade(request: SendSearchShadeRequest): SendSearchShadeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SendSearchShade', 'POST', '/dingtalk/v1/watt/sendSearchShade', 'json', true, 'form', request);
}

model SetColumnsVisibilityRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  column: long(name='Column', example='1', position='Body'),
  columnCount: long(name='ColumnCount', example='20', position='Body'),
  sheetId: string(name='SheetId', example='Sheet1', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  visibility: string(name='Visibility', example='hidden', position='Body'),
  workbookId: string(name='WorkbookId', example='stxxxx', position='Body'),
}

model SetColumnsVisibilityResponseBody = {
  id?: string(name='id', example='stxxxx'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model SetColumnsVisibilityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetColumnsVisibilityResponseBody(name='body'),
}

async function setColumnsVisibility(request: SetColumnsVisibilityRequest): SetColumnsVisibilityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SetColumnsVisibility', 'POST', '/dingtalk/v1/documents/setColumnsVisibility', 'json', true, 'form', request);
}

model SetRowsVisibilityRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  row: long(name='Row', example='1', position='Body'),
  rowCount: long(name='RowCount', example='20', position='Body'),
  sheetId: string(name='SheetId', example='Sheet1', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  visibility: string(name='Visibility', example='hidden', position='Body'),
  workbookId: string(name='WorkbookId', example='stxxxx', position='Body'),
}

model SetRowsVisibilityResponseBody = {
  id?: string(name='id', example='stxxxx'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model SetRowsVisibilityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetRowsVisibilityResponseBody(name='body'),
}

async function setRowsVisibility(request: SetRowsVisibilityRequest): SetRowsVisibilityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SetRowsVisibility', 'POST', '/dingtalk/v1/documents/setRowsVisibility', 'json', true, 'form', request);
}

model SimpleListReportRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  cursor: long(name='Cursor', example='0', position='Body'),
  endTime: long(name='EndTime', example='1507564800000', position='Body'),
  size: long(name='Size', example='10', position='Body'),
  startTime: long(name='StartTime', example='1507564800000', position='Body'),
  templateName?: string(name='TemplateName', example='我管理的模版', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model SimpleListReportResponseBody = {
  dataList?: [ 
    {
      createTime?: long(name='CreateTime', example='1567034772000'),
      creatorId?: string(name='CreatorId', example='1701038'),
      creatorName?: string(name='CreatorName', example='xinmu'),
      deptName?: string(name='DeptName'),
      remark?: string(name='Remark', example='ops'),
      reportId?: string(name='ReportId', example='d64994d09916c76276dd9bfa23637644'),
      templateName?: string(name='TemplateName', example='WG-Template'),
    }
  ](name='dataList'),
  hasMore?: boolean(name='hasMore', example='false'),
  nextCursor?: long(name='nextCursor', example='12312131231'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  size?: long(name='size', example='20'),
}

model SimpleListReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SimpleListReportResponseBody(name='body'),
}

async function simpleListReport(request: SimpleListReportRequest): SimpleListReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SimpleListReport', 'POST', '/dingtalk/v1/log/simpleListReport', 'json', true, 'form', request);
}

model StartCloudRecordRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  mode?: string(name='Mode', example='speech', position='Body'),
  smallWindowPosition?: string(name='SmallWindowPosition', example='relative_right', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  conferenceId: string(name='conferenceId', example='61289fxxx', position='Body'),
}

model StartCloudRecordResponseBody = {
  code?: string(name='code', example='200'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model StartCloudRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartCloudRecordResponseBody(name='body'),
}

async function startCloudRecord(request: StartCloudRecordRequest): StartCloudRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartCloudRecord', 'POST', '/dingtalk/v1/ysp/startCloudRecord', 'json', true, 'form', request);
}

model StartInstanceRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType?: string(name='AppType', example='APP_PBxxx', position='Body'),
  departmentId?: string(name='DepartmentId', example='18295', position='Body'),
  formDataJson?: string(name='FormDataJson', example='{}', position='Body'),
  formUuid?: string(name='FormUuid', example='FORM-EF6Yxxx', position='Body'),
  language?: string(name='Language', example='zh_CN', position='Body'),
  processCode?: string(name='ProcessCode', example='TPROC--EF6Y4xxx', position='Body'),
  processData?: string(name='ProcessData', position='Body'),
  systemToken?: string(name='SystemToken', example='hexxyy', position='Body'),
}

model StartInstanceResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: string(name='result', example='f30233fb-72e1-xxx-xxx'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model StartInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartInstanceResponseBody(name='body'),
}

async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartInstance', 'POST', '/dingtalk/v1/yida/startInstance', 'json', true, 'form', request);
}

model StatisticsListByTypeReportRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  offset: long(name='Offset', example='10', position='Body'),
  reportId: string(name='ReportId', example='173xxxx', position='Body'),
  size: long(name='Size', example='10', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  type: long(name='Type', example='173xxxx', position='Body'),
}

model StatisticsListByTypeReportResponseBody = {
  hasMore?: boolean(name='hasMore', example='true'),
  nextCursor?: long(name='nextCursor', example='12312131231'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  useridList?: [ string ](name='useridList'),
}

model StatisticsListByTypeReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StatisticsListByTypeReportResponseBody(name='body'),
}

async function statisticsListByTypeReport(request: StatisticsListByTypeReportRequest): StatisticsListByTypeReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StatisticsListByTypeReport', 'POST', '/dingtalk/v1/log/statisticsListByTypeReport', 'json', true, 'form', request);
}

model StatisticsReportRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  reportId: string(name='ReportId', example='173xxxx', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model StatisticsReportResponseBody = {
  commentNum?: long(name='commentNum', example='1'),
  commentUserNum?: long(name='commentUserNum', example='1'),
  likeNum?: long(name='likeNum', example='2'),
  readNum?: long(name='readNum', example='3'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model StatisticsReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StatisticsReportResponseBody(name='body'),
}

async function statisticsReport(request: StatisticsReportRequest): StatisticsReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StatisticsReport', 'POST', '/dingtalk/v1/log/statisticsReport', 'json', true, 'form', request);
}

model StopCloudRecordRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  conferenceId: string(name='conferenceId', example='61289fxxx', position='Body'),
}

model StopCloudRecordResponseBody = {
  code?: string(name='code', example='200'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model StopCloudRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopCloudRecordResponseBody(name='body'),
}

async function stopCloudRecord(request: StopCloudRecordRequest): StopCloudRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopCloudRecord', 'POST', '/dingtalk/v1/ysp/stopCloudRecord', 'json', true, 'form', request);
}

model SubscribeCalendarRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  calendarId: string(name='CalendarId', example='MzM5Mxxx', position='Body'),
}

model SubscribeCalendarResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model SubscribeCalendarResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubscribeCalendarResponseBody(name='body'),
}

async function subscribeCalendar(request: SubscribeCalendarRequest): SubscribeCalendarResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubscribeCalendar', 'POST', '/dingtalk/v1/calendar/subscribeCalendar', 'json', true, 'form', request);
}

model SyncDingTypeRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  dingType: string(name='DingType', example='ANT_DING', position='Body'),
  isDimission?: string(name='IsDimission', example='y', position='Body'),
  source: string(name='Source', example='antding', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
  workNo: string(name='WorkNo', example='012345', position='Body'),
}

model SyncDingTypeResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model SyncDingTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncDingTypeResponseBody(name='body'),
}

async function syncDingType(request: SyncDingTypeRequest): SyncDingTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SyncDingType', 'POST', '/aliding/v1/indepding/syncDingType', 'json', true, 'form', request);
}

model TerminateInstanceRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType?: string(name='AppType', example='APP_PBxxx', position='Body'),
  language?: string(name='Language', example='zh_CN', position='Body'),
  processInstanceId?: string(name='ProcessInstanceId', example='f30233fb-72e1-4af4-8cb8-c7e0ea9ee530', position='Body'),
  systemToken?: string(name='SystemToken', example='hexxyy', position='Body'),
}

model TerminateInstanceResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model TerminateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TerminateInstanceResponseBody(name='body'),
}

async function terminateInstance(request: TerminateInstanceRequest): TerminateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TerminateInstance', 'POST', '/dingtalk/v1/yida/terminateInstance', 'json', true, 'form', request);
}

model UnsubscribeCalendarRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  calendarId: string(name='CalendarId', example='MzM5Mxxx', position='Body'),
}

model UnsubscribeCalendarResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model UnsubscribeCalendarResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnsubscribeCalendarResponseBody(name='body'),
}

async function unsubscribeCalendar(request: UnsubscribeCalendarRequest): UnsubscribeCalendarResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UnsubscribeCalendar', 'POST', '/dingtalk/v1/calendar/unsubscribeCalendar', 'json', true, 'form', request);
}

model UpdateFormDataRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType?: string(name='AppType', example='APP_PBKTxxx', position='Body'),
  formInstanceId?: string(name='FormInstanceId', example='FORM_INxxx', position='Body'),
  language?: string(name='Language', example='zh_CN', position='Body'),
  systemToken?: string(name='SystemToken', example='hexxxx', position='Body'),
  updateFormDataJson?: string(name='UpdateFormDataJson', example='{}', position='Body'),
  useLatestVersion?: boolean(name='UseLatestVersion', example='false', position='Body'),
}

model UpdateFormDataResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model UpdateFormDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFormDataResponseBody(name='body'),
}

async function updateFormData(request: UpdateFormDataRequest): UpdateFormDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateFormData', 'POST', '/dingtalk/v1/yida/updateFormData', 'json', true, 'form', request);
}

model UpdateInstanceRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType?: string(name='AppType', example='APP_PBxxx', position='Body'),
  language?: string(name='Language', example='zh_CN', position='Body'),
  processInstanceId?: string(name='ProcessInstanceId', example='f30233fb-72e1-4af4-8cb8-c7e0ea9ee530', position='Body'),
  systemToken?: string(name='SystemToken', example='hexxyy', position='Body'),
  updateFormDataJson?: string(name='UpdateFormDataJson', example='{}', position='Body'),
}

model UpdateInstanceResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model UpdateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceResponseBody(name='body'),
}

async function updateInstance(request: UpdateInstanceRequest): UpdateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstance', 'POST', '/dingtalk/v1/yida/updateInstance', 'json', true, 'form', request);
}

model UpdateLiveRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  coverUrl?: string(name='CoverUrl', example='http://sss/sss', position='Body'),
  introduction?: string(name='Introduction', example='这是一个直播', position='Body'),
  liveId: string(name='LiveId', example='4d38xxxxx', position='Body'),
  preEndTime: long(name='PreEndTime', example='1698596800000', position='Body'),
  preStartTime: long(name='PreStartTime', example='1691596800000', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  title: string(name='Title', example='标题', position='Body'),
}

model UpdateLiveResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model UpdateLiveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLiveResponseBody(name='body'),
}

async function updateLive(request: UpdateLiveRequest): UpdateLiveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateLive', 'POST', '/dingtalk/v1/ysp/updateLive', 'json', true, 'form', request);
}

model UpdateMeetingRoomRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  enableCycleReservation?: boolean(name='EnableCycleReservation', position='Body'),
  groupId?: long(name='GroupId', example='0', position='Body'),
  isvRoomId?: string(name='IsvRoomId', example='xxxIsvRoomId', position='Body'),
  reservationAuthority?: {
    authorizedMembers?: [ 
      {
        memberId?: string(name='MemberId'),
        memberName?: string(name='MemberName'),
        memberType?: string(name='MemberType'),
      }
    ](name='AuthorizedMembers'),
  }(name='ReservationAuthority', shrink='json', position='Body'),
  roomCapacity?: int32(name='RoomCapacity', example='100', position='Body'),
  roomId?: string(name='RoomId', example='0ffbxxxxx', position='Body'),
  roomLabelIds?: [ long ](name='RoomLabelIds', shrink='json', position='Body'),
  roomLocation?: {
    desc?: string(name='Desc'),
    title?: string(name='Title'),
  }(name='RoomLocation', shrink='json', position='Body'),
  roomName?: string(name='RoomName', position='Body'),
  roomPicture?: string(name='RoomPicture', example='https://static.dingtalk.com/media/lADPxxxxx.jpg', position='Body'),
  roomStatus?: int32(name='RoomStatus', example='1', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model UpdateMeetingRoomResponseBody = {
  result?: boolean(name='Result', example='true'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model UpdateMeetingRoomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMeetingRoomResponseBody(name='body'),
}

async function updateMeetingRoom(request: UpdateMeetingRoomRequest): UpdateMeetingRoomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateMeetingRoom', 'POST', '/dingtalk/v1/ysp/updateMeetingRoom', 'json', true, 'form', request);
}

model UpdateMeetingRoomGroupRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  groupId: string(name='GroupId', example='172', position='Body'),
  groupName?: string(name='GroupName', example='测试分组', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model UpdateMeetingRoomGroupResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model UpdateMeetingRoomGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMeetingRoomGroupResponseBody(name='body'),
}

async function updateMeetingRoomGroup(request: UpdateMeetingRoomGroupRequest): UpdateMeetingRoomGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateMeetingRoomGroup', 'POST', '/dingtalk/v1/ysp/updateMeetingRoomGroup', 'json', true, 'form', request);
}

model UpdateRangeRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  backgroundColors?: [[ string ]  ](name='BackgroundColors', example='[["#ff0000","#ff0000","#ff0000"]]', shrink='json', position='Body'),
  hyperlinks?: [[ 
    {
      type?: string(name='Type', example='path'),
      link?: string(name='Link', example='https://www.dingtalk.com'),
      text?: string(name='Text', example='test'),
    }
  ]  ](name='Hyperlinks', example='[["type": "path","link": "https://www.dingtalk.com","text": "test"]]', shrink='json', position='Body'),
  numberFormat?: string(name='NumberFormat', example='General', position='Body'),
  rangeAddress: string(name='RangeAddress', example='A3:C3', position='Body'),
  sheetId: string(name='SheetId', example='Sheet1', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  values?: [[ string ]  ](name='Values', example='[["1","2","3"]]', shrink='json', position='Body'),
  workbookId: string(name='WorkbookId', example='stxxxx', position='Body'),
}

model UpdateRangeResponseBody = {
  a1Notation?: string(name='a1Notation', example='A1:B2'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model UpdateRangeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRangeResponseBody(name='body'),
}

async function updateRange(request: UpdateRangeRequest): UpdateRangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRange', 'POST', '/dingtalk/v1/documents/updateRange', 'json', true, 'form', request);
}

model UpdateScheduleConfSettingsRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  scheduleConfSettingModel?: {
    cohostUserIds?: [ string ](name='CohostUserIds'),
    confAllowedCorpId?: string(name='ConfAllowedCorpId', example='ding********'),
    hostUserId?: string(name='HostUserId', example='012345'),
    lockRoom?: int32(name='LockRoom', example='1'),
    moziConfVirtualExtraSetting?: {
      enableChat?: int32(name='EnableChat', example='1'),
      enableWebAnonymousJoin?: boolean(name='EnableWebAnonymousJoin'),
      joinBeforeHost?: int32(name='JoinBeforeHost', example='1'),
      lockMediaStatusMicMute?: int32(name='LockMediaStatusMicMute', example='1'),
      lockNick?: int32(name='LockNick', example='1'),
      waitingRoom?: int32(name='WaitingRoom', example='1'),
    }(name='MoziConfVirtualExtraSetting'),
    muteOnJoin?: int32(name='MuteOnJoin', example='1'),
    screenShareForbidden?: int32(name='ScreenShareForbidden', example='1'),
  }(name='ScheduleConfSettingModel', shrink='json', position='Body'),
  scheduleConferenceId?: string(name='ScheduleConferenceId', example='f6fb627e-a7e8-403e-b1f8-26e85450f4a9', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
}

model UpdateScheduleConfSettingsResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model UpdateScheduleConfSettingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateScheduleConfSettingsResponseBody(name='body'),
}

async function updateScheduleConfSettings(request: UpdateScheduleConfSettingsRequest): UpdateScheduleConfSettingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateScheduleConfSettings', 'POST', '/dingtalk/v1/ysp/updateScheduleConfSettings', 'json', true, 'form', request);
}

model UpdateScheduleConferenceRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  endTime: long(name='EndTime', example='1687928400000L', position='Body'),
  scheduleConferenceId: string(name='ScheduleConferenceId', example='2a489xxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx', position='Body'),
  startTime: long(name='StartTime', example='1687924800000L', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext', shrink='json', position='Body'),
  title: string(name='Title', example='预约会议标题', position='Body'),
}

model UpdateScheduleConferenceResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model UpdateScheduleConferenceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateScheduleConferenceResponseBody(name='body'),
}

async function updateScheduleConference(request: UpdateScheduleConferenceRequest): UpdateScheduleConferenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateScheduleConference', 'POST', '/dingtalk/v1/ysp/updateScheduleConference', 'json', true, 'form', request);
}

model UpdateStatusRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  appType?: string(name='AppType', example='APP_PBKT0MFBEBTDO8T7SLVP', position='Body'),
  errorLines?: [ int32 ](name='ErrorLines', shrink='json', position='Body'),
  importSequence?: string(name='ImportSequence', example='seq-123', position='Body'),
  language?: string(name='Language', example='zh_CN', position='Body'),
  status?: string(name='Status', example='running', position='Body'),
  systemToken?: string(name='SystemToken', example='hexxxx', position='Body'),
}

model UpdateStatusResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model UpdateStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateStatusResponseBody(name='body'),
}

async function updateStatus(request: UpdateStatusRequest): UpdateStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateStatus', 'POST', '/dingtalk/v1/yida/updateStatus', 'json', true, 'form', request);
}

model UpdateSubscribedCalendarsRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  calendarId: string(name='CalendarId', example='M5MjkxNDUxQHVzZXJzLmRpbmd0YWxrLmNv', position='Body'),
  description?: string(name='Description', position='Body'),
  managers?: [ string ](name='Managers', shrink='json', position='Body'),
  name?: string(name='Name', position='Body'),
  subscribeScope?: {
    userIds?: [ string ](name='UserIds'),
  }(name='SubscribeScope', shrink='json', position='Body'),
}

model UpdateSubscribedCalendarsResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model UpdateSubscribedCalendarsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSubscribedCalendarsResponseBody(name='body'),
}

async function updateSubscribedCalendars(request: UpdateSubscribedCalendarsRequest): UpdateSubscribedCalendarsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateSubscribedCalendars', 'POST', '/dingtalk/v1/calendar/updateSubscribedCalendars', 'json', true, 'form', request);
}

model UpdateTodoTaskRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  description?: string(name='description', example='应用可以调用该接口发起一个钉钉待办任务，该待办事项会出现在钉钉客户端“待办”页面，需要注意的是，通过开放接口发起的待办，目前仅支持直接跳转ISV应用详情页（ISV在调该接口时需传入自身应用详情页链接）。', position='Body'),
  done?: boolean(name='done', example='true', position='Body'),
  dueTime?: long(name='dueTime', example='1617675000000', position='Body'),
  executorIds?: [ string ](name='executorIds', example='[]', shrink='json', position='Body'),
  participantIds?: [ string ](name='participantIds', example='[]', shrink='json', position='Body'),
  subject?: string(name='subject', example='更新钉钉待办', position='Body'),
  taskId: string(name='taskId', example='taskId', position='Body'),
}

model UpdateTodoTaskResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model UpdateTodoTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTodoTaskResponseBody(name='body'),
}

async function updateTodoTask(request: UpdateTodoTaskRequest): UpdateTodoTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTodoTask', 'POST', '/dingtalk/v1/task/updateTodoTask', 'json', true, 'form', request);
}

model UpdateTodoTaskExecutorStatusRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  executorStatusList?: [ 
    {
      id?: string(name='id', example='userId'),
      isDone?: boolean(name='isDone', example='true'),
    }
  ](name='executorStatusList', shrink='json', position='Body'),
  operatorId?: string(name='operatorId', example='xxxx', position='Body'),
  taskId: string(name='taskId', example='15002141', position='Body'),
}

model UpdateTodoTaskExecutorStatusResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model UpdateTodoTaskExecutorStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTodoTaskExecutorStatusResponseBody(name='body'),
}

async function updateTodoTaskExecutorStatus(request: UpdateTodoTaskExecutorStatusRequest): UpdateTodoTaskExecutorStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTodoTaskExecutorStatus', 'POST', '/dingtalk/v1/task/updateTodoTaskExecutorStatus', 'json', true, 'form', request);
}

model UpdateUserAvatarRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  avatarMediaId?: string(name='AvatarMediaId', example='@lADPDfYH3A-xxxx', position='Body'),
}

model UpdateUserAvatarResponseBody = {
  errcode?: string(name='errcode', example='0'),
  errmsg?: string(name='errmsg'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model UpdateUserAvatarResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserAvatarResponseBody(name='body'),
}

async function updateUserAvatar(request: UpdateUserAvatarRequest): UpdateUserAvatarResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateUserAvatar', 'POST', '/dingtalk/v1/contact/updateUserAvatar', 'json', true, 'form', request);
}

model UpdateWorkspaceDocMembersRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  members?: [ 
    {
      memberId?: string(name='MemberId', example='012345'),
      memberType?: string(name='MemberType', example='USER'),
      roleType?: string(name='RoleType', example='ONLY_VIEWER'),
    }
  ](name='Members', shrink='json', position='Body'),
  nodeId: string(name='NodeId', example='node_feb8fea0', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  workspaceId: string(name='WorkspaceId', example='xb8bkxxxxxrXJNaL', position='Body'),
}

model UpdateWorkspaceDocMembersResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model UpdateWorkspaceDocMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWorkspaceDocMembersResponseBody(name='body'),
}

async function updateWorkspaceDocMembers(request: UpdateWorkspaceDocMembersRequest): UpdateWorkspaceDocMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateWorkspaceDocMembers', 'POST', '/dingtalk/v1/documents/updateWorkspaceDocMembers', 'json', true, 'form', request);
}

model UpdateWorkspaceMembersRequest {
  accountContext?: {
    accountId: string(name='accountId', example='012345'),
  }(name='AccountContext', shrink='json', position='Header'),
  members: [ 
    {
      memberId: string(name='MemberId', example='012345'),
      memberType: string(name='MemberType', example='USER'),
      roleType: string(name='RoleType', example='ONLY_VIEWER'),
    }
  ](name='Members', shrink='json', position='Body'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  workspaceId: string(name='WorkspaceId', example='123', position='Body'),
}

model UpdateWorkspaceMembersResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model UpdateWorkspaceMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWorkspaceMembersResponseBody(name='body'),
}

async function updateWorkspaceMembers(request: UpdateWorkspaceMembersRequest): UpdateWorkspaceMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateWorkspaceMembers', 'POST', '/dingtalk/v1/documents/updateWorkspaceMembers', 'json', true, 'form', request);
}

model UploadMediaRequest {
  accountContext?: {
    accountId?: string(name='accountId'),
  }(name='AccountContext', shrink='json', position='Header'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext', shrink='json', position='Body'),
  mediaName?: string(name='mediaName', example='test.jpg', position='Body'),
  mediaType: string(name='mediaType', example='image', position='Body'),
  orgId: long(name='orgId', example='1234567', position='Body'),
  url: string(name='url', example='https://alicdn.com/xxx.jpg', position='Body'),
}

model UploadMediaResponseBody = {
  mediaId?: string(name='mediaId', example='abcd1234'),
  requestId?: string(name='requestId', description='requestId', example='abcd-1234-wxyz-9876'),
}

model UploadMediaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadMediaResponseBody(name='body'),
}

async function uploadMedia(request: UploadMediaRequest): UploadMediaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UploadMedia', 'POST', '/aliding/v1/documents/uploadMedia', 'json', true, 'form', request);
}

model WearOrgHonorRequest {
  accountContext?: {
    accountId?: string(name='accountId', example='1915607600538524'),
  }(name='AccountContext', shrink='json', position='Header'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='306752103647458'),
  }(name='TenantContext', shrink='json', position='Body'),
  honorId: string(name='honorId', example='21659595', position='Body'),
  orgId: long(name='orgId', example='123456', position='Body'),
  userId: string(name='userId', example='363784', position='Body'),
  wear: boolean(name='wear', example='false', position='Body'),
}

model WearOrgHonorResponseBody = {
  content?: {
    data?: any(name='data', example='null'),
  }(name='content'),
  errorCode?: string(name='errorCode', example='0'),
  errorCtx?: map[string]any(name='errorCtx'),
  errorMsg?: string(name='errorMsg'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='32FFC91D-0A9F-585A-B84F-8A54C5187035'),
  success?: boolean(name='success', example='true'),
}

model WearOrgHonorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: WearOrgHonorResponseBody(name='body'),
}

async function wearOrgHonor(request: WearOrgHonorRequest): WearOrgHonorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'WearOrgHonor', 'POST', '/aliding/v1/honor/wearOrgHonor', 'json', true, 'form', request);
}

model DentriesAppPropertiesValue = {
  name?: string(name='Name'),
  value?: string(name='Value'),
  visibility?: string(name='Visibility', example='PRIVATE'),
}

