/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aliding', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddWorkspaceDocMembersHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model AddWorkspaceDocMembersShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model AddWorkspaceDocMembersRequest {
  members?: [ 
    {
      memberId?: string(name='MemberId', example='012345'),
      memberType?: string(name='MemberType', example='USER'),
      roleType?: string(name='RoleType', example='EDITOR'),
    }
  ](name='Members'),
  nodeId?: string(name='NodeId', example='xxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='xxx'),
}

model AddWorkspaceDocMembersShrinkRequest {
  membersShrink?: string(name='Members'),
  nodeId?: string(name='NodeId', example='xxx'),
  tenantContextShrink?: string(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='xxx'),
}

model AddWorkspaceDocMembersResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model AddWorkspaceDocMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddWorkspaceDocMembersResponseBody(name='body'),
}

async function addWorkspaceDocMembersWithOptions(tmpReq: AddWorkspaceDocMembersRequest, tmpHeader: AddWorkspaceDocMembersHeaders, runtime: Util.RuntimeOptions): AddWorkspaceDocMembersResponse {
  Util.validateModel(tmpReq);
  var request = new AddWorkspaceDocMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new AddWorkspaceDocMembersShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.members)) {
    request.membersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.members, 'Members', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.membersShrink)) {
    body['Members'] = request.membersShrink;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddWorkspaceDocMembers',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/addWorkspaceDocMembers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addWorkspaceDocMembers(request: AddWorkspaceDocMembersRequest): AddWorkspaceDocMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddWorkspaceDocMembersHeaders{};
  return addWorkspaceDocMembersWithOptions(request, headers, runtime);
}

model AddWorkspaceMembersHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model AddWorkspaceMembersShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model AddWorkspaceMembersRequest {
  members?: [ 
    {
      memberId?: string(name='MemberId', example='012345'),
      memberType?: string(name='MemberType', example='USER'),
      roleType?: string(name='RoleType', example='EDITOR'),
    }
  ](name='Members'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='123'),
}

model AddWorkspaceMembersShrinkRequest {
  membersShrink?: string(name='Members'),
  tenantContextShrink?: string(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='123'),
}

model AddWorkspaceMembersResponseBody = {
  notInOrgList?: [ string ](name='NotInOrgList'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model AddWorkspaceMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddWorkspaceMembersResponseBody(name='body'),
}

async function addWorkspaceMembersWithOptions(tmpReq: AddWorkspaceMembersRequest, tmpHeader: AddWorkspaceMembersHeaders, runtime: Util.RuntimeOptions): AddWorkspaceMembersResponse {
  Util.validateModel(tmpReq);
  var request = new AddWorkspaceMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new AddWorkspaceMembersShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.members)) {
    request.membersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.members, 'Members', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.membersShrink)) {
    body['Members'] = request.membersShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddWorkspaceMembers',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/addWorkspaceMembers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addWorkspaceMembers(request: AddWorkspaceMembersRequest): AddWorkspaceMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddWorkspaceMembersHeaders{};
  return addWorkspaceMembersWithOptions(request, headers, runtime);
}

model CreateSheetHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model CreateSheetShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateSheetRequest {
  name?: string(name='Name', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model CreateSheetShrinkRequest {
  name?: string(name='Name', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model CreateSheetResponseBody = {
  id?: string(name='id', example='stxxxx'),
  name?: string(name='name', example='Sheet1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  visibility?: string(name='visibility', example='visible'),
}

model CreateSheetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSheetResponseBody(name='body'),
}

async function createSheetWithOptions(tmpReq: CreateSheetRequest, tmpHeader: CreateSheetHeaders, runtime: Util.RuntimeOptions): CreateSheetResponse {
  Util.validateModel(tmpReq);
  var request = new CreateSheetShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateSheetShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSheet',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/createSheet`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSheet(request: CreateSheetRequest): CreateSheetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateSheetHeaders{};
  return createSheetWithOptions(request, headers, runtime);
}

model CreateTodoTaskHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model CreateTodoTaskShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateTodoTaskRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  contentFieldList?: [ 
    {
      fieldKey?: string(name='fieldKey', description='fieldKey', example='fieldKey'),
      fieldValue?: string(name='fieldValue', description='fieldValue', example='fieldValue'),
    }
  ](name='contentFieldList'),
  creatorId?: string(name='creatorId', example='PUoiinWIpa2yH2ymhiiGiP6g'),
  description?: string(name='description', example='应用可以调用该接口发起一个钉钉待办任务，该待办事项会出现在钉钉客户端“待办”页面，需要注意的是，通过开放接口发起的待办，目前仅支持直接跳转ISV应用详情页（ISV在调该接口时需传入自身应用详情页链接）。'),
  detailUrl?: {
    appUrl?: string(name='appUrl', example='https://www.dingtalk.com'),
    pcUrl?: string(name='pcUrl', example='https://www.dingtalk.com'),
  }(name='detailUrl'),
  dueTime?: long(name='dueTime', example='1617675000000'),
  executorIds?: [ string ](name='executorIds'),
  isOnlyShowExecutor?: boolean(name='isOnlyShowExecutor', example='true'),
  notifyConfigs?: {
    dingNotify?: string(name='dingNotify', example='1'),
  }(name='notifyConfigs'),
  operatorId?: string(name='operatorId', example='12345'),
  participantIds?: [ string ](name='participantIds'),
  priority?: int32(name='priority', example='20'),
  sourceId?: string(name='sourceId', example='isv_dingtalkTodo1'),
  subject?: string(name='subject', example='接入钉钉待办'),
}

model CreateTodoTaskShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  contentFieldListShrink?: string(name='contentFieldList'),
  creatorId?: string(name='creatorId', example='PUoiinWIpa2yH2ymhiiGiP6g'),
  description?: string(name='description', example='应用可以调用该接口发起一个钉钉待办任务，该待办事项会出现在钉钉客户端“待办”页面，需要注意的是，通过开放接口发起的待办，目前仅支持直接跳转ISV应用详情页（ISV在调该接口时需传入自身应用详情页链接）。'),
  detailUrlShrink?: string(name='detailUrl'),
  dueTime?: long(name='dueTime', example='1617675000000'),
  executorIdsShrink?: string(name='executorIds'),
  isOnlyShowExecutor?: boolean(name='isOnlyShowExecutor', example='true'),
  notifyConfigsShrink?: string(name='notifyConfigs'),
  operatorId?: string(name='operatorId', example='12345'),
  participantIdsShrink?: string(name='participantIds'),
  priority?: int32(name='priority', example='20'),
  sourceId?: string(name='sourceId', example='isv_dingtalkTodo1'),
  subject?: string(name='subject', example='接入钉钉待办'),
}

model CreateTodoTaskResponseBody = {
  bizTag?: string(name='bizTag', example='isv_dingtalkTodo'),
  contentFieldList?: [ 
    {
      fieldKey?: string(name='fieldKey', description='fieldKey', example='fieldKey'),
      fieldValue?: string(name='fieldValue', description='fieldValue', example='fieldValue'),
    }
  ](name='contentFieldList'),
  createdTime?: long(name='createdTime', example='1617675200000'),
  creatorId?: string(name='creatorId', example='PUoiinWIpa2yH2ymhiiGiP6g'),
  description?: string(name='description', example='应用可以调用该接口发起一个钉钉待办任务，该待办事项会出现在钉钉客户端“待办”页面，需要注意的是，通过开放接口发起的待办，目前仅支持直接跳转ISV应用详情页（ISV在调该接口时需传入自身应用详情页链接）。'),
  detailUrl?: {
    appUrl?: string(name='appUrl', example='https://www.dingtalk.com'),
    pcUrl?: string(name='pcUrl', example='https://www.dingtalk.com'),
  }(name='detailUrl'),
  done?: boolean(name='done', example='false'),
  dueTime?: long(name='dueTime', example='1617675100000'),
  executorIds?: [ string ](name='executorIds'),
  finishTime?: long(name='finishTime', example='1617675200000'),
  id?: string(name='id', example='OPJpwtwPVNGIFKURjrzd'),
  isOnlyShowExecutor?: boolean(name='isOnlyShowExecutor', example='true'),
  modifiedTime?: long(name='modifiedTime', example='1617675200000'),
  modifierId?: string(name='modifierId', example='PUoiinWIpa2yH2ymhiiGiP6g'),
  notifyConfigs?: {
    dingNotify?: string(name='dingNotify', example='1'),
  }(name='notifyConfigs'),
  participantIds?: [ string ](name='participantIds'),
  priority?: int32(name='priority', example='20'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  source?: string(name='source', example='isv_dingtalkTodo'),
  sourceId?: string(name='sourceId', example='isv_dingtalkTodo1'),
  startTime?: long(name='startTime', example='1617675000000'),
  subject?: string(name='subject', example='接入钉钉待办'),
}

model CreateTodoTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTodoTaskResponseBody(name='body'),
}

async function createTodoTaskWithOptions(tmpReq: CreateTodoTaskRequest, tmpHeader: CreateTodoTaskHeaders, runtime: Util.RuntimeOptions): CreateTodoTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateTodoTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateTodoTaskShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.contentFieldList)) {
    request.contentFieldListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.contentFieldList, 'contentFieldList', 'json');
  }
  if (!Util.isUnset(tmpReq.detailUrl)) {
    request.detailUrlShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.detailUrl, 'detailUrl', 'json');
  }
  if (!Util.isUnset(tmpReq.executorIds)) {
    request.executorIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.executorIds, 'executorIds', 'json');
  }
  if (!Util.isUnset(tmpReq.notifyConfigs)) {
    request.notifyConfigsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notifyConfigs, 'notifyConfigs', 'json');
  }
  if (!Util.isUnset(tmpReq.participantIds)) {
    request.participantIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.participantIds, 'participantIds', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.operatorId)) {
    query['operatorId'] = request.operatorId;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.contentFieldListShrink)) {
    body['contentFieldList'] = request.contentFieldListShrink;
  }
  if (!Util.isUnset(request.creatorId)) {
    body['creatorId'] = request.creatorId;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.detailUrlShrink)) {
    body['detailUrl'] = request.detailUrlShrink;
  }
  if (!Util.isUnset(request.dueTime)) {
    body['dueTime'] = request.dueTime;
  }
  if (!Util.isUnset(request.executorIdsShrink)) {
    body['executorIds'] = request.executorIdsShrink;
  }
  if (!Util.isUnset(request.isOnlyShowExecutor)) {
    body['isOnlyShowExecutor'] = request.isOnlyShowExecutor;
  }
  if (!Util.isUnset(request.notifyConfigsShrink)) {
    body['notifyConfigs'] = request.notifyConfigsShrink;
  }
  if (!Util.isUnset(request.participantIdsShrink)) {
    body['participantIds'] = request.participantIdsShrink;
  }
  if (!Util.isUnset(request.priority)) {
    body['priority'] = request.priority;
  }
  if (!Util.isUnset(request.sourceId)) {
    body['sourceId'] = request.sourceId;
  }
  if (!Util.isUnset(request.subject)) {
    body['subject'] = request.subject;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTodoTask',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/task/createTodoTask`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTodoTask(request: CreateTodoTaskRequest): CreateTodoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateTodoTaskHeaders{};
  return createTodoTaskWithOptions(request, headers, runtime);
}

model CreateWorkspaceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model CreateWorkspaceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateWorkspaceRequest {
  description?: string(name='Description'),
  name?: string(name='Name'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model CreateWorkspaceShrinkRequest {
  description?: string(name='Description'),
  name?: string(name='Name'),
  tenantContextShrink?: string(name='TenantContext'),
}

model CreateWorkspaceResponseBody = {
  description?: string(name='description', example='知识库描述'),
  name?: string(name='name', example='知识库'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  url?: string(name='url', example='https://xxx/workspaceId'),
  workspaceId?: string(name='workspaceId', example='YRBGvyxxxx'),
}

model CreateWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateWorkspaceResponseBody(name='body'),
}

async function createWorkspaceWithOptions(tmpReq: CreateWorkspaceRequest, tmpHeader: CreateWorkspaceHeaders, runtime: Util.RuntimeOptions): CreateWorkspaceResponse {
  Util.validateModel(tmpReq);
  var request = new CreateWorkspaceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateWorkspaceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateWorkspace',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/createWorkspace`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createWorkspace(request: CreateWorkspaceRequest): CreateWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateWorkspaceHeaders{};
  return createWorkspaceWithOptions(request, headers, runtime);
}

model CreateWorkspaceDocHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model CreateWorkspaceDocShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateWorkspaceDocRequest {
  docType?: string(name='DocType', example='DOC'),
  name?: string(name='Name', example='测试文档'),
  parentNodeId?: string(name='ParentNodeId', example='YRBGv0Ye'),
  templateId?: string(name='TemplateId', example='123243'),
  templateType?: string(name='TemplateType', example='team_template'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='123'),
}

model CreateWorkspaceDocShrinkRequest {
  docType?: string(name='DocType', example='DOC'),
  name?: string(name='Name', example='测试文档'),
  parentNodeId?: string(name='ParentNodeId', example='YRBGv0Ye'),
  templateId?: string(name='TemplateId', example='123243'),
  templateType?: string(name='TemplateType', example='team_template'),
  tenantContextShrink?: string(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='123'),
}

model CreateWorkspaceDocResponseBody = {
  docKey?: string(name='docKey', example='QoJGq7xxx'),
  nodeId?: string(name='nodeId', example='YRBGv0Ye'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  url?: string(name='url', example='https://xxx/workspaceId/docs/nodeId'),
  workspaceId?: string(name='workspaceId', example='YRBGvy'),
}

model CreateWorkspaceDocResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateWorkspaceDocResponseBody(name='body'),
}

async function createWorkspaceDocWithOptions(tmpReq: CreateWorkspaceDocRequest, tmpHeader: CreateWorkspaceDocHeaders, runtime: Util.RuntimeOptions): CreateWorkspaceDocResponse {
  Util.validateModel(tmpReq);
  var request = new CreateWorkspaceDocShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateWorkspaceDocShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.docType)) {
    body['DocType'] = request.docType;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.parentNodeId)) {
    body['ParentNodeId'] = request.parentNodeId;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.templateType)) {
    body['TemplateType'] = request.templateType;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateWorkspaceDoc',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/createWorkspaceDoc`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createWorkspaceDoc(request: CreateWorkspaceDocRequest): CreateWorkspaceDocResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateWorkspaceDocHeaders{};
  return createWorkspaceDocWithOptions(request, headers, runtime);
}

model DeleteTodoTaskHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model DeleteTodoTaskShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteTodoTaskRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  operatorId?: string(name='operatorId', example='12345'),
  taskId?: string(name='taskId', example='63edc8da7e917d6ecdaab11b'),
}

model DeleteTodoTaskShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  operatorId?: string(name='operatorId', example='12345'),
  taskId?: string(name='taskId', example='63edc8da7e917d6ecdaab11b'),
}

model DeleteTodoTaskResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model DeleteTodoTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTodoTaskResponseBody(name='body'),
}

async function deleteTodoTaskWithOptions(tmpReq: DeleteTodoTaskRequest, tmpHeader: DeleteTodoTaskHeaders, runtime: Util.RuntimeOptions): DeleteTodoTaskResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteTodoTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DeleteTodoTaskShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.operatorId)) {
    body['operatorId'] = request.operatorId;
  }
  if (!Util.isUnset(request.taskId)) {
    body['taskId'] = request.taskId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTodoTask',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/task/deleteTodoTask`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTodoTask(request: DeleteTodoTaskRequest): DeleteTodoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteTodoTaskHeaders{};
  return deleteTodoTaskWithOptions(request, headers, runtime);
}

model DeleteWorkspaceDocMembersHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model DeleteWorkspaceDocMembersShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteWorkspaceDocMembersRequest {
  members?: [ 
    {
      memberId?: string(name='MemberId', example='012345'),
      memberType?: string(name='MemberType', example='USER'),
    }
  ](name='Members'),
  nodeId?: string(name='NodeId', example='YRBGv0xxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='YRBGvyxxx'),
}

model DeleteWorkspaceDocMembersShrinkRequest {
  membersShrink?: string(name='Members'),
  nodeId?: string(name='NodeId', example='YRBGv0xxx'),
  tenantContextShrink?: string(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='YRBGvyxxx'),
}

model DeleteWorkspaceDocMembersResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model DeleteWorkspaceDocMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteWorkspaceDocMembersResponseBody(name='body'),
}

async function deleteWorkspaceDocMembersWithOptions(tmpReq: DeleteWorkspaceDocMembersRequest, tmpHeader: DeleteWorkspaceDocMembersHeaders, runtime: Util.RuntimeOptions): DeleteWorkspaceDocMembersResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteWorkspaceDocMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DeleteWorkspaceDocMembersShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.members)) {
    request.membersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.members, 'Members', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.membersShrink)) {
    body['Members'] = request.membersShrink;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWorkspaceDocMembers',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/deleteWorkspaceDocMembers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteWorkspaceDocMembers(request: DeleteWorkspaceDocMembersRequest): DeleteWorkspaceDocMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteWorkspaceDocMembersHeaders{};
  return deleteWorkspaceDocMembersWithOptions(request, headers, runtime);
}

model DeleteWorkspaceMembersHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model DeleteWorkspaceMembersShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteWorkspaceMembersRequest {
  members?: [ 
    {
      memberId?: string(name='MemberId', example='012345'),
      memberType?: string(name='MemberType', example='USER'),
    }
  ](name='Members'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='123'),
}

model DeleteWorkspaceMembersShrinkRequest {
  membersShrink?: string(name='Members'),
  tenantContextShrink?: string(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='123'),
}

model DeleteWorkspaceMembersResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model DeleteWorkspaceMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteWorkspaceMembersResponseBody(name='body'),
}

async function deleteWorkspaceMembersWithOptions(tmpReq: DeleteWorkspaceMembersRequest, tmpHeader: DeleteWorkspaceMembersHeaders, runtime: Util.RuntimeOptions): DeleteWorkspaceMembersResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteWorkspaceMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DeleteWorkspaceMembersShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.members)) {
    request.membersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.members, 'Members', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.membersShrink)) {
    body['Members'] = request.membersShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWorkspaceMembers',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/deleteWorkspaceMembers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteWorkspaceMembers(request: DeleteWorkspaceMembersRequest): DeleteWorkspaceMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteWorkspaceMembersHeaders{};
  return deleteWorkspaceMembersWithOptions(request, headers, runtime);
}

model GetUserHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model GetUserShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetUserRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  language?: string(name='language', example='zh_CN'),
}

model GetUserShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  language?: string(name='language', example='zh_CN'),
}

model GetUserResponseBody = {
  active?: boolean(name='active', example='true'),
  admin?: boolean(name='admin', example='true'),
  avatar?: string(name='avatar', example='xxx'),
  boss?: boolean(name='boss', example='true'),
  deptIdList?: [ long ](name='deptIdList', example='[2,3,4]'),
  deptOrderList?: [ 
    {
      deptId?: long(name='deptId'),
      order?: long(name='order'),
    }
  ](name='deptOrderList'),
  email?: string(name='email', example='test@xxx.com'),
  exclusiveAccount?: boolean(name='exclusiveAccount', example='true'),
  exclusiveAccountCorpId?: string(name='exclusiveAccountCorpId', example='dingxxx'),
  exclusiveAccountCorpName?: string(name='exclusiveAccountCorpName', example='组织名称'),
  exclusiveAccountType?: string(name='exclusiveAccountType', example='dingtalk'),
  extension?: string(name='extension', example='{"爱好":"旅游","年龄":"24"}'),
  hideMobile?: boolean(name='hideMobile', example='false'),
  hiredDate?: long(name='hiredDate', example='1597573616828'),
  jobNumber?: string(name='jobNumber', example='4'),
  leaderInDept?: [ 
    {
      deptId?: long(name='deptId'),
      leader?: boolean(name='leader'),
    }
  ](name='leaderInDept'),
  loginId?: string(name='loginId', example='login_id3'),
  managerUserid?: string(name='managerUserid', example='manager240'),
  mobile?: string(name='mobile', example='18513027676'),
  name?: string(name='name', example='张三'),
  nickname?: string(name='nickname', example='昵称'),
  orgEmail?: string(name='orgEmail', example='test@xxx.com'),
  realAuthed?: boolean(name='realAuthed', example='true'),
  remark?: string(name='remark', example='备注备注'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  roleList?: [ 
    {
      groupName?: string(name='groupName', example='职务'),
      id?: long(name='id'),
      name?: string(name='name', example='张三'),
    }
  ](name='roleList'),
  senior?: boolean(name='senior', example='true'),
  stateCode?: string(name='stateCode', example='86'),
  telephone?: string(name='telephone', example='010-86123456-2345'),
  title?: string(name='title', example='技术总监'),
  unionEmpExt?: {
    corpId?: string(name='corpId', example='dingxxx'),
    unionEmpMapList?: [ 
      {
        cropId?: string(name='cropId', example='dingxxx'),
        userid?: string(name='userid', example='zhangsan'),
      }
    ](name='unionEmpMapList'),
    userid?: string(name='userid', example='zhangsan'),
  }(name='unionEmpExt'),
  userid?: string(name='userid', example='zhangsan'),
  workPlace?: string(name='workPlace', example='未来park'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserResponseBody(name='body'),
}

async function getUserWithOptions(tmpReq: GetUserRequest, tmpHeader: GetUserHeaders, runtime: Util.RuntimeOptions): GetUserResponse {
  Util.validateModel(tmpReq);
  var request = new GetUserShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetUserShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.language)) {
    body['language'] = request.language;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetUser',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/im/getUser`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUser(request: GetUserRequest): GetUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetUserHeaders{};
  return getUserWithOptions(request, headers, runtime);
}

model InsertRowsBeforeHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model InsertRowsBeforeShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model InsertRowsBeforeRequest {
  row?: long(name='Row', example='2'),
  rowCount?: long(name='RowCount', example='10'),
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model InsertRowsBeforeShrinkRequest {
  row?: long(name='Row', example='2'),
  rowCount?: long(name='RowCount', example='10'),
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model InsertRowsBeforeResponseBody = {
  id?: string(name='id', example='stxxxx'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model InsertRowsBeforeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InsertRowsBeforeResponseBody(name='body'),
}

async function insertRowsBeforeWithOptions(tmpReq: InsertRowsBeforeRequest, tmpHeader: InsertRowsBeforeHeaders, runtime: Util.RuntimeOptions): InsertRowsBeforeResponse {
  Util.validateModel(tmpReq);
  var request = new InsertRowsBeforeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new InsertRowsBeforeShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.row)) {
    body['Row'] = request.row;
  }
  if (!Util.isUnset(request.rowCount)) {
    body['RowCount'] = request.rowCount;
  }
  if (!Util.isUnset(request.sheetId)) {
    body['SheetId'] = request.sheetId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InsertRowsBefore',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/insertRowsBefore`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function insertRowsBefore(request: InsertRowsBeforeRequest): InsertRowsBeforeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InsertRowsBeforeHeaders{};
  return insertRowsBeforeWithOptions(request, headers, runtime);
}

model QueryOrgTodoTasksHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model QueryOrgTodoTasksShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryOrgTodoTasksRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  isDone?: boolean(name='isDone', example='true'),
  nextToken?: string(name='nextToken', example='0'),
}

model QueryOrgTodoTasksShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  isDone?: boolean(name='isDone', example='true'),
  nextToken?: string(name='nextToken', example='0'),
}

model QueryOrgTodoTasksResponseBody = {
  nextToken?: string(name='nextToken', example='15'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  todoCards?: [ 
    {
      bizTag?: string(name='bizTag', example='isv_dingtalkTodo'),
      createdTime?: long(name='createdTime', example='1617675000000'),
      creatorId?: string(name='creatorId', example='xxxx'),
      detailUrl?: {
        appUrl?: string(name='appUrl', example='https://www.dingtalk.com'),
        pcUrl?: string(name='pcUrl', example='https://www.dingtalk.com'),
      }(name='detailUrl'),
      dueTime?: long(name='dueTime', example='1617675000000'),
      isDone?: boolean(name='isDone', example='true'),
      modifiedTime?: long(name='modifiedTime', example='1617675000000'),
      priority?: int32(name='priority', example='10'),
      sourceId?: string(name='sourceId', example='isv_dingtalkTodo1'),
      subject?: string(name='subject', example='接入钉钉待办'),
      taskId?: string(name='taskId', example='taskOPJpwtwPVNGIFKURjrzd'),
    }
  ](name='todoCards'),
}

model QueryOrgTodoTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryOrgTodoTasksResponseBody(name='body'),
}

async function queryOrgTodoTasksWithOptions(tmpReq: QueryOrgTodoTasksRequest, tmpHeader: QueryOrgTodoTasksHeaders, runtime: Util.RuntimeOptions): QueryOrgTodoTasksResponse {
  Util.validateModel(tmpReq);
  var request = new QueryOrgTodoTasksShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryOrgTodoTasksShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.isDone)) {
    body['isDone'] = request.isDone;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['nextToken'] = request.nextToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryOrgTodoTasks',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/task/queryOrgTodoTasks`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryOrgTodoTasks(request: QueryOrgTodoTasksRequest): QueryOrgTodoTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryOrgTodoTasksHeaders{};
  return queryOrgTodoTasksWithOptions(request, headers, runtime);
}

model UpdateTodoTaskHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model UpdateTodoTaskShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateTodoTaskRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  description?: string(name='description', example='应用可以调用该接口发起一个钉钉待办任务，该待办事项会出现在钉钉客户端“待办”页面，需要注意的是，通过开放接口发起的待办，目前仅支持直接跳转ISV应用详情页（ISV在调该接口时需传入自身应用详情页链接）。'),
  done?: boolean(name='done', example='true'),
  dueTime?: long(name='dueTime', example='1617675000000'),
  executorIds?: [ string ](name='executorIds', example='[]'),
  participantIds?: [ string ](name='participantIds', example='[]'),
  subject?: string(name='subject', example='更新钉钉待办'),
  taskId?: string(name='taskId', example='taskId'),
}

model UpdateTodoTaskShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  description?: string(name='description', example='应用可以调用该接口发起一个钉钉待办任务，该待办事项会出现在钉钉客户端“待办”页面，需要注意的是，通过开放接口发起的待办，目前仅支持直接跳转ISV应用详情页（ISV在调该接口时需传入自身应用详情页链接）。'),
  done?: boolean(name='done', example='true'),
  dueTime?: long(name='dueTime', example='1617675000000'),
  executorIdsShrink?: string(name='executorIds', example='[]'),
  participantIdsShrink?: string(name='participantIds', example='[]'),
  subject?: string(name='subject', example='更新钉钉待办'),
  taskId?: string(name='taskId', example='taskId'),
}

model UpdateTodoTaskResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model UpdateTodoTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTodoTaskResponseBody(name='body'),
}

async function updateTodoTaskWithOptions(tmpReq: UpdateTodoTaskRequest, tmpHeader: UpdateTodoTaskHeaders, runtime: Util.RuntimeOptions): UpdateTodoTaskResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateTodoTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateTodoTaskShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.executorIds)) {
    request.executorIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.executorIds, 'executorIds', 'json');
  }
  if (!Util.isUnset(tmpReq.participantIds)) {
    request.participantIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.participantIds, 'participantIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.done)) {
    body['done'] = request.done;
  }
  if (!Util.isUnset(request.dueTime)) {
    body['dueTime'] = request.dueTime;
  }
  if (!Util.isUnset(request.executorIdsShrink)) {
    body['executorIds'] = request.executorIdsShrink;
  }
  if (!Util.isUnset(request.participantIdsShrink)) {
    body['participantIds'] = request.participantIdsShrink;
  }
  if (!Util.isUnset(request.subject)) {
    body['subject'] = request.subject;
  }
  if (!Util.isUnset(request.taskId)) {
    body['taskId'] = request.taskId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTodoTask',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/task/updateTodoTask`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTodoTask(request: UpdateTodoTaskRequest): UpdateTodoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateTodoTaskHeaders{};
  return updateTodoTaskWithOptions(request, headers, runtime);
}

model UpdateTodoTaskExecutorStatusHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model UpdateTodoTaskExecutorStatusShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateTodoTaskExecutorStatusRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  executorStatusList?: [ 
    {
      id?: string(name='id', example='userId'),
      isDone?: boolean(name='isDone', example='true'),
    }
  ](name='executorStatusList'),
  operatorId?: string(name='operatorId', example='xxxx'),
  taskId?: string(name='taskId', example='15002141'),
}

model UpdateTodoTaskExecutorStatusShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  executorStatusListShrink?: string(name='executorStatusList'),
  operatorId?: string(name='operatorId', example='xxxx'),
  taskId?: string(name='taskId', example='15002141'),
}

model UpdateTodoTaskExecutorStatusResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model UpdateTodoTaskExecutorStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTodoTaskExecutorStatusResponseBody(name='body'),
}

async function updateTodoTaskExecutorStatusWithOptions(tmpReq: UpdateTodoTaskExecutorStatusRequest, tmpHeader: UpdateTodoTaskExecutorStatusHeaders, runtime: Util.RuntimeOptions): UpdateTodoTaskExecutorStatusResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateTodoTaskExecutorStatusShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateTodoTaskExecutorStatusShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.executorStatusList)) {
    request.executorStatusListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.executorStatusList, 'executorStatusList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.executorStatusListShrink)) {
    body['executorStatusList'] = request.executorStatusListShrink;
  }
  if (!Util.isUnset(request.operatorId)) {
    body['operatorId'] = request.operatorId;
  }
  if (!Util.isUnset(request.taskId)) {
    body['taskId'] = request.taskId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTodoTaskExecutorStatus',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/task/updateTodoTaskExecutorStatus`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTodoTaskExecutorStatus(request: UpdateTodoTaskExecutorStatusRequest): UpdateTodoTaskExecutorStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateTodoTaskExecutorStatusHeaders{};
  return updateTodoTaskExecutorStatusWithOptions(request, headers, runtime);
}

model UpdateWorkspaceDocMembersHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model UpdateWorkspaceDocMembersShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateWorkspaceDocMembersRequest {
  members?: [ 
    {
      memberId?: string(name='MemberId', example='012345'),
      memberType?: string(name='MemberType', example='USER'),
      roleType?: string(name='RoleType', example='ONLY_VIEWER'),
    }
  ](name='Members'),
  nodeId?: string(name='NodeId', example='node_feb8fea0'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='xb8bkxxxxxrXJNaL'),
}

model UpdateWorkspaceDocMembersShrinkRequest {
  membersShrink?: string(name='Members'),
  nodeId?: string(name='NodeId', example='node_feb8fea0'),
  tenantContextShrink?: string(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='xb8bkxxxxxrXJNaL'),
}

model UpdateWorkspaceDocMembersResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model UpdateWorkspaceDocMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateWorkspaceDocMembersResponseBody(name='body'),
}

async function updateWorkspaceDocMembersWithOptions(tmpReq: UpdateWorkspaceDocMembersRequest, tmpHeader: UpdateWorkspaceDocMembersHeaders, runtime: Util.RuntimeOptions): UpdateWorkspaceDocMembersResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateWorkspaceDocMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateWorkspaceDocMembersShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.members)) {
    request.membersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.members, 'Members', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.membersShrink)) {
    body['Members'] = request.membersShrink;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWorkspaceDocMembers',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/updateWorkspaceDocMembers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateWorkspaceDocMembers(request: UpdateWorkspaceDocMembersRequest): UpdateWorkspaceDocMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateWorkspaceDocMembersHeaders{};
  return updateWorkspaceDocMembersWithOptions(request, headers, runtime);
}

model UpdateWorkspaceMembersHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model UpdateWorkspaceMembersShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateWorkspaceMembersRequest {
  members?: [ 
    {
      memberId?: string(name='MemberId', example='012345'),
      memberType?: string(name='MemberType', example='USER'),
      roleType?: string(name='RoleType', example='ONLY_VIEWER'),
    }
  ](name='Members'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='123'),
}

model UpdateWorkspaceMembersShrinkRequest {
  membersShrink?: string(name='Members'),
  tenantContextShrink?: string(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='123'),
}

model UpdateWorkspaceMembersResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model UpdateWorkspaceMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateWorkspaceMembersResponseBody(name='body'),
}

async function updateWorkspaceMembersWithOptions(tmpReq: UpdateWorkspaceMembersRequest, tmpHeader: UpdateWorkspaceMembersHeaders, runtime: Util.RuntimeOptions): UpdateWorkspaceMembersResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateWorkspaceMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateWorkspaceMembersShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.members)) {
    request.membersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.members, 'Members', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.membersShrink)) {
    body['Members'] = request.membersShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWorkspaceMembers',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/updateWorkspaceMembers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateWorkspaceMembers(request: UpdateWorkspaceMembersRequest): UpdateWorkspaceMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateWorkspaceMembersHeaders{};
  return updateWorkspaceMembersWithOptions(request, headers, runtime);
}

