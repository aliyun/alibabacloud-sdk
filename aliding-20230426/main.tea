/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aliding', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DentryAppPropertiesValue = {
  name?: string(name='Name', example='test'),
  value?: string(name='Value', example='value'),
  visibility?: string(name='Visibility', example='PUBLIC'),
}

model DentriesAppPropertiesValue = {
  name?: string(name='Name'),
  value?: string(name='Value'),
  visibility?: string(name='Visibility', example='PRIVATE'),
}

model AddAttendeeHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='123456'),
  }(name='AccountContext'),
}

model AddAttendeeShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model AddAttendeeRequest {
  attendeesToAdd?: [ 
    {
      id?: string(name='id', example='123456'),
      isOptional?: boolean(name='isOptional', example='true'),
    }
  ](name='AttendeesToAdd', description='This parameter is required.'),
  calendarId?: string(name='CalendarId', description='This parameter is required.', example='primary'),
  eventId?: string(name='EventId', description='This parameter is required.', example='cnNTbW1YbU9sL2p6aFJZdEgvdlQrQT08'),
  chatNotification?: boolean(name='chatNotification'),
  pushNotification?: boolean(name='pushNotification'),
}

model AddAttendeeShrinkRequest {
  attendeesToAddShrink?: string(name='AttendeesToAdd', description='This parameter is required.'),
  calendarId?: string(name='CalendarId', description='This parameter is required.', example='primary'),
  eventId?: string(name='EventId', description='This parameter is required.', example='cnNTbW1YbU9sL2p6aFJZdEgvdlQrQT08'),
  chatNotification?: boolean(name='chatNotification'),
  pushNotification?: boolean(name='pushNotification'),
}

model AddAttendeeResponseBody = {
  content?: {
    data?: any(name='Data', example='[]'),
  }(name='Content'),
  errorCode?: string(name='ErrorCode', example='200'),
  errorCtx?: map[string]any(name='ErrorCtx'),
  errorMsg?: string(name='ErrorMsg', example='error check permissions'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', description='RequestId', example='9BCC17ED-0187-54A0-BD31-56FDBE865447'),
  success?: boolean(name='Success', example='True'),
}

model AddAttendeeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddAttendeeResponseBody(name='body'),
}

/**
 * @summary 添加日程参与者
 *
 * @param tmpReq AddAttendeeRequest
 * @param tmpHeader AddAttendeeHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddAttendeeResponse
 */
async function addAttendeeWithOptions(tmpReq: AddAttendeeRequest, tmpHeader: AddAttendeeHeaders, runtime: Util.RuntimeOptions): AddAttendeeResponse {
  Util.validateModel(tmpReq);
  var request = new AddAttendeeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new AddAttendeeShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.attendeesToAdd)) {
    request.attendeesToAddShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.attendeesToAdd, 'AttendeesToAdd', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.attendeesToAddShrink)) {
    body['AttendeesToAdd'] = request.attendeesToAddShrink;
  }
  if (!Util.isUnset(request.calendarId)) {
    body['CalendarId'] = request.calendarId;
  }
  if (!Util.isUnset(request.eventId)) {
    body['EventId'] = request.eventId;
  }
  if (!Util.isUnset(request.chatNotification)) {
    body['chatNotification'] = request.chatNotification;
  }
  if (!Util.isUnset(request.pushNotification)) {
    body['pushNotification'] = request.pushNotification;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddAttendee',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/addAttendee`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 添加日程参与者
 *
 * @param request AddAttendeeRequest
 * @return AddAttendeeResponse
 */
async function addAttendee(request: AddAttendeeRequest): AddAttendeeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddAttendeeHeaders{};
  return addAttendeeWithOptions(request, headers, runtime);
}

model AddDriveSpaceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext', description='This parameter is required.'),
}

model AddDriveSpaceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext', description='This parameter is required.'),
}

model AddDriveSpaceRequest {
  name?: string(name='Name', description='This parameter is required.'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model AddDriveSpaceShrinkRequest {
  name?: string(name='Name', description='This parameter is required.'),
  tenantContextShrink?: string(name='TenantContext'),
}

model AddDriveSpaceResponseBody = {
  createTime?: string(name='createTime'),
  modifyTime?: string(name='modifyTime'),
  permissionMode?: string(name='permissionMode'),
  quota?: long(name='quota'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  spaceId?: string(name='spaceId'),
  spaceName?: string(name='spaceName'),
  spaceType?: string(name='spaceType'),
  usedQuota?: long(name='usedQuota'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model AddDriveSpaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddDriveSpaceResponseBody(name='body'),
}

/**
 * @summary 新建钉盘空间
 *
 * @param tmpReq AddDriveSpaceRequest
 * @param tmpHeader AddDriveSpaceHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddDriveSpaceResponse
 */
async function addDriveSpaceWithOptions(tmpReq: AddDriveSpaceRequest, tmpHeader: AddDriveSpaceHeaders, runtime: Util.RuntimeOptions): AddDriveSpaceResponse {
  Util.validateModel(tmpReq);
  var request = new AddDriveSpaceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new AddDriveSpaceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddDriveSpace',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/addDriveSpace`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新建钉盘空间
 *
 * @param request AddDriveSpaceRequest
 * @return AddDriveSpaceResponse
 */
async function addDriveSpace(request: AddDriveSpaceRequest): AddDriveSpaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddDriveSpaceHeaders{};
  return addDriveSpaceWithOptions(request, headers, runtime);
}

model AddFolderHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model AddFolderShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model AddFolderRequest {
  name?: string(name='Name', description='This parameter is required.'),
  option?: {
    appProperties?: [ 
      {
        name?: string(name='Name', description='This parameter is required.', example='test'),
        value?: string(name='Value', description='This parameter is required.', example='value'),
        visibility?: string(name='Visibility', description='This parameter is required.', example='PUBLIC'),
      }
    ](name='AppProperties'),
    conflictStrategy?: string(name='ConflictStrategy', example='AUTO_RENAME'),
  }(name='Option'),
  parentId?: string(name='ParentId', description='This parameter is required.', example='140822073803'),
  spaceId?: string(name='SpaceId', description='This parameter is required.', example='xPar2SZ63KodG3aV'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model AddFolderShrinkRequest {
  name?: string(name='Name', description='This parameter is required.'),
  optionShrink?: string(name='Option'),
  parentId?: string(name='ParentId', description='This parameter is required.', example='140822073803'),
  spaceId?: string(name='SpaceId', description='This parameter is required.', example='xPar2SZ63KodG3aV'),
  tenantContextShrink?: string(name='TenantContext'),
}

model AddFolderResponseBody = {
  dentry?: {
    appProperties?: map[string][ DentryAppPropertiesValue     ](name='AppProperties'),
    createTime?: string(name='CreateTime', example='2022-01-01T10:00:00Z'),
    creatorId?: string(name='CreatorId', example='creator_id'),
    extension?: string(name='Extension', example='txt'),
    id?: string(name='Id', example='dentry_id'),
    modifiedTime?: string(name='ModifiedTime', example='2022-01-01T10:00:00Z'),
    modifierId?: string(name='ModifierId', example='modifier_id'),
    name?: string(name='Name', example='dentry_name'),
    parentId?: string(name='ParentId', example='163201723391'),
    partitionType?: string(name='PartitionType', example='PUBLIC_OSS_PARTITION'),
    path?: string(name='Path', example='./test.txt'),
    properties?: {
      readOnly?: boolean(name='ReadOnly', example='true'),
    }(name='Properties'),
    size?: long(name='Size', example='6020771'),
    spaceId?: string(name='SpaceId', example='Ao01nSzzBxZQ68JW'),
    status?: string(name='Status', example='NORMAL'),
    storageDriver?: string(name='StorageDriver', example='DINGTALK'),
    type?: string(name='Type', example='FOLDER'),
    uuid?: string(name='Uuid', example='80a7201602b34450a7a97d8d4e255421'),
    version?: long(name='Version', example='1'),
  }(name='dentry'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model AddFolderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddFolderResponseBody(name='body'),
}

/**
 * @summary 添加文件夹
 *
 * @param tmpReq AddFolderRequest
 * @param tmpHeader AddFolderHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddFolderResponse
 */
async function addFolderWithOptions(tmpReq: AddFolderRequest, tmpHeader: AddFolderHeaders, runtime: Util.RuntimeOptions): AddFolderResponse {
  Util.validateModel(tmpReq);
  var request = new AddFolderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new AddFolderShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.option)) {
    request.optionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.option, 'Option', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.optionShrink)) {
    body['Option'] = request.optionShrink;
  }
  if (!Util.isUnset(request.parentId)) {
    body['ParentId'] = request.parentId;
  }
  if (!Util.isUnset(request.spaceId)) {
    body['SpaceId'] = request.spaceId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddFolder',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/addFolder`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 添加文件夹
 *
 * @param request AddFolderRequest
 * @return AddFolderResponse
 */
async function addFolder(request: AddFolderRequest): AddFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddFolderHeaders{};
  return addFolderWithOptions(request, headers, runtime);
}

model AddMeetingRoomsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model AddMeetingRoomsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model AddMeetingRoomsRequest {
  calendarId?: string(name='CalendarId', description='This parameter is required.', example='primary'),
  eventId?: string(name='EventId', description='This parameter is required.', example='U5Kxxxxx'),
  meetingRoomsToAdd?: [ 
    {
      roomId?: string(name='RoomId', example='4002fxxxxx'),
    }
  ](name='MeetingRoomsToAdd', description='This parameter is required.'),
}

model AddMeetingRoomsShrinkRequest {
  calendarId?: string(name='CalendarId', description='This parameter is required.', example='primary'),
  eventId?: string(name='EventId', description='This parameter is required.', example='U5Kxxxxx'),
  meetingRoomsToAddShrink?: string(name='MeetingRoomsToAdd', description='This parameter is required.'),
}

model AddMeetingRoomsResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model AddMeetingRoomsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddMeetingRoomsResponseBody(name='body'),
}

/**
 * @summary 预定会议室
 *
 * @param tmpReq AddMeetingRoomsRequest
 * @param tmpHeader AddMeetingRoomsHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddMeetingRoomsResponse
 */
async function addMeetingRoomsWithOptions(tmpReq: AddMeetingRoomsRequest, tmpHeader: AddMeetingRoomsHeaders, runtime: Util.RuntimeOptions): AddMeetingRoomsResponse {
  Util.validateModel(tmpReq);
  var request = new AddMeetingRoomsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new AddMeetingRoomsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.meetingRoomsToAdd)) {
    request.meetingRoomsToAddShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.meetingRoomsToAdd, 'MeetingRoomsToAdd', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.calendarId)) {
    body['CalendarId'] = request.calendarId;
  }
  if (!Util.isUnset(request.eventId)) {
    body['EventId'] = request.eventId;
  }
  if (!Util.isUnset(request.meetingRoomsToAddShrink)) {
    body['MeetingRoomsToAdd'] = request.meetingRoomsToAddShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddMeetingRooms',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/addMeetingRooms`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 预定会议室
 *
 * @param request AddMeetingRoomsRequest
 * @return AddMeetingRoomsResponse
 */
async function addMeetingRooms(request: AddMeetingRoomsRequest): AddMeetingRoomsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddMeetingRoomsHeaders{};
  return addMeetingRoomsWithOptions(request, headers, runtime);
}

model AddMultiDimTableHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model AddMultiDimTableShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model AddMultiDimTableRequest {
  baseId?: string(name='BaseId', description='This parameter is required.', example='r1R7q3QmWew5lo02fxB7nxxxxxxxx'),
  fields?: [ 
    {
      name?: string(name='Name', description='This parameter is required.'),
      property?: map[string]any(name='Property'),
      type?: string(name='Type', description='This parameter is required.', example='text'),
    }
  ](name='Fields'),
  name?: string(name='Name'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model AddMultiDimTableShrinkRequest {
  baseId?: string(name='BaseId', description='This parameter is required.', example='r1R7q3QmWew5lo02fxB7nxxxxxxxx'),
  fieldsShrink?: string(name='Fields'),
  name?: string(name='Name'),
  tenantContextShrink?: string(name='TenantContext'),
}

model AddMultiDimTableResponseBody = {
  id?: string(name='Id', example='r1R7q3QmWew5lo02fxB7xxxxxxx'),
  name?: string(name='Name'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model AddMultiDimTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddMultiDimTableResponseBody(name='body'),
}

/**
 * @summary 新增数据表
 *
 * @param tmpReq AddMultiDimTableRequest
 * @param tmpHeader AddMultiDimTableHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddMultiDimTableResponse
 */
async function addMultiDimTableWithOptions(tmpReq: AddMultiDimTableRequest, tmpHeader: AddMultiDimTableHeaders, runtime: Util.RuntimeOptions): AddMultiDimTableResponse {
  Util.validateModel(tmpReq);
  var request = new AddMultiDimTableShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new AddMultiDimTableShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.fields)) {
    request.fieldsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.fields, 'Fields', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.baseId)) {
    body['BaseId'] = request.baseId;
  }
  if (!Util.isUnset(request.fieldsShrink)) {
    body['Fields'] = request.fieldsShrink;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddMultiDimTable',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/table/addMultiDimTable`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新增数据表
 *
 * @param request AddMultiDimTableRequest
 * @return AddMultiDimTableResponse
 */
async function addMultiDimTable(request: AddMultiDimTableRequest): AddMultiDimTableResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddMultiDimTableHeaders{};
  return addMultiDimTableWithOptions(request, headers, runtime);
}

model AddPermissionHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model AddPermissionShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model AddPermissionRequest {
  dentryUuid?: string(name='DentryUuid'),
  members?: [ 
    {
      corpId?: string(name='CorpId', example='123456'),
      id?: string(name='Id', example='123456'),
      type?: string(name='Type', example='ORG'),
    }
  ](name='Members', description='This parameter is required.'),
  option?: {
    duration?: long(name='Duration', example='3600'),
  }(name='Option'),
  roleId?: string(name='RoleId', description='This parameter is required.'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model AddPermissionShrinkRequest {
  dentryUuid?: string(name='DentryUuid'),
  membersShrink?: string(name='Members', description='This parameter is required.'),
  optionShrink?: string(name='Option'),
  roleId?: string(name='RoleId', description='This parameter is required.'),
  tenantContextShrink?: string(name='TenantContext'),
}

model AddPermissionResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model AddPermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddPermissionResponseBody(name='body'),
}

/**
 * @summary 添加文件权限
 *
 * @param tmpReq AddPermissionRequest
 * @param tmpHeader AddPermissionHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddPermissionResponse
 */
async function addPermissionWithOptions(tmpReq: AddPermissionRequest, tmpHeader: AddPermissionHeaders, runtime: Util.RuntimeOptions): AddPermissionResponse {
  Util.validateModel(tmpReq);
  var request = new AddPermissionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new AddPermissionShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.members)) {
    request.membersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.members, 'Members', 'json');
  }
  if (!Util.isUnset(tmpReq.option)) {
    request.optionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.option, 'Option', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.dentryUuid)) {
    body['DentryUuid'] = request.dentryUuid;
  }
  if (!Util.isUnset(request.membersShrink)) {
    body['Members'] = request.membersShrink;
  }
  if (!Util.isUnset(request.optionShrink)) {
    body['Option'] = request.optionShrink;
  }
  if (!Util.isUnset(request.roleId)) {
    body['RoleId'] = request.roleId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddPermission',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/addPermission`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 添加文件权限
 *
 * @param request AddPermissionRequest
 * @return AddPermissionResponse
 */
async function addPermission(request: AddPermissionRequest): AddPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddPermissionHeaders{};
  return addPermissionWithOptions(request, headers, runtime);
}

model AddRecordPermissionHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model AddRecordPermissionShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model AddRecordPermissionRequest {
  bizType?: string(name='BizType', description='This parameter is required.', example='minutes'),
  conferenceId?: string(name='ConferenceId', description='This parameter is required.', example='1dddwrqrq'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  userId?: string(name='UserId', description='This parameter is required.', example='012345'),
}

model AddRecordPermissionShrinkRequest {
  bizType?: string(name='BizType', description='This parameter is required.', example='minutes'),
  conferenceId?: string(name='ConferenceId', description='This parameter is required.', example='1dddwrqrq'),
  tenantContextShrink?: string(name='TenantContext'),
  userId?: string(name='UserId', description='This parameter is required.', example='012345'),
}

model AddRecordPermissionResponseBody = {
  code?: string(name='code', example='200'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model AddRecordPermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddRecordPermissionResponseBody(name='body'),
}

/**
 * @summary 添加闪记权限
 *
 * @param tmpReq AddRecordPermissionRequest
 * @param tmpHeader AddRecordPermissionHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddRecordPermissionResponse
 */
async function addRecordPermissionWithOptions(tmpReq: AddRecordPermissionRequest, tmpHeader: AddRecordPermissionHeaders, runtime: Util.RuntimeOptions): AddRecordPermissionResponse {
  Util.validateModel(tmpReq);
  var request = new AddRecordPermissionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new AddRecordPermissionShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizType)) {
    body['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.conferenceId)) {
    body['ConferenceId'] = request.conferenceId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddRecordPermission',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/addRecordPermission`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 添加闪记权限
 *
 * @param request AddRecordPermissionRequest
 * @return AddRecordPermissionResponse
 */
async function addRecordPermission(request: AddRecordPermissionRequest): AddRecordPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddRecordPermissionHeaders{};
  return addRecordPermissionWithOptions(request, headers, runtime);
}

model AddScenegroupMemberHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model AddScenegroupMemberShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model AddScenegroupMemberRequest {
  openConversationId?: string(name='OpenConversationId', description='This parameter is required.', example='cidt*****Xa4K10w=='),
  userIds?: string(name='UserIds', description='This parameter is required.', example='123xx,224xx'),
}

model AddScenegroupMemberResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model AddScenegroupMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddScenegroupMemberResponseBody(name='body'),
}

/**
 * @summary 新增群成员
 *
 * @param request AddScenegroupMemberRequest
 * @param tmpHeader AddScenegroupMemberHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddScenegroupMemberResponse
 */
async function addScenegroupMemberWithOptions(request: AddScenegroupMemberRequest, tmpHeader: AddScenegroupMemberHeaders, runtime: Util.RuntimeOptions): AddScenegroupMemberResponse {
  Util.validateModel(request);
  var headers = new AddScenegroupMemberShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.openConversationId)) {
    body['OpenConversationId'] = request.openConversationId;
  }
  if (!Util.isUnset(request.userIds)) {
    body['UserIds'] = request.userIds;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddScenegroupMember',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/im/addScenegroupMember`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新增群成员
 *
 * @param request AddScenegroupMemberRequest
 * @return AddScenegroupMemberResponse
 */
async function addScenegroupMember(request: AddScenegroupMemberRequest): AddScenegroupMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddScenegroupMemberHeaders{};
  return addScenegroupMemberWithOptions(request, headers, runtime);
}

model AddTicketMemoHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model AddTicketMemoShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model AddTicketMemoRequest {
  openTeamId?: string(name='OpenTeamId', description='This parameter is required.', example='eKWh3xxxxiE'),
  openTicketId?: string(name='OpenTicketId', description='This parameter is required.', example='Dq9hP8Sk2v6vQxxxxiE'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  ticketMemo?: {
    attachments?: [ 
      {
        fileName?: string(name='FileName', example='"ticket/image/44xxxx9/43003/e27204b38xxxx1640499.txt'),
        key?: string(name='Key', example='wahaha.txt'),
      }
    ](name='Attachments'),
    memo?: string(name='Memo'),
  }(name='TicketMemo'),
}

model AddTicketMemoShrinkRequest {
  openTeamId?: string(name='OpenTeamId', description='This parameter is required.', example='eKWh3xxxxiE'),
  openTicketId?: string(name='OpenTicketId', description='This parameter is required.', example='Dq9hP8Sk2v6vQxxxxiE'),
  tenantContextShrink?: string(name='TenantContext'),
  ticketMemoShrink?: string(name='TicketMemo'),
}

model AddTicketMemoResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model AddTicketMemoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddTicketMemoResponseBody(name='body'),
}

/**
 * @summary 工单添加备注
 *
 * @param tmpReq AddTicketMemoRequest
 * @param tmpHeader AddTicketMemoHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddTicketMemoResponse
 */
async function addTicketMemoWithOptions(tmpReq: AddTicketMemoRequest, tmpHeader: AddTicketMemoHeaders, runtime: Util.RuntimeOptions): AddTicketMemoResponse {
  Util.validateModel(tmpReq);
  var request = new AddTicketMemoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new AddTicketMemoShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.ticketMemo)) {
    request.ticketMemoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ticketMemo, 'TicketMemo', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.openTeamId)) {
    body['OpenTeamId'] = request.openTeamId;
  }
  if (!Util.isUnset(request.openTicketId)) {
    body['OpenTicketId'] = request.openTicketId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.ticketMemoShrink)) {
    body['TicketMemo'] = request.ticketMemoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddTicketMemo',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ticket/addTicketMemo`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 工单添加备注
 *
 * @param request AddTicketMemoRequest
 * @return AddTicketMemoResponse
 */
async function addTicketMemo(request: AddTicketMemoRequest): AddTicketMemoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddTicketMemoHeaders{};
  return addTicketMemoWithOptions(request, headers, runtime);
}

model AddWorkspaceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model AddWorkspaceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model AddWorkspaceRequest {
  name?: string(name='Name', description='This parameter is required.'),
  option?: {
    description?: string(name='Description'),
    teamId?: string(name='TeamId', example='lHiicjNFM2iSFYSdz2iPuI8ZwiEiE'),
  }(name='Option'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model AddWorkspaceShrinkRequest {
  name?: string(name='Name', description='This parameter is required.'),
  optionShrink?: string(name='Option'),
  tenantContextShrink?: string(name='TenantContext'),
}

model AddWorkspaceResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  workspace?: {
    corpId?: string(name='CorpId', example='ding16b241fd05********288'),
    cover?: string(name='Cover', example='https://example/file-manage-files/zh-CN/202***13/ldet/XXXX.jpg'),
    createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
    creatorId?: string(name='CreatorId', example='01472825524039877041'),
    description?: string(name='Description', example='workspace_description'),
    icon?: {
      type?: string(name='Type', example='TEAM'),
      value?: string(name='Value', example='https://example/file-manage-files/zh-CN/202***13/ldet/avatar3.jpg'),
    }(name='Icon'),
    modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
    modifierId?: string(name='ModifierId', example='01472825524039877041'),
    name?: string(name='Name', example='workspace_name'),
    permissionRole?: string(name='PermissionRole', example='READER'),
    rootNodeId?: string(name='RootNodeId', example='root_node_uuid'),
    teamId?: string(name='TeamId', example='lHiicjNFM2iSFYSdz2iPuI8ZwiEiE'),
    type?: string(name='Type', example='TEAM'),
    url?: string(name='Url', example='workspace_url'),
    workspaceId?: string(name='WorkspaceId', example='workspace_id'),
  }(name='workspace'),
}

model AddWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddWorkspaceResponseBody(name='body'),
}

/**
 * @summary 新建知识库
 *
 * @param tmpReq AddWorkspaceRequest
 * @param tmpHeader AddWorkspaceHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddWorkspaceResponse
 */
async function addWorkspaceWithOptions(tmpReq: AddWorkspaceRequest, tmpHeader: AddWorkspaceHeaders, runtime: Util.RuntimeOptions): AddWorkspaceResponse {
  Util.validateModel(tmpReq);
  var request = new AddWorkspaceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new AddWorkspaceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.option)) {
    request.optionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.option, 'Option', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.optionShrink)) {
    body['Option'] = request.optionShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddWorkspace',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/addWorkspace`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新建知识库
 *
 * @param request AddWorkspaceRequest
 * @return AddWorkspaceResponse
 */
async function addWorkspace(request: AddWorkspaceRequest): AddWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddWorkspaceHeaders{};
  return addWorkspaceWithOptions(request, headers, runtime);
}

model AddWorkspaceDocMembersHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model AddWorkspaceDocMembersShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model AddWorkspaceDocMembersRequest {
  members?: [ 
    {
      memberId?: string(name='MemberId', description='This parameter is required.', example='012345'),
      memberType?: string(name='MemberType', description='This parameter is required.', example='USER'),
      roleType?: string(name='RoleType', description='This parameter is required.', example='EDITOR'),
    }
  ](name='Members', description='This parameter is required.'),
  nodeId?: string(name='NodeId', description='This parameter is required.', example='xxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='xxx'),
}

model AddWorkspaceDocMembersShrinkRequest {
  membersShrink?: string(name='Members', description='This parameter is required.'),
  nodeId?: string(name='NodeId', description='This parameter is required.', example='xxx'),
  tenantContextShrink?: string(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='xxx'),
}

model AddWorkspaceDocMembersResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model AddWorkspaceDocMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddWorkspaceDocMembersResponseBody(name='body'),
}

/**
 * @summary 添加知识库文档成员
 *
 * @param tmpReq AddWorkspaceDocMembersRequest
 * @param tmpHeader AddWorkspaceDocMembersHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddWorkspaceDocMembersResponse
 */
async function addWorkspaceDocMembersWithOptions(tmpReq: AddWorkspaceDocMembersRequest, tmpHeader: AddWorkspaceDocMembersHeaders, runtime: Util.RuntimeOptions): AddWorkspaceDocMembersResponse {
  Util.validateModel(tmpReq);
  var request = new AddWorkspaceDocMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new AddWorkspaceDocMembersShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.members)) {
    request.membersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.members, 'Members', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.membersShrink)) {
    body['Members'] = request.membersShrink;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddWorkspaceDocMembers',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/addWorkspaceDocMembers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 添加知识库文档成员
 *
 * @param request AddWorkspaceDocMembersRequest
 * @return AddWorkspaceDocMembersResponse
 */
async function addWorkspaceDocMembers(request: AddWorkspaceDocMembersRequest): AddWorkspaceDocMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddWorkspaceDocMembersHeaders{};
  return addWorkspaceDocMembersWithOptions(request, headers, runtime);
}

model AddWorkspaceMembersHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model AddWorkspaceMembersShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model AddWorkspaceMembersRequest {
  members?: [ 
    {
      memberId?: string(name='MemberId', example='012345'),
      memberType?: string(name='MemberType', example='USER'),
      roleType?: string(name='RoleType', example='EDITOR'),
    }
  ](name='Members'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='123'),
}

model AddWorkspaceMembersShrinkRequest {
  membersShrink?: string(name='Members'),
  tenantContextShrink?: string(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='123'),
}

model AddWorkspaceMembersResponseBody = {
  notInOrgList?: [ string ](name='NotInOrgList'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model AddWorkspaceMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddWorkspaceMembersResponseBody(name='body'),
}

/**
 * @summary 添加知识库成员
 *
 * @param tmpReq AddWorkspaceMembersRequest
 * @param tmpHeader AddWorkspaceMembersHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddWorkspaceMembersResponse
 */
async function addWorkspaceMembersWithOptions(tmpReq: AddWorkspaceMembersRequest, tmpHeader: AddWorkspaceMembersHeaders, runtime: Util.RuntimeOptions): AddWorkspaceMembersResponse {
  Util.validateModel(tmpReq);
  var request = new AddWorkspaceMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new AddWorkspaceMembersShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.members)) {
    request.membersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.members, 'Members', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.membersShrink)) {
    body['Members'] = request.membersShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddWorkspaceMembers',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/addWorkspaceMembers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 添加知识库成员
 *
 * @param request AddWorkspaceMembersRequest
 * @return AddWorkspaceMembersResponse
 */
async function addWorkspaceMembers(request: AddWorkspaceMembersRequest): AddWorkspaceMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddWorkspaceMembersHeaders{};
  return addWorkspaceMembersWithOptions(request, headers, runtime);
}

model AssignTicketHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model AssignTicketShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model AssignTicketRequest {
  notify?: {
    groupNoticeReceiverUserIds?: [ string ](name='GroupNoticeReceiverUserIds'),
    noticeAllGroupMember?: boolean(name='NoticeAllGroupMember', example='true'),
    workNoticeReceiverUserIds?: [ string ](name='WorkNoticeReceiverUserIds'),
  }(name='Notify'),
  openTeamId?: string(name='OpenTeamId', description='This parameter is required.', example='eKWh3xxxxiE'),
  openTicketId?: string(name='OpenTicketId', description='This parameter is required.', example='Dq9hP8Sk2v6vQxxxxiE'),
  processorUserIds?: [ string ](name='ProcessorUserIds'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  ticketMemo?: {
    attachments?: [ 
      {
        fileName?: string(name='FileName', example='ticket/image/44708069/43003/e27aec4499.txt'),
        key?: string(name='Key', example='wahaha.txt'),
      }
    ](name='Attachments'),
    memo?: string(name='Memo'),
  }(name='TicketMemo'),
}

model AssignTicketShrinkRequest {
  notifyShrink?: string(name='Notify'),
  openTeamId?: string(name='OpenTeamId', description='This parameter is required.', example='eKWh3xxxxiE'),
  openTicketId?: string(name='OpenTicketId', description='This parameter is required.', example='Dq9hP8Sk2v6vQxxxxiE'),
  processorUserIdsShrink?: string(name='ProcessorUserIds'),
  tenantContextShrink?: string(name='TenantContext'),
  ticketMemoShrink?: string(name='TicketMemo'),
}

model AssignTicketResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model AssignTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssignTicketResponseBody(name='body'),
}

/**
 * @summary 指派工单
 *
 * @param tmpReq AssignTicketRequest
 * @param tmpHeader AssignTicketHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return AssignTicketResponse
 */
async function assignTicketWithOptions(tmpReq: AssignTicketRequest, tmpHeader: AssignTicketHeaders, runtime: Util.RuntimeOptions): AssignTicketResponse {
  Util.validateModel(tmpReq);
  var request = new AssignTicketShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new AssignTicketShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.notify)) {
    request.notifyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notify, 'Notify', 'json');
  }
  if (!Util.isUnset(tmpReq.processorUserIds)) {
    request.processorUserIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.processorUserIds, 'ProcessorUserIds', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.ticketMemo)) {
    request.ticketMemoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ticketMemo, 'TicketMemo', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.notifyShrink)) {
    body['Notify'] = request.notifyShrink;
  }
  if (!Util.isUnset(request.openTeamId)) {
    body['OpenTeamId'] = request.openTeamId;
  }
  if (!Util.isUnset(request.openTicketId)) {
    body['OpenTicketId'] = request.openTicketId;
  }
  if (!Util.isUnset(request.processorUserIdsShrink)) {
    body['ProcessorUserIds'] = request.processorUserIdsShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.ticketMemoShrink)) {
    body['TicketMemo'] = request.ticketMemoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AssignTicket',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ticket/assignTicket`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 指派工单
 *
 * @param request AssignTicketRequest
 * @return AssignTicketResponse
 */
async function assignTicket(request: AssignTicketRequest): AssignTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AssignTicketHeaders{};
  return assignTicketWithOptions(request, headers, runtime);
}

model BatchGetFormDataByIdListHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model BatchGetFormDataByIdListShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model BatchGetFormDataByIdListRequest {
  appType?: string(name='AppType', description='This parameter is required.', example='APP_PBKT0xxx'),
  formInstanceIdList?: [ string ](name='FormInstanceIdList', description='This parameter is required.', example='FORM-xxxxx'),
  formUuid?: string(name='FormUuid', description='This parameter is required.', example='FORM-xxxxx'),
  needFormInstanceValue?: boolean(name='NeedFormInstanceValue', example='true'),
  systemToken?: string(name='SystemToken', description='This parameter is required.', example='hexxxx'),
}

model BatchGetFormDataByIdListShrinkRequest {
  appType?: string(name='AppType', description='This parameter is required.', example='APP_PBKT0xxx'),
  formInstanceIdListShrink?: string(name='FormInstanceIdList', description='This parameter is required.', example='FORM-xxxxx'),
  formUuid?: string(name='FormUuid', description='This parameter is required.', example='FORM-xxxxx'),
  needFormInstanceValue?: boolean(name='NeedFormInstanceValue', example='true'),
  systemToken?: string(name='SystemToken', description='This parameter is required.', example='hexxxx'),
}

model BatchGetFormDataByIdListResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ 
    {
      createTimeGMT?: string(name='CreateTimeGMT', example='2021-05-01 10:10:10'),
      creatorUserId?: string(name='CreatorUserId', example='012345'),
      formData?: map[string]any(name='FormData'),
      formInstanceId?: string(name='FormInstanceId', example='FINST-xxxx'),
      formUuid?: string(name='FormUuid', example='FORM-xxxx'),
      id?: long(name='Id', example='21044829126'),
      instanceValue?: string(name='InstanceValue', example='{}'),
      modifiedTimeGMT?: string(name='ModifiedTimeGMT', example='2021-05-01 10:10:10'),
      modifier?: string(name='Modifier'),
      modifyUser?: {
        name?: {
          nameInChinese?: string(name='NameInChinese'),
          nameInEnglish?: string(name='NameInEnglish', example='EnglishName'),
        }(name='Name'),
        userId?: string(name='UserId', example='012345'),
      }(name='ModifyUser'),
      originator?: {
        name?: {
          nameInChinese?: string(name='NameInChinese'),
          nameInEnglish?: string(name='NameInEnglish', example='EnglishName'),
        }(name='Name'),
        userId?: string(name='UserId', example='012345'),
      }(name='Originator'),
      sequence?: string(name='Sequence', example='1'),
      serialNumber?: string(name='SerialNumber', example='SA65776'),
      title?: string(name='Title'),
      version?: long(name='Version', example='2'),
    }
  ](name='result', example='[ "FINST-SASNOO39NSIFF780" ]'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model BatchGetFormDataByIdListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchGetFormDataByIdListResponseBody(name='body'),
}

/**
 * @summary 批量获取表单实例数据
 *
 * @param tmpReq BatchGetFormDataByIdListRequest
 * @param tmpHeader BatchGetFormDataByIdListHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchGetFormDataByIdListResponse
 */
async function batchGetFormDataByIdListWithOptions(tmpReq: BatchGetFormDataByIdListRequest, tmpHeader: BatchGetFormDataByIdListHeaders, runtime: Util.RuntimeOptions): BatchGetFormDataByIdListResponse {
  Util.validateModel(tmpReq);
  var request = new BatchGetFormDataByIdListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new BatchGetFormDataByIdListShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.formInstanceIdList)) {
    request.formInstanceIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.formInstanceIdList, 'FormInstanceIdList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.formInstanceIdListShrink)) {
    body['FormInstanceIdList'] = request.formInstanceIdListShrink;
  }
  if (!Util.isUnset(request.formUuid)) {
    body['FormUuid'] = request.formUuid;
  }
  if (!Util.isUnset(request.needFormInstanceValue)) {
    body['NeedFormInstanceValue'] = request.needFormInstanceValue;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchGetFormDataByIdList',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/batchGetFormDataByIdList`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量获取表单实例数据
 *
 * @param request BatchGetFormDataByIdListRequest
 * @return BatchGetFormDataByIdListResponse
 */
async function batchGetFormDataByIdList(request: BatchGetFormDataByIdListRequest): BatchGetFormDataByIdListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new BatchGetFormDataByIdListHeaders{};
  return batchGetFormDataByIdListWithOptions(request, headers, runtime);
}

model BatchRemovalByFormInstanceIdListHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model BatchRemovalByFormInstanceIdListShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model BatchRemovalByFormInstanceIdListRequest {
  appType?: string(name='AppType', description='This parameter is required.', example='APP_XCE0EVXS6DYG3YDYC5RD'),
  asynchronousExecution?: boolean(name='AsynchronousExecution', example='false'),
  executeExpression?: boolean(name='ExecuteExpression', example='false'),
  formInstanceIdList?: [ string ](name='FormInstanceIdList', description='This parameter is required.', example='[]'),
  formUuid?: string(name='FormUuid', description='This parameter is required.', example='FORM-GX866MC1NC1VOFF6WVQW33FD16E23L3CPMKVKA'),
  systemToken?: string(name='SystemToken', description='This parameter is required.', example='09866181UTZVVD4R3DC955FNKIM52HVPU5WWK7'),
}

model BatchRemovalByFormInstanceIdListShrinkRequest {
  appType?: string(name='AppType', description='This parameter is required.', example='APP_XCE0EVXS6DYG3YDYC5RD'),
  asynchronousExecution?: boolean(name='AsynchronousExecution', example='false'),
  executeExpression?: boolean(name='ExecuteExpression', example='false'),
  formInstanceIdListShrink?: string(name='FormInstanceIdList', description='This parameter is required.', example='[]'),
  formUuid?: string(name='FormUuid', description='This parameter is required.', example='FORM-GX866MC1NC1VOFF6WVQW33FD16E23L3CPMKVKA'),
  systemToken?: string(name='SystemToken', description='This parameter is required.', example='09866181UTZVVD4R3DC955FNKIM52HVPU5WWK7'),
}

model BatchRemovalByFormInstanceIdListResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model BatchRemovalByFormInstanceIdListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchRemovalByFormInstanceIdListResponseBody(name='body'),
}

/**
 * @summary 批量删除表单实例
 *
 * @param tmpReq BatchRemovalByFormInstanceIdListRequest
 * @param tmpHeader BatchRemovalByFormInstanceIdListHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchRemovalByFormInstanceIdListResponse
 */
async function batchRemovalByFormInstanceIdListWithOptions(tmpReq: BatchRemovalByFormInstanceIdListRequest, tmpHeader: BatchRemovalByFormInstanceIdListHeaders, runtime: Util.RuntimeOptions): BatchRemovalByFormInstanceIdListResponse {
  Util.validateModel(tmpReq);
  var request = new BatchRemovalByFormInstanceIdListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new BatchRemovalByFormInstanceIdListShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.formInstanceIdList)) {
    request.formInstanceIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.formInstanceIdList, 'FormInstanceIdList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.asynchronousExecution)) {
    body['AsynchronousExecution'] = request.asynchronousExecution;
  }
  if (!Util.isUnset(request.executeExpression)) {
    body['ExecuteExpression'] = request.executeExpression;
  }
  if (!Util.isUnset(request.formInstanceIdListShrink)) {
    body['FormInstanceIdList'] = request.formInstanceIdListShrink;
  }
  if (!Util.isUnset(request.formUuid)) {
    body['FormUuid'] = request.formUuid;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchRemovalByFormInstanceIdList',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/batchRemovalByFormInstanceIdList`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量删除表单实例
 *
 * @param request BatchRemovalByFormInstanceIdListRequest
 * @return BatchRemovalByFormInstanceIdListResponse
 */
async function batchRemovalByFormInstanceIdList(request: BatchRemovalByFormInstanceIdListRequest): BatchRemovalByFormInstanceIdListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new BatchRemovalByFormInstanceIdListHeaders{};
  return batchRemovalByFormInstanceIdListWithOptions(request, headers, runtime);
}

model BatchSaveFormDataHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model BatchSaveFormDataShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model BatchSaveFormDataRequest {
  appType?: string(name='AppType', example='APP_XCE0EVXS6DYG3YDYC5RD'),
  asynchronousExecution?: boolean(name='AsynchronousExecution', example='false'),
  formDataJsonList?: [ string ](name='FormDataJsonList'),
  formUuid?: string(name='FormUuid', example='FORM-GX866MC1NC1VOFF6WVQW33FD16E23L3CPMKVKA'),
  keepRunningAfterException?: boolean(name='KeepRunningAfterException', example='false'),
  noExecuteExpression?: boolean(name='NoExecuteExpression', example='false'),
  systemToken?: string(name='SystemToken', example='09866181UTZVVD4R3DC955FNKIM52HVPU5WWK7'),
}

model BatchSaveFormDataShrinkRequest {
  appType?: string(name='AppType', example='APP_XCE0EVXS6DYG3YDYC5RD'),
  asynchronousExecution?: boolean(name='AsynchronousExecution', example='false'),
  formDataJsonListShrink?: string(name='FormDataJsonList'),
  formUuid?: string(name='FormUuid', example='FORM-GX866MC1NC1VOFF6WVQW33FD16E23L3CPMKVKA'),
  keepRunningAfterException?: boolean(name='KeepRunningAfterException', example='false'),
  noExecuteExpression?: boolean(name='NoExecuteExpression', example='false'),
  systemToken?: string(name='SystemToken', example='09866181UTZVVD4R3DC955FNKIM52HVPU5WWK7'),
}

model BatchSaveFormDataResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ string ](name='result', example='[ "FINST-SASNOO39NSIFF780" ]'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model BatchSaveFormDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchSaveFormDataResponseBody(name='body'),
}

/**
 * @summary 批量创建表单实例
 *
 * @param tmpReq BatchSaveFormDataRequest
 * @param tmpHeader BatchSaveFormDataHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchSaveFormDataResponse
 */
async function batchSaveFormDataWithOptions(tmpReq: BatchSaveFormDataRequest, tmpHeader: BatchSaveFormDataHeaders, runtime: Util.RuntimeOptions): BatchSaveFormDataResponse {
  Util.validateModel(tmpReq);
  var request = new BatchSaveFormDataShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new BatchSaveFormDataShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.formDataJsonList)) {
    request.formDataJsonListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.formDataJsonList, 'FormDataJsonList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.asynchronousExecution)) {
    body['AsynchronousExecution'] = request.asynchronousExecution;
  }
  if (!Util.isUnset(request.formDataJsonListShrink)) {
    body['FormDataJsonList'] = request.formDataJsonListShrink;
  }
  if (!Util.isUnset(request.formUuid)) {
    body['FormUuid'] = request.formUuid;
  }
  if (!Util.isUnset(request.keepRunningAfterException)) {
    body['KeepRunningAfterException'] = request.keepRunningAfterException;
  }
  if (!Util.isUnset(request.noExecuteExpression)) {
    body['NoExecuteExpression'] = request.noExecuteExpression;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchSaveFormData',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/batchSaveFormData`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量创建表单实例
 *
 * @param request BatchSaveFormDataRequest
 * @return BatchSaveFormDataResponse
 */
async function batchSaveFormData(request: BatchSaveFormDataRequest): BatchSaveFormDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new BatchSaveFormDataHeaders{};
  return batchSaveFormDataWithOptions(request, headers, runtime);
}

model BatchUpdateFormDataByInstanceIdHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model BatchUpdateFormDataByInstanceIdShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model BatchUpdateFormDataByInstanceIdRequest {
  appType?: string(name='AppType', example='String'),
  asynchronousExecution?: boolean(name='AsynchronousExecution', example='true'),
  formInstanceIdList?: [ string ](name='FormInstanceIdList', description='This parameter is required.', example='[ "FINST-J8766S91O2UYN87ZX3XOF1MY8MBA2912BSV0L24" ]'),
  formUuid?: string(name='FormUuid', description='This parameter is required.', example='FORM-GX866MC1NC1VOFF6WVQW33FD16E23L3CPMKVKA'),
  ignoreEmpty?: boolean(name='IgnoreEmpty', example='true'),
  noExecuteExpression?: boolean(name='NoExecuteExpression', example='false'),
  systemToken?: string(name='SystemToken', description='This parameter is required.', example='09866181UTZVVD4R3DC955FNKIM52HVPU5WWK7'),
  updateFormDataJson?: string(name='UpdateFormDataJson', description='This parameter is required.', example='{\\"countrySelectField_l0c1cwiu\\":[{\\"value\\":\\"US\\"}],\\"addressField_l0c1cwiy\\":{\\"address\\":\\"111\\",\\"regionIds\\":[460000,469027,469023401],\\"regionText\\":[{\\"en_US\\":\\"hai+nan+sheng\\",\\"zh_CN\\":\\"海南省\\"},{\\"en_US\\":\\"cheng+mai+xian\\",\\"zh_CN\\":\\"澄迈县\\"},{\\"en_US\\":\\"guo+ying+hong+gang+nong+chang\\",\\"zh_CN\\":\\"国营红岗农场\\"}]}}'),
  useLatestFormSchemaVersion?: boolean(name='UseLatestFormSchemaVersion', example='false'),
}

model BatchUpdateFormDataByInstanceIdShrinkRequest {
  appType?: string(name='AppType', example='String'),
  asynchronousExecution?: boolean(name='AsynchronousExecution', example='true'),
  formInstanceIdListShrink?: string(name='FormInstanceIdList', description='This parameter is required.', example='[ "FINST-J8766S91O2UYN87ZX3XOF1MY8MBA2912BSV0L24" ]'),
  formUuid?: string(name='FormUuid', description='This parameter is required.', example='FORM-GX866MC1NC1VOFF6WVQW33FD16E23L3CPMKVKA'),
  ignoreEmpty?: boolean(name='IgnoreEmpty', example='true'),
  noExecuteExpression?: boolean(name='NoExecuteExpression', example='false'),
  systemToken?: string(name='SystemToken', description='This parameter is required.', example='09866181UTZVVD4R3DC955FNKIM52HVPU5WWK7'),
  updateFormDataJson?: string(name='UpdateFormDataJson', description='This parameter is required.', example='{\\"countrySelectField_l0c1cwiu\\":[{\\"value\\":\\"US\\"}],\\"addressField_l0c1cwiy\\":{\\"address\\":\\"111\\",\\"regionIds\\":[460000,469027,469023401],\\"regionText\\":[{\\"en_US\\":\\"hai+nan+sheng\\",\\"zh_CN\\":\\"海南省\\"},{\\"en_US\\":\\"cheng+mai+xian\\",\\"zh_CN\\":\\"澄迈县\\"},{\\"en_US\\":\\"guo+ying+hong+gang+nong+chang\\",\\"zh_CN\\":\\"国营红岗农场\\"}]}}'),
  useLatestFormSchemaVersion?: boolean(name='UseLatestFormSchemaVersion', example='false'),
}

model BatchUpdateFormDataByInstanceIdResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ string ](name='result', example='[ "FINST-SASNOO39NSIFF780" ]'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model BatchUpdateFormDataByInstanceIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchUpdateFormDataByInstanceIdResponseBody(name='body'),
}

/**
 * @summary 批量更新表单实例内的组件值
 *
 * @param tmpReq BatchUpdateFormDataByInstanceIdRequest
 * @param tmpHeader BatchUpdateFormDataByInstanceIdHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchUpdateFormDataByInstanceIdResponse
 */
async function batchUpdateFormDataByInstanceIdWithOptions(tmpReq: BatchUpdateFormDataByInstanceIdRequest, tmpHeader: BatchUpdateFormDataByInstanceIdHeaders, runtime: Util.RuntimeOptions): BatchUpdateFormDataByInstanceIdResponse {
  Util.validateModel(tmpReq);
  var request = new BatchUpdateFormDataByInstanceIdShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new BatchUpdateFormDataByInstanceIdShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.formInstanceIdList)) {
    request.formInstanceIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.formInstanceIdList, 'FormInstanceIdList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.asynchronousExecution)) {
    body['AsynchronousExecution'] = request.asynchronousExecution;
  }
  if (!Util.isUnset(request.formInstanceIdListShrink)) {
    body['FormInstanceIdList'] = request.formInstanceIdListShrink;
  }
  if (!Util.isUnset(request.formUuid)) {
    body['FormUuid'] = request.formUuid;
  }
  if (!Util.isUnset(request.ignoreEmpty)) {
    body['IgnoreEmpty'] = request.ignoreEmpty;
  }
  if (!Util.isUnset(request.noExecuteExpression)) {
    body['NoExecuteExpression'] = request.noExecuteExpression;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }
  if (!Util.isUnset(request.updateFormDataJson)) {
    body['UpdateFormDataJson'] = request.updateFormDataJson;
  }
  if (!Util.isUnset(request.useLatestFormSchemaVersion)) {
    body['UseLatestFormSchemaVersion'] = request.useLatestFormSchemaVersion;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchUpdateFormDataByInstanceId',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/batchUpdateFormDataByInstanceId`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量更新表单实例内的组件值
 *
 * @param request BatchUpdateFormDataByInstanceIdRequest
 * @return BatchUpdateFormDataByInstanceIdResponse
 */
async function batchUpdateFormDataByInstanceId(request: BatchUpdateFormDataByInstanceIdRequest): BatchUpdateFormDataByInstanceIdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new BatchUpdateFormDataByInstanceIdHeaders{};
  return batchUpdateFormDataByInstanceIdWithOptions(request, headers, runtime);
}

model BatchUpdateFormDataByInstanceMapHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model BatchUpdateFormDataByInstanceMapShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model BatchUpdateFormDataByInstanceMapRequest {
  appType?: string(name='AppType', example='String'),
  asynchronousExecution?: boolean(name='AsynchronousExecution', example='false'),
  formUuid?: string(name='FormUuid', example='FORM-GX866MC1NC1VOFF6WVQW33FD16E23L3CPMKVKA'),
  ignoreEmpty?: boolean(name='IgnoreEmpty', example='false'),
  noExecuteExpression?: boolean(name='NoExecuteExpression', example='false'),
  systemToken?: string(name='SystemToken', example='09866181UTZVVD4R3DC955FNKIM52HVPU5WWK7'),
  updateFormDataJsonMap?: map[string]any(name='UpdateFormDataJsonMap'),
  useLatestFormSchemaVersion?: boolean(name='UseLatestFormSchemaVersion', example='false'),
}

model BatchUpdateFormDataByInstanceMapShrinkRequest {
  appType?: string(name='AppType', example='String'),
  asynchronousExecution?: boolean(name='AsynchronousExecution', example='false'),
  formUuid?: string(name='FormUuid', example='FORM-GX866MC1NC1VOFF6WVQW33FD16E23L3CPMKVKA'),
  ignoreEmpty?: boolean(name='IgnoreEmpty', example='false'),
  noExecuteExpression?: boolean(name='NoExecuteExpression', example='false'),
  systemToken?: string(name='SystemToken', example='09866181UTZVVD4R3DC955FNKIM52HVPU5WWK7'),
  updateFormDataJsonMapShrink?: string(name='UpdateFormDataJsonMap'),
  useLatestFormSchemaVersion?: boolean(name='UseLatestFormSchemaVersion', example='false'),
}

model BatchUpdateFormDataByInstanceMapResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ string ](name='result', example='[ "FINST-SASNOO39NSIFF780" ]'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model BatchUpdateFormDataByInstanceMapResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchUpdateFormDataByInstanceMapResponseBody(name='body'),
}

/**
 * @summary 通过表单实例数据批量更新表单实例
 *
 * @param tmpReq BatchUpdateFormDataByInstanceMapRequest
 * @param tmpHeader BatchUpdateFormDataByInstanceMapHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchUpdateFormDataByInstanceMapResponse
 */
async function batchUpdateFormDataByInstanceMapWithOptions(tmpReq: BatchUpdateFormDataByInstanceMapRequest, tmpHeader: BatchUpdateFormDataByInstanceMapHeaders, runtime: Util.RuntimeOptions): BatchUpdateFormDataByInstanceMapResponse {
  Util.validateModel(tmpReq);
  var request = new BatchUpdateFormDataByInstanceMapShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new BatchUpdateFormDataByInstanceMapShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.updateFormDataJsonMap)) {
    request.updateFormDataJsonMapShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.updateFormDataJsonMap, 'UpdateFormDataJsonMap', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.asynchronousExecution)) {
    body['AsynchronousExecution'] = request.asynchronousExecution;
  }
  if (!Util.isUnset(request.formUuid)) {
    body['FormUuid'] = request.formUuid;
  }
  if (!Util.isUnset(request.ignoreEmpty)) {
    body['IgnoreEmpty'] = request.ignoreEmpty;
  }
  if (!Util.isUnset(request.noExecuteExpression)) {
    body['NoExecuteExpression'] = request.noExecuteExpression;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }
  if (!Util.isUnset(request.updateFormDataJsonMapShrink)) {
    body['UpdateFormDataJsonMap'] = request.updateFormDataJsonMapShrink;
  }
  if (!Util.isUnset(request.useLatestFormSchemaVersion)) {
    body['UseLatestFormSchemaVersion'] = request.useLatestFormSchemaVersion;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchUpdateFormDataByInstanceMap',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/batchUpdateFormDataByInstanceMap`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 通过表单实例数据批量更新表单实例
 *
 * @param request BatchUpdateFormDataByInstanceMapRequest
 * @return BatchUpdateFormDataByInstanceMapResponse
 */
async function batchUpdateFormDataByInstanceMap(request: BatchUpdateFormDataByInstanceMapRequest): BatchUpdateFormDataByInstanceMapResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new BatchUpdateFormDataByInstanceMapHeaders{};
  return batchUpdateFormDataByInstanceMapWithOptions(request, headers, runtime);
}

model CancelScheduleConferenceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model CancelScheduleConferenceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CancelScheduleConferenceRequest {
  scheduleConferenceId?: string(name='ScheduleConferenceId', description='This parameter is required.', example='2a489xxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model CancelScheduleConferenceShrinkRequest {
  scheduleConferenceId?: string(name='ScheduleConferenceId', description='This parameter is required.', example='2a489xxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'),
  tenantContextShrink?: string(name='TenantContext'),
}

model CancelScheduleConferenceResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model CancelScheduleConferenceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelScheduleConferenceResponseBody(name='body'),
}

/**
 * @summary 取消预约会议
 *
 * @param tmpReq CancelScheduleConferenceRequest
 * @param tmpHeader CancelScheduleConferenceHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CancelScheduleConferenceResponse
 */
async function cancelScheduleConferenceWithOptions(tmpReq: CancelScheduleConferenceRequest, tmpHeader: CancelScheduleConferenceHeaders, runtime: Util.RuntimeOptions): CancelScheduleConferenceResponse {
  Util.validateModel(tmpReq);
  var request = new CancelScheduleConferenceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CancelScheduleConferenceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.scheduleConferenceId)) {
    body['ScheduleConferenceId'] = request.scheduleConferenceId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CancelScheduleConference',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/cancelScheduleConference`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 取消预约会议
 *
 * @param request CancelScheduleConferenceRequest
 * @return CancelScheduleConferenceResponse
 */
async function cancelScheduleConference(request: CancelScheduleConferenceRequest): CancelScheduleConferenceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CancelScheduleConferenceHeaders{};
  return cancelScheduleConferenceWithOptions(request, headers, runtime);
}

model CheckAlibabaStaffHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model CheckAlibabaStaffShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CheckAlibabaStaffRequest {
  mobile?: string(name='Mobile', example='156****9665'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model CheckAlibabaStaffShrinkRequest {
  mobile?: string(name='Mobile', example='156****9665'),
  tenantContextShrink?: string(name='TenantContext'),
}

model CheckAlibabaStaffResponseBody = {
  isAlibabaStaff?: boolean(name='isAlibabaStaff', example='true'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model CheckAlibabaStaffResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckAlibabaStaffResponseBody(name='body'),
}

/**
 * @summary 校验阿里员工
 *
 * @param tmpReq CheckAlibabaStaffRequest
 * @param tmpHeader CheckAlibabaStaffHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckAlibabaStaffResponse
 */
async function checkAlibabaStaffWithOptions(tmpReq: CheckAlibabaStaffRequest, tmpHeader: CheckAlibabaStaffHeaders, runtime: Util.RuntimeOptions): CheckAlibabaStaffResponse {
  Util.validateModel(tmpReq);
  var request = new CheckAlibabaStaffShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CheckAlibabaStaffShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.mobile)) {
    body['Mobile'] = request.mobile;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CheckAlibabaStaff',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/im/checkAlibabaStaff`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 校验阿里员工
 *
 * @param request CheckAlibabaStaffRequest
 * @return CheckAlibabaStaffResponse
 */
async function checkAlibabaStaff(request: CheckAlibabaStaffRequest): CheckAlibabaStaffResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CheckAlibabaStaffHeaders{};
  return checkAlibabaStaffWithOptions(request, headers, runtime);
}

model CheckUserIsGroupMemberHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model CheckUserIsGroupMemberShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CheckUserIsGroupMemberRequest {
  openConversationId?: string(name='OpenConversationId', example='cidB8Pz*******FIWPv2PMA=='),
}

model CheckUserIsGroupMemberResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model CheckUserIsGroupMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckUserIsGroupMemberResponseBody(name='body'),
}

/**
 * @summary 查询用户是否为企业内部群成员
 *
 * @param request CheckUserIsGroupMemberRequest
 * @param tmpHeader CheckUserIsGroupMemberHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckUserIsGroupMemberResponse
 */
async function checkUserIsGroupMemberWithOptions(request: CheckUserIsGroupMemberRequest, tmpHeader: CheckUserIsGroupMemberHeaders, runtime: Util.RuntimeOptions): CheckUserIsGroupMemberResponse {
  Util.validateModel(request);
  var headers = new CheckUserIsGroupMemberShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.openConversationId)) {
    body['OpenConversationId'] = request.openConversationId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CheckUserIsGroupMember',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/im/checkUserIsGroupMember`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询用户是否为企业内部群成员
 *
 * @param request CheckUserIsGroupMemberRequest
 * @return CheckUserIsGroupMemberResponse
 */
async function checkUserIsGroupMember(request: CheckUserIsGroupMemberRequest): CheckUserIsGroupMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CheckUserIsGroupMemberHeaders{};
  return checkUserIsGroupMemberWithOptions(request, headers, runtime);
}

model ClearHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model ClearShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ClearRequest {
  rangeAddress?: string(name='RangeAddress', description='This parameter is required.', example='A3:C3'),
  sheetId?: string(name='SheetId', description='This parameter is required.', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model ClearShrinkRequest {
  rangeAddress?: string(name='RangeAddress', description='This parameter is required.', example='A3:C3'),
  sheetId?: string(name='SheetId', description='This parameter is required.', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model ClearResponseBody = {
  a1Notation?: string(name='a1Notation', example='A1:B2'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model ClearResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ClearResponseBody(name='body'),
}

/**
 * @summary 清除单元格所有内容
 *
 * @param tmpReq ClearRequest
 * @param tmpHeader ClearHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ClearResponse
 */
async function clearWithOptions(tmpReq: ClearRequest, tmpHeader: ClearHeaders, runtime: Util.RuntimeOptions): ClearResponse {
  Util.validateModel(tmpReq);
  var request = new ClearShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new ClearShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.rangeAddress)) {
    body['RangeAddress'] = request.rangeAddress;
  }
  if (!Util.isUnset(request.sheetId)) {
    body['SheetId'] = request.sheetId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'Clear',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/clear`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 清除单元格所有内容
 *
 * @param request ClearRequest
 * @return ClearResponse
 */
async function clear(request: ClearRequest): ClearResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ClearHeaders{};
  return clearWithOptions(request, headers, runtime);
}

model ClearDataHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model ClearDataShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ClearDataRequest {
  rangeAddress?: string(name='RangeAddress', description='This parameter is required.', example='A3:C3'),
  sheetId?: string(name='SheetId', description='This parameter is required.', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model ClearDataShrinkRequest {
  rangeAddress?: string(name='RangeAddress', description='This parameter is required.', example='A3:C3'),
  sheetId?: string(name='SheetId', description='This parameter is required.', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model ClearDataResponseBody = {
  a1Notation?: string(name='a1Notation', example='A1:B2'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model ClearDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ClearDataResponseBody(name='body'),
}

/**
 * @summary 清除单元格数据
 *
 * @param tmpReq ClearDataRequest
 * @param tmpHeader ClearDataHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ClearDataResponse
 */
async function clearDataWithOptions(tmpReq: ClearDataRequest, tmpHeader: ClearDataHeaders, runtime: Util.RuntimeOptions): ClearDataResponse {
  Util.validateModel(tmpReq);
  var request = new ClearDataShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new ClearDataShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.rangeAddress)) {
    body['RangeAddress'] = request.rangeAddress;
  }
  if (!Util.isUnset(request.sheetId)) {
    body['SheetId'] = request.sheetId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ClearData',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/clearData`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 清除单元格数据
 *
 * @param request ClearDataRequest
 * @return ClearDataResponse
 */
async function clearData(request: ClearDataRequest): ClearDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ClearDataHeaders{};
  return clearDataWithOptions(request, headers, runtime);
}

model CloseVideoConferenceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model CloseVideoConferenceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CloseVideoConferenceRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='607452e01401526ee39609e1'),
}

model CloseVideoConferenceShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='607452e01401526ee39609e1'),
}

model CloseVideoConferenceResponseBody = {
  cause?: string(name='cause', example='success'),
  code?: long(name='code', example='200'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model CloseVideoConferenceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloseVideoConferenceResponseBody(name='body'),
}

/**
 * @summary 关闭视频会议
 *
 * @param tmpReq CloseVideoConferenceRequest
 * @param tmpHeader CloseVideoConferenceHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CloseVideoConferenceResponse
 */
async function closeVideoConferenceWithOptions(tmpReq: CloseVideoConferenceRequest, tmpHeader: CloseVideoConferenceHeaders, runtime: Util.RuntimeOptions): CloseVideoConferenceResponse {
  Util.validateModel(tmpReq);
  var request = new CloseVideoConferenceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CloseVideoConferenceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.conferenceId)) {
    body['conferenceId'] = request.conferenceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CloseVideoConference',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/closeVideoConference`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 关闭视频会议
 *
 * @param request CloseVideoConferenceRequest
 * @return CloseVideoConferenceResponse
 */
async function closeVideoConference(request: CloseVideoConferenceRequest): CloseVideoConferenceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CloseVideoConferenceHeaders{};
  return closeVideoConferenceWithOptions(request, headers, runtime);
}

model CommentListReportHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model CommentListReportShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CommentListReportRequest {
  offset?: long(name='Offset', description='This parameter is required.', example='10'),
  reportId?: string(name='ReportId', description='This parameter is required.', example='173xxxx'),
  size?: long(name='Size', description='This parameter is required.', example='10'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model CommentListReportShrinkRequest {
  offset?: long(name='Offset', description='This parameter is required.', example='10'),
  reportId?: string(name='ReportId', description='This parameter is required.', example='173xxxx'),
  size?: long(name='Size', description='This parameter is required.', example='10'),
  tenantContextShrink?: string(name='TenantContext'),
}

model CommentListReportResponseBody = {
  comments?: [ 
    {
      content?: string(name='Content'),
      createTime?: string(name='CreateTime', example='1678442466000'),
      userid?: string(name='Userid', example='012345'),
    }
  ](name='comments'),
  hasMore?: boolean(name='hasMore', example='true'),
  nextCursor?: long(name='nextCursor', example='1568442466000'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model CommentListReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CommentListReportResponseBody(name='body'),
}

/**
 * @summary 获取日志评论列表
 *
 * @param tmpReq CommentListReportRequest
 * @param tmpHeader CommentListReportHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CommentListReportResponse
 */
async function commentListReportWithOptions(tmpReq: CommentListReportRequest, tmpHeader: CommentListReportHeaders, runtime: Util.RuntimeOptions): CommentListReportResponse {
  Util.validateModel(tmpReq);
  var request = new CommentListReportShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CommentListReportShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.offset)) {
    body['Offset'] = request.offset;
  }
  if (!Util.isUnset(request.reportId)) {
    body['ReportId'] = request.reportId;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CommentListReport',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/log/commentListReport`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取日志评论列表
 *
 * @param request CommentListReportRequest
 * @return CommentListReportResponse
 */
async function commentListReport(request: CommentListReportRequest): CommentListReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CommentListReportHeaders{};
  return commentListReportWithOptions(request, headers, runtime);
}

model CommitFileHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model CommitFileShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CommitFileRequest {
  name?: string(name='Name', example='None'),
  option?: {
    appProperties?: [ 
      {
        name?: string(name='Name', example='property_name'),
        value?: string(name='Value', example='property_value'),
        visibility?: string(name='Visibility', example='PUBLIC'),
      }
    ](name='AppProperties'),
    conflictStrategy?: string(name='ConflictStrategy', example='AUTO_RENAME'),
    convertToOnlineDoc?: boolean(name='ConvertToOnlineDoc', example='false'),
    convertToOnlineDocTargetDocumentType?: string(name='ConvertToOnlineDocTargetDocumentType', example='DOC'),
    size?: long(name='Size', example='512'),
  }(name='Option'),
  parentDentryUuid?: string(name='ParentDentryUuid', example='dentryUuid'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  uploadKey?: string(name='UploadKey', example='upload_key'),
}

model CommitFileShrinkRequest {
  name?: string(name='Name', example='None'),
  optionShrink?: string(name='Option'),
  parentDentryUuid?: string(name='ParentDentryUuid', example='dentryUuid'),
  tenantContextShrink?: string(name='TenantContext'),
  uploadKey?: string(name='UploadKey', example='upload_key'),
}

model CommitFileResponseBody = {
  dentry?: {
    appProperties?: map[string][ DentryAppPropertiesValue     ](name='AppProperties'),
    category?: string(name='Category', example='DOCUMENT'),
    createTime?: string(name='CreateTime', example='2022-01-01T10:00:00Z'),
    creatorId?: string(name='CreatorId', example='creator_id'),
    extension?: string(name='Extension', example='txt'),
    id?: string(name='Id', example='dentry_id'),
    modifiedTime?: string(name='ModifiedTime', example='2022-01-01T10:00:00Z'),
    modifierId?: string(name='ModifierId', example='modifier_id'),
    name?: string(name='Name', example='dentry_name'),
    parentId?: string(name='ParentId', example='parent_id'),
    partitionType?: string(name='PartitionType', example='PUBLIC_OSS_PARTITION'),
    path?: string(name='Path', example='dentry_path'),
    properties?: {
      readOnly?: boolean(name='ReadOnly', example='true'),
    }(name='Properties'),
    size?: long(name='Size', example='512'),
    spaceId?: string(name='SpaceId', example='space_id'),
    status?: string(name='Status', example='NORMAL'),
    storageDriver?: string(name='StorageDriver', example='DINGTALK'),
    thumbnail?: {
      height?: int32(name='Height', example='64'),
      url?: string(name='Url', example='url'),
      width?: int32(name='Width', example='64'),
    }(name='Thumbnail'),
    type?: string(name='Type', example='FILE'),
    uuid?: string(name='Uuid', example='uuid'),
    version?: long(name='Version', example='1'),
  }(name='dentry'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model CommitFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CommitFileResponseBody(name='body'),
}

/**
 * @summary 提交文件
 *
 * @param tmpReq CommitFileRequest
 * @param tmpHeader CommitFileHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CommitFileResponse
 */
async function commitFileWithOptions(tmpReq: CommitFileRequest, tmpHeader: CommitFileHeaders, runtime: Util.RuntimeOptions): CommitFileResponse {
  Util.validateModel(tmpReq);
  var request = new CommitFileShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CommitFileShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.option)) {
    request.optionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.option, 'Option', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.optionShrink)) {
    body['Option'] = request.optionShrink;
  }
  if (!Util.isUnset(request.parentDentryUuid)) {
    body['ParentDentryUuid'] = request.parentDentryUuid;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.uploadKey)) {
    body['UploadKey'] = request.uploadKey;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CommitFile',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/commitFile`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交文件
 *
 * @param request CommitFileRequest
 * @return CommitFileResponse
 */
async function commitFile(request: CommitFileRequest): CommitFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CommitFileHeaders{};
  return commitFileWithOptions(request, headers, runtime);
}

model CopyDentryHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model CopyDentryShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CopyDentryRequest {
  dentryId?: string(name='DentryId', description='This parameter is required.', example='b9XJljElJv6RPGyA'),
  name?: string(name='Name', description='This parameter is required.'),
  spaceId?: string(name='SpaceId', description='This parameter is required.', example='24458420428'),
  targetSpaceId?: string(name='TargetSpaceId', description='This parameter is required.', example='b9XJljElJv6RPG'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  toNextDentryId?: string(name='ToNextDentryId', example='b9XJljElJv6RPGyA2'),
  toParentDentryId?: string(name='ToParentDentryId', example='b9XJljElJv6RPGyA4'),
  toPrevDentryId?: string(name='ToPrevDentryId', example='b9XJljElJv6RPGyA3'),
}

model CopyDentryShrinkRequest {
  dentryId?: string(name='DentryId', description='This parameter is required.', example='b9XJljElJv6RPGyA'),
  name?: string(name='Name', description='This parameter is required.'),
  spaceId?: string(name='SpaceId', description='This parameter is required.', example='24458420428'),
  targetSpaceId?: string(name='TargetSpaceId', description='This parameter is required.', example='b9XJljElJv6RPG'),
  tenantContextShrink?: string(name='TenantContext'),
  toNextDentryId?: string(name='ToNextDentryId', example='b9XJljElJv6RPGyA2'),
  toParentDentryId?: string(name='ToParentDentryId', example='b9XJljElJv6RPGyA4'),
  toPrevDentryId?: string(name='ToPrevDentryId', example='b9XJljElJv6RPGyA3'),
}

model CopyDentryResponseBody = {
  contentType?: string(name='contentType', example='alidoc'),
  createdTime?: long(name='createdTime', example='12345678'),
  creator?: map[string]any(name='creator'),
  dentryId?: string(name='dentryId', example='abc'),
  dentryType?: string(name='dentryType', example='file'),
  dentryUuid?: string(name='dentryUuid', example='cdefg'),
  docKey?: string(name='docKey', example='aabbcc'),
  extension?: string(name='extension', example='alidoc'),
  hasChildren?: boolean(name='hasChildren', example='false'),
  linkSourceInfo?: {
    extension?: string(name='Extension', example='docx'),
    iconUrl?: {
      line?: string(name='Line', example='gh'),
      small?: string(name='Small', example='def'),
    }(name='IconUrl'),
    id?: string(name='Id', example='def'),
    linkType?: long(name='LinkType', example='0'),
    spaceId?: string(name='SpaceId', example='def'),
  }(name='linkSourceInfo'),
  name?: string(name='name', example='hello'),
  path?: string(name='path', example='测试组织/测试知识库/abc'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  space?: {
    cover?: string(name='Cover', example='https://img.alicdn.com/imgextra/i1/O1xxxxx.png'),
    description?: string(name='Description', example='这是简介'),
    hdIconVO?: {
      icon?: string(name='Icon', example='http://'),
      type?: string(name='Type', example='type'),
    }(name='HdIconVO'),
    iconVO?: {
      icon?: string(name='Icon', example='http://'),
      type?: string(name='Type', example='type'),
    }(name='IconVO'),
    id?: string(name='Id', example='n9XJxxxxx'),
    name?: string(name='Name'),
    owner?: {
      name?: string(name='Name', example='小钉'),
      userId?: string(name='UserId', example='012345'),
    }(name='Owner', example='测试知识库'),
    recentList?: [ 
      {
        contentType?: string(name='ContentType', example='alidoc'),
        createdTime?: long(name='CreatedTime', example='12345678'),
        creator?: {
          name?: string(name='Name', example='hello'),
          userId?: string(name='UserId', example='012345'),
        }(name='Creator'),
        dentryId?: string(name='DentryId', example='abc'),
        dentryType?: string(name='DentryType', example='file'),
        dentryUuid?: string(name='DentryUuid', example='cdefg'),
        docKey?: string(name='DocKey', example='aabbcc'),
        extension?: string(name='Extension', example='alidoc'),
        hasChildren?: boolean(name='HasChildren', example='false'),
        linkSourceInfo?: {
          extension?: string(name='Extension', example='docx'),
          iconUrl?: {
            line?: string(name='Line', example='gh'),
            small?: string(name='Small', example='def'),
          }(name='IconUrl'),
          id?: string(name='Id', example='def'),
          linkType?: long(name='LinkType', example='0'),
          spaceId?: string(name='SpaceId', example='def'),
        }(name='LinkSourceInfo'),
        name?: string(name='Name', example='hello'),
        path?: string(name='Path', example='测试组织/测试知识库/abc'),
        space?: any(name='Space'),
        spaceId?: string(name='SpaceId', example='bcd'),
        statisticalInfo?: {
          wordCount?: long(name='WordCount'),
        }(name='StatisticalInfo'),
        updatedTime?: long(name='UpdatedTime', example='12345678'),
        updater?: {
          name?: string(name='Name', example='hello'),
          userId?: string(name='UserId', example='012345'),
        }(name='Updater'),
        url?: string(name='Url', example='https://xxx.yy'),
        visitorInfo?: {
          dentryActions?: [ string ](name='DentryActions'),
          roleCode?: string(name='RoleCode', example='1'),
          spaceActions?: [ string ](name='SpaceActions'),
        }(name='VisitorInfo'),
      }
    ](name='RecentList'),
    type?: int32(name='Type', example='1'),
    url?: string(name='Url', example='https://alidocs.dingtalk.com/i/spaces/n9XJ*******Xy/overview'),
    visitorInfo?: {
      dentryActions?: [ string ](name='DentryActions', example='GET_DENTRY'),
      roleCode?: string(name='RoleCode', example='3'),
      spaceActions?: [ string ](name='SpaceActions', example='GET_SPACE'),
    }(name='VisitorInfo'),
  }(name='space'),
  spaceId?: string(name='spaceId', example='bcd'),
  updatedTime?: long(name='updatedTime', example='12345678'),
  updater?: map[string]any(name='updater', example='{\\\\"UserId\\\\": \\\\"353851\\\\", \\\\"Name\\\\": u\\\\"\\\\u848b\\\\u7fbd\\\\u4e2d\\\\"}'),
  url?: string(name='url', example='https://xxx.yy'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
  visitorInfo?: map[string]any(name='visitorInfo'),
}

model CopyDentryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CopyDentryResponseBody(name='body'),
}

/**
 * @summary 创建知识库节点副本
 *
 * @param tmpReq CopyDentryRequest
 * @param tmpHeader CopyDentryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CopyDentryResponse
 */
async function copyDentryWithOptions(tmpReq: CopyDentryRequest, tmpHeader: CopyDentryHeaders, runtime: Util.RuntimeOptions): CopyDentryResponse {
  Util.validateModel(tmpReq);
  var request = new CopyDentryShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CopyDentryShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.dentryId)) {
    body['DentryId'] = request.dentryId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.spaceId)) {
    body['SpaceId'] = request.spaceId;
  }
  if (!Util.isUnset(request.targetSpaceId)) {
    body['TargetSpaceId'] = request.targetSpaceId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.toNextDentryId)) {
    body['ToNextDentryId'] = request.toNextDentryId;
  }
  if (!Util.isUnset(request.toParentDentryId)) {
    body['ToParentDentryId'] = request.toParentDentryId;
  }
  if (!Util.isUnset(request.toPrevDentryId)) {
    body['ToPrevDentryId'] = request.toPrevDentryId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CopyDentry',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/copyDentry`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建知识库节点副本
 *
 * @param request CopyDentryRequest
 * @return CopyDentryResponse
 */
async function copyDentry(request: CopyDentryRequest): CopyDentryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CopyDentryHeaders{};
  return copyDentryWithOptions(request, headers, runtime);
}

model CreateDeliveryPlanHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    userToken?: string(name='userToken', example='ba3a9b612345678d8fedf544ef69d19e'),
  }(name='AccountContext'),
}

model CreateDeliveryPlanShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateDeliveryPlanRequest {
  content?: map[string]any(name='Content'),
  endTime?: long(name='EndTime', example='1699265024987'),
  resId?: string(name='ResId', example='1028'),
  startTime?: long(name='StartTime', example='1699265024987'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  userIdList?: [ string ](name='UserIdList'),
}

model CreateDeliveryPlanShrinkRequest {
  contentShrink?: string(name='Content'),
  endTime?: long(name='EndTime', example='1699265024987'),
  resId?: string(name='ResId', example='1028'),
  startTime?: long(name='StartTime', example='1699265024987'),
  tenantContextShrink?: string(name='TenantContext'),
  userIdListShrink?: string(name='UserIdList'),
}

model CreateDeliveryPlanResponseBody = {
  arguments?: [ any ](name='arguments', example='[]'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model CreateDeliveryPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDeliveryPlanResponseBody(name='body'),
}

/**
 * @summary 发布钉钉投放活动
 *
 * @param tmpReq CreateDeliveryPlanRequest
 * @param tmpHeader CreateDeliveryPlanHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDeliveryPlanResponse
 */
async function createDeliveryPlanWithOptions(tmpReq: CreateDeliveryPlanRequest, tmpHeader: CreateDeliveryPlanHeaders, runtime: Util.RuntimeOptions): CreateDeliveryPlanResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDeliveryPlanShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateDeliveryPlanShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.content)) {
    request.contentShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.content, 'Content', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.userIdList)) {
    request.userIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userIdList, 'UserIdList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.contentShrink)) {
    body['Content'] = request.contentShrink;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.resId)) {
    body['ResId'] = request.resId;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.userIdListShrink)) {
    body['UserIdList'] = request.userIdListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDeliveryPlan',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/watt/createDeliveryPlan`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 发布钉钉投放活动
 *
 * @param request CreateDeliveryPlanRequest
 * @return CreateDeliveryPlanResponse
 */
async function createDeliveryPlan(request: CreateDeliveryPlanRequest): CreateDeliveryPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateDeliveryPlanHeaders{};
  return createDeliveryPlanWithOptions(request, headers, runtime);
}

model CreateDingtalkPersonalTodoTaskHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model CreateDingtalkPersonalTodoTaskShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateDingtalkPersonalTodoTaskRequest {
  description?: string(name='Description', example='待办备注信息'),
  dueTime?: long(name='DueTime', example='1703750708595'),
  executorIds?: [ string ](name='ExecutorIds', description='This parameter is required.', example='[ "012345" ]'),
  notifyConfigs?: {
    dingNotify?: string(name='DingNotify', example='1'),
  }(name='NotifyConfigs'),
  participantIds?: [ string ](name='ParticipantIds', example='[ "012345" ]'),
  subject?: string(name='Subject', description='This parameter is required.', example='待办标题'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  userToken?: string(name='UserToken', example='用户token'),
}

model CreateDingtalkPersonalTodoTaskShrinkRequest {
  description?: string(name='Description', example='待办备注信息'),
  dueTime?: long(name='DueTime', example='1703750708595'),
  executorIdsShrink?: string(name='ExecutorIds', description='This parameter is required.', example='[ "012345" ]'),
  notifyConfigsShrink?: string(name='NotifyConfigs'),
  participantIdsShrink?: string(name='ParticipantIds', example='[ "012345" ]'),
  subject?: string(name='Subject', description='This parameter is required.', example='待办标题'),
  tenantContextShrink?: string(name='TenantContext'),
  userToken?: string(name='UserToken', example='用户token'),
}

model CreateDingtalkPersonalTodoTaskResponseBody = {
  createdTime?: long(name='createdTime', example='1703750708595'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  taskId?: string(name='taskId', example='task123abc'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model CreateDingtalkPersonalTodoTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDingtalkPersonalTodoTaskResponseBody(name='body'),
}

/**
 * @summary 委托权限创建钉钉个人待办
 *
 * @param tmpReq CreateDingtalkPersonalTodoTaskRequest
 * @param tmpHeader CreateDingtalkPersonalTodoTaskHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDingtalkPersonalTodoTaskResponse
 */
async function createDingtalkPersonalTodoTaskWithOptions(tmpReq: CreateDingtalkPersonalTodoTaskRequest, tmpHeader: CreateDingtalkPersonalTodoTaskHeaders, runtime: Util.RuntimeOptions): CreateDingtalkPersonalTodoTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDingtalkPersonalTodoTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateDingtalkPersonalTodoTaskShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.executorIds)) {
    request.executorIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.executorIds, 'ExecutorIds', 'json');
  }
  if (!Util.isUnset(tmpReq.notifyConfigs)) {
    request.notifyConfigsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notifyConfigs, 'NotifyConfigs', 'json');
  }
  if (!Util.isUnset(tmpReq.participantIds)) {
    request.participantIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.participantIds, 'ParticipantIds', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.dueTime)) {
    body['DueTime'] = request.dueTime;
  }
  if (!Util.isUnset(request.executorIdsShrink)) {
    body['ExecutorIds'] = request.executorIdsShrink;
  }
  if (!Util.isUnset(request.notifyConfigsShrink)) {
    body['NotifyConfigs'] = request.notifyConfigsShrink;
  }
  if (!Util.isUnset(request.participantIdsShrink)) {
    body['ParticipantIds'] = request.participantIdsShrink;
  }
  if (!Util.isUnset(request.subject)) {
    body['Subject'] = request.subject;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.userToken)) {
    body['UserToken'] = request.userToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDingtalkPersonalTodoTask',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/task/createDingtalkPersonalTodoTask`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 委托权限创建钉钉个人待办
 *
 * @param request CreateDingtalkPersonalTodoTaskRequest
 * @return CreateDingtalkPersonalTodoTaskResponse
 */
async function createDingtalkPersonalTodoTask(request: CreateDingtalkPersonalTodoTaskRequest): CreateDingtalkPersonalTodoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateDingtalkPersonalTodoTaskHeaders{};
  return createDingtalkPersonalTodoTaskWithOptions(request, headers, runtime);
}

model CreateEventHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='208579'),
  }(name='AccountContext'),
}

model CreateEventShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateEventRequest {
  attendees?: [ 
    {
      id?: string(name='id', example='7845'),
      isOptional?: boolean(name='isOptional', example='true'),
    }
  ](name='Attendees'),
  cardInstances?: [ 
    {
      outTrackId?: string(name='OutTrackId'),
      scenario?: string(name='Scenario'),
    }
  ](name='CardInstances'),
  description?: string(name='Description'),
  end?: {
    date?: string(name='date', example='"2020-09-21"'),
    dateTime?: string(name='dateTime', example='"2021-09-20T10:15:30+08:00"'),
    timeZone?: string(name='timeZone', example='"Asia/Shanghai"'),
  }(name='End'),
  extra?: map[string]string(name='Extra'),
  isAllDay?: boolean(name='IsAllDay', example='true'),
  location?: {
    displayName?: string(name='displayName'),
  }(name='Location'),
  onlineMeetingInfo?: {
    type?: string(name='type', example='dingtalk'),
  }(name='OnlineMeetingInfo'),
  recurrence?: {
    pattern?: {
      dayOfMonth?: int32(name='dayOfMonth', example='1'),
      daysOfWeek?: string(name='daysOfWeek', example='"monday"'),
      index?: string(name='index', example='"last"'),
      interval?: int32(name='interval', example='1'),
      type?: string(name='type', example='"daily"'),
    }(name='pattern'),
    range?: {
      endDate?: string(name='endDate', example='"2021-12-31T10:15:30+08:00"'),
      numberOfOccurrences?: int32(name='numberOfOccurrences', example='5'),
      type?: string(name='type', example='"endDate"'),
    }(name='range'),
  }(name='Recurrence'),
  reminders?: [ 
    {
      method?: string(name='method', example='dingtalk'),
      minutes?: int32(name='minutes', example='15'),
    }
  ](name='Reminders', nullable=false),
  richTextDescription?: {
    text?: string(name='text'),
  }(name='RichTextDescription'),
  summary?: string(name='Summary', description='This parameter is required.'),
  uiConfigs?: [ 
    {
      uiName?: string(name='uiName', example='"updateEventButton"'),
      uiStatus?: string(name='uiStatus', example='"hide"'),
    }
  ](name='UiConfigs'),
  calendarId?: string(name='calendarId', description='This parameter is required.', example='primary'),
  start?: {
    date?: string(name='date', example='"2021-09-20"'),
    dateTime?: string(name='dateTime', example='"2021-09-20T10:15:30+08:00"'),
    timeZone?: string(name='timeZone', example='"Asia/Shanghai"'),
  }(name='start', description='This parameter is required.'),
}

model CreateEventShrinkRequest {
  attendeesShrink?: string(name='Attendees'),
  cardInstancesShrink?: string(name='CardInstances'),
  description?: string(name='Description'),
  endShrink?: string(name='End'),
  extraShrink?: string(name='Extra'),
  isAllDay?: boolean(name='IsAllDay', example='true'),
  locationShrink?: string(name='Location'),
  onlineMeetingInfoShrink?: string(name='OnlineMeetingInfo'),
  recurrenceShrink?: string(name='Recurrence'),
  remindersShrink?: string(name='Reminders', nullable=false),
  richTextDescriptionShrink?: string(name='RichTextDescription'),
  summary?: string(name='Summary', description='This parameter is required.'),
  uiConfigsShrink?: string(name='UiConfigs'),
  calendarId?: string(name='calendarId', description='This parameter is required.', example='primary'),
  startShrink?: string(name='start', description='This parameter is required.'),
}

model CreateEventResponseBody = {
  attendees?: [ 
    {
      displayName?: string(name='DisplayName'),
      isOptional?: boolean(name='IsOptional', example='true'),
      responseStatus?: string(name='ResponseStatus', example='needsAction'),
      self?: boolean(name='Self', example='true'),
    }
  ](name='attendees'),
  createTime?: string(name='createTime', example='2020-01-01T10:15:30+08:00'),
  description?: string(name='description'),
  end?: {
    date?: string(name='Date', example='2020-01-01'),
    dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
    timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
  }(name='end'),
  id?: string(name='id', example='iiiP35sJadba8aBSgjrwPRKgiEiF'),
  isAllDay?: boolean(name='isAllDay', example='true'),
  location?: {
    displayName?: string(name='DisplayName', example='room 1-2-3'),
  }(name='location'),
  onlineMeetingInfo?: {
    conferenceId?: string(name='ConferenceId', example='123'),
    extraInfo?: map[string]any(name='ExtraInfo'),
    type?: string(name='Type', example='dingtalk'),
    url?: string(name='Url', example='http://meeting'),
  }(name='onlineMeetingInfo'),
  organizer?: {
    displayName?: string(name='DisplayName'),
    id?: string(name='Id', example='123456'),
    responseStatus?: string(name='ResponseStatus', example='accepted'),
    self?: boolean(name='Self', example='true'),
  }(name='organizer'),
  recurrence?: {
    pattern?: {
      dayOfMonth?: int32(name='DayOfMonth', example='14'),
      daysOfWeek?: string(name='DaysOfWeek', example='sunday'),
      index?: string(name='Index', example='first'),
      interval?: int32(name='Interval', example='1'),
      type?: string(name='Type', example='daily'),
    }(name='Pattern'),
    range?: {
      endDate?: string(name='EndDate', example='2020-01-01T10:15:30+08:00'),
      numberOfOccurrences?: int32(name='NumberOfOccurrences', example='5'),
      type?: string(name='Type', example='noEnd'),
    }(name='Range'),
  }(name='recurrence'),
  reminders?: [ 
    {
      method?: string(name='Method', example='dingtalk'),
      minutes?: string(name='Minutes', example='15'),
    }
  ](name='reminders'),
  requestId?: string(name='requestId', description='requestId', example='4248DCC9-785F-5A14-8BE0-830FD52E1261'),
  richTextDescription?: {
    text?: string(name='text'),
  }(name='richTextDescription'),
  start?: {
    date?: string(name='Date', example='2020-01-01'),
    dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
    timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
  }(name='start'),
  summary?: string(name='summary'),
  uiConfigs?: [ 
    {
      uiName?: string(name='UiName', example='updateEventButton'),
      uiStatus?: string(name='UiStatus', example='hide'),
    }
  ](name='uiConfigs'),
  updateTime?: string(name='updateTime', example='2020-01-01T10:15:30+08:00'),
}

model CreateEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEventResponseBody(name='body'),
}

/**
 * @summary 创建日程
 *
 * @param tmpReq CreateEventRequest
 * @param tmpHeader CreateEventHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateEventResponse
 */
async function createEventWithOptions(tmpReq: CreateEventRequest, tmpHeader: CreateEventHeaders, runtime: Util.RuntimeOptions): CreateEventResponse {
  Util.validateModel(tmpReq);
  var request = new CreateEventShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateEventShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.attendees)) {
    request.attendeesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.attendees, 'Attendees', 'json');
  }
  if (!Util.isUnset(tmpReq.cardInstances)) {
    request.cardInstancesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.cardInstances, 'CardInstances', 'json');
  }
  if (!Util.isUnset(tmpReq.end)) {
    request.endShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.end, 'End', 'json');
  }
  if (!Util.isUnset(tmpReq.extra)) {
    request.extraShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extra, 'Extra', 'json');
  }
  if (!Util.isUnset(tmpReq.location)) {
    request.locationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.location, 'Location', 'json');
  }
  if (!Util.isUnset(tmpReq.onlineMeetingInfo)) {
    request.onlineMeetingInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.onlineMeetingInfo, 'OnlineMeetingInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.recurrence)) {
    request.recurrenceShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.recurrence, 'Recurrence', 'json');
  }
  if (!Util.isUnset(tmpReq.reminders)) {
    request.remindersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.reminders, 'Reminders', 'json');
  }
  if (!Util.isUnset(tmpReq.richTextDescription)) {
    request.richTextDescriptionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.richTextDescription, 'RichTextDescription', 'json');
  }
  if (!Util.isUnset(tmpReq.uiConfigs)) {
    request.uiConfigsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.uiConfigs, 'UiConfigs', 'json');
  }
  if (!Util.isUnset(tmpReq.start)) {
    request.startShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.start, 'start', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.attendeesShrink)) {
    body['Attendees'] = request.attendeesShrink;
  }
  if (!Util.isUnset(request.cardInstancesShrink)) {
    body['CardInstances'] = request.cardInstancesShrink;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.endShrink)) {
    body['End'] = request.endShrink;
  }
  if (!Util.isUnset(request.extraShrink)) {
    body['Extra'] = request.extraShrink;
  }
  if (!Util.isUnset(request.isAllDay)) {
    body['IsAllDay'] = request.isAllDay;
  }
  if (!Util.isUnset(request.locationShrink)) {
    body['Location'] = request.locationShrink;
  }
  if (!Util.isUnset(request.onlineMeetingInfoShrink)) {
    body['OnlineMeetingInfo'] = request.onlineMeetingInfoShrink;
  }
  if (!Util.isUnset(request.recurrenceShrink)) {
    body['Recurrence'] = request.recurrenceShrink;
  }
  if (!Util.isUnset(request.remindersShrink)) {
    body['Reminders'] = request.remindersShrink;
  }
  if (!Util.isUnset(request.richTextDescriptionShrink)) {
    body['RichTextDescription'] = request.richTextDescriptionShrink;
  }
  if (!Util.isUnset(request.summary)) {
    body['Summary'] = request.summary;
  }
  if (!Util.isUnset(request.uiConfigsShrink)) {
    body['UiConfigs'] = request.uiConfigsShrink;
  }
  if (!Util.isUnset(request.calendarId)) {
    body['calendarId'] = request.calendarId;
  }
  if (!Util.isUnset(request.startShrink)) {
    body['start'] = request.startShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateEvent',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/createEvent`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建日程
 *
 * @param request CreateEventRequest
 * @return CreateEventResponse
 */
async function createEvent(request: CreateEventRequest): CreateEventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateEventHeaders{};
  return createEventWithOptions(request, headers, runtime);
}

model CreateLiveHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model CreateLiveShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateLiveRequest {
  coverUrl?: string(name='CoverUrl', example='http://sss/sss'),
  introduction?: string(name='Introduction', example='这是一个直播'),
  preEndTime?: long(name='PreEndTime', description='This parameter is required.', example='1698596800000'),
  preStartTime?: long(name='PreStartTime', description='This parameter is required.', example='1691596800000'),
  publicType?: long(name='PublicType', example='0'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  title?: string(name='Title', description='This parameter is required.', example='标题'),
}

model CreateLiveShrinkRequest {
  coverUrl?: string(name='CoverUrl', example='http://sss/sss'),
  introduction?: string(name='Introduction', example='这是一个直播'),
  preEndTime?: long(name='PreEndTime', description='This parameter is required.', example='1698596800000'),
  preStartTime?: long(name='PreStartTime', description='This parameter is required.', example='1691596800000'),
  publicType?: long(name='PublicType', example='0'),
  tenantContextShrink?: string(name='TenantContext'),
  title?: string(name='Title', description='This parameter is required.', example='标题'),
}

model CreateLiveResponseBody = {
  liveId?: string(name='liveId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model CreateLiveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLiveResponseBody(name='body'),
}

/**
 * @summary 创建直播
 *
 * @param tmpReq CreateLiveRequest
 * @param tmpHeader CreateLiveHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateLiveResponse
 */
async function createLiveWithOptions(tmpReq: CreateLiveRequest, tmpHeader: CreateLiveHeaders, runtime: Util.RuntimeOptions): CreateLiveResponse {
  Util.validateModel(tmpReq);
  var request = new CreateLiveShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateLiveShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.coverUrl)) {
    body['CoverUrl'] = request.coverUrl;
  }
  if (!Util.isUnset(request.introduction)) {
    body['Introduction'] = request.introduction;
  }
  if (!Util.isUnset(request.preEndTime)) {
    body['PreEndTime'] = request.preEndTime;
  }
  if (!Util.isUnset(request.preStartTime)) {
    body['PreStartTime'] = request.preStartTime;
  }
  if (!Util.isUnset(request.publicType)) {
    body['PublicType'] = request.publicType;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateLive',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/createLive`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建直播
 *
 * @param request CreateLiveRequest
 * @return CreateLiveResponse
 */
async function createLive(request: CreateLiveRequest): CreateLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateLiveHeaders{};
  return createLiveWithOptions(request, headers, runtime);
}

model CreateMeetingRoomHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model CreateMeetingRoomShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateMeetingRoomRequest {
  enableCycleReservation?: boolean(name='EnableCycleReservation'),
  groupId?: long(name='GroupId', example='4644'),
  isvRoomId?: string(name='IsvRoomId', example='xxxIsvRoomId'),
  reservationAuthority?: {
    authorizedMembers?: [ 
      {
        memberId?: string(name='MemberId'),
        memberName?: string(name='MemberName'),
        memberType?: string(name='MemberType'),
      }
    ](name='AuthorizedMembers'),
  }(name='ReservationAuthority'),
  roomCapacity?: int32(name='RoomCapacity', example='100'),
  roomLabelIds?: [ long ](name='RoomLabelIds'),
  roomLocation?: {
    desc?: string(name='Desc'),
    title?: string(name='Title'),
  }(name='RoomLocation'),
  roomName?: string(name='RoomName'),
  roomPicture?: string(name='RoomPicture', example='https://static.dingtalk.com/media/lADPxxxxx.jpg'),
  roomStatus?: int32(name='RoomStatus', example='1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model CreateMeetingRoomShrinkRequest {
  enableCycleReservation?: boolean(name='EnableCycleReservation'),
  groupId?: long(name='GroupId', example='4644'),
  isvRoomId?: string(name='IsvRoomId', example='xxxIsvRoomId'),
  reservationAuthorityShrink?: string(name='ReservationAuthority'),
  roomCapacity?: int32(name='RoomCapacity', example='100'),
  roomLabelIdsShrink?: string(name='RoomLabelIds'),
  roomLocationShrink?: string(name='RoomLocation'),
  roomName?: string(name='RoomName'),
  roomPicture?: string(name='RoomPicture', example='https://static.dingtalk.com/media/lADPxxxxx.jpg'),
  roomStatus?: int32(name='RoomStatus', example='1'),
  tenantContextShrink?: string(name='TenantContext'),
}

model CreateMeetingRoomResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: string(name='result', example='0ffb718xxxxx'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model CreateMeetingRoomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMeetingRoomResponseBody(name='body'),
}

/**
 * @summary 创建会议室
 *
 * @param tmpReq CreateMeetingRoomRequest
 * @param tmpHeader CreateMeetingRoomHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateMeetingRoomResponse
 */
async function createMeetingRoomWithOptions(tmpReq: CreateMeetingRoomRequest, tmpHeader: CreateMeetingRoomHeaders, runtime: Util.RuntimeOptions): CreateMeetingRoomResponse {
  Util.validateModel(tmpReq);
  var request = new CreateMeetingRoomShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateMeetingRoomShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.reservationAuthority)) {
    request.reservationAuthorityShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.reservationAuthority, 'ReservationAuthority', 'json');
  }
  if (!Util.isUnset(tmpReq.roomLabelIds)) {
    request.roomLabelIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roomLabelIds, 'RoomLabelIds', 'json');
  }
  if (!Util.isUnset(tmpReq.roomLocation)) {
    request.roomLocationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roomLocation, 'RoomLocation', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.enableCycleReservation)) {
    body['EnableCycleReservation'] = request.enableCycleReservation;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.isvRoomId)) {
    body['IsvRoomId'] = request.isvRoomId;
  }
  if (!Util.isUnset(request.reservationAuthorityShrink)) {
    body['ReservationAuthority'] = request.reservationAuthorityShrink;
  }
  if (!Util.isUnset(request.roomCapacity)) {
    body['RoomCapacity'] = request.roomCapacity;
  }
  if (!Util.isUnset(request.roomLabelIdsShrink)) {
    body['RoomLabelIds'] = request.roomLabelIdsShrink;
  }
  if (!Util.isUnset(request.roomLocationShrink)) {
    body['RoomLocation'] = request.roomLocationShrink;
  }
  if (!Util.isUnset(request.roomName)) {
    body['RoomName'] = request.roomName;
  }
  if (!Util.isUnset(request.roomPicture)) {
    body['RoomPicture'] = request.roomPicture;
  }
  if (!Util.isUnset(request.roomStatus)) {
    body['RoomStatus'] = request.roomStatus;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateMeetingRoom',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/createMeetingRoom`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建会议室
 *
 * @param request CreateMeetingRoomRequest
 * @return CreateMeetingRoomResponse
 */
async function createMeetingRoom(request: CreateMeetingRoomRequest): CreateMeetingRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateMeetingRoomHeaders{};
  return createMeetingRoomWithOptions(request, headers, runtime);
}

model CreateMeetingRoomGroupHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model CreateMeetingRoomGroupShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateMeetingRoomGroupRequest {
  groupName?: string(name='GroupName', example='测试分组'),
  parentGroupId?: long(name='ParentGroupId', description='This parameter is required.', example='172L'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model CreateMeetingRoomGroupShrinkRequest {
  groupName?: string(name='GroupName', example='测试分组'),
  parentGroupId?: long(name='ParentGroupId', description='This parameter is required.', example='172L'),
  tenantContextShrink?: string(name='TenantContext'),
}

model CreateMeetingRoomGroupResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: long(name='result', example='172'),
}

model CreateMeetingRoomGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMeetingRoomGroupResponseBody(name='body'),
}

/**
 * @summary 创建会议室分组
 *
 * @param tmpReq CreateMeetingRoomGroupRequest
 * @param tmpHeader CreateMeetingRoomGroupHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateMeetingRoomGroupResponse
 */
async function createMeetingRoomGroupWithOptions(tmpReq: CreateMeetingRoomGroupRequest, tmpHeader: CreateMeetingRoomGroupHeaders, runtime: Util.RuntimeOptions): CreateMeetingRoomGroupResponse {
  Util.validateModel(tmpReq);
  var request = new CreateMeetingRoomGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateMeetingRoomGroupShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupName)) {
    body['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.parentGroupId)) {
    body['ParentGroupId'] = request.parentGroupId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateMeetingRoomGroup',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/createMeetingRoomGroup`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建会议室分组
 *
 * @param request CreateMeetingRoomGroupRequest
 * @return CreateMeetingRoomGroupResponse
 */
async function createMeetingRoomGroup(request: CreateMeetingRoomGroupRequest): CreateMeetingRoomGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateMeetingRoomGroupHeaders{};
  return createMeetingRoomGroupWithOptions(request, headers, runtime);
}

model CreateMessageHeaders {
  commonHeaders?: map[string]string,
  accountId?: string(name='accountId', example='123456'),
}

model CreateMessageRequest {
  assistantId?: string(name='assistantId', description='This parameter is required.', example='assistantId1'),
  messages?: [ 
    {
      content?: {
        cardCallback?: {
          content?: string(name='content', description='This parameter is required.', example='{}'),
          relatedMessageId?: string(name='relatedMessageId', description='This parameter is required.', example='aliding_messageId123'),
        }(name='cardCallback'),
        dingCard?: {
          content?: string(name='content', example='{}'),
          contentType?: string(name='contentType', description='This parameter is required.', example='basic_card_schema'),
          finished?: boolean(name='finished', example='true'),
          templateId?: string(name='templateId', example='templateId123'),
        }(name='dingCard'),
        dingNormalCard?: {
          cardData?: {
            cardParamMap?: map[string]any(name='cardParamMap', example='{}'),
          }(name='cardData', example='{}'),
          cardTemplateId?: string(name='cardTemplateId', example='templateId1'),
          cardUpdateOptions?: {
            updateCardDataByKey?: boolean(name='updateCardDataByKey', example='{}'),
            updatePrivateDataByKey?: boolean(name='updatePrivateDataByKey', example='{}'),
          }(name='cardUpdateOptions', example='{}'),
          dynamicDataSourceConfigs?: [ 
            {
              constParams?: map[string]any(name='constParams', example='{}'),
              dynamicDataSourceId?: string(name='dynamicDataSourceId', example='dynamicDataSourceId1'),
              pullConfig?: {
                interval?: int32(name='interval', example='3'),
                pullStrategy?: string(name='pullStrategy', example='NONE'),
                timeUnit?: string(name='timeUnit', example='SECONDS'),
              }(name='pullConfig', example='{}'),
            }
          ](name='dynamicDataSourceConfigs', example='{}'),
          privateData?: map[string]object(name='privateData', example='{}'),
        }(name='dingNormalCard', example='{}'),
        markdown?: {
          value?: string(name='value', example='1. markdown内容
2. markdown内容'),
        }(name='markdown'),
        structView?: {
          parts?: [ 
            {
              append?: boolean(name='append'),
              dataPart?: {
                data?: any(name='data'),
              }(name='dataPart', example='{}'),
              finish?: boolean(name='finish'),
              partDesc?: string(name='partDesc', example='这是正文内容部分'),
              partId?: string(name='partId', example='artifactId123'),
              reasonPart?: {
                reason?: string(name='reason', example='123123'),
              }(name='reasonPart', example='{}'),
              recommendPart?: {
                recommends?: [ 
                  {
                    mobileUrl?: string(name='mobileUrl'),
                    text?: string(name='text'),
                    url?: string(name='url'),
                  }
                ](name='recommends'),
              }(name='recommendPart', example='{}'),
              referencePart?: {
                references?: [ 
                  {
                    index?: string(name='index', example='0'),
                    name?: string(name='name', example='mcp是....'),
                    sourceCode?: string(name='sourceCode', example='ata'),
                    sourceIcon?: string(name='sourceIcon'),
                    summary?: string(name='summary', example='摘要'),
                    title?: string(name='title', example='《mcp原理介绍》'),
                    url?: string(name='url', example='https://taobao.com'),
                  }
                ](name='references'),
              }(name='referencePart', example='{}'),
              textPart?: {
                text?: string(name='text', example='123123'),
              }(name='textPart', example='{}'),
              type?: string(name='type', description='This parameter is required.', example='textPart'),
            }
          ](name='parts'),
        }(name='structView'),
        text?: {
          value?: string(name='value', example='你好！'),
        }(name='text'),
        type?: string(name='type', description='This parameter is required.', example='枚举字段，可为：text,markdown,cardCallback,dingCard,agentArtifact,dingNormalCard'),
      }(name='content'),
      contentDesc?: string(name='contentDesc', example='这是一张小猫钓鱼图'),
      createAt?: long(name='createAt', example='1642448000000'),
      role?: string(name='role', example='user'),
    }
  ](name='messages', description='This parameter is required.'),
  originalAssistantId?: string(name='originalAssistantId', example='assistantId'),
  sourceIdOfOriginalAssistantId?: string(name='sourceIdOfOriginalAssistantId', example='agentKey1'),
  sourceTypeOfOriginalAssistantId?: string(name='sourceTypeOfOriginalAssistantId', example='1'),
  threadId?: string(name='threadId', description='This parameter is required.', example='threadId123'),
}

model CreateMessageResponseBody = {
  messages?: [ 
    {
      content?: {
        cardCallback?: {
          content?: string(name='content', example='{}'),
          relatedMessageId?: string(name='relatedMessageId', example='aliding_messageId123'),
        }(name='cardCallback'),
        dingCard?: {
          content?: string(name='content', example='{}'),
          contentType?: string(name='contentType', description='This parameter is required.', example='basic_card_schema'),
          finished?: boolean(name='finished', example='true'),
          templateId?: string(name='templateId', example='templateId123'),
        }(name='dingCard'),
        dingNormalCard?: {
          cardData?: {
            cardParamMap?: map[string]any(name='cardParamMap', example='{}'),
          }(name='cardData', example='{}'),
          cardTemplateId?: string(name='cardTemplateId', example='templateId1'),
          cardUpdateOptions?: {
            updateCardDataByKey?: boolean(name='updateCardDataByKey', example='{}'),
            updatePrivateDataByKey?: boolean(name='updatePrivateDataByKey', example='{}'),
          }(name='cardUpdateOptions', example='{}'),
          dynamicDataSourceConfigs?: [ 
            {
              constParams?: map[string]any(name='constParams', example='{}'),
              dynamicDataSourceId?: string(name='dynamicDataSourceId', example='dynamicDataSourceId1'),
              pullConfig?: {
                interval?: int32(name='interval', example='3'),
                pullStrategy?: string(name='pullStrategy', example='NONE'),
                timeUnit?: string(name='timeUnit', example='SECONDS'),
              }(name='pullConfig', example='{}'),
            }
          ](name='dynamicDataSourceConfigs', example='{}'),
          privateData?: map[string]object(name='privateData', example='{}'),
        }(name='dingNormalCard', example='{}'),
        markdown?: {
          value?: string(name='value', example='1. markdown内容
2. markdown内容'),
        }(name='markdown'),
        structView?: {
          parts?: [ 
            {
              append?: boolean(name='append'),
              dataPart?: {
                data?: any(name='data'),
              }(name='dataPart', example='{}'),
              finish?: boolean(name='finish'),
              partDesc?: string(name='partDesc', example='这是正文内容部分'),
              partId?: string(name='partId', example='artifactId123'),
              reasonPart?: {
                reason?: string(name='reason', example='123123'),
              }(name='reasonPart', example='{}'),
              recommendPart?: {
                recommends?: [ 
                  {
                    mobileUrl?: string(name='mobileUrl'),
                    text?: string(name='text'),
                    url?: string(name='url'),
                  }
                ](name='recommends'),
              }(name='recommendPart', example='{}'),
              referencePart?: {
                references?: [ 
                  {
                    index?: string(name='index', example='0'),
                    name?: string(name='name', example='mcp是....'),
                    sourceCode?: string(name='sourceCode', example='ata'),
                    sourceIcon?: string(name='sourceIcon'),
                    summary?: string(name='summary', example='摘要'),
                    title?: string(name='title', example='《mcp原理介绍》'),
                    url?: string(name='url', example='https://taobao.com'),
                  }
                ](name='references'),
              }(name='referencePart', example='{}'),
              textPart?: {
                text?: string(name='text', example='123123'),
              }(name='textPart', example='{}'),
              type?: string(name='type', description='This parameter is required.', example='textPart'),
            }
          ](name='parts'),
        }(name='structView'),
        text?: {
          value?: string(name='value', example='你好！'),
        }(name='text'),
        type?: string(name='type', description='This parameter is required.', example='枚举字段，可为：text,markdown,cardCallback,dingCard,agentArtifact,dingNormalCard'),
      }(name='content'),
      contentDesc?: string(name='contentDesc', example='这是一张小猫钓鱼图'),
      createAt?: long(name='createAt', example='1642448000000'),
      id?: string(name='id', example='messageId1'),
      role?: string(name='role', example='user'),
      runId?: string(name='runId', example='runId1'),
      threadId?: string(name='threadId', example='threadId1'),
    }
  ](name='messages'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model CreateMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMessageResponseBody(name='body'),
}

/**
 * @summary 创建消息
 *
 * @param request CreateMessageRequest
 * @param headers CreateMessageHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateMessageResponse
 */
async function createMessageWithOptions(request: CreateMessageRequest, headers: CreateMessageHeaders, runtime: Util.RuntimeOptions): CreateMessageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.assistantId)) {
    body['assistantId'] = request.assistantId;
  }
  if (!Util.isUnset(request.messages)) {
    body['messages'] = request.messages;
  }
  if (!Util.isUnset(request.originalAssistantId)) {
    body['originalAssistantId'] = request.originalAssistantId;
  }
  if (!Util.isUnset(request.sourceIdOfOriginalAssistantId)) {
    body['sourceIdOfOriginalAssistantId'] = request.sourceIdOfOriginalAssistantId;
  }
  if (!Util.isUnset(request.sourceTypeOfOriginalAssistantId)) {
    body['sourceTypeOfOriginalAssistantId'] = request.sourceTypeOfOriginalAssistantId;
  }
  if (!Util.isUnset(request.threadId)) {
    body['threadId'] = request.threadId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountId)) {
    realHeaders['accountId'] = Util.toJSONString(headers.accountId);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateMessage',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/ai/v1/assistant/createMessage`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建消息
 *
 * @param request CreateMessageRequest
 * @return CreateMessageResponse
 */
async function createMessage(request: CreateMessageRequest): CreateMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateMessageHeaders{};
  return createMessageWithOptions(request, headers, runtime);
}

model CreateMultiDimTableFieldHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model CreateMultiDimTableFieldShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateMultiDimTableFieldRequest {
  baseId?: string(name='BaseId', description='This parameter is required.', example='r1R7q3QmWew5lo02fxB7noNyJxxxxxx'),
  name?: string(name='Name', description='This parameter is required.'),
  property?: map[string]any(name='Property'),
  sheetIdOrName?: string(name='SheetIdOrName', description='This parameter is required.'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  type?: string(name='Type', description='This parameter is required.', example='text'),
}

model CreateMultiDimTableFieldShrinkRequest {
  baseId?: string(name='BaseId', description='This parameter is required.', example='r1R7q3QmWew5lo02fxB7noNyJxxxxxx'),
  name?: string(name='Name', description='This parameter is required.'),
  propertyShrink?: string(name='Property'),
  sheetIdOrName?: string(name='SheetIdOrName', description='This parameter is required.'),
  tenantContextShrink?: string(name='TenantContext'),
  type?: string(name='Type', description='This parameter is required.', example='text'),
}

model CreateMultiDimTableFieldResponseBody = {
  id?: string(name='Id', example='UhfysgH'),
  name?: string(name='Name'),
  property?: map[string]any(name='Property'),
  type?: string(name='Type', example='text'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model CreateMultiDimTableFieldResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMultiDimTableFieldResponseBody(name='body'),
}

/**
 * @summary 创建字段
 *
 * @param tmpReq CreateMultiDimTableFieldRequest
 * @param tmpHeader CreateMultiDimTableFieldHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateMultiDimTableFieldResponse
 */
async function createMultiDimTableFieldWithOptions(tmpReq: CreateMultiDimTableFieldRequest, tmpHeader: CreateMultiDimTableFieldHeaders, runtime: Util.RuntimeOptions): CreateMultiDimTableFieldResponse {
  Util.validateModel(tmpReq);
  var request = new CreateMultiDimTableFieldShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateMultiDimTableFieldShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.property)) {
    request.propertyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.property, 'Property', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.baseId)) {
    body['BaseId'] = request.baseId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.propertyShrink)) {
    body['Property'] = request.propertyShrink;
  }
  if (!Util.isUnset(request.sheetIdOrName)) {
    body['SheetIdOrName'] = request.sheetIdOrName;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateMultiDimTableField',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/table/createMultiDimTableField`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建字段
 *
 * @param request CreateMultiDimTableFieldRequest
 * @return CreateMultiDimTableFieldResponse
 */
async function createMultiDimTableField(request: CreateMultiDimTableFieldRequest): CreateMultiDimTableFieldResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateMultiDimTableFieldHeaders{};
  return createMultiDimTableFieldWithOptions(request, headers, runtime);
}

model CreateOrUpdateFormDataHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model CreateOrUpdateFormDataShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateOrUpdateFormDataRequest {
  appType?: string(name='AppType', example='APP_XCE0EVXS6DYG3YDYC5RD'),
  formDataJson?: string(name='FormDataJson', example='{\\\\"countrySelectField_l0c1cwiu\\\\":[{\\\\"value\\\\":\\\\"US\\\\"}]}'),
  formUuid?: string(name='FormUuid', example='FORM-GX866MC1NC1VOFF6WVQW33FD16E23L3CPMKVKA'),
  noExecuteExpression?: boolean(name='NoExecuteExpression', example='false'),
  searchCondition?: string(name='SearchCondition'),
  systemToken?: string(name='SystemToken', example='09866181UTZVVD4R3DC955FNKIM52HVPU5WWK7'),
  userId?: string(name='UserId', example='012345'),
}

model CreateOrUpdateFormDataResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ string ](name='result', example='[ "FINST-SASNOO39NSIFF780" ]'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model CreateOrUpdateFormDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrUpdateFormDataResponseBody(name='body'),
}

/**
 * @summary 新增或更新表单实例
 *
 * @param request CreateOrUpdateFormDataRequest
 * @param tmpHeader CreateOrUpdateFormDataHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateOrUpdateFormDataResponse
 */
async function createOrUpdateFormDataWithOptions(request: CreateOrUpdateFormDataRequest, tmpHeader: CreateOrUpdateFormDataHeaders, runtime: Util.RuntimeOptions): CreateOrUpdateFormDataResponse {
  Util.validateModel(request);
  var headers = new CreateOrUpdateFormDataShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.formDataJson)) {
    body['FormDataJson'] = request.formDataJson;
  }
  if (!Util.isUnset(request.formUuid)) {
    body['FormUuid'] = request.formUuid;
  }
  if (!Util.isUnset(request.noExecuteExpression)) {
    body['NoExecuteExpression'] = request.noExecuteExpression;
  }
  if (!Util.isUnset(request.searchCondition)) {
    body['SearchCondition'] = request.searchCondition;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateOrUpdateFormData',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/createOrUpdateFormData`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新增或更新表单实例
 *
 * @param request CreateOrUpdateFormDataRequest
 * @return CreateOrUpdateFormDataResponse
 */
async function createOrUpdateFormData(request: CreateOrUpdateFormDataRequest): CreateOrUpdateFormDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateOrUpdateFormDataHeaders{};
  return createOrUpdateFormDataWithOptions(request, headers, runtime);
}

model CreateOrgHonorTemplateHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='208579'),
  }(name='AccountContext'),
}

model CreateOrgHonorTemplateShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateOrgHonorTemplateRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='123456'),
  }(name='TenantContext'),
  avatarFrameMediaId?: string(name='avatarFrameMediaId', description='This parameter is required.', example='fsdfasdjf132342d'),
  defaultBgColor?: string(name='defaultBgColor', description='This parameter is required.', example='#FFFBB4'),
  medalDesc?: string(name='medalDesc', description='This parameter is required.'),
  medalMediaId?: string(name='medalMediaId', description='This parameter is required.', example='1273adf23'),
  medalName?: string(name='medalName', description='This parameter is required.'),
  orgId?: long(name='orgId', description='This parameter is required.', example='123456'),
  userId?: string(name='userId', description='This parameter is required.', example='363784'),
}

model CreateOrgHonorTemplateShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  avatarFrameMediaId?: string(name='avatarFrameMediaId', description='This parameter is required.', example='fsdfasdjf132342d'),
  defaultBgColor?: string(name='defaultBgColor', description='This parameter is required.', example='#FFFBB4'),
  medalDesc?: string(name='medalDesc', description='This parameter is required.'),
  medalMediaId?: string(name='medalMediaId', description='This parameter is required.', example='1273adf23'),
  medalName?: string(name='medalName', description='This parameter is required.'),
  orgId?: long(name='orgId', description='This parameter is required.', example='123456'),
  userId?: string(name='userId', description='This parameter is required.', example='363784'),
}

model CreateOrgHonorTemplateResponseBody = {
  honorId?: string(name='honorId', example='21660610'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model CreateOrgHonorTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrgHonorTemplateResponseBody(name='body'),
}

/**
 * @summary 创建荣誉勋章模板
 *
 * @param tmpReq CreateOrgHonorTemplateRequest
 * @param tmpHeader CreateOrgHonorTemplateHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateOrgHonorTemplateResponse
 */
async function createOrgHonorTemplateWithOptions(tmpReq: CreateOrgHonorTemplateRequest, tmpHeader: CreateOrgHonorTemplateHeaders, runtime: Util.RuntimeOptions): CreateOrgHonorTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new CreateOrgHonorTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateOrgHonorTemplateShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.avatarFrameMediaId)) {
    body['avatarFrameMediaId'] = request.avatarFrameMediaId;
  }
  if (!Util.isUnset(request.defaultBgColor)) {
    body['defaultBgColor'] = request.defaultBgColor;
  }
  if (!Util.isUnset(request.medalDesc)) {
    body['medalDesc'] = request.medalDesc;
  }
  if (!Util.isUnset(request.medalMediaId)) {
    body['medalMediaId'] = request.medalMediaId;
  }
  if (!Util.isUnset(request.medalName)) {
    body['medalName'] = request.medalName;
  }
  if (!Util.isUnset(request.orgId)) {
    body['orgId'] = request.orgId;
  }
  if (!Util.isUnset(request.userId)) {
    body['userId'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateOrgHonorTemplate',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/aliding/v1/honor/createOrgHonorTemplate`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建荣誉勋章模板
 *
 * @param request CreateOrgHonorTemplateRequest
 * @return CreateOrgHonorTemplateResponse
 */
async function createOrgHonorTemplate(request: CreateOrgHonorTemplateRequest): CreateOrgHonorTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateOrgHonorTemplateHeaders{};
  return createOrgHonorTemplateWithOptions(request, headers, runtime);
}

model CreatePersonalTodoTaskHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='ba3a9b612345678d8fedf544ef69d19e'),
  }(name='AccountContext'),
}

model CreatePersonalTodoTaskShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreatePersonalTodoTaskRequest {
  description?: string(name='Description', example='待办备注信息'),
  dueTime?: long(name='DueTime', example='1703750708595'),
  executorIds?: [ string ](name='ExecutorIds', description='This parameter is required.', example='[ "012345" ]'),
  notifyConfigs?: {
    dingNotify?: string(name='DingNotify', example='1'),
  }(name='NotifyConfigs'),
  participantIds?: [ string ](name='ParticipantIds', example='[ "012345" ]'),
  reminderTimeStamp?: long(name='ReminderTimeStamp', example='1703750708595'),
  subject?: string(name='Subject', description='This parameter is required.', example='待办标题'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model CreatePersonalTodoTaskShrinkRequest {
  description?: string(name='Description', example='待办备注信息'),
  dueTime?: long(name='DueTime', example='1703750708595'),
  executorIdsShrink?: string(name='ExecutorIds', description='This parameter is required.', example='[ "012345" ]'),
  notifyConfigsShrink?: string(name='NotifyConfigs'),
  participantIdsShrink?: string(name='ParticipantIds', example='[ "012345" ]'),
  reminderTimeStamp?: long(name='ReminderTimeStamp', example='1703750708595'),
  subject?: string(name='Subject', description='This parameter is required.', example='待办标题'),
  tenantContextShrink?: string(name='TenantContext'),
}

model CreatePersonalTodoTaskResponseBody = {
  createdTime?: long(name='createdTime', example='1703750708595'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  taskId?: string(name='taskId', example='task123abc'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model CreatePersonalTodoTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePersonalTodoTaskResponseBody(name='body'),
}

/**
 * @summary 创建钉钉个人待办任务
 *
 * @param tmpReq CreatePersonalTodoTaskRequest
 * @param tmpHeader CreatePersonalTodoTaskHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreatePersonalTodoTaskResponse
 */
async function createPersonalTodoTaskWithOptions(tmpReq: CreatePersonalTodoTaskRequest, tmpHeader: CreatePersonalTodoTaskHeaders, runtime: Util.RuntimeOptions): CreatePersonalTodoTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreatePersonalTodoTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreatePersonalTodoTaskShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.executorIds)) {
    request.executorIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.executorIds, 'ExecutorIds', 'json');
  }
  if (!Util.isUnset(tmpReq.notifyConfigs)) {
    request.notifyConfigsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notifyConfigs, 'NotifyConfigs', 'json');
  }
  if (!Util.isUnset(tmpReq.participantIds)) {
    request.participantIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.participantIds, 'ParticipantIds', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.dueTime)) {
    body['DueTime'] = request.dueTime;
  }
  if (!Util.isUnset(request.executorIdsShrink)) {
    body['ExecutorIds'] = request.executorIdsShrink;
  }
  if (!Util.isUnset(request.notifyConfigsShrink)) {
    body['NotifyConfigs'] = request.notifyConfigsShrink;
  }
  if (!Util.isUnset(request.participantIdsShrink)) {
    body['ParticipantIds'] = request.participantIdsShrink;
  }
  if (!Util.isUnset(request.reminderTimeStamp)) {
    body['ReminderTimeStamp'] = request.reminderTimeStamp;
  }
  if (!Util.isUnset(request.subject)) {
    body['Subject'] = request.subject;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreatePersonalTodoTask',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/task/createPersonalTodoTask`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建钉钉个人待办任务
 *
 * @param request CreatePersonalTodoTaskRequest
 * @return CreatePersonalTodoTaskResponse
 */
async function createPersonalTodoTask(request: CreatePersonalTodoTaskRequest): CreatePersonalTodoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreatePersonalTodoTaskHeaders{};
  return createPersonalTodoTaskWithOptions(request, headers, runtime);
}

model CreateReportHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model CreateReportShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateReportRequest {
  contents?: [ 
    {
      content?: string(name='Content', description='This parameter is required.', example='### 序号1'),
      contentType?: string(name='ContentType', description='This parameter is required.', example='markdown'),
      key?: string(name='Key', description='This parameter is required.', example='今日完成工作'),
      sort?: long(name='Sort', description='This parameter is required.', example='0'),
      type?: long(name='Type', description='This parameter is required.', example='1'),
    }
  ](name='Contents', description='This parameter is required.', example='[]'),
  ddFrom?: string(name='DdFrom', description='This parameter is required.', example='client'),
  templateId?: string(name='TemplateId', description='This parameter is required.', example='sdfafdsfsafdfsaf'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  toChat?: boolean(name='ToChat', description='This parameter is required.', example='true'),
  toCids?: [ string ](name='ToCids', example='[]'),
  toUserids?: [ string ](name='ToUserids', example='[123,456]'),
}

model CreateReportShrinkRequest {
  contentsShrink?: string(name='Contents', description='This parameter is required.', example='[]'),
  ddFrom?: string(name='DdFrom', description='This parameter is required.', example='client'),
  templateId?: string(name='TemplateId', description='This parameter is required.', example='sdfafdsfsafdfsaf'),
  tenantContextShrink?: string(name='TenantContext'),
  toChat?: boolean(name='ToChat', description='This parameter is required.', example='true'),
  toCidsShrink?: string(name='ToCids', example='[]'),
  toUseridsShrink?: string(name='ToUserids', example='[123,456]'),
}

model CreateReportResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model CreateReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateReportResponseBody(name='body'),
}

/**
 * @summary 创建日志
 *
 * @param tmpReq CreateReportRequest
 * @param tmpHeader CreateReportHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateReportResponse
 */
async function createReportWithOptions(tmpReq: CreateReportRequest, tmpHeader: CreateReportHeaders, runtime: Util.RuntimeOptions): CreateReportResponse {
  Util.validateModel(tmpReq);
  var request = new CreateReportShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateReportShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.contents)) {
    request.contentsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.contents, 'Contents', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.toCids)) {
    request.toCidsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.toCids, 'ToCids', 'json');
  }
  if (!Util.isUnset(tmpReq.toUserids)) {
    request.toUseridsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.toUserids, 'ToUserids', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.contentsShrink)) {
    body['Contents'] = request.contentsShrink;
  }
  if (!Util.isUnset(request.ddFrom)) {
    body['DdFrom'] = request.ddFrom;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.toChat)) {
    body['ToChat'] = request.toChat;
  }
  if (!Util.isUnset(request.toCidsShrink)) {
    body['ToCids'] = request.toCidsShrink;
  }
  if (!Util.isUnset(request.toUseridsShrink)) {
    body['ToUserids'] = request.toUseridsShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateReport',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/log/createReport`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建日志
 *
 * @param request CreateReportRequest
 * @return CreateReportResponse
 */
async function createReport(request: CreateReportRequest): CreateReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateReportHeaders{};
  return createReportWithOptions(request, headers, runtime);
}

model CreateRunHeaders {
  commonHeaders?: map[string]string,
  accountId?: string(name='accountId', example='123456'),
}

model CreateRunRequest {
  assistantId?: string(name='assistantId', description='This parameter is required.', example='assistantId1'),
  originalAssistantId?: string(name='originalAssistantId', example='assistantId'),
  sourceIdOfOriginalAssistantId?: string(name='sourceIdOfOriginalAssistantId', example='agentKey1'),
  sourceTypeOfOriginalAssistantId?: string(name='sourceTypeOfOriginalAssistantId', example='1'),
  stream?: boolean(name='stream', example='false'),
  threadId?: string(name='threadId', description='This parameter is required.', example='threadId123'),
}

model CreateRunResponseBody = {
  messages?: [ 
    {
      content?: {
        cardCallback?: {
          content?: string(name='content', example='{}'),
          relatedMessageId?: string(name='relatedMessageId', example='aliding_messageId123'),
        }(name='cardCallback'),
        dingCard?: {
          content?: string(name='content', example='{}'),
          contentType?: string(name='contentType', description='This parameter is required.', example='basic_card_schema'),
          finished?: boolean(name='finished', example='true'),
          templateId?: string(name='templateId', example='templateId123'),
        }(name='dingCard'),
        dingNormalCard?: {
          cardData?: {
            cardParamMap?: any(name='cardParamMap'),
          }(name='cardData', example='{}'),
          cardTemplateId?: string(name='cardTemplateId', example='templateId1'),
          cardUpdateOptions?: {
            updateCardDataByKey?: boolean(name='updateCardDataByKey', example='{}'),
            updatePrivateDataByKey?: boolean(name='updatePrivateDataByKey', example='{}'),
          }(name='cardUpdateOptions', example='{}'),
          dynamicDataSourceConfigs?: [ 
            {
              constParams?: map[string]any(name='constParams', example='{}'),
              dynamicDataSourceId?: string(name='dynamicDataSourceId', example='dynamicDataSourceId1'),
              pullConfig?: {
                interval?: int32(name='interval', example='3'),
                pullStrategy?: string(name='pullStrategy', example='NONE'),
                timeUnit?: string(name='timeUnit', example='SECONDS'),
              }(name='pullConfig', example='{}'),
            }
          ](name='dynamicDataSourceConfigs', example='{}'),
          privateData?: map[string]object(name='privateData', example='{}'),
        }(name='dingNormalCard', example='{}'),
        markdown?: {
          value?: string(name='value', example='1. markdown内容
2. markdown内容'),
        }(name='markdown'),
        structView?: {
          parts?: [ 
            {
              append?: boolean(name='append'),
              dataPart?: {
                data?: any(name='data'),
              }(name='dataPart', example='{}'),
              finish?: boolean(name='finish'),
              partDesc?: string(name='partDesc', example='这是正文内容部分'),
              partId?: string(name='partId', example='artifactId123'),
              reasonPart?: {
                reason?: string(name='reason', example='123123'),
              }(name='reasonPart', example='{}'),
              recommendPart?: {
                recommends?: [ 
                  {
                    mobileUrl?: string(name='mobileUrl'),
                    text?: string(name='text'),
                    url?: string(name='url'),
                  }
                ](name='recommends'),
              }(name='recommendPart', example='{}'),
              referencePart?: {
                references?: [ 
                  {
                    index?: string(name='index', example='0'),
                    name?: string(name='name', example='mcp是....'),
                    sourceCode?: string(name='sourceCode', example='ata'),
                    sourceIcon?: string(name='sourceIcon'),
                    summary?: string(name='summary', example='摘要'),
                    title?: string(name='title', example='《mcp原理介绍》'),
                    url?: string(name='url', example='https://taobao.com'),
                  }
                ](name='references'),
              }(name='referencePart', example='{}'),
              textPart?: {
                text?: string(name='text', example='123123'),
              }(name='textPart', example='{}'),
              type?: string(name='type', description='This parameter is required.', example='textPart'),
            }
          ](name='parts'),
        }(name='structView'),
        text?: {
          value?: string(name='value', example='你好！'),
        }(name='text'),
        type?: string(name='type', description='This parameter is required.', example='枚举字段，可为：text,markdown,cardCallback,dingCard,agentArtifact,dingNormalCard'),
      }(name='content'),
      contentDesc?: string(name='contentDesc', example='这是一张小猫钓鱼图'),
      createAt?: long(name='createAt', example='1642448000000'),
      id?: string(name='id', example='messageId1'),
      role?: string(name='role', example='user'),
      runId?: string(name='runId', example='runId1'),
      threadId?: string(name='threadId', example='threadId1'),
    }
  ](name='messages'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  run?: {
    cancelledAt?: long(name='cancelledAt'),
    completedAt?: long(name='completedAt'),
    createAt?: long(name='createAt'),
    expiresAt?: long(name='expiresAt'),
    failedAt?: long(name='failedAt'),
    id?: string(name='id'),
    lastErrorMsg?: string(name='lastErrorMsg'),
    startedAt?: long(name='startedAt'),
    status?: string(name='status'),
    threadId?: string(name='threadId'),
  }(name='run'),
}

model CreateRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRunResponseBody(name='body'),
}

/**
 * @summary 创建运行
 *
 * @param request CreateRunRequest
 * @param headers CreateRunHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateRunResponse
 */
async function createRunWithOptions(request: CreateRunRequest, headers: CreateRunHeaders, runtime: Util.RuntimeOptions): CreateRunResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.assistantId)) {
    body['assistantId'] = request.assistantId;
  }
  if (!Util.isUnset(request.originalAssistantId)) {
    body['originalAssistantId'] = request.originalAssistantId;
  }
  if (!Util.isUnset(request.sourceIdOfOriginalAssistantId)) {
    body['sourceIdOfOriginalAssistantId'] = request.sourceIdOfOriginalAssistantId;
  }
  if (!Util.isUnset(request.sourceTypeOfOriginalAssistantId)) {
    body['sourceTypeOfOriginalAssistantId'] = request.sourceTypeOfOriginalAssistantId;
  }
  if (!Util.isUnset(request.stream)) {
    body['stream'] = request.stream;
  }
  if (!Util.isUnset(request.threadId)) {
    body['threadId'] = request.threadId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountId)) {
    realHeaders['accountId'] = Util.toJSONString(headers.accountId);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateRun',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/ai/v1/assistant/createRun`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建运行
 *
 * @param request CreateRunRequest
 * @return CreateRunResponse
 */
async function createRun(request: CreateRunRequest): CreateRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateRunHeaders{};
  return createRunWithOptions(request, headers, runtime);
}

model CreateScenegroupHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model CreateScenegroupShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateScenegroupRequest {
  addFriendForbidden?: long(name='AddFriendForbidden', example='0'),
  allMembersCanCreateCalendar?: long(name='AllMembersCanCreateCalendar', example='0'),
  allMembersCanCreateMcsConf?: long(name='AllMembersCanCreateMcsConf', example='0'),
  chatBannedType?: long(name='ChatBannedType', example='0'),
  groupEmailDisabled?: long(name='GroupEmailDisabled', example='0'),
  groupLiveSwitch?: long(name='GroupLiveSwitch', example='1'),
  icon?: string(name='Icon', example='@lADOADma*****QKA'),
  managementType?: long(name='ManagementType', example='0'),
  membersToAdminChat?: long(name='MembersToAdminChat', example='0'),
  mentionAllAuthority?: long(name='MentionAllAuthority', example='0'),
  onlyAdminCanDing?: long(name='OnlyAdminCanDing', example='0'),
  onlyAdminCanSetMsgTop?: long(name='OnlyAdminCanSetMsgTop', example='0'),
  searchable?: long(name='Searchable', example='0'),
  showHistoryType?: long(name='ShowHistoryType', example='0'),
  subadminIds?: string(name='SubadminIds', example='072*****,013*****'),
  templateId?: string(name='TemplateId', description='This parameter is required.', example='c354***-***-***-b4ea-6f1ab***65'),
  title?: string(name='Title', description='This parameter is required.', example='测试群'),
  userIds?: string(name='UserIds', example='072*****,013*****'),
  uuid?: string(name='Uuid', example='axcf*-*****-*****-23da*'),
  validationType?: long(name='ValidationType', example='0'),
}

model CreateScenegroupResponseBody = {
  openConversationId?: string(name='openConversationId', example='cid1324wwwerxxx'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model CreateScenegroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateScenegroupResponseBody(name='body'),
}

/**
 * @summary 创建场景群
 *
 * @param request CreateScenegroupRequest
 * @param tmpHeader CreateScenegroupHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateScenegroupResponse
 */
async function createScenegroupWithOptions(request: CreateScenegroupRequest, tmpHeader: CreateScenegroupHeaders, runtime: Util.RuntimeOptions): CreateScenegroupResponse {
  Util.validateModel(request);
  var headers = new CreateScenegroupShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.addFriendForbidden)) {
    body['AddFriendForbidden'] = request.addFriendForbidden;
  }
  if (!Util.isUnset(request.allMembersCanCreateCalendar)) {
    body['AllMembersCanCreateCalendar'] = request.allMembersCanCreateCalendar;
  }
  if (!Util.isUnset(request.allMembersCanCreateMcsConf)) {
    body['AllMembersCanCreateMcsConf'] = request.allMembersCanCreateMcsConf;
  }
  if (!Util.isUnset(request.chatBannedType)) {
    body['ChatBannedType'] = request.chatBannedType;
  }
  if (!Util.isUnset(request.groupEmailDisabled)) {
    body['GroupEmailDisabled'] = request.groupEmailDisabled;
  }
  if (!Util.isUnset(request.groupLiveSwitch)) {
    body['GroupLiveSwitch'] = request.groupLiveSwitch;
  }
  if (!Util.isUnset(request.icon)) {
    body['Icon'] = request.icon;
  }
  if (!Util.isUnset(request.managementType)) {
    body['ManagementType'] = request.managementType;
  }
  if (!Util.isUnset(request.membersToAdminChat)) {
    body['MembersToAdminChat'] = request.membersToAdminChat;
  }
  if (!Util.isUnset(request.mentionAllAuthority)) {
    body['MentionAllAuthority'] = request.mentionAllAuthority;
  }
  if (!Util.isUnset(request.onlyAdminCanDing)) {
    body['OnlyAdminCanDing'] = request.onlyAdminCanDing;
  }
  if (!Util.isUnset(request.onlyAdminCanSetMsgTop)) {
    body['OnlyAdminCanSetMsgTop'] = request.onlyAdminCanSetMsgTop;
  }
  if (!Util.isUnset(request.searchable)) {
    body['Searchable'] = request.searchable;
  }
  if (!Util.isUnset(request.showHistoryType)) {
    body['ShowHistoryType'] = request.showHistoryType;
  }
  if (!Util.isUnset(request.subadminIds)) {
    body['SubadminIds'] = request.subadminIds;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  if (!Util.isUnset(request.userIds)) {
    body['UserIds'] = request.userIds;
  }
  if (!Util.isUnset(request.uuid)) {
    body['Uuid'] = request.uuid;
  }
  if (!Util.isUnset(request.validationType)) {
    body['ValidationType'] = request.validationType;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateScenegroup',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/im/createScenegroup`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建场景群
 *
 * @param request CreateScenegroupRequest
 * @return CreateScenegroupResponse
 */
async function createScenegroup(request: CreateScenegroupRequest): CreateScenegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateScenegroupHeaders{};
  return createScenegroupWithOptions(request, headers, runtime);
}

model CreateScheduleConferenceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model CreateScheduleConferenceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateScheduleConferenceRequest {
  endTime?: long(name='EndTime', description='This parameter is required.', example='1687928400000L'),
  scheduleConfSettingModel?: {
    cohostUserIds?: [ string ](name='CohostUserIds'),
    confAllowedCorpId?: string(name='ConfAllowedCorpId', example='dingc02f685fa06381c44ac5d6980864d335'),
    hostUserId?: string(name='HostUserId', example='2iPOLbpUNMLzB5LuwggiiqiPwiEiE'),
    lockRoom?: int32(name='LockRoom', example='0'),
    moziConfOpenRecordSetting?: {
      isFollowHost?: boolean(name='IsFollowHost'),
      mode?: string(name='Mode', example='grid'),
      recordAutoStart?: int32(name='RecordAutoStart', example='0'),
      recordAutoStartType?: int32(name='RecordAutoStartType', example='0'),
    }(name='MoziConfOpenRecordSetting'),
    moziConfVirtualExtraSetting?: {
      cloudRecordOwnerUserId?: string(name='CloudRecordOwnerUserId', example='2iPOLbpUNMLzB5LuwggiiqiPwiEiE'),
      enableChat?: int32(name='EnableChat', example='0'),
      enableWebAnonymousJoin?: boolean(name='EnableWebAnonymousJoin'),
      joinBeforeHost?: int32(name='JoinBeforeHost', example='0'),
      lockMediaStatusMicMute?: int32(name='LockMediaStatusMicMute', example='0'),
      lockNick?: int32(name='LockNick', example='0'),
      minutesOwnerUserId?: string(name='MinutesOwnerUserId'),
      moziConfExtensionAppSettings?: [ 
        {
          autoOpenMode?: int32(name='AutoOpenMode', example='0'),
          coolAppCode?: string(name='CoolAppCode', example='xxx'),
          extensionAppBizData?: string(name='ExtensionAppBizData', example='xxx'),
        }
      ](name='MoziConfExtensionAppSettings'),
      pushAllMeetingRecords?: boolean(name='PushAllMeetingRecords'),
      pushCloudRecordCard?: boolean(name='PushCloudRecordCard'),
      pushMinutesCard?: boolean(name='PushMinutesCard'),
      waitingRoom?: int32(name='WaitingRoom', example='1'),
    }(name='MoziConfVirtualExtraSetting'),
    muteOnJoin?: int32(name='MuteOnJoin', example='1'),
    screenShareForbidden?: int32(name='ScreenShareForbidden', example='0'),
  }(name='ScheduleConfSettingModel'),
  startTime?: long(name='StartTime', description='This parameter is required.', example='1687924800000L'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  title?: string(name='Title', description='This parameter is required.', example='预约会议标题'),
}

model CreateScheduleConferenceShrinkRequest {
  endTime?: long(name='EndTime', description='This parameter is required.', example='1687928400000L'),
  scheduleConfSettingModelShrink?: string(name='ScheduleConfSettingModel'),
  startTime?: long(name='StartTime', description='This parameter is required.', example='1687924800000L'),
  tenantContextShrink?: string(name='TenantContext'),
  title?: string(name='Title', description='This parameter is required.', example='预约会议标题'),
}

model CreateScheduleConferenceResponseBody = {
  phones?: [ string ](name='phones', example='+861234567'),
  requestId?: string(name='requestId', description='requestId', example='1234567'),
  roomCode?: string(name='roomCode', example='83150xxxxxx'),
  scheduleConferenceId?: string(name='scheduleConferenceId', example='5c7c9bb1-b256-4dc5-xxxx-xxxxxxxxxxxx'),
  url?: string(name='url', example='https://meeting.dingtalk.com/j/knvMq1ixxxx'),
}

model CreateScheduleConferenceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateScheduleConferenceResponseBody(name='body'),
}

/**
 * @summary 创建预约会议
 *
 * @param tmpReq CreateScheduleConferenceRequest
 * @param tmpHeader CreateScheduleConferenceHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateScheduleConferenceResponse
 */
async function createScheduleConferenceWithOptions(tmpReq: CreateScheduleConferenceRequest, tmpHeader: CreateScheduleConferenceHeaders, runtime: Util.RuntimeOptions): CreateScheduleConferenceResponse {
  Util.validateModel(tmpReq);
  var request = new CreateScheduleConferenceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateScheduleConferenceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.scheduleConfSettingModel)) {
    request.scheduleConfSettingModelShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scheduleConfSettingModel, 'ScheduleConfSettingModel', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.scheduleConfSettingModelShrink)) {
    body['ScheduleConfSettingModel'] = request.scheduleConfSettingModelShrink;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateScheduleConference',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/createScheduleConference`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建预约会议
 *
 * @param request CreateScheduleConferenceRequest
 * @return CreateScheduleConferenceResponse
 */
async function createScheduleConference(request: CreateScheduleConferenceRequest): CreateScheduleConferenceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateScheduleConferenceHeaders{};
  return createScheduleConferenceWithOptions(request, headers, runtime);
}

model CreateSearchDomeHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    userToken?: string(name='userToken', example='ba3a9b612345678d8fedf544ef69d19e'),
  }(name='AccountContext'),
}

model CreateSearchDomeShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateSearchDomeRequest {
  content?: string(name='Content', example='{}'),
  endTime?: long(name='EndTime', example='1699265024987'),
  resId?: string(name='ResId', example='1030'),
  startTime?: long(name='StartTime', example='1699265024987'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  userIdList?: [ string ](name='UserIdList'),
}

model CreateSearchDomeShrinkRequest {
  content?: string(name='Content', example='{}'),
  endTime?: long(name='EndTime', example='1699265024987'),
  resId?: string(name='ResId', example='1030'),
  startTime?: long(name='StartTime', example='1699265024987'),
  tenantContextShrink?: string(name='TenantContext'),
  userIdListShrink?: string(name='UserIdList'),
}

model CreateSearchDomeResponseBody = {
  arguments?: [ any ](name='arguments', example='[]'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model CreateSearchDomeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSearchDomeResponseBody(name='body'),
}

/**
 * @summary 发布钉钉搜索穹顶
 *
 * @param tmpReq CreateSearchDomeRequest
 * @param tmpHeader CreateSearchDomeHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSearchDomeResponse
 */
async function createSearchDomeWithOptions(tmpReq: CreateSearchDomeRequest, tmpHeader: CreateSearchDomeHeaders, runtime: Util.RuntimeOptions): CreateSearchDomeResponse {
  Util.validateModel(tmpReq);
  var request = new CreateSearchDomeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateSearchDomeShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.userIdList)) {
    request.userIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userIdList, 'UserIdList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.resId)) {
    body['ResId'] = request.resId;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.userIdListShrink)) {
    body['UserIdList'] = request.userIdListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSearchDome',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/watt/createSearchDome`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 发布钉钉搜索穹顶
 *
 * @param request CreateSearchDomeRequest
 * @return CreateSearchDomeResponse
 */
async function createSearchDome(request: CreateSearchDomeRequest): CreateSearchDomeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateSearchDomeHeaders{};
  return createSearchDomeWithOptions(request, headers, runtime);
}

model CreateSearchKeywordHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    userToken?: string(name='userToken', example='ba3a9b612345678d8fedf544ef69d19e'),
  }(name='AccountContext'),
}

model CreateSearchKeywordShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateSearchKeywordRequest {
  content?: string(name='Content', example='{}'),
  endTime?: long(name='EndTime', example='1699265024987'),
  resId?: string(name='ResId', example='1028'),
  startTime?: long(name='StartTime', example='1699265024987'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  userIdList?: [ string ](name='UserIdList'),
}

model CreateSearchKeywordShrinkRequest {
  content?: string(name='Content', example='{}'),
  endTime?: long(name='EndTime', example='1699265024987'),
  resId?: string(name='ResId', example='1028'),
  startTime?: long(name='StartTime', example='1699265024987'),
  tenantContextShrink?: string(name='TenantContext'),
  userIdListShrink?: string(name='UserIdList'),
}

model CreateSearchKeywordResponseBody = {
  arguments?: [ any ](name='arguments', example='[]'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model CreateSearchKeywordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSearchKeywordResponseBody(name='body'),
}

/**
 * @summary 发布钉钉搜索关键词
 *
 * @param tmpReq CreateSearchKeywordRequest
 * @param tmpHeader CreateSearchKeywordHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSearchKeywordResponse
 */
async function createSearchKeywordWithOptions(tmpReq: CreateSearchKeywordRequest, tmpHeader: CreateSearchKeywordHeaders, runtime: Util.RuntimeOptions): CreateSearchKeywordResponse {
  Util.validateModel(tmpReq);
  var request = new CreateSearchKeywordShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateSearchKeywordShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.userIdList)) {
    request.userIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userIdList, 'UserIdList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.resId)) {
    body['ResId'] = request.resId;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.userIdListShrink)) {
    body['UserIdList'] = request.userIdListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSearchKeyword',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/watt/createSearchKeyword`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 发布钉钉搜索关键词
 *
 * @param request CreateSearchKeywordRequest
 * @return CreateSearchKeywordResponse
 */
async function createSearchKeyword(request: CreateSearchKeywordRequest): CreateSearchKeywordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateSearchKeywordHeaders{};
  return createSearchKeywordWithOptions(request, headers, runtime);
}

model CreateSheetHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model CreateSheetShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateSheetRequest {
  name?: string(name='Name', description='This parameter is required.', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model CreateSheetShrinkRequest {
  name?: string(name='Name', description='This parameter is required.', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model CreateSheetResponseBody = {
  id?: string(name='id', example='stxxxx'),
  name?: string(name='name', example='Sheet1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  visibility?: string(name='visibility', example='visible'),
}

model CreateSheetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSheetResponseBody(name='body'),
}

/**
 * @summary 创建工作表
 *
 * @param tmpReq CreateSheetRequest
 * @param tmpHeader CreateSheetHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSheetResponse
 */
async function createSheetWithOptions(tmpReq: CreateSheetRequest, tmpHeader: CreateSheetHeaders, runtime: Util.RuntimeOptions): CreateSheetResponse {
  Util.validateModel(tmpReq);
  var request = new CreateSheetShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateSheetShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSheet',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/createSheet`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建工作表
 *
 * @param request CreateSheetRequest
 * @return CreateSheetResponse
 */
async function createSheet(request: CreateSheetRequest): CreateSheetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateSheetHeaders{};
  return createSheetWithOptions(request, headers, runtime);
}

model CreateSubscribedCalendarHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model CreateSubscribedCalendarShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateSubscribedCalendarRequest {
  description?: string(name='Description'),
  managers?: [ string ](name='Managers'),
  name?: string(name='Name', description='This parameter is required.'),
  subscribeScope?: {
    corpIds?: [ string ](name='CorpIds'),
    openConversationIds?: [ string ](name='OpenConversationIds'),
    userIds?: [ string ](name='UserIds'),
  }(name='SubscribeScope', description='This parameter is required.'),
}

model CreateSubscribedCalendarShrinkRequest {
  description?: string(name='Description'),
  managersShrink?: string(name='Managers'),
  name?: string(name='Name', description='This parameter is required.'),
  subscribeScopeShrink?: string(name='SubscribeScope', description='This parameter is required.'),
}

model CreateSubscribedCalendarResponseBody = {
  calendarId?: string(name='calendarId', example='M5MjkxNDUxQHVzZXJzLmRpbmd0YWxrLmxxxxxxx'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model CreateSubscribedCalendarResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSubscribedCalendarResponseBody(name='body'),
}

/**
 * @summary 创建订阅日历
 *
 * @param tmpReq CreateSubscribedCalendarRequest
 * @param tmpHeader CreateSubscribedCalendarHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSubscribedCalendarResponse
 */
async function createSubscribedCalendarWithOptions(tmpReq: CreateSubscribedCalendarRequest, tmpHeader: CreateSubscribedCalendarHeaders, runtime: Util.RuntimeOptions): CreateSubscribedCalendarResponse {
  Util.validateModel(tmpReq);
  var request = new CreateSubscribedCalendarShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateSubscribedCalendarShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.managers)) {
    request.managersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.managers, 'Managers', 'json');
  }
  if (!Util.isUnset(tmpReq.subscribeScope)) {
    request.subscribeScopeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.subscribeScope, 'SubscribeScope', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.managersShrink)) {
    body['Managers'] = request.managersShrink;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.subscribeScopeShrink)) {
    body['SubscribeScope'] = request.subscribeScopeShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSubscribedCalendar',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/createSubscribedCalendar`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建订阅日历
 *
 * @param request CreateSubscribedCalendarRequest
 * @return CreateSubscribedCalendarResponse
 */
async function createSubscribedCalendar(request: CreateSubscribedCalendarRequest): CreateSubscribedCalendarResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateSubscribedCalendarHeaders{};
  return createSubscribedCalendarWithOptions(request, headers, runtime);
}

model CreateThreadHeaders {
  commonHeaders?: map[string]string,
  accountId?: string(name='accountId', example='123456'),
}

model CreateThreadRequest {
  assistantId?: string(name='assistantId', description='This parameter is required.', example='assistantId1'),
  originalAssistantId?: string(name='originalAssistantId', example='assistantId'),
  sourceIdOfOriginalAssistantId?: string(name='sourceIdOfOriginalAssistantId', example='agentKey1'),
  sourceTypeOfOriginalAssistantId?: int32(name='sourceTypeOfOriginalAssistantId'),
}

model CreateThreadResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  thread?: {
    createAt?: long(name='createAt'),
    id?: string(name='id'),
  }(name='thread'),
}

model CreateThreadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateThreadResponseBody(name='body'),
}

/**
 * @summary 创建线程
 *
 * @param request CreateThreadRequest
 * @param headers CreateThreadHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateThreadResponse
 */
async function createThreadWithOptions(request: CreateThreadRequest, headers: CreateThreadHeaders, runtime: Util.RuntimeOptions): CreateThreadResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.assistantId)) {
    body['assistantId'] = request.assistantId;
  }
  if (!Util.isUnset(request.originalAssistantId)) {
    body['originalAssistantId'] = request.originalAssistantId;
  }
  if (!Util.isUnset(request.sourceIdOfOriginalAssistantId)) {
    body['sourceIdOfOriginalAssistantId'] = request.sourceIdOfOriginalAssistantId;
  }
  if (!Util.isUnset(request.sourceTypeOfOriginalAssistantId)) {
    body['sourceTypeOfOriginalAssistantId'] = request.sourceTypeOfOriginalAssistantId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountId)) {
    realHeaders['accountId'] = Util.toJSONString(headers.accountId);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateThread',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/ai/v1/assistant/createThread`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建线程
 *
 * @param request CreateThreadRequest
 * @return CreateThreadResponse
 */
async function createThread(request: CreateThreadRequest): CreateThreadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateThreadHeaders{};
  return createThreadWithOptions(request, headers, runtime);
}

model CreateTicketHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model CreateTicketShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateTicketRequest {
  customFields?: string(name='CustomFields', example='[]'),
  notify?: {
    groupNoticeReceiverUserIds?: [ string ](name='GroupNoticeReceiverUserIds'),
    noticeAllGroupMember?: boolean(name='NoticeAllGroupMember', example='false'),
    workNoticeReceiverUserIds?: [ string ](name='WorkNoticeReceiverUserIds'),
  }(name='Notify'),
  openTeamId?: string(name='OpenTeamId', description='This parameter is required.', example='G3IOe205RLciE'),
  openTemplateBizId?: string(name='OpenTemplateBizId', description='This parameter is required.', example='xxxx'),
  processorUserIds?: [ string ](name='ProcessorUserIds', description='This parameter is required.'),
  scene?: string(name='Scene', description='This parameter is required.', example='SG'),
  sceneContext?: {
    groupMsgs?: [ 
      {
        anchor?: boolean(name='Anchor', example='true'),
        openMsgId?: string(name='OpenMsgId', example='1234567'),
      }
    ](name='GroupMsgs'),
    openConversationId?: string(name='OpenConversationId', example='cidDKVAOW8yVWPEN+WZfwSSAQ=='),
    relevantorUserIds?: [ string ](name='RelevantorUserIds'),
    topicId?: string(name='TopicId', example='42674892'),
  }(name='SceneContext'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  title?: string(name='Title', description='This parameter is required.', example='Killer Ball Wo Mouichido'),
}

model CreateTicketShrinkRequest {
  customFields?: string(name='CustomFields', example='[]'),
  notifyShrink?: string(name='Notify'),
  openTeamId?: string(name='OpenTeamId', description='This parameter is required.', example='G3IOe205RLciE'),
  openTemplateBizId?: string(name='OpenTemplateBizId', description='This parameter is required.', example='xxxx'),
  processorUserIdsShrink?: string(name='ProcessorUserIds', description='This parameter is required.'),
  scene?: string(name='Scene', description='This parameter is required.', example='SG'),
  sceneContextShrink?: string(name='SceneContext'),
  tenantContextShrink?: string(name='TenantContext'),
  title?: string(name='Title', description='This parameter is required.', example='Killer Ball Wo Mouichido'),
}

model CreateTicketResponseBody = {
  openTicketId?: string(name='openTicketId', example='a8iSxxxxtgiE'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model CreateTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTicketResponseBody(name='body'),
}

/**
 * @summary 创建工单
 *
 * @param tmpReq CreateTicketRequest
 * @param tmpHeader CreateTicketHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateTicketResponse
 */
async function createTicketWithOptions(tmpReq: CreateTicketRequest, tmpHeader: CreateTicketHeaders, runtime: Util.RuntimeOptions): CreateTicketResponse {
  Util.validateModel(tmpReq);
  var request = new CreateTicketShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateTicketShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.notify)) {
    request.notifyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notify, 'Notify', 'json');
  }
  if (!Util.isUnset(tmpReq.processorUserIds)) {
    request.processorUserIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.processorUserIds, 'ProcessorUserIds', 'json');
  }
  if (!Util.isUnset(tmpReq.sceneContext)) {
    request.sceneContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sceneContext, 'SceneContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.customFields)) {
    body['CustomFields'] = request.customFields;
  }
  if (!Util.isUnset(request.notifyShrink)) {
    body['Notify'] = request.notifyShrink;
  }
  if (!Util.isUnset(request.openTeamId)) {
    body['OpenTeamId'] = request.openTeamId;
  }
  if (!Util.isUnset(request.openTemplateBizId)) {
    body['OpenTemplateBizId'] = request.openTemplateBizId;
  }
  if (!Util.isUnset(request.processorUserIdsShrink)) {
    body['ProcessorUserIds'] = request.processorUserIdsShrink;
  }
  if (!Util.isUnset(request.scene)) {
    body['Scene'] = request.scene;
  }
  if (!Util.isUnset(request.sceneContextShrink)) {
    body['SceneContext'] = request.sceneContextShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTicket',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ticket/createTicket`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建工单
 *
 * @param request CreateTicketRequest
 * @return CreateTicketResponse
 */
async function createTicket(request: CreateTicketRequest): CreateTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateTicketHeaders{};
  return createTicketWithOptions(request, headers, runtime);
}

model CreateTodoTaskHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model CreateTodoTaskShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateTodoTaskRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  actionList?: [ 
    {
      actionKey?: string(name='actionKey'),
      actionType?: int32(name='actionType'),
      buttonStyleType?: int32(name='buttonStyleType'),
      param?: {
        body?: string(name='body'),
        header?: map[string]string(name='header'),
      }(name='param'),
      pcUrl?: string(name='pcUrl'),
      title?: string(name='title'),
      url?: string(name='url'),
    }
  ](name='actionList'),
  contentFieldList?: [ 
    {
      fieldKey?: string(name='fieldKey', description='fieldKey', example='fieldKey'),
      fieldValue?: string(name='fieldValue', description='fieldValue', example='fieldValue'),
    }
  ](name='contentFieldList'),
  creatorId?: string(name='creatorId', example='PUoiinWIpa2yH2ymhiiGiP6g'),
  description?: string(name='description', example='应用可以调用该接口发起一个钉钉待办任务，该待办事项会出现在钉钉客户端“待办”页面，需要注意的是，通过开放接口发起的待办，目前仅支持直接跳转ISV应用详情页（ISV在调该接口时需传入自身应用详情页链接）。'),
  detailUrl?: {
    appUrl?: string(name='appUrl', example='https://www.dingtalk.com'),
    pcUrl?: string(name='pcUrl', example='https://www.dingtalk.com'),
  }(name='detailUrl'),
  dueTime?: long(name='dueTime', example='1617675000000'),
  executorIds?: [ string ](name='executorIds'),
  isOnlyShowExecutor?: boolean(name='isOnlyShowExecutor', example='true'),
  notifyConfigs?: {
    dingNotify?: string(name='dingNotify', example='1'),
  }(name='notifyConfigs'),
  operatorId?: string(name='operatorId', example='12345'),
  participantIds?: [ string ](name='participantIds'),
  priority?: int32(name='priority', example='20'),
  sourceId?: string(name='sourceId', example='isv_dingtalkTodo1'),
  subject?: string(name='subject', description='This parameter is required.', example='接入钉钉待办'),
}

model CreateTodoTaskShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  actionListShrink?: string(name='actionList'),
  contentFieldListShrink?: string(name='contentFieldList'),
  creatorId?: string(name='creatorId', example='PUoiinWIpa2yH2ymhiiGiP6g'),
  description?: string(name='description', example='应用可以调用该接口发起一个钉钉待办任务，该待办事项会出现在钉钉客户端“待办”页面，需要注意的是，通过开放接口发起的待办，目前仅支持直接跳转ISV应用详情页（ISV在调该接口时需传入自身应用详情页链接）。'),
  detailUrlShrink?: string(name='detailUrl'),
  dueTime?: long(name='dueTime', example='1617675000000'),
  executorIdsShrink?: string(name='executorIds'),
  isOnlyShowExecutor?: boolean(name='isOnlyShowExecutor', example='true'),
  notifyConfigsShrink?: string(name='notifyConfigs'),
  operatorId?: string(name='operatorId', example='12345'),
  participantIdsShrink?: string(name='participantIds'),
  priority?: int32(name='priority', example='20'),
  sourceId?: string(name='sourceId', example='isv_dingtalkTodo1'),
  subject?: string(name='subject', description='This parameter is required.', example='接入钉钉待办'),
}

model CreateTodoTaskResponseBody = {
  bizTag?: string(name='bizTag', example='isv_dingtalkTodo'),
  contentFieldList?: [ 
    {
      fieldKey?: string(name='fieldKey', description='fieldKey', example='fieldKey'),
      fieldValue?: string(name='fieldValue', description='fieldValue', example='fieldValue'),
    }
  ](name='contentFieldList'),
  createdTime?: long(name='createdTime', example='1617675200000'),
  creatorId?: string(name='creatorId', example='PUoiinWIpa2yH2ymhiiGiP6g'),
  description?: string(name='description', example='应用可以调用该接口发起一个钉钉待办任务，该待办事项会出现在钉钉客户端“待办”页面，需要注意的是，通过开放接口发起的待办，目前仅支持直接跳转ISV应用详情页（ISV在调该接口时需传入自身应用详情页链接）。'),
  detailUrl?: {
    appUrl?: string(name='appUrl', example='https://www.dingtalk.com'),
    pcUrl?: string(name='pcUrl', example='https://www.dingtalk.com'),
  }(name='detailUrl'),
  done?: boolean(name='done', example='false'),
  dueTime?: long(name='dueTime', example='1617675100000'),
  executorIds?: [ string ](name='executorIds'),
  finishTime?: long(name='finishTime', example='1617675200000'),
  id?: string(name='id', example='OPJpwtwPVNGIFKURjrzd'),
  isOnlyShowExecutor?: boolean(name='isOnlyShowExecutor', example='true'),
  modifiedTime?: long(name='modifiedTime', example='1617675200000'),
  modifierId?: string(name='modifierId', example='PUoiinWIpa2yH2ymhiiGiP6g'),
  notifyConfigs?: {
    dingNotify?: string(name='dingNotify', example='1'),
  }(name='notifyConfigs'),
  participantIds?: [ string ](name='participantIds'),
  priority?: int32(name='priority', example='20'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  source?: string(name='source', example='isv_dingtalkTodo'),
  sourceId?: string(name='sourceId', example='isv_dingtalkTodo1'),
  startTime?: long(name='startTime', example='1617675000000'),
  subject?: string(name='subject', example='接入钉钉待办'),
}

model CreateTodoTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTodoTaskResponseBody(name='body'),
}

/**
 * @summary 创建代办
 *
 * @param tmpReq CreateTodoTaskRequest
 * @param tmpHeader CreateTodoTaskHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateTodoTaskResponse
 */
async function createTodoTaskWithOptions(tmpReq: CreateTodoTaskRequest, tmpHeader: CreateTodoTaskHeaders, runtime: Util.RuntimeOptions): CreateTodoTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateTodoTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateTodoTaskShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.actionList)) {
    request.actionListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.actionList, 'actionList', 'json');
  }
  if (!Util.isUnset(tmpReq.contentFieldList)) {
    request.contentFieldListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.contentFieldList, 'contentFieldList', 'json');
  }
  if (!Util.isUnset(tmpReq.detailUrl)) {
    request.detailUrlShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.detailUrl, 'detailUrl', 'json');
  }
  if (!Util.isUnset(tmpReq.executorIds)) {
    request.executorIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.executorIds, 'executorIds', 'json');
  }
  if (!Util.isUnset(tmpReq.notifyConfigs)) {
    request.notifyConfigsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notifyConfigs, 'notifyConfigs', 'json');
  }
  if (!Util.isUnset(tmpReq.participantIds)) {
    request.participantIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.participantIds, 'participantIds', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.operatorId)) {
    query['operatorId'] = request.operatorId;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.actionListShrink)) {
    body['actionList'] = request.actionListShrink;
  }
  if (!Util.isUnset(request.contentFieldListShrink)) {
    body['contentFieldList'] = request.contentFieldListShrink;
  }
  if (!Util.isUnset(request.creatorId)) {
    body['creatorId'] = request.creatorId;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.detailUrlShrink)) {
    body['detailUrl'] = request.detailUrlShrink;
  }
  if (!Util.isUnset(request.dueTime)) {
    body['dueTime'] = request.dueTime;
  }
  if (!Util.isUnset(request.executorIdsShrink)) {
    body['executorIds'] = request.executorIdsShrink;
  }
  if (!Util.isUnset(request.isOnlyShowExecutor)) {
    body['isOnlyShowExecutor'] = request.isOnlyShowExecutor;
  }
  if (!Util.isUnset(request.notifyConfigsShrink)) {
    body['notifyConfigs'] = request.notifyConfigsShrink;
  }
  if (!Util.isUnset(request.participantIdsShrink)) {
    body['participantIds'] = request.participantIdsShrink;
  }
  if (!Util.isUnset(request.priority)) {
    body['priority'] = request.priority;
  }
  if (!Util.isUnset(request.sourceId)) {
    body['sourceId'] = request.sourceId;
  }
  if (!Util.isUnset(request.subject)) {
    body['subject'] = request.subject;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTodoTask',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/task/createTodoTask`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建代办
 *
 * @param request CreateTodoTaskRequest
 * @return CreateTodoTaskResponse
 */
async function createTodoTask(request: CreateTodoTaskRequest): CreateTodoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateTodoTaskHeaders{};
  return createTodoTaskWithOptions(request, headers, runtime);
}

model CreateVideoConferenceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.'),
  }(name='AccountContext'),
}

model CreateVideoConferenceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateVideoConferenceRequest {
  confTitle?: string(name='ConfTitle', description='This parameter is required.'),
  inviteCaller?: boolean(name='InviteCaller', example='true'),
  inviteUserIds?: [ string ](name='InviteUserIds'),
}

model CreateVideoConferenceShrinkRequest {
  confTitle?: string(name='ConfTitle', description='This parameter is required.'),
  inviteCaller?: boolean(name='InviteCaller', example='true'),
  inviteUserIdsShrink?: string(name='InviteUserIds'),
}

model CreateVideoConferenceResponseBody = {
  conferenceId?: string(name='conferenceId', example='607452e01401526ee39609e1'),
  conferencePassword?: string(name='conferencePassword', example='1151302294'),
  externalLinkUrl?: string(name='externalLinkUrl', example='https://pre-meeting.dingtalk.com/app?roomCode=68550708396&token=1_59209c43-431c-4e57-a0f8-11bebdb3db7f'),
  hostPassword?: string(name='hostPassword', example='2142817614'),
  phoneNumbers?: [ string ](name='phoneNumbers'),
  requestId?: string(name='requestId', description='requestId', example='3032809F-8C14-57E2-9B76-7AC2134FE3C8'),
  roomCode?: string(name='roomCode', example='123'),
}

model CreateVideoConferenceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVideoConferenceResponseBody(name='body'),
}

/**
 * @summary 创建视频会议
 *
 * @param tmpReq CreateVideoConferenceRequest
 * @param tmpHeader CreateVideoConferenceHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateVideoConferenceResponse
 */
async function createVideoConferenceWithOptions(tmpReq: CreateVideoConferenceRequest, tmpHeader: CreateVideoConferenceHeaders, runtime: Util.RuntimeOptions): CreateVideoConferenceResponse {
  Util.validateModel(tmpReq);
  var request = new CreateVideoConferenceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateVideoConferenceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.inviteUserIds)) {
    request.inviteUserIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.inviteUserIds, 'InviteUserIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.confTitle)) {
    body['ConfTitle'] = request.confTitle;
  }
  if (!Util.isUnset(request.inviteCaller)) {
    body['InviteCaller'] = request.inviteCaller;
  }
  if (!Util.isUnset(request.inviteUserIdsShrink)) {
    body['InviteUserIds'] = request.inviteUserIdsShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateVideoConference',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/createVideoConference`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建视频会议
 *
 * @param request CreateVideoConferenceRequest
 * @return CreateVideoConferenceResponse
 */
async function createVideoConference(request: CreateVideoConferenceRequest): CreateVideoConferenceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateVideoConferenceHeaders{};
  return createVideoConferenceWithOptions(request, headers, runtime);
}

model CreateWorkspaceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model CreateWorkspaceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateWorkspaceRequest {
  description?: string(name='Description'),
  name?: string(name='Name', description='This parameter is required.'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model CreateWorkspaceShrinkRequest {
  description?: string(name='Description'),
  name?: string(name='Name', description='This parameter is required.'),
  tenantContextShrink?: string(name='TenantContext'),
}

model CreateWorkspaceResponseBody = {
  description?: string(name='description', example='知识库描述'),
  name?: string(name='name', example='知识库'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  url?: string(name='url', example='https://xxx/workspaceId'),
  workspaceId?: string(name='workspaceId', example='YRBGvyxxxx'),
}

model CreateWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWorkspaceResponseBody(name='body'),
}

/**
 * @summary 创建知识库
 *
 * @param tmpReq CreateWorkspaceRequest
 * @param tmpHeader CreateWorkspaceHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateWorkspaceResponse
 */
async function createWorkspaceWithOptions(tmpReq: CreateWorkspaceRequest, tmpHeader: CreateWorkspaceHeaders, runtime: Util.RuntimeOptions): CreateWorkspaceResponse {
  Util.validateModel(tmpReq);
  var request = new CreateWorkspaceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateWorkspaceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateWorkspace',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/createWorkspace`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建知识库
 *
 * @param request CreateWorkspaceRequest
 * @return CreateWorkspaceResponse
 */
async function createWorkspace(request: CreateWorkspaceRequest): CreateWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateWorkspaceHeaders{};
  return createWorkspaceWithOptions(request, headers, runtime);
}

model CreateWorkspaceDocHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model CreateWorkspaceDocShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateWorkspaceDocRequest {
  docType?: string(name='DocType', description='This parameter is required.', example='DOC'),
  name?: string(name='Name', description='This parameter is required.', example='测试文档'),
  parentNodeId?: string(name='ParentNodeId', example='YRBGv0Ye'),
  templateId?: string(name='TemplateId', example='123243'),
  templateType?: string(name='TemplateType', example='team_template'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='123'),
}

model CreateWorkspaceDocShrinkRequest {
  docType?: string(name='DocType', description='This parameter is required.', example='DOC'),
  name?: string(name='Name', description='This parameter is required.', example='测试文档'),
  parentNodeId?: string(name='ParentNodeId', example='YRBGv0Ye'),
  templateId?: string(name='TemplateId', example='123243'),
  templateType?: string(name='TemplateType', example='team_template'),
  tenantContextShrink?: string(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='123'),
}

model CreateWorkspaceDocResponseBody = {
  dentryUuid?: string(name='dentryUuid', example='YRBcvy'),
  docKey?: string(name='docKey', example='QoJGq7xxx'),
  nodeId?: string(name='nodeId', example='YRBGv0Ye'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  url?: string(name='url', example='https://xxx/workspaceId/docs/nodeId'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
  workspaceId?: string(name='workspaceId', example='YRBGvy'),
}

model CreateWorkspaceDocResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWorkspaceDocResponseBody(name='body'),
}

/**
 * @summary 创建知识库文档
 *
 * @param tmpReq CreateWorkspaceDocRequest
 * @param tmpHeader CreateWorkspaceDocHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateWorkspaceDocResponse
 */
async function createWorkspaceDocWithOptions(tmpReq: CreateWorkspaceDocRequest, tmpHeader: CreateWorkspaceDocHeaders, runtime: Util.RuntimeOptions): CreateWorkspaceDocResponse {
  Util.validateModel(tmpReq);
  var request = new CreateWorkspaceDocShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateWorkspaceDocShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.docType)) {
    body['DocType'] = request.docType;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.parentNodeId)) {
    body['ParentNodeId'] = request.parentNodeId;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.templateType)) {
    body['TemplateType'] = request.templateType;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateWorkspaceDoc',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/createWorkspaceDoc`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建知识库文档
 *
 * @param request CreateWorkspaceDocRequest
 * @return CreateWorkspaceDocResponse
 */
async function createWorkspaceDoc(request: CreateWorkspaceDocRequest): CreateWorkspaceDocResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateWorkspaceDocHeaders{};
  return createWorkspaceDocWithOptions(request, headers, runtime);
}

model DeleteColumnsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model DeleteColumnsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteColumnsRequest {
  column?: long(name='Column', description='This parameter is required.', example='1'),
  columnCount?: long(name='ColumnCount', description='This parameter is required.', example='10'),
  sheetId?: string(name='SheetId', description='This parameter is required.', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model DeleteColumnsShrinkRequest {
  column?: long(name='Column', description='This parameter is required.', example='1'),
  columnCount?: long(name='ColumnCount', description='This parameter is required.', example='10'),
  sheetId?: string(name='SheetId', description='This parameter is required.', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model DeleteColumnsResponseBody = {
  id?: string(name='id', example='stxxxx'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model DeleteColumnsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteColumnsResponseBody(name='body'),
}

/**
 * @summary 删除指定列
 *
 * @param tmpReq DeleteColumnsRequest
 * @param tmpHeader DeleteColumnsHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteColumnsResponse
 */
async function deleteColumnsWithOptions(tmpReq: DeleteColumnsRequest, tmpHeader: DeleteColumnsHeaders, runtime: Util.RuntimeOptions): DeleteColumnsResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteColumnsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DeleteColumnsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.column)) {
    body['Column'] = request.column;
  }
  if (!Util.isUnset(request.columnCount)) {
    body['ColumnCount'] = request.columnCount;
  }
  if (!Util.isUnset(request.sheetId)) {
    body['SheetId'] = request.sheetId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteColumns',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/deleteColumns`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除指定列
 *
 * @param request DeleteColumnsRequest
 * @return DeleteColumnsResponse
 */
async function deleteColumns(request: DeleteColumnsRequest): DeleteColumnsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteColumnsHeaders{};
  return deleteColumnsWithOptions(request, headers, runtime);
}

model DeleteDentryHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model DeleteDentryShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteDentryRequest {
  dentryId?: string(name='DentryId', description='This parameter is required.', example='b9XJlZ44W3NeDGyA'),
  spaceId?: string(name='SpaceId', description='This parameter is required.', example='nb9XJx4EPx16QGyA'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  toRecycleBin?: boolean(name='ToRecycleBin'),
}

model DeleteDentryShrinkRequest {
  dentryId?: string(name='DentryId', description='This parameter is required.', example='b9XJlZ44W3NeDGyA'),
  spaceId?: string(name='SpaceId', description='This parameter is required.', example='nb9XJx4EPx16QGyA'),
  tenantContextShrink?: string(name='TenantContext'),
  toRecycleBin?: boolean(name='ToRecycleBin'),
}

model DeleteDentryResponseBody = {
  async?: boolean(name='async'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  taskId?: string(name='taskId', example='task123abc'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model DeleteDentryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDentryResponseBody(name='body'),
}

/**
 * @summary 删除文件或文件夹
 *
 * @param tmpReq DeleteDentryRequest
 * @param tmpHeader DeleteDentryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDentryResponse
 */
async function deleteDentryWithOptions(tmpReq: DeleteDentryRequest, tmpHeader: DeleteDentryHeaders, runtime: Util.RuntimeOptions): DeleteDentryResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteDentryShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DeleteDentryShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.dentryId)) {
    body['DentryId'] = request.dentryId;
  }
  if (!Util.isUnset(request.spaceId)) {
    body['SpaceId'] = request.spaceId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.toRecycleBin)) {
    body['ToRecycleBin'] = request.toRecycleBin;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDentry',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/deleteDentry`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除文件或文件夹
 *
 * @param request DeleteDentryRequest
 * @return DeleteDentryResponse
 */
async function deleteDentry(request: DeleteDentryRequest): DeleteDentryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteDentryHeaders{};
  return deleteDentryWithOptions(request, headers, runtime);
}

model DeleteDriveSpaceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext', description='This parameter is required.'),
}

model DeleteDriveSpaceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext', description='This parameter is required.'),
}

model DeleteDriveSpaceRequest {
  spaceId?: string(name='SpaceId', description='This parameter is required.', example='123'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model DeleteDriveSpaceShrinkRequest {
  spaceId?: string(name='SpaceId', description='This parameter is required.', example='123'),
  tenantContextShrink?: string(name='TenantContext'),
}

model DeleteDriveSpaceResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model DeleteDriveSpaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDriveSpaceResponseBody(name='body'),
}

/**
 * @summary 删除钉盘空间
 *
 * @param tmpReq DeleteDriveSpaceRequest
 * @param tmpHeader DeleteDriveSpaceHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDriveSpaceResponse
 */
async function deleteDriveSpaceWithOptions(tmpReq: DeleteDriveSpaceRequest, tmpHeader: DeleteDriveSpaceHeaders, runtime: Util.RuntimeOptions): DeleteDriveSpaceResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteDriveSpaceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DeleteDriveSpaceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.spaceId)) {
    body['SpaceId'] = request.spaceId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDriveSpace',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/deleteDriveSpace`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除钉盘空间
 *
 * @param request DeleteDriveSpaceRequest
 * @return DeleteDriveSpaceResponse
 */
async function deleteDriveSpace(request: DeleteDriveSpaceRequest): DeleteDriveSpaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteDriveSpaceHeaders{};
  return deleteDriveSpaceWithOptions(request, headers, runtime);
}

model DeleteEventHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='123456'),
  }(name='AccountContext'),
}

model DeleteEventShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteEventRequest {
  calendarId?: string(name='CalendarId', description='This parameter is required.', example='primary'),
  eventId?: string(name='EventId', description='This parameter is required.', example='iiiP35sJadba8aBSgjrwPRKgiEiF'),
  pushNotification?: boolean(name='pushNotification'),
}

model DeleteEventResponseBody = {
  content?: {
    data?: any(name='data', example='[]'),
  }(name='content'),
  errorCode?: string(name='errorCode', example='success'),
  errorCtx?: map[string]any(name='errorCtx'),
  errorMsg?: string(name='errorMsg', example='""'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', description='requestId', example='4248DCC9-785F-5A14-8BE0-830FD52E1261'),
  success?: boolean(name='success', example='True'),
}

model DeleteEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEventResponseBody(name='body'),
}

/**
 * @summary 删除日程
 *
 * @param request DeleteEventRequest
 * @param tmpHeader DeleteEventHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteEventResponse
 */
async function deleteEventWithOptions(request: DeleteEventRequest, tmpHeader: DeleteEventHeaders, runtime: Util.RuntimeOptions): DeleteEventResponse {
  Util.validateModel(request);
  var headers = new DeleteEventShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.calendarId)) {
    body['CalendarId'] = request.calendarId;
  }
  if (!Util.isUnset(request.eventId)) {
    body['EventId'] = request.eventId;
  }
  if (!Util.isUnset(request.pushNotification)) {
    body['pushNotification'] = request.pushNotification;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEvent',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/deleteEvent`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除日程
 *
 * @param request DeleteEventRequest
 * @return DeleteEventResponse
 */
async function deleteEvent(request: DeleteEventRequest): DeleteEventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteEventHeaders{};
  return deleteEventWithOptions(request, headers, runtime);
}

model DeleteFormDataHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model DeleteFormDataShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteFormDataRequest {
  appType?: string(name='AppType', description='This parameter is required.', example='APP_PBKTxxx'),
  formInstanceId?: string(name='FormInstanceId', description='This parameter is required.', example='FORM_INST_12345'),
  language?: string(name='Language', example='zh_CN'),
  systemToken?: string(name='SystemToken', description='This parameter is required.', example='hexxxx'),
}

model DeleteFormDataResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model DeleteFormDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFormDataResponseBody(name='body'),
}

/**
 * @summary 删除表单数据
 *
 * @param request DeleteFormDataRequest
 * @param tmpHeader DeleteFormDataHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteFormDataResponse
 */
async function deleteFormDataWithOptions(request: DeleteFormDataRequest, tmpHeader: DeleteFormDataHeaders, runtime: Util.RuntimeOptions): DeleteFormDataResponse {
  Util.validateModel(request);
  var headers = new DeleteFormDataShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.formInstanceId)) {
    body['FormInstanceId'] = request.formInstanceId;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFormData',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/deleteFormData`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除表单数据
 *
 * @param request DeleteFormDataRequest
 * @return DeleteFormDataResponse
 */
async function deleteFormData(request: DeleteFormDataRequest): DeleteFormDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteFormDataHeaders{};
  return deleteFormDataWithOptions(request, headers, runtime);
}

model DeleteInstanceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model DeleteInstanceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteInstanceRequest {
  appType?: string(name='AppType', example='APP_PBKTxxx'),
  language?: string(name='Language', example='zh_CN'),
  processInstanceId?: string(name='ProcessInstanceId', example='f30233fb-72xxx'),
  systemToken?: string(name='SystemToken', example='hexxxx'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model DeleteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceResponseBody(name='body'),
}

/**
 * @param request DeleteInstanceRequest
 * @param tmpHeader DeleteInstanceHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteInstanceResponse
 */
async function deleteInstanceWithOptions(request: DeleteInstanceRequest, tmpHeader: DeleteInstanceHeaders, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  Util.validateModel(request);
  var headers = new DeleteInstanceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.processInstanceId)) {
    body['ProcessInstanceId'] = request.processInstanceId;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstance',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/deleteInstance`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DeleteInstanceRequest
 * @return DeleteInstanceResponse
 */
async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteInstanceHeaders{};
  return deleteInstanceWithOptions(request, headers, runtime);
}

model DeleteLiveHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model DeleteLiveShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteLiveRequest {
  liveId?: string(name='LiveId', description='This parameter is required.', example='4d38xxxxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model DeleteLiveShrinkRequest {
  liveId?: string(name='LiveId', description='This parameter is required.', example='4d38xxxxx'),
  tenantContextShrink?: string(name='TenantContext'),
}

model DeleteLiveResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model DeleteLiveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLiveResponseBody(name='body'),
}

/**
 * @summary 删除直播
 *
 * @param tmpReq DeleteLiveRequest
 * @param tmpHeader DeleteLiveHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteLiveResponse
 */
async function deleteLiveWithOptions(tmpReq: DeleteLiveRequest, tmpHeader: DeleteLiveHeaders, runtime: Util.RuntimeOptions): DeleteLiveResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteLiveShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DeleteLiveShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.liveId)) {
    body['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLive',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/deleteLive`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除直播
 *
 * @param request DeleteLiveRequest
 * @return DeleteLiveResponse
 */
async function deleteLive(request: DeleteLiveRequest): DeleteLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteLiveHeaders{};
  return deleteLiveWithOptions(request, headers, runtime);
}

model DeleteMeetingRoomHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model DeleteMeetingRoomShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteMeetingRoomRequest {
  roomId?: string(name='RoomId', description='This parameter is required.', example='0ffb7xxxxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model DeleteMeetingRoomShrinkRequest {
  roomId?: string(name='RoomId', description='This parameter is required.', example='0ffb7xxxxx'),
  tenantContextShrink?: string(name='TenantContext'),
}

model DeleteMeetingRoomResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model DeleteMeetingRoomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMeetingRoomResponseBody(name='body'),
}

/**
 * @summary 删除会议室
 *
 * @param tmpReq DeleteMeetingRoomRequest
 * @param tmpHeader DeleteMeetingRoomHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteMeetingRoomResponse
 */
async function deleteMeetingRoomWithOptions(tmpReq: DeleteMeetingRoomRequest, tmpHeader: DeleteMeetingRoomHeaders, runtime: Util.RuntimeOptions): DeleteMeetingRoomResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteMeetingRoomShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DeleteMeetingRoomShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMeetingRoom',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/deleteMeetingRoom`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除会议室
 *
 * @param request DeleteMeetingRoomRequest
 * @return DeleteMeetingRoomResponse
 */
async function deleteMeetingRoom(request: DeleteMeetingRoomRequest): DeleteMeetingRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteMeetingRoomHeaders{};
  return deleteMeetingRoomWithOptions(request, headers, runtime);
}

model DeleteMeetingRoomGroupHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model DeleteMeetingRoomGroupShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteMeetingRoomGroupRequest {
  groupId?: string(name='GroupId', description='This parameter is required.', example='172'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model DeleteMeetingRoomGroupShrinkRequest {
  groupId?: string(name='GroupId', description='This parameter is required.', example='172'),
  tenantContextShrink?: string(name='TenantContext'),
}

model DeleteMeetingRoomGroupResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model DeleteMeetingRoomGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMeetingRoomGroupResponseBody(name='body'),
}

/**
 * @summary 删除会议室分组
 *
 * @param tmpReq DeleteMeetingRoomGroupRequest
 * @param tmpHeader DeleteMeetingRoomGroupHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteMeetingRoomGroupResponse
 */
async function deleteMeetingRoomGroupWithOptions(tmpReq: DeleteMeetingRoomGroupRequest, tmpHeader: DeleteMeetingRoomGroupHeaders, runtime: Util.RuntimeOptions): DeleteMeetingRoomGroupResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteMeetingRoomGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DeleteMeetingRoomGroupShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMeetingRoomGroup',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/deleteMeetingRoomGroup`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除会议室分组
 *
 * @param request DeleteMeetingRoomGroupRequest
 * @return DeleteMeetingRoomGroupResponse
 */
async function deleteMeetingRoomGroup(request: DeleteMeetingRoomGroupRequest): DeleteMeetingRoomGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteMeetingRoomGroupHeaders{};
  return deleteMeetingRoomGroupWithOptions(request, headers, runtime);
}

model DeleteMultiDimTableFieldHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model DeleteMultiDimTableFieldShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteMultiDimTableFieldRequest {
  baseId?: string(name='BaseId', description='This parameter is required.', example='r1R7q3QmWew5lo02fxB7nxxxxxxxx'),
  fieldIdOrName?: string(name='FieldIdOrName', description='This parameter is required.'),
  sheetIdOrName?: string(name='SheetIdOrName', description='This parameter is required.'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model DeleteMultiDimTableFieldShrinkRequest {
  baseId?: string(name='BaseId', description='This parameter is required.', example='r1R7q3QmWew5lo02fxB7nxxxxxxxx'),
  fieldIdOrName?: string(name='FieldIdOrName', description='This parameter is required.'),
  sheetIdOrName?: string(name='SheetIdOrName', description='This parameter is required.'),
  tenantContextShrink?: string(name='TenantContext'),
}

model DeleteMultiDimTableFieldResponseBody = {
  success?: boolean(name='Success', example='True'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model DeleteMultiDimTableFieldResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMultiDimTableFieldResponseBody(name='body'),
}

/**
 * @summary 删除字段
 *
 * @param tmpReq DeleteMultiDimTableFieldRequest
 * @param tmpHeader DeleteMultiDimTableFieldHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteMultiDimTableFieldResponse
 */
async function deleteMultiDimTableFieldWithOptions(tmpReq: DeleteMultiDimTableFieldRequest, tmpHeader: DeleteMultiDimTableFieldHeaders, runtime: Util.RuntimeOptions): DeleteMultiDimTableFieldResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteMultiDimTableFieldShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DeleteMultiDimTableFieldShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.baseId)) {
    body['BaseId'] = request.baseId;
  }
  if (!Util.isUnset(request.fieldIdOrName)) {
    body['FieldIdOrName'] = request.fieldIdOrName;
  }
  if (!Util.isUnset(request.sheetIdOrName)) {
    body['SheetIdOrName'] = request.sheetIdOrName;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMultiDimTableField',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/table/deleteMultiDimTableField`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除字段
 *
 * @param request DeleteMultiDimTableFieldRequest
 * @return DeleteMultiDimTableFieldResponse
 */
async function deleteMultiDimTableField(request: DeleteMultiDimTableFieldRequest): DeleteMultiDimTableFieldResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteMultiDimTableFieldHeaders{};
  return deleteMultiDimTableFieldWithOptions(request, headers, runtime);
}

model DeleteMultiDimTableRecordsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model DeleteMultiDimTableRecordsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteMultiDimTableRecordsRequest {
  baseId?: string(name='BaseId', description='This parameter is required.', example='r1R7q3QmWew5lo02fxB7nxxxxxxxx'),
  recordIds?: [ string ](name='RecordIds', description='This parameter is required.'),
  sheetIdOrName?: string(name='SheetIdOrName', description='This parameter is required.'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model DeleteMultiDimTableRecordsShrinkRequest {
  baseId?: string(name='BaseId', description='This parameter is required.', example='r1R7q3QmWew5lo02fxB7nxxxxxxxx'),
  recordIdsShrink?: string(name='RecordIds', description='This parameter is required.'),
  sheetIdOrName?: string(name='SheetIdOrName', description='This parameter is required.'),
  tenantContextShrink?: string(name='TenantContext'),
}

model DeleteMultiDimTableRecordsResponseBody = {
  success?: boolean(name='Success', example='True'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model DeleteMultiDimTableRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMultiDimTableRecordsResponseBody(name='body'),
}

/**
 * @summary 删除多行记录
 *
 * @param tmpReq DeleteMultiDimTableRecordsRequest
 * @param tmpHeader DeleteMultiDimTableRecordsHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteMultiDimTableRecordsResponse
 */
async function deleteMultiDimTableRecordsWithOptions(tmpReq: DeleteMultiDimTableRecordsRequest, tmpHeader: DeleteMultiDimTableRecordsHeaders, runtime: Util.RuntimeOptions): DeleteMultiDimTableRecordsResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteMultiDimTableRecordsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DeleteMultiDimTableRecordsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.recordIds)) {
    request.recordIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.recordIds, 'RecordIds', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.baseId)) {
    body['BaseId'] = request.baseId;
  }
  if (!Util.isUnset(request.recordIdsShrink)) {
    body['RecordIds'] = request.recordIdsShrink;
  }
  if (!Util.isUnset(request.sheetIdOrName)) {
    body['SheetIdOrName'] = request.sheetIdOrName;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMultiDimTableRecords',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/table/deleteMultiDimTableRecords`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除多行记录
 *
 * @param request DeleteMultiDimTableRecordsRequest
 * @return DeleteMultiDimTableRecordsResponse
 */
async function deleteMultiDimTableRecords(request: DeleteMultiDimTableRecordsRequest): DeleteMultiDimTableRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteMultiDimTableRecordsHeaders{};
  return deleteMultiDimTableRecordsWithOptions(request, headers, runtime);
}

model DeletePermissionHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model DeletePermissionShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeletePermissionRequest {
  dentryUuid?: string(name='DentryUuid', description='This parameter is required.', example='a9E05BDRVQRkezKGCE3nlwPDJ63zgkYA'),
  members?: [ 
    {
      corpId?: string(name='CorpId', example='123456'),
      id?: string(name='Id', example='ORG'),
      type?: string(name='Type', example='ORG'),
    }
  ](name='Members', description='This parameter is required.'),
  roleId?: string(name='RoleId', description='This parameter is required.', example='MANAGER'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model DeletePermissionShrinkRequest {
  dentryUuid?: string(name='DentryUuid', description='This parameter is required.', example='a9E05BDRVQRkezKGCE3nlwPDJ63zgkYA'),
  membersShrink?: string(name='Members', description='This parameter is required.'),
  roleId?: string(name='RoleId', description='This parameter is required.', example='MANAGER'),
  tenantContextShrink?: string(name='TenantContext'),
}

model DeletePermissionResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model DeletePermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePermissionResponseBody(name='body'),
}

/**
 * @summary 删除文件权限
 *
 * @param tmpReq DeletePermissionRequest
 * @param tmpHeader DeletePermissionHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeletePermissionResponse
 */
async function deletePermissionWithOptions(tmpReq: DeletePermissionRequest, tmpHeader: DeletePermissionHeaders, runtime: Util.RuntimeOptions): DeletePermissionResponse {
  Util.validateModel(tmpReq);
  var request = new DeletePermissionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DeletePermissionShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.members)) {
    request.membersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.members, 'Members', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.dentryUuid)) {
    body['DentryUuid'] = request.dentryUuid;
  }
  if (!Util.isUnset(request.membersShrink)) {
    body['Members'] = request.membersShrink;
  }
  if (!Util.isUnset(request.roleId)) {
    body['RoleId'] = request.roleId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeletePermission',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/deletePermission`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除文件权限
 *
 * @param request DeletePermissionRequest
 * @return DeletePermissionResponse
 */
async function deletePermission(request: DeletePermissionRequest): DeletePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeletePermissionHeaders{};
  return deletePermissionWithOptions(request, headers, runtime);
}

model DeleteRowsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model DeleteRowsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteRowsRequest {
  row?: long(name='Row', description='This parameter is required.', example='1'),
  rowCount?: long(name='RowCount', description='This parameter is required.', example='10'),
  sheetId?: string(name='SheetId', description='This parameter is required.', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model DeleteRowsShrinkRequest {
  row?: long(name='Row', description='This parameter is required.', example='1'),
  rowCount?: long(name='RowCount', description='This parameter is required.', example='10'),
  sheetId?: string(name='SheetId', description='This parameter is required.', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model DeleteRowsResponseBody = {
  id?: string(name='id', example='stxxxx'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model DeleteRowsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRowsResponseBody(name='body'),
}

/**
 * @summary 删除指定行
 *
 * @param tmpReq DeleteRowsRequest
 * @param tmpHeader DeleteRowsHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteRowsResponse
 */
async function deleteRowsWithOptions(tmpReq: DeleteRowsRequest, tmpHeader: DeleteRowsHeaders, runtime: Util.RuntimeOptions): DeleteRowsResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteRowsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DeleteRowsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.row)) {
    body['Row'] = request.row;
  }
  if (!Util.isUnset(request.rowCount)) {
    body['RowCount'] = request.rowCount;
  }
  if (!Util.isUnset(request.sheetId)) {
    body['SheetId'] = request.sheetId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRows',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/deleteRows`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除指定行
 *
 * @param request DeleteRowsRequest
 * @return DeleteRowsResponse
 */
async function deleteRows(request: DeleteRowsRequest): DeleteRowsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteRowsHeaders{};
  return deleteRowsWithOptions(request, headers, runtime);
}

model DeleteScenegroupMemberHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model DeleteScenegroupMemberShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteScenegroupMemberRequest {
  openConversationId?: string(name='OpenConversationId', description='This parameter is required.', example='cidvkLfbOyIiSYqjgvAiWwFow=='),
  userIds?: string(name='UserIds', description='This parameter is required.', example='123xxx,223xxx'),
}

model DeleteScenegroupMemberResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model DeleteScenegroupMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteScenegroupMemberResponseBody(name='body'),
}

/**
 * @summary 删除群成员
 *
 * @param request DeleteScenegroupMemberRequest
 * @param tmpHeader DeleteScenegroupMemberHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteScenegroupMemberResponse
 */
async function deleteScenegroupMemberWithOptions(request: DeleteScenegroupMemberRequest, tmpHeader: DeleteScenegroupMemberHeaders, runtime: Util.RuntimeOptions): DeleteScenegroupMemberResponse {
  Util.validateModel(request);
  var headers = new DeleteScenegroupMemberShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.openConversationId)) {
    body['OpenConversationId'] = request.openConversationId;
  }
  if (!Util.isUnset(request.userIds)) {
    body['UserIds'] = request.userIds;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteScenegroupMember',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/im/deleteScenegroupMember`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除群成员
 *
 * @param request DeleteScenegroupMemberRequest
 * @return DeleteScenegroupMemberResponse
 */
async function deleteScenegroupMember(request: DeleteScenegroupMemberRequest): DeleteScenegroupMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteScenegroupMemberHeaders{};
  return deleteScenegroupMemberWithOptions(request, headers, runtime);
}

model DeleteSheetHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model DeleteSheetShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteSheetRequest {
  sheetId?: string(name='SheetId', description='This parameter is required.', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model DeleteSheetShrinkRequest {
  sheetId?: string(name='SheetId', description='This parameter is required.', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model DeleteSheetResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model DeleteSheetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSheetResponseBody(name='body'),
}

/**
 * @summary 删除一个工作表
 *
 * @param tmpReq DeleteSheetRequest
 * @param tmpHeader DeleteSheetHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteSheetResponse
 */
async function deleteSheetWithOptions(tmpReq: DeleteSheetRequest, tmpHeader: DeleteSheetHeaders, runtime: Util.RuntimeOptions): DeleteSheetResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteSheetShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DeleteSheetShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.sheetId)) {
    body['SheetId'] = request.sheetId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSheet',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/deleteSheet`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除一个工作表
 *
 * @param request DeleteSheetRequest
 * @return DeleteSheetResponse
 */
async function deleteSheet(request: DeleteSheetRequest): DeleteSheetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteSheetHeaders{};
  return deleteSheetWithOptions(request, headers, runtime);
}

model DeleteSubscribedCalendarHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model DeleteSubscribedCalendarShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteSubscribedCalendarRequest {
  calendarId?: string(name='CalendarId', description='This parameter is required.', example='MzM5Mxxx'),
}

model DeleteSubscribedCalendarResponseBody = {
  result?: boolean(name='Result', example='true'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model DeleteSubscribedCalendarResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSubscribedCalendarResponseBody(name='body'),
}

/**
 * @summary 删除订阅日历
 *
 * @param request DeleteSubscribedCalendarRequest
 * @param tmpHeader DeleteSubscribedCalendarHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteSubscribedCalendarResponse
 */
async function deleteSubscribedCalendarWithOptions(request: DeleteSubscribedCalendarRequest, tmpHeader: DeleteSubscribedCalendarHeaders, runtime: Util.RuntimeOptions): DeleteSubscribedCalendarResponse {
  Util.validateModel(request);
  var headers = new DeleteSubscribedCalendarShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.calendarId)) {
    body['CalendarId'] = request.calendarId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSubscribedCalendar',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/deleteSubscribedCalendar`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除订阅日历
 *
 * @param request DeleteSubscribedCalendarRequest
 * @return DeleteSubscribedCalendarResponse
 */
async function deleteSubscribedCalendar(request: DeleteSubscribedCalendarRequest): DeleteSubscribedCalendarResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteSubscribedCalendarHeaders{};
  return deleteSubscribedCalendarWithOptions(request, headers, runtime);
}

model DeleteTodoTaskHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model DeleteTodoTaskShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteTodoTaskRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  operatorId?: string(name='operatorId', example='12345'),
  taskId?: string(name='taskId', description='This parameter is required.', example='63edc8da7e917d6ecdaab11b'),
}

model DeleteTodoTaskShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  operatorId?: string(name='operatorId', example='12345'),
  taskId?: string(name='taskId', description='This parameter is required.', example='63edc8da7e917d6ecdaab11b'),
}

model DeleteTodoTaskResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model DeleteTodoTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTodoTaskResponseBody(name='body'),
}

/**
 * @summary 删除代办
 *
 * @param tmpReq DeleteTodoTaskRequest
 * @param tmpHeader DeleteTodoTaskHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteTodoTaskResponse
 */
async function deleteTodoTaskWithOptions(tmpReq: DeleteTodoTaskRequest, tmpHeader: DeleteTodoTaskHeaders, runtime: Util.RuntimeOptions): DeleteTodoTaskResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteTodoTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DeleteTodoTaskShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.operatorId)) {
    body['operatorId'] = request.operatorId;
  }
  if (!Util.isUnset(request.taskId)) {
    body['taskId'] = request.taskId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTodoTask',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/task/deleteTodoTask`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除代办
 *
 * @param request DeleteTodoTaskRequest
 * @return DeleteTodoTaskResponse
 */
async function deleteTodoTask(request: DeleteTodoTaskRequest): DeleteTodoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteTodoTaskHeaders{};
  return deleteTodoTaskWithOptions(request, headers, runtime);
}

model DeleteWorkspaceDocMembersHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model DeleteWorkspaceDocMembersShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteWorkspaceDocMembersRequest {
  members?: [ 
    {
      memberId?: string(name='MemberId', description='This parameter is required.', example='012345'),
      memberType?: string(name='MemberType', description='This parameter is required.', example='USER'),
    }
  ](name='Members', description='This parameter is required.'),
  nodeId?: string(name='NodeId', description='This parameter is required.', example='YRBGv0xxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='YRBGvyxxx'),
}

model DeleteWorkspaceDocMembersShrinkRequest {
  membersShrink?: string(name='Members', description='This parameter is required.'),
  nodeId?: string(name='NodeId', description='This parameter is required.', example='YRBGv0xxx'),
  tenantContextShrink?: string(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='YRBGvyxxx'),
}

model DeleteWorkspaceDocMembersResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model DeleteWorkspaceDocMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWorkspaceDocMembersResponseBody(name='body'),
}

/**
 * @summary 删除知识库文档成员
 *
 * @param tmpReq DeleteWorkspaceDocMembersRequest
 * @param tmpHeader DeleteWorkspaceDocMembersHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteWorkspaceDocMembersResponse
 */
async function deleteWorkspaceDocMembersWithOptions(tmpReq: DeleteWorkspaceDocMembersRequest, tmpHeader: DeleteWorkspaceDocMembersHeaders, runtime: Util.RuntimeOptions): DeleteWorkspaceDocMembersResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteWorkspaceDocMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DeleteWorkspaceDocMembersShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.members)) {
    request.membersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.members, 'Members', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.membersShrink)) {
    body['Members'] = request.membersShrink;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWorkspaceDocMembers',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/deleteWorkspaceDocMembers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除知识库文档成员
 *
 * @param request DeleteWorkspaceDocMembersRequest
 * @return DeleteWorkspaceDocMembersResponse
 */
async function deleteWorkspaceDocMembers(request: DeleteWorkspaceDocMembersRequest): DeleteWorkspaceDocMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteWorkspaceDocMembersHeaders{};
  return deleteWorkspaceDocMembersWithOptions(request, headers, runtime);
}

model DeleteWorkspaceMembersHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model DeleteWorkspaceMembersShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteWorkspaceMembersRequest {
  members?: [ 
    {
      memberId?: string(name='MemberId', description='This parameter is required.', example='012345'),
      memberType?: string(name='MemberType', description='This parameter is required.', example='USER'),
    }
  ](name='Members', description='This parameter is required.'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='123'),
}

model DeleteWorkspaceMembersShrinkRequest {
  membersShrink?: string(name='Members', description='This parameter is required.'),
  tenantContextShrink?: string(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='123'),
}

model DeleteWorkspaceMembersResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model DeleteWorkspaceMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWorkspaceMembersResponseBody(name='body'),
}

/**
 * @summary 删除知识库成员
 *
 * @param tmpReq DeleteWorkspaceMembersRequest
 * @param tmpHeader DeleteWorkspaceMembersHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteWorkspaceMembersResponse
 */
async function deleteWorkspaceMembersWithOptions(tmpReq: DeleteWorkspaceMembersRequest, tmpHeader: DeleteWorkspaceMembersHeaders, runtime: Util.RuntimeOptions): DeleteWorkspaceMembersResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteWorkspaceMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DeleteWorkspaceMembersShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.members)) {
    request.membersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.members, 'Members', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.membersShrink)) {
    body['Members'] = request.membersShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWorkspaceMembers',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/deleteWorkspaceMembers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除知识库成员
 *
 * @param request DeleteWorkspaceMembersRequest
 * @return DeleteWorkspaceMembersResponse
 */
async function deleteWorkspaceMembers(request: DeleteWorkspaceMembersRequest): DeleteWorkspaceMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteWorkspaceMembersHeaders{};
  return deleteWorkspaceMembersWithOptions(request, headers, runtime);
}

model DocBlocksQueryHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model DocBlocksQueryShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DocBlocksQueryRequest {
  blockType?: string(name='BlockType', example='heading'),
  docKey?: string(name='DocKey', description='This parameter is required.', example='xxxx'),
  endIndex?: int32(name='EndIndex', example='1'),
  startIndex?: int32(name='StartIndex', example='0'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model DocBlocksQueryShrinkRequest {
  blockType?: string(name='BlockType', example='heading'),
  docKey?: string(name='DocKey', description='This parameter is required.', example='xxxx'),
  endIndex?: int32(name='EndIndex', example='1'),
  startIndex?: int32(name='StartIndex', example='0'),
  tenantContextShrink?: string(name='TenantContext'),
}

model DocBlocksQueryResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: {
    data?: [ any ](name='Data'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model DocBlocksQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DocBlocksQueryResponseBody(name='body'),
}

/**
 * @summary 查询块元素
 *
 * @param tmpReq DocBlocksQueryRequest
 * @param tmpHeader DocBlocksQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DocBlocksQueryResponse
 */
async function docBlocksQueryWithOptions(tmpReq: DocBlocksQueryRequest, tmpHeader: DocBlocksQueryHeaders, runtime: Util.RuntimeOptions): DocBlocksQueryResponse {
  Util.validateModel(tmpReq);
  var request = new DocBlocksQueryShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DocBlocksQueryShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.blockType)) {
    body['BlockType'] = request.blockType;
  }
  if (!Util.isUnset(request.docKey)) {
    body['DocKey'] = request.docKey;
  }
  if (!Util.isUnset(request.endIndex)) {
    body['EndIndex'] = request.endIndex;
  }
  if (!Util.isUnset(request.startIndex)) {
    body['StartIndex'] = request.startIndex;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DocBlocksQuery',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/docBlocksQuery`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询块元素
 *
 * @param request DocBlocksQueryRequest
 * @return DocBlocksQueryResponse
 */
async function docBlocksQuery(request: DocBlocksQueryRequest): DocBlocksQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DocBlocksQueryHeaders{};
  return docBlocksQueryWithOptions(request, headers, runtime);
}

model DocUpdateContentHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model DocUpdateContentShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DocUpdateContentRequest {
  content?: string(name='Content', description='This parameter is required.', example='[]'),
  dataType?: string(name='DataType', example='markdown'),
  docKey?: string(name='DocKey', description='This parameter is required.', example='4j6OJzVEG4jJO3p8'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model DocUpdateContentShrinkRequest {
  content?: string(name='Content', description='This parameter is required.', example='[]'),
  dataType?: string(name='DataType', example='markdown'),
  docKey?: string(name='DocKey', description='This parameter is required.', example='4j6OJzVEG4jJO3p8'),
  tenantContextShrink?: string(name='TenantContext'),
}

model DocUpdateContentResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  value?: boolean(name='value', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model DocUpdateContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DocUpdateContentResponseBody(name='body'),
}

/**
 * @summary 覆写文档
 *
 * @param tmpReq DocUpdateContentRequest
 * @param tmpHeader DocUpdateContentHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DocUpdateContentResponse
 */
async function docUpdateContentWithOptions(tmpReq: DocUpdateContentRequest, tmpHeader: DocUpdateContentHeaders, runtime: Util.RuntimeOptions): DocUpdateContentResponse {
  Util.validateModel(tmpReq);
  var request = new DocUpdateContentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DocUpdateContentShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.dataType)) {
    body['DataType'] = request.dataType;
  }
  if (!Util.isUnset(request.docKey)) {
    body['DocKey'] = request.docKey;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DocUpdateContent',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/docUpdateContent`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 覆写文档
 *
 * @param request DocUpdateContentRequest
 * @return DocUpdateContentResponse
 */
async function docUpdateContent(request: DocUpdateContentRequest): DocUpdateContentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DocUpdateContentHeaders{};
  return docUpdateContentWithOptions(request, headers, runtime);
}

model ExecuteBatchTaskHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model ExecuteBatchTaskShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ExecuteBatchTaskRequest {
  appType?: string(name='AppType', description='This parameter is required.', example='APP_PBKTxxx'),
  outResult?: string(name='OutResult', description='This parameter is required.', example='disagree'),
  remark?: string(name='Remark', example='remark'),
  systemToken?: string(name='SystemToken', description='This parameter is required.', example='hexxxx'),
  taskInformationList?: string(name='TaskInformationList', description='This parameter is required.', example='[{"taskId":"2291xxx","formInstId":"d84a79xxx"}, {"taskId":"2291xxx","formInstId":"f8035e2axxx"}]'),
}

model ExecuteBatchTaskResponseBody = {
  failNumber?: int32(name='failNumber', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  successNumber?: int32(name='successNumber', example='2'),
  total?: int32(name='total', example='3'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model ExecuteBatchTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteBatchTaskResponseBody(name='body'),
}

/**
 * @summary 批量执行宜搭审批任务
 *
 * @param request ExecuteBatchTaskRequest
 * @param tmpHeader ExecuteBatchTaskHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExecuteBatchTaskResponse
 */
async function executeBatchTaskWithOptions(request: ExecuteBatchTaskRequest, tmpHeader: ExecuteBatchTaskHeaders, runtime: Util.RuntimeOptions): ExecuteBatchTaskResponse {
  Util.validateModel(request);
  var headers = new ExecuteBatchTaskShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.outResult)) {
    body['OutResult'] = request.outResult;
  }
  if (!Util.isUnset(request.remark)) {
    body['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }
  if (!Util.isUnset(request.taskInformationList)) {
    body['TaskInformationList'] = request.taskInformationList;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ExecuteBatchTask',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/executeBatchTask`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量执行宜搭审批任务
 *
 * @param request ExecuteBatchTaskRequest
 * @return ExecuteBatchTaskResponse
 */
async function executeBatchTask(request: ExecuteBatchTaskRequest): ExecuteBatchTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ExecuteBatchTaskHeaders{};
  return executeBatchTaskWithOptions(request, headers, runtime);
}

model ExecutePlatformTaskHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model ExecutePlatformTaskShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ExecutePlatformTaskRequest {
  appType?: string(name='AppType', example='APP_PBxxx'),
  formDataJson?: string(name='FormDataJson', example='[]'),
  language?: string(name='Language', example='zh_CN'),
  noExecuteExpressions?: string(name='NoExecuteExpressions', example='y'),
  outResult?: string(name='OutResult', example='Agree'),
  processInstanceId?: string(name='ProcessInstanceId', example='f30233fb-72e1-4af4-8cb8-c7e0ea9ee530'),
  remark?: string(name='Remark'),
  systemToken?: string(name='SystemToken', example='hexxyy'),
}

model ExecutePlatformTaskResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model ExecutePlatformTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecutePlatformTaskResponseBody(name='body'),
}

/**
 * @summary 执行宜搭的审批任务
 *
 * @param request ExecutePlatformTaskRequest
 * @param tmpHeader ExecutePlatformTaskHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExecutePlatformTaskResponse
 */
async function executePlatformTaskWithOptions(request: ExecutePlatformTaskRequest, tmpHeader: ExecutePlatformTaskHeaders, runtime: Util.RuntimeOptions): ExecutePlatformTaskResponse {
  Util.validateModel(request);
  var headers = new ExecutePlatformTaskShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.formDataJson)) {
    body['FormDataJson'] = request.formDataJson;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.noExecuteExpressions)) {
    body['NoExecuteExpressions'] = request.noExecuteExpressions;
  }
  if (!Util.isUnset(request.outResult)) {
    body['OutResult'] = request.outResult;
  }
  if (!Util.isUnset(request.processInstanceId)) {
    body['ProcessInstanceId'] = request.processInstanceId;
  }
  if (!Util.isUnset(request.remark)) {
    body['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ExecutePlatformTask',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/executePlatformTask`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 执行宜搭的审批任务
 *
 * @param request ExecutePlatformTaskRequest
 * @return ExecutePlatformTaskResponse
 */
async function executePlatformTask(request: ExecutePlatformTaskRequest): ExecutePlatformTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ExecutePlatformTaskHeaders{};
  return executePlatformTaskWithOptions(request, headers, runtime);
}

model ExecuteTaskHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model ExecuteTaskShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ExecuteTaskRequest {
  appType?: string(name='AppType', example='APP_PBKT0MFBEBTDO8T7SLVP'),
  digitalSignUrl?: string(name='DigitalSignUrl', example='http://'),
  formDataJson?: string(name='FormDataJson', example='{}'),
  language?: string(name='Language', example='zh_CN'),
  noExecuteExpressions?: string(name='NoExecuteExpressions', example='y'),
  outResult?: string(name='OutResult', example='AGREE'),
  processInstanceId?: string(name='ProcessInstanceId', example='f30233fb-72e1-4af4-8cb8-c7e0ea9ee530'),
  remark?: string(name='Remark'),
  systemToken?: string(name='SystemToken', example='hexxyy'),
  taskId?: long(name='TaskId', example='12002575L'),
}

model ExecuteTaskResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model ExecuteTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteTaskResponseBody(name='body'),
}

/**
 * @summary 同意或拒绝宜搭审批任务(执行审批任务)
 *
 * @param request ExecuteTaskRequest
 * @param tmpHeader ExecuteTaskHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExecuteTaskResponse
 */
async function executeTaskWithOptions(request: ExecuteTaskRequest, tmpHeader: ExecuteTaskHeaders, runtime: Util.RuntimeOptions): ExecuteTaskResponse {
  Util.validateModel(request);
  var headers = new ExecuteTaskShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.digitalSignUrl)) {
    body['DigitalSignUrl'] = request.digitalSignUrl;
  }
  if (!Util.isUnset(request.formDataJson)) {
    body['FormDataJson'] = request.formDataJson;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.noExecuteExpressions)) {
    body['NoExecuteExpressions'] = request.noExecuteExpressions;
  }
  if (!Util.isUnset(request.outResult)) {
    body['OutResult'] = request.outResult;
  }
  if (!Util.isUnset(request.processInstanceId)) {
    body['ProcessInstanceId'] = request.processInstanceId;
  }
  if (!Util.isUnset(request.remark)) {
    body['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ExecuteTask',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/executeTask`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 同意或拒绝宜搭审批任务(执行审批任务)
 *
 * @param request ExecuteTaskRequest
 * @return ExecuteTaskResponse
 */
async function executeTask(request: ExecuteTaskRequest): ExecuteTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ExecuteTaskHeaders{};
  return executeTaskWithOptions(request, headers, runtime);
}

model ExpandGroupCapacityHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model ExpandGroupCapacityShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ExpandGroupCapacityRequest {
  openConversationId?: string(name='OpenConversationId', description='This parameter is required.', example='cidt*****Xa4K10w=='),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model ExpandGroupCapacityShrinkRequest {
  openConversationId?: string(name='OpenConversationId', description='This parameter is required.', example='cidt*****Xa4K10w=='),
  tenantContextShrink?: string(name='TenantContext'),
}

model ExpandGroupCapacityResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model ExpandGroupCapacityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExpandGroupCapacityResponseBody(name='body'),
}

/**
 * @summary 群扩容
 *
 * @param tmpReq ExpandGroupCapacityRequest
 * @param tmpHeader ExpandGroupCapacityHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExpandGroupCapacityResponse
 */
async function expandGroupCapacityWithOptions(tmpReq: ExpandGroupCapacityRequest, tmpHeader: ExpandGroupCapacityHeaders, runtime: Util.RuntimeOptions): ExpandGroupCapacityResponse {
  Util.validateModel(tmpReq);
  var request = new ExpandGroupCapacityShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new ExpandGroupCapacityShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.openConversationId)) {
    body['OpenConversationId'] = request.openConversationId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ExpandGroupCapacity',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/aliding/v1/im/expandGroupCapacity`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 群扩容
 *
 * @param request ExpandGroupCapacityRequest
 * @return ExpandGroupCapacityResponse
 */
async function expandGroupCapacity(request: ExpandGroupCapacityRequest): ExpandGroupCapacityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ExpandGroupCapacityHeaders{};
  return expandGroupCapacityWithOptions(request, headers, runtime);
}

model FinishTicketHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model FinishTicketShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model FinishTicketRequest {
  notify?: {
    groupNoticeReceiverUserIds?: [ string ](name='GroupNoticeReceiverUserIds'),
    noticeAllGroupMember?: boolean(name='NoticeAllGroupMember', example='true'),
    workNoticeReceiverUserIds?: [ string ](name='WorkNoticeReceiverUserIds'),
  }(name='Notify'),
  openTeamId?: string(name='OpenTeamId', description='This parameter is required.', example='eKWh3xxxxiE'),
  openTicketId?: string(name='OpenTicketId', description='This parameter is required.', example='Dq9hP8Sk2v6vQxxxxiE'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  ticketMemo?: {
    attachments?: [ 
      {
        fileName?: string(name='FileName', example='wahaha.txt'),
        key?: string(name='Key', example='ticket/image/44xxxx9/43003/e27xxxx1640499.txt'),
      }
    ](name='Attachments'),
    memo?: string(name='Memo'),
  }(name='TicketMemo'),
}

model FinishTicketShrinkRequest {
  notifyShrink?: string(name='Notify'),
  openTeamId?: string(name='OpenTeamId', description='This parameter is required.', example='eKWh3xxxxiE'),
  openTicketId?: string(name='OpenTicketId', description='This parameter is required.', example='Dq9hP8Sk2v6vQxxxxiE'),
  tenantContextShrink?: string(name='TenantContext'),
  ticketMemoShrink?: string(name='TicketMemo'),
}

model FinishTicketResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model FinishTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FinishTicketResponseBody(name='body'),
}

/**
 * @summary 完结工单
 *
 * @param tmpReq FinishTicketRequest
 * @param tmpHeader FinishTicketHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return FinishTicketResponse
 */
async function finishTicketWithOptions(tmpReq: FinishTicketRequest, tmpHeader: FinishTicketHeaders, runtime: Util.RuntimeOptions): FinishTicketResponse {
  Util.validateModel(tmpReq);
  var request = new FinishTicketShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new FinishTicketShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.notify)) {
    request.notifyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notify, 'Notify', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.ticketMemo)) {
    request.ticketMemoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ticketMemo, 'TicketMemo', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.notifyShrink)) {
    body['Notify'] = request.notifyShrink;
  }
  if (!Util.isUnset(request.openTeamId)) {
    body['OpenTeamId'] = request.openTeamId;
  }
  if (!Util.isUnset(request.openTicketId)) {
    body['OpenTicketId'] = request.openTicketId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.ticketMemoShrink)) {
    body['TicketMemo'] = request.ticketMemoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FinishTicket',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ticket/finishTicket`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 完结工单
 *
 * @param request FinishTicketRequest
 * @return FinishTicketResponse
 */
async function finishTicket(request: FinishTicketRequest): FinishTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FinishTicketHeaders{};
  return finishTicketWithOptions(request, headers, runtime);
}

model GetActivityListHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetActivityListShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetActivityListRequest {
  appType?: string(name='AppType', example='APP_PBxxx'),
  language?: string(name='Language', example='zh_CN'),
  processCode?: string(name='ProcessCode', example='TPROC--X1Gxx'),
  systemToken?: string(name='SystemToken', example='hexxxx'),
}

model GetActivityListResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ 
    {
      activityId?: string(name='ActivityId', example='0q8gsudxxx'),
      activityName?: string(name='ActivityName', example='activity123'),
      activityNameInEnglish?: string(name='ActivityNameInEnglish', example='activity123'),
    }
  ](name='result'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetActivityListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetActivityListResponseBody(name='body'),
}

/**
 * @summary 获取流程设计的节点信息
 *
 * @param request GetActivityListRequest
 * @param tmpHeader GetActivityListHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetActivityListResponse
 */
async function getActivityListWithOptions(request: GetActivityListRequest, tmpHeader: GetActivityListHeaders, runtime: Util.RuntimeOptions): GetActivityListResponse {
  Util.validateModel(request);
  var headers = new GetActivityListShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.processCode)) {
    body['ProcessCode'] = request.processCode;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetActivityList',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/getActivityList`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取流程设计的节点信息
 *
 * @param request GetActivityListRequest
 * @return GetActivityListResponse
 */
async function getActivityList(request: GetActivityListRequest): GetActivityListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetActivityListHeaders{};
  return getActivityListWithOptions(request, headers, runtime);
}

model GetAllSheetsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model GetAllSheetsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetAllSheetsRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model GetAllSheetsShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model GetAllSheetsResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  value?: [ 
    {
      id?: string(name='Id', example='stxxxx'),
      name?: string(name='Name', example='Sheet1'),
    }
  ](name='value', example='[]'),
}

model GetAllSheetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAllSheetsResponseBody(name='body'),
}

/**
 * @summary 获取所有工作表
 *
 * @param tmpReq GetAllSheetsRequest
 * @param tmpHeader GetAllSheetsHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAllSheetsResponse
 */
async function getAllSheetsWithOptions(tmpReq: GetAllSheetsRequest, tmpHeader: GetAllSheetsHeaders, runtime: Util.RuntimeOptions): GetAllSheetsResponse {
  Util.validateModel(tmpReq);
  var request = new GetAllSheetsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetAllSheetsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetAllSheets',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/getAllSheets`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取所有工作表
 *
 * @param request GetAllSheetsRequest
 * @return GetAllSheetsResponse
 */
async function getAllSheets(request: GetAllSheetsRequest): GetAllSheetsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetAllSheetsHeaders{};
  return getAllSheetsWithOptions(request, headers, runtime);
}

model GetAssistantCapabilityHeaders {
  commonHeaders?: map[string]string,
  accountId?: string(name='accountId', example='123456'),
}

model GetAssistantCapabilityRequest {
  assistantId?: string(name='assistantId', description='This parameter is required.', example='assistantId1'),
  messages?: [ 
    {
      content?: {
        cardCallback?: {
          content?: string(name='content', description='This parameter is required.', example='{}'),
          relatedMessageId?: string(name='relatedMessageId', description='This parameter is required.', example='aliding_messageId123'),
        }(name='cardCallback'),
        dingCard?: {
          content?: string(name='content', example='{}'),
          contentType?: string(name='contentType', description='This parameter is required.', example='basic_card_schema'),
          finished?: boolean(name='finished', example='true'),
          templateId?: string(name='templateId', example='templateId123'),
        }(name='dingCard'),
        dingNormalCard?: {
          cardData?: {
            cardParamMap?: any(name='cardParamMap'),
          }(name='cardData', example='{}'),
          cardTemplateId?: string(name='cardTemplateId', example='templateId1'),
          cardUpdateOptions?: {
            updateCardDataByKey?: boolean(name='updateCardDataByKey', example='{}'),
            updatePrivateDataByKey?: boolean(name='updatePrivateDataByKey', example='{}'),
          }(name='cardUpdateOptions', example='{}'),
          dynamicDataSourceConfigs?: [ 
            {
              constParams?: map[string]any(name='constParams', example='{}'),
              dynamicDataSourceId?: string(name='dynamicDataSourceId', example='dynamicDataSourceId1'),
              pullConfig?: {
                interval?: int32(name='interval', example='3'),
                pullStrategy?: string(name='pullStrategy', example='NONE'),
                timeUnit?: string(name='timeUnit', example='SECONDS'),
              }(name='pullConfig', example='{}'),
            }
          ](name='dynamicDataSourceConfigs', example='{}'),
          privateData?: map[string]any(name='privateData', example='{}'),
        }(name='dingNormalCard', example='{}'),
        markdown?: {
          value?: string(name='value', example='1. markdown内容
2. markdown内容'),
        }(name='markdown'),
        structView?: {
          parts?: [ 
            {
              append?: boolean(name='append'),
              dataPart?: {
                data?: any(name='data'),
              }(name='dataPart', example='{}'),
              finish?: boolean(name='finish'),
              partDesc?: string(name='partDesc', example='这是正文内容部分'),
              partId?: string(name='partId', example='artifactId123'),
              reasonPart?: {
                reason?: string(name='reason', example='123123'),
              }(name='reasonPart', example='{}'),
              recommendPart?: {
                recommends?: [ 
                  {
                    mobileUrl?: string(name='mobileUrl'),
                    text?: string(name='text'),
                    url?: string(name='url'),
                  }
                ](name='recommends'),
              }(name='recommendPart', example='{}'),
              referencePart?: {
                references?: [ 
                  {
                    index?: string(name='index', example='0'),
                    name?: string(name='name', example='mcp是....'),
                    sourceCode?: string(name='sourceCode', example='ata'),
                    sourceIcon?: string(name='sourceIcon'),
                    summary?: string(name='summary', example='摘要'),
                    title?: string(name='title', example='《mcp原理介绍》'),
                    url?: string(name='url', example='https://taobao.com'),
                  }
                ](name='references'),
              }(name='referencePart', example='{}'),
              textPart?: {
                text?: string(name='text', example='123123'),
              }(name='textPart', example='{}'),
              type?: string(name='type', description='This parameter is required.', example='textPart'),
            }
          ](name='parts'),
        }(name='structView'),
        text?: {
          value?: string(name='value', example='你好！'),
        }(name='text'),
        type?: string(name='type', description='This parameter is required.', example='枚举字段，可为：text,markdown,cardCallback,dingCard,agentArtifact,dingNormalCard'),
      }(name='content'),
      contentDesc?: string(name='contentDesc', example='这是一张小猫钓鱼图'),
      createAt?: long(name='createAt', example='1642448000000'),
      role?: string(name='role', example='user'),
    }
  ](name='messages', description='This parameter is required.'),
  originalAssistantId?: string(name='originalAssistantId', example='originalAssistantId1'),
  protocol?: string(name='protocol', example='cfp'),
  sourceIdOfOriginalAssistantId?: string(name='sourceIdOfOriginalAssistantId', example='agentKey1'),
  sourceTypeOfOriginalAssistantId?: string(name='sourceTypeOfOriginalAssistantId', example='1'),
  threadId?: string(name='threadId', example='threadId'),
  timeout?: int32(name='timeout', example='5000'),
}

model GetAssistantCapabilityResponseBody = {
  assistantDescription?: string(name='assistantDescription', example='助理描述'),
  canHandle?: boolean(name='canHandle', example='true'),
  capabilityAssessment?: {
    briefCapability?: string(name='briefCapability', example='能力概览'),
    capabilityList?: [ 
      {
        capabilityOverview?: string(name='capabilityOverview', example='能力概览'),
        description?: string(name='description', example='能力描述'),
        name?: string(name='name', example='能力名称'),
      }
    ](name='capabilityList', example='[]'),
  }(name='capabilityAssessment', example='{}'),
  requestId?: string(name='requestId', example='requestId'),
}

model GetAssistantCapabilityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAssistantCapabilityResponseBody(name='body'),
}

/**
 * @summary 获取助理能力
 *
 * @param request GetAssistantCapabilityRequest
 * @param headers GetAssistantCapabilityHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAssistantCapabilityResponse
 */
async function getAssistantCapabilityWithOptions(request: GetAssistantCapabilityRequest, headers: GetAssistantCapabilityHeaders, runtime: Util.RuntimeOptions): GetAssistantCapabilityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.assistantId)) {
    body['assistantId'] = request.assistantId;
  }
  if (!Util.isUnset(request.messages)) {
    body['messages'] = request.messages;
  }
  if (!Util.isUnset(request.originalAssistantId)) {
    body['originalAssistantId'] = request.originalAssistantId;
  }
  if (!Util.isUnset(request.protocol)) {
    body['protocol'] = request.protocol;
  }
  if (!Util.isUnset(request.sourceIdOfOriginalAssistantId)) {
    body['sourceIdOfOriginalAssistantId'] = request.sourceIdOfOriginalAssistantId;
  }
  if (!Util.isUnset(request.sourceTypeOfOriginalAssistantId)) {
    body['sourceTypeOfOriginalAssistantId'] = request.sourceTypeOfOriginalAssistantId;
  }
  if (!Util.isUnset(request.threadId)) {
    body['threadId'] = request.threadId;
  }
  if (!Util.isUnset(request.timeout)) {
    body['timeout'] = request.timeout;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountId)) {
    realHeaders['accountId'] = Util.toJSONString(headers.accountId);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetAssistantCapability',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/ai/v1/assistant/getAssistantCapability`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取助理能力
 *
 * @param request GetAssistantCapabilityRequest
 * @return GetAssistantCapabilityResponse
 */
async function getAssistantCapability(request: GetAssistantCapabilityRequest): GetAssistantCapabilityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetAssistantCapabilityHeaders{};
  return getAssistantCapabilityWithOptions(request, headers, runtime);
}

model GetConversaionSpaceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetConversaionSpaceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetConversaionSpaceRequest {
  openConversationId?: string(name='OpenConversationId', description='This parameter is required.', example='cidB8Pzg****FIWPv2PMA=='),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model GetConversaionSpaceShrinkRequest {
  openConversationId?: string(name='OpenConversationId', description='This parameter is required.', example='cidB8Pzg****FIWPv2PMA=='),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetConversaionSpaceResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  space?: {
    corpId?: string(name='CorpId', example='ding1234xxxxx'),
    createTime?: string(name='CreateTime', example='2022-01-01T10:00:00Z'),
    modifiedTime?: string(name='ModifiedTime', example='2022-01-01T10:00:00Z'),
    spaceId?: string(name='SpaceId', example='798xxxxx'),
  }(name='space'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetConversaionSpaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConversaionSpaceResponseBody(name='body'),
}

/**
 * @summary 获取群存储空间信息
 *
 * @param tmpReq GetConversaionSpaceRequest
 * @param tmpHeader GetConversaionSpaceHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetConversaionSpaceResponse
 */
async function getConversaionSpaceWithOptions(tmpReq: GetConversaionSpaceRequest, tmpHeader: GetConversaionSpaceHeaders, runtime: Util.RuntimeOptions): GetConversaionSpaceResponse {
  Util.validateModel(tmpReq);
  var request = new GetConversaionSpaceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetConversaionSpaceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.openConversationId)) {
    body['OpenConversationId'] = request.openConversationId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetConversaionSpace',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/getConversaionSpace`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取群存储空间信息
 *
 * @param request GetConversaionSpaceRequest
 * @return GetConversaionSpaceResponse
 */
async function getConversaionSpace(request: GetConversaionSpaceRequest): GetConversaionSpaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetConversaionSpaceHeaders{};
  return getConversaionSpaceWithOptions(request, headers, runtime);
}

model GetCorpAccomplishmentTasksHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetCorpAccomplishmentTasksShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetCorpAccomplishmentTasksRequest {
  appTypes?: string(name='AppTypes', example='APP_PBKTxxx'),
  corpId?: string(name='CorpId', description='This parameter is required.', example='corpIdxxx'),
  createFromTimeGMT?: long(name='CreateFromTimeGMT', example='2021-05-01'),
  createToTimeGMT?: long(name='CreateToTimeGMT', example='2021-05-01'),
  keyword?: string(name='Keyword', example='**'),
  language?: string(name='Language', example='zh-CN'),
  pageNumber?: int32(name='PageNumber', example='20'),
  pageSize?: int32(name='PageSize', example='20'),
  processCodes?: string(name='ProcessCodes', example='["xx","xxx"]'),
  token?: string(name='Token', description='This parameter is required.', example='hexxxx'),
}

model GetCorpAccomplishmentTasksResponseBody = {
  data?: [ 
    {
      activeTimeGMT?: string(name='ActiveTimeGMT', example='2020-01-01'),
      actualActionerId?: string(name='ActualActionerId', example='123456'),
      appType?: string(name='AppType', example='APP_XCxxx'),
      createTimeGMT?: string(name='CreateTimeGMT', example='2020-01-01'),
      finishTimeGMT?: string(name='FinishTimeGMT', example='2020-01-01'),
      originatorEmail?: string(name='OriginatorEmail', example='123456@li.com'),
      originatorId?: string(name='OriginatorId', example='123456'),
      originatorName?: string(name='OriginatorName', example='名称'),
      originatorNameInEnglish?: string(name='OriginatorNameInEnglish', example='name'),
      originatorNickName?: string(name='OriginatorNickName', example='昵称'),
      originatorNickNameInEnglish?: string(name='OriginatorNickNameInEnglish', example='english nick'),
      originatorPhoto?: string(name='OriginatorPhoto', example='originatorPhotoexample'),
      outResult?: string(name='OutResult', example='agree'),
      outResultName?: string(name='OutResultName', example='结果名称'),
      processInstanceId?: string(name='ProcessInstanceId', example='instancexxxx'),
      title?: string(name='Title', example='标题'),
    }
  ](name='data', example='[{}]'),
  pageNumber?: long(name='pageNumber', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: long(name='totalCount', example='10'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetCorpAccomplishmentTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCorpAccomplishmentTasksResponseBody(name='body'),
}

/**
 * @summary 获取组织内已完成的审批任务
 *
 * @param request GetCorpAccomplishmentTasksRequest
 * @param tmpHeader GetCorpAccomplishmentTasksHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCorpAccomplishmentTasksResponse
 */
async function getCorpAccomplishmentTasksWithOptions(request: GetCorpAccomplishmentTasksRequest, tmpHeader: GetCorpAccomplishmentTasksHeaders, runtime: Util.RuntimeOptions): GetCorpAccomplishmentTasksResponse {
  Util.validateModel(request);
  var headers = new GetCorpAccomplishmentTasksShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appTypes)) {
    body['AppTypes'] = request.appTypes;
  }
  if (!Util.isUnset(request.corpId)) {
    body['CorpId'] = request.corpId;
  }
  if (!Util.isUnset(request.createFromTimeGMT)) {
    body['CreateFromTimeGMT'] = request.createFromTimeGMT;
  }
  if (!Util.isUnset(request.createToTimeGMT)) {
    body['CreateToTimeGMT'] = request.createToTimeGMT;
  }
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.processCodes)) {
    body['ProcessCodes'] = request.processCodes;
  }
  if (!Util.isUnset(request.token)) {
    body['Token'] = request.token;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetCorpAccomplishmentTasks',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/getCorpAccomplishmentTasks`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取组织内已完成的审批任务
 *
 * @param request GetCorpAccomplishmentTasksRequest
 * @return GetCorpAccomplishmentTasksResponse
 */
async function getCorpAccomplishmentTasks(request: GetCorpAccomplishmentTasksRequest): GetCorpAccomplishmentTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetCorpAccomplishmentTasksHeaders{};
  return getCorpAccomplishmentTasksWithOptions(request, headers, runtime);
}

model GetCorpTasksHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetCorpTasksShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetCorpTasksRequest {
  appTypes?: string(name='AppTypes', description='This parameter is required.', example='APP_PBKxxx'),
  corpId?: string(name='CorpId', description='This parameter is required.', example='corpId'),
  createFromTimeGMT?: long(name='CreateFromTimeGMT', example='2021-05-01'),
  createToTimeGMT?: long(name='CreateToTimeGMT', example='2021-05-01'),
  keyword?: string(name='Keyword', example='keyword'),
  language?: string(name='Language', example='zh-CN'),
  pageNumber?: int32(name='PageNumber', example='20'),
  pageSize?: int32(name='PageSize', example='20'),
  processCodes?: string(name='ProcessCodes', example='["xx","xxx"]'),
  token?: string(name='Token', description='This parameter is required.', example='hexxxx'),
}

model GetCorpTasksResponseBody = {
  data?: [ 
    {
      activeTimeGMT?: string(name='ActiveTimeGMT', example='2020-01-01'),
      actualActionerId?: string(name='ActualActionerId', example='123456'),
      appType?: string(name='AppType', example='APP_XCxxx'),
      createTimeGMT?: string(name='CreateTimeGMT', example='2020-01-01'),
      finishTimeGMT?: string(name='FinishTimeGMT', example='2020-01-01'),
      originatorEmail?: string(name='OriginatorEmail', example='123456@li.com'),
      originatorId?: string(name='OriginatorId', example='123456'),
      originatorName?: string(name='OriginatorName', example='名称'),
      originatorNameInEnglish?: string(name='OriginatorNameInEnglish', example='name'),
      originatorNickName?: string(name='OriginatorNickName', example='昵称'),
      originatorNickNameEn?: string(name='OriginatorNickNameEn', example='nick en'),
      originatorNickNameInEnglish?: string(name='OriginatorNickNameInEnglish', example='english nick'),
      originatorPhoto?: string(name='OriginatorPhoto', example='originatorPhotoexample'),
      outResult?: string(name='OutResult', example='agree'),
      outResultName?: string(name='OutResultName', example='结果名称'),
      processInstanceId?: string(name='ProcessInstanceId', example='instancexxxx'),
      status?: string(name='Status', example='running'),
      taskId?: string(name='TaskId', example='taskId'),
      taskType?: string(name='TaskType', example='running'),
      title?: string(name='Title', example='标题'),
      titleInEnglish?: string(name='TitleInEnglish', example='title'),
    }
  ](name='data', example='[{}]'),
  pageNumber?: long(name='pageNumber', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: long(name='totalCount', example='10'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetCorpTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCorpTasksResponseBody(name='body'),
}

/**
 * @summary 获取任务列表（组织维度）
 *
 * @param request GetCorpTasksRequest
 * @param tmpHeader GetCorpTasksHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCorpTasksResponse
 */
async function getCorpTasksWithOptions(request: GetCorpTasksRequest, tmpHeader: GetCorpTasksHeaders, runtime: Util.RuntimeOptions): GetCorpTasksResponse {
  Util.validateModel(request);
  var headers = new GetCorpTasksShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appTypes)) {
    body['AppTypes'] = request.appTypes;
  }
  if (!Util.isUnset(request.corpId)) {
    body['CorpId'] = request.corpId;
  }
  if (!Util.isUnset(request.createFromTimeGMT)) {
    body['CreateFromTimeGMT'] = request.createFromTimeGMT;
  }
  if (!Util.isUnset(request.createToTimeGMT)) {
    body['CreateToTimeGMT'] = request.createToTimeGMT;
  }
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.processCodes)) {
    body['ProcessCodes'] = request.processCodes;
  }
  if (!Util.isUnset(request.token)) {
    body['Token'] = request.token;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetCorpTasks',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/getCorpTasks`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取任务列表（组织维度）
 *
 * @param request GetCorpTasksRequest
 * @return GetCorpTasksResponse
 */
async function getCorpTasks(request: GetCorpTasksRequest): GetCorpTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetCorpTasksHeaders{};
  return getCorpTasksWithOptions(request, headers, runtime);
}

model GetDeptNoHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetDeptNoShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetDeptNoRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  deptId?: string(name='deptId', description='This parameter is required.', example='012345'),
}

model GetDeptNoShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  deptId?: string(name='deptId', description='This parameter is required.', example='012345'),
}

model GetDeptNoResponseBody = {
  deptNo?: string(name='deptNo', example='12345'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetDeptNoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeptNoResponseBody(name='body'),
}

/**
 * @param tmpReq GetDeptNoRequest
 * @param tmpHeader GetDeptNoHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDeptNoResponse
 */
async function getDeptNoWithOptions(tmpReq: GetDeptNoRequest, tmpHeader: GetDeptNoHeaders, runtime: Util.RuntimeOptions): GetDeptNoResponse {
  Util.validateModel(tmpReq);
  var request = new GetDeptNoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetDeptNoShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.deptId)) {
    body['deptId'] = request.deptId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDeptNo',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/aliding/v1/dept/getDeptNo`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request GetDeptNoRequest
 * @return GetDeptNoResponse
 */
async function getDeptNo(request: GetDeptNoRequest): GetDeptNoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetDeptNoHeaders{};
  return getDeptNoWithOptions(request, headers, runtime);
}

model GetDocContentHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='ba3a9b612345678d8fedf544ef69d19e'),
  }(name='AccountContext'),
}

model GetDocContentShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetDocContentRequest {
  dentryUuid?: string(name='DentryUuid', description='This parameter is required.', example='dentry_uuid'),
  targetFormat?: string(name='TargetFormat', example='markdown'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  userToken?: string(name='userToken', description='This parameter is required.'),
}

model GetDocContentShrinkRequest {
  dentryUuid?: string(name='DentryUuid', description='This parameter is required.', example='dentry_uuid'),
  targetFormat?: string(name='TargetFormat', example='markdown'),
  tenantContextShrink?: string(name='TenantContext'),
  userToken?: string(name='userToken', description='This parameter is required.'),
}

model GetDocContentResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  taskId?: long(name='taskId', example='task123abc'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetDocContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDocContentResponseBody(name='body'),
}

/**
 * @summary 委托权限获取文档内容
 *
 * @param tmpReq GetDocContentRequest
 * @param tmpHeader GetDocContentHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDocContentResponse
 */
async function getDocContentWithOptions(tmpReq: GetDocContentRequest, tmpHeader: GetDocContentHeaders, runtime: Util.RuntimeOptions): GetDocContentResponse {
  Util.validateModel(tmpReq);
  var request = new GetDocContentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetDocContentShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.dentryUuid)) {
    body['DentryUuid'] = request.dentryUuid;
  }
  if (!Util.isUnset(request.targetFormat)) {
    body['TargetFormat'] = request.targetFormat;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.userToken)) {
    body['userToken'] = request.userToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDocContent',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/getDocContent`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 委托权限获取文档内容
 *
 * @param request GetDocContentRequest
 * @return GetDocContentResponse
 */
async function getDocContent(request: GetDocContentRequest): GetDocContentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetDocContentHeaders{};
  return getDocContentWithOptions(request, headers, runtime);
}

model GetDocContentTakIdHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetDocContentTakIdShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetDocContentTakIdRequest {
  dentryUuid?: string(name='DentryUuid', description='This parameter is required.', example='qnYMoO1rWxrkmoj2I5L2PYkoJ47Z3je9'),
  generateCp?: boolean(name='GenerateCp'),
  targetFormat?: string(name='TargetFormat', example='markdown'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model GetDocContentTakIdShrinkRequest {
  dentryUuid?: string(name='DentryUuid', description='This parameter is required.', example='qnYMoO1rWxrkmoj2I5L2PYkoJ47Z3je9'),
  generateCp?: boolean(name='GenerateCp'),
  targetFormat?: string(name='TargetFormat', example='markdown'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetDocContentTakIdResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  taskId?: long(name='taskId', example='72652830001'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetDocContentTakIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDocContentTakIdResponseBody(name='body'),
}

/**
 * @summary 委托权限获取文档内容taskId
 *
 * @param tmpReq GetDocContentTakIdRequest
 * @param tmpHeader GetDocContentTakIdHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDocContentTakIdResponse
 */
async function getDocContentTakIdWithOptions(tmpReq: GetDocContentTakIdRequest, tmpHeader: GetDocContentTakIdHeaders, runtime: Util.RuntimeOptions): GetDocContentTakIdResponse {
  Util.validateModel(tmpReq);
  var request = new GetDocContentTakIdShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetDocContentTakIdShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.dentryUuid)) {
    body['DentryUuid'] = request.dentryUuid;
  }
  if (!Util.isUnset(request.generateCp)) {
    body['GenerateCp'] = request.generateCp;
  }
  if (!Util.isUnset(request.targetFormat)) {
    body['TargetFormat'] = request.targetFormat;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDocContentTakId',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/getDocContentTakId`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 委托权限获取文档内容taskId
 *
 * @param request GetDocContentTakIdRequest
 * @return GetDocContentTakIdResponse
 */
async function getDocContentTakId(request: GetDocContentTakIdRequest): GetDocContentTakIdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetDocContentTakIdHeaders{};
  return getDocContentTakIdWithOptions(request, headers, runtime);
}

model GetEventHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='123456'),
  }(name='AccountContext'),
}

model GetEventShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetEventRequest {
  calendarId?: string(name='CalendarId', description='This parameter is required.', example='primary'),
  eventId?: string(name='EventId', description='This parameter is required.', example='311525211'),
  maxAttendees?: long(name='MaxAttendees', example='100'),
}

model GetEventResponseBody = {
  attendees?: [ 
    {
      displayName?: string(name='DisplayName', example='jack'),
      id?: string(name='Id', example='123456'),
      isOptional?: boolean(name='IsOptional', example='true'),
      responseStatus?: string(name='ResponseStatus', example='accepted'),
      self?: boolean(name='Self', example='true'),
    }
  ](name='attendees'),
  categories?: [ 
    {
      displayName?: string(name='DisplayName'),
    }
  ](name='categories'),
  createTime?: string(name='createTime', example='2020-01-01T10:15:30+08:00'),
  description?: string(name='description', example='2020-01-01T10:15:30+08:00'),
  end?: {
    date?: string(name='Date', example='2020-01-01'),
    dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
    timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
  }(name='end'),
  extendedProperties?: {
    sharedProperties?: {
      belongCorpId?: string(name='BelongCorpId', example='dingd*****1231231'),
      sourceOpenCid?: string(name='SourceOpenCid', example='zxcvasdfvb123===='),
    }(name='SharedProperties'),
  }(name='extendedProperties'),
  id?: string(name='id', example='iiiP35sJxxxxPRKgiEiF'),
  isAllDay?: boolean(name='isAllDay', example='true'),
  location?: {
    displayName?: string(name='DisplayName'),
    meetingRooms?: [ string ](name='MeetingRooms', description='--'),
  }(name='location'),
  meetingRooms?: [ 
    {
      displayName?: string(name='DisplayName', example='room 1-2-3'),
      responseStatus?: string(name='ResponseStatus', example='accepted'),
      roomId?: string(name='RoomId', example='c10315a8b4e740a317813ab6fxxxxxx'),
    }
  ](name='meetingRooms'),
  onlineMeetingInfo?: {
    conferenceId?: string(name='ConferenceId', example='5c4df21d-xxxx-a6db402b9f3a'),
    extraInfo?: map[string]any(name='ExtraInfo'),
    type?: string(name='Type', example='dingtalk'),
    url?: string(name='Url', example='dingtalk://dingtalkclient/page/videoxxxxalendar?confId=5c4df21d-xxxx9f3f&calendarId=127xxxx124'),
  }(name='onlineMeetingInfo'),
  organizer?: {
    displayName?: string(name='DisplayName', example='tony'),
    id?: string(name='Id', example='123456'),
    responseStatus?: string(name='ResponseStatus', example='accepted'),
    self?: boolean(name='Self', example='true'),
  }(name='organizer'),
  originStart?: {
    dateTime?: string(name='DateTime', example='2023-01-01T00:00:00Z'),
  }(name='originStart'),
  recurrence?: {
    pattern?: {
      dayOfMonth?: int32(name='DayOfMonth', example='14'),
      daysOfWeek?: string(name='DaysOfWeek', example='monday'),
      index?: string(name='Index', example='first'),
      interval?: int32(name='Interval', example='1'),
      type?: string(name='Type', example='daily'),
    }(name='Pattern'),
    range?: {
      endDate?: string(name='EndDate', example='2020-01-01T10:15:30+08:00'),
      numberOfOccurrences?: int32(name='NumberOfOccurrences', example='5'),
      type?: string(name='Type', example='noEnd'),
    }(name='Range'),
  }(name='recurrence'),
  reminders?: [ 
    {
      method?: string(name='Method', example='dingtalk'),
      minutes?: string(name='Minutes', example='15'),
    }
  ](name='reminders'),
  requestId?: string(name='requestId', description='requestId', example='requestId'),
  richTextDescription?: {
    text?: string(name='Text'),
  }(name='richTextDescription'),
  seriesMasterId?: string(name='seriesMasterId', example='cnNTbW1YbxxxxvdlQrQT09'),
  start?: {
    date?: string(name='Date', example='2020-01-01'),
    dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
    timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
  }(name='start'),
  status?: string(name='status', example='confirmed'),
  summary?: string(name='summary', example='test event'),
  updateTime?: string(name='updateTime', example='2020-01-01T10:15:30+08:00'),
}

model GetEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEventResponseBody(name='body'),
}

/**
 * @summary 查询单个日程详情
 *
 * @param request GetEventRequest
 * @param tmpHeader GetEventHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEventResponse
 */
async function getEventWithOptions(request: GetEventRequest, tmpHeader: GetEventHeaders, runtime: Util.RuntimeOptions): GetEventResponse {
  Util.validateModel(request);
  var headers = new GetEventShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.maxAttendees)) {
    query['MaxAttendees'] = request.maxAttendees;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.calendarId)) {
    body['CalendarId'] = request.calendarId;
  }
  if (!Util.isUnset(request.eventId)) {
    body['EventId'] = request.eventId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetEvent',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/getEvent`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询单个日程详情
 *
 * @param request GetEventRequest
 * @return GetEventResponse
 */
async function getEvent(request: GetEventRequest): GetEventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetEventHeaders{};
  return getEventWithOptions(request, headers, runtime);
}

model GetFieldDefByUuidHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetFieldDefByUuidShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetFieldDefByUuidRequest {
  appType?: string(name='AppType', description='This parameter is required.', example='APP_PBKT0xxx'),
  formUuid?: string(name='FormUuid', description='This parameter is required.', example='FORM-xxxxx'),
  systemToken?: string(name='SystemToken', description='This parameter is required.', example='hexxxx'),
}

model GetFieldDefByUuidResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ 
    {
      behavior?: string(name='Behavior', example='NORMAL'),
      children?: string(name='Children'),
      componentName?: string(name='ComponentName', example='TextareaField'),
      fieldId?: string(name='FieldId', example='textField_laq7xxx'),
      label?: any(name='Label', example='{}'),
      props?: any(name='Props', example='{}'),
      success?: boolean(name='Success', example='true'),
    }
  ](name='result'),
  success?: boolean(name='success', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetFieldDefByUuidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFieldDefByUuidResponseBody(name='body'),
}

/**
 * @summary 获取表单内的组件信息
 *
 * @param request GetFieldDefByUuidRequest
 * @param tmpHeader GetFieldDefByUuidHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFieldDefByUuidResponse
 */
async function getFieldDefByUuidWithOptions(request: GetFieldDefByUuidRequest, tmpHeader: GetFieldDefByUuidHeaders, runtime: Util.RuntimeOptions): GetFieldDefByUuidResponse {
  Util.validateModel(request);
  var headers = new GetFieldDefByUuidShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.formUuid)) {
    body['FormUuid'] = request.formUuid;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFieldDefByUuid',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/getFieldDefByUuid`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取表单内的组件信息
 *
 * @param request GetFieldDefByUuidRequest
 * @return GetFieldDefByUuidResponse
 */
async function getFieldDefByUuid(request: GetFieldDefByUuidRequest): GetFieldDefByUuidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetFieldDefByUuidHeaders{};
  return getFieldDefByUuidWithOptions(request, headers, runtime);
}

model GetFileDownloadInfoHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetFileDownloadInfoShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetFileDownloadInfoRequest {
  dentryId?: string(name='DentryId', example='798xxxxx'),
  option?: {
    preferIntranet?: boolean(name='PreferIntranet', example='true'),
    version?: long(name='Version', example='1'),
  }(name='Option'),
  spaceId?: string(name='SpaceId', example='854xxxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model GetFileDownloadInfoShrinkRequest {
  dentryId?: string(name='DentryId', example='798xxxxx'),
  optionShrink?: string(name='Option'),
  spaceId?: string(name='SpaceId', example='854xxxx'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetFileDownloadInfoResponseBody = {
  headerSignatureInfo?: {
    expirationSeconds?: int32(name='ExpirationSeconds', example='900'),
    headers?: map[string]string(name='Headers'),
    internalResourceUrls?: [ string ](name='InternalResourceUrls'),
    region?: string(name='Region', example='ZHANGJIAKOU'),
    resourceUrls?: [ string ](name='ResourceUrls'),
  }(name='headerSignatureInfo'),
  protocol?: string(name='protocol', example='HEADER_SIGNATURE'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetFileDownloadInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFileDownloadInfoResponseBody(name='body'),
}

/**
 * @summary 获取文件下载信息
 *
 * @param tmpReq GetFileDownloadInfoRequest
 * @param tmpHeader GetFileDownloadInfoHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFileDownloadInfoResponse
 */
async function getFileDownloadInfoWithOptions(tmpReq: GetFileDownloadInfoRequest, tmpHeader: GetFileDownloadInfoHeaders, runtime: Util.RuntimeOptions): GetFileDownloadInfoResponse {
  Util.validateModel(tmpReq);
  var request = new GetFileDownloadInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetFileDownloadInfoShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.option)) {
    request.optionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.option, 'Option', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.dentryId)) {
    body['DentryId'] = request.dentryId;
  }
  if (!Util.isUnset(request.optionShrink)) {
    body['Option'] = request.optionShrink;
  }
  if (!Util.isUnset(request.spaceId)) {
    body['SpaceId'] = request.spaceId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFileDownloadInfo',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/getFileDownloadInfo`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取文件下载信息
 *
 * @param request GetFileDownloadInfoRequest
 * @return GetFileDownloadInfoResponse
 */
async function getFileDownloadInfo(request: GetFileDownloadInfoRequest): GetFileDownloadInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetFileDownloadInfoHeaders{};
  return getFileDownloadInfoWithOptions(request, headers, runtime);
}

model GetFileUploadInfoHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetFileUploadInfoShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetFileUploadInfoRequest {
  option?: {
    preCheckParam?: {
      name?: string(name='Name', example='None'),
      size?: long(name='Size', example='None'),
    }(name='PreCheckParam'),
    preferIntranet?: boolean(name='PreferIntranet', example='true'),
    preferRegion?: string(name='PreferRegion', example='ZHANGJIAKOU'),
    storageDriver?: string(name='StorageDriver', example='DINGTALK'),
  }(name='Option'),
  parentDentryUuid?: string(name='ParentDentryUuid', example='dentryUuid'),
  protocol?: string(name='Protocol', example='HEADER_SIGNATURE'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model GetFileUploadInfoShrinkRequest {
  optionShrink?: string(name='Option'),
  parentDentryUuid?: string(name='ParentDentryUuid', example='dentryUuid'),
  protocol?: string(name='Protocol', example='HEADER_SIGNATURE'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetFileUploadInfoResponseBody = {
  headerSignatureInfo?: {
    expirationSeconds?: int32(name='ExpirationSeconds', example='900'),
    headers?: map[string]string(name='Headers'),
    internalResourceUrls?: [ string ](name='InternalResourceUrls'),
    region?: string(name='Region', example='ZHANGJIAKOU'),
    resourceUrls?: [ string ](name='ResourceUrls'),
  }(name='headerSignatureInfo'),
  protocol?: string(name='protocol', example='HEADER_SIGNATURE'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  storageDriver?: string(name='storageDriver', example='DINGTALK'),
  uploadKey?: string(name='uploadKey', example='upload_key'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetFileUploadInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFileUploadInfoResponseBody(name='body'),
}

/**
 * @summary 获取文件上传信息
 *
 * @param tmpReq GetFileUploadInfoRequest
 * @param tmpHeader GetFileUploadInfoHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFileUploadInfoResponse
 */
async function getFileUploadInfoWithOptions(tmpReq: GetFileUploadInfoRequest, tmpHeader: GetFileUploadInfoHeaders, runtime: Util.RuntimeOptions): GetFileUploadInfoResponse {
  Util.validateModel(tmpReq);
  var request = new GetFileUploadInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetFileUploadInfoShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.option)) {
    request.optionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.option, 'Option', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.optionShrink)) {
    body['Option'] = request.optionShrink;
  }
  if (!Util.isUnset(request.parentDentryUuid)) {
    body['ParentDentryUuid'] = request.parentDentryUuid;
  }
  if (!Util.isUnset(request.protocol)) {
    body['Protocol'] = request.protocol;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFileUploadInfo',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/getFileUploadInfo`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取文件上传信息
 *
 * @param request GetFileUploadInfoRequest
 * @return GetFileUploadInfoResponse
 */
async function getFileUploadInfo(request: GetFileUploadInfoRequest): GetFileUploadInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetFileUploadInfoHeaders{};
  return getFileUploadInfoWithOptions(request, headers, runtime);
}

model GetFormComponentDefinitionListHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetFormComponentDefinitionListShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetFormComponentDefinitionListRequest {
  appType?: string(name='AppType', description='This parameter is required.', example='APP_PBKT0xxx'),
  formUuid?: string(name='FormUuid', description='This parameter is required.', example='FORM-xxxxx'),
  language?: string(name='Language', example='zh_CN'),
  systemToken?: string(name='SystemToken', description='This parameter is required.', example='hexxxx'),
}

model GetFormComponentDefinitionListResponseBody = {
  result?: [ 
    {
      componentName?: string(name='ComponentName', example='FooterYida'),
      fieldId?: string(name='FieldId', example='formContainer_kksjiuk'),
      label?: string(name='Label', example='{"en_US":""}'),
      parentId?: string(name='ParentId', example='formContainer_kksjiuk'),
    }
  ](name='Result'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetFormComponentDefinitionListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFormComponentDefinitionListResponseBody(name='body'),
}

/**
 * @summary 获取表单组件定义列表
 *
 * @param request GetFormComponentDefinitionListRequest
 * @param tmpHeader GetFormComponentDefinitionListHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFormComponentDefinitionListResponse
 */
async function getFormComponentDefinitionListWithOptions(request: GetFormComponentDefinitionListRequest, tmpHeader: GetFormComponentDefinitionListHeaders, runtime: Util.RuntimeOptions): GetFormComponentDefinitionListResponse {
  Util.validateModel(request);
  var headers = new GetFormComponentDefinitionListShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.formUuid)) {
    body['FormUuid'] = request.formUuid;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFormComponentDefinitionList',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/getFormComponentDefinitionList`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取表单组件定义列表
 *
 * @param request GetFormComponentDefinitionListRequest
 * @return GetFormComponentDefinitionListResponse
 */
async function getFormComponentDefinitionList(request: GetFormComponentDefinitionListRequest): GetFormComponentDefinitionListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetFormComponentDefinitionListHeaders{};
  return getFormComponentDefinitionListWithOptions(request, headers, runtime);
}

model GetFormDataByIDHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetFormDataByIDShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetFormDataByIDRequest {
  appType?: string(name='AppType', example='APP_PBKT0MFBEBTDO8T7SLVP'),
  id?: string(name='Id', example='FORM_INST_12345'),
  language?: string(name='Language', example='zh_CN'),
  systemToken?: string(name='SystemToken', example='hexxxx'),
}

model GetFormDataByIDResponseBody = {
  formData?: map[string]any(name='formData'),
  formInstId?: string(name='formInstId', example='FORM_INST_12345'),
  modifiedTimeGMT?: string(name='modifiedTimeGMT', example='2021-05-01'),
  originator?: {
    departmentName?: string(name='DepartmentName', example='开发部'),
    email?: string(name='Email', example='abc@alimail.com'),
    name?: {
      nameInChinese?: string(name='NameInChinese', example='张三'),
      nameInEnglish?: string(name='NameInEnglish', example='ZhangSan'),
      type?: string(name='Type', example='i18n'),
    }(name='Name'),
    userId?: string(name='UserId', example='012345'),
  }(name='originator'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetFormDataByIDResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFormDataByIDResponseBody(name='body'),
}

/**
 * @summary 查询表单数据
 *
 * @param request GetFormDataByIDRequest
 * @param tmpHeader GetFormDataByIDHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFormDataByIDResponse
 */
async function getFormDataByIDWithOptions(request: GetFormDataByIDRequest, tmpHeader: GetFormDataByIDHeaders, runtime: Util.RuntimeOptions): GetFormDataByIDResponse {
  Util.validateModel(request);
  var headers = new GetFormDataByIDShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFormDataByID',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/getFormDataByID`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询表单数据
 *
 * @param request GetFormDataByIDRequest
 * @return GetFormDataByIDResponse
 */
async function getFormDataByID(request: GetFormDataByIDRequest): GetFormDataByIDResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetFormDataByIDHeaders{};
  return getFormDataByIDWithOptions(request, headers, runtime);
}

model GetFormListInAppHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetFormListInAppShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetFormListInAppRequest {
  appType?: string(name='AppType', description='This parameter is required.', example='APP_PBKT0xxx'),
  formTypes?: string(name='FormTypes', example='receipt'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  systemToken?: string(name='SystemToken', description='This parameter is required.', example='hexxxx'),
}

model GetFormListInAppResponseBody = {
  currentPage?: int32(name='currentPage', example='1'),
  data?: [ 
    {
      creator?: string(name='Creator', example='012345'),
      formType?: string(name='FormType', example='receipt'),
      formUuid?: string(name='FormUuid', example='FORM-BAxxxxx'),
      gmtCreate?: string(name='GmtCreate', example='2023-02-22 15:27:07'),
      title?: {
        enUS?: string(name='EnUS', example='form'),
        zhCN?: string(name='ZhCN'),
      }(name='Title'),
    }
  ](name='data'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
  totalCount?: int32(name='totalCount', example='20'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetFormListInAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFormListInAppResponseBody(name='body'),
}

/**
 * @summary 获取指定应用下的表单列表
 *
 * @param request GetFormListInAppRequest
 * @param tmpHeader GetFormListInAppHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFormListInAppResponse
 */
async function getFormListInAppWithOptions(request: GetFormListInAppRequest, tmpHeader: GetFormListInAppHeaders, runtime: Util.RuntimeOptions): GetFormListInAppResponse {
  Util.validateModel(request);
  var headers = new GetFormListInAppShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.formTypes)) {
    body['FormTypes'] = request.formTypes;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFormListInApp',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/getFormListInApp`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取指定应用下的表单列表
 *
 * @param request GetFormListInAppRequest
 * @return GetFormListInAppResponse
 */
async function getFormListInApp(request: GetFormListInAppRequest): GetFormListInAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetFormListInAppHeaders{};
  return getFormListInAppWithOptions(request, headers, runtime);
}

model GetGroupLiveListHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetGroupLiveListShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetGroupLiveListRequest {
  endTime?: long(name='EndTime', description='This parameter is required.', example='1398324600000'),
  openConversationId?: string(name='OpenConversationId', description='This parameter is required.', example='cidt*****Xa4K10w=='),
  startTime?: long(name='StartTime', description='This parameter is required.', example='1398324600000'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model GetGroupLiveListShrinkRequest {
  endTime?: long(name='EndTime', description='This parameter is required.', example='1398324600000'),
  openConversationId?: string(name='OpenConversationId', description='This parameter is required.', example='cidt*****Xa4K10w=='),
  startTime?: long(name='StartTime', description='This parameter is required.', example='1398324600000'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetGroupLiveListResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: {
    groupLiveList?: [ 
      {
        anchorNickname?: string(name='AnchorNickname', example='nickName'),
        anchorUnionId?: string(name='AnchorUnionId', example='Eijxx'),
        liveEndTime?: long(name='LiveEndTime', example='1398324600000'),
        liveStartTime?: long(name='LiveStartTime', example='1398321600000'),
        liveUuid?: string(name='LiveUuid', example='4d38xxxxx'),
        title?: string(name='Title', example='直播标题'),
      }
    ](name='GroupLiveList', example='直播列表'),
  }(name='result'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetGroupLiveListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGroupLiveListResponseBody(name='body'),
}

/**
 * @summary 查询群内直播信息(最早支持2024年01月数据)
 *
 * @param tmpReq GetGroupLiveListRequest
 * @param tmpHeader GetGroupLiveListHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetGroupLiveListResponse
 */
async function getGroupLiveListWithOptions(tmpReq: GetGroupLiveListRequest, tmpHeader: GetGroupLiveListHeaders, runtime: Util.RuntimeOptions): GetGroupLiveListResponse {
  Util.validateModel(tmpReq);
  var request = new GetGroupLiveListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetGroupLiveListShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.openConversationId)) {
    body['OpenConversationId'] = request.openConversationId;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetGroupLiveList',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/getGroupLiveList`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询群内直播信息(最早支持2024年01月数据)
 *
 * @param request GetGroupLiveListRequest
 * @return GetGroupLiveListResponse
 */
async function getGroupLiveList(request: GetGroupLiveListRequest): GetGroupLiveListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetGroupLiveListHeaders{};
  return getGroupLiveListWithOptions(request, headers, runtime);
}

model GetInnerGroupMembersHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetInnerGroupMembersShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetInnerGroupMembersRequest {
  maxResults?: int32(name='MaxResults', example='100'),
  nextToken?: string(name='NextToken', example='UZr*****'),
  openConversationId?: string(name='OpenConversationId', example='cidB8Pzg****FIWPv2PMA=='),
}

model GetInnerGroupMembersResponseBody = {
  hasMore?: boolean(name='hasMore', example='true'),
  nextToken?: string(name='nextToken', example='cdf***'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  userIds?: [ string ](name='userIds', example='["012345"]'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetInnerGroupMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInnerGroupMembersResponseBody(name='body'),
}

/**
 * @summary 查询企业内部群成员
 *
 * @param request GetInnerGroupMembersRequest
 * @param tmpHeader GetInnerGroupMembersHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetInnerGroupMembersResponse
 */
async function getInnerGroupMembersWithOptions(request: GetInnerGroupMembersRequest, tmpHeader: GetInnerGroupMembersHeaders, runtime: Util.RuntimeOptions): GetInnerGroupMembersResponse {
  Util.validateModel(request);
  var headers = new GetInnerGroupMembersShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.openConversationId)) {
    body['OpenConversationId'] = request.openConversationId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInnerGroupMembers',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/im/getInnerGroupMembers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询企业内部群成员
 *
 * @param request GetInnerGroupMembersRequest
 * @return GetInnerGroupMembersResponse
 */
async function getInnerGroupMembers(request: GetInnerGroupMembersRequest): GetInnerGroupMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetInnerGroupMembersHeaders{};
  return getInnerGroupMembersWithOptions(request, headers, runtime);
}

model GetInstanceByIdHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetInstanceByIdShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetInstanceByIdRequest {
  appType?: string(name='AppType', example='APP_PBxxx'),
  id?: string(name='Id', example='f30233fb-72e1-xxx'),
  language?: string(name='Language', example='zh_CN'),
  systemToken?: string(name='SystemToken', example='hexxxx'),
}

model GetInstanceByIdResponseBody = {
  actionExecutor?: [ 
    {
      deptName?: string(name='DeptName', example='开发部'),
      email?: string(name='Email', example='abc@alimail.com'),
      name?: {
        nameInChinese?: string(name='NameInChinese', example='张三'),
        nameInEnglish?: string(name='NameInEnglish', example='ZhangSan'),
        type?: string(name='Type', example='i18n'),
      }(name='Name'),
      userId?: string(name='UserId', example='manager123'),
    }
  ](name='actionExecutor'),
  approvedResult?: string(name='approvedResult', example='agree'),
  createTimeGMT?: string(name='createTimeGMT', example='2021-05-01'),
  data?: map[string]any(name='data'),
  formUuid?: string(name='formUuid', example='FORM-EF6Y4xxx'),
  instanceStatus?: string(name='instanceStatus', example='RUNNING'),
  modifiedTimeGMT?: string(name='modifiedTimeGMT', example='2021-05-01'),
  originator?: {
    deptName?: string(name='DeptName', example='开发部'),
    email?: string(name='Email', example='abc@alimail.com'),
    name?: {
      nameInChinese?: string(name='NameInChinese', example='张三'),
      nameInEnglish?: string(name='NameInEnglish', example='ZhangSan'),
      type?: string(name='Type', example='i18n'),
    }(name='Name'),
    userId?: string(name='UserId', example='manager123'),
  }(name='originator'),
  processCode?: string(name='processCode', example='TPROC--X1Gxxx'),
  processInstanceId?: string(name='processInstanceId', example='f30233fb-72e1-4xxx'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  title?: string(name='title', example='李四发起的请购单'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
  version?: long(name='version', example='1'),
}

model GetInstanceByIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceByIdResponseBody(name='body'),
}

/**
 * @summary 根据流程实例ID获取流程实例
 *
 * @param request GetInstanceByIdRequest
 * @param tmpHeader GetInstanceByIdHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetInstanceByIdResponse
 */
async function getInstanceByIdWithOptions(request: GetInstanceByIdRequest, tmpHeader: GetInstanceByIdHeaders, runtime: Util.RuntimeOptions): GetInstanceByIdResponse {
  Util.validateModel(request);
  var headers = new GetInstanceByIdShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceById',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/getInstanceById`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 根据流程实例ID获取流程实例
 *
 * @param request GetInstanceByIdRequest
 * @return GetInstanceByIdResponse
 */
async function getInstanceById(request: GetInstanceByIdRequest): GetInstanceByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetInstanceByIdHeaders{};
  return getInstanceByIdWithOptions(request, headers, runtime);
}

model GetInstanceIdListHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetInstanceIdListShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetInstanceIdListRequest {
  appType?: string(name='AppType', example='APP_PBxxx'),
  approvedResult?: string(name='ApprovedResult', example='agree'),
  createFromTimeGMT?: string(name='CreateFromTimeGMT', example='2021-05-01'),
  createToTimeGMT?: string(name='CreateToTimeGMT', example='2021-05-01'),
  formUuid?: string(name='FormUuid', example='FORM-EF6Yxxx'),
  instanceStatus?: string(name='InstanceStatus', example='RUNNING'),
  language?: string(name='Language', example='zh_CN'),
  modifiedFromTimeGMT?: string(name='ModifiedFromTimeGMT', example='2021-05-01'),
  modifiedToTimeGMT?: string(name='ModifiedToTimeGMT', example='2021-09-10'),
  originatorId?: string(name='OriginatorId', example='012345'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  searchFieldJson?: string(name='SearchFieldJson', example='{\\\\"textField\\\\":\\\\"123\\\\"}'),
  systemToken?: string(name='SystemToken', example='hexxxx'),
  taskId?: string(name='TaskId', example='1045001'),
}

model GetInstanceIdListResponseBody = {
  data?: [ string ](name='data', example='[ "FINST-BOOxxx" ]'),
  pageNumber?: long(name='pageNumber', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: long(name='totalCount', example='10'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetInstanceIdListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceIdListResponseBody(name='body'),
}

/**
 * @summary 获取实例ID列表
 *
 * @param request GetInstanceIdListRequest
 * @param tmpHeader GetInstanceIdListHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetInstanceIdListResponse
 */
async function getInstanceIdListWithOptions(request: GetInstanceIdListRequest, tmpHeader: GetInstanceIdListHeaders, runtime: Util.RuntimeOptions): GetInstanceIdListResponse {
  Util.validateModel(request);
  var headers = new GetInstanceIdListShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.approvedResult)) {
    body['ApprovedResult'] = request.approvedResult;
  }
  if (!Util.isUnset(request.createFromTimeGMT)) {
    body['CreateFromTimeGMT'] = request.createFromTimeGMT;
  }
  if (!Util.isUnset(request.createToTimeGMT)) {
    body['CreateToTimeGMT'] = request.createToTimeGMT;
  }
  if (!Util.isUnset(request.formUuid)) {
    body['FormUuid'] = request.formUuid;
  }
  if (!Util.isUnset(request.instanceStatus)) {
    body['InstanceStatus'] = request.instanceStatus;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.modifiedFromTimeGMT)) {
    body['ModifiedFromTimeGMT'] = request.modifiedFromTimeGMT;
  }
  if (!Util.isUnset(request.modifiedToTimeGMT)) {
    body['ModifiedToTimeGMT'] = request.modifiedToTimeGMT;
  }
  if (!Util.isUnset(request.originatorId)) {
    body['OriginatorId'] = request.originatorId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchFieldJson)) {
    body['SearchFieldJson'] = request.searchFieldJson;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceIdList',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/getInstanceIdList`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取实例ID列表
 *
 * @param request GetInstanceIdListRequest
 * @return GetInstanceIdListResponse
 */
async function getInstanceIdList(request: GetInstanceIdListRequest): GetInstanceIdListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetInstanceIdListHeaders{};
  return getInstanceIdListWithOptions(request, headers, runtime);
}

model GetInstancesHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetInstancesShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetInstancesRequest {
  appType?: string(name='AppType', example='APP_PBxxx'),
  approvedResult?: string(name='ApprovedResult', example='agree'),
  createFromTimeGMT?: string(name='CreateFromTimeGMT', example='2021-05-01'),
  createToTimeGMT?: string(name='CreateToTimeGMT', example='2021-05-01'),
  formUuid?: string(name='FormUuid', example='FORM-EF6Yxxx'),
  instanceStatus?: string(name='InstanceStatus', example='RUNNING'),
  language?: string(name='Language', example='zh_CN'),
  modifiedFromTimeGMT?: string(name='ModifiedFromTimeGMT', example='2021-05-01'),
  modifiedToTimeGMT?: string(name='ModifiedToTimeGMT', example='2021-09-10'),
  orderConfigJson?: string(name='OrderConfigJson', example='{}'),
  originatorId?: string(name='OriginatorId', example='012345'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  searchFieldJson?: string(name='SearchFieldJson', example='{\\\\"textField\\\\":\\\\"123\\\\"}'),
  systemToken?: string(name='SystemToken', example='hexxyy'),
  taskId?: string(name='TaskId', example='1045001'),
}

model GetInstancesResponseBody = {
  data?: [ 
    {
      actionExecutor?: [ 
        {
          deptName?: string(name='DeptName', example='开发部'),
          email?: string(name='Email', example='abc@alimail.com'),
          name?: {
            nameInChinese?: string(name='NameInChinese', example='张三'),
            nameInEnglish?: string(name='NameInEnglish', example='ZhangSan'),
            type?: string(name='Type', example='i18n'),
          }(name='Name'),
          userId?: string(name='UserId', example='manager123'),
        }
      ](name='ActionExecutor'),
      approvedResult?: string(name='ApprovedResult', example='agree'),
      createTimeGMT?: string(name='CreateTimeGMT', example='2021-05-01'),
      data?: map[string]any(name='Data'),
      formUuid?: string(name='FormUuid', example='FORM-EF6Y4G8WO2FN0SUB43TDQ3CGC3FMFQ1G9400RCJ3'),
      instanceStatus?: string(name='InstanceStatus', example='RUNNING'),
      modifiedTimeGMT?: string(name='ModifiedTimeGMT', example='2021-05-01'),
      originator?: {
        deptName?: string(name='DeptName', example='开发部'),
        email?: string(name='Email', example='abc@alimail.com'),
        name?: {
          nameInChinese?: string(name='NameInChinese', example='张三'),
          nameInEnglish?: string(name='NameInEnglish', example='ZhangSan'),
          type?: string(name='Type', example='i18n'),
        }(name='Name'),
        userId?: string(name='UserId', example='manager123'),
      }(name='Originator'),
      processCode?: string(name='ProcessCode', example='TPROC--X1Gxxx'),
      processInstanceId?: string(name='ProcessInstanceId', example='f30233fb-72e1-4af4-8cb8-c7e0ea9ee530'),
      title?: string(name='Title', example='小红发起的请购单'),
      version?: long(name='Version', example='1.0'),
    }
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: long(name='totalCount', example='10'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstancesResponseBody(name='body'),
}

/**
 * @summary 获取流程实例
 *
 * @param request GetInstancesRequest
 * @param tmpHeader GetInstancesHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetInstancesResponse
 */
async function getInstancesWithOptions(request: GetInstancesRequest, tmpHeader: GetInstancesHeaders, runtime: Util.RuntimeOptions): GetInstancesResponse {
  Util.validateModel(request);
  var headers = new GetInstancesShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.approvedResult)) {
    body['ApprovedResult'] = request.approvedResult;
  }
  if (!Util.isUnset(request.createFromTimeGMT)) {
    body['CreateFromTimeGMT'] = request.createFromTimeGMT;
  }
  if (!Util.isUnset(request.createToTimeGMT)) {
    body['CreateToTimeGMT'] = request.createToTimeGMT;
  }
  if (!Util.isUnset(request.formUuid)) {
    body['FormUuid'] = request.formUuid;
  }
  if (!Util.isUnset(request.instanceStatus)) {
    body['InstanceStatus'] = request.instanceStatus;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.modifiedFromTimeGMT)) {
    body['ModifiedFromTimeGMT'] = request.modifiedFromTimeGMT;
  }
  if (!Util.isUnset(request.modifiedToTimeGMT)) {
    body['ModifiedToTimeGMT'] = request.modifiedToTimeGMT;
  }
  if (!Util.isUnset(request.orderConfigJson)) {
    body['OrderConfigJson'] = request.orderConfigJson;
  }
  if (!Util.isUnset(request.originatorId)) {
    body['OriginatorId'] = request.originatorId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchFieldJson)) {
    body['SearchFieldJson'] = request.searchFieldJson;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstances',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/getInstances`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取流程实例
 *
 * @param request GetInstancesRequest
 * @return GetInstancesResponse
 */
async function getInstances(request: GetInstancesRequest): GetInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetInstancesHeaders{};
  return getInstancesWithOptions(request, headers, runtime);
}

model GetInstancesByIdListHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetInstancesByIdListShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetInstancesByIdListRequest {
  appType?: string(name='AppType', example='APP_PBxxx'),
  language?: string(name='Language', example='zh_CN'),
  processInstanceIds?: string(name='ProcessInstanceIds', example='inst-123,inst-223'),
  systemToken?: string(name='SystemToken', example='hexxxx'),
}

model GetInstancesByIdListResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ 
    {
      actionExecutor?: [ 
        {
          departmentName?: string(name='DepartmentName', example='开发部'),
          email?: string(name='Email', example='abc@alimail.com'),
          name?: {
            nameInChinese?: string(name='NameInChinese', example='张三'),
            nameInEnglish?: string(name='NameInEnglish', example='ZhangSan'),
            type?: string(name='Type', example='i18n'),
          }(name='Name'),
          userId?: string(name='UserId', example='manager123'),
        }
      ](name='ActionExecutor'),
      approvedResult?: string(name='ApprovedResult', example='agree'),
      data?: map[string]any(name='Data'),
      formUuid?: string(name='FormUuid', example='FORM-EF6Y4G8WO2FN0SUB43TDQ3CGC3FMFQ1G9400RCJ3'),
      instanceStatus?: string(name='InstanceStatus', example='RUNNING'),
      originator?: {
        departmentName?: string(name='DepartmentName', example='开发部'),
        email?: string(name='Email', example='abc@alimail.com'),
        name?: {
          nameInChinese?: string(name='NameInChinese', example='张三'),
          nameInEnglish?: string(name='NameInEnglish', example='ZhangSan'),
          type?: string(name='Type', example='i18n'),
        }(name='Name'),
        userId?: string(name='UserId', example='manager123'),
      }(name='Originator'),
      processCode?: string(name='ProcessCode', example='TPROC--X1Gxxx'),
      processInstanceId?: string(name='ProcessInstanceId', example='f30233fb-72e1-4xxx'),
      title?: string(name='Title', example='李四发起的请购单'),
    }
  ](name='result'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetInstancesByIdListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstancesByIdListResponseBody(name='body'),
}

/**
 * @summary 根据实例 ID 列表批量获取流程实例详情(批量获取流程实例列表)
 *
 * @param request GetInstancesByIdListRequest
 * @param tmpHeader GetInstancesByIdListHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetInstancesByIdListResponse
 */
async function getInstancesByIdListWithOptions(request: GetInstancesByIdListRequest, tmpHeader: GetInstancesByIdListHeaders, runtime: Util.RuntimeOptions): GetInstancesByIdListResponse {
  Util.validateModel(request);
  var headers = new GetInstancesByIdListShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.processInstanceIds)) {
    body['ProcessInstanceIds'] = request.processInstanceIds;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstancesByIdList',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/getInstancesByIdList`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 根据实例 ID 列表批量获取流程实例详情(批量获取流程实例列表)
 *
 * @param request GetInstancesByIdListRequest
 * @return GetInstancesByIdListResponse
 */
async function getInstancesByIdList(request: GetInstancesByIdListRequest): GetInstancesByIdListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetInstancesByIdListHeaders{};
  return getInstancesByIdListWithOptions(request, headers, runtime);
}

model GetLiveReplayUrlHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetLiveReplayUrlShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetLiveReplayUrlRequest {
  liveId?: string(name='LiveId', description='This parameter is required.', example='4d38xxxxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model GetLiveReplayUrlShrinkRequest {
  liveId?: string(name='LiveId', description='This parameter is required.', example='4d38xxxxx'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetLiveReplayUrlResponseBody = {
  replayUrl?: string(name='replayUrl', example='https://xxxxxxxx'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetLiveReplayUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLiveReplayUrlResponseBody(name='body'),
}

/**
 * @summary 获取直播的可下载回放地址
 *
 * @param tmpReq GetLiveReplayUrlRequest
 * @param tmpHeader GetLiveReplayUrlHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetLiveReplayUrlResponse
 */
async function getLiveReplayUrlWithOptions(tmpReq: GetLiveReplayUrlRequest, tmpHeader: GetLiveReplayUrlHeaders, runtime: Util.RuntimeOptions): GetLiveReplayUrlResponse {
  Util.validateModel(tmpReq);
  var request = new GetLiveReplayUrlShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetLiveReplayUrlShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.liveId)) {
    body['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetLiveReplayUrl',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/getLiveReplayUrl`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取直播的可下载回放地址
 *
 * @param request GetLiveReplayUrlRequest
 * @return GetLiveReplayUrlResponse
 */
async function getLiveReplayUrl(request: GetLiveReplayUrlRequest): GetLiveReplayUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetLiveReplayUrlHeaders{};
  return getLiveReplayUrlWithOptions(request, headers, runtime);
}

model GetMeCorpSubmissionHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetMeCorpSubmissionShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetMeCorpSubmissionRequest {
  appTypes?: string(name='AppTypes', example='[\\\\"APP_xxx\\\\",\\\\"APP_xxx\\\\"]'),
  corpId?: string(name='CorpId', example='ding123'),
  createFromTimeGMT?: long(name='CreateFromTimeGMT', example='2021-05-01'),
  createToTimeGMT?: long(name='CreateToTimeGMT', example='2021-05-01'),
  keyword?: string(name='Keyword', example='{}'),
  language?: string(name='Language', example='zh_CN'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  processCodes?: string(name='ProcessCodes', example='[\\\\"xx\\\\",\\\\"xxx\\\\"]'),
  token?: string(name='Token', example='JHASD123HAXXX'),
}

model GetMeCorpSubmissionResponseBody = {
  data?: [ 
    {
      actioner?: [ 
        {
          buName?: string(name='BuName', example='某研究部'),
          email?: string(name='Email', example='abc@alimail.com'),
          employeeType?: string(name='EmployeeType', example='正式'),
          employeeTypeInformation?: string(name='EmployeeTypeInformation', example='official'),
          humanResourceGroupWorkNumber?: string(name='HumanResourceGroupWorkNumber', example='123311221'),
          isSystemAdmin?: boolean(name='IsSystemAdmin', example='true'),
          level?: string(name='Level', example='P7'),
          name?: string(name='Name', example='请购单'),
          nickName?: string(name='NickName', example='与心'),
          orderNumber?: string(name='OrderNumber', example='o-YDJKINSxxx'),
          personalPhoto?: string(name='PersonalPhoto', example='https://abc.com/a.png'),
          personalPhotoUrl?: string(name='PersonalPhotoUrl', example='https://oss/zhangsan.png'),
          pinyinNameAll?: string(name='PinyinNameAll', example='XIAOHONG'),
          pinyinNickName?: string(name='PinyinNickName', example='xiaohong'),
          state?: string(name='State', example='running'),
          superUserId?: string(name='SuperUserId', example='manager123'),
          tbWang?: string(name='TbWang', example='wang123'),
          userId?: string(name='UserId', example='manager123'),
        }
      ](name='Actioner'),
      actionerId?: [ string ](name='ActionerId'),
      actionerName?: [ string ](name='ActionerName'),
      appType?: string(name='AppType', example='APP_PBKT0xxx'),
      createTimeGMT?: string(name='CreateTimeGMT', example='2021-01-01'),
      currentActivityInstances?: [ 
        {
          activityId?: string(name='ActivityId', example='act-xxaanfaf'),
          activityInstanceStatus?: string(name='ActivityInstanceStatus', example='running'),
          activityName?: string(name='ActivityName', example='activity-124'),
          activityNameEn?: string(name='ActivityNameEn', example='redirect task'),
          id?: long(name='Id', example='12345'),
        }
      ](name='CurrentActivityInstances'),
      dataMap?: map[string]any(name='DataMap'),
      dataType?: string(name='DataType', example='edit'),
      finishTimeGMT?: string(name='FinishTimeGMT', example='2021-01-01'),
      formInstanceId?: string(name='FormInstanceId', example='FINST-NJYJxxx'),
      formUuid?: string(name='FormUuid', example='FORM-EF6xxx'),
      instanceValue?: string(name='InstanceValue', example='符合宜搭表单实例格式的json数据'),
      modifiedTimeGMT?: string(name='ModifiedTimeGMT', example='2021-01-01'),
      originatorAvatar?: string(name='OriginatorAvatar', example='zhangsan@mediaId'),
      originatorDisplayName?: string(name='OriginatorDisplayName', example='张三'),
      originatorId?: string(name='OriginatorId', example='manager123'),
      processApprovedResult?: string(name='ProcessApprovedResult', example='同意'),
      processApprovedResultText?: string(name='ProcessApprovedResultText', example='通过'),
      processCode?: string(name='ProcessCode', example='TPROC--X1Gxxx'),
      processId?: long(name='ProcessId', example='52330'),
      processInstanceId?: string(name='ProcessInstanceId', example='f30233fb-72e1-xxx'),
      processInstanceStatus?: string(name='ProcessInstanceStatus', example='finished'),
      processInstanceStatusText?: string(name='ProcessInstanceStatusText', example='已同意'),
      processName?: string(name='ProcessName', example='小红的单子'),
      title?: string(name='Title', example='小红发起的请购单'),
      version?: long(name='Version', example='1'),
    }
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: long(name='totalCount', example='10'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetMeCorpSubmissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMeCorpSubmissionResponseBody(name='body'),
}

/**
 * @summary 获取组织内某人提交的任务
 *
 * @param request GetMeCorpSubmissionRequest
 * @param tmpHeader GetMeCorpSubmissionHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMeCorpSubmissionResponse
 */
async function getMeCorpSubmissionWithOptions(request: GetMeCorpSubmissionRequest, tmpHeader: GetMeCorpSubmissionHeaders, runtime: Util.RuntimeOptions): GetMeCorpSubmissionResponse {
  Util.validateModel(request);
  var headers = new GetMeCorpSubmissionShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appTypes)) {
    body['AppTypes'] = request.appTypes;
  }
  if (!Util.isUnset(request.corpId)) {
    body['CorpId'] = request.corpId;
  }
  if (!Util.isUnset(request.createFromTimeGMT)) {
    body['CreateFromTimeGMT'] = request.createFromTimeGMT;
  }
  if (!Util.isUnset(request.createToTimeGMT)) {
    body['CreateToTimeGMT'] = request.createToTimeGMT;
  }
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.processCodes)) {
    body['ProcessCodes'] = request.processCodes;
  }
  if (!Util.isUnset(request.token)) {
    body['Token'] = request.token;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMeCorpSubmission',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/getMeCorpSubmission`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取组织内某人提交的任务
 *
 * @param request GetMeCorpSubmissionRequest
 * @return GetMeCorpSubmissionResponse
 */
async function getMeCorpSubmission(request: GetMeCorpSubmissionRequest): GetMeCorpSubmissionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetMeCorpSubmissionHeaders{};
  return getMeCorpSubmissionWithOptions(request, headers, runtime);
}

model GetMeetingRoomsScheduleHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetMeetingRoomsScheduleShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetMeetingRoomsScheduleRequest {
  endTime?: string(name='EndTime', description='This parameter is required.', example='2020-01-01T10:15:30+08:00'),
  roomIds?: [ string ](name='RoomIds', description='This parameter is required.', example='["4002xxxxx"]'),
  startTime?: string(name='StartTime', description='This parameter is required.', example='2020-01-01T10:15:30+08:00'),
}

model GetMeetingRoomsScheduleShrinkRequest {
  endTime?: string(name='EndTime', description='This parameter is required.', example='2020-01-01T10:15:30+08:00'),
  roomIdsShrink?: string(name='RoomIds', description='This parameter is required.', example='["4002xxxxx"]'),
  startTime?: string(name='StartTime', description='This parameter is required.', example='2020-01-01T10:15:30+08:00'),
}

model GetMeetingRoomsScheduleResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  scheduleInformation?: [ 
    {
      error?: string(name='Error', example='无权限'),
      roomId?: string(name='RoomId', example='4002f89xxxxx'),
      scheduleItems?: [ 
        {
          end?: {
            dateTime?: string(name='DateTime', example='2020-01-02T10:15:30+08:00'),
            timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
          }(name='End'),
          eventId?: string(name='EventId', example='UzZvxxxxx'),
          organizer?: {
            id?: string(name='Id', example='012345'),
          }(name='Organizer'),
          start?: {
            dateTime?: string(name='DateTime', example='2020-01-02T10:15:30+08:00'),
            timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
          }(name='Start'),
          status?: string(name='Status', example='BUSY'),
        }
      ](name='ScheduleItems'),
    }
  ](name='scheduleInformation'),
}

model GetMeetingRoomsScheduleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMeetingRoomsScheduleResponseBody(name='body'),
}

/**
 * @summary 获取会议室忙闲信息
 *
 * @param tmpReq GetMeetingRoomsScheduleRequest
 * @param tmpHeader GetMeetingRoomsScheduleHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMeetingRoomsScheduleResponse
 */
async function getMeetingRoomsScheduleWithOptions(tmpReq: GetMeetingRoomsScheduleRequest, tmpHeader: GetMeetingRoomsScheduleHeaders, runtime: Util.RuntimeOptions): GetMeetingRoomsScheduleResponse {
  Util.validateModel(tmpReq);
  var request = new GetMeetingRoomsScheduleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetMeetingRoomsScheduleShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.roomIds)) {
    request.roomIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roomIds, 'RoomIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.roomIdsShrink)) {
    body['RoomIds'] = request.roomIdsShrink;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMeetingRoomsSchedule',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/getMeetingRoomsSchedule`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取会议室忙闲信息
 *
 * @param request GetMeetingRoomsScheduleRequest
 * @return GetMeetingRoomsScheduleResponse
 */
async function getMeetingRoomsSchedule(request: GetMeetingRoomsScheduleRequest): GetMeetingRoomsScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetMeetingRoomsScheduleHeaders{};
  return getMeetingRoomsScheduleWithOptions(request, headers, runtime);
}

model GetMineWorkspaceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetMineWorkspaceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetMineWorkspaceRequest {
  request?: map[string]any(name='Request'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model GetMineWorkspaceShrinkRequest {
  requestShrink?: string(name='Request'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetMineWorkspaceResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  workspace?: {
    corpId?: string(name='CorpId', example='ding16b241fd05********288'),
    cover?: string(name='Cover', example='https://example/file-manage-files/zh-CN/202***13/ldet/XXXX.jpg'),
    createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
    creatorId?: string(name='CreatorId', example='01472825524039877041'),
    description?: string(name='Description', example='workspace_description'),
    icon?: {
      type?: string(name='Type', example='URL'),
      value?: string(name='Value', example='https://example/file-manage-files/zh-CN/202***13/ldet/avatar3.jpg'),
    }(name='Icon'),
    modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
    modifierId?: string(name='ModifierId', example='01472825524039877041'),
    name?: string(name='Name', example='workspace_name'),
    permissionRole?: string(name='PermissionRole', example='READER'),
    rootNodeId?: string(name='RootNodeId', example='MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3'),
    teamId?: string(name='TeamId', example='lHiicjNFM2iSFYSdz2iPuI8ZwiEiE'),
    type?: string(name='Type', example='TEAM'),
    url?: string(name='Url', example='workspace_url'),
    workspaceId?: string(name='WorkspaceId', example='9r09jSO3WARyxd8A'),
  }(name='workspace'),
}

model GetMineWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMineWorkspaceResponseBody(name='body'),
}

/**
 * @summary 获取我的文档知识库信息
 *
 * @param tmpReq GetMineWorkspaceRequest
 * @param tmpHeader GetMineWorkspaceHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMineWorkspaceResponse
 */
async function getMineWorkspaceWithOptions(tmpReq: GetMineWorkspaceRequest, tmpHeader: GetMineWorkspaceHeaders, runtime: Util.RuntimeOptions): GetMineWorkspaceResponse {
  Util.validateModel(tmpReq);
  var request = new GetMineWorkspaceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetMineWorkspaceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.request)) {
    request.requestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.request, 'Request', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.requestShrink)) {
    body['Request'] = request.requestShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMineWorkspace',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/getMineWorkspace`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取我的文档知识库信息
 *
 * @param request GetMineWorkspaceRequest
 * @return GetMineWorkspaceResponse
 */
async function getMineWorkspace(request: GetMineWorkspaceRequest): GetMineWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetMineWorkspaceHeaders{};
  return getMineWorkspaceWithOptions(request, headers, runtime);
}

model GetMultiDimTableAllFieldsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetMultiDimTableAllFieldsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetMultiDimTableAllFieldsRequest {
  baseId?: string(name='BaseId', description='This parameter is required.', example='338534'),
  sheetIdOrName?: string(name='SheetIdOrName', description='This parameter is required.', example='xxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model GetMultiDimTableAllFieldsShrinkRequest {
  baseId?: string(name='BaseId', description='This parameter is required.', example='338534'),
  sheetIdOrName?: string(name='SheetIdOrName', description='This parameter is required.', example='xxx'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetMultiDimTableAllFieldsResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  value?: [ 
    {
      id?: string(name='Id', example='stxxxx'),
      name?: string(name='Name', example='Sheet1'),
      property?: map[string]any(name='Property', example='xxx'),
      type?: string(name='Type', example='xxx'),
    }
  ](name='value', example='[]'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetMultiDimTableAllFieldsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMultiDimTableAllFieldsResponseBody(name='body'),
}

/**
 * @summary 获取所有字段
 *
 * @param tmpReq GetMultiDimTableAllFieldsRequest
 * @param tmpHeader GetMultiDimTableAllFieldsHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMultiDimTableAllFieldsResponse
 */
async function getMultiDimTableAllFieldsWithOptions(tmpReq: GetMultiDimTableAllFieldsRequest, tmpHeader: GetMultiDimTableAllFieldsHeaders, runtime: Util.RuntimeOptions): GetMultiDimTableAllFieldsResponse {
  Util.validateModel(tmpReq);
  var request = new GetMultiDimTableAllFieldsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetMultiDimTableAllFieldsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.baseId)) {
    body['BaseId'] = request.baseId;
  }
  if (!Util.isUnset(request.sheetIdOrName)) {
    body['SheetIdOrName'] = request.sheetIdOrName;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMultiDimTableAllFields',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/table/getMultiDimTableAllFields`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取所有字段
 *
 * @param request GetMultiDimTableAllFieldsRequest
 * @return GetMultiDimTableAllFieldsResponse
 */
async function getMultiDimTableAllFields(request: GetMultiDimTableAllFieldsRequest): GetMultiDimTableAllFieldsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetMultiDimTableAllFieldsHeaders{};
  return getMultiDimTableAllFieldsWithOptions(request, headers, runtime);
}

model GetMultiDimTableAllSheetsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetMultiDimTableAllSheetsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetMultiDimTableAllSheetsRequest {
  baseId?: string(name='BaseId', description='This parameter is required.', example='144972'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model GetMultiDimTableAllSheetsShrinkRequest {
  baseId?: string(name='BaseId', description='This parameter is required.', example='144972'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetMultiDimTableAllSheetsResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  value?: [ 
    {
      id?: string(name='Id', example='xxx'),
      name?: string(name='Name', example='xxx'),
    }
  ](name='value', example='[]'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetMultiDimTableAllSheetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMultiDimTableAllSheetsResponseBody(name='body'),
}

/**
 * @summary 获取所有数据表
 *
 * @param tmpReq GetMultiDimTableAllSheetsRequest
 * @param tmpHeader GetMultiDimTableAllSheetsHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMultiDimTableAllSheetsResponse
 */
async function getMultiDimTableAllSheetsWithOptions(tmpReq: GetMultiDimTableAllSheetsRequest, tmpHeader: GetMultiDimTableAllSheetsHeaders, runtime: Util.RuntimeOptions): GetMultiDimTableAllSheetsResponse {
  Util.validateModel(tmpReq);
  var request = new GetMultiDimTableAllSheetsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetMultiDimTableAllSheetsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.baseId)) {
    body['BaseId'] = request.baseId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMultiDimTableAllSheets',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/table/getMultiDimTableAllSheets`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取所有数据表
 *
 * @param request GetMultiDimTableAllSheetsRequest
 * @return GetMultiDimTableAllSheetsResponse
 */
async function getMultiDimTableAllSheets(request: GetMultiDimTableAllSheetsRequest): GetMultiDimTableAllSheetsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetMultiDimTableAllSheetsHeaders{};
  return getMultiDimTableAllSheetsWithOptions(request, headers, runtime);
}

model GetMultiDimTableRecordHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetMultiDimTableRecordShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetMultiDimTableRecordRequest {
  baseId?: string(name='BaseId', description='This parameter is required.', example='101114'),
  recordId?: string(name='RecordId', description='This parameter is required.', example='xxx'),
  sheetIdOrName?: string(name='SheetIdOrName', description='This parameter is required.', example='xxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model GetMultiDimTableRecordShrinkRequest {
  baseId?: string(name='BaseId', description='This parameter is required.', example='101114'),
  recordId?: string(name='RecordId', description='This parameter is required.', example='xxx'),
  sheetIdOrName?: string(name='SheetIdOrName', description='This parameter is required.', example='xxx'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetMultiDimTableRecordResponseBody = {
  createdBy?: {
    userId?: string(name='UserId', example='012345'),
  }(name='CreatedBy'),
  createdTime?: long(name='CreatedTime', example='xxx'),
  fields?: map[string]any(name='Fields', example='xxx'),
  id?: string(name='Id', example='xxx'),
  lastModifiedBy?: {
    userId?: string(name='UserId', example='012345'),
  }(name='LastModifiedBy'),
  lastModifiedTime?: long(name='LastModifiedTime', example='xxx'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetMultiDimTableRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMultiDimTableRecordResponseBody(name='body'),
}

/**
 * @summary 获取记录
 *
 * @param tmpReq GetMultiDimTableRecordRequest
 * @param tmpHeader GetMultiDimTableRecordHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMultiDimTableRecordResponse
 */
async function getMultiDimTableRecordWithOptions(tmpReq: GetMultiDimTableRecordRequest, tmpHeader: GetMultiDimTableRecordHeaders, runtime: Util.RuntimeOptions): GetMultiDimTableRecordResponse {
  Util.validateModel(tmpReq);
  var request = new GetMultiDimTableRecordShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetMultiDimTableRecordShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.baseId)) {
    body['BaseId'] = request.baseId;
  }
  if (!Util.isUnset(request.recordId)) {
    body['RecordId'] = request.recordId;
  }
  if (!Util.isUnset(request.sheetIdOrName)) {
    body['SheetIdOrName'] = request.sheetIdOrName;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMultiDimTableRecord',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/table/getMultiDimTableRecord`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取记录
 *
 * @param request GetMultiDimTableRecordRequest
 * @return GetMultiDimTableRecordResponse
 */
async function getMultiDimTableRecord(request: GetMultiDimTableRecordRequest): GetMultiDimTableRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetMultiDimTableRecordHeaders{};
  return getMultiDimTableRecordWithOptions(request, headers, runtime);
}

model GetMultiDimTableSheetHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetMultiDimTableSheetShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetMultiDimTableSheetRequest {
  baseId?: string(name='BaseId', description='This parameter is required.', example='169899'),
  sheetIdOrName?: string(name='SheetIdOrName', description='This parameter is required.', example='xxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model GetMultiDimTableSheetShrinkRequest {
  baseId?: string(name='BaseId', description='This parameter is required.', example='169899'),
  sheetIdOrName?: string(name='SheetIdOrName', description='This parameter is required.', example='xxx'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetMultiDimTableSheetResponseBody = {
  id?: string(name='id', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  name?: string(name='name', example='Sheet1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetMultiDimTableSheetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMultiDimTableSheetResponseBody(name='body'),
}

/**
 * @summary 获取数据表
 *
 * @param tmpReq GetMultiDimTableSheetRequest
 * @param tmpHeader GetMultiDimTableSheetHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMultiDimTableSheetResponse
 */
async function getMultiDimTableSheetWithOptions(tmpReq: GetMultiDimTableSheetRequest, tmpHeader: GetMultiDimTableSheetHeaders, runtime: Util.RuntimeOptions): GetMultiDimTableSheetResponse {
  Util.validateModel(tmpReq);
  var request = new GetMultiDimTableSheetShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetMultiDimTableSheetShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.baseId)) {
    body['BaseId'] = request.baseId;
  }
  if (!Util.isUnset(request.sheetIdOrName)) {
    body['SheetIdOrName'] = request.sheetIdOrName;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMultiDimTableSheet',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/table/getMultiDimTableSheet`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取数据表
 *
 * @param request GetMultiDimTableSheetRequest
 * @return GetMultiDimTableSheetResponse
 */
async function getMultiDimTableSheet(request: GetMultiDimTableSheetRequest): GetMultiDimTableSheetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetMultiDimTableSheetHeaders{};
  return getMultiDimTableSheetWithOptions(request, headers, runtime);
}

model GetMultipartFileUploadInfosHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetMultipartFileUploadInfosShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetMultipartFileUploadInfosRequest {
  option?: {
    preferIntranet?: boolean(name='PreferIntranet', example='true'),
  }(name='Option'),
  partNumbers?: [ int32 ](name='PartNumbers'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  uploadKey?: string(name='UploadKey', example='hwHPAAAAAipHxxxxx'),
}

model GetMultipartFileUploadInfosShrinkRequest {
  optionShrink?: string(name='Option'),
  partNumbersShrink?: string(name='PartNumbers'),
  tenantContextShrink?: string(name='TenantContext'),
  uploadKey?: string(name='UploadKey', example='hwHPAAAAAipHxxxxx'),
}

model GetMultipartFileUploadInfosResponseBody = {
  multipartHeaderSignatureInfos?: [ 
    {
      headerSignatureInfo?: {
        expirationSeconds?: int32(name='ExpirationSeconds', example='900'),
        headers?: map[string]string(name='Headers'),
        internalResourceUrls?: [ string ](name='InternalResourceUrls'),
        region?: string(name='Region', example='ZHANGJIAKOU'),
        resourceUrls?: [ string ](name='ResourceUrls'),
      }(name='HeaderSignatureInfo'),
      partNumber?: int32(name='PartNumber', example='1'),
    }
  ](name='multipartHeaderSignatureInfos'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetMultipartFileUploadInfosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMultipartFileUploadInfosResponseBody(name='body'),
}

/**
 * @summary 获取文件分片上传信息
 *
 * @param tmpReq GetMultipartFileUploadInfosRequest
 * @param tmpHeader GetMultipartFileUploadInfosHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMultipartFileUploadInfosResponse
 */
async function getMultipartFileUploadInfosWithOptions(tmpReq: GetMultipartFileUploadInfosRequest, tmpHeader: GetMultipartFileUploadInfosHeaders, runtime: Util.RuntimeOptions): GetMultipartFileUploadInfosResponse {
  Util.validateModel(tmpReq);
  var request = new GetMultipartFileUploadInfosShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetMultipartFileUploadInfosShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.option)) {
    request.optionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.option, 'Option', 'json');
  }
  if (!Util.isUnset(tmpReq.partNumbers)) {
    request.partNumbersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.partNumbers, 'PartNumbers', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.optionShrink)) {
    body['Option'] = request.optionShrink;
  }
  if (!Util.isUnset(request.partNumbersShrink)) {
    body['PartNumbers'] = request.partNumbersShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.uploadKey)) {
    body['UploadKey'] = request.uploadKey;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMultipartFileUploadInfos',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/GetMultipartFileUploadInfos`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取文件分片上传信息
 *
 * @param request GetMultipartFileUploadInfosRequest
 * @return GetMultipartFileUploadInfosResponse
 */
async function getMultipartFileUploadInfos(request: GetMultipartFileUploadInfosRequest): GetMultipartFileUploadInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetMultipartFileUploadInfosHeaders{};
  return getMultipartFileUploadInfosWithOptions(request, headers, runtime);
}

model GetNewestInnerGroupsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetNewestInnerGroupsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetNewestInnerGroupsRequest {
  request?: map[string]any(name='Request', example='{}'),
}

model GetNewestInnerGroupsShrinkRequest {
  requestShrink?: string(name='Request', example='{}'),
}

model GetNewestInnerGroupsResponseBody = {
  groupInfos?: [ 
    {
      icon?: string(name='Icon', example='@lADOADma*****QKA'),
      memberAmount?: string(name='MemberAmount', example='10'),
      openConversationId?: string(name='OpenConversationId', example='cid1e******=='),
      title?: string(name='Title'),
    }
  ](name='groupInfos'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetNewestInnerGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNewestInnerGroupsResponseBody(name='body'),
}

/**
 * @summary 查询最近活跃的企业内部群列表
 *
 * @param tmpReq GetNewestInnerGroupsRequest
 * @param tmpHeader GetNewestInnerGroupsHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetNewestInnerGroupsResponse
 */
async function getNewestInnerGroupsWithOptions(tmpReq: GetNewestInnerGroupsRequest, tmpHeader: GetNewestInnerGroupsHeaders, runtime: Util.RuntimeOptions): GetNewestInnerGroupsResponse {
  Util.validateModel(tmpReq);
  var request = new GetNewestInnerGroupsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetNewestInnerGroupsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.request)) {
    request.requestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.request, 'Request', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.requestShrink)) {
    body['Request'] = request.requestShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNewestInnerGroups',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/im/getNewestInnerGroups`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询最近活跃的企业内部群列表
 *
 * @param request GetNewestInnerGroupsRequest
 * @return GetNewestInnerGroupsResponse
 */
async function getNewestInnerGroups(request: GetNewestInnerGroupsRequest): GetNewestInnerGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetNewestInnerGroupsHeaders{};
  return getNewestInnerGroupsWithOptions(request, headers, runtime);
}

model GetNodeHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetNodeShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetNodeRequest {
  nodeId?: string(name='NodeId', description='This parameter is required.', example='a9E05BDRVQ9K600yf1NplNDxV63zgkYA'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  withPermissionRole?: boolean(name='WithPermissionRole', example='true'),
  withStatisticalInfo?: boolean(name='WithStatisticalInfo', example='true'),
}

model GetNodeShrinkRequest {
  nodeId?: string(name='NodeId', description='This parameter is required.', example='a9E05BDRVQ9K600yf1NplNDxV63zgkYA'),
  tenantContextShrink?: string(name='TenantContext'),
  withPermissionRole?: boolean(name='WithPermissionRole', example='true'),
  withStatisticalInfo?: boolean(name='WithStatisticalInfo', example='true'),
}

model GetNodeResponseBody = {
  node?: {
    category?: string(name='Category', example='ALIDOC'),
    createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
    creatorId?: string(name='CreatorId', example='01472825524039877041'),
    extension?: string(name='Extension', example='adoc'),
    hasChildren?: boolean(name='HasChildren', example='true'),
    modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
    modifierId?: string(name='ModifierId', example='01472825524039877041'),
    name?: string(name='Name', example='node_name'),
    nodeId?: string(name='NodeId', example='MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3'),
    permissionRole?: string(name='PermissionRole', example='READER'),
    size?: long(name='Size', example='123123'),
    statisticalInfo?: {
      wordCount?: long(name='WordCount', example='200'),
    }(name='StatisticalInfo'),
    type?: string(name='Type', example='FILE'),
    url?: string(name='Url', example='node_url'),
    workspaceId?: string(name='WorkspaceId', example='By8jQS1ZYjGn5b0M'),
  }(name='node'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model GetNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeResponseBody(name='body'),
}

/**
 * @summary 获取节点
 *
 * @param tmpReq GetNodeRequest
 * @param tmpHeader GetNodeHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetNodeResponse
 */
async function getNodeWithOptions(tmpReq: GetNodeRequest, tmpHeader: GetNodeHeaders, runtime: Util.RuntimeOptions): GetNodeResponse {
  Util.validateModel(tmpReq);
  var request = new GetNodeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetNodeShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.withPermissionRole)) {
    body['WithPermissionRole'] = request.withPermissionRole;
  }
  if (!Util.isUnset(request.withStatisticalInfo)) {
    body['WithStatisticalInfo'] = request.withStatisticalInfo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNode',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/getNode`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取节点
 *
 * @param request GetNodeRequest
 * @return GetNodeResponse
 */
async function getNode(request: GetNodeRequest): GetNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetNodeHeaders{};
  return getNodeWithOptions(request, headers, runtime);
}

model GetNodeByUrlHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetNodeByUrlShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetNodeByUrlRequest {
  option?: {
    withPermissionRole?: boolean(name='WithPermissionRole', example='false'),
    withStatisticalInfo?: boolean(name='WithStatisticalInfo', example='false'),
  }(name='Option'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  url?: string(name='Url', description='This parameter is required.', example='https://alidocs.dingtalk.com/i/nodes/EpGBa2L*********gN7R35y'),
}

model GetNodeByUrlShrinkRequest {
  optionShrink?: string(name='Option'),
  tenantContextShrink?: string(name='TenantContext'),
  url?: string(name='Url', description='This parameter is required.', example='https://alidocs.dingtalk.com/i/nodes/EpGBa2L*********gN7R35y'),
}

model GetNodeByUrlResponseBody = {
  node?: {
    category?: string(name='Category', example='ALIDOC'),
    createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
    creatorId?: string(name='CreatorId', example='01472825524039877041'),
    extension?: string(name='Extension', example='adoc'),
    hasChildren?: boolean(name='HasChildren', example='false'),
    modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
    modifierId?: string(name='ModifierId', example='01472825524039877041'),
    name?: string(name='Name', example='node_name'),
    nodeId?: string(name='NodeId', example='EpGBa2Lm8aRmzkkNhplMx1prWgN7R35y'),
    permissionRole?: string(name='PermissionRole', example='READER'),
    size?: long(name='Size', example='512'),
    statisticalInfo?: {
      wordCount?: long(name='WordCount', example='123'),
    }(name='StatisticalInfo'),
    type?: string(name='Type', example='FILE'),
    url?: string(name='Url', example='node_url'),
    workspaceId?: string(name='WorkspaceId', example='By8jQS1ZYjGn5b0M'),
  }(name='node'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model GetNodeByUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeByUrlResponseBody(name='body'),
}

/**
 * @summary 通过链接获取节点
 *
 * @param tmpReq GetNodeByUrlRequest
 * @param tmpHeader GetNodeByUrlHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetNodeByUrlResponse
 */
async function getNodeByUrlWithOptions(tmpReq: GetNodeByUrlRequest, tmpHeader: GetNodeByUrlHeaders, runtime: Util.RuntimeOptions): GetNodeByUrlResponse {
  Util.validateModel(tmpReq);
  var request = new GetNodeByUrlShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetNodeByUrlShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.option)) {
    request.optionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.option, 'Option', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.optionShrink)) {
    body['Option'] = request.optionShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.url)) {
    body['Url'] = request.url;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeByUrl',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/getNodeByUrl`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 通过链接获取节点
 *
 * @param request GetNodeByUrlRequest
 * @return GetNodeByUrlResponse
 */
async function getNodeByUrl(request: GetNodeByUrlRequest): GetNodeByUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetNodeByUrlHeaders{};
  return getNodeByUrlWithOptions(request, headers, runtime);
}

model GetNodesHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetNodesShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetNodesRequest {
  nodeIds?: [ string ](name='NodeIds', description='This parameter is required.'),
  option?: {
    withPermissionRole?: boolean(name='WithPermissionRole', example='false'),
    withStatisticalInfo?: boolean(name='WithStatisticalInfo', example='false'),
  }(name='Option'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model GetNodesShrinkRequest {
  nodeIdsShrink?: string(name='NodeIds', description='This parameter is required.'),
  optionShrink?: string(name='Option'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetNodesResponseBody = {
  nodes?: [ 
    {
      category?: string(name='Category', example='ALIDOC'),
      createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
      creatorId?: string(name='CreatorId', example='01472825524039877041'),
      extension?: string(name='Extension', example='adoc'),
      hasChildren?: boolean(name='HasChildren', example='false'),
      modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
      modifierId?: string(name='ModifierId', example='01472825524039877041'),
      name?: string(name='Name', example='node_name'),
      nodeId?: string(name='NodeId', example='MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3'),
      permissionRole?: string(name='PermissionRole', example='READER'),
      size?: long(name='Size', example='512'),
      statisticalInfo?: {
        wordCount?: long(name='WordCount', example='123'),
      }(name='StatisticalInfo'),
      type?: string(name='Type', example='FILE'),
      url?: string(name='Url', example='node_url'),
      workspaceId?: string(name='WorkspaceId', example='MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3'),
    }
  ](name='nodes'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model GetNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodesResponseBody(name='body'),
}

/**
 * @summary 批量获取节点
 *
 * @param tmpReq GetNodesRequest
 * @param tmpHeader GetNodesHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetNodesResponse
 */
async function getNodesWithOptions(tmpReq: GetNodesRequest, tmpHeader: GetNodesHeaders, runtime: Util.RuntimeOptions): GetNodesResponse {
  Util.validateModel(tmpReq);
  var request = new GetNodesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetNodesShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.nodeIds)) {
    request.nodeIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.nodeIds, 'NodeIds', 'json');
  }
  if (!Util.isUnset(tmpReq.option)) {
    request.optionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.option, 'Option', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeIdsShrink)) {
    body['NodeIds'] = request.nodeIdsShrink;
  }
  if (!Util.isUnset(request.optionShrink)) {
    body['Option'] = request.optionShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNodes',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/getNodes`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量获取节点
 *
 * @param request GetNodesRequest
 * @return GetNodesResponse
 */
async function getNodes(request: GetNodesRequest): GetNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetNodesHeaders{};
  return getNodesWithOptions(request, headers, runtime);
}

model GetNotifyMeHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetNotifyMeShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetNotifyMeRequest {
  appTypes?: string(name='AppTypes', example='APP_PBKTxxx'),
  corpId?: string(name='CorpId', description='This parameter is required.', example='corpIdxxx'),
  createFromTimeGMT?: long(name='CreateFromTimeGMT', example='2021-05-01'),
  createToTimeGMT?: long(name='CreateToTimeGMT', example='2021-05-01'),
  instanceCreateFromTimeGMT?: long(name='InstanceCreateFromTimeGMT', example='2021-05-01'),
  instanceCreateToTimeGMT?: long(name='InstanceCreateToTimeGMT', example='2021-05-01'),
  keyword?: string(name='Keyword', example='keyword'),
  language?: string(name='Language', example='zh-CN'),
  pageNumber?: int32(name='PageNumber', example='20'),
  pageSize?: int32(name='PageSize', example='20'),
  processCodes?: string(name='ProcessCodes', example='["xx","xxx"]'),
  token?: string(name='Token', description='This parameter is required.', example='hexxxx'),
}

model GetNotifyMeResponseBody = {
  data?: [ 
    {
      activityId?: string(name='ActivityId', example='act-xxaanfaf'),
      appType?: string(name='AppType', example='APP_XCxxx'),
      corpId?: string(name='CorpId', example='corpIdxxx'),
      createTimeGMT?: string(name='CreateTimeGMT', example='2020-01-01'),
      creatorUserId?: string(name='CreatorUserId', example='123456'),
      formInstanceId?: string(name='FormInstanceId', example='formxxxx'),
      instStatus?: string(name='InstStatus', example='RUNNING'),
      mobileUrl?: string(name='MobileUrl', example='mobileUrlexample'),
      modifiedTimeGMT?: string(name='ModifiedTimeGMT', example='2020-01-01'),
    }
  ](name='data', example='[{}]'),
  pageNumber?: long(name='pageNumber', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: long(name='totalCount', example='10'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetNotifyMeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNotifyMeResponseBody(name='body'),
}

/**
 * @summary 获取发送给用户的通知
 *
 * @param request GetNotifyMeRequest
 * @param tmpHeader GetNotifyMeHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetNotifyMeResponse
 */
async function getNotifyMeWithOptions(request: GetNotifyMeRequest, tmpHeader: GetNotifyMeHeaders, runtime: Util.RuntimeOptions): GetNotifyMeResponse {
  Util.validateModel(request);
  var headers = new GetNotifyMeShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appTypes)) {
    body['AppTypes'] = request.appTypes;
  }
  if (!Util.isUnset(request.corpId)) {
    body['CorpId'] = request.corpId;
  }
  if (!Util.isUnset(request.createFromTimeGMT)) {
    body['CreateFromTimeGMT'] = request.createFromTimeGMT;
  }
  if (!Util.isUnset(request.createToTimeGMT)) {
    body['CreateToTimeGMT'] = request.createToTimeGMT;
  }
  if (!Util.isUnset(request.instanceCreateFromTimeGMT)) {
    body['InstanceCreateFromTimeGMT'] = request.instanceCreateFromTimeGMT;
  }
  if (!Util.isUnset(request.instanceCreateToTimeGMT)) {
    body['InstanceCreateToTimeGMT'] = request.instanceCreateToTimeGMT;
  }
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.processCodes)) {
    body['ProcessCodes'] = request.processCodes;
  }
  if (!Util.isUnset(request.token)) {
    body['Token'] = request.token;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNotifyMe',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/getNotifyMe`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取发送给用户的通知
 *
 * @param request GetNotifyMeRequest
 * @return GetNotifyMeResponse
 */
async function getNotifyMe(request: GetNotifyMeRequest): GetNotifyMeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetNotifyMeHeaders{};
  return getNotifyMeWithOptions(request, headers, runtime);
}

model GetOpenUrlHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetOpenUrlShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetOpenUrlRequest {
  appType?: string(name='AppType', description='This parameter is required.', example='APP_PBKT0xxx'),
  fileUrl?: string(name='FileUrl', description='This parameter is required.', example='https://www.aliwork.com/fileHandle?appType=APP_VN7I6xxx&fileName=fileName.xlsx&instId=&type=download'),
  language?: string(name='Language', example='zh_CN'),
  systemToken?: string(name='SystemToken', description='This parameter is required.', example='hexxxx'),
  timeout?: long(name='Timeout', example='60000L'),
}

model GetOpenUrlResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: string(name='result', example='https/www.aliwork.com'),
}

model GetOpenUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOpenUrlResponseBody(name='body'),
}

/**
 * @summary 获取宜搭附件临时免登地址
 *
 * @param request GetOpenUrlRequest
 * @param tmpHeader GetOpenUrlHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetOpenUrlResponse
 */
async function getOpenUrlWithOptions(request: GetOpenUrlRequest, tmpHeader: GetOpenUrlHeaders, runtime: Util.RuntimeOptions): GetOpenUrlResponse {
  Util.validateModel(request);
  var headers = new GetOpenUrlShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.fileUrl)) {
    body['FileUrl'] = request.fileUrl;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }
  if (!Util.isUnset(request.timeout)) {
    body['Timeout'] = request.timeout;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetOpenUrl',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/getOpenUrl`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取宜搭附件临时免登地址
 *
 * @param request GetOpenUrlRequest
 * @return GetOpenUrlResponse
 */
async function getOpenUrl(request: GetOpenUrlRequest): GetOpenUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetOpenUrlHeaders{};
  return getOpenUrlWithOptions(request, headers, runtime);
}

model GetOperationRecordsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetOperationRecordsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetOperationRecordsRequest {
  appType?: string(name='AppType', example='APP_PBxxx'),
  language?: string(name='Language', example='zh_CN'),
  processInstanceId?: string(name='ProcessInstanceId', example='f30233fb-72e1-4af4-8cb8-c7e0ea9ee530'),
  systemToken?: string(name='SystemToken', example='hexxyy'),
}

model GetOperationRecordsResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ 
    {
      action?: string(name='Action', example='return'),
      actionExit?: string(name='ActionExit', example='同意'),
      activeTimeGMT?: string(name='ActiveTimeGMT', example='2021-02-01'),
      activityId?: string(name='ActivityId', example='act-xxaanfaf'),
      dataId?: long(name='DataId', example='12345'),
      digitalSign?: string(name='DigitalSign', example='https://oss.com/Signature.pdf'),
      files?: string(name='Files', example='https://oss.com/a.pdf'),
      operateTimeGMT?: string(name='OperateTimeGMT', example='2021-01-01'),
      operateType?: string(name='OperateType', example='remove'),
      operatorDisplayName?: string(name='OperatorDisplayName', example='张三'),
      operatorName?: string(name='OperatorName', example='李四'),
      operatorNickName?: string(name='OperatorNickName', example='无冬'),
      operatorPhotoUrl?: string(name='OperatorPhotoUrl', example='https://oss.com/a.jpeg'),
      operatorStatus?: string(name='OperatorStatus', example='良好'),
      operatorUserId?: string(name='OperatorUserId', example='manager123'),
      processInstanceId?: string(name='ProcessInstanceId', example='f30233fb-72e1-4af4-8cb8-c7e0ea9ee530'),
      remark?: string(name='Remark', example='确认同意'),
      showName?: string(name='ShowName', example='请购类型'),
      size?: int32(name='Size', example='12'),
      taskExecuteType?: string(name='TaskExecuteType', example='同步'),
      taskHoldTimeGMT?: long(name='TaskHoldTimeGMT', example='2021-01-01'),
      taskId?: string(name='TaskId', example='task-123'),
      taskType?: string(name='TaskType', example='append task'),
      type?: string(name='Type', example='i18n'),
    }
  ](name='result'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetOperationRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOperationRecordsResponseBody(name='body'),
}

/**
 * @summary 获取审批记录
 *
 * @param request GetOperationRecordsRequest
 * @param tmpHeader GetOperationRecordsHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetOperationRecordsResponse
 */
async function getOperationRecordsWithOptions(request: GetOperationRecordsRequest, tmpHeader: GetOperationRecordsHeaders, runtime: Util.RuntimeOptions): GetOperationRecordsResponse {
  Util.validateModel(request);
  var headers = new GetOperationRecordsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.processInstanceId)) {
    body['ProcessInstanceId'] = request.processInstanceId;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetOperationRecords',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/getOperationRecords`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取审批记录
 *
 * @param request GetOperationRecordsRequest
 * @return GetOperationRecordsResponse
 */
async function getOperationRecords(request: GetOperationRecordsRequest): GetOperationRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetOperationRecordsHeaders{};
  return getOperationRecordsWithOptions(request, headers, runtime);
}

model GetOrgLiveListHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetOrgLiveListShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetOrgLiveListRequest {
  corpId?: string(name='CorpId', description='This parameter is required.', example='db4d318xxxxx'),
  endTime?: long(name='EndTime', example='1720211800000'),
  pageNumber?: long(name='PageNumber', description='This parameter is required.', example='1'),
  pageSize?: long(name='PageSize', description='This parameter is required.', example='10'),
  startTime?: long(name='StartTime', example='1719211800000'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  userId?: string(name='UserId', example='012345'),
}

model GetOrgLiveListShrinkRequest {
  corpId?: string(name='CorpId', description='This parameter is required.', example='db4d318xxxxx'),
  endTime?: long(name='EndTime', example='1720211800000'),
  pageNumber?: long(name='PageNumber', description='This parameter is required.', example='1'),
  pageSize?: long(name='PageSize', description='This parameter is required.', example='10'),
  startTime?: long(name='StartTime', example='1719211800000'),
  tenantContextShrink?: string(name='TenantContext'),
  userId?: string(name='UserId', example='012345'),
}

model GetOrgLiveListResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: {
    newLive?: {
      hasMore?: boolean(name='HasMore', example='true'),
      liveList?: [ 
        {
          anchorNickname?: string(name='AnchorNickname', example='nickName'),
          anchorUnionId?: string(name='AnchorUnionId'),
          anchorUserId?: string(name='AnchorUserId', example='ersqqdddf'),
          liveEndTime?: long(name='LiveEndTime', example='1398324600000'),
          liveStartTime?: long(name='LiveStartTime', example='1398321600000'),
          liveUuid?: string(name='LiveUuid', example='4d38xxxxx'),
          shareOpenConversationIds?: [ string ](name='ShareOpenConversationIds', example='群OpenConversationId'),
          title?: string(name='Title', example='直播标题'),
        }
      ](name='LiveList', example='[]'),
      pageNumber?: long(name='PageNumber', example='1'),
      pageSize?: long(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='NewLive', example='新建的直播列表'),
    updateLive?: {
      hasMore?: boolean(name='HasMore', example='true'),
      liveList?: [ 
        {
          anchorNickname?: string(name='AnchorNickname', example='nickName'),
          anchorUnionId?: string(name='AnchorUnionId'),
          anchorUserId?: string(name='AnchorUserId', example='012345'),
          liveEndTime?: long(name='LiveEndTime', example='1398324600000'),
          liveStartTime?: long(name='LiveStartTime', example='1398321600000'),
          liveUuid?: string(name='LiveUuid', example='4d38xxxxx'),
          title?: string(name='Title', example='直播标题'),
        }
      ](name='LiveList', example='[]'),
      pageNumber?: long(name='PageNumber', example='1'),
      pageSize?: long(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='UpdateLive', example='修改的直播列表'),
  }(name='result'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetOrgLiveListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOrgLiveListResponseBody(name='body'),
}

/**
 * @param tmpReq GetOrgLiveListRequest
 * @param tmpHeader GetOrgLiveListHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetOrgLiveListResponse
 */
async function getOrgLiveListWithOptions(tmpReq: GetOrgLiveListRequest, tmpHeader: GetOrgLiveListHeaders, runtime: Util.RuntimeOptions): GetOrgLiveListResponse {
  Util.validateModel(tmpReq);
  var request = new GetOrgLiveListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetOrgLiveListShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.corpId)) {
    body['CorpId'] = request.corpId;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetOrgLiveList',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/getOrgLiveList`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request GetOrgLiveListRequest
 * @return GetOrgLiveListResponse
 */
async function getOrgLiveList(request: GetOrgLiveListRequest): GetOrgLiveListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetOrgLiveListHeaders{};
  return getOrgLiveListWithOptions(request, headers, runtime);
}

model GetOrgOrWebOpenDocContentTaskIdHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetOrgOrWebOpenDocContentTaskIdShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetOrgOrWebOpenDocContentTaskIdRequest {
  dentryUuid?: string(name='DentryUuid', description='This parameter is required.', example='20eMKjyp810mMdK4Hz4B5BA6JxAZB1Gv'),
  generateCp?: boolean(name='GenerateCp'),
  scopeType?: int32(name='ScopeType', example='0'),
  targetFormat?: string(name='TargetFormat', example='markdown'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model GetOrgOrWebOpenDocContentTaskIdShrinkRequest {
  dentryUuid?: string(name='DentryUuid', description='This parameter is required.', example='20eMKjyp810mMdK4Hz4B5BA6JxAZB1Gv'),
  generateCp?: boolean(name='GenerateCp'),
  scopeType?: int32(name='ScopeType', example='0'),
  targetFormat?: string(name='TargetFormat', example='markdown'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetOrgOrWebOpenDocContentTaskIdResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  taskId?: long(name='taskId', example='158740210521'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetOrgOrWebOpenDocContentTaskIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOrgOrWebOpenDocContentTaskIdResponseBody(name='body'),
}

/**
 * @summary 委托权限获取组织或者互联网公开文档内容taskId
 *
 * @param tmpReq GetOrgOrWebOpenDocContentTaskIdRequest
 * @param tmpHeader GetOrgOrWebOpenDocContentTaskIdHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetOrgOrWebOpenDocContentTaskIdResponse
 */
async function getOrgOrWebOpenDocContentTaskIdWithOptions(tmpReq: GetOrgOrWebOpenDocContentTaskIdRequest, tmpHeader: GetOrgOrWebOpenDocContentTaskIdHeaders, runtime: Util.RuntimeOptions): GetOrgOrWebOpenDocContentTaskIdResponse {
  Util.validateModel(tmpReq);
  var request = new GetOrgOrWebOpenDocContentTaskIdShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetOrgOrWebOpenDocContentTaskIdShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.dentryUuid)) {
    body['DentryUuid'] = request.dentryUuid;
  }
  if (!Util.isUnset(request.generateCp)) {
    body['GenerateCp'] = request.generateCp;
  }
  if (!Util.isUnset(request.scopeType)) {
    body['ScopeType'] = request.scopeType;
  }
  if (!Util.isUnset(request.targetFormat)) {
    body['TargetFormat'] = request.targetFormat;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetOrgOrWebOpenDocContentTaskId',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/getOrgOrWebOpenDocContentTaskId`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 委托权限获取组织或者互联网公开文档内容taskId
 *
 * @param request GetOrgOrWebOpenDocContentTaskIdRequest
 * @return GetOrgOrWebOpenDocContentTaskIdResponse
 */
async function getOrgOrWebOpenDocContentTaskId(request: GetOrgOrWebOpenDocContentTaskIdRequest): GetOrgOrWebOpenDocContentTaskIdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetOrgOrWebOpenDocContentTaskIdHeaders{};
  return getOrgOrWebOpenDocContentTaskIdWithOptions(request, headers, runtime);
}

model GetProcessDefinitionHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetProcessDefinitionShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetProcessDefinitionRequest {
  appType?: string(name='AppType', example='APP_PBxxx'),
  corpId?: string(name='CorpId', example='ding123'),
  groupId?: string(name='GroupId', example='c-xxafafaf'),
  language?: string(name='Language', example='zh_CN'),
  nameSpace?: string(name='NameSpace', example='dingtalk'),
  orderNumber?: string(name='OrderNumber', example='o-YDJKIxxx'),
  processInstanceId?: string(name='ProcessInstanceId', example='f30233fb-72e1-4af4-8cb8-c7e0ea9ee530'),
  systemToken?: string(name='SystemToken', example='hexxyy'),
  systemType?: string(name='SystemType', example='hexabc1234'),
}

model GetProcessDefinitionResponseBody = {
  formUuid?: string(name='formUuid', example='FORM-EF6Y4xxx'),
  originator?: {
    departmentDescription?: string(name='DepartmentDescription', example='开发部成立于2000年'),
    displayEnName?: string(name='DisplayEnName', example='ZhangSan'),
    displayName?: string(name='DisplayName', example='测试应用'),
    masterDataDepartments?: [ 
      {
        deptName?: string(name='DeptName', example='开发部'),
        deptNameInEnglish?: string(name='DeptNameInEnglish', example='development department'),
        deptNo?: string(name='DeptNo', example='develop-A'),
        deptPath?: string(name='DeptPath', example='总部-开发部'),
        humanSourceGroupOrderNumber?: string(name='HumanSourceGroupOrderNumber', example='xxafafaf'),
        humanSourceGroupWorkNo?: string(name='HumanSourceGroupWorkNo', example='123311221'),
        id?: long(name='Id', example='12345'),
        masterWorkNo?: string(name='MasterWorkNo', example='1732245789'),
      }
    ](name='MasterDataDepartments'),
    orderNumber?: string(name='OrderNumber', example='o-YDJKINSxxx'),
    personalPhoto?: string(name='PersonalPhoto', example='https://abc.com/a.png'),
    status?: string(name='Status', example='running'),
    tbWang?: string(name='TbWang', example='wang123'),
    userId?: string(name='UserId', example='manager123'),
    userInfo?: string(name='UserInfo', example='张三'),
  }(name='originator'),
  outResult?: string(name='outResult', example='agree'),
  owners?: [ 
    {
      departmentDescription?: string(name='DepartmentDescription', example='开发部成立于2000年'),
      displayEnName?: string(name='DisplayEnName', example='ZhangSan'),
      displayName?: string(name='DisplayName', example='测试应用'),
      masterDataDepartments?: [ 
        {
          deptName?: string(name='DeptName', example='开发部'),
          deptNameInEnglish?: string(name='DeptNameInEnglish', example='development department'),
          deptNo?: string(name='DeptNo', example='develop-A'),
          deptPath?: string(name='DeptPath', example='总部-开发部'),
          humanSourceGroupOrderNumber?: string(name='HumanSourceGroupOrderNumber', example='xxafafaf'),
          humanSourceGroupWorkNo?: string(name='HumanSourceGroupWorkNo', example='123311221'),
          id?: long(name='Id', example='12345'),
          masterWorkNo?: string(name='MasterWorkNo', example='1732245789'),
        }
      ](name='MasterDataDepartments'),
      orderNumber?: string(name='OrderNumber', example='o-YDJKINSxxx'),
      personalPhoto?: string(name='PersonalPhoto', example='https://abc.com/a.png'),
      status?: string(name='Status', example='running'),
      tbWang?: string(name='TbWang', example='wang123'),
      userId?: string(name='UserId', example='manager123'),
      userInfo?: string(name='UserInfo', example='张三'),
    }
  ](name='owners'),
  processId?: string(name='processId', example='proc-123'),
  processInstanceId?: string(name='processInstanceId', example='f30233fb-72e1-4xxx'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  status?: string(name='status', example='running'),
  tasks?: [ 
    {
      actionerId?: string(name='ActionerId', example='manager123'),
      activity?: {
        activityId?: string(name='ActivityId', example='act-xxaanfaf'),
        activityInstanceStatus?: string(name='ActivityInstanceStatus', example='running'),
        activityName?: string(name='ActivityName', example='activity-124'),
        activityNameInEnglish?: string(name='ActivityNameInEnglish', example='redirect task'),
        id?: long(name='Id', example='12345'),
      }(name='Activity'),
      status?: string(name='Status', example='running'),
      taskId?: long(name='TaskId', example='792'),
    }
  ](name='tasks'),
  title?: string(name='title', example='李四发起的请购单'),
  variables?: map[string]any(name='variables'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetProcessDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProcessDefinitionResponseBody(name='body'),
}

/**
 * @summary 获取流程定义
 *
 * @param request GetProcessDefinitionRequest
 * @param tmpHeader GetProcessDefinitionHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetProcessDefinitionResponse
 */
async function getProcessDefinitionWithOptions(request: GetProcessDefinitionRequest, tmpHeader: GetProcessDefinitionHeaders, runtime: Util.RuntimeOptions): GetProcessDefinitionResponse {
  Util.validateModel(request);
  var headers = new GetProcessDefinitionShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.corpId)) {
    body['CorpId'] = request.corpId;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.nameSpace)) {
    body['NameSpace'] = request.nameSpace;
  }
  if (!Util.isUnset(request.orderNumber)) {
    body['OrderNumber'] = request.orderNumber;
  }
  if (!Util.isUnset(request.processInstanceId)) {
    body['ProcessInstanceId'] = request.processInstanceId;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }
  if (!Util.isUnset(request.systemType)) {
    body['SystemType'] = request.systemType;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetProcessDefinition',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/getProcessDefinition`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取流程定义
 *
 * @param request GetProcessDefinitionRequest
 * @return GetProcessDefinitionResponse
 */
async function getProcessDefinition(request: GetProcessDefinitionRequest): GetProcessDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetProcessDefinitionHeaders{};
  return getProcessDefinitionWithOptions(request, headers, runtime);
}

model GetRangeHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model GetRangeShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetRangeRequest {
  rangeAddress?: string(name='RangeAddress', description='This parameter is required.', example='A3:C3'),
  select?: string(name='Select', example='values'),
  sheetId?: string(name='SheetId', description='This parameter is required.', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model GetRangeShrinkRequest {
  rangeAddress?: string(name='RangeAddress', description='This parameter is required.', example='A3:C3'),
  select?: string(name='Select', example='values'),
  sheetId?: string(name='SheetId', description='This parameter is required.', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model GetRangeResponseBody = {
  backgroundColors?: [[ 
    {
      red?: int32(name='Red', description='red', example='0'),
      green?: int32(name='Green', description='green', example='0'),
      blue?: int32(name='Blue', description='blue', example='0'),
      hexString?: string(name='HexString', description='hexString', example='#000000'),
    }
  ]  ](name='backgroundColors', example='[]'),
  displayValues?: [[ string ]  ](name='displayValues', example='[]'),
  formulas?: [[ string ]  ](name='formulas', example='[]'),
  hyperlinks?: [[ 
    {
      type?: string(name='type'),
      link?: string(name='link'),
      text?: string(name='text'),
    }
  ]  ](name='hyperlinks', example='[]'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  values?: [[ any ]  ](name='values', example='[]'),
}

model GetRangeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRangeResponseBody(name='body'),
}

/**
 * @summary 获取单元格区域
 *
 * @param tmpReq GetRangeRequest
 * @param tmpHeader GetRangeHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRangeResponse
 */
async function getRangeWithOptions(tmpReq: GetRangeRequest, tmpHeader: GetRangeHeaders, runtime: Util.RuntimeOptions): GetRangeResponse {
  Util.validateModel(tmpReq);
  var request = new GetRangeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetRangeShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.rangeAddress)) {
    body['RangeAddress'] = request.rangeAddress;
  }
  if (!Util.isUnset(request.select)) {
    body['Select'] = request.select;
  }
  if (!Util.isUnset(request.sheetId)) {
    body['SheetId'] = request.sheetId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetRange',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/getRange`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取单元格区域
 *
 * @param request GetRangeRequest
 * @return GetRangeResponse
 */
async function getRange(request: GetRangeRequest): GetRangeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetRangeHeaders{};
  return getRangeWithOptions(request, headers, runtime);
}

model GetRelatedWorkspacesHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetRelatedWorkspacesShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetRelatedWorkspacesRequest {
  includeRecent?: boolean(name='IncludeRecent', example='true'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model GetRelatedWorkspacesShrinkRequest {
  includeRecent?: boolean(name='IncludeRecent', example='true'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetRelatedWorkspacesResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
  workspaces?: [ 
    {
      createTime?: long(name='CreateTime', example='1638256965936'),
      deleted?: boolean(name='Deleted', example='false'),
      name?: string(name='Name', example='知识库'),
      owner?: string(name='Owner', example='Q2xwPOKiSLxxxx'),
      recentList?: [ 
        {
          lastEditTime?: long(name='LastEditTime', example='1638256965936'),
          name?: string(name='Name', example='知识库'),
          nodeId?: string(name='NodeId', example='nb9XxxxxxxmyAp'),
          url?: string(name='Url', example='https://alidocs.xxxx/nb9XJKdxxxxmyAp'),
        }
      ](name='RecentList'),
      role?: string(name='Role', example='OWNER'),
      url?: string(name='Url', example='https://alidocs.xxxx/nb9XJKdxxxxmyAp/docs/nb9XxxxxxxmyAp'),
      workspaceId?: string(name='WorkspaceId', example='nb9XJKdxxxxmyAp'),
    }
  ](name='workspaces'),
}

model GetRelatedWorkspacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRelatedWorkspacesResponseBody(name='body'),
}

/**
 * @summary 查询用户有权限的知识库列表(旧)
 *
 * @param tmpReq GetRelatedWorkspacesRequest
 * @param tmpHeader GetRelatedWorkspacesHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRelatedWorkspacesResponse
 */
async function getRelatedWorkspacesWithOptions(tmpReq: GetRelatedWorkspacesRequest, tmpHeader: GetRelatedWorkspacesHeaders, runtime: Util.RuntimeOptions): GetRelatedWorkspacesResponse {
  Util.validateModel(tmpReq);
  var request = new GetRelatedWorkspacesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetRelatedWorkspacesShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.includeRecent)) {
    body['IncludeRecent'] = request.includeRecent;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetRelatedWorkspaces',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/getRelatedWorkspaces`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询用户有权限的知识库列表(旧)
 *
 * @param request GetRelatedWorkspacesRequest
 * @return GetRelatedWorkspacesResponse
 */
async function getRelatedWorkspaces(request: GetRelatedWorkspacesRequest): GetRelatedWorkspacesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetRelatedWorkspacesHeaders{};
  return getRelatedWorkspacesWithOptions(request, headers, runtime);
}

model GetReportTemplateByNameHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetReportTemplateByNameShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetReportTemplateByNameRequest {
  templateName?: string(name='TemplateName', description='This parameter is required.', example='我管理的模版'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model GetReportTemplateByNameShrinkRequest {
  templateName?: string(name='TemplateName', description='This parameter is required.', example='我管理的模版'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetReportTemplateByNameResponseBody = {
  defaultReceivedConvs?: [ 
    {
      conversationId?: string(name='ConversationId', example='cid12334##2341'),
      title?: string(name='Title'),
    }
  ](name='defaultReceivedConvs'),
  defaultReceivers?: [ 
    {
      userName?: string(name='UserName'),
      userid?: string(name='Userid', example='1234'),
    }
  ](name='defaultReceivers'),
  fields?: [ 
    {
      fieldName?: string(name='FieldName', example='key1'),
      sort?: long(name='Sort', example='0'),
      type?: long(name='Type', example='1'),
    }
  ](name='fields'),
  id?: string(name='id', example='11111'),
  name?: string(name='name'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  userName?: string(name='userName'),
  userid?: string(name='userid', example='1234'),
}

model GetReportTemplateByNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetReportTemplateByNameResponseBody(name='body'),
}

/**
 * @summary 获取模板详情
 *
 * @param tmpReq GetReportTemplateByNameRequest
 * @param tmpHeader GetReportTemplateByNameHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetReportTemplateByNameResponse
 */
async function getReportTemplateByNameWithOptions(tmpReq: GetReportTemplateByNameRequest, tmpHeader: GetReportTemplateByNameHeaders, runtime: Util.RuntimeOptions): GetReportTemplateByNameResponse {
  Util.validateModel(tmpReq);
  var request = new GetReportTemplateByNameShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetReportTemplateByNameShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.templateName)) {
    body['TemplateName'] = request.templateName;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetReportTemplateByName',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/log/getReportTemplateByName`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取模板详情
 *
 * @param request GetReportTemplateByNameRequest
 * @return GetReportTemplateByNameResponse
 */
async function getReportTemplateByName(request: GetReportTemplateByNameRequest): GetReportTemplateByNameResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetReportTemplateByNameHeaders{};
  return getReportTemplateByNameWithOptions(request, headers, runtime);
}

model GetReportUnReadCountHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model GetReportUnReadCountShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetReportUnReadCountRequest {
  request?: map[string]any(name='Request', example='null'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model GetReportUnReadCountShrinkRequest {
  requestShrink?: string(name='Request', example='null'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetReportUnReadCountResponseBody = {
  count?: long(name='count', example='1'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model GetReportUnReadCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetReportUnReadCountResponseBody(name='body'),
}

/**
 * @summary 获取员工有多少数量的日志（一个月内）是未读状态
 *
 * @param tmpReq GetReportUnReadCountRequest
 * @param tmpHeader GetReportUnReadCountHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetReportUnReadCountResponse
 */
async function getReportUnReadCountWithOptions(tmpReq: GetReportUnReadCountRequest, tmpHeader: GetReportUnReadCountHeaders, runtime: Util.RuntimeOptions): GetReportUnReadCountResponse {
  Util.validateModel(tmpReq);
  var request = new GetReportUnReadCountShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetReportUnReadCountShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.request)) {
    request.requestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.request, 'Request', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.requestShrink)) {
    body['Request'] = request.requestShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetReportUnReadCount',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/log/getReportUnReadCount`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取员工有多少数量的日志（一个月内）是未读状态
 *
 * @param request GetReportUnReadCountRequest
 * @return GetReportUnReadCountResponse
 */
async function getReportUnReadCount(request: GetReportUnReadCountRequest): GetReportUnReadCountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetReportUnReadCountHeaders{};
  return getReportUnReadCountWithOptions(request, headers, runtime);
}

model GetRunningTasksHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetRunningTasksShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetRunningTasksRequest {
  appType?: string(name='AppType', description='This parameter is required.', example='APP_PBKxxx'),
  language?: string(name='Language', example='zh-CN'),
  processCodes?: string(name='ProcessCodes', example='["xx","xxx"]'),
  processInstanceId?: string(name='ProcessInstanceId', example='instxxxxx'),
  systemToken?: string(name='SystemToken', description='This parameter is required.', example='hexxxx'),
}

model GetRunningTasksResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ 
    {
      activeTimeGMT?: string(name='ActiveTimeGMT', example='2020-01-01'),
      activityId?: string(name='ActivityId', example='act-xxaanfaf'),
      actualActionerId?: string(name='ActualActionerId', example='123456'),
      createTimeGMT?: string(name='CreateTimeGMT', example='2020-01-01'),
      finishTimeGMT?: string(name='FinishTimeGMT', example='2020-01-01'),
      originatorId?: string(name='OriginatorId', example='123456'),
      processInstanceId?: string(name='ProcessInstanceId', example='instancexxxx'),
      status?: string(name='Status', example='running'),
      taskId?: string(name='TaskId', example='taskId'),
      taskType?: string(name='TaskType', example='append task'),
      title?: string(name='Title', example='标题'),
      titleInEnglish?: string(name='TitleInEnglish', example='title'),
    }
  ](name='result', example='[{}]'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetRunningTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRunningTasksResponseBody(name='body'),
}

/**
 * @summary 查询流程运行任务（VPC）
 *
 * @param request GetRunningTasksRequest
 * @param tmpHeader GetRunningTasksHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRunningTasksResponse
 */
async function getRunningTasksWithOptions(request: GetRunningTasksRequest, tmpHeader: GetRunningTasksHeaders, runtime: Util.RuntimeOptions): GetRunningTasksResponse {
  Util.validateModel(request);
  var headers = new GetRunningTasksShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.processCodes)) {
    body['ProcessCodes'] = request.processCodes;
  }
  if (!Util.isUnset(request.processInstanceId)) {
    body['ProcessInstanceId'] = request.processInstanceId;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetRunningTasks',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/getRunningTasks`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询流程运行任务（VPC）
 *
 * @param request GetRunningTasksRequest
 * @return GetRunningTasksResponse
 */
async function getRunningTasks(request: GetRunningTasksRequest): GetRunningTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetRunningTasksHeaders{};
  return getRunningTasksWithOptions(request, headers, runtime);
}

model GetScheduleHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetScheduleShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetScheduleRequest {
  endTime?: string(name='EndTime', example='2020-01-01T10:15:30+08:00'),
  startTime?: string(name='StartTime', example='2020-01-01T10:15:30+08:00'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  userIds?: [ string ](name='UserIds'),
}

model GetScheduleShrinkRequest {
  endTime?: string(name='EndTime', example='2020-01-01T10:15:30+08:00'),
  startTime?: string(name='StartTime', example='2020-01-01T10:15:30+08:00'),
  tenantContextShrink?: string(name='TenantContext'),
  userIdsShrink?: string(name='UserIds'),
}

model GetScheduleResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  scheduleInformation?: [ 
    {
      error?: string(name='Error', example='无权限'),
      scheduleItems?: [ 
        {
          end?: {
            date?: string(name='Date', example='2020-01-01'),
            dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
            timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
          }(name='End'),
          start?: {
            date?: string(name='Date', example='2020-01-01'),
            dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
            timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
          }(name='Start'),
          status?: string(name='Status', example='BUSY'),
        }
      ](name='ScheduleItems'),
      userId?: string(name='UserId', example='012345'),
    }
  ](name='scheduleInformation'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetScheduleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetScheduleResponseBody(name='body'),
}

/**
 * @summary 获取用户忙闲信息
 *
 * @param tmpReq GetScheduleRequest
 * @param tmpHeader GetScheduleHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetScheduleResponse
 */
async function getScheduleWithOptions(tmpReq: GetScheduleRequest, tmpHeader: GetScheduleHeaders, runtime: Util.RuntimeOptions): GetScheduleResponse {
  Util.validateModel(tmpReq);
  var request = new GetScheduleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetScheduleShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.userIds)) {
    request.userIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userIds, 'UserIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.userIdsShrink)) {
    body['UserIds'] = request.userIdsShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSchedule',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/getSchedule`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取用户忙闲信息
 *
 * @param request GetScheduleRequest
 * @return GetScheduleResponse
 */
async function getSchedule(request: GetScheduleRequest): GetScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetScheduleHeaders{};
  return getScheduleWithOptions(request, headers, runtime);
}

model GetSheetHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model GetSheetShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetSheetRequest {
  sheetId?: string(name='SheetId', description='This parameter is required.', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model GetSheetShrinkRequest {
  sheetId?: string(name='SheetId', description='This parameter is required.', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model GetSheetResponseBody = {
  columnCount?: long(name='columnCount', example='20'),
  id?: string(name='id', example='stxxxx'),
  lastNonEmptyColumn?: long(name='lastNonEmptyColumn', example='1'),
  lastNonEmptyRow?: long(name='lastNonEmptyRow', example='2'),
  name?: string(name='name', example='Sheet1'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  rowCount?: long(name='rowCount', example='10'),
  visibility?: string(name='visibility', example='visible'),
}

model GetSheetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSheetResponseBody(name='body'),
}

/**
 * @summary 获取工作表
 *
 * @param tmpReq GetSheetRequest
 * @param tmpHeader GetSheetHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSheetResponse
 */
async function getSheetWithOptions(tmpReq: GetSheetRequest, tmpHeader: GetSheetHeaders, runtime: Util.RuntimeOptions): GetSheetResponse {
  Util.validateModel(tmpReq);
  var request = new GetSheetShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetSheetShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.sheetId)) {
    body['SheetId'] = request.sheetId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSheet',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/getSheet`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取工作表
 *
 * @param request GetSheetRequest
 * @return GetSheetResponse
 */
async function getSheet(request: GetSheetRequest): GetSheetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetSheetHeaders{};
  return getSheetWithOptions(request, headers, runtime);
}

model GetSheetContentJobIdHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetSheetContentJobIdShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetSheetContentJobIdRequest {
  dentryUuid?: string(name='DentryUuid', example='MNDoBb60VLYDGNPytQe7Gzp4JlemrZQ3'),
  exportType?: string(name='ExportType', example='dingTalksheetToxlsx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model GetSheetContentJobIdShrinkRequest {
  dentryUuid?: string(name='DentryUuid', example='MNDoBb60VLYDGNPytQe7Gzp4JlemrZQ3'),
  exportType?: string(name='ExportType', example='dingTalksheetToxlsx'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetSheetContentJobIdResponseBody = {
  jobId?: string(name='jobId', example='14640056080'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  status?: string(name='status', example='init'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetSheetContentJobIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSheetContentJobIdResponseBody(name='body'),
}

/**
 * @summary 获取表格文档内容jobId
 *
 * @param tmpReq GetSheetContentJobIdRequest
 * @param tmpHeader GetSheetContentJobIdHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSheetContentJobIdResponse
 */
async function getSheetContentJobIdWithOptions(tmpReq: GetSheetContentJobIdRequest, tmpHeader: GetSheetContentJobIdHeaders, runtime: Util.RuntimeOptions): GetSheetContentJobIdResponse {
  Util.validateModel(tmpReq);
  var request = new GetSheetContentJobIdShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetSheetContentJobIdShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.dentryUuid)) {
    body['DentryUuid'] = request.dentryUuid;
  }
  if (!Util.isUnset(request.exportType)) {
    body['ExportType'] = request.exportType;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSheetContentJobId',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/getSheetContentJobId`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取表格文档内容jobId
 *
 * @param request GetSheetContentJobIdRequest
 * @return GetSheetContentJobIdResponse
 */
async function getSheetContentJobId(request: GetSheetContentJobIdRequest): GetSheetContentJobIdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetSheetContentJobIdHeaders{};
  return getSheetContentJobIdWithOptions(request, headers, runtime);
}

model GetSpaceDirectoriesHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetSpaceDirectoriesShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetSpaceDirectoriesRequest {
  dentryId?: string(name='DentryId', example='asdasd'),
  maxResults?: int32(name='MaxResults', description='This parameter is required.', example='30'),
  nextToken?: string(name='NextToken', example='123123'),
  spaceId?: string(name='SpaceId', description='This parameter is required.', example='qweqwe'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model GetSpaceDirectoriesShrinkRequest {
  dentryId?: string(name='DentryId', example='asdasd'),
  maxResults?: int32(name='MaxResults', description='This parameter is required.', example='30'),
  nextToken?: string(name='NextToken', example='123123'),
  spaceId?: string(name='SpaceId', description='This parameter is required.', example='qweqwe'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetSpaceDirectoriesResponseBody = {
  children?: [ 
    {
      contentType?: string(name='ContentType', example='alidoc'),
      createdTime?: long(name='CreatedTime', example='12345678'),
      creator?: {
        name?: string(name='Name', example='hello'),
        userId?: string(name='UserId', example='012345'),
      }(name='Creator'),
      dentryId?: string(name='DentryId', example='abc'),
      dentryType?: string(name='DentryType', example='file'),
      dentryUuid?: string(name='DentryUuid', example='cdefg'),
      docKey?: string(name='DocKey', example='aabbcc'),
      extension?: string(name='Extension', example='alidoc'),
      hasChildren?: boolean(name='HasChildren', example='false'),
      linkSourceInfo?: {
        extension?: string(name='Extension', example='docx'),
        iconUrl?: {
          line?: string(name='Line', example='gh'),
          small?: string(name='Small', example='def'),
        }(name='IconUrl'),
        id?: string(name='Id', example='def'),
        linkType?: long(name='LinkType', example='0'),
        spaceId?: string(name='SpaceId', example='def'),
      }(name='LinkSourceInfo'),
      name?: string(name='Name', example='hello'),
      path?: string(name='Path', example='测试组织/测试知识库/abc'),
      space?: {
        cover?: string(name='Cover', example='https://img.alicdn.com/imgextra/i1/O1xxxxx.png'),
        description?: string(name='Description', example='这是简介'),
        hdIconVO?: {
          icon?: string(name='Icon', example='https://img.alicdn.com/imgextra/i1/xxxxx.png'),
          type?: string(name='Type', example='1'),
        }(name='HdIconVO'),
        iconVO?: {
          icon?: string(name='Icon', example='https://img.alicdn.com/imgextra/i1/xxxxx.png'),
          type?: string(name='Type', example='1'),
        }(name='IconVO'),
        id?: string(name='Id', example='n9XJxxxxx'),
        name?: string(name='Name'),
        owner?: {
          name?: string(name='Name', example='小钉'),
          userId?: string(name='UserId', example='012345'),
        }(name='Owner', example='测试知识库'),
        recentList?: [ any ](name='RecentList'),
        type?: int32(name='Type', example='1'),
        url?: string(name='Url', example='https://alidocs.dingtalk.com/i/spaces/n9XJ*******Xy/overview'),
        visitorInfo?: {
          dentryActions?: [ string ](name='DentryActions', example='GET_DENTRY'),
          roleCode?: string(name='RoleCode', example='3'),
          spaceActions?: [ string ](name='SpaceActions', example='GET_SPACE'),
        }(name='VisitorInfo'),
      }(name='Space'),
      spaceId?: string(name='SpaceId', example='bcd'),
      statisticalInfo?: {
        wordCount?: long(name='WordCount', description='WordCount', example='10'),
      }(name='StatisticalInfo'),
      updatedTime?: long(name='UpdatedTime', example='12345678'),
      updater?: {
        name?: string(name='Name', example='hello'),
        userId?: string(name='UserId', example='012345'),
      }(name='Updater'),
      url?: string(name='Url', example='https://xxx.yy'),
      visitorInfo?: {
        dentryActions?: [ string ](name='DentryActions'),
        roleCode?: string(name='RoleCode', example='OWNER'),
        spaceActions?: [ string ](name='SpaceActions'),
      }(name='VisitorInfo'),
    }
  ](name='children'),
  hasMore?: boolean(name='hasMore', example='true'),
  nextToken?: string(name='nextToken', example='1296'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model GetSpaceDirectoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSpaceDirectoriesResponseBody(name='body'),
}

/**
 * @summary 查询知识库下的目录结构
 *
 * @param tmpReq GetSpaceDirectoriesRequest
 * @param tmpHeader GetSpaceDirectoriesHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSpaceDirectoriesResponse
 */
async function getSpaceDirectoriesWithOptions(tmpReq: GetSpaceDirectoriesRequest, tmpHeader: GetSpaceDirectoriesHeaders, runtime: Util.RuntimeOptions): GetSpaceDirectoriesResponse {
  Util.validateModel(tmpReq);
  var request = new GetSpaceDirectoriesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetSpaceDirectoriesShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.dentryId)) {
    body['DentryId'] = request.dentryId;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.spaceId)) {
    body['SpaceId'] = request.spaceId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSpaceDirectories',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/getSpaceDirectories`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询知识库下的目录结构
 *
 * @param request GetSpaceDirectoriesRequest
 * @return GetSpaceDirectoriesResponse
 */
async function getSpaceDirectories(request: GetSpaceDirectoriesRequest): GetSpaceDirectoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetSpaceDirectoriesHeaders{};
  return getSpaceDirectoriesWithOptions(request, headers, runtime);
}

model GetSubscribedCalendarHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetSubscribedCalendarShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetSubscribedCalendarRequest {
  calendarId?: string(name='CalendarId', description='This parameter is required.', example='M5MjkxNDUxQHVzZXJzLmRpbmd0YWxrLmNv'),
}

model GetSubscribedCalendarResponseBody = {
  author?: string(name='author', example='012345'),
  calendarId?: string(name='calendarId', example='M5MjkxNDUxQHVzZXJzLmRpbmd0YWxrLmNv'),
  description?: string(name='description', example='中国传统日历'),
  managers?: [ string ](name='managers'),
  name?: string(name='name', example='中国传统日历'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  subscribeScope?: {
    corpIds?: [ string ](name='CorpIds'),
    openConversationIds?: [ string ](name='OpenConversationIds'),
    userIds?: [ string ](name='UserIds'),
  }(name='subscribeScope'),
}

model GetSubscribedCalendarResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSubscribedCalendarResponseBody(name='body'),
}

/**
 * @summary 查询单个订阅日历详情
 *
 * @param request GetSubscribedCalendarRequest
 * @param tmpHeader GetSubscribedCalendarHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSubscribedCalendarResponse
 */
async function getSubscribedCalendarWithOptions(request: GetSubscribedCalendarRequest, tmpHeader: GetSubscribedCalendarHeaders, runtime: Util.RuntimeOptions): GetSubscribedCalendarResponse {
  Util.validateModel(request);
  var headers = new GetSubscribedCalendarShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.calendarId)) {
    body['CalendarId'] = request.calendarId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSubscribedCalendar',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/getSubscribedCalendar`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询单个订阅日历详情
 *
 * @param request GetSubscribedCalendarRequest
 * @return GetSubscribedCalendarResponse
 */
async function getSubscribedCalendar(request: GetSubscribedCalendarRequest): GetSubscribedCalendarResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetSubscribedCalendarHeaders{};
  return getSubscribedCalendarWithOptions(request, headers, runtime);
}

model GetTaskCopiesHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetTaskCopiesShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetTaskCopiesRequest {
  appType?: string(name='AppType', example='APP_PBKxxx'),
  createFromTimeGMT?: long(name='CreateFromTimeGMT', example='2021-05-01'),
  createToTimeGMT?: long(name='CreateToTimeGMT', example='2021-05-01'),
  keyword?: string(name='Keyword', example='keyword'),
  language?: string(name='Language', example='zh-CN'),
  pageNumber?: int32(name='PageNumber', example='20'),
  pageSize?: int32(name='PageSize', example='20'),
  processCodes?: string(name='ProcessCodes', example='["xx","xxx"]'),
  systemToken?: string(name='SystemToken', description='This parameter is required.', example='hexxxx'),
}

model GetTaskCopiesResponseBody = {
  data?: [ 
    {
      actionExecutorId?: [ string ](name='ActionExecutorId', example='[ "actxxx" ]'),
      actionExecutorName?: [ string ](name='ActionExecutorName', example='[ "name" ]'),
      appType?: string(name='AppType', example='APP_XCxxx'),
      carbonActivityId?: string(name='CarbonActivityId', example='g02fbs08xxx'),
      createTimeGMT?: string(name='CreateTimeGMT', example='2020-01-01'),
      currentActivityInstances?: [ 
        {
          activityId?: string(name='ActivityId', example='act-xxaanfaf'),
          activityInstanceStatus?: string(name='ActivityInstanceStatus', example='running'),
          activityName?: string(name='ActivityName', example='act-12345'),
          activityNameInEnglish?: string(name='ActivityNameInEnglish', example='redirect task'),
          id?: long(name='Id', example='12345'),
        }
      ](name='CurrentActivityInstances', example='[]'),
      dataMap?: map[string]any(name='DataMap', example='{}'),
      dataType?: string(name='DataType', example='edit'),
      finishTimeGMT?: string(name='FinishTimeGMT', example='2020-01-01'),
      formInstanceId?: string(name='FormInstanceId', example='formxxxx'),
      formUuid?: string(name='FormUuid', example='uuid'),
      instanceValue?: string(name='InstanceValue', example='value'),
      modifiedTimeGMT?: string(name='ModifiedTimeGMT', example='2020-01-01'),
      originatorAvatar?: string(name='OriginatorAvatar', example='guyagsd'),
      originatorDisplayName?: string(name='OriginatorDisplayName', example='guyagsd'),
      originatorId?: string(name='OriginatorId', example='123456'),
      processApprovedResult?: string(name='ProcessApprovedResult', example='同意'),
      processApprovedResultText?: string(name='ProcessApprovedResultText', example='同意'),
      processCode?: string(name='ProcessCode', example='code'),
      processId?: long(name='ProcessId', example='processxxxx'),
      processInstanceId?: string(name='ProcessInstanceId', example='instancexxxx'),
      processInstanceStatus?: string(name='ProcessInstanceStatus', example='同意'),
      processInstanceStatusText?: string(name='ProcessInstanceStatusText', example='同意'),
      processName?: string(name='ProcessName', example='名称'),
      serialNumber?: string(name='SerialNumber', example='12345'),
      title?: string(name='Title', example='标题'),
      version?: long(name='Version', example='1.0'),
    }
  ](name='data', example='[{}]'),
  pageNumber?: long(name='pageNumber', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: long(name='totalCount', example='10'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetTaskCopiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskCopiesResponseBody(name='body'),
}

/**
 * @summary 查询抄送我的任务列表（应用维度）
 *
 * @param request GetTaskCopiesRequest
 * @param tmpHeader GetTaskCopiesHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTaskCopiesResponse
 */
async function getTaskCopiesWithOptions(request: GetTaskCopiesRequest, tmpHeader: GetTaskCopiesHeaders, runtime: Util.RuntimeOptions): GetTaskCopiesResponse {
  Util.validateModel(request);
  var headers = new GetTaskCopiesShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.createFromTimeGMT)) {
    body['CreateFromTimeGMT'] = request.createFromTimeGMT;
  }
  if (!Util.isUnset(request.createToTimeGMT)) {
    body['CreateToTimeGMT'] = request.createToTimeGMT;
  }
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.processCodes)) {
    body['ProcessCodes'] = request.processCodes;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTaskCopies',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/getTaskCopies`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询抄送我的任务列表（应用维度）
 *
 * @param request GetTaskCopiesRequest
 * @return GetTaskCopiesResponse
 */
async function getTaskCopies(request: GetTaskCopiesRequest): GetTaskCopiesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetTaskCopiesHeaders{};
  return getTaskCopiesWithOptions(request, headers, runtime);
}

model GetTemplateListByUserIdHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetTemplateListByUserIdShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetTemplateListByUserIdRequest {
  offset?: long(name='Offset', description='This parameter is required.', example='10'),
  size?: long(name='Size', description='This parameter is required.', example='10'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model GetTemplateListByUserIdShrinkRequest {
  offset?: long(name='Offset', description='This parameter is required.', example='10'),
  size?: long(name='Size', description='This parameter is required.', example='10'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetTemplateListByUserIdResponseBody = {
  nextCursor?: long(name='nextCursor', example='12312131231'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  templateList?: [ 
    {
      iconUrl?: string(name='IconUrl'),
      name?: string(name='Name'),
      reportCode?: string(name='ReportCode', example='11111'),
      url?: string(name='Url', example='https://scsss/sss'),
    }
  ](name='templateList'),
}

model GetTemplateListByUserIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTemplateListByUserIdResponseBody(name='body'),
}

/**
 * @summary 获取用户可见的日志模板
 *
 * @param tmpReq GetTemplateListByUserIdRequest
 * @param tmpHeader GetTemplateListByUserIdHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTemplateListByUserIdResponse
 */
async function getTemplateListByUserIdWithOptions(tmpReq: GetTemplateListByUserIdRequest, tmpHeader: GetTemplateListByUserIdHeaders, runtime: Util.RuntimeOptions): GetTemplateListByUserIdResponse {
  Util.validateModel(tmpReq);
  var request = new GetTemplateListByUserIdShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetTemplateListByUserIdShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.offset)) {
    body['Offset'] = request.offset;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTemplateListByUserId',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/log/getTemplateListByUserId`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取用户可见的日志模板
 *
 * @param request GetTemplateListByUserIdRequest
 * @return GetTemplateListByUserIdResponse
 */
async function getTemplateListByUserId(request: GetTemplateListByUserIdRequest): GetTemplateListByUserIdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetTemplateListByUserIdHeaders{};
  return getTemplateListByUserIdWithOptions(request, headers, runtime);
}

model GetTicketHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model GetTicketShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetTicketRequest {
  openTeamId?: string(name='OpenTeamId', description='This parameter is required.', example='eKWh3xxxxiE'),
  openTicketId?: string(name='OpenTicketId', description='This parameter is required.', example='Dq9hP8Sk2v6vQxxxxiE'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model GetTicketShrinkRequest {
  openTeamId?: string(name='OpenTeamId', description='This parameter is required.', example='eKWh3xxxxiE'),
  openTicketId?: string(name='OpenTicketId', description='This parameter is required.', example='Dq9hP8Sk2v6vQxxxxiE'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetTicketResponseBody = {
  createTime?: string(name='createTime', example='2021-07-09 14:45:01'),
  creator?: {
    nickName?: string(name='NickName', example='贤文'),
    unionId?: string(name='UnionId', example='012345'),
  }(name='creator'),
  customFields?: string(name='customFields', example='[{ "customerVisible": true,"editable": false,"identifier": "input1","name": "正文","placeholder": "请输入","required": false,"type": "TEXT_AREA","value": "123"},{"customerVisible": true,"editable": false,"identifier": "input2","name": "单选","options": [{"color": "#000000","value": "选项1"},{"color": "#000000","value": "选项2"},{"color": "#000000","value": "选项3"}],"required": false,"type": "RADIO"},{"customerVisible": true,"editable": false,"identifier": "input3","name": "多选","options": [{"color": "#000000","value": "选项1"},{"color": "#000000","value": "选项2"},{"color": "#000000","value": "选项3"}],"required": false,"type": "CHECKBOX"},{"customerVisible": true,"editable": false,"identifier": "input5","name": "数字","required": false,"type": "INPUT_NUMBER"},{"customerVisible": true,"editable": false,"identifier": "input6","maxFileNum": 20,"name": "上传","required": false,"type": "FILE"},{"customerVisible": true,"editable": false,"identifier": "input7","maxFileNum": 20,"name": "图片","required": false,"type": "IMAGE"},{"customerVisible": true,"editable": false,"format": "DATE_TIME","identifier": "input8","name": "日期","required": false,"type": "DATE_TIME_PICKER"}]'),
  openConversationId?: string(name='openConversationId', example='cidZBSNxxxxXUCrAA=='),
  openTicketId?: string(name='openTicketId', example='a8iSxxxxtgiE'),
  processor?: {
    nickName?: string(name='NickName', example='贤文'),
    unionId?: string(name='UnionId', example='012345'),
  }(name='processor'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  scene?: string(name='scene', example='SG'),
  sceneContext?: string(name='sceneContext', example='{"groupId":1893227,"groupIsNormal":true,"groupName":"API和SPI测试群","groupSetId":29003,"groupSetName":"默认服务群组","scene":"SG"}'),
  stage?: string(name='stage', example='FINISHED'),
  takers?: [ 
    {
      nickName?: string(name='NickName', example='贤文'),
      unionId?: string(name='UnionId', example='012345'),
    }
  ](name='takers'),
  template?: {
    openTemplateBizId?: string(name='OpenTemplateBizId', description='OpenTemplateBizId', example='OpenTemplateBizId'),
    openTemplateId?: string(name='OpenTemplateId', description='OpenTemplateBizId', example='OpenTemplateBizId'),
    templateName?: string(name='TemplateName'),
  }(name='template'),
  title?: string(name='title', example='贤文api测试，处理人王鸿程和李航宇'),
  updateTime?: string(name='updateTime', example='2021-07-09 19:26:09'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTicketResponseBody(name='body'),
}

/**
 * @summary 获取指定工单详情
 *
 * @param tmpReq GetTicketRequest
 * @param tmpHeader GetTicketHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTicketResponse
 */
async function getTicketWithOptions(tmpReq: GetTicketRequest, tmpHeader: GetTicketHeaders, runtime: Util.RuntimeOptions): GetTicketResponse {
  Util.validateModel(tmpReq);
  var request = new GetTicketShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetTicketShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.openTeamId)) {
    body['OpenTeamId'] = request.openTeamId;
  }
  if (!Util.isUnset(request.openTicketId)) {
    body['OpenTicketId'] = request.openTicketId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTicket',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ticket/getTicket`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取指定工单详情
 *
 * @param request GetTicketRequest
 * @return GetTicketResponse
 */
async function getTicket(request: GetTicketRequest): GetTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetTicketHeaders{};
  return getTicketWithOptions(request, headers, runtime);
}

model GetTodoTaskHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetTodoTaskShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetTodoTaskRequest {
  taskId?: string(name='TaskId', description='This parameter is required.', example='OPJpwtxxxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model GetTodoTaskShrinkRequest {
  taskId?: string(name='TaskId', description='This parameter is required.', example='OPJpwtxxxx'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetTodoTaskResponseBody = {
  bizTag?: string(name='bizTag', example='isv_dingtalkTodo'),
  cardTypeId?: string(name='cardTypeId', example='此参数禁止发布'),
  createdTime?: long(name='createdTime', example='1617675000000'),
  creatorId?: string(name='creatorId', example='012345'),
  description?: string(name='description', example='应用可以调用该接口获取钉钉待办任务详情信息及状态。'),
  detailUrl?: {
    appUrl?: string(name='AppUrl', example='dingtalk://dingtalkclient/action/open_mini_app?miniAppId={0}&ddMode=push&page=pages%2ftask-detail%2ftask-detail%3ftaskId%3d{1}'),
    pcUrl?: string(name='PcUrl', example='https://todo.dingtalk.com/ding-portal/detail/task/{0}'),
  }(name='detailUrl'),
  done?: boolean(name='done', example='true'),
  dueTime?: long(name='dueTime', example='1617675000000'),
  executorIds?: [ string ](name='executorIds'),
  finishTime?: long(name='finishTime', example='1617675000000'),
  id?: string(name='id', example='OPJpwtxxxx'),
  isOnlyShowExecutor?: boolean(name='isOnlyShowExecutor', example='true'),
  modifiedTime?: long(name='modifiedTime', example='1617675000000'),
  modifierId?: string(name='modifierId', example='012345'),
  participantIds?: [ string ](name='participantIds'),
  priority?: int32(name='priority', example='20'),
  requestId?: string(name='requestId', example='PUoiinWIxxx'),
  source?: string(name='source', example='isv_dingtalkTodo'),
  sourceId?: string(name='sourceId', example='isv_dingxxx'),
  startTime?: long(name='startTime', example='1617675000000'),
  subject?: string(name='subject', example='接入钉钉待办'),
  tenantId?: string(name='tenantId', example='orgId1'),
  tenantType?: string(name='tenantType', example='org'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetTodoTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTodoTaskResponseBody(name='body'),
}

/**
 * @summary 获取钉钉待办任务详情
 *
 * @param tmpReq GetTodoTaskRequest
 * @param tmpHeader GetTodoTaskHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTodoTaskResponse
 */
async function getTodoTaskWithOptions(tmpReq: GetTodoTaskRequest, tmpHeader: GetTodoTaskHeaders, runtime: Util.RuntimeOptions): GetTodoTaskResponse {
  Util.validateModel(tmpReq);
  var request = new GetTodoTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetTodoTaskShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTodoTask',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/task/getTodoTask`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取钉钉待办任务详情
 *
 * @param request GetTodoTaskRequest
 * @return GetTodoTaskResponse
 */
async function getTodoTask(request: GetTodoTaskRequest): GetTodoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetTodoTaskHeaders{};
  return getTodoTaskWithOptions(request, headers, runtime);
}

model GetUserHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model GetUserShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetUserRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  language?: string(name='language', example='zh_CN'),
}

model GetUserShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  language?: string(name='language', example='zh_CN'),
}

model GetUserResponseBody = {
  active?: boolean(name='active', example='true'),
  admin?: boolean(name='admin', example='true'),
  avatar?: string(name='avatar', example='xxx'),
  boss?: boolean(name='boss', example='true'),
  deptIdList?: [ long ](name='deptIdList', example='[2,3,4]'),
  deptOrderList?: [ 
    {
      deptId?: long(name='deptId'),
      order?: long(name='order'),
    }
  ](name='deptOrderList'),
  email?: string(name='email', example='test@xxx.com'),
  exclusiveAccount?: boolean(name='exclusiveAccount', example='true'),
  exclusiveAccountCorpId?: string(name='exclusiveAccountCorpId', example='dingxxx'),
  exclusiveAccountCorpName?: string(name='exclusiveAccountCorpName', example='组织名称'),
  exclusiveAccountType?: string(name='exclusiveAccountType', example='dingtalk'),
  extension?: string(name='extension', example='{"爱好":"旅游","年龄":"24"}'),
  hideMobile?: boolean(name='hideMobile', example='false'),
  hiredDate?: long(name='hiredDate', example='1597573616828'),
  jobNumber?: string(name='jobNumber', example='4'),
  leaderInDept?: [ 
    {
      deptId?: long(name='deptId'),
      leader?: boolean(name='leader'),
    }
  ](name='leaderInDept'),
  loginId?: string(name='loginId', example='login_id3'),
  managerUserid?: string(name='managerUserid', example='manager240'),
  mobile?: string(name='mobile', example='18513027676'),
  name?: string(name='name', example='张三'),
  nickname?: string(name='nickname', example='昵称'),
  orgEmail?: string(name='orgEmail', example='test@xxx.com'),
  realAuthed?: boolean(name='realAuthed', example='true'),
  remark?: string(name='remark', example='备注备注'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  roleList?: [ 
    {
      groupName?: string(name='groupName', example='职务'),
      id?: long(name='id'),
      name?: string(name='name', example='张三'),
    }
  ](name='roleList'),
  senior?: boolean(name='senior', example='true'),
  stateCode?: string(name='stateCode', example='86'),
  telephone?: string(name='telephone', example='010-86123456-2345'),
  title?: string(name='title', example='技术总监'),
  unionEmpExt?: {
    corpId?: string(name='corpId', example='dingxxx'),
    unionEmpMapList?: [ 
      {
        cropId?: string(name='cropId', example='dingxxx'),
        userid?: string(name='userid', example='zhangsan'),
      }
    ](name='unionEmpMapList'),
    userid?: string(name='userid', example='zhangsan'),
  }(name='unionEmpExt'),
  unionid?: string(name='unionid'),
  userid?: string(name='userid', example='zhangsan'),
  workPlace?: string(name='workPlace', example='未来park'),
}

model GetUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserResponseBody(name='body'),
}

/**
 * @summary 获取专属账号信息
 *
 * @param tmpReq GetUserRequest
 * @param tmpHeader GetUserHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetUserResponse
 */
async function getUserWithOptions(tmpReq: GetUserRequest, tmpHeader: GetUserHeaders, runtime: Util.RuntimeOptions): GetUserResponse {
  Util.validateModel(tmpReq);
  var request = new GetUserShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetUserShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.language)) {
    body['language'] = request.language;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetUser',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/im/getUser`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取专属账号信息
 *
 * @param request GetUserRequest
 * @return GetUserResponse
 */
async function getUser(request: GetUserRequest): GetUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetUserHeaders{};
  return getUserWithOptions(request, headers, runtime);
}

model GetUserIdHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetUserIdShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetUserIdRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  unionId?: string(name='UnionId', description='unionId', example='****iE'),
}

model GetUserIdShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  unionId?: string(name='UnionId', description='unionId', example='****iE'),
}

model GetUserIdResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  userId?: string(name='userId', example='012345'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetUserIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserIdResponseBody(name='body'),
}

/**
 * @summary 根据unionId获取用户userId
 *
 * @param tmpReq GetUserIdRequest
 * @param tmpHeader GetUserIdHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetUserIdResponse
 */
async function getUserIdWithOptions(tmpReq: GetUserIdRequest, tmpHeader: GetUserIdHeaders, runtime: Util.RuntimeOptions): GetUserIdResponse {
  Util.validateModel(tmpReq);
  var request = new GetUserIdShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetUserIdShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.unionId)) {
    body['UnionId'] = request.unionId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetUserId',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/im/getUserId`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 根据unionId获取用户userId
 *
 * @param request GetUserIdRequest
 * @return GetUserIdResponse
 */
async function getUserId(request: GetUserIdRequest): GetUserIdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetUserIdHeaders{};
  return getUserIdWithOptions(request, headers, runtime);
}

model GetUserIdByOrgIdAndStaffIdHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetUserIdByOrgIdAndStaffIdShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetUserIdByOrgIdAndStaffIdRequest {
  orgId?: long(name='OrgId', example='123456'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model GetUserIdByOrgIdAndStaffIdShrinkRequest {
  orgId?: long(name='OrgId', example='123456'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetUserIdByOrgIdAndStaffIdResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  userId?: string(name='userId', example='01223245436'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetUserIdByOrgIdAndStaffIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserIdByOrgIdAndStaffIdResponseBody(name='body'),
}

/**
 * @summary 根据orgId和staffId获取用户userId
 *
 * @param tmpReq GetUserIdByOrgIdAndStaffIdRequest
 * @param tmpHeader GetUserIdByOrgIdAndStaffIdHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetUserIdByOrgIdAndStaffIdResponse
 */
async function getUserIdByOrgIdAndStaffIdWithOptions(tmpReq: GetUserIdByOrgIdAndStaffIdRequest, tmpHeader: GetUserIdByOrgIdAndStaffIdHeaders, runtime: Util.RuntimeOptions): GetUserIdByOrgIdAndStaffIdResponse {
  Util.validateModel(tmpReq);
  var request = new GetUserIdByOrgIdAndStaffIdShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetUserIdByOrgIdAndStaffIdShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.orgId)) {
    body['OrgId'] = request.orgId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetUserIdByOrgIdAndStaffId',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/im/getUserIdByOrgIdAndStaffId`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 根据orgId和staffId获取用户userId
 *
 * @param request GetUserIdByOrgIdAndStaffIdRequest
 * @return GetUserIdByOrgIdAndStaffIdResponse
 */
async function getUserIdByOrgIdAndStaffId(request: GetUserIdByOrgIdAndStaffIdRequest): GetUserIdByOrgIdAndStaffIdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetUserIdByOrgIdAndStaffIdHeaders{};
  return getUserIdByOrgIdAndStaffIdWithOptions(request, headers, runtime);
}

model GetUserLatestPlanHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetUserLatestPlanShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetUserLatestPlanRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model GetUserLatestPlanShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
}

model GetUserLatestPlanResponseBody = {
  accountHandleStatus?: int32(name='accountHandleStatus', example='1'),
  accountHandleTime?: string(name='accountHandleTime', example='2022-02-02'),
  accountType?: int32(name='accountType', example='0'),
  agreementFirstSignTime?: string(name='agreementFirstSignTime', example='2022-02-05'),
  agreementLastSignTime?: string(name='agreementLastSignTime', example='2022-02-06'),
  agreementStatus?: int32(name='agreementStatus', example='1'),
  dataHandleEndTime?: string(name='dataHandleEndTime', example='2022-02-04'),
  dataHandleStartTime?: string(name='dataHandleStartTime', example='2022-02-03'),
  dataHandleStatus?: int32(name='dataHandleStatus', example='1'),
  exclusivePlan?: int32(name='exclusivePlan', example='1'),
  newAccountUid?: long(name='newAccountUid', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  status?: int32(name='status', example='0'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model GetUserLatestPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserLatestPlanResponseBody(name='body'),
}

/**
 * @summary 获取用户最新的有效的专属账号迁移方案
 *
 * @param tmpReq GetUserLatestPlanRequest
 * @param tmpHeader GetUserLatestPlanHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetUserLatestPlanResponse
 */
async function getUserLatestPlanWithOptions(tmpReq: GetUserLatestPlanRequest, tmpHeader: GetUserLatestPlanHeaders, runtime: Util.RuntimeOptions): GetUserLatestPlanResponse {
  Util.validateModel(tmpReq);
  var request = new GetUserLatestPlanShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetUserLatestPlanShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetUserLatestPlan',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/aliding/v1/indepding/getUserLatestPlan`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取用户最新的有效的专属账号迁移方案
 *
 * @param request GetUserLatestPlanRequest
 * @return GetUserLatestPlanResponse
 */
async function getUserLatestPlan(request: GetUserLatestPlanRequest): GetUserLatestPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetUserLatestPlanHeaders{};
  return getUserLatestPlanWithOptions(request, headers, runtime);
}

model GetWorkspaceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetWorkspaceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetWorkspaceRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  withPermissionRole?: boolean(name='WithPermissionRole', example='false'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='MJ0pDSKMV9dO20E4'),
}

model GetWorkspaceShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  withPermissionRole?: boolean(name='WithPermissionRole', example='false'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='MJ0pDSKMV9dO20E4'),
}

model GetWorkspaceResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  workspace?: {
    corpId?: string(name='CorpId', example='ding16b241fd05********288'),
    cover?: string(name='Cover', example='https://example/file-manage-files/zh-CN/202***13/ldet/XXXX.jpg'),
    createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
    creatorId?: string(name='CreatorId', example='01472825524039877041'),
    description?: string(name='Description', example='workspace_description'),
    icon?: {
      type?: string(name='Type', example='URL'),
      value?: string(name='Value', example='https://example/file-manage-files/zh-CN/202***13/ldet/avatar3.jpg'),
    }(name='Icon'),
    modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
    modifierId?: string(name='ModifierId', example='01472825524039877041'),
    name?: string(name='Name', example='workspace_name'),
    permissionRole?: string(name='PermissionRole', example='READER'),
    rootNodeId?: string(name='RootNodeId', example='ydxXB52LJqqK7xxNTXyo390kJqjMp697'),
    teamId?: string(name='TeamId', example='lHiicjNFM2iSFYSdz2iPuI8ZwiEiE'),
    type?: string(name='Type', example='TEAM'),
    url?: string(name='Url', example='workspace_url'),
    workspaceId?: string(name='WorkspaceId', example='MJ0pDSKMV9dO20E4'),
  }(name='workspace'),
}

model GetWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWorkspaceResponseBody(name='body'),
}

/**
 * @summary 获取知识库
 *
 * @param tmpReq GetWorkspaceRequest
 * @param tmpHeader GetWorkspaceHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWorkspaceResponse
 */
async function getWorkspaceWithOptions(tmpReq: GetWorkspaceRequest, tmpHeader: GetWorkspaceHeaders, runtime: Util.RuntimeOptions): GetWorkspaceResponse {
  Util.validateModel(tmpReq);
  var request = new GetWorkspaceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetWorkspaceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.withPermissionRole)) {
    body['WithPermissionRole'] = request.withPermissionRole;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetWorkspace',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/getWorkspace`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取知识库
 *
 * @param request GetWorkspaceRequest
 * @return GetWorkspaceResponse
 */
async function getWorkspace(request: GetWorkspaceRequest): GetWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetWorkspaceHeaders{};
  return getWorkspaceWithOptions(request, headers, runtime);
}

model GetWorkspacesHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model GetWorkspacesShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetWorkspacesRequest {
  option?: {
    withPermissionRole?: boolean(name='WithPermissionRole', example='true'),
  }(name='Option'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workspaceIds?: [ string ](name='WorkspaceIds', description='This parameter is required.', example='workspace_id'),
}

model GetWorkspacesShrinkRequest {
  optionShrink?: string(name='Option'),
  tenantContextShrink?: string(name='TenantContext'),
  workspaceIdsShrink?: string(name='WorkspaceIds', description='This parameter is required.', example='workspace_id'),
}

model GetWorkspacesResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  workspace?: [ 
    {
      corpId?: string(name='CorpId', example='ding16b241fd05********288'),
      cover?: string(name='Cover', example='https://example/file-manage-files/zh-CN/202***13/ldet/XXXX.jpg'),
      createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
      creatorId?: string(name='CreatorId', example='01472825524039877041'),
      description?: string(name='Description', example='workspace_description'),
      icon?: {
        type?: string(name='Type', example='URL'),
        value?: string(name='Value', example='https://example/file-manage-files/zh-CN/202***13/ldet/avatar3.jpg'),
      }(name='Icon'),
      modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
      modifierId?: string(name='ModifierId', example='01472825524039877041'),
      name?: string(name='Name', example='workspace_name'),
      permissionRole?: string(name='PermissionRole', example='READER'),
      rootNodeId?: string(name='RootNodeId', example='ZgpG2NdyVXXjrKKzIBqMp5zkVMwvDqPk'),
      teamId?: string(name='TeamId', example='lHiicjNFM2iSFYSdz2iPuI8ZwiEiE'),
      type?: string(name='Type', example='TEAM'),
      url?: string(name='Url', example='workspace_url'),
      workspaceId?: string(name='WorkspaceId', example='By8jQS1ZYjGn5b0M'),
    }
  ](name='workspace'),
}

model GetWorkspacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWorkspacesResponseBody(name='body'),
}

/**
 * @summary 批量获取知识库
 *
 * @param tmpReq GetWorkspacesRequest
 * @param tmpHeader GetWorkspacesHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWorkspacesResponse
 */
async function getWorkspacesWithOptions(tmpReq: GetWorkspacesRequest, tmpHeader: GetWorkspacesHeaders, runtime: Util.RuntimeOptions): GetWorkspacesResponse {
  Util.validateModel(tmpReq);
  var request = new GetWorkspacesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetWorkspacesShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.option)) {
    request.optionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.option, 'Option', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.workspaceIds)) {
    request.workspaceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.workspaceIds, 'WorkspaceIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.optionShrink)) {
    body['Option'] = request.optionShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workspaceIdsShrink)) {
    body['WorkspaceIds'] = request.workspaceIdsShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetWorkspaces',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/getWorkspaces`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量获取知识库
 *
 * @param request GetWorkspacesRequest
 * @return GetWorkspacesResponse
 */
async function getWorkspaces(request: GetWorkspacesRequest): GetWorkspacesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetWorkspacesHeaders{};
  return getWorkspacesWithOptions(request, headers, runtime);
}

model GrantHonorHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='null'),
  }(name='AccountContext'),
}

model GrantHonorShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GrantHonorRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='null'),
  }(name='TenantContext'),
  expirationTime?: long(name='expirationTime', example='null'),
  grantReason?: string(name='grantReason', description='This parameter is required.'),
  granterName?: string(name='granterName', description='This parameter is required.'),
  honorId?: string(name='honorId', description='This parameter is required.', example='21659398'),
  noticeAnnouncer?: boolean(name='noticeAnnouncer', example='false'),
  noticeSingle?: boolean(name='noticeSingle', example='false'),
  openConversationIds?: [ string ](name='openConversationIds'),
  orgId?: long(name='orgId', description='This parameter is required.', example='345391052'),
  receiverUserIds?: [ string ](name='receiverUserIds', description='This parameter is required.'),
  senderUserId?: string(name='senderUserId', description='This parameter is required.', example='363784'),
}

model GrantHonorShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  expirationTime?: long(name='expirationTime', example='null'),
  grantReason?: string(name='grantReason', description='This parameter is required.'),
  granterName?: string(name='granterName', description='This parameter is required.'),
  honorId?: string(name='honorId', description='This parameter is required.', example='21659398'),
  noticeAnnouncer?: boolean(name='noticeAnnouncer', example='false'),
  noticeSingle?: boolean(name='noticeSingle', example='false'),
  openConversationIdsShrink?: string(name='openConversationIds'),
  orgId?: long(name='orgId', description='This parameter is required.', example='345391052'),
  receiverUserIdsShrink?: string(name='receiverUserIds', description='This parameter is required.'),
  senderUserId?: string(name='senderUserId', description='This parameter is required.', example='363784'),
}

model GrantHonorResponseBody = {
  failedUserIds?: [ string ](name='failedUserIds'),
  requestId?: string(name='requestId', description='requestId', example='45b4d029-ab94-4672-aa0f-bd79590374cb'),
  successUserIds?: [ string ](name='successUserIds'),
}

model GrantHonorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GrantHonorResponseBody(name='body'),
}

/**
 * @summary 授予勋章
 *
 * @param tmpReq GrantHonorRequest
 * @param tmpHeader GrantHonorHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GrantHonorResponse
 */
async function grantHonorWithOptions(tmpReq: GrantHonorRequest, tmpHeader: GrantHonorHeaders, runtime: Util.RuntimeOptions): GrantHonorResponse {
  Util.validateModel(tmpReq);
  var request = new GrantHonorShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GrantHonorShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.openConversationIds)) {
    request.openConversationIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.openConversationIds, 'openConversationIds', 'json');
  }
  if (!Util.isUnset(tmpReq.receiverUserIds)) {
    request.receiverUserIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.receiverUserIds, 'receiverUserIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.expirationTime)) {
    body['expirationTime'] = request.expirationTime;
  }
  if (!Util.isUnset(request.grantReason)) {
    body['grantReason'] = request.grantReason;
  }
  if (!Util.isUnset(request.granterName)) {
    body['granterName'] = request.granterName;
  }
  if (!Util.isUnset(request.honorId)) {
    body['honorId'] = request.honorId;
  }
  if (!Util.isUnset(request.noticeAnnouncer)) {
    body['noticeAnnouncer'] = request.noticeAnnouncer;
  }
  if (!Util.isUnset(request.noticeSingle)) {
    body['noticeSingle'] = request.noticeSingle;
  }
  if (!Util.isUnset(request.openConversationIdsShrink)) {
    body['openConversationIds'] = request.openConversationIdsShrink;
  }
  if (!Util.isUnset(request.orgId)) {
    body['orgId'] = request.orgId;
  }
  if (!Util.isUnset(request.receiverUserIdsShrink)) {
    body['receiverUserIds'] = request.receiverUserIdsShrink;
  }
  if (!Util.isUnset(request.senderUserId)) {
    body['senderUserId'] = request.senderUserId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GrantHonor',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/aliding/v1/honor/grantHonor`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 授予勋章
 *
 * @param request GrantHonorRequest
 * @return GrantHonorResponse
 */
async function grantHonor(request: GrantHonorRequest): GrantHonorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GrantHonorHeaders{};
  return grantHonorWithOptions(request, headers, runtime);
}

model InitMultipartFileUploadHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model InitMultipartFileUploadShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model InitMultipartFileUploadRequest {
  option?: {
    preCheckParam?: {
      md5?: string(name='Md5', example='md5'),
      name?: string(name='Name', example='name'),
      parentId?: string(name='ParentId', example='0'),
      size?: long(name='Size', example='100'),
    }(name='PreCheckParam'),
    preferRegion?: string(name='PreferRegion', example='ZHANGJIAKOU'),
    storageDriver?: string(name='StorageDriver', example='DINGTALK'),
  }(name='Option'),
  parentDentryUuid?: string(name='ParentDentryUuid', example='dentryUuid'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model InitMultipartFileUploadShrinkRequest {
  optionShrink?: string(name='Option'),
  parentDentryUuid?: string(name='ParentDentryUuid', example='dentryUuid'),
  tenantContextShrink?: string(name='TenantContext'),
}

model InitMultipartFileUploadResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  storageDriver?: string(name='storageDriver', example='DINGTALK'),
  uploadKey?: string(name='uploadKey', example='xhy89xxxxx'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model InitMultipartFileUploadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitMultipartFileUploadResponseBody(name='body'),
}

/**
 * @summary 初始化文件分片上传
 *
 * @param tmpReq InitMultipartFileUploadRequest
 * @param tmpHeader InitMultipartFileUploadHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return InitMultipartFileUploadResponse
 */
async function initMultipartFileUploadWithOptions(tmpReq: InitMultipartFileUploadRequest, tmpHeader: InitMultipartFileUploadHeaders, runtime: Util.RuntimeOptions): InitMultipartFileUploadResponse {
  Util.validateModel(tmpReq);
  var request = new InitMultipartFileUploadShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new InitMultipartFileUploadShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.option)) {
    request.optionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.option, 'Option', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.optionShrink)) {
    body['Option'] = request.optionShrink;
  }
  if (!Util.isUnset(request.parentDentryUuid)) {
    body['ParentDentryUuid'] = request.parentDentryUuid;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InitMultipartFileUpload',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/initMultipartFileUpload`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 初始化文件分片上传
 *
 * @param request InitMultipartFileUploadRequest
 * @return InitMultipartFileUploadResponse
 */
async function initMultipartFileUpload(request: InitMultipartFileUploadRequest): InitMultipartFileUploadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InitMultipartFileUploadHeaders{};
  return initMultipartFileUploadWithOptions(request, headers, runtime);
}

model InsertColumnsBeforeHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model InsertColumnsBeforeShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model InsertColumnsBeforeRequest {
  column?: long(name='Column', description='This parameter is required.', example='1'),
  columnCount?: long(name='ColumnCount', description='This parameter is required.', example='3'),
  sheetId?: string(name='SheetId', description='This parameter is required.', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model InsertColumnsBeforeShrinkRequest {
  column?: long(name='Column', description='This parameter is required.', example='1'),
  columnCount?: long(name='ColumnCount', description='This parameter is required.', example='3'),
  sheetId?: string(name='SheetId', description='This parameter is required.', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model InsertColumnsBeforeResponseBody = {
  id?: string(name='id', example='stxxxx'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model InsertColumnsBeforeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InsertColumnsBeforeResponseBody(name='body'),
}

/**
 * @summary 在指定列左侧插入若干列
 *
 * @param tmpReq InsertColumnsBeforeRequest
 * @param tmpHeader InsertColumnsBeforeHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return InsertColumnsBeforeResponse
 */
async function insertColumnsBeforeWithOptions(tmpReq: InsertColumnsBeforeRequest, tmpHeader: InsertColumnsBeforeHeaders, runtime: Util.RuntimeOptions): InsertColumnsBeforeResponse {
  Util.validateModel(tmpReq);
  var request = new InsertColumnsBeforeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new InsertColumnsBeforeShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.column)) {
    body['Column'] = request.column;
  }
  if (!Util.isUnset(request.columnCount)) {
    body['ColumnCount'] = request.columnCount;
  }
  if (!Util.isUnset(request.sheetId)) {
    body['SheetId'] = request.sheetId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InsertColumnsBefore',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/insertColumnsBefore`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 在指定列左侧插入若干列
 *
 * @param request InsertColumnsBeforeRequest
 * @return InsertColumnsBeforeResponse
 */
async function insertColumnsBefore(request: InsertColumnsBeforeRequest): InsertColumnsBeforeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InsertColumnsBeforeHeaders{};
  return insertColumnsBeforeWithOptions(request, headers, runtime);
}

model InsertContentWithOptionsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model InsertContentWithOptionsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model InsertContentWithOptionsRequest {
  content?: map[string]any(name='Content', description='This parameter is required.', example='content'),
  documentId?: string(name='DocumentId', description='This parameter is required.', example='documentId'),
  index?: int32(name='Index', example='1'),
  operatorId?: string(name='OperatorId', description='This parameter is required.', example='union_id'),
  path?: [ int32 ](name='Path', example='[0,0]'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model InsertContentWithOptionsShrinkRequest {
  contentShrink?: string(name='Content', description='This parameter is required.', example='content'),
  documentId?: string(name='DocumentId', description='This parameter is required.', example='documentId'),
  index?: int32(name='Index', example='1'),
  operatorId?: string(name='OperatorId', description='This parameter is required.', example='union_id'),
  pathShrink?: string(name='Path', example='[0,0]'),
  tenantContextShrink?: string(name='TenantContext'),
}

model InsertContentWithOptionsResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model InsertContentWithOptionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InsertContentWithOptionsResponseBody(name='body'),
}

/**
 * @summary 文档中插入内容
 *
 * @param tmpReq InsertContentWithOptionsRequest
 * @param tmpHeader InsertContentWithOptionsHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return InsertContentWithOptionsResponse
 */
async function insertContentWithOptionsWithOptions(tmpReq: InsertContentWithOptionsRequest, tmpHeader: InsertContentWithOptionsHeaders, runtime: Util.RuntimeOptions): InsertContentWithOptionsResponse {
  Util.validateModel(tmpReq);
  var request = new InsertContentWithOptionsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new InsertContentWithOptionsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.content)) {
    request.contentShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.content, 'Content', 'json');
  }
  if (!Util.isUnset(tmpReq.path)) {
    request.pathShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.path, 'Path', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.contentShrink)) {
    body['Content'] = request.contentShrink;
  }
  if (!Util.isUnset(request.documentId)) {
    body['DocumentId'] = request.documentId;
  }
  if (!Util.isUnset(request.index)) {
    body['Index'] = request.index;
  }
  if (!Util.isUnset(request.operatorId)) {
    body['OperatorId'] = request.operatorId;
  }
  if (!Util.isUnset(request.pathShrink)) {
    body['Path'] = request.pathShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InsertContentWithOptions',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/insertContentWithOptions`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 文档中插入内容
 *
 * @param request InsertContentWithOptionsRequest
 * @return InsertContentWithOptionsResponse
 */
async function insertContentWithOptions(request: InsertContentWithOptionsRequest): InsertContentWithOptionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InsertContentWithOptionsHeaders{};
  return insertContentWithOptionsWithOptions(request, headers, runtime);
}

model InsertMultiDimTableRecordHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model InsertMultiDimTableRecordShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model InsertMultiDimTableRecordRequest {
  baseId?: string(name='BaseId', description='This parameter is required.', example='r1R7q3QmWew5lo02fxB7nxxxxxxxx'),
  records?: [ 
    {
      fields?: map[string]any(name='Fields', description='This parameter is required.'),
    }
  ](name='Records', description='This parameter is required.'),
  sheetIdOrName?: string(name='SheetIdOrName', description='This parameter is required.'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model InsertMultiDimTableRecordShrinkRequest {
  baseId?: string(name='BaseId', description='This parameter is required.', example='r1R7q3QmWew5lo02fxB7nxxxxxxxx'),
  recordsShrink?: string(name='Records', description='This parameter is required.'),
  sheetIdOrName?: string(name='SheetIdOrName', description='This parameter is required.'),
  tenantContextShrink?: string(name='TenantContext'),
}

model InsertMultiDimTableRecordResponseBody = {
  value?: [ 
    {
      id?: string(name='Id', example='hfauVBFJIo'),
    }
  ](name='Value'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model InsertMultiDimTableRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InsertMultiDimTableRecordResponseBody(name='body'),
}

/**
 * @summary 新增记录
 *
 * @param tmpReq InsertMultiDimTableRecordRequest
 * @param tmpHeader InsertMultiDimTableRecordHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return InsertMultiDimTableRecordResponse
 */
async function insertMultiDimTableRecordWithOptions(tmpReq: InsertMultiDimTableRecordRequest, tmpHeader: InsertMultiDimTableRecordHeaders, runtime: Util.RuntimeOptions): InsertMultiDimTableRecordResponse {
  Util.validateModel(tmpReq);
  var request = new InsertMultiDimTableRecordShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new InsertMultiDimTableRecordShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.records)) {
    request.recordsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.records, 'Records', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.baseId)) {
    body['BaseId'] = request.baseId;
  }
  if (!Util.isUnset(request.recordsShrink)) {
    body['Records'] = request.recordsShrink;
  }
  if (!Util.isUnset(request.sheetIdOrName)) {
    body['SheetIdOrName'] = request.sheetIdOrName;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InsertMultiDimTableRecord',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/table/insertMultiDimTableRecord`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新增记录
 *
 * @param request InsertMultiDimTableRecordRequest
 * @return InsertMultiDimTableRecordResponse
 */
async function insertMultiDimTableRecord(request: InsertMultiDimTableRecordRequest): InsertMultiDimTableRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InsertMultiDimTableRecordHeaders{};
  return insertMultiDimTableRecordWithOptions(request, headers, runtime);
}

model InsertRowsBeforeHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model InsertRowsBeforeShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model InsertRowsBeforeRequest {
  row?: long(name='Row', description='This parameter is required.', example='2'),
  rowCount?: long(name='RowCount', description='This parameter is required.', example='10'),
  sheetId?: string(name='SheetId', description='This parameter is required.', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model InsertRowsBeforeShrinkRequest {
  row?: long(name='Row', description='This parameter is required.', example='2'),
  rowCount?: long(name='RowCount', description='This parameter is required.', example='10'),
  sheetId?: string(name='SheetId', description='This parameter is required.', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model InsertRowsBeforeResponseBody = {
  id?: string(name='id', example='stxxxx'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model InsertRowsBeforeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InsertRowsBeforeResponseBody(name='body'),
}

/**
 * @summary 在指定行上方插入若干行
 *
 * @param tmpReq InsertRowsBeforeRequest
 * @param tmpHeader InsertRowsBeforeHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return InsertRowsBeforeResponse
 */
async function insertRowsBeforeWithOptions(tmpReq: InsertRowsBeforeRequest, tmpHeader: InsertRowsBeforeHeaders, runtime: Util.RuntimeOptions): InsertRowsBeforeResponse {
  Util.validateModel(tmpReq);
  var request = new InsertRowsBeforeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new InsertRowsBeforeShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.row)) {
    body['Row'] = request.row;
  }
  if (!Util.isUnset(request.rowCount)) {
    body['RowCount'] = request.rowCount;
  }
  if (!Util.isUnset(request.sheetId)) {
    body['SheetId'] = request.sheetId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InsertRowsBefore',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/insertRowsBefore`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 在指定行上方插入若干行
 *
 * @param request InsertRowsBeforeRequest
 * @return InsertRowsBeforeResponse
 */
async function insertRowsBefore(request: InsertRowsBeforeRequest): InsertRowsBeforeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InsertRowsBeforeHeaders{};
  return insertRowsBeforeWithOptions(request, headers, runtime);
}

model InviteUsersHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model InviteUsersShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model InviteUsersRequest {
  inviteeList?: [ 
    {
      nick?: string(name='Nick', description='This parameter is required.', example='测试用户'),
      userId?: string(name='UserId', example='012345'),
    }
  ](name='InviteeList'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='61289fxxx'),
  phoneInviteeList?: [ 
    {
      inviteClient?: boolean(name='InviteClient'),
      nick?: string(name='Nick'),
      phoneNumber?: string(name='PhoneNumber'),
      statusCode?: string(name='StatusCode'),
    }
  ](name='phoneInviteeList'),
}

model InviteUsersShrinkRequest {
  inviteeListShrink?: string(name='InviteeList'),
  tenantContextShrink?: string(name='TenantContext'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='61289fxxx'),
  phoneInviteeListShrink?: string(name='phoneInviteeList'),
}

model InviteUsersResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
  vendorRequestId?: string(name='vendorRequestId'),
  vendorType?: string(name='vendorType'),
}

model InviteUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InviteUsersResponseBody(name='body'),
}

/**
 * @summary 邀请用户入会
 *
 * @param tmpReq InviteUsersRequest
 * @param tmpHeader InviteUsersHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return InviteUsersResponse
 */
async function inviteUsersWithOptions(tmpReq: InviteUsersRequest, tmpHeader: InviteUsersHeaders, runtime: Util.RuntimeOptions): InviteUsersResponse {
  Util.validateModel(tmpReq);
  var request = new InviteUsersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new InviteUsersShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.inviteeList)) {
    request.inviteeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.inviteeList, 'InviteeList', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.phoneInviteeList)) {
    request.phoneInviteeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.phoneInviteeList, 'phoneInviteeList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.inviteeListShrink)) {
    body['InviteeList'] = request.inviteeListShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.conferenceId)) {
    body['conferenceId'] = request.conferenceId;
  }
  if (!Util.isUnset(request.phoneInviteeListShrink)) {
    body['phoneInviteeList'] = request.phoneInviteeListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InviteUsers',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/inviteUsers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 邀请用户入会
 *
 * @param request InviteUsersRequest
 * @return InviteUsersResponse
 */
async function inviteUsers(request: InviteUsersRequest): InviteUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InviteUsersHeaders{};
  return inviteUsersWithOptions(request, headers, runtime);
}

model InvokeAssistantHeaders {
  commonHeaders?: map[string]string,
  accountId?: string(name='accountId', example='123456'),
}

model InvokeAssistantRequest {
  assistantId?: string(name='assistantId', description='This parameter is required.', example='assistantId1'),
  messages?: [ 
    {
      content?: {
        cardCallback?: {
          content?: string(name='content', description='This parameter is required.', example='{}'),
          relatedMessageId?: string(name='relatedMessageId', description='This parameter is required.', example='aliding_messageId123'),
        }(name='cardCallback'),
        dingCard?: {
          content?: string(name='content', example='{}'),
          contentType?: string(name='contentType', description='This parameter is required.', example='basic_card_schema'),
          finished?: boolean(name='finished', example='true'),
          templateId?: string(name='templateId', example='templateId123'),
        }(name='dingCard'),
        dingNormalCard?: {
          cardData?: {
            cardParamMap?: map[string]any(name='cardParamMap', example='{}'),
          }(name='cardData', example='{}'),
          cardTemplateId?: string(name='cardTemplateId', example='templateId1'),
          cardUpdateOptions?: {
            updateCardDataByKey?: boolean(name='updateCardDataByKey', example='{}'),
            updatePrivateDataByKey?: boolean(name='updatePrivateDataByKey', example='{}'),
          }(name='cardUpdateOptions', example='{}'),
          dynamicDataSourceConfigs?: [ 
            {
              constParams?: map[string]any(name='constParams', example='{}'),
              dynamicDataSourceId?: string(name='dynamicDataSourceId', example='dynamicDataSourceId1'),
              pullConfig?: {
                interval?: int32(name='interval', example='3'),
                pullStrategy?: string(name='pullStrategy', example='NONE'),
                timeUnit?: string(name='timeUnit', example='SECONDS'),
              }(name='pullConfig', example='{}'),
            }
          ](name='dynamicDataSourceConfigs', example='{}'),
          privateData?: map[string]object(name='privateData', example='{}'),
        }(name='dingNormalCard', example='{}'),
        markdown?: {
          value?: string(name='value', example='1. markdown内容
2. markdown内容'),
        }(name='markdown'),
        structView?: {
          parts?: [ 
            {
              append?: boolean(name='append'),
              dataPart?: {
                data?: any(name='data'),
              }(name='dataPart', example='{}'),
              finish?: boolean(name='finish'),
              partDesc?: string(name='partDesc', example='这是正文内容部分'),
              partId?: string(name='partId', example='artifactId123'),
              reasonPart?: {
                reason?: string(name='reason', example='123123'),
              }(name='reasonPart', example='{}'),
              recommendPart?: {
                recommends?: [ 
                  {
                    mobileUrl?: string(name='mobileUrl'),
                    text?: string(name='text'),
                    url?: string(name='url'),
                  }
                ](name='recommends'),
              }(name='recommendPart', example='{}'),
              referencePart?: {
                references?: [ 
                  {
                    index?: string(name='index', example='0'),
                    name?: string(name='name', example='mcp是....'),
                    sourceCode?: string(name='sourceCode', example='ata'),
                    sourceIcon?: string(name='sourceIcon'),
                    summary?: string(name='summary', example='摘要'),
                    title?: string(name='title', example='《mcp原理介绍》'),
                    url?: string(name='url', example='https://taobao.com'),
                  }
                ](name='references'),
              }(name='referencePart', example='{}'),
              textPart?: {
                text?: string(name='text', example='123123'),
              }(name='textPart', example='{}'),
              type?: string(name='type', description='This parameter is required.', example='textPart'),
            }
          ](name='parts'),
        }(name='structView'),
        text?: {
          value?: string(name='value', example='你好！'),
        }(name='text'),
        type?: string(name='type', description='This parameter is required.', example='枚举字段，可为：text,markdown,cardCallback,dingCard,agentArtifact,dingNormalCard'),
      }(name='content'),
      contentDesc?: string(name='contentDesc', example='这是一张小猫钓鱼图'),
      createAt?: long(name='createAt', example='1642448000000'),
      role?: string(name='role', example='user'),
    }
  ](name='messages', description='This parameter is required.'),
  originalAssistantId?: string(name='originalAssistantId', example='assistantId2'),
  sessionId?: string(name='sessionId', example='sessionId1'),
  sourceIdOfOriginalAssistantId?: string(name='sourceIdOfOriginalAssistantId', example='agentKey1'),
  sourceTypeOfOriginalAssistantId?: string(name='sourceTypeOfOriginalAssistantId', example='1'),
  stream?: boolean(name='stream', example='false'),
}

model InvokeAssistantResponseBody = {
  messages?: [ 
    {
      content?: {
        cardCallback?: {
          content?: string(name='content', example='{}'),
          relatedMessageId?: string(name='relatedMessageId', example='aliding_messageId123'),
        }(name='cardCallback'),
        dingCard?: {
          content?: string(name='content', example='{}'),
          contentType?: string(name='contentType', description='This parameter is required.', example='basic_card_schema'),
          finished?: boolean(name='finished', example='true'),
          templateId?: string(name='templateId', example='templateId123'),
        }(name='dingCard'),
        dingNormalCard?: {
          cardData?: {
            cardParamMap?: map[string]any(name='cardParamMap', example='{}'),
          }(name='cardData', example='{}'),
          cardTemplateId?: string(name='cardTemplateId', example='templateId1'),
          cardUpdateOptions?: {
            updateCardDataByKey?: boolean(name='updateCardDataByKey', example='{}'),
            updatePrivateDataByKey?: boolean(name='updatePrivateDataByKey', example='{}'),
          }(name='cardUpdateOptions', example='{}'),
          dynamicDataSourceConfigs?: [ 
            {
              constParams?: map[string]any(name='constParams', example='{}'),
              dynamicDataSourceId?: string(name='dynamicDataSourceId', example='dynamicDataSourceId1'),
              pullConfig?: {
                interval?: int32(name='interval', example='3'),
                pullStrategy?: string(name='pullStrategy', example='NONE'),
                timeUnit?: string(name='timeUnit', example='SECONDS'),
              }(name='pullConfig', example='{}'),
            }
          ](name='dynamicDataSourceConfigs', example='{}'),
          privateData?: map[string]object(name='privateData', example='{}'),
        }(name='dingNormalCard', example='{}'),
        markdown?: {
          value?: string(name='value', example='1. markdown内容
2. markdown内容'),
        }(name='markdown'),
        structView?: {
          parts?: [ 
            {
              append?: boolean(name='append'),
              dataPart?: {
                data?: any(name='data'),
              }(name='dataPart', example='{}'),
              finish?: boolean(name='finish'),
              partDesc?: string(name='partDesc', example='这是正文内容部分'),
              partId?: string(name='partId', example='artifactId123'),
              reasonPart?: {
                reason?: string(name='reason', example='123123'),
              }(name='reasonPart', example='{}'),
              recommendPart?: {
                recommends?: [ 
                  {
                    mobileUrl?: string(name='mobileUrl'),
                    text?: string(name='text'),
                    url?: string(name='url'),
                  }
                ](name='recommends'),
              }(name='recommendPart', example='{}'),
              referencePart?: {
                references?: [ 
                  {
                    index?: string(name='index', example='0'),
                    name?: string(name='name', example='mcp是....'),
                    sourceCode?: string(name='sourceCode', example='ata'),
                    sourceIcon?: string(name='sourceIcon'),
                    summary?: string(name='summary', example='摘要'),
                    title?: string(name='title', example='《mcp原理介绍》'),
                    url?: string(name='url', example='https://taobao.com'),
                  }
                ](name='references'),
              }(name='referencePart', example='{}'),
              textPart?: {
                text?: string(name='text', example='123123'),
              }(name='textPart', example='{}'),
              type?: string(name='type', description='This parameter is required.', example='textPart'),
            }
          ](name='parts'),
        }(name='structView'),
        text?: {
          value?: string(name='value', example='你好！'),
        }(name='text'),
        type?: string(name='type', description='This parameter is required.', example='枚举字段，可为：text,markdown,cardCallback,dingCard,agentArtifact,dingNormalCard'),
      }(name='content'),
      contentDesc?: string(name='contentDesc', example='这是一张小猫钓鱼图'),
      createAt?: long(name='createAt', example='1642448000000'),
      role?: string(name='role', example='user'),
    }
  ](name='messages'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  sessionId?: string(name='sessionId', example='sessionId1'),
  streamEnd?: boolean(name='streamEnd', example='true'),
}

model InvokeAssistantResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InvokeAssistantResponseBody(name='body'),
}

/**
 * @summary 调用助理
 *
 * @param request InvokeAssistantRequest
 * @param headers InvokeAssistantHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return InvokeAssistantResponse
 */
async function invokeAssistantWithOptions(request: InvokeAssistantRequest, headers: InvokeAssistantHeaders, runtime: Util.RuntimeOptions): InvokeAssistantResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.assistantId)) {
    body['assistantId'] = request.assistantId;
  }
  if (!Util.isUnset(request.messages)) {
    body['messages'] = request.messages;
  }
  if (!Util.isUnset(request.originalAssistantId)) {
    body['originalAssistantId'] = request.originalAssistantId;
  }
  if (!Util.isUnset(request.sessionId)) {
    body['sessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.sourceIdOfOriginalAssistantId)) {
    body['sourceIdOfOriginalAssistantId'] = request.sourceIdOfOriginalAssistantId;
  }
  if (!Util.isUnset(request.sourceTypeOfOriginalAssistantId)) {
    body['sourceTypeOfOriginalAssistantId'] = request.sourceTypeOfOriginalAssistantId;
  }
  if (!Util.isUnset(request.stream)) {
    body['stream'] = request.stream;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountId)) {
    realHeaders['accountId'] = Util.toJSONString(headers.accountId);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InvokeAssistant',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/ai/v1/assistant/invokeAssistant`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 调用助理
 *
 * @param request InvokeAssistantRequest
 * @return InvokeAssistantResponse
 */
async function invokeAssistant(request: InvokeAssistantRequest): InvokeAssistantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InvokeAssistantHeaders{};
  return invokeAssistantWithOptions(request, headers, runtime);
}

model InvokeSkillHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model InvokeSkillShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model InvokeSkillRequest {
  params?: map[string]any(name='Params', example='{}'),
  skillId?: string(name='SkillId', example='a1d033dd-xxxx-49cf-b49b-2068081bb551'),
}

model InvokeSkillShrinkRequest {
  paramsShrink?: string(name='Params', example='{}'),
  skillId?: string(name='SkillId', example='a1d033dd-xxxx-49cf-b49b-2068081bb551'),
}

model InvokeSkillResponseBody = {
  requestId?: string(name='RequestId', description='RequestId', example='2715B4D3-A3FB-5FC7-AFA0-4471687B1EC6'),
  data?: map[string]any(name='data', example='{}'),
}

model InvokeSkillResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InvokeSkillResponseBody(name='body'),
}

/**
 * @summary 调用AI技能
 *
 * @param tmpReq InvokeSkillRequest
 * @param tmpHeader InvokeSkillHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return InvokeSkillResponse
 */
async function invokeSkillWithOptions(tmpReq: InvokeSkillRequest, tmpHeader: InvokeSkillHeaders, runtime: Util.RuntimeOptions): InvokeSkillResponse {
  Util.validateModel(tmpReq);
  var request = new InvokeSkillShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new InvokeSkillShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.params)) {
    request.paramsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.params, 'Params', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.paramsShrink)) {
    body['Params'] = request.paramsShrink;
  }
  if (!Util.isUnset(request.skillId)) {
    body['SkillId'] = request.skillId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InvokeSkill',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/ai/v1/skill/invoke`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 调用AI技能
 *
 * @param request InvokeSkillRequest
 * @return InvokeSkillResponse
 */
async function invokeSkill(request: InvokeSkillRequest): InvokeSkillResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InvokeSkillHeaders{};
  return invokeSkillWithOptions(request, headers, runtime);
}

model ListApplicationHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model ListApplicationShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ListApplicationRequest {
  appFilter?: string(name='AppFilter', example='createdByMe'),
  appNameSearchKeyword?: string(name='AppNameSearchKeyword', example='keyword'),
  corpId?: string(name='CorpId', description='This parameter is required.', example='corpid'),
  pageNumber?: int32(name='PageNumber', example='keyword'),
  pageSize?: int32(name='PageSize', example='keyword'),
  token?: string(name='Token', description='This parameter is required.', example='keyword'),
}

model ListApplicationResponseBody = {
  data?: [ 
    {
      appConfig?: string(name='AppConfig', example='{\\\\"ODIN_TOPIC_ID\\\\":\\\\"256\\\\"}'),
      appType?: string(name='AppType', example='APP_XCxxx'),
      applicationStatus?: string(name='ApplicationStatus', example='ONLINE'),
      corpId?: string(name='CorpId', example='ding5xxx'),
      creatorUserId?: string(name='CreatorUserId', example='123456'),
      description?: string(name='Description', example='小明创建的宜搭应用'),
      icon?: string(name='Icon', example='appdiqiu%%#0089FF'),
      inexistence?: string(name='Inexistence', example='y'),
      name?: string(name='Name', example='app'),
      subCorpId?: string(name='SubCorpId', example='ding5xxx'),
    }
  ](name='data', example='[{}]'),
  pageNumber?: long(name='pageNumber', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: long(name='totalCount', example='10'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model ListApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApplicationResponseBody(name='body'),
}

/**
 * @summary 查询宜搭应用列表
 *
 * @param request ListApplicationRequest
 * @param tmpHeader ListApplicationHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListApplicationResponse
 */
async function listApplicationWithOptions(request: ListApplicationRequest, tmpHeader: ListApplicationHeaders, runtime: Util.RuntimeOptions): ListApplicationResponse {
  Util.validateModel(request);
  var headers = new ListApplicationShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appFilter)) {
    body['AppFilter'] = request.appFilter;
  }
  if (!Util.isUnset(request.appNameSearchKeyword)) {
    body['AppNameSearchKeyword'] = request.appNameSearchKeyword;
  }
  if (!Util.isUnset(request.corpId)) {
    body['CorpId'] = request.corpId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.token)) {
    body['Token'] = request.token;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListApplication',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/listApplication`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询宜搭应用列表
 *
 * @param request ListApplicationRequest
 * @return ListApplicationResponse
 */
async function listApplication(request: ListApplicationRequest): ListApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListApplicationHeaders{};
  return listApplicationWithOptions(request, headers, runtime);
}

model ListCalendarsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model ListCalendarsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ListCalendarsRequest {
  request?: map[string]any(name='Request', example='{}'),
}

model ListCalendarsShrinkRequest {
  requestShrink?: string(name='Request', example='{}'),
}

model ListCalendarsResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  response?: {
    calendars?: [ 
      {
        description?: string(name='Description', example='描述'),
        ETag?: string(name='ETag', example='0'),
        id?: string(name='Id', example='cnNTbWxxx'),
        privilege?: string(name='Privilege', example='VIEW_DETAIL'),
        summary?: string(name='Summary', example='标题'),
        timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
        type?: string(name='Type', example='primary'),
      }
    ](name='Calendars'),
  }(name='response'),
}

model ListCalendarsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCalendarsResponseBody(name='body'),
}

/**
 * @summary 查询日历
 *
 * @param tmpReq ListCalendarsRequest
 * @param tmpHeader ListCalendarsHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCalendarsResponse
 */
async function listCalendarsWithOptions(tmpReq: ListCalendarsRequest, tmpHeader: ListCalendarsHeaders, runtime: Util.RuntimeOptions): ListCalendarsResponse {
  Util.validateModel(tmpReq);
  var request = new ListCalendarsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new ListCalendarsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.request)) {
    request.requestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.request, 'Request', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.requestShrink)) {
    body['Request'] = request.requestShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListCalendars',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/listCalendars`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询日历
 *
 * @param request ListCalendarsRequest
 * @return ListCalendarsResponse
 */
async function listCalendars(request: ListCalendarsRequest): ListCalendarsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListCalendarsHeaders{};
  return listCalendarsWithOptions(request, headers, runtime);
}

model ListDentriesHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model ListDentriesShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ListDentriesRequest {
  maxResults?: int32(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='next_token'),
  order?: string(name='Order', example='ASC'),
  orderBy?: string(name='OrderBy', example='MODIFIED_TIME'),
  parentId?: string(name='ParentId', description='This parameter is required.', example='0'),
  spaceId?: string(name='SpaceId', description='This parameter is required.', example='854xxxxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  withThumbnail?: boolean(name='WithThumbnail', example='true'),
}

model ListDentriesShrinkRequest {
  maxResults?: int32(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='next_token'),
  order?: string(name='Order', example='ASC'),
  orderBy?: string(name='OrderBy', example='MODIFIED_TIME'),
  parentId?: string(name='ParentId', description='This parameter is required.', example='0'),
  spaceId?: string(name='SpaceId', description='This parameter is required.', example='854xxxxx'),
  tenantContextShrink?: string(name='TenantContext'),
  withThumbnail?: boolean(name='WithThumbnail', example='true'),
}

model ListDentriesResponseBody = {
  dentries?: [ 
    {
      appProperties?: map[string][ DentriesAppPropertiesValue       ](name='AppProperties'),
      createTime?: string(name='CreateTime', example='2022-01-01T10:00:00Z'),
      creatorId?: string(name='CreatorId', example='cHtUxxxxx'),
      extension?: string(name='Extension', example='txt'),
      id?: string(name='Id', example='657xxxxx'),
      modifiedTime?: string(name='ModifiedTime', example='2022-01-01T10:00:00Z'),
      modifierId?: string(name='ModifierId', example='cHtUxxxxx'),
      name?: string(name='Name', example='测试文件夹'),
      parentId?: string(name='ParentId', example='0'),
      partitionType?: string(name='PartitionType', example='PUBLIC_OSS_PARTITION'),
      path?: string(name='Path', example='./test.txt'),
      properties?: {
        readOnly?: boolean(name='ReadOnly', example='true'),
      }(name='Properties'),
      size?: long(name='Size', example='512'),
      spaceId?: string(name='SpaceId', example='854xxxxx'),
      status?: string(name='Status', example='NORMAL'),
      storageDriver?: string(name='StorageDriver', example='DINGTALK'),
      thumbnail?: {
        height?: int32(name='Height', example='64'),
        url?: string(name='Url', example='url'),
        width?: int32(name='Width', example='64'),
      }(name='Thumbnail'),
      type?: string(name='Type', example='FILE'),
      uuid?: string(name='Uuid', example='123xxxxx'),
      version?: long(name='Version', example='1'),
    }
  ](name='dentries'),
  nextToken?: string(name='nextToken', example='next_token'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model ListDentriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDentriesResponseBody(name='body'),
}

/**
 * @summary 获取文件或文件夹列表
 *
 * @param tmpReq ListDentriesRequest
 * @param tmpHeader ListDentriesHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDentriesResponse
 */
async function listDentriesWithOptions(tmpReq: ListDentriesRequest, tmpHeader: ListDentriesHeaders, runtime: Util.RuntimeOptions): ListDentriesResponse {
  Util.validateModel(tmpReq);
  var request = new ListDentriesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new ListDentriesShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.order)) {
    body['Order'] = request.order;
  }
  if (!Util.isUnset(request.orderBy)) {
    body['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.parentId)) {
    body['ParentId'] = request.parentId;
  }
  if (!Util.isUnset(request.spaceId)) {
    body['SpaceId'] = request.spaceId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.withThumbnail)) {
    body['WithThumbnail'] = request.withThumbnail;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDentries',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/listDentries`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取文件或文件夹列表
 *
 * @param request ListDentriesRequest
 * @return ListDentriesResponse
 */
async function listDentries(request: ListDentriesRequest): ListDentriesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListDentriesHeaders{};
  return listDentriesWithOptions(request, headers, runtime);
}

model ListDriveSpacesHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext', description='This parameter is required.'),
}

model ListDriveSpacesShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext', description='This parameter is required.'),
}

model ListDriveSpacesRequest {
  maxResults?: int32(name='MaxResults', description='This parameter is required.', example='1'),
  nextToken?: string(name='NextToken', example='fekaf'),
  spaceType?: string(name='SpaceType', description='This parameter is required.', example='org'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model ListDriveSpacesShrinkRequest {
  maxResults?: int32(name='MaxResults', description='This parameter is required.', example='1'),
  nextToken?: string(name='NextToken', example='fekaf'),
  spaceType?: string(name='SpaceType', description='This parameter is required.', example='org'),
  tenantContextShrink?: string(name='TenantContext'),
}

model ListDriveSpacesResponseBody = {
  nextToken?: string(name='nextToken', example='fekaf'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  spaces?: [ 
    {
      createTime?: string(name='CreateTime', example='2016-02-28T10:47:08Z'),
      modifyTime?: string(name='ModifyTime', example='2016-02-28T10:47:08Z'),
      permissionMode?: string(name='PermissionMode', example='acl'),
      quota?: long(name='Quota', example='2147483648'),
      spaceId?: string(name='SpaceId', example='123456789'),
      spaceName?: string(name='SpaceName'),
      spaceType?: string(name='SpaceType', example='org'),
      usedQuota?: long(name='UsedQuota', example='640445953'),
    }
  ](name='spaces'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model ListDriveSpacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDriveSpacesResponseBody(name='body'),
}

/**
 * @summary 获取钉盘空间列表
 *
 * @param tmpReq ListDriveSpacesRequest
 * @param tmpHeader ListDriveSpacesHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDriveSpacesResponse
 */
async function listDriveSpacesWithOptions(tmpReq: ListDriveSpacesRequest, tmpHeader: ListDriveSpacesHeaders, runtime: Util.RuntimeOptions): ListDriveSpacesResponse {
  Util.validateModel(tmpReq);
  var request = new ListDriveSpacesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new ListDriveSpacesShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.spaceType)) {
    body['SpaceType'] = request.spaceType;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDriveSpaces',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/listDriveSpaces`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取钉盘空间列表
 *
 * @param request ListDriveSpacesRequest
 * @return ListDriveSpacesResponse
 */
async function listDriveSpaces(request: ListDriveSpacesRequest): ListDriveSpacesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListDriveSpacesHeaders{};
  return listDriveSpacesWithOptions(request, headers, runtime);
}

model ListEventsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='208579'),
  }(name='AccountContext'),
}

model ListEventsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ListEventsRequest {
  calendarId?: string(name='CalendarId', description='This parameter is required.', example='primary'),
  maxAttendees?: int32(name='MaxAttendees', example='100'),
  maxResults?: int32(name='MaxResults', example='100'),
  nextToken?: string(name='NextToken', example='cnNTbW1YbxxxxdlQrQT09'),
  seriesMasterId?: string(name='SeriesMasterId', example='cnNTbWxxxxaFJZdEgvdlQrQT09'),
  showDeleted?: boolean(name='ShowDeleted', example='true'),
  syncToken?: string(name='SyncToken', example='zxcasdfvc000009'),
  timeMax?: string(name='TimeMax', example='2023-06-21T00:00:00+08:00'),
  timeMin?: string(name='TimeMin', example='2023-06-20T00:00:00+08:00'),
}

model ListEventsResponseBody = {
  events?: [ 
    {
      attendees?: [ 
        {
          displayName?: string(name='DisplayName', example='tony'),
          isOptional?: boolean(name='IsOptional', example='true'),
          responseStatus?: string(name='ResponseStatus', example='accepted'),
          self?: boolean(name='Self', example='true'),
        }
      ](name='Attendees'),
      categories?: [ 
        {
          displayName?: string(name='DisplayName'),
        }
      ](name='Categories'),
      createTime?: string(name='CreateTime', example='2020-01-01T10:15:30+08:00'),
      description?: string(name='Description', example='something about this event'),
      end?: {
        date?: string(name='Date', example='2020-01-01'),
        dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
        timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
      }(name='End'),
      extendedProperties?: {
        sharedProperties?: {
          belongCorpId?: string(name='BelongCorpId', example='ding*********31'),
          sourceOpenCid?: string(name='SourceOpenCid', example='zxcv90asdf123==='),
        }(name='SharedProperties'),
      }(name='ExtendedProperties'),
      id?: string(name='Id', example='cnNTbW1YbxxxxdEgvdlQrQT09'),
      isAllDay?: boolean(name='IsAllDay', example='true'),
      location?: {
        displayName?: string(name='DisplayName', example='room 1-2-3'),
        meetingRooms?: [ string ](name='MeetingRooms'),
      }(name='Location'),
      meetingRooms?: [ 
        {
          displayName?: string(name='DisplayName'),
          responseStatus?: string(name='ResponseStatus', example='accepted'),
          roomId?: string(name='RoomId', example='c10315a8b4e740a317813ab6fxxxxxx'),
        }
      ](name='MeetingRooms'),
      onlineMeetingInfo?: {
        conferenceId?: string(name='ConferenceId', example='5c4df21dxxxx-a6db402b9f3a'),
        extraInfo?: map[string]any(name='ExtraInfo'),
        type?: string(name='Type', example='dingtalk'),
        url?: string(name='Url', example='dingtalk://dingtalkclient/page/videoCoxxxxndar?confId=5c4df21dxxxx2b9f3a&calendarId=92xxxx36'),
      }(name='OnlineMeetingInfo'),
      organizer?: {
        displayName?: string(name='DisplayName', example='tony'),
        responseStatus?: string(name='ResponseStatus', example='accepted'),
        self?: boolean(name='Self', example='true'),
      }(name='Organizer'),
      originStart?: {
        dateTime?: string(name='DateTime', example='2023-01-01T00:00:00Z'),
      }(name='OriginStart'),
      recurrence?: {
        pattern?: {
          dayOfMonth?: int32(name='DayOfMonth', example='1'),
          daysOfWeek?: string(name='DaysOfWeek', example='sunday'),
          index?: string(name='Index', example='first'),
          interval?: int32(name='Interval', example='1'),
          type?: string(name='Type', example='daily'),
        }(name='Pattern'),
        range?: {
          endDate?: string(name='EndDate', example='2020-01-01T10:15:30+08:00'),
          numberOfOccurrences?: int32(name='NumberOfOccurrences', example='5'),
          type?: string(name='Type', example='noEnd'),
        }(name='Range'),
      }(name='Recurrence'),
      reminders?: [ 
        {
          method?: string(name='Method', example='dingtalk'),
          minutes?: string(name='Minutes', example='15'),
        }
      ](name='Reminders'),
      richTextDescription?: {
        text?: string(name='Text'),
      }(name='RichTextDescription'),
      seriesMasterId?: string(name='SeriesMasterId', example='cnNTbWxxxxaFJZdEgvdlQrQT09'),
      start?: {
        date?: string(name='Date', example='2020-01-01'),
        dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
        timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
      }(name='Start'),
      status?: string(name='Status', example='confirmed'),
      summary?: string(name='Summary'),
      updateTime?: string(name='UpdateTime', example='2020-01-01T10:15:30+08:00'),
    }
  ](name='events'),
  nextToken?: string(name='nextToken', example='cnNTbW1YbxxxxdlQrQT09'),
  requestId?: string(name='requestId', description='requestId', example='4248DCC9-785F-5A14-8BE0-830FD52E1261'),
  syncToken?: string(name='syncToken', example='zxcasdfvc000009'),
  vendorRequestId?: string(name='vendorRequestId'),
  vendorType?: string(name='vendorType'),
}

model ListEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEventsResponseBody(name='body'),
}

/**
 * @summary 查询日程列表
 *
 * @param request ListEventsRequest
 * @param tmpHeader ListEventsHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEventsResponse
 */
async function listEventsWithOptions(request: ListEventsRequest, tmpHeader: ListEventsHeaders, runtime: Util.RuntimeOptions): ListEventsResponse {
  Util.validateModel(request);
  var headers = new ListEventsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.calendarId)) {
    body['CalendarId'] = request.calendarId;
  }
  if (!Util.isUnset(request.maxAttendees)) {
    body['MaxAttendees'] = request.maxAttendees;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.seriesMasterId)) {
    body['SeriesMasterId'] = request.seriesMasterId;
  }
  if (!Util.isUnset(request.showDeleted)) {
    body['ShowDeleted'] = request.showDeleted;
  }
  if (!Util.isUnset(request.syncToken)) {
    body['SyncToken'] = request.syncToken;
  }
  if (!Util.isUnset(request.timeMax)) {
    body['TimeMax'] = request.timeMax;
  }
  if (!Util.isUnset(request.timeMin)) {
    body['TimeMin'] = request.timeMin;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListEvents',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/listEvents`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询日程列表
 *
 * @param request ListEventsRequest
 * @return ListEventsResponse
 */
async function listEvents(request: ListEventsRequest): ListEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListEventsHeaders{};
  return listEventsWithOptions(request, headers, runtime);
}

model ListEventsViewHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model ListEventsViewShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ListEventsViewRequest {
  calendarId?: string(name='CalendarId', description='This parameter is required.', example='primary'),
  maxAttendees?: int32(name='MaxAttendees', example='100'),
  maxResults?: int32(name='MaxResults', example='100'),
  nextToken?: string(name='NextToken', example='cnNTbW1xxx'),
  timeMax?: string(name='TimeMax', example='2022-11-28T00:00:00+08:00'),
  timeMin?: string(name='TimeMin', example='2022-11-27T00:00:00+08:00'),
}

model ListEventsViewResponseBody = {
  events?: [ 
    {
      attendees?: [ 
        {
          displayName?: string(name='DisplayName', example='tony'),
          id?: string(name='Id', example='012345'),
          isOptional?: boolean(name='IsOptional', example='false'),
          responseStatus?: string(name='ResponseStatus', example='accepted'),
          self?: boolean(name='Self', example='false'),
        }
      ](name='Attendees'),
      categories?: [ 
        {
          displayName?: string(name='DisplayName', example='tony'),
        }
      ](name='Categories'),
      createTime?: string(name='CreateTime', example='2020-01-01T10:15:30+08:00'),
      description?: string(name='Description', example='something about this event'),
      end?: {
        date?: string(name='Date', example='2020-01-01'),
        dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
        timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
      }(name='End'),
      extendedProperties?: {
        sharedProperties?: {
          belongCorpId?: string(name='BelongCorpId', example='dingd8*****1231'),
          sourceOpenCid?: string(name='SourceOpenCid', example='zxcvasdfa123==='),
        }(name='SharedProperties'),
      }(name='ExtendedProperties'),
      id?: string(name='Id', example='iiiP35xxx'),
      isAllDay?: boolean(name='IsAllDay', example='false'),
      location?: {
        displayName?: string(name='DisplayName', example='tony'),
        meetingRooms?: [ string ](name='MeetingRooms'),
      }(name='Location'),
      meetingRooms?: [ 
        {
          displayName?: string(name='DisplayName', example='tony'),
          responseStatus?: string(name='ResponseStatus', example='accepted'),
          roomId?: string(name='RoomId', example='c10315a8b4e740a317813ab6fxxxxxx'),
        }
      ](name='MeetingRooms'),
      onlineMeetingInfo?: {
        conferenceId?: string(name='ConferenceId', example='5c4df2xxx'),
        extraInfo?: map[string]any(name='ExtraInfo'),
        type?: string(name='Type', example='dingtalk'),
        url?: string(name='Url', example='dingtalk://dingtalkclient/page/xxx?confId=xxx&calendarId=xxx'),
      }(name='OnlineMeetingInfo'),
      organizer?: {
        displayName?: string(name='DisplayName', example='tony'),
        id?: string(name='Id', example='012345'),
        responseStatus?: string(name='ResponseStatus', example='accepted'),
        self?: boolean(name='Self', example='false'),
      }(name='Organizer'),
      originStart?: {
        dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
      }(name='OriginStart'),
      recurrence?: {
        pattern?: {
          dayOfMonth?: int32(name='DayOfMonth', example='14'),
          daysOfWeek?: string(name='DaysOfWeek', example='sunday'),
          index?: string(name='Index', example='first'),
          interval?: int32(name='Interval', example='1'),
          type?: string(name='Type', example='dingtalk'),
        }(name='Pattern'),
        range?: {
          endDate?: string(name='EndDate', example='2020-01-01T10:15:30+08:00'),
          numberOfOccurrences?: int32(name='NumberOfOccurrences', example='5'),
          type?: string(name='Type', example='dingtalk'),
        }(name='Range'),
      }(name='Recurrence'),
      richTextDescription?: {
        text?: string(name='Text'),
      }(name='RichTextDescription'),
      seriesMasterId?: string(name='SeriesMasterId', example='cnNTbxxx'),
      start?: {
        date?: string(name='Date', example='2020-01-01'),
        dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
        timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
      }(name='Start'),
      status?: string(name='Status', example='confirmed'),
      summary?: string(name='Summary', example='test event'),
      updateTime?: string(name='UpdateTime', example='2020-01-01T10:15:30+08:00'),
    }
  ](name='events'),
  nextToken?: string(name='nextToken', example='cnNTbWxxx'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model ListEventsViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEventsViewResponseBody(name='body'),
}

/**
 * @summary 查询日程视图
 *
 * @param request ListEventsViewRequest
 * @param tmpHeader ListEventsViewHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEventsViewResponse
 */
async function listEventsViewWithOptions(request: ListEventsViewRequest, tmpHeader: ListEventsViewHeaders, runtime: Util.RuntimeOptions): ListEventsViewResponse {
  Util.validateModel(request);
  var headers = new ListEventsViewShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.calendarId)) {
    body['CalendarId'] = request.calendarId;
  }
  if (!Util.isUnset(request.maxAttendees)) {
    body['MaxAttendees'] = request.maxAttendees;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.timeMax)) {
    body['TimeMax'] = request.timeMax;
  }
  if (!Util.isUnset(request.timeMin)) {
    body['TimeMin'] = request.timeMin;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListEventsView',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/listEventsView`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询日程视图
 *
 * @param request ListEventsViewRequest
 * @return ListEventsViewResponse
 */
async function listEventsView(request: ListEventsViewRequest): ListEventsViewResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListEventsViewHeaders{};
  return listEventsViewWithOptions(request, headers, runtime);
}

model ListFormRemarksHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model ListFormRemarksShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ListFormRemarksRequest {
  appType?: string(name='AppType', description='This parameter is required.', example='APP_PBKT0xxx'),
  formInstanceIdList?: [ string ](name='FormInstanceIdList', description='This parameter is required.', example='FORM-xxxxx'),
  formUuid?: string(name='FormUuid', description='This parameter is required.', example='FORM-xxxxx'),
  systemToken?: string(name='SystemToken', description='This parameter is required.', example='hexxxx'),
}

model ListFormRemarksShrinkRequest {
  appType?: string(name='AppType', description='This parameter is required.', example='APP_PBKT0xxx'),
  formInstanceIdListShrink?: string(name='FormInstanceIdList', description='This parameter is required.', example='FORM-xxxxx'),
  formUuid?: string(name='FormUuid', description='This parameter is required.', example='FORM-xxxxx'),
  systemToken?: string(name='SystemToken', description='This parameter is required.', example='hexxxx'),
}

model ListFormRemarksResponseBody = {
  formRemarkVoMap?: map[string]any(name='formRemarkVoMap', example='{}'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model ListFormRemarksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFormRemarksResponseBody(name='body'),
}

/**
 * @summary 批量查询宜搭表单实例的评论
 *
 * @param tmpReq ListFormRemarksRequest
 * @param tmpHeader ListFormRemarksHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListFormRemarksResponse
 */
async function listFormRemarksWithOptions(tmpReq: ListFormRemarksRequest, tmpHeader: ListFormRemarksHeaders, runtime: Util.RuntimeOptions): ListFormRemarksResponse {
  Util.validateModel(tmpReq);
  var request = new ListFormRemarksShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new ListFormRemarksShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.formInstanceIdList)) {
    request.formInstanceIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.formInstanceIdList, 'FormInstanceIdList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.formInstanceIdListShrink)) {
    body['FormInstanceIdList'] = request.formInstanceIdListShrink;
  }
  if (!Util.isUnset(request.formUuid)) {
    body['FormUuid'] = request.formUuid;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListFormRemarks',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/listFormRemarks`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量查询宜搭表单实例的评论
 *
 * @param request ListFormRemarksRequest
 * @return ListFormRemarksResponse
 */
async function listFormRemarks(request: ListFormRemarksRequest): ListFormRemarksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListFormRemarksHeaders{};
  return listFormRemarksWithOptions(request, headers, runtime);
}

model ListMessageHeaders {
  commonHeaders?: map[string]string,
  accountId?: string(name='accountId', example='123456'),
}

model ListMessageRequest {
  assistantId?: string(name='assistantId', description='This parameter is required.', example='assistantId1'),
  limit?: int32(name='limit', example='20'),
  order?: string(name='order', example='desc'),
  originalAssistantId?: string(name='originalAssistantId', example='assistantId2'),
  runId?: string(name='runId', example='runId123'),
  sourceIdOfOriginalAssistantId?: string(name='sourceIdOfOriginalAssistantId', example='agentKey1'),
  sourceTypeOfOriginalAssistantId?: string(name='sourceTypeOfOriginalAssistantId', example='1'),
  threadId?: string(name='threadId', description='This parameter is required.', example='threadId123'),
}

model ListMessageResponseBody = {
  messages?: [ 
    {
      content?: {
        cardCallback?: {
          content?: string(name='content', example='{}'),
          relatedMessageId?: string(name='relatedMessageId', example='aliding_messageId123'),
        }(name='cardCallback'),
        dingCard?: {
          content?: string(name='content', example='{}'),
          contentType?: string(name='contentType', description='This parameter is required.', example='basic_card_schema'),
          finished?: boolean(name='finished', example='true'),
          templateId?: string(name='templateId', example='templateId123'),
        }(name='dingCard'),
        dingNormalCard?: {
          cardData?: {
            cardParamMap?: map[string]any(name='cardParamMap', example='{}'),
          }(name='cardData', example='{}'),
          cardTemplateId?: string(name='cardTemplateId', example='templateId1'),
          cardUpdateOptions?: {
            updateCardDataByKey?: boolean(name='updateCardDataByKey', example='{}'),
            updatePrivateDataByKey?: boolean(name='updatePrivateDataByKey', example='{}'),
          }(name='cardUpdateOptions', example='{}'),
          dynamicDataSourceConfigs?: [ 
            {
              constParams?: map[string]any(name='constParams', example='{}'),
              dynamicDataSourceId?: string(name='dynamicDataSourceId', example='dynamicDataSourceId1'),
              pullConfig?: {
                interval?: int32(name='interval', example='3'),
                pullStrategy?: string(name='pullStrategy', example='NONE'),
                timeUnit?: string(name='timeUnit', example='SECONDS'),
              }(name='pullConfig', example='{}'),
            }
          ](name='dynamicDataSourceConfigs', example='{}'),
          privateData?: map[string]object(name='privateData', example='{}'),
        }(name='dingNormalCard', example='{}'),
        markdown?: {
          value?: string(name='value', example='1. markdown内容
2. markdown内容'),
        }(name='markdown'),
        structView?: {
          parts?: [ 
            {
              append?: boolean(name='append'),
              dataPart?: {
                data?: any(name='data'),
              }(name='dataPart', example='{}'),
              finish?: boolean(name='finish'),
              partDesc?: string(name='partDesc', example='这是正文内容部分'),
              partId?: string(name='partId', example='artifactId123'),
              reasonPart?: {
                reason?: string(name='reason', example='123123'),
              }(name='reasonPart', example='{}'),
              recommendPart?: {
                recommends?: [ 
                  {
                    mobileUrl?: string(name='mobileUrl'),
                    text?: string(name='text'),
                    url?: string(name='url'),
                  }
                ](name='recommends'),
              }(name='recommendPart', example='{}'),
              referencePart?: {
                references?: [ 
                  {
                    index?: string(name='index', example='0'),
                    name?: string(name='name', example='mcp是....'),
                    sourceCode?: string(name='sourceCode', example='ata'),
                    sourceIcon?: string(name='sourceIcon'),
                    summary?: string(name='summary', example='摘要'),
                    title?: string(name='title', example='《mcp原理介绍》'),
                    url?: string(name='url', example='https://taobao.com'),
                  }
                ](name='references'),
              }(name='referencePart', example='{}'),
              textPart?: {
                text?: string(name='text', example='123123'),
              }(name='textPart', example='{}'),
              type?: string(name='type', description='This parameter is required.', example='textPart'),
            }
          ](name='parts'),
        }(name='structView'),
        text?: {
          value?: string(name='value', example='你好！'),
        }(name='text'),
        type?: string(name='type', description='This parameter is required.', example='枚举字段，可为：text,markdown,cardCallback,dingCard,agentArtifact,dingNormalCard'),
      }(name='content'),
      contentDesc?: string(name='contentDesc', example='这是一张小猫钓鱼图'),
      createAt?: long(name='createAt', example='1642448000000'),
      id?: string(name='id', example='messageId1'),
      role?: string(name='role', example='user'),
      runId?: string(name='runId', example='runId1'),
      threadId?: string(name='threadId', example='threadId1'),
    }
  ](name='messages'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model ListMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMessageResponseBody(name='body'),
}

/**
 * @summary 查询消息
 *
 * @param request ListMessageRequest
 * @param headers ListMessageHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListMessageResponse
 */
async function listMessageWithOptions(request: ListMessageRequest, headers: ListMessageHeaders, runtime: Util.RuntimeOptions): ListMessageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.assistantId)) {
    body['assistantId'] = request.assistantId;
  }
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.order)) {
    body['order'] = request.order;
  }
  if (!Util.isUnset(request.originalAssistantId)) {
    body['originalAssistantId'] = request.originalAssistantId;
  }
  if (!Util.isUnset(request.runId)) {
    body['runId'] = request.runId;
  }
  if (!Util.isUnset(request.sourceIdOfOriginalAssistantId)) {
    body['sourceIdOfOriginalAssistantId'] = request.sourceIdOfOriginalAssistantId;
  }
  if (!Util.isUnset(request.sourceTypeOfOriginalAssistantId)) {
    body['sourceTypeOfOriginalAssistantId'] = request.sourceTypeOfOriginalAssistantId;
  }
  if (!Util.isUnset(request.threadId)) {
    body['threadId'] = request.threadId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountId)) {
    realHeaders['accountId'] = Util.toJSONString(headers.accountId);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListMessage',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/ai/v1/assistant/listMessage`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询消息
 *
 * @param request ListMessageRequest
 * @return ListMessageResponse
 */
async function listMessage(request: ListMessageRequest): ListMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListMessageHeaders{};
  return listMessageWithOptions(request, headers, runtime);
}

model ListMultiDimTableRecordsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model ListMultiDimTableRecordsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ListMultiDimTableRecordsRequest {
  baseId?: string(name='BaseId', description='This parameter is required.', example='101114'),
  filter?: {
    combination?: string(name='Combination', example='and'),
    conditions?: [ 
      {
        field?: string(name='Field', example='Sandbox'),
        operator?: string(name='Operator', example='equal'),
        value?: [ any ](name='Value'),
      }
    ](name='Conditions'),
  }(name='Filter'),
  maxResults?: int32(name='MaxResults', example='100'),
  nextToken?: string(name='NextToken', example='AAAAAUUg5QSTWwHyeElt8z5z4Qo='),
  sheetIdOrName?: string(name='SheetIdOrName', description='This parameter is required.', example='xxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model ListMultiDimTableRecordsShrinkRequest {
  baseId?: string(name='BaseId', description='This parameter is required.', example='101114'),
  filterShrink?: string(name='Filter'),
  maxResults?: int32(name='MaxResults', example='100'),
  nextToken?: string(name='NextToken', example='AAAAAUUg5QSTWwHyeElt8z5z4Qo='),
  sheetIdOrName?: string(name='SheetIdOrName', description='This parameter is required.', example='xxx'),
  tenantContextShrink?: string(name='TenantContext'),
}

model ListMultiDimTableRecordsResponseBody = {
  hasMore?: boolean(name='hasMore', example='true'),
  nextToken?: string(name='nextToken', example='1234567890'),
  records?: [ 
    {
      createdBy?: {
        userId?: string(name='UserId', example='012345'),
      }(name='CreatedBy'),
      createdTime?: long(name='CreatedTime', example='xxx'),
      fields?: map[string]any(name='Fields', example='title,shortTitle'),
      id?: string(name='Id', example='123'),
      lastModifiedBy?: {
        userId?: string(name='UserId', example='012345'),
      }(name='LastModifiedBy'),
      lastModifiedTime?: long(name='LastModifiedTime', example='xxx'),
    }
  ](name='records', example='[]'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model ListMultiDimTableRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMultiDimTableRecordsResponseBody(name='body'),
}

/**
 * @summary 列出多行记录
 *
 * @param tmpReq ListMultiDimTableRecordsRequest
 * @param tmpHeader ListMultiDimTableRecordsHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListMultiDimTableRecordsResponse
 */
async function listMultiDimTableRecordsWithOptions(tmpReq: ListMultiDimTableRecordsRequest, tmpHeader: ListMultiDimTableRecordsHeaders, runtime: Util.RuntimeOptions): ListMultiDimTableRecordsResponse {
  Util.validateModel(tmpReq);
  var request = new ListMultiDimTableRecordsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new ListMultiDimTableRecordsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.filter)) {
    request.filterShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filter, 'Filter', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.baseId)) {
    body['BaseId'] = request.baseId;
  }
  if (!Util.isUnset(request.filterShrink)) {
    body['Filter'] = request.filterShrink;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.sheetIdOrName)) {
    body['SheetIdOrName'] = request.sheetIdOrName;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListMultiDimTableRecords',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/table/listMultiDimTableRecords`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列出多行记录
 *
 * @param request ListMultiDimTableRecordsRequest
 * @return ListMultiDimTableRecordsResponse
 */
async function listMultiDimTableRecords(request: ListMultiDimTableRecordsRequest): ListMultiDimTableRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListMultiDimTableRecordsHeaders{};
  return listMultiDimTableRecordsWithOptions(request, headers, runtime);
}

model ListNavigationByFormTypeHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model ListNavigationByFormTypeShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ListNavigationByFormTypeRequest {
  appType?: string(name='AppType', description='This parameter is required.', example='APP_PBKTxxx'),
  formType?: string(name='FormType', description='This parameter is required.', example='receipt'),
  language?: string(name='Language', example='zh_CN'),
  systemToken?: string(name='SystemToken', description='This parameter is required.', example='hexxxx'),
}

model ListNavigationByFormTypeResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ 
    {
      formUuid?: string(name='FormUuid', example='FORM-EF6Yxxx'),
      processCode?: string(name='ProcessCode', example='TPROC--X1Gxxx'),
      title?: {
        nameInChinese?: string(name='NameInChinese', example='张三'),
        nameInEnglish?: string(name='NameInEnglish', example='ZhangSan'),
        type?: string(name='Type', example='未知'),
      }(name='Title'),
    }
  ](name='result'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model ListNavigationByFormTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNavigationByFormTypeResponseBody(name='body'),
}

/**
 * @summary 获取应用下的页面列表
 *
 * @param request ListNavigationByFormTypeRequest
 * @param tmpHeader ListNavigationByFormTypeHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNavigationByFormTypeResponse
 */
async function listNavigationByFormTypeWithOptions(request: ListNavigationByFormTypeRequest, tmpHeader: ListNavigationByFormTypeHeaders, runtime: Util.RuntimeOptions): ListNavigationByFormTypeResponse {
  Util.validateModel(request);
  var headers = new ListNavigationByFormTypeShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.formType)) {
    body['FormType'] = request.formType;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNavigationByFormType',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/listNavigationByFormType`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取应用下的页面列表
 *
 * @param request ListNavigationByFormTypeRequest
 * @return ListNavigationByFormTypeResponse
 */
async function listNavigationByFormType(request: ListNavigationByFormTypeRequest): ListNavigationByFormTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListNavigationByFormTypeHeaders{};
  return listNavigationByFormTypeWithOptions(request, headers, runtime);
}

model ListNodesHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model ListNodesShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ListNodesRequest {
  maxResults?: int32(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='next_token'),
  parentNodeId?: string(name='ParentNodeId', description='This parameter is required.', example='MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  withPermissionRole?: boolean(name='WithPermissionRole', example='false'),
}

model ListNodesShrinkRequest {
  maxResults?: int32(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='next_token'),
  parentNodeId?: string(name='ParentNodeId', description='This parameter is required.', example='MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3'),
  tenantContextShrink?: string(name='TenantContext'),
  withPermissionRole?: boolean(name='WithPermissionRole', example='false'),
}

model ListNodesResponseBody = {
  nextToken?: string(name='nextToken', example='next_token'),
  nodes?: [ 
    {
      category?: string(name='Category', example='ALIDOC'),
      createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
      creatorId?: string(name='CreatorId', example='01472825524039877041'),
      extension?: string(name='Extension', example='adoc'),
      hasChildren?: boolean(name='HasChildren', example='true'),
      modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
      modifierId?: string(name='ModifierId', example='01472825524039877041'),
      name?: string(name='Name', example='node_name'),
      nodeId?: string(name='NodeId', example='MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3'),
      permissionRole?: string(name='PermissionRole', example='READER'),
      size?: long(name='Size', example='512'),
      statisticalInfo?: {
        wordCount?: long(name='WordCount', example='123'),
      }(name='StatisticalInfo'),
      type?: string(name='Type', example='FILE'),
      url?: string(name='Url', example='node_url'),
      workspaceId?: string(name='WorkspaceId', example='MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3'),
    }
  ](name='nodes'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model ListNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodesResponseBody(name='body'),
}

/**
 * @summary 获取节点列表
 *
 * @param tmpReq ListNodesRequest
 * @param tmpHeader ListNodesHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNodesResponse
 */
async function listNodesWithOptions(tmpReq: ListNodesRequest, tmpHeader: ListNodesHeaders, runtime: Util.RuntimeOptions): ListNodesResponse {
  Util.validateModel(tmpReq);
  var request = new ListNodesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new ListNodesShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.parentNodeId)) {
    body['ParentNodeId'] = request.parentNodeId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.withPermissionRole)) {
    body['WithPermissionRole'] = request.withPermissionRole;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNodes',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/listNodes`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取节点列表
 *
 * @param request ListNodesRequest
 * @return ListNodesResponse
 */
async function listNodes(request: ListNodesRequest): ListNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListNodesHeaders{};
  return listNodesWithOptions(request, headers, runtime);
}

model ListPermissionsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model ListPermissionsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ListPermissionsRequest {
  dentryUuid?: string(name='DentryUuid', description='This parameter is required.', example='KGZLxjv9VGkoG9YwHE5wx7k2V6EDybno'),
  option?: {
    filterRoleIds?: [ string ](name='FilterRoleIds'),
    maxResults?: int32(name='MaxResults', example='20'),
    nextToken?: string(name='NextToken', example='2'),
  }(name='Option'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model ListPermissionsShrinkRequest {
  dentryUuid?: string(name='DentryUuid', description='This parameter is required.', example='KGZLxjv9VGkoG9YwHE5wx7k2V6EDybno'),
  optionShrink?: string(name='Option'),
  tenantContextShrink?: string(name='TenantContext'),
}

model ListPermissionsResponseBody = {
  duration?: long(name='duration', example='59886'),
  nextToken?: string(name='nextToken', example='1'),
  permissions?: [ 
    {
      dentryUuid?: string(name='DentryUuid', example='123456'),
      member?: {
        corpId?: string(name='CorpId', example='123456'),
        id?: string(name='Id', example='123456'),
        type?: string(name='Type', example='ORG'),
      }(name='Member'),
      role?: {
        id?: string(name='Id', example='OWNER'),
        name?: string(name='Name', example='拥有者'),
      }(name='Role'),
    }
  ](name='permissions'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model ListPermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPermissionsResponseBody(name='body'),
}

/**
 * @summary 获取文件权限列表
 *
 * @param tmpReq ListPermissionsRequest
 * @param tmpHeader ListPermissionsHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPermissionsResponse
 */
async function listPermissionsWithOptions(tmpReq: ListPermissionsRequest, tmpHeader: ListPermissionsHeaders, runtime: Util.RuntimeOptions): ListPermissionsResponse {
  Util.validateModel(tmpReq);
  var request = new ListPermissionsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new ListPermissionsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.option)) {
    request.optionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.option, 'Option', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.dentryUuid)) {
    body['DentryUuid'] = request.dentryUuid;
  }
  if (!Util.isUnset(request.optionShrink)) {
    body['Option'] = request.optionShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListPermissions',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/listPermissions`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取文件权限列表
 *
 * @param request ListPermissionsRequest
 * @return ListPermissionsResponse
 */
async function listPermissions(request: ListPermissionsRequest): ListPermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListPermissionsHeaders{};
  return listPermissionsWithOptions(request, headers, runtime);
}

model ListReportHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model ListReportShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ListReportRequest {
  cursor?: long(name='Cursor', description='This parameter is required.', example='0'),
  endTime?: long(name='EndTime', description='This parameter is required.', example='1507564800000'),
  modifiedEndTime?: long(name='ModifiedEndTime', example='1507564800000'),
  modifiedStartTime?: long(name='ModifiedStartTime', example='1507564800000'),
  size?: long(name='Size', description='This parameter is required.', example='10'),
  startTime?: long(name='StartTime', description='This parameter is required.', example='1507564800000'),
  templateName?: string(name='TemplateName', example='我管理的模版'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model ListReportShrinkRequest {
  cursor?: long(name='Cursor', description='This parameter is required.', example='0'),
  endTime?: long(name='EndTime', description='This parameter is required.', example='1507564800000'),
  modifiedEndTime?: long(name='ModifiedEndTime', example='1507564800000'),
  modifiedStartTime?: long(name='ModifiedStartTime', example='1507564800000'),
  size?: long(name='Size', description='This parameter is required.', example='10'),
  startTime?: long(name='StartTime', description='This parameter is required.', example='1507564800000'),
  templateName?: string(name='TemplateName', example='我管理的模版'),
  tenantContextShrink?: string(name='TenantContext'),
}

model ListReportResponseBody = {
  dataList?: [ 
    {
      contents?: [ 
        {
          key?: string(name='Key', example='env'),
          sort?: string(name='Sort', example='0'),
          type?: string(name='Type', example='1'),
          value?: string(name='Value', example='ce9ab5d4a80a9401f97c7077e6a9634bd'),
        }
      ](name='Contents'),
      createTime?: long(name='CreateTime', example='1678416166000'),
      creatorId?: string(name='CreatorId', example='1127123'),
      creatorName?: string(name='CreatorName', example='admin'),
      deptName?: string(name='DeptName'),
      images?: [ string ](name='Images'),
      latitude?: string(name='Latitude', example='31.1264'),
      longitude?: string(name='Longitude', example='108.938036'),
      modifiedTime?: long(name='ModifiedTime', example='1653543540000'),
      remark?: string(name='Remark'),
      reportId?: string(name='ReportId', example='d64994d09916c76276dd9bfa23637644'),
      templateName?: string(name='TemplateName'),
    }
  ](name='dataList'),
  hasMore?: boolean(name='hasMore', example='true'),
  nextCursor?: long(name='nextCursor', example='12312131231'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  size?: long(name='size', example='20'),
}

model ListReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListReportResponseBody(name='body'),
}

/**
 * @summary 获取用户发出的日志列表
 *
 * @param tmpReq ListReportRequest
 * @param tmpHeader ListReportHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListReportResponse
 */
async function listReportWithOptions(tmpReq: ListReportRequest, tmpHeader: ListReportHeaders, runtime: Util.RuntimeOptions): ListReportResponse {
  Util.validateModel(tmpReq);
  var request = new ListReportShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new ListReportShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.cursor)) {
    body['Cursor'] = request.cursor;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.modifiedEndTime)) {
    body['ModifiedEndTime'] = request.modifiedEndTime;
  }
  if (!Util.isUnset(request.modifiedStartTime)) {
    body['ModifiedStartTime'] = request.modifiedStartTime;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.templateName)) {
    body['TemplateName'] = request.templateName;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListReport',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/log/listReport`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取用户发出的日志列表
 *
 * @param request ListReportRequest
 * @return ListReportResponse
 */
async function listReport(request: ListReportRequest): ListReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListReportHeaders{};
  return listReportWithOptions(request, headers, runtime);
}

model ListTableDataByFormInstanceIdTableIdHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model ListTableDataByFormInstanceIdTableIdShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ListTableDataByFormInstanceIdTableIdRequest {
  appType?: string(name='AppType', description='This parameter is required.', example='APP_PBKT0xxx'),
  formInstanceId?: string(name='FormInstanceId', description='This parameter is required.', example='FORM_PBKT0xxx'),
  formUuid?: string(name='FormUuid', description='This parameter is required.', example='FORM-xxxxx'),
  pageNumber?: int32(name='PageNumber', example='20'),
  pageSize?: int32(name='PageSize', example='20'),
  systemToken?: string(name='SystemToken', description='This parameter is required.', example='hexxxx'),
  tableFieldId?: string(name='TableFieldId', description='This parameter is required.', example='1111'),
}

model ListTableDataByFormInstanceIdTableIdResponseBody = {
  data?: [ string ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: long(name='totalCount', example='20'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model ListTableDataByFormInstanceIdTableIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTableDataByFormInstanceIdTableIdResponseBody(name='body'),
}

/**
 * @summary 获取子表组件数据
 *
 * @param request ListTableDataByFormInstanceIdTableIdRequest
 * @param tmpHeader ListTableDataByFormInstanceIdTableIdHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTableDataByFormInstanceIdTableIdResponse
 */
async function listTableDataByFormInstanceIdTableIdWithOptions(request: ListTableDataByFormInstanceIdTableIdRequest, tmpHeader: ListTableDataByFormInstanceIdTableIdHeaders, runtime: Util.RuntimeOptions): ListTableDataByFormInstanceIdTableIdResponse {
  Util.validateModel(request);
  var headers = new ListTableDataByFormInstanceIdTableIdShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.formInstanceId)) {
    body['FormInstanceId'] = request.formInstanceId;
  }
  if (!Util.isUnset(request.formUuid)) {
    body['FormUuid'] = request.formUuid;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }
  if (!Util.isUnset(request.tableFieldId)) {
    body['TableFieldId'] = request.tableFieldId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListTableDataByFormInstanceIdTableId',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/listTableDataByFormInstanceIdTableId`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取子表组件数据
 *
 * @param request ListTableDataByFormInstanceIdTableIdRequest
 * @return ListTableDataByFormInstanceIdTableIdResponse
 */
async function listTableDataByFormInstanceIdTableId(request: ListTableDataByFormInstanceIdTableIdRequest): ListTableDataByFormInstanceIdTableIdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListTableDataByFormInstanceIdTableIdHeaders{};
  return listTableDataByFormInstanceIdTableIdWithOptions(request, headers, runtime);
}

model ListTeamsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model ListTeamsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ListTeamsRequest {
  maxResults?: int32(name='MaxResults', example='30'),
  nextToken?: string(name='NextToken', example='2023-05-15T11:29Z'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model ListTeamsShrinkRequest {
  maxResults?: int32(name='MaxResults', example='30'),
  nextToken?: string(name='NextToken', example='2023-05-15T11:29Z'),
  tenantContextShrink?: string(name='TenantContext'),
}

model ListTeamsResponseBody = {
  nextToken?: string(name='nextToken', example='2023-05-15T11:29Z'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  teams?: [ 
    {
      corpId?: string(name='CorpId', example='ding16b241fd05********288'),
      cover?: string(name='Cover', example='https://example/file-manage-files/zh-CN/202***13/ldet/XXXX.jpg'),
      createTime?: string(name='CreateTime', example='01472825524039877041'),
      creatorId?: string(name='CreatorId', example='012345'),
      description?: string(name='Description', example='team_description'),
      icon?: {
        type?: string(name='Type', example='URL'),
        value?: string(name='Value', example='https://example/file-manage-files/zh-CN/202***13/ldet/avatar3.jpg'),
      }(name='Icon'),
      modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
      modifierId?: string(name='ModifierId', example='012345'),
      name?: string(name='Name', example='team_name'),
      teamId?: string(name='TeamId', example='lHiicjNFM2iSFYSdz2iPuI8ZwiEiE'),
    }
  ](name='teams'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model ListTeamsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTeamsResponseBody(name='body'),
}

/**
 * @summary 获取知识小组列表
 *
 * @param tmpReq ListTeamsRequest
 * @param tmpHeader ListTeamsHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTeamsResponse
 */
async function listTeamsWithOptions(tmpReq: ListTeamsRequest, tmpHeader: ListTeamsHeaders, runtime: Util.RuntimeOptions): ListTeamsResponse {
  Util.validateModel(tmpReq);
  var request = new ListTeamsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new ListTeamsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListTeams',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/listTeams`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取知识小组列表
 *
 * @param request ListTeamsRequest
 * @return ListTeamsResponse
 */
async function listTeams(request: ListTeamsRequest): ListTeamsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListTeamsHeaders{};
  return listTeamsWithOptions(request, headers, runtime);
}

model ListTemplateHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model ListTemplateShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ListTemplateRequest {
  maxResults?: int32(name='MaxResults', description='This parameter is required.', example='20'),
  nextToken?: string(name='NextToken', example='zzz'),
  templateType?: string(name='TemplateType', description='This parameter is required.', example='public_template'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='workspaceId'),
}

model ListTemplateShrinkRequest {
  maxResults?: int32(name='MaxResults', description='This parameter is required.', example='20'),
  nextToken?: string(name='NextToken', example='zzz'),
  templateType?: string(name='TemplateType', description='This parameter is required.', example='public_template'),
  tenantContextShrink?: string(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='workspaceId'),
}

model ListTemplateResponseBody = {
  hasMore?: boolean(name='hasMore', example='true'),
  nextToken?: string(name='nextToken', example='next_token'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  templateList?: [ 
    {
      coverUrl?: string(name='CoverUrl', example='URL'),
      createTime?: long(name='CreateTime', example='1596506100000'),
      docType?: string(name='DocType', example='WORKBOOK'),
      id?: string(name='Id', example='123'),
      templateType?: string(name='TemplateType', example='user_template'),
      title?: string(name='Title', example='title'),
      updateTime?: long(name='UpdateTime', example='1596506100000'),
      workspaceId?: string(name='WorkspaceId', example='workspaceId'),
    }
  ](name='templateList', example='[]'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model ListTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTemplateResponseBody(name='body'),
}

/**
 * @summary 查询文档模板
 *
 * @param tmpReq ListTemplateRequest
 * @param tmpHeader ListTemplateHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTemplateResponse
 */
async function listTemplateWithOptions(tmpReq: ListTemplateRequest, tmpHeader: ListTemplateHeaders, runtime: Util.RuntimeOptions): ListTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new ListTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new ListTemplateShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.templateType)) {
    body['TemplateType'] = request.templateType;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListTemplate',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/listTemplate`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询文档模板
 *
 * @param request ListTemplateRequest
 * @return ListTemplateResponse
 */
async function listTemplate(request: ListTemplateRequest): ListTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListTemplateHeaders{};
  return listTemplateWithOptions(request, headers, runtime);
}

model ListTicketOperateRecordHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model ListTicketOperateRecordShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ListTicketOperateRecordRequest {
  openTeamId?: string(name='OpenTeamId', description='This parameter is required.', example='eKWh3xxxxiE'),
  openTicketId?: string(name='OpenTicketId', description='This parameter is required.', example='Dq9hP8Sk2v6vQxxxxiE'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model ListTicketOperateRecordShrinkRequest {
  openTeamId?: string(name='OpenTeamId', description='This parameter is required.', example='eKWh3xxxxiE'),
  openTicketId?: string(name='OpenTicketId', description='This parameter is required.', example='Dq9hP8Sk2v6vQxxxxiE'),
  tenantContextShrink?: string(name='TenantContext'),
}

model ListTicketOperateRecordResponseBody = {
  records?: [ 
    {
      openTicketId?: string(name='OpenTicketId', example='a8iSxxxxgtgiE'),
      operateData?: string(name='OperateData', example='{"originTakers":[{"nickName":"贤文","unionId":"Dq9hxxxxwiEiE"},{"nickName":"王鸿程","unionId":"4kITooxxxx5wiEiE"}]}'),
      operateTime?: string(name='OperateTime', example='2021-07-09 19:26:09'),
      operation?: string(name='Operation', example='FINISH'),
      operationDisplayName?: string(name='OperationDisplayName', example='结单'),
      operator?: {
        nickName?: string(name='NickName', example='贤文'),
        unionId?: string(name='UnionId', example='012345'),
      }(name='Operator'),
      ticketMemo?: {
        attachments?: [ 
          {
            fileName?: string(name='FileName', example='wahaha.txt'),
            key?: string(name='Key', example='ticket/image/447xxxx9/43003/e2xxxec4243e940a1367_1625xxxx99.txt'),
          }
        ](name='Attachments'),
        memo?: string(name='Memo', example='贤文结束工单'),
      }(name='TicketMemo'),
    }
  ](name='records'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model ListTicketOperateRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTicketOperateRecordResponseBody(name='body'),
}

/**
 * @summary 查询工单操作记录
 *
 * @param tmpReq ListTicketOperateRecordRequest
 * @param tmpHeader ListTicketOperateRecordHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTicketOperateRecordResponse
 */
async function listTicketOperateRecordWithOptions(tmpReq: ListTicketOperateRecordRequest, tmpHeader: ListTicketOperateRecordHeaders, runtime: Util.RuntimeOptions): ListTicketOperateRecordResponse {
  Util.validateModel(tmpReq);
  var request = new ListTicketOperateRecordShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new ListTicketOperateRecordShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.openTeamId)) {
    body['OpenTeamId'] = request.openTeamId;
  }
  if (!Util.isUnset(request.openTicketId)) {
    body['OpenTicketId'] = request.openTicketId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListTicketOperateRecord',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ticket/listTicketOperateRecord`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询工单操作记录
 *
 * @param request ListTicketOperateRecordRequest
 * @return ListTicketOperateRecordResponse
 */
async function listTicketOperateRecord(request: ListTicketOperateRecordRequest): ListTicketOperateRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListTicketOperateRecordHeaders{};
  return listTicketOperateRecordWithOptions(request, headers, runtime);
}

model ListWorkspacesHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model ListWorkspacesShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ListWorkspacesRequest {
  maxResults?: int32(name='MaxResults', example='30'),
  nextToken?: string(name='NextToken', example='123123'),
  orderBy?: string(name='OrderBy', example='VIEW_TIME_DESC'),
  teamId?: string(name='TeamId', example='qweqwe'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  withPermissionRole?: boolean(name='WithPermissionRole', example='true'),
}

model ListWorkspacesShrinkRequest {
  maxResults?: int32(name='MaxResults', example='30'),
  nextToken?: string(name='NextToken', example='123123'),
  orderBy?: string(name='OrderBy', example='VIEW_TIME_DESC'),
  teamId?: string(name='TeamId', example='qweqwe'),
  tenantContextShrink?: string(name='TenantContext'),
  withPermissionRole?: boolean(name='WithPermissionRole', example='true'),
}

model ListWorkspacesResponseBody = {
  nextToken?: string(name='nextToken', example='next_token'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  workspaces?: [ 
    {
      corpId?: string(name='CorpId', example='ding16b241fd05********288'),
      cover?: string(name='Cover', example='https://example/file-manage-files/zh-CN/202***13/ldet/XXXX.jpg'),
      createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
      creatorId?: string(name='CreatorId', example='workspace_creator_id'),
      description?: string(name='Description', example='workspace_description'),
      icon?: {
        type?: string(name='Type', example='URL'),
        value?: string(name='Value', example='icon_url'),
      }(name='Icon'),
      modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
      modifierId?: string(name='ModifierId', example='workspace_modifier_id'),
      name?: string(name='Name', example='workspace_name'),
      permissionRole?: string(name='PermissionRole', example='READER'),
      rootNodeId?: string(name='RootNodeId', example='ZgpG2NdyVXXjrKKzIBqMp5zkVMwvDqPk'),
      teamId?: string(name='TeamId', example='iPes3KGYA9DxYSdz2iPuI8ZwiEiE'),
      type?: string(name='Type', example='TEAM'),
      url?: string(name='Url', example='workspace_url'),
      workspaceId?: string(name='WorkspaceId', example='By8jQS1ZYjGn5b0M'),
    }
  ](name='workspaces'),
}

model ListWorkspacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkspacesResponseBody(name='body'),
}

/**
 * @summary 获取知识库列表
 *
 * @param tmpReq ListWorkspacesRequest
 * @param tmpHeader ListWorkspacesHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWorkspacesResponse
 */
async function listWorkspacesWithOptions(tmpReq: ListWorkspacesRequest, tmpHeader: ListWorkspacesHeaders, runtime: Util.RuntimeOptions): ListWorkspacesResponse {
  Util.validateModel(tmpReq);
  var request = new ListWorkspacesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new ListWorkspacesShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.orderBy)) {
    body['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.teamId)) {
    body['TeamId'] = request.teamId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.withPermissionRole)) {
    body['WithPermissionRole'] = request.withPermissionRole;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListWorkspaces',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/listWorkspaces`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取知识库列表
 *
 * @param request ListWorkspacesRequest
 * @return ListWorkspacesResponse
 */
async function listWorkspaces(request: ListWorkspacesRequest): ListWorkspacesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListWorkspacesHeaders{};
  return listWorkspacesWithOptions(request, headers, runtime);
}

model PatchEventHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='123456'),
  }(name='AccountContext'),
}

model PatchEventShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model PatchEventRequest {
  attendees?: [ 
    {
      id?: string(name='id', example='123456'),
      isOptional?: boolean(name='isOptional', example='false'),
    }
  ](name='Attendees'),
  calendarId?: string(name='CalendarId', description='This parameter is required.', example='primary'),
  cardInstances?: [ 
    {
      outTrackId?: string(name='OutTrackId'),
      scenario?: string(name='Scenario'),
    }
  ](name='CardInstances'),
  description?: string(name='Description'),
  end?: {
    date?: string(name='date', example='2020-01-01'),
    dateTime?: string(name='dateTime', example='2020-01-01T10:15:30+08:00'),
    timeZone?: string(name='timeZone', example='Asia/Shanghai'),
  }(name='End'),
  eventId?: string(name='EventId', description='This parameter is required.', example='iiiP35sJadba8aBSgjrwPRKgiEiF'),
  extra?: map[string]string(name='Extra'),
  isAllDay?: boolean(name='IsAllDay', example='true'),
  location?: {
    displayName?: string(name='displayName', example='room 1-2-3'),
  }(name='Location'),
  recurrence?: {
    pattern?: {
      dayOfMonth?: int32(name='dayOfMonth', example='1'),
      daysOfWeek?: string(name='daysOfWeek', example='sunday'),
      index?: string(name='index', example='last'),
      interval?: int32(name='interval', example='1'),
      type?: string(name='type', example='daily'),
    }(name='pattern'),
    range?: {
      endDate?: string(name='endDate', example='2021-12-31T10:15:30+08:00'),
      numberOfOccurrences?: int32(name='numberOfOccurrences', example='1'),
      type?: string(name='type', example='endDate'),
    }(name='range'),
  }(name='Recurrence'),
  reminders?: [ 
    {
      method?: string(name='method', example='dingtalk'),
      minutes?: int32(name='minutes', example='15'),
    }
  ](name='Reminders'),
  start?: {
    date?: string(name='date', example='2020-01-01'),
    dateTime?: string(name='dateTime', example='2020-01-01T10:15:30+08:00'),
    timeZone?: string(name='timeZone', example='Asia/Shanghai'),
  }(name='Start'),
  summary?: string(name='Summary'),
}

model PatchEventShrinkRequest {
  attendeesShrink?: string(name='Attendees'),
  calendarId?: string(name='CalendarId', description='This parameter is required.', example='primary'),
  cardInstancesShrink?: string(name='CardInstances'),
  description?: string(name='Description'),
  endShrink?: string(name='End'),
  eventId?: string(name='EventId', description='This parameter is required.', example='iiiP35sJadba8aBSgjrwPRKgiEiF'),
  extraShrink?: string(name='Extra'),
  isAllDay?: boolean(name='IsAllDay', example='true'),
  locationShrink?: string(name='Location'),
  recurrenceShrink?: string(name='Recurrence'),
  remindersShrink?: string(name='Reminders'),
  startShrink?: string(name='Start'),
  summary?: string(name='Summary'),
}

model PatchEventResponseBody = {
  attendees?: [ 
    {
      displayName?: string(name='DisplayName', example='tony'),
      id?: string(name='Id', example='123456'),
      isOptional?: boolean(name='IsOptional', example='true'),
      responseStatus?: string(name='ResponseStatus', example='accepted'),
      self?: boolean(name='Self', example='true'),
    }
  ](name='attendees'),
  createTime?: string(name='createTime', example='2022-10-25T02:26:14Z'),
  description?: string(name='description'),
  end?: {
    date?: string(name='Date', example='2020-01-01'),
    dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
    timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
  }(name='end'),
  id?: string(name='id', example='123456'),
  isAllDay?: boolean(name='isAllDay', example='true'),
  location?: {
    displayName?: string(name='DisplayName', example='true'),
    meetingRooms?: [ string ](name='MeetingRooms'),
  }(name='location'),
  organizer?: {
    displayName?: string(name='DisplayName', example='tony'),
    id?: string(name='Id', example='123456'),
    responseStatus?: string(name='ResponseStatus', example='accepted'),
    self?: boolean(name='Self', example='true'),
  }(name='organizer'),
  recurrence?: {
    pattern?: {
      dayOfMonth?: int32(name='DayOfMonth', example='14'),
      daysOfWeek?: string(name='DaysOfWeek', example='sunday'),
      index?: string(name='Index', example='first'),
      interval?: int32(name='Interval', example='1'),
      type?: string(name='Type', example='daily'),
    }(name='Pattern'),
    range?: {
      endDate?: string(name='EndDate', example='2020-01-01T10:15:30+08:00'),
      numberOfOccurrences?: int32(name='NumberOfOccurrences', example='5'),
      type?: string(name='Type', example='noEnd'),
    }(name='Range'),
  }(name='recurrence'),
  reminders?: [ 
    {
      method?: string(name='Method', example='dingtalk'),
      minutes?: string(name='Minutes', example='15'),
    }
  ](name='reminders'),
  requestId?: string(name='requestId', description='requestId', example='4248DCC9-785F-5A14-8BE0-830FD52E1261'),
  start?: {
    date?: string(name='Date', example='2020-01-01'),
    dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
    timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
  }(name='start'),
  summary?: string(name='summary'),
  updateTime?: string(name='updateTime', example='2020-01-01T10:15:30+08:00'),
}

model PatchEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PatchEventResponseBody(name='body'),
}

/**
 * @summary 修改日程
 *
 * @param tmpReq PatchEventRequest
 * @param tmpHeader PatchEventHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return PatchEventResponse
 */
async function patchEventWithOptions(tmpReq: PatchEventRequest, tmpHeader: PatchEventHeaders, runtime: Util.RuntimeOptions): PatchEventResponse {
  Util.validateModel(tmpReq);
  var request = new PatchEventShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new PatchEventShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.attendees)) {
    request.attendeesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.attendees, 'Attendees', 'json');
  }
  if (!Util.isUnset(tmpReq.cardInstances)) {
    request.cardInstancesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.cardInstances, 'CardInstances', 'json');
  }
  if (!Util.isUnset(tmpReq.end)) {
    request.endShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.end, 'End', 'json');
  }
  if (!Util.isUnset(tmpReq.extra)) {
    request.extraShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extra, 'Extra', 'json');
  }
  if (!Util.isUnset(tmpReq.location)) {
    request.locationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.location, 'Location', 'json');
  }
  if (!Util.isUnset(tmpReq.recurrence)) {
    request.recurrenceShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.recurrence, 'Recurrence', 'json');
  }
  if (!Util.isUnset(tmpReq.reminders)) {
    request.remindersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.reminders, 'Reminders', 'json');
  }
  if (!Util.isUnset(tmpReq.start)) {
    request.startShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.start, 'Start', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.attendeesShrink)) {
    body['Attendees'] = request.attendeesShrink;
  }
  if (!Util.isUnset(request.calendarId)) {
    body['CalendarId'] = request.calendarId;
  }
  if (!Util.isUnset(request.cardInstancesShrink)) {
    body['CardInstances'] = request.cardInstancesShrink;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.endShrink)) {
    body['End'] = request.endShrink;
  }
  if (!Util.isUnset(request.eventId)) {
    body['EventId'] = request.eventId;
  }
  if (!Util.isUnset(request.extraShrink)) {
    body['Extra'] = request.extraShrink;
  }
  if (!Util.isUnset(request.isAllDay)) {
    body['IsAllDay'] = request.isAllDay;
  }
  if (!Util.isUnset(request.locationShrink)) {
    body['Location'] = request.locationShrink;
  }
  if (!Util.isUnset(request.recurrenceShrink)) {
    body['Recurrence'] = request.recurrenceShrink;
  }
  if (!Util.isUnset(request.remindersShrink)) {
    body['Reminders'] = request.remindersShrink;
  }
  if (!Util.isUnset(request.startShrink)) {
    body['Start'] = request.startShrink;
  }
  if (!Util.isUnset(request.summary)) {
    body['Summary'] = request.summary;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PatchEvent',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/patchEvent`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改日程
 *
 * @param request PatchEventRequest
 * @return PatchEventResponse
 */
async function patchEvent(request: PatchEventRequest): PatchEventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new PatchEventHeaders{};
  return patchEventWithOptions(request, headers, runtime);
}

model QueryCloudRecordTextHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model QueryCloudRecordTextShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryCloudRecordTextRequest {
  direction?: string(name='Direction', example='0'),
  maxResults?: long(name='MaxResults', example='20000'),
  nextToken?: long(name='NextToken', example='1631172045153000'),
  startTime?: long(name='StartTime', example='7940'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='61289fxxx'),
}

model QueryCloudRecordTextShrinkRequest {
  direction?: string(name='Direction', example='0'),
  maxResults?: long(name='MaxResults', example='20000'),
  nextToken?: long(name='NextToken', example='1631172045153000'),
  startTime?: long(name='StartTime', example='7940'),
  tenantContextShrink?: string(name='TenantContext'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='61289fxxx'),
}

model QueryCloudRecordTextResponseBody = {
  hasMore?: boolean(name='hasMore', example='true'),
  paragraphList?: [ 
    {
      endTime?: long(name='EndTime', example='7940'),
      nextTtoken?: long(name='NextTtoken', example='1631172045153000'),
      nickName?: string(name='NickName', example='小钉'),
      paragraph?: string(name='Paragraph', example='嘿！你好，这里是小钉'),
      recordId?: long(name='RecordId', example='44444'),
      sentenceList?: [ 
        {
          endTime?: long(name='EndTime', example='7940'),
          sentence?: string(name='Sentence', example='这里是小钉'),
          startTime?: long(name='StartTime', example='7940'),
          userId?: string(name='UserId', example='012345'),
          wordList?: [ 
            {
              endTime?: long(name='EndTime', example='7940'),
              startTime?: long(name='StartTime', example='7940'),
              word?: string(name='Word', example='这里'),
              wordId?: string(name='WordId', example='1631172050535000#0'),
            }
          ](name='WordList'),
        }
      ](name='SentenceList'),
      startTime?: long(name='StartTime', example='7940'),
      status?: long(name='Status', example='1'),
      userId?: string(name='UserId', example='012345'),
    }
  ](name='paragraphList'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model QueryCloudRecordTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCloudRecordTextResponseBody(name='body'),
}

/**
 * @summary 查询会议录制中的文本信息
 *
 * @param tmpReq QueryCloudRecordTextRequest
 * @param tmpHeader QueryCloudRecordTextHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryCloudRecordTextResponse
 */
async function queryCloudRecordTextWithOptions(tmpReq: QueryCloudRecordTextRequest, tmpHeader: QueryCloudRecordTextHeaders, runtime: Util.RuntimeOptions): QueryCloudRecordTextResponse {
  Util.validateModel(tmpReq);
  var request = new QueryCloudRecordTextShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryCloudRecordTextShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.direction)) {
    body['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.conferenceId)) {
    body['conferenceId'] = request.conferenceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryCloudRecordText',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryCloudRecordText`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询会议录制中的文本信息
 *
 * @param request QueryCloudRecordTextRequest
 * @return QueryCloudRecordTextResponse
 */
async function queryCloudRecordText(request: QueryCloudRecordTextRequest): QueryCloudRecordTextResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryCloudRecordTextHeaders{};
  return queryCloudRecordTextWithOptions(request, headers, runtime);
}

model QueryCloudRecordVideoHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model QueryCloudRecordVideoShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryCloudRecordVideoRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='61289fxxx'),
}

model QueryCloudRecordVideoShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='61289fxxx'),
}

model QueryCloudRecordVideoResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  videoList?: [ 
    {
      duration?: long(name='Duration', example='59886'),
      endTime?: long(name='EndTime', example='1631172094000'),
      fileSize?: long(name='FileSize', example='1127942'),
      mediaId?: string(name='MediaId', example='faa1566c5bc24f21821ae2394f82db2e'),
      recordId?: string(name='RecordId', example='290882268xxx1172033231'),
      recordType?: long(name='RecordType', example='1'),
      regionId?: string(name='RegionId', example='cn-shenzhen'),
      startTime?: long(name='StartTime', example='1631172094000'),
      userId?: string(name='UserId', example='012345'),
    }
  ](name='videoList'),
}

model QueryCloudRecordVideoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCloudRecordVideoResponseBody(name='body'),
}

/**
 * @summary 查询会议录制的详情信息
 *
 * @param tmpReq QueryCloudRecordVideoRequest
 * @param tmpHeader QueryCloudRecordVideoHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryCloudRecordVideoResponse
 */
async function queryCloudRecordVideoWithOptions(tmpReq: QueryCloudRecordVideoRequest, tmpHeader: QueryCloudRecordVideoHeaders, runtime: Util.RuntimeOptions): QueryCloudRecordVideoResponse {
  Util.validateModel(tmpReq);
  var request = new QueryCloudRecordVideoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryCloudRecordVideoShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.conferenceId)) {
    body['conferenceId'] = request.conferenceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryCloudRecordVideo',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryCloudRecordVideo`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询会议录制的详情信息
 *
 * @param request QueryCloudRecordVideoRequest
 * @return QueryCloudRecordVideoResponse
 */
async function queryCloudRecordVideo(request: QueryCloudRecordVideoRequest): QueryCloudRecordVideoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryCloudRecordVideoHeaders{};
  return queryCloudRecordVideoWithOptions(request, headers, runtime);
}

model QueryCloudRecordVideoPlayInfoHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model QueryCloudRecordVideoPlayInfoShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryCloudRecordVideoPlayInfoRequest {
  conferenceId?: string(name='ConferenceId', description='This parameter is required.', example='6139b4xxx'),
  mediaId?: string(name='MediaId', description='This parameter is required.', example='44444444'),
  regionId?: string(name='RegionId', description='This parameter is required.', example='cn-shenzhen'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model QueryCloudRecordVideoPlayInfoShrinkRequest {
  conferenceId?: string(name='ConferenceId', description='This parameter is required.', example='6139b4xxx'),
  mediaId?: string(name='MediaId', description='This parameter is required.', example='44444444'),
  regionId?: string(name='RegionId', description='This parameter is required.', example='cn-shenzhen'),
  tenantContextShrink?: string(name='TenantContext'),
}

model QueryCloudRecordVideoPlayInfoResponseBody = {
  duration?: long(name='duration', example='59886'),
  fileSize?: long(name='fileSize', example='1127942'),
  mp4FileUrl?: string(name='mp4FileUrl', example='https://vod.mcs.dingtalk.com/faa1566c5bc24f21821ae2394f82db2e/8bbd1612e686462ab4717919f67bb721-b8531e0d534b2f9747a9fdfxxxxxxxxc-sd.mp4'),
  playUrl?: string(name='playUrl', example='https://vod.mcs.dingtalk.com/faa1566c5bc24f21821ae2394f82db2e/8bbd1612e686462ab4717919f67bb721-ab85cc044a163568c9485xxxxxxxx76d-sd.m3u8'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  status?: long(name='status', example='1'),
}

model QueryCloudRecordVideoPlayInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCloudRecordVideoPlayInfoResponseBody(name='body'),
}

/**
 * @summary 查询会议录制中的视频信息
 *
 * @param tmpReq QueryCloudRecordVideoPlayInfoRequest
 * @param tmpHeader QueryCloudRecordVideoPlayInfoHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryCloudRecordVideoPlayInfoResponse
 */
async function queryCloudRecordVideoPlayInfoWithOptions(tmpReq: QueryCloudRecordVideoPlayInfoRequest, tmpHeader: QueryCloudRecordVideoPlayInfoHeaders, runtime: Util.RuntimeOptions): QueryCloudRecordVideoPlayInfoResponse {
  Util.validateModel(tmpReq);
  var request = new QueryCloudRecordVideoPlayInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryCloudRecordVideoPlayInfoShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.conferenceId)) {
    body['ConferenceId'] = request.conferenceId;
  }
  if (!Util.isUnset(request.mediaId)) {
    body['MediaId'] = request.mediaId;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryCloudRecordVideoPlayInfo',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryCloudRecordVideoPlayInfo`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询会议录制中的视频信息
 *
 * @param request QueryCloudRecordVideoPlayInfoRequest
 * @return QueryCloudRecordVideoPlayInfoResponse
 */
async function queryCloudRecordVideoPlayInfo(request: QueryCloudRecordVideoPlayInfoRequest): QueryCloudRecordVideoPlayInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryCloudRecordVideoPlayInfoHeaders{};
  return queryCloudRecordVideoPlayInfoWithOptions(request, headers, runtime);
}

model QueryConferenceInfoHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='208579'),
  }(name='AccountContext'),
}

model QueryConferenceInfoShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryConferenceInfoRequest {
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='607452e01401526ee39609e1'),
}

model QueryConferenceInfoResponseBody = {
  confInfo?: {
    activeNum?: int32(name='ActiveNum', example='2'),
    attendNum?: int32(name='AttendNum', example='2'),
    confDuration?: long(name='ConfDuration', example='1000000'),
    conferenceId?: string(name='ConferenceId', example='607452e01401526ee39609e1'),
    creatorId?: string(name='CreatorId', example='208579'),
    creatorNick?: string(name='CreatorNick'),
    endTime?: long(name='EndTime', example='1663294270000'),
    externalLinkUrl?: string(name='ExternalLinkUrl', example='https://meeting.dingtalk.com/app?roomCode=42726xxx&token=1_7ac9xxx'),
    invitedNum?: int32(name='InvitedNum', example='2'),
    roomCode?: string(name='RoomCode', example='4272xxxxx'),
    startTime?: long(name='StartTime', example='1663293270000'),
    status?: int32(name='Status', example='0'),
    title?: string(name='Title'),
  }(name='confInfo'),
  requestId?: string(name='requestId', description='requestId', example='4248DCC9-785F-5A14-8BE0-830FD52E1261'),
}

model QueryConferenceInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryConferenceInfoResponseBody(name='body'),
}

/**
 * @summary 查询视频会议信息
 *
 * @param request QueryConferenceInfoRequest
 * @param tmpHeader QueryConferenceInfoHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryConferenceInfoResponse
 */
async function queryConferenceInfoWithOptions(request: QueryConferenceInfoRequest, tmpHeader: QueryConferenceInfoHeaders, runtime: Util.RuntimeOptions): QueryConferenceInfoResponse {
  Util.validateModel(request);
  var headers = new QueryConferenceInfoShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.conferenceId)) {
    body['conferenceId'] = request.conferenceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryConferenceInfo',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryConferenceInfo`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询视频会议信息
 *
 * @param request QueryConferenceInfoRequest
 * @return QueryConferenceInfoResponse
 */
async function queryConferenceInfo(request: QueryConferenceInfoRequest): QueryConferenceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryConferenceInfoHeaders{};
  return queryConferenceInfoWithOptions(request, headers, runtime);
}

model QueryConferenceInfoByRoomCodeHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model QueryConferenceInfoByRoomCodeShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryConferenceInfoByRoomCodeRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  maxResults?: int32(name='maxResults', example='20'),
  nextToken?: string(name='nextToken', description='This parameter is required.', example='0'),
  roomCode?: string(name='roomCode', description='This parameter is required.', example='583 480 813'),
}

model QueryConferenceInfoByRoomCodeShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  maxResults?: int32(name='maxResults', example='20'),
  nextToken?: string(name='nextToken', description='This parameter is required.', example='0'),
  roomCode?: string(name='roomCode', description='This parameter is required.', example='583 480 813'),
}

model QueryConferenceInfoByRoomCodeResponseBody = {
  conferenceList?: [ 
    {
      bizType?: string(name='BizType', example='3'),
      confDuration?: long(name='ConfDuration', example='1000'),
      conferenceId?: string(name='ConferenceId', example='636cf59f2b032f014ae32902'),
      creatorId?: string(name='CreatorId', example='527079'),
      creatorNick?: string(name='CreatorNick'),
      endTime?: long(name='EndTime', example='1668087732000'),
      externalLinkUrl?: string(name='ExternalLinkUrl', example='https//:xxx'),
      roomCode?: string(name='RoomCode', example='123456789'),
      scheduleConferenceId?: string(name='ScheduleConferenceId', example='2d79cbde-b9d8-4256-9788-78b05834944e'),
      startTime?: long(name='StartTime', example='1668087731000'),
      status?: int32(name='Status', example='2'),
      title?: string(name='Title'),
    }
  ](name='conferenceList', example='[]'),
  dingtalkRequestId?: string(name='dingtalkRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  hasMore?: boolean(name='hasMore', example='true'),
  nextToken?: string(name='nextToken', example='1296'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: int32(name='totalCount', example='20'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model QueryConferenceInfoByRoomCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryConferenceInfoByRoomCodeResponseBody(name='body'),
}

/**
 * @summary 根据会议码查询视频会议信息
 *
 * @param tmpReq QueryConferenceInfoByRoomCodeRequest
 * @param tmpHeader QueryConferenceInfoByRoomCodeHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryConferenceInfoByRoomCodeResponse
 */
async function queryConferenceInfoByRoomCodeWithOptions(tmpReq: QueryConferenceInfoByRoomCodeRequest, tmpHeader: QueryConferenceInfoByRoomCodeHeaders, runtime: Util.RuntimeOptions): QueryConferenceInfoByRoomCodeResponse {
  Util.validateModel(tmpReq);
  var request = new QueryConferenceInfoByRoomCodeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryConferenceInfoByRoomCodeShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['nextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.roomCode)) {
    body['roomCode'] = request.roomCode;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryConferenceInfoByRoomCode',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryConferenceInfoByRoomCode`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 根据会议码查询视频会议信息
 *
 * @param request QueryConferenceInfoByRoomCodeRequest
 * @return QueryConferenceInfoByRoomCodeResponse
 */
async function queryConferenceInfoByRoomCode(request: QueryConferenceInfoByRoomCodeRequest): QueryConferenceInfoByRoomCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryConferenceInfoByRoomCodeHeaders{};
  return queryConferenceInfoByRoomCodeWithOptions(request, headers, runtime);
}

model QueryConferenceMembersHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model QueryConferenceMembersShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryConferenceMembersRequest {
  maxResults?: int32(name='MaxResults', example='300'),
  nextToken?: string(name='NextToken', example='123000000'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='61289fxxx'),
}

model QueryConferenceMembersShrinkRequest {
  maxResults?: int32(name='MaxResults', example='300'),
  nextToken?: string(name='NextToken', example='123000000'),
  tenantContextShrink?: string(name='TenantContext'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='61289fxxx'),
}

model QueryConferenceMembersResponseBody = {
  memberModels?: [ 
    {
      attendStatus?: int32(name='AttendStatus', example='6'),
      coHost?: boolean(name='CoHost', example='false'),
      conferenceId?: string(name='ConferenceId', example='6323dxxxxx'),
      duration?: long(name='Duration', example='10000'),
      host?: boolean(name='Host', example='false'),
      joinTime?: long(name='JoinTime', example='1663293270000'),
      leaveTime?: long(name='LeaveTime', example='1663293280000'),
      outerOrgMember?: boolean(name='OuterOrgMember', example='true'),
      pstnJoin?: boolean(name='PstnJoin', example='false'),
      userId?: string(name='UserId', example='-12345'),
      userNick?: string(name='UserNick', example='小钉'),
    }
  ](name='memberModels'),
  nextToken?: string(name='nextToken', example='123000000'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: int32(name='totalCount', example='20'),
}

model QueryConferenceMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryConferenceMembersResponseBody(name='body'),
}

/**
 * @summary 查询视频会议成员
 *
 * @param tmpReq QueryConferenceMembersRequest
 * @param tmpHeader QueryConferenceMembersHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryConferenceMembersResponse
 */
async function queryConferenceMembersWithOptions(tmpReq: QueryConferenceMembersRequest, tmpHeader: QueryConferenceMembersHeaders, runtime: Util.RuntimeOptions): QueryConferenceMembersResponse {
  Util.validateModel(tmpReq);
  var request = new QueryConferenceMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryConferenceMembersShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.conferenceId)) {
    body['conferenceId'] = request.conferenceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryConferenceMembers',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryConferenceMembers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询视频会议成员
 *
 * @param request QueryConferenceMembersRequest
 * @return QueryConferenceMembersResponse
 */
async function queryConferenceMembers(request: QueryConferenceMembersRequest): QueryConferenceMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryConferenceMembersHeaders{};
  return queryConferenceMembersWithOptions(request, headers, runtime);
}

model QueryDentriesInfoHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model QueryDentriesInfoShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryDentriesInfoRequest {
  appIdsForAppProperties?: [ string ](name='AppIdsForAppProperties'),
  dentryId?: string(name='DentryId', description='This parameter is required.', example='140901622636'),
  spaceId?: string(name='SpaceId', description='This parameter is required.', example='22443475065'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  unionId?: string(name='UnionId', description='This parameter is required.', example='urv3ZIAtcmmIgQzHq08YcAiEiE'),
  withThumbnail?: boolean(name='WithThumbnail', example='false'),
}

model QueryDentriesInfoShrinkRequest {
  appIdsForAppPropertiesShrink?: string(name='AppIdsForAppProperties'),
  dentryId?: string(name='DentryId', description='This parameter is required.', example='140901622636'),
  spaceId?: string(name='SpaceId', description='This parameter is required.', example='22443475065'),
  tenantContextShrink?: string(name='TenantContext'),
  unionId?: string(name='UnionId', description='This parameter is required.', example='urv3ZIAtcmmIgQzHq08YcAiEiE'),
  withThumbnail?: boolean(name='WithThumbnail', example='false'),
}

model QueryDentriesInfoResponseBody = {
  dentry?: {
    appProperties?: map[string][ DentryAppPropertiesValue     ](name='AppProperties'),
    createTime?: string(name='CreateTime', example='2025-03-26T02:19:35Z'),
    creatorId?: string(name='CreatorId', example='qt8bGiSa7WnHKeRPtMuoiSJwiE'),
    extension?: string(name='Extension', example='txt'),
    id?: string(name='Id', example='140901622636'),
    modifiedTime?: string(name='ModifiedTime'),
    modifierId?: string(name='ModifierId', example='qt8bGiSa7WnHKeRPtMuoiSJwiE'),
    name?: string(name='Name'),
    parentId?: string(name='ParentId', example='0'),
    partitionType?: string(name='PartitionType', example='PUBLIC_OSS_PARTITION'),
    path?: string(name='Path'),
    properties?: {
      readOnly?: boolean(name='ReadOnly', example='True'),
    }(name='Properties'),
    size?: long(name='Size', example='512'),
    spaceId?: string(name='SpaceId', example='22443475065'),
    status?: string(name='Status', example='NORMAL'),
    storageDriver?: string(name='StorageDriver', example='DINGTALK'),
    thumbnail?: {
      height?: int32(name='Height', example='720'),
      url?: string(name='Url', example='xxx'),
      width?: int32(name='Width', example='1920'),
    }(name='Thumbnail'),
    type?: string(name='Type', example='FILE'),
    uuid?: string(name='Uuid', example='1716258459684'),
    version?: long(name='Version', example='1'),
  }(name='Dentry'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model QueryDentriesInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDentriesInfoResponseBody(name='body'),
}

/**
 * @summary 获取文件或文件夹信息
 *
 * @param tmpReq QueryDentriesInfoRequest
 * @param tmpHeader QueryDentriesInfoHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryDentriesInfoResponse
 */
async function queryDentriesInfoWithOptions(tmpReq: QueryDentriesInfoRequest, tmpHeader: QueryDentriesInfoHeaders, runtime: Util.RuntimeOptions): QueryDentriesInfoResponse {
  Util.validateModel(tmpReq);
  var request = new QueryDentriesInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryDentriesInfoShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.appIdsForAppProperties)) {
    request.appIdsForAppPropertiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.appIdsForAppProperties, 'AppIdsForAppProperties', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appIdsForAppPropertiesShrink)) {
    body['AppIdsForAppProperties'] = request.appIdsForAppPropertiesShrink;
  }
  if (!Util.isUnset(request.dentryId)) {
    body['DentryId'] = request.dentryId;
  }
  if (!Util.isUnset(request.spaceId)) {
    body['SpaceId'] = request.spaceId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.unionId)) {
    body['UnionId'] = request.unionId;
  }
  if (!Util.isUnset(request.withThumbnail)) {
    body['WithThumbnail'] = request.withThumbnail;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryDentriesInfo',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/queryDentriesInfo`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取文件或文件夹信息
 *
 * @param request QueryDentriesInfoRequest
 * @return QueryDentriesInfoResponse
 */
async function queryDentriesInfo(request: QueryDentriesInfoRequest): QueryDentriesInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryDentriesInfoHeaders{};
  return queryDentriesInfoWithOptions(request, headers, runtime);
}

model QueryDentryHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model QueryDentryShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryDentryRequest {
  dentryId?: string(name='DentryId', description='This parameter is required.', example='xxx'),
  includeSpace?: boolean(name='IncludeSpace', example='true'),
  spaceId?: string(name='SpaceId', description='This parameter is required.', example='space-fxhb96vuddz8htqt'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model QueryDentryShrinkRequest {
  dentryId?: string(name='DentryId', description='This parameter is required.', example='xxx'),
  includeSpace?: boolean(name='IncludeSpace', example='true'),
  spaceId?: string(name='SpaceId', description='This parameter is required.', example='space-fxhb96vuddz8htqt'),
  tenantContextShrink?: string(name='TenantContext'),
}

model QueryDentryResponseBody = {
  contentType?: string(name='contentType', example='alidoc'),
  createdTime?: long(name='createdTime', example='12345678'),
  creator?: {
    name?: string(name='Name', example='hello'),
    userId?: string(name='UserId', example='012345'),
  }(name='creator'),
  dentryId?: string(name='dentryId', example='abc'),
  dentryType?: string(name='dentryType', example='file'),
  dentryUuid?: string(name='dentryUuid', example='cdefg'),
  docKey?: string(name='docKey', example='aabbcc'),
  extension?: string(name='extension', example='alidoc'),
  hasChildren?: boolean(name='hasChildren', example='false'),
  linkSourceInfo?: {
    extension?: string(name='Extension', example='docx'),
    iconUrl?: {
      line?: string(name='Line', example='gh'),
      small?: string(name='Small', example='def'),
    }(name='IconUrl'),
    id?: string(name='Id', example='def'),
    linkType?: long(name='LinkType', example='0'),
    spaceId?: string(name='SpaceId', example='def'),
  }(name='linkSourceInfo'),
  name?: string(name='name', example='hello'),
  path?: string(name='path', example='测试组织/测试知识库/abc'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  space?: {
    cover?: string(name='Cover', example='https://img.alicdn.com/imgextra/i1/O1xxxxx.png'),
    description?: string(name='Description', example='这是简介'),
    hdIconVO?: {
      icon?: string(name='Icon', example='http://'),
      type?: string(name='Type', example='type'),
    }(name='HdIconVO'),
    iconVO?: {
      icon?: string(name='Icon', example='http://'),
      type?: string(name='Type', example='type'),
    }(name='IconVO'),
    id?: string(name='Id', example='n9XJxxxxx'),
    name?: string(name='Name'),
    owner?: {
      name?: string(name='Name', example='小钉'),
      userId?: string(name='UserId', example='012345'),
    }(name='Owner', example='测试知识库'),
    recentList?: [ 
      {
        contentType?: string(name='ContentType', example='alidoc'),
        createdTime?: long(name='CreatedTime', example='12345678'),
        creator?: {
          name?: string(name='Name', example='hello'),
          userId?: string(name='UserId', example='012345'),
        }(name='Creator'),
        dentryId?: string(name='DentryId', example='abc'),
        dentryType?: string(name='DentryType', example='file'),
        dentryUuid?: string(name='DentryUuid', example='cdefg'),
        docKey?: string(name='DocKey', example='aabbcc'),
        extension?: string(name='Extension', example='alidoc'),
        hasChildren?: boolean(name='HasChildren', example='false'),
        linkSourceInfo?: {
          extension?: string(name='Extension', example='docx'),
          iconUrl?: {
            line?: string(name='Line', example='gh'),
            small?: string(name='Small', example='def'),
          }(name='IconUrl'),
          id?: string(name='Id', example='def'),
          linkType?: long(name='LinkType', example='0'),
          spaceId?: string(name='SpaceId', example='def'),
        }(name='LinkSourceInfo'),
        name?: string(name='Name', example='hello'),
        path?: string(name='Path', example='测试组织/测试知识库/abc'),
        space?: any(name='Space'),
        spaceId?: string(name='SpaceId', example='bcd'),
        statisticalInfo?: {
          wordCount?: long(name='WordCount'),
        }(name='StatisticalInfo'),
        updatedTime?: long(name='UpdatedTime', example='12345678'),
        updater?: {
          name?: string(name='Name', example='hello'),
          userId?: string(name='UserId', example='012345'),
        }(name='Updater'),
        url?: string(name='Url', example='https://xxx.yy'),
        visitorInfo?: {
          dentryActions?: [ string ](name='DentryActions'),
          roleCode?: string(name='RoleCode', example='1'),
          spaceActions?: [ string ](name='SpaceActions'),
        }(name='VisitorInfo'),
      }
    ](name='RecentList'),
    type?: int32(name='Type', example='1'),
    url?: string(name='Url', example='https://alidocs.dingtalk.com/i/spaces/n9XJ*******Xy/overview'),
    visitorInfo?: {
      dentryActions?: [ string ](name='DentryActions', example='GET_DENTRY'),
      roleCode?: string(name='RoleCode', example='3'),
      spaceActions?: [ string ](name='SpaceActions', example='GET_SPACE'),
    }(name='VisitorInfo'),
  }(name='space'),
  spaceId?: string(name='spaceId', example='bcd'),
  updatedTime?: long(name='updatedTime', example='12345678'),
  updater?: {
    name?: string(name='Name', example='hello'),
    userId?: string(name='UserId', example='012345'),
  }(name='updater'),
  url?: string(name='url', example='https://xxx.yy'),
  visitorInfo?: {
    dentryActions?: [ string ](name='DentryActions'),
    roleCode?: string(name='RoleCode', example='1'),
    spaceActions?: [ string ](name='SpaceActions'),
  }(name='visitorInfo'),
}

model QueryDentryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDentryResponseBody(name='body'),
}

/**
 * @summary 查询知识库节点信息
 *
 * @param tmpReq QueryDentryRequest
 * @param tmpHeader QueryDentryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryDentryResponse
 */
async function queryDentryWithOptions(tmpReq: QueryDentryRequest, tmpHeader: QueryDentryHeaders, runtime: Util.RuntimeOptions): QueryDentryResponse {
  Util.validateModel(tmpReq);
  var request = new QueryDentryShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryDentryShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.dentryId)) {
    body['DentryId'] = request.dentryId;
  }
  if (!Util.isUnset(request.includeSpace)) {
    body['IncludeSpace'] = request.includeSpace;
  }
  if (!Util.isUnset(request.spaceId)) {
    body['SpaceId'] = request.spaceId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryDentry',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/queryDentry`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询知识库节点信息
 *
 * @param request QueryDentryRequest
 * @return QueryDentryResponse
 */
async function queryDentry(request: QueryDentryRequest): QueryDentryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryDentryHeaders{};
  return queryDentryWithOptions(request, headers, runtime);
}

model QueryGroupLiveInfoHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model QueryGroupLiveInfoShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryGroupLiveInfoRequest {
  anchorUnionId?: string(name='AnchorUnionId', description='This parameter is required.', example='333d'),
  liveUuid?: string(name='LiveUuid', description='This parameter is required.', example='4d38xxxxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model QueryGroupLiveInfoShrinkRequest {
  anchorUnionId?: string(name='AnchorUnionId', description='This parameter is required.', example='333d'),
  liveUuid?: string(name='LiveUuid', description='This parameter is required.', example='4d38xxxxx'),
  tenantContextShrink?: string(name='TenantContext'),
}

model QueryGroupLiveInfoResponseBody = {
  coverUrl?: string(name='coverUrl', example='http://xxx/kk.jpg'),
  duration?: long(name='duration', example='59886'),
  endTime?: long(name='endTime', example='1687928400000'),
  introduction?: string(name='introduction'),
  liveId?: string(name='liveId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  livePlayUrl?: string(name='livePlayUrl', example='http://ssssss'),
  liveStatus?: int32(name='liveStatus'),
  playbackDuration?: long(name='playbackDuration', example='13414'),
  replayUrl?: string(name='replayUrl'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  staffId?: string(name='staffId'),
  startTime?: long(name='startTime', example='1687924800000'),
  subscribeCount?: int32(name='subscribeCount', example='0'),
  title?: string(name='title'),
  uv?: int32(name='uv', example='10'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model QueryGroupLiveInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryGroupLiveInfoResponseBody(name='body'),
}

/**
 * @summary 查询群直播详情
 *
 * @param tmpReq QueryGroupLiveInfoRequest
 * @param tmpHeader QueryGroupLiveInfoHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryGroupLiveInfoResponse
 */
async function queryGroupLiveInfoWithOptions(tmpReq: QueryGroupLiveInfoRequest, tmpHeader: QueryGroupLiveInfoHeaders, runtime: Util.RuntimeOptions): QueryGroupLiveInfoResponse {
  Util.validateModel(tmpReq);
  var request = new QueryGroupLiveInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryGroupLiveInfoShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.anchorUnionId)) {
    body['AnchorUnionId'] = request.anchorUnionId;
  }
  if (!Util.isUnset(request.liveUuid)) {
    body['LiveUuid'] = request.liveUuid;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryGroupLiveInfo',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryGroupLiveInfo`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询群直播详情
 *
 * @param request QueryGroupLiveInfoRequest
 * @return QueryGroupLiveInfoResponse
 */
async function queryGroupLiveInfo(request: QueryGroupLiveInfoRequest): QueryGroupLiveInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryGroupLiveInfoHeaders{};
  return queryGroupLiveInfoWithOptions(request, headers, runtime);
}

model QueryLiveInfoHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model QueryLiveInfoShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryLiveInfoRequest {
  liveId?: string(name='LiveId', description='This parameter is required.', example='4d38xxxxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model QueryLiveInfoShrinkRequest {
  liveId?: string(name='LiveId', description='This parameter is required.', example='4d38xxxxx'),
  tenantContextShrink?: string(name='TenantContext'),
}

model QueryLiveInfoResponseBody = {
  coverUrl?: string(name='coverUrl', example='http://xxx/kk.jpg'),
  duration?: long(name='duration', example='59886'),
  endTime?: long(name='endTime', example='1662447951960'),
  introduction?: string(name='introduction'),
  liveId?: string(name='liveId', example='1211-3442-122'),
  livePlayUrl?: string(name='livePlayUrl', example='http://ssssss'),
  liveStatus?: int32(name='liveStatus'),
  playbackDuration?: long(name='playbackDuration', example='13414'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  startTime?: long(name='startTime', example='1627353123000'),
  subscribeCount?: int32(name='subscribeCount', example='111'),
  title?: string(name='title'),
  uv?: int32(name='uv', example='10'),
}

model QueryLiveInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryLiveInfoResponseBody(name='body'),
}

/**
 * @summary 查询直播信息
 *
 * @param tmpReq QueryLiveInfoRequest
 * @param tmpHeader QueryLiveInfoHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryLiveInfoResponse
 */
async function queryLiveInfoWithOptions(tmpReq: QueryLiveInfoRequest, tmpHeader: QueryLiveInfoHeaders, runtime: Util.RuntimeOptions): QueryLiveInfoResponse {
  Util.validateModel(tmpReq);
  var request = new QueryLiveInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryLiveInfoShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.liveId)) {
    body['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryLiveInfo',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryLiveInfo`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询直播信息
 *
 * @param request QueryLiveInfoRequest
 * @return QueryLiveInfoResponse
 */
async function queryLiveInfo(request: QueryLiveInfoRequest): QueryLiveInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryLiveInfoHeaders{};
  return queryLiveInfoWithOptions(request, headers, runtime);
}

model QueryLiveWatchDetailHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model QueryLiveWatchDetailShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryLiveWatchDetailRequest {
  liveId?: string(name='LiveId', description='This parameter is required.', example='4d38xxxxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model QueryLiveWatchDetailShrinkRequest {
  liveId?: string(name='LiveId', description='This parameter is required.', example='4d38xxxxx'),
  tenantContextShrink?: string(name='TenantContext'),
}

model QueryLiveWatchDetailResponseBody = {
  avgWatchTime?: long(name='avgWatchTime', example='84600'),
  liveUv?: int32(name='liveUv', example='100'),
  msgCount?: int32(name='msgCount', example='10000'),
  playbackUv?: int32(name='playbackUv', example='20'),
  praiseCount?: int32(name='praiseCount', example='30'),
  pv?: int32(name='pv', example='1000'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalWatchTime?: long(name='totalWatchTime', example='1222000'),
  uv?: int32(name='uv', example='10'),
}

model QueryLiveWatchDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryLiveWatchDetailResponseBody(name='body'),
}

/**
 * @summary 查询直播的观看数据
 *
 * @param tmpReq QueryLiveWatchDetailRequest
 * @param tmpHeader QueryLiveWatchDetailHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryLiveWatchDetailResponse
 */
async function queryLiveWatchDetailWithOptions(tmpReq: QueryLiveWatchDetailRequest, tmpHeader: QueryLiveWatchDetailHeaders, runtime: Util.RuntimeOptions): QueryLiveWatchDetailResponse {
  Util.validateModel(tmpReq);
  var request = new QueryLiveWatchDetailShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryLiveWatchDetailShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.liveId)) {
    body['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryLiveWatchDetail',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryLiveWatchDetail`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询直播的观看数据
 *
 * @param request QueryLiveWatchDetailRequest
 * @return QueryLiveWatchDetailResponse
 */
async function queryLiveWatchDetail(request: QueryLiveWatchDetailRequest): QueryLiveWatchDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryLiveWatchDetailHeaders{};
  return queryLiveWatchDetailWithOptions(request, headers, runtime);
}

model QueryLiveWatchUserListHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model QueryLiveWatchUserListShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryLiveWatchUserListRequest {
  liveId?: string(name='LiveId', description='This parameter is required.', example='4d38xxxxx'),
  pageNumber?: int32(name='PageNumber', example='0'),
  pageSize?: int32(name='PageSize', description='This parameter is required.', example='20'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model QueryLiveWatchUserListShrinkRequest {
  liveId?: string(name='LiveId', description='This parameter is required.', example='4d38xxxxx'),
  pageNumber?: int32(name='PageNumber', example='0'),
  pageSize?: int32(name='PageSize', description='This parameter is required.', example='20'),
  tenantContextShrink?: string(name='TenantContext'),
}

model QueryLiveWatchUserListResponseBody = {
  orgUsesList?: [ 
    {
      deptName?: string(name='DeptName'),
      name?: string(name='Name'),
      userId?: string(name='UserId', example='1234'),
      watchLiveTime?: long(name='WatchLiveTime', example='19999'),
      watchPlaybackTime?: long(name='WatchPlaybackTime', example='131312312'),
      watchProgressMs?: long(name='WatchProgressMs', example='1323132'),
    }
  ](name='orgUsesList'),
  outOrgUserList?: [ 
    {
      name?: string(name='Name'),
      watchLiveTime?: long(name='WatchLiveTime', example='12312312'),
      watchPlaybackTime?: long(name='WatchPlaybackTime', example='21313131'),
      watchProgressMs?: long(name='WatchProgressMs', example='123131'),
    }
  ](name='outOrgUserList'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model QueryLiveWatchUserListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryLiveWatchUserListResponseBody(name='body'),
}

/**
 * @summary 查询直播观看人员信息
 *
 * @param tmpReq QueryLiveWatchUserListRequest
 * @param tmpHeader QueryLiveWatchUserListHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryLiveWatchUserListResponse
 */
async function queryLiveWatchUserListWithOptions(tmpReq: QueryLiveWatchUserListRequest, tmpHeader: QueryLiveWatchUserListHeaders, runtime: Util.RuntimeOptions): QueryLiveWatchUserListResponse {
  Util.validateModel(tmpReq);
  var request = new QueryLiveWatchUserListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryLiveWatchUserListShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.liveId)) {
    body['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryLiveWatchUserList',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryLiveWatchUserList`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询直播观看人员信息
 *
 * @param request QueryLiveWatchUserListRequest
 * @return QueryLiveWatchUserListResponse
 */
async function queryLiveWatchUserList(request: QueryLiveWatchUserListRequest): QueryLiveWatchUserListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryLiveWatchUserListHeaders{};
  return queryLiveWatchUserListWithOptions(request, headers, runtime);
}

model QueryMeetingRoomHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model QueryMeetingRoomShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryMeetingRoomRequest {
  roomId?: string(name='RoomId', description='This parameter is required.', example='0ffb7xxxxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model QueryMeetingRoomShrinkRequest {
  roomId?: string(name='RoomId', description='This parameter is required.', example='0ffb7xxxxx'),
  tenantContextShrink?: string(name='TenantContext'),
}

model QueryMeetingRoomResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: {
    corpId?: string(name='CorpId', example='ding994axxxxx'),
    deviceUnionIds?: [ string ](name='DeviceUnionIds', example='[ "2iPOLbpxxxxuwggiiqiPwiEiF" ]'),
    enableCycleReservation?: boolean(name='EnableCycleReservation', example='true'),
    isvRoomId?: string(name='IsvRoomId', example='xxxIsvRoomId'),
    reservationAuthority?: {
      authorizedMembers?: [ 
        {
          memberId?: string(name='MemberId'),
          memberName?: string(name='MemberName'),
          memberType?: string(name='MemberType'),
        }
      ](name='AuthorizedMembers'),
    }(name='ReservationAuthority'),
    roomCapacity?: int32(name='RoomCapacity', example='10'),
    roomGroup?: {
      groupId?: long(name='GroupId', example='1'),
      groupName?: string(name='GroupName', example='测试分组'),
      parentId?: long(name='ParentId', example='0'),
    }(name='RoomGroup'),
    roomId?: string(name='RoomId', example='0ffb7184xxxxx'),
    roomLabels?: [ 
      {
        labelId?: long(name='LabelId', example='1'),
        labelName?: string(name='LabelName', example='电视'),
      }
    ](name='RoomLabels'),
    roomLocation?: {
      desc?: string(name='Desc', example='xx市xx区xx街道xx号'),
      title?: string(name='Title', example='xxx公司'),
    }(name='RoomLocation'),
    roomName?: string(name='RoomName', example='测试会议室'),
    roomPicture?: string(name='RoomPicture', example='https://static.dingtalk.com/media/lADxxxxx.jpg'),
    roomStaffId?: string(name='RoomStaffId', example='0122414'),
    roomStatus?: int32(name='RoomStatus', example='0'),
    roomUnionId?: string(name='RoomUnionId'),
  }(name='result'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model QueryMeetingRoomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMeetingRoomResponseBody(name='body'),
}

/**
 * @summary 查询会议室详情
 *
 * @param tmpReq QueryMeetingRoomRequest
 * @param tmpHeader QueryMeetingRoomHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryMeetingRoomResponse
 */
async function queryMeetingRoomWithOptions(tmpReq: QueryMeetingRoomRequest, tmpHeader: QueryMeetingRoomHeaders, runtime: Util.RuntimeOptions): QueryMeetingRoomResponse {
  Util.validateModel(tmpReq);
  var request = new QueryMeetingRoomShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryMeetingRoomShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMeetingRoom',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryMeetingRoom`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询会议室详情
 *
 * @param request QueryMeetingRoomRequest
 * @return QueryMeetingRoomResponse
 */
async function queryMeetingRoom(request: QueryMeetingRoomRequest): QueryMeetingRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryMeetingRoomHeaders{};
  return queryMeetingRoomWithOptions(request, headers, runtime);
}

model QueryMeetingRoomGroupHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model QueryMeetingRoomGroupShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryMeetingRoomGroupRequest {
  groupId?: string(name='GroupId', description='This parameter is required.', example='172'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model QueryMeetingRoomGroupShrinkRequest {
  groupId?: string(name='GroupId', description='This parameter is required.', example='172'),
  tenantContextShrink?: string(name='TenantContext'),
}

model QueryMeetingRoomGroupResponseBody = {
  groupId?: long(name='groupId', example='172'),
  groupName?: string(name='groupName', example='测试分组'),
  parentId?: long(name='parentId', example='0'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model QueryMeetingRoomGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMeetingRoomGroupResponseBody(name='body'),
}

/**
 * @summary 查询会议室分组信息
 *
 * @param tmpReq QueryMeetingRoomGroupRequest
 * @param tmpHeader QueryMeetingRoomGroupHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryMeetingRoomGroupResponse
 */
async function queryMeetingRoomGroupWithOptions(tmpReq: QueryMeetingRoomGroupRequest, tmpHeader: QueryMeetingRoomGroupHeaders, runtime: Util.RuntimeOptions): QueryMeetingRoomGroupResponse {
  Util.validateModel(tmpReq);
  var request = new QueryMeetingRoomGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryMeetingRoomGroupShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMeetingRoomGroup',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryMeetingRoomGroup`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询会议室分组信息
 *
 * @param request QueryMeetingRoomGroupRequest
 * @return QueryMeetingRoomGroupResponse
 */
async function queryMeetingRoomGroup(request: QueryMeetingRoomGroupRequest): QueryMeetingRoomGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryMeetingRoomGroupHeaders{};
  return queryMeetingRoomGroupWithOptions(request, headers, runtime);
}

model QueryMeetingRoomGroupListHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model QueryMeetingRoomGroupListShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryMeetingRoomGroupListRequest {
  request?: map[string]any(name='Request'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model QueryMeetingRoomGroupListShrinkRequest {
  requestShrink?: string(name='Request'),
  tenantContextShrink?: string(name='TenantContext'),
}

model QueryMeetingRoomGroupListResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ 
    {
      groupId?: long(name='GroupId', example='172'),
      groupName?: string(name='GroupName', example='测试分组'),
      parentId?: long(name='ParentId', example='0'),
    }
  ](name='result'),
}

model QueryMeetingRoomGroupListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMeetingRoomGroupListResponseBody(name='body'),
}

/**
 * @summary 查询会议室分组列表
 *
 * @param tmpReq QueryMeetingRoomGroupListRequest
 * @param tmpHeader QueryMeetingRoomGroupListHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryMeetingRoomGroupListResponse
 */
async function queryMeetingRoomGroupListWithOptions(tmpReq: QueryMeetingRoomGroupListRequest, tmpHeader: QueryMeetingRoomGroupListHeaders, runtime: Util.RuntimeOptions): QueryMeetingRoomGroupListResponse {
  Util.validateModel(tmpReq);
  var request = new QueryMeetingRoomGroupListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryMeetingRoomGroupListShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.request)) {
    request.requestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.request, 'Request', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.requestShrink)) {
    body['Request'] = request.requestShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMeetingRoomGroupList',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryMeetingRoomGroupList`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询会议室分组列表
 *
 * @param request QueryMeetingRoomGroupListRequest
 * @return QueryMeetingRoomGroupListResponse
 */
async function queryMeetingRoomGroupList(request: QueryMeetingRoomGroupListRequest): QueryMeetingRoomGroupListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryMeetingRoomGroupListHeaders{};
  return queryMeetingRoomGroupListWithOptions(request, headers, runtime);
}

model QueryMeetingRoomListHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model QueryMeetingRoomListShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryMeetingRoomListRequest {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: long(name='NextToken', example='124L'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model QueryMeetingRoomListShrinkRequest {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: long(name='NextToken', example='124L'),
  tenantContextShrink?: string(name='TenantContext'),
}

model QueryMeetingRoomListResponseBody = {
  hasMore?: boolean(name='hasMore', example='true'),
  nextToken?: long(name='nextToken', example='123'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ 
    {
      corpId?: string(name='CorpId', example='ding994axxxx'),
      isvRoomId?: string(name='IsvRoomId', example='xxxIsvRoomId'),
      roomCapacity?: int32(name='RoomCapacity', example='10'),
      roomGroup?: {
        groupId?: long(name='GroupId', example='1'),
        groupName?: string(name='GroupName', example='测试分组'),
        parentId?: long(name='ParentId', example='0'),
      }(name='RoomGroup'),
      roomId?: string(name='RoomId', example='0ffb7xxxxx'),
      roomLabels?: [ 
        {
          labelId?: long(name='LabelId', example='1'),
          labelName?: string(name='LabelName', example='电视'),
        }
      ](name='RoomLabels'),
      roomLocation?: {
        desc?: string(name='Desc', example='xx市xx区xx街道xx号'),
        title?: string(name='Title', example='xxx公司'),
      }(name='RoomLocation'),
      roomName?: string(name='RoomName', example='测试会议室'),
      roomPicture?: string(name='RoomPicture', example='https://static.dingtalk.com/media/lADPxxxxx.jpg'),
      roomStaffId?: string(name='RoomStaffId', example='012241xxxxx'),
      roomStatus?: int32(name='RoomStatus', example='0'),
    }
  ](name='result'),
}

model QueryMeetingRoomListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMeetingRoomListResponseBody(name='body'),
}

/**
 * @summary 查询会议室列表
 *
 * @param tmpReq QueryMeetingRoomListRequest
 * @param tmpHeader QueryMeetingRoomListHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryMeetingRoomListResponse
 */
async function queryMeetingRoomListWithOptions(tmpReq: QueryMeetingRoomListRequest, tmpHeader: QueryMeetingRoomListHeaders, runtime: Util.RuntimeOptions): QueryMeetingRoomListResponse {
  Util.validateModel(tmpReq);
  var request = new QueryMeetingRoomListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryMeetingRoomListShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMeetingRoomList',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryMeetingRoomList`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询会议室列表
 *
 * @param request QueryMeetingRoomListRequest
 * @return QueryMeetingRoomListResponse
 */
async function queryMeetingRoomList(request: QueryMeetingRoomListRequest): QueryMeetingRoomListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryMeetingRoomListHeaders{};
  return queryMeetingRoomListWithOptions(request, headers, runtime);
}

model QueryMinutesHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model QueryMinutesShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryMinutesRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='61289fxxx'),
}

model QueryMinutesShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='61289fxxx'),
}

model QueryMinutesResponseBody = {
  audioList?: [ 
    {
      duration?: long(name='Duration', example='1000'),
      endTime?: long(name='EndTime', example='1000000000'),
      fileSize?: long(name='FileSize', example='1127942'),
      playUrl?: string(name='PlayUrl', example='https://xxx-hangzhou.oss-cn-hangzhou.aliyuncs.com/record_xxxx.mp3?Expires=1718045081&OSSAccessKeyId=TMP.3KdwHtvZxopmwacMZEdyb4WHLVmbArrNRB9CTKnR1MaJgmRjdmZczs6Rip66cgKgk2HhQon1yygvBnbY3uqEaZNeHBLcBa&Signature=OFWyAIY%2FdlzfwM9wIfEaKoAudkxxxxx'),
      recordId?: string(name='RecordId', example='123'),
      startTime?: long(name='StartTime', example='1000000000'),
      userId?: string(name='UserId', example='012345'),
    }
  ](name='audioList'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model QueryMinutesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMinutesResponseBody(name='body'),
}

/**
 * @summary 查询闪记录音
 *
 * @param tmpReq QueryMinutesRequest
 * @param tmpHeader QueryMinutesHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryMinutesResponse
 */
async function queryMinutesWithOptions(tmpReq: QueryMinutesRequest, tmpHeader: QueryMinutesHeaders, runtime: Util.RuntimeOptions): QueryMinutesResponse {
  Util.validateModel(tmpReq);
  var request = new QueryMinutesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryMinutesShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.conferenceId)) {
    body['conferenceId'] = request.conferenceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMinutes',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryMinutes`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询闪记录音
 *
 * @param request QueryMinutesRequest
 * @return QueryMinutesResponse
 */
async function queryMinutes(request: QueryMinutesRequest): QueryMinutesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryMinutesHeaders{};
  return queryMinutesWithOptions(request, headers, runtime);
}

model QueryMinutesSummaryHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model QueryMinutesSummaryShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryMinutesSummaryRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='607452e01401526ee39609e1'),
  summaryTypeList?: [ string ](name='summaryTypeList'),
}

model QueryMinutesSummaryShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='607452e01401526ee39609e1'),
  summaryTypeListShrink?: string(name='summaryTypeList'),
}

model QueryMinutesSummaryResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  summary?: {
    actions?: {
      end?: long(name='End', example='7910000'),
      id?: long(name='Id', example='2'),
      sentenceId?: long(name='SentenceId', example='2'),
      start?: long(name='Start', example='7901100'),
      text?: string(name='Text', example='内容'),
    }(name='Actions', example='{}'),
    autoChapters?: [ 
      {
        end?: long(name='End', example='7910000'),
        headline?: string(name='Headline', example='章节的一句话标题'),
        id?: long(name='Id', example='2'),
        start?: long(name='Start', example='7901100'),
        summary?: string(name='Summary', example='章节总结'),
      }
    ](name='AutoChapters', example='[]'),
    conversationalSummary?: [ 
      {
        speakerId?: string(name='SpeakerId', example='012345'),
        speakerName?: string(name='SpeakerName', example='发言人姓名'),
        summary?: string(name='Summary', example='发言人对应的总结'),
      }
    ](name='ConversationalSummary', example='[]'),
    keySentences?: {
      end?: long(name='End', example='7910000'),
      id?: long(name='Id', example='2'),
      sentenceId?: long(name='SentenceId', example='2'),
      start?: long(name='Start', example='7901100'),
      text?: string(name='Text', example='内容'),
    }(name='KeySentences', example='{}'),
    keywords?: [ string ](name='Keywords', example='[]'),
    paragraphSummary?: string(name='ParagraphSummary', example='全文摘要结果，全文摘要通过两三百字的篇幅将最重要的信息呈现出来，用于快速了解记录内容与主旨'),
    questionsAnsweringSummary?: [ 
      {
        answer?: string(name='Answer', example='问题'),
        question?: string(name='Question', example='回答'),
        sentenceIdsOfAnswer?: [ long ](name='SentenceIdsOfAnswer', example='[]'),
        sentenceIdsOfQuestion?: [ long ](name='SentenceIdsOfQuestion', example='[]'),
      }
    ](name='QuestionsAnsweringSummary', example='[]'),
  }(name='summary'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model QueryMinutesSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMinutesSummaryResponseBody(name='body'),
}

/**
 * @summary 查询会议闪记智能纪要
 *
 * @param tmpReq QueryMinutesSummaryRequest
 * @param tmpHeader QueryMinutesSummaryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryMinutesSummaryResponse
 */
async function queryMinutesSummaryWithOptions(tmpReq: QueryMinutesSummaryRequest, tmpHeader: QueryMinutesSummaryHeaders, runtime: Util.RuntimeOptions): QueryMinutesSummaryResponse {
  Util.validateModel(tmpReq);
  var request = new QueryMinutesSummaryShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryMinutesSummaryShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.summaryTypeList)) {
    request.summaryTypeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.summaryTypeList, 'summaryTypeList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.conferenceId)) {
    body['conferenceId'] = request.conferenceId;
  }
  if (!Util.isUnset(request.summaryTypeListShrink)) {
    body['summaryTypeList'] = request.summaryTypeListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMinutesSummary',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryMinutesSummary`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询会议闪记智能纪要
 *
 * @param request QueryMinutesSummaryRequest
 * @return QueryMinutesSummaryResponse
 */
async function queryMinutesSummary(request: QueryMinutesSummaryRequest): QueryMinutesSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryMinutesSummaryHeaders{};
  return queryMinutesSummaryWithOptions(request, headers, runtime);
}

model QueryMinutesTextHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model QueryMinutesTextShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryMinutesTextRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='607452e01401526ee39609e1'),
  direction?: string(name='direction', description='This parameter is required.', example='0'),
  maxResults?: long(name='maxResults', example='20'),
  nextToken?: string(name='nextToken', example='0'),
}

model QueryMinutesTextShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='607452e01401526ee39609e1'),
  direction?: string(name='direction', description='This parameter is required.', example='0'),
  maxResults?: long(name='maxResults', example='20'),
  nextToken?: string(name='nextToken', example='0'),
}

model QueryMinutesTextResponseBody = {
  hasMore?: boolean(name='hasMore', example='true'),
  nextToken?: string(name='nextToken', example='0'),
  paragraphList?: [ 
    {
      endTime?: long(name='EndTime', example='7910000'),
      nickName?: string(name='NickName', example='小钉'),
      paragraph?: string(name='Paragraph', example='123'),
      paragraphId?: long(name='ParagraphId', example='123'),
      recordId?: long(name='RecordId', example='44444'),
      sentenceList?: [ 
        {
          endTime?: long(name='EndTime', example='7910000'),
          sentence?: string(name='Sentence', example='这里是小钉'),
          startTime?: long(name='StartTime', example='7910000'),
          userId?: string(name='UserId', example='012345'),
          wordList?: [ 
            {
              endTime?: long(name='EndTime', example='7910000'),
              startTime?: long(name='StartTime', example='7910000'),
              word?: string(name='Word', example='单词'),
              wordId?: string(name='WordId', example='172'),
            }
          ](name='WordList', example='[]'),
        }
      ](name='SentenceList', example='[]'),
      startTime?: long(name='StartTime', example='7910000'),
      userId?: string(name='UserId', example='012345'),
    }
  ](name='paragraphList'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model QueryMinutesTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMinutesTextResponseBody(name='body'),
}

/**
 * @summary 查询会议闪记的文本信息
 *
 * @param tmpReq QueryMinutesTextRequest
 * @param tmpHeader QueryMinutesTextHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryMinutesTextResponse
 */
async function queryMinutesTextWithOptions(tmpReq: QueryMinutesTextRequest, tmpHeader: QueryMinutesTextHeaders, runtime: Util.RuntimeOptions): QueryMinutesTextResponse {
  Util.validateModel(tmpReq);
  var request = new QueryMinutesTextShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryMinutesTextShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.conferenceId)) {
    body['conferenceId'] = request.conferenceId;
  }
  if (!Util.isUnset(request.direction)) {
    body['direction'] = request.direction;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['nextToken'] = request.nextToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMinutesText',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryMinutesText`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询会议闪记的文本信息
 *
 * @param request QueryMinutesTextRequest
 * @return QueryMinutesTextResponse
 */
async function queryMinutesText(request: QueryMinutesTextRequest): QueryMinutesTextResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryMinutesTextHeaders{};
  return queryMinutesTextWithOptions(request, headers, runtime);
}

model QueryOrgHonorsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='243331014234180628'),
  }(name='AccountContext'),
}

model QueryOrgHonorsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryOrgHonorsRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='487986704507650'),
  }(name='TenantContext'),
  maxResults?: int32(name='maxResults', example='48'),
  nextToken?: string(name='nextToken', description='This parameter is required.', example='15'),
  orgId?: long(name='orgId', description='This parameter is required.', example='123456'),
}

model QueryOrgHonorsShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  maxResults?: int32(name='maxResults', example='48'),
  nextToken?: string(name='nextToken', description='This parameter is required.', example='15'),
  orgId?: long(name='orgId', description='This parameter is required.', example='123456'),
}

model QueryOrgHonorsResponseBody = {
  nextToken?: string(name='nextToken', example='15'),
  openHonors?: [ 
    {
      honorDesc?: string(name='honorDesc'),
      honorId?: long(name='honorId', example='21658579'),
      honorImgUrl?: string(name='honorImgUrl', example='https://xxxx.ali-cdn.com/jfejfi.jpg'),
      honorName?: string(name='honorName'),
      honorPendantImgUrl?: string(name='honorPendantImgUrl', example='https://xxxx.ali-cdn.com/jfejfi.jpg'),
    }
  ](name='openHonors'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model QueryOrgHonorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryOrgHonorsResponseBody(name='body'),
}

/**
 * @summary 查询企业荣誉
 *
 * @param tmpReq QueryOrgHonorsRequest
 * @param tmpHeader QueryOrgHonorsHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryOrgHonorsResponse
 */
async function queryOrgHonorsWithOptions(tmpReq: QueryOrgHonorsRequest, tmpHeader: QueryOrgHonorsHeaders, runtime: Util.RuntimeOptions): QueryOrgHonorsResponse {
  Util.validateModel(tmpReq);
  var request = new QueryOrgHonorsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryOrgHonorsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['nextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.orgId)) {
    body['orgId'] = request.orgId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryOrgHonors',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/aliding/v1/honor/queryOrgHonors`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询企业荣誉
 *
 * @param request QueryOrgHonorsRequest
 * @return QueryOrgHonorsResponse
 */
async function queryOrgHonors(request: QueryOrgHonorsRequest): QueryOrgHonorsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryOrgHonorsHeaders{};
  return queryOrgHonorsWithOptions(request, headers, runtime);
}

model QueryOrgTodoTasksHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model QueryOrgTodoTasksShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryOrgTodoTasksRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  isDone?: boolean(name='isDone', example='true'),
  nextToken?: string(name='nextToken', example='0'),
}

model QueryOrgTodoTasksShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  isDone?: boolean(name='isDone', example='true'),
  nextToken?: string(name='nextToken', example='0'),
}

model QueryOrgTodoTasksResponseBody = {
  nextToken?: string(name='nextToken', example='15'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  todoCards?: [ 
    {
      bizTag?: string(name='bizTag', example='isv_dingtalkTodo'),
      createdTime?: long(name='createdTime', example='1617675000000'),
      creatorId?: string(name='creatorId', example='xxxx'),
      detailUrl?: {
        appUrl?: string(name='appUrl', example='https://www.dingtalk.com'),
        pcUrl?: string(name='pcUrl', example='https://www.dingtalk.com'),
      }(name='detailUrl'),
      dueTime?: long(name='dueTime', example='1617675000000'),
      isDone?: boolean(name='isDone', example='true'),
      modifiedTime?: long(name='modifiedTime', example='1617675000000'),
      priority?: int32(name='priority', example='10'),
      sourceId?: string(name='sourceId', example='isv_dingtalkTodo1'),
      subject?: string(name='subject', example='接入钉钉待办'),
      taskId?: string(name='taskId', example='taskOPJpwtwPVNGIFKURjrzd'),
    }
  ](name='todoCards'),
}

model QueryOrgTodoTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryOrgTodoTasksResponseBody(name='body'),
}

/**
 * @summary 查询企业代办
 *
 * @param tmpReq QueryOrgTodoTasksRequest
 * @param tmpHeader QueryOrgTodoTasksHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryOrgTodoTasksResponse
 */
async function queryOrgTodoTasksWithOptions(tmpReq: QueryOrgTodoTasksRequest, tmpHeader: QueryOrgTodoTasksHeaders, runtime: Util.RuntimeOptions): QueryOrgTodoTasksResponse {
  Util.validateModel(tmpReq);
  var request = new QueryOrgTodoTasksShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryOrgTodoTasksShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.isDone)) {
    body['isDone'] = request.isDone;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['nextToken'] = request.nextToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryOrgTodoTasks',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/task/queryOrgTodoTasks`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询企业代办
 *
 * @param request QueryOrgTodoTasksRequest
 * @return QueryOrgTodoTasksResponse
 */
async function queryOrgTodoTasks(request: QueryOrgTodoTasksRequest): QueryOrgTodoTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryOrgTodoTasksHeaders{};
  return queryOrgTodoTasksWithOptions(request, headers, runtime);
}

model QueryRecordMinutesUrlHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model QueryRecordMinutesUrlShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryRecordMinutesUrlRequest {
  bizType?: string(name='BizType', description='This parameter is required.', example='minutes'),
  conferenceId?: string(name='ConferenceId', description='This parameter is required.', example='1dddwrqrq'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model QueryRecordMinutesUrlShrinkRequest {
  bizType?: string(name='BizType', description='This parameter is required.', example='minutes'),
  conferenceId?: string(name='ConferenceId', description='This parameter is required.', example='1dddwrqrq'),
  tenantContextShrink?: string(name='TenantContext'),
}

model QueryRecordMinutesUrlResponseBody = {
  recordMinutesUrls?: [ 
    {
      recordMinutesUrl?: string(name='RecordMinutesUrl', example='url'),
    }
  ](name='recordMinutesUrls'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model QueryRecordMinutesUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryRecordMinutesUrlResponseBody(name='body'),
}

/**
 * @summary 查询闪记的链接，可通过链接查看闪记内容
 *
 * @param tmpReq QueryRecordMinutesUrlRequest
 * @param tmpHeader QueryRecordMinutesUrlHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryRecordMinutesUrlResponse
 */
async function queryRecordMinutesUrlWithOptions(tmpReq: QueryRecordMinutesUrlRequest, tmpHeader: QueryRecordMinutesUrlHeaders, runtime: Util.RuntimeOptions): QueryRecordMinutesUrlResponse {
  Util.validateModel(tmpReq);
  var request = new QueryRecordMinutesUrlShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryRecordMinutesUrlShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizType)) {
    body['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.conferenceId)) {
    body['ConferenceId'] = request.conferenceId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryRecordMinutesUrl',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryRecordMinutesUrl`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询闪记的链接，可通过链接查看闪记内容
 *
 * @param request QueryRecordMinutesUrlRequest
 * @return QueryRecordMinutesUrlResponse
 */
async function queryRecordMinutesUrl(request: QueryRecordMinutesUrlRequest): QueryRecordMinutesUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryRecordMinutesUrlHeaders{};
  return queryRecordMinutesUrlWithOptions(request, headers, runtime);
}

model QueryReportDetailHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model QueryReportDetailShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryReportDetailRequest {
  reportId?: string(name='ReportId', description='This parameter is required.', example='18054XXX'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model QueryReportDetailShrinkRequest {
  reportId?: string(name='ReportId', description='This parameter is required.', example='18054XXX'),
  tenantContextShrink?: string(name='TenantContext'),
}

model QueryReportDetailResponseBody = {
  content?: [ 
    {
      images?: [ string ](name='Images'),
      key?: string(name='Key'),
      sort?: string(name='Sort', example='0'),
      type?: string(name='Type', example='1'),
      value?: string(name='Value'),
    }
  ](name='content'),
  createTime?: long(name='createTime', example='1691980997000'),
  creatorId?: string(name='creatorId', example='012345'),
  creatorName?: string(name='creatorName'),
  deptName?: string(name='deptName'),
  modifiedTime?: long(name='modifiedTime', example='1691980997000'),
  remark?: string(name='remark'),
  reportId?: string(name='reportId', example='1231232134'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  templateName?: string(name='templateName'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model QueryReportDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryReportDetailResponseBody(name='body'),
}

/**
 * @summary 获取日志详情
 *
 * @param tmpReq QueryReportDetailRequest
 * @param tmpHeader QueryReportDetailHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryReportDetailResponse
 */
async function queryReportDetailWithOptions(tmpReq: QueryReportDetailRequest, tmpHeader: QueryReportDetailHeaders, runtime: Util.RuntimeOptions): QueryReportDetailResponse {
  Util.validateModel(tmpReq);
  var request = new QueryReportDetailShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryReportDetailShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.reportId)) {
    body['ReportId'] = request.reportId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryReportDetail',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/log/queryReportDetail`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取日志详情
 *
 * @param request QueryReportDetailRequest
 * @return QueryReportDetailResponse
 */
async function queryReportDetail(request: QueryReportDetailRequest): QueryReportDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryReportDetailHeaders{};
  return queryReportDetailWithOptions(request, headers, runtime);
}

model QueryScheduleConferenceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model QueryScheduleConferenceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryScheduleConferenceRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  scheduleConferenceId?: string(name='scheduleConferenceId', description='This parameter is required.', example='2a489c68-xxxx-xxxx-xxxx-xxxxxxxxxxxx'),
}

model QueryScheduleConferenceShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  scheduleConferenceId?: string(name='scheduleConferenceId', description='This parameter is required.', example='2a489c68-xxxx-xxxx-xxxx-xxxxxxxxxxxx'),
}

model QueryScheduleConferenceResponseBody = {
  endTime?: long(name='endTime', example='1687928400000'),
  phones?: [ string ](name='phones', example='[ "+86123xxxx" ]'),
  requestId?: string(name='requestId', example='xxxxx'),
  roomCode?: string(name='roomCode', example='838 722 xxxxx'),
  scheduleConferenceId?: string(name='scheduleConferenceId', example='2a489c68-xxxx-xxxx-xxxx-xxxxxxxxxxxx'),
  startTime?: long(name='startTime', example='1687924800000'),
  title?: string(name='title', example='预约会议标题'),
  url?: string(name='url', example='https://meeting.dingtalk.com/j/Bsbp3ixxxxxUyJJ9'),
}

model QueryScheduleConferenceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryScheduleConferenceResponseBody(name='body'),
}

/**
 * @summary 查询预约会议
 *
 * @param tmpReq QueryScheduleConferenceRequest
 * @param tmpHeader QueryScheduleConferenceHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryScheduleConferenceResponse
 */
async function queryScheduleConferenceWithOptions(tmpReq: QueryScheduleConferenceRequest, tmpHeader: QueryScheduleConferenceHeaders, runtime: Util.RuntimeOptions): QueryScheduleConferenceResponse {
  Util.validateModel(tmpReq);
  var request = new QueryScheduleConferenceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryScheduleConferenceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.scheduleConferenceId)) {
    body['scheduleConferenceId'] = request.scheduleConferenceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryScheduleConference',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryScheduleConference`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询预约会议
 *
 * @param request QueryScheduleConferenceRequest
 * @return QueryScheduleConferenceResponse
 */
async function queryScheduleConference(request: QueryScheduleConferenceRequest): QueryScheduleConferenceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryScheduleConferenceHeaders{};
  return queryScheduleConferenceWithOptions(request, headers, runtime);
}

model QueryScheduleConferenceInfoHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model QueryScheduleConferenceInfoShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryScheduleConferenceInfoRequest {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='19'),
  scheduleConferenceId?: string(name='ScheduleConferenceId', example='636cf59f2b032f014ae32902'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model QueryScheduleConferenceInfoShrinkRequest {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='19'),
  scheduleConferenceId?: string(name='ScheduleConferenceId', example='636cf59f2b032f014ae32902'),
  tenantContextShrink?: string(name='TenantContext'),
}

model QueryScheduleConferenceInfoResponseBody = {
  conferenceList?: [ 
    {
      conferenceId?: string(name='ConferenceId', example='636cf59f2b032f014ae32902'),
      endTime?: long(name='EndTime', example='1668087732000'),
      roomCode?: string(name='RoomCode', example='123456789'),
      startTime?: long(name='StartTime', example='1668087731000'),
      status?: int32(name='Status', example='2'),
      title?: string(name='Title', example='xxx发起的视频会议'),
    }
  ](name='conferenceList'),
  nextToken?: string(name='nextToken', example='19'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: int32(name='totalCount', example='20'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model QueryScheduleConferenceInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryScheduleConferenceInfoResponseBody(name='body'),
}

/**
 * @summary 查询预约会议历史会议信息
 *
 * @param tmpReq QueryScheduleConferenceInfoRequest
 * @param tmpHeader QueryScheduleConferenceInfoHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryScheduleConferenceInfoResponse
 */
async function queryScheduleConferenceInfoWithOptions(tmpReq: QueryScheduleConferenceInfoRequest, tmpHeader: QueryScheduleConferenceInfoHeaders, runtime: Util.RuntimeOptions): QueryScheduleConferenceInfoResponse {
  Util.validateModel(tmpReq);
  var request = new QueryScheduleConferenceInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryScheduleConferenceInfoShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.scheduleConferenceId)) {
    body['ScheduleConferenceId'] = request.scheduleConferenceId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryScheduleConferenceInfo',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryScheduleConferenceInfo`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询预约会议历史会议信息
 *
 * @param request QueryScheduleConferenceInfoRequest
 * @return QueryScheduleConferenceInfoResponse
 */
async function queryScheduleConferenceInfo(request: QueryScheduleConferenceInfoRequest): QueryScheduleConferenceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryScheduleConferenceInfoHeaders{};
  return queryScheduleConferenceInfoWithOptions(request, headers, runtime);
}

model QueryUserHonorsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='243331014234180628'),
  }(name='AccountContext'),
}

model QueryUserHonorsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryUserHonorsRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='189477710813728'),
  }(name='TenantContext'),
  maxResults?: int32(name='maxResults', example='200'),
  nextToken?: string(name='nextToken', description='This parameter is required.', example='15'),
  orgId?: long(name='orgId', description='This parameter is required.', example='123456'),
  userId?: string(name='userId', description='This parameter is required.', example='123123'),
}

model QueryUserHonorsShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  maxResults?: int32(name='maxResults', example='200'),
  nextToken?: string(name='nextToken', description='This parameter is required.', example='15'),
  orgId?: long(name='orgId', description='This parameter is required.', example='123456'),
  userId?: string(name='userId', description='This parameter is required.', example='123123'),
}

model QueryUserHonorsResponseBody = {
  honors?: [ 
    {
      expirationTime?: long(name='expirationTime', example='null'),
      grantHistory?: [ 
        {
          grantTime?: long(name='grantTime', example='12312312312312312'),
          senderUserid?: string(name='senderUserid', example='363784'),
        }
      ](name='grantHistory'),
      honorDesc?: string(name='honorDesc'),
      honorId?: string(name='honorId', example='21659398'),
      honorName?: string(name='honorName'),
    }
  ](name='honors'),
  nextToken?: string(name='nextToken', example='http-trigger-nodejs10.luoni-old.1431999136518149.cn-hangzhou.fc.devsapp.net'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model QueryUserHonorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUserHonorsResponseBody(name='body'),
}

/**
 * @summary 查询员工勋章列表
 *
 * @param tmpReq QueryUserHonorsRequest
 * @param tmpHeader QueryUserHonorsHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryUserHonorsResponse
 */
async function queryUserHonorsWithOptions(tmpReq: QueryUserHonorsRequest, tmpHeader: QueryUserHonorsHeaders, runtime: Util.RuntimeOptions): QueryUserHonorsResponse {
  Util.validateModel(tmpReq);
  var request = new QueryUserHonorsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryUserHonorsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['nextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.orgId)) {
    body['orgId'] = request.orgId;
  }
  if (!Util.isUnset(request.userId)) {
    body['userId'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryUserHonors',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/aliding/v1/honor/queryUserHonors`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询员工勋章列表
 *
 * @param request QueryUserHonorsRequest
 * @return QueryUserHonorsResponse
 */
async function queryUserHonors(request: QueryUserHonorsRequest): QueryUserHonorsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryUserHonorsHeaders{};
  return queryUserHonorsWithOptions(request, headers, runtime);
}

model RecallHonorHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='1323845308033417'),
  }(name='AccountContext'),
}

model RecallHonorShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model RecallHonorRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='4'),
  }(name='TenantContext'),
  honorId?: string(name='honorId', description='This parameter is required.', example='21660610'),
  orgId?: long(name='orgId', description='This parameter is required.', example='345391052'),
  userId?: string(name='userId', description='This parameter is required.', example='363784'),
}

model RecallHonorShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  honorId?: string(name='honorId', description='This parameter is required.', example='21660610'),
  orgId?: long(name='orgId', description='This parameter is required.', example='345391052'),
  userId?: string(name='userId', description='This parameter is required.', example='363784'),
}

model RecallHonorResponseBody = {
  content?: {
    data?: any(name='data', example='success'),
  }(name='content'),
  errorCode?: string(name='errorCode', example='040008'),
  errorCtx?: map[string]any(name='errorCtx'),
  errorMsg?: string(name='errorMsg'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='True'),
}

model RecallHonorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecallHonorResponseBody(name='body'),
}

/**
 * @summary 收回勋章
 *
 * @param tmpReq RecallHonorRequest
 * @param tmpHeader RecallHonorHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return RecallHonorResponse
 */
async function recallHonorWithOptions(tmpReq: RecallHonorRequest, tmpHeader: RecallHonorHeaders, runtime: Util.RuntimeOptions): RecallHonorResponse {
  Util.validateModel(tmpReq);
  var request = new RecallHonorShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new RecallHonorShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.honorId)) {
    body['honorId'] = request.honorId;
  }
  if (!Util.isUnset(request.orgId)) {
    body['orgId'] = request.orgId;
  }
  if (!Util.isUnset(request.userId)) {
    body['userId'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecallHonor',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/aliding/v1/honor/recallHonor`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 收回勋章
 *
 * @param request RecallHonorRequest
 * @return RecallHonorResponse
 */
async function recallHonor(request: RecallHonorRequest): RecallHonorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new RecallHonorHeaders{};
  return recallHonorWithOptions(request, headers, runtime);
}

model ReceiverListReportHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model ReceiverListReportShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ReceiverListReportRequest {
  offset?: long(name='Offset', description='This parameter is required.', example='10'),
  reportId?: string(name='ReportId', description='This parameter is required.', example='173xxxx'),
  size?: long(name='Size', description='This parameter is required.', example='10'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model ReceiverListReportShrinkRequest {
  offset?: long(name='Offset', description='This parameter is required.', example='10'),
  reportId?: string(name='ReportId', description='This parameter is required.', example='173xxxx'),
  size?: long(name='Size', description='This parameter is required.', example='10'),
  tenantContextShrink?: string(name='TenantContext'),
}

model ReceiverListReportResponseBody = {
  hasMore?: boolean(name='hasMore', example='true'),
  nextCursor?: long(name='nextCursor', example='132131312312'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  useridList?: [ string ](name='useridList'),
}

model ReceiverListReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReceiverListReportResponseBody(name='body'),
}

/**
 * @summary 获取日志接收人员列表
 *
 * @param tmpReq ReceiverListReportRequest
 * @param tmpHeader ReceiverListReportHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReceiverListReportResponse
 */
async function receiverListReportWithOptions(tmpReq: ReceiverListReportRequest, tmpHeader: ReceiverListReportHeaders, runtime: Util.RuntimeOptions): ReceiverListReportResponse {
  Util.validateModel(tmpReq);
  var request = new ReceiverListReportShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new ReceiverListReportShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.offset)) {
    body['Offset'] = request.offset;
  }
  if (!Util.isUnset(request.reportId)) {
    body['ReportId'] = request.reportId;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ReceiverListReport',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/log/receiverListReport`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取日志接收人员列表
 *
 * @param request ReceiverListReportRequest
 * @return ReceiverListReportResponse
 */
async function receiverListReport(request: ReceiverListReportRequest): ReceiverListReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ReceiverListReportHeaders{};
  return receiverListReportWithOptions(request, headers, runtime);
}

model RedirectTaskHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model RedirectTaskShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model RedirectTaskRequest {
  appType?: string(name='AppType', description='This parameter is required.', example='APP_PBKxxx'),
  byManager?: string(name='ByManager', example='y'),
  language?: string(name='Language', example='zh-CN'),
  nowActionExecutorId?: string(name='NowActionExecutorId', description='This parameter is required.', example='123456'),
  processInstanceId?: string(name='ProcessInstanceId', description='This parameter is required.', example='instxxxx'),
  remark?: string(name='Remark', example='remark'),
  systemToken?: string(name='SystemToken', description='This parameter is required.', example='hexxxx'),
  taskId?: long(name='TaskId', description='This parameter is required.', example='hexxxx'),
}

model RedirectTaskResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model RedirectTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RedirectTaskResponseBody(name='body'),
}

/**
 * @summary 转交任务
 *
 * @param request RedirectTaskRequest
 * @param tmpHeader RedirectTaskHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return RedirectTaskResponse
 */
async function redirectTaskWithOptions(request: RedirectTaskRequest, tmpHeader: RedirectTaskHeaders, runtime: Util.RuntimeOptions): RedirectTaskResponse {
  Util.validateModel(request);
  var headers = new RedirectTaskShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.byManager)) {
    body['ByManager'] = request.byManager;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.nowActionExecutorId)) {
    body['NowActionExecutorId'] = request.nowActionExecutorId;
  }
  if (!Util.isUnset(request.processInstanceId)) {
    body['ProcessInstanceId'] = request.processInstanceId;
  }
  if (!Util.isUnset(request.remark)) {
    body['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RedirectTask',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/redirectTask`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 转交任务
 *
 * @param request RedirectTaskRequest
 * @return RedirectTaskResponse
 */
async function redirectTask(request: RedirectTaskRequest): RedirectTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new RedirectTaskHeaders{};
  return redirectTaskWithOptions(request, headers, runtime);
}

model RemoveAttendeeHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='123456'),
  }(name='AccountContext'),
}

model RemoveAttendeeShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model RemoveAttendeeRequest {
  attendeesToRemove?: [ string ](name='AttendeesToRemove'),
  calendarId?: string(name='CalendarId', description='This parameter is required.', example='primary'),
  eventId?: string(name='EventId', description='This parameter is required.', example='iiiP35sJadba8aBSgjrwPRKgiEiF'),
}

model RemoveAttendeeShrinkRequest {
  attendeesToRemoveShrink?: string(name='AttendeesToRemove'),
  calendarId?: string(name='CalendarId', description='This parameter is required.', example='primary'),
  eventId?: string(name='EventId', description='This parameter is required.', example='iiiP35sJadba8aBSgjrwPRKgiEiF'),
}

model RemoveAttendeeResponseBody = {
  content?: {
    data?: any(name='Data', example='[]'),
  }(name='Content'),
  errorCode?: string(name='ErrorCode', example='success'),
  errorCtx?: map[string]any(name='ErrorCtx'),
  errorMsg?: string(name='ErrorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', description='RequestId', example='A348BA5D-FFD4-57E4-9450-23A14D72F331'),
  success?: boolean(name='Success', example='True'),
}

model RemoveAttendeeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveAttendeeResponseBody(name='body'),
}

/**
 * @summary 删除日程参与者
 *
 * @param tmpReq RemoveAttendeeRequest
 * @param tmpHeader RemoveAttendeeHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveAttendeeResponse
 */
async function removeAttendeeWithOptions(tmpReq: RemoveAttendeeRequest, tmpHeader: RemoveAttendeeHeaders, runtime: Util.RuntimeOptions): RemoveAttendeeResponse {
  Util.validateModel(tmpReq);
  var request = new RemoveAttendeeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new RemoveAttendeeShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.attendeesToRemove)) {
    request.attendeesToRemoveShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.attendeesToRemove, 'AttendeesToRemove', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.attendeesToRemoveShrink)) {
    body['AttendeesToRemove'] = request.attendeesToRemoveShrink;
  }
  if (!Util.isUnset(request.calendarId)) {
    body['CalendarId'] = request.calendarId;
  }
  if (!Util.isUnset(request.eventId)) {
    body['EventId'] = request.eventId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveAttendee',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/removeAttendee`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除日程参与者
 *
 * @param request RemoveAttendeeRequest
 * @return RemoveAttendeeResponse
 */
async function removeAttendee(request: RemoveAttendeeRequest): RemoveAttendeeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new RemoveAttendeeHeaders{};
  return removeAttendeeWithOptions(request, headers, runtime);
}

model RemoveMeetingRoomsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model RemoveMeetingRoomsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model RemoveMeetingRoomsRequest {
  calendarId?: string(name='CalendarId', description='This parameter is required.', example='primary'),
  eventId?: string(name='EventId', description='This parameter is required.', example='U5Kxxxxx'),
  meetingRoomsToRemove?: [ 
    {
      roomId?: string(name='RoomId', description='This parameter is required.', example='U5Kxxxxx'),
    }
  ](name='MeetingRoomsToRemove'),
}

model RemoveMeetingRoomsShrinkRequest {
  calendarId?: string(name='CalendarId', description='This parameter is required.', example='primary'),
  eventId?: string(name='EventId', description='This parameter is required.', example='U5Kxxxxx'),
  meetingRoomsToRemoveShrink?: string(name='MeetingRoomsToRemove'),
}

model RemoveMeetingRoomsResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model RemoveMeetingRoomsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveMeetingRoomsResponseBody(name='body'),
}

/**
 * @summary 取消预定会议室
 *
 * @param tmpReq RemoveMeetingRoomsRequest
 * @param tmpHeader RemoveMeetingRoomsHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveMeetingRoomsResponse
 */
async function removeMeetingRoomsWithOptions(tmpReq: RemoveMeetingRoomsRequest, tmpHeader: RemoveMeetingRoomsHeaders, runtime: Util.RuntimeOptions): RemoveMeetingRoomsResponse {
  Util.validateModel(tmpReq);
  var request = new RemoveMeetingRoomsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new RemoveMeetingRoomsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.meetingRoomsToRemove)) {
    request.meetingRoomsToRemoveShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.meetingRoomsToRemove, 'MeetingRoomsToRemove', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.calendarId)) {
    body['CalendarId'] = request.calendarId;
  }
  if (!Util.isUnset(request.eventId)) {
    body['EventId'] = request.eventId;
  }
  if (!Util.isUnset(request.meetingRoomsToRemoveShrink)) {
    body['MeetingRoomsToRemove'] = request.meetingRoomsToRemoveShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveMeetingRooms',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/removeMeetingRooms`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 取消预定会议室
 *
 * @param request RemoveMeetingRoomsRequest
 * @return RemoveMeetingRoomsResponse
 */
async function removeMeetingRooms(request: RemoveMeetingRoomsRequest): RemoveMeetingRoomsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new RemoveMeetingRoomsHeaders{};
  return removeMeetingRoomsWithOptions(request, headers, runtime);
}

model RespondEventHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model RespondEventShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model RespondEventRequest {
  calendarId?: string(name='CalendarId', description='This parameter is required.', example='primary'),
  eventId?: string(name='EventId', description='This parameter is required.', example='RHN2REJFc2w4VHNiUUlvcVB0ejFydz09'),
  responseStatus?: string(name='ResponseStatus', description='This parameter is required.', example='accepted'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model RespondEventShrinkRequest {
  calendarId?: string(name='CalendarId', description='This parameter is required.', example='primary'),
  eventId?: string(name='EventId', description='This parameter is required.', example='RHN2REJFc2w4VHNiUUlvcVB0ejFydz09'),
  responseStatus?: string(name='ResponseStatus', description='This parameter is required.', example='accepted'),
  tenantContextShrink?: string(name='TenantContext'),
}

model RespondEventResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model RespondEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RespondEventResponseBody(name='body'),
}

/**
 * @summary 设置日程响应邀请状态
 *
 * @param tmpReq RespondEventRequest
 * @param tmpHeader RespondEventHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return RespondEventResponse
 */
async function respondEventWithOptions(tmpReq: RespondEventRequest, tmpHeader: RespondEventHeaders, runtime: Util.RuntimeOptions): RespondEventResponse {
  Util.validateModel(tmpReq);
  var request = new RespondEventShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new RespondEventShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.calendarId)) {
    body['CalendarId'] = request.calendarId;
  }
  if (!Util.isUnset(request.eventId)) {
    body['EventId'] = request.eventId;
  }
  if (!Util.isUnset(request.responseStatus)) {
    body['ResponseStatus'] = request.responseStatus;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RespondEvent',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/respondEvent`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 设置日程响应邀请状态
 *
 * @param request RespondEventRequest
 * @return RespondEventResponse
 */
async function respondEvent(request: RespondEventRequest): RespondEventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new RespondEventHeaders{};
  return respondEventWithOptions(request, headers, runtime);
}

model RetrieveRunHeaders {
  commonHeaders?: map[string]string,
  accountId?: string(name='accountId', example='123456'),
}

model RetrieveRunRequest {
  assistantId?: string(name='assistantId', description='This parameter is required.', example='assistantId1'),
  originalAssistantId?: string(name='originalAssistantId', example='assistantId'),
  runId?: string(name='runId', example='runId123'),
  sourceIdOfOriginalAssistantId?: string(name='sourceIdOfOriginalAssistantId', example='agentKey1'),
  sourceTypeOfOriginalAssistantId?: string(name='sourceTypeOfOriginalAssistantId', example='1'),
}

model RetrieveRunResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  run?: {
    cancelledAt?: long(name='cancelledAt'),
    completedAt?: long(name='completedAt'),
    createAt?: long(name='createAt'),
    expiresAt?: long(name='expiresAt'),
    failedAt?: long(name='failedAt'),
    id?: string(name='id'),
    lastErrorMsg?: string(name='lastErrorMsg'),
    startedAt?: long(name='startedAt'),
    status?: string(name='status'),
    threadId?: string(name='threadId'),
  }(name='run'),
}

model RetrieveRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RetrieveRunResponseBody(name='body'),
}

/**
 * @summary 查询运行
 *
 * @param request RetrieveRunRequest
 * @param headers RetrieveRunHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return RetrieveRunResponse
 */
async function retrieveRunWithOptions(request: RetrieveRunRequest, headers: RetrieveRunHeaders, runtime: Util.RuntimeOptions): RetrieveRunResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.assistantId)) {
    body['assistantId'] = request.assistantId;
  }
  if (!Util.isUnset(request.originalAssistantId)) {
    body['originalAssistantId'] = request.originalAssistantId;
  }
  if (!Util.isUnset(request.runId)) {
    body['runId'] = request.runId;
  }
  if (!Util.isUnset(request.sourceIdOfOriginalAssistantId)) {
    body['sourceIdOfOriginalAssistantId'] = request.sourceIdOfOriginalAssistantId;
  }
  if (!Util.isUnset(request.sourceTypeOfOriginalAssistantId)) {
    body['sourceTypeOfOriginalAssistantId'] = request.sourceTypeOfOriginalAssistantId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountId)) {
    realHeaders['accountId'] = Util.toJSONString(headers.accountId);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RetrieveRun',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/ai/v1/assistant/retrieveRun`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询运行
 *
 * @param request RetrieveRunRequest
 * @return RetrieveRunResponse
 */
async function retrieveRun(request: RetrieveRunRequest): RetrieveRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new RetrieveRunHeaders{};
  return retrieveRunWithOptions(request, headers, runtime);
}

model SaveContentHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model SaveContentShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model SaveContentRequest {
  contents?: [ 
    {
      content?: string(name='Content', description='This parameter is required.', example='### 序号1'),
      contentType?: string(name='ContentType', description='This parameter is required.', example='markdown'),
      key?: string(name='Key', description='This parameter is required.', example='今日完成工作'),
      sort?: long(name='Sort', description='This parameter is required.', example='1'),
      type?: long(name='Type', description='This parameter is required.', example='1'),
    }
  ](name='Contents', description='This parameter is required.', example='[]'),
  ddFrom?: string(name='DdFrom', description='This parameter is required.', example='client'),
  templateId?: string(name='TemplateId', description='This parameter is required.', example='sdfafdsfsafdfsaf'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model SaveContentShrinkRequest {
  contentsShrink?: string(name='Contents', description='This parameter is required.', example='[]'),
  ddFrom?: string(name='DdFrom', description='This parameter is required.', example='client'),
  templateId?: string(name='TemplateId', description='This parameter is required.', example='sdfafdsfsafdfsaf'),
  tenantContextShrink?: string(name='TenantContext'),
}

model SaveContentResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model SaveContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveContentResponseBody(name='body'),
}

/**
 * @summary 保存日志内容
 *
 * @param tmpReq SaveContentRequest
 * @param tmpHeader SaveContentHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return SaveContentResponse
 */
async function saveContentWithOptions(tmpReq: SaveContentRequest, tmpHeader: SaveContentHeaders, runtime: Util.RuntimeOptions): SaveContentResponse {
  Util.validateModel(tmpReq);
  var request = new SaveContentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new SaveContentShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.contents)) {
    request.contentsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.contents, 'Contents', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.contentsShrink)) {
    body['Contents'] = request.contentsShrink;
  }
  if (!Util.isUnset(request.ddFrom)) {
    body['DdFrom'] = request.ddFrom;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SaveContent',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/log/saveContent`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 保存日志内容
 *
 * @param request SaveContentRequest
 * @return SaveContentResponse
 */
async function saveContent(request: SaveContentRequest): SaveContentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SaveContentHeaders{};
  return saveContentWithOptions(request, headers, runtime);
}

model SaveFormDataHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model SaveFormDataShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model SaveFormDataRequest {
  appType?: string(name='AppType', description='This parameter is required.', example='APP_PBKxxx'),
  formDataJson?: string(name='FormDataJson', description='This parameter is required.', example='{\\"textField_jcpm6agt\\": \\"单行\\",\\"employeeField_jcos0sar\\": [\\"workno\\"]}'),
  formUuid?: string(name='FormUuid', description='This parameter is required.', example='FORM-EF6Y4G8WO2FN0SUB43TDQ3CGC3FMFQ1G9400RCJ3'),
  language?: string(name='Language', example='zh_CN'),
  systemToken?: string(name='SystemToken', description='This parameter is required.', example='hexxxx'),
}

model SaveFormDataResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: string(name='result', example='FORM-EF6xxx'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model SaveFormDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveFormDataResponseBody(name='body'),
}

/**
 * @summary 保存表单数据
 *
 * @param request SaveFormDataRequest
 * @param tmpHeader SaveFormDataHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return SaveFormDataResponse
 */
async function saveFormDataWithOptions(request: SaveFormDataRequest, tmpHeader: SaveFormDataHeaders, runtime: Util.RuntimeOptions): SaveFormDataResponse {
  Util.validateModel(request);
  var headers = new SaveFormDataShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.formDataJson)) {
    body['FormDataJson'] = request.formDataJson;
  }
  if (!Util.isUnset(request.formUuid)) {
    body['FormUuid'] = request.formUuid;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SaveFormData',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/saveFormData`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 保存表单数据
 *
 * @param request SaveFormDataRequest
 * @return SaveFormDataResponse
 */
async function saveFormData(request: SaveFormDataRequest): SaveFormDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SaveFormDataHeaders{};
  return saveFormDataWithOptions(request, headers, runtime);
}

model SaveFormRemarkHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model SaveFormRemarkShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model SaveFormRemarkRequest {
  appType?: string(name='AppType', description='This parameter is required.', example='APP_PBKxxx'),
  atUserId?: string(name='AtUserId', example='123456'),
  content?: string(name='Content', description='This parameter is required.', example='instxxxx'),
  formInstanceId?: string(name='FormInstanceId', description='This parameter is required.', example='instxxxx'),
  language?: string(name='Language', example='zh-CN'),
  replyId?: long(name='ReplyId', example='hexxxx'),
  systemToken?: string(name='SystemToken', description='This parameter is required.', example='hexxxx'),
}

model SaveFormRemarkResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: long(name='result'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model SaveFormRemarkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveFormRemarkResponseBody(name='body'),
}

/**
 * @summary 提交表单或流程实例下的评论
 *
 * @param request SaveFormRemarkRequest
 * @param tmpHeader SaveFormRemarkHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return SaveFormRemarkResponse
 */
async function saveFormRemarkWithOptions(request: SaveFormRemarkRequest, tmpHeader: SaveFormRemarkHeaders, runtime: Util.RuntimeOptions): SaveFormRemarkResponse {
  Util.validateModel(request);
  var headers = new SaveFormRemarkShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.atUserId)) {
    body['AtUserId'] = request.atUserId;
  }
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.formInstanceId)) {
    body['FormInstanceId'] = request.formInstanceId;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.replyId)) {
    body['ReplyId'] = request.replyId;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SaveFormRemark',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/saveFormRemark`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交表单或流程实例下的评论
 *
 * @param request SaveFormRemarkRequest
 * @return SaveFormRemarkResponse
 */
async function saveFormRemark(request: SaveFormRemarkRequest): SaveFormRemarkResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SaveFormRemarkHeaders{};
  return saveFormRemarkWithOptions(request, headers, runtime);
}

model SearchEmployeeFieldValuesHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model SearchEmployeeFieldValuesShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model SearchEmployeeFieldValuesRequest {
  appType?: string(name='AppType', example='APP_PBKxxx'),
  createFromTimeGMT?: string(name='CreateFromTimeGMT', example='2021-05-01'),
  createToTimeGMT?: string(name='CreateToTimeGMT', example='2021-05-01'),
  formUuid?: string(name='FormUuid', example='FORM-EF6Yxxx'),
  language?: string(name='Language', example='zh_CN'),
  modifiedFromTimeGMT?: string(name='ModifiedFromTimeGMT', example='2021-05-01'),
  modifiedToTimeGMT?: string(name='ModifiedToTimeGMT', example='2021-09-10'),
  originatorId?: string(name='OriginatorId', example='112212221'),
  searchFieldJson?: string(name='SearchFieldJson', example='{\\\\"textField_annandfa\\\\":\\\\"1212\\\\"}'),
  systemToken?: string(name='SystemToken', example='hexxxx'),
  targetFieldJson?: string(name='TargetFieldJson', example='[\\\\"textField_xahdfna\\\\"]'),
}

model SearchEmployeeFieldValuesResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: string(name='result', example='manager123'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model SearchEmployeeFieldValuesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchEmployeeFieldValuesResponseBody(name='body'),
}

/**
 * @summary 获取员工组件的值
 *
 * @param request SearchEmployeeFieldValuesRequest
 * @param tmpHeader SearchEmployeeFieldValuesHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return SearchEmployeeFieldValuesResponse
 */
async function searchEmployeeFieldValuesWithOptions(request: SearchEmployeeFieldValuesRequest, tmpHeader: SearchEmployeeFieldValuesHeaders, runtime: Util.RuntimeOptions): SearchEmployeeFieldValuesResponse {
  Util.validateModel(request);
  var headers = new SearchEmployeeFieldValuesShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.createFromTimeGMT)) {
    body['CreateFromTimeGMT'] = request.createFromTimeGMT;
  }
  if (!Util.isUnset(request.createToTimeGMT)) {
    body['CreateToTimeGMT'] = request.createToTimeGMT;
  }
  if (!Util.isUnset(request.formUuid)) {
    body['FormUuid'] = request.formUuid;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.modifiedFromTimeGMT)) {
    body['ModifiedFromTimeGMT'] = request.modifiedFromTimeGMT;
  }
  if (!Util.isUnset(request.modifiedToTimeGMT)) {
    body['ModifiedToTimeGMT'] = request.modifiedToTimeGMT;
  }
  if (!Util.isUnset(request.originatorId)) {
    body['OriginatorId'] = request.originatorId;
  }
  if (!Util.isUnset(request.searchFieldJson)) {
    body['SearchFieldJson'] = request.searchFieldJson;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }
  if (!Util.isUnset(request.targetFieldJson)) {
    body['TargetFieldJson'] = request.targetFieldJson;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SearchEmployeeFieldValues',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/searchEmployeeFieldValues`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取员工组件的值
 *
 * @param request SearchEmployeeFieldValuesRequest
 * @return SearchEmployeeFieldValuesResponse
 */
async function searchEmployeeFieldValues(request: SearchEmployeeFieldValuesRequest): SearchEmployeeFieldValuesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SearchEmployeeFieldValuesHeaders{};
  return searchEmployeeFieldValuesWithOptions(request, headers, runtime);
}

model SearchFormDataIdListHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model SearchFormDataIdListShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model SearchFormDataIdListRequest {
  appType?: string(name='AppType', description='This parameter is required.', example='APP_PBKT0xxx'),
  createFromTimeGMT?: string(name='CreateFromTimeGMT', example='yyyy-MM-dd'),
  createToTimeGMT?: string(name='CreateToTimeGMT', example='yyyy-MM-dd'),
  formUuid?: string(name='FormUuid', description='This parameter is required.', example='FORM-xxxxx'),
  language?: string(name='Language', example='zh-CN'),
  modifiedFromTimeGMT?: string(name='ModifiedFromTimeGMT', example='yyyy-MM-dd'),
  modifiedToTimeGMT?: string(name='ModifiedToTimeGMT', example='yyyy-MM-dd'),
  originatorId?: string(name='OriginatorId', example='012345'),
  pageNumber?: int32(name='PageNumber', example='20'),
  pageSize?: int32(name='PageSize', example='20'),
  searchFieldJson?: string(name='SearchFieldJson', example='{}'),
  systemToken?: string(name='SystemToken', description='This parameter is required.', example='hexxxx'),
}

model SearchFormDataIdListResponseBody = {
  data?: [ string ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: long(name='totalCount', example='20'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model SearchFormDataIdListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchFormDataIdListResponseBody(name='body'),
}

/**
 * @summary 获取多个表单实例ID
 *
 * @param request SearchFormDataIdListRequest
 * @param tmpHeader SearchFormDataIdListHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return SearchFormDataIdListResponse
 */
async function searchFormDataIdListWithOptions(request: SearchFormDataIdListRequest, tmpHeader: SearchFormDataIdListHeaders, runtime: Util.RuntimeOptions): SearchFormDataIdListResponse {
  Util.validateModel(request);
  var headers = new SearchFormDataIdListShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.createFromTimeGMT)) {
    body['CreateFromTimeGMT'] = request.createFromTimeGMT;
  }
  if (!Util.isUnset(request.createToTimeGMT)) {
    body['CreateToTimeGMT'] = request.createToTimeGMT;
  }
  if (!Util.isUnset(request.formUuid)) {
    body['FormUuid'] = request.formUuid;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.modifiedFromTimeGMT)) {
    body['ModifiedFromTimeGMT'] = request.modifiedFromTimeGMT;
  }
  if (!Util.isUnset(request.modifiedToTimeGMT)) {
    body['ModifiedToTimeGMT'] = request.modifiedToTimeGMT;
  }
  if (!Util.isUnset(request.originatorId)) {
    body['OriginatorId'] = request.originatorId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchFieldJson)) {
    body['SearchFieldJson'] = request.searchFieldJson;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SearchFormDataIdList',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/searchFormDataIdList`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取多个表单实例ID
 *
 * @param request SearchFormDataIdListRequest
 * @return SearchFormDataIdListResponse
 */
async function searchFormDataIdList(request: SearchFormDataIdListRequest): SearchFormDataIdListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SearchFormDataIdListHeaders{};
  return searchFormDataIdListWithOptions(request, headers, runtime);
}

model SearchFormDataSecondGenerationHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model SearchFormDataSecondGenerationShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model SearchFormDataSecondGenerationRequest {
  appType?: string(name='AppType', description='This parameter is required.', example='APP_PBKT0xxx'),
  createFromTimeGMT?: string(name='CreateFromTimeGMT', example='yyyy-MM-dd'),
  createToTimeGMT?: string(name='CreateToTimeGMT', example='yyyy-MM-dd'),
  formUuid?: string(name='FormUuid', description='This parameter is required.', example='FORM-xxxxx'),
  modifiedFromTimeGMT?: string(name='ModifiedFromTimeGMT', example='yyyy-MM-dd'),
  modifiedToTimeGMT?: string(name='ModifiedToTimeGMT', example='yyyy-MM-dd'),
  orderConfigJson?: string(name='OrderConfigJson', example='{}'),
  originatorId?: string(name='OriginatorId', example='012345'),
  pageNumber?: int32(name='PageNumber', example='20'),
  pageSize?: int32(name='PageSize', example='20'),
  searchCondition?: string(name='SearchCondition', example='{}'),
  systemToken?: string(name='SystemToken', description='This parameter is required.', example='hexxxx'),
}

model SearchFormDataSecondGenerationResponseBody = {
  data?: [ 
    {
      createTimeGMT?: string(name='CreateTimeGMT', example='2021-05-01 10:10:10'),
      creatorUserId?: string(name='CreatorUserId', example='012345'),
      formData?: map[string]any(name='FormData'),
      formInstanceId?: string(name='FormInstanceId', example='FINST-xxxx'),
      formUuid?: string(name='FormUuid', example='FORM-xxxx'),
      id?: long(name='Id', example='1023'),
      instanceValue?: string(name='InstanceValue', example='{}'),
      modifiedTimeGMT?: string(name='ModifiedTimeGMT', example='2021-05-01 10:10:10'),
      modifier?: string(name='Modifier'),
      modifyUser?: {
        name?: {
          nameInChinese?: string(name='NameInChinese'),
          nameInEnglish?: string(name='NameInEnglish', example='English'),
        }(name='Name'),
        userId?: string(name='UserId', example='012345'),
      }(name='ModifyUser'),
      originator?: {
        name?: {
          nameInChinese?: string(name='NameInChinese'),
          nameInEnglish?: string(name='NameInEnglish', example='English'),
        }(name='Name'),
        userId?: string(name='UserId', example='012345'),
      }(name='Originator'),
      sequence?: string(name='Sequence', example='1'),
      serialNumber?: string(name='SerialNumber', example='sagc1b3090d'),
      title?: string(name='Title'),
      version?: long(name='Version', example='3'),
    }
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: long(name='totalCount', example='20'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model SearchFormDataSecondGenerationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchFormDataSecondGenerationResponseBody(name='body'),
}

/**
 * @summary 通过高级查询条件获取表单实例数据（包括子表单组件数据）
 *
 * @param request SearchFormDataSecondGenerationRequest
 * @param tmpHeader SearchFormDataSecondGenerationHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return SearchFormDataSecondGenerationResponse
 */
async function searchFormDataSecondGenerationWithOptions(request: SearchFormDataSecondGenerationRequest, tmpHeader: SearchFormDataSecondGenerationHeaders, runtime: Util.RuntimeOptions): SearchFormDataSecondGenerationResponse {
  Util.validateModel(request);
  var headers = new SearchFormDataSecondGenerationShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.createFromTimeGMT)) {
    body['CreateFromTimeGMT'] = request.createFromTimeGMT;
  }
  if (!Util.isUnset(request.createToTimeGMT)) {
    body['CreateToTimeGMT'] = request.createToTimeGMT;
  }
  if (!Util.isUnset(request.formUuid)) {
    body['FormUuid'] = request.formUuid;
  }
  if (!Util.isUnset(request.modifiedFromTimeGMT)) {
    body['ModifiedFromTimeGMT'] = request.modifiedFromTimeGMT;
  }
  if (!Util.isUnset(request.modifiedToTimeGMT)) {
    body['ModifiedToTimeGMT'] = request.modifiedToTimeGMT;
  }
  if (!Util.isUnset(request.orderConfigJson)) {
    body['OrderConfigJson'] = request.orderConfigJson;
  }
  if (!Util.isUnset(request.originatorId)) {
    body['OriginatorId'] = request.originatorId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchCondition)) {
    body['SearchCondition'] = request.searchCondition;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SearchFormDataSecondGeneration',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/searchFormDataSecondGeneration`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 通过高级查询条件获取表单实例数据（包括子表单组件数据）
 *
 * @param request SearchFormDataSecondGenerationRequest
 * @return SearchFormDataSecondGenerationResponse
 */
async function searchFormDataSecondGeneration(request: SearchFormDataSecondGenerationRequest): SearchFormDataSecondGenerationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SearchFormDataSecondGenerationHeaders{};
  return searchFormDataSecondGenerationWithOptions(request, headers, runtime);
}

model SearchFormDataSecondGenerationNoTableFieldHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model SearchFormDataSecondGenerationNoTableFieldShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model SearchFormDataSecondGenerationNoTableFieldRequest {
  appType?: string(name='AppType', description='This parameter is required.', example='APP_PBKT0xxx'),
  createFromTimeGMT?: string(name='CreateFromTimeGMT', example='yyyy-MM-dd'),
  createToTimeGMT?: string(name='CreateToTimeGMT', example='yyyy-MM-dd'),
  formUuid?: string(name='FormUuid', description='This parameter is required.', example='FORM-xxxxx'),
  modifiedFromTimeGMT?: string(name='ModifiedFromTimeGMT', example='yyyy-MM-dd'),
  modifiedToTimeGMT?: string(name='ModifiedToTimeGMT', example='yyyy-MM-dd'),
  orderConfigJson?: string(name='OrderConfigJson', example='{}'),
  originatorId?: string(name='OriginatorId', example='012345'),
  pageNumber?: int32(name='PageNumber', example='20'),
  pageSize?: int32(name='PageSize', example='20'),
  searchCondition?: string(name='SearchCondition', example='{}'),
  systemToken?: string(name='SystemToken', description='This parameter is required.', example='hexxxx'),
}

model SearchFormDataSecondGenerationNoTableFieldResponseBody = {
  data?: [ 
    {
      createTimeGMT?: string(name='CreateTimeGMT', example='2021-05-01 10:10:10'),
      creatorUserId?: string(name='CreatorUserId', example='012345'),
      formData?: map[string]any(name='FormData'),
      formInstanceId?: string(name='FormInstanceId', example='FINST-xxxx'),
      formUuid?: string(name='FormUuid', example='FORM-xxxx'),
      id?: long(name='Id', example='54114'),
      instanceValue?: string(name='InstanceValue', example='{}'),
      modifiedTimeGMT?: string(name='ModifiedTimeGMT', example='2021-05-01 10:10:10'),
      modifier?: string(name='Modifier'),
      modifyUser?: {
        name?: {
          nameInChinese?: string(name='NameInChinese'),
          nameInEnglish?: string(name='NameInEnglish', example='English'),
        }(name='Name'),
        userId?: string(name='UserId', example='012345'),
      }(name='ModifyUser'),
      originator?: {
        name?: {
          nameInChinese?: string(name='NameInChinese'),
          nameInEnglish?: string(name='NameInEnglish', example='English'),
        }(name='Name'),
        userId?: string(name='UserId', example='012345'),
      }(name='Originator'),
      sequence?: string(name='Sequence', example='1'),
      serialNumber?: string(name='SerialNumber', example='7CE737P1SS'),
      title?: string(name='Title'),
      version?: long(name='Version', example='3'),
    }
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: long(name='totalCount', example='20'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model SearchFormDataSecondGenerationNoTableFieldResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchFormDataSecondGenerationNoTableFieldResponseBody(name='body'),
}

/**
 * @summary 通过高级查询条件获取表单实例数据（不包括子表单组件数据）
 *
 * @param request SearchFormDataSecondGenerationNoTableFieldRequest
 * @param tmpHeader SearchFormDataSecondGenerationNoTableFieldHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return SearchFormDataSecondGenerationNoTableFieldResponse
 */
async function searchFormDataSecondGenerationNoTableFieldWithOptions(request: SearchFormDataSecondGenerationNoTableFieldRequest, tmpHeader: SearchFormDataSecondGenerationNoTableFieldHeaders, runtime: Util.RuntimeOptions): SearchFormDataSecondGenerationNoTableFieldResponse {
  Util.validateModel(request);
  var headers = new SearchFormDataSecondGenerationNoTableFieldShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.createFromTimeGMT)) {
    body['CreateFromTimeGMT'] = request.createFromTimeGMT;
  }
  if (!Util.isUnset(request.createToTimeGMT)) {
    body['CreateToTimeGMT'] = request.createToTimeGMT;
  }
  if (!Util.isUnset(request.formUuid)) {
    body['FormUuid'] = request.formUuid;
  }
  if (!Util.isUnset(request.modifiedFromTimeGMT)) {
    body['ModifiedFromTimeGMT'] = request.modifiedFromTimeGMT;
  }
  if (!Util.isUnset(request.modifiedToTimeGMT)) {
    body['ModifiedToTimeGMT'] = request.modifiedToTimeGMT;
  }
  if (!Util.isUnset(request.orderConfigJson)) {
    body['OrderConfigJson'] = request.orderConfigJson;
  }
  if (!Util.isUnset(request.originatorId)) {
    body['OriginatorId'] = request.originatorId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchCondition)) {
    body['SearchCondition'] = request.searchCondition;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SearchFormDataSecondGenerationNoTableField',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/searchFormDataSecondGenerationNoTableField`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 通过高级查询条件获取表单实例数据（不包括子表单组件数据）
 *
 * @param request SearchFormDataSecondGenerationNoTableFieldRequest
 * @return SearchFormDataSecondGenerationNoTableFieldResponse
 */
async function searchFormDataSecondGenerationNoTableField(request: SearchFormDataSecondGenerationNoTableFieldRequest): SearchFormDataSecondGenerationNoTableFieldResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SearchFormDataSecondGenerationNoTableFieldHeaders{};
  return searchFormDataSecondGenerationNoTableFieldWithOptions(request, headers, runtime);
}

model SearchFormDatasHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model SearchFormDatasShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model SearchFormDatasRequest {
  appType?: string(name='AppType', description='This parameter is required.', example='APP_PBKT0xxx'),
  createFromTimeGMT?: string(name='CreateFromTimeGMT', example='yyyy-MM-dd'),
  createToTimeGMT?: string(name='CreateToTimeGMT', example='yyyy-MM-dd'),
  currentPage?: int32(name='CurrentPage', example='20'),
  dynamicOrder?: string(name='DynamicOrder', example='20'),
  formUuid?: string(name='FormUuid', description='This parameter is required.', example='FORM-xxxxx'),
  language?: string(name='Language', example='en_US'),
  modifiedFromTimeGMT?: string(name='ModifiedFromTimeGMT', example='yyyy-MM-dd'),
  modifiedToTimeGMT?: string(name='ModifiedToTimeGMT', example='yyyy-MM-dd'),
  originatorId?: string(name='OriginatorId', example='012345'),
  pageSize?: int32(name='PageSize', example='20'),
  searchFieldJson?: string(name='SearchFieldJson'),
  systemToken?: string(name='SystemToken', description='This parameter is required.', example='hexxxx'),
}

model SearchFormDatasResponseBody = {
  currentPage?: int32(name='currentPage', example='1'),
  data?: [ 
    {
      createdTimeGMT?: string(name='CreatedTimeGMT', example='2018-01-24 11:22:01'),
      creatorUserId?: string(name='CreatorUserId', example='012345'),
      dataId?: long(name='DataId', example='1002'),
      formData?: map[string]any(name='FormData'),
      formInstanceId?: string(name='FormInstanceId', example='FINST-BNKJDRF'),
      formUuid?: string(name='FormUuid', example='FORM-EF6Y93URN24F1SCX15VA2P918LPEIJ2H3UFORCJ1'),
      instanceValue?: string(name='InstanceValue', example='{}'),
      modelUuid?: string(name='ModelUuid', example='FORM-EF6Y93URN24F1SCX15VA2P918LPEIJ2H3UFORCJ1'),
      modifiedTimeGMT?: string(name='ModifiedTimeGMT', example='2018-01-24 11:22:01'),
      modifierUserId?: string(name='ModifierUserId', example='012345'),
      modifyUser?: {
        userId?: string(name='UserId', example='012345'),
        userName?: {
          nameInChinese?: string(name='NameInChinese'),
          nameInEnglish?: string(name='NameInEnglish', example='EngilishName'),
          type?: string(name='Type', example='ZH-CN'),
        }(name='UserName'),
      }(name='ModifyUser'),
      originator?: {
        userId?: string(name='UserId', example='012345'),
        userName?: {
          nameInChinese?: string(name='NameInChinese'),
          nameInEnglish?: string(name='NameInEnglish', example='EngilishName'),
          type?: string(name='Type', example='ZH-CN'),
        }(name='UserName'),
      }(name='Originator'),
      sequence?: string(name='Sequence', example='1'),
      serialNo?: string(name='SerialNo', example='231008101012015353'),
      title?: string(name='Title'),
      version?: long(name='Version', example='3'),
    }
  ](name='data'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: int32(name='totalCount', example='20'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model SearchFormDatasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchFormDatasResponseBody(name='body'),
}

/**
 * @summary 查询表单实例数据
 *
 * @param request SearchFormDatasRequest
 * @param tmpHeader SearchFormDatasHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return SearchFormDatasResponse
 */
async function searchFormDatasWithOptions(request: SearchFormDatasRequest, tmpHeader: SearchFormDatasHeaders, runtime: Util.RuntimeOptions): SearchFormDatasResponse {
  Util.validateModel(request);
  var headers = new SearchFormDatasShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.createFromTimeGMT)) {
    body['CreateFromTimeGMT'] = request.createFromTimeGMT;
  }
  if (!Util.isUnset(request.createToTimeGMT)) {
    body['CreateToTimeGMT'] = request.createToTimeGMT;
  }
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dynamicOrder)) {
    body['DynamicOrder'] = request.dynamicOrder;
  }
  if (!Util.isUnset(request.formUuid)) {
    body['FormUuid'] = request.formUuid;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.modifiedFromTimeGMT)) {
    body['ModifiedFromTimeGMT'] = request.modifiedFromTimeGMT;
  }
  if (!Util.isUnset(request.modifiedToTimeGMT)) {
    body['ModifiedToTimeGMT'] = request.modifiedToTimeGMT;
  }
  if (!Util.isUnset(request.originatorId)) {
    body['OriginatorId'] = request.originatorId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchFieldJson)) {
    body['SearchFieldJson'] = request.searchFieldJson;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SearchFormDatas',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/searchFormDatas`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询表单实例数据
 *
 * @param request SearchFormDatasRequest
 * @return SearchFormDatasResponse
 */
async function searchFormDatas(request: SearchFormDatasRequest): SearchFormDatasResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SearchFormDatasHeaders{};
  return searchFormDatasWithOptions(request, headers, runtime);
}

model SearchInnerGroupsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model SearchInnerGroupsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model SearchInnerGroupsRequest {
  maxResults?: int32(name='MaxResults', example='100'),
  searchKey?: string(name='SearchKey'),
}

model SearchInnerGroupsResponseBody = {
  groupInfos?: [ 
    {
      icon?: string(name='Icon', example='@lAD*****'),
      memberAmount?: string(name='MemberAmount', example='10'),
      openConversationId?: string(name='OpenConversationId', example='cid13*****=='),
      title?: string(name='Title'),
    }
  ](name='groupInfos'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model SearchInnerGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchInnerGroupsResponseBody(name='body'),
}

/**
 * @summary 根据关键词搜索企业内部群
 *
 * @param request SearchInnerGroupsRequest
 * @param tmpHeader SearchInnerGroupsHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return SearchInnerGroupsResponse
 */
async function searchInnerGroupsWithOptions(request: SearchInnerGroupsRequest, tmpHeader: SearchInnerGroupsHeaders, runtime: Util.RuntimeOptions): SearchInnerGroupsResponse {
  Util.validateModel(request);
  var headers = new SearchInnerGroupsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.searchKey)) {
    body['SearchKey'] = request.searchKey;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SearchInnerGroups',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/im/searchInnerGroups`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 根据关键词搜索企业内部群
 *
 * @param request SearchInnerGroupsRequest
 * @return SearchInnerGroupsResponse
 */
async function searchInnerGroups(request: SearchInnerGroupsRequest): SearchInnerGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SearchInnerGroupsHeaders{};
  return searchInnerGroupsWithOptions(request, headers, runtime);
}

model SendBannerHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model SendBannerShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model SendBannerRequest {
  content?: map[string]any(name='Content'),
  endTime?: long(name='EndTime', example='1693881641000L'),
  startTime?: long(name='StartTime', example='1693881641000L'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model SendBannerShrinkRequest {
  contentShrink?: string(name='Content'),
  endTime?: long(name='EndTime', example='1693881641000L'),
  startTime?: long(name='StartTime', example='1693881641000L'),
  tenantContextShrink?: string(name='TenantContext'),
}

model SendBannerResponseBody = {
  arguments?: [ any ](name='arguments'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model SendBannerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendBannerResponseBody(name='body'),
}

/**
 * @summary 发送钉钉Banner通知
 *
 * @param tmpReq SendBannerRequest
 * @param tmpHeader SendBannerHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return SendBannerResponse
 */
async function sendBannerWithOptions(tmpReq: SendBannerRequest, tmpHeader: SendBannerHeaders, runtime: Util.RuntimeOptions): SendBannerResponse {
  Util.validateModel(tmpReq);
  var request = new SendBannerShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new SendBannerShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.content)) {
    request.contentShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.content, 'Content', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.contentShrink)) {
    body['Content'] = request.contentShrink;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendBanner',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/watt/sendBanner`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 发送钉钉Banner通知
 *
 * @param request SendBannerRequest
 * @return SendBannerResponse
 */
async function sendBanner(request: SendBannerRequest): SendBannerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SendBannerHeaders{};
  return sendBannerWithOptions(request, headers, runtime);
}

model SendPopupHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model SendPopupShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model SendPopupRequest {
  content?: map[string]any(name='Content'),
  endTime?: long(name='EndTime', example='1693881641000'),
  startTime?: long(name='StartTime', example='1693881641000'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model SendPopupShrinkRequest {
  contentShrink?: string(name='Content'),
  endTime?: long(name='EndTime', example='1693881641000'),
  startTime?: long(name='StartTime', example='1693881641000'),
  tenantContextShrink?: string(name='TenantContext'),
}

model SendPopupResponseBody = {
  arguments?: [ any ](name='arguments'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model SendPopupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendPopupResponseBody(name='body'),
}

/**
 * @summary 发送钉钉封屏弹窗
 *
 * @param tmpReq SendPopupRequest
 * @param tmpHeader SendPopupHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return SendPopupResponse
 */
async function sendPopupWithOptions(tmpReq: SendPopupRequest, tmpHeader: SendPopupHeaders, runtime: Util.RuntimeOptions): SendPopupResponse {
  Util.validateModel(tmpReq);
  var request = new SendPopupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new SendPopupShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.content)) {
    request.contentShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.content, 'Content', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.contentShrink)) {
    body['Content'] = request.contentShrink;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendPopup',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/watt/sendPopup`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 发送钉钉封屏弹窗
 *
 * @param request SendPopupRequest
 * @return SendPopupResponse
 */
async function sendPopup(request: SendPopupRequest): SendPopupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SendPopupHeaders{};
  return sendPopupWithOptions(request, headers, runtime);
}

model SendSearchShadeHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model SendSearchShadeShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model SendSearchShadeRequest {
  content?: map[string]any(name='Content'),
  endTime?: long(name='EndTime', example='1693881641000'),
  startTime?: long(name='StartTime', example='1693881641000'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model SendSearchShadeShrinkRequest {
  contentShrink?: string(name='Content'),
  endTime?: long(name='EndTime', example='1693881641000'),
  startTime?: long(name='StartTime', example='1693881641000'),
  tenantContextShrink?: string(name='TenantContext'),
}

model SendSearchShadeResponseBody = {
  arguments?: [ any ](name='arguments'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model SendSearchShadeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendSearchShadeResponseBody(name='body'),
}

/**
 * @summary 发送钉钉搜索底纹
 *
 * @param tmpReq SendSearchShadeRequest
 * @param tmpHeader SendSearchShadeHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return SendSearchShadeResponse
 */
async function sendSearchShadeWithOptions(tmpReq: SendSearchShadeRequest, tmpHeader: SendSearchShadeHeaders, runtime: Util.RuntimeOptions): SendSearchShadeResponse {
  Util.validateModel(tmpReq);
  var request = new SendSearchShadeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new SendSearchShadeShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.content)) {
    request.contentShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.content, 'Content', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.contentShrink)) {
    body['Content'] = request.contentShrink;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendSearchShade',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/watt/sendSearchShade`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 发送钉钉搜索底纹
 *
 * @param request SendSearchShadeRequest
 * @return SendSearchShadeResponse
 */
async function sendSearchShade(request: SendSearchShadeRequest): SendSearchShadeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SendSearchShadeHeaders{};
  return sendSearchShadeWithOptions(request, headers, runtime);
}

model SetColumnsVisibilityHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model SetColumnsVisibilityShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model SetColumnsVisibilityRequest {
  column?: long(name='Column', description='This parameter is required.', example='1'),
  columnCount?: long(name='ColumnCount', description='This parameter is required.', example='20'),
  sheetId?: string(name='SheetId', description='This parameter is required.', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  visibility?: string(name='Visibility', description='This parameter is required.', example='hidden'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model SetColumnsVisibilityShrinkRequest {
  column?: long(name='Column', description='This parameter is required.', example='1'),
  columnCount?: long(name='ColumnCount', description='This parameter is required.', example='20'),
  sheetId?: string(name='SheetId', description='This parameter is required.', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  visibility?: string(name='Visibility', description='This parameter is required.', example='hidden'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model SetColumnsVisibilityResponseBody = {
  id?: string(name='id', example='stxxxx'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model SetColumnsVisibilityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetColumnsVisibilityResponseBody(name='body'),
}

/**
 * @summary 指定列隐藏
 *
 * @param tmpReq SetColumnsVisibilityRequest
 * @param tmpHeader SetColumnsVisibilityHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetColumnsVisibilityResponse
 */
async function setColumnsVisibilityWithOptions(tmpReq: SetColumnsVisibilityRequest, tmpHeader: SetColumnsVisibilityHeaders, runtime: Util.RuntimeOptions): SetColumnsVisibilityResponse {
  Util.validateModel(tmpReq);
  var request = new SetColumnsVisibilityShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new SetColumnsVisibilityShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.column)) {
    body['Column'] = request.column;
  }
  if (!Util.isUnset(request.columnCount)) {
    body['ColumnCount'] = request.columnCount;
  }
  if (!Util.isUnset(request.sheetId)) {
    body['SheetId'] = request.sheetId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.visibility)) {
    body['Visibility'] = request.visibility;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetColumnsVisibility',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/setColumnsVisibility`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 指定列隐藏
 *
 * @param request SetColumnsVisibilityRequest
 * @return SetColumnsVisibilityResponse
 */
async function setColumnsVisibility(request: SetColumnsVisibilityRequest): SetColumnsVisibilityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SetColumnsVisibilityHeaders{};
  return setColumnsVisibilityWithOptions(request, headers, runtime);
}

model SetConferenceHostsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model SetConferenceHostsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model SetConferenceHostsRequest {
  operationType?: string(name='OperationType', description='This parameter is required.', example='add'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  userIds?: [ string ](name='UserIds', description='This parameter is required.', example='[ "012345"]'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='607452e01401526ee39609e1'),
}

model SetConferenceHostsShrinkRequest {
  operationType?: string(name='OperationType', description='This parameter is required.', example='add'),
  tenantContextShrink?: string(name='TenantContext'),
  userIdsShrink?: string(name='UserIds', description='This parameter is required.', example='[ "012345"]'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='607452e01401526ee39609e1'),
}

model SetConferenceHostsResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model SetConferenceHostsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetConferenceHostsResponseBody(name='body'),
}

/**
 * @summary 设置联席主持人
 *
 * @param tmpReq SetConferenceHostsRequest
 * @param tmpHeader SetConferenceHostsHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetConferenceHostsResponse
 */
async function setConferenceHostsWithOptions(tmpReq: SetConferenceHostsRequest, tmpHeader: SetConferenceHostsHeaders, runtime: Util.RuntimeOptions): SetConferenceHostsResponse {
  Util.validateModel(tmpReq);
  var request = new SetConferenceHostsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new SetConferenceHostsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.userIds)) {
    request.userIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userIds, 'UserIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.operationType)) {
    body['OperationType'] = request.operationType;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.userIdsShrink)) {
    body['UserIds'] = request.userIdsShrink;
  }
  if (!Util.isUnset(request.conferenceId)) {
    body['conferenceId'] = request.conferenceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetConferenceHosts',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/setConferenceHosts`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 设置联席主持人
 *
 * @param request SetConferenceHostsRequest
 * @return SetConferenceHostsResponse
 */
async function setConferenceHosts(request: SetConferenceHostsRequest): SetConferenceHostsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SetConferenceHostsHeaders{};
  return setConferenceHostsWithOptions(request, headers, runtime);
}

model SetRowsVisibilityHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model SetRowsVisibilityShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model SetRowsVisibilityRequest {
  row?: long(name='Row', description='This parameter is required.', example='1'),
  rowCount?: long(name='RowCount', description='This parameter is required.', example='20'),
  sheetId?: string(name='SheetId', description='This parameter is required.', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  visibility?: string(name='Visibility', description='This parameter is required.', example='hidden'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model SetRowsVisibilityShrinkRequest {
  row?: long(name='Row', description='This parameter is required.', example='1'),
  rowCount?: long(name='RowCount', description='This parameter is required.', example='20'),
  sheetId?: string(name='SheetId', description='This parameter is required.', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  visibility?: string(name='Visibility', description='This parameter is required.', example='hidden'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model SetRowsVisibilityResponseBody = {
  id?: string(name='id', example='stxxxx'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model SetRowsVisibilityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetRowsVisibilityResponseBody(name='body'),
}

/**
 * @summary 指定行隐藏
 *
 * @param tmpReq SetRowsVisibilityRequest
 * @param tmpHeader SetRowsVisibilityHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetRowsVisibilityResponse
 */
async function setRowsVisibilityWithOptions(tmpReq: SetRowsVisibilityRequest, tmpHeader: SetRowsVisibilityHeaders, runtime: Util.RuntimeOptions): SetRowsVisibilityResponse {
  Util.validateModel(tmpReq);
  var request = new SetRowsVisibilityShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new SetRowsVisibilityShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.row)) {
    body['Row'] = request.row;
  }
  if (!Util.isUnset(request.rowCount)) {
    body['RowCount'] = request.rowCount;
  }
  if (!Util.isUnset(request.sheetId)) {
    body['SheetId'] = request.sheetId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.visibility)) {
    body['Visibility'] = request.visibility;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetRowsVisibility',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/setRowsVisibility`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 指定行隐藏
 *
 * @param request SetRowsVisibilityRequest
 * @return SetRowsVisibilityResponse
 */
async function setRowsVisibility(request: SetRowsVisibilityRequest): SetRowsVisibilityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SetRowsVisibilityHeaders{};
  return setRowsVisibilityWithOptions(request, headers, runtime);
}

model SimpleListReportHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model SimpleListReportShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model SimpleListReportRequest {
  cursor?: long(name='Cursor', description='This parameter is required.', example='0'),
  endTime?: long(name='EndTime', description='This parameter is required.', example='1507564800000'),
  size?: long(name='Size', description='This parameter is required.', example='10'),
  startTime?: long(name='StartTime', description='This parameter is required.', example='1507564800000'),
  templateName?: string(name='TemplateName', example='我管理的模版'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model SimpleListReportShrinkRequest {
  cursor?: long(name='Cursor', description='This parameter is required.', example='0'),
  endTime?: long(name='EndTime', description='This parameter is required.', example='1507564800000'),
  size?: long(name='Size', description='This parameter is required.', example='10'),
  startTime?: long(name='StartTime', description='This parameter is required.', example='1507564800000'),
  templateName?: string(name='TemplateName', example='我管理的模版'),
  tenantContextShrink?: string(name='TenantContext'),
}

model SimpleListReportResponseBody = {
  dataList?: [ 
    {
      createTime?: long(name='CreateTime', example='1567034772000'),
      creatorId?: string(name='CreatorId', example='1701038'),
      creatorName?: string(name='CreatorName', example='xinmu'),
      deptName?: string(name='DeptName'),
      remark?: string(name='Remark', example='ops'),
      reportId?: string(name='ReportId', example='d64994d09916c76276dd9bfa23637644'),
      templateName?: string(name='TemplateName', example='WG-Template'),
    }
  ](name='dataList'),
  hasMore?: boolean(name='hasMore', example='false'),
  nextCursor?: long(name='nextCursor', example='12312131231'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  size?: long(name='size', example='20'),
}

model SimpleListReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SimpleListReportResponseBody(name='body'),
}

/**
 * @summary 获取用户发送日志的概要信息
 *
 * @param tmpReq SimpleListReportRequest
 * @param tmpHeader SimpleListReportHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return SimpleListReportResponse
 */
async function simpleListReportWithOptions(tmpReq: SimpleListReportRequest, tmpHeader: SimpleListReportHeaders, runtime: Util.RuntimeOptions): SimpleListReportResponse {
  Util.validateModel(tmpReq);
  var request = new SimpleListReportShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new SimpleListReportShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.cursor)) {
    body['Cursor'] = request.cursor;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.templateName)) {
    body['TemplateName'] = request.templateName;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SimpleListReport',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/log/simpleListReport`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取用户发送日志的概要信息
 *
 * @param request SimpleListReportRequest
 * @return SimpleListReportResponse
 */
async function simpleListReport(request: SimpleListReportRequest): SimpleListReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SimpleListReportHeaders{};
  return simpleListReportWithOptions(request, headers, runtime);
}

model StartCloudRecordHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model StartCloudRecordShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model StartCloudRecordRequest {
  mode?: string(name='Mode', example='speech'),
  smallWindowPosition?: string(name='SmallWindowPosition', example='relative_right'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='61289fxxx'),
}

model StartCloudRecordShrinkRequest {
  mode?: string(name='Mode', example='speech'),
  smallWindowPosition?: string(name='SmallWindowPosition', example='relative_right'),
  tenantContextShrink?: string(name='TenantContext'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='61289fxxx'),
}

model StartCloudRecordResponseBody = {
  code?: string(name='code', example='200'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model StartCloudRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartCloudRecordResponseBody(name='body'),
}

/**
 * @summary 开启视频会议云录制
 *
 * @param tmpReq StartCloudRecordRequest
 * @param tmpHeader StartCloudRecordHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartCloudRecordResponse
 */
async function startCloudRecordWithOptions(tmpReq: StartCloudRecordRequest, tmpHeader: StartCloudRecordHeaders, runtime: Util.RuntimeOptions): StartCloudRecordResponse {
  Util.validateModel(tmpReq);
  var request = new StartCloudRecordShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new StartCloudRecordShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.mode)) {
    body['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.smallWindowPosition)) {
    body['SmallWindowPosition'] = request.smallWindowPosition;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.conferenceId)) {
    body['conferenceId'] = request.conferenceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartCloudRecord',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/startCloudRecord`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 开启视频会议云录制
 *
 * @param request StartCloudRecordRequest
 * @return StartCloudRecordResponse
 */
async function startCloudRecord(request: StartCloudRecordRequest): StartCloudRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new StartCloudRecordHeaders{};
  return startCloudRecordWithOptions(request, headers, runtime);
}

model StartInstanceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model StartInstanceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model StartInstanceRequest {
  appType?: string(name='AppType', example='APP_PBxxx'),
  departmentId?: string(name='DepartmentId', example='18295'),
  formDataJson?: string(name='FormDataJson', example='{}'),
  formUuid?: string(name='FormUuid', example='FORM-EF6Yxxx'),
  language?: string(name='Language', example='zh_CN'),
  processCode?: string(name='ProcessCode', example='TPROC--EF6Y4xxx'),
  processData?: string(name='ProcessData'),
  systemToken?: string(name='SystemToken', example='hexxyy'),
}

model StartInstanceResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: string(name='result', example='f30233fb-72e1-xxx-xxx'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model StartInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartInstanceResponseBody(name='body'),
}

/**
 * @summary 发起宜搭审批流程
 *
 * @param request StartInstanceRequest
 * @param tmpHeader StartInstanceHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartInstanceResponse
 */
async function startInstanceWithOptions(request: StartInstanceRequest, tmpHeader: StartInstanceHeaders, runtime: Util.RuntimeOptions): StartInstanceResponse {
  Util.validateModel(request);
  var headers = new StartInstanceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.departmentId)) {
    body['DepartmentId'] = request.departmentId;
  }
  if (!Util.isUnset(request.formDataJson)) {
    body['FormDataJson'] = request.formDataJson;
  }
  if (!Util.isUnset(request.formUuid)) {
    body['FormUuid'] = request.formUuid;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.processCode)) {
    body['ProcessCode'] = request.processCode;
  }
  if (!Util.isUnset(request.processData)) {
    body['ProcessData'] = request.processData;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartInstance',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/startInstance`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 发起宜搭审批流程
 *
 * @param request StartInstanceRequest
 * @return StartInstanceResponse
 */
async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new StartInstanceHeaders{};
  return startInstanceWithOptions(request, headers, runtime);
}

model StartMinutesHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model StartMinutesShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model StartMinutesRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='61289fxxx'),
  ownerUserId?: string(name='ownerUserId', description='This parameter is required.', example='012345'),
  recordAudio?: boolean(name='recordAudio', example='false'),
}

model StartMinutesShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='61289fxxx'),
  ownerUserId?: string(name='ownerUserId', description='This parameter is required.', example='012345'),
  recordAudio?: boolean(name='recordAudio', example='false'),
}

model StartMinutesResponseBody = {
  code?: string(name='code', example='200'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model StartMinutesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartMinutesResponseBody(name='body'),
}

/**
 * @summary 开启闪记
 *
 * @param tmpReq StartMinutesRequest
 * @param tmpHeader StartMinutesHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartMinutesResponse
 */
async function startMinutesWithOptions(tmpReq: StartMinutesRequest, tmpHeader: StartMinutesHeaders, runtime: Util.RuntimeOptions): StartMinutesResponse {
  Util.validateModel(tmpReq);
  var request = new StartMinutesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new StartMinutesShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.conferenceId)) {
    body['conferenceId'] = request.conferenceId;
  }
  if (!Util.isUnset(request.ownerUserId)) {
    body['ownerUserId'] = request.ownerUserId;
  }
  if (!Util.isUnset(request.recordAudio)) {
    body['recordAudio'] = request.recordAudio;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartMinutes',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/startMinutes`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 开启闪记
 *
 * @param request StartMinutesRequest
 * @return StartMinutesResponse
 */
async function startMinutes(request: StartMinutesRequest): StartMinutesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new StartMinutesHeaders{};
  return startMinutesWithOptions(request, headers, runtime);
}

model StatisticsListByTypeReportHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model StatisticsListByTypeReportShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model StatisticsListByTypeReportRequest {
  offset?: long(name='Offset', description='This parameter is required.', example='10'),
  reportId?: string(name='ReportId', description='This parameter is required.', example='173xxxx'),
  size?: long(name='Size', description='This parameter is required.', example='10'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  type?: long(name='Type', description='This parameter is required.', example='173xxxx'),
}

model StatisticsListByTypeReportShrinkRequest {
  offset?: long(name='Offset', description='This parameter is required.', example='10'),
  reportId?: string(name='ReportId', description='This parameter is required.', example='173xxxx'),
  size?: long(name='Size', description='This parameter is required.', example='10'),
  tenantContextShrink?: string(name='TenantContext'),
  type?: long(name='Type', description='This parameter is required.', example='173xxxx'),
}

model StatisticsListByTypeReportResponseBody = {
  hasMore?: boolean(name='hasMore', example='true'),
  nextCursor?: long(name='nextCursor', example='12312131231'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  useridList?: [ string ](name='useridList'),
}

model StatisticsListByTypeReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StatisticsListByTypeReportResponseBody(name='body'),
}

/**
 * @summary 获取日志相关人员列表
 *
 * @param tmpReq StatisticsListByTypeReportRequest
 * @param tmpHeader StatisticsListByTypeReportHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return StatisticsListByTypeReportResponse
 */
async function statisticsListByTypeReportWithOptions(tmpReq: StatisticsListByTypeReportRequest, tmpHeader: StatisticsListByTypeReportHeaders, runtime: Util.RuntimeOptions): StatisticsListByTypeReportResponse {
  Util.validateModel(tmpReq);
  var request = new StatisticsListByTypeReportShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new StatisticsListByTypeReportShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.offset)) {
    body['Offset'] = request.offset;
  }
  if (!Util.isUnset(request.reportId)) {
    body['ReportId'] = request.reportId;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StatisticsListByTypeReport',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/log/statisticsListByTypeReport`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取日志相关人员列表
 *
 * @param request StatisticsListByTypeReportRequest
 * @return StatisticsListByTypeReportResponse
 */
async function statisticsListByTypeReport(request: StatisticsListByTypeReportRequest): StatisticsListByTypeReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new StatisticsListByTypeReportHeaders{};
  return statisticsListByTypeReportWithOptions(request, headers, runtime);
}

model StatisticsReportHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model StatisticsReportShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model StatisticsReportRequest {
  reportId?: string(name='ReportId', description='This parameter is required.', example='173xxxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model StatisticsReportShrinkRequest {
  reportId?: string(name='ReportId', description='This parameter is required.', example='173xxxx'),
  tenantContextShrink?: string(name='TenantContext'),
}

model StatisticsReportResponseBody = {
  commentNum?: long(name='commentNum', example='1'),
  commentUserNum?: long(name='commentUserNum', example='1'),
  likeNum?: long(name='likeNum', example='2'),
  readNum?: long(name='readNum', example='3'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model StatisticsReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StatisticsReportResponseBody(name='body'),
}

/**
 * @summary 获取日志统计数据
 *
 * @param tmpReq StatisticsReportRequest
 * @param tmpHeader StatisticsReportHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return StatisticsReportResponse
 */
async function statisticsReportWithOptions(tmpReq: StatisticsReportRequest, tmpHeader: StatisticsReportHeaders, runtime: Util.RuntimeOptions): StatisticsReportResponse {
  Util.validateModel(tmpReq);
  var request = new StatisticsReportShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new StatisticsReportShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.reportId)) {
    body['ReportId'] = request.reportId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StatisticsReport',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/log/statisticsReport`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取日志统计数据
 *
 * @param request StatisticsReportRequest
 * @return StatisticsReportResponse
 */
async function statisticsReport(request: StatisticsReportRequest): StatisticsReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new StatisticsReportHeaders{};
  return statisticsReportWithOptions(request, headers, runtime);
}

model StopCloudRecordHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model StopCloudRecordShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model StopCloudRecordRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='61289fxxx'),
}

model StopCloudRecordShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='61289fxxx'),
}

model StopCloudRecordResponseBody = {
  code?: string(name='code', example='200'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model StopCloudRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopCloudRecordResponseBody(name='body'),
}

/**
 * @summary 停止视频会议云录制
 *
 * @param tmpReq StopCloudRecordRequest
 * @param tmpHeader StopCloudRecordHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopCloudRecordResponse
 */
async function stopCloudRecordWithOptions(tmpReq: StopCloudRecordRequest, tmpHeader: StopCloudRecordHeaders, runtime: Util.RuntimeOptions): StopCloudRecordResponse {
  Util.validateModel(tmpReq);
  var request = new StopCloudRecordShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new StopCloudRecordShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.conferenceId)) {
    body['conferenceId'] = request.conferenceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StopCloudRecord',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/stopCloudRecord`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 停止视频会议云录制
 *
 * @param request StopCloudRecordRequest
 * @return StopCloudRecordResponse
 */
async function stopCloudRecord(request: StopCloudRecordRequest): StopCloudRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new StopCloudRecordHeaders{};
  return stopCloudRecordWithOptions(request, headers, runtime);
}

model StopMinutesHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model StopMinutesShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model StopMinutesRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='61289fxxx'),
}

model StopMinutesShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='61289fxxx'),
}

model StopMinutesResponseBody = {
  code?: string(name='code', example='200'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model StopMinutesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopMinutesResponseBody(name='body'),
}

/**
 * @summary 暂停闪记
 *
 * @param tmpReq StopMinutesRequest
 * @param tmpHeader StopMinutesHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopMinutesResponse
 */
async function stopMinutesWithOptions(tmpReq: StopMinutesRequest, tmpHeader: StopMinutesHeaders, runtime: Util.RuntimeOptions): StopMinutesResponse {
  Util.validateModel(tmpReq);
  var request = new StopMinutesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new StopMinutesShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.conferenceId)) {
    body['conferenceId'] = request.conferenceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StopMinutes',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/stopMinutes`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 暂停闪记
 *
 * @param request StopMinutesRequest
 * @return StopMinutesResponse
 */
async function stopMinutes(request: StopMinutesRequest): StopMinutesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new StopMinutesHeaders{};
  return stopMinutesWithOptions(request, headers, runtime);
}

model SubscribeCalendarHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model SubscribeCalendarShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model SubscribeCalendarRequest {
  calendarId?: string(name='CalendarId', description='This parameter is required.', example='MzM5Mxxx'),
}

model SubscribeCalendarResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model SubscribeCalendarResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubscribeCalendarResponseBody(name='body'),
}

/**
 * @summary 订阅公共日历
 *
 * @param request SubscribeCalendarRequest
 * @param tmpHeader SubscribeCalendarHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubscribeCalendarResponse
 */
async function subscribeCalendarWithOptions(request: SubscribeCalendarRequest, tmpHeader: SubscribeCalendarHeaders, runtime: Util.RuntimeOptions): SubscribeCalendarResponse {
  Util.validateModel(request);
  var headers = new SubscribeCalendarShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.calendarId)) {
    body['CalendarId'] = request.calendarId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubscribeCalendar',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/subscribeCalendar`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 订阅公共日历
 *
 * @param request SubscribeCalendarRequest
 * @return SubscribeCalendarResponse
 */
async function subscribeCalendar(request: SubscribeCalendarRequest): SubscribeCalendarResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SubscribeCalendarHeaders{};
  return subscribeCalendarWithOptions(request, headers, runtime);
}

model SubscribeEventHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model SubscribeEventShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model SubscribeEventRequest {
  scope?: string(name='Scope', description='This parameter is required.', example='SPACE'),
  scopeId?: string(name='ScopeId', description='This parameter is required.', example='233456'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model SubscribeEventShrinkRequest {
  scope?: string(name='Scope', description='This parameter is required.', example='SPACE'),
  scopeId?: string(name='ScopeId', description='This parameter is required.', example='233456'),
  tenantContextShrink?: string(name='TenantContext'),
}

model SubscribeEventResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model SubscribeEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubscribeEventResponseBody(name='body'),
}

/**
 * @summary 订阅文件变更事件
 *
 * @param tmpReq SubscribeEventRequest
 * @param tmpHeader SubscribeEventHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubscribeEventResponse
 */
async function subscribeEventWithOptions(tmpReq: SubscribeEventRequest, tmpHeader: SubscribeEventHeaders, runtime: Util.RuntimeOptions): SubscribeEventResponse {
  Util.validateModel(tmpReq);
  var request = new SubscribeEventShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new SubscribeEventShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.scope)) {
    body['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.scopeId)) {
    body['ScopeId'] = request.scopeId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubscribeEvent',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/subscribeEvent`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 订阅文件变更事件
 *
 * @param request SubscribeEventRequest
 * @return SubscribeEventResponse
 */
async function subscribeEvent(request: SubscribeEventRequest): SubscribeEventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SubscribeEventHeaders{};
  return subscribeEventWithOptions(request, headers, runtime);
}

model SwitchMainOrgHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model SwitchMainOrgShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model SwitchMainOrgRequest {
  targetOrgId?: long(name='TargetOrgId', example='21001'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model SwitchMainOrgShrinkRequest {
  targetOrgId?: long(name='TargetOrgId', example='21001'),
  tenantContextShrink?: string(name='TenantContext'),
}

model SwitchMainOrgResponseBody = {
  content?: {
    data?: any(name='data', example='null'),
  }(name='content'),
  errorCode?: string(name='errorCode', example='0'),
  errorCtx?: map[string]any(name='errorCtx'),
  errorMsg?: string(name='errorMsg'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model SwitchMainOrgResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchMainOrgResponseBody(name='body'),
}

/**
 * @param tmpReq SwitchMainOrgRequest
 * @param tmpHeader SwitchMainOrgHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return SwitchMainOrgResponse
 */
async function switchMainOrgWithOptions(tmpReq: SwitchMainOrgRequest, tmpHeader: SwitchMainOrgHeaders, runtime: Util.RuntimeOptions): SwitchMainOrgResponse {
  Util.validateModel(tmpReq);
  var request = new SwitchMainOrgShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new SwitchMainOrgShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.targetOrgId)) {
    body['TargetOrgId'] = request.targetOrgId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SwitchMainOrg',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/aliding/v1/user/switchMainOrg`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request SwitchMainOrgRequest
 * @return SwitchMainOrgResponse
 */
async function switchMainOrg(request: SwitchMainOrgRequest): SwitchMainOrgResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SwitchMainOrgHeaders{};
  return switchMainOrgWithOptions(request, headers, runtime);
}

model SyncDingTypeHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model SyncDingTypeShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model SyncDingTypeRequest {
  dingType?: string(name='DingType', description='This parameter is required.', example='ANT_DING'),
  isDimission?: string(name='IsDimission', example='y'),
  source?: string(name='Source', description='This parameter is required.', example='antding'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  workNo?: string(name='WorkNo', description='This parameter is required.', example='012345'),
}

model SyncDingTypeShrinkRequest {
  dingType?: string(name='DingType', description='This parameter is required.', example='ANT_DING'),
  isDimission?: string(name='IsDimission', example='y'),
  source?: string(name='Source', description='This parameter is required.', example='antding'),
  tenantContextShrink?: string(name='TenantContext'),
  workNo?: string(name='WorkNo', description='This parameter is required.', example='012345'),
}

model SyncDingTypeResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model SyncDingTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncDingTypeResponseBody(name='body'),
}

/**
 * @summary 同步钉钉账号类型
 *
 * @param tmpReq SyncDingTypeRequest
 * @param tmpHeader SyncDingTypeHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return SyncDingTypeResponse
 */
async function syncDingTypeWithOptions(tmpReq: SyncDingTypeRequest, tmpHeader: SyncDingTypeHeaders, runtime: Util.RuntimeOptions): SyncDingTypeResponse {
  Util.validateModel(tmpReq);
  var request = new SyncDingTypeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new SyncDingTypeShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.dingType)) {
    body['DingType'] = request.dingType;
  }
  if (!Util.isUnset(request.isDimission)) {
    body['IsDimission'] = request.isDimission;
  }
  if (!Util.isUnset(request.source)) {
    body['Source'] = request.source;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workNo)) {
    body['WorkNo'] = request.workNo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SyncDingType',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/aliding/v1/indepding/syncDingType`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 同步钉钉账号类型
 *
 * @param request SyncDingTypeRequest
 * @return SyncDingTypeResponse
 */
async function syncDingType(request: SyncDingTypeRequest): SyncDingTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SyncDingTypeHeaders{};
  return syncDingTypeWithOptions(request, headers, runtime);
}

model TerminateInstanceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model TerminateInstanceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model TerminateInstanceRequest {
  appType?: string(name='AppType', example='APP_PBxxx'),
  language?: string(name='Language', example='zh_CN'),
  processInstanceId?: string(name='ProcessInstanceId', example='f30233fb-72e1-4af4-8cb8-c7e0ea9ee530'),
  systemToken?: string(name='SystemToken', example='hexxyy'),
}

model TerminateInstanceResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model TerminateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TerminateInstanceResponseBody(name='body'),
}

/**
 * @summary 终止流程实例
 *
 * @param request TerminateInstanceRequest
 * @param tmpHeader TerminateInstanceHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TerminateInstanceResponse
 */
async function terminateInstanceWithOptions(request: TerminateInstanceRequest, tmpHeader: TerminateInstanceHeaders, runtime: Util.RuntimeOptions): TerminateInstanceResponse {
  Util.validateModel(request);
  var headers = new TerminateInstanceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.processInstanceId)) {
    body['ProcessInstanceId'] = request.processInstanceId;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TerminateInstance',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/terminateInstance`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 终止流程实例
 *
 * @param request TerminateInstanceRequest
 * @return TerminateInstanceResponse
 */
async function terminateInstance(request: TerminateInstanceRequest): TerminateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TerminateInstanceHeaders{};
  return terminateInstanceWithOptions(request, headers, runtime);
}

model TransferTicketHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model TransferTicketShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model TransferTicketRequest {
  notify?: {
    groupNoticeReceiverUserIds?: [ string ](name='GroupNoticeReceiverUserIds'),
    noticeAllGroupMember?: boolean(name='NoticeAllGroupMember', example='true'),
    workNoticeReceiverUserIds?: [ string ](name='WorkNoticeReceiverUserIds'),
  }(name='Notify'),
  openTeamId?: string(name='OpenTeamId', description='This parameter is required.', example='eKWh3xxxxiE'),
  openTicketId?: string(name='OpenTicketId', description='This parameter is required.', example='Dq9hP8Sk2v6vQxxxxiE'),
  processorUserIds?: [ string ](name='ProcessorUserIds'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  ticketMemo?: {
    attachments?: [ 
      {
        fileName?: string(name='FileName', example='auto-test-1727143229007.pdf'),
        key?: string(name='Key', example='key1'),
      }
    ](name='Attachments'),
    memo?: string(name='Memo'),
  }(name='TicketMemo'),
}

model TransferTicketShrinkRequest {
  notifyShrink?: string(name='Notify'),
  openTeamId?: string(name='OpenTeamId', description='This parameter is required.', example='eKWh3xxxxiE'),
  openTicketId?: string(name='OpenTicketId', description='This parameter is required.', example='Dq9hP8Sk2v6vQxxxxiE'),
  processorUserIdsShrink?: string(name='ProcessorUserIds'),
  tenantContextShrink?: string(name='TenantContext'),
  ticketMemoShrink?: string(name='TicketMemo'),
}

model TransferTicketResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model TransferTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TransferTicketResponseBody(name='body'),
}

/**
 * @summary 转交工单
 *
 * @param tmpReq TransferTicketRequest
 * @param tmpHeader TransferTicketHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TransferTicketResponse
 */
async function transferTicketWithOptions(tmpReq: TransferTicketRequest, tmpHeader: TransferTicketHeaders, runtime: Util.RuntimeOptions): TransferTicketResponse {
  Util.validateModel(tmpReq);
  var request = new TransferTicketShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new TransferTicketShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.notify)) {
    request.notifyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notify, 'Notify', 'json');
  }
  if (!Util.isUnset(tmpReq.processorUserIds)) {
    request.processorUserIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.processorUserIds, 'ProcessorUserIds', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.ticketMemo)) {
    request.ticketMemoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ticketMemo, 'TicketMemo', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.notifyShrink)) {
    body['Notify'] = request.notifyShrink;
  }
  if (!Util.isUnset(request.openTeamId)) {
    body['OpenTeamId'] = request.openTeamId;
  }
  if (!Util.isUnset(request.openTicketId)) {
    body['OpenTicketId'] = request.openTicketId;
  }
  if (!Util.isUnset(request.processorUserIdsShrink)) {
    body['ProcessorUserIds'] = request.processorUserIdsShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.ticketMemoShrink)) {
    body['TicketMemo'] = request.ticketMemoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TransferTicket',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ticket/transferTicket`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 转交工单
 *
 * @param request TransferTicketRequest
 * @return TransferTicketResponse
 */
async function transferTicket(request: TransferTicketRequest): TransferTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TransferTicketHeaders{};
  return transferTicketWithOptions(request, headers, runtime);
}

model UnsubscribeCalendarHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model UnsubscribeCalendarShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UnsubscribeCalendarRequest {
  calendarId?: string(name='CalendarId', description='This parameter is required.', example='MzM5Mxxx'),
}

model UnsubscribeCalendarResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model UnsubscribeCalendarResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnsubscribeCalendarResponseBody(name='body'),
}

/**
 * @summary 取消订阅公共日历
 *
 * @param request UnsubscribeCalendarRequest
 * @param tmpHeader UnsubscribeCalendarHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UnsubscribeCalendarResponse
 */
async function unsubscribeCalendarWithOptions(request: UnsubscribeCalendarRequest, tmpHeader: UnsubscribeCalendarHeaders, runtime: Util.RuntimeOptions): UnsubscribeCalendarResponse {
  Util.validateModel(request);
  var headers = new UnsubscribeCalendarShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.calendarId)) {
    body['CalendarId'] = request.calendarId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UnsubscribeCalendar',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/unsubscribeCalendar`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 取消订阅公共日历
 *
 * @param request UnsubscribeCalendarRequest
 * @return UnsubscribeCalendarResponse
 */
async function unsubscribeCalendar(request: UnsubscribeCalendarRequest): UnsubscribeCalendarResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UnsubscribeCalendarHeaders{};
  return unsubscribeCalendarWithOptions(request, headers, runtime);
}

model UnsubscribeEventHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model UnsubscribeEventShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UnsubscribeEventRequest {
  scope?: string(name='Scope', description='This parameter is required.', example='SPACE'),
  scopeId?: string(name='ScopeId', description='This parameter is required.', example='23456'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model UnsubscribeEventShrinkRequest {
  scope?: string(name='Scope', description='This parameter is required.', example='SPACE'),
  scopeId?: string(name='ScopeId', description='This parameter is required.', example='23456'),
  tenantContextShrink?: string(name='TenantContext'),
}

model UnsubscribeEventResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model UnsubscribeEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnsubscribeEventResponseBody(name='body'),
}

/**
 * @summary 取消订阅文件变更事件
 *
 * @param tmpReq UnsubscribeEventRequest
 * @param tmpHeader UnsubscribeEventHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UnsubscribeEventResponse
 */
async function unsubscribeEventWithOptions(tmpReq: UnsubscribeEventRequest, tmpHeader: UnsubscribeEventHeaders, runtime: Util.RuntimeOptions): UnsubscribeEventResponse {
  Util.validateModel(tmpReq);
  var request = new UnsubscribeEventShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UnsubscribeEventShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.scope)) {
    body['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.scopeId)) {
    body['ScopeId'] = request.scopeId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UnsubscribeEvent',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/unsubscribeEvent`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 取消订阅文件变更事件
 *
 * @param request UnsubscribeEventRequest
 * @return UnsubscribeEventResponse
 */
async function unsubscribeEvent(request: UnsubscribeEventRequest): UnsubscribeEventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UnsubscribeEventHeaders{};
  return unsubscribeEventWithOptions(request, headers, runtime);
}

model UpdateFormDataHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model UpdateFormDataShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateFormDataRequest {
  appType?: string(name='AppType', example='APP_PBKTxxx'),
  formInstanceId?: string(name='FormInstanceId', example='FORM_INxxx'),
  language?: string(name='Language', example='zh_CN'),
  systemToken?: string(name='SystemToken', example='hexxxx'),
  updateFormDataJson?: string(name='UpdateFormDataJson', example='{}'),
  useLatestVersion?: boolean(name='UseLatestVersion', example='false'),
}

model UpdateFormDataResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model UpdateFormDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFormDataResponseBody(name='body'),
}

/**
 * @summary 更新表单数据
 *
 * @param request UpdateFormDataRequest
 * @param tmpHeader UpdateFormDataHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateFormDataResponse
 */
async function updateFormDataWithOptions(request: UpdateFormDataRequest, tmpHeader: UpdateFormDataHeaders, runtime: Util.RuntimeOptions): UpdateFormDataResponse {
  Util.validateModel(request);
  var headers = new UpdateFormDataShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.formInstanceId)) {
    body['FormInstanceId'] = request.formInstanceId;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }
  if (!Util.isUnset(request.updateFormDataJson)) {
    body['UpdateFormDataJson'] = request.updateFormDataJson;
  }
  if (!Util.isUnset(request.useLatestVersion)) {
    body['UseLatestVersion'] = request.useLatestVersion;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFormData',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/updateFormData`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新表单数据
 *
 * @param request UpdateFormDataRequest
 * @return UpdateFormDataResponse
 */
async function updateFormData(request: UpdateFormDataRequest): UpdateFormDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateFormDataHeaders{};
  return updateFormDataWithOptions(request, headers, runtime);
}

model UpdateInstanceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model UpdateInstanceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateInstanceRequest {
  appType?: string(name='AppType', example='APP_PBxxx'),
  language?: string(name='Language', example='zh_CN'),
  processInstanceId?: string(name='ProcessInstanceId', example='f30233fb-72e1-4af4-8cb8-c7e0ea9ee530'),
  systemToken?: string(name='SystemToken', example='hexxyy'),
  updateFormDataJson?: string(name='UpdateFormDataJson', example='{}'),
}

model UpdateInstanceResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model UpdateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceResponseBody(name='body'),
}

/**
 * @summary 更新流程实例
 *
 * @param request UpdateInstanceRequest
 * @param tmpHeader UpdateInstanceHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateInstanceResponse
 */
async function updateInstanceWithOptions(request: UpdateInstanceRequest, tmpHeader: UpdateInstanceHeaders, runtime: Util.RuntimeOptions): UpdateInstanceResponse {
  Util.validateModel(request);
  var headers = new UpdateInstanceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.processInstanceId)) {
    body['ProcessInstanceId'] = request.processInstanceId;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }
  if (!Util.isUnset(request.updateFormDataJson)) {
    body['UpdateFormDataJson'] = request.updateFormDataJson;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateInstance',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/updateInstance`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新流程实例
 *
 * @param request UpdateInstanceRequest
 * @return UpdateInstanceResponse
 */
async function updateInstance(request: UpdateInstanceRequest): UpdateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateInstanceHeaders{};
  return updateInstanceWithOptions(request, headers, runtime);
}

model UpdateLiveHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model UpdateLiveShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateLiveRequest {
  coverUrl?: string(name='CoverUrl', example='http://sss/sss'),
  introduction?: string(name='Introduction', example='这是一个直播'),
  liveId?: string(name='LiveId', description='This parameter is required.', example='4d38xxxxx'),
  preEndTime?: long(name='PreEndTime', description='This parameter is required.', example='1698596800000'),
  preStartTime?: long(name='PreStartTime', description='This parameter is required.', example='1691596800000'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  title?: string(name='Title', description='This parameter is required.', example='标题'),
}

model UpdateLiveShrinkRequest {
  coverUrl?: string(name='CoverUrl', example='http://sss/sss'),
  introduction?: string(name='Introduction', example='这是一个直播'),
  liveId?: string(name='LiveId', description='This parameter is required.', example='4d38xxxxx'),
  preEndTime?: long(name='PreEndTime', description='This parameter is required.', example='1698596800000'),
  preStartTime?: long(name='PreStartTime', description='This parameter is required.', example='1691596800000'),
  tenantContextShrink?: string(name='TenantContext'),
  title?: string(name='Title', description='This parameter is required.', example='标题'),
}

model UpdateLiveResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model UpdateLiveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLiveResponseBody(name='body'),
}

/**
 * @summary 修改直播属性信息
 *
 * @param tmpReq UpdateLiveRequest
 * @param tmpHeader UpdateLiveHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateLiveResponse
 */
async function updateLiveWithOptions(tmpReq: UpdateLiveRequest, tmpHeader: UpdateLiveHeaders, runtime: Util.RuntimeOptions): UpdateLiveResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateLiveShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateLiveShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.coverUrl)) {
    body['CoverUrl'] = request.coverUrl;
  }
  if (!Util.isUnset(request.introduction)) {
    body['Introduction'] = request.introduction;
  }
  if (!Util.isUnset(request.liveId)) {
    body['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.preEndTime)) {
    body['PreEndTime'] = request.preEndTime;
  }
  if (!Util.isUnset(request.preStartTime)) {
    body['PreStartTime'] = request.preStartTime;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateLive',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/updateLive`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改直播属性信息
 *
 * @param request UpdateLiveRequest
 * @return UpdateLiveResponse
 */
async function updateLive(request: UpdateLiveRequest): UpdateLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateLiveHeaders{};
  return updateLiveWithOptions(request, headers, runtime);
}

model UpdateMeetingRoomHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model UpdateMeetingRoomShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateMeetingRoomRequest {
  enableCycleReservation?: boolean(name='EnableCycleReservation'),
  groupId?: long(name='GroupId', example='0'),
  isvRoomId?: string(name='IsvRoomId', example='xxxIsvRoomId'),
  reservationAuthority?: {
    authorizedMembers?: [ 
      {
        memberId?: string(name='MemberId'),
        memberName?: string(name='MemberName'),
        memberType?: string(name='MemberType'),
      }
    ](name='AuthorizedMembers'),
  }(name='ReservationAuthority'),
  roomCapacity?: int32(name='RoomCapacity', example='100'),
  roomId?: string(name='RoomId', example='0ffbxxxxx'),
  roomLabelIds?: [ long ](name='RoomLabelIds'),
  roomLocation?: {
    desc?: string(name='Desc'),
    title?: string(name='Title'),
  }(name='RoomLocation'),
  roomName?: string(name='RoomName'),
  roomPicture?: string(name='RoomPicture', example='https://static.dingtalk.com/media/lADPxxxxx.jpg'),
  roomStatus?: int32(name='RoomStatus', example='1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model UpdateMeetingRoomShrinkRequest {
  enableCycleReservation?: boolean(name='EnableCycleReservation'),
  groupId?: long(name='GroupId', example='0'),
  isvRoomId?: string(name='IsvRoomId', example='xxxIsvRoomId'),
  reservationAuthorityShrink?: string(name='ReservationAuthority'),
  roomCapacity?: int32(name='RoomCapacity', example='100'),
  roomId?: string(name='RoomId', example='0ffbxxxxx'),
  roomLabelIdsShrink?: string(name='RoomLabelIds'),
  roomLocationShrink?: string(name='RoomLocation'),
  roomName?: string(name='RoomName'),
  roomPicture?: string(name='RoomPicture', example='https://static.dingtalk.com/media/lADPxxxxx.jpg'),
  roomStatus?: int32(name='RoomStatus', example='1'),
  tenantContextShrink?: string(name='TenantContext'),
}

model UpdateMeetingRoomResponseBody = {
  result?: boolean(name='Result', example='true'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model UpdateMeetingRoomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMeetingRoomResponseBody(name='body'),
}

/**
 * @summary 更新会议室信息
 *
 * @param tmpReq UpdateMeetingRoomRequest
 * @param tmpHeader UpdateMeetingRoomHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateMeetingRoomResponse
 */
async function updateMeetingRoomWithOptions(tmpReq: UpdateMeetingRoomRequest, tmpHeader: UpdateMeetingRoomHeaders, runtime: Util.RuntimeOptions): UpdateMeetingRoomResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateMeetingRoomShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateMeetingRoomShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.reservationAuthority)) {
    request.reservationAuthorityShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.reservationAuthority, 'ReservationAuthority', 'json');
  }
  if (!Util.isUnset(tmpReq.roomLabelIds)) {
    request.roomLabelIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roomLabelIds, 'RoomLabelIds', 'json');
  }
  if (!Util.isUnset(tmpReq.roomLocation)) {
    request.roomLocationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roomLocation, 'RoomLocation', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.enableCycleReservation)) {
    body['EnableCycleReservation'] = request.enableCycleReservation;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.isvRoomId)) {
    body['IsvRoomId'] = request.isvRoomId;
  }
  if (!Util.isUnset(request.reservationAuthorityShrink)) {
    body['ReservationAuthority'] = request.reservationAuthorityShrink;
  }
  if (!Util.isUnset(request.roomCapacity)) {
    body['RoomCapacity'] = request.roomCapacity;
  }
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  if (!Util.isUnset(request.roomLabelIdsShrink)) {
    body['RoomLabelIds'] = request.roomLabelIdsShrink;
  }
  if (!Util.isUnset(request.roomLocationShrink)) {
    body['RoomLocation'] = request.roomLocationShrink;
  }
  if (!Util.isUnset(request.roomName)) {
    body['RoomName'] = request.roomName;
  }
  if (!Util.isUnset(request.roomPicture)) {
    body['RoomPicture'] = request.roomPicture;
  }
  if (!Util.isUnset(request.roomStatus)) {
    body['RoomStatus'] = request.roomStatus;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMeetingRoom',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/updateMeetingRoom`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新会议室信息
 *
 * @param request UpdateMeetingRoomRequest
 * @return UpdateMeetingRoomResponse
 */
async function updateMeetingRoom(request: UpdateMeetingRoomRequest): UpdateMeetingRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateMeetingRoomHeaders{};
  return updateMeetingRoomWithOptions(request, headers, runtime);
}

model UpdateMeetingRoomGroupHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model UpdateMeetingRoomGroupShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateMeetingRoomGroupRequest {
  groupId?: string(name='GroupId', description='This parameter is required.', example='172'),
  groupName?: string(name='GroupName', example='测试分组'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model UpdateMeetingRoomGroupShrinkRequest {
  groupId?: string(name='GroupId', description='This parameter is required.', example='172'),
  groupName?: string(name='GroupName', example='测试分组'),
  tenantContextShrink?: string(name='TenantContext'),
}

model UpdateMeetingRoomGroupResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model UpdateMeetingRoomGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMeetingRoomGroupResponseBody(name='body'),
}

/**
 * @summary 更新会议室分组信息
 *
 * @param tmpReq UpdateMeetingRoomGroupRequest
 * @param tmpHeader UpdateMeetingRoomGroupHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateMeetingRoomGroupResponse
 */
async function updateMeetingRoomGroupWithOptions(tmpReq: UpdateMeetingRoomGroupRequest, tmpHeader: UpdateMeetingRoomGroupHeaders, runtime: Util.RuntimeOptions): UpdateMeetingRoomGroupResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateMeetingRoomGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateMeetingRoomGroupShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupName)) {
    body['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMeetingRoomGroup',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/updateMeetingRoomGroup`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新会议室分组信息
 *
 * @param request UpdateMeetingRoomGroupRequest
 * @return UpdateMeetingRoomGroupResponse
 */
async function updateMeetingRoomGroup(request: UpdateMeetingRoomGroupRequest): UpdateMeetingRoomGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateMeetingRoomGroupHeaders{};
  return updateMeetingRoomGroupWithOptions(request, headers, runtime);
}

model UpdateMultiDimTableHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model UpdateMultiDimTableShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateMultiDimTableRequest {
  baseId?: string(name='BaseId', description='This parameter is required.', example='r1R7q3QmWew5lo02fxB7noNyJxxxxxx'),
  name?: string(name='Name', description='This parameter is required.'),
  sheetIdOrName?: string(name='SheetIdOrName', description='This parameter is required.'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model UpdateMultiDimTableShrinkRequest {
  baseId?: string(name='BaseId', description='This parameter is required.', example='r1R7q3QmWew5lo02fxB7noNyJxxxxxx'),
  name?: string(name='Name', description='This parameter is required.'),
  sheetIdOrName?: string(name='SheetIdOrName', description='This parameter is required.'),
  tenantContextShrink?: string(name='TenantContext'),
}

model UpdateMultiDimTableResponseBody = {
  id?: string(name='id', example='[]'),
  name?: string(name='name', example='[]'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model UpdateMultiDimTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMultiDimTableResponseBody(name='body'),
}

/**
 * @summary 更新数据表
 *
 * @param tmpReq UpdateMultiDimTableRequest
 * @param tmpHeader UpdateMultiDimTableHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateMultiDimTableResponse
 */
async function updateMultiDimTableWithOptions(tmpReq: UpdateMultiDimTableRequest, tmpHeader: UpdateMultiDimTableHeaders, runtime: Util.RuntimeOptions): UpdateMultiDimTableResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateMultiDimTableShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateMultiDimTableShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.baseId)) {
    body['BaseId'] = request.baseId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.sheetIdOrName)) {
    body['SheetIdOrName'] = request.sheetIdOrName;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMultiDimTable',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/table/updateMultiDimTable`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新数据表
 *
 * @param request UpdateMultiDimTableRequest
 * @return UpdateMultiDimTableResponse
 */
async function updateMultiDimTable(request: UpdateMultiDimTableRequest): UpdateMultiDimTableResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateMultiDimTableHeaders{};
  return updateMultiDimTableWithOptions(request, headers, runtime);
}

model UpdateMultiDimTableFieldHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model UpdateMultiDimTableFieldShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateMultiDimTableFieldRequest {
  baseId?: string(name='BaseId', description='This parameter is required.', example='r1R7q3QmWew5lo02fxB7noNyJxxxxxx'),
  fieldIdOrName?: string(name='FieldIdOrName', description='This parameter is required.'),
  name?: string(name='Name', description='This parameter is required.'),
  property?: map[string]any(name='Property'),
  sheetIdOrName?: string(name='SheetIdOrName', description='This parameter is required.'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model UpdateMultiDimTableFieldShrinkRequest {
  baseId?: string(name='BaseId', description='This parameter is required.', example='r1R7q3QmWew5lo02fxB7noNyJxxxxxx'),
  fieldIdOrName?: string(name='FieldIdOrName', description='This parameter is required.'),
  name?: string(name='Name', description='This parameter is required.'),
  propertyShrink?: string(name='Property'),
  sheetIdOrName?: string(name='SheetIdOrName', description='This parameter is required.'),
  tenantContextShrink?: string(name='TenantContext'),
}

model UpdateMultiDimTableFieldResponseBody = {
  id?: string(name='Id', example='r1R7q3QmWew5lo02fxB7xxxxxxx'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model UpdateMultiDimTableFieldResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMultiDimTableFieldResponseBody(name='body'),
}

/**
 * @summary 更新字段
 *
 * @param tmpReq UpdateMultiDimTableFieldRequest
 * @param tmpHeader UpdateMultiDimTableFieldHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateMultiDimTableFieldResponse
 */
async function updateMultiDimTableFieldWithOptions(tmpReq: UpdateMultiDimTableFieldRequest, tmpHeader: UpdateMultiDimTableFieldHeaders, runtime: Util.RuntimeOptions): UpdateMultiDimTableFieldResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateMultiDimTableFieldShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateMultiDimTableFieldShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.property)) {
    request.propertyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.property, 'Property', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.baseId)) {
    body['BaseId'] = request.baseId;
  }
  if (!Util.isUnset(request.fieldIdOrName)) {
    body['FieldIdOrName'] = request.fieldIdOrName;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.propertyShrink)) {
    body['Property'] = request.propertyShrink;
  }
  if (!Util.isUnset(request.sheetIdOrName)) {
    body['SheetIdOrName'] = request.sheetIdOrName;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMultiDimTableField',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/table/updateMultiDimTableField`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新字段
 *
 * @param request UpdateMultiDimTableFieldRequest
 * @return UpdateMultiDimTableFieldResponse
 */
async function updateMultiDimTableField(request: UpdateMultiDimTableFieldRequest): UpdateMultiDimTableFieldResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateMultiDimTableFieldHeaders{};
  return updateMultiDimTableFieldWithOptions(request, headers, runtime);
}

model UpdateMultiDimTableRecordsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model UpdateMultiDimTableRecordsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateMultiDimTableRecordsRequest {
  baseId?: string(name='BaseId', description='This parameter is required.', example='r1R7q3QmWew5lo02fxB7nxxxxxxxx'),
  recordIds?: [ 
    {
      fields?: map[string]any(name='Fields', description='This parameter is required.'),
      id?: string(name='Id', description='This parameter is required.', example='HyDGtSj'),
    }
  ](name='RecordIds', description='This parameter is required.'),
  sheetIdOrName?: string(name='SheetIdOrName', description='This parameter is required.'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model UpdateMultiDimTableRecordsShrinkRequest {
  baseId?: string(name='BaseId', description='This parameter is required.', example='r1R7q3QmWew5lo02fxB7nxxxxxxxx'),
  recordIdsShrink?: string(name='RecordIds', description='This parameter is required.'),
  sheetIdOrName?: string(name='SheetIdOrName', description='This parameter is required.'),
  tenantContextShrink?: string(name='TenantContext'),
}

model UpdateMultiDimTableRecordsResponseBody = {
  value?: [ 
    {
      id?: string(name='Id', example='[]'),
    }
  ](name='Value'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model UpdateMultiDimTableRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMultiDimTableRecordsResponseBody(name='body'),
}

/**
 * @summary 更新多行记录
 *
 * @param tmpReq UpdateMultiDimTableRecordsRequest
 * @param tmpHeader UpdateMultiDimTableRecordsHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateMultiDimTableRecordsResponse
 */
async function updateMultiDimTableRecordsWithOptions(tmpReq: UpdateMultiDimTableRecordsRequest, tmpHeader: UpdateMultiDimTableRecordsHeaders, runtime: Util.RuntimeOptions): UpdateMultiDimTableRecordsResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateMultiDimTableRecordsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateMultiDimTableRecordsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.recordIds)) {
    request.recordIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.recordIds, 'RecordIds', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.baseId)) {
    body['BaseId'] = request.baseId;
  }
  if (!Util.isUnset(request.recordIdsShrink)) {
    body['RecordIds'] = request.recordIdsShrink;
  }
  if (!Util.isUnset(request.sheetIdOrName)) {
    body['SheetIdOrName'] = request.sheetIdOrName;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMultiDimTableRecords',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/table/updateMultiDimTableRecords`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新多行记录
 *
 * @param request UpdateMultiDimTableRecordsRequest
 * @return UpdateMultiDimTableRecordsResponse
 */
async function updateMultiDimTableRecords(request: UpdateMultiDimTableRecordsRequest): UpdateMultiDimTableRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateMultiDimTableRecordsHeaders{};
  return updateMultiDimTableRecordsWithOptions(request, headers, runtime);
}

model UpdatePermissionHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model UpdatePermissionShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdatePermissionRequest {
  dentryUuid?: string(name='DentryUuid', example='kDnRL6jAJMLgNkw7tBnw5aY4VyMoPYe1'),
  members?: [ 
    {
      corpId?: string(name='CorpId', example='123456'),
      id?: string(name='Id', example='ORG'),
      type?: string(name='Type', example='ORG'),
    }
  ](name='Members', description='This parameter is required.'),
  option?: {
    duration?: long(name='Duration', example='10'),
  }(name='Option'),
  roleId?: string(name='RoleId', example='READER'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model UpdatePermissionShrinkRequest {
  dentryUuid?: string(name='DentryUuid', example='kDnRL6jAJMLgNkw7tBnw5aY4VyMoPYe1'),
  membersShrink?: string(name='Members', description='This parameter is required.'),
  optionShrink?: string(name='Option'),
  roleId?: string(name='RoleId', example='READER'),
  tenantContextShrink?: string(name='TenantContext'),
}

model UpdatePermissionResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model UpdatePermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePermissionResponseBody(name='body'),
}

/**
 * @summary 更新文件权限
 *
 * @param tmpReq UpdatePermissionRequest
 * @param tmpHeader UpdatePermissionHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdatePermissionResponse
 */
async function updatePermissionWithOptions(tmpReq: UpdatePermissionRequest, tmpHeader: UpdatePermissionHeaders, runtime: Util.RuntimeOptions): UpdatePermissionResponse {
  Util.validateModel(tmpReq);
  var request = new UpdatePermissionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdatePermissionShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.members)) {
    request.membersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.members, 'Members', 'json');
  }
  if (!Util.isUnset(tmpReq.option)) {
    request.optionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.option, 'Option', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.dentryUuid)) {
    body['DentryUuid'] = request.dentryUuid;
  }
  if (!Util.isUnset(request.membersShrink)) {
    body['Members'] = request.membersShrink;
  }
  if (!Util.isUnset(request.optionShrink)) {
    body['Option'] = request.optionShrink;
  }
  if (!Util.isUnset(request.roleId)) {
    body['RoleId'] = request.roleId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePermission',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/updatePermission`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新文件权限
 *
 * @param request UpdatePermissionRequest
 * @return UpdatePermissionResponse
 */
async function updatePermission(request: UpdatePermissionRequest): UpdatePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdatePermissionHeaders{};
  return updatePermissionWithOptions(request, headers, runtime);
}

model UpdateRangeHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model UpdateRangeShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateRangeRequest {
  backgroundColors?: [[ string ]  ](name='BackgroundColors', example='[["#ff0000","#ff0000","#ff0000"]]'),
  hyperlinks?: [[ 
    {
      type?: string(name='Type', example='path'),
      link?: string(name='Link', example='https://www.dingtalk.com'),
      text?: string(name='Text', example='test'),
    }
  ]  ](name='Hyperlinks', example='[["type": "path","link": "https://www.dingtalk.com","text": "test"]]'),
  numberFormat?: string(name='NumberFormat', example='General'),
  rangeAddress?: string(name='RangeAddress', description='This parameter is required.', example='A3:C3'),
  sheetId?: string(name='SheetId', description='This parameter is required.', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  values?: [[ string ]  ](name='Values', example='[["1","2","3"]]'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model UpdateRangeShrinkRequest {
  backgroundColorsShrink?: string(name='BackgroundColors', example='[["#ff0000","#ff0000","#ff0000"]]'),
  hyperlinksShrink?: string(name='Hyperlinks', example='[["type": "path","link": "https://www.dingtalk.com","text": "test"]]'),
  numberFormat?: string(name='NumberFormat', example='General'),
  rangeAddress?: string(name='RangeAddress', description='This parameter is required.', example='A3:C3'),
  sheetId?: string(name='SheetId', description='This parameter is required.', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  valuesShrink?: string(name='Values', example='[["1","2","3"]]'),
  workbookId?: string(name='WorkbookId', description='This parameter is required.', example='stxxxx'),
}

model UpdateRangeResponseBody = {
  a1Notation?: string(name='a1Notation', example='A1:B2'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model UpdateRangeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRangeResponseBody(name='body'),
}

/**
 * @summary 更新单元格区域
 *
 * @param tmpReq UpdateRangeRequest
 * @param tmpHeader UpdateRangeHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateRangeResponse
 */
async function updateRangeWithOptions(tmpReq: UpdateRangeRequest, tmpHeader: UpdateRangeHeaders, runtime: Util.RuntimeOptions): UpdateRangeResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateRangeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateRangeShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.backgroundColors)) {
    request.backgroundColorsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.backgroundColors, 'BackgroundColors', 'json');
  }
  if (!Util.isUnset(tmpReq.hyperlinks)) {
    request.hyperlinksShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hyperlinks, 'Hyperlinks', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.values)) {
    request.valuesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.values, 'Values', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.backgroundColorsShrink)) {
    body['BackgroundColors'] = request.backgroundColorsShrink;
  }
  if (!Util.isUnset(request.hyperlinksShrink)) {
    body['Hyperlinks'] = request.hyperlinksShrink;
  }
  if (!Util.isUnset(request.numberFormat)) {
    body['NumberFormat'] = request.numberFormat;
  }
  if (!Util.isUnset(request.rangeAddress)) {
    body['RangeAddress'] = request.rangeAddress;
  }
  if (!Util.isUnset(request.sheetId)) {
    body['SheetId'] = request.sheetId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.valuesShrink)) {
    body['Values'] = request.valuesShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRange',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/updateRange`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新单元格区域
 *
 * @param request UpdateRangeRequest
 * @return UpdateRangeResponse
 */
async function updateRange(request: UpdateRangeRequest): UpdateRangeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateRangeHeaders{};
  return updateRangeWithOptions(request, headers, runtime);
}

model UpdateScheduleConfSettingsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model UpdateScheduleConfSettingsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateScheduleConfSettingsRequest {
  scheduleConfSettingModel?: {
    cohostUserIds?: [ string ](name='CohostUserIds'),
    confAllowedCorpId?: string(name='ConfAllowedCorpId', example='ding********'),
    hostUserId?: string(name='HostUserId', example='012345'),
    lockRoom?: int32(name='LockRoom', example='1'),
    moziConfOpenRecordSetting?: {
      isFollowHost?: boolean(name='IsFollowHost'),
      mode?: string(name='Mode', example='grid'),
      recordAutoStart?: int32(name='RecordAutoStart', example='0'),
      recordAutoStartType?: int32(name='RecordAutoStartType', example='0'),
    }(name='MoziConfOpenRecordSetting'),
    moziConfVirtualExtraSetting?: {
      cloudRecordOwnerUserId?: string(name='CloudRecordOwnerUserId'),
      enableChat?: int32(name='EnableChat', example='1'),
      enableWebAnonymousJoin?: boolean(name='EnableWebAnonymousJoin'),
      joinBeforeHost?: int32(name='JoinBeforeHost', example='1'),
      lockMediaStatusMicMute?: int32(name='LockMediaStatusMicMute', example='1'),
      lockNick?: int32(name='LockNick', example='1'),
      minutesOwnerUserId?: string(name='MinutesOwnerUserId'),
      moziConfExtensionAppSettings?: [ 
        {
          autoOpenMode?: int32(name='AutoOpenMode', example='0'),
          coolAppCode?: string(name='CoolAppCode', example='xxxx'),
          extensionAppBizData?: string(name='ExtensionAppBizData', example='xxx'),
        }
      ](name='MoziConfExtensionAppSettings'),
      pushAllMeetingRecords?: boolean(name='PushAllMeetingRecords'),
      pushCloudRecordCard?: boolean(name='PushCloudRecordCard'),
      pushMinutesCard?: boolean(name='PushMinutesCard'),
      waitingRoom?: int32(name='WaitingRoom', example='1'),
    }(name='MoziConfVirtualExtraSetting'),
    muteOnJoin?: int32(name='MuteOnJoin', example='1'),
    screenShareForbidden?: int32(name='ScreenShareForbidden', example='1'),
  }(name='ScheduleConfSettingModel'),
  scheduleConferenceId?: string(name='ScheduleConferenceId', example='f6fb627e-a7e8-403e-b1f8-26e85450f4a9'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model UpdateScheduleConfSettingsShrinkRequest {
  scheduleConfSettingModelShrink?: string(name='ScheduleConfSettingModel'),
  scheduleConferenceId?: string(name='ScheduleConferenceId', example='f6fb627e-a7e8-403e-b1f8-26e85450f4a9'),
  tenantContextShrink?: string(name='TenantContext'),
}

model UpdateScheduleConfSettingsResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model UpdateScheduleConfSettingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateScheduleConfSettingsResponseBody(name='body'),
}

/**
 * @summary 更新预约会议设置
 *
 * @param tmpReq UpdateScheduleConfSettingsRequest
 * @param tmpHeader UpdateScheduleConfSettingsHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateScheduleConfSettingsResponse
 */
async function updateScheduleConfSettingsWithOptions(tmpReq: UpdateScheduleConfSettingsRequest, tmpHeader: UpdateScheduleConfSettingsHeaders, runtime: Util.RuntimeOptions): UpdateScheduleConfSettingsResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateScheduleConfSettingsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateScheduleConfSettingsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.scheduleConfSettingModel)) {
    request.scheduleConfSettingModelShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scheduleConfSettingModel, 'ScheduleConfSettingModel', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.scheduleConfSettingModelShrink)) {
    body['ScheduleConfSettingModel'] = request.scheduleConfSettingModelShrink;
  }
  if (!Util.isUnset(request.scheduleConferenceId)) {
    body['ScheduleConferenceId'] = request.scheduleConferenceId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateScheduleConfSettings',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/updateScheduleConfSettings`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新预约会议设置
 *
 * @param request UpdateScheduleConfSettingsRequest
 * @return UpdateScheduleConfSettingsResponse
 */
async function updateScheduleConfSettings(request: UpdateScheduleConfSettingsRequest): UpdateScheduleConfSettingsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateScheduleConfSettingsHeaders{};
  return updateScheduleConfSettingsWithOptions(request, headers, runtime);
}

model UpdateScheduleConferenceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model UpdateScheduleConferenceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateScheduleConferenceRequest {
  endTime?: long(name='EndTime', description='This parameter is required.', example='1687928400000L'),
  scheduleConferenceId?: string(name='ScheduleConferenceId', description='This parameter is required.', example='2a489xxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'),
  startTime?: long(name='StartTime', description='This parameter is required.', example='1687924800000L'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  title?: string(name='Title', description='This parameter is required.', example='预约会议标题'),
}

model UpdateScheduleConferenceShrinkRequest {
  endTime?: long(name='EndTime', description='This parameter is required.', example='1687928400000L'),
  scheduleConferenceId?: string(name='ScheduleConferenceId', description='This parameter is required.', example='2a489xxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'),
  startTime?: long(name='StartTime', description='This parameter is required.', example='1687924800000L'),
  tenantContextShrink?: string(name='TenantContext'),
  title?: string(name='Title', description='This parameter is required.', example='预约会议标题'),
}

model UpdateScheduleConferenceResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model UpdateScheduleConferenceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateScheduleConferenceResponseBody(name='body'),
}

/**
 * @summary 更新预约会议
 *
 * @param tmpReq UpdateScheduleConferenceRequest
 * @param tmpHeader UpdateScheduleConferenceHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateScheduleConferenceResponse
 */
async function updateScheduleConferenceWithOptions(tmpReq: UpdateScheduleConferenceRequest, tmpHeader: UpdateScheduleConferenceHeaders, runtime: Util.RuntimeOptions): UpdateScheduleConferenceResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateScheduleConferenceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateScheduleConferenceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.scheduleConferenceId)) {
    body['ScheduleConferenceId'] = request.scheduleConferenceId;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateScheduleConference',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/updateScheduleConference`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新预约会议
 *
 * @param request UpdateScheduleConferenceRequest
 * @return UpdateScheduleConferenceResponse
 */
async function updateScheduleConference(request: UpdateScheduleConferenceRequest): UpdateScheduleConferenceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateScheduleConferenceHeaders{};
  return updateScheduleConferenceWithOptions(request, headers, runtime);
}

model UpdateStatusHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model UpdateStatusShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateStatusRequest {
  appType?: string(name='AppType', example='APP_PBKT0MFBEBTDO8T7SLVP'),
  errorLines?: [ int32 ](name='ErrorLines'),
  importSequence?: string(name='ImportSequence', example='seq-123'),
  language?: string(name='Language', example='zh_CN'),
  status?: string(name='Status', example='running'),
  systemToken?: string(name='SystemToken', example='hexxxx'),
}

model UpdateStatusShrinkRequest {
  appType?: string(name='AppType', example='APP_PBKT0MFBEBTDO8T7SLVP'),
  errorLinesShrink?: string(name='ErrorLines'),
  importSequence?: string(name='ImportSequence', example='seq-123'),
  language?: string(name='Language', example='zh_CN'),
  status?: string(name='Status', example='running'),
  systemToken?: string(name='SystemToken', example='hexxxx'),
}

model UpdateStatusResponseBody = {
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model UpdateStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateStatusResponseBody(name='body'),
}

/**
 * @summary 更新状态
 *
 * @param tmpReq UpdateStatusRequest
 * @param tmpHeader UpdateStatusHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateStatusResponse
 */
async function updateStatusWithOptions(tmpReq: UpdateStatusRequest, tmpHeader: UpdateStatusHeaders, runtime: Util.RuntimeOptions): UpdateStatusResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateStatusShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateStatusShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.errorLines)) {
    request.errorLinesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.errorLines, 'ErrorLines', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.errorLinesShrink)) {
    body['ErrorLines'] = request.errorLinesShrink;
  }
  if (!Util.isUnset(request.importSequence)) {
    body['ImportSequence'] = request.importSequence;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.systemToken)) {
    body['SystemToken'] = request.systemToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateStatus',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/yida/updateStatus`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新状态
 *
 * @param request UpdateStatusRequest
 * @return UpdateStatusResponse
 */
async function updateStatus(request: UpdateStatusRequest): UpdateStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateStatusHeaders{};
  return updateStatusWithOptions(request, headers, runtime);
}

model UpdateSubscribedCalendarsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model UpdateSubscribedCalendarsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateSubscribedCalendarsRequest {
  calendarId?: string(name='CalendarId', description='This parameter is required.', example='M5MjkxNDUxQHVzZXJzLmRpbmd0YWxrLmNv'),
  description?: string(name='Description'),
  managers?: [ string ](name='Managers'),
  name?: string(name='Name'),
  subscribeScope?: {
    userIds?: [ string ](name='UserIds'),
  }(name='SubscribeScope'),
}

model UpdateSubscribedCalendarsShrinkRequest {
  calendarId?: string(name='CalendarId', description='This parameter is required.', example='M5MjkxNDUxQHVzZXJzLmRpbmd0YWxrLmNv'),
  description?: string(name='Description'),
  managersShrink?: string(name='Managers'),
  name?: string(name='Name'),
  subscribeScopeShrink?: string(name='SubscribeScope'),
}

model UpdateSubscribedCalendarsResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model UpdateSubscribedCalendarsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSubscribedCalendarsResponseBody(name='body'),
}

/**
 * @summary 更新订阅日历
 *
 * @param tmpReq UpdateSubscribedCalendarsRequest
 * @param tmpHeader UpdateSubscribedCalendarsHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateSubscribedCalendarsResponse
 */
async function updateSubscribedCalendarsWithOptions(tmpReq: UpdateSubscribedCalendarsRequest, tmpHeader: UpdateSubscribedCalendarsHeaders, runtime: Util.RuntimeOptions): UpdateSubscribedCalendarsResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateSubscribedCalendarsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateSubscribedCalendarsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.managers)) {
    request.managersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.managers, 'Managers', 'json');
  }
  if (!Util.isUnset(tmpReq.subscribeScope)) {
    request.subscribeScopeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.subscribeScope, 'SubscribeScope', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.calendarId)) {
    body['CalendarId'] = request.calendarId;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.managersShrink)) {
    body['Managers'] = request.managersShrink;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.subscribeScopeShrink)) {
    body['SubscribeScope'] = request.subscribeScopeShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSubscribedCalendars',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/updateSubscribedCalendars`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新订阅日历
 *
 * @param request UpdateSubscribedCalendarsRequest
 * @return UpdateSubscribedCalendarsResponse
 */
async function updateSubscribedCalendars(request: UpdateSubscribedCalendarsRequest): UpdateSubscribedCalendarsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateSubscribedCalendarsHeaders{};
  return updateSubscribedCalendarsWithOptions(request, headers, runtime);
}

model UpdateTodoTaskHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model UpdateTodoTaskShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateTodoTaskRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  description?: string(name='description', example='应用可以调用该接口发起一个钉钉待办任务，该待办事项会出现在钉钉客户端“待办”页面，需要注意的是，通过开放接口发起的待办，目前仅支持直接跳转ISV应用详情页（ISV在调该接口时需传入自身应用详情页链接）。'),
  done?: boolean(name='done', example='true'),
  dueTime?: long(name='dueTime', example='1617675000000'),
  executorIds?: [ string ](name='executorIds', example='[]'),
  participantIds?: [ string ](name='participantIds', example='[]'),
  subject?: string(name='subject', example='更新钉钉待办'),
  taskId?: string(name='taskId', description='This parameter is required.', example='taskId'),
}

model UpdateTodoTaskShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  description?: string(name='description', example='应用可以调用该接口发起一个钉钉待办任务，该待办事项会出现在钉钉客户端“待办”页面，需要注意的是，通过开放接口发起的待办，目前仅支持直接跳转ISV应用详情页（ISV在调该接口时需传入自身应用详情页链接）。'),
  done?: boolean(name='done', example='true'),
  dueTime?: long(name='dueTime', example='1617675000000'),
  executorIdsShrink?: string(name='executorIds', example='[]'),
  participantIdsShrink?: string(name='participantIds', example='[]'),
  subject?: string(name='subject', example='更新钉钉待办'),
  taskId?: string(name='taskId', description='This parameter is required.', example='taskId'),
}

model UpdateTodoTaskResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model UpdateTodoTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTodoTaskResponseBody(name='body'),
}

/**
 * @summary 更新代办
 *
 * @param tmpReq UpdateTodoTaskRequest
 * @param tmpHeader UpdateTodoTaskHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateTodoTaskResponse
 */
async function updateTodoTaskWithOptions(tmpReq: UpdateTodoTaskRequest, tmpHeader: UpdateTodoTaskHeaders, runtime: Util.RuntimeOptions): UpdateTodoTaskResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateTodoTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateTodoTaskShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.executorIds)) {
    request.executorIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.executorIds, 'executorIds', 'json');
  }
  if (!Util.isUnset(tmpReq.participantIds)) {
    request.participantIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.participantIds, 'participantIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.done)) {
    body['done'] = request.done;
  }
  if (!Util.isUnset(request.dueTime)) {
    body['dueTime'] = request.dueTime;
  }
  if (!Util.isUnset(request.executorIdsShrink)) {
    body['executorIds'] = request.executorIdsShrink;
  }
  if (!Util.isUnset(request.participantIdsShrink)) {
    body['participantIds'] = request.participantIdsShrink;
  }
  if (!Util.isUnset(request.subject)) {
    body['subject'] = request.subject;
  }
  if (!Util.isUnset(request.taskId)) {
    body['taskId'] = request.taskId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTodoTask',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/task/updateTodoTask`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新代办
 *
 * @param request UpdateTodoTaskRequest
 * @return UpdateTodoTaskResponse
 */
async function updateTodoTask(request: UpdateTodoTaskRequest): UpdateTodoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateTodoTaskHeaders{};
  return updateTodoTaskWithOptions(request, headers, runtime);
}

model UpdateTodoTaskExecutorStatusHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model UpdateTodoTaskExecutorStatusShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateTodoTaskExecutorStatusRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  executorStatusList?: [ 
    {
      id?: string(name='id', example='userId'),
      isDone?: boolean(name='isDone', example='true'),
    }
  ](name='executorStatusList'),
  operatorId?: string(name='operatorId', example='xxxx'),
  taskId?: string(name='taskId', description='This parameter is required.', example='15002141'),
}

model UpdateTodoTaskExecutorStatusShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  executorStatusListShrink?: string(name='executorStatusList'),
  operatorId?: string(name='operatorId', example='xxxx'),
  taskId?: string(name='taskId', description='This parameter is required.', example='15002141'),
}

model UpdateTodoTaskExecutorStatusResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model UpdateTodoTaskExecutorStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTodoTaskExecutorStatusResponseBody(name='body'),
}

/**
 * @summary 更新代办执行者状态
 *
 * @param tmpReq UpdateTodoTaskExecutorStatusRequest
 * @param tmpHeader UpdateTodoTaskExecutorStatusHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateTodoTaskExecutorStatusResponse
 */
async function updateTodoTaskExecutorStatusWithOptions(tmpReq: UpdateTodoTaskExecutorStatusRequest, tmpHeader: UpdateTodoTaskExecutorStatusHeaders, runtime: Util.RuntimeOptions): UpdateTodoTaskExecutorStatusResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateTodoTaskExecutorStatusShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateTodoTaskExecutorStatusShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.executorStatusList)) {
    request.executorStatusListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.executorStatusList, 'executorStatusList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.executorStatusListShrink)) {
    body['executorStatusList'] = request.executorStatusListShrink;
  }
  if (!Util.isUnset(request.operatorId)) {
    body['operatorId'] = request.operatorId;
  }
  if (!Util.isUnset(request.taskId)) {
    body['taskId'] = request.taskId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTodoTaskExecutorStatus',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/task/updateTodoTaskExecutorStatus`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新代办执行者状态
 *
 * @param request UpdateTodoTaskExecutorStatusRequest
 * @return UpdateTodoTaskExecutorStatusResponse
 */
async function updateTodoTaskExecutorStatus(request: UpdateTodoTaskExecutorStatusRequest): UpdateTodoTaskExecutorStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateTodoTaskExecutorStatusHeaders{};
  return updateTodoTaskExecutorStatusWithOptions(request, headers, runtime);
}

model UpdateUserAvatarHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model UpdateUserAvatarShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateUserAvatarRequest {
  avatarMediaId?: string(name='AvatarMediaId', example='@lADPDfYH3A-xxxx'),
}

model UpdateUserAvatarResponseBody = {
  errcode?: string(name='errcode', example='0'),
  errmsg?: string(name='errmsg'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model UpdateUserAvatarResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserAvatarResponseBody(name='body'),
}

/**
 * @summary 更新企业账号用户头像
 *
 * @param request UpdateUserAvatarRequest
 * @param tmpHeader UpdateUserAvatarHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateUserAvatarResponse
 */
async function updateUserAvatarWithOptions(request: UpdateUserAvatarRequest, tmpHeader: UpdateUserAvatarHeaders, runtime: Util.RuntimeOptions): UpdateUserAvatarResponse {
  Util.validateModel(request);
  var headers = new UpdateUserAvatarShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.avatarMediaId)) {
    body['AvatarMediaId'] = request.avatarMediaId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateUserAvatar',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/contact/updateUserAvatar`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新企业账号用户头像
 *
 * @param request UpdateUserAvatarRequest
 * @return UpdateUserAvatarResponse
 */
async function updateUserAvatar(request: UpdateUserAvatarRequest): UpdateUserAvatarResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateUserAvatarHeaders{};
  return updateUserAvatarWithOptions(request, headers, runtime);
}

model UpdateVideoConferenceSettingHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model UpdateVideoConferenceSettingShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateVideoConferenceSettingRequest {
  allowUnmuteSelf?: boolean(name='AllowUnmuteSelf', example='true'),
  autoTransferHost?: boolean(name='AutoTransferHost', example='true'),
  forbiddenShareScreen?: boolean(name='ForbiddenShareScreen', example='true'),
  lockConference?: boolean(name='LockConference', example='true'),
  muteAll?: boolean(name='MuteAll', example='true'),
  onlyInternalEmployeesJoin?: boolean(name='OnlyInternalEmployeesJoin', example='true'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='61289fxxx'),
}

model UpdateVideoConferenceSettingShrinkRequest {
  allowUnmuteSelf?: boolean(name='AllowUnmuteSelf', example='true'),
  autoTransferHost?: boolean(name='AutoTransferHost', example='true'),
  forbiddenShareScreen?: boolean(name='ForbiddenShareScreen', example='true'),
  lockConference?: boolean(name='LockConference', example='true'),
  muteAll?: boolean(name='MuteAll', example='true'),
  onlyInternalEmployeesJoin?: boolean(name='OnlyInternalEmployeesJoin', example='true'),
  tenantContextShrink?: string(name='TenantContext'),
  conferenceId?: string(name='conferenceId', description='This parameter is required.', example='61289fxxx'),
}

model UpdateVideoConferenceSettingResponseBody = {
  caseResult?: string(name='caseResult', example='success'),
  code?: string(name='code', example='200'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorRequestId?: string(name='vendorRequestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  vendorType?: string(name='vendorType', example='dingtalk'),
}

model UpdateVideoConferenceSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateVideoConferenceSettingResponseBody(name='body'),
}

/**
 * @summary 设置正在进行中的视频会议属性
 *
 * @param tmpReq UpdateVideoConferenceSettingRequest
 * @param tmpHeader UpdateVideoConferenceSettingHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateVideoConferenceSettingResponse
 */
async function updateVideoConferenceSettingWithOptions(tmpReq: UpdateVideoConferenceSettingRequest, tmpHeader: UpdateVideoConferenceSettingHeaders, runtime: Util.RuntimeOptions): UpdateVideoConferenceSettingResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateVideoConferenceSettingShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateVideoConferenceSettingShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.allowUnmuteSelf)) {
    body['AllowUnmuteSelf'] = request.allowUnmuteSelf;
  }
  if (!Util.isUnset(request.autoTransferHost)) {
    body['AutoTransferHost'] = request.autoTransferHost;
  }
  if (!Util.isUnset(request.forbiddenShareScreen)) {
    body['ForbiddenShareScreen'] = request.forbiddenShareScreen;
  }
  if (!Util.isUnset(request.lockConference)) {
    body['LockConference'] = request.lockConference;
  }
  if (!Util.isUnset(request.muteAll)) {
    body['MuteAll'] = request.muteAll;
  }
  if (!Util.isUnset(request.onlyInternalEmployeesJoin)) {
    body['OnlyInternalEmployeesJoin'] = request.onlyInternalEmployeesJoin;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.conferenceId)) {
    body['conferenceId'] = request.conferenceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateVideoConferenceSetting',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/updateVideoConferenceSetting`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 设置正在进行中的视频会议属性
 *
 * @param request UpdateVideoConferenceSettingRequest
 * @return UpdateVideoConferenceSettingResponse
 */
async function updateVideoConferenceSetting(request: UpdateVideoConferenceSettingRequest): UpdateVideoConferenceSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateVideoConferenceSettingHeaders{};
  return updateVideoConferenceSettingWithOptions(request, headers, runtime);
}

model UpdateWorkspaceDocMembersHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model UpdateWorkspaceDocMembersShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateWorkspaceDocMembersRequest {
  members?: [ 
    {
      memberId?: string(name='MemberId', example='012345'),
      memberType?: string(name='MemberType', example='USER'),
      roleType?: string(name='RoleType', example='ONLY_VIEWER'),
    }
  ](name='Members'),
  nodeId?: string(name='NodeId', description='This parameter is required.', example='node_feb8fea0'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='xb8bkxxxxxrXJNaL'),
}

model UpdateWorkspaceDocMembersShrinkRequest {
  membersShrink?: string(name='Members'),
  nodeId?: string(name='NodeId', description='This parameter is required.', example='node_feb8fea0'),
  tenantContextShrink?: string(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='xb8bkxxxxxrXJNaL'),
}

model UpdateWorkspaceDocMembersResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model UpdateWorkspaceDocMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWorkspaceDocMembersResponseBody(name='body'),
}

/**
 * @summary 修改知识库文档成员权限
 *
 * @param tmpReq UpdateWorkspaceDocMembersRequest
 * @param tmpHeader UpdateWorkspaceDocMembersHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateWorkspaceDocMembersResponse
 */
async function updateWorkspaceDocMembersWithOptions(tmpReq: UpdateWorkspaceDocMembersRequest, tmpHeader: UpdateWorkspaceDocMembersHeaders, runtime: Util.RuntimeOptions): UpdateWorkspaceDocMembersResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateWorkspaceDocMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateWorkspaceDocMembersShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.members)) {
    request.membersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.members, 'Members', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.membersShrink)) {
    body['Members'] = request.membersShrink;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWorkspaceDocMembers',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/updateWorkspaceDocMembers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改知识库文档成员权限
 *
 * @param request UpdateWorkspaceDocMembersRequest
 * @return UpdateWorkspaceDocMembersResponse
 */
async function updateWorkspaceDocMembers(request: UpdateWorkspaceDocMembersRequest): UpdateWorkspaceDocMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateWorkspaceDocMembersHeaders{};
  return updateWorkspaceDocMembersWithOptions(request, headers, runtime);
}

model UpdateWorkspaceMembersHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', description='This parameter is required.', example='012345'),
  }(name='AccountContext'),
}

model UpdateWorkspaceMembersShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateWorkspaceMembersRequest {
  members?: [ 
    {
      memberId?: string(name='MemberId', description='This parameter is required.', example='012345'),
      memberType?: string(name='MemberType', description='This parameter is required.', example='USER'),
      roleType?: string(name='RoleType', description='This parameter is required.', example='ONLY_VIEWER'),
    }
  ](name='Members', description='This parameter is required.'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='123'),
}

model UpdateWorkspaceMembersShrinkRequest {
  membersShrink?: string(name='Members', description='This parameter is required.'),
  tenantContextShrink?: string(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='123'),
}

model UpdateWorkspaceMembersResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model UpdateWorkspaceMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWorkspaceMembersResponseBody(name='body'),
}

/**
 * @summary 更新知识库成员权限
 *
 * @param tmpReq UpdateWorkspaceMembersRequest
 * @param tmpHeader UpdateWorkspaceMembersHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateWorkspaceMembersResponse
 */
async function updateWorkspaceMembersWithOptions(tmpReq: UpdateWorkspaceMembersRequest, tmpHeader: UpdateWorkspaceMembersHeaders, runtime: Util.RuntimeOptions): UpdateWorkspaceMembersResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateWorkspaceMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateWorkspaceMembersShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.members)) {
    request.membersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.members, 'Members', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.membersShrink)) {
    body['Members'] = request.membersShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWorkspaceMembers',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/updateWorkspaceMembers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新知识库成员权限
 *
 * @param request UpdateWorkspaceMembersRequest
 * @return UpdateWorkspaceMembersResponse
 */
async function updateWorkspaceMembers(request: UpdateWorkspaceMembersRequest): UpdateWorkspaceMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateWorkspaceMembersHeaders{};
  return updateWorkspaceMembersWithOptions(request, headers, runtime);
}

model UploadMediaHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId'),
  }(name='AccountContext'),
}

model UploadMediaShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UploadMediaRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  mediaName?: string(name='mediaName', example='test.jpg'),
  mediaType?: string(name='mediaType', description='This parameter is required.', example='image'),
  orgId?: long(name='orgId', description='This parameter is required.', example='1234567'),
  url?: string(name='url', description='This parameter is required.', example='https://alicdn.com/xxx.jpg'),
}

model UploadMediaShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  mediaName?: string(name='mediaName', example='test.jpg'),
  mediaType?: string(name='mediaType', description='This parameter is required.', example='image'),
  orgId?: long(name='orgId', description='This parameter is required.', example='1234567'),
  url?: string(name='url', description='This parameter is required.', example='https://alicdn.com/xxx.jpg'),
}

model UploadMediaResponseBody = {
  mediaId?: string(name='mediaId', example='abcd1234'),
  requestId?: string(name='requestId', description='requestId', example='abcd-1234-wxyz-9876'),
}

model UploadMediaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadMediaResponseBody(name='body'),
}

/**
 * @summary 上传媒体<br/>
 *
 * @param tmpReq UploadMediaRequest
 * @param tmpHeader UploadMediaHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UploadMediaResponse
 */
async function uploadMediaWithOptions(tmpReq: UploadMediaRequest, tmpHeader: UploadMediaHeaders, runtime: Util.RuntimeOptions): UploadMediaResponse {
  Util.validateModel(tmpReq);
  var request = new UploadMediaShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UploadMediaShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.mediaName)) {
    body['mediaName'] = request.mediaName;
  }
  if (!Util.isUnset(request.mediaType)) {
    body['mediaType'] = request.mediaType;
  }
  if (!Util.isUnset(request.orgId)) {
    body['orgId'] = request.orgId;
  }
  if (!Util.isUnset(request.url)) {
    body['url'] = request.url;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UploadMedia',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/aliding/v1/documents/uploadMedia`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 上传媒体<br/>
 *
 * @param request UploadMediaRequest
 * @return UploadMediaResponse
 */
async function uploadMedia(request: UploadMediaRequest): UploadMediaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UploadMediaHeaders{};
  return uploadMediaWithOptions(request, headers, runtime);
}

model WearOrgHonorHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='1915607600538524'),
  }(name='AccountContext'),
}

model WearOrgHonorShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model WearOrgHonorRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='306752103647458'),
  }(name='TenantContext'),
  honorId?: string(name='honorId', description='This parameter is required.', example='21659595'),
  orgId?: long(name='orgId', description='This parameter is required.', example='123456'),
  userId?: string(name='userId', description='This parameter is required.', example='363784'),
  wear?: boolean(name='wear', description='This parameter is required.', example='false'),
}

model WearOrgHonorShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  honorId?: string(name='honorId', description='This parameter is required.', example='21659595'),
  orgId?: long(name='orgId', description='This parameter is required.', example='123456'),
  userId?: string(name='userId', description='This parameter is required.', example='363784'),
  wear?: boolean(name='wear', description='This parameter is required.', example='false'),
}

model WearOrgHonorResponseBody = {
  content?: {
    data?: any(name='data', example='null'),
  }(name='content'),
  errorCode?: string(name='errorCode', example='0'),
  errorCtx?: map[string]any(name='errorCtx'),
  errorMsg?: string(name='errorMsg'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='32FFC91D-0A9F-585A-B84F-8A54C5187035'),
  success?: boolean(name='success', example='true'),
}

model WearOrgHonorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: WearOrgHonorResponseBody(name='body'),
}

/**
 * @summary 穿戴勋章
 *
 * @param tmpReq WearOrgHonorRequest
 * @param tmpHeader WearOrgHonorHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return WearOrgHonorResponse
 */
async function wearOrgHonorWithOptions(tmpReq: WearOrgHonorRequest, tmpHeader: WearOrgHonorHeaders, runtime: Util.RuntimeOptions): WearOrgHonorResponse {
  Util.validateModel(tmpReq);
  var request = new WearOrgHonorShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new WearOrgHonorShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.honorId)) {
    body['honorId'] = request.honorId;
  }
  if (!Util.isUnset(request.orgId)) {
    body['orgId'] = request.orgId;
  }
  if (!Util.isUnset(request.userId)) {
    body['userId'] = request.userId;
  }
  if (!Util.isUnset(request.wear)) {
    body['wear'] = request.wear;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'WearOrgHonor',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/aliding/v1/honor/wearOrgHonor`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 穿戴勋章
 *
 * @param request WearOrgHonorRequest
 * @return WearOrgHonorResponse
 */
async function wearOrgHonor(request: WearOrgHonorRequest): WearOrgHonorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new WearOrgHonorHeaders{};
  return wearOrgHonorWithOptions(request, headers, runtime);
}

