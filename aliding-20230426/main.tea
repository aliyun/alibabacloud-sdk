/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aliding', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateSheetHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model CreateSheetShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateSheetRequest {
  name?: string(name='Name', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model CreateSheetShrinkRequest {
  name?: string(name='Name', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model CreateSheetResponseBody = {
  id?: string(name='id', example='stxxxx'),
  name?: string(name='name', example='Sheet1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  visibility?: string(name='visibility', example='visible'),
}

model CreateSheetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSheetResponseBody(name='body'),
}

async function createSheetWithOptions(tmpReq: CreateSheetRequest, tmpHeader: CreateSheetHeaders, runtime: Util.RuntimeOptions): CreateSheetResponse {
  Util.validateModel(tmpReq);
  var request = new CreateSheetShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateSheetShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSheet',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/createSheet`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSheet(request: CreateSheetRequest): CreateSheetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateSheetHeaders{};
  return createSheetWithOptions(request, headers, runtime);
}

model InsertRowsBeforeHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model InsertRowsBeforeShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model InsertRowsBeforeRequest {
  row?: long(name='Row', example='2'),
  rowCount?: long(name='RowCount', example='10'),
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model InsertRowsBeforeShrinkRequest {
  row?: long(name='Row', example='2'),
  rowCount?: long(name='RowCount', example='10'),
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model InsertRowsBeforeResponseBody = {
  id?: string(name='id', example='stxxxx'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model InsertRowsBeforeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InsertRowsBeforeResponseBody(name='body'),
}

async function insertRowsBeforeWithOptions(tmpReq: InsertRowsBeforeRequest, tmpHeader: InsertRowsBeforeHeaders, runtime: Util.RuntimeOptions): InsertRowsBeforeResponse {
  Util.validateModel(tmpReq);
  var request = new InsertRowsBeforeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new InsertRowsBeforeShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.row)) {
    body['Row'] = request.row;
  }
  if (!Util.isUnset(request.rowCount)) {
    body['RowCount'] = request.rowCount;
  }
  if (!Util.isUnset(request.sheetId)) {
    body['SheetId'] = request.sheetId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InsertRowsBefore',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/insertRowsBefore`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function insertRowsBefore(request: InsertRowsBeforeRequest): InsertRowsBeforeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InsertRowsBeforeHeaders{};
  return insertRowsBeforeWithOptions(request, headers, runtime);
}

