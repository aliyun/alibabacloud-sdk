/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aliding', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddAttendeeHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='123456'),
  }(name='AccountContext'),
}

model AddAttendeeShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model AddAttendeeRequest {
  attendeesToAdd?: [ 
    {
      id?: string(name='id', example='123456'),
      isOptional?: boolean(name='isOptional', example='true'),
    }
  ](name='AttendeesToAdd'),
  calendarId?: string(name='CalendarId', example='primary'),
  eventId?: string(name='EventId', example='cnNTbW1YbU9sL2p6aFJZdEgvdlQrQT08'),
}

model AddAttendeeShrinkRequest {
  attendeesToAddShrink?: string(name='AttendeesToAdd'),
  calendarId?: string(name='CalendarId', example='primary'),
  eventId?: string(name='EventId', example='cnNTbW1YbU9sL2p6aFJZdEgvdlQrQT08'),
}

model AddAttendeeResponseBody = {
  content?: {
    data?: any(name='Data', example='[]'),
  }(name='Content'),
  errorCode?: string(name='ErrorCode', example='200'),
  errorCtx?: map[string]any(name='ErrorCtx'),
  errorMsg?: string(name='ErrorMsg', example='error check permissions'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', description='RequestId', example='9BCC17ED-0187-54A0-BD31-56FDBE865447'),
  success?: boolean(name='Success', example='True'),
}

model AddAttendeeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddAttendeeResponseBody(name='body'),
}

async function addAttendeeWithOptions(tmpReq: AddAttendeeRequest, tmpHeader: AddAttendeeHeaders, runtime: Util.RuntimeOptions): AddAttendeeResponse {
  Util.validateModel(tmpReq);
  var request = new AddAttendeeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new AddAttendeeShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.attendeesToAdd)) {
    request.attendeesToAddShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.attendeesToAdd, 'AttendeesToAdd', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.attendeesToAddShrink)) {
    body['AttendeesToAdd'] = request.attendeesToAddShrink;
  }
  if (!Util.isUnset(request.calendarId)) {
    body['CalendarId'] = request.calendarId;
  }
  if (!Util.isUnset(request.eventId)) {
    body['EventId'] = request.eventId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddAttendee',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/addAttendee`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addAttendee(request: AddAttendeeRequest): AddAttendeeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddAttendeeHeaders{};
  return addAttendeeWithOptions(request, headers, runtime);
}

model AddWorkspaceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model AddWorkspaceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model AddWorkspaceRequest {
  name?: string(name='Name'),
  option?: {
    description?: string(name='Description'),
    teamId?: string(name='TeamId', example='lHiicjNFM2iSFYSdz2iPuI8ZwiEiE'),
  }(name='Option'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model AddWorkspaceShrinkRequest {
  name?: string(name='Name'),
  optionShrink?: string(name='Option'),
  tenantContextShrink?: string(name='TenantContext'),
}

model AddWorkspaceResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  workspace?: {
    corpId?: string(name='CorpId', example='ding16b241fd05********288'),
    cover?: string(name='Cover', example='https://example/file-manage-files/zh-CN/202***13/ldet/XXXX.jpg'),
    createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
    creatorId?: string(name='CreatorId', example='01472825524039877041'),
    description?: string(name='Description', example='workspace_description'),
    icon?: {
      type?: string(name='Type', example='TEAM'),
      value?: string(name='Value', example='https://example/file-manage-files/zh-CN/202***13/ldet/avatar3.jpg'),
    }(name='Icon'),
    modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
    modifierId?: string(name='ModifierId', example='01472825524039877041'),
    name?: string(name='Name', example='workspace_name'),
    permissionRole?: string(name='PermissionRole', example='READER'),
    rootNodeId?: string(name='RootNodeId', example='root_node_uuid'),
    teamId?: string(name='TeamId', example='lHiicjNFM2iSFYSdz2iPuI8ZwiEiE'),
    type?: string(name='Type', example='TEAM'),
    url?: string(name='Url', example='workspace_url'),
    workspaceId?: string(name='WorkspaceId', example='workspace_id'),
  }(name='workspace'),
}

model AddWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddWorkspaceResponseBody(name='body'),
}

async function addWorkspaceWithOptions(tmpReq: AddWorkspaceRequest, tmpHeader: AddWorkspaceHeaders, runtime: Util.RuntimeOptions): AddWorkspaceResponse {
  Util.validateModel(tmpReq);
  var request = new AddWorkspaceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new AddWorkspaceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.option)) {
    request.optionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.option, 'Option', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.optionShrink)) {
    body['Option'] = request.optionShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddWorkspace',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/addWorkspace`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addWorkspace(request: AddWorkspaceRequest): AddWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddWorkspaceHeaders{};
  return addWorkspaceWithOptions(request, headers, runtime);
}

model AddWorkspaceDocMembersHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model AddWorkspaceDocMembersShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model AddWorkspaceDocMembersRequest {
  members?: [ 
    {
      memberId?: string(name='MemberId', example='012345'),
      memberType?: string(name='MemberType', example='USER'),
      roleType?: string(name='RoleType', example='EDITOR'),
    }
  ](name='Members'),
  nodeId?: string(name='NodeId', example='xxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='xxx'),
}

model AddWorkspaceDocMembersShrinkRequest {
  membersShrink?: string(name='Members'),
  nodeId?: string(name='NodeId', example='xxx'),
  tenantContextShrink?: string(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='xxx'),
}

model AddWorkspaceDocMembersResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model AddWorkspaceDocMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddWorkspaceDocMembersResponseBody(name='body'),
}

async function addWorkspaceDocMembersWithOptions(tmpReq: AddWorkspaceDocMembersRequest, tmpHeader: AddWorkspaceDocMembersHeaders, runtime: Util.RuntimeOptions): AddWorkspaceDocMembersResponse {
  Util.validateModel(tmpReq);
  var request = new AddWorkspaceDocMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new AddWorkspaceDocMembersShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.members)) {
    request.membersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.members, 'Members', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.membersShrink)) {
    body['Members'] = request.membersShrink;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddWorkspaceDocMembers',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/addWorkspaceDocMembers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addWorkspaceDocMembers(request: AddWorkspaceDocMembersRequest): AddWorkspaceDocMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddWorkspaceDocMembersHeaders{};
  return addWorkspaceDocMembersWithOptions(request, headers, runtime);
}

model AddWorkspaceMembersHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model AddWorkspaceMembersShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model AddWorkspaceMembersRequest {
  members?: [ 
    {
      memberId?: string(name='MemberId', example='012345'),
      memberType?: string(name='MemberType', example='USER'),
      roleType?: string(name='RoleType', example='EDITOR'),
    }
  ](name='Members'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='123'),
}

model AddWorkspaceMembersShrinkRequest {
  membersShrink?: string(name='Members'),
  tenantContextShrink?: string(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='123'),
}

model AddWorkspaceMembersResponseBody = {
  notInOrgList?: [ string ](name='NotInOrgList'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model AddWorkspaceMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddWorkspaceMembersResponseBody(name='body'),
}

async function addWorkspaceMembersWithOptions(tmpReq: AddWorkspaceMembersRequest, tmpHeader: AddWorkspaceMembersHeaders, runtime: Util.RuntimeOptions): AddWorkspaceMembersResponse {
  Util.validateModel(tmpReq);
  var request = new AddWorkspaceMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new AddWorkspaceMembersShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.members)) {
    request.membersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.members, 'Members', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.membersShrink)) {
    body['Members'] = request.membersShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddWorkspaceMembers',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/addWorkspaceMembers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addWorkspaceMembers(request: AddWorkspaceMembersRequest): AddWorkspaceMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddWorkspaceMembersHeaders{};
  return addWorkspaceMembersWithOptions(request, headers, runtime);
}

model CancelScheduleConferenceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model CancelScheduleConferenceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CancelScheduleConferenceRequest {
  scheduleConferenceId?: string(name='ScheduleConferenceId', example='2a489xxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model CancelScheduleConferenceShrinkRequest {
  scheduleConferenceId?: string(name='ScheduleConferenceId', example='2a489xxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'),
  tenantContextShrink?: string(name='TenantContext'),
}

model CancelScheduleConferenceResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model CancelScheduleConferenceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelScheduleConferenceResponseBody(name='body'),
}

async function cancelScheduleConferenceWithOptions(tmpReq: CancelScheduleConferenceRequest, tmpHeader: CancelScheduleConferenceHeaders, runtime: Util.RuntimeOptions): CancelScheduleConferenceResponse {
  Util.validateModel(tmpReq);
  var request = new CancelScheduleConferenceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CancelScheduleConferenceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.scheduleConferenceId)) {
    body['ScheduleConferenceId'] = request.scheduleConferenceId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CancelScheduleConference',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/cancelScheduleConference`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelScheduleConference(request: CancelScheduleConferenceRequest): CancelScheduleConferenceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CancelScheduleConferenceHeaders{};
  return cancelScheduleConferenceWithOptions(request, headers, runtime);
}

model ClearHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model ClearShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ClearRequest {
  rangeAddress?: string(name='RangeAddress', example='A3:C3'),
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model ClearShrinkRequest {
  rangeAddress?: string(name='RangeAddress', example='A3:C3'),
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model ClearResponseBody = {
  a1Notation?: string(name='a1Notation', example='A1:B2'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model ClearResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ClearResponseBody(name='body'),
}

async function clearWithOptions(tmpReq: ClearRequest, tmpHeader: ClearHeaders, runtime: Util.RuntimeOptions): ClearResponse {
  Util.validateModel(tmpReq);
  var request = new ClearShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new ClearShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.rangeAddress)) {
    body['RangeAddress'] = request.rangeAddress;
  }
  if (!Util.isUnset(request.sheetId)) {
    body['SheetId'] = request.sheetId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'Clear',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/clear`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function clear(request: ClearRequest): ClearResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ClearHeaders{};
  return clearWithOptions(request, headers, runtime);
}

model ClearDataHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model ClearDataShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ClearDataRequest {
  rangeAddress?: string(name='RangeAddress', example='A3:C3'),
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model ClearDataShrinkRequest {
  rangeAddress?: string(name='RangeAddress', example='A3:C3'),
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model ClearDataResponseBody = {
  a1Notation?: string(name='a1Notation', example='A1:B2'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model ClearDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ClearDataResponseBody(name='body'),
}

async function clearDataWithOptions(tmpReq: ClearDataRequest, tmpHeader: ClearDataHeaders, runtime: Util.RuntimeOptions): ClearDataResponse {
  Util.validateModel(tmpReq);
  var request = new ClearDataShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new ClearDataShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.rangeAddress)) {
    body['RangeAddress'] = request.rangeAddress;
  }
  if (!Util.isUnset(request.sheetId)) {
    body['SheetId'] = request.sheetId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ClearData',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/clearData`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function clearData(request: ClearDataRequest): ClearDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ClearDataHeaders{};
  return clearDataWithOptions(request, headers, runtime);
}

model CommentListReportHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model CommentListReportShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CommentListReportRequest {
  offset?: long(name='Offset', example='10'),
  reportId?: string(name='ReportId', example='173xxxx'),
  size?: long(name='Size', example='10'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model CommentListReportShrinkRequest {
  offset?: long(name='Offset', example='10'),
  reportId?: string(name='ReportId', example='173xxxx'),
  size?: long(name='Size', example='10'),
  tenantContextShrink?: string(name='TenantContext'),
}

model CommentListReportResponseBody = {
  comments?: [ 
    {
      content?: string(name='Content'),
      createTime?: string(name='CreateTime', example='1678442466000'),
      userid?: string(name='Userid', example='012345'),
    }
  ](name='comments'),
  hasMore?: boolean(name='hasMore', example='true'),
  nextCursor?: long(name='nextCursor', example='1568442466000'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model CommentListReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CommentListReportResponseBody(name='body'),
}

async function commentListReportWithOptions(tmpReq: CommentListReportRequest, tmpHeader: CommentListReportHeaders, runtime: Util.RuntimeOptions): CommentListReportResponse {
  Util.validateModel(tmpReq);
  var request = new CommentListReportShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CommentListReportShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.offset)) {
    body['Offset'] = request.offset;
  }
  if (!Util.isUnset(request.reportId)) {
    body['ReportId'] = request.reportId;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CommentListReport',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/log/commentListReport`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function commentListReport(request: CommentListReportRequest): CommentListReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CommentListReportHeaders{};
  return commentListReportWithOptions(request, headers, runtime);
}

model CreateEventHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='208579'),
  }(name='AccountContext'),
}

model CreateEventShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateEventRequest {
  attendees?: [ 
    {
      id?: string(name='id', example='7845'),
      isOptional?: boolean(name='isOptional', example='true'),
    }
  ](name='Attendees'),
  description?: string(name='Description'),
  end?: {
    date?: string(name='date', example='"2020-09-21"'),
    dateTime?: string(name='dateTime', example='"2021-09-20T10:15:30+08:00"'),
    timeZone?: string(name='timeZone', example='"Asia/Shanghai"'),
  }(name='End'),
  extra?: map[string]string(name='Extra'),
  isAllDay?: boolean(name='IsAllDay', example='true'),
  location?: {
    displayName?: string(name='displayName'),
  }(name='Location'),
  onlineMeetingInfo?: {
    type?: string(name='type', example='dingtalk'),
  }(name='OnlineMeetingInfo'),
  recurrence?: {
    pattern?: {
      dayOfMonth?: int32(name='dayOfMonth', example='1'),
      daysOfWeek?: string(name='daysOfWeek', example='"monday"'),
      index?: string(name='index', example='"last"'),
      interval?: int32(name='interval', example='1'),
      type?: string(name='type', example='"daily"'),
    }(name='pattern'),
    range?: {
      endDate?: string(name='endDate', example='"2021-12-31T10:15:30+08:00"'),
      numberOfOccurrences?: int32(name='numberOfOccurrences', example='5'),
      type?: string(name='type', example='"endDate"'),
    }(name='range'),
  }(name='Recurrence'),
  reminders?: [ 
    {
      method?: string(name='method', example='dingtalk'),
      minutes?: int32(name='minutes', example='15'),
    }
  ](name='Reminders'),
  summary?: string(name='Summary'),
  uiConfigs?: [ 
    {
      uiName?: string(name='uiName', example='"updateEventButton"'),
      uiStatus?: string(name='uiStatus', example='"hide"'),
    }
  ](name='UiConfigs'),
  calendarId?: string(name='calendarId', example='primary'),
  start?: {
    date?: string(name='date', example='"2021-09-20"'),
    dateTime?: string(name='dateTime', example='"2021-09-20T10:15:30+08:00"'),
    timeZone?: string(name='timeZone', example='"Asia/Shanghai"'),
  }(name='start'),
}

model CreateEventShrinkRequest {
  attendeesShrink?: string(name='Attendees'),
  description?: string(name='Description'),
  endShrink?: string(name='End'),
  extraShrink?: string(name='Extra'),
  isAllDay?: boolean(name='IsAllDay', example='true'),
  locationShrink?: string(name='Location'),
  onlineMeetingInfoShrink?: string(name='OnlineMeetingInfo'),
  recurrenceShrink?: string(name='Recurrence'),
  remindersShrink?: string(name='Reminders'),
  summary?: string(name='Summary'),
  uiConfigsShrink?: string(name='UiConfigs'),
  calendarId?: string(name='calendarId', example='primary'),
  startShrink?: string(name='start'),
}

model CreateEventResponseBody = {
  attendees?: [ 
    {
      displayName?: string(name='DisplayName'),
      isOptional?: boolean(name='IsOptional', example='true'),
      responseStatus?: string(name='ResponseStatus', example='needsAction'),
      self?: boolean(name='Self', example='true'),
    }
  ](name='attendees'),
  createTime?: string(name='createTime', example='2020-01-01T10:15:30+08:00'),
  description?: string(name='description'),
  end?: {
    date?: string(name='Date', example='2020-01-01'),
    dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
    timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
  }(name='end'),
  id?: string(name='id', example='iiiP35sJadba8aBSgjrwPRKgiEiF'),
  isAllDay?: boolean(name='isAllDay', example='true'),
  location?: {
    displayName?: string(name='DisplayName', example='room 1-2-3'),
  }(name='location'),
  onlineMeetingInfo?: {
    conferenceId?: string(name='ConferenceId', example='123'),
    extraInfo?: map[string]any(name='ExtraInfo'),
    type?: string(name='Type', example='dingtalk'),
    url?: string(name='Url', example='http://meeting'),
  }(name='onlineMeetingInfo'),
  organizer?: {
    displayName?: string(name='DisplayName'),
    id?: string(name='Id', example='123456'),
    responseStatus?: string(name='ResponseStatus', example='accepted'),
    self?: boolean(name='Self', example='true'),
  }(name='organizer'),
  recurrence?: {
    pattern?: {
      dayOfMonth?: int32(name='DayOfMonth', example='14'),
      daysOfWeek?: string(name='DaysOfWeek', example='sunday'),
      index?: string(name='Index', example='first'),
      interval?: int32(name='Interval', example='1'),
      type?: string(name='Type', example='daily'),
    }(name='Pattern'),
    range?: {
      endDate?: string(name='EndDate', example='2020-01-01T10:15:30+08:00'),
      numberOfOccurrences?: int32(name='NumberOfOccurrences', example='5'),
      type?: string(name='Type', example='noEnd'),
    }(name='Range'),
  }(name='recurrence'),
  reminders?: [ 
    {
      method?: string(name='Method', example='dingtalk'),
      minutes?: string(name='Minutes', example='15'),
    }
  ](name='reminders'),
  requestId?: string(name='requestId', description='requestId', example='4248DCC9-785F-5A14-8BE0-830FD52E1261'),
  start?: {
    date?: string(name='Date', example='2020-01-01'),
    dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
    timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
  }(name='start'),
  summary?: string(name='summary'),
  uiConfigs?: [ 
    {
      uiName?: string(name='UiName', example='updateEventButton'),
      uiStatus?: string(name='UiStatus', example='hide'),
    }
  ](name='uiConfigs'),
  updateTime?: string(name='updateTime', example='2020-01-01T10:15:30+08:00'),
}

model CreateEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEventResponseBody(name='body'),
}

async function createEventWithOptions(tmpReq: CreateEventRequest, tmpHeader: CreateEventHeaders, runtime: Util.RuntimeOptions): CreateEventResponse {
  Util.validateModel(tmpReq);
  var request = new CreateEventShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateEventShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.attendees)) {
    request.attendeesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.attendees, 'Attendees', 'json');
  }
  if (!Util.isUnset(tmpReq.end)) {
    request.endShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.end, 'End', 'json');
  }
  if (!Util.isUnset(tmpReq.extra)) {
    request.extraShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extra, 'Extra', 'json');
  }
  if (!Util.isUnset(tmpReq.location)) {
    request.locationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.location, 'Location', 'json');
  }
  if (!Util.isUnset(tmpReq.onlineMeetingInfo)) {
    request.onlineMeetingInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.onlineMeetingInfo, 'OnlineMeetingInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.recurrence)) {
    request.recurrenceShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.recurrence, 'Recurrence', 'json');
  }
  if (!Util.isUnset(tmpReq.reminders)) {
    request.remindersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.reminders, 'Reminders', 'json');
  }
  if (!Util.isUnset(tmpReq.uiConfigs)) {
    request.uiConfigsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.uiConfigs, 'UiConfigs', 'json');
  }
  if (!Util.isUnset(tmpReq.start)) {
    request.startShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.start, 'start', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.attendeesShrink)) {
    body['Attendees'] = request.attendeesShrink;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.endShrink)) {
    body['End'] = request.endShrink;
  }
  if (!Util.isUnset(request.extraShrink)) {
    body['Extra'] = request.extraShrink;
  }
  if (!Util.isUnset(request.isAllDay)) {
    body['IsAllDay'] = request.isAllDay;
  }
  if (!Util.isUnset(request.locationShrink)) {
    body['Location'] = request.locationShrink;
  }
  if (!Util.isUnset(request.onlineMeetingInfoShrink)) {
    body['OnlineMeetingInfo'] = request.onlineMeetingInfoShrink;
  }
  if (!Util.isUnset(request.recurrenceShrink)) {
    body['Recurrence'] = request.recurrenceShrink;
  }
  if (!Util.isUnset(request.remindersShrink)) {
    body['Reminders'] = request.remindersShrink;
  }
  if (!Util.isUnset(request.summary)) {
    body['Summary'] = request.summary;
  }
  if (!Util.isUnset(request.uiConfigsShrink)) {
    body['UiConfigs'] = request.uiConfigsShrink;
  }
  if (!Util.isUnset(request.calendarId)) {
    body['calendarId'] = request.calendarId;
  }
  if (!Util.isUnset(request.startShrink)) {
    body['start'] = request.startShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateEvent',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/createEvent`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEvent(request: CreateEventRequest): CreateEventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateEventHeaders{};
  return createEventWithOptions(request, headers, runtime);
}

model CreateLiveHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model CreateLiveShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateLiveRequest {
  coverUrl?: string(name='CoverUrl', example='http://sss/sss'),
  introduction?: string(name='Introduction', example='这是一个直播'),
  preEndTime?: long(name='PreEndTime', example='1698596800000'),
  preStartTime?: long(name='PreStartTime', example='1691596800000'),
  publicType?: long(name='PublicType', example='0'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  title?: string(name='Title', example='标题'),
}

model CreateLiveShrinkRequest {
  coverUrl?: string(name='CoverUrl', example='http://sss/sss'),
  introduction?: string(name='Introduction', example='这是一个直播'),
  preEndTime?: long(name='PreEndTime', example='1698596800000'),
  preStartTime?: long(name='PreStartTime', example='1691596800000'),
  publicType?: long(name='PublicType', example='0'),
  tenantContextShrink?: string(name='TenantContext'),
  title?: string(name='Title', example='标题'),
}

model CreateLiveResponseBody = {
  liveId?: string(name='liveId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model CreateLiveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLiveResponseBody(name='body'),
}

async function createLiveWithOptions(tmpReq: CreateLiveRequest, tmpHeader: CreateLiveHeaders, runtime: Util.RuntimeOptions): CreateLiveResponse {
  Util.validateModel(tmpReq);
  var request = new CreateLiveShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateLiveShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.coverUrl)) {
    body['CoverUrl'] = request.coverUrl;
  }
  if (!Util.isUnset(request.introduction)) {
    body['Introduction'] = request.introduction;
  }
  if (!Util.isUnset(request.preEndTime)) {
    body['PreEndTime'] = request.preEndTime;
  }
  if (!Util.isUnset(request.preStartTime)) {
    body['PreStartTime'] = request.preStartTime;
  }
  if (!Util.isUnset(request.publicType)) {
    body['PublicType'] = request.publicType;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateLive',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/createLive`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createLive(request: CreateLiveRequest): CreateLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateLiveHeaders{};
  return createLiveWithOptions(request, headers, runtime);
}

model CreateMeetingRoomHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model CreateMeetingRoomShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateMeetingRoomRequest {
  groupId?: long(name='GroupId', example='4644'),
  isvRoomId?: string(name='IsvRoomId', example='xxxIsvRoomId'),
  roomCapacity?: int32(name='RoomCapacity', example='100'),
  roomLabelIds?: [ long ](name='RoomLabelIds'),
  roomLocation?: {
    desc?: string(name='Desc'),
    title?: string(name='Title'),
  }(name='RoomLocation'),
  roomName?: string(name='RoomName'),
  roomPicture?: string(name='RoomPicture', example='https://static.dingtalk.com/media/lADPxxxxx.jpg'),
  roomStatus?: int32(name='RoomStatus', example='1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model CreateMeetingRoomShrinkRequest {
  groupId?: long(name='GroupId', example='4644'),
  isvRoomId?: string(name='IsvRoomId', example='xxxIsvRoomId'),
  roomCapacity?: int32(name='RoomCapacity', example='100'),
  roomLabelIdsShrink?: string(name='RoomLabelIds'),
  roomLocationShrink?: string(name='RoomLocation'),
  roomName?: string(name='RoomName'),
  roomPicture?: string(name='RoomPicture', example='https://static.dingtalk.com/media/lADPxxxxx.jpg'),
  roomStatus?: int32(name='RoomStatus', example='1'),
  tenantContextShrink?: string(name='TenantContext'),
}

model CreateMeetingRoomResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: string(name='result', example='0ffb718xxxxx'),
}

model CreateMeetingRoomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMeetingRoomResponseBody(name='body'),
}

async function createMeetingRoomWithOptions(tmpReq: CreateMeetingRoomRequest, tmpHeader: CreateMeetingRoomHeaders, runtime: Util.RuntimeOptions): CreateMeetingRoomResponse {
  Util.validateModel(tmpReq);
  var request = new CreateMeetingRoomShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateMeetingRoomShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.roomLabelIds)) {
    request.roomLabelIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roomLabelIds, 'RoomLabelIds', 'json');
  }
  if (!Util.isUnset(tmpReq.roomLocation)) {
    request.roomLocationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roomLocation, 'RoomLocation', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.isvRoomId)) {
    body['IsvRoomId'] = request.isvRoomId;
  }
  if (!Util.isUnset(request.roomCapacity)) {
    body['RoomCapacity'] = request.roomCapacity;
  }
  if (!Util.isUnset(request.roomLabelIdsShrink)) {
    body['RoomLabelIds'] = request.roomLabelIdsShrink;
  }
  if (!Util.isUnset(request.roomLocationShrink)) {
    body['RoomLocation'] = request.roomLocationShrink;
  }
  if (!Util.isUnset(request.roomName)) {
    body['RoomName'] = request.roomName;
  }
  if (!Util.isUnset(request.roomPicture)) {
    body['RoomPicture'] = request.roomPicture;
  }
  if (!Util.isUnset(request.roomStatus)) {
    body['RoomStatus'] = request.roomStatus;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateMeetingRoom',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/createMeetingRoom`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createMeetingRoom(request: CreateMeetingRoomRequest): CreateMeetingRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateMeetingRoomHeaders{};
  return createMeetingRoomWithOptions(request, headers, runtime);
}

model CreateMeetingRoomGroupHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model CreateMeetingRoomGroupShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateMeetingRoomGroupRequest {
  groupName?: string(name='GroupName', example='测试分组'),
  parentGroupId?: long(name='ParentGroupId', example='172L'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model CreateMeetingRoomGroupShrinkRequest {
  groupName?: string(name='GroupName', example='测试分组'),
  parentGroupId?: long(name='ParentGroupId', example='172L'),
  tenantContextShrink?: string(name='TenantContext'),
}

model CreateMeetingRoomGroupResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: long(name='result', example='172'),
}

model CreateMeetingRoomGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMeetingRoomGroupResponseBody(name='body'),
}

async function createMeetingRoomGroupWithOptions(tmpReq: CreateMeetingRoomGroupRequest, tmpHeader: CreateMeetingRoomGroupHeaders, runtime: Util.RuntimeOptions): CreateMeetingRoomGroupResponse {
  Util.validateModel(tmpReq);
  var request = new CreateMeetingRoomGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateMeetingRoomGroupShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupName)) {
    body['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.parentGroupId)) {
    body['ParentGroupId'] = request.parentGroupId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateMeetingRoomGroup',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/createMeetingRoomGroup`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createMeetingRoomGroup(request: CreateMeetingRoomGroupRequest): CreateMeetingRoomGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateMeetingRoomGroupHeaders{};
  return createMeetingRoomGroupWithOptions(request, headers, runtime);
}

model CreateReportHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model CreateReportShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateReportRequest {
  contents?: [ 
    {
      content?: string(name='Content', example='### 序号1'),
      contentType?: string(name='ContentType', example='markdown'),
      key?: string(name='Key', example='今日完成工作'),
      sort?: long(name='Sort', example='0'),
      type?: long(name='Type', example='1'),
    }
  ](name='Contents', example='[]'),
  ddFrom?: string(name='DdFrom', example='client'),
  templateId?: string(name='TemplateId', example='sdfafdsfsafdfsaf'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  toChat?: boolean(name='ToChat', example='true'),
  toCids?: [ string ](name='ToCids', example='[]'),
  toUserids?: [ string ](name='ToUserids', example='[123,456]'),
}

model CreateReportShrinkRequest {
  contentsShrink?: string(name='Contents', example='[]'),
  ddFrom?: string(name='DdFrom', example='client'),
  templateId?: string(name='TemplateId', example='sdfafdsfsafdfsaf'),
  tenantContextShrink?: string(name='TenantContext'),
  toChat?: boolean(name='ToChat', example='true'),
  toCidsShrink?: string(name='ToCids', example='[]'),
  toUseridsShrink?: string(name='ToUserids', example='[123,456]'),
}

model CreateReportResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model CreateReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateReportResponseBody(name='body'),
}

async function createReportWithOptions(tmpReq: CreateReportRequest, tmpHeader: CreateReportHeaders, runtime: Util.RuntimeOptions): CreateReportResponse {
  Util.validateModel(tmpReq);
  var request = new CreateReportShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateReportShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.contents)) {
    request.contentsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.contents, 'Contents', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.toCids)) {
    request.toCidsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.toCids, 'ToCids', 'json');
  }
  if (!Util.isUnset(tmpReq.toUserids)) {
    request.toUseridsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.toUserids, 'ToUserids', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.contentsShrink)) {
    body['Contents'] = request.contentsShrink;
  }
  if (!Util.isUnset(request.ddFrom)) {
    body['DdFrom'] = request.ddFrom;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.toChat)) {
    body['ToChat'] = request.toChat;
  }
  if (!Util.isUnset(request.toCidsShrink)) {
    body['ToCids'] = request.toCidsShrink;
  }
  if (!Util.isUnset(request.toUseridsShrink)) {
    body['ToUserids'] = request.toUseridsShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateReport',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/log/createReport`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createReport(request: CreateReportRequest): CreateReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateReportHeaders{};
  return createReportWithOptions(request, headers, runtime);
}

model CreateScheduleConferenceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model CreateScheduleConferenceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateScheduleConferenceRequest {
  endTime?: long(name='EndTime', example='1687928400000L'),
  startTime?: long(name='StartTime', example='1687924800000L'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  title?: string(name='Title', example='预约会议标题'),
}

model CreateScheduleConferenceShrinkRequest {
  endTime?: long(name='EndTime', example='1687928400000L'),
  startTime?: long(name='StartTime', example='1687924800000L'),
  tenantContextShrink?: string(name='TenantContext'),
  title?: string(name='Title', example='预约会议标题'),
}

model CreateScheduleConferenceResponseBody = {
  phones?: [ string ](name='phones', example='+861234567'),
  requestId?: string(name='requestId', description='requestId', example='1234567'),
  roomCode?: string(name='roomCode', example='83150xxxxxx'),
  scheduleConferenceId?: string(name='scheduleConferenceId', example='5c7c9bb1-b256-4dc5-xxxx-xxxxxxxxxxxx'),
  url?: string(name='url', example='https://meeting.dingtalk.com/j/knvMq1ixxxx'),
}

model CreateScheduleConferenceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateScheduleConferenceResponseBody(name='body'),
}

async function createScheduleConferenceWithOptions(tmpReq: CreateScheduleConferenceRequest, tmpHeader: CreateScheduleConferenceHeaders, runtime: Util.RuntimeOptions): CreateScheduleConferenceResponse {
  Util.validateModel(tmpReq);
  var request = new CreateScheduleConferenceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateScheduleConferenceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateScheduleConference',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/createScheduleConference`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createScheduleConference(request: CreateScheduleConferenceRequest): CreateScheduleConferenceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateScheduleConferenceHeaders{};
  return createScheduleConferenceWithOptions(request, headers, runtime);
}

model CreateSheetHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model CreateSheetShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateSheetRequest {
  name?: string(name='Name', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model CreateSheetShrinkRequest {
  name?: string(name='Name', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model CreateSheetResponseBody = {
  id?: string(name='id', example='stxxxx'),
  name?: string(name='name', example='Sheet1'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  visibility?: string(name='visibility', example='visible'),
}

model CreateSheetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSheetResponseBody(name='body'),
}

async function createSheetWithOptions(tmpReq: CreateSheetRequest, tmpHeader: CreateSheetHeaders, runtime: Util.RuntimeOptions): CreateSheetResponse {
  Util.validateModel(tmpReq);
  var request = new CreateSheetShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateSheetShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSheet',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/createSheet`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSheet(request: CreateSheetRequest): CreateSheetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateSheetHeaders{};
  return createSheetWithOptions(request, headers, runtime);
}

model CreateTodoTaskHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model CreateTodoTaskShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateTodoTaskRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  contentFieldList?: [ 
    {
      fieldKey?: string(name='fieldKey', description='fieldKey', example='fieldKey'),
      fieldValue?: string(name='fieldValue', description='fieldValue', example='fieldValue'),
    }
  ](name='contentFieldList'),
  creatorId?: string(name='creatorId', example='PUoiinWIpa2yH2ymhiiGiP6g'),
  description?: string(name='description', example='应用可以调用该接口发起一个钉钉待办任务，该待办事项会出现在钉钉客户端“待办”页面，需要注意的是，通过开放接口发起的待办，目前仅支持直接跳转ISV应用详情页（ISV在调该接口时需传入自身应用详情页链接）。'),
  detailUrl?: {
    appUrl?: string(name='appUrl', example='https://www.dingtalk.com'),
    pcUrl?: string(name='pcUrl', example='https://www.dingtalk.com'),
  }(name='detailUrl'),
  dueTime?: long(name='dueTime', example='1617675000000'),
  executorIds?: [ string ](name='executorIds'),
  isOnlyShowExecutor?: boolean(name='isOnlyShowExecutor', example='true'),
  notifyConfigs?: {
    dingNotify?: string(name='dingNotify', example='1'),
  }(name='notifyConfigs'),
  operatorId?: string(name='operatorId', example='12345'),
  participantIds?: [ string ](name='participantIds'),
  priority?: int32(name='priority', example='20'),
  sourceId?: string(name='sourceId', example='isv_dingtalkTodo1'),
  subject?: string(name='subject', example='接入钉钉待办'),
}

model CreateTodoTaskShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  contentFieldListShrink?: string(name='contentFieldList'),
  creatorId?: string(name='creatorId', example='PUoiinWIpa2yH2ymhiiGiP6g'),
  description?: string(name='description', example='应用可以调用该接口发起一个钉钉待办任务，该待办事项会出现在钉钉客户端“待办”页面，需要注意的是，通过开放接口发起的待办，目前仅支持直接跳转ISV应用详情页（ISV在调该接口时需传入自身应用详情页链接）。'),
  detailUrlShrink?: string(name='detailUrl'),
  dueTime?: long(name='dueTime', example='1617675000000'),
  executorIdsShrink?: string(name='executorIds'),
  isOnlyShowExecutor?: boolean(name='isOnlyShowExecutor', example='true'),
  notifyConfigsShrink?: string(name='notifyConfigs'),
  operatorId?: string(name='operatorId', example='12345'),
  participantIdsShrink?: string(name='participantIds'),
  priority?: int32(name='priority', example='20'),
  sourceId?: string(name='sourceId', example='isv_dingtalkTodo1'),
  subject?: string(name='subject', example='接入钉钉待办'),
}

model CreateTodoTaskResponseBody = {
  bizTag?: string(name='bizTag', example='isv_dingtalkTodo'),
  contentFieldList?: [ 
    {
      fieldKey?: string(name='fieldKey', description='fieldKey', example='fieldKey'),
      fieldValue?: string(name='fieldValue', description='fieldValue', example='fieldValue'),
    }
  ](name='contentFieldList'),
  createdTime?: long(name='createdTime', example='1617675200000'),
  creatorId?: string(name='creatorId', example='PUoiinWIpa2yH2ymhiiGiP6g'),
  description?: string(name='description', example='应用可以调用该接口发起一个钉钉待办任务，该待办事项会出现在钉钉客户端“待办”页面，需要注意的是，通过开放接口发起的待办，目前仅支持直接跳转ISV应用详情页（ISV在调该接口时需传入自身应用详情页链接）。'),
  detailUrl?: {
    appUrl?: string(name='appUrl', example='https://www.dingtalk.com'),
    pcUrl?: string(name='pcUrl', example='https://www.dingtalk.com'),
  }(name='detailUrl'),
  done?: boolean(name='done', example='false'),
  dueTime?: long(name='dueTime', example='1617675100000'),
  executorIds?: [ string ](name='executorIds'),
  finishTime?: long(name='finishTime', example='1617675200000'),
  id?: string(name='id', example='OPJpwtwPVNGIFKURjrzd'),
  isOnlyShowExecutor?: boolean(name='isOnlyShowExecutor', example='true'),
  modifiedTime?: long(name='modifiedTime', example='1617675200000'),
  modifierId?: string(name='modifierId', example='PUoiinWIpa2yH2ymhiiGiP6g'),
  notifyConfigs?: {
    dingNotify?: string(name='dingNotify', example='1'),
  }(name='notifyConfigs'),
  participantIds?: [ string ](name='participantIds'),
  priority?: int32(name='priority', example='20'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  source?: string(name='source', example='isv_dingtalkTodo'),
  sourceId?: string(name='sourceId', example='isv_dingtalkTodo1'),
  startTime?: long(name='startTime', example='1617675000000'),
  subject?: string(name='subject', example='接入钉钉待办'),
}

model CreateTodoTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTodoTaskResponseBody(name='body'),
}

async function createTodoTaskWithOptions(tmpReq: CreateTodoTaskRequest, tmpHeader: CreateTodoTaskHeaders, runtime: Util.RuntimeOptions): CreateTodoTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateTodoTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateTodoTaskShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.contentFieldList)) {
    request.contentFieldListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.contentFieldList, 'contentFieldList', 'json');
  }
  if (!Util.isUnset(tmpReq.detailUrl)) {
    request.detailUrlShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.detailUrl, 'detailUrl', 'json');
  }
  if (!Util.isUnset(tmpReq.executorIds)) {
    request.executorIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.executorIds, 'executorIds', 'json');
  }
  if (!Util.isUnset(tmpReq.notifyConfigs)) {
    request.notifyConfigsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notifyConfigs, 'notifyConfigs', 'json');
  }
  if (!Util.isUnset(tmpReq.participantIds)) {
    request.participantIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.participantIds, 'participantIds', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.operatorId)) {
    query['operatorId'] = request.operatorId;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.contentFieldListShrink)) {
    body['contentFieldList'] = request.contentFieldListShrink;
  }
  if (!Util.isUnset(request.creatorId)) {
    body['creatorId'] = request.creatorId;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.detailUrlShrink)) {
    body['detailUrl'] = request.detailUrlShrink;
  }
  if (!Util.isUnset(request.dueTime)) {
    body['dueTime'] = request.dueTime;
  }
  if (!Util.isUnset(request.executorIdsShrink)) {
    body['executorIds'] = request.executorIdsShrink;
  }
  if (!Util.isUnset(request.isOnlyShowExecutor)) {
    body['isOnlyShowExecutor'] = request.isOnlyShowExecutor;
  }
  if (!Util.isUnset(request.notifyConfigsShrink)) {
    body['notifyConfigs'] = request.notifyConfigsShrink;
  }
  if (!Util.isUnset(request.participantIdsShrink)) {
    body['participantIds'] = request.participantIdsShrink;
  }
  if (!Util.isUnset(request.priority)) {
    body['priority'] = request.priority;
  }
  if (!Util.isUnset(request.sourceId)) {
    body['sourceId'] = request.sourceId;
  }
  if (!Util.isUnset(request.subject)) {
    body['subject'] = request.subject;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTodoTask',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/task/createTodoTask`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTodoTask(request: CreateTodoTaskRequest): CreateTodoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateTodoTaskHeaders{};
  return createTodoTaskWithOptions(request, headers, runtime);
}

model CreateVideoConferenceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId'),
  }(name='AccountContext'),
}

model CreateVideoConferenceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateVideoConferenceRequest {
  confTitle?: string(name='ConfTitle'),
  inviteCaller?: boolean(name='InviteCaller', example='true'),
  inviteUserIds?: [ string ](name='InviteUserIds'),
}

model CreateVideoConferenceShrinkRequest {
  confTitle?: string(name='ConfTitle'),
  inviteCaller?: boolean(name='InviteCaller', example='true'),
  inviteUserIdsShrink?: string(name='InviteUserIds'),
}

model CreateVideoConferenceResponseBody = {
  conferenceId?: string(name='conferenceId', example='607452e01401526ee39609e1'),
  conferencePassword?: string(name='conferencePassword', example='1151302294'),
  externalLinkUrl?: string(name='externalLinkUrl', example='https://pre-meeting.dingtalk.com/app?roomCode=68550708396&token=1_59209c43-431c-4e57-a0f8-11bebdb3db7f'),
  hostPassword?: string(name='hostPassword', example='2142817614'),
  phoneNumbers?: [ string ](name='phoneNumbers'),
  requestId?: string(name='requestId', description='requestId', example='3032809F-8C14-57E2-9B76-7AC2134FE3C8'),
  roomCode?: string(name='roomCode', example='123'),
}

model CreateVideoConferenceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVideoConferenceResponseBody(name='body'),
}

async function createVideoConferenceWithOptions(tmpReq: CreateVideoConferenceRequest, tmpHeader: CreateVideoConferenceHeaders, runtime: Util.RuntimeOptions): CreateVideoConferenceResponse {
  Util.validateModel(tmpReq);
  var request = new CreateVideoConferenceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateVideoConferenceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.inviteUserIds)) {
    request.inviteUserIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.inviteUserIds, 'InviteUserIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.confTitle)) {
    body['ConfTitle'] = request.confTitle;
  }
  if (!Util.isUnset(request.inviteCaller)) {
    body['InviteCaller'] = request.inviteCaller;
  }
  if (!Util.isUnset(request.inviteUserIdsShrink)) {
    body['InviteUserIds'] = request.inviteUserIdsShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateVideoConference',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/createVideoConference`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVideoConference(request: CreateVideoConferenceRequest): CreateVideoConferenceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateVideoConferenceHeaders{};
  return createVideoConferenceWithOptions(request, headers, runtime);
}

model CreateWorkspaceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model CreateWorkspaceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateWorkspaceRequest {
  description?: string(name='Description'),
  name?: string(name='Name'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model CreateWorkspaceShrinkRequest {
  description?: string(name='Description'),
  name?: string(name='Name'),
  tenantContextShrink?: string(name='TenantContext'),
}

model CreateWorkspaceResponseBody = {
  description?: string(name='description', example='知识库描述'),
  name?: string(name='name', example='知识库'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  url?: string(name='url', example='https://xxx/workspaceId'),
  workspaceId?: string(name='workspaceId', example='YRBGvyxxxx'),
}

model CreateWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateWorkspaceResponseBody(name='body'),
}

async function createWorkspaceWithOptions(tmpReq: CreateWorkspaceRequest, tmpHeader: CreateWorkspaceHeaders, runtime: Util.RuntimeOptions): CreateWorkspaceResponse {
  Util.validateModel(tmpReq);
  var request = new CreateWorkspaceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateWorkspaceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateWorkspace',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/createWorkspace`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createWorkspace(request: CreateWorkspaceRequest): CreateWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateWorkspaceHeaders{};
  return createWorkspaceWithOptions(request, headers, runtime);
}

model CreateWorkspaceDocHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model CreateWorkspaceDocShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model CreateWorkspaceDocRequest {
  docType?: string(name='DocType', example='DOC'),
  name?: string(name='Name', example='测试文档'),
  parentNodeId?: string(name='ParentNodeId', example='YRBGv0Ye'),
  templateId?: string(name='TemplateId', example='123243'),
  templateType?: string(name='TemplateType', example='team_template'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='123'),
}

model CreateWorkspaceDocShrinkRequest {
  docType?: string(name='DocType', example='DOC'),
  name?: string(name='Name', example='测试文档'),
  parentNodeId?: string(name='ParentNodeId', example='YRBGv0Ye'),
  templateId?: string(name='TemplateId', example='123243'),
  templateType?: string(name='TemplateType', example='team_template'),
  tenantContextShrink?: string(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='123'),
}

model CreateWorkspaceDocResponseBody = {
  docKey?: string(name='docKey', example='QoJGq7xxx'),
  nodeId?: string(name='nodeId', example='YRBGv0Ye'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  url?: string(name='url', example='https://xxx/workspaceId/docs/nodeId'),
  workspaceId?: string(name='workspaceId', example='YRBGvy'),
}

model CreateWorkspaceDocResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateWorkspaceDocResponseBody(name='body'),
}

async function createWorkspaceDocWithOptions(tmpReq: CreateWorkspaceDocRequest, tmpHeader: CreateWorkspaceDocHeaders, runtime: Util.RuntimeOptions): CreateWorkspaceDocResponse {
  Util.validateModel(tmpReq);
  var request = new CreateWorkspaceDocShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new CreateWorkspaceDocShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.docType)) {
    body['DocType'] = request.docType;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.parentNodeId)) {
    body['ParentNodeId'] = request.parentNodeId;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.templateType)) {
    body['TemplateType'] = request.templateType;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateWorkspaceDoc',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/createWorkspaceDoc`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createWorkspaceDoc(request: CreateWorkspaceDocRequest): CreateWorkspaceDocResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateWorkspaceDocHeaders{};
  return createWorkspaceDocWithOptions(request, headers, runtime);
}

model DeleteColumnsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model DeleteColumnsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteColumnsRequest {
  column?: long(name='Column', example='1'),
  columnCount?: long(name='ColumnCount', example='10'),
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model DeleteColumnsShrinkRequest {
  column?: long(name='Column', example='1'),
  columnCount?: long(name='ColumnCount', example='10'),
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model DeleteColumnsResponseBody = {
  id?: string(name='id', example='stxxxx'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model DeleteColumnsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteColumnsResponseBody(name='body'),
}

async function deleteColumnsWithOptions(tmpReq: DeleteColumnsRequest, tmpHeader: DeleteColumnsHeaders, runtime: Util.RuntimeOptions): DeleteColumnsResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteColumnsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DeleteColumnsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.column)) {
    body['Column'] = request.column;
  }
  if (!Util.isUnset(request.columnCount)) {
    body['ColumnCount'] = request.columnCount;
  }
  if (!Util.isUnset(request.sheetId)) {
    body['SheetId'] = request.sheetId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteColumns',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/deleteColumns`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteColumns(request: DeleteColumnsRequest): DeleteColumnsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteColumnsHeaders{};
  return deleteColumnsWithOptions(request, headers, runtime);
}

model DeleteEventHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='123456'),
  }(name='AccountContext'),
}

model DeleteEventShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteEventRequest {
  calendarId?: string(name='CalendarId', example='primary'),
  eventId?: string(name='EventId', example='iiiP35sJadba8aBSgjrwPRKgiEiF'),
}

model DeleteEventResponseBody = {
  content?: {
    data?: any(name='data', example='[]'),
  }(name='content'),
  errorCode?: string(name='errorCode', example='success'),
  errorCtx?: map[string]any(name='errorCtx'),
  errorMsg?: string(name='errorMsg', example='""'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', description='requestId', example='4248DCC9-785F-5A14-8BE0-830FD52E1261'),
  success?: boolean(name='success', example='True'),
}

model DeleteEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEventResponseBody(name='body'),
}

async function deleteEventWithOptions(request: DeleteEventRequest, tmpHeader: DeleteEventHeaders, runtime: Util.RuntimeOptions): DeleteEventResponse {
  Util.validateModel(request);
  var headers = new DeleteEventShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.calendarId)) {
    body['CalendarId'] = request.calendarId;
  }
  if (!Util.isUnset(request.eventId)) {
    body['EventId'] = request.eventId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEvent',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/deleteEvent`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEvent(request: DeleteEventRequest): DeleteEventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteEventHeaders{};
  return deleteEventWithOptions(request, headers, runtime);
}

model DeleteLiveHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model DeleteLiveShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteLiveRequest {
  liveId?: string(name='LiveId', example='4d38xxxxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model DeleteLiveShrinkRequest {
  liveId?: string(name='LiveId', example='4d38xxxxx'),
  tenantContextShrink?: string(name='TenantContext'),
}

model DeleteLiveResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model DeleteLiveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLiveResponseBody(name='body'),
}

async function deleteLiveWithOptions(tmpReq: DeleteLiveRequest, tmpHeader: DeleteLiveHeaders, runtime: Util.RuntimeOptions): DeleteLiveResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteLiveShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DeleteLiveShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.liveId)) {
    body['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLive',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/deleteLive`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteLive(request: DeleteLiveRequest): DeleteLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteLiveHeaders{};
  return deleteLiveWithOptions(request, headers, runtime);
}

model DeleteMeetingRoomHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model DeleteMeetingRoomShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteMeetingRoomRequest {
  roomId?: string(name='RoomId', example='0ffb7xxxxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model DeleteMeetingRoomShrinkRequest {
  roomId?: string(name='RoomId', example='0ffb7xxxxx'),
  tenantContextShrink?: string(name='TenantContext'),
}

model DeleteMeetingRoomResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model DeleteMeetingRoomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMeetingRoomResponseBody(name='body'),
}

async function deleteMeetingRoomWithOptions(tmpReq: DeleteMeetingRoomRequest, tmpHeader: DeleteMeetingRoomHeaders, runtime: Util.RuntimeOptions): DeleteMeetingRoomResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteMeetingRoomShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DeleteMeetingRoomShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMeetingRoom',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/deleteMeetingRoom`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMeetingRoom(request: DeleteMeetingRoomRequest): DeleteMeetingRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteMeetingRoomHeaders{};
  return deleteMeetingRoomWithOptions(request, headers, runtime);
}

model DeleteMeetingRoomGroupHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model DeleteMeetingRoomGroupShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteMeetingRoomGroupRequest {
  groupId?: string(name='GroupId', example='172'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model DeleteMeetingRoomGroupShrinkRequest {
  groupId?: string(name='GroupId', example='172'),
  tenantContextShrink?: string(name='TenantContext'),
}

model DeleteMeetingRoomGroupResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model DeleteMeetingRoomGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMeetingRoomGroupResponseBody(name='body'),
}

async function deleteMeetingRoomGroupWithOptions(tmpReq: DeleteMeetingRoomGroupRequest, tmpHeader: DeleteMeetingRoomGroupHeaders, runtime: Util.RuntimeOptions): DeleteMeetingRoomGroupResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteMeetingRoomGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DeleteMeetingRoomGroupShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMeetingRoomGroup',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/deleteMeetingRoomGroup`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMeetingRoomGroup(request: DeleteMeetingRoomGroupRequest): DeleteMeetingRoomGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteMeetingRoomGroupHeaders{};
  return deleteMeetingRoomGroupWithOptions(request, headers, runtime);
}

model DeleteRowsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model DeleteRowsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteRowsRequest {
  row?: long(name='Row', example='1'),
  rowCount?: long(name='RowCount', example='10'),
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model DeleteRowsShrinkRequest {
  row?: long(name='Row', example='1'),
  rowCount?: long(name='RowCount', example='10'),
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model DeleteRowsResponseBody = {
  id?: string(name='id', example='stxxxx'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model DeleteRowsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRowsResponseBody(name='body'),
}

async function deleteRowsWithOptions(tmpReq: DeleteRowsRequest, tmpHeader: DeleteRowsHeaders, runtime: Util.RuntimeOptions): DeleteRowsResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteRowsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DeleteRowsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.row)) {
    body['Row'] = request.row;
  }
  if (!Util.isUnset(request.rowCount)) {
    body['RowCount'] = request.rowCount;
  }
  if (!Util.isUnset(request.sheetId)) {
    body['SheetId'] = request.sheetId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRows',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/deleteRows`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRows(request: DeleteRowsRequest): DeleteRowsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteRowsHeaders{};
  return deleteRowsWithOptions(request, headers, runtime);
}

model DeleteSheetHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model DeleteSheetShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteSheetRequest {
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model DeleteSheetShrinkRequest {
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model DeleteSheetResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model DeleteSheetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSheetResponseBody(name='body'),
}

async function deleteSheetWithOptions(tmpReq: DeleteSheetRequest, tmpHeader: DeleteSheetHeaders, runtime: Util.RuntimeOptions): DeleteSheetResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteSheetShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DeleteSheetShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.sheetId)) {
    body['SheetId'] = request.sheetId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSheet',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/deleteSheet`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSheet(request: DeleteSheetRequest): DeleteSheetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteSheetHeaders{};
  return deleteSheetWithOptions(request, headers, runtime);
}

model DeleteTodoTaskHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model DeleteTodoTaskShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteTodoTaskRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  operatorId?: string(name='operatorId', example='12345'),
  taskId?: string(name='taskId', example='63edc8da7e917d6ecdaab11b'),
}

model DeleteTodoTaskShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  operatorId?: string(name='operatorId', example='12345'),
  taskId?: string(name='taskId', example='63edc8da7e917d6ecdaab11b'),
}

model DeleteTodoTaskResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model DeleteTodoTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTodoTaskResponseBody(name='body'),
}

async function deleteTodoTaskWithOptions(tmpReq: DeleteTodoTaskRequest, tmpHeader: DeleteTodoTaskHeaders, runtime: Util.RuntimeOptions): DeleteTodoTaskResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteTodoTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DeleteTodoTaskShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.operatorId)) {
    body['operatorId'] = request.operatorId;
  }
  if (!Util.isUnset(request.taskId)) {
    body['taskId'] = request.taskId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTodoTask',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/task/deleteTodoTask`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTodoTask(request: DeleteTodoTaskRequest): DeleteTodoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteTodoTaskHeaders{};
  return deleteTodoTaskWithOptions(request, headers, runtime);
}

model DeleteWorkspaceDocMembersHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model DeleteWorkspaceDocMembersShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteWorkspaceDocMembersRequest {
  members?: [ 
    {
      memberId?: string(name='MemberId', example='012345'),
      memberType?: string(name='MemberType', example='USER'),
    }
  ](name='Members'),
  nodeId?: string(name='NodeId', example='YRBGv0xxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='YRBGvyxxx'),
}

model DeleteWorkspaceDocMembersShrinkRequest {
  membersShrink?: string(name='Members'),
  nodeId?: string(name='NodeId', example='YRBGv0xxx'),
  tenantContextShrink?: string(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='YRBGvyxxx'),
}

model DeleteWorkspaceDocMembersResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model DeleteWorkspaceDocMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteWorkspaceDocMembersResponseBody(name='body'),
}

async function deleteWorkspaceDocMembersWithOptions(tmpReq: DeleteWorkspaceDocMembersRequest, tmpHeader: DeleteWorkspaceDocMembersHeaders, runtime: Util.RuntimeOptions): DeleteWorkspaceDocMembersResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteWorkspaceDocMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DeleteWorkspaceDocMembersShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.members)) {
    request.membersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.members, 'Members', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.membersShrink)) {
    body['Members'] = request.membersShrink;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWorkspaceDocMembers',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/deleteWorkspaceDocMembers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteWorkspaceDocMembers(request: DeleteWorkspaceDocMembersRequest): DeleteWorkspaceDocMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteWorkspaceDocMembersHeaders{};
  return deleteWorkspaceDocMembersWithOptions(request, headers, runtime);
}

model DeleteWorkspaceMembersHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model DeleteWorkspaceMembersShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model DeleteWorkspaceMembersRequest {
  members?: [ 
    {
      memberId?: string(name='MemberId', example='012345'),
      memberType?: string(name='MemberType', example='USER'),
    }
  ](name='Members'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='123'),
}

model DeleteWorkspaceMembersShrinkRequest {
  membersShrink?: string(name='Members'),
  tenantContextShrink?: string(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='123'),
}

model DeleteWorkspaceMembersResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model DeleteWorkspaceMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteWorkspaceMembersResponseBody(name='body'),
}

async function deleteWorkspaceMembersWithOptions(tmpReq: DeleteWorkspaceMembersRequest, tmpHeader: DeleteWorkspaceMembersHeaders, runtime: Util.RuntimeOptions): DeleteWorkspaceMembersResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteWorkspaceMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new DeleteWorkspaceMembersShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.members)) {
    request.membersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.members, 'Members', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.membersShrink)) {
    body['Members'] = request.membersShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWorkspaceMembers',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/deleteWorkspaceMembers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteWorkspaceMembers(request: DeleteWorkspaceMembersRequest): DeleteWorkspaceMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteWorkspaceMembersHeaders{};
  return deleteWorkspaceMembersWithOptions(request, headers, runtime);
}

model GetAllSheetsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model GetAllSheetsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetAllSheetsRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model GetAllSheetsShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model GetAllSheetsResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  value?: [ 
    {
      id?: string(name='Id', example='stxxxx'),
      name?: string(name='Name', example='Sheet1'),
    }
  ](name='value', example='[]'),
}

model GetAllSheetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAllSheetsResponseBody(name='body'),
}

async function getAllSheetsWithOptions(tmpReq: GetAllSheetsRequest, tmpHeader: GetAllSheetsHeaders, runtime: Util.RuntimeOptions): GetAllSheetsResponse {
  Util.validateModel(tmpReq);
  var request = new GetAllSheetsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetAllSheetsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetAllSheets',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/getAllSheets`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAllSheets(request: GetAllSheetsRequest): GetAllSheetsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetAllSheetsHeaders{};
  return getAllSheetsWithOptions(request, headers, runtime);
}

model GetEventHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='123456'),
  }(name='AccountContext'),
}

model GetEventShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetEventRequest {
  calendarId?: string(name='CalendarId', example='primary'),
  eventId?: string(name='EventId', example='311525211'),
  maxAttendees?: long(name='MaxAttendees', example='100'),
}

model GetEventResponseBody = {
  attendees?: [ 
    {
      displayName?: string(name='DisplayName', example='jack'),
      id?: string(name='Id', example='123456'),
      isOptional?: boolean(name='IsOptional', example='true'),
      responseStatus?: string(name='ResponseStatus', example='accepted'),
      self?: boolean(name='Self', example='true'),
    }
  ](name='attendees'),
  categories?: [ 
    {
      displayName?: string(name='DisplayName'),
    }
  ](name='categories'),
  createTime?: string(name='createTime', example='2020-01-01T10:15:30+08:00'),
  description?: string(name='description', example='2020-01-01T10:15:30+08:00'),
  end?: {
    date?: string(name='Date', example='2020-01-01'),
    dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
    timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
  }(name='end'),
  extendedProperties?: {
    sharedProperties?: {
      belongCorpId?: string(name='BelongCorpId', example='dingd*****1231231'),
      sourceOpenCid?: string(name='SourceOpenCid', example='zxcvasdfvb123===='),
    }(name='SharedProperties'),
  }(name='extendedProperties'),
  id?: string(name='id', example='iiiP35sJxxxxPRKgiEiF'),
  isAllDay?: boolean(name='isAllDay', example='true'),
  location?: {
    displayName?: string(name='DisplayName'),
    meetingRooms?: [ string ](name='MeetingRooms', description='--'),
  }(name='location'),
  meetingRooms?: [ 
    {
      displayName?: string(name='DisplayName', example='room 1-2-3'),
      responseStatus?: string(name='ResponseStatus', example='accepted'),
      roomId?: string(name='RoomId', example='c10315a8b4e740a317813ab6fxxxxxx'),
    }
  ](name='meetingRooms'),
  onlineMeetingInfo?: {
    conferenceId?: string(name='ConferenceId', example='5c4df21d-xxxx-a6db402b9f3a'),
    extraInfo?: map[string]any(name='ExtraInfo'),
    type?: string(name='Type', example='dingtalk'),
    url?: string(name='Url', example='dingtalk://dingtalkclient/page/videoxxxxalendar?confId=5c4df21d-xxxx9f3f&calendarId=127xxxx124'),
  }(name='onlineMeetingInfo'),
  organizer?: {
    displayName?: string(name='DisplayName', example='tony'),
    id?: string(name='Id', example='123456'),
    responseStatus?: string(name='ResponseStatus', example='accepted'),
    self?: boolean(name='Self', example='true'),
  }(name='organizer'),
  originStart?: {
    dateTime?: string(name='DateTime', example='2023-01-01T00:00:00Z'),
  }(name='originStart'),
  recurrence?: {
    pattern?: {
      dayOfMonth?: int32(name='DayOfMonth', example='14'),
      daysOfWeek?: string(name='DaysOfWeek', example='monday'),
      index?: string(name='Index', example='first'),
      interval?: int32(name='Interval', example='1'),
      type?: string(name='Type', example='daily'),
    }(name='Pattern'),
    range?: {
      endDate?: string(name='EndDate', example='2020-01-01T10:15:30+08:00'),
      numberOfOccurrences?: int32(name='NumberOfOccurrences', example='5'),
      type?: string(name='Type', example='noEnd'),
    }(name='Range'),
  }(name='recurrence'),
  reminders?: [ 
    {
      method?: string(name='Method', example='dingtalk'),
      minutes?: string(name='Minutes', example='15'),
    }
  ](name='reminders'),
  requestId?: string(name='requestId', description='requestId', example='requestId'),
  seriesMasterId?: string(name='seriesMasterId', example='cnNTbW1YbxxxxvdlQrQT09'),
  start?: {
    date?: string(name='Date', example='2020-01-01'),
    dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
    timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
  }(name='start'),
  status?: string(name='status', example='confirmed'),
  summary?: string(name='summary', example='test event'),
  updateTime?: string(name='updateTime', example='2020-01-01T10:15:30+08:00'),
}

model GetEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEventResponseBody(name='body'),
}

async function getEventWithOptions(request: GetEventRequest, tmpHeader: GetEventHeaders, runtime: Util.RuntimeOptions): GetEventResponse {
  Util.validateModel(request);
  var headers = new GetEventShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.maxAttendees)) {
    query['MaxAttendees'] = request.maxAttendees;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.calendarId)) {
    body['CalendarId'] = request.calendarId;
  }
  if (!Util.isUnset(request.eventId)) {
    body['EventId'] = request.eventId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetEvent',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/getEvent`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEvent(request: GetEventRequest): GetEventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetEventHeaders{};
  return getEventWithOptions(request, headers, runtime);
}

model GetMineWorkspaceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model GetMineWorkspaceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetMineWorkspaceRequest {
  request?: map[string]any(name='Request'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model GetMineWorkspaceShrinkRequest {
  requestShrink?: string(name='Request'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetMineWorkspaceResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  workspace?: {
    corpId?: string(name='CorpId', example='ding16b241fd05********288'),
    cover?: string(name='Cover', example='https://example/file-manage-files/zh-CN/202***13/ldet/XXXX.jpg'),
    createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
    creatorId?: string(name='CreatorId', example='01472825524039877041'),
    description?: string(name='Description', example='workspace_description'),
    icon?: {
      type?: string(name='Type', example='URL'),
      value?: string(name='Value', example='https://example/file-manage-files/zh-CN/202***13/ldet/avatar3.jpg'),
    }(name='Icon'),
    modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
    modifierId?: string(name='ModifierId', example='01472825524039877041'),
    name?: string(name='Name', example='workspace_name'),
    permissionRole?: string(name='PermissionRole', example='READER'),
    rootNodeId?: string(name='RootNodeId', example='MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3'),
    teamId?: string(name='TeamId', example='lHiicjNFM2iSFYSdz2iPuI8ZwiEiE'),
    type?: string(name='Type', example='TEAM'),
    url?: string(name='Url', example='workspace_url'),
    workspaceId?: string(name='WorkspaceId', example='9r09jSO3WARyxd8A'),
  }(name='workspace'),
}

model GetMineWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMineWorkspaceResponseBody(name='body'),
}

async function getMineWorkspaceWithOptions(tmpReq: GetMineWorkspaceRequest, tmpHeader: GetMineWorkspaceHeaders, runtime: Util.RuntimeOptions): GetMineWorkspaceResponse {
  Util.validateModel(tmpReq);
  var request = new GetMineWorkspaceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetMineWorkspaceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.request)) {
    request.requestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.request, 'Request', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.requestShrink)) {
    body['Request'] = request.requestShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMineWorkspace',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/getMineWorkspace`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMineWorkspace(request: GetMineWorkspaceRequest): GetMineWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetMineWorkspaceHeaders{};
  return getMineWorkspaceWithOptions(request, headers, runtime);
}

model GetNodeHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model GetNodeShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetNodeRequest {
  nodeId?: string(name='NodeId', example='a9E05BDRVQ9K600yf1NplNDxV63zgkYA'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  withPermissionRole?: boolean(name='WithPermissionRole', example='true'),
  withStatisticalInfo?: boolean(name='WithStatisticalInfo', example='true'),
}

model GetNodeShrinkRequest {
  nodeId?: string(name='NodeId', example='a9E05BDRVQ9K600yf1NplNDxV63zgkYA'),
  tenantContextShrink?: string(name='TenantContext'),
  withPermissionRole?: boolean(name='WithPermissionRole', example='true'),
  withStatisticalInfo?: boolean(name='WithStatisticalInfo', example='true'),
}

model GetNodeResponseBody = {
  node?: {
    category?: string(name='Category', example='ALIDOC'),
    createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
    creatorId?: string(name='CreatorId', example='01472825524039877041'),
    extension?: string(name='Extension', example='adoc'),
    hasChildren?: boolean(name='HasChildren', example='true'),
    modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
    modifierId?: string(name='ModifierId', example='01472825524039877041'),
    name?: string(name='Name', example='node_name'),
    nodeId?: string(name='NodeId', example='MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3'),
    permissionRole?: string(name='PermissionRole', example='READER'),
    size?: long(name='Size', example='123123'),
    statisticalInfo?: {
      wordCount?: long(name='WordCount', example='200'),
    }(name='StatisticalInfo'),
    type?: string(name='Type', example='FILE'),
    url?: string(name='Url', example='node_url'),
    workspaceId?: string(name='WorkspaceId', example='By8jQS1ZYjGn5b0M'),
  }(name='node'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model GetNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNodeResponseBody(name='body'),
}

async function getNodeWithOptions(tmpReq: GetNodeRequest, tmpHeader: GetNodeHeaders, runtime: Util.RuntimeOptions): GetNodeResponse {
  Util.validateModel(tmpReq);
  var request = new GetNodeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetNodeShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.withPermissionRole)) {
    body['WithPermissionRole'] = request.withPermissionRole;
  }
  if (!Util.isUnset(request.withStatisticalInfo)) {
    body['WithStatisticalInfo'] = request.withStatisticalInfo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNode',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/getNode`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNode(request: GetNodeRequest): GetNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetNodeHeaders{};
  return getNodeWithOptions(request, headers, runtime);
}

model GetNodeByUrlHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model GetNodeByUrlShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetNodeByUrlRequest {
  option?: {
    withPermissionRole?: boolean(name='WithPermissionRole', example='false'),
    withStatisticalInfo?: boolean(name='WithStatisticalInfo', example='false'),
  }(name='Option'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  url?: string(name='Url', example='https://alidocs.dingtalk.com/i/nodes/EpGBa2L*********gN7R35y'),
}

model GetNodeByUrlShrinkRequest {
  optionShrink?: string(name='Option'),
  tenantContextShrink?: string(name='TenantContext'),
  url?: string(name='Url', example='https://alidocs.dingtalk.com/i/nodes/EpGBa2L*********gN7R35y'),
}

model GetNodeByUrlResponseBody = {
  node?: {
    category?: string(name='Category', example='ALIDOC'),
    createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
    creatorId?: string(name='CreatorId', example='01472825524039877041'),
    extension?: string(name='Extension', example='adoc'),
    hasChildren?: boolean(name='HasChildren', example='false'),
    modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
    modifierId?: string(name='ModifierId', example='01472825524039877041'),
    name?: string(name='Name', example='node_name'),
    nodeId?: string(name='NodeId', example='EpGBa2Lm8aRmzkkNhplMx1prWgN7R35y'),
    permissionRole?: string(name='PermissionRole', example='READER'),
    size?: long(name='Size', example='512'),
    statisticalInfo?: {
      wordCount?: long(name='WordCount', example='123'),
    }(name='StatisticalInfo'),
    type?: string(name='Type', example='FILE'),
    url?: string(name='Url', example='node_url'),
    workspaceId?: string(name='WorkspaceId', example='By8jQS1ZYjGn5b0M'),
  }(name='node'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model GetNodeByUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNodeByUrlResponseBody(name='body'),
}

async function getNodeByUrlWithOptions(tmpReq: GetNodeByUrlRequest, tmpHeader: GetNodeByUrlHeaders, runtime: Util.RuntimeOptions): GetNodeByUrlResponse {
  Util.validateModel(tmpReq);
  var request = new GetNodeByUrlShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetNodeByUrlShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.option)) {
    request.optionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.option, 'Option', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.optionShrink)) {
    body['Option'] = request.optionShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.url)) {
    body['Url'] = request.url;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeByUrl',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/getNodeByUrl`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNodeByUrl(request: GetNodeByUrlRequest): GetNodeByUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetNodeByUrlHeaders{};
  return getNodeByUrlWithOptions(request, headers, runtime);
}

model GetNodesHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model GetNodesShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetNodesRequest {
  nodeIds?: [ string ](name='NodeIds'),
  option?: {
    withPermissionRole?: boolean(name='WithPermissionRole', example='false'),
    withStatisticalInfo?: boolean(name='WithStatisticalInfo', example='false'),
  }(name='Option'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model GetNodesShrinkRequest {
  nodeIdsShrink?: string(name='NodeIds'),
  optionShrink?: string(name='Option'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetNodesResponseBody = {
  nodes?: [ 
    {
      category?: string(name='Category', example='ALIDOC'),
      createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
      creatorId?: string(name='CreatorId', example='01472825524039877041'),
      extension?: string(name='Extension', example='adoc'),
      hasChildren?: boolean(name='HasChildren', example='false'),
      modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
      modifierId?: string(name='ModifierId', example='01472825524039877041'),
      name?: string(name='Name', example='node_name'),
      nodeId?: string(name='NodeId', example='MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3'),
      permissionRole?: string(name='PermissionRole', example='READER'),
      size?: long(name='Size', example='512'),
      statisticalInfo?: {
        wordCount?: long(name='WordCount', example='123'),
      }(name='StatisticalInfo'),
      type?: string(name='Type', example='FILE'),
      url?: string(name='Url', example='node_url'),
      workspaceId?: string(name='WorkspaceId', example='MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3'),
    }
  ](name='nodes'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model GetNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNodesResponseBody(name='body'),
}

async function getNodesWithOptions(tmpReq: GetNodesRequest, tmpHeader: GetNodesHeaders, runtime: Util.RuntimeOptions): GetNodesResponse {
  Util.validateModel(tmpReq);
  var request = new GetNodesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetNodesShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.nodeIds)) {
    request.nodeIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.nodeIds, 'NodeIds', 'json');
  }
  if (!Util.isUnset(tmpReq.option)) {
    request.optionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.option, 'Option', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeIdsShrink)) {
    body['NodeIds'] = request.nodeIdsShrink;
  }
  if (!Util.isUnset(request.optionShrink)) {
    body['Option'] = request.optionShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNodes',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/getNodes`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNodes(request: GetNodesRequest): GetNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetNodesHeaders{};
  return getNodesWithOptions(request, headers, runtime);
}

model GetRangeHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model GetRangeShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetRangeRequest {
  rangeAddress?: string(name='RangeAddress', example='A3:C3'),
  select?: string(name='Select', example='values'),
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model GetRangeShrinkRequest {
  rangeAddress?: string(name='RangeAddress', example='A3:C3'),
  select?: string(name='Select', example='values'),
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model GetRangeResponseBody = {
  backgroundColors?: [[ 
    {
      red?: int32(name='Red', description='red', example='0'),
      green?: int32(name='Green', description='green', example='0'),
      blue?: int32(name='Blue', description='blue', example='0'),
      hexString?: string(name='HexString', description='hexString', example='#000000'),
    }
  ]  ](name='backgroundColors', example='[]'),
  displayValues?: [[ string ]  ](name='displayValues', example='[]'),
  formulas?: [[ string ]  ](name='formulas', example='[]'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  values?: [[ any ]  ](name='values', example='[]'),
}

model GetRangeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRangeResponseBody(name='body'),
}

async function getRangeWithOptions(tmpReq: GetRangeRequest, tmpHeader: GetRangeHeaders, runtime: Util.RuntimeOptions): GetRangeResponse {
  Util.validateModel(tmpReq);
  var request = new GetRangeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetRangeShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.rangeAddress)) {
    body['RangeAddress'] = request.rangeAddress;
  }
  if (!Util.isUnset(request.select)) {
    body['Select'] = request.select;
  }
  if (!Util.isUnset(request.sheetId)) {
    body['SheetId'] = request.sheetId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetRange',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/getRange`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRange(request: GetRangeRequest): GetRangeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetRangeHeaders{};
  return getRangeWithOptions(request, headers, runtime);
}

model GetReportTemplateByNameHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model GetReportTemplateByNameShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetReportTemplateByNameRequest {
  templateName?: string(name='TemplateName', example='我管理的模版'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model GetReportTemplateByNameShrinkRequest {
  templateName?: string(name='TemplateName', example='我管理的模版'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetReportTemplateByNameResponseBody = {
  defaultReceivedConvs?: [ 
    {
      conversationId?: string(name='ConversationId', example='cid12334##2341'),
      title?: string(name='Title'),
    }
  ](name='defaultReceivedConvs'),
  defaultReceivers?: [ 
    {
      userName?: string(name='UserName'),
      userid?: string(name='Userid', example='1234'),
    }
  ](name='defaultReceivers'),
  fields?: [ 
    {
      fieldName?: string(name='FieldName', example='key1'),
      sort?: long(name='Sort', example='0'),
      type?: long(name='Type', example='1'),
    }
  ](name='fields'),
  id?: string(name='id', example='11111'),
  name?: string(name='name'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  userName?: string(name='userName'),
  userid?: string(name='userid', example='1234'),
}

model GetReportTemplateByNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetReportTemplateByNameResponseBody(name='body'),
}

async function getReportTemplateByNameWithOptions(tmpReq: GetReportTemplateByNameRequest, tmpHeader: GetReportTemplateByNameHeaders, runtime: Util.RuntimeOptions): GetReportTemplateByNameResponse {
  Util.validateModel(tmpReq);
  var request = new GetReportTemplateByNameShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetReportTemplateByNameShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.templateName)) {
    body['TemplateName'] = request.templateName;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetReportTemplateByName',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/log/getReportTemplateByName`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getReportTemplateByName(request: GetReportTemplateByNameRequest): GetReportTemplateByNameResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetReportTemplateByNameHeaders{};
  return getReportTemplateByNameWithOptions(request, headers, runtime);
}

model GetReportUnReadCountHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model GetReportUnReadCountShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetReportUnReadCountRequest {
  request?: map[string]any(name='Request', example='null'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model GetReportUnReadCountShrinkRequest {
  requestShrink?: string(name='Request', example='null'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetReportUnReadCountResponseBody = {
  count?: long(name='count', example='1'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model GetReportUnReadCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetReportUnReadCountResponseBody(name='body'),
}

async function getReportUnReadCountWithOptions(tmpReq: GetReportUnReadCountRequest, tmpHeader: GetReportUnReadCountHeaders, runtime: Util.RuntimeOptions): GetReportUnReadCountResponse {
  Util.validateModel(tmpReq);
  var request = new GetReportUnReadCountShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetReportUnReadCountShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.request)) {
    request.requestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.request, 'Request', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.requestShrink)) {
    body['Request'] = request.requestShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetReportUnReadCount',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/log/getReportUnReadCount`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getReportUnReadCount(request: GetReportUnReadCountRequest): GetReportUnReadCountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetReportUnReadCountHeaders{};
  return getReportUnReadCountWithOptions(request, headers, runtime);
}

model GetSheetHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model GetSheetShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetSheetRequest {
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model GetSheetShrinkRequest {
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model GetSheetResponseBody = {
  columnCount?: long(name='columnCount', example='20'),
  id?: string(name='id', example='stxxxx'),
  lastNonEmptyColumn?: long(name='lastNonEmptyColumn', example='1'),
  lastNonEmptyRow?: long(name='lastNonEmptyRow', example='2'),
  name?: string(name='name', example='Sheet1'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  rowCount?: long(name='rowCount', example='10'),
  visibility?: string(name='visibility', example='visible'),
}

model GetSheetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSheetResponseBody(name='body'),
}

async function getSheetWithOptions(tmpReq: GetSheetRequest, tmpHeader: GetSheetHeaders, runtime: Util.RuntimeOptions): GetSheetResponse {
  Util.validateModel(tmpReq);
  var request = new GetSheetShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetSheetShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.sheetId)) {
    body['SheetId'] = request.sheetId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSheet',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/getSheet`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSheet(request: GetSheetRequest): GetSheetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetSheetHeaders{};
  return getSheetWithOptions(request, headers, runtime);
}

model GetSpaceDirectoriesHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model GetSpaceDirectoriesShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetSpaceDirectoriesRequest {
  dentryId?: string(name='DentryId', example='asdasd'),
  maxResults?: int32(name='MaxResults', example='30'),
  nextToken?: string(name='NextToken', example='123123'),
  spaceId?: string(name='SpaceId', example='qweqwe'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model GetSpaceDirectoriesShrinkRequest {
  dentryId?: string(name='DentryId', example='asdasd'),
  maxResults?: int32(name='MaxResults', example='30'),
  nextToken?: string(name='NextToken', example='123123'),
  spaceId?: string(name='SpaceId', example='qweqwe'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetSpaceDirectoriesResponseBody = {
  children?: [ 
    {
      contentType?: string(name='ContentType', example='alidoc'),
      createdTime?: long(name='CreatedTime', example='12345678'),
      creator?: {
        name?: string(name='Name', example='hello'),
        userId?: string(name='UserId', example='012345'),
      }(name='Creator'),
      dentryId?: string(name='DentryId', example='abc'),
      dentryType?: string(name='DentryType', example='file'),
      dentryUuid?: string(name='DentryUuid', example='cdefg'),
      docKey?: string(name='DocKey', example='aabbcc'),
      extension?: string(name='Extension', example='alidoc'),
      hasChildren?: boolean(name='HasChildren', example='false'),
      linkSourceInfo?: {
        extension?: string(name='Extension', example='docx'),
        iconUrl?: {
          line?: string(name='Line', example='gh'),
          small?: string(name='Small', example='def'),
        }(name='IconUrl'),
        id?: string(name='Id', example='def'),
        linkType?: long(name='LinkType', example='0'),
        spaceId?: string(name='SpaceId', example='def'),
      }(name='LinkSourceInfo'),
      name?: string(name='Name', example='hello'),
      path?: string(name='Path', example='测试组织/测试知识库/abc'),
      space?: {
        cover?: string(name='Cover', example='https://img.alicdn.com/imgextra/i1/O1xxxxx.png'),
        description?: string(name='Description', example='这是简介'),
        hdIconVO?: {
          icon?: string(name='Icon', example='https://img.alicdn.com/imgextra/i1/xxxxx.png'),
          type?: string(name='Type', example='1'),
        }(name='HdIconVO'),
        iconVO?: {
          icon?: string(name='Icon', example='https://img.alicdn.com/imgextra/i1/xxxxx.png'),
          type?: string(name='Type', example='1'),
        }(name='IconVO'),
        id?: string(name='Id', example='n9XJxxxxx'),
        name?: string(name='Name'),
        owner?: {
          name?: string(name='Name', example='小钉'),
          userId?: string(name='UserId', example='012345'),
        }(name='Owner', example='测试知识库'),
        recentList?: [ any ](name='RecentList'),
        type?: int32(name='Type', example='1'),
        url?: string(name='Url', example='https://alidocs.dingtalk.com/i/spaces/n9XJ*******Xy/overview'),
        visitorInfo?: {
          dentryActions?: [ string ](name='DentryActions', example='GET_DENTRY'),
          roleCode?: string(name='RoleCode', example='3'),
          spaceActions?: [ string ](name='SpaceActions', example='GET_SPACE'),
        }(name='VisitorInfo'),
      }(name='Space'),
      spaceId?: string(name='SpaceId', example='bcd'),
      statisticalInfo?: {
        wordCount?: long(name='WordCount', description='WordCount', example='10'),
      }(name='StatisticalInfo'),
      updatedTime?: long(name='UpdatedTime', example='12345678'),
      updater?: {
        name?: string(name='Name', example='hello'),
        userId?: string(name='UserId', example='012345'),
      }(name='Updater'),
      url?: string(name='Url', example='https://xxx.yy'),
      visitorInfo?: {
        dentryActions?: [ string ](name='DentryActions'),
        roleCode?: string(name='RoleCode', example='OWNER'),
        spaceActions?: [ string ](name='SpaceActions'),
      }(name='VisitorInfo'),
    }
  ](name='children'),
  hasMore?: boolean(name='hasMore', example='true'),
  nextToken?: string(name='nextToken', example='1296'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model GetSpaceDirectoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSpaceDirectoriesResponseBody(name='body'),
}

async function getSpaceDirectoriesWithOptions(tmpReq: GetSpaceDirectoriesRequest, tmpHeader: GetSpaceDirectoriesHeaders, runtime: Util.RuntimeOptions): GetSpaceDirectoriesResponse {
  Util.validateModel(tmpReq);
  var request = new GetSpaceDirectoriesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetSpaceDirectoriesShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.dentryId)) {
    body['DentryId'] = request.dentryId;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.spaceId)) {
    body['SpaceId'] = request.spaceId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSpaceDirectories',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/getSpaceDirectories`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSpaceDirectories(request: GetSpaceDirectoriesRequest): GetSpaceDirectoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetSpaceDirectoriesHeaders{};
  return getSpaceDirectoriesWithOptions(request, headers, runtime);
}

model GetTemplateListByUserIdHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model GetTemplateListByUserIdShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetTemplateListByUserIdRequest {
  offset?: long(name='Offset', example='10'),
  size?: long(name='Size', example='10'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model GetTemplateListByUserIdShrinkRequest {
  offset?: long(name='Offset', example='10'),
  size?: long(name='Size', example='10'),
  tenantContextShrink?: string(name='TenantContext'),
}

model GetTemplateListByUserIdResponseBody = {
  nextCursor?: long(name='nextCursor', example='12312131231'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  templateList?: [ 
    {
      iconUrl?: string(name='IconUrl'),
      name?: string(name='Name'),
      reportCode?: string(name='ReportCode', example='11111'),
      url?: string(name='Url', example='https://scsss/sss'),
    }
  ](name='templateList'),
}

model GetTemplateListByUserIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTemplateListByUserIdResponseBody(name='body'),
}

async function getTemplateListByUserIdWithOptions(tmpReq: GetTemplateListByUserIdRequest, tmpHeader: GetTemplateListByUserIdHeaders, runtime: Util.RuntimeOptions): GetTemplateListByUserIdResponse {
  Util.validateModel(tmpReq);
  var request = new GetTemplateListByUserIdShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetTemplateListByUserIdShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.offset)) {
    body['Offset'] = request.offset;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTemplateListByUserId',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/log/getTemplateListByUserId`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTemplateListByUserId(request: GetTemplateListByUserIdRequest): GetTemplateListByUserIdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetTemplateListByUserIdHeaders{};
  return getTemplateListByUserIdWithOptions(request, headers, runtime);
}

model GetUserHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model GetUserShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetUserRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  language?: string(name='language', example='zh_CN'),
}

model GetUserShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  language?: string(name='language', example='zh_CN'),
}

model GetUserResponseBody = {
  active?: boolean(name='active', example='true'),
  admin?: boolean(name='admin', example='true'),
  avatar?: string(name='avatar', example='xxx'),
  boss?: boolean(name='boss', example='true'),
  deptIdList?: [ long ](name='deptIdList', example='[2,3,4]'),
  deptOrderList?: [ 
    {
      deptId?: long(name='deptId'),
      order?: long(name='order'),
    }
  ](name='deptOrderList'),
  email?: string(name='email', example='test@xxx.com'),
  exclusiveAccount?: boolean(name='exclusiveAccount', example='true'),
  exclusiveAccountCorpId?: string(name='exclusiveAccountCorpId', example='dingxxx'),
  exclusiveAccountCorpName?: string(name='exclusiveAccountCorpName', example='组织名称'),
  exclusiveAccountType?: string(name='exclusiveAccountType', example='dingtalk'),
  extension?: string(name='extension', example='{"爱好":"旅游","年龄":"24"}'),
  hideMobile?: boolean(name='hideMobile', example='false'),
  hiredDate?: long(name='hiredDate', example='1597573616828'),
  jobNumber?: string(name='jobNumber', example='4'),
  leaderInDept?: [ 
    {
      deptId?: long(name='deptId'),
      leader?: boolean(name='leader'),
    }
  ](name='leaderInDept'),
  loginId?: string(name='loginId', example='login_id3'),
  managerUserid?: string(name='managerUserid', example='manager240'),
  mobile?: string(name='mobile', example='18513027676'),
  name?: string(name='name', example='张三'),
  nickname?: string(name='nickname', example='昵称'),
  orgEmail?: string(name='orgEmail', example='test@xxx.com'),
  realAuthed?: boolean(name='realAuthed', example='true'),
  remark?: string(name='remark', example='备注备注'),
  requestId?: string(name='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  roleList?: [ 
    {
      groupName?: string(name='groupName', example='职务'),
      id?: long(name='id'),
      name?: string(name='name', example='张三'),
    }
  ](name='roleList'),
  senior?: boolean(name='senior', example='true'),
  stateCode?: string(name='stateCode', example='86'),
  telephone?: string(name='telephone', example='010-86123456-2345'),
  title?: string(name='title', example='技术总监'),
  unionEmpExt?: {
    corpId?: string(name='corpId', example='dingxxx'),
    unionEmpMapList?: [ 
      {
        cropId?: string(name='cropId', example='dingxxx'),
        userid?: string(name='userid', example='zhangsan'),
      }
    ](name='unionEmpMapList'),
    userid?: string(name='userid', example='zhangsan'),
  }(name='unionEmpExt'),
  userid?: string(name='userid', example='zhangsan'),
  workPlace?: string(name='workPlace', example='未来park'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserResponseBody(name='body'),
}

async function getUserWithOptions(tmpReq: GetUserRequest, tmpHeader: GetUserHeaders, runtime: Util.RuntimeOptions): GetUserResponse {
  Util.validateModel(tmpReq);
  var request = new GetUserShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetUserShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.language)) {
    body['language'] = request.language;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetUser',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/im/getUser`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUser(request: GetUserRequest): GetUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetUserHeaders{};
  return getUserWithOptions(request, headers, runtime);
}

model GetWorkspaceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model GetWorkspaceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetWorkspaceRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  withPermissionRole?: boolean(name='WithPermissionRole', example='false'),
  workspaceId?: string(name='WorkspaceId', example='MJ0pDSKMV9dO20E4'),
}

model GetWorkspaceShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  withPermissionRole?: boolean(name='WithPermissionRole', example='false'),
  workspaceId?: string(name='WorkspaceId', example='MJ0pDSKMV9dO20E4'),
}

model GetWorkspaceResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  workspace?: {
    corpId?: string(name='CorpId', example='ding16b241fd05********288'),
    cover?: string(name='Cover', example='https://example/file-manage-files/zh-CN/202***13/ldet/XXXX.jpg'),
    createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
    creatorId?: string(name='CreatorId', example='01472825524039877041'),
    description?: string(name='Description', example='workspace_description'),
    icon?: {
      type?: string(name='Type', example='URL'),
      value?: string(name='Value', example='https://example/file-manage-files/zh-CN/202***13/ldet/avatar3.jpg'),
    }(name='Icon'),
    modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
    modifierId?: string(name='ModifierId', example='01472825524039877041'),
    name?: string(name='Name', example='workspace_name'),
    permissionRole?: string(name='PermissionRole', example='READER'),
    rootNodeId?: string(name='RootNodeId', example='ydxXB52LJqqK7xxNTXyo390kJqjMp697'),
    teamId?: string(name='TeamId', example='lHiicjNFM2iSFYSdz2iPuI8ZwiEiE'),
    type?: string(name='Type', example='TEAM'),
    url?: string(name='Url', example='workspace_url'),
    workspaceId?: string(name='WorkspaceId', example='MJ0pDSKMV9dO20E4'),
  }(name='workspace'),
}

model GetWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWorkspaceResponseBody(name='body'),
}

async function getWorkspaceWithOptions(tmpReq: GetWorkspaceRequest, tmpHeader: GetWorkspaceHeaders, runtime: Util.RuntimeOptions): GetWorkspaceResponse {
  Util.validateModel(tmpReq);
  var request = new GetWorkspaceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetWorkspaceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.withPermissionRole)) {
    body['WithPermissionRole'] = request.withPermissionRole;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetWorkspace',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/getWorkspace`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWorkspace(request: GetWorkspaceRequest): GetWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetWorkspaceHeaders{};
  return getWorkspaceWithOptions(request, headers, runtime);
}

model GetWorkspacesHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model GetWorkspacesShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model GetWorkspacesRequest {
  option?: {
    withPermissionRole?: boolean(name='WithPermissionRole', example='true'),
  }(name='Option'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workspaceIds?: [ string ](name='WorkspaceIds', example='workspace_id'),
}

model GetWorkspacesShrinkRequest {
  optionShrink?: string(name='Option'),
  tenantContextShrink?: string(name='TenantContext'),
  workspaceIdsShrink?: string(name='WorkspaceIds', example='workspace_id'),
}

model GetWorkspacesResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  workspace?: [ 
    {
      corpId?: string(name='CorpId', example='ding16b241fd05********288'),
      cover?: string(name='Cover', example='https://example/file-manage-files/zh-CN/202***13/ldet/XXXX.jpg'),
      createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
      creatorId?: string(name='CreatorId', example='01472825524039877041'),
      description?: string(name='Description', example='workspace_description'),
      icon?: {
        type?: string(name='Type', example='URL'),
        value?: string(name='Value', example='https://example/file-manage-files/zh-CN/202***13/ldet/avatar3.jpg'),
      }(name='Icon'),
      modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
      modifierId?: string(name='ModifierId', example='01472825524039877041'),
      name?: string(name='Name', example='workspace_name'),
      permissionRole?: string(name='PermissionRole', example='READER'),
      rootNodeId?: string(name='RootNodeId', example='ZgpG2NdyVXXjrKKzIBqMp5zkVMwvDqPk'),
      teamId?: string(name='TeamId', example='lHiicjNFM2iSFYSdz2iPuI8ZwiEiE'),
      type?: string(name='Type', example='TEAM'),
      url?: string(name='Url', example='workspace_url'),
      workspaceId?: string(name='WorkspaceId', example='By8jQS1ZYjGn5b0M'),
    }
  ](name='workspace'),
}

model GetWorkspacesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWorkspacesResponseBody(name='body'),
}

async function getWorkspacesWithOptions(tmpReq: GetWorkspacesRequest, tmpHeader: GetWorkspacesHeaders, runtime: Util.RuntimeOptions): GetWorkspacesResponse {
  Util.validateModel(tmpReq);
  var request = new GetWorkspacesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new GetWorkspacesShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.option)) {
    request.optionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.option, 'Option', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.workspaceIds)) {
    request.workspaceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.workspaceIds, 'WorkspaceIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.optionShrink)) {
    body['Option'] = request.optionShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workspaceIdsShrink)) {
    body['WorkspaceIds'] = request.workspaceIdsShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetWorkspaces',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/getWorkspaces`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWorkspaces(request: GetWorkspacesRequest): GetWorkspacesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetWorkspacesHeaders{};
  return getWorkspacesWithOptions(request, headers, runtime);
}

model InsertColumnsBeforeHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model InsertColumnsBeforeShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model InsertColumnsBeforeRequest {
  column?: long(name='Column', example='1'),
  columnCount?: long(name='ColumnCount', example='3'),
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model InsertColumnsBeforeShrinkRequest {
  column?: long(name='Column', example='1'),
  columnCount?: long(name='ColumnCount', example='3'),
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model InsertColumnsBeforeResponseBody = {
  id?: string(name='id', example='stxxxx'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model InsertColumnsBeforeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InsertColumnsBeforeResponseBody(name='body'),
}

async function insertColumnsBeforeWithOptions(tmpReq: InsertColumnsBeforeRequest, tmpHeader: InsertColumnsBeforeHeaders, runtime: Util.RuntimeOptions): InsertColumnsBeforeResponse {
  Util.validateModel(tmpReq);
  var request = new InsertColumnsBeforeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new InsertColumnsBeforeShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.column)) {
    body['Column'] = request.column;
  }
  if (!Util.isUnset(request.columnCount)) {
    body['ColumnCount'] = request.columnCount;
  }
  if (!Util.isUnset(request.sheetId)) {
    body['SheetId'] = request.sheetId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InsertColumnsBefore',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/insertColumnsBefore`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function insertColumnsBefore(request: InsertColumnsBeforeRequest): InsertColumnsBeforeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InsertColumnsBeforeHeaders{};
  return insertColumnsBeforeWithOptions(request, headers, runtime);
}

model InsertRowsBeforeHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model InsertRowsBeforeShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model InsertRowsBeforeRequest {
  row?: long(name='Row', example='2'),
  rowCount?: long(name='RowCount', example='10'),
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model InsertRowsBeforeShrinkRequest {
  row?: long(name='Row', example='2'),
  rowCount?: long(name='RowCount', example='10'),
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model InsertRowsBeforeResponseBody = {
  id?: string(name='id', example='stxxxx'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model InsertRowsBeforeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InsertRowsBeforeResponseBody(name='body'),
}

async function insertRowsBeforeWithOptions(tmpReq: InsertRowsBeforeRequest, tmpHeader: InsertRowsBeforeHeaders, runtime: Util.RuntimeOptions): InsertRowsBeforeResponse {
  Util.validateModel(tmpReq);
  var request = new InsertRowsBeforeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new InsertRowsBeforeShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.row)) {
    body['Row'] = request.row;
  }
  if (!Util.isUnset(request.rowCount)) {
    body['RowCount'] = request.rowCount;
  }
  if (!Util.isUnset(request.sheetId)) {
    body['SheetId'] = request.sheetId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InsertRowsBefore',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/insertRowsBefore`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function insertRowsBefore(request: InsertRowsBeforeRequest): InsertRowsBeforeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InsertRowsBeforeHeaders{};
  return insertRowsBeforeWithOptions(request, headers, runtime);
}

model InviteUsersHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model InviteUsersShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model InviteUsersRequest {
  inviteeList?: [ 
    {
      nick?: string(name='Nick', example='测试用户'),
      userId?: string(name='UserId', example='012345'),
    }
  ](name='InviteeList'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  conferenceId?: string(name='conferenceId', example='61289fxxx'),
}

model InviteUsersShrinkRequest {
  inviteeListShrink?: string(name='InviteeList'),
  tenantContextShrink?: string(name='TenantContext'),
  conferenceId?: string(name='conferenceId', example='61289fxxx'),
}

model InviteUsersResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model InviteUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InviteUsersResponseBody(name='body'),
}

async function inviteUsersWithOptions(tmpReq: InviteUsersRequest, tmpHeader: InviteUsersHeaders, runtime: Util.RuntimeOptions): InviteUsersResponse {
  Util.validateModel(tmpReq);
  var request = new InviteUsersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new InviteUsersShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.inviteeList)) {
    request.inviteeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.inviteeList, 'InviteeList', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.inviteeListShrink)) {
    body['InviteeList'] = request.inviteeListShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.conferenceId)) {
    body['conferenceId'] = request.conferenceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InviteUsers',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/inviteUsers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function inviteUsers(request: InviteUsersRequest): InviteUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InviteUsersHeaders{};
  return inviteUsersWithOptions(request, headers, runtime);
}

model ListCalendarsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model ListCalendarsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ListCalendarsRequest {
  request?: map[string]any(name='Request', example='{}'),
}

model ListCalendarsShrinkRequest {
  requestShrink?: string(name='Request', example='{}'),
}

model ListCalendarsResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  response?: {
    calendars?: [ 
      {
        description?: string(name='Description', example='描述'),
        ETag?: string(name='ETag', example='0'),
        id?: string(name='Id', example='cnNTbWxxx'),
        privilege?: string(name='Privilege', example='VIEW_DETAIL'),
        summary?: string(name='Summary', example='标题'),
        timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
        type?: string(name='Type', example='primary'),
      }
    ](name='Calendars'),
  }(name='response'),
}

model ListCalendarsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCalendarsResponseBody(name='body'),
}

async function listCalendarsWithOptions(tmpReq: ListCalendarsRequest, tmpHeader: ListCalendarsHeaders, runtime: Util.RuntimeOptions): ListCalendarsResponse {
  Util.validateModel(tmpReq);
  var request = new ListCalendarsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new ListCalendarsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.request)) {
    request.requestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.request, 'Request', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.requestShrink)) {
    body['Request'] = request.requestShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListCalendars',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/listCalendars`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCalendars(request: ListCalendarsRequest): ListCalendarsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListCalendarsHeaders{};
  return listCalendarsWithOptions(request, headers, runtime);
}

model ListEventsHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='208579'),
  }(name='AccountContext'),
}

model ListEventsShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ListEventsRequest {
  calendarId?: string(name='CalendarId', example='primary'),
  maxAttendees?: int32(name='MaxAttendees', example='100'),
  maxResults?: int32(name='MaxResults', example='100'),
  nextToken?: string(name='NextToken', example='cnNTbW1YbxxxxdlQrQT09'),
  seriesMasterId?: string(name='SeriesMasterId', example='cnNTbWxxxxaFJZdEgvdlQrQT09'),
  showDeleted?: boolean(name='ShowDeleted', example='true'),
  syncToken?: string(name='SyncToken', example='zxcasdfvc000009'),
  timeMax?: string(name='TimeMax', example='2023-06-21T00:00:00+08:00'),
  timeMin?: string(name='TimeMin', example='2023-06-20T00:00:00+08:00'),
}

model ListEventsResponseBody = {
  events?: [ 
    {
      attendees?: [ 
        {
          displayName?: string(name='DisplayName', example='tony'),
          isOptional?: boolean(name='IsOptional', example='true'),
          responseStatus?: string(name='ResponseStatus', example='accepted'),
          self?: boolean(name='Self', example='true'),
        }
      ](name='Attendees'),
      categories?: [ 
        {
          displayName?: string(name='DisplayName'),
        }
      ](name='Categories'),
      createTime?: string(name='CreateTime', example='2020-01-01T10:15:30+08:00'),
      description?: string(name='Description', example='something about this event'),
      end?: {
        date?: string(name='Date', example='2020-01-01'),
        dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
        timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
      }(name='End'),
      extendedProperties?: {
        sharedProperties?: {
          belongCorpId?: string(name='BelongCorpId', example='ding*********31'),
          sourceOpenCid?: string(name='SourceOpenCid', example='zxcv90asdf123==='),
        }(name='SharedProperties'),
      }(name='ExtendedProperties'),
      id?: string(name='Id', example='cnNTbW1YbxxxxdEgvdlQrQT09'),
      isAllDay?: boolean(name='IsAllDay', example='true'),
      location?: {
        displayName?: string(name='DisplayName', example='room 1-2-3'),
        meetingRooms?: [ string ](name='MeetingRooms'),
      }(name='Location'),
      meetingRooms?: [ 
        {
          displayName?: string(name='DisplayName'),
          responseStatus?: string(name='ResponseStatus', example='accepted'),
          roomId?: string(name='RoomId', example='c10315a8b4e740a317813ab6fxxxxxx'),
        }
      ](name='MeetingRooms'),
      onlineMeetingInfo?: {
        conferenceId?: string(name='ConferenceId', example='5c4df21dxxxx-a6db402b9f3a'),
        extraInfo?: map[string]any(name='ExtraInfo'),
        type?: string(name='Type', example='dingtalk'),
        url?: string(name='Url', example='dingtalk://dingtalkclient/page/videoCoxxxxndar?confId=5c4df21dxxxx2b9f3a&calendarId=92xxxx36'),
      }(name='OnlineMeetingInfo'),
      organizer?: {
        displayName?: string(name='DisplayName', example='tony'),
        responseStatus?: string(name='ResponseStatus', example='accepted'),
        self?: boolean(name='Self', example='true'),
      }(name='Organizer'),
      originStart?: {
        dateTime?: string(name='DateTime', example='2023-01-01T00:00:00Z'),
      }(name='OriginStart'),
      recurrence?: {
        pattern?: {
          dayOfMonth?: int32(name='DayOfMonth', example='1'),
          daysOfWeek?: string(name='DaysOfWeek', example='sunday'),
          index?: string(name='Index', example='first'),
          interval?: int32(name='Interval', example='1'),
          type?: string(name='Type', example='daily'),
        }(name='Pattern'),
        range?: {
          endDate?: string(name='EndDate', example='2020-01-01T10:15:30+08:00'),
          numberOfOccurrences?: int32(name='NumberOfOccurrences', example='5'),
          type?: string(name='Type', example='noEnd'),
        }(name='Range'),
      }(name='Recurrence'),
      reminders?: [ 
        {
          method?: string(name='Method', example='dingtalk'),
          minutes?: string(name='Minutes', example='15'),
        }
      ](name='Reminders'),
      seriesMasterId?: string(name='SeriesMasterId', example='cnNTbWxxxxaFJZdEgvdlQrQT09'),
      start?: {
        date?: string(name='Date', example='2020-01-01'),
        dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
        timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
      }(name='Start'),
      status?: string(name='Status', example='confirmed'),
      summary?: string(name='Summary'),
      updateTime?: string(name='UpdateTime', example='2020-01-01T10:15:30+08:00'),
    }
  ](name='events'),
  nextToken?: string(name='nextToken', example='cnNTbW1YbxxxxdlQrQT09'),
  requestId?: string(name='requestId', description='requestId', example='4248DCC9-785F-5A14-8BE0-830FD52E1261'),
  syncToken?: string(name='syncToken', example='zxcasdfvc000009'),
}

model ListEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEventsResponseBody(name='body'),
}

async function listEventsWithOptions(request: ListEventsRequest, tmpHeader: ListEventsHeaders, runtime: Util.RuntimeOptions): ListEventsResponse {
  Util.validateModel(request);
  var headers = new ListEventsShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.calendarId)) {
    body['CalendarId'] = request.calendarId;
  }
  if (!Util.isUnset(request.maxAttendees)) {
    body['MaxAttendees'] = request.maxAttendees;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.seriesMasterId)) {
    body['SeriesMasterId'] = request.seriesMasterId;
  }
  if (!Util.isUnset(request.showDeleted)) {
    body['ShowDeleted'] = request.showDeleted;
  }
  if (!Util.isUnset(request.syncToken)) {
    body['SyncToken'] = request.syncToken;
  }
  if (!Util.isUnset(request.timeMax)) {
    body['TimeMax'] = request.timeMax;
  }
  if (!Util.isUnset(request.timeMin)) {
    body['TimeMin'] = request.timeMin;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListEvents',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/listEvents`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEvents(request: ListEventsRequest): ListEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListEventsHeaders{};
  return listEventsWithOptions(request, headers, runtime);
}

model ListNodesHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model ListNodesShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ListNodesRequest {
  maxResults?: int32(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='next_token'),
  parentNodeId?: string(name='ParentNodeId', example='MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  withPermissionRole?: boolean(name='WithPermissionRole', example='false'),
}

model ListNodesShrinkRequest {
  maxResults?: int32(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='next_token'),
  parentNodeId?: string(name='ParentNodeId', example='MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3'),
  tenantContextShrink?: string(name='TenantContext'),
  withPermissionRole?: boolean(name='WithPermissionRole', example='false'),
}

model ListNodesResponseBody = {
  nextToken?: string(name='nextToken', example='next_token'),
  nodes?: [ 
    {
      category?: string(name='Category', example='ALIDOC'),
      createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
      creatorId?: string(name='CreatorId', example='01472825524039877041'),
      extension?: string(name='Extension', example='adoc'),
      hasChildren?: boolean(name='HasChildren', example='true'),
      modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
      modifierId?: string(name='ModifierId', example='01472825524039877041'),
      name?: string(name='Name', example='node_name'),
      nodeId?: string(name='NodeId', example='MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3'),
      permissionRole?: string(name='PermissionRole', example='READER'),
      size?: long(name='Size', example='512'),
      statisticalInfo?: {
        wordCount?: long(name='WordCount', example='123'),
      }(name='StatisticalInfo'),
      type?: string(name='Type', example='FILE'),
      url?: string(name='Url', example='node_url'),
      workspaceId?: string(name='WorkspaceId', example='MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3'),
    }
  ](name='nodes'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model ListNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNodesResponseBody(name='body'),
}

async function listNodesWithOptions(tmpReq: ListNodesRequest, tmpHeader: ListNodesHeaders, runtime: Util.RuntimeOptions): ListNodesResponse {
  Util.validateModel(tmpReq);
  var request = new ListNodesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new ListNodesShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.parentNodeId)) {
    body['ParentNodeId'] = request.parentNodeId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.withPermissionRole)) {
    body['WithPermissionRole'] = request.withPermissionRole;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNodes',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/listNodes`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodes(request: ListNodesRequest): ListNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListNodesHeaders{};
  return listNodesWithOptions(request, headers, runtime);
}

model ListReportHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model ListReportShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ListReportRequest {
  cursor?: long(name='Cursor', example='0'),
  endTime?: long(name='EndTime', example='1507564800000'),
  modifiedEndTime?: long(name='ModifiedEndTime', example='1507564800000'),
  modifiedStartTime?: long(name='ModifiedStartTime', example='1507564800000'),
  size?: long(name='Size', example='10'),
  startTime?: long(name='StartTime', example='1507564800000'),
  templateName?: string(name='TemplateName', example='我管理的模版'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model ListReportShrinkRequest {
  cursor?: long(name='Cursor', example='0'),
  endTime?: long(name='EndTime', example='1507564800000'),
  modifiedEndTime?: long(name='ModifiedEndTime', example='1507564800000'),
  modifiedStartTime?: long(name='ModifiedStartTime', example='1507564800000'),
  size?: long(name='Size', example='10'),
  startTime?: long(name='StartTime', example='1507564800000'),
  templateName?: string(name='TemplateName', example='我管理的模版'),
  tenantContextShrink?: string(name='TenantContext'),
}

model ListReportResponseBody = {
  dataList?: [ 
    {
      contents?: [ 
        {
          key?: string(name='Key', example='env'),
          sort?: string(name='Sort', example='0'),
          type?: string(name='Type', example='1'),
          value?: string(name='Value', example='ce9ab5d4a80a9401f97c7077e6a9634bd'),
        }
      ](name='Contents'),
      createTime?: long(name='CreateTime', example='1678416166000'),
      creatorId?: string(name='CreatorId', example='1127123'),
      creatorName?: string(name='CreatorName', example='admin'),
      deptName?: string(name='DeptName'),
      images?: [ string ](name='Images'),
      latitude?: string(name='Latitude', example='31.1264'),
      longitude?: string(name='Longitude', example='108.938036'),
      modifiedTime?: long(name='ModifiedTime', example='1653543540000'),
      remark?: string(name='Remark'),
      reportId?: string(name='ReportId', example='d64994d09916c76276dd9bfa23637644'),
      templateName?: string(name='TemplateName'),
    }
  ](name='dataList'),
  hasMore?: boolean(name='hasMore', example='true'),
  nextCursor?: long(name='nextCursor', example='12312131231'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  size?: long(name='size', example='20'),
}

model ListReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListReportResponseBody(name='body'),
}

async function listReportWithOptions(tmpReq: ListReportRequest, tmpHeader: ListReportHeaders, runtime: Util.RuntimeOptions): ListReportResponse {
  Util.validateModel(tmpReq);
  var request = new ListReportShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new ListReportShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.cursor)) {
    body['Cursor'] = request.cursor;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.modifiedEndTime)) {
    body['ModifiedEndTime'] = request.modifiedEndTime;
  }
  if (!Util.isUnset(request.modifiedStartTime)) {
    body['ModifiedStartTime'] = request.modifiedStartTime;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.templateName)) {
    body['TemplateName'] = request.templateName;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListReport',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/log/listReport`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listReport(request: ListReportRequest): ListReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListReportHeaders{};
  return listReportWithOptions(request, headers, runtime);
}

model ListWorkspacesHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model ListWorkspacesShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ListWorkspacesRequest {
  maxResults?: int32(name='MaxResults', example='30'),
  nextToken?: string(name='NextToken', example='123123'),
  orderBy?: string(name='OrderBy', example='VIEW_TIME_DESC'),
  teamId?: string(name='TeamId', example='qweqwe'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  withPermissionRole?: boolean(name='WithPermissionRole', example='true'),
}

model ListWorkspacesShrinkRequest {
  maxResults?: int32(name='MaxResults', example='30'),
  nextToken?: string(name='NextToken', example='123123'),
  orderBy?: string(name='OrderBy', example='VIEW_TIME_DESC'),
  teamId?: string(name='TeamId', example='qweqwe'),
  tenantContextShrink?: string(name='TenantContext'),
  withPermissionRole?: boolean(name='WithPermissionRole', example='true'),
}

model ListWorkspacesResponseBody = {
  nextToken?: string(name='nextToken', example='next_token'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  workspaces?: [ 
    {
      corpId?: string(name='CorpId', example='ding16b241fd05********288'),
      cover?: string(name='Cover', example='https://example/file-manage-files/zh-CN/202***13/ldet/XXXX.jpg'),
      createTime?: string(name='CreateTime', example='2023-05-15T11:29Z'),
      creatorId?: string(name='CreatorId', example='workspace_creator_id'),
      description?: string(name='Description', example='workspace_description'),
      icon?: {
        type?: string(name='Type', example='URL'),
        value?: string(name='Value', example='icon_url'),
      }(name='Icon'),
      modifiedTime?: string(name='ModifiedTime', example='2023-05-15T11:29Z'),
      modifierId?: string(name='ModifierId', example='workspace_modifier_id'),
      name?: string(name='Name', example='workspace_name'),
      permissionRole?: string(name='PermissionRole', example='READER'),
      rootNodeId?: string(name='RootNodeId', example='ZgpG2NdyVXXjrKKzIBqMp5zkVMwvDqPk'),
      teamId?: string(name='TeamId', example='iPes3KGYA9DxYSdz2iPuI8ZwiEiE'),
      type?: string(name='Type', example='TEAM'),
      url?: string(name='Url', example='workspace_url'),
      workspaceId?: string(name='WorkspaceId', example='By8jQS1ZYjGn5b0M'),
    }
  ](name='workspaces'),
}

model ListWorkspacesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListWorkspacesResponseBody(name='body'),
}

async function listWorkspacesWithOptions(tmpReq: ListWorkspacesRequest, tmpHeader: ListWorkspacesHeaders, runtime: Util.RuntimeOptions): ListWorkspacesResponse {
  Util.validateModel(tmpReq);
  var request = new ListWorkspacesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new ListWorkspacesShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.orderBy)) {
    body['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.teamId)) {
    body['TeamId'] = request.teamId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.withPermissionRole)) {
    body['WithPermissionRole'] = request.withPermissionRole;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListWorkspaces',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/listWorkspaces`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listWorkspaces(request: ListWorkspacesRequest): ListWorkspacesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListWorkspacesHeaders{};
  return listWorkspacesWithOptions(request, headers, runtime);
}

model PatchEventHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='123456'),
  }(name='AccountContext'),
}

model PatchEventShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model PatchEventRequest {
  attendees?: [ 
    {
      id?: string(name='id', example='123456'),
      isOptional?: boolean(name='isOptional', example='false'),
    }
  ](name='Attendees'),
  calendarId?: string(name='CalendarId', example='primary'),
  description?: string(name='Description'),
  end?: {
    date?: string(name='date', example='2020-01-01'),
    dateTime?: string(name='dateTime', example='2020-01-01T10:15:30+08:00'),
    timeZone?: string(name='timeZone', example='Asia/Shanghai'),
  }(name='End'),
  eventId?: string(name='EventId', example='iiiP35sJadba8aBSgjrwPRKgiEiF'),
  extra?: map[string]string(name='Extra'),
  isAllDay?: boolean(name='IsAllDay', example='true'),
  location?: {
    displayName?: string(name='displayName', example='room 1-2-3'),
  }(name='Location'),
  recurrence?: {
    pattern?: {
      dayOfMonth?: int32(name='dayOfMonth', example='1'),
      daysOfWeek?: string(name='daysOfWeek', example='sunday'),
      index?: string(name='index', example='last'),
      interval?: int32(name='interval', example='1'),
      type?: string(name='type', example='daily'),
    }(name='pattern'),
    range?: {
      endDate?: string(name='endDate', example='2021-12-31T10:15:30+08:00'),
      numberOfOccurrences?: int32(name='numberOfOccurrences', example='1'),
      type?: string(name='type', example='endDate'),
    }(name='range'),
  }(name='Recurrence'),
  reminders?: [ 
    {
      method?: string(name='method', example='dingtalk'),
      minutes?: int32(name='minutes', example='15'),
    }
  ](name='Reminders'),
  start?: {
    date?: string(name='date', example='2020-01-01'),
    dateTime?: string(name='dateTime', example='2020-01-01T10:15:30+08:00'),
    timeZone?: string(name='timeZone', example='Asia/Shanghai'),
  }(name='Start'),
  summary?: string(name='Summary'),
}

model PatchEventShrinkRequest {
  attendeesShrink?: string(name='Attendees'),
  calendarId?: string(name='CalendarId', example='primary'),
  description?: string(name='Description'),
  endShrink?: string(name='End'),
  eventId?: string(name='EventId', example='iiiP35sJadba8aBSgjrwPRKgiEiF'),
  extraShrink?: string(name='Extra'),
  isAllDay?: boolean(name='IsAllDay', example='true'),
  locationShrink?: string(name='Location'),
  recurrenceShrink?: string(name='Recurrence'),
  remindersShrink?: string(name='Reminders'),
  startShrink?: string(name='Start'),
  summary?: string(name='Summary'),
}

model PatchEventResponseBody = {
  attendees?: [ 
    {
      displayName?: string(name='DisplayName', example='tony'),
      id?: string(name='Id', example='123456'),
      isOptional?: boolean(name='IsOptional', example='true'),
      responseStatus?: string(name='ResponseStatus', example='accepted'),
      self?: boolean(name='Self', example='true'),
    }
  ](name='attendees'),
  createTime?: string(name='createTime', example='2022-10-25T02:26:14Z'),
  description?: string(name='description'),
  end?: {
    date?: string(name='Date', example='2020-01-01'),
    dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
    timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
  }(name='end'),
  id?: string(name='id', example='123456'),
  isAllDay?: boolean(name='isAllDay', example='true'),
  location?: {
    displayName?: string(name='DisplayName', example='true'),
    meetingRooms?: [ string ](name='MeetingRooms'),
  }(name='location'),
  organizer?: {
    displayName?: string(name='DisplayName', example='tony'),
    id?: string(name='Id', example='123456'),
    responseStatus?: string(name='ResponseStatus', example='accepted'),
    self?: boolean(name='Self', example='true'),
  }(name='organizer'),
  recurrence?: {
    pattern?: {
      dayOfMonth?: int32(name='DayOfMonth', example='14'),
      daysOfWeek?: string(name='DaysOfWeek', example='sunday'),
      index?: string(name='Index', example='first'),
      interval?: int32(name='Interval', example='1'),
      type?: string(name='Type', example='daily'),
    }(name='Pattern'),
    range?: {
      endDate?: string(name='EndDate', example='2020-01-01T10:15:30+08:00'),
      numberOfOccurrences?: int32(name='NumberOfOccurrences', example='5'),
      type?: string(name='Type', example='noEnd'),
    }(name='Range'),
  }(name='recurrence'),
  reminders?: [ 
    {
      method?: string(name='Method', example='dingtalk'),
      minutes?: string(name='Minutes', example='15'),
    }
  ](name='reminders'),
  requestId?: string(name='requestId', description='requestId', example='4248DCC9-785F-5A14-8BE0-830FD52E1261'),
  start?: {
    date?: string(name='Date', example='2020-01-01'),
    dateTime?: string(name='DateTime', example='2020-01-01T10:15:30+08:00'),
    timeZone?: string(name='TimeZone', example='Asia/Shanghai'),
  }(name='start'),
  summary?: string(name='summary'),
  updateTime?: string(name='updateTime', example='2020-01-01T10:15:30+08:00'),
}

model PatchEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PatchEventResponseBody(name='body'),
}

async function patchEventWithOptions(tmpReq: PatchEventRequest, tmpHeader: PatchEventHeaders, runtime: Util.RuntimeOptions): PatchEventResponse {
  Util.validateModel(tmpReq);
  var request = new PatchEventShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new PatchEventShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.attendees)) {
    request.attendeesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.attendees, 'Attendees', 'json');
  }
  if (!Util.isUnset(tmpReq.end)) {
    request.endShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.end, 'End', 'json');
  }
  if (!Util.isUnset(tmpReq.extra)) {
    request.extraShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extra, 'Extra', 'json');
  }
  if (!Util.isUnset(tmpReq.location)) {
    request.locationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.location, 'Location', 'json');
  }
  if (!Util.isUnset(tmpReq.recurrence)) {
    request.recurrenceShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.recurrence, 'Recurrence', 'json');
  }
  if (!Util.isUnset(tmpReq.reminders)) {
    request.remindersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.reminders, 'Reminders', 'json');
  }
  if (!Util.isUnset(tmpReq.start)) {
    request.startShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.start, 'Start', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.attendeesShrink)) {
    body['Attendees'] = request.attendeesShrink;
  }
  if (!Util.isUnset(request.calendarId)) {
    body['CalendarId'] = request.calendarId;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.endShrink)) {
    body['End'] = request.endShrink;
  }
  if (!Util.isUnset(request.eventId)) {
    body['EventId'] = request.eventId;
  }
  if (!Util.isUnset(request.extraShrink)) {
    body['Extra'] = request.extraShrink;
  }
  if (!Util.isUnset(request.isAllDay)) {
    body['IsAllDay'] = request.isAllDay;
  }
  if (!Util.isUnset(request.locationShrink)) {
    body['Location'] = request.locationShrink;
  }
  if (!Util.isUnset(request.recurrenceShrink)) {
    body['Recurrence'] = request.recurrenceShrink;
  }
  if (!Util.isUnset(request.remindersShrink)) {
    body['Reminders'] = request.remindersShrink;
  }
  if (!Util.isUnset(request.startShrink)) {
    body['Start'] = request.startShrink;
  }
  if (!Util.isUnset(request.summary)) {
    body['Summary'] = request.summary;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PatchEvent',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/patchEvent`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function patchEvent(request: PatchEventRequest): PatchEventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new PatchEventHeaders{};
  return patchEventWithOptions(request, headers, runtime);
}

model QueryCloudRecordTextHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model QueryCloudRecordTextShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryCloudRecordTextRequest {
  direction?: string(name='Direction', example='0'),
  maxResults?: long(name='MaxResults', example='20000'),
  nextToken?: long(name='NextToken', example='1631172045153000'),
  startTime?: long(name='StartTime', example='7940'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  conferenceId?: string(name='conferenceId', example='61289fxxx'),
}

model QueryCloudRecordTextShrinkRequest {
  direction?: string(name='Direction', example='0'),
  maxResults?: long(name='MaxResults', example='20000'),
  nextToken?: long(name='NextToken', example='1631172045153000'),
  startTime?: long(name='StartTime', example='7940'),
  tenantContextShrink?: string(name='TenantContext'),
  conferenceId?: string(name='conferenceId', example='61289fxxx'),
}

model QueryCloudRecordTextResponseBody = {
  hasMore?: boolean(name='hasMore', example='true'),
  paragraphList?: [ 
    {
      endTime?: long(name='EndTime', example='7940'),
      nextTtoken?: long(name='NextTtoken', example='1631172045153000'),
      nickName?: string(name='NickName', example='小钉'),
      paragraph?: string(name='Paragraph', example='嘿！你好，这里是小钉'),
      recordId?: long(name='RecordId', example='44444'),
      sentenceList?: [ 
        {
          endTime?: long(name='EndTime', example='7940'),
          sentence?: string(name='Sentence', example='这里是小钉'),
          startTime?: long(name='StartTime', example='7940'),
          userId?: string(name='UserId', example='012345'),
          wordList?: [ 
            {
              endTime?: long(name='EndTime', example='7940'),
              startTime?: long(name='StartTime', example='7940'),
              word?: string(name='Word', example='这里'),
              wordId?: string(name='WordId', example='1631172050535000#0'),
            }
          ](name='WordList'),
        }
      ](name='SentenceList'),
      startTime?: long(name='StartTime', example='7940'),
      status?: long(name='Status', example='1'),
      userId?: string(name='UserId', example='012345'),
    }
  ](name='paragraphList'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model QueryCloudRecordTextResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCloudRecordTextResponseBody(name='body'),
}

async function queryCloudRecordTextWithOptions(tmpReq: QueryCloudRecordTextRequest, tmpHeader: QueryCloudRecordTextHeaders, runtime: Util.RuntimeOptions): QueryCloudRecordTextResponse {
  Util.validateModel(tmpReq);
  var request = new QueryCloudRecordTextShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryCloudRecordTextShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.direction)) {
    body['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.conferenceId)) {
    body['conferenceId'] = request.conferenceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryCloudRecordText',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryCloudRecordText`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCloudRecordText(request: QueryCloudRecordTextRequest): QueryCloudRecordTextResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryCloudRecordTextHeaders{};
  return queryCloudRecordTextWithOptions(request, headers, runtime);
}

model QueryCloudRecordVideoHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model QueryCloudRecordVideoShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryCloudRecordVideoRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  conferenceId?: string(name='conferenceId', example='61289fxxx'),
}

model QueryCloudRecordVideoShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  conferenceId?: string(name='conferenceId', example='61289fxxx'),
}

model QueryCloudRecordVideoResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  videoList?: [ 
    {
      duration?: long(name='Duration', example='59886'),
      endTime?: long(name='EndTime', example='1631172094000'),
      fileSize?: long(name='FileSize', example='1127942'),
      mediaId?: string(name='MediaId', example='faa1566c5bc24f21821ae2394f82db2e'),
      recordId?: string(name='RecordId', example='290882268xxx1172033231'),
      recordType?: long(name='RecordType', example='1'),
      regionId?: string(name='RegionId', example='cn-shenzhen'),
      startTime?: long(name='StartTime', example='1631172094000'),
      userId?: string(name='UserId', example='012345'),
    }
  ](name='videoList'),
}

model QueryCloudRecordVideoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCloudRecordVideoResponseBody(name='body'),
}

async function queryCloudRecordVideoWithOptions(tmpReq: QueryCloudRecordVideoRequest, tmpHeader: QueryCloudRecordVideoHeaders, runtime: Util.RuntimeOptions): QueryCloudRecordVideoResponse {
  Util.validateModel(tmpReq);
  var request = new QueryCloudRecordVideoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryCloudRecordVideoShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.conferenceId)) {
    body['conferenceId'] = request.conferenceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryCloudRecordVideo',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryCloudRecordVideo`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCloudRecordVideo(request: QueryCloudRecordVideoRequest): QueryCloudRecordVideoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryCloudRecordVideoHeaders{};
  return queryCloudRecordVideoWithOptions(request, headers, runtime);
}

model QueryCloudRecordVideoPlayInfoHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model QueryCloudRecordVideoPlayInfoShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryCloudRecordVideoPlayInfoRequest {
  conferenceId?: string(name='ConferenceId', example='6139b4xxx'),
  mediaId?: string(name='MediaId', example='44444444'),
  regionId?: string(name='RegionId', example='cn-shenzhen'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model QueryCloudRecordVideoPlayInfoShrinkRequest {
  conferenceId?: string(name='ConferenceId', example='6139b4xxx'),
  mediaId?: string(name='MediaId', example='44444444'),
  regionId?: string(name='RegionId', example='cn-shenzhen'),
  tenantContextShrink?: string(name='TenantContext'),
}

model QueryCloudRecordVideoPlayInfoResponseBody = {
  duration?: long(name='duration', example='59886'),
  fileSize?: long(name='fileSize', example='1127942'),
  mp4FileUrl?: string(name='mp4FileUrl', example='https://vod.mcs.dingtalk.com/faa1566c5bc24f21821ae2394f82db2e/8bbd1612e686462ab4717919f67bb721-b8531e0d534b2f9747a9fdfxxxxxxxxc-sd.mp4'),
  playUrl?: string(name='playUrl', example='https://vod.mcs.dingtalk.com/faa1566c5bc24f21821ae2394f82db2e/8bbd1612e686462ab4717919f67bb721-ab85cc044a163568c9485xxxxxxxx76d-sd.m3u8'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  status?: long(name='status', example='1'),
}

model QueryCloudRecordVideoPlayInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCloudRecordVideoPlayInfoResponseBody(name='body'),
}

async function queryCloudRecordVideoPlayInfoWithOptions(tmpReq: QueryCloudRecordVideoPlayInfoRequest, tmpHeader: QueryCloudRecordVideoPlayInfoHeaders, runtime: Util.RuntimeOptions): QueryCloudRecordVideoPlayInfoResponse {
  Util.validateModel(tmpReq);
  var request = new QueryCloudRecordVideoPlayInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryCloudRecordVideoPlayInfoShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.conferenceId)) {
    body['ConferenceId'] = request.conferenceId;
  }
  if (!Util.isUnset(request.mediaId)) {
    body['MediaId'] = request.mediaId;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryCloudRecordVideoPlayInfo',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryCloudRecordVideoPlayInfo`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCloudRecordVideoPlayInfo(request: QueryCloudRecordVideoPlayInfoRequest): QueryCloudRecordVideoPlayInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryCloudRecordVideoPlayInfoHeaders{};
  return queryCloudRecordVideoPlayInfoWithOptions(request, headers, runtime);
}

model QueryConferenceInfoHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='208579'),
  }(name='AccountContext'),
}

model QueryConferenceInfoShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryConferenceInfoRequest {
  conferenceId?: string(name='conferenceId', example='607452e01401526ee39609e1'),
}

model QueryConferenceInfoResponseBody = {
  confInfo?: {
    activeNum?: int32(name='ActiveNum', example='2'),
    attendNum?: int32(name='AttendNum', example='2'),
    confDuration?: long(name='ConfDuration', example='1000000'),
    conferenceId?: string(name='ConferenceId', example='607452e01401526ee39609e1'),
    creatorId?: string(name='CreatorId', example='208579'),
    creatorNick?: string(name='CreatorNick'),
    endTime?: long(name='EndTime', example='1663294270000'),
    externalLinkUrl?: string(name='ExternalLinkUrl', example='https://meeting.dingtalk.com/app?roomCode=42726xxx&token=1_7ac9xxx'),
    invitedNum?: int32(name='InvitedNum', example='2'),
    roomCode?: string(name='RoomCode', example='4272xxxxx'),
    startTime?: long(name='StartTime', example='1663293270000'),
    status?: int32(name='Status', example='0'),
    title?: string(name='Title'),
  }(name='confInfo'),
  requestId?: string(name='requestId', description='requestId', example='4248DCC9-785F-5A14-8BE0-830FD52E1261'),
}

model QueryConferenceInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryConferenceInfoResponseBody(name='body'),
}

async function queryConferenceInfoWithOptions(request: QueryConferenceInfoRequest, tmpHeader: QueryConferenceInfoHeaders, runtime: Util.RuntimeOptions): QueryConferenceInfoResponse {
  Util.validateModel(request);
  var headers = new QueryConferenceInfoShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.conferenceId)) {
    body['conferenceId'] = request.conferenceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryConferenceInfo',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryConferenceInfo`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryConferenceInfo(request: QueryConferenceInfoRequest): QueryConferenceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryConferenceInfoHeaders{};
  return queryConferenceInfoWithOptions(request, headers, runtime);
}

model QueryConferenceMembersHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model QueryConferenceMembersShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryConferenceMembersRequest {
  maxResults?: int32(name='MaxResults', example='300'),
  nextToken?: string(name='NextToken', example='123000000'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  conferenceId?: string(name='conferenceId', example='61289fxxx'),
}

model QueryConferenceMembersShrinkRequest {
  maxResults?: int32(name='MaxResults', example='300'),
  nextToken?: string(name='NextToken', example='123000000'),
  tenantContextShrink?: string(name='TenantContext'),
  conferenceId?: string(name='conferenceId', example='61289fxxx'),
}

model QueryConferenceMembersResponseBody = {
  memberModels?: [ 
    {
      attendStatus?: int32(name='AttendStatus', example='6'),
      coHost?: boolean(name='CoHost', example='false'),
      conferenceId?: string(name='ConferenceId', example='6323dxxxxx'),
      duration?: long(name='Duration', example='10000'),
      host?: boolean(name='Host', example='false'),
      joinTime?: long(name='JoinTime', example='1663293270000'),
      leaveTime?: long(name='LeaveTime', example='1663293280000'),
      outerOrgMember?: boolean(name='OuterOrgMember', example='true'),
      pstnJoin?: boolean(name='PstnJoin', example='false'),
      userId?: string(name='UserId', example='-12345'),
      userNick?: string(name='UserNick', example='小钉'),
    }
  ](name='memberModels'),
  nextToken?: string(name='nextToken', example='123000000'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalCount?: int32(name='totalCount', example='20'),
}

model QueryConferenceMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryConferenceMembersResponseBody(name='body'),
}

async function queryConferenceMembersWithOptions(tmpReq: QueryConferenceMembersRequest, tmpHeader: QueryConferenceMembersHeaders, runtime: Util.RuntimeOptions): QueryConferenceMembersResponse {
  Util.validateModel(tmpReq);
  var request = new QueryConferenceMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryConferenceMembersShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.conferenceId)) {
    body['conferenceId'] = request.conferenceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryConferenceMembers',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryConferenceMembers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryConferenceMembers(request: QueryConferenceMembersRequest): QueryConferenceMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryConferenceMembersHeaders{};
  return queryConferenceMembersWithOptions(request, headers, runtime);
}

model QueryDentryHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model QueryDentryShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryDentryRequest {
  dentryId?: string(name='DentryId', example='xxx'),
  includeSpace?: boolean(name='IncludeSpace', example='true'),
  spaceId?: string(name='SpaceId', example='space-fxhb96vuddz8htqt'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model QueryDentryShrinkRequest {
  dentryId?: string(name='DentryId', example='xxx'),
  includeSpace?: boolean(name='IncludeSpace', example='true'),
  spaceId?: string(name='SpaceId', example='space-fxhb96vuddz8htqt'),
  tenantContextShrink?: string(name='TenantContext'),
}

model QueryDentryResponseBody = {
  contentType?: string(name='contentType', example='alidoc'),
  createdTime?: long(name='createdTime', example='12345678'),
  creator?: {
    name?: string(name='Name', example='hello'),
    userId?: string(name='UserId', example='012345'),
  }(name='creator'),
  dentryId?: string(name='dentryId', example='abc'),
  dentryType?: string(name='dentryType', example='file'),
  dentryUuid?: string(name='dentryUuid', example='cdefg'),
  docKey?: string(name='docKey', example='aabbcc'),
  extension?: string(name='extension', example='alidoc'),
  hasChildren?: boolean(name='hasChildren', example='false'),
  linkSourceInfo?: {
    extension?: string(name='Extension', example='docx'),
    iconUrl?: {
      line?: string(name='Line', example='gh'),
      small?: string(name='Small', example='def'),
    }(name='IconUrl'),
    id?: string(name='Id', example='def'),
    linkType?: long(name='LinkType', example='0'),
    spaceId?: string(name='SpaceId', example='def'),
  }(name='linkSourceInfo'),
  name?: string(name='name', example='hello'),
  path?: string(name='path', example='测试组织/测试知识库/abc'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  space?: {
    cover?: string(name='Cover', example='https://img.alicdn.com/imgextra/i1/O1xxxxx.png'),
    description?: string(name='Description', example='这是简介'),
    hdIconVO?: {
      icon?: string(name='Icon', example='http://'),
      type?: string(name='Type', example='type'),
    }(name='HdIconVO'),
    iconVO?: {
      icon?: string(name='Icon', example='http://'),
      type?: string(name='Type', example='type'),
    }(name='IconVO'),
    id?: string(name='Id', example='n9XJxxxxx'),
    name?: string(name='Name'),
    owner?: {
      name?: string(name='Name', example='小钉'),
      userId?: string(name='UserId', example='012345'),
    }(name='Owner', example='测试知识库'),
    recentList?: [ 
      {
        contentType?: string(name='ContentType', example='alidoc'),
        createdTime?: long(name='CreatedTime', example='12345678'),
        creator?: {
          name?: string(name='Name', example='hello'),
          userId?: string(name='UserId', example='012345'),
        }(name='Creator'),
        dentryId?: string(name='DentryId', example='abc'),
        dentryType?: string(name='DentryType', example='file'),
        dentryUuid?: string(name='DentryUuid', example='cdefg'),
        docKey?: string(name='DocKey', example='aabbcc'),
        extension?: string(name='Extension', example='alidoc'),
        hasChildren?: boolean(name='HasChildren', example='false'),
        linkSourceInfo?: {
          extension?: string(name='Extension', example='docx'),
          iconUrl?: {
            line?: string(name='Line', example='gh'),
            small?: string(name='Small', example='def'),
          }(name='IconUrl'),
          id?: string(name='Id', example='def'),
          linkType?: long(name='LinkType', example='0'),
          spaceId?: string(name='SpaceId', example='def'),
        }(name='LinkSourceInfo'),
        name?: string(name='Name', example='hello'),
        path?: string(name='Path', example='测试组织/测试知识库/abc'),
        space?: any(name='Space'),
        spaceId?: string(name='SpaceId', example='bcd'),
        statisticalInfo?: {
          wordCount?: long(name='WordCount'),
        }(name='StatisticalInfo'),
        updatedTime?: long(name='UpdatedTime', example='12345678'),
        updater?: {
          name?: string(name='Name', example='hello'),
          userId?: string(name='UserId', example='012345'),
        }(name='Updater'),
        url?: string(name='Url', example='https://xxx.yy'),
        visitorInfo?: {
          dentryActions?: [ string ](name='DentryActions'),
          roleCode?: string(name='RoleCode', example='1'),
          spaceActions?: [ string ](name='SpaceActions'),
        }(name='VisitorInfo'),
      }
    ](name='RecentList'),
    type?: int32(name='Type', example='1'),
    url?: string(name='Url', example='https://alidocs.dingtalk.com/i/spaces/n9XJ*******Xy/overview'),
    visitorInfo?: {
      dentryActions?: [ string ](name='DentryActions', example='GET_DENTRY'),
      roleCode?: string(name='RoleCode', example='3'),
      spaceActions?: [ string ](name='SpaceActions', example='GET_SPACE'),
    }(name='VisitorInfo'),
  }(name='space'),
  spaceId?: string(name='spaceId', example='bcd'),
  updatedTime?: long(name='updatedTime', example='12345678'),
  updater?: {
    name?: string(name='Name', example='hello'),
    userId?: string(name='UserId', example='012345'),
  }(name='updater'),
  url?: string(name='url', example='https://xxx.yy'),
  visitorInfo?: {
    dentryActions?: [ string ](name='DentryActions'),
    roleCode?: string(name='RoleCode', example='1'),
    spaceActions?: [ string ](name='SpaceActions'),
  }(name='visitorInfo'),
}

model QueryDentryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDentryResponseBody(name='body'),
}

async function queryDentryWithOptions(tmpReq: QueryDentryRequest, tmpHeader: QueryDentryHeaders, runtime: Util.RuntimeOptions): QueryDentryResponse {
  Util.validateModel(tmpReq);
  var request = new QueryDentryShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryDentryShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.dentryId)) {
    body['DentryId'] = request.dentryId;
  }
  if (!Util.isUnset(request.includeSpace)) {
    body['IncludeSpace'] = request.includeSpace;
  }
  if (!Util.isUnset(request.spaceId)) {
    body['SpaceId'] = request.spaceId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryDentry',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v2/documents/queryDentry`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDentry(request: QueryDentryRequest): QueryDentryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryDentryHeaders{};
  return queryDentryWithOptions(request, headers, runtime);
}

model QueryLiveInfoHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model QueryLiveInfoShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryLiveInfoRequest {
  liveId?: string(name='LiveId', example='4d38xxxxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model QueryLiveInfoShrinkRequest {
  liveId?: string(name='LiveId', example='4d38xxxxx'),
  tenantContextShrink?: string(name='TenantContext'),
}

model QueryLiveInfoResponseBody = {
  coverUrl?: string(name='coverUrl', example='http://xxx/kk.jpg'),
  duration?: long(name='duration', example='59886'),
  endTime?: long(name='endTime', example='1662447951960'),
  introduction?: string(name='introduction'),
  liveId?: int32(name='liveId', example='1211-3442-122'),
  livePlayUrl?: string(name='livePlayUrl', example='http://ssssss'),
  playbackDuration?: long(name='playbackDuration', example='13414'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  startTime?: long(name='startTime', example='1627353123000'),
  subscribeCount?: int32(name='subscribeCount', example='111'),
  title?: string(name='title'),
  uv?: int32(name='uv', example='10'),
}

model QueryLiveInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryLiveInfoResponseBody(name='body'),
}

async function queryLiveInfoWithOptions(tmpReq: QueryLiveInfoRequest, tmpHeader: QueryLiveInfoHeaders, runtime: Util.RuntimeOptions): QueryLiveInfoResponse {
  Util.validateModel(tmpReq);
  var request = new QueryLiveInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryLiveInfoShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.liveId)) {
    body['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryLiveInfo',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryLiveInfo`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryLiveInfo(request: QueryLiveInfoRequest): QueryLiveInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryLiveInfoHeaders{};
  return queryLiveInfoWithOptions(request, headers, runtime);
}

model QueryLiveWatchDetailHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model QueryLiveWatchDetailShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryLiveWatchDetailRequest {
  liveId?: string(name='LiveId', example='4d38xxxxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model QueryLiveWatchDetailShrinkRequest {
  liveId?: string(name='LiveId', example='4d38xxxxx'),
  tenantContextShrink?: string(name='TenantContext'),
}

model QueryLiveWatchDetailResponseBody = {
  avgWatchTime?: long(name='avgWatchTime', example='84600'),
  liveUv?: int32(name='liveUv', example='100'),
  msgCount?: int32(name='msgCount', example='10000'),
  playbackUv?: int32(name='playbackUv', example='20'),
  praiseCount?: int32(name='praiseCount', example='30'),
  pv?: int32(name='pv', example='1000'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  totalWatchTime?: long(name='totalWatchTime', example='1222000'),
  uv?: int32(name='uv', example='10'),
}

model QueryLiveWatchDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryLiveWatchDetailResponseBody(name='body'),
}

async function queryLiveWatchDetailWithOptions(tmpReq: QueryLiveWatchDetailRequest, tmpHeader: QueryLiveWatchDetailHeaders, runtime: Util.RuntimeOptions): QueryLiveWatchDetailResponse {
  Util.validateModel(tmpReq);
  var request = new QueryLiveWatchDetailShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryLiveWatchDetailShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.liveId)) {
    body['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryLiveWatchDetail',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryLiveWatchDetail`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryLiveWatchDetail(request: QueryLiveWatchDetailRequest): QueryLiveWatchDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryLiveWatchDetailHeaders{};
  return queryLiveWatchDetailWithOptions(request, headers, runtime);
}

model QueryLiveWatchUserListHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model QueryLiveWatchUserListShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryLiveWatchUserListRequest {
  liveId?: string(name='LiveId', example='4d38xxxxx'),
  pageNumber?: int32(name='PageNumber', example='0'),
  pageSize?: int32(name='PageSize', example='20'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model QueryLiveWatchUserListShrinkRequest {
  liveId?: string(name='LiveId', example='4d38xxxxx'),
  pageNumber?: int32(name='PageNumber', example='0'),
  pageSize?: int32(name='PageSize', example='20'),
  tenantContextShrink?: string(name='TenantContext'),
}

model QueryLiveWatchUserListResponseBody = {
  orgUsesList?: [ 
    {
      deptName?: string(name='DeptName'),
      name?: string(name='Name'),
      userId?: string(name='UserId', example='1234'),
      watchLiveTime?: long(name='WatchLiveTime', example='19999'),
      watchPlaybackTime?: long(name='WatchPlaybackTime', example='131312312'),
      watchProgressMs?: long(name='WatchProgressMs', example='1323132'),
    }
  ](name='orgUsesList'),
  outOrgUserList?: [ 
    {
      name?: string(name='Name'),
      watchLiveTime?: long(name='WatchLiveTime', example='12312312'),
      watchPlaybackTime?: long(name='WatchPlaybackTime', example='21313131'),
      watchProgressMs?: long(name='WatchProgressMs', example='123131'),
    }
  ](name='outOrgUserList'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model QueryLiveWatchUserListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryLiveWatchUserListResponseBody(name='body'),
}

async function queryLiveWatchUserListWithOptions(tmpReq: QueryLiveWatchUserListRequest, tmpHeader: QueryLiveWatchUserListHeaders, runtime: Util.RuntimeOptions): QueryLiveWatchUserListResponse {
  Util.validateModel(tmpReq);
  var request = new QueryLiveWatchUserListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryLiveWatchUserListShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.liveId)) {
    body['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryLiveWatchUserList',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryLiveWatchUserList`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryLiveWatchUserList(request: QueryLiveWatchUserListRequest): QueryLiveWatchUserListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryLiveWatchUserListHeaders{};
  return queryLiveWatchUserListWithOptions(request, headers, runtime);
}

model QueryMeetingRoomHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model QueryMeetingRoomShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryMeetingRoomRequest {
  roomId?: string(name='RoomId', example='0ffb7xxxxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model QueryMeetingRoomShrinkRequest {
  roomId?: string(name='RoomId', example='0ffb7xxxxx'),
  tenantContextShrink?: string(name='TenantContext'),
}

model QueryMeetingRoomResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: {
    corpId?: string(name='CorpId', example='ding994axxxxx'),
    isvRoomId?: string(name='IsvRoomId', example='xxxIsvRoomId'),
    roomCapacity?: int32(name='RoomCapacity', example='10'),
    roomGroup?: {
      groupId?: long(name='GroupId', example='1'),
      groupName?: string(name='GroupName', example='测试分组'),
      parentId?: long(name='ParentId', example='0'),
    }(name='RoomGroup'),
    roomId?: string(name='RoomId', example='0ffb7184xxxxx'),
    roomLabels?: [ 
      {
        labelId?: long(name='LabelId', example='1'),
        labelName?: string(name='LabelName', example='电视'),
      }
    ](name='RoomLabels'),
    roomLocation?: {
      desc?: string(name='Desc', example='xx市xx区xx街道xx号'),
      title?: string(name='Title', example='xxx公司'),
    }(name='RoomLocation'),
    roomName?: string(name='RoomName', example='测试会议室'),
    roomPicture?: string(name='RoomPicture', example='https://static.dingtalk.com/media/lADxxxxx.jpg'),
    roomStaffId?: string(name='RoomStaffId', example='0122414'),
    roomStatus?: int32(name='RoomStatus', example='0'),
  }(name='result'),
}

model QueryMeetingRoomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMeetingRoomResponseBody(name='body'),
}

async function queryMeetingRoomWithOptions(tmpReq: QueryMeetingRoomRequest, tmpHeader: QueryMeetingRoomHeaders, runtime: Util.RuntimeOptions): QueryMeetingRoomResponse {
  Util.validateModel(tmpReq);
  var request = new QueryMeetingRoomShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryMeetingRoomShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMeetingRoom',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryMeetingRoom`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMeetingRoom(request: QueryMeetingRoomRequest): QueryMeetingRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryMeetingRoomHeaders{};
  return queryMeetingRoomWithOptions(request, headers, runtime);
}

model QueryMeetingRoomGroupHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model QueryMeetingRoomGroupShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryMeetingRoomGroupRequest {
  groupId?: string(name='GroupId', example='172'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model QueryMeetingRoomGroupShrinkRequest {
  groupId?: string(name='GroupId', example='172'),
  tenantContextShrink?: string(name='TenantContext'),
}

model QueryMeetingRoomGroupResponseBody = {
  groupId?: long(name='groupId', example='172'),
  groupName?: string(name='groupName', example='测试分组'),
  parentId?: long(name='parentId', example='0'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model QueryMeetingRoomGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMeetingRoomGroupResponseBody(name='body'),
}

async function queryMeetingRoomGroupWithOptions(tmpReq: QueryMeetingRoomGroupRequest, tmpHeader: QueryMeetingRoomGroupHeaders, runtime: Util.RuntimeOptions): QueryMeetingRoomGroupResponse {
  Util.validateModel(tmpReq);
  var request = new QueryMeetingRoomGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryMeetingRoomGroupShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMeetingRoomGroup',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryMeetingRoomGroup`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMeetingRoomGroup(request: QueryMeetingRoomGroupRequest): QueryMeetingRoomGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryMeetingRoomGroupHeaders{};
  return queryMeetingRoomGroupWithOptions(request, headers, runtime);
}

model QueryMeetingRoomGroupListHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model QueryMeetingRoomGroupListShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryMeetingRoomGroupListRequest {
  request?: map[string]any(name='Request'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model QueryMeetingRoomGroupListShrinkRequest {
  requestShrink?: string(name='Request'),
  tenantContextShrink?: string(name='TenantContext'),
}

model QueryMeetingRoomGroupListResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ 
    {
      groupId?: long(name='GroupId', example='172'),
      groupName?: string(name='GroupName', example='测试分组'),
      parentId?: long(name='ParentId', example='0'),
    }
  ](name='result'),
}

model QueryMeetingRoomGroupListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMeetingRoomGroupListResponseBody(name='body'),
}

async function queryMeetingRoomGroupListWithOptions(tmpReq: QueryMeetingRoomGroupListRequest, tmpHeader: QueryMeetingRoomGroupListHeaders, runtime: Util.RuntimeOptions): QueryMeetingRoomGroupListResponse {
  Util.validateModel(tmpReq);
  var request = new QueryMeetingRoomGroupListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryMeetingRoomGroupListShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.request)) {
    request.requestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.request, 'Request', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.requestShrink)) {
    body['Request'] = request.requestShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMeetingRoomGroupList',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryMeetingRoomGroupList`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMeetingRoomGroupList(request: QueryMeetingRoomGroupListRequest): QueryMeetingRoomGroupListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryMeetingRoomGroupListHeaders{};
  return queryMeetingRoomGroupListWithOptions(request, headers, runtime);
}

model QueryMeetingRoomListHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model QueryMeetingRoomListShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryMeetingRoomListRequest {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: long(name='NextToken', example='124L'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model QueryMeetingRoomListShrinkRequest {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: long(name='NextToken', example='124L'),
  tenantContextShrink?: string(name='TenantContext'),
}

model QueryMeetingRoomListResponseBody = {
  hasMore?: boolean(name='hasMore', example='true'),
  nextToken?: long(name='nextToken', example='123'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: [ 
    {
      corpId?: string(name='CorpId', example='ding994axxxx'),
      isvRoomId?: string(name='IsvRoomId', example='xxxIsvRoomId'),
      roomCapacity?: int32(name='RoomCapacity', example='10'),
      roomGroup?: {
        groupId?: long(name='GroupId', example='1'),
        groupName?: string(name='GroupName', example='测试分组'),
        parentId?: long(name='ParentId', example='0'),
      }(name='RoomGroup'),
      roomId?: string(name='RoomId', example='0ffb7xxxxx'),
      roomLabels?: [ 
        {
          labelId?: long(name='LabelId', example='1'),
          labelName?: string(name='LabelName', example='电视'),
        }
      ](name='RoomLabels'),
      roomLocation?: {
        desc?: string(name='Desc', example='xx市xx区xx街道xx号'),
        title?: string(name='Title', example='xxx公司'),
      }(name='RoomLocation'),
      roomName?: string(name='RoomName', example='测试会议室'),
      roomPicture?: string(name='RoomPicture', example='https://static.dingtalk.com/media/lADPxxxxx.jpg'),
      roomStaffId?: string(name='RoomStaffId', example='012241xxxxx'),
      roomStatus?: int32(name='RoomStatus', example='0'),
    }
  ](name='result'),
}

model QueryMeetingRoomListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMeetingRoomListResponseBody(name='body'),
}

async function queryMeetingRoomListWithOptions(tmpReq: QueryMeetingRoomListRequest, tmpHeader: QueryMeetingRoomListHeaders, runtime: Util.RuntimeOptions): QueryMeetingRoomListResponse {
  Util.validateModel(tmpReq);
  var request = new QueryMeetingRoomListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryMeetingRoomListShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMeetingRoomList',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryMeetingRoomList`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMeetingRoomList(request: QueryMeetingRoomListRequest): QueryMeetingRoomListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryMeetingRoomListHeaders{};
  return queryMeetingRoomListWithOptions(request, headers, runtime);
}

model QueryOrgTodoTasksHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model QueryOrgTodoTasksShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryOrgTodoTasksRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  isDone?: boolean(name='isDone', example='true'),
  nextToken?: string(name='nextToken', example='0'),
}

model QueryOrgTodoTasksShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  isDone?: boolean(name='isDone', example='true'),
  nextToken?: string(name='nextToken', example='0'),
}

model QueryOrgTodoTasksResponseBody = {
  nextToken?: string(name='nextToken', example='15'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  todoCards?: [ 
    {
      bizTag?: string(name='bizTag', example='isv_dingtalkTodo'),
      createdTime?: long(name='createdTime', example='1617675000000'),
      creatorId?: string(name='creatorId', example='xxxx'),
      detailUrl?: {
        appUrl?: string(name='appUrl', example='https://www.dingtalk.com'),
        pcUrl?: string(name='pcUrl', example='https://www.dingtalk.com'),
      }(name='detailUrl'),
      dueTime?: long(name='dueTime', example='1617675000000'),
      isDone?: boolean(name='isDone', example='true'),
      modifiedTime?: long(name='modifiedTime', example='1617675000000'),
      priority?: int32(name='priority', example='10'),
      sourceId?: string(name='sourceId', example='isv_dingtalkTodo1'),
      subject?: string(name='subject', example='接入钉钉待办'),
      taskId?: string(name='taskId', example='taskOPJpwtwPVNGIFKURjrzd'),
    }
  ](name='todoCards'),
}

model QueryOrgTodoTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryOrgTodoTasksResponseBody(name='body'),
}

async function queryOrgTodoTasksWithOptions(tmpReq: QueryOrgTodoTasksRequest, tmpHeader: QueryOrgTodoTasksHeaders, runtime: Util.RuntimeOptions): QueryOrgTodoTasksResponse {
  Util.validateModel(tmpReq);
  var request = new QueryOrgTodoTasksShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryOrgTodoTasksShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.isDone)) {
    body['isDone'] = request.isDone;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['nextToken'] = request.nextToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryOrgTodoTasks',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/task/queryOrgTodoTasks`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryOrgTodoTasks(request: QueryOrgTodoTasksRequest): QueryOrgTodoTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryOrgTodoTasksHeaders{};
  return queryOrgTodoTasksWithOptions(request, headers, runtime);
}

model QueryScheduleConferenceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model QueryScheduleConferenceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model QueryScheduleConferenceRequest {
  requestUnionId?: string(name='RequestUnionId', example='2a489c68-xxxx-xxxx-xxxx-xxxxxxxxxxxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model QueryScheduleConferenceShrinkRequest {
  requestUnionId?: string(name='RequestUnionId', example='2a489c68-xxxx-xxxx-xxxx-xxxxxxxxxxxx'),
  tenantContextShrink?: string(name='TenantContext'),
}

model QueryScheduleConferenceResponseBody = {
  endTime?: long(name='endTime', example='1687928400000'),
  phones?: [ string ](name='phones', example='[ "+86123xxxx" ]'),
  requestId?: string(name='requestId', example='xxxxx'),
  roomCode?: string(name='roomCode', example='838 722 xxxxx'),
  scheduleConferenceId?: string(name='scheduleConferenceId', example='2a489c68-xxxx-xxxx-xxxx-xxxxxxxxxxxx'),
  startTime?: long(name='startTime', example='1687924800000'),
  title?: string(name='title', example='预约会议标题'),
  url?: string(name='url', example='https://meeting.dingtalk.com/j/Bsbp3ixxxxxUyJJ9'),
}

model QueryScheduleConferenceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryScheduleConferenceResponseBody(name='body'),
}

async function queryScheduleConferenceWithOptions(tmpReq: QueryScheduleConferenceRequest, tmpHeader: QueryScheduleConferenceHeaders, runtime: Util.RuntimeOptions): QueryScheduleConferenceResponse {
  Util.validateModel(tmpReq);
  var request = new QueryScheduleConferenceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new QueryScheduleConferenceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.requestUnionId)) {
    body['RequestUnionId'] = request.requestUnionId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryScheduleConference',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/queryScheduleConference`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryScheduleConference(request: QueryScheduleConferenceRequest): QueryScheduleConferenceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryScheduleConferenceHeaders{};
  return queryScheduleConferenceWithOptions(request, headers, runtime);
}

model ReceiverListReportHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model ReceiverListReportShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model ReceiverListReportRequest {
  offset?: long(name='Offset', example='10'),
  reportId?: string(name='ReportId', example='173xxxx'),
  size?: long(name='Size', example='10'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model ReceiverListReportShrinkRequest {
  offset?: long(name='Offset', example='10'),
  reportId?: string(name='ReportId', example='173xxxx'),
  size?: long(name='Size', example='10'),
  tenantContextShrink?: string(name='TenantContext'),
}

model ReceiverListReportResponseBody = {
  hasMore?: boolean(name='hasMore', example='true'),
  nextCursor?: long(name='nextCursor', example='132131312312'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  useridList?: [ string ](name='useridList'),
}

model ReceiverListReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReceiverListReportResponseBody(name='body'),
}

async function receiverListReportWithOptions(tmpReq: ReceiverListReportRequest, tmpHeader: ReceiverListReportHeaders, runtime: Util.RuntimeOptions): ReceiverListReportResponse {
  Util.validateModel(tmpReq);
  var request = new ReceiverListReportShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new ReceiverListReportShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.offset)) {
    body['Offset'] = request.offset;
  }
  if (!Util.isUnset(request.reportId)) {
    body['ReportId'] = request.reportId;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ReceiverListReport',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/log/receiverListReport`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function receiverListReport(request: ReceiverListReportRequest): ReceiverListReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ReceiverListReportHeaders{};
  return receiverListReportWithOptions(request, headers, runtime);
}

model RemoveAttendeeHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='123456'),
  }(name='AccountContext'),
}

model RemoveAttendeeShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model RemoveAttendeeRequest {
  attendeesToRemove?: [ string ](name='AttendeesToRemove'),
  calendarId?: string(name='CalendarId', example='primary'),
  eventId?: string(name='EventId', example='iiiP35sJadba8aBSgjrwPRKgiEiF'),
}

model RemoveAttendeeShrinkRequest {
  attendeesToRemoveShrink?: string(name='AttendeesToRemove'),
  calendarId?: string(name='CalendarId', example='primary'),
  eventId?: string(name='EventId', example='iiiP35sJadba8aBSgjrwPRKgiEiF'),
}

model RemoveAttendeeResponseBody = {
  content?: {
    data?: any(name='Data', example='[]'),
  }(name='Content'),
  errorCode?: string(name='ErrorCode', example='success'),
  errorCtx?: map[string]any(name='ErrorCtx'),
  errorMsg?: string(name='ErrorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', description='RequestId', example='A348BA5D-FFD4-57E4-9450-23A14D72F331'),
  success?: boolean(name='Success', example='True'),
}

model RemoveAttendeeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveAttendeeResponseBody(name='body'),
}

async function removeAttendeeWithOptions(tmpReq: RemoveAttendeeRequest, tmpHeader: RemoveAttendeeHeaders, runtime: Util.RuntimeOptions): RemoveAttendeeResponse {
  Util.validateModel(tmpReq);
  var request = new RemoveAttendeeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new RemoveAttendeeShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.attendeesToRemove)) {
    request.attendeesToRemoveShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.attendeesToRemove, 'AttendeesToRemove', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.attendeesToRemoveShrink)) {
    body['AttendeesToRemove'] = request.attendeesToRemoveShrink;
  }
  if (!Util.isUnset(request.calendarId)) {
    body['CalendarId'] = request.calendarId;
  }
  if (!Util.isUnset(request.eventId)) {
    body['EventId'] = request.eventId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveAttendee',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/calendar/removeAttendee`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeAttendee(request: RemoveAttendeeRequest): RemoveAttendeeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new RemoveAttendeeHeaders{};
  return removeAttendeeWithOptions(request, headers, runtime);
}

model SaveContentHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model SaveContentShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model SaveContentRequest {
  contents?: [ 
    {
      content?: string(name='Content', example='### 序号1'),
      contentType?: string(name='ContentType', example='markdown'),
      key?: string(name='Key', example='今日完成工作'),
      sort?: long(name='Sort', example='1'),
      type?: long(name='Type', example='1'),
    }
  ](name='Contents', example='[]'),
  ddFrom?: string(name='DdFrom', example='client'),
  templateId?: string(name='TemplateId', example='sdfafdsfsafdfsaf'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model SaveContentShrinkRequest {
  contentsShrink?: string(name='Contents', example='[]'),
  ddFrom?: string(name='DdFrom', example='client'),
  templateId?: string(name='TemplateId', example='sdfafdsfsafdfsaf'),
  tenantContextShrink?: string(name='TenantContext'),
}

model SaveContentResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model SaveContentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveContentResponseBody(name='body'),
}

async function saveContentWithOptions(tmpReq: SaveContentRequest, tmpHeader: SaveContentHeaders, runtime: Util.RuntimeOptions): SaveContentResponse {
  Util.validateModel(tmpReq);
  var request = new SaveContentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new SaveContentShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.contents)) {
    request.contentsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.contents, 'Contents', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.contentsShrink)) {
    body['Contents'] = request.contentsShrink;
  }
  if (!Util.isUnset(request.ddFrom)) {
    body['DdFrom'] = request.ddFrom;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SaveContent',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/log/saveContent`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function saveContent(request: SaveContentRequest): SaveContentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SaveContentHeaders{};
  return saveContentWithOptions(request, headers, runtime);
}

model SetColumnsVisibilityHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model SetColumnsVisibilityShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model SetColumnsVisibilityRequest {
  column?: long(name='Column', example='1'),
  columnCount?: long(name='ColumnCount', example='20'),
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  visibility?: string(name='Visibility', example='hidden'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model SetColumnsVisibilityShrinkRequest {
  column?: long(name='Column', example='1'),
  columnCount?: long(name='ColumnCount', example='20'),
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  visibility?: string(name='Visibility', example='hidden'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model SetColumnsVisibilityResponseBody = {
  id?: string(name='id', example='stxxxx'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model SetColumnsVisibilityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetColumnsVisibilityResponseBody(name='body'),
}

async function setColumnsVisibilityWithOptions(tmpReq: SetColumnsVisibilityRequest, tmpHeader: SetColumnsVisibilityHeaders, runtime: Util.RuntimeOptions): SetColumnsVisibilityResponse {
  Util.validateModel(tmpReq);
  var request = new SetColumnsVisibilityShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new SetColumnsVisibilityShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.column)) {
    body['Column'] = request.column;
  }
  if (!Util.isUnset(request.columnCount)) {
    body['ColumnCount'] = request.columnCount;
  }
  if (!Util.isUnset(request.sheetId)) {
    body['SheetId'] = request.sheetId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.visibility)) {
    body['Visibility'] = request.visibility;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetColumnsVisibility',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/setColumnsVisibility`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setColumnsVisibility(request: SetColumnsVisibilityRequest): SetColumnsVisibilityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SetColumnsVisibilityHeaders{};
  return setColumnsVisibilityWithOptions(request, headers, runtime);
}

model SetRowsVisibilityHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model SetRowsVisibilityShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model SetRowsVisibilityRequest {
  row?: long(name='Row', example='1'),
  rowCount?: long(name='RowCount', example='20'),
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  visibility?: string(name='Visibility', example='hidden'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model SetRowsVisibilityShrinkRequest {
  row?: long(name='Row', example='1'),
  rowCount?: long(name='RowCount', example='20'),
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  visibility?: string(name='Visibility', example='hidden'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model SetRowsVisibilityResponseBody = {
  id?: string(name='id', example='stxxxx'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model SetRowsVisibilityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetRowsVisibilityResponseBody(name='body'),
}

async function setRowsVisibilityWithOptions(tmpReq: SetRowsVisibilityRequest, tmpHeader: SetRowsVisibilityHeaders, runtime: Util.RuntimeOptions): SetRowsVisibilityResponse {
  Util.validateModel(tmpReq);
  var request = new SetRowsVisibilityShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new SetRowsVisibilityShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.row)) {
    body['Row'] = request.row;
  }
  if (!Util.isUnset(request.rowCount)) {
    body['RowCount'] = request.rowCount;
  }
  if (!Util.isUnset(request.sheetId)) {
    body['SheetId'] = request.sheetId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.visibility)) {
    body['Visibility'] = request.visibility;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetRowsVisibility',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/setRowsVisibility`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setRowsVisibility(request: SetRowsVisibilityRequest): SetRowsVisibilityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SetRowsVisibilityHeaders{};
  return setRowsVisibilityWithOptions(request, headers, runtime);
}

model SimpleListReportHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model SimpleListReportShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model SimpleListReportRequest {
  cursor?: long(name='Cursor', example='0'),
  endTime?: long(name='EndTime', example='1507564800000'),
  size?: long(name='Size', example='10'),
  startTime?: long(name='StartTime', example='1507564800000'),
  templateName?: string(name='TemplateName', example='我管理的模版'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model SimpleListReportShrinkRequest {
  cursor?: long(name='Cursor', example='0'),
  endTime?: long(name='EndTime', example='1507564800000'),
  size?: long(name='Size', example='10'),
  startTime?: long(name='StartTime', example='1507564800000'),
  templateName?: string(name='TemplateName', example='我管理的模版'),
  tenantContextShrink?: string(name='TenantContext'),
}

model SimpleListReportResponseBody = {
  dataList?: [ 
    {
      createTime?: long(name='CreateTime', example='1567034772000'),
      creatorId?: string(name='CreatorId', example='1701038'),
      creatorName?: string(name='CreatorName', example='xinmu'),
      deptName?: string(name='DeptName'),
      remark?: string(name='Remark', example='ops'),
      reportId?: string(name='ReportId', example='d64994d09916c76276dd9bfa23637644'),
      templateName?: string(name='TemplateName', example='WG-Template'),
    }
  ](name='dataList'),
  hasMore?: boolean(name='hasMore', example='false'),
  nextCursor?: long(name='nextCursor', example='12312131231'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  size?: long(name='size', example='20'),
}

model SimpleListReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SimpleListReportResponseBody(name='body'),
}

async function simpleListReportWithOptions(tmpReq: SimpleListReportRequest, tmpHeader: SimpleListReportHeaders, runtime: Util.RuntimeOptions): SimpleListReportResponse {
  Util.validateModel(tmpReq);
  var request = new SimpleListReportShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new SimpleListReportShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.cursor)) {
    body['Cursor'] = request.cursor;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.templateName)) {
    body['TemplateName'] = request.templateName;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SimpleListReport',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/log/simpleListReport`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function simpleListReport(request: SimpleListReportRequest): SimpleListReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SimpleListReportHeaders{};
  return simpleListReportWithOptions(request, headers, runtime);
}

model StartCloudRecordHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model StartCloudRecordShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model StartCloudRecordRequest {
  mode?: string(name='Mode', example='speech'),
  smallWindowPosition?: string(name='SmallWindowPosition', example='relative_right'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  conferenceId?: string(name='conferenceId', example='61289fxxx'),
}

model StartCloudRecordShrinkRequest {
  mode?: string(name='Mode', example='speech'),
  smallWindowPosition?: string(name='SmallWindowPosition', example='relative_right'),
  tenantContextShrink?: string(name='TenantContext'),
  conferenceId?: string(name='conferenceId', example='61289fxxx'),
}

model StartCloudRecordResponseBody = {
  code?: string(name='code', example='200'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model StartCloudRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartCloudRecordResponseBody(name='body'),
}

async function startCloudRecordWithOptions(tmpReq: StartCloudRecordRequest, tmpHeader: StartCloudRecordHeaders, runtime: Util.RuntimeOptions): StartCloudRecordResponse {
  Util.validateModel(tmpReq);
  var request = new StartCloudRecordShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new StartCloudRecordShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.mode)) {
    body['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.smallWindowPosition)) {
    body['SmallWindowPosition'] = request.smallWindowPosition;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.conferenceId)) {
    body['conferenceId'] = request.conferenceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartCloudRecord',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/startCloudRecord`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startCloudRecord(request: StartCloudRecordRequest): StartCloudRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new StartCloudRecordHeaders{};
  return startCloudRecordWithOptions(request, headers, runtime);
}

model StatisticsListByTypeReportHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model StatisticsListByTypeReportShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model StatisticsListByTypeReportRequest {
  offset?: long(name='Offset', example='10'),
  reportId?: string(name='ReportId', example='173xxxx'),
  size?: long(name='Size', example='10'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  type?: long(name='Type', example='173xxxx'),
}

model StatisticsListByTypeReportShrinkRequest {
  offset?: long(name='Offset', example='10'),
  reportId?: string(name='ReportId', example='173xxxx'),
  size?: long(name='Size', example='10'),
  tenantContextShrink?: string(name='TenantContext'),
  type?: long(name='Type', example='173xxxx'),
}

model StatisticsListByTypeReportResponseBody = {
  hasMore?: boolean(name='hasMore', example='true'),
  nextCursor?: long(name='nextCursor', example='12312131231'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  useridList?: [ string ](name='useridList'),
}

model StatisticsListByTypeReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StatisticsListByTypeReportResponseBody(name='body'),
}

async function statisticsListByTypeReportWithOptions(tmpReq: StatisticsListByTypeReportRequest, tmpHeader: StatisticsListByTypeReportHeaders, runtime: Util.RuntimeOptions): StatisticsListByTypeReportResponse {
  Util.validateModel(tmpReq);
  var request = new StatisticsListByTypeReportShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new StatisticsListByTypeReportShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.offset)) {
    body['Offset'] = request.offset;
  }
  if (!Util.isUnset(request.reportId)) {
    body['ReportId'] = request.reportId;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StatisticsListByTypeReport',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/log/statisticsListByTypeReport`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function statisticsListByTypeReport(request: StatisticsListByTypeReportRequest): StatisticsListByTypeReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new StatisticsListByTypeReportHeaders{};
  return statisticsListByTypeReportWithOptions(request, headers, runtime);
}

model StatisticsReportHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model StatisticsReportShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model StatisticsReportRequest {
  reportId?: string(name='ReportId', example='173xxxx'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
}

model StatisticsReportShrinkRequest {
  reportId?: string(name='ReportId', example='173xxxx'),
  tenantContextShrink?: string(name='TenantContext'),
}

model StatisticsReportResponseBody = {
  commentNum?: long(name='commentNum', example='1'),
  commentUserNum?: long(name='commentUserNum', example='1'),
  likeNum?: long(name='likeNum', example='2'),
  readNum?: long(name='readNum', example='3'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model StatisticsReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StatisticsReportResponseBody(name='body'),
}

async function statisticsReportWithOptions(tmpReq: StatisticsReportRequest, tmpHeader: StatisticsReportHeaders, runtime: Util.RuntimeOptions): StatisticsReportResponse {
  Util.validateModel(tmpReq);
  var request = new StatisticsReportShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new StatisticsReportShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.reportId)) {
    body['ReportId'] = request.reportId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StatisticsReport',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/log/statisticsReport`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function statisticsReport(request: StatisticsReportRequest): StatisticsReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new StatisticsReportHeaders{};
  return statisticsReportWithOptions(request, headers, runtime);
}

model StopCloudRecordHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model StopCloudRecordShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model StopCloudRecordRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  conferenceId?: string(name='conferenceId', example='61289fxxx'),
}

model StopCloudRecordShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  conferenceId?: string(name='conferenceId', example='61289fxxx'),
}

model StopCloudRecordResponseBody = {
  code?: string(name='code', example='200'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model StopCloudRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopCloudRecordResponseBody(name='body'),
}

async function stopCloudRecordWithOptions(tmpReq: StopCloudRecordRequest, tmpHeader: StopCloudRecordHeaders, runtime: Util.RuntimeOptions): StopCloudRecordResponse {
  Util.validateModel(tmpReq);
  var request = new StopCloudRecordShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new StopCloudRecordShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.conferenceId)) {
    body['conferenceId'] = request.conferenceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StopCloudRecord',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/stopCloudRecord`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopCloudRecord(request: StopCloudRecordRequest): StopCloudRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new StopCloudRecordHeaders{};
  return stopCloudRecordWithOptions(request, headers, runtime);
}

model UpdateLiveHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model UpdateLiveShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateLiveRequest {
  coverUrl?: string(name='CoverUrl', example='http://sss/sss'),
  introduction?: string(name='Introduction', example='这是一个直播'),
  liveId?: string(name='LiveId', example='4d38xxxxx'),
  preEndTime?: long(name='PreEndTime', example='1698596800000'),
  preStartTime?: long(name='PreStartTime', example='1691596800000'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  title?: string(name='Title', example='标题'),
}

model UpdateLiveShrinkRequest {
  coverUrl?: string(name='CoverUrl', example='http://sss/sss'),
  introduction?: string(name='Introduction', example='这是一个直播'),
  liveId?: string(name='LiveId', example='4d38xxxxx'),
  preEndTime?: long(name='PreEndTime', example='1698596800000'),
  preStartTime?: long(name='PreStartTime', example='1691596800000'),
  tenantContextShrink?: string(name='TenantContext'),
  title?: string(name='Title', example='标题'),
}

model UpdateLiveResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model UpdateLiveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateLiveResponseBody(name='body'),
}

async function updateLiveWithOptions(tmpReq: UpdateLiveRequest, tmpHeader: UpdateLiveHeaders, runtime: Util.RuntimeOptions): UpdateLiveResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateLiveShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateLiveShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.coverUrl)) {
    body['CoverUrl'] = request.coverUrl;
  }
  if (!Util.isUnset(request.introduction)) {
    body['Introduction'] = request.introduction;
  }
  if (!Util.isUnset(request.liveId)) {
    body['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.preEndTime)) {
    body['PreEndTime'] = request.preEndTime;
  }
  if (!Util.isUnset(request.preStartTime)) {
    body['PreStartTime'] = request.preStartTime;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateLive',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/updateLive`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateLive(request: UpdateLiveRequest): UpdateLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateLiveHeaders{};
  return updateLiveWithOptions(request, headers, runtime);
}

model UpdateMeetingRoomHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model UpdateMeetingRoomShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateMeetingRoomRequest {
  groupId?: long(name='GroupId', example='0'),
  isvRoomId?: string(name='IsvRoomId', example='xxxIsvRoomId'),
  roomCapacity?: int32(name='RoomCapacity', example='100'),
  roomId?: string(name='RoomId', example='0ffbxxxxx'),
  roomLabelIds?: [ long ](name='RoomLabelIds'),
  roomLocation?: {
    desc?: string(name='Desc'),
    title?: string(name='Title'),
  }(name='RoomLocation'),
  roomName?: string(name='RoomName'),
  roomPicture?: string(name='RoomPicture', example='https://static.dingtalk.com/media/lADPxxxxx.jpg'),
  roomStatus?: int32(name='RoomStatus', example='1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model UpdateMeetingRoomShrinkRequest {
  groupId?: long(name='GroupId', example='0'),
  isvRoomId?: string(name='IsvRoomId', example='xxxIsvRoomId'),
  roomCapacity?: int32(name='RoomCapacity', example='100'),
  roomId?: string(name='RoomId', example='0ffbxxxxx'),
  roomLabelIdsShrink?: string(name='RoomLabelIds'),
  roomLocationShrink?: string(name='RoomLocation'),
  roomName?: string(name='RoomName'),
  roomPicture?: string(name='RoomPicture', example='https://static.dingtalk.com/media/lADPxxxxx.jpg'),
  roomStatus?: int32(name='RoomStatus', example='1'),
  tenantContextShrink?: string(name='TenantContext'),
}

model UpdateMeetingRoomResponseBody = {
  result?: boolean(name='Result', example='true'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model UpdateMeetingRoomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMeetingRoomResponseBody(name='body'),
}

async function updateMeetingRoomWithOptions(tmpReq: UpdateMeetingRoomRequest, tmpHeader: UpdateMeetingRoomHeaders, runtime: Util.RuntimeOptions): UpdateMeetingRoomResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateMeetingRoomShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateMeetingRoomShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.roomLabelIds)) {
    request.roomLabelIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roomLabelIds, 'RoomLabelIds', 'json');
  }
  if (!Util.isUnset(tmpReq.roomLocation)) {
    request.roomLocationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roomLocation, 'RoomLocation', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.isvRoomId)) {
    body['IsvRoomId'] = request.isvRoomId;
  }
  if (!Util.isUnset(request.roomCapacity)) {
    body['RoomCapacity'] = request.roomCapacity;
  }
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  if (!Util.isUnset(request.roomLabelIdsShrink)) {
    body['RoomLabelIds'] = request.roomLabelIdsShrink;
  }
  if (!Util.isUnset(request.roomLocationShrink)) {
    body['RoomLocation'] = request.roomLocationShrink;
  }
  if (!Util.isUnset(request.roomName)) {
    body['RoomName'] = request.roomName;
  }
  if (!Util.isUnset(request.roomPicture)) {
    body['RoomPicture'] = request.roomPicture;
  }
  if (!Util.isUnset(request.roomStatus)) {
    body['RoomStatus'] = request.roomStatus;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMeetingRoom',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/updateMeetingRoom`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMeetingRoom(request: UpdateMeetingRoomRequest): UpdateMeetingRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateMeetingRoomHeaders{};
  return updateMeetingRoomWithOptions(request, headers, runtime);
}

model UpdateMeetingRoomGroupHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model UpdateMeetingRoomGroupShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateMeetingRoomGroupRequest {
  groupId?: string(name='GroupId', example='172'),
  groupName?: string(name='GroupName', example='测试分组'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
}

model UpdateMeetingRoomGroupShrinkRequest {
  groupId?: string(name='GroupId', example='172'),
  groupName?: string(name='GroupName', example='测试分组'),
  tenantContextShrink?: string(name='TenantContext'),
}

model UpdateMeetingRoomGroupResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model UpdateMeetingRoomGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMeetingRoomGroupResponseBody(name='body'),
}

async function updateMeetingRoomGroupWithOptions(tmpReq: UpdateMeetingRoomGroupRequest, tmpHeader: UpdateMeetingRoomGroupHeaders, runtime: Util.RuntimeOptions): UpdateMeetingRoomGroupResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateMeetingRoomGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateMeetingRoomGroupShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupName)) {
    body['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMeetingRoomGroup',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/updateMeetingRoomGroup`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMeetingRoomGroup(request: UpdateMeetingRoomGroupRequest): UpdateMeetingRoomGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateMeetingRoomGroupHeaders{};
  return updateMeetingRoomGroupWithOptions(request, headers, runtime);
}

model UpdateRangeHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model UpdateRangeShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateRangeRequest {
  backgroundColors?: [[ string ]  ](name='BackgroundColors', example='[["#ff0000","#ff0000","#ff0000"]]'),
  hyperlinks?: [[ 
    {
      type?: string(name='Type', example='path'),
      link?: string(name='Link', example='https://www.dingtalk.com'),
      text?: string(name='Text', example='test'),
    }
  ]  ](name='Hyperlinks', example='[["type": "path","link": "https://www.dingtalk.com","text": "test"]]'),
  numberFormat?: string(name='NumberFormat', example='General'),
  rangeAddress?: string(name='RangeAddress', example='A3:C3'),
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  values?: [[ string ]  ](name='Values', example='[["1","2","3"]]'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model UpdateRangeShrinkRequest {
  backgroundColorsShrink?: string(name='BackgroundColors', example='[["#ff0000","#ff0000","#ff0000"]]'),
  hyperlinksShrink?: string(name='Hyperlinks', example='[["type": "path","link": "https://www.dingtalk.com","text": "test"]]'),
  numberFormat?: string(name='NumberFormat', example='General'),
  rangeAddress?: string(name='RangeAddress', example='A3:C3'),
  sheetId?: string(name='SheetId', example='Sheet1'),
  tenantContextShrink?: string(name='TenantContext'),
  valuesShrink?: string(name='Values', example='[["1","2","3"]]'),
  workbookId?: string(name='WorkbookId', example='stxxxx'),
}

model UpdateRangeResponseBody = {
  a1Notation?: string(name='a1Notation', example='A1:B2'),
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model UpdateRangeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateRangeResponseBody(name='body'),
}

async function updateRangeWithOptions(tmpReq: UpdateRangeRequest, tmpHeader: UpdateRangeHeaders, runtime: Util.RuntimeOptions): UpdateRangeResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateRangeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateRangeShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.backgroundColors)) {
    request.backgroundColorsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.backgroundColors, 'BackgroundColors', 'json');
  }
  if (!Util.isUnset(tmpReq.hyperlinks)) {
    request.hyperlinksShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hyperlinks, 'Hyperlinks', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.values)) {
    request.valuesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.values, 'Values', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.backgroundColorsShrink)) {
    body['BackgroundColors'] = request.backgroundColorsShrink;
  }
  if (!Util.isUnset(request.hyperlinksShrink)) {
    body['Hyperlinks'] = request.hyperlinksShrink;
  }
  if (!Util.isUnset(request.numberFormat)) {
    body['NumberFormat'] = request.numberFormat;
  }
  if (!Util.isUnset(request.rangeAddress)) {
    body['RangeAddress'] = request.rangeAddress;
  }
  if (!Util.isUnset(request.sheetId)) {
    body['SheetId'] = request.sheetId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.valuesShrink)) {
    body['Values'] = request.valuesShrink;
  }
  if (!Util.isUnset(request.workbookId)) {
    body['WorkbookId'] = request.workbookId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRange',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/updateRange`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRange(request: UpdateRangeRequest): UpdateRangeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateRangeHeaders{};
  return updateRangeWithOptions(request, headers, runtime);
}

model UpdateScheduleConferenceHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model UpdateScheduleConferenceShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateScheduleConferenceRequest {
  endTime?: long(name='EndTime', example='1687928400000L'),
  scheduleConferenceId?: string(name='ScheduleConferenceId', example='2a489xxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'),
  startTime?: long(name='StartTime', example='1687924800000L'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='xxxxxx'),
  }(name='TenantContext'),
  title?: string(name='Title', example='预约会议标题'),
}

model UpdateScheduleConferenceShrinkRequest {
  endTime?: long(name='EndTime', example='1687928400000L'),
  scheduleConferenceId?: string(name='ScheduleConferenceId', example='2a489xxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'),
  startTime?: long(name='StartTime', example='1687924800000L'),
  tenantContextShrink?: string(name='TenantContext'),
  title?: string(name='Title', example='预约会议标题'),
}

model UpdateScheduleConferenceResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  success?: boolean(name='success', example='true'),
}

model UpdateScheduleConferenceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateScheduleConferenceResponseBody(name='body'),
}

async function updateScheduleConferenceWithOptions(tmpReq: UpdateScheduleConferenceRequest, tmpHeader: UpdateScheduleConferenceHeaders, runtime: Util.RuntimeOptions): UpdateScheduleConferenceResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateScheduleConferenceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateScheduleConferenceShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.scheduleConferenceId)) {
    body['ScheduleConferenceId'] = request.scheduleConferenceId;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateScheduleConference',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/ysp/updateScheduleConference`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateScheduleConference(request: UpdateScheduleConferenceRequest): UpdateScheduleConferenceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateScheduleConferenceHeaders{};
  return updateScheduleConferenceWithOptions(request, headers, runtime);
}

model UpdateTodoTaskHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model UpdateTodoTaskShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateTodoTaskRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  description?: string(name='description', example='应用可以调用该接口发起一个钉钉待办任务，该待办事项会出现在钉钉客户端“待办”页面，需要注意的是，通过开放接口发起的待办，目前仅支持直接跳转ISV应用详情页（ISV在调该接口时需传入自身应用详情页链接）。'),
  done?: boolean(name='done', example='true'),
  dueTime?: long(name='dueTime', example='1617675000000'),
  executorIds?: [ string ](name='executorIds', example='[]'),
  participantIds?: [ string ](name='participantIds', example='[]'),
  subject?: string(name='subject', example='更新钉钉待办'),
  taskId?: string(name='taskId', example='taskId'),
}

model UpdateTodoTaskShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  description?: string(name='description', example='应用可以调用该接口发起一个钉钉待办任务，该待办事项会出现在钉钉客户端“待办”页面，需要注意的是，通过开放接口发起的待办，目前仅支持直接跳转ISV应用详情页（ISV在调该接口时需传入自身应用详情页链接）。'),
  done?: boolean(name='done', example='true'),
  dueTime?: long(name='dueTime', example='1617675000000'),
  executorIdsShrink?: string(name='executorIds', example='[]'),
  participantIdsShrink?: string(name='participantIds', example='[]'),
  subject?: string(name='subject', example='更新钉钉待办'),
  taskId?: string(name='taskId', example='taskId'),
}

model UpdateTodoTaskResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model UpdateTodoTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTodoTaskResponseBody(name='body'),
}

async function updateTodoTaskWithOptions(tmpReq: UpdateTodoTaskRequest, tmpHeader: UpdateTodoTaskHeaders, runtime: Util.RuntimeOptions): UpdateTodoTaskResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateTodoTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateTodoTaskShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.executorIds)) {
    request.executorIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.executorIds, 'executorIds', 'json');
  }
  if (!Util.isUnset(tmpReq.participantIds)) {
    request.participantIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.participantIds, 'participantIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.done)) {
    body['done'] = request.done;
  }
  if (!Util.isUnset(request.dueTime)) {
    body['dueTime'] = request.dueTime;
  }
  if (!Util.isUnset(request.executorIdsShrink)) {
    body['executorIds'] = request.executorIdsShrink;
  }
  if (!Util.isUnset(request.participantIdsShrink)) {
    body['participantIds'] = request.participantIdsShrink;
  }
  if (!Util.isUnset(request.subject)) {
    body['subject'] = request.subject;
  }
  if (!Util.isUnset(request.taskId)) {
    body['taskId'] = request.taskId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTodoTask',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/task/updateTodoTask`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTodoTask(request: UpdateTodoTaskRequest): UpdateTodoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateTodoTaskHeaders{};
  return updateTodoTaskWithOptions(request, headers, runtime);
}

model UpdateTodoTaskExecutorStatusHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model UpdateTodoTaskExecutorStatusShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateTodoTaskExecutorStatusRequest {
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  executorStatusList?: [ 
    {
      id?: string(name='id', example='userId'),
      isDone?: boolean(name='isDone', example='true'),
    }
  ](name='executorStatusList'),
  operatorId?: string(name='operatorId', example='xxxx'),
  taskId?: string(name='taskId', example='15002141'),
}

model UpdateTodoTaskExecutorStatusShrinkRequest {
  tenantContextShrink?: string(name='TenantContext'),
  executorStatusListShrink?: string(name='executorStatusList'),
  operatorId?: string(name='operatorId', example='xxxx'),
  taskId?: string(name='taskId', example='15002141'),
}

model UpdateTodoTaskExecutorStatusResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
  result?: boolean(name='result', example='true'),
}

model UpdateTodoTaskExecutorStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTodoTaskExecutorStatusResponseBody(name='body'),
}

async function updateTodoTaskExecutorStatusWithOptions(tmpReq: UpdateTodoTaskExecutorStatusRequest, tmpHeader: UpdateTodoTaskExecutorStatusHeaders, runtime: Util.RuntimeOptions): UpdateTodoTaskExecutorStatusResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateTodoTaskExecutorStatusShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateTodoTaskExecutorStatusShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  if (!Util.isUnset(tmpReq.executorStatusList)) {
    request.executorStatusListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.executorStatusList, 'executorStatusList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.executorStatusListShrink)) {
    body['executorStatusList'] = request.executorStatusListShrink;
  }
  if (!Util.isUnset(request.operatorId)) {
    body['operatorId'] = request.operatorId;
  }
  if (!Util.isUnset(request.taskId)) {
    body['taskId'] = request.taskId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTodoTaskExecutorStatus',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/task/updateTodoTaskExecutorStatus`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTodoTaskExecutorStatus(request: UpdateTodoTaskExecutorStatusRequest): UpdateTodoTaskExecutorStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateTodoTaskExecutorStatusHeaders{};
  return updateTodoTaskExecutorStatusWithOptions(request, headers, runtime);
}

model UpdateWorkspaceDocMembersHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model UpdateWorkspaceDocMembersShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateWorkspaceDocMembersRequest {
  members?: [ 
    {
      memberId?: string(name='MemberId', example='012345'),
      memberType?: string(name='MemberType', example='USER'),
      roleType?: string(name='RoleType', example='ONLY_VIEWER'),
    }
  ](name='Members'),
  nodeId?: string(name='NodeId', example='node_feb8fea0'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='xb8bkxxxxxrXJNaL'),
}

model UpdateWorkspaceDocMembersShrinkRequest {
  membersShrink?: string(name='Members'),
  nodeId?: string(name='NodeId', example='node_feb8fea0'),
  tenantContextShrink?: string(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='xb8bkxxxxxrXJNaL'),
}

model UpdateWorkspaceDocMembersResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model UpdateWorkspaceDocMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateWorkspaceDocMembersResponseBody(name='body'),
}

async function updateWorkspaceDocMembersWithOptions(tmpReq: UpdateWorkspaceDocMembersRequest, tmpHeader: UpdateWorkspaceDocMembersHeaders, runtime: Util.RuntimeOptions): UpdateWorkspaceDocMembersResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateWorkspaceDocMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateWorkspaceDocMembersShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.members)) {
    request.membersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.members, 'Members', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.membersShrink)) {
    body['Members'] = request.membersShrink;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWorkspaceDocMembers',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/updateWorkspaceDocMembers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateWorkspaceDocMembers(request: UpdateWorkspaceDocMembersRequest): UpdateWorkspaceDocMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateWorkspaceDocMembersHeaders{};
  return updateWorkspaceDocMembersWithOptions(request, headers, runtime);
}

model UpdateWorkspaceMembersHeaders {
  commonHeaders?: map[string]string,
  accountContext?: {
    accountId?: string(name='accountId', example='012345'),
  }(name='AccountContext'),
}

model UpdateWorkspaceMembersShrinkHeaders {
  commonHeaders?: map[string]string,
  accountContextShrink?: string(name='AccountContext'),
}

model UpdateWorkspaceMembersRequest {
  members?: [ 
    {
      memberId?: string(name='MemberId', example='012345'),
      memberType?: string(name='MemberType', example='USER'),
      roleType?: string(name='RoleType', example='ONLY_VIEWER'),
    }
  ](name='Members'),
  tenantContext?: {
    tenantId?: string(name='tenantId', example='1'),
  }(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='123'),
}

model UpdateWorkspaceMembersShrinkRequest {
  membersShrink?: string(name='Members'),
  tenantContextShrink?: string(name='TenantContext'),
  workspaceId?: string(name='WorkspaceId', example='123'),
}

model UpdateWorkspaceMembersResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX'),
}

model UpdateWorkspaceMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateWorkspaceMembersResponseBody(name='body'),
}

async function updateWorkspaceMembersWithOptions(tmpReq: UpdateWorkspaceMembersRequest, tmpHeader: UpdateWorkspaceMembersHeaders, runtime: Util.RuntimeOptions): UpdateWorkspaceMembersResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateWorkspaceMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  var headers = new UpdateWorkspaceMembersShrinkHeaders{};
  OpenApiUtil.convert(tmpHeader, headers);
  if (!Util.isUnset(tmpHeader.accountContext)) {
    headers.accountContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpHeader.accountContext, 'AccountContext', 'json');
  }
  if (!Util.isUnset(tmpReq.members)) {
    request.membersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.members, 'Members', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantContext)) {
    request.tenantContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantContext, 'TenantContext', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.membersShrink)) {
    body['Members'] = request.membersShrink;
  }
  if (!Util.isUnset(request.tenantContextShrink)) {
    body['TenantContext'] = request.tenantContextShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.accountContextShrink)) {
    realHeaders['AccountContext'] = Util.toJSONString(headers.accountContextShrink);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWorkspaceMembers',
    version = '2023-04-26',
    protocol = 'HTTPS',
    pathname = `/dingtalk/v1/documents/updateWorkspaceMembers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateWorkspaceMembers(request: UpdateWorkspaceMembersRequest): UpdateWorkspaceMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateWorkspaceMembersHeaders{};
  return updateWorkspaceMembersWithOptions(request, headers, runtime);
}

