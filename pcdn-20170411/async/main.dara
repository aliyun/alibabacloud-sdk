/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Pcdn';
  @version = '2017-04-11';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddConsumerRequest {
  bandwidthRequirement?: string(name='BandwidthRequirement', position='Query'),
  businessType: string(name='BusinessType', position='Query'),
  ca?: string(name='Ca', position='Query'),
  company: string(name='Company', position='Query'),
  email?: string(name='Email', position='Query'),
  mobile: string(name='Mobile', position='Query'),
  operator?: string(name='Operator', position='Query'),
  requirement: string(name='Requirement', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  site: string(name='Site', position='Query'),
  version: string(name='Version', position='Query'),
}

model AddConsumerResponseBody = {
  code?: int32(name='Code'),
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
}

model AddConsumerResponse = {
  headers: map[string]string(name='headers'),
  body: AddConsumerResponseBody(name='body'),
}

async function addConsumer(request: AddConsumerRequest): AddConsumerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddConsumer', 'GET', '/', 'json', false, 'json', request);
}

model AddDomainRequest {
  businessType: string(name='BusinessType', position='Query'),
  demoUrls?: string(name='DemoUrls', position='Query'),
  domain: string(name='Domain', position='Query'),
  liveFormat?: string(name='LiveFormat', position='Query'),
  region?: string(name='Region', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sliceDomain?: string(name='SliceDomain', position='Query'),
  version: string(name='Version', position='Query'),
}

model AddDomainResponseBody = {
  code?: int32(name='Code'),
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
}

model AddDomainResponse = {
  headers: map[string]string(name='headers'),
  body: AddDomainResponseBody(name='body'),
}

async function addDomain(request: AddDomainRequest): AddDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDomain', 'GET', '/', 'json', false, 'json', request);
}

model AddPcdnControlRuleRequest {
  appVersion: string(name='AppVersion', position='Query'),
  businessType: string(name='BusinessType', position='Query'),
  ispName: string(name='IspName', position='Query'),
  market: string(name='Market', position='Query'),
  name: string(name='Name', position='Query'),
  platformType: string(name='PlatformType', position='Query'),
  region: string(name='Region', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  version: string(name='Version', position='Query'),
}

model AddPcdnControlRuleResponseBody = {
  code?: int32(name='Code'),
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
}

model AddPcdnControlRuleResponse = {
  headers: map[string]string(name='headers'),
  body: AddPcdnControlRuleResponseBody(name='body'),
}

async function addPcdnControlRule(request: AddPcdnControlRuleRequest): AddPcdnControlRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddPcdnControlRule', 'GET', '/', 'json', false, 'json', request);
}

model DeleteDomainRequest {
  domain: string(name='Domain', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  version: string(name='Version', position='Query'),
}

model DeleteDomainResponseBody = {
  code?: int32(name='Code'),
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
}

model DeleteDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDomainResponseBody(name='body'),
}

async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDomain', 'GET', '/', 'json', false, 'json', request);
}

model DeletePcdnControlRuleRequest {
  resourceId: string(name='ResourceId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  version: string(name='Version', position='Query'),
}

model DeletePcdnControlRuleResponseBody = {
  code?: int32(name='Code'),
  requestId?: string(name='RequestId'),
}

model DeletePcdnControlRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePcdnControlRuleResponseBody(name='body'),
}

async function deletePcdnControlRule(request: DeletePcdnControlRuleRequest): DeletePcdnControlRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePcdnControlRule', 'GET', '/', 'json', false, 'json', request);
}

model DisablePcdnControlRuleRequest {
  resourceId: string(name='ResourceId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  version: string(name='Version', position='Query'),
}

model DisablePcdnControlRuleResponseBody = {
  code?: int32(name='Code'),
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
}

model DisablePcdnControlRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DisablePcdnControlRuleResponseBody(name='body'),
}

async function disablePcdnControlRule(request: DisablePcdnControlRuleRequest): DisablePcdnControlRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisablePcdnControlRule', 'GET', '/', 'json', false, 'json', request);
}

model EditPcdnControlRuleRequest {
  appVersion: string(name='AppVersion', position='Query'),
  businessType: string(name='BusinessType', position='Query'),
  ispName: string(name='IspName', position='Query'),
  market: string(name='Market', position='Query'),
  name: string(name='Name', position='Query'),
  platformType: string(name='PlatformType', position='Query'),
  region: string(name='Region', position='Query'),
  resourceId: string(name='ResourceId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  version: string(name='Version', position='Query'),
}

model EditPcdnControlRuleResponseBody = {
  code?: int32(name='Code'),
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
}

model EditPcdnControlRuleResponse = {
  headers: map[string]string(name='headers'),
  body: EditPcdnControlRuleResponseBody(name='body'),
}

async function editPcdnControlRule(request: EditPcdnControlRuleRequest): EditPcdnControlRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EditPcdnControlRule', 'GET', '/', 'json', false, 'json', request);
}

model EnablePcdnControlRuleRequest {
  resourceId: string(name='ResourceId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  version: string(name='Version', position='Query'),
}

model EnablePcdnControlRuleResponseBody = {
  code?: int32(name='Code'),
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
}

model EnablePcdnControlRuleResponse = {
  headers: map[string]string(name='headers'),
  body: EnablePcdnControlRuleResponseBody(name='body'),
}

async function enablePcdnControlRule(request: EnablePcdnControlRuleRequest): EnablePcdnControlRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnablePcdnControlRule', 'GET', '/', 'json', false, 'json', request);
}

model GetAccessDataRequest {
  businessType: string(name='BusinessType', position='Query'),
  domain?: string(name='Domain', position='Query'),
  endDate: string(name='EndDate', position='Query'),
  ispName: string(name='IspName', position='Query'),
  platformType: string(name='PlatformType', position='Query'),
  region: string(name='Region', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startDate: string(name='StartDate', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetAccessDataResponseBody = {
  code?: int32(name='Code'),
  dataList?: {
    usageData?: [ 
    {
      date?: string(name='Date'),
      values?: {
        values?: [ string ](name='Values')
      }(name='Values'),
    }
  ](name='UsageData')
  }(name='DataList'),
  labels?: {
    label?: [ string ](name='Label')
  }(name='Labels'),
  requestId?: string(name='RequestId'),
}

model GetAccessDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetAccessDataResponseBody(name='body'),
}

async function getAccessData(request: GetAccessDataRequest): GetAccessDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccessData', 'GET', '/', 'json', false, 'json', request);
}

model GetAllAppVersionsRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetAllAppVersionsResponseBody = {
  code?: int32(name='Code'),
  dataList?: {
    usageData?: [ 
    {
      code?: int32(name='Code'),
      value?: string(name='Value'),
    }
  ](name='UsageData')
  }(name='DataList'),
  requestId?: string(name='RequestId'),
}

model GetAllAppVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: GetAllAppVersionsResponseBody(name='body'),
}

async function getAllAppVersions(request: GetAllAppVersionsRequest): GetAllAppVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAllAppVersions', 'GET', '/', 'json', false, 'json', request);
}

model GetAllIspRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetAllIspResponseBody = {
  code?: int32(name='Code'),
  dataList?: {
    usageData?: [ 
    {
      nameCn?: string(name='NameCn'),
      nameEn?: string(name='NameEn'),
      resourceId?: string(name='ResourceId'),
    }
  ](name='UsageData')
  }(name='DataList'),
  requestId?: string(name='RequestId'),
}

model GetAllIspResponse = {
  headers: map[string]string(name='headers'),
  body: GetAllIspResponseBody(name='body'),
}

async function getAllIsp(request: GetAllIspRequest): GetAllIspResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAllIsp', 'GET', '/', 'json', false, 'json', request);
}

model GetAllMarketsRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetAllMarketsResponseBody = {
  code?: int32(name='Code'),
  dataList?: {
    usageData?: [ 
    {
      code?: int32(name='Code'),
      marketCode?: string(name='MarketCode'),
      marketName?: string(name='MarketName'),
    }
  ](name='UsageData')
  }(name='DataList'),
  requestId?: string(name='RequestId'),
}

model GetAllMarketsResponse = {
  headers: map[string]string(name='headers'),
  body: GetAllMarketsResponseBody(name='body'),
}

async function getAllMarkets(request: GetAllMarketsRequest): GetAllMarketsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAllMarkets', 'GET', '/', 'json', false, 'json', request);
}

model GetAllPlatformTypesRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetAllPlatformTypesResponseBody = {
  code?: int32(name='Code'),
  dataList?: {
    usageData?: [ 
    {
      code?: int32(name='Code'),
      name?: string(name='Name'),
    }
  ](name='UsageData')
  }(name='DataList'),
  requestId?: string(name='RequestId'),
}

model GetAllPlatformTypesResponse = {
  headers: map[string]string(name='headers'),
  body: GetAllPlatformTypesResponseBody(name='body'),
}

async function getAllPlatformTypes(request: GetAllPlatformTypesRequest): GetAllPlatformTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAllPlatformTypes', 'GET', '/', 'json', false, 'json', request);
}

model GetAllRegionsRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetAllRegionsResponseBody = {
  code?: int32(name='Code'),
  dataList?: {
    usageData?: [ 
    {
      code?: string(name='Code'),
      name?: string(name='Name'),
    }
  ](name='UsageData')
  }(name='DataList'),
  requestId?: string(name='RequestId'),
}

model GetAllRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: GetAllRegionsResponseBody(name='body'),
}

async function getAllRegions(request: GetAllRegionsRequest): GetAllRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAllRegions', 'GET', '/', 'json', false, 'json', request);
}

model GetBalanceBandwidthDataRequest {
  dataInterval?: int32(name='DataInterval', position='Query'),
  resourceId: string(name='ResourceId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetBalanceBandwidthDataResponseBody = {
  code?: int32(name='Code'),
  dataList?: {
    usageData?: [ 
    {
      date?: string(name='Date'),
      values?: {
        values?: [ string ](name='Values')
      }(name='Values'),
    }
  ](name='UsageData')
  }(name='DataList'),
  labels?: {
    label?: [ string ](name='Label')
  }(name='Labels'),
  requestId?: string(name='RequestId'),
}

model GetBalanceBandwidthDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetBalanceBandwidthDataResponseBody(name='body'),
}

async function getBalanceBandwidthData(request: GetBalanceBandwidthDataRequest): GetBalanceBandwidthDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBalanceBandwidthData', 'GET', '/', 'json', false, 'json', request);
}

model GetBalanceTrafficDataRequest {
  dataInterval?: int32(name='DataInterval', position='Query'),
  resourceId: string(name='ResourceId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetBalanceTrafficDataResponseBody = {
  code?: int32(name='Code'),
  dataList?: {
    usageData?: [ 
    {
      date?: string(name='Date'),
      values?: {
        values?: [ string ](name='Values')
      }(name='Values'),
    }
  ](name='UsageData')
  }(name='DataList'),
  labels?: {
    label?: [ string ](name='Label')
  }(name='Labels'),
  requestId?: string(name='RequestId'),
}

model GetBalanceTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetBalanceTrafficDataResponseBody(name='body'),
}

async function getBalanceTrafficData(request: GetBalanceTrafficDataRequest): GetBalanceTrafficDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBalanceTrafficData', 'GET', '/', 'json', false, 'json', request);
}

model GetBandwidthDataRequest {
  businessType: string(name='BusinessType', position='Query'),
  domain?: string(name='Domain', position='Query'),
  endDate: string(name='EndDate', position='Query'),
  ispName: string(name='IspName', position='Query'),
  platformType: string(name='PlatformType', position='Query'),
  region: string(name='Region', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startDate: string(name='StartDate', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetBandwidthDataResponseBody = {
  code?: int32(name='Code'),
  dataList?: {
    usageData?: [ 
    {
      date?: string(name='Date'),
      values?: {
        values?: [ string ](name='Values')
      }(name='Values'),
    }
  ](name='UsageData')
  }(name='DataList'),
  labels?: {
    label?: [ string ](name='Label')
  }(name='Labels'),
  requestId?: string(name='RequestId'),
}

model GetBandwidthDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetBandwidthDataResponseBody(name='body'),
}

async function getBandwidthData(request: GetBandwidthDataRequest): GetBandwidthDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBandwidthData', 'GET', '/', 'json', false, 'json', request);
}

model GetClientsRatioRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetClientsRatioResponseBody = {
  code?: int32(name='Code'),
  dataList?: {
    usageData?: [ 
    {
      name?: string(name='Name'),
      rate?: string(name='Rate'),
      value?: string(name='Value'),
    }
  ](name='UsageData')
  }(name='DataList'),
  requestId?: string(name='RequestId'),
}

model GetClientsRatioResponse = {
  headers: map[string]string(name='headers'),
  body: GetClientsRatioResponseBody(name='body'),
}

async function getClientsRatio(request: GetClientsRatioRequest): GetClientsRatioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetClientsRatio', 'GET', '/', 'json', false, 'json', request);
}

model GetConsumerStatusRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetConsumerStatusResponseBody = {
  audit?: int32(name='Audit'),
  businessType?: string(name='BusinessType'),
  cdnUrlRedirectFlag?: boolean(name='CdnUrlRedirectFlag'),
  code?: int32(name='Code'),
  comment?: string(name='Comment'),
  createdAt?: string(name='CreatedAt'),
  inservice?: boolean(name='Inservice'),
  integreatedMode?: int32(name='IntegreatedMode'),
  liveMonitor?: boolean(name='LiveMonitor'),
  realtimeMonitor?: boolean(name='RealtimeMonitor'),
  requestId?: string(name='RequestId'),
  updatedAt?: string(name='UpdatedAt'),
}

model GetConsumerStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetConsumerStatusResponseBody(name='body'),
}

async function getConsumerStatus(request: GetConsumerStatusRequest): GetConsumerStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConsumerStatus', 'GET', '/', 'json', false, 'json', request);
}

model GetControlRulesRequest {
  page: string(name='Page', position='Query'),
  pageSize: string(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetControlRulesResponseBody = {
  code?: int32(name='Code'),
  pager?: {
    page?: int32(name='Page'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Pager'),
  requestId?: string(name='RequestId'),
  settingList?: {
    setting?: [ 
    {
      appVersion?: string(name='AppVersion'),
      businessType?: string(name='BusinessType'),
      clientId?: string(name='ClientId'),
      createdAt?: string(name='CreatedAt'),
      ispName?: string(name='IspName'),
      marketType?: string(name='MarketType'),
      name?: string(name='Name'),
      onoff?: boolean(name='Onoff'),
      platformType?: string(name='PlatformType'),
      region?: string(name='Region'),
      resourceId?: string(name='ResourceId'),
      updatedAt?: string(name='UpdatedAt'),
      usable?: boolean(name='Usable'),
    }
  ](name='Setting')
  }(name='SettingList'),
}

model GetControlRulesResponse = {
  headers: map[string]string(name='headers'),
  body: GetControlRulesResponseBody(name='body'),
}

async function getControlRules(request: GetControlRulesRequest): GetControlRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetControlRules', 'GET', '/', 'json', false, 'json', request);
}

model GetCoverRateDataRequest {
  businessType: string(name='BusinessType', position='Query'),
  domain?: string(name='Domain', position='Query'),
  endDate: string(name='EndDate', position='Query'),
  ispName: string(name='IspName', position='Query'),
  platformType: string(name='PlatformType', position='Query'),
  region: string(name='Region', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startDate: string(name='StartDate', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetCoverRateDataResponseBody = {
  code?: int32(name='Code'),
  dataList?: {
    usageData?: [ 
    {
      date?: string(name='Date'),
      values?: {
        values?: [ string ](name='Values')
      }(name='Values'),
    }
  ](name='UsageData')
  }(name='DataList'),
  labels?: {
    label?: [ string ](name='Label')
  }(name='Labels'),
  requestId?: string(name='RequestId'),
}

model GetCoverRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetCoverRateDataResponseBody(name='body'),
}

async function getCoverRateData(request: GetCoverRateDataRequest): GetCoverRateDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCoverRateData', 'GET', '/', 'json', false, 'json', request);
}

model GetCurrentModeRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetCurrentModeResponseBody = {
  code?: int32(name='Code'),
  effectiveAt?: int32(name='EffectiveAt'),
  estimateBandwidth?: int32(name='EstimateBandwidth'),
  modeCode?: int32(name='ModeCode'),
  paddingModeCode?: int32(name='PaddingModeCode'),
  requestId?: string(name='RequestId'),
}

model GetCurrentModeResponse = {
  headers: map[string]string(name='headers'),
  body: GetCurrentModeResponseBody(name='body'),
}

async function getCurrentMode(request: GetCurrentModeRequest): GetCurrentModeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCurrentMode', 'GET', '/', 'json', false, 'json', request);
}

model GetDomainCountRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetDomainCountResponseBody = {
  code?: int32(name='Code'),
  data?: int32(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetDomainCountResponse = {
  headers: map[string]string(name='headers'),
  body: GetDomainCountResponseBody(name='body'),
}

async function getDomainCount(request: GetDomainCountRequest): GetDomainCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDomainCount', 'GET', '/', 'json', false, 'json', request);
}

model GetDomainsRequest {
  domain?: string(name='Domain', position='Query'),
  page: string(name='Page', position='Query'),
  pageSize: string(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetDomainsResponseBody = {
  code?: int32(name='Code'),
  dataList?: {
    usageData?: [ 
    {
      businessType?: string(name='BusinessType'),
      createdAt?: string(name='CreatedAt'),
      domain?: string(name='Domain'),
      resourceId?: string(name='ResourceId'),
      sliceFormat?: string(name='SliceFormat'),
      status?: boolean(name='Status'),
      updatedAt?: string(name='UpdatedAt'),
    }
  ](name='UsageData')
  }(name='DataList'),
  pager?: {
    page?: int32(name='Page'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Pager'),
  requestId?: string(name='RequestId'),
}

model GetDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: GetDomainsResponseBody(name='body'),
}

async function getDomains(request: GetDomainsRequest): GetDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDomains', 'GET', '/', 'json', false, 'json', request);
}

model GetExpenseSummaryRequest {
  businessType?: string(name='BusinessType', position='Query'),
  domain?: string(name='Domain', position='Query'),
  endDate?: string(name='EndDate', position='Query'),
  ispName?: string(name='IspName', position='Query'),
  platformType?: string(name='PlatformType', position='Query'),
  region?: string(name='Region', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startDate?: string(name='StartDate', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetExpenseSummaryResponseBody = {
  code?: int32(name='Code'),
  data?: {
    coverRate?: float(name='CoverRate'),
    forecastFluency?: float(name='ForecastFluency'),
    shareRate?: float(name='ShareRate'),
    topBandwidth?: long(name='TopBandwidth'),
    totalTraffic?: long(name='TotalTraffic'),
    totalUV?: int32(name='TotalUV'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetExpenseSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: GetExpenseSummaryResponseBody(name='body'),
}

async function getExpenseSummary(request: GetExpenseSummaryRequest): GetExpenseSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetExpenseSummary', 'GET', '/', 'json', false, 'json', request);
}

model GetFeeHistoryRequest {
  page: string(name='Page', position='Query'),
  pageSize: string(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetFeeHistoryResponseBody = {
  code?: int32(name='Code'),
  feeList?: {
    fee?: [ 
    {
      businessType?: string(name='BusinessType'),
      date?: string(name='Date'),
      endDate?: string(name='EndDate'),
      flowOut?: int32(name='FlowOut'),
      levelThreeBandwidth?: int32(name='LevelThreeBandwidth'),
      levelThreeTraffic?: int32(name='LevelThreeTraffic'),
      levelTwoBandwidth?: int32(name='LevelTwoBandwidth'),
      levelTwoTraffic?: int32(name='LevelTwoTraffic'),
      mode?: string(name='Mode'),
      resourceId?: string(name='ResourceId'),
      startDate?: string(name='StartDate'),
      timeSpan?: string(name='TimeSpan'),
      totalBandwidth?: int32(name='TotalBandwidth'),
      totalTraffic?: int32(name='TotalTraffic'),
    }
  ](name='Fee')
  }(name='FeeList'),
  pager?: {
    page?: int32(name='Page'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Pager'),
  requestId?: string(name='RequestId'),
}

model GetFeeHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: GetFeeHistoryResponseBody(name='body'),
}

async function getFeeHistory(request: GetFeeHistoryRequest): GetFeeHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFeeHistory', 'GET', '/', 'json', false, 'json', request);
}

model GetFirstFrameDelayDataRequest {
  businessType: string(name='BusinessType', position='Query'),
  domain?: string(name='Domain', position='Query'),
  endDate: string(name='EndDate', position='Query'),
  ispName: string(name='IspName', position='Query'),
  platformType: string(name='PlatformType', position='Query'),
  region: string(name='Region', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startDate: string(name='StartDate', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetFirstFrameDelayDataResponseBody = {
  code?: int32(name='Code'),
  dataList?: {
    usageData?: [ 
    {
      date?: string(name='Date'),
      values?: {
        values?: [ string ](name='Values')
      }(name='Values'),
    }
  ](name='UsageData')
  }(name='DataList'),
  labels?: {
    label?: [ string ](name='Label')
  }(name='Labels'),
  requestId?: string(name='RequestId'),
}

model GetFirstFrameDelayDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetFirstFrameDelayDataResponseBody(name='body'),
}

async function getFirstFrameDelayData(request: GetFirstFrameDelayDataRequest): GetFirstFrameDelayDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFirstFrameDelayData', 'GET', '/', 'json', false, 'json', request);
}

model GetFluencyDataRequest {
  businessType: string(name='BusinessType', position='Query'),
  domain?: string(name='Domain', position='Query'),
  endDate: string(name='EndDate', position='Query'),
  ispName: string(name='IspName', position='Query'),
  platformType: string(name='PlatformType', position='Query'),
  region: string(name='Region', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startDate: string(name='StartDate', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetFluencyDataResponseBody = {
  code?: int32(name='Code'),
  dataList?: {
    usageData?: [ 
    {
      date?: string(name='Date'),
      values?: {
        values?: [ string ](name='Values')
      }(name='Values'),
    }
  ](name='UsageData')
  }(name='DataList'),
  labels?: {
    label?: [ string ](name='Label')
  }(name='Labels'),
  requestId?: string(name='RequestId'),
}

model GetFluencyDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetFluencyDataResponseBody(name='body'),
}

async function getFluencyData(request: GetFluencyDataRequest): GetFluencyDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFluencyData', 'GET', '/', 'json', false, 'json', request);
}

model GetLogsListRequest {
  date?: string(name='Date', position='Query'),
  domain?: string(name='Domain', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetLogsListResponseBody = {
  code?: int32(name='Code'),
  logList?: {
    log?: [ 
    {
      endDate?: string(name='EndDate'),
      fileName?: string(name='FileName'),
      startDate?: string(name='StartDate'),
      url?: string(name='Url'),
    }
  ](name='Log')
  }(name='LogList'),
  requestId?: string(name='RequestId'),
}

model GetLogsListResponse = {
  headers: map[string]string(name='headers'),
  body: GetLogsListResponseBody(name='body'),
}

async function getLogsList(request: GetLogsListRequest): GetLogsListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLogsList', 'GET', '/', 'json', false, 'json', request);
}

model GetShareRateDataRequest {
  businessType: string(name='BusinessType', position='Query'),
  domain?: string(name='Domain', position='Query'),
  endDate: string(name='EndDate', position='Query'),
  ispName: string(name='IspName', position='Query'),
  platformType: string(name='PlatformType', position='Query'),
  region: string(name='Region', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startDate: string(name='StartDate', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetShareRateDataResponseBody = {
  code?: int32(name='Code'),
  dataList?: {
    usageData?: [ 
    {
      date?: string(name='Date'),
      values?: {
        values?: [ string ](name='Values')
      }(name='Values'),
    }
  ](name='UsageData')
  }(name='DataList'),
  labels?: {
    label?: [ string ](name='Label')
  }(name='Labels'),
  requestId?: string(name='RequestId'),
}

model GetShareRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetShareRateDataResponseBody(name='body'),
}

async function getShareRateData(request: GetShareRateDataRequest): GetShareRateDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetShareRateData', 'GET', '/', 'json', false, 'json', request);
}

model GetTokenListRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetTokenListResponseBody = {
  code?: int32(name='Code'),
  requestId?: string(name='RequestId'),
  tokenList?: {
    token?: [ 
    {
      clientId?: string(name='ClientId'),
      createdAt?: string(name='CreatedAt'),
      platformName?: string(name='PlatformName'),
      platformType?: string(name='PlatformType'),
      resourceId?: string(name='ResourceId'),
      token?: string(name='Token'),
      updatedAt?: string(name='UpdatedAt'),
    }
  ](name='Token')
  }(name='TokenList'),
}

model GetTokenListResponse = {
  headers: map[string]string(name='headers'),
  body: GetTokenListResponseBody(name='body'),
}

async function getTokenList(request: GetTokenListRequest): GetTokenListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTokenList', 'GET', '/', 'json', false, 'json', request);
}

model GetTrafficByRegionRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetTrafficByRegionResponseBody = {
  code?: int32(name='Code'),
  requestId?: string(name='RequestId'),
  trafficDataList?: {
    trafficData?: [ 
    {
      name?: string(name='Name'),
      traffic?: long(name='Traffic'),
    }
  ](name='TrafficData')
  }(name='TrafficDataList'),
}

model GetTrafficByRegionResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrafficByRegionResponseBody(name='body'),
}

async function getTrafficByRegion(request: GetTrafficByRegionRequest): GetTrafficByRegionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrafficByRegion', 'GET', '/', 'json', false, 'json', request);
}

model GetTrafficDataRequest {
  businessType: string(name='BusinessType', position='Query'),
  domain?: string(name='Domain', position='Query'),
  endDate: string(name='EndDate', position='Query'),
  ispName: string(name='IspName', position='Query'),
  platformType: string(name='PlatformType', position='Query'),
  region: string(name='Region', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startDate: string(name='StartDate', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetTrafficDataResponseBody = {
  code?: int32(name='Code'),
  dataList?: {
    usageData?: [ 
    {
      date?: string(name='Date'),
      values?: {
        values?: [ string ](name='Values')
      }(name='Values'),
    }
  ](name='UsageData')
  }(name='DataList'),
  labels?: {
    label?: [ string ](name='Label')
  }(name='Labels'),
  requestId?: string(name='RequestId'),
}

model GetTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrafficDataResponseBody(name='body'),
}

async function getTrafficData(request: GetTrafficDataRequest): GetTrafficDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrafficData', 'GET', '/', 'json', false, 'json', request);
}

model StartDomainRequest {
  domain: string(name='Domain', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  version: string(name='Version', position='Query'),
}

model StartDomainResponseBody = {
  code?: int32(name='Code'),
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
}

model StartDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StartDomainResponseBody(name='body'),
}

async function startDomain(request: StartDomainRequest): StartDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDomain', 'GET', '/', 'json', false, 'json', request);
}

model StopDomainRequest {
  domain: string(name='Domain', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  version: string(name='Version', position='Query'),
}

model StopDomainResponseBody = {
  code?: int32(name='Code'),
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
}

model StopDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StopDomainResponseBody(name='body'),
}

async function stopDomain(request: StopDomainRequest): StopDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDomain', 'GET', '/', 'json', false, 'json', request);
}

