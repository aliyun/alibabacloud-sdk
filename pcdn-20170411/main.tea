/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  

  checkConfig(config);
  @endpoint = getEndpoint('pcdn', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddConsumerRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
  businessType?: string(name='BusinessType'),
  company?: string(name='Company'),
  site?: string(name='Site'),
  requirement?: string(name='Requirement'),
  mobile?: string(name='Mobile'),
  ca?: string(name='Ca'),
  operator?: string(name='Operator'),
  email?: string(name='Email'),
  bandwidthRequirement?: string(name='BandwidthRequirement'),
}

model AddConsumerResponseBody = {
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
  code?: int32(name='Code'),
}

model AddConsumerResponse = {
  headers: map[string]string(name='headers'),
  body: AddConsumerResponseBody(name='body'),
}

async function addConsumerWithOptions(request: AddConsumerRequest, runtime: Util.RuntimeOptions): AddConsumerResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('AddConsumer', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function addConsumer(request: AddConsumerRequest): AddConsumerResponse {
  var runtime = new Util.RuntimeOptions{};
  return addConsumerWithOptions(request, runtime);
}

model AddDomainRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
  businessType?: string(name='BusinessType'),
  domain?: string(name='Domain'),
  liveFormat?: string(name='LiveFormat'),
  sliceDomain?: string(name='SliceDomain'),
  region?: string(name='Region'),
  demoUrls?: string(name='DemoUrls'),
}

model AddDomainResponseBody = {
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
  code?: int32(name='Code'),
}

model AddDomainResponse = {
  headers: map[string]string(name='headers'),
  body: AddDomainResponseBody(name='body'),
}

async function addDomainWithOptions(request: AddDomainRequest, runtime: Util.RuntimeOptions): AddDomainResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('AddDomain', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function addDomain(request: AddDomainRequest): AddDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDomainWithOptions(request, runtime);
}

model AddPcdnControlRuleRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
  name?: string(name='Name'),
  region?: string(name='Region'),
  ispName?: string(name='IspName'),
  platformType?: string(name='PlatformType'),
  businessType?: string(name='BusinessType'),
  market?: string(name='Market'),
  appVersion?: string(name='AppVersion'),
}

model AddPcdnControlRuleResponseBody = {
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
  code?: int32(name='Code'),
}

model AddPcdnControlRuleResponse = {
  headers: map[string]string(name='headers'),
  body: AddPcdnControlRuleResponseBody(name='body'),
}

async function addPcdnControlRuleWithOptions(request: AddPcdnControlRuleRequest, runtime: Util.RuntimeOptions): AddPcdnControlRuleResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('AddPcdnControlRule', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function addPcdnControlRule(request: AddPcdnControlRuleRequest): AddPcdnControlRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addPcdnControlRuleWithOptions(request, runtime);
}

model DeleteDomainRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
  domain?: string(name='Domain'),
}

model DeleteDomainResponseBody = {
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
  code?: int32(name='Code'),
}

model DeleteDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDomainResponseBody(name='body'),
}

async function deleteDomainWithOptions(request: DeleteDomainRequest, runtime: Util.RuntimeOptions): DeleteDomainResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DeleteDomain', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDomainWithOptions(request, runtime);
}

model DeletePcdnControlRuleRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
  resourceId?: string(name='ResourceId'),
}

model DeletePcdnControlRuleResponseBody = {
  requestId?: string(name='RequestId'),
  code?: int32(name='Code'),
}

model DeletePcdnControlRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePcdnControlRuleResponseBody(name='body'),
}

async function deletePcdnControlRuleWithOptions(request: DeletePcdnControlRuleRequest, runtime: Util.RuntimeOptions): DeletePcdnControlRuleResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DeletePcdnControlRule', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function deletePcdnControlRule(request: DeletePcdnControlRuleRequest): DeletePcdnControlRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePcdnControlRuleWithOptions(request, runtime);
}

model DisablePcdnControlRuleRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
  resourceId?: string(name='ResourceId'),
}

model DisablePcdnControlRuleResponseBody = {
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
  code?: int32(name='Code'),
}

model DisablePcdnControlRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DisablePcdnControlRuleResponseBody(name='body'),
}

async function disablePcdnControlRuleWithOptions(request: DisablePcdnControlRuleRequest, runtime: Util.RuntimeOptions): DisablePcdnControlRuleResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DisablePcdnControlRule', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function disablePcdnControlRule(request: DisablePcdnControlRuleRequest): DisablePcdnControlRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return disablePcdnControlRuleWithOptions(request, runtime);
}

model EditPcdnControlRuleRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
  name?: string(name='Name'),
  resourceId?: string(name='ResourceId'),
  region?: string(name='Region'),
  ispName?: string(name='IspName'),
  platformType?: string(name='PlatformType'),
  businessType?: string(name='BusinessType'),
  market?: string(name='Market'),
  appVersion?: string(name='AppVersion'),
}

model EditPcdnControlRuleResponseBody = {
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
  code?: int32(name='Code'),
}

model EditPcdnControlRuleResponse = {
  headers: map[string]string(name='headers'),
  body: EditPcdnControlRuleResponseBody(name='body'),
}

async function editPcdnControlRuleWithOptions(request: EditPcdnControlRuleRequest, runtime: Util.RuntimeOptions): EditPcdnControlRuleResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('EditPcdnControlRule', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function editPcdnControlRule(request: EditPcdnControlRuleRequest): EditPcdnControlRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return editPcdnControlRuleWithOptions(request, runtime);
}

model EnablePcdnControlRuleRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
  resourceId?: string(name='ResourceId'),
}

model EnablePcdnControlRuleResponseBody = {
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
  code?: int32(name='Code'),
}

model EnablePcdnControlRuleResponse = {
  headers: map[string]string(name='headers'),
  body: EnablePcdnControlRuleResponseBody(name='body'),
}

async function enablePcdnControlRuleWithOptions(request: EnablePcdnControlRuleRequest, runtime: Util.RuntimeOptions): EnablePcdnControlRuleResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('EnablePcdnControlRule', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function enablePcdnControlRule(request: EnablePcdnControlRuleRequest): EnablePcdnControlRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return enablePcdnControlRuleWithOptions(request, runtime);
}

model GetAccessDataRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
  domain?: string(name='Domain'),
  region?: string(name='Region'),
  ispName?: string(name='IspName'),
  platformType?: string(name='PlatformType'),
  businessType?: string(name='BusinessType'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='EndDate'),
}

model GetAccessDataResponseBody = {
  dataList?: {
    usageData?: [ 
    {
      values?: {
        values?: [ string ](name='Values')
      }(name='Values'),
      date?: string(name='Date'),
    }
  ](name='UsageData')
  }(name='DataList'),
  requestId?: string(name='RequestId'),
  labels?: {
    label?: [ string ](name='Label')
  }(name='Labels'),
  code?: int32(name='Code'),
}

model GetAccessDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetAccessDataResponseBody(name='body'),
}

async function getAccessDataWithOptions(request: GetAccessDataRequest, runtime: Util.RuntimeOptions): GetAccessDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetAccessData', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getAccessData(request: GetAccessDataRequest): GetAccessDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAccessDataWithOptions(request, runtime);
}

model GetAllAppVersionsRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
}

model GetAllAppVersionsResponseBody = {
  dataList?: {
    usageData?: [ 
    {
      value?: string(name='Value'),
      code?: int32(name='Code'),
    }
  ](name='UsageData')
  }(name='DataList'),
  requestId?: string(name='RequestId'),
  code?: int32(name='Code'),
}

model GetAllAppVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: GetAllAppVersionsResponseBody(name='body'),
}

async function getAllAppVersionsWithOptions(request: GetAllAppVersionsRequest, runtime: Util.RuntimeOptions): GetAllAppVersionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetAllAppVersions', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getAllAppVersions(request: GetAllAppVersionsRequest): GetAllAppVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAllAppVersionsWithOptions(request, runtime);
}

model GetAllIspRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
}

model GetAllIspResponseBody = {
  dataList?: {
    usageData?: [ 
    {
      nameEn?: string(name='NameEn'),
      nameCn?: string(name='NameCn'),
      resourceId?: string(name='ResourceId'),
    }
  ](name='UsageData')
  }(name='DataList'),
  requestId?: string(name='RequestId'),
  code?: int32(name='Code'),
}

model GetAllIspResponse = {
  headers: map[string]string(name='headers'),
  body: GetAllIspResponseBody(name='body'),
}

async function getAllIspWithOptions(request: GetAllIspRequest, runtime: Util.RuntimeOptions): GetAllIspResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetAllIsp', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getAllIsp(request: GetAllIspRequest): GetAllIspResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAllIspWithOptions(request, runtime);
}

model GetAllMarketsRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
}

model GetAllMarketsResponseBody = {
  dataList?: {
    usageData?: [ 
    {
      code?: int32(name='Code'),
      marketCode?: string(name='MarketCode'),
      marketName?: string(name='MarketName'),
    }
  ](name='UsageData')
  }(name='DataList'),
  requestId?: string(name='RequestId'),
  code?: int32(name='Code'),
}

model GetAllMarketsResponse = {
  headers: map[string]string(name='headers'),
  body: GetAllMarketsResponseBody(name='body'),
}

async function getAllMarketsWithOptions(request: GetAllMarketsRequest, runtime: Util.RuntimeOptions): GetAllMarketsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetAllMarkets', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getAllMarkets(request: GetAllMarketsRequest): GetAllMarketsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAllMarketsWithOptions(request, runtime);
}

model GetAllPlatformTypesRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
}

model GetAllPlatformTypesResponseBody = {
  dataList?: {
    usageData?: [ 
    {
      code?: int32(name='Code'),
      name?: string(name='Name'),
    }
  ](name='UsageData')
  }(name='DataList'),
  requestId?: string(name='RequestId'),
  code?: int32(name='Code'),
}

model GetAllPlatformTypesResponse = {
  headers: map[string]string(name='headers'),
  body: GetAllPlatformTypesResponseBody(name='body'),
}

async function getAllPlatformTypesWithOptions(request: GetAllPlatformTypesRequest, runtime: Util.RuntimeOptions): GetAllPlatformTypesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetAllPlatformTypes', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getAllPlatformTypes(request: GetAllPlatformTypesRequest): GetAllPlatformTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAllPlatformTypesWithOptions(request, runtime);
}

model GetAllRegionsRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
}

model GetAllRegionsResponseBody = {
  dataList?: {
    usageData?: [ 
    {
      code?: string(name='Code'),
      name?: string(name='Name'),
    }
  ](name='UsageData')
  }(name='DataList'),
  requestId?: string(name='RequestId'),
  code?: int32(name='Code'),
}

model GetAllRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: GetAllRegionsResponseBody(name='body'),
}

async function getAllRegionsWithOptions(request: GetAllRegionsRequest, runtime: Util.RuntimeOptions): GetAllRegionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetAllRegions', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getAllRegions(request: GetAllRegionsRequest): GetAllRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAllRegionsWithOptions(request, runtime);
}

model GetBalanceBandwidthDataRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
  dataInterval?: int32(name='DataInterval'),
  resourceId?: string(name='ResourceId'),
}

model GetBalanceBandwidthDataResponseBody = {
  dataList?: {
    usageData?: [ 
    {
      values?: {
        values?: [ string ](name='Values')
      }(name='Values'),
      date?: string(name='Date'),
    }
  ](name='UsageData')
  }(name='DataList'),
  requestId?: string(name='RequestId'),
  labels?: {
    label?: [ string ](name='Label')
  }(name='Labels'),
  code?: int32(name='Code'),
}

model GetBalanceBandwidthDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetBalanceBandwidthDataResponseBody(name='body'),
}

async function getBalanceBandwidthDataWithOptions(request: GetBalanceBandwidthDataRequest, runtime: Util.RuntimeOptions): GetBalanceBandwidthDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetBalanceBandwidthData', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getBalanceBandwidthData(request: GetBalanceBandwidthDataRequest): GetBalanceBandwidthDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBalanceBandwidthDataWithOptions(request, runtime);
}

model GetBalanceTrafficDataRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
  dataInterval?: int32(name='DataInterval'),
  resourceId?: string(name='ResourceId'),
}

model GetBalanceTrafficDataResponseBody = {
  dataList?: {
    usageData?: [ 
    {
      values?: {
        values?: [ string ](name='Values')
      }(name='Values'),
      date?: string(name='Date'),
    }
  ](name='UsageData')
  }(name='DataList'),
  requestId?: string(name='RequestId'),
  labels?: {
    label?: [ string ](name='Label')
  }(name='Labels'),
  code?: int32(name='Code'),
}

model GetBalanceTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetBalanceTrafficDataResponseBody(name='body'),
}

async function getBalanceTrafficDataWithOptions(request: GetBalanceTrafficDataRequest, runtime: Util.RuntimeOptions): GetBalanceTrafficDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetBalanceTrafficData', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getBalanceTrafficData(request: GetBalanceTrafficDataRequest): GetBalanceTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBalanceTrafficDataWithOptions(request, runtime);
}

model GetBandwidthDataRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
  domain?: string(name='Domain'),
  region?: string(name='Region'),
  ispName?: string(name='IspName'),
  platformType?: string(name='PlatformType'),
  businessType?: string(name='BusinessType'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='EndDate'),
}

model GetBandwidthDataResponseBody = {
  dataList?: {
    usageData?: [ 
    {
      values?: {
        values?: [ string ](name='Values')
      }(name='Values'),
      date?: string(name='Date'),
    }
  ](name='UsageData')
  }(name='DataList'),
  requestId?: string(name='RequestId'),
  labels?: {
    label?: [ string ](name='Label')
  }(name='Labels'),
  code?: int32(name='Code'),
}

model GetBandwidthDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetBandwidthDataResponseBody(name='body'),
}

async function getBandwidthDataWithOptions(request: GetBandwidthDataRequest, runtime: Util.RuntimeOptions): GetBandwidthDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetBandwidthData', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getBandwidthData(request: GetBandwidthDataRequest): GetBandwidthDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBandwidthDataWithOptions(request, runtime);
}

model GetClientsRatioRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
}

model GetClientsRatioResponseBody = {
  dataList?: {
    usageData?: [ 
    {
      value?: string(name='Value'),
      name?: string(name='Name'),
      rate?: string(name='Rate'),
    }
  ](name='UsageData')
  }(name='DataList'),
  requestId?: string(name='RequestId'),
  code?: int32(name='Code'),
}

model GetClientsRatioResponse = {
  headers: map[string]string(name='headers'),
  body: GetClientsRatioResponseBody(name='body'),
}

async function getClientsRatioWithOptions(request: GetClientsRatioRequest, runtime: Util.RuntimeOptions): GetClientsRatioResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetClientsRatio', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getClientsRatio(request: GetClientsRatioRequest): GetClientsRatioResponse {
  var runtime = new Util.RuntimeOptions{};
  return getClientsRatioWithOptions(request, runtime);
}

model GetConsumerStatusRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
}

model GetConsumerStatusResponseBody = {
  comment?: string(name='Comment'),
  liveMonitor?: boolean(name='LiveMonitor'),
  audit?: int32(name='Audit'),
  requestId?: string(name='RequestId'),
  integreatedMode?: int32(name='IntegreatedMode'),
  createdAt?: string(name='CreatedAt'),
  cdnUrlRedirectFlag?: boolean(name='CdnUrlRedirectFlag'),
  businessType?: string(name='BusinessType'),
  inservice?: boolean(name='Inservice'),
  realtimeMonitor?: boolean(name='RealtimeMonitor'),
  code?: int32(name='Code'),
  updatedAt?: string(name='UpdatedAt'),
}

model GetConsumerStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetConsumerStatusResponseBody(name='body'),
}

async function getConsumerStatusWithOptions(request: GetConsumerStatusRequest, runtime: Util.RuntimeOptions): GetConsumerStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetConsumerStatus', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getConsumerStatus(request: GetConsumerStatusRequest): GetConsumerStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConsumerStatusWithOptions(request, runtime);
}

model GetControlRulesRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
  page?: string(name='Page'),
  pageSize?: string(name='PageSize'),
}

model GetControlRulesResponseBody = {
  settingList?: {
    setting?: [ 
    {
      createdAt?: string(name='CreatedAt'),
      clientId?: string(name='ClientId'),
      businessType?: string(name='BusinessType'),
      usable?: boolean(name='Usable'),
      region?: string(name='Region'),
      platformType?: string(name='PlatformType'),
      marketType?: string(name='MarketType'),
      onoff?: boolean(name='Onoff'),
      ispName?: string(name='IspName'),
      appVersion?: string(name='AppVersion'),
      updatedAt?: string(name='UpdatedAt'),
      name?: string(name='Name'),
      resourceId?: string(name='ResourceId'),
    }
  ](name='Setting')
  }(name='SettingList'),
  requestId?: string(name='RequestId'),
  pager?: {
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    page?: int32(name='Page'),
  }(name='Pager'),
  code?: int32(name='Code'),
}

model GetControlRulesResponse = {
  headers: map[string]string(name='headers'),
  body: GetControlRulesResponseBody(name='body'),
}

async function getControlRulesWithOptions(request: GetControlRulesRequest, runtime: Util.RuntimeOptions): GetControlRulesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetControlRules', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getControlRules(request: GetControlRulesRequest): GetControlRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getControlRulesWithOptions(request, runtime);
}

model GetCoverRateDataRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
  domain?: string(name='Domain'),
  region?: string(name='Region'),
  ispName?: string(name='IspName'),
  platformType?: string(name='PlatformType'),
  businessType?: string(name='BusinessType'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='EndDate'),
}

model GetCoverRateDataResponseBody = {
  dataList?: {
    usageData?: [ 
    {
      values?: {
        values?: [ string ](name='Values')
      }(name='Values'),
      date?: string(name='Date'),
    }
  ](name='UsageData')
  }(name='DataList'),
  requestId?: string(name='RequestId'),
  labels?: {
    label?: [ string ](name='Label')
  }(name='Labels'),
  code?: int32(name='Code'),
}

model GetCoverRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetCoverRateDataResponseBody(name='body'),
}

async function getCoverRateDataWithOptions(request: GetCoverRateDataRequest, runtime: Util.RuntimeOptions): GetCoverRateDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetCoverRateData', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getCoverRateData(request: GetCoverRateDataRequest): GetCoverRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCoverRateDataWithOptions(request, runtime);
}

model GetCurrentModeRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
}

model GetCurrentModeResponseBody = {
  modeCode?: int32(name='ModeCode'),
  requestId?: string(name='RequestId'),
  paddingModeCode?: int32(name='PaddingModeCode'),
  effectiveAt?: int32(name='EffectiveAt'),
  estimateBandwidth?: int32(name='EstimateBandwidth'),
  code?: int32(name='Code'),
}

model GetCurrentModeResponse = {
  headers: map[string]string(name='headers'),
  body: GetCurrentModeResponseBody(name='body'),
}

async function getCurrentModeWithOptions(request: GetCurrentModeRequest, runtime: Util.RuntimeOptions): GetCurrentModeResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetCurrentMode', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getCurrentMode(request: GetCurrentModeRequest): GetCurrentModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCurrentModeWithOptions(request, runtime);
}

model GetDomainCountRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
}

model GetDomainCountResponseBody = {
  requestId?: string(name='RequestId'),
  data?: int32(name='Data'),
  code?: int32(name='Code'),
}

model GetDomainCountResponse = {
  headers: map[string]string(name='headers'),
  body: GetDomainCountResponseBody(name='body'),
}

async function getDomainCountWithOptions(request: GetDomainCountRequest, runtime: Util.RuntimeOptions): GetDomainCountResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetDomainCount', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getDomainCount(request: GetDomainCountRequest): GetDomainCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDomainCountWithOptions(request, runtime);
}

model GetDomainsRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
  page?: string(name='Page'),
  pageSize?: string(name='PageSize'),
  domain?: string(name='Domain'),
}

model GetDomainsResponseBody = {
  dataList?: {
    usageData?: [ 
    {
      status?: boolean(name='Status'),
      domain?: string(name='Domain'),
      sliceFormat?: string(name='SliceFormat'),
      createdAt?: string(name='CreatedAt'),
      updatedAt?: string(name='UpdatedAt'),
      resourceId?: string(name='ResourceId'),
      businessType?: string(name='BusinessType'),
    }
  ](name='UsageData')
  }(name='DataList'),
  requestId?: string(name='RequestId'),
  pager?: {
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    page?: int32(name='Page'),
  }(name='Pager'),
  code?: int32(name='Code'),
}

model GetDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: GetDomainsResponseBody(name='body'),
}

async function getDomainsWithOptions(request: GetDomainsRequest, runtime: Util.RuntimeOptions): GetDomainsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetDomains', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getDomains(request: GetDomainsRequest): GetDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDomainsWithOptions(request, runtime);
}

model GetExpenseSummaryRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='EndDate'),
  domain?: string(name='Domain'),
  region?: string(name='Region'),
  ispName?: string(name='IspName'),
  platformType?: string(name='PlatformType'),
  businessType?: string(name='BusinessType'),
}

model GetExpenseSummaryResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    forecastFluency?: float(name='ForecastFluency'),
    topBandwidth?: long(name='TopBandwidth'),
    totalTraffic?: long(name='TotalTraffic'),
    coverRate?: float(name='CoverRate'),
    shareRate?: float(name='ShareRate'),
    totalUV?: int32(name='TotalUV'),
  }(name='Data'),
  code?: int32(name='Code'),
}

model GetExpenseSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: GetExpenseSummaryResponseBody(name='body'),
}

async function getExpenseSummaryWithOptions(request: GetExpenseSummaryRequest, runtime: Util.RuntimeOptions): GetExpenseSummaryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetExpenseSummary', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getExpenseSummary(request: GetExpenseSummaryRequest): GetExpenseSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getExpenseSummaryWithOptions(request, runtime);
}

model GetFeeHistoryRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
  page?: string(name='Page'),
  pageSize?: string(name='PageSize'),
}

model GetFeeHistoryResponseBody = {
  requestId?: string(name='RequestId'),
  feeList?: {
    fee?: [ 
    {
      endDate?: string(name='EndDate'),
      timeSpan?: string(name='TimeSpan'),
      date?: string(name='Date'),
      startDate?: string(name='StartDate'),
      levelThreeTraffic?: int32(name='LevelThreeTraffic'),
      mode?: string(name='Mode'),
      totalTraffic?: int32(name='TotalTraffic'),
      businessType?: string(name='BusinessType'),
      levelTwoTraffic?: int32(name='LevelTwoTraffic'),
      levelThreeBandwidth?: int32(name='LevelThreeBandwidth'),
      levelTwoBandwidth?: int32(name='LevelTwoBandwidth'),
      flowOut?: int32(name='FlowOut'),
      resourceId?: string(name='ResourceId'),
      totalBandwidth?: int32(name='TotalBandwidth'),
    }
  ](name='Fee')
  }(name='FeeList'),
  pager?: {
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    page?: int32(name='Page'),
  }(name='Pager'),
  code?: int32(name='Code'),
}

model GetFeeHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: GetFeeHistoryResponseBody(name='body'),
}

async function getFeeHistoryWithOptions(request: GetFeeHistoryRequest, runtime: Util.RuntimeOptions): GetFeeHistoryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetFeeHistory', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getFeeHistory(request: GetFeeHistoryRequest): GetFeeHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFeeHistoryWithOptions(request, runtime);
}

model GetFirstFrameDelayDataRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
  domain?: string(name='Domain'),
  region?: string(name='Region'),
  ispName?: string(name='IspName'),
  platformType?: string(name='PlatformType'),
  businessType?: string(name='BusinessType'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='EndDate'),
}

model GetFirstFrameDelayDataResponseBody = {
  dataList?: {
    usageData?: [ 
    {
      values?: {
        values?: [ string ](name='Values')
      }(name='Values'),
      date?: string(name='Date'),
    }
  ](name='UsageData')
  }(name='DataList'),
  requestId?: string(name='RequestId'),
  labels?: {
    label?: [ string ](name='Label')
  }(name='Labels'),
  code?: int32(name='Code'),
}

model GetFirstFrameDelayDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetFirstFrameDelayDataResponseBody(name='body'),
}

async function getFirstFrameDelayDataWithOptions(request: GetFirstFrameDelayDataRequest, runtime: Util.RuntimeOptions): GetFirstFrameDelayDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetFirstFrameDelayData', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getFirstFrameDelayData(request: GetFirstFrameDelayDataRequest): GetFirstFrameDelayDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFirstFrameDelayDataWithOptions(request, runtime);
}

model GetFluencyDataRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
  domain?: string(name='Domain'),
  region?: string(name='Region'),
  ispName?: string(name='IspName'),
  platformType?: string(name='PlatformType'),
  businessType?: string(name='BusinessType'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='EndDate'),
}

model GetFluencyDataResponseBody = {
  dataList?: {
    usageData?: [ 
    {
      values?: {
        values?: [ string ](name='Values')
      }(name='Values'),
      date?: string(name='Date'),
    }
  ](name='UsageData')
  }(name='DataList'),
  requestId?: string(name='RequestId'),
  labels?: {
    label?: [ string ](name='Label')
  }(name='Labels'),
  code?: int32(name='Code'),
}

model GetFluencyDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetFluencyDataResponseBody(name='body'),
}

async function getFluencyDataWithOptions(request: GetFluencyDataRequest, runtime: Util.RuntimeOptions): GetFluencyDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetFluencyData', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getFluencyData(request: GetFluencyDataRequest): GetFluencyDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFluencyDataWithOptions(request, runtime);
}

model GetLogsListRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
  domain?: string(name='Domain'),
  date?: string(name='Date'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model GetLogsListResponseBody = {
  logList?: {
    log?: [ 
    {
      endDate?: string(name='EndDate'),
      url?: string(name='Url'),
      startDate?: string(name='StartDate'),
      fileName?: string(name='FileName'),
    }
  ](name='Log')
  }(name='LogList'),
  requestId?: string(name='RequestId'),
  code?: int32(name='Code'),
}

model GetLogsListResponse = {
  headers: map[string]string(name='headers'),
  body: GetLogsListResponseBody(name='body'),
}

async function getLogsListWithOptions(request: GetLogsListRequest, runtime: Util.RuntimeOptions): GetLogsListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetLogsList', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getLogsList(request: GetLogsListRequest): GetLogsListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLogsListWithOptions(request, runtime);
}

model GetShareRateDataRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
  domain?: string(name='Domain'),
  region?: string(name='Region'),
  ispName?: string(name='IspName'),
  platformType?: string(name='PlatformType'),
  businessType?: string(name='BusinessType'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='EndDate'),
}

model GetShareRateDataResponseBody = {
  dataList?: {
    usageData?: [ 
    {
      values?: {
        values?: [ string ](name='Values')
      }(name='Values'),
      date?: string(name='Date'),
    }
  ](name='UsageData')
  }(name='DataList'),
  requestId?: string(name='RequestId'),
  labels?: {
    label?: [ string ](name='Label')
  }(name='Labels'),
  code?: int32(name='Code'),
}

model GetShareRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetShareRateDataResponseBody(name='body'),
}

async function getShareRateDataWithOptions(request: GetShareRateDataRequest, runtime: Util.RuntimeOptions): GetShareRateDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetShareRateData', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getShareRateData(request: GetShareRateDataRequest): GetShareRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getShareRateDataWithOptions(request, runtime);
}

model GetTokenListRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
}

model GetTokenListResponseBody = {
  requestId?: string(name='RequestId'),
  tokenList?: {
    token?: [ 
    {
      platformName?: string(name='PlatformName'),
      token?: string(name='Token'),
      platformType?: string(name='PlatformType'),
      createdAt?: string(name='CreatedAt'),
      updatedAt?: string(name='UpdatedAt'),
      resourceId?: string(name='ResourceId'),
      clientId?: string(name='ClientId'),
    }
  ](name='Token')
  }(name='TokenList'),
  code?: int32(name='Code'),
}

model GetTokenListResponse = {
  headers: map[string]string(name='headers'),
  body: GetTokenListResponseBody(name='body'),
}

async function getTokenListWithOptions(request: GetTokenListRequest, runtime: Util.RuntimeOptions): GetTokenListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetTokenList', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getTokenList(request: GetTokenListRequest): GetTokenListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTokenListWithOptions(request, runtime);
}

model GetTrafficByRegionRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
}

model GetTrafficByRegionResponseBody = {
  requestId?: string(name='RequestId'),
  trafficDataList?: {
    trafficData?: [ 
    {
      traffic?: long(name='Traffic'),
      name?: string(name='Name'),
    }
  ](name='TrafficData')
  }(name='TrafficDataList'),
  code?: int32(name='Code'),
}

model GetTrafficByRegionResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrafficByRegionResponseBody(name='body'),
}

async function getTrafficByRegionWithOptions(request: GetTrafficByRegionRequest, runtime: Util.RuntimeOptions): GetTrafficByRegionResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetTrafficByRegion', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getTrafficByRegion(request: GetTrafficByRegionRequest): GetTrafficByRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTrafficByRegionWithOptions(request, runtime);
}

model GetTrafficDataRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
  domain?: string(name='Domain'),
  region?: string(name='Region'),
  ispName?: string(name='IspName'),
  platformType?: string(name='PlatformType'),
  businessType?: string(name='BusinessType'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='EndDate'),
}

model GetTrafficDataResponseBody = {
  dataList?: {
    usageData?: [ 
    {
      values?: {
        values?: [ string ](name='Values')
      }(name='Values'),
      date?: string(name='Date'),
    }
  ](name='UsageData')
  }(name='DataList'),
  requestId?: string(name='RequestId'),
  labels?: {
    label?: [ string ](name='Label')
  }(name='Labels'),
  code?: int32(name='Code'),
}

model GetTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrafficDataResponseBody(name='body'),
}

async function getTrafficDataWithOptions(request: GetTrafficDataRequest, runtime: Util.RuntimeOptions): GetTrafficDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetTrafficData', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getTrafficData(request: GetTrafficDataRequest): GetTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTrafficDataWithOptions(request, runtime);
}

model StartDomainRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
  domain?: string(name='Domain'),
}

model StartDomainResponseBody = {
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
  code?: int32(name='Code'),
}

model StartDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StartDomainResponseBody(name='body'),
}

async function startDomainWithOptions(request: StartDomainRequest, runtime: Util.RuntimeOptions): StartDomainResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('StartDomain', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function startDomain(request: StartDomainRequest): StartDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDomainWithOptions(request, runtime);
}

model StopDomainRequest {
  securityToken?: string(name='SecurityToken'),
  version?: string(name='Version'),
  domain?: string(name='Domain'),
}

model StopDomainResponseBody = {
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
  code?: int32(name='Code'),
}

model StopDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StopDomainResponseBody(name='body'),
}

async function stopDomainWithOptions(request: StopDomainRequest, runtime: Util.RuntimeOptions): StopDomainResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('StopDomain', '2017-04-11', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function stopDomain(request: StopDomainRequest): StopDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDomainWithOptions(request, runtime);
}

