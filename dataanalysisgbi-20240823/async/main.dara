/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'DataAnalysisGBI';
  @version = '2024-08-23';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model BatchDeleteSynonymsRequest {
  regionId?: string(name='regionId', position='Host'),
  synonymIdKeys: [ string ](name='synonymIdKeys', description='This parameter is required.', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model BatchDeleteSynonymsResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='45390C6D-016D-5030-BF65-031ED1F65003'),
  success?: boolean(name='success', example='true'),
}

model BatchDeleteSynonymsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchDeleteSynonymsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchDeleteSynonyms  BatchDeleteSynonymsRequest
  * @return BatchDeleteSynonymsResponse
 */
async function batchDeleteSynonyms(request: BatchDeleteSynonymsRequest): BatchDeleteSynonymsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchDeleteSynonyms', 'POST', '/gbi/batchDelete/synonyms', 'json', false, 'json', request);
}

model CancelDatasourceAuthorizationRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model CancelDatasourceAuthorizationResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='FB11F719-9AC8-5C99-AB0A-4709D437FCFC'),
  success?: boolean(name='success', example='true'),
}

model CancelDatasourceAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelDatasourceAuthorizationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelDatasourceAuthorization  CancelDatasourceAuthorizationRequest
  * @return CancelDatasourceAuthorizationResponse
 */
async function cancelDatasourceAuthorization(request: CancelDatasourceAuthorizationRequest): CancelDatasourceAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelDatasourceAuthorization', 'POST', '/gbi/cancel/datasource', 'json', false, 'json', request);
}

model CreateBusinessLogicRequest {
  regionId?: string(name='regionId', position='Host'),
  description?: string(name='description', position='Body'),
  type?: int32(name='type', example='1', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model CreateBusinessLogicResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='FB11F719-9AC8-5C99-AB0A-4709D437FCFC'),
  success?: boolean(name='success', example='true'),
}

model CreateBusinessLogicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateBusinessLogicResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateBusinessLogic  CreateBusinessLogicRequest
  * @return CreateBusinessLogicResponse
 */
async function createBusinessLogic(request: CreateBusinessLogicRequest): CreateBusinessLogicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateBusinessLogic', 'POST', '/gbi/create/logic', 'json', false, 'json', request);
}

model CreateDatasourceAuthorizationRequest {
  regionId?: string(name='regionId', position='Host'),
  password?: string(name='password', example='password', position='Body'),
  type: int32(name='type', description='This parameter is required.', example='1', position='Body'),
  url?: string(name='url', example='jdbc:mysql://rm-2zedvv990c8d8rj8ejo.mysql.rds.aliyuncs.com:3306/gbi_good_case', position='Body'),
  userName?: string(name='userName', example='root', position='Body'),
  vdbId?: string(name='vdbId', example='vdb-E0F693C8-9F72-5830-B81A-696C9D8EBBD1', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model CreateDatasourceAuthorizationResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='E0F693C8-9F72-5830-B81A-696C9D8EBBD1'),
  success?: boolean(name='success', example='true'),
}

model CreateDatasourceAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasourceAuthorizationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDatasourceAuthorization  CreateDatasourceAuthorizationRequest
  * @return CreateDatasourceAuthorizationResponse
 */
async function createDatasourceAuthorization(request: CreateDatasourceAuthorizationRequest): CreateDatasourceAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDatasourceAuthorization', 'POST', '/gbi/create/datasource', 'json', false, 'json', request);
}

model CreateSynonymsRequest {
  regionId?: string(name='regionId', position='Host'),
  columns?: [ string ](name='columns', position='Body'),
  word: string(name='word', description='This parameter is required.', position='Body'),
  wordSynonyms: [ string ](name='wordSynonyms', description='This parameter is required.', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model CreateSynonymsResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='FB11F719-9AC8-5C99-AB0A-4709D437FCFC'),
  success?: boolean(name='success', example='true'),
}

model CreateSynonymsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSynonymsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSynonyms  CreateSynonymsRequest
  * @return CreateSynonymsResponse
 */
async function createSynonyms(request: CreateSynonymsRequest): CreateSynonymsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSynonyms', 'POST', '/gbi/create/synonyms', 'json', false, 'json', request);
}

model CreateVirtualDatasourceInstanceRequest {
  regionId?: string(name='regionId', position='Host'),
  description?: string(name='description', position='Body'),
  name?: string(name='name', example='virtual-instance-1', position='Body'),
  type?: int32(name='type', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model CreateVirtualDatasourceInstanceResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='D02D895A-5E58-5A9F-963D-D8B027AB7AE2'),
  success?: boolean(name='success', example='true'),
}

model CreateVirtualDatasourceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVirtualDatasourceInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateVirtualDatasourceInstance  CreateVirtualDatasourceInstanceRequest
  * @return CreateVirtualDatasourceInstanceResponse
 */
async function createVirtualDatasourceInstance(request: CreateVirtualDatasourceInstanceRequest): CreateVirtualDatasourceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateVirtualDatasourceInstance', 'POST', '/gbi/virtualDatasource/createVirtualDatasourceInstance', 'json', false, 'json', request);
}

model DeleteBusinessLogicRequest {
  regionId?: string(name='regionId', position='Host'),
  businessLogicIdKeys: [ string ](name='businessLogicIdKeys', description='This parameter is required.', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model DeleteBusinessLogicResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='FB11F719-9AC8-5C99-AB0A-4709D437FCFC'),
  success?: boolean(name='success', example='true'),
}

model DeleteBusinessLogicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteBusinessLogicResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteBusinessLogic  DeleteBusinessLogicRequest
  * @return DeleteBusinessLogicResponse
 */
async function deleteBusinessLogic(request: DeleteBusinessLogicRequest): DeleteBusinessLogicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteBusinessLogic', 'POST', '/gbi/delete/logic', 'json', false, 'json', request);
}

model DeleteColumnRequest {
  regionId?: string(name='regionId', position='Host'),
  columnIdKey: string(name='columnIdKey', description='This parameter is required.', example='column-AAAAAAAAh6Q9ERazKYFvkA', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model DeleteColumnResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='D02D895A-5E58-5A9F-963D-D8B027AB7AE2'),
  success?: boolean(name='success', example='true'),
}

model DeleteColumnResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteColumnResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteColumn  DeleteColumnRequest
  * @return DeleteColumnResponse
 */
async function deleteColumn(request: DeleteColumnRequest): DeleteColumnResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteColumn', 'POST', '/gbi/delete/column', 'json', false, 'json', request);
}

model DeleteSelectedTableRequest {
  regionId?: string(name='regionId', position='Host'),
  tableIdKey: string(name='tableIdKey', description='This parameter is required.', example='table-AAAAAAAAFQBwSLJkUj4CYg', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model DeleteSelectedTableResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='45390C6D-016D-5030-BF65-031ED1F65003'),
  success?: boolean(name='success', example='true'),
}

model DeleteSelectedTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSelectedTableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSelectedTable  DeleteSelectedTableRequest
  * @return DeleteSelectedTableResponse
 */
async function deleteSelectedTable(request: DeleteSelectedTableRequest): DeleteSelectedTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSelectedTable', 'POST', '/gbi/delete/table', 'json', false, 'json', request);
}

model DeleteVirtualDatasourceInstanceRequest {
  regionId?: string(name='regionId', position='Host'),
  vdbId: string(name='vdbId', description='This parameter is required.', example='vdb-7D63529B-5D42-5BF0-84E4-F742FFE02E7F', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model DeleteVirtualDatasourceInstanceResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='7D63529B-5D42-5BF0-84E4-F742FFE02E7F'),
  success?: boolean(name='success', example='true'),
}

model DeleteVirtualDatasourceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVirtualDatasourceInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteVirtualDatasourceInstance  DeleteVirtualDatasourceInstanceRequest
  * @return DeleteVirtualDatasourceInstanceResponse
 */
async function deleteVirtualDatasourceInstance(request: DeleteVirtualDatasourceInstanceRequest): DeleteVirtualDatasourceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteVirtualDatasourceInstance', 'POST', '/gbi/virtualDatasource/deleteVirtualDatasourceInstance', 'json', false, 'json', request);
}

model ListBusinessLogicRequest {
  regionId?: string(name='regionId', position='Host'),
  maxResults?: int32(name='maxResults', example='10', position='Body'),
  nextToken?: string(name='nextToken', example='e8Z0nRyY51ZQmYljqGNK', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model ListBusinessLogicResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='FB11F719-9AC8-5C99-AB0A-4709D437FCFC'),
  success?: boolean(name='success', example='true'),
}

model ListBusinessLogicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBusinessLogicResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListBusinessLogic  ListBusinessLogicRequest
  * @return ListBusinessLogicResponse
 */
async function listBusinessLogic(request: ListBusinessLogicRequest): ListBusinessLogicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListBusinessLogic', 'POST', '/gbi/list/logic', 'json', false, 'json', request);
}

model ListColumnRequest {
  regionId?: string(name='regionId', position='Host'),
  maxResults?: int32(name='maxResults', example='10', position='Body'),
  nextToken?: int32(name='nextToken', example='e8Z0nRyY51ZQmYljqGNK', position='Body'),
  tableIdKey: string(name='tableIdKey', description='This parameter is required.', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model ListColumnResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='FB11F719-9AC8-5C99-AB0A-4709D437FCFC'),
  success?: boolean(name='success', example='true'),
}

model ListColumnResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListColumnResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListColumn  ListColumnRequest
  * @return ListColumnResponse
 */
async function listColumn(request: ListColumnRequest): ListColumnResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListColumn', 'POST', '/gbi/list/column', 'json', false, 'json', request);
}

model ListEnumMappingRequest {
  regionId?: string(name='regionId', position='Host'),
  columnIdKey: string(name='columnIdKey', description='This parameter is required.', example='column-AAAAAAAAh6cWOUPagYstkg', position='Body'),
  tableIdKey: string(name='tableIdKey', description='This parameter is required.', example='table-AAAAAAAAFQBwSLJkUj4CYg', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model ListEnumMappingResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='FB11F719-9AC8-5C99-AB0A-4709D437FCFC'),
  success?: boolean(name='success', example='true'),
}

model ListEnumMappingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnumMappingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEnumMapping  ListEnumMappingRequest
  * @return ListEnumMappingResponse
 */
async function listEnumMapping(request: ListEnumMappingRequest): ListEnumMappingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEnumMapping', 'POST', '/gbi/list/mapping', 'json', false, 'json', request);
}

model ListSelectedTablesRequest {
  regionId?: string(name='regionId', position='Host'),
  maxResults?: int32(name='maxResults', example='10', position='Body'),
  nextToken?: string(name='nextToken', example='e8Z0nRyY51ZQmYljqGNK', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model ListSelectedTablesResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='FB11F719-9AC8-5C99-AB0A-4709D437FCFC'),
  success?: boolean(name='success', example='true'),
}

model ListSelectedTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSelectedTablesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSelectedTables  ListSelectedTablesRequest
  * @return ListSelectedTablesResponse
 */
async function listSelectedTables(request: ListSelectedTablesRequest): ListSelectedTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSelectedTables', 'POST', '/gbi/list/datasource/table', 'json', false, 'json', request);
}

model ListSynonymsRequest {
  regionId?: string(name='regionId', position='Host'),
  maxResults?: long(name='maxResults', example='10', position='Body'),
  nextToken?: string(name='nextToken', example='e8Z0nRyY51ZQmYljqGNK', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model ListSynonymsResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='{
  "data": {
    "data": [
      {
        "gmtModified": 1734401404000,
        "columns": [
          "test.id",
          "user_info.createdt"
        ],
        "synonymIdKey": "synonyms-AAAAAAAAAVLaD8z63NnFhA",
        "wordSynonyms": [
          "1"
        ],
        "workSpaceId": "10024809",
        "gmtCreate": 1734401404000,
        "word": "1",
        "status": 1
      }
    ],
    "nextToken": "k1BLjEN114wyfrhDHoJlbg==",
    "totalCount": 0
  }
}'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='D02D895A-5E58-5A9F-963D-D8B027AB7AE2'),
  success?: boolean(name='success', example='true'),
}

model ListSynonymsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSynonymsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSynonyms  ListSynonymsRequest
  * @return ListSynonymsResponse
 */
async function listSynonyms(request: ListSynonymsRequest): ListSynonymsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSynonyms', 'POST', '/gbi/list/synonyms', 'json', false, 'json', request);
}

model ListVirtualDatasourceInstanceRequest {
  regionId?: string(name='regionId', position='Host'),
  maxResults?: int32(name='maxResults', example='100', position='Body'),
  nextToken?: string(name='nextToken', example='e8Z0nRyY51ZQmYljqGNK', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model ListVirtualDatasourceInstanceResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='45390C6D-016D-5030-BF65-031ED1F65003'),
  success?: boolean(name='success', example='true'),
}

model ListVirtualDatasourceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVirtualDatasourceInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListVirtualDatasourceInstance  ListVirtualDatasourceInstanceRequest
  * @return ListVirtualDatasourceInstanceResponse
 */
async function listVirtualDatasourceInstance(request: ListVirtualDatasourceInstanceRequest): ListVirtualDatasourceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListVirtualDatasourceInstance', 'POST', '/gbi/virtualDatasource/listVirtualDatasourceInstance', 'json', false, 'json', request);
}

model RecoverColumnRequest {
  regionId?: string(name='regionId', position='Host'),
  columnIdKey: string(name='columnIdKey', description='This parameter is required.', example='column-AAAAAAAAh6cWOUPagYstkg', position='Body'),
  tableIdKey: string(name='tableIdKey', description='This parameter is required.', example='table-AAAAAAAAFQBwSLJkUj4CYg', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model RecoverColumnResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='FB11F719-9AC8-5C99-AB0A-4709D437FCFC'),
  success?: boolean(name='success', example='true'),
}

model RecoverColumnResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecoverColumnResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RecoverColumn  RecoverColumnRequest
  * @return RecoverColumnResponse
 */
async function recoverColumn(request: RecoverColumnRequest): RecoverColumnResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RecoverColumn', 'POST', '/gbi/recover/column', 'json', false, 'json', request);
}

model ResyncTableRequest {
  regionId?: string(name='regionId', position='Host'),
  keep?: boolean(name='keep', position='Body'),
  tableIdKey: string(name='tableIdKey', description='This parameter is required.', example='table-AAAAAAAAFQBwSLJkUj4CYg', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model ResyncTableResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='FB11F719-9AC8-5C99-AB0A-4709D437FCFC'),
  success?: boolean(name='success', example='true'),
}

model ResyncTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResyncTableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResyncTable  ResyncTableRequest
  * @return ResyncTableResponse
 */
async function resyncTable(request: ResyncTableRequest): ResyncTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ResyncTable', 'POST', '/gbi/refresh/table', 'json', false, 'json', request);
}

model RunDataAnalysisRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Path'),
  agentCtrlParams?: any(name='agentCtrlParams', position='Body'),
  dataRole?: [ string ](name='dataRole', position='Body'),
  generateSqlOnly?: boolean(name='generateSqlOnly', example='true', position='Body'),
  query: string(name='query', description='This parameter is required.', position='Body'),
  sessionId?: string(name='sessionId', example='sessionID', position='Body'),
  specificationType?: string(name='specificationType', example='STANDARD_MIX', position='Body'),
  userParams?: any(name='userParams', position='Body'),
}

model RunDataAnalysisResponseBody = {
  code?: string(name='code'),
  data?: {
    attempts?: [ any ](name='attempts'),
    chat?: {
      text?: string(name='text'),
    }(name='chat'),
    errorMessage?: string(name='errorMessage', example='Access was denied, message: No such namespace namespaces/tech-scp-chain7.'),
    event?: string(name='event', example='rewrite'),
    evidence?: string(name='evidence'),
    httpStatusCode?: long(name='httpStatusCode'),
    requestId?: string(name='requestId', example='DA2578F7-88A5-5D6E-9305-33E724E97D60'),
    rewrite?: string(name='rewrite'),
    selector?: [ string ](name='selector'),
    sessionId?: string(name='sessionId', example='sessionid1'),
    sql?: string(name='sql', example='select p.product_id, p.product_name, sum(o.quantity) as total_sales from products p join orders o on p.product_id = o.product_id where o.order_date between \\"2022-10-22\\" and \\"2024-10-22\\" group by p.product_id, p.product_name having total_sales > 5'),
    sqlData?: {
      column?: [ string ](name='column'),
      data?: [  map[string]any ](name='data'),
    }(name='sqlData'),
    sqlError?: string(name='sqlError', example='Can not issue data manipulation statements with executeQuery()'),
    visualization?: {
      data?: {
        option?: string(name='option'),
        plotType?: string(name='plotType', example='bar'),
        stack?: boolean(name='stack'),
        xAxis?: [ string ](name='xAxis'),
        yAxis?: [ string ](name='yAxis'),
      }(name='data'),
      text?: string(name='text'),
    }(name='visualization'),
  }(name='data'),
  httpStatusCode?: long(name='httpStatusCode'),
  message?: string(name='message'),
}

model RunDataAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunDataAnalysisResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunDataAnalysis  RunDataAnalysisRequest
  * @return RunDataAnalysisResponse
 */
async function runDataAnalysis(request: RunDataAnalysisRequest): RunDataAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunDataAnalysis', 'POST', '/{workspaceId}/gbi/runDataAnalysis', 'json', false, 'json', request);
}

function runDataAnalysisWithResponseIterable(request: RunDataAnalysisRequest): iterator[RunDataAnalysisResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunDataAnalysis', 'POST', '/{workspaceId}/gbi/runDataAnalysis', 'json', false, 'json', request);
}

model RunDataResultAnalysisRequest {
  regionId?: string(name='regionId', position='Host'),
  analysisMode?: string(name='analysisMode', example='all', position='Body'),
  requestId: string(name='requestId', description='This parameter is required.', example='FF76AD3F-8B32-567E-819B-0D3738917006', position='Body'),
  sqlData?: {
    column?: [ string ](name='column'),
    data?: [ map[string]string ](name='data'),
  }(name='sqlData', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model RunDataResultAnalysisResponseBody = {
  data?: {
    errorMessage?: string(name='errorMessage', example='Access was denied, message: No such namespace namespaces/tech-scp-chain7.'),
    event?: string(name='event', example='result'),
    requestId?: string(name='requestId', example='DA2578F7-88A5-5D6E-9305-33E724E97D60'),
    rewrite?: string(name='rewrite'),
    sql?: string(name='sql', example='select p.product_id, p.product_name, sum(o.quantity) as total_sales from products p join orders o on p.product_id = o.product_id where o.order_date between \\"2022-10-22\\" and \\"2024-10-22\\" group by p.product_id, p.product_name having total_sales > 5'),
    visualization?: {
      data?: {
        plotType?: string(name='plotType', example='bar'),
        xAxis?: [ string ](name='xAxis'),
        yAxis?: [ string ](name='yAxis'),
      }(name='data'),
      text?: string(name='text'),
    }(name='visualization'),
  }(name='data'),
}

model RunDataResultAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunDataResultAnalysisResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunDataResultAnalysis  RunDataResultAnalysisRequest
  * @return RunDataResultAnalysisResponse
 */
async function runDataResultAnalysis(request: RunDataResultAnalysisRequest): RunDataResultAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunDataResultAnalysis', 'POST', '/gbi/runDataResultAnalysis', 'json', false, 'json', request);
}

function runDataResultAnalysisWithResponseIterable(request: RunDataResultAnalysisRequest): iterator[RunDataResultAnalysisResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunDataResultAnalysis', 'POST', '/gbi/runDataResultAnalysis', 'json', false, 'json', request);
}

model RunSqlGenerationRequest {
  regionId?: string(name='regionId', position='Host'),
  query: string(name='query', description='This parameter is required.', position='Body'),
  sessionId?: string(name='sessionId', example='d5eced84-fd25-43ee-a245-adb4e4a8c3be', position='Body'),
  specificationType?: string(name='specificationType', example='STANDARD_MIX', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model RunSqlGenerationResponseBody = {
  data?: {
    chat?: {
      text?: string(name='text'),
    }(name='chat'),
    errorMessage?: string(name='errorMessage', example='Access was denied, message: No such namespace namespaces/tech-scp-chain7.'),
    event?: string(name='event', example='sql'),
    evidence?: string(name='evidence'),
    requestId?: string(name='requestId', example='DA2578F7-88A5-5D6E-9305-33E724E97D60'),
    rewrite?: string(name='rewrite'),
    selector?: [ string ](name='selector'),
    sessionId?: string(name='sessionId', example='f64c38dd-a235-4bb4-ae6c-79eaedcba699'),
    sql?: string(name='sql', example='select p.product_id, p.product_name, sum(o.quantity) as total_sales from products p join orders o on p.product_id = o.product_id where o.order_date between \\"2022-10-22\\" and \\"2024-10-22\\" group by p.product_id, p.product_name having total_sales > 5'),
    sqlError?: string(name='sqlError', example='Can not issue data manipulation statements with executeQuery()'),
  }(name='data'),
}

model RunSqlGenerationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunSqlGenerationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunSqlGeneration  RunSqlGenerationRequest
  * @return RunSqlGenerationResponse
 */
async function runSqlGeneration(request: RunSqlGenerationRequest): RunSqlGenerationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunSqlGeneration', 'POST', '/gbi/runSqlGeneration', 'json', false, 'json', request);
}

function runSqlGenerationWithResponseIterable(request: RunSqlGenerationRequest): iterator[RunSqlGenerationResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunSqlGeneration', 'POST', '/gbi/runSqlGeneration', 'json', false, 'json', request);
}

model SaveVirtualDatasourceDdlRequest {
  regionId?: string(name='regionId', position='Host'),
  ddl: string(name='ddl', description='This parameter is required.', position='Body'),
  vdbId: string(name='vdbId', description='This parameter is required.', example='vdb-E0F693C8-9F72-5830-B81A-696C9D8EBBD1', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model SaveVirtualDatasourceDdlResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='72ABCA5B-1E93-55D3-8A61-6D8A03CC5C8B'),
  success?: boolean(name='success', example='true'),
}

model SaveVirtualDatasourceDdlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveVirtualDatasourceDdlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SaveVirtualDatasourceDdl  SaveVirtualDatasourceDdlRequest
  * @return SaveVirtualDatasourceDdlResponse
 */
async function saveVirtualDatasourceDdl(request: SaveVirtualDatasourceDdlRequest): SaveVirtualDatasourceDdlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SaveVirtualDatasourceDdl', 'POST', '/gbi/virtualDatasource/addDdl2VirtualInstance', 'json', false, 'json', request);
}

model SyncRemoteTablesRequest {
  regionId?: string(name='regionId', position='Host'),
  keepTableNames?: [ string ](name='keepTableNames', position='Body'),
  noModifiedTableNames?: [ string ](name='noModifiedTableNames', position='Body'),
  pullSamples?: boolean(name='pullSamples', example='true', position='Body'),
  tableNames: [ string ](name='tableNames', description='This parameter is required.', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model SyncRemoteTablesResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='E9563C85-5810-5835-B68C-78580BC3169E'),
  success?: boolean(name='success', example='true'),
}

model SyncRemoteTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncRemoteTablesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SyncRemoteTables  SyncRemoteTablesRequest
  * @return SyncRemoteTablesResponse
 */
async function syncRemoteTables(request: SyncRemoteTablesRequest): SyncRemoteTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SyncRemoteTables', 'POST', '/gbi/update/datasource/tables', 'json', false, 'json', request);
}

model UpdateBusinessLogicRequest {
  regionId?: string(name='regionId', position='Host'),
  businessLogicIdKey: string(name='businessLogicIdKey', description='This parameter is required.', example='businessLogic-AAAAAAAAAGAIyJoP7LbKuA', position='Body'),
  description: string(name='description', description='This parameter is required.', position='Body'),
  type: long(name='type', description='This parameter is required.', example='0', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model UpdateBusinessLogicResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='FB11F719-9AC8-5C99-AB0A-4709D437FCFC'),
  success?: boolean(name='success', example='true'),
}

model UpdateBusinessLogicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateBusinessLogicResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateBusinessLogic  UpdateBusinessLogicRequest
  * @return UpdateBusinessLogicResponse
 */
async function updateBusinessLogic(request: UpdateBusinessLogicRequest): UpdateBusinessLogicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateBusinessLogic', 'POST', '/gbi/update/logic', 'json', false, 'json', request);
}

model UpdateColumnRequest {
  regionId?: string(name='regionId', position='Host'),
  chineseName?: string(name='chineseName', position='Body'),
  columnIdKey: string(name='columnIdKey', description='This parameter is required.', example='column-AAAAAAAAh6cWOUPagYstkg', position='Body'),
  description?: string(name='description', position='Body'),
  enumType: int32(name='enumType', description='This parameter is required.', example='1', position='Body'),
  enumValues?: [ string ](name='enumValues', position='Body'),
  rangeMax?: long(name='rangeMax', example='2000', position='Body'),
  rangeMin?: long(name='rangeMin', example='0', position='Body'),
  samples?: [ string ](name='samples', position='Body'),
  tableIdKey: string(name='tableIdKey', description='This parameter is required.', example='table-AAAAAAAAFQBwSLJkUj4CYg', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model UpdateColumnResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='45390C6D-016D-5030-BF65-031ED1F65003'),
  success?: boolean(name='success', example='true'),
}

model UpdateColumnResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateColumnResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateColumn  UpdateColumnRequest
  * @return UpdateColumnResponse
 */
async function updateColumn(request: UpdateColumnRequest): UpdateColumnResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateColumn', 'POST', '/gbi/update/column', 'json', false, 'json', request);
}

model UpdateEnumMappingRequest {
  regionId?: string(name='regionId', position='Host'),
  columnIdKey: string(name='columnIdKey', description='This parameter is required.', example='column-AAAAAAAAh6cWOUPagYstkg', position='Body'),
  enumMapping?: map[string][ string ](name='enumMapping', position='Body'),
  tableIdKey: string(name='tableIdKey', description='This parameter is required.', example='table-AAAAAAAAFQBwSLJkUj4CYg', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model UpdateEnumMappingResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='FB11F719-9AC8-5C99-AB0A-4709D437FCFC'),
  success?: boolean(name='success', example='true'),
}

model UpdateEnumMappingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEnumMappingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateEnumMapping  UpdateEnumMappingRequest
  * @return UpdateEnumMappingResponse
 */
async function updateEnumMapping(request: UpdateEnumMappingRequest): UpdateEnumMappingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateEnumMapping', 'POST', '/gbi/update/mapping', 'json', false, 'json', request);
}

model UpdateSynonymsRequest {
  regionId?: string(name='regionId', position='Host'),
  columns?: [ string ](name='columns', position='Body'),
  synonymIdKey: string(name='synonymIdKey', description='This parameter is required.', example='synonyms-AAAAAAAAAUpwTTVrwTFJwQ', position='Body'),
  word: string(name='word', description='This parameter is required.', position='Body'),
  wordSynonyms: [ string ](name='wordSynonyms', description='This parameter is required.', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model UpdateSynonymsResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='7D63529B-5D42-5BF0-84E4-F742FFE02E7F'),
  success?: boolean(name='success', example='true'),
}

model UpdateSynonymsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSynonymsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateSynonyms  UpdateSynonymsRequest
  * @return UpdateSynonymsResponse
 */
async function updateSynonyms(request: UpdateSynonymsRequest): UpdateSynonymsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateSynonyms', 'POST', '/gbi/update/synonyms', 'json', false, 'json', request);
}

model UpdateTableInfoRequest {
  regionId?: string(name='regionId', position='Host'),
  description?: string(name='description', position='Body'),
  foreignKeys?: [ string ](name='foreignKeys', position='Body'),
  primaryKey?: string(name='primaryKey', example='id', position='Body'),
  tableIdKey: string(name='tableIdKey', description='This parameter is required.', example='table-AAAAAAAAFQBwSLJkUj4CYg', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model UpdateTableInfoResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='E9563C85-5810-5835-B68C-78580BC3169E'),
  success?: boolean(name='success', example='true'),
}

model UpdateTableInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTableInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTableInfo  UpdateTableInfoRequest
  * @return UpdateTableInfoResponse
 */
async function updateTableInfo(request: UpdateTableInfoRequest): UpdateTableInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTableInfo', 'POST', '/gbi/update/table', 'json', false, 'json', request);
}

model UpdateVirtualDatasourceInstanceRequest {
  regionId?: string(name='regionId', position='Host'),
  description?: string(name='description', position='Body'),
  name?: string(name='name', position='Body'),
  type?: int32(name='type', position='Body'),
  vdbId: string(name='vdbId', description='This parameter is required.', example='vdb-E0F693C8-9F72-5830-B81A-696C9D8EBBD1', position='Body'),
  workspaceId?: string(name='workspaceId', example='llm-2v3934xtp49esw64', position='Query'),
}

model UpdateVirtualDatasourceInstanceResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='E9563C85-5810-5835-B68C-78580BC3169E'),
  success?: boolean(name='success', example='true'),
}

model UpdateVirtualDatasourceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateVirtualDatasourceInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateVirtualDatasourceInstance  UpdateVirtualDatasourceInstanceRequest
  * @return UpdateVirtualDatasourceInstanceResponse
 */
async function updateVirtualDatasourceInstance(request: UpdateVirtualDatasourceInstanceRequest): UpdateVirtualDatasourceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateVirtualDatasourceInstance', 'POST', '/gbi/virtualDatasource/updateVirtualDatasourceInstance', 'json', false, 'json', request);
}

