/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'DataAnalysisGBI';
  @version = '2024-08-23';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CancelDatasourceAuthorizationRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model CancelDatasourceAuthorizationResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='FB11F719-9AC8-5C99-AB0A-4709D437FCFC'),
  success?: boolean(name='success', example='true'),
}

model CancelDatasourceAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelDatasourceAuthorizationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelDatasourceAuthorization  CancelDatasourceAuthorizationRequest
  * @return CancelDatasourceAuthorizationResponse
 */
async function cancelDatasourceAuthorization(request: CancelDatasourceAuthorizationRequest): CancelDatasourceAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelDatasourceAuthorization', 'POST', '/gbi/cancel/datasource', 'json', false, 'json', request);
}

model CreateDatasourceAuthorizationRequest {
  regionId?: string(name='regionId', position='Host'),
  password?: string(name='password', example='password', position='Body'),
  type: int32(name='type', description='This parameter is required.', example='1', position='Body'),
  url?: string(name='url', example='jdbc:mysql://rm-2zedvv990c8d8rj8ejo.mysql.rds.aliyuncs.com:3306/gbi_good_case', position='Body'),
  userName?: string(name='userName', example='root', position='Body'),
  vdbId?: string(name='vdbId', example='vdb-E0F693C8-9F72-5830-B81A-696C9D8EBBD1', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model CreateDatasourceAuthorizationResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='E0F693C8-9F72-5830-B81A-696C9D8EBBD1'),
  success?: boolean(name='success', example='true'),
}

model CreateDatasourceAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasourceAuthorizationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDatasourceAuthorization  CreateDatasourceAuthorizationRequest
  * @return CreateDatasourceAuthorizationResponse
 */
async function createDatasourceAuthorization(request: CreateDatasourceAuthorizationRequest): CreateDatasourceAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDatasourceAuthorization', 'POST', '/gbi/create/datasource', 'json', false, 'json', request);
}

model CreateVirtualDatasourceInstanceRequest {
  regionId?: string(name='regionId', position='Host'),
  description?: string(name='description', position='Body'),
  name?: string(name='name', example='virtual-instance-1', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model CreateVirtualDatasourceInstanceResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='D02D895A-5E58-5A9F-963D-D8B027AB7AE2'),
  success?: boolean(name='success', example='true'),
}

model CreateVirtualDatasourceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVirtualDatasourceInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateVirtualDatasourceInstance  CreateVirtualDatasourceInstanceRequest
  * @return CreateVirtualDatasourceInstanceResponse
 */
async function createVirtualDatasourceInstance(request: CreateVirtualDatasourceInstanceRequest): CreateVirtualDatasourceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateVirtualDatasourceInstance', 'POST', '/gbi/virtualDatasource/createVirtualDatasourceInstance', 'json', false, 'json', request);
}

model DeleteVirtualDatasourceInstanceRequest {
  regionId?: string(name='regionId', position='Host'),
  vdbId: string(name='vdbId', description='This parameter is required.', example='vdb-7D63529B-5D42-5BF0-84E4-F742FFE02E7F', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model DeleteVirtualDatasourceInstanceResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='7D63529B-5D42-5BF0-84E4-F742FFE02E7F'),
  success?: boolean(name='success', example='true'),
}

model DeleteVirtualDatasourceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVirtualDatasourceInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteVirtualDatasourceInstance  DeleteVirtualDatasourceInstanceRequest
  * @return DeleteVirtualDatasourceInstanceResponse
 */
async function deleteVirtualDatasourceInstance(request: DeleteVirtualDatasourceInstanceRequest): DeleteVirtualDatasourceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteVirtualDatasourceInstance', 'POST', '/gbi/virtualDatasource/deleteVirtualDatasourceInstance', 'json', false, 'json', request);
}

model ListVirtualDatasourceInstanceRequest {
  regionId?: string(name='regionId', position='Host'),
  maxResults?: int32(name='maxResults', example='100', position='Body'),
  nextToken?: string(name='nextToken', example='e8Z0nRyY51ZQmYljqGNK', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model ListVirtualDatasourceInstanceResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='45390C6D-016D-5030-BF65-031ED1F65003'),
  success?: boolean(name='success', example='true'),
}

model ListVirtualDatasourceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVirtualDatasourceInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListVirtualDatasourceInstance  ListVirtualDatasourceInstanceRequest
  * @return ListVirtualDatasourceInstanceResponse
 */
async function listVirtualDatasourceInstance(request: ListVirtualDatasourceInstanceRequest): ListVirtualDatasourceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListVirtualDatasourceInstance', 'POST', '/gbi/virtualDatasource/listVirtualDatasourceInstance', 'json', false, 'json', request);
}

model RunDataAnalysisRequest {
  regionId?: string(name='regionId', position='Host'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Path'),
  generateSqlOnly?: boolean(name='generateSqlOnly', example='true', position='Body'),
  query: string(name='query', description='This parameter is required.', position='Body'),
  sessionId?: string(name='sessionId', example='sessionID', position='Body'),
  specificationType?: string(name='specificationType', example='STANDARD_MIX', position='Body'),
}

model RunDataAnalysisResponseBody = {
  code?: string(name='code'),
  data?: {
    errorMessage?: string(name='errorMessage', example='Access was denied, message: No such namespace namespaces/tech-scp-chain7.'),
    event?: string(name='event', example='rewrite'),
    evidence?: string(name='evidence'),
    httpStatusCode?: long(name='httpStatusCode'),
    requestId?: string(name='requestId', example='DA2578F7-88A5-5D6E-9305-33E724E97D60'),
    rewrite?: string(name='rewrite'),
    selector?: [ string ](name='selector'),
    sessionId?: string(name='sessionId', example='sessionid1'),
    sql?: string(name='sql', example='select p.product_id, p.product_name, sum(o.quantity) as total_sales from products p join orders o on p.product_id = o.product_id where o.order_date between \\"2022-10-22\\" and \\"2024-10-22\\" group by p.product_id, p.product_name having total_sales > 5'),
    sqlData?: {
      column?: [ string ](name='column'),
      data?: [  map[string]any ](name='data'),
    }(name='sqlData'),
    sqlError?: string(name='sqlError', example='Can not issue data manipulation statements with executeQuery()'),
    visualization?: {
      data?: {
        plotType?: string(name='plotType', example='bar'),
        xAxis?: [ string ](name='xAxis'),
        yAxis?: [ string ](name='yAxis'),
      }(name='data'),
      text?: string(name='text'),
    }(name='visualization'),
  }(name='data'),
  httpStatusCode?: long(name='httpStatusCode'),
  message?: string(name='message'),
}

model RunDataAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunDataAnalysisResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunDataAnalysis  RunDataAnalysisRequest
  * @return RunDataAnalysisResponse
 */
async function runDataAnalysis(request: RunDataAnalysisRequest): RunDataAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunDataAnalysis', 'POST', '/{workspaceId}/gbi/runDataAnalysis', 'json', false, 'json', request);
}

function runDataAnalysisWithResponseIterable(request: RunDataAnalysisRequest): iterator[RunDataAnalysisResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunDataAnalysis', 'POST', '/{workspaceId}/gbi/runDataAnalysis', 'json', false, 'json', request);
}

model SaveVirtualDatasourceDdlRequest {
  regionId?: string(name='regionId', position='Host'),
  ddl: string(name='ddl', description='This parameter is required.', position='Body'),
  vdbId: string(name='vdbId', description='This parameter is required.', example='vdb-E0F693C8-9F72-5830-B81A-696C9D8EBBD1', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model SaveVirtualDatasourceDdlResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='72ABCA5B-1E93-55D3-8A61-6D8A03CC5C8B'),
  success?: boolean(name='success', example='true'),
}

model SaveVirtualDatasourceDdlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveVirtualDatasourceDdlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SaveVirtualDatasourceDdl  SaveVirtualDatasourceDdlRequest
  * @return SaveVirtualDatasourceDdlResponse
 */
async function saveVirtualDatasourceDdl(request: SaveVirtualDatasourceDdlRequest): SaveVirtualDatasourceDdlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SaveVirtualDatasourceDdl', 'POST', '/gbi/virtualDatasource/addDdl2VirtualInstance', 'json', false, 'json', request);
}

model SyncRemoteTablesRequest {
  regionId?: string(name='regionId', position='Host'),
  keepTableNames?: [ string ](name='keepTableNames', position='Body'),
  pullSamples?: boolean(name='pullSamples', example='true', position='Body'),
  tableNames: [ string ](name='tableNames', description='This parameter is required.', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64', position='Query'),
}

model SyncRemoteTablesResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='E9563C85-5810-5835-B68C-78580BC3169E'),
  success?: boolean(name='success', example='true'),
}

model SyncRemoteTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncRemoteTablesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SyncRemoteTables  SyncRemoteTablesRequest
  * @return SyncRemoteTablesResponse
 */
async function syncRemoteTables(request: SyncRemoteTablesRequest): SyncRemoteTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SyncRemoteTables', 'POST', '/gbi/update/datasource/tables', 'json', false, 'json', request);
}

model UpdateVirtualDatasourceInstanceRequest {
  regionId?: string(name='regionId', position='Host'),
  description?: string(name='description', position='Body'),
  name?: string(name='name', position='Body'),
  vdbId: string(name='vdbId', description='This parameter is required.', example='vdb-E0F693C8-9F72-5830-B81A-696C9D8EBBD1', position='Body'),
  workspaceId?: string(name='workspaceId', example='llm-2v3934xtp49esw64', position='Query'),
}

model UpdateVirtualDatasourceInstanceResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='E9563C85-5810-5835-B68C-78580BC3169E'),
  success?: boolean(name='success', example='true'),
}

model UpdateVirtualDatasourceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateVirtualDatasourceInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateVirtualDatasourceInstance  UpdateVirtualDatasourceInstanceRequest
  * @return UpdateVirtualDatasourceInstanceResponse
 */
async function updateVirtualDatasourceInstance(request: UpdateVirtualDatasourceInstanceRequest): UpdateVirtualDatasourceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateVirtualDatasourceInstance', 'POST', '/gbi/virtualDatasource/updateVirtualDatasourceInstance', 'json', false, 'json', request);
}

