/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('dataanalysisgbi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CancelDatasourceAuthorizationRequest {
  workspaceId?: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64'),
}

model CancelDatasourceAuthorizationResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='FB11F719-9AC8-5C99-AB0A-4709D437FCFC'),
  success?: boolean(name='success', example='true'),
}

model CancelDatasourceAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelDatasourceAuthorizationResponseBody(name='body'),
}

/**
 * @summary 取消关联的数据源授权
 *
 * @param request CancelDatasourceAuthorizationRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CancelDatasourceAuthorizationResponse
 */
async function cancelDatasourceAuthorizationWithOptions(request: CancelDatasourceAuthorizationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelDatasourceAuthorizationResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.workspaceId)) {
    query['workspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelDatasourceAuthorization',
    version = '2024-08-23',
    protocol = 'HTTPS',
    pathname = `/gbi/cancel/datasource`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 取消关联的数据源授权
 *
 * @param request CancelDatasourceAuthorizationRequest
 * @return CancelDatasourceAuthorizationResponse
 */
async function cancelDatasourceAuthorization(request: CancelDatasourceAuthorizationRequest): CancelDatasourceAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return cancelDatasourceAuthorizationWithOptions(request, headers, runtime);
}

model CreateDatasourceAuthorizationRequest {
  password?: string(name='password', example='password'),
  type?: int32(name='type', description='This parameter is required.', example='1'),
  url?: string(name='url', example='jdbc:mysql://rm-2zedvv990c8d8rj8ejo.mysql.rds.aliyuncs.com:3306/gbi_good_case'),
  userName?: string(name='userName', example='root'),
  vdbId?: string(name='vdbId', example='vdb-E0F693C8-9F72-5830-B81A-696C9D8EBBD1'),
  workspaceId?: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64'),
}

model CreateDatasourceAuthorizationResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='E0F693C8-9F72-5830-B81A-696C9D8EBBD1'),
  success?: boolean(name='success', example='true'),
}

model CreateDatasourceAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasourceAuthorizationResponseBody(name='body'),
}

/**
 * @summary 创建数据库关联授权
 *
 * @param request CreateDatasourceAuthorizationRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDatasourceAuthorizationResponse
 */
async function createDatasourceAuthorizationWithOptions(request: CreateDatasourceAuthorizationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDatasourceAuthorizationResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.workspaceId)) {
    query['workspaceId'] = request.workspaceId;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.password)) {
    body['password'] = request.password;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }
  if (!Util.isUnset(request.url)) {
    body['url'] = request.url;
  }
  if (!Util.isUnset(request.userName)) {
    body['userName'] = request.userName;
  }
  if (!Util.isUnset(request.vdbId)) {
    body['vdbId'] = request.vdbId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDatasourceAuthorization',
    version = '2024-08-23',
    protocol = 'HTTPS',
    pathname = `/gbi/create/datasource`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建数据库关联授权
 *
 * @param request CreateDatasourceAuthorizationRequest
 * @return CreateDatasourceAuthorizationResponse
 */
async function createDatasourceAuthorization(request: CreateDatasourceAuthorizationRequest): CreateDatasourceAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createDatasourceAuthorizationWithOptions(request, headers, runtime);
}

model CreateVirtualDatasourceInstanceRequest {
  description?: string(name='description'),
  name?: string(name='name', example='virtual-instance-1'),
  type?: int32(name='type'),
  workspaceId?: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64'),
}

model CreateVirtualDatasourceInstanceResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='D02D895A-5E58-5A9F-963D-D8B027AB7AE2'),
  success?: boolean(name='success', example='true'),
}

model CreateVirtualDatasourceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVirtualDatasourceInstanceResponseBody(name='body'),
}

/**
 * @summary 在指定的业务空间创建虚拟数据源
 *
 * @param request CreateVirtualDatasourceInstanceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateVirtualDatasourceInstanceResponse
 */
async function createVirtualDatasourceInstanceWithOptions(request: CreateVirtualDatasourceInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateVirtualDatasourceInstanceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.workspaceId)) {
    query['workspaceId'] = request.workspaceId;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateVirtualDatasourceInstance',
    version = '2024-08-23',
    protocol = 'HTTPS',
    pathname = `/gbi/virtualDatasource/createVirtualDatasourceInstance`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 在指定的业务空间创建虚拟数据源
 *
 * @param request CreateVirtualDatasourceInstanceRequest
 * @return CreateVirtualDatasourceInstanceResponse
 */
async function createVirtualDatasourceInstance(request: CreateVirtualDatasourceInstanceRequest): CreateVirtualDatasourceInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createVirtualDatasourceInstanceWithOptions(request, headers, runtime);
}

model DeleteVirtualDatasourceInstanceRequest {
  vdbId?: string(name='vdbId', description='This parameter is required.', example='vdb-7D63529B-5D42-5BF0-84E4-F742FFE02E7F'),
  workspaceId?: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64'),
}

model DeleteVirtualDatasourceInstanceResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='7D63529B-5D42-5BF0-84E4-F742FFE02E7F'),
  success?: boolean(name='success', example='true'),
}

model DeleteVirtualDatasourceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVirtualDatasourceInstanceResponseBody(name='body'),
}

/**
 * @summary 删除指定业务空间下面的虚拟数据源实例
 *
 * @param request DeleteVirtualDatasourceInstanceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteVirtualDatasourceInstanceResponse
 */
async function deleteVirtualDatasourceInstanceWithOptions(request: DeleteVirtualDatasourceInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteVirtualDatasourceInstanceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.workspaceId)) {
    query['workspaceId'] = request.workspaceId;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.vdbId)) {
    body['vdbId'] = request.vdbId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVirtualDatasourceInstance',
    version = '2024-08-23',
    protocol = 'HTTPS',
    pathname = `/gbi/virtualDatasource/deleteVirtualDatasourceInstance`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除指定业务空间下面的虚拟数据源实例
 *
 * @param request DeleteVirtualDatasourceInstanceRequest
 * @return DeleteVirtualDatasourceInstanceResponse
 */
async function deleteVirtualDatasourceInstance(request: DeleteVirtualDatasourceInstanceRequest): DeleteVirtualDatasourceInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteVirtualDatasourceInstanceWithOptions(request, headers, runtime);
}

model ListVirtualDatasourceInstanceRequest {
  maxResults?: int32(name='maxResults', example='100'),
  nextToken?: string(name='nextToken', example='e8Z0nRyY51ZQmYljqGNK'),
  workspaceId?: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64'),
}

model ListVirtualDatasourceInstanceResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='45390C6D-016D-5030-BF65-031ED1F65003'),
  success?: boolean(name='success', example='true'),
}

model ListVirtualDatasourceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVirtualDatasourceInstanceResponseBody(name='body'),
}

/**
 * @summary 获取当前业务空间下的数据源实例列表
 *
 * @param request ListVirtualDatasourceInstanceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListVirtualDatasourceInstanceResponse
 */
async function listVirtualDatasourceInstanceWithOptions(request: ListVirtualDatasourceInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListVirtualDatasourceInstanceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.workspaceId)) {
    query['workspaceId'] = request.workspaceId;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.maxResults)) {
    body['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['nextToken'] = request.nextToken;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListVirtualDatasourceInstance',
    version = '2024-08-23',
    protocol = 'HTTPS',
    pathname = `/gbi/virtualDatasource/listVirtualDatasourceInstance`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取当前业务空间下的数据源实例列表
 *
 * @param request ListVirtualDatasourceInstanceRequest
 * @return ListVirtualDatasourceInstanceResponse
 */
async function listVirtualDatasourceInstance(request: ListVirtualDatasourceInstanceRequest): ListVirtualDatasourceInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listVirtualDatasourceInstanceWithOptions(request, headers, runtime);
}

model RunDataAnalysisRequest {
  generateSqlOnly?: boolean(name='generateSqlOnly', example='true'),
  query?: string(name='query', description='This parameter is required.'),
  sessionId?: string(name='sessionId', example='sessionID'),
  specificationType?: string(name='specificationType', example='STANDARD_MIX'),
}

model RunDataAnalysisResponseBody = {
  code?: string(name='code'),
  data?: {
    errorMessage?: string(name='errorMessage', example='Access was denied, message: No such namespace namespaces/tech-scp-chain7.'),
    event?: string(name='event', example='rewrite'),
    evidence?: string(name='evidence'),
    httpStatusCode?: long(name='httpStatusCode'),
    requestId?: string(name='requestId', example='DA2578F7-88A5-5D6E-9305-33E724E97D60'),
    rewrite?: string(name='rewrite'),
    selector?: [ string ](name='selector'),
    sessionId?: string(name='sessionId', example='sessionid1'),
    sql?: string(name='sql', example='select p.product_id, p.product_name, sum(o.quantity) as total_sales from products p join orders o on p.product_id = o.product_id where o.order_date between \\\\"2022-10-22\\\\" and \\\\"2024-10-22\\\\" group by p.product_id, p.product_name having total_sales > 5'),
    sqlData?: {
      column?: [ string ](name='column'),
      data?: [  map[string]any ](name='data'),
    }(name='sqlData'),
    sqlError?: string(name='sqlError', example='Can not issue data manipulation statements with executeQuery()'),
    visualization?: {
      data?: {
        plotType?: string(name='plotType', example='bar'),
        xAxis?: [ string ](name='xAxis'),
        yAxis?: [ string ](name='yAxis'),
      }(name='data'),
      text?: string(name='text'),
    }(name='visualization'),
  }(name='data'),
  httpStatusCode?: long(name='httpStatusCode'),
  message?: string(name='message'),
}

model RunDataAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunDataAnalysisResponseBody(name='body'),
}

/**
 * @summary 运行数据分析
 *
 * @param request RunDataAnalysisRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RunDataAnalysisResponse
 */
async function runDataAnalysisWithOptions(workspaceId: string, request: RunDataAnalysisRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RunDataAnalysisResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.generateSqlOnly)) {
    body['generateSqlOnly'] = request.generateSqlOnly;
  }
  if (!Util.isUnset(request.query)) {
    body['query'] = request.query;
  }
  if (!Util.isUnset(request.sessionId)) {
    body['sessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.specificationType)) {
    body['specificationType'] = request.specificationType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunDataAnalysis',
    version = '2024-08-23',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(workspaceId)}/gbi/runDataAnalysis`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 运行数据分析
 *
 * @param request RunDataAnalysisRequest
 * @return RunDataAnalysisResponse
 */
async function runDataAnalysis(workspaceId: string, request: RunDataAnalysisRequest): RunDataAnalysisResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return runDataAnalysisWithOptions(workspaceId, request, headers, runtime);
}

model SaveVirtualDatasourceDdlRequest {
  ddl?: string(name='ddl', description='This parameter is required.'),
  vdbId?: string(name='vdbId', description='This parameter is required.', example='vdb-E0F693C8-9F72-5830-B81A-696C9D8EBBD1'),
  workspaceId?: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64'),
}

model SaveVirtualDatasourceDdlResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='72ABCA5B-1E93-55D3-8A61-6D8A03CC5C8B'),
  success?: boolean(name='success', example='true'),
}

model SaveVirtualDatasourceDdlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveVirtualDatasourceDdlResponseBody(name='body'),
}

/**
 * @summary 向当前指定的业务空间下的指定虚拟数据源实例添加ddl语句
 *
 * @param request SaveVirtualDatasourceDdlRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return SaveVirtualDatasourceDdlResponse
 */
async function saveVirtualDatasourceDdlWithOptions(request: SaveVirtualDatasourceDdlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveVirtualDatasourceDdlResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.workspaceId)) {
    query['workspaceId'] = request.workspaceId;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.ddl)) {
    body['ddl'] = request.ddl;
  }
  if (!Util.isUnset(request.vdbId)) {
    body['vdbId'] = request.vdbId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SaveVirtualDatasourceDdl',
    version = '2024-08-23',
    protocol = 'HTTPS',
    pathname = `/gbi/virtualDatasource/addDdl2VirtualInstance`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 向当前指定的业务空间下的指定虚拟数据源实例添加ddl语句
 *
 * @param request SaveVirtualDatasourceDdlRequest
 * @return SaveVirtualDatasourceDdlResponse
 */
async function saveVirtualDatasourceDdl(request: SaveVirtualDatasourceDdlRequest): SaveVirtualDatasourceDdlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return saveVirtualDatasourceDdlWithOptions(request, headers, runtime);
}

model SyncRemoteTablesRequest {
  keepTableNames?: [ string ](name='keepTableNames'),
  pullSamples?: boolean(name='pullSamples', example='true'),
  tableNames?: [ string ](name='tableNames', description='This parameter is required.'),
  workspaceId?: string(name='workspaceId', description='This parameter is required.', example='llm-2v3934xtp49esw64'),
}

model SyncRemoteTablesResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='E9563C85-5810-5835-B68C-78580BC3169E'),
  success?: boolean(name='success', example='true'),
}

model SyncRemoteTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncRemoteTablesResponseBody(name='body'),
}

/**
 * @summary 更新当前业务空间所关联的数据表
 *
 * @param request SyncRemoteTablesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return SyncRemoteTablesResponse
 */
async function syncRemoteTablesWithOptions(request: SyncRemoteTablesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncRemoteTablesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.workspaceId)) {
    query['workspaceId'] = request.workspaceId;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.keepTableNames)) {
    body['keepTableNames'] = request.keepTableNames;
  }
  if (!Util.isUnset(request.pullSamples)) {
    body['pullSamples'] = request.pullSamples;
  }
  if (!Util.isUnset(request.tableNames)) {
    body['tableNames'] = request.tableNames;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SyncRemoteTables',
    version = '2024-08-23',
    protocol = 'HTTPS',
    pathname = `/gbi/update/datasource/tables`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新当前业务空间所关联的数据表
 *
 * @param request SyncRemoteTablesRequest
 * @return SyncRemoteTablesResponse
 */
async function syncRemoteTables(request: SyncRemoteTablesRequest): SyncRemoteTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return syncRemoteTablesWithOptions(request, headers, runtime);
}

model UpdateVirtualDatasourceInstanceRequest {
  description?: string(name='description'),
  name?: string(name='name'),
  type?: int32(name='type'),
  vdbId?: string(name='vdbId', description='This parameter is required.', example='vdb-E0F693C8-9F72-5830-B81A-696C9D8EBBD1'),
  workspaceId?: string(name='workspaceId', example='llm-2v3934xtp49esw64'),
}

model UpdateVirtualDatasourceInstanceResponseBody = {
  code?: string(name='code', example='NoAuth'),
  data?: any(name='data', example='true'),
  errorMsg?: string(name='errorMsg', example='NoAuth'),
  requestId?: string(name='requestId', example='E9563C85-5810-5835-B68C-78580BC3169E'),
  success?: boolean(name='success', example='true'),
}

model UpdateVirtualDatasourceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateVirtualDatasourceInstanceResponseBody(name='body'),
}

/**
 * @summary 修改指定业务空间下所指定的虚拟数据源的信息
 *
 * @param request UpdateVirtualDatasourceInstanceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateVirtualDatasourceInstanceResponse
 */
async function updateVirtualDatasourceInstanceWithOptions(request: UpdateVirtualDatasourceInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateVirtualDatasourceInstanceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.workspaceId)) {
    query['workspaceId'] = request.workspaceId;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }
  if (!Util.isUnset(request.vdbId)) {
    body['vdbId'] = request.vdbId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateVirtualDatasourceInstance',
    version = '2024-08-23',
    protocol = 'HTTPS',
    pathname = `/gbi/virtualDatasource/updateVirtualDatasourceInstance`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改指定业务空间下所指定的虚拟数据源的信息
 *
 * @param request UpdateVirtualDatasourceInstanceRequest
 * @return UpdateVirtualDatasourceInstanceResponse
 */
async function updateVirtualDatasourceInstance(request: UpdateVirtualDatasourceInstanceRequest): UpdateVirtualDatasourceInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateVirtualDatasourceInstanceWithOptions(request, headers, runtime);
}

