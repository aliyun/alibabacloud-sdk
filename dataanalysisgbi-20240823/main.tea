/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('dataanalysisgbi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model RunDataAnalysisRequest {
  generateSqlOnly?: boolean(name='generateSqlOnly', example='true'),
  query?: string(name='query', description='This parameter is required.'),
  sessionId?: string(name='sessionId', example='sessionID'),
  specificationType?: string(name='specificationType', example='STANDARD_MIX'),
}

model RunDataAnalysisResponseBody = {
  data?: {
    errorMessage?: string(name='errorMessage', example='Access was denied, message: No such namespace namespaces/tech-scp-chain7.'),
    event?: string(name='event', example='rewrite'),
    evidence?: string(name='evidence'),
    requestId?: string(name='requestId', example='DA2578F7-88A5-5D6E-9305-33E724E97D60'),
    rewrite?: string(name='rewrite'),
    selector?: [ string ](name='selector'),
    sessionId?: string(name='sessionId', example='sessionid1'),
    sql?: string(name='sql', example='select p.product_id, p.product_name, sum(o.quantity) as total_sales from products p join orders o on p.product_id = o.product_id where o.order_date between \\\\"2022-10-22\\\\" and \\\\"2024-10-22\\\\" group by p.product_id, p.product_name having total_sales > 5'),
    sqlData?: {
      column?: [ string ](name='column'),
      data?: [  map[string]any ](name='data'),
    }(name='sqlData'),
    sqlError?: string(name='sqlError', example='Can not issue data manipulation statements with executeQuery()'),
    visualization?: {
      data?: {
        plotType?: string(name='plotType', example='bar'),
        xAxis?: [ string ](name='xAxis'),
        yAxis?: [ string ](name='yAxis'),
      }(name='data'),
      text?: string(name='text'),
    }(name='visualization'),
  }(name='data'),
}

model RunDataAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunDataAnalysisResponseBody(name='body'),
}

/**
 * @summary 运行数据分析
 *
 * @param request RunDataAnalysisRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RunDataAnalysisResponse
 */
async function runDataAnalysisWithOptions(workspaceId: string, request: RunDataAnalysisRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RunDataAnalysisResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.generateSqlOnly)) {
    body['generateSqlOnly'] = request.generateSqlOnly;
  }
  if (!Util.isUnset(request.query)) {
    body['query'] = request.query;
  }
  if (!Util.isUnset(request.sessionId)) {
    body['sessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.specificationType)) {
    body['specificationType'] = request.specificationType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunDataAnalysis',
    version = '2024-08-23',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(workspaceId)}/gbi/runDataAnalysis`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 运行数据分析
 *
 * @param request RunDataAnalysisRequest
 * @return RunDataAnalysisResponse
 */
async function runDataAnalysis(workspaceId: string, request: RunDataAnalysisRequest): RunDataAnalysisResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return runDataAnalysisWithOptions(workspaceId, request, headers, runtime);
}

