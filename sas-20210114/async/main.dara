/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Sas';
  @version = '2021-01-14';
  @endpointRule = 'regional';
  @endpointMap = {
    'cn-qingdao' = 'tds.cn-shanghai.aliyuncs.com',
    'cn-beijing' = 'tds.cn-shanghai.aliyuncs.com',
    'cn-zhangjiakou' = 'tds.cn-shanghai.aliyuncs.com',
    'cn-huhehaote' = 'tds.cn-shanghai.aliyuncs.com',
    'cn-wulanchabu' = 'tds.cn-shanghai.aliyuncs.com',
    'cn-hangzhou' = 'tds.cn-shanghai.aliyuncs.com',
    'cn-shanghai' = 'tds.cn-shanghai.aliyuncs.com',
    'cn-nanjing' = 'tds.cn-shanghai.aliyuncs.com',
    'cn-fuzhou' = 'tds.cn-shanghai.aliyuncs.com',
    'cn-shenzhen' = 'tds.cn-shanghai.aliyuncs.com',
    'cn-heyuan' = 'tds.cn-shanghai.aliyuncs.com',
    'cn-guangzhou' = 'tds.cn-shanghai.aliyuncs.com',
    'ap-southeast-2' = 'tds.ap-southeast-1.aliyuncs.com',
    'ap-southeast-6' = 'tds.ap-southeast-1.aliyuncs.com',
    'ap-northeast-2' = 'tds.ap-southeast-1.aliyuncs.com',
    'ap-southeast-3' = 'tds.ap-southeast-1.aliyuncs.com',
    'ap-northeast-1' = 'tds.ap-southeast-1.aliyuncs.com',
    'ap-southeast-7' = 'tds.ap-southeast-1.aliyuncs.com',
    'cn-chengdu' = 'tds.cn-shanghai.aliyuncs.com',
    'ap-southeast-1' = 'tds.ap-southeast-1.aliyuncs.com',
    'ap-southeast-5' = 'tds.ap-southeast-1.aliyuncs.com',
    'cn-hongkong' = 'tds.cn-shanghai.aliyuncs.com',
    'eu-central-1' = 'tds.ap-southeast-1.aliyuncs.com',
    'us-east-1' = 'tds.ap-southeast-1.aliyuncs.com',
    'us-west-1' = 'tds.ap-southeast-1.aliyuncs.com',
    'eu-west-1' = 'tds.ap-southeast-1.aliyuncs.com',
    'me-east-1' = 'tds.ap-southeast-1.aliyuncs.com',
    'me-central-1' = 'tds.ap-southeast-1.aliyuncs.com',
    'ap-south-1' = 'tds.ap-southeast-1.aliyuncs.com',
    'cn-beijing-finance-1' = 'tds.cn-shanghai.aliyuncs.com',
    'cn-hangzhou-finance' = 'tds.cn-shanghai.aliyuncs.com',
    'cn-shanghai-finance-1' = 'tds.cn-shanghai.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'tds.cn-shanghai.aliyuncs.com',
    'cn-heyuan-acdr-1' = 'tds.cn-shanghai.aliyuncs.com',
    'cn-north-2-gov-1' = 'tds.cn-shanghai.aliyuncs.com',
    'cn-qingdao-acdr-ut-1' = 'tds.cn-shanghai.aliyuncs.com',
    'cn-shanghai-mybk' = 'tds.cn-shanghai.aliyuncs.com',
    'cn-wuhan-lr' = 'tds.cn-shanghai.aliyuncs.com',
    'cn-zhengzhou-jva' = 'tds.cn-shanghai.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CreateScreenSettingRequest {
  id?: int32(name='Id', example='123', position='Query'),
  logoPower: boolean(name='LogoPower', description='This parameter is required.', example='false', position='Query'),
  logoUrl: string(name='LogoUrl', description='This parameter is required.', example='https://img.alicdn.com/tfs/xxxx.png', position='Query'),
  monitorUrl?: string(name='MonitorUrl', example='https://monitor.xxxxxxx', position='Query'),
  screenDataMap: string(name='ScreenDataMap', description='This parameter is required.', example='[{"positionId":1,"componentId":3,"date":"7-day"},{"positionId":2,"componentId":1,"date":"0-second"},{"positionId":3,"componentId":8,"date":"15-day"},{"positionId":4,"componentId":11,"date":"15-day"},{"positionId":5,"componentId":23,"date":"24-hour"},{"positionId":6,"componentId":17,"date":"24-hour"},{"positionId":7,"componentId":13,"date":"24-hour"},{"positionId":8,"componentId":25,"date":"0-second"}]', position='Query'),
  screenDefault?: int32(name='ScreenDefault', example='0', position='Query'),
  title: string(name='Title', description='This parameter is required.', example='test', position='Query'),
}

model CreateScreenSettingResponseBody = {
  id?: int32(name='Id', example='123'),
  requestId?: string(name='RequestId', example='898F7AA7-CECD-5EC7-AF4D-664C601B****'),
}

model CreateScreenSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateScreenSettingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateScreenSetting  CreateScreenSettingRequest
  * @return CreateScreenSettingResponse
 */
async function createScreenSetting(request: CreateScreenSettingRequest): CreateScreenSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateScreenSetting', 'POST', '/', 'json', false, 'json', request);
}

model DeleteScreenSettingRequest {
  id: long(name='Id', description='This parameter is required.', example='123', position='Query'),
}

model DeleteScreenSettingResponseBody = {
  requestId?: string(name='RequestId', example='CE500770-42D3-442E-9DDD-156E0F9F****'),
}

model DeleteScreenSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteScreenSettingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteScreenSetting  DeleteScreenSettingRequest
  * @return DeleteScreenSettingResponse
 */
async function deleteScreenSetting(request: DeleteScreenSettingRequest): DeleteScreenSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteScreenSetting', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScreenAlarmEventListRequest {
  alarmEventName?: string(name='AlarmEventName', position='Query'),
  alarmEventType?: string(name='AlarmEventType', position='Query'),
  currentPage: int32(name='CurrentPage', description='This parameter is required.', example='1', position='Query'),
  dealed?: string(name='Dealed', example='Y', position='Query'),
  from: string(name='From', description='This parameter is required.', example='sas', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  levels?: string(name='Levels', example='serious', position='Query'),
  pageSize: string(name='PageSize', description='This parameter is required.', example='20', position='Query'),
  remark?: string(name='Remark', example='222.185.XX.XX', position='Query'),
  timeEnd?: string(name='TimeEnd', example='1683862286000', position='Query'),
  timeStart?: string(name='TimeStart', example='1687104000000', position='Query'),
}

model DescribeScreenAlarmEventListResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', example='2'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='09969D2C-4FAD-429E-BFBF-9A60DEF8BF6F'),
  suspEvents?: [ 
    {
      alarmEventName?: string(name='AlarmEventName'),
      alarmEventType?: string(name='AlarmEventType'),
      alarmUniqueInfo?: string(name='AlarmUniqueInfo', example='8df914418f4211fbf756efe7a6f4****'),
      canBeDealOnLine?: boolean(name='CanBeDealOnLine', example='true'),
      canCancelFault?: boolean(name='CanCancelFault', example='false'),
      dataSource?: string(name='DataSource', example='sas'),
      dealed?: boolean(name='Dealed', example='false'),
      description?: string(name='Description', example='{\\"Type\\": \\"text\\", \\"Value\\": u\\"\\u5efa\\u8bae\\u8fdb\\u884c\\u79c1\\u7f51\\u767d\\u540d\\u5355\\u914d\\u7f6e\\uff0c\\u786e\\u4fdd\\u8bbf\\u95ee\\u5b89\\u5168\\u3002\\"}'),
      endTime?: long(name='EndTime', example='1543740301000'),
      instanceName?: string(name='InstanceName', example='fzerp-dev'),
      internetIp?: string(name='InternetIp', example='123.21.XX.XX'),
      intranetIp?: string(name='IntranetIp', example='100.100.XX.XX'),
      level?: string(name='Level', example='serious'),
      saleVersion?: string(name='SaleVersion', example='1'),
      solution?: string(name='Solution', example='{\\"Type\\": \\"text\\", \\"Value\\": \\"Enter NAS console - monitoring and auditing - log analysis - log management - new log dump to create a log recording service for the file system.\\"}'),
      startTime?: long(name='StartTime', example='1543740301000'),
      suspiciousEventCount?: int32(name='SuspiciousEventCount', example='1'),
      uuid?: string(name='Uuid', example='bf6b30d3-eea8-4924-9f0a-****'),
    }
  ](name='SuspEvents'),
}

model DescribeScreenAlarmEventListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScreenAlarmEventListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeScreenAlarmEventList  DescribeScreenAlarmEventListRequest
  * @return DescribeScreenAlarmEventListResponse
 */
async function describeScreenAlarmEventList(request: DescribeScreenAlarmEventListRequest): DescribeScreenAlarmEventListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScreenAlarmEventList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScreenAttackAnalysisDataRequest {
  base64?: string(name='Base64', example='true', position='Query'),
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  data?: string(name='Data', example='{"crack_type":"9"}', position='Query'),
  endTime: long(name='EndTime', description='This parameter is required.', example='1668064495000', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  startTime: long(name='StartTime', description='This parameter is required.', example='1644027670', position='Query'),
  type: string(name='Type', description='This parameter is required.', example='DETAILS', position='Query'),
}

model DescribeScreenAttackAnalysisDataResponseBody = {
  data?: string(name='Data', example='[{\\"crack_hour\\":1662480000000,\\"crack_cnt\\":471},{\\"crack_hour\\":1662483600000,\\"crack_cnt\\":461},{\\"crack_hour\\":1662487200000,\\"crack_cnt\\":445},{\\"crack_hour\\":1662490800000,\\"crack_cnt\\":471},{\\"crack_hour\\":1662494400000,\\"crack_cnt\\":534},{\\"crack_hour\\":1662498000000,\\"crack_cnt\\":652},{\\"crack_hour\\":1662501600000,\\"crack_cnt\\":706},{\\"crack_hour\\":1662505200000,\\"crack_cnt\\":613},{\\"crack_hour\\":1662508800000,\\"crack_cnt\\":578},{\\"crack_hour\\":1662512400000,\\"crack_cnt\\":577},{\\"crack_hour\\":1662516000000,\\"crack_cnt\\":616},{\\"crack_hour\\":1662519600000,\\"crack_cnt\\":597},{\\"crack_hour\\":1662523200000,\\"crack_cnt\\":575},{\\"crack_hour\\":1662526800000,\\"crack_cnt\\":507}]'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='7532B7EE-7CE7-5F4D-BF04-Bxxxxxxxx'),
  total?: int32(name='Total', example='11'),
}

model DescribeScreenAttackAnalysisDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScreenAttackAnalysisDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeScreenAttackAnalysisData  DescribeScreenAttackAnalysisDataRequest
  * @return DescribeScreenAttackAnalysisDataResponse
 */
async function describeScreenAttackAnalysisData(request: DescribeScreenAttackAnalysisDataRequest): DescribeScreenAttackAnalysisDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScreenAttackAnalysisData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScreenCloudHcRiskRequest {
}

model DescribeScreenCloudHcRiskResponseBody = {
  cloudHcRiskItems?: [ 
    {
      affectCount?: int32(name='AffectCount', example='5'),
      checkItem?: string(name='CheckItem', example='OSS-PublicReadOpenManifestFileWithoutEncryption'),
      level?: string(name='Level', example='HIGH'),
      pass?: boolean(name='Pass'),
    }
  ](name='CloudHcRiskItems'),
  requestId?: string(name='RequestId', example='0C8487EF-50C2-54BB-8634-10F8C35D****'),
}

model DescribeScreenCloudHcRiskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScreenCloudHcRiskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeScreenCloudHcRisk  DescribeScreenCloudHcRiskRequest
  * @return DescribeScreenCloudHcRiskResponse
 */
async function describeScreenCloudHcRisk(request: DescribeScreenCloudHcRiskRequest): DescribeScreenCloudHcRiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScreenCloudHcRisk', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScreenDataMapRequest {
}

model DescribeScreenDataMapResponseBody = {
  requestId?: string(name='RequestId', example='7532B7EE-7CE7-5F4D-BF04-XXXXXXXX'),
  sasScreenTypeList?: [ 
    {
      type?: string(name='Type'),
      typeCode?: string(name='TypeCode', example='ASSETS'),
      typeData?: [ 
        {
          code?: string(name='Code', example='VUL_VUL'),
          date?: [ 
            {
              unit?: string(name='Unit', example='second'),
              value?: string(name='Value', example='1'),
            }
          ](name='Date'),
          id?: string(name='Id', example='25'),
          title?: string(name='Title'),
        }
      ](name='TypeData'),
    }
  ](name='SasScreenTypeList'),
}

model DescribeScreenDataMapResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScreenDataMapResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeScreenDataMap  DescribeScreenDataMapRequest
  * @return DescribeScreenDataMapResponse
 */
async function describeScreenDataMap(request: DescribeScreenDataMapRequest): DescribeScreenDataMapResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScreenDataMap', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScreenEmerRiskRequest {
}

model DescribeScreenEmerRiskResponseBody = {
  cloudHcRiskItems?: [ 
    {
      affectCount?: int32(name='AffectCount', example='3'),
      level?: string(name='Level', example='ASAP'),
      vulName?: string(name='VulName'),
    }
  ](name='CloudHcRiskItems'),
  requestId?: string(name='RequestId', example='23AD0BD2-8771-5647-819E-6xxxxxxxx'),
}

model DescribeScreenEmerRiskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScreenEmerRiskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeScreenEmerRisk  DescribeScreenEmerRiskRequest
  * @return DescribeScreenEmerRiskResponse
 */
async function describeScreenEmerRisk(request: DescribeScreenEmerRiskRequest): DescribeScreenEmerRiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScreenEmerRisk', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScreenHostStatisticsRequest {
}

model DescribeScreenHostStatisticsResponseBody = {
  data?: {
    safeCount?: [ string ](name='SafeCount'),
    suspEventMachineNames?: [ string ](name='SuspEventMachineNames'),
    suspEventUuids?: [ string ](name='SuspEventUuids'),
    weaknessMachineNames?: [ string ](name='WeaknessMachineNames'),
    weaknessUuids?: [ string ](name='WeaknessUuids'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='D65AADFC-1D20-5A6A-8F6A-9FA53C0DC1F8'),
}

model DescribeScreenHostStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScreenHostStatisticsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeScreenHostStatistics  DescribeScreenHostStatisticsRequest
  * @return DescribeScreenHostStatisticsResponse
 */
async function describeScreenHostStatistics(request: DescribeScreenHostStatisticsRequest): DescribeScreenHostStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScreenHostStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScreenOperateInfoRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  startTime: long(name='StartTime', description='This parameter is required.', example='1634725571000', position='Query'),
}

model DescribeScreenOperateInfoResponseBody = {
  dateArray?: [ string ](name='DateArray'),
  healthCheckDealedCount?: int32(name='HealthCheckDealedCount', example='1'),
  healthCheckValueArray?: [ string ](name='HealthCheckValueArray'),
  requestId?: string(name='RequestId', example='23AD0BD2-8771-5647-819E-6xxxxxxxx'),
  securityEventDealedCount?: int32(name='SecurityEventDealedCount', example='1'),
  suspEventValueArray?: [ string ](name='SuspEventValueArray'),
  vulValueArray?: [ string ](name='VulValueArray'),
  vulnerabilityDealedCount?: int32(name='VulnerabilityDealedCount', example='1'),
}

model DescribeScreenOperateInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScreenOperateInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeScreenOperateInfo  DescribeScreenOperateInfoRequest
  * @return DescribeScreenOperateInfoResponse
 */
async function describeScreenOperateInfo(request: DescribeScreenOperateInfoRequest): DescribeScreenOperateInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScreenOperateInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScreenOssUploadInfoRequest {
}

model DescribeScreenOssUploadInfoResponseBody = {
  accessId?: string(name='AccessId', example='LTAI5txxxxxxx'),
  expire?: int32(name='Expire', example='1719919893'),
  host?: string(name='Host', example='https://oss-cipxxxxxxxxxliyuncs.com'),
  key?: string(name='Key', example='DegradePool_Offset_****'),
  policy?: string(name='Policy', example='eyJleHBpcmF0aW9uIjoiMjAyNC0wOC0xNVQwOToxMTo1My40MDVaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsMTA0ODU3NjAwMF0sWyJzdGFydHMtd2l0aCIsIiRrZXkiLCJzY3JlZW5Mb2dvXC8xNzY2MTg1ODkxxxx'),
  requestId?: string(name='RequestId', example='30CBF632-109F-596F-97F2-451C8B2A****'),
  securityToken?: string(name='SecurityToken'),
  signature?: string(name='Signature', example='wBiwkhd5LGcLzijtc3FhI****'),
}

model DescribeScreenOssUploadInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScreenOssUploadInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeScreenOssUploadInfo  DescribeScreenOssUploadInfoRequest
  * @return DescribeScreenOssUploadInfoResponse
 */
async function describeScreenOssUploadInfo(request: DescribeScreenOssUploadInfoRequest): DescribeScreenOssUploadInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScreenOssUploadInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScreenScoreThreadRequest {
  endTime: long(name='EndTime', description='This parameter is required.', example='1723445464501', position='Query'),
  startTime: long(name='StartTime', description='This parameter is required.', example='1722840664501', position='Query'),
}

model DescribeScreenScoreThreadResponseBody = {
  data?: {
    socreThread?: [ string ](name='SocreThread'),
    socreThreadDate?: [ string ](name='SocreThreadDate'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='D03DD0FD-6041-5107-AC00-383E28F1****'),
}

model DescribeScreenScoreThreadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScreenScoreThreadResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeScreenScoreThread  DescribeScreenScoreThreadRequest
  * @return DescribeScreenScoreThreadResponse
 */
async function describeScreenScoreThread(request: DescribeScreenScoreThreadRequest): DescribeScreenScoreThreadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScreenScoreThread', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScreenSecurityStatInfoRequest {
}

model DescribeScreenSecurityStatInfoResponseBody = {
  attackEvent?: {
    dateArray?: [ string ](name='DateArray'),
    totalCount?: int32(name='TotalCount', example='1096'),
    valueArray?: [ string ](name='ValueArray'),
  }(name='AttackEvent'),
  healthCheck?: {
    dateArray?: [ string ](name='DateArray'),
    highCount?: int32(name='HighCount', example='10'),
    highList?: [ string ](name='HighList'),
    levelsOn?: [ string ](name='LevelsOn'),
    lowCount?: int32(name='LowCount', example='0'),
    lowList?: [ string ](name='LowList'),
    mediumCount?: int32(name='MediumCount', example='21'),
    mediumList?: [ string ](name='MediumList'),
    totalCount?: int32(name='TotalCount', example='32'),
    valueArray?: [ string ](name='ValueArray'),
  }(name='HealthCheck'),
  requestId?: string(name='RequestId', example='F8B6F758-BCD4-597A-8A2C-DA5A552C****'),
  securityEvent?: {
    dateArray?: [ string ](name='DateArray'),
    levelsOn?: [ string ](name='LevelsOn'),
    remindCount?: int32(name='RemindCount', example='0'),
    remindList?: [ string ](name='RemindList'),
    seriousCount?: int32(name='SeriousCount', example='2'),
    seriousList?: [ string ](name='SeriousList'),
    suspiciousCount?: int32(name='SuspiciousCount', example='10'),
    suspiciousList?: [ string ](name='SuspiciousList'),
    totalCount?: int32(name='TotalCount', example='8'),
    valueArray?: [ string ](name='ValueArray'),
  }(name='SecurityEvent'),
  vulnerability?: {
    asapCount?: int32(name='AsapCount', example='109'),
    asapList?: [ string ](name='AsapList'),
    dateArray?: [ string ](name='DateArray'),
    laterCount?: int32(name='LaterCount', example='275'),
    laterList?: [ string ](name='LaterList'),
    levelsOn?: [ string ](name='LevelsOn'),
    nntfCount?: int32(name='NntfCount', example='0'),
    nntfList?: [ string ](name='NntfList'),
    totalCount?: int32(name='TotalCount', example='384'),
    valueArray?: [ string ](name='ValueArray'),
  }(name='Vulnerability'),
}

model DescribeScreenSecurityStatInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScreenSecurityStatInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeScreenSecurityStatInfo  DescribeScreenSecurityStatInfoRequest
  * @return DescribeScreenSecurityStatInfoResponse
 */
async function describeScreenSecurityStatInfo(request: DescribeScreenSecurityStatInfoRequest): DescribeScreenSecurityStatInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScreenSecurityStatInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScreenSettingRequest {
  id?: string(name='Id', example='101786', position='Query'),
}

model DescribeScreenSettingResponseBody = {
  logoPower?: boolean(name='LogoPower', example='false'),
  logoUrl?: string(name='LogoUrl', example='https://img.alicdn.XXXXXXXXXXX.jpg'),
  monitorUrl?: string(name='MonitorUrl', example='https://XXX.monitor.XXXXcom'),
  requestId?: string(name='RequestId', example='B9A68671-BD84-55CD-807A-XXXXXXXXX'),
  screenDataMap?: string(name='ScreenDataMap', example='[{\\"positionId\\":XX,\\"componentId\\":XX,\\"date\\":\\"XXX\\"},{\\"positionId\\":X,\\"componentId\\":X,\\"date\\":\\"XXX\\"},{\\"positionId\\":X,\\"componentId\\":X,\\"date\\":\\"XX\\"},{\\"positionId\\":X,\\"componentId\\":XX,\\"date\\":\\"XXX\\"},{\\"positionId\\":X,\\"componentId\\":XX,\\"date\\":\\"XX\\"},{\\"positionId\\":X,\\"componentId\\":XX,\\"date\\":\\"XX\\"},{\\"positionId\\":X,\\"componentId\\":XX,\\"date\\":\\"XXX\\"},{\\"positionId\\":X,\\"componentId\\":,\\"date\\":\\"XXXX\\"}]'),
  screenDefault?: int32(name='ScreenDefault', example='7849'),
  screenId?: int32(name='ScreenId', example='1004770'),
  title?: string(name='Title', example='Daily Report'),
}

model DescribeScreenSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScreenSettingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeScreenSetting  DescribeScreenSettingRequest
  * @return DescribeScreenSettingResponse
 */
async function describeScreenSetting(request: DescribeScreenSettingRequest): DescribeScreenSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScreenSetting', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScreenSummaryInfoRequest {
}

model DescribeScreenSummaryInfoResponseBody = {
  aegisClientOfflineCount?: int32(name='AegisClientOfflineCount', example='12'),
  aegisClientOnlineCount?: int32(name='AegisClientOnlineCount', example='127'),
  requestId?: string(name='RequestId', example='23AD0BD2-8771-5647-819E-XXXXXXXX'),
  securityScore?: int32(name='SecurityScore', example='100'),
}

model DescribeScreenSummaryInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScreenSummaryInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeScreenSummaryInfo  DescribeScreenSummaryInfoRequest
  * @return DescribeScreenSummaryInfoResponse
 */
async function describeScreenSummaryInfo(request: DescribeScreenSummaryInfoRequest): DescribeScreenSummaryInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScreenSummaryInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScreenTitlesRequest {
}

model DescribeScreenTitlesResponseBody = {
  requestId?: string(name='RequestId', example='09969D2C-4FAD-429E-BFBF-XXXXXXXXXXX'),
  sasScreenSettingList?: [ 
    {
      screenID?: long(name='ScreenID', example='3267'),
      screenTitle?: string(name='ScreenTitle', example='titlexxx'),
    }
  ](name='SasScreenSettingList'),
}

model DescribeScreenTitlesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScreenTitlesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeScreenTitles  DescribeScreenTitlesRequest
  * @return DescribeScreenTitlesResponse
 */
async function describeScreenTitles(request: DescribeScreenTitlesRequest): DescribeScreenTitlesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScreenTitles', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScreenUploadPictureRequest {
  logoUrl: string(name='LogoUrl', description='This parameter is required.', example='https://security-pic.oss-cn-hangzhou.aliyuncs.com/screenLogo/1766185894104675/c28bd4d2-c5c1-43f8-9ef5-de41d762xxxx', position='Query'),
}

model DescribeScreenUploadPictureResponseBody = {
  requestId?: string(name='RequestId', example='D65AADFC-1D20-5A6A-8F6A-9FA53C0Dxxxx'),
  url?: string(name='Url', example='http://security-pic.oss-cn-hangzhou.aliyuncs.com/screenLogo/1766185894104675/c28bd4d2-c5c1-43f8-9ef5-de41d76218eb?Expires=1723720214&OSSAccessKeyId=LTAI4G1mgPbjvGQuiV1Xxxxx&Signature=4o3xxxx'),
}

model DescribeScreenUploadPictureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScreenUploadPictureResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeScreenUploadPicture  DescribeScreenUploadPictureRequest
  * @return DescribeScreenUploadPictureResponse
 */
async function describeScreenUploadPicture(request: DescribeScreenUploadPictureRequest): DescribeScreenUploadPictureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScreenUploadPicture', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScreenVersionConfigRequest {
}

model DescribeScreenVersionConfigResponseBody = {
  assetLevel?: int32(name='AssetLevel', example='30'),
  instanceId?: string(name='InstanceId', example='sas-b5***'),
  isTrialVersion?: int32(name='IsTrialVersion', example='0'),
  releaseTime?: long(name='ReleaseTime', example='1625846400000'),
  requestId?: string(name='RequestId', example='CE500770-42D3-442E-9DDD-1XXXXXXX'),
  sasLog?: int32(name='SasLog', example='1'),
  sasScreen?: int32(name='SasScreen', example='0'),
  version?: int32(name='Version', example='3'),
}

model DescribeScreenVersionConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScreenVersionConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeScreenVersionConfig  DescribeScreenVersionConfigRequest
  * @return DescribeScreenVersionConfigResponse
 */
async function describeScreenVersionConfig(request: DescribeScreenVersionConfigRequest): DescribeScreenVersionConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScreenVersionConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetFileDetectResultInnerRequest {
  dnaHashKeyList?: [ string ](name='DnaHashKeyList', position='Query'),
  hashKeyList: [ string ](name='HashKeyList', description='This parameter is required.', position='Query'),
  level?: int32(name='Level', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  type?: int32(name='Type', position='Query'),
}

model GetFileDetectResultInnerResponseBody = {
  requestId?: string(name='RequestId'),
  resultList?: [ 
    {
      code?: string(name='Code'),
      expireTime?: string(name='ExpireTime'),
      ext?: string(name='Ext'),
      hashKey?: string(name='HashKey'),
      message?: string(name='Message'),
      result?: int32(name='Result'),
      score?: int32(name='Score'),
      virusType?: string(name='VirusType'),
    }
  ](name='ResultList'),
}

model GetFileDetectResultInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFileDetectResultInnerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetFileDetectResultInner  GetFileDetectResultInnerRequest
  * @return GetFileDetectResultInnerResponse
 */
async function getFileDetectResultInner(request: GetFileDetectResultInnerRequest): GetFileDetectResultInnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFileDetectResultInner', 'POST', '/', 'json', false, 'json', request);
}

model ListGlobalUserConfigRequest {
  moduleList?: [ string ](name='ModuleList', shrink='json', position='Query'),
}

model ListGlobalUserConfigResponseBody = {
  data?: [ 
    {
      globalConfigSwitch?: boolean(name='GlobalConfigSwitch', example='true'),
      moduleName?: string(name='ModuleName', example='ransomware_breaking'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='D81DD78E-E006-5C65-A171-C8CB09XXXXX'),
}

model ListGlobalUserConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGlobalUserConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListGlobalUserConfig  ListGlobalUserConfigRequest
  * @return ListGlobalUserConfigResponse
 */
async function listGlobalUserConfig(request: ListGlobalUserConfigRequest): ListGlobalUserConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGlobalUserConfig', 'POST', '/', 'json', false, 'json', request);
}

