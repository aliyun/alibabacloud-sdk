/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aliyunape', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model HistoricalRequest {
  endTime?: string(name='EndTime', description='endTime'),
  orderId?: string(name='OrderId', description='用户中心--我的订单--订单请求--实例名称：aliyunape_meteor12_public_cn-0ju2d2hh90b'),
  pageNum?: int32(name='PageNum', description='pageNum'),
  pageSize?: int32(name='PageSize', description='pageSize'),
  startTime?: string(name='StartTime', description='startTime'),
  station?: string(name='Station', description='全国（入参单一站点）'),
}

model HistoricalResponseBody = {
  code?: string(name='Code', description='code'),
  data?: [  map[string]any ](name='Data', description='data'),
  message?: string(name='Message', description='message'),
  requestId?: string(name='RequestId', description='requestId'),
  rt?: long(name='Rt', description='rt'),
  success?: boolean(name='Success', description='success'),
}

model HistoricalResponse = {
  headers: map[string]string(name='headers'),
  body: HistoricalResponseBody(name='body'),
}

async function historicalWithOptions(request: HistoricalRequest, runtime: Util.RuntimeOptions): HistoricalResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('Historical', '2021-09-08', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function historical(request: HistoricalRequest): HistoricalResponse {
  var runtime = new Util.RuntimeOptions{};
  return historicalWithOptions(request, runtime);
}

model StationDayRequest {
  orderId?: string(name='OrderId', description='用户中心--我的订单--订单请求--实例名称：aliyunape_meteor12_public_cn-0ju2d2hh90b'),
  startForecast?: string(name='StartForecast', description='气象预测开始时间'),
  station?: string(name='Station', description='全国站点（入参单一站点）'),
}

model StationDayResponseBody = {
  code?: string(name='Code', description='code'),
  data?: [  map[string]any ](name='Data', description='data'),
  message?: string(name='Message', description='message'),
  requestId?: string(name='RequestId', description='requestId'),
  rt?: long(name='Rt', description='rt'),
  success?: boolean(name='Success', description='success'),
}

model StationDayResponse = {
  headers: map[string]string(name='headers'),
  body: StationDayResponseBody(name='body'),
}

async function stationDayWithOptions(request: StationDayRequest, runtime: Util.RuntimeOptions): StationDayResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StationDay', '2021-09-08', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stationDay(request: StationDayRequest): StationDayResponse {
  var runtime = new Util.RuntimeOptions{};
  return stationDayWithOptions(request, runtime);
}

model WeatherforecastRequest {
  lat?: string(name='Lat', description='纬度，范围为（15°N~59.95°N）'),
  lon?: string(name='Lon', description='经度，范围为（70°E~139.96°E）'),
  orderId?: string(name='OrderId', description='用户中心--我的订单--订单请求--实例名称：aliyunape_meteor12_public_cn-0ju2d2hh90b'),
  startForecast?: string(name='StartForecast', description='yyyymmdd080000或yyyymmdd200000'),
}

model WeatherforecastResponseBody = {
  code?: string(name='Code', description='code'),
  data?: [  map[string]any ](name='Data', description='data'),
  message?: string(name='Message', description='message'),
  requestId?: string(name='RequestId', description='requestId'),
  rt?: long(name='Rt', description='rt'),
  success?: boolean(name='Success', description='success'),
}

model WeatherforecastResponse = {
  headers: map[string]string(name='headers'),
  body: WeatherforecastResponseBody(name='body'),
}

async function weatherforecastWithOptions(request: WeatherforecastRequest, runtime: Util.RuntimeOptions): WeatherforecastResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('Weatherforecast', '2021-09-08', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function weatherforecast(request: WeatherforecastRequest): WeatherforecastResponse {
  var runtime = new Util.RuntimeOptions{};
  return weatherforecastWithOptions(request, runtime);
}

model WeatherforecastTimeRequest {
  curHour?: string(name='CurHour', description='20210809090000'),
  lat?: string(name='Lat', description='纬度，范围为（15°N~59.95°N'),
  lon?: string(name='Lon', description='经度，范围为（70°E~139.96°E）'),
  orderId?: string(name='OrderId', description='用户中心--我的订单--订单请求--实例名称：aliyunape_meteor12_public_cn-0ju2d2hh90b'),
  sourceIp?: string(name='SourceIp'),
}

model WeatherforecastTimeResponseBody = {
  code?: string(name='Code', description='code'),
  data?: [  map[string]any ](name='Data', description='data'),
  message?: string(name='Message', description='message'),
  requestId?: string(name='RequestId', description='requestId'),
  rt?: long(name='Rt', description='rt'),
  success?: boolean(name='Success', description='success'),
}

model WeatherforecastTimeResponse = {
  headers: map[string]string(name='headers'),
  body: WeatherforecastTimeResponseBody(name='body'),
}

async function weatherforecastTimeWithOptions(request: WeatherforecastTimeRequest, runtime: Util.RuntimeOptions): WeatherforecastTimeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('WeatherforecastTime', '2021-09-08', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function weatherforecastTime(request: WeatherforecastTimeRequest): WeatherforecastTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return weatherforecastTimeWithOptions(request, runtime);
}

model WeathermonitorRequest {
  curHour?: string(name='CurHour', description='气象实况时间 yyyymmddhh0000 （数据最小时间2021-08-16）（小时）	20210817120000'),
  orderId?: string(name='OrderId', description='用户中心--我的订单--订单请求--实例名称：aliyunape_meteor12_public_cn-0ju2d2hh90b'),
  pageNum?: int32(name='PageNum', description='页码'),
  pageSize?: int32(name='PageSize', description='页面条数'),
}

model WeathermonitorResponseBody = {
  code?: string(name='Code', description='code'),
  data?: [  map[string]any ](name='Data', description='data'),
  message?: string(name='Message', description='message'),
  requestId?: string(name='RequestId', description='requestId'),
  rt?: long(name='Rt', description='rt'),
  success?: boolean(name='Success', description='success'),
}

model WeathermonitorResponse = {
  headers: map[string]string(name='headers'),
  body: WeathermonitorResponseBody(name='body'),
}

async function weathermonitorWithOptions(request: WeathermonitorRequest, runtime: Util.RuntimeOptions): WeathermonitorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('Weathermonitor', '2021-09-08', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function weathermonitor(request: WeathermonitorRequest): WeathermonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return weathermonitorWithOptions(request, runtime);
}

