/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('emr-serverless-spark', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model Artifact {
  bizId?: string(name='bizId', description='This parameter is required.'),
  creator?: long(name='creator', description='This parameter is required.'),
  credential?: Credential(name='credential'),
  gmtCreated?: string(name='gmtCreated', description='This parameter is required.'),
  gmtModified?: string(name='gmtModified', description='This parameter is required.'),
  location?: string(name='location', description='This parameter is required.'),
  modifier?: long(name='modifier', description='This parameter is required.'),
  name?: string(name='name', description='This parameter is required.'),
}

model Category {
  bizId?: string(name='bizId', description='This parameter is required.'),
  creator?: long(name='creator', description='This parameter is required.'),
  gmtCreated?: string(name='gmtCreated', description='This parameter is required.'),
  gmtModified?: string(name='gmtModified', description='This parameter is required.'),
  modifier?: long(name='modifier', description='This parameter is required.'),
  name?: string(name='name', description='This parameter is required.'),
  parentBizId?: string(name='parentBizId'),
  type?: string(name='type', description='This parameter is required.'),
}

model Configuration {
  configFileName?: string(name='configFileName'),
  configItemKey?: string(name='configItemKey'),
  configItemValue?: string(name='configItemValue'),
}

model ConfigurationOverrides {
  configurations?: [ 
    {
      configFileName?: string(name='configFileName'),
      configItemKey?: string(name='configItemKey'),
      configItemValue?: string(name='configItemValue'),
    }
  ](name='configurations'),
}

model Credential {
  accessId?: string(name='accessId', description='This parameter is required.'),
  dir?: string(name='dir', description='This parameter is required.'),
  expire?: string(name='expire', description='This parameter is required.'),
  host?: string(name='host', description='This parameter is required.'),
  policy?: string(name='policy', description='This parameter is required.'),
  securityToken?: string(name='securityToken', description='This parameter is required.'),
  signature?: string(name='signature', description='This parameter is required.'),
}

model JobDriver {
  sparkSubmit?: {
    entryPoint?: string(name='entryPoint'),
    entryPointArguments?: [ string ](name='entryPointArguments'),
    sparkSubmitParameters?: string(name='sparkSubmitParameters'),
  }(name='sparkSubmit'),
}

model PrincipalAction {
  actionArn?: string(name='actionArn', example='acs:emr::workspaceId:action/create_queue'),
  principalArn?: string(name='principalArn', example='acs:emr::workspaceId:user/237593691541622267'),
}

model ReleaseVersionImage {
  cpuArchitecture?: string(name='cpuArchitecture'),
  imageId?: string(name='imageId'),
  runtimeEngineType?: string(name='runtimeEngineType'),
}

model RunLog {
  driverStartup?: string(name='driverStartup'),
  driverStdError?: string(name='driverStdError'),
  driverStdOut?: string(name='driverStdOut'),
  driverSyslog?: string(name='driverSyslog'),
}

model SparkConf {
  key?: string(name='key', description='This parameter is required.'),
  value?: string(name='value', description='This parameter is required.'),
}

model SqlOutput {
  rows?: [ 
    {
      values?: [ string ](name='values', example='null'),
    }
  ](name='rows'),
  schema?: {
    fields?: [ 
      {
        name?: string(name='name'),
        nullable?: boolean(name='nullable'),
        type?: string(name='type'),
      }
    ](name='fields'),
  }(name='schema'),
}

model Tag {
  key?: string(name='key', description='标签key值。', example='workflowId'),
  value?: string(name='value', description='标签key值。', example='wf-123test'),
}

model Task {
  archives?: [ string ](name='archives'),
  artifactUrl?: string(name='artifactUrl'),
  bizId?: string(name='bizId', description='This parameter is required.'),
  categoryBizId?: string(name='categoryBizId'),
  content?: string(name='content'),
  creator?: long(name='creator', description='This parameter is required.'),
  defaultCatalogId?: string(name='defaultCatalogId'),
  defaultDatabase?: string(name='defaultDatabase'),
  defaultResourceQueueId?: string(name='defaultResourceQueueId'),
  defaultSqlComputeId?: string(name='defaultSqlComputeId'),
  extraArtifactIds?: [ string ](name='extraArtifactIds'),
  extraSparkSubmitParams?: string(name='extraSparkSubmitParams'),
  files?: [ string ](name='files'),
  gmtCreated?: string(name='gmtCreated', description='This parameter is required.'),
  gmtModified?: string(name='gmtModified', description='This parameter is required.'),
  hasChanged?: boolean(name='hasChanged'),
  hasCommited?: boolean(name='hasCommited', description='This parameter is required.'),
  jars?: [ string ](name='jars'),
  lastRunResourceQueueId?: string(name='lastRunResourceQueueId'),
  modifier?: long(name='modifier', description='This parameter is required.'),
  name?: string(name='name', description='This parameter is required.'),
  pyFiles?: [ string ](name='pyFiles'),
  sparkArgs?: string(name='sparkArgs', example='100'),
  sparkConf?: [
    SparkConf
  ](name='sparkConf'),
  sparkDriverCores?: int32(name='sparkDriverCores', description='This parameter is required.'),
  sparkDriverMemory?: long(name='sparkDriverMemory', description='This parameter is required.'),
  sparkEntrypoint?: string(name='sparkEntrypoint'),
  sparkExecutorCores?: int32(name='sparkExecutorCores', description='This parameter is required.'),
  sparkExecutorMemory?: long(name='sparkExecutorMemory', description='This parameter is required.'),
  sparkLogLevel?: string(name='sparkLogLevel', description='This parameter is required.'),
  sparkLogPath?: string(name='sparkLogPath', description='This parameter is required.'),
  sparkVersion?: string(name='sparkVersion', description='This parameter is required.'),
  tags?: map[string]string(name='tags'),
  type?: string(name='type', description='This parameter is required.'),
}

model TaskInstance {
  bizId?: string(name='bizId'),
  creator?: long(name='creator'),
  fenixRunId?: string(name='fenixRunId'),
  gmtCreated?: string(name='gmtCreated'),
  taskBizId?: string(name='taskBizId'),
  taskInfo?: Task(name='taskInfo'),
  taskStatus?: string(name='taskStatus'),
  workspaceBizId?: string(name='workspaceBizId'),
}

model TaskSnapshot {
  bizId?: string(name='bizId'),
  commiter?: long(name='commiter'),
  gmtCreated?: string(name='gmtCreated'),
  item?: Task(name='item'),
  message?: string(name='message'),
  taskBizId?: string(name='taskBizId'),
  version?: string(name='version'),
}

model Template {
  creator?: long(name='creator', description='This parameter is required.'),
  gmtCreated?: string(name='gmtCreated', description='This parameter is required.'),
  gmtModified?: string(name='gmtModified', description='This parameter is required.'),
  modifier?: long(name='modifier', description='This parameter is required.'),
  sparkConf?: [
    SparkConf
  ](name='sparkConf'),
  sparkDriverCores?: int32(name='sparkDriverCores', description='This parameter is required.'),
  sparkDriverMemory?: long(name='sparkDriverMemory', description='This parameter is required.'),
  sparkExecutorCores?: int32(name='sparkExecutorCores', description='This parameter is required.'),
  sparkExecutorMemory?: long(name='sparkExecutorMemory', description='This parameter is required.'),
  sparkLogLevel?: string(name='sparkLogLevel', description='This parameter is required.'),
  sparkLogPath?: string(name='sparkLogPath', description='This parameter is required.'),
  sparkVersion?: string(name='sparkVersion', description='This parameter is required.'),
  templateType?: string(name='templateType'),
}

model TimeRange {
  endTime?: long(name='endTime', description='时间范围结束时间。', example='1688370894339'),
  startTime?: long(name='startTime', description='时间范围开始时间。', example='1688370894339'),
}

model CancelJobRunRequest {
  regionId?: string(name='regionId', example='cn-hangzhou'),
}

model CancelJobRunResponseBody = {
  jobRunId?: string(name='jobRunId', example='jr-1a2bc3'),
  requestId?: string(name='requestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model CancelJobRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelJobRunResponseBody(name='body'),
}

/**
 * @summary 取消jobRun作业
 *
 * @param request CancelJobRunRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CancelJobRunResponse
 */
async function cancelJobRunWithOptions(workspaceId: string, jobRunId: string, request: CancelJobRunRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelJobRunResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelJobRun',
    version = '2023-08-08',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(workspaceId)}/jobRuns/${OpenApiUtil.getEncodeParam(jobRunId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 取消jobRun作业
 *
 * @param request CancelJobRunRequest
 * @return CancelJobRunResponse
 */
async function cancelJobRun(workspaceId: string, jobRunId: string, request: CancelJobRunRequest): CancelJobRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return cancelJobRunWithOptions(workspaceId, jobRunId, request, headers, runtime);
}

model GetJobRunRequest {
  regionId?: string(name='regionId', example='cn-hangzhou'),
}

model GetJobRunResponseBody = {
  jobRun?: {
    codeType?: string(name='codeType', description='作业代码类型。', example='SQL'),
    configurationOverrides?: {
      configurations?: [
        Configuration
      ](name='configurations'),
    }(name='configurationOverrides'),
    endTime?: long(name='endTime', description='作业结束时间。', example='1684119314000'),
    executionTimeoutSeconds?: int32(name='executionTimeoutSeconds', description='运行超时时间。', example='3600'),
    jobDriver?: JobDriver(name='jobDriver'),
    jobRunId?: string(name='jobRunId', description='任务实例ID。', example='jr-231231'),
    log?: RunLog(name='log'),
    name?: string(name='name', description='作业实例名称。', example='jobName'),
    releaseVersion?: string(name='releaseVersion', example='esr-3.3.1'),
    resourceOwnerId?: string(name='resourceOwnerId', description='创建用户Uid。', example='1509789347011222'),
    resourceQueueId?: string(name='resourceQueueId', example='root_queue'),
    state?: string(name='state', description='作业状态。', example='Running'),
    stateChangeReason?: {
      code?: string(name='code', example='ERR-100000'),
      message?: string(name='message', example='connection refused'),
    }(name='stateChangeReason'),
    submitTime?: long(name='submitTime', description='作业提交时间。', example='1684119314000'),
    tags?: [
      Tag
    ](name='tags', description='标签。'),
    webUI?: string(name='webUI', description='作业web ui。', example='http://spark-ui'),
    workspaceId?: string(name='workspaceId', description='工作空间id。', example='w-1234abcd'),
  }(name='jobRun'),
  requestId?: string(name='requestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GetJobRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobRunResponseBody(name='body'),
}

/**
 * @summary 获取任务
 *
 * @param request GetJobRunRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetJobRunResponse
 */
async function getJobRunWithOptions(workspaceId: string, jobRunId: string, request: GetJobRunRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetJobRunResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetJobRun',
    version = '2023-08-08',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(workspaceId)}/jobRuns/${OpenApiUtil.getEncodeParam(jobRunId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取任务
 *
 * @param request GetJobRunRequest
 * @return GetJobRunResponse
 */
async function getJobRun(workspaceId: string, jobRunId: string, request: GetJobRunRequest): GetJobRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getJobRunWithOptions(workspaceId, jobRunId, request, headers, runtime);
}

model ListJobRunsRequest {
  creator?: string(name='creator', description='创建用户Uid。', example='1509789347011222'),
  endTime?: {
    endTime?: long(name='endTime', example='1710432000000'),
    startTime?: long(name='startTime', example='1709740800000'),
  }(name='endTime'),
  jobRunId?: string(name='jobRunId', description='作业id。', example='j-xxx'),
  maxResults?: int32(name='maxResults', description='一次获取的最大记录数。', example='20'),
  name?: string(name='name', description='作业名称。', example='emr-spark-demo-job'),
  nextToken?: string(name='nextToken', description='标记当前开始读取的位置，置空表示从头开始。', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  regionId?: string(name='regionId', example='cn-hangzhou'),
  resourceQueueId?: string(name='resourceQueueId', example='dev_queue'),
  startTime?: {
    endTime?: long(name='endTime', example='1710432000000'),
    startTime?: long(name='startTime', example='1709740800000'),
  }(name='startTime'),
  states?: [ string ](name='states', description='作业状态。', example='["Running","Submitted"]'),
  tags?: [ 
    {
      key?: string(name='key', example='tag_key'),
      value?: string(name='value', example='value'),
    }
  ](name='tags', description='标签。'),
}

model ListJobRunsShrinkRequest {
  creator?: string(name='creator', description='创建用户Uid。', example='1509789347011222'),
  endTimeShrink?: string(name='endTime'),
  jobRunId?: string(name='jobRunId', description='作业id。', example='j-xxx'),
  maxResults?: int32(name='maxResults', description='一次获取的最大记录数。', example='20'),
  name?: string(name='name', description='作业名称。', example='emr-spark-demo-job'),
  nextToken?: string(name='nextToken', description='标记当前开始读取的位置，置空表示从头开始。', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  regionId?: string(name='regionId', example='cn-hangzhou'),
  resourceQueueId?: string(name='resourceQueueId', example='dev_queue'),
  startTimeShrink?: string(name='startTime'),
  statesShrink?: string(name='states', description='作业状态。', example='["Running","Submitted"]'),
  tagsShrink?: string(name='tags', description='标签。'),
}

model ListJobRunsResponseBody = {
  jobRuns?: [ 
    {
      codeType?: string(name='codeType', description='作业代码类型。', example='SQL'),
      configurationOverrides?: {
        configurations?: [
          Configuration
        ](name='configurations'),
      }(name='configurationOverrides'),
      creator?: string(name='creator', description='创建用户Uid。', example='1509789347011222'),
      endTime?: long(name='endTime', description='作业结束时间。', example='1684119314000'),
      executionTimeoutSeconds?: int32(name='executionTimeoutSeconds', description='运行超时时间。', example='3600'),
      jobDriver?: JobDriver(name='jobDriver'),
      jobRunId?: string(name='jobRunId', description='任务实例ID。', example='jr-231231'),
      log?: RunLog(name='log'),
      name?: string(name='name', description='作业实例名称。', example='jobName'),
      releaseVersion?: string(name='releaseVersion', example='esr-native-3.4.0'),
      state?: string(name='state', description='作业状态。', example='Running'),
      stateChangeReason?: {
        code?: string(name='code', example='0'),
        message?: string(name='message', example='success'),
      }(name='stateChangeReason'),
      submitTime?: long(name='submitTime', description='作业提交时间。', example='1684119314000'),
      tags?: [
        Tag
      ](name='tags', description='标签。'),
      webUI?: string(name='webUI', description='作业web ui。', example='http://spark-ui'),
      workspaceId?: string(name='workspaceId', description='工作空间id。', example='w-1234abcd'),
    }
  ](name='jobRuns'),
  maxResults?: int32(name='maxResults', description='本次请求所返回的最大记录条数。', example='20'),
  nextToken?: string(name='nextToken', description='返回读取到的数据位置，空代表数据已经读取完毕。', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  requestId?: string(name='requestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='totalCount', description='本次请求条件下的数据总量。', example='200'),
}

model ListJobRunsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListJobRunsResponseBody(name='body'),
}

/**
 * @summary 查询run列表
 *
 * @param tmpReq ListJobRunsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListJobRunsResponse
 */
async function listJobRunsWithOptions(workspaceId: string, tmpReq: ListJobRunsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListJobRunsResponse {
  Util.validateModel(tmpReq);
  var request = new ListJobRunsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.endTime)) {
    request.endTimeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.endTime, 'endTime', 'json');
  }
  if (!Util.isUnset(tmpReq.startTime)) {
    request.startTimeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.startTime, 'startTime', 'json');
  }
  if (!Util.isUnset(tmpReq.states)) {
    request.statesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.states, 'states', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'tags', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.creator)) {
    query['creator'] = request.creator;
  }
  if (!Util.isUnset(request.endTimeShrink)) {
    query['endTime'] = request.endTimeShrink;
  }
  if (!Util.isUnset(request.jobRunId)) {
    query['jobRunId'] = request.jobRunId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.name)) {
    query['name'] = request.name;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['regionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceQueueId)) {
    query['resourceQueueId'] = request.resourceQueueId;
  }
  if (!Util.isUnset(request.startTimeShrink)) {
    query['startTime'] = request.startTimeShrink;
  }
  if (!Util.isUnset(request.statesShrink)) {
    query['states'] = request.statesShrink;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['tags'] = request.tagsShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListJobRuns',
    version = '2023-08-08',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(workspaceId)}/jobRuns`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询run列表
 *
 * @param request ListJobRunsRequest
 * @return ListJobRunsResponse
 */
async function listJobRuns(workspaceId: string, request: ListJobRunsRequest): ListJobRunsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listJobRunsWithOptions(workspaceId, request, headers, runtime);
}

model StartJobRunRequest {
  clientToken?: string(name='clientToken', example='8e6aae2810c8f67229ca70bb31cd6028'),
  codeType?: string(name='codeType', example='SQL'),
  configurationOverrides?: {
    configurations?: [ 
      {
        configFileName?: string(name='configFileName', example='spark-default.conf'),
        configItemKey?: string(name='configItemKey', example='spark.app.name'),
        configItemValue?: string(name='configItemValue', example='test_app'),
      }
    ](name='configurations'),
  }(name='configurationOverrides'),
  executionTimeoutSeconds?: int32(name='executionTimeoutSeconds', example='100'),
  jobDriver?: JobDriver(name='jobDriver'),
  jobId?: string(name='jobId', example='jr-12345'),
  name?: string(name='name', example='spark_job_name'),
  releaseVersion?: string(name='releaseVersion', example='esr-3.3.1'),
  resourceQueueId?: string(name='resourceQueueId', example='dev_queue'),
  tags?: [
    Tag
  ](name='tags'),
  regionId?: string(name='regionId', example='cn-hangzhou'),
}

model StartJobRunResponseBody = {
  jobRunId?: string(name='jobRunId', example='jr-54321'),
  requestId?: string(name='requestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model StartJobRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartJobRunResponseBody(name='body'),
}

/**
 * @summary 启动作业
 *
 * @param request StartJobRunRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartJobRunResponse
 */
async function startJobRunWithOptions(workspaceId: string, request: StartJobRunRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartJobRunResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['clientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.codeType)) {
    body['codeType'] = request.codeType;
  }
  if (!Util.isUnset(request.configurationOverrides)) {
    body['configurationOverrides'] = request.configurationOverrides;
  }
  if (!Util.isUnset(request.executionTimeoutSeconds)) {
    body['executionTimeoutSeconds'] = request.executionTimeoutSeconds;
  }
  if (!Util.isUnset(request.jobDriver)) {
    body['jobDriver'] = request.jobDriver;
  }
  if (!Util.isUnset(request.jobId)) {
    body['jobId'] = request.jobId;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.releaseVersion)) {
    body['releaseVersion'] = request.releaseVersion;
  }
  if (!Util.isUnset(request.resourceQueueId)) {
    body['resourceQueueId'] = request.resourceQueueId;
  }
  if (!Util.isUnset(request.tags)) {
    body['tags'] = request.tags;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartJobRun',
    version = '2023-08-08',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(workspaceId)}/jobRuns`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 启动作业
 *
 * @param request StartJobRunRequest
 * @return StartJobRunResponse
 */
async function startJobRun(workspaceId: string, request: StartJobRunRequest): StartJobRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startJobRunWithOptions(workspaceId, request, headers, runtime);
}

