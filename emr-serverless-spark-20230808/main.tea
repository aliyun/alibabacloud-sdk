/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('emr-serverless-spark', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model Artifact {
  bizId?: string(name='bizId', description='This parameter is required.'),
  creator?: long(name='creator', description='This parameter is required.'),
  credential?: Credential(name='credential'),
  gmtCreated?: string(name='gmtCreated', description='This parameter is required.'),
  gmtModified?: string(name='gmtModified', description='This parameter is required.'),
  location?: string(name='location', description='This parameter is required.'),
  modifier?: long(name='modifier', description='This parameter is required.'),
  name?: string(name='name', description='This parameter is required.'),
}

model Category {
  bizId?: string(name='bizId', description='This parameter is required.'),
  creator?: long(name='creator', description='This parameter is required.'),
  gmtCreated?: string(name='gmtCreated', description='This parameter is required.'),
  gmtModified?: string(name='gmtModified', description='This parameter is required.'),
  modifier?: long(name='modifier', description='This parameter is required.'),
  name?: string(name='name', description='This parameter is required.'),
  parentBizId?: string(name='parentBizId'),
  type?: string(name='type', description='This parameter is required.'),
}

model Configuration {
  configFileName?: string(name='configFileName'),
  configItemKey?: string(name='configItemKey'),
  configItemValue?: string(name='configItemValue'),
}

model ConfigurationOverrides {
  configurations?: [ 
    {
      configFileName?: string(name='configFileName'),
      configItemKey?: string(name='configItemKey'),
      configItemValue?: string(name='configItemValue'),
    }
  ](name='configurations'),
}

model Credential {
  accessId?: string(name='accessId', description='This parameter is required.'),
  dir?: string(name='dir', description='This parameter is required.'),
  expire?: string(name='expire', description='This parameter is required.'),
  host?: string(name='host', description='This parameter is required.'),
  policy?: string(name='policy', description='This parameter is required.'),
  securityToken?: string(name='securityToken', description='This parameter is required.'),
  signature?: string(name='signature', description='This parameter is required.'),
}

model JobDriver {
  sparkSubmit?: {
    entryPoint?: string(name='entryPoint'),
    entryPointArguments?: [ string ](name='entryPointArguments'),
    sparkSubmitParameters?: string(name='sparkSubmitParameters'),
  }(name='sparkSubmit'),
}

model PrincipalAction {
  actionArn?: string(name='actionArn', example='acs:emr::workspaceId:action/create_queue'),
  principalArn?: string(name='principalArn', example='acs:emr::workspaceId:user/237593691541622267'),
}

model ReleaseVersionImage {
  cpuArchitecture?: string(name='cpuArchitecture'),
  imageId?: string(name='imageId'),
  runtimeEngineType?: string(name='runtimeEngineType'),
}

model RunLog {
  driverStartup?: string(name='driverStartup'),
  driverStdError?: string(name='driverStdError'),
  driverStdOut?: string(name='driverStdOut'),
  driverSyslog?: string(name='driverSyslog'),
}

model SparkConf {
  key?: string(name='key', description='This parameter is required.'),
  value?: string(name='value', description='This parameter is required.'),
}

model SqlOutput {
  rows?: [ 
    {
      values?: [ string ](name='values', example='null'),
    }
  ](name='rows'),
  schema?: {
    fields?: [ 
      {
        name?: string(name='name'),
        nullable?: boolean(name='nullable'),
        type?: string(name='type'),
      }
    ](name='fields'),
  }(name='schema'),
}

model Tag {
  key?: string(name='key', description='标签key值。', example='workflowId'),
  value?: string(name='value', description='标签key值。', example='wf-123test'),
}

model Task {
  archives?: [ string ](name='archives'),
  artifactUrl?: string(name='artifactUrl'),
  bizId?: string(name='bizId', description='This parameter is required.'),
  categoryBizId?: string(name='categoryBizId'),
  content?: string(name='content'),
  creator?: long(name='creator', description='This parameter is required.'),
  defaultCatalogId?: string(name='defaultCatalogId'),
  defaultDatabase?: string(name='defaultDatabase'),
  defaultResourceQueueId?: string(name='defaultResourceQueueId'),
  defaultSqlComputeId?: string(name='defaultSqlComputeId'),
  deploymentId?: string(name='deploymentId'),
  extraArtifactIds?: [ string ](name='extraArtifactIds'),
  extraSparkSubmitParams?: string(name='extraSparkSubmitParams'),
  files?: [ string ](name='files'),
  gmtCreated?: string(name='gmtCreated', description='This parameter is required.'),
  gmtModified?: string(name='gmtModified', description='This parameter is required.'),
  hasChanged?: boolean(name='hasChanged'),
  hasCommited?: boolean(name='hasCommited', description='This parameter is required.'),
  isStreaming?: boolean(name='isStreaming'),
  jars?: [ string ](name='jars'),
  lastRunResourceQueueId?: string(name='lastRunResourceQueueId'),
  modifier?: long(name='modifier', description='This parameter is required.'),
  name?: string(name='name', description='This parameter is required.'),
  pyFiles?: [ string ](name='pyFiles'),
  sparkArgs?: string(name='sparkArgs', example='100'),
  sparkConf?: [
    SparkConf
  ](name='sparkConf'),
  sparkDriverCores?: int32(name='sparkDriverCores', description='This parameter is required.'),
  sparkDriverMemory?: long(name='sparkDriverMemory', description='This parameter is required.'),
  sparkEntrypoint?: string(name='sparkEntrypoint'),
  sparkExecutorCores?: int32(name='sparkExecutorCores', description='This parameter is required.'),
  sparkExecutorMemory?: long(name='sparkExecutorMemory', description='This parameter is required.'),
  sparkLogLevel?: string(name='sparkLogLevel', description='This parameter is required.'),
  sparkLogPath?: string(name='sparkLogPath', description='This parameter is required.'),
  sparkSubmitClause?: string(name='sparkSubmitClause'),
  sparkVersion?: string(name='sparkVersion', description='This parameter is required.'),
  tags?: map[string]string(name='tags'),
  type?: string(name='type', description='This parameter is required.'),
}

model TaskInstance {
  bizId?: string(name='bizId'),
  creator?: long(name='creator'),
  fenixRunId?: string(name='fenixRunId'),
  gmtCreated?: string(name='gmtCreated'),
  taskBizId?: string(name='taskBizId'),
  taskInfo?: Task(name='taskInfo'),
  taskStatus?: string(name='taskStatus'),
  workspaceBizId?: string(name='workspaceBizId'),
}

model TaskSnapshot {
  bizId?: string(name='bizId'),
  commiter?: long(name='commiter'),
  gmtCreated?: string(name='gmtCreated'),
  item?: Task(name='item'),
  message?: string(name='message'),
  taskBizId?: string(name='taskBizId'),
  version?: string(name='version'),
}

model Template {
  creator?: long(name='creator', description='This parameter is required.'),
  gmtCreated?: string(name='gmtCreated', description='This parameter is required.'),
  gmtModified?: string(name='gmtModified', description='This parameter is required.'),
  modifier?: long(name='modifier', description='This parameter is required.'),
  sparkConf?: [
    SparkConf
  ](name='sparkConf'),
  sparkDriverCores?: int32(name='sparkDriverCores', description='This parameter is required.'),
  sparkDriverMemory?: long(name='sparkDriverMemory', description='This parameter is required.'),
  sparkExecutorCores?: int32(name='sparkExecutorCores', description='This parameter is required.'),
  sparkExecutorMemory?: long(name='sparkExecutorMemory', description='This parameter is required.'),
  sparkLogLevel?: string(name='sparkLogLevel', description='This parameter is required.'),
  sparkLogPath?: string(name='sparkLogPath', description='This parameter is required.'),
  sparkVersion?: string(name='sparkVersion', description='This parameter is required.'),
  templateType?: string(name='templateType'),
}

model TimeRange {
  endTime?: long(name='endTime', description='时间范围结束时间。', example='1688370894339'),
  startTime?: long(name='startTime', description='时间范围开始时间。', example='1688370894339'),
}

model AddMembersRequest {
  memberArns?: [ string ](name='memberArns', description='This parameter is required.'),
  workspaceId?: string(name='workspaceId', description='This parameter is required.', example='w-975bcfda9625****'),
  regionId?: string(name='regionId', example='cn-hangzhou'),
}

model AddMembersResponseBody = {
  requestId?: string(name='requestId', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model AddMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddMembersResponseBody(name='body'),
}

/**
 * @summary 添加用户
 *
 * @param request AddMembersRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddMembersResponse
 */
async function addMembersWithOptions(request: AddMembersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddMembersResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.memberArns)) {
    body['memberArns'] = request.memberArns;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['workspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddMembers',
    version = '2023-08-08',
    protocol = 'HTTPS',
    pathname = `/api/v1/auth/members`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 添加用户
 *
 * @param request AddMembersRequest
 * @return AddMembersResponse
 */
async function addMembers(request: AddMembersRequest): AddMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addMembersWithOptions(request, headers, runtime);
}

model CancelJobRunRequest {
  regionId?: string(name='regionId', example='cn-hangzhou'),
}

model CancelJobRunResponseBody = {
  jobRunId?: string(name='jobRunId', example='jr-1a2bc3'),
  requestId?: string(name='requestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model CancelJobRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelJobRunResponseBody(name='body'),
}

/**
 * @summary 取消jobRun作业
 *
 * @param request CancelJobRunRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CancelJobRunResponse
 */
async function cancelJobRunWithOptions(workspaceId: string, jobRunId: string, request: CancelJobRunRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelJobRunResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelJobRun',
    version = '2023-08-08',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(workspaceId)}/jobRuns/${OpenApiUtil.getEncodeParam(jobRunId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 取消jobRun作业
 *
 * @param request CancelJobRunRequest
 * @return CancelJobRunResponse
 */
async function cancelJobRun(workspaceId: string, jobRunId: string, request: CancelJobRunRequest): CancelJobRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return cancelJobRunWithOptions(workspaceId, jobRunId, request, headers, runtime);
}

model CreateSqlStatementRequest {
  codeContent?: string(name='codeContent', example='SHOW TABLES'),
  defaultCatalog?: string(name='defaultCatalog', example='default_catalog'),
  defaultDatabase?: string(name='defaultDatabase', example='default'),
  limit?: int32(name='limit', example='1000'),
  sqlComputeId?: string(name='sqlComputeId', example='sc-dfahdfjafhajd****'),
  regionId?: string(name='regionId', example='cn-hangzhou'),
}

model CreateSqlStatementResponseBody = {
  data?: {
    statementId?: string(name='statementId', example='st-1231dfafadfa***'),
  }(name='data'),
  requestId?: string(name='requestId', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model CreateSqlStatementResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSqlStatementResponseBody(name='body'),
}

/**
 * @summary 使用session运行SQL
 *
 * @param request CreateSqlStatementRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSqlStatementResponse
 */
async function createSqlStatementWithOptions(workspaceId: string, request: CreateSqlStatementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSqlStatementResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.codeContent)) {
    body['codeContent'] = request.codeContent;
  }
  if (!Util.isUnset(request.defaultCatalog)) {
    body['defaultCatalog'] = request.defaultCatalog;
  }
  if (!Util.isUnset(request.defaultDatabase)) {
    body['defaultDatabase'] = request.defaultDatabase;
  }
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.sqlComputeId)) {
    body['sqlComputeId'] = request.sqlComputeId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSqlStatement',
    version = '2023-08-08',
    protocol = 'HTTPS',
    pathname = `/api/interactive/v1/workspace/${OpenApiUtil.getEncodeParam(workspaceId)}/statement`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 使用session运行SQL
 *
 * @param request CreateSqlStatementRequest
 * @return CreateSqlStatementResponse
 */
async function createSqlStatement(workspaceId: string, request: CreateSqlStatementRequest): CreateSqlStatementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createSqlStatementWithOptions(workspaceId, request, headers, runtime);
}

model GetJobRunRequest {
  regionId?: string(name='regionId', example='cn-hangzhou'),
}

model GetJobRunResponseBody = {
  jobRun?: {
    codeType?: string(name='codeType', description='作业代码类型。', example='SQL'),
    configurationOverrides?: {
      configurations?: [
        Configuration
      ](name='configurations'),
    }(name='configurationOverrides'),
    endTime?: long(name='endTime', description='作业结束时间。', example='1684119314000'),
    executionTimeoutSeconds?: int32(name='executionTimeoutSeconds', description='运行超时时间。', example='3600'),
    jobDriver?: JobDriver(name='jobDriver'),
    jobRunId?: string(name='jobRunId', description='任务实例ID。', example='jr-231231'),
    log?: RunLog(name='log'),
    name?: string(name='name', description='作业实例名称。', example='jobName'),
    releaseVersion?: string(name='releaseVersion', example='esr-3.3.1'),
    resourceOwnerId?: string(name='resourceOwnerId', description='创建用户Uid。', example='1509789347011222'),
    resourceQueueId?: string(name='resourceQueueId', example='root_queue'),
    state?: string(name='state', description='作业状态。', example='Running'),
    stateChangeReason?: {
      code?: string(name='code', example='ERR-100000'),
      message?: string(name='message', example='connection refused'),
    }(name='stateChangeReason'),
    submitTime?: long(name='submitTime', description='作业提交时间。', example='1684119314000'),
    tags?: [
      Tag
    ](name='tags', description='标签。'),
    webUI?: string(name='webUI', description='作业web ui。', example='http://spark-ui'),
    workspaceId?: string(name='workspaceId', description='工作空间id。', example='w-1234abcd'),
  }(name='jobRun'),
  requestId?: string(name='requestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GetJobRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobRunResponseBody(name='body'),
}

/**
 * @summary 获取任务
 *
 * @param request GetJobRunRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetJobRunResponse
 */
async function getJobRunWithOptions(workspaceId: string, jobRunId: string, request: GetJobRunRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetJobRunResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetJobRun',
    version = '2023-08-08',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(workspaceId)}/jobRuns/${OpenApiUtil.getEncodeParam(jobRunId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取任务
 *
 * @param request GetJobRunRequest
 * @return GetJobRunResponse
 */
async function getJobRun(workspaceId: string, jobRunId: string, request: GetJobRunRequest): GetJobRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getJobRunWithOptions(workspaceId, jobRunId, request, headers, runtime);
}

model GetSqlStatementRequest {
  regionId?: string(name='regionId', example='cn-hangzhou'),
}

model GetSqlStatementResponseBody = {
  data?: {
    executionTime?: [ long ](name='executionTime'),
    sqlErrorCode?: string(name='sqlErrorCode', example='ERROR-102'),
    sqlErrorMessage?: string(name='sqlErrorMessage', example='error message'),
    sqlOutputs?: [ 
      {
        rows?: string(name='rows', example='[{\\\\"values\\\\":[\\\\"test_db\\\\",\\\\"test_table\\\\",false]}'),
        schema?: string(name='schema', example='{\\\\"type\\\\":\\\\"struct\\\\",\\\\"fields\\\\":[{\\\\"name\\\\":\\\\"namespace\\\\",\\\\"type\\\\":\\\\"string\\\\",\\\\"nullable\\\\":false,\\\\"metadata\\\\":{}},{\\\\"name\\\\":\\\\"tableName\\\\",\\\\"type\\\\":\\\\"string\\\\",\\\\"nullable\\\\":false,\\\\"metadata\\\\":{}},{\\\\"name\\\\":\\\\"isTemporary\\\\",\\\\"type\\\\":\\\\"boolean\\\\",\\\\"nullable\\\\":false,\\\\"metadata\\\\":{}}]}'),
      }
    ](name='sqlOutputs'),
    state?: string(name='state', example='running'),
    statementId?: string(name='statementId', example='st-1231311abadfaa'),
  }(name='data'),
  requestId?: string(name='requestId', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GetSqlStatementResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSqlStatementResponseBody(name='body'),
}

/**
 * @summary 获取Sql Statement状态
 *
 * @param request GetSqlStatementRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSqlStatementResponse
 */
async function getSqlStatementWithOptions(workspaceId: string, statementId: string, request: GetSqlStatementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSqlStatementResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSqlStatement',
    version = '2023-08-08',
    protocol = 'HTTPS',
    pathname = `/api/interactive/v1/workspace/${OpenApiUtil.getEncodeParam(workspaceId)}/statement/${OpenApiUtil.getEncodeParam(statementId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取Sql Statement状态
 *
 * @param request GetSqlStatementRequest
 * @return GetSqlStatementResponse
 */
async function getSqlStatement(workspaceId: string, statementId: string, request: GetSqlStatementRequest): GetSqlStatementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getSqlStatementWithOptions(workspaceId, statementId, request, headers, runtime);
}

model GrantRoleToUsersRequest {
  roleArn?: string(name='roleArn', example='acs:emr::w-975bcfda9625****:role/Owner'),
  userArns?: [ string ](name='userArns'),
  regionId?: string(name='regionId', example='cn-hangzhou'),
}

model GrantRoleToUsersResponseBody = {
  requestId?: string(name='requestId', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GrantRoleToUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GrantRoleToUsersResponseBody(name='body'),
}

/**
 * @summary 给用户授权Role列表
 *
 * @param request GrantRoleToUsersRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GrantRoleToUsersResponse
 */
async function grantRoleToUsersWithOptions(request: GrantRoleToUsersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GrantRoleToUsersResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.roleArn)) {
    body['roleArn'] = request.roleArn;
  }
  if (!Util.isUnset(request.userArns)) {
    body['userArns'] = request.userArns;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GrantRoleToUsers',
    version = '2023-08-08',
    protocol = 'HTTPS',
    pathname = `/api/v1/auth/roles/grant`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 给用户授权Role列表
 *
 * @param request GrantRoleToUsersRequest
 * @return GrantRoleToUsersResponse
 */
async function grantRoleToUsers(request: GrantRoleToUsersRequest): GrantRoleToUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return grantRoleToUsersWithOptions(request, headers, runtime);
}

model ListJobRunsRequest {
  creator?: string(name='creator', description='创建用户Uid。', example='1509789347011222'),
  endTime?: {
    endTime?: long(name='endTime', example='1710432000000'),
    startTime?: long(name='startTime', example='1709740800000'),
  }(name='endTime'),
  jobRunDeploymentId?: string(name='jobRunDeploymentId'),
  jobRunId?: string(name='jobRunId', description='作业id。', example='j-xxx'),
  maxResults?: int32(name='maxResults', description='一次获取的最大记录数。', example='20'),
  name?: string(name='name', description='作业名称。', example='emr-spark-demo-job'),
  nextToken?: string(name='nextToken', description='标记当前开始读取的位置，置空表示从头开始。', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  regionId?: string(name='regionId', example='cn-hangzhou'),
  resourceQueueId?: string(name='resourceQueueId', example='dev_queue'),
  startTime?: {
    endTime?: long(name='endTime', example='1710432000000'),
    startTime?: long(name='startTime', example='1709740800000'),
  }(name='startTime'),
  states?: [ string ](name='states', description='作业状态。', example='["Running","Submitted"]'),
  tags?: [ 
    {
      key?: string(name='key', example='tag_key'),
      value?: string(name='value', example='value'),
    }
  ](name='tags', description='标签。'),
}

model ListJobRunsShrinkRequest {
  creator?: string(name='creator', description='创建用户Uid。', example='1509789347011222'),
  endTimeShrink?: string(name='endTime'),
  jobRunDeploymentId?: string(name='jobRunDeploymentId'),
  jobRunId?: string(name='jobRunId', description='作业id。', example='j-xxx'),
  maxResults?: int32(name='maxResults', description='一次获取的最大记录数。', example='20'),
  name?: string(name='name', description='作业名称。', example='emr-spark-demo-job'),
  nextToken?: string(name='nextToken', description='标记当前开始读取的位置，置空表示从头开始。', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  regionId?: string(name='regionId', example='cn-hangzhou'),
  resourceQueueId?: string(name='resourceQueueId', example='dev_queue'),
  startTimeShrink?: string(name='startTime'),
  statesShrink?: string(name='states', description='作业状态。', example='["Running","Submitted"]'),
  tagsShrink?: string(name='tags', description='标签。'),
}

model ListJobRunsResponseBody = {
  jobRuns?: [ 
    {
      codeType?: string(name='codeType', description='作业代码类型。', example='SQL'),
      configurationOverrides?: {
        configurations?: [
          Configuration
        ](name='configurations'),
      }(name='configurationOverrides'),
      creator?: string(name='creator', description='创建用户Uid。', example='1509789347011222'),
      endTime?: long(name='endTime', description='作业结束时间。', example='1684119314000'),
      executionTimeoutSeconds?: int32(name='executionTimeoutSeconds', description='运行超时时间。', example='3600'),
      jobDriver?: JobDriver(name='jobDriver'),
      jobRunId?: string(name='jobRunId', description='任务实例ID。', example='jr-231231'),
      log?: RunLog(name='log'),
      name?: string(name='name', description='作业实例名称。', example='jobName'),
      releaseVersion?: string(name='releaseVersion', example='esr-native-3.4.0'),
      state?: string(name='state', description='作业状态。', example='Running'),
      stateChangeReason?: {
        code?: string(name='code', example='0'),
        message?: string(name='message', example='success'),
      }(name='stateChangeReason'),
      submitTime?: long(name='submitTime', description='作业提交时间。', example='1684119314000'),
      tags?: [
        Tag
      ](name='tags', description='标签。'),
      webUI?: string(name='webUI', description='作业web ui。', example='http://spark-ui'),
      workspaceId?: string(name='workspaceId', description='工作空间id。', example='w-1234abcd'),
    }
  ](name='jobRuns'),
  maxResults?: int32(name='maxResults', description='本次请求所返回的最大记录条数。', example='20'),
  nextToken?: string(name='nextToken', description='返回读取到的数据位置，空代表数据已经读取完毕。', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  requestId?: string(name='requestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='totalCount', description='本次请求条件下的数据总量。', example='200'),
}

model ListJobRunsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListJobRunsResponseBody(name='body'),
}

/**
 * @summary 查询run列表
 *
 * @param tmpReq ListJobRunsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListJobRunsResponse
 */
async function listJobRunsWithOptions(workspaceId: string, tmpReq: ListJobRunsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListJobRunsResponse {
  Util.validateModel(tmpReq);
  var request = new ListJobRunsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.endTime)) {
    request.endTimeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.endTime, 'endTime', 'json');
  }
  if (!Util.isUnset(tmpReq.startTime)) {
    request.startTimeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.startTime, 'startTime', 'json');
  }
  if (!Util.isUnset(tmpReq.states)) {
    request.statesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.states, 'states', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'tags', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.creator)) {
    query['creator'] = request.creator;
  }
  if (!Util.isUnset(request.endTimeShrink)) {
    query['endTime'] = request.endTimeShrink;
  }
  if (!Util.isUnset(request.jobRunDeploymentId)) {
    query['jobRunDeploymentId'] = request.jobRunDeploymentId;
  }
  if (!Util.isUnset(request.jobRunId)) {
    query['jobRunId'] = request.jobRunId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.name)) {
    query['name'] = request.name;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['regionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceQueueId)) {
    query['resourceQueueId'] = request.resourceQueueId;
  }
  if (!Util.isUnset(request.startTimeShrink)) {
    query['startTime'] = request.startTimeShrink;
  }
  if (!Util.isUnset(request.statesShrink)) {
    query['states'] = request.statesShrink;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['tags'] = request.tagsShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListJobRuns',
    version = '2023-08-08',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(workspaceId)}/jobRuns`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询run列表
 *
 * @param request ListJobRunsRequest
 * @return ListJobRunsResponse
 */
async function listJobRuns(workspaceId: string, request: ListJobRunsRequest): ListJobRunsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listJobRunsWithOptions(workspaceId, request, headers, runtime);
}

model ListReleaseVersionsRequest {
  regionId?: string(name='regionId', example='cn-hangzhou'),
  releaseType?: string(name='releaseType', example='stable'),
  releaseVersion?: string(name='releaseVersion', example='esr-2.1 (Spark 3.3.1, Scala 2.12, Java Runtime)'),
  releaseVersionStatus?: string(name='releaseVersionStatus', example='ONLINE'),
}

model ListReleaseVersionsResponseBody = {
  maxResults?: int32(name='maxResults', description='一次获取的最大记录数。', example='20'),
  nextToken?: string(name='nextToken', description='下一页TOKEN。', example='1'),
  releaseVersions?: [ 
    {
      communityVersion?: string(name='communityVersion', example='Spark 3.3.1'),
      cpuArchitectures?: [ string ](name='cpuArchitectures'),
      gmtCreate?: long(name='gmtCreate', example='1716215854101'),
      iaasType?: string(name='iaasType', example='ASI'),
      releaseVersion?: string(name='releaseVersion', example='esr-2.1 (Spark 3.3.1, Scala 2.12, Java Runtime)'),
      scalaVersion?: string(name='scalaVersion', example='2.12'),
      state?: string(name='state', example='ONLINE'),
      type?: string(name='type', example='stable'),
    }
  ](name='releaseVersions'),
  requestId?: string(name='requestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='totalCount', description='记录总数。', example='200'),
}

model ListReleaseVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListReleaseVersionsResponseBody(name='body'),
}

/**
 * @summary 获取发布版本列表
 *
 * @param request ListReleaseVersionsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListReleaseVersionsResponse
 */
async function listReleaseVersionsWithOptions(request: ListReleaseVersionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListReleaseVersionsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    query['regionId'] = request.regionId;
  }
  if (!Util.isUnset(request.releaseType)) {
    query['releaseType'] = request.releaseType;
  }
  if (!Util.isUnset(request.releaseVersion)) {
    query['releaseVersion'] = request.releaseVersion;
  }
  if (!Util.isUnset(request.releaseVersionStatus)) {
    query['releaseVersionStatus'] = request.releaseVersionStatus;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListReleaseVersions',
    version = '2023-08-08',
    protocol = 'HTTPS',
    pathname = `/api/v1/releaseVersions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取发布版本列表
 *
 * @param request ListReleaseVersionsRequest
 * @return ListReleaseVersionsResponse
 */
async function listReleaseVersions(request: ListReleaseVersionsRequest): ListReleaseVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listReleaseVersionsWithOptions(request, headers, runtime);
}

model ListSessionClustersRequest {
  maxResults?: int32(name='maxResults', description='一次获取的最大记录数。', example='20'),
  nextToken?: string(name='nextToken', description='标记当前开始读取的位置，置空表示从头开始。', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  queueName?: string(name='queueName', example='root'),
  regionId?: string(name='regionId', example='cn-hangzhou'),
  sessionClusterId?: string(name='sessionClusterId', description='作业名称。', example='emr-spark-demo-job'),
}

model ListSessionClustersResponseBody = {
  maxResults?: int32(name='maxResults', description='本次请求所返回的最大记录条数。', example='20'),
  nextToken?: string(name='nextToken', description='返回读取到的数据位置，空代表数据已经读取完毕。', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  requestId?: string(name='requestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  sessionClusters?: [ 
    {
      applicationConfigs?: [ 
        {
          configFileName?: string(name='configFileName', example='spark-default.conf'),
          configItemKey?: string(name='configItemKey', example='spark.app.name'),
          configItemValue?: string(name='configItemValue', example='test_application'),
        }
      ](name='applicationConfigs'),
      autoStartConfiguration?: {
        enable?: boolean(name='enable', example='true'),
      }(name='autoStartConfiguration'),
      autoStopConfiguration?: {
        enable?: boolean(name='enable', example='false'),
        idleTimeoutMinutes?: int32(name='idleTimeoutMinutes', example='45'),
      }(name='autoStopConfiguration'),
      name?: string(name='name', example='adhoc_query'),
      queueName?: string(name='queueName', description='作业实例名称。', example='dev_queue'),
      sessionClusterId?: string(name='sessionClusterId', description='SQL Compute id', example='sc-123131'),
      state?: string(name='state', description='作业状态。', example='Running'),
      stateChangeReason?: {
        code?: string(name='code', example='200'),
        message?: string(name='message', example='ok'),
      }(name='stateChangeReason'),
      userId?: string(name='userId', description='任务实例ID。', example='123131'),
      userName?: string(name='userName', example='test_user'),
      workspaceId?: string(name='workspaceId', description='工作空间id。', example='w-1234abcd'),
    }
  ](name='sessionClusters'),
  totalCount?: int32(name='totalCount', description='本次请求条件下的数据总量。', example='200'),
}

model ListSessionClustersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSessionClustersResponseBody(name='body'),
}

/**
 * @summary 查询run列表
 *
 * @param request ListSessionClustersRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSessionClustersResponse
 */
async function listSessionClustersWithOptions(workspaceId: string, request: ListSessionClustersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSessionClustersResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.queueName)) {
    query['queueName'] = request.queueName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['regionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sessionClusterId)) {
    query['sessionClusterId'] = request.sessionClusterId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSessionClusters',
    version = '2023-08-08',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(workspaceId)}/sessionClusters`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询run列表
 *
 * @param request ListSessionClustersRequest
 * @return ListSessionClustersResponse
 */
async function listSessionClusters(workspaceId: string, request: ListSessionClustersRequest): ListSessionClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSessionClustersWithOptions(workspaceId, request, headers, runtime);
}

model ListWorkspaceQueuesRequest {
  environment?: string(name='environment', example='production'),
  regionId?: string(name='regionId', example='cn-hangzhou'),
}

model ListWorkspaceQueuesResponseBody = {
  maxResults?: int32(name='maxResults', description='一次获取的最大记录数。', example='20'),
  nextToken?: string(name='nextToken', description='下一页TOKEN。', example='1'),
  queues?: [ 
    {
      allowActions?: [ 
        {
          actionArn?: string(name='actionArn', description='行为 arn。', example='acs:emr::workspaceId:action/create_queue'),
          actionName?: string(name='actionName', description='权限名称。', example='view'),
          dependencies?: [ string ](name='dependencies', description='action 依赖列表。', example='["view"]'),
          description?: string(name='description', description='action 描述。', example='文件目录遍历、文件浏览'),
          displayName?: string(name='displayName', description='权限展示名称。', example='文件目录遍历、文件浏览'),
        }
      ](name='allowActions', description='队列允许的操作'),
      creator?: string(name='creator', example='237109'),
      environments?: [ string ](name='environments'),
      maxResource?: string(name='maxResource', description='队列资源最大容量', example='{"cpu": "2","memory": "2Gi"}'),
      minResource?: string(name='minResource', description='队列资源最小容量', example='{"cpu": "2","memory": "2Gi"}'),
      properties?: string(name='properties', description='队列Label', example='dev_queue'),
      queueName?: string(name='queueName', description='队列名称。', example='dev_queue'),
      queueScope?: string(name='queueScope', description='队列架构', example='{"arch": "x86"}'),
      queueStatus?: string(name='queueStatus', example='RUNNING'),
      queueType?: string(name='queueType', description='队列类型', example='instance, instanceChildren'),
      regionId?: string(name='regionId', description='regionId。', example='cn-hangzhou'),
      usedResource?: string(name='usedResource', description='队列资源使用容量', example='{"cpu": "2","memory": "2Gi"}'),
      workspaceId?: string(name='workspaceId', description='工作空间id。', example='w-1234abcd'),
    }
  ](name='queues'),
  requestId?: string(name='requestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='totalCount', description='记录总数。', example='200'),
}

model ListWorkspaceQueuesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkspaceQueuesResponseBody(name='body'),
}

/**
 * @summary 查看工作空间队列列表
 *
 * @param request ListWorkspaceQueuesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWorkspaceQueuesResponse
 */
async function listWorkspaceQueuesWithOptions(workspaceId: string, request: ListWorkspaceQueuesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListWorkspaceQueuesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.environment)) {
    query['environment'] = request.environment;
  }
  if (!Util.isUnset(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWorkspaceQueues',
    version = '2023-08-08',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(workspaceId)}/queues`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看工作空间队列列表
 *
 * @param request ListWorkspaceQueuesRequest
 * @return ListWorkspaceQueuesResponse
 */
async function listWorkspaceQueues(workspaceId: string, request: ListWorkspaceQueuesRequest): ListWorkspaceQueuesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listWorkspaceQueuesWithOptions(workspaceId, request, headers, runtime);
}

model ListWorkspacesRequest {
  maxResults?: int32(name='maxResults', description='一次获取的最大记录数。', example='20'),
  name?: string(name='name', example='test_workspace'),
  nextToken?: string(name='nextToken', description='标记当前开始读取的位置，置空表示从头开始。', example='1'),
  regionId?: string(name='regionId', example='cn-hangzhou'),
  state?: string(name='state', example='running'),
}

model ListWorkspacesResponseBody = {
  maxResults?: int32(name='maxResults', description='一次获取的最大记录数。', example='20'),
  nextToken?: string(name='nextToken', description='下一页TOKEN。', example='1'),
  requestId?: string(name='requestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='totalCount', description='记录总数。', example='200'),
  workspaces?: [ 
    {
      autoRenew?: boolean(name='autoRenew', description='是否自动续费(pre付费类型必须)。', example='true'),
      autoRenewPeriod?: int32(name='autoRenewPeriod', description='自动续费时长(pre付费类型必须)。', example='1'),
      autoRenewPeriodUnit?: string(name='autoRenewPeriodUnit', description='自动续费周期(pre付费类型必须)。', example='YEAR, MONTH, WEEK, DAY, HOUR, MINUTE'),
      createTime?: long(name='createTime', example='1684115879955'),
      dlfCatalogId?: string(name='dlfCatalogId', description='dlf catalog 信息。', example='default'),
      duration?: int32(name='duration', description='订购周期数量(pre付费类型必须)。', example='1'),
      endTime?: long(name='endTime', example='1687103999999'),
      failReason?: string(name='failReason', description='失败原因。', example='out of stock'),
      paymentDurationUnit?: string(name='paymentDurationUnit', description='订购周期(pre付费类型必须)。', example='YEAR, MONTH, WEEK, DAY, HOUR, MINUTE'),
      paymentStatus?: string(name='paymentStatus', description='支付状态。', example='PAID/UNPAID'),
      paymentType?: string(name='paymentType', description='付费类型。', example='PayAsYouGo or Subscription'),
      regionId?: string(name='regionId', example='cn-shanghai'),
      releaseType?: string(name='releaseType', example='SERVICE_RELEASE'),
      resourceSpec?: string(name='resourceSpec', description='资源规格。', example='100cu'),
      stateChangeReason?: {
        code?: string(name='code', example='0'),
        message?: string(name='message', example='Success'),
      }(name='stateChangeReason'),
      storage?: string(name='storage', description='oss 路径。', example='spark-result'),
      workspaceId?: string(name='workspaceId', description='Workspace Id。', example='w-******'),
      workspaceName?: string(name='workspaceName', description='工作空间名称。', example='spark批作业空间-1'),
      workspaceStatus?: string(name='workspaceStatus', description='工作空间状态。', example='STARTING,RUNNING,TERMINATED'),
    }
  ](name='workspaces'),
}

model ListWorkspacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkspacesResponseBody(name='body'),
}

/**
 * @summary 查看工作空间列表
 *
 * @param request ListWorkspacesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWorkspacesResponse
 */
async function listWorkspacesWithOptions(request: ListWorkspacesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListWorkspacesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.name)) {
    query['name'] = request.name;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['regionId'] = request.regionId;
  }
  if (!Util.isUnset(request.state)) {
    query['state'] = request.state;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWorkspaces',
    version = '2023-08-08',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看工作空间列表
 *
 * @param request ListWorkspacesRequest
 * @return ListWorkspacesResponse
 */
async function listWorkspaces(request: ListWorkspacesRequest): ListWorkspacesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listWorkspacesWithOptions(request, headers, runtime);
}

model StartJobRunRequest {
  clientToken?: string(name='clientToken', example='8e6aae2810c8f67229ca70bb31cd6028'),
  codeType?: string(name='codeType', example='SQL'),
  configurationOverrides?: {
    configurations?: [ 
      {
        configFileName?: string(name='configFileName', example='spark-default.conf'),
        configItemKey?: string(name='configItemKey', example='spark.app.name'),
        configItemValue?: string(name='configItemValue', example='test_app'),
      }
    ](name='configurations'),
  }(name='configurationOverrides'),
  executionTimeoutSeconds?: int32(name='executionTimeoutSeconds', example='100'),
  jobDriver?: JobDriver(name='jobDriver'),
  jobId?: string(name='jobId', example='jr-12345'),
  name?: string(name='name', example='spark_job_name'),
  releaseVersion?: string(name='releaseVersion', example='esr-3.3.1'),
  resourceQueueId?: string(name='resourceQueueId', example='dev_queue'),
  tags?: [
    Tag
  ](name='tags'),
  regionId?: string(name='regionId', example='cn-hangzhou'),
}

model StartJobRunResponseBody = {
  jobRunId?: string(name='jobRunId', example='jr-54321'),
  requestId?: string(name='requestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model StartJobRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartJobRunResponseBody(name='body'),
}

/**
 * @summary 启动作业
 *
 * @param request StartJobRunRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartJobRunResponse
 */
async function startJobRunWithOptions(workspaceId: string, request: StartJobRunRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartJobRunResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['clientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.codeType)) {
    body['codeType'] = request.codeType;
  }
  if (!Util.isUnset(request.configurationOverrides)) {
    body['configurationOverrides'] = request.configurationOverrides;
  }
  if (!Util.isUnset(request.executionTimeoutSeconds)) {
    body['executionTimeoutSeconds'] = request.executionTimeoutSeconds;
  }
  if (!Util.isUnset(request.jobDriver)) {
    body['jobDriver'] = request.jobDriver;
  }
  if (!Util.isUnset(request.jobId)) {
    body['jobId'] = request.jobId;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.releaseVersion)) {
    body['releaseVersion'] = request.releaseVersion;
  }
  if (!Util.isUnset(request.resourceQueueId)) {
    body['resourceQueueId'] = request.resourceQueueId;
  }
  if (!Util.isUnset(request.tags)) {
    body['tags'] = request.tags;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartJobRun',
    version = '2023-08-08',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(workspaceId)}/jobRuns`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 启动作业
 *
 * @param request StartJobRunRequest
 * @return StartJobRunResponse
 */
async function startJobRun(workspaceId: string, request: StartJobRunRequest): StartJobRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startJobRunWithOptions(workspaceId, request, headers, runtime);
}

model TerminateSqlStatementRequest {
  regionId?: string(name='regionId', example='cn-hangzhou'),
}

model TerminateSqlStatementResponseBody = {
  requestId?: string(name='requestId', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model TerminateSqlStatementResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TerminateSqlStatementResponseBody(name='body'),
}

/**
 * @summary 终止 session statement
 *
 * @param request TerminateSqlStatementRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return TerminateSqlStatementResponse
 */
async function terminateSqlStatementWithOptions(workspaceId: string, statementId: string, request: TerminateSqlStatementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): TerminateSqlStatementResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TerminateSqlStatement',
    version = '2023-08-08',
    protocol = 'HTTPS',
    pathname = `/api/interactive/v1/workspace/${OpenApiUtil.getEncodeParam(workspaceId)}/statement/${OpenApiUtil.getEncodeParam(statementId)}/terminate`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 终止 session statement
 *
 * @param request TerminateSqlStatementRequest
 * @return TerminateSqlStatementResponse
 */
async function terminateSqlStatement(workspaceId: string, statementId: string, request: TerminateSqlStatementRequest): TerminateSqlStatementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return terminateSqlStatementWithOptions(workspaceId, statementId, request, headers, runtime);
}

