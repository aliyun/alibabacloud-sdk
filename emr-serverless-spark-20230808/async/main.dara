/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'emr-serverless-spark';
  @version = '2023-08-08';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model Artifact {
  bizId: string(name='bizId', description='This parameter is required.'),
  catagoryBizId?: string(name='catagoryBizId'),
  creator: long(name='creator', description='This parameter is required.'),
  credential?: Credential(name='credential'),
  fullPath?: [ string ](name='fullPath'),
  gmtCreated: string(name='gmtCreated', description='This parameter is required.'),
  gmtModified: string(name='gmtModified', description='This parameter is required.'),
  location: string(name='location', description='This parameter is required.'),
  modifier: long(name='modifier', description='This parameter is required.'),
  name: string(name='name', description='This parameter is required.'),
}

model Category {
  bizId: string(name='bizId', description='This parameter is required.'),
  creator: long(name='creator', description='This parameter is required.'),
  gmtCreated: string(name='gmtCreated', description='This parameter is required.'),
  gmtModified: string(name='gmtModified', description='This parameter is required.'),
  modifier: long(name='modifier', description='This parameter is required.'),
  name: string(name='name', description='This parameter is required.', minLength=1, maxLength=64),
  parentBizId?: string(name='parentBizId'),
  type: string(name='type', description='This parameter is required.'),
}

model Configuration {
  configFileName?: string(name='configFileName'),
  configItemKey?: string(name='configItemKey'),
  configItemValue?: string(name='configItemValue'),
}

model ConfigurationOverrides {
  configurations?: [ 
    {
      configFileName?: string(name='configFileName'),
      configItemKey?: string(name='configItemKey'),
      configItemValue?: string(name='configItemValue'),
    }
  ](name='configurations'),
}

model Credential {
  accessId: string(name='accessId', description='This parameter is required.'),
  dir: string(name='dir', description='This parameter is required.'),
  expire: string(name='expire', description='This parameter is required.'),
  host: string(name='host', description='This parameter is required.'),
  policy: string(name='policy', description='This parameter is required.'),
  securityToken: string(name='securityToken', description='This parameter is required.'),
  signature: string(name='signature', description='This parameter is required.'),
}

model JobDriver {
  sparkSubmit?: {
    entryPoint?: string(name='entryPoint'),
    entryPointArguments?: [ string ](name='entryPointArguments'),
    sparkSubmitParameters?: string(name='sparkSubmitParameters'),
  }(name='sparkSubmit'),
}

model KerberosConf {
  creator?: string(name='creator'),
  enabled?: boolean(name='enabled'),
  gmtCreated?: string(name='gmtCreated'),
  gmtModified?: string(name='gmtModified'),
  kerberosConfId?: string(name='kerberosConfId'),
  keytabs?: [ string ](name='keytabs'),
  krb5Conf?: string(name='krb5Conf'),
  name?: string(name='name'),
  networkServiceId?: string(name='networkServiceId'),
  workspaceId?: string(name='workspaceId'),
}

model PrincipalAction {
  actionArn?: string(name='actionArn', example='acs:emr::workspaceId:action/create_queue'),
  principalArn?: string(name='principalArn', example='acs:emr::workspaceId:user/237593691541622267'),
}

model ReleaseVersionImage {
  cpuArchitecture?: string(name='cpuArchitecture'),
  imageId?: string(name='imageId'),
  runtimeEngineType?: string(name='runtimeEngineType'),
}

model RunLog {
  driverStartup?: string(name='driverStartup'),
  driverStdError?: string(name='driverStdError'),
  driverStdOut?: string(name='driverStdOut'),
  driverSyslog?: string(name='driverSyslog'),
}

model SparkConf {
  key: string(name='key', description='This parameter is required.'),
  value: string(name='value', description='This parameter is required.'),
}

model SqlOutput {
  rows?: [ 
    {
      values?: [ string ](name='values', example='null'),
    }
  ](name='rows'),
  schema?: {
    fields?: [ 
      {
        name?: string(name='name'),
        nullable?: boolean(name='nullable'),
        type?: string(name='type'),
      }
    ](name='fields'),
  }(name='schema'),
}

model Tag {
  key?: string(name='key', description='标签key值。', example='workflowId'),
  value?: string(name='value', description='标签key值。', example='wf-123test'),
}

model Task {
  archives?: [ string ](name='archives'),
  artifactUrl?: string(name='artifactUrl'),
  bizId: string(name='bizId', description='This parameter is required.'),
  categoryBizId?: string(name='categoryBizId'),
  content?: string(name='content'),
  creator: long(name='creator', description='This parameter is required.'),
  credential?: {
    accessId?: string(name='accessId'),
    accessUrl?: string(name='accessUrl'),
    expire?: long(name='expire'),
    host?: string(name='host'),
    path?: string(name='path'),
    policy?: string(name='policy'),
    securityToken?: string(name='securityToken'),
    signature?: string(name='signature'),
  }(name='credential'),
  defaultCatalogId?: string(name='defaultCatalogId'),
  defaultDatabase?: string(name='defaultDatabase'),
  defaultResourceQueueId?: string(name='defaultResourceQueueId'),
  defaultSqlComputeId?: string(name='defaultSqlComputeId'),
  deploymentId?: string(name='deploymentId'),
  environmentId?: string(name='environmentId'),
  extraArtifactIds?: [ string ](name='extraArtifactIds'),
  extraSparkSubmitParams?: string(name='extraSparkSubmitParams'),
  files?: [ string ](name='files'),
  fusion?: boolean(name='fusion'),
  gmtCreated: string(name='gmtCreated', description='This parameter is required.'),
  gmtModified: string(name='gmtModified', description='This parameter is required.'),
  hasChanged?: boolean(name='hasChanged'),
  hasCommited: boolean(name='hasCommited', description='This parameter is required.'),
  isStreaming?: boolean(name='isStreaming'),
  jars?: [ string ](name='jars'),
  lastRunResourceQueueId?: string(name='lastRunResourceQueueId'),
  modifier: long(name='modifier', description='This parameter is required.'),
  name: string(name='name', description='This parameter is required.'),
  pyFiles?: [ string ](name='pyFiles'),
  sparkArgs?: string(name='sparkArgs', example='100'),
  sparkConf?: [
    SparkConf
  ](name='sparkConf'),
  sparkDriverCores: int32(name='sparkDriverCores', description='This parameter is required.'),
  sparkDriverMemory: long(name='sparkDriverMemory', description='This parameter is required.'),
  sparkEntrypoint?: string(name='sparkEntrypoint'),
  sparkExecutorCores: int32(name='sparkExecutorCores', description='This parameter is required.'),
  sparkExecutorMemory: long(name='sparkExecutorMemory', description='This parameter is required.'),
  sparkLogLevel: string(name='sparkLogLevel', description='This parameter is required.'),
  sparkLogPath: string(name='sparkLogPath', description='This parameter is required.'),
  sparkSubmitClause?: string(name='sparkSubmitClause'),
  sparkVersion: string(name='sparkVersion', description='This parameter is required.'),
  tags?: map[string]string(name='tags'),
  timeout?: int32(name='timeout'),
  type: string(name='type', description='This parameter is required.'),
}

model TaskInstance {
  bizId?: string(name='bizId'),
  creator?: long(name='creator'),
  fenixRunId?: string(name='fenixRunId'),
  gmtCreated?: string(name='gmtCreated'),
  taskBizId?: string(name='taskBizId'),
  taskInfo?: Task(name='taskInfo'),
  taskStatus?: string(name='taskStatus'),
  workspaceBizId?: string(name='workspaceBizId'),
}

model TaskSnapshot {
  bizId?: string(name='bizId'),
  commiter?: long(name='commiter'),
  gmtCreated?: string(name='gmtCreated'),
  item?: Task(name='item'),
  message?: string(name='message'),
  taskBizId?: string(name='taskBizId'),
  version?: string(name='version'),
}

model Template {
  creator: long(name='creator', description='This parameter is required.'),
  displaySparkVersion?: string(name='displaySparkVersion'),
  fusion?: boolean(name='fusion'),
  gmtCreated: string(name='gmtCreated', description='This parameter is required.'),
  gmtModified: string(name='gmtModified', description='This parameter is required.'),
  modifier: long(name='modifier', description='This parameter is required.'),
  sparkConf?: [
    SparkConf
  ](name='sparkConf'),
  sparkDriverCores: int32(name='sparkDriverCores', description='This parameter is required.'),
  sparkDriverMemory: long(name='sparkDriverMemory', description='This parameter is required.'),
  sparkExecutorCores: int32(name='sparkExecutorCores', description='This parameter is required.'),
  sparkExecutorMemory: long(name='sparkExecutorMemory', description='This parameter is required.'),
  sparkLogLevel: string(name='sparkLogLevel', description='This parameter is required.'),
  sparkLogPath: string(name='sparkLogPath', description='This parameter is required.'),
  sparkVersion: string(name='sparkVersion', description='This parameter is required.'),
  templateType?: string(name='templateType'),
}

model TimeRange {
  endTime?: long(name='endTime', description='时间范围结束时间。', example='1688370894339'),
  startTime?: long(name='startTime', description='时间范围开始时间。', example='1688370894339'),
}

model AddMembersRequest {
  memberArns: [ string ](name='memberArns', description='This parameter is required.', position='Body'),
  workspaceId: string(name='workspaceId', description='The workspace ID.

This parameter is required.', example='w-975bcfda9625****', position='Body'),
  regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model AddMembersResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model AddMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddMembersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddMembers  AddMembersRequest
  * @return AddMembersResponse
 */
async function addMembers(request: AddMembersRequest): AddMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddMembers', 'POST', '/api/v1/auth/members', 'json', false, 'json', request);
}

model CancelJobRunRequest {
  workspaceId: string(name='workspaceId', description='The workspace ID.

This parameter is required.', example='w-1234abcd', position='Path'),
  jobRunId: string(name='jobRunId', description='The job ID.

This parameter is required.', example='jr-231231', position='Path'),
  regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model CancelJobRunResponseBody = {
  jobRunId?: string(name='jobRunId', description='The job ID.', example='jr-1a2bc3'),
  requestId?: string(name='requestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model CancelJobRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelJobRunResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelJobRun  CancelJobRunRequest
  * @return CancelJobRunResponse
 */
async function cancelJobRun(request: CancelJobRunRequest): CancelJobRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelJobRun', 'DELETE', '/api/v1/workspaces/{workspaceId}/jobRuns/{jobRunId}', 'json', false, 'json', request);
}

model CreateProcessDefinitionWithScheduleRequest {
  bizId: string(name='bizId', description='This parameter is required.', example='w-d8********', position='Path'),
  alertEmailAddress?: string(name='alertEmailAddress', example='foo_bar@spark.alert.invalid.com', position='Query'),
  description: string(name='description', description='This parameter is required.', example='ods batch workflow', position='Query'),
  executionType: string(name='executionType', description='This parameter is required.', example='PARALLEL', position='Query'),
  name: string(name='name', description='This parameter is required.', example='ods_batch_workflow', position='Query'),
  productNamespace: string(name='productNamespace', description='This parameter is required.', example='SS', position='Query'),
  publish?: boolean(name='publish', example='true', position='Query'),
  regionId?: string(name='regionId', example='cn-hangzhou', position='Query'),
  resourceQueue?: string(name='resourceQueue', example='root_queue', position='Query'),
  retryTimes?: int32(name='retryTimes', example='1', position='Query'),
  runAs?: string(name='runAs', example='113***************', position='Query'),
  schedule?: {
    crontab?: string(name='crontab', example='0 0 0 * * ?'),
    endTime?: string(name='endTime', example='2025-12-23 16:13:27'),
    startTime?: string(name='startTime', example='2024-12-23 16:13:27'),
    timezoneId?: string(name='timezoneId', example='Asia/Shanghai'),
  }(name='schedule', shrink='json', position='Query'),
  tags?: map[string]string(name='tags', shrink='json', position='Query'),
  taskDefinitionJson: [ 
    {
      alertEmailAddress?: string(name='alertEmailAddress', example='foo_bar@spark.alert.invalid.com'),
      code: long(name='code', description='This parameter is required.', example='36************'),
      description?: string(name='description', example='ods transform task'),
      failAlertEnable?: boolean(name='failAlertEnable', example='false'),
      failRetryTimes?: int32(name='failRetryTimes', example='1'),
      name: string(name='name', description='This parameter is required.', example='ods_transform_task'),
      startAlertEnable?: boolean(name='startAlertEnable', example='false'),
      tags?: map[string]string(name='tags'),
      taskParams: {
        displaySparkVersion?: string(name='displaySparkVersion', example='esr-4.0.0 (Spark 3.5.2, Scala 2.12)'),
        environmentId?: string(name='environmentId', example='env-crhq2h5lhtgju93buhkg'),
        fusion?: boolean(name='fusion', example='false'),
        resourceQueueId: string(name='resourceQueueId', description='This parameter is required.', example='root_queue'),
        sparkConf?: [ 
          {
            key?: string(name='key', example='spark.dynamicAllocation.enabled'),
            value?: string(name='value', example='true'),
          }
        ](name='sparkConf'),
        sparkDriverCores?: int32(name='sparkDriverCores', example='1'),
        sparkDriverMemory?: long(name='sparkDriverMemory', example='4g'),
        sparkExecutorCores?: int32(name='sparkExecutorCores', example='1'),
        sparkExecutorMemory?: long(name='sparkExecutorMemory', example='4g'),
        sparkLogLevel?: string(name='sparkLogLevel', example='INFO'),
        sparkLogPath?: string(name='sparkLogPath'),
        sparkVersion?: string(name='sparkVersion', example='esr-4.0.0 (Spark 3.5.2, Scala 2.12)'),
        taskBizId: string(name='taskBizId', description='This parameter is required.', example='TSK-d87******************'),
        type?: string(name='type', example='VPC'),
        workspaceBizId: string(name='workspaceBizId', description='This parameter is required.', example='w-d8********'),
      }(name='taskParams', description='This parameter is required.'),
      taskType: string(name='taskType', description='This parameter is required.', example='MigrateData'),
      timeout?: int32(name='timeout', example='1200'),
    }
  ](name='taskDefinitionJson', description='This parameter is required.', shrink='json', position='Query'),
  taskParallelism?: int32(name='taskParallelism', example='1', position='Query'),
  taskRelationJson: [ 
    {
      name: string(name='name', description='This parameter is required.', example='ods batch workflow'),
      postTaskCode: long(name='postTaskCode', description='This parameter is required.', example='28************'),
      postTaskVersion: int32(name='postTaskVersion', description='This parameter is required.', example='1'),
      preTaskCode: long(name='preTaskCode', description='This parameter is required.', example='16************'),
      preTaskVersion: int32(name='preTaskVersion', description='This parameter is required.', example='1'),
    }
  ](name='taskRelationJson', description='This parameter is required.', shrink='json', position='Query'),
  timeout?: int32(name='timeout', example='60', position='Query'),
}

model CreateProcessDefinitionWithScheduleResponseBody = {
  code?: int32(name='code', example='1400009'),
  data?: {
    code?: long(name='code', example='160************'),
    id?: int32(name='id', example='12342'),
  }(name='data'),
  failed?: string(name='failed', example='false'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  msg?: string(name='msg', example='No permission for resource action'),
  requestId?: string(name='requestId', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  success?: string(name='success', example='true'),
}

model CreateProcessDefinitionWithScheduleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProcessDefinitionWithScheduleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateProcessDefinitionWithSchedule  CreateProcessDefinitionWithScheduleRequest
  * @return CreateProcessDefinitionWithScheduleResponse
 */
async function createProcessDefinitionWithSchedule(request: CreateProcessDefinitionWithScheduleRequest): CreateProcessDefinitionWithScheduleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProcessDefinitionWithSchedule', 'POST', '/dolphinscheduler/projects/{bizId}/process-definition', 'json', false, 'json', request);
}

model CreateSqlStatementRequest {
  workspaceId?: string(name='workspaceId', description='The workspace ID.', example='w-26ca1703f6d****', position='Path'),
  codeContent?: string(name='codeContent', description='The SQL code. You can specify one or more SQL statements.', example='SHOW TABLES', position='Body'),
  defaultCatalog?: string(name='defaultCatalog', description='The default Data Lake Formation (DLF) catalog ID.', example='default_catalog', position='Body'),
  defaultDatabase?: string(name='defaultDatabase', description='The name of the default database.', example='default', position='Body'),
  limit?: int32(name='limit', description='The maximum number of entries to return. Valid values: 1 to 10000.', example='1000', position='Body'),
  sqlComputeId?: string(name='sqlComputeId', description='The SQL session ID. You can create an SQL session in the workspace created in EMR Serverless Spark.', example='sc-dfahdfjafhajd****', position='Body'),
  regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model CreateSqlStatementResponseBody = {
  data?: {
    statementId?: string(name='statementId', description='The ID of the SQL query.', example='st-1231dfafadfa***'),
  }(name='data', description='The data returned.'),
  requestId?: string(name='requestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model CreateSqlStatementResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSqlStatementResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSqlStatement  CreateSqlStatementRequest
  * @return CreateSqlStatementResponse
 */
async function createSqlStatement(request: CreateSqlStatementRequest): CreateSqlStatementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSqlStatement', 'PUT', '/api/interactive/v1/workspace/{workspaceId}/statement', 'json', false, 'json', request);
}

model GetJobRunRequest {
  workspaceId: string(name='workspaceId', description='The workspace ID.

This parameter is required.', example='w-1234abcd', position='Path'),
  jobRunId: string(name='jobRunId', description='The job ID.

This parameter is required.', example='jr-231231', position='Path'),
  regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetJobRunResponseBody = {
  jobRun?: {
    codeType?: string(name='codeType', description='The code type of the job. Valid values:

*   SQL
*   JAR
*   PYTHON', example='SQL'),
    configurationOverrides?: {
      configurations?: [
        Configuration
      ](name='configurations', description='The configurations.'),
    }(name='configurationOverrides', description='The job configurations of Spark.'),
    displayReleaseVersion?: string(name='displayReleaseVersion'),
    endTime?: long(name='endTime', description='The end time of the job.', example='1684119314000'),
    environmentId?: string(name='environmentId'),
    executionTimeoutSeconds?: int32(name='executionTimeoutSeconds', description='The timeout period of the job.', example='3600'),
    fusion?: boolean(name='fusion'),
    jobDriver?: JobDriver(name='jobDriver', description='The information about Spark Driver.'),
    jobRunId?: string(name='jobRunId', description='The job ID.', example='jr-231231'),
    log?: RunLog(name='log', description='The path where the operational logs are stored.'),
    name?: string(name='name', description='The job name.', example='jobName'),
    releaseVersion?: string(name='releaseVersion', description='The version of the Spark engine on which the job runs.', example='esr-3.3.1'),
    resourceOwnerId?: string(name='resourceOwnerId', description='The ID of the user who created the job.', example='1509789347011222'),
    resourceQueueId?: string(name='resourceQueueId', description='The name of the queue on which the job runs.', example='root_queue'),
    state?: string(name='state', description='The job state.', example='Running'),
    stateChangeReason?: {
      code?: string(name='code', description='The error code.', example='ERR-100000'),
      message?: string(name='message', description='The error message.', example='connection refused'),
    }(name='stateChangeReason', description='The reason of the job status change.'),
    submitTime?: long(name='submitTime', description='The time when the job was submitted.', example='1684119314000'),
    tags?: [
      Tag
    ](name='tags', description='The tags.'),
    webUI?: string(name='webUI', description='The web UI of the job.', example='http://spark-ui'),
    workspaceId?: string(name='workspaceId', description='The workspace ID.', example='w-1234abcd'),
  }(name='jobRun', description='The details of the job.'),
  requestId?: string(name='requestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GetJobRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobRunResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetJobRun  GetJobRunRequest
  * @return GetJobRunResponse
 */
async function getJobRun(request: GetJobRunRequest): GetJobRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetJobRun', 'GET', '/api/v1/workspaces/{workspaceId}/jobRuns/{jobRunId}', 'json', false, 'json', request);
}

model GetSessionClusterRequest {
  workspaceId?: string(name='workspaceId', description='The workspace ID.', example='w-1234abcd', position='Path'),
  sessionClusterId?: string(name='sessionClusterId', description='The session ID.', example='emr-spark-demo-job', position='Path'),
  regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetSessionClusterResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  sessionCluster?: {
    applicationConfigs?: [ 
      {
        configFileName?: string(name='configFileName', description='The name of the configuration file.', example='spark-defaults.conf'),
        configItemKey?: string(name='configItemKey', description='The key of the configuration.', example='spark.app.name'),
        configItemValue?: string(name='configItemValue', description='The configuration value.', example='test'),
      }
    ](name='applicationConfigs', description='The Spark configurations.'),
    autoStartConfiguration?: {
      enable?: boolean(name='enable', description='Indicates whether automatic startup is enabled.', example='false'),
    }(name='autoStartConfiguration', description='The automatic startup configurations.'),
    autoStopConfiguration?: {
      enable?: boolean(name='enable', description='Indicates whether automatic termination is enabled.', example='false'),
      idleTimeoutMinutes?: int32(name='idleTimeoutMinutes', description='The idle timeout period. The session is automatically terminated when the idle timeout period is exceeded.', example='60'),
    }(name='autoStopConfiguration', description='The automatic termination configurations.'),
    displayReleaseVersion?: string(name='displayReleaseVersion', description='The version of the Spark engine.', example='esr-2.2(Java Runtime)'),
    domain?: string(name='domain', description='The domain name to which the Spark UI of the session belongs.', example='your.domain.com'),
    domainInner?: string(name='domainInner', description='The internal endpoint.', example='emr-spark-gateway-cn-hangzhou-internal.data.aliyuncs.com'),
    draftId?: string(name='draftId', description='The ID of the job that is associated with the session.', example='TSK-xxxxxxxx'),
    envId?: string(name='envId', description='The environment ID.', example='env-cpv569tlhtgndjl86t40'),
    fusion?: boolean(name='fusion', description='Indicates whether the Fusion engine is used for acceleration.', example='false'),
    gmtCreate?: long(name='gmtCreate', description='The creation time.', example='2024-09-01 06:23:01'),
    kind?: string(name='kind', description='The type of the job. This parameter is required and cannot be modified after the deployment is created. Valid values:

*   SQLSCRIPT
*   JAR
*   PYTHON', example='SQL'),
    name?: string(name='name', description='The name of the session.', example='test'),
    queueName?: string(name='queueName', description='The queue name.', example='jobName'),
    releaseVersion?: string(name='releaseVersion', description='The version of E-MapReduce (EMR) Serverless Spark.', example='esr-2.2(Java Runtime)'),
    sessionClusterId?: string(name='sessionClusterId', description='The session ID.', example='1234abcd-12ab-34cd-56ef-1234567890ab'),
    startTime?: long(name='startTime', description='The start time.', example='2024-09-01 06:23:01'),
    state?: string(name='state', description='The job status.', example='Running'),
    stateChangeReason?: {
      code?: string(name='code', description='The status change code.', example='1000000'),
      message?: string(name='message', description='The status change message.', example='ok'),
    }(name='stateChangeReason', description='The reason of the job status change.'),
    userId?: string(name='userId', description='The user ID.', example='jr-231231'),
    userName?: string(name='userName', description='The name of the account that is used to create the session.', example='user1'),
    webUI?: string(name='webUI', description='The Spark UI of the session.', example='https://spark-ui/link'),
    workspaceId?: string(name='workspaceId', description='The workspace ID.', example='w-1234abcd'),
  }(name='sessionCluster', description='The session.'),
}

model GetSessionClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSessionClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSessionCluster  GetSessionClusterRequest
  * @return GetSessionClusterResponse
 */
async function getSessionCluster(request: GetSessionClusterRequest): GetSessionClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSessionCluster', 'GET', '/api/v1/workspaces/{workspaceId}/sessionClusters/{sessionClusterId}', 'json', false, 'json', request);
}

model GetSqlStatementRequest {
  workspaceId?: string(name='workspaceId', description='The workspace ID.', example='w-d2d82aa09155****', position='Path'),
  statementId?: string(name='statementId', description='The interactive query ID.', example='st-2dadfhajk11cv****', position='Path'),
  regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetSqlStatementResponseBody = {
  data?: {
    executionTime?: [ long ](name='executionTime', description='The list of time that is consumed by SQL queries.'),
    sqlErrorCode?: string(name='sqlErrorCode', description='The error code.', example='ERROR-102'),
    sqlErrorMessage?: string(name='sqlErrorMessage', description='The error message.', example='error message'),
    sqlOutputs?: [ 
      {
        rows?: string(name='rows', description='The queried data, which is a string in the JSON format.', example='[{\\"values\\":[\\"test_db\\",\\"test_table\\",false]}'),
        schema?: string(name='schema', description='The information about the schema, which is a string in the JSON format.', example='{\\"type\\":\\"struct\\",\\"fields\\":[{\\"name\\":\\"namespace\\",\\"type\\":\\"string\\",\\"nullable\\":false,\\"metadata\\":{}},{\\"name\\":\\"tableName\\",\\"type\\":\\"string\\",\\"nullable\\":false,\\"metadata\\":{}},{\\"name\\":\\"isTemporary\\",\\"type\\":\\"boolean\\",\\"nullable\\":false,\\"metadata\\":{}}]}'),
      }
    ](name='sqlOutputs', description='The query results.'),
    state?: string(name='state', description='The query status.

Valid values:

*   running
*   available
*   cancelled
*   error
*   cancelling', example='running'),
    statementId?: string(name='statementId', description='The query ID.', example='st-1231311abadfaa'),
  }(name='data', description='The response parameters.'),
  requestId?: string(name='requestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GetSqlStatementResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSqlStatementResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSqlStatement  GetSqlStatementRequest
  * @return GetSqlStatementResponse
 */
async function getSqlStatement(request: GetSqlStatementRequest): GetSqlStatementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSqlStatement', 'GET', '/api/interactive/v1/workspace/{workspaceId}/statement/{statementId}', 'json', false, 'json', request);
}

model GetTemplateRequest {
  workspaceBizId?: string(name='workspaceBizId', description='The workspace ID.', example='w-8adde60aa809701f', position='Path'),
  regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  templateType?: string(name='templateType', description='The template type.

*   TASK
*   SESSION', example='TASK', position='Query'),
}

model GetTemplateResponseBody = {
  data?: Template(name='data', description='The data returned.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='040003'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='InvalidUser.NotFound'),
  httpStatusCode?: string(name='httpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='484D9DDA-300D-525E-AF7A-0CCCA5C64A7A'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='True'),
}

model GetTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTemplate  GetTemplateRequest
  * @return GetTemplateResponse
 */
async function getTemplate(request: GetTemplateRequest): GetTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTemplate', 'GET', '/api/interactive/v1/workspace/{workspaceBizId}/template', 'json', false, 'json', request);
}

model GrantRoleToUsersRequest {
  roleArn?: string(name='roleArn', description='The Alibaba Cloud Resource Name (ARN) of the RAM role.', example='acs:emr::w-975bcfda9625****:role/Owner', position='Body'),
  userArns?: [ string ](name='userArns', description='The user ARNs.', position='Body'),
  regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GrantRoleToUsersResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GrantRoleToUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GrantRoleToUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GrantRoleToUsers  GrantRoleToUsersRequest
  * @return GrantRoleToUsersResponse
 */
async function grantRoleToUsers(request: GrantRoleToUsersRequest): GrantRoleToUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GrantRoleToUsers', 'POST', '/api/v1/auth/roles/grant', 'json', false, 'json', request);
}

model ListJobRunsRequest {
  workspaceId: string(name='workspaceId', description='The workspace ID.

This parameter is required.', example='w-1234abcd', position='Path'),
  creator?: string(name='creator', description='The ID of the user who created the job.', example='1509789347011222', position='Query'),
  endTime?: {
    endTime?: long(name='endTime', description='The end of the end time range.', example='1710432000000'),
    startTime?: long(name='startTime', description='The beginning of the end time range.', example='1709740800000'),
  }(name='endTime', description='The range of end time.', shrink='json', position='Query'),
  jobRunDeploymentId?: string(name='jobRunDeploymentId', position='Query'),
  jobRunId?: string(name='jobRunId', description='The job ID.', example='j-xxx', position='Query'),
  maxResults?: int32(name='maxResults', description='The maximum number of entries to return.', example='20', position='Query'),
  name?: string(name='name', description='The job name.', example='emr-spark-demo-job', position='Query'),
  nextToken?: string(name='nextToken', description='The pagination token that is used in the request to retrieve a new page of results.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980', position='Query'),
  regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceQueueId?: string(name='resourceQueueId', description='The name of the resource queue on which the Spark jobs run.', example='dev_queue', position='Query'),
  startTime?: {
    endTime?: long(name='endTime', description='The end of the start time range.', example='1710432000000'),
    startTime?: long(name='startTime', description='The beginning of the start time range.', example='1709740800000'),
  }(name='startTime', description='The range of start time.', shrink='json', position='Query'),
  states?: [ string ](name='states', description='The job states.', example='["Running","Submitted"]', shrink='json', position='Query'),
  tags?: [ 
    {
      key?: string(name='key', description='The key of tag N.', example='tag_key'),
      value?: string(name='value', description='The value of tag N.', example='value'),
    }
  ](name='tags', description='The tags of the job.', shrink='json', position='Query'),
}

model ListJobRunsResponseBody = {
  jobRuns?: [ 
    {
      codeType?: string(name='codeType', description='The code type of the job. Valid values:

SQL

JAR

PYTHON', example='SQL'),
      configurationOverrides?: {
        configurations?: [
          Configuration
        ](name='configurations', description='The SparkConf objects.'),
      }(name='configurationOverrides', description='The advanced configurations of Spark.'),
      creator?: string(name='creator', description='The ID of the user who created the job.', example='1509789347011222'),
      cuHours?: long(name='cuHours', example='2.059'),
      displayReleaseVersion?: string(name='displayReleaseVersion', example='esr-3.0.0 (Spark 3.4.3, Scala 2.12)'),
      endTime?: long(name='endTime', description='The end time of the job.', example='1684119314000'),
      executionTimeoutSeconds?: int32(name='executionTimeoutSeconds', description='The timeout period of the job.', example='3600'),
      fusion?: boolean(name='fusion', example='true'),
      jobDriver?: JobDriver(name='jobDriver', description='The information about Spark Driver.'),
      jobRunId?: string(name='jobRunId', description='The job ID.', example='jr-231231'),
      log?: RunLog(name='log', description='The path where the operational logs are stored.'),
      mbSeconds?: long(name='mbSeconds', example='33030784'),
      name?: string(name='name', description='The job name.', example='jobName'),
      releaseVersion?: string(name='releaseVersion', description='The version of Spark on which the jobs run.', example='esr-native-3.4.0'),
      state?: string(name='state', description='The job state.', example='Running'),
      stateChangeReason?: {
        code?: string(name='code', description='The error code.', example='0'),
        message?: string(name='message', description='The error message.', example='success'),
      }(name='stateChangeReason', description='The reason of the job status change.'),
      submitTime?: long(name='submitTime', description='The time when the job was submitted.', example='1684119314000'),
      tags?: [
        Tag
      ](name='tags', description='The tags.'),
      vcoreSeconds?: long(name='vcoreSeconds', example='8236'),
      webUI?: string(name='webUI', description='The web UI of the job.', example='http://spark-ui'),
      workspaceId?: string(name='workspaceId', description='The workspace ID.', example='w-1234abcd'),
    }
  ](name='jobRuns', description='The Spark jobs.'),
  maxResults?: int32(name='maxResults', description='The maximum number of entries returned.', example='20'),
  nextToken?: string(name='nextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  requestId?: string(name='requestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='totalCount', description='The total number of entries returned.', example='200'),
}

model ListJobRunsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListJobRunsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListJobRuns  ListJobRunsRequest
  * @return ListJobRunsResponse
 */
async function listJobRuns(request: ListJobRunsRequest): ListJobRunsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListJobRuns', 'GET', '/api/v1/workspaces/{workspaceId}/jobRuns', 'json', false, 'json', request);
}

model ListLogContentsRequest {
  workspaceId?: string(name='workspaceId', example='w-72704d9fb0******', position='Path'),
  fileName?: string(name='fileName', position='Query'),
  length?: int32(name='length', example='9999', position='Query'),
  offset?: int32(name='offset', example='0', position='Query'),
  regionId?: string(name='regionId', example='cn-hangzhou', position='Query'),
}

model ListLogContentsResponseBody = {
  listLogContent?: {
    contents?: [ 
      {
        lineContent?: string(name='LineContent', example='spark pi is 3.14\\n'),
      }
    ](name='contents'),
    totalLength?: long(name='totalLength', example='10'),
  }(name='listLogContent'),
  requestId?: string(name='requestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model ListLogContentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLogContentsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLogContents  ListLogContentsRequest
  * @return ListLogContentsResponse
 */
async function listLogContents(request: ListLogContentsRequest): ListLogContentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListLogContents', 'GET', '/api/v1/workspaces/{workspaceId}/action/listLogContents', 'json', false, 'json', request);
}

model ListReleaseVersionsRequest {
  regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  releaseType?: string(name='releaseType', description='The type of the version.

Valid values:

*   stable
*   Beta', example='stable', position='Query'),
  releaseVersion?: string(name='releaseVersion', description='The version of EMR Serverless Spark.', example='esr-2.1 (Spark 3.3.1, Scala 2.12, Java Runtime)', position='Query'),
  releaseVersionStatus?: string(name='releaseVersionStatus', description='The status of the version.

Valid values:

*   ONLINE
*   OFFLINE', example='ONLINE', position='Query'),
  workspaceId?: string(name='workspaceId', description='The workspace ID.', example='w-d2d82aa09155****', position='Query'),
}

model ListReleaseVersionsResponseBody = {
  maxResults?: int32(name='maxResults', description='The maximum number of entries returned.', example='20'),
  nextToken?: string(name='nextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.', example='1'),
  releaseVersions?: [ 
    {
      communityVersion?: string(name='communityVersion', description='The version number of open source Spark.', example='Spark 3.3.1'),
      cpuArchitectures?: [ string ](name='cpuArchitectures', description='The CPU architectures.'),
      displayReleaseVersion?: string(name='displayReleaseVersion', description='The version number.', example='esr-2.1 (Spark 3.3.1, Scala 2.12)'),
      fusion?: boolean(name='fusion', description='Indicates whether the Fusion engine is used for acceleration.', example='true'),
      gmtCreate?: long(name='gmtCreate', description='The creation time.', example='1716215854101'),
      iaasType?: string(name='iaasType', description='The type of the Infrastructure as a Service (IaaS) layer.', example='ASI'),
      releaseVersion?: string(name='releaseVersion', description='The version number.', example='esr-2.1 (Spark 3.3.1, Scala 2.12, Java Runtime)'),
      scalaVersion?: string(name='scalaVersion', description='The version of Scala.', example='2.12'),
      state?: string(name='state', description='The status of the version.', example='ONLINE'),
      type?: string(name='type', description='The type of the version.', example='stable'),
    }
  ](name='releaseVersions', description='The versions.'),
  requestId?: string(name='requestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='totalCount', description='The total number of entries returned.', example='200'),
}

model ListReleaseVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListReleaseVersionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListReleaseVersions  ListReleaseVersionsRequest
  * @return ListReleaseVersionsResponse
 */
async function listReleaseVersions(request: ListReleaseVersionsRequest): ListReleaseVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListReleaseVersions', 'GET', '/api/v1/releaseVersions', 'json', false, 'json', request);
}

model ListSessionClustersRequest {
  workspaceId?: string(name='workspaceId', description='The workspace ID.', example='w-1234abcd', position='Path'),
  kind?: string(name='kind', description='The session type.

Valid values:

*   NOTEBOOK
*   THRIFT
*   SQL', example='SQL', position='Query'),
  maxResults?: int32(name='maxResults', description='The maximum number of entries to return.', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The pagination token that is used in the request to retrieve a new page of results.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980', position='Query'),
  queueName?: string(name='queueName', description='The name of the queue.', example='root', position='Query'),
  regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  sessionClusterId?: string(name='sessionClusterId', description='The name of the job.', example='emr-spark-demo-job', position='Query'),
}

model ListSessionClustersResponseBody = {
  maxResults?: int32(name='maxResults', description='The maximum number of entries returned.', example='20'),
  nextToken?: string(name='nextToken', description='A pagination token.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  requestId?: string(name='requestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  sessionClusters?: [ 
    {
      applicationConfigs?: [ 
        {
          configFileName?: string(name='configFileName', description='The name of the configuration file.', example='spark-default.conf'),
          configItemKey?: string(name='configItemKey', description='The key of the configuration.', example='spark.app.name'),
          configItemValue?: string(name='configItemValue', description='The configuration value.', example='test_application'),
        }
      ](name='applicationConfigs', description='The session configurations, which are equivalent to the configurations of the Spark job.'),
      autoStartConfiguration?: {
        enable?: boolean(name='enable', description='Indicates whether automatic startup is enabled.', example='true'),
      }(name='autoStartConfiguration', description='The automatic startup configurations.'),
      autoStopConfiguration?: {
        enable?: boolean(name='enable', description='Indicates whether automatic termination is enabled.', example='false'),
        idleTimeoutMinutes?: int32(name='idleTimeoutMinutes', description='The idle timeout period. The session is automatically terminated when the idle timeout period is exceeded.', example='45'),
      }(name='autoStopConfiguration', description='The configurations of automatic termination.'),
      displayReleaseVersion?: string(name='displayReleaseVersion', description='The version of the Spark engine.', example='esr-4.0.0 (Spark 3.5.2, Scala 2.12)'),
      domain?: string(name='domain', description='The public endpoint of the Thrift server.', example='emr-spark-gateway-cn-hangzhou.data.aliyun.com'),
      domainInner?: string(name='domainInner', description='The internal endpoint of the Thrift server.', example='emr-spark-gateway-cn-hangzhou-internal.data.aliyuncs.com'),
      draftId?: string(name='draftId', description='The ID of the job that is associated with the session.', example='TSK-xxxxxxxxx'),
      fusion?: boolean(name='fusion', description='Indicates whether the Fusion engine is used for acceleration.', example='false'),
      gmtCreate?: long(name='gmtCreate', description='The creation time.', example='1732267598000'),
      kind?: string(name='kind', description='The session type.

Valid values:

*   NOTEBOOK
*   THRIFT
*   SQL', example='SQL'),
      name?: string(name='name', description='The name of the session.', example='adhoc_query'),
      queueName?: string(name='queueName', description='The name of the queue that is used to run the session.', example='dev_queue'),
      releaseVersion?: string(name='releaseVersion', description='The version of EMR Serverless Spark.', example='esr-2.1'),
      sessionClusterId?: string(name='sessionClusterId', description='The session ID.', example='sc-123131'),
      startTime?: long(name='startTime', description='The start time.', example='1732267598000'),
      state?: string(name='state', description='The status of the session.

*   Starting
*   Running
*   Stopping
*   Stopped
*   Error', example='Running'),
      stateChangeReason?: {
        code?: string(name='code', description='The status change code.', example='200'),
        message?: string(name='message', description='The status change message.', example='ok'),
      }(name='stateChangeReason', description='The details of the most recent status change of the session.'),
      userId?: string(name='userId', description='The user ID.', example='123131'),
      userName?: string(name='userName', description='The username.', example='test_user'),
      webUI?: string(name='webUI', description='The Spark UI of the session.', example='http://spark-ui-xxxx'),
      workspaceId?: string(name='workspaceId', description='The workspace ID.', example='w-1234abcd'),
    }
  ](name='sessionClusters', description='The sessions.'),
  totalCount?: int32(name='totalCount', description='The total number of entries returned.', example='200'),
}

model ListSessionClustersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSessionClustersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSessionClusters  ListSessionClustersRequest
  * @return ListSessionClustersResponse
 */
async function listSessionClusters(request: ListSessionClustersRequest): ListSessionClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSessionClusters', 'GET', '/api/v1/workspaces/{workspaceId}/sessionClusters', 'json', false, 'json', request);
}

model ListWorkspaceQueuesRequest {
  workspaceId?: string(name='workspaceId', description='The workspace ID.', example='w-26ca1703f6d71e6e', position='Path'),
  environment?: string(name='environment', description='The environment type.

Valid values:

*   dev
*   production', example='production', position='Query'),
  regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model ListWorkspaceQueuesResponseBody = {
  maxResults?: int32(name='maxResults', description='The maximum number of entries returned.', example='20'),
  nextToken?: string(name='nextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.', example='1'),
  queues?: [ 
    {
      allowActions?: [ 
        {
          actionArn?: string(name='actionArn', description='The Alibaba Cloud Resource Name (ARN) of a behavior.', example='acs:emr::workspaceId:action/create_queue'),
          actionName?: string(name='actionName', description='The name of the permission.', example='view'),
          dependencies?: [ string ](name='dependencies', description='The dependencies of the operation.', example='["view"]'),
          description?: string(name='description', description='The description of the operation.', example='文件目录遍历、文件浏览'),
          displayName?: string(name='displayName', description='The display name of the permission.', example='文件目录遍历、文件浏览'),
        }
      ](name='allowActions', description='The operations allowed for the queue.'),
      creator?: string(name='creator', description='The ID of the user who created the queue.', example='237109'),
      environments?: [ string ](name='environments', description='The environment types of the queue.'),
      maxResource?: string(name='maxResource', description='The maximum capacity of resources that can be used in the queue.', example='{"cpu": "2","memory": "2Gi"}'),
      minResource?: string(name='minResource', description='The minimum capacity of resources that can be used in the queue.', example='{"cpu": "2","memory": "2Gi"}'),
      properties?: string(name='properties', description='The queue label.', example='dev_queue'),
      queueName?: string(name='queueName', description='The name of the queue.', example='dev_queue'),
      queueScope?: string(name='queueScope', description='The queue architecture.', example='{"arch": "x86"}'),
      queueStatus?: string(name='queueStatus', description='The status of the queue.', example='RUNNING'),
      queueType?: string(name='queueType', description='The queue type.', example='instance, instanceChildren'),
      regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou'),
      usedResource?: string(name='usedResource', description='The capacity of resources that are used in the queue.', example='{"cpu": "2","memory": "2Gi"}'),
      workspaceId?: string(name='workspaceId', description='The workspace ID.', example='w-1234abcd'),
    }
  ](name='queues', description='The list of queues.'),
  requestId?: string(name='requestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='totalCount', description='The total number of entries returned.', example='200'),
}

model ListWorkspaceQueuesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkspaceQueuesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListWorkspaceQueues  ListWorkspaceQueuesRequest
  * @return ListWorkspaceQueuesResponse
 */
async function listWorkspaceQueues(request: ListWorkspaceQueuesRequest): ListWorkspaceQueuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWorkspaceQueues', 'GET', '/api/v1/workspaces/{workspaceId}/queues', 'json', false, 'json', request);
}

model ListWorkspacesRequest {
  maxResults?: int32(name='maxResults', description='The maximum number of entries to return.', example='20', position='Query'),
  name?: string(name='name', description='Fuzzy match is supported.', example='test_workspace', position='Query'),
  nextToken?: string(name='nextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='1', position='Query'),
  regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  state?: string(name='state', description='The workspace status.', example='running', position='Query'),
}

model ListWorkspacesResponseBody = {
  maxResults?: int32(name='maxResults', description='The maximum number of entries returned.', example='20'),
  nextToken?: string(name='nextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.', example='1'),
  requestId?: string(name='requestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='totalCount', description='The total number of entries returned.', example='200'),
  workspaces?: [ 
    {
      autoRenew?: boolean(name='autoRenew', description='Indicates whether auto-renewal is enabled. This parameter is required only if the paymentType parameter is set to Subscription.', example='true'),
      autoRenewPeriod?: int32(name='autoRenewPeriod', description='The auto-renewal duration. This parameter is required only if the paymentType parameter is set to Subscription.', example='1'),
      autoRenewPeriodUnit?: string(name='autoRenewPeriodUnit', description='The unit of the auto-renewal duration. This parameter is required only if the paymentType parameter is set to Subscription.', example='YEAR, MONTH, WEEK, DAY, HOUR, MINUTE'),
      createTime?: long(name='createTime', description='The time when the workspace was created.', example='1684115879955'),
      dlfCatalogId?: string(name='dlfCatalogId', description='The information of the Data Lake Formation (DLF) catalog.', example='default'),
      dlfType?: string(name='dlfType'),
      duration?: int32(name='duration', description='The subscription period. This parameter is required only if the paymentType parameter is set to Subscription.', example='1'),
      endTime?: long(name='endTime', description='The time when the workspace was released.', example='1687103999999'),
      failReason?: string(name='failReason', description='The reason for the failure.', example='out of stock'),
      paymentDurationUnit?: string(name='paymentDurationUnit', description='The unit of the subscription duration. This parameter is required only if the paymentType parameter is set to Subscription.', example='YEAR, MONTH, WEEK, DAY, HOUR, MINUTE'),
      paymentStatus?: string(name='paymentStatus', description='The status of the payment.', example='PAID/UNPAID'),
      paymentType?: string(name='paymentType', description='The payment type.', example='PayAsYouGo or Subscription'),
      regionId?: string(name='regionId', description='The region ID.', example='cn-shanghai'),
      releaseType?: string(name='releaseType', description='The reason why the workspace is released.', example='SERVICE_RELEASE'),
      resourceSpec?: string(name='resourceSpec', description='The resource specifications.', example='100cu'),
      stateChangeReason?: {
        code?: string(name='code', description='The error code.', example='0'),
        message?: string(name='message', description='The error message.', example='Success'),
      }(name='stateChangeReason', description='The information about the workspace status change.'),
      storage?: string(name='storage', description='The Object Storage Service (OSS) path.', example='spark-result'),
      workspaceId?: string(name='workspaceId', description='The workspace ID.', example='w-******'),
      workspaceName?: string(name='workspaceName', description='The name of the workspace.', example='spark批作业空间-1'),
      workspaceStatus?: string(name='workspaceStatus', description='The workspace status.', example='STARTING,RUNNING,TERMINATED'),
    }
  ](name='workspaces', description='The workspaces.'),
}

model ListWorkspacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkspacesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListWorkspaces  ListWorkspacesRequest
  * @return ListWorkspacesResponse
 */
async function listWorkspaces(request: ListWorkspacesRequest): ListWorkspacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWorkspaces', 'GET', '/api/v1/workspaces', 'json', false, 'json', request);
}

model StartJobRunRequest {
  workspaceId: string(name='workspaceId', description='The workspace ID.

This parameter is required.', example='w-123213123131', position='Path'),
  clientToken?: string(name='clientToken', description='The client token that is used to ensure the idempotence of the request.', example='8e6aae2810c8f67229ca70bb31cd6028', position='Body'),
  codeType?: string(name='codeType', description='The code type of the job. Valid values:

*   SQL
*   JAR
*   PYTHON', example='SQL', position='Body'),
  configurationOverrides?: {
    configurations?: [ 
      {
        configFileName?: string(name='configFileName', description='The configuration file of SparkConf.', example='spark-default.conf'),
        configItemKey?: string(name='configItemKey', description='The key of SparkConf.', example='spark.app.name'),
        configItemValue?: string(name='configItemValue', description='The value of SparkConf.', example='test_app'),
      }
    ](name='configurations', description='The SparkConf objects.'),
  }(name='configurationOverrides', description='The advanced configurations of Spark.', position='Body'),
  displayReleaseVersion?: string(name='displayReleaseVersion', position='Body'),
  executionTimeoutSeconds?: int32(name='executionTimeoutSeconds', description='The timeout period of the job.', example='100', position='Body'),
  fusion?: boolean(name='fusion', position='Body'),
  jobDriver?: JobDriver(name='jobDriver', description='The information about Spark Driver.', position='Body'),
  jobId?: string(name='jobId', description='The job ID.', example='jr-12345', position='Body'),
  name?: string(name='name', description='The job name.', example='spark_job_name', position='Body'),
  releaseVersion?: string(name='releaseVersion', description='The version number of Spark.', example='esr-3.3.1', position='Body'),
  resourceQueueId?: string(name='resourceQueueId', description='The name of the resource queue on which the Spark job runs.', example='dev_queue', position='Body'),
  tags?: [
    Tag
  ](name='tags', description='The tags.', position='Body'),
  regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model StartJobRunResponseBody = {
  jobRunId?: string(name='jobRunId', description='The job ID.', example='jr-54321'),
  requestId?: string(name='requestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model StartJobRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartJobRunResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartJobRun  StartJobRunRequest
  * @return StartJobRunResponse
 */
async function startJobRun(request: StartJobRunRequest): StartJobRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartJobRun', 'POST', '/api/v1/workspaces/{workspaceId}/jobRuns', 'json', false, 'json', request);
}

model StartProcessInstanceRequest {
  bizId: string(name='bizId', description='This parameter is required.', example='w-d8********', position='Path'),
  isProd?: boolean(name='isProd', example='false', position='Query'),
  processDefinitionCode: long(name='processDefinitionCode', description='This parameter is required.', example='12***********', position='Query'),
  productNamespace: string(name='productNamespace', description='This parameter is required.', example='SS', position='Query'),
  regionId?: string(name='regionId', example='cn-hangzhou', position='Query'),
  runtimeQueue?: string(name='runtimeQueue', example='root_queue', position='Query'),
  versionHashCode?: string(name='versionHashCode', example='dh*********', position='Query'),
  versionNumber?: int32(name='versionNumber', example='1', position='Query'),
}

model StartProcessInstanceResponseBody = {
  code?: int32(name='code', example='1400009'),
  data?: any(name='data', example='{\\"sessionBizId\\": \\"sc-dc85644dba1c8c63\\", \\"bizId\\": \\"st-aeed3b0d4f87418a9a9dcbd757477658\\", \\"gmtCreated\\": \\"Thu Sep 12 02:28:45 UTC 2024\\"}'),
  failed?: boolean(name='failed', example='false'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  msg?: string(name='msg', example='No permission for resource action'),
  requestId?: string(name='requestId', description='Id of the request', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  success?: boolean(name='success', example='true'),
}

model StartProcessInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartProcessInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartProcessInstance  StartProcessInstanceRequest
  * @return StartProcessInstanceResponse
 */
async function startProcessInstance(request: StartProcessInstanceRequest): StartProcessInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartProcessInstance', 'POST', '/dolphinscheduler/projects/{bizId}/executors/start-process-instance', 'json', false, 'json', request);
}

model StartSessionClusterRequest {
  workspaceId?: string(name='workspaceId', description='The workspace ID.', example='w-d2d82aa09155****', position='Path'),
  queueName?: string(name='queueName', description='The queue name.', example='root_queue', position='Body'),
  sessionClusterId?: string(name='sessionClusterId', description='The session ID.', example='sc-xxxxxxxxxxx', position='Body'),
  regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model StartSessionClusterResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  sessionClusterId?: string(name='sessionClusterId', description='The workspace ID.', example='w-******'),
}

model StartSessionClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartSessionClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartSessionCluster  StartSessionClusterRequest
  * @return StartSessionClusterResponse
 */
async function startSessionCluster(request: StartSessionClusterRequest): StartSessionClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartSessionCluster', 'POST', '/api/v1/workspaces/{workspaceId}/sessionClusters/action/startSessionCluster', 'json', false, 'json', request);
}

model StopSessionClusterRequest {
  workspaceId?: string(name='workspaceId', description='The workspace ID.', example='w-d2d82aa09155****', position='Path'),
  queueName?: string(name='queueName', description='The queue name.', example='root_queue', position='Body'),
  sessionClusterId?: string(name='sessionClusterId', description='The session ID.', example='sc-xxxxxxxxxxxx', position='Body'),
  regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model StopSessionClusterResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  sessionClusterId?: string(name='sessionClusterId', description='The workspace ID.', example='w-******'),
}

model StopSessionClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopSessionClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopSessionCluster  StopSessionClusterRequest
  * @return StopSessionClusterResponse
 */
async function stopSessionCluster(request: StopSessionClusterRequest): StopSessionClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopSessionCluster', 'POST', '/api/v1/workspaces/{workspaceId}/sessionClusters/action/stopSessionCluster', 'json', false, 'json', request);
}

model TerminateSqlStatementRequest {
  workspaceId?: string(name='workspaceId', description='The workspace ID.', example='w-d2d82aa09155****', position='Path'),
  statementId?: string(name='statementId', description='The interactive query ID.', example='st-abcadfadf12****', position='Path'),
  regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model TerminateSqlStatementResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model TerminateSqlStatementResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TerminateSqlStatementResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TerminateSqlStatement  TerminateSqlStatementRequest
  * @return TerminateSqlStatementResponse
 */
async function terminateSqlStatement(request: TerminateSqlStatementRequest): TerminateSqlStatementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TerminateSqlStatement', 'POST', '/api/interactive/v1/workspace/{workspaceId}/statement/{statementId}/terminate', 'json', false, 'json', request);
}

model UpdateProcessDefinitionWithScheduleRequest {
  bizId: string(name='bizId', description='This parameter is required.', example='w-d8********', position='Path'),
  code: long(name='code', description='This parameter is required.', example='12************', position='Path'),
  alertEmailAddress?: string(name='alertEmailAddress', example='foo_bar@spark.alert.invalid.com', position='Query'),
  description?: string(name='description', example='ods batch workflow', position='Query'),
  executionType: string(name='executionType', description='This parameter is required.', example='PARALLEL', position='Query'),
  name: string(name='name', description='This parameter is required.', example='ods_batch_workflow', position='Query'),
  productNamespace: string(name='productNamespace', description='This parameter is required.', example='SS', position='Query'),
  publish?: boolean(name='publish', example='true', position='Query'),
  regionId?: string(name='regionId', example='cn-hangzhou', position='Query'),
  releaseState?: string(name='releaseState', example='ONLINE', position='Query'),
  resourceQueue?: string(name='resourceQueue', example='root_queue', position='Query'),
  retryTimes?: int32(name='retryTimes', example='1', position='Query'),
  runAs?: string(name='runAs', example='113***************', position='Query'),
  schedule?: {
    crontab?: string(name='crontab', example='0 0 0 * * ?'),
    endTime?: string(name='endTime', example='2025-12-23 16:13:27'),
    startTime?: string(name='startTime', example='2024-12-23 16:13:27'),
    timezoneId?: string(name='timezoneId', example='Asia/Shanghai'),
  }(name='schedule', shrink='json', position='Query'),
  tags?: map[string]string(name='tags', shrink='json', position='Query'),
  taskDefinitionJson: [ 
    {
      alertEmailAddress?: string(name='alertEmailAddress', example='foo_bar@spark.alert.invalid.com'),
      code: long(name='code', description='This parameter is required.', example='23************'),
      description?: string(name='description', example='ods transform task'),
      failAlertEnable?: boolean(name='failAlertEnable', example='true'),
      failRetryTimes?: int32(name='failRetryTimes', example='1'),
      name: string(name='name', description='This parameter is required.', example='ods_transform_task'),
      startAlertEnable?: boolean(name='startAlertEnable', example='true'),
      tags?: map[string]string(name='tags'),
      taskParams: {
        displaySparkVersion?: string(name='displaySparkVersion', example='esr-4.0.0 (Spark 3.5.2, Scala 2.12)'),
        environmentId?: string(name='environmentId', example='ev-h*************'),
        fusion?: boolean(name='fusion', example='false'),
        resourceQueueId: string(name='resourceQueueId', description='This parameter is required.', example='root_queue'),
        sparkConf?: [ 
          {
            key?: string(name='key', example='spark.dynamicAllocation.enabled'),
            value?: string(name='value', example='true'),
          }
        ](name='sparkConf'),
        sparkDriverCores?: int32(name='sparkDriverCores', example='1'),
        sparkDriverMemory?: long(name='sparkDriverMemory', example='4g'),
        sparkExecutorCores?: int32(name='sparkExecutorCores', example='1'),
        sparkExecutorMemory?: long(name='sparkExecutorMemory', example='4g'),
        sparkLogLevel?: string(name='sparkLogLevel', example='INFO'),
        sparkLogPath?: string(name='sparkLogPath'),
        sparkVersion?: string(name='sparkVersion', example='esr-4.0.0 (Spark 3.5.2, Scala 2.12)'),
        taskBizId: string(name='taskBizId', description='This parameter is required.', example='TSK-d87******************'),
        type?: string(name='type', example='SQL'),
        workspaceBizId: string(name='workspaceBizId', description='This parameter is required.', example='w-d8********'),
      }(name='taskParams', description='This parameter is required.'),
      taskType: string(name='taskType', description='This parameter is required.', example='EMR-SERVERLESS-SPARK'),
      timeout?: int32(name='timeout', example='30'),
    }
  ](name='taskDefinitionJson', description='This parameter is required.', shrink='json', position='Query'),
  taskParallelism?: int32(name='taskParallelism', example='1', position='Query'),
  taskRelationJson: [ 
    {
      name: string(name='name', description='This parameter is required.', example='ods batch workflow'),
      postTaskCode: long(name='postTaskCode', description='This parameter is required.', example='19************'),
      postTaskVersion: int32(name='postTaskVersion', description='This parameter is required.', example='1'),
      preTaskCode: long(name='preTaskCode', description='This parameter is required.', example='16************'),
      preTaskVersion: int32(name='preTaskVersion', description='This parameter is required.', example='1'),
    }
  ](name='taskRelationJson', description='This parameter is required.', shrink='json', position='Query'),
  timeout?: int32(name='timeout', example='300', position='Query'),
}

model UpdateProcessDefinitionWithScheduleResponseBody = {
  code?: int32(name='code', example='1400009'),
  data?: {
    alertEmailAddress?: string(name='alertEmailAddress', example='foo_bar@spark.alert.invalid.com'),
    bizId?: string(name='bizId', example='alicloud_ack_one_cluster'),
    code?: string(name='code', example='12***********'),
    createTime?: string(name='createTime', example='2024-09-05T02:03:19Z'),
    crontab?: string(name='crontab', example='0 0 0 * * ?'),
    description?: string(name='description', example='1'),
    endTime?: string(name='endTime', example='1710432000000'),
    executionType?: string(name='executionType', example='SERIAL'),
    id?: string(name='id', example='123223'),
    name?: string(name='name', example='ods_batch_workflow'),
    projectName?: string(name='projectName', example='w-********'),
    releaseState?: string(name='releaseState', example='ONLINE'),
    startTime?: string(name='startTime', example='0'),
    timezoneId?: string(name='timezoneId', example='Asia/Shanghai'),
    updateTime?: string(name='updateTime', example='2024-03-05T06:24:27Z'),
    userId?: string(name='userId', example='113*********'),
    userName?: string(name='userName', example='w-********'),
    version?: int32(name='version', example='1'),
    versionHashCode?: string(name='versionHashCode', example='dwerf*********'),
  }(name='data'),
  failed?: string(name='failed', example='false'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  msg?: string(name='msg', example='No permission for resource action'),
  requestId?: string(name='requestId', description='Id of the request', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  success?: string(name='success', example='true'),
}

model UpdateProcessDefinitionWithScheduleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateProcessDefinitionWithScheduleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateProcessDefinitionWithSchedule  UpdateProcessDefinitionWithScheduleRequest
  * @return UpdateProcessDefinitionWithScheduleResponse
 */
async function updateProcessDefinitionWithSchedule(request: UpdateProcessDefinitionWithScheduleRequest): UpdateProcessDefinitionWithScheduleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProcessDefinitionWithSchedule', 'PUT', '/dolphinscheduler/projects/{bizId}/process-definition/{code}', 'json', false, 'json', request);
}

