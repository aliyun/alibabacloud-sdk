/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'emr-serverless-spark';
  @version = '2023-08-08';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model Artifact {
  bizId: string(name='bizId'),
  creator: long(name='creator'),
  credential?: Credential(name='credential'),
  gmtCreated: string(name='gmtCreated'),
  gmtModified: string(name='gmtModified'),
  location: string(name='location'),
  modifier: long(name='modifier'),
  name: string(name='name'),
}

model Category {
  bizId: string(name='bizId'),
  creator: long(name='creator'),
  gmtCreated: string(name='gmtCreated'),
  gmtModified: string(name='gmtModified'),
  modifier: long(name='modifier'),
  name: string(name='name', minLength=1, maxLength=64),
  parentBizId?: string(name='parentBizId'),
  type: string(name='type'),
}

model Configuration {
  configFileName?: string(name='configFileName'),
  configItemKey?: string(name='configItemKey'),
  configItemValue?: string(name='configItemValue'),
}

model Credential {
  accessId: string(name='accessId'),
  dir: string(name='dir'),
  expire: string(name='expire'),
  host: string(name='host'),
  policy: string(name='policy'),
  securityToken: string(name='securityToken'),
  signature: string(name='signature'),
}

model JobDriver {
  sparkSubmit?: {
    entryPoint?: string(name='entryPoint'),
    entryPointArguments?: [ string ](name='entryPointArguments'),
    sparkSubmitParameters?: string(name='sparkSubmitParameters'),
  }(name='sparkSubmit'),
}

model PrincipalAction {
  actionArn?: string(name='actionArn', example='acs:emr::workspaceId:action/create_queue'),
  principalArn?: string(name='principalArn', example='acs:emr::workspaceId:user/237593691541622267'),
}

model ReleaseVersionImage {
  cpuArchitecture?: string(name='cpuArchitecture'),
  imageId?: string(name='imageId'),
  runtimeEngineType?: string(name='runtimeEngineType'),
}

model RunLog {
  driverStdError?: string(name='driverStdError'),
  driverStdOut?: string(name='driverStdOut'),
}

model SparkConf {
  key: string(name='key'),
  value: string(name='value'),
}

model SqlOutput {
  rows?: [ 
    {
      values?: [ string ](name='values', example='null'),
    }
  ](name='rows'),
  schema?: {
    fields?: [ 
      {
        name?: string(name='name'),
        nullable?: boolean(name='nullable'),
        type?: string(name='type'),
      }
    ](name='fields'),
  }(name='schema'),
}

model Tag {
  key?: string(name='key', description='标签key值。', example='workflowId'),
  value?: string(name='value', description='标签key值。', example='wf-123test'),
}

model Task {
  artifactUrl?: string(name='artifactUrl'),
  bizId: string(name='bizId'),
  categoryBizId?: string(name='categoryBizId'),
  content?: string(name='content'),
  creator: long(name='creator'),
  defaultCatalogId?: string(name='defaultCatalogId'),
  defaultDatabase?: string(name='defaultDatabase'),
  defaultResourceQueueId?: string(name='defaultResourceQueueId'),
  defaultSqlComputeId?: string(name='defaultSqlComputeId'),
  extraArtifactIds?: [ string ](name='extraArtifactIds'),
  gmtCreated: string(name='gmtCreated'),
  gmtModified: string(name='gmtModified'),
  hasChanged?: boolean(name='hasChanged'),
  hasCommited: boolean(name='hasCommited'),
  lastRunResourceQueueId?: string(name='lastRunResourceQueueId'),
  modifier: long(name='modifier'),
  name: string(name='name'),
  pyFiles?: [ string ](name='pyFiles'),
  sparkArgs?: string(name='sparkArgs', example='100'),
  sparkConf?: [
    SparkConf
  ](name='sparkConf'),
  sparkDriverCores: int32(name='sparkDriverCores'),
  sparkDriverMemory: long(name='sparkDriverMemory'),
  sparkEntrypoint?: string(name='sparkEntrypoint'),
  sparkExecutorCores: int32(name='sparkExecutorCores'),
  sparkExecutorMemory: long(name='sparkExecutorMemory'),
  sparkLogLevel: string(name='sparkLogLevel'),
  sparkLogPath: string(name='sparkLogPath'),
  sparkVersion: string(name='sparkVersion'),
  tags?: map[string]string(name='tags'),
  type: string(name='type'),
}

model TaskInstance {
  bizId?: string(name='bizId'),
  creator?: long(name='creator'),
  fenixRunId?: string(name='fenixRunId'),
  gmtCreated?: string(name='gmtCreated'),
  taskBizId?: string(name='taskBizId'),
  taskInfo?: Task(name='taskInfo'),
  taskStatus?: string(name='taskStatus'),
  workspaceBizId?: string(name='workspaceBizId'),
}

model TaskSnapshot {
  bizId?: string(name='bizId'),
  commiter?: long(name='commiter'),
  gmtCreated?: string(name='gmtCreated'),
  item?: Task(name='item'),
  message?: string(name='message'),
  taskBizId?: string(name='taskBizId'),
  version?: string(name='version'),
}

model Template {
  creator: long(name='creator'),
  gmtCreated: string(name='gmtCreated'),
  gmtModified: string(name='gmtModified'),
  modifier: long(name='modifier'),
  sparkConf?: [
    SparkConf
  ](name='sparkConf'),
  sparkDriverCores: int32(name='sparkDriverCores'),
  sparkDriverMemory: long(name='sparkDriverMemory'),
  sparkExecutorCores: int32(name='sparkExecutorCores'),
  sparkExecutorMemory: long(name='sparkExecutorMemory'),
  sparkLogLevel: string(name='sparkLogLevel'),
  sparkLogPath: string(name='sparkLogPath'),
  sparkVersion: string(name='sparkVersion'),
  templateType?: string(name='templateType'),
}

model TimeRange {
  endTime?: long(name='endTime', description='时间范围结束时间。', example='1688370894339'),
  startTime?: long(name='startTime', description='时间范围开始时间。', example='1688370894339'),
}

model CancelJobRunRequest {
  workspaceId?: string(name='workspaceId', description='工作空间id。', example='w-1234abcd', position='Path'),
  jobRunId?: string(name='jobRunId', description='任务实例ID。', example='jr-231231', position='Path'),
  regionId?: string(name='regionId', example='cn-hangzhou', position='Query'),
}

model CancelJobRunResponseBody = {
  jobRunId?: string(name='jobRunId', example='jr-1a2bc3'),
  requestId?: string(name='requestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model CancelJobRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelJobRunResponseBody(name='body'),
}

async function cancelJobRun(request: CancelJobRunRequest): CancelJobRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelJobRun', 'DELETE', '/api/v1/workspaces/{workspaceId}/jobRuns/{jobRunId}', 'json', false, 'json', request);
}

model GetJobRunRequest {
  workspaceId?: string(name='workspaceId', description='工作空间id。', example='w-1234abcd', position='Path'),
  jobRunId?: string(name='jobRunId', description='任务实例ID。', example='jr-231231', position='Path'),
  regionId?: string(name='regionId', example='cn-hangzhou', position='Query'),
}

model GetJobRunResponseBody = {
  jobRun?: {
    codeType?: string(name='codeType', description='作业代码类型。', example='SQL'),
    configurationOverrides?: {
      configurations?: [
        Configuration
      ](name='configurations'),
    }(name='configurationOverrides'),
    endTime?: long(name='endTime', description='作业结束时间。', example='1684119314000'),
    executionTimeoutSeconds?: int32(name='executionTimeoutSeconds', description='运行超时时间。', example='3600'),
    jobDriver?: JobDriver(name='jobDriver'),
    jobRunId?: string(name='jobRunId', description='任务实例ID。', example='jr-231231'),
    log?: RunLog(name='log'),
    name?: string(name='name', description='作业实例名称。', example='jobName'),
    releaseVersion?: string(name='releaseVersion', example='esr-3.3.1'),
    resourceOwnerId?: string(name='resourceOwnerId', description='创建用户Uid。', example='1509789347011222'),
    resourceQueueId?: string(name='resourceQueueId', example='root_queue'),
    state?: string(name='state', description='作业状态。', example='Running'),
    stateChangeReason?: {
      code?: string(name='code', example='ERR-100000'),
      message?: string(name='message', example='connection refused'),
    }(name='stateChangeReason'),
    submitTime?: long(name='submitTime', description='作业提交时间。', example='1684119314000'),
    tags?: [
      Tag
    ](name='tags', description='标签。'),
    webUI?: string(name='webUI', description='作业web ui。', example='http://spark-ui'),
    workspaceId?: string(name='workspaceId', description='工作空间id。', example='w-1234abcd'),
  }(name='jobRun'),
  requestId?: string(name='requestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GetJobRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobRunResponseBody(name='body'),
}

async function getJobRun(request: GetJobRunRequest): GetJobRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetJobRun', 'GET', '/api/v1/workspaces/{workspaceId}/jobRuns/{jobRunId}', 'json', false, 'json', request);
}

model ListJobRunsRequest {
  workspaceId?: string(name='workspaceId', description='工作空间id。', example='w-1234abcd', position='Path'),
  creator?: string(name='creator', description='创建用户Uid。', example='1509789347011222', position='Query'),
  endTime?: {
    endTime?: long(name='endTime', example='1710432000000'),
    startTime?: long(name='startTime', example='1709740800000'),
  }(name='endTime', shrink='json', position='Query'),
  jobRunId?: string(name='jobRunId', description='作业id。', example='j-xxx', position='Query'),
  maxResults?: int32(name='maxResults', description='一次获取的最大记录数。', example='20', position='Query'),
  name?: string(name='name', description='作业名称。', example='emr-spark-demo-job', position='Query'),
  nextToken?: string(name='nextToken', description='标记当前开始读取的位置，置空表示从头开始。', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980', position='Query'),
  regionId?: string(name='regionId', example='cn-hangzhou', position='Query'),
  resourceQueueId?: string(name='resourceQueueId', example='dev_queue', position='Query'),
  startTime?: {
    endTime?: long(name='endTime', example='1710432000000'),
    startTime?: long(name='startTime', example='1709740800000'),
  }(name='startTime', shrink='json', position='Query'),
  states?: [ string ](name='states', description='作业状态。', example='["Running","Submitted"]', shrink='json', position='Query'),
  tags?: [ 
    {
      key?: string(name='key', example='tag_key'),
      value?: string(name='value', example='value'),
    }
  ](name='tags', description='标签。', shrink='json', position='Query'),
}

model ListJobRunsResponseBody = {
  jobRuns?: [ 
    {
      codeType?: string(name='codeType', description='作业代码类型。', example='SQL'),
      configurationOverrides?: {
        configurations?: [
          Configuration
        ](name='configurations'),
      }(name='configurationOverrides'),
      creator?: string(name='creator', description='创建用户Uid。', example='1509789347011222'),
      endTime?: long(name='endTime', description='作业结束时间。', example='1684119314000'),
      executionTimeoutSeconds?: int32(name='executionTimeoutSeconds', description='运行超时时间。', example='3600'),
      jobDriver?: JobDriver(name='jobDriver'),
      jobRunId?: string(name='jobRunId', description='任务实例ID。', example='jr-231231'),
      log?: RunLog(name='log'),
      name?: string(name='name', description='作业实例名称。', example='jobName'),
      releaseVersion?: string(name='releaseVersion', example='esr-native-3.4.0'),
      state?: string(name='state', description='作业状态。', example='Running'),
      stateChangeReason?: {
        code?: string(name='code', example='0'),
        message?: string(name='message', example='success'),
      }(name='stateChangeReason'),
      submitTime?: long(name='submitTime', description='作业提交时间。', example='1684119314000'),
      tags?: [
        Tag
      ](name='tags', description='标签。'),
      webUI?: string(name='webUI', description='作业web ui。', example='http://spark-ui'),
      workspaceId?: string(name='workspaceId', description='工作空间id。', example='w-1234abcd'),
    }
  ](name='jobRuns'),
  maxResults?: int32(name='maxResults', description='本次请求所返回的最大记录条数。', example='20'),
  nextToken?: string(name='nextToken', description='返回读取到的数据位置，空代表数据已经读取完毕。', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  requestId?: string(name='requestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='totalCount', description='本次请求条件下的数据总量。', example='200'),
}

model ListJobRunsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListJobRunsResponseBody(name='body'),
}

async function listJobRuns(request: ListJobRunsRequest): ListJobRunsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListJobRuns', 'GET', '/api/v1/workspaces/{workspaceId}/jobRuns', 'json', false, 'json', request);
}

model StartJobRunRequest {
  workspaceId?: string(name='workspaceId', example='w-123213123131', position='Path'),
  clientToken?: string(name='clientToken', example='8e6aae2810c8f67229ca70bb31cd6028', position='Body'),
  codeType?: string(name='codeType', example='SQL', position='Body'),
  configurationOverrides?: {
    configurations?: [ 
      {
        configFileName?: string(name='configFileName', example='spark-default.conf'),
        configItemKey?: string(name='configItemKey', example='spark.app.name'),
        configItemValue?: string(name='configItemValue', example='test_app'),
      }
    ](name='configurations'),
  }(name='configurationOverrides', position='Body'),
  executionTimeoutSeconds?: int32(name='executionTimeoutSeconds', example='100', position='Body'),
  jobDriver?: JobDriver(name='jobDriver', position='Body'),
  jobId?: string(name='jobId', example='jr-12345', position='Body'),
  name?: string(name='name', example='spark_job_name', position='Body'),
  releaseVersion?: string(name='releaseVersion', example='esr-3.3.1', position='Body'),
  resourceQueueId?: string(name='resourceQueueId', example='dev_queue', position='Body'),
  tags?: [
    Tag
  ](name='tags', position='Body'),
  regionId?: string(name='regionId', example='cn-hangzhou', position='Query'),
}

model StartJobRunResponseBody = {
  jobRunId?: string(name='jobRunId', example='jr-54321'),
  requestId?: string(name='requestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model StartJobRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartJobRunResponseBody(name='body'),
}

async function startJobRun(request: StartJobRunRequest): StartJobRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartJobRun', 'POST', '/api/v1/workspaces/{workspaceId}/jobRuns', 'json', false, 'json', request);
}

