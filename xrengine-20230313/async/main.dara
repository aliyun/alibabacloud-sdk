/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'xrEngine';
  @version = '2023-03-13';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'xrengine-daily.aliyuncs.com',
    ap-northeast-2-pop = 'xrengine-daily.aliyuncs.com',
    ap-south-1 = 'xrengine-daily.aliyuncs.com',
    ap-southeast-1 = 'xrengine-daily.aliyuncs.com',
    ap-southeast-2 = 'xrengine-daily.aliyuncs.com',
    ap-southeast-3 = 'xrengine-daily.aliyuncs.com',
    ap-southeast-5 = 'xrengine-daily.aliyuncs.com',
    cn-beijing = 'xrengine-daily.aliyuncs.com',
    cn-beijing-finance-1 = 'xrengine-daily.aliyuncs.com',
    cn-beijing-finance-pop = 'xrengine-daily.aliyuncs.com',
    cn-beijing-gov-1 = 'xrengine-daily.aliyuncs.com',
    cn-beijing-nu16-b01 = 'xrengine-daily.aliyuncs.com',
    cn-chengdu = 'xrengine-daily.aliyuncs.com',
    cn-edge-1 = 'xrengine-daily.aliyuncs.com',
    cn-fujian = 'xrengine-daily.aliyuncs.com',
    cn-haidian-cm12-c01 = 'xrengine-daily.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'xrengine-daily.aliyuncs.com',
    cn-hangzhou-finance = 'xrengine-daily.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'xrengine-daily.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'xrengine-daily.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'xrengine-daily.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'xrengine-daily.aliyuncs.com',
    cn-hangzhou-test-306 = 'xrengine-daily.aliyuncs.com',
    cn-hongkong = 'xrengine-daily.aliyuncs.com',
    cn-hongkong-finance-pop = 'xrengine-daily.aliyuncs.com',
    cn-huhehaote = 'xrengine-daily.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'xrengine-daily.aliyuncs.com',
    cn-north-2-gov-1 = 'xrengine-daily.aliyuncs.com',
    cn-qingdao = 'xrengine-daily.aliyuncs.com',
    cn-qingdao-nebula = 'xrengine-daily.aliyuncs.com',
    cn-shanghai = 'xrengine-daily.aliyuncs.com',
    cn-shanghai-et15-b01 = 'xrengine-daily.aliyuncs.com',
    cn-shanghai-et2-b01 = 'xrengine-daily.aliyuncs.com',
    cn-shanghai-finance-1 = 'xrengine-daily.aliyuncs.com',
    cn-shanghai-inner = 'xrengine-daily.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'xrengine-daily.aliyuncs.com',
    cn-shenzhen = 'xrengine-daily.aliyuncs.com',
    cn-shenzhen-finance-1 = 'xrengine-daily.aliyuncs.com',
    cn-shenzhen-inner = 'xrengine-daily.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'xrengine-daily.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'xrengine-daily.aliyuncs.com',
    cn-wuhan = 'xrengine-daily.aliyuncs.com',
    cn-wulanchabu = 'xrengine-daily.aliyuncs.com',
    cn-yushanfang = 'xrengine-daily.aliyuncs.com',
    cn-zhangbei = 'xrengine-daily.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'xrengine-daily.aliyuncs.com',
    cn-zhangjiakou = 'xrengine-daily.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'xrengine-daily.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'xrengine-daily.aliyuncs.com',
    eu-central-1 = 'xrengine-daily.aliyuncs.com',
    eu-west-1 = 'xrengine-daily.aliyuncs.com',
    eu-west-1-oxs = 'xrengine-daily.aliyuncs.com',
    me-east-1 = 'xrengine-daily.aliyuncs.com',
    rus-west-1-pop = 'xrengine-daily.aliyuncs.com',
    us-east-1 = 'xrengine-daily.aliyuncs.com',
    us-west-1 = 'xrengine-daily.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AuthUserRequest {
  jwtToken: string(name='JwtToken', position='Query'),
}

model AuthUserResponseBody = {
  code?: string(name='Code'),
  data?: {
    jwtToken?: string(name='JwtToken'),
    type?: string(name='Type'),
  }(name='Data'),
  errorName?: string(name='ErrorName'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AuthUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AuthUserResponseBody(name='body'),
}

async function authUser(request: AuthUserRequest): AuthUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuthUser', 'POST', '/', 'json', false, 'json', request);
}

model CreateDigitalHumanProjectRequest {
  audioId?: string(name='AudioId', position='Body'),
  audioUrl?: string(name='AudioUrl', position='Body'),
  backgroundId?: string(name='BackgroundId', position='Body'),
  backgroundUrl?: string(name='BackgroundUrl', position='Body'),
  content?: string(name='Content', position='Body'),
  foregroundId?: string(name='ForegroundId', position='Body'),
  foregroundUrl?: string(name='ForegroundUrl', position='Body'),
  humanLayerStyle?: string(name='HumanLayerStyle', position='Body'),
  intro?: string(name='Intro', position='Body'),
  jwtToken?: string(name='JwtToken', position='Query'),
  mode: string(name='Mode', position='Body'),
  modelId: string(name='ModelId', position='Body'),
  outputConfig?: string(name='OutputConfig', position='Body'),
  title: string(name='Title', position='Body'),
  ttsVoiceId?: string(name='TtsVoiceId', position='Body'),
  watermarkImageUrl?: string(name='WatermarkImageUrl', position='Body'),
  watermarkStyle?: string(name='WatermarkStyle', position='Body'),
}

model CreateDigitalHumanProjectResponseBody = {
  code?: string(name='Code'),
  data?: {
    id?: string(name='Id'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDigitalHumanProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDigitalHumanProjectResponseBody(name='body'),
}

async function createDigitalHumanProject(request: CreateDigitalHumanProjectRequest): CreateDigitalHumanProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDigitalHumanProject', 'POST', '/', 'json', true, 'form', request);
}

model CreateLivePortraitProjectRequest {
  audioId?: string(name='AudioId', position='Body'),
  audioUrl?: string(name='AudioUrl', position='Body'),
  content?: string(name='Content', position='Body'),
  imageId?: string(name='ImageId', position='Body'),
  imageUrl?: string(name='ImageUrl', position='Body'),
  intro?: string(name='Intro', position='Body'),
  jwtToken?: string(name='JwtToken', position='Query'),
  lightModel?: boolean(name='LightModel', position='Body'),
  mode: string(name='Mode', position='Body'),
  outputConfig?: string(name='OutputConfig', position='Body'),
  title: string(name='Title', position='Body'),
  ttsVoiceId?: string(name='TtsVoiceId', position='Body'),
  watermarkImageUrl?: string(name='WatermarkImageUrl', position='Body'),
  watermarkStyle?: string(name='WatermarkStyle', position='Body'),
}

model CreateLivePortraitProjectResponseBody = {
  code?: string(name='Code'),
  data?: {
    id?: string(name='Id'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateLivePortraitProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLivePortraitProjectResponseBody(name='body'),
}

async function createLivePortraitProject(request: CreateLivePortraitProjectRequest): CreateLivePortraitProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLivePortraitProject', 'POST', '/', 'json', true, 'form', request);
}

model GetMapDataRequest {
  appId?: string(name='AppId', position='Body'),
  jwtToken?: string(name='JwtToken', position='Body'),
}

model GetMapDataResponseBody = {
  code?: string(name='Code'),
  data?: [  map[string]any ](name='Data'),
  errorName?: string(name='ErrorName'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMapDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMapDataResponseBody(name='body'),
}

async function getMapData(request: GetMapDataRequest): GetMapDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMapData', 'POST', '/', 'json', true, 'form', request);
}

model GetMapPublishDataRequest {
  appId?: string(name='AppId', position='Body'),
  jwtToken?: string(name='JwtToken', position='Body'),
}

model GetMapPublishDataResponseBody = {
  code?: string(name='Code'),
  data?: [  map[string]any ](name='Data'),
  errorName?: string(name='ErrorName'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMapPublishDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMapPublishDataResponseBody(name='body'),
}

async function getMapPublishData(request: GetMapPublishDataRequest): GetMapPublishDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMapPublishData', 'POST', '/', 'json', true, 'form', request);
}

model InitLocateRequest {
  jwtToken?: string(name='JwtToken', position='Body'),
  params: string(name='Params', position='Body'),
}

model InitLocateResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errorName?: string(name='ErrorName'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model InitLocateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InitLocateResponseBody(name='body'),
}

async function initLocate(request: InitLocateRequest): InitLocateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitLocate', 'POST', '/', 'json', true, 'form', request);
}

model ListDigitalHumanMaterialsRequest {
  current?: int32(name='Current', position='Body'),
  jwtToken?: string(name='JwtToken', position='Query'),
  onlyPersonalMaterials?: boolean(name='OnlyPersonalMaterials', position='Body'),
  size?: int32(name='Size', position='Body'),
  types?: string(name='Types', position='Body'),
}

model ListDigitalHumanMaterialsResponseBody = {
  code?: string(name='Code'),
  current?: int32(name='Current'),
  data?: [ 
    {
      components?: [ 
        {
          ext?: string(name='Ext'),
          fileUrl?: string(name='FileUrl'),
          files?: map[string]any(name='Files'),
          id?: string(name='Id'),
          name?: string(name='Name'),
          type?: string(name='Type'),
        }
      ](name='Components'),
      ext?: string(name='Ext'),
      fileUrl?: string(name='FileUrl'),
      files?: map[string]any(name='Files'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      type?: string(name='Type'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  pages?: int32(name='Pages'),
  requestId?: string(name='RequestId'),
  size?: int32(name='Size'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model ListDigitalHumanMaterialsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDigitalHumanMaterialsResponseBody(name='body'),
}

async function listDigitalHumanMaterials(request: ListDigitalHumanMaterialsRequest): ListDigitalHumanMaterialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDigitalHumanMaterials', 'POST', '/', 'json', true, 'form', request);
}

model ListLocationServiceRequest {
  current?: int32(name='Current', position='Body'),
  jwtToken?: string(name='JwtToken', position='Body'),
  size?: int32(name='Size', position='Body'),
  sort?: string(name='Sort', position='Body'),
  sortField?: string(name='SortField', position='Body'),
}

model ListLocationServiceResponseBody = {
  code?: string(name='Code'),
  current?: int32(name='Current'),
  data?: [ 
    {
      appId?: string(name='AppId'),
      expireTime?: string(name='ExpireTime'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      note?: string(name='Note'),
      qps?: long(name='Qps'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
      svcState?: string(name='SvcState'),
    }
  ](name='Data'),
  errorName?: string(name='ErrorName'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message'),
  pages?: int32(name='Pages'),
  requestId?: string(name='RequestId'),
  size?: int32(name='Size'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model ListLocationServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLocationServiceResponseBody(name='body'),
}

async function listLocationService(request: ListLocationServiceRequest): ListLocationServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLocationService', 'POST', '/', 'json', true, 'form', request);
}

model LivePortraitFaceDetectRequest {
  imageUrl: string(name='ImageUrl', position='Body'),
  jwtToken?: string(name='JwtToken', position='Query'),
}

model LivePortraitFaceDetectResponseBody = {
  code?: string(name='Code'),
  data?: {
    code?: int32(name='Code'),
    message?: string(name='Message'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model LivePortraitFaceDetectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LivePortraitFaceDetectResponseBody(name='body'),
}

async function livePortraitFaceDetect(request: LivePortraitFaceDetectRequest): LivePortraitFaceDetectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LivePortraitFaceDetect', 'POST', '/', 'json', true, 'form', request);
}

model LocateRequest {
  image?: string(name='Image', position='Body'),
  jwtToken?: string(name='JwtToken', position='Body'),
  params: string(name='Params', position='Body'),
}

model LocateResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errorName?: string(name='ErrorName'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model LocateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LocateResponseBody(name='body'),
}

async function locate(request: LocateRequest): LocateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Locate', 'POST', '/', 'json', true, 'form', request);
}

model LoginModelScopeRequest {
  empId?: string(name='EmpId', position='Body'),
  empName?: string(name='EmpName', position='Body'),
  token: string(name='Token', position='Body'),
  type: string(name='Type', position='Body'),
}

model LoginModelScopeResponseBody = {
  code?: string(name='Code'),
  data?: {
    email?: string(name='Email'),
    jwtToken?: string(name='JwtToken'),
    nickname?: string(name='Nickname'),
    uid?: string(name='Uid'),
  }(name='Data'),
  errorName?: string(name='ErrorName'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model LoginModelScopeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LoginModelScopeResponseBody(name='body'),
}

async function loginModelScope(request: LoginModelScopeRequest): LoginModelScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LoginModelScope', 'POST', '/', 'json', true, 'form', request);
}

model PopBatchQueryObjectGenerationProjectStatusRequest {
  jwtToken?: string(name='JwtToken', position='Query'),
  projectIds: string(name='ProjectIds', position='Body'),
}

model PopBatchQueryObjectGenerationProjectStatusResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      bizUsage?: string(name='BizUsage'),
      dataset?: {
        buildResultUrl?: map[string]any(name='BuildResultUrl'),
      }(name='Dataset'),
      id?: string(name='Id'),
      status?: string(name='Status'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopBatchQueryObjectGenerationProjectStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopBatchQueryObjectGenerationProjectStatusResponseBody(name='body'),
}

async function popBatchQueryObjectGenerationProjectStatus(request: PopBatchQueryObjectGenerationProjectStatusRequest): PopBatchQueryObjectGenerationProjectStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopBatchQueryObjectGenerationProjectStatus', 'POST', '/', 'json', true, 'form', request);
}

model PopBatchQueryObjectProjectStatusRequest {
  jwtToken?: string(name='JwtToken', position='Body'),
  projectIds: string(name='ProjectIds', position='Body'),
}

model PopBatchQueryObjectProjectStatusResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      checkStatus?: string(name='CheckStatus'),
      id?: string(name='Id'),
      status?: string(name='Status'),
    }
  ](name='Data'),
  errorName?: string(name='ErrorName'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopBatchQueryObjectProjectStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopBatchQueryObjectProjectStatusResponseBody(name='body'),
}

async function popBatchQueryObjectProjectStatus(request: PopBatchQueryObjectProjectStatusRequest): PopBatchQueryObjectProjectStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopBatchQueryObjectProjectStatus', 'POST', '/', 'json', true, 'form', request);
}

model PopBuildFeatureToAvatarProjectRequest {
  projectId: string(name='ProjectId', position='Body'),
}

model PopBuildFeatureToAvatarProjectResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopBuildFeatureToAvatarProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopBuildFeatureToAvatarProjectResponseBody(name='body'),
}

async function popBuildFeatureToAvatarProject(request: PopBuildFeatureToAvatarProjectRequest): PopBuildFeatureToAvatarProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopBuildFeatureToAvatarProject', 'POST', '/', 'json', true, 'form', request);
}

model PopBuildLivePortraitModelScopeProjectRequest {
  projectId: string(name='ProjectId', position='Body'),
}

model PopBuildLivePortraitModelScopeProjectResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopBuildLivePortraitModelScopeProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopBuildLivePortraitModelScopeProjectResponseBody(name='body'),
}

async function popBuildLivePortraitModelScopeProject(request: PopBuildLivePortraitModelScopeProjectRequest): PopBuildLivePortraitModelScopeProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopBuildLivePortraitModelScopeProject', 'POST', '/', 'json', true, 'form', request);
}

model PopBuildObjectGenerationProjectRequest {
  jwtToken?: string(name='JwtToken', position='Query'),
  projectId: string(name='ProjectId', position='Body'),
}

model PopBuildObjectGenerationProjectResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopBuildObjectGenerationProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopBuildObjectGenerationProjectResponseBody(name='body'),
}

async function popBuildObjectGenerationProject(request: PopBuildObjectGenerationProjectRequest): PopBuildObjectGenerationProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopBuildObjectGenerationProject', 'POST', '/', 'json', true, 'form', request);
}

model PopBuildObjectProjectRequest {
  jwtToken?: string(name='JwtToken', position='Body'),
  projectId: string(name='ProjectId', position='Query'),
}

model PopBuildObjectProjectResponseBody = {
  code?: string(name='Code'),
  errorName?: string(name='ErrorName'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopBuildObjectProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopBuildObjectProjectResponseBody(name='body'),
}

async function popBuildObjectProject(request: PopBuildObjectProjectRequest): PopBuildObjectProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopBuildObjectProject', 'POST', '/', 'json', true, 'form', request);
}

model PopBuildPakRenderProjectRequest {
  projectId: string(name='ProjectId', position='Body'),
}

model PopBuildPakRenderProjectResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopBuildPakRenderProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopBuildPakRenderProjectResponseBody(name='body'),
}

async function popBuildPakRenderProject(request: PopBuildPakRenderProjectRequest): PopBuildPakRenderProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopBuildPakRenderProject', 'POST', '/', 'json', true, 'form', request);
}

model PopBuildTextToAvatarProjectRequest {
  jwtToken?: string(name='JwtToken', position='Query'),
  projectId: string(name='ProjectId', position='Body'),
}

model PopBuildTextToAvatarProjectResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopBuildTextToAvatarProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopBuildTextToAvatarProjectResponseBody(name='body'),
}

async function popBuildTextToAvatarProject(request: PopBuildTextToAvatarProjectRequest): PopBuildTextToAvatarProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopBuildTextToAvatarProject', 'POST', '/', 'json', true, 'form', request);
}

model PopCreateFeatureToAvatarProjectRequest {
  extInfo?: string(name='ExtInfo', position='Body'),
  intro?: string(name='Intro', position='Body'),
  title?: string(name='Title', position='Body'),
}

model PopCreateFeatureToAvatarProjectResponseBody = {
  code?: string(name='Code'),
  data?: {
    bizUsage?: string(name='BizUsage'),
    buildDetail?: {
      completedTime?: string(name='CompletedTime'),
      createTime?: string(name='CreateTime'),
      deleted?: boolean(name='Deleted'),
      errorMessage?: string(name='ErrorMessage'),
      estimatedDuration?: long(name='EstimatedDuration'),
      id?: long(name='Id'),
      modifiedTime?: string(name='ModifiedTime'),
      runningTime?: string(name='RunningTime'),
      status?: string(name='Status'),
      submitTime?: string(name='SubmitTime'),
    }(name='BuildDetail'),
    checkStatus?: string(name='CheckStatus'),
    createMode?: string(name='CreateMode'),
    createTime?: string(name='CreateTime'),
    dataset?: {
      buildResultUrl?: map[string]any(name='BuildResultUrl'),
      coverUrl?: string(name='CoverUrl'),
      createTime?: string(name='CreateTime'),
      deleted?: boolean(name='Deleted'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      glbModelUrl?: string(name='GlbModelUrl'),
      id?: long(name='Id'),
      modelUrl?: string(name='ModelUrl'),
      modifiedTime?: string(name='ModifiedTime'),
      originResultUrl?: string(name='OriginResultUrl'),
      ossKey?: string(name='OssKey'),
      policy?: {
        accessId?: string(name='AccessId'),
        dir?: string(name='Dir'),
        expire?: string(name='Expire'),
        host?: string(name='Host'),
        policy?: string(name='Policy'),
        signature?: string(name='Signature'),
      }(name='Policy'),
      poseUrl?: string(name='PoseUrl'),
      previewUrl?: string(name='PreviewUrl'),
    }(name='Dataset'),
    deleted?: boolean(name='Deleted'),
    ext?: string(name='Ext'),
    id?: string(name='Id'),
    intro?: string(name='Intro'),
    materialCoverUrl?: string(name='MaterialCoverUrl'),
    modifiedTime?: string(name='ModifiedTime'),
    status?: string(name='Status'),
    title?: string(name='Title'),
    type?: string(name='Type'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopCreateFeatureToAvatarProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopCreateFeatureToAvatarProjectResponseBody(name='body'),
}

async function popCreateFeatureToAvatarProject(request: PopCreateFeatureToAvatarProjectRequest): PopCreateFeatureToAvatarProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopCreateFeatureToAvatarProject', 'POST', '/', 'json', true, 'form', request);
}

model PopCreateLivePortraitModelScopeProjectRequest {
  extInfo?: string(name='ExtInfo', position='Body'),
  intro?: string(name='Intro', position='Body'),
  title?: string(name='Title', position='Body'),
}

model PopCreateLivePortraitModelScopeProjectResponseBody = {
  code?: string(name='Code'),
  data?: {
    id?: string(name='Id'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopCreateLivePortraitModelScopeProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopCreateLivePortraitModelScopeProjectResponseBody(name='body'),
}

async function popCreateLivePortraitModelScopeProject(request: PopCreateLivePortraitModelScopeProjectRequest): PopCreateLivePortraitModelScopeProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopCreateLivePortraitModelScopeProject', 'POST', '/', 'json', true, 'form', request);
}

model PopCreateMaterialRequest {
  checkStatus?: string(name='CheckStatus', position='Body'),
  ext?: string(name='Ext', position='Body'),
  intro?: string(name='Intro', position='Body'),
  jwtToken?: string(name='JwtToken', position='Query'),
  listStatus?: string(name='ListStatus', position='Body'),
  name?: string(name='Name', position='Body'),
  ossKey?: string(name='OssKey', position='Body'),
  type?: string(name='Type', position='Body'),
}

model PopCreateMaterialResponseBody = {
  code?: string(name='Code'),
  data?: {
    checkStatus?: string(name='CheckStatus'),
    common?: boolean(name='Common'),
    coverUrl?: string(name='CoverUrl'),
    createTime?: string(name='CreateTime'),
    deleted?: boolean(name='Deleted'),
    ext?: string(name='Ext'),
    fileUrl?: string(name='FileUrl'),
    id?: string(name='Id'),
    intro?: string(name='Intro'),
    listStatus?: string(name='ListStatus'),
    modifiedTime?: string(name='ModifiedTime'),
    name?: string(name='Name'),
    ossKey?: string(name='OssKey'),
    previewUrl?: string(name='PreviewUrl'),
    type?: string(name='Type'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopCreateMaterialResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopCreateMaterialResponseBody(name='body'),
}

async function popCreateMaterial(request: PopCreateMaterialRequest): PopCreateMaterialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopCreateMaterial', 'POST', '/', 'json', true, 'form', request);
}

model PopCreateObjectGenerationProjectRequest {
  bizUsage?: string(name='BizUsage', position='Body'),
  extInfo?: string(name='ExtInfo', position='Body'),
  intro?: string(name='Intro', position='Body'),
  jwtToken?: string(name='JwtToken', position='Query'),
  title?: string(name='Title', position='Body'),
}

model PopCreateObjectGenerationProjectResponseBody = {
  code?: string(name='Code'),
  data?: {
    id?: string(name='Id'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopCreateObjectGenerationProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopCreateObjectGenerationProjectResponseBody(name='body'),
}

async function popCreateObjectGenerationProject(request: PopCreateObjectGenerationProjectRequest): PopCreateObjectGenerationProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopCreateObjectGenerationProject', 'POST', '/', 'json', true, 'form', request);
}

model PopCreateObjectProjectRequest {
  autoBuild: boolean(name='AutoBuild', position='Body'),
  bizUsage: string(name='BizUsage', position='Body'),
  customSource?: string(name='CustomSource', position='Body'),
  dependencies?: string(name='Dependencies', position='Body'),
  foreignUid?: string(name='ForeignUid', position='Body'),
  intro?: string(name='Intro', position='Body'),
  jwtToken?: string(name='JwtToken', position='Body'),
  mode: string(name='Mode', position='Body'),
  recommendStatus?: string(name='RecommendStatus', position='Body'),
  title: string(name='Title', position='Body'),
}

model PopCreateObjectProjectResponseBody = {
  code?: string(name='Code'),
  data?: {
    auditStatus?: string(name='AuditStatus'),
    autoBuild?: boolean(name='AutoBuild'),
    bizUsage?: string(name='BizUsage'),
    buildDetail?: {
      completedTime?: string(name='CompletedTime'),
      createTime?: string(name='CreateTime'),
      deleted?: boolean(name='Deleted'),
      errorMessage?: string(name='ErrorMessage'),
      estimatedDuration?: long(name='EstimatedDuration'),
      modifiedTime?: string(name='ModifiedTime'),
      runningTime?: string(name='RunningTime'),
      submitTime?: string(name='SubmitTime'),
    }(name='BuildDetail'),
    checkStatus?: string(name='CheckStatus'),
    createMode?: string(name='CreateMode'),
    createTime?: string(name='CreateTime'),
    customSource?: string(name='CustomSource'),
    dataset?: {
      buildResultUrl?: map[string]any(name='BuildResultUrl'),
      coverUrl?: string(name='CoverUrl'),
      createTime?: string(name='CreateTime'),
      deleted?: boolean(name='Deleted'),
      errorMessage?: string(name='ErrorMessage'),
      glbModelUrl?: string(name='GlbModelUrl'),
      modelUrl?: string(name='ModelUrl'),
      modifiedTime?: string(name='ModifiedTime'),
      originResultUrl?: string(name='OriginResultUrl'),
      ossKey?: string(name='OssKey'),
      policy?: {
        accessId?: string(name='AccessId'),
        dir?: string(name='Dir'),
        expire?: string(name='Expire'),
        host?: string(name='Host'),
        policy?: string(name='Policy'),
        signature?: string(name='Signature'),
      }(name='Policy'),
      poseUrl?: string(name='PoseUrl'),
      previewUrl?: string(name='PreviewUrl'),
      token?: {
        accessKeyId?: string(name='AccessKeyId'),
        accessKeySecret?: string(name='AccessKeySecret'),
        dir?: string(name='Dir'),
        expiration?: string(name='Expiration'),
        host?: string(name='Host'),
        securityToken?: string(name='SecurityToken'),
      }(name='Token'),
    }(name='Dataset'),
    deleted?: boolean(name='Deleted'),
    dependencies?: string(name='Dependencies'),
    ext?: string(name='Ext'),
    id?: string(name='Id'),
    intro?: string(name='Intro'),
    modifiedTime?: string(name='ModifiedTime'),
    recommendStatus?: string(name='RecommendStatus'),
    source?: {
      clothes?: [ 
        {
          coverUrl?: string(name='CoverUrl'),
          createTime?: string(name='CreateTime'),
          deleted?: boolean(name='Deleted'),
          modifiedTime?: string(name='ModifiedTime'),
          name?: string(name='Name'),
          ossKey?: string(name='OssKey'),
          type?: string(name='Type'),
        }
      ](name='Clothes'),
      createTime?: string(name='CreateTime'),
      deleted?: boolean(name='Deleted'),
      modifiedTime?: string(name='ModifiedTime'),
      ossKey?: string(name='OssKey'),
      policy?: {
        accessId?: string(name='AccessId'),
        dir?: string(name='Dir'),
        expire?: string(name='Expire'),
        host?: string(name='Host'),
        policy?: string(name='Policy'),
        signature?: string(name='Signature'),
      }(name='Policy'),
      sourceFiles?: [ 
        {
          coverUrl?: string(name='CoverUrl'),
          createTime?: string(name='CreateTime'),
          deleted?: boolean(name='Deleted'),
          fileName?: string(name='FileName'),
          filesize?: long(name='Filesize'),
          modifiedTime?: string(name='ModifiedTime'),
          ossKey?: string(name='OssKey'),
          type?: string(name='Type'),
          url?: string(name='Url'),
        }
      ](name='SourceFiles'),
      token?: {
        accessKeyId?: string(name='AccessKeyId'),
        accessKeySecret?: string(name='AccessKeySecret'),
        dir?: string(name='Dir'),
        expiration?: string(name='Expiration'),
        host?: string(name='Host'),
        securityToken?: string(name='SecurityToken'),
      }(name='Token'),
    }(name='Source'),
    status?: string(name='Status'),
    title?: string(name='Title'),
    type?: string(name='Type'),
  }(name='Data'),
  errorName?: string(name='ErrorName'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopCreateObjectProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopCreateObjectProjectResponseBody(name='body'),
}

async function popCreateObjectProject(request: PopCreateObjectProjectRequest): PopCreateObjectProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopCreateObjectProject', 'POST', '/', 'json', true, 'form', request);
}

model PopCreatePakRenderProjectRequest {
  extInfo?: string(name='ExtInfo', position='Body'),
  intro?: string(name='Intro', position='Body'),
  title?: string(name='Title', position='Body'),
}

model PopCreatePakRenderProjectResponseBody = {
  code?: string(name='Code'),
  data?: {
    autoBuild?: boolean(name='AutoBuild'),
    bizUsage?: string(name='BizUsage'),
    checkStatus?: string(name='CheckStatus'),
    createMode?: string(name='CreateMode'),
    createTime?: string(name='CreateTime'),
    deleted?: boolean(name='Deleted'),
    dependencies?: string(name='Dependencies'),
    ext?: string(name='Ext'),
    id?: string(name='Id'),
    intro?: string(name='Intro'),
    materialCoverUrl?: string(name='MaterialCoverUrl'),
    modifiedTime?: string(name='ModifiedTime'),
    status?: string(name='Status'),
    title?: string(name='Title'),
    type?: string(name='Type'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopCreatePakRenderProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopCreatePakRenderProjectResponseBody(name='body'),
}

async function popCreatePakRenderProject(request: PopCreatePakRenderProjectRequest): PopCreatePakRenderProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopCreatePakRenderProject', 'POST', '/', 'json', true, 'form', request);
}

model PopCreateTextToAvatarProjectRequest {
  extInfo?: string(name='ExtInfo', position='Body'),
  intro?: string(name='Intro', position='Body'),
  jwtToken?: string(name='JwtToken', position='Query'),
  title?: string(name='Title', position='Body'),
}

model PopCreateTextToAvatarProjectResponseBody = {
  code?: string(name='Code'),
  data?: {
    autoBuild?: boolean(name='AutoBuild'),
    bizUsage?: string(name='BizUsage'),
    checkStatus?: string(name='CheckStatus'),
    createMode?: string(name='CreateMode'),
    createTime?: string(name='CreateTime'),
    deleted?: boolean(name='Deleted'),
    dependencies?: string(name='Dependencies'),
    ext?: string(name='Ext'),
    id?: string(name='Id'),
    intro?: string(name='Intro'),
    materialCoverUrl?: string(name='MaterialCoverUrl'),
    modifiedTime?: string(name='ModifiedTime'),
    status?: string(name='Status'),
    title?: string(name='Title'),
    type?: string(name='Type'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopCreateTextToAvatarProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopCreateTextToAvatarProjectResponseBody(name='body'),
}

async function popCreateTextToAvatarProject(request: PopCreateTextToAvatarProjectRequest): PopCreateTextToAvatarProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopCreateTextToAvatarProject', 'POST', '/', 'json', true, 'form', request);
}

model PopDeleteMaterialRequest {
  jwtToken?: string(name='JwtToken', position='Query'),
  materialId: string(name='MaterialId', position='Query'),
}

model PopDeleteMaterialResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopDeleteMaterialResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopDeleteMaterialResponseBody(name='body'),
}

async function popDeleteMaterial(request: PopDeleteMaterialRequest): PopDeleteMaterialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopDeleteMaterial', 'POST', '/', 'json', false, 'json', request);
}

model PopGetAITryOnJobRequest {
  jwtToken?: string(name='JwtToken', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  withMaterial?: boolean(name='WithMaterial', position='Query'),
  withResult?: boolean(name='WithResult', position='Query'),
}

model PopGetAITryOnJobResponseBody = {
  code?: string(name='Code'),
  data?: {
    dummyProjectInfo?: {
      auditStatus?: string(name='AuditStatus'),
      autoBuild?: boolean(name='AutoBuild'),
      bizUsage?: string(name='BizUsage'),
      buildDetail?: {
        completedTime?: string(name='CompletedTime'),
        createTime?: string(name='CreateTime'),
        deleted?: boolean(name='Deleted'),
        errorMessage?: string(name='ErrorMessage'),
        estimatedDuration?: long(name='EstimatedDuration'),
        id?: long(name='Id'),
        modifiedTime?: string(name='ModifiedTime'),
        runningTime?: string(name='RunningTime'),
        status?: string(name='Status'),
        submitTime?: string(name='SubmitTime'),
      }(name='BuildDetail'),
      checkStatus?: string(name='CheckStatus'),
      createMode?: string(name='CreateMode'),
      createTime?: string(name='CreateTime'),
      customSource?: string(name='CustomSource'),
      dataset?: {
        buildResultUrl?: map[string]any(name='BuildResultUrl'),
        coverUrl?: string(name='CoverUrl'),
        createTime?: string(name='CreateTime'),
        deleted?: boolean(name='Deleted'),
        errorCode?: string(name='ErrorCode'),
        errorMessage?: string(name='ErrorMessage'),
        glbModelUrl?: string(name='GlbModelUrl'),
        id?: long(name='Id'),
        modelUrl?: string(name='ModelUrl'),
        modifiedTime?: string(name='ModifiedTime'),
        originResultUrl?: string(name='OriginResultUrl'),
        ossKey?: string(name='OssKey'),
        policy?: {
          accessId?: string(name='AccessId'),
          dir?: string(name='Dir'),
          expire?: string(name='Expire'),
          host?: string(name='Host'),
          policy?: string(name='Policy'),
          signature?: string(name='Signature'),
        }(name='Policy'),
        poseUrl?: string(name='PoseUrl'),
        previewUrl?: string(name='PreviewUrl'),
      }(name='Dataset'),
      deleted?: boolean(name='Deleted'),
      dependencies?: string(name='Dependencies'),
      ext?: string(name='Ext'),
      id?: string(name='Id'),
      intro?: string(name='Intro'),
      materialCoverUrl?: string(name='MaterialCoverUrl'),
      modifiedTime?: string(name='ModifiedTime'),
      source?: {
        clothes?: [ 
          {
            coverUrl?: string(name='CoverUrl'),
            createTime?: string(name='CreateTime'),
            deleted?: boolean(name='Deleted'),
            id?: long(name='Id'),
            modifiedTime?: string(name='ModifiedTime'),
            name?: string(name='Name'),
            ossKey?: string(name='OssKey'),
            part?: string(name='Part'),
            size?: string(name='Size'),
            skuProps?: [ 
              {
                name?: string(name='Name'),
                options?: [ string ](name='Options'),
              }
            ](name='SkuProps'),
            skus?: [ 
              {
                color?: string(name='Color'),
                cover?: string(name='Cover'),
                size?: string(name='Size'),
                status?: string(name='Status'),
              }
            ](name='Skus'),
            status?: map[string]string(name='Status'),
            type?: string(name='Type'),
            version?: int32(name='Version'),
          }
        ](name='Clothes'),
        createTime?: string(name='CreateTime'),
        deleted?: boolean(name='Deleted'),
        id?: long(name='Id'),
        modifiedTime?: string(name='ModifiedTime'),
        ossKey?: string(name='OssKey'),
        policy?: {
          accessId?: string(name='AccessId'),
          dir?: string(name='Dir'),
          expire?: string(name='Expire'),
          host?: string(name='Host'),
          policy?: string(name='Policy'),
          signature?: string(name='Signature'),
        }(name='Policy'),
        sourceFiles?: [ 
          {
            coverUrl?: string(name='CoverUrl'),
            createTime?: string(name='CreateTime'),
            deleted?: boolean(name='Deleted'),
            fileName?: string(name='FileName'),
            filesize?: long(name='Filesize'),
            id?: long(name='Id'),
            modifiedTime?: string(name='ModifiedTime'),
            ossKey?: string(name='OssKey'),
            type?: string(name='Type'),
            url?: string(name='Url'),
          }
        ](name='SourceFiles'),
        token?: {
          accessKeyId?: string(name='AccessKeyId'),
          accessKeySecret?: string(name='AccessKeySecret'),
          dir?: string(name='Dir'),
          expiration?: string(name='Expiration'),
          host?: string(name='Host'),
          securityToken?: string(name='SecurityToken'),
        }(name='Token'),
      }(name='Source'),
      status?: string(name='Status'),
      title?: string(name='Title'),
      type?: string(name='Type'),
    }(name='DummyProjectInfo'),
    materialInfo?: {
      bottoms?: {
        checkStatus?: string(name='CheckStatus'),
        common?: boolean(name='Common'),
        coverUrl?: string(name='CoverUrl'),
        createTime?: string(name='CreateTime'),
        deleted?: boolean(name='Deleted'),
        ext?: string(name='Ext'),
        fileUrl?: string(name='FileUrl'),
        id?: long(name='Id'),
        intro?: string(name='Intro'),
        listStatus?: string(name='ListStatus'),
        modifiedTime?: string(name='ModifiedTime'),
        name?: string(name='Name'),
        ossKey?: string(name='OssKey'),
        previewUrl?: string(name='PreviewUrl'),
        type?: string(name='Type'),
      }(name='Bottoms'),
      clothingType?: string(name='ClothingType'),
      model?: {
        checkStatus?: string(name='CheckStatus'),
        common?: boolean(name='Common'),
        coverUrl?: string(name='CoverUrl'),
        createTime?: string(name='CreateTime'),
        deleted?: boolean(name='Deleted'),
        ext?: string(name='Ext'),
        fileUrl?: string(name='FileUrl'),
        id?: long(name='Id'),
        intro?: string(name='Intro'),
        listStatus?: string(name='ListStatus'),
        modifiedTime?: string(name='ModifiedTime'),
        name?: string(name='Name'),
        ossKey?: string(name='OssKey'),
        previewUrl?: string(name='PreviewUrl'),
        type?: string(name='Type'),
      }(name='Model'),
      shoeType?: string(name='ShoeType'),
      suit?: {
        checkStatus?: string(name='CheckStatus'),
        common?: boolean(name='Common'),
        coverUrl?: string(name='CoverUrl'),
        createTime?: string(name='CreateTime'),
        deleted?: boolean(name='Deleted'),
        ext?: string(name='Ext'),
        fileUrl?: string(name='FileUrl'),
        id?: long(name='Id'),
        intro?: string(name='Intro'),
        listStatus?: string(name='ListStatus'),
        modifiedTime?: string(name='ModifiedTime'),
        name?: string(name='Name'),
        ossKey?: string(name='OssKey'),
        previewUrl?: string(name='PreviewUrl'),
        type?: string(name='Type'),
      }(name='Suit'),
      tops?: {
        checkStatus?: string(name='CheckStatus'),
        common?: boolean(name='Common'),
        coverUrl?: string(name='CoverUrl'),
        createTime?: string(name='CreateTime'),
        deleted?: boolean(name='Deleted'),
        ext?: string(name='Ext'),
        fileUrl?: string(name='FileUrl'),
        id?: long(name='Id'),
        intro?: string(name='Intro'),
        listStatus?: string(name='ListStatus'),
        modifiedTime?: string(name='ModifiedTime'),
        name?: string(name='Name'),
        ossKey?: string(name='OssKey'),
        previewUrl?: string(name='PreviewUrl'),
        type?: string(name='Type'),
      }(name='Tops'),
    }(name='MaterialInfo'),
    subTasks?: [ 
      {
        feedback?: {
          dislikeTags?: [ int32 ](name='DislikeTags'),
          otherReason?: string(name='OtherReason'),
          projectId?: long(name='ProjectId'),
          rating?: int32(name='Rating'),
        }(name='Feedback'),
        subProjectInfo?: {
          auditStatus?: string(name='AuditStatus'),
          autoBuild?: boolean(name='AutoBuild'),
          bizUsage?: string(name='BizUsage'),
          buildDetail?: {
            completedTime?: string(name='CompletedTime'),
            createTime?: string(name='CreateTime'),
            deleted?: boolean(name='Deleted'),
            errorMessage?: string(name='ErrorMessage'),
            estimatedDuration?: long(name='EstimatedDuration'),
            id?: long(name='Id'),
            modifiedTime?: string(name='ModifiedTime'),
            runningTime?: string(name='RunningTime'),
            status?: string(name='Status'),
            submitTime?: string(name='SubmitTime'),
          }(name='BuildDetail'),
          checkStatus?: string(name='CheckStatus'),
          createMode?: string(name='CreateMode'),
          createTime?: string(name='CreateTime'),
          customSource?: string(name='CustomSource'),
          dataset?: {
            buildResultUrl?: map[string]any(name='BuildResultUrl'),
            coverUrl?: string(name='CoverUrl'),
            createTime?: string(name='CreateTime'),
            deleted?: boolean(name='Deleted'),
            errorCode?: string(name='ErrorCode'),
            errorMessage?: string(name='ErrorMessage'),
            glbModelUrl?: string(name='GlbModelUrl'),
            id?: long(name='Id'),
            modelUrl?: string(name='ModelUrl'),
            modifiedTime?: string(name='ModifiedTime'),
            originResultUrl?: string(name='OriginResultUrl'),
            ossKey?: string(name='OssKey'),
            policy?: {
              accessId?: string(name='AccessId'),
              dir?: string(name='Dir'),
              expire?: string(name='Expire'),
              host?: string(name='Host'),
              policy?: string(name='Policy'),
              signature?: string(name='Signature'),
            }(name='Policy'),
            poseUrl?: string(name='PoseUrl'),
            previewUrl?: string(name='PreviewUrl'),
          }(name='Dataset'),
          deleted?: boolean(name='Deleted'),
          dependencies?: string(name='Dependencies'),
          ext?: string(name='Ext'),
          id?: string(name='Id'),
          intro?: string(name='Intro'),
          materialCoverUrl?: string(name='MaterialCoverUrl'),
          modifiedTime?: string(name='ModifiedTime'),
          source?: {
            clothes?: [ 
              {
                coverUrl?: string(name='CoverUrl'),
                createTime?: string(name='CreateTime'),
                deleted?: boolean(name='Deleted'),
                id?: long(name='Id'),
                modifiedTime?: string(name='ModifiedTime'),
                name?: string(name='Name'),
                ossKey?: string(name='OssKey'),
                part?: string(name='Part'),
                size?: string(name='Size'),
                skuProps?: [ 
                  {
                    name?: string(name='Name'),
                    options?: [ string ](name='Options'),
                  }
                ](name='SkuProps'),
                skus?: [ 
                  {
                    color?: string(name='Color'),
                    cover?: string(name='Cover'),
                    size?: string(name='Size'),
                    status?: string(name='Status'),
                  }
                ](name='Skus'),
                status?: map[string]string(name='Status'),
                type?: string(name='Type'),
                version?: int32(name='Version'),
              }
            ](name='Clothes'),
            createTime?: string(name='CreateTime'),
            deleted?: boolean(name='Deleted'),
            id?: long(name='Id'),
            modifiedTime?: string(name='ModifiedTime'),
            ossKey?: string(name='OssKey'),
            policy?: {
              accessId?: string(name='AccessId'),
              dir?: string(name='Dir'),
              expire?: string(name='Expire'),
              host?: string(name='Host'),
              policy?: string(name='Policy'),
              signature?: string(name='Signature'),
            }(name='Policy'),
            sourceFiles?: [ 
              {
                coverUrl?: string(name='CoverUrl'),
                createTime?: string(name='CreateTime'),
                deleted?: boolean(name='Deleted'),
                fileName?: string(name='FileName'),
                filesize?: long(name='Filesize'),
                id?: long(name='Id'),
                modifiedTime?: string(name='ModifiedTime'),
                ossKey?: string(name='OssKey'),
                type?: string(name='Type'),
                url?: string(name='Url'),
              }
            ](name='SourceFiles'),
            token?: {
              accessKeyId?: string(name='AccessKeyId'),
              accessKeySecret?: string(name='AccessKeySecret'),
              dir?: string(name='Dir'),
              expiration?: string(name='Expiration'),
              host?: string(name='Host'),
              securityToken?: string(name='SecurityToken'),
            }(name='Token'),
          }(name='Source'),
          status?: string(name='Status'),
          title?: string(name='Title'),
          type?: string(name='Type'),
        }(name='SubProjectInfo'),
      }
    ](name='SubTasks'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopGetAITryOnJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopGetAITryOnJobResponseBody(name='body'),
}

async function popGetAITryOnJob(request: PopGetAITryOnJobRequest): PopGetAITryOnJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopGetAITryOnJob', 'POST', '/', 'json', false, 'json', request);
}

model PopListAITryOnJobsRequest {
  current?: int32(name='Current', position='Body'),
  jwtToken?: string(name='JwtToken', position='Query'),
  size?: int32(name='Size', position='Body'),
}

model PopListAITryOnJobsResponseBody = {
  code?: string(name='Code'),
  current?: int32(name='Current'),
  data?: [ 
    {
      dummyProjectInfo?: {
        auditStatus?: string(name='AuditStatus'),
        autoBuild?: boolean(name='AutoBuild'),
        bizUsage?: string(name='BizUsage'),
        buildDetail?: {
          completedTime?: string(name='CompletedTime'),
          createTime?: string(name='CreateTime'),
          deleted?: boolean(name='Deleted'),
          errorMessage?: string(name='ErrorMessage'),
          estimatedDuration?: long(name='EstimatedDuration'),
          id?: long(name='Id'),
          modifiedTime?: string(name='ModifiedTime'),
          runningTime?: string(name='RunningTime'),
          status?: string(name='Status'),
          submitTime?: string(name='SubmitTime'),
        }(name='BuildDetail'),
        checkStatus?: string(name='CheckStatus'),
        createMode?: string(name='CreateMode'),
        createTime?: string(name='CreateTime'),
        customSource?: string(name='CustomSource'),
        dataset?: {
          buildResultUrl?: map[string]any(name='BuildResultUrl'),
          coverUrl?: string(name='CoverUrl'),
          createTime?: string(name='CreateTime'),
          deleted?: boolean(name='Deleted'),
          errorCode?: string(name='ErrorCode'),
          errorMessage?: string(name='ErrorMessage'),
          glbModelUrl?: string(name='GlbModelUrl'),
          id?: long(name='Id'),
          modelUrl?: string(name='ModelUrl'),
          modifiedTime?: string(name='ModifiedTime'),
          originResultUrl?: string(name='OriginResultUrl'),
          ossKey?: string(name='OssKey'),
          policy?: {
            accessId?: string(name='AccessId'),
            dir?: string(name='Dir'),
            expire?: string(name='Expire'),
            host?: string(name='Host'),
            policy?: string(name='Policy'),
            signature?: string(name='Signature'),
          }(name='Policy'),
          poseUrl?: string(name='PoseUrl'),
          previewUrl?: string(name='PreviewUrl'),
        }(name='Dataset'),
        deleted?: boolean(name='Deleted'),
        dependencies?: string(name='Dependencies'),
        ext?: string(name='Ext'),
        id?: string(name='Id'),
        intro?: string(name='Intro'),
        materialCoverUrl?: string(name='MaterialCoverUrl'),
        modifiedTime?: string(name='ModifiedTime'),
        source?: {
          clothes?: [ 
            {
              coverUrl?: string(name='CoverUrl'),
              createTime?: string(name='CreateTime'),
              deleted?: boolean(name='Deleted'),
              id?: long(name='Id'),
              modifiedTime?: string(name='ModifiedTime'),
              name?: string(name='Name'),
              ossKey?: string(name='OssKey'),
              part?: string(name='Part'),
              size?: string(name='Size'),
              skuProps?: [ 
                {
                  name?: string(name='Name'),
                  options?: [ string ](name='Options'),
                }
              ](name='SkuProps'),
              skus?: [ 
                {
                  color?: string(name='Color'),
                  cover?: string(name='Cover'),
                  size?: string(name='Size'),
                  status?: string(name='Status'),
                }
              ](name='Skus'),
              status?: map[string]string(name='Status'),
              type?: string(name='Type'),
              version?: int32(name='Version'),
            }
          ](name='Clothes'),
          createTime?: string(name='CreateTime'),
          deleted?: boolean(name='Deleted'),
          id?: long(name='Id'),
          modifiedTime?: string(name='ModifiedTime'),
          ossKey?: string(name='OssKey'),
          policy?: {
            accessId?: string(name='AccessId'),
            dir?: string(name='Dir'),
            expire?: string(name='Expire'),
            host?: string(name='Host'),
            policy?: string(name='Policy'),
            signature?: string(name='Signature'),
          }(name='Policy'),
          sourceFiles?: [ 
            {
              coverUrl?: string(name='CoverUrl'),
              createTime?: string(name='CreateTime'),
              deleted?: boolean(name='Deleted'),
              fileName?: string(name='FileName'),
              filesize?: long(name='Filesize'),
              id?: long(name='Id'),
              modifiedTime?: string(name='ModifiedTime'),
              ossKey?: string(name='OssKey'),
              type?: string(name='Type'),
              url?: string(name='Url'),
            }
          ](name='SourceFiles'),
          token?: {
            accessKeyId?: string(name='AccessKeyId'),
            accessKeySecret?: string(name='AccessKeySecret'),
            dir?: string(name='Dir'),
            expiration?: string(name='Expiration'),
            host?: string(name='Host'),
            securityToken?: string(name='SecurityToken'),
          }(name='Token'),
        }(name='Source'),
        status?: string(name='Status'),
        title?: string(name='Title'),
        type?: string(name='Type'),
      }(name='DummyProjectInfo'),
      materialInfo?: {
        bottoms?: {
          checkStatus?: string(name='CheckStatus'),
          common?: boolean(name='Common'),
          coverUrl?: string(name='CoverUrl'),
          createTime?: string(name='CreateTime'),
          deleted?: boolean(name='Deleted'),
          ext?: string(name='Ext'),
          fileUrl?: string(name='FileUrl'),
          id?: long(name='Id'),
          intro?: string(name='Intro'),
          listStatus?: string(name='ListStatus'),
          modifiedTime?: string(name='ModifiedTime'),
          name?: string(name='Name'),
          ossKey?: string(name='OssKey'),
          previewUrl?: string(name='PreviewUrl'),
          type?: string(name='Type'),
        }(name='Bottoms'),
        clothingType?: string(name='ClothingType'),
        model?: {
          checkStatus?: string(name='CheckStatus'),
          common?: boolean(name='Common'),
          coverUrl?: string(name='CoverUrl'),
          createTime?: string(name='CreateTime'),
          deleted?: boolean(name='Deleted'),
          ext?: string(name='Ext'),
          fileUrl?: string(name='FileUrl'),
          id?: long(name='Id'),
          intro?: string(name='Intro'),
          listStatus?: string(name='ListStatus'),
          modifiedTime?: string(name='ModifiedTime'),
          name?: string(name='Name'),
          ossKey?: string(name='OssKey'),
          previewUrl?: string(name='PreviewUrl'),
          type?: string(name='Type'),
        }(name='Model'),
        shoeType?: string(name='ShoeType'),
        suit?: {
          checkStatus?: string(name='CheckStatus'),
          common?: boolean(name='Common'),
          coverUrl?: string(name='CoverUrl'),
          createTime?: string(name='CreateTime'),
          deleted?: boolean(name='Deleted'),
          ext?: string(name='Ext'),
          fileUrl?: string(name='FileUrl'),
          id?: long(name='Id'),
          intro?: string(name='Intro'),
          listStatus?: string(name='ListStatus'),
          modifiedTime?: string(name='ModifiedTime'),
          name?: string(name='Name'),
          ossKey?: string(name='OssKey'),
          previewUrl?: string(name='PreviewUrl'),
          type?: string(name='Type'),
        }(name='Suit'),
        tops?: {
          checkStatus?: string(name='CheckStatus'),
          common?: boolean(name='Common'),
          coverUrl?: string(name='CoverUrl'),
          createTime?: string(name='CreateTime'),
          deleted?: boolean(name='Deleted'),
          ext?: string(name='Ext'),
          fileUrl?: string(name='FileUrl'),
          id?: long(name='Id'),
          intro?: string(name='Intro'),
          listStatus?: string(name='ListStatus'),
          modifiedTime?: string(name='ModifiedTime'),
          name?: string(name='Name'),
          ossKey?: string(name='OssKey'),
          previewUrl?: string(name='PreviewUrl'),
          type?: string(name='Type'),
        }(name='Tops'),
      }(name='MaterialInfo'),
      subTasks?: [ 
        {
          feedback?: {
            dislikeTags?: [ int32 ](name='DislikeTags'),
            otherReason?: string(name='OtherReason'),
            projectId?: long(name='ProjectId'),
            rating?: int32(name='Rating'),
          }(name='Feedback'),
          subProjectInfo?: {
            auditStatus?: string(name='AuditStatus'),
            autoBuild?: boolean(name='AutoBuild'),
            bizUsage?: string(name='BizUsage'),
            buildDetail?: {
              completedTime?: string(name='CompletedTime'),
              createTime?: string(name='CreateTime'),
              deleted?: boolean(name='Deleted'),
              errorMessage?: string(name='ErrorMessage'),
              estimatedDuration?: long(name='EstimatedDuration'),
              id?: long(name='Id'),
              modifiedTime?: string(name='ModifiedTime'),
              runningTime?: string(name='RunningTime'),
              status?: string(name='Status'),
              submitTime?: string(name='SubmitTime'),
            }(name='BuildDetail'),
            checkStatus?: string(name='CheckStatus'),
            createMode?: string(name='CreateMode'),
            createTime?: string(name='CreateTime'),
            customSource?: string(name='CustomSource'),
            dataset?: {
              buildResultUrl?: map[string]any(name='BuildResultUrl'),
              coverUrl?: string(name='CoverUrl'),
              createTime?: string(name='CreateTime'),
              deleted?: boolean(name='Deleted'),
              errorCode?: string(name='ErrorCode'),
              errorMessage?: string(name='ErrorMessage'),
              glbModelUrl?: string(name='GlbModelUrl'),
              id?: long(name='Id'),
              modelUrl?: string(name='ModelUrl'),
              modifiedTime?: string(name='ModifiedTime'),
              originResultUrl?: string(name='OriginResultUrl'),
              ossKey?: string(name='OssKey'),
              policy?: {
                accessId?: string(name='AccessId'),
                dir?: string(name='Dir'),
                expire?: string(name='Expire'),
                host?: string(name='Host'),
                policy?: string(name='Policy'),
                signature?: string(name='Signature'),
              }(name='Policy'),
              poseUrl?: string(name='PoseUrl'),
              previewUrl?: string(name='PreviewUrl'),
            }(name='Dataset'),
            deleted?: boolean(name='Deleted'),
            dependencies?: string(name='Dependencies'),
            ext?: string(name='Ext'),
            id?: string(name='Id'),
            intro?: string(name='Intro'),
            materialCoverUrl?: string(name='MaterialCoverUrl'),
            modifiedTime?: string(name='ModifiedTime'),
            source?: {
              clothes?: [ 
                {
                  coverUrl?: string(name='CoverUrl'),
                  createTime?: string(name='CreateTime'),
                  deleted?: boolean(name='Deleted'),
                  id?: long(name='Id'),
                  modifiedTime?: string(name='ModifiedTime'),
                  name?: string(name='Name'),
                  ossKey?: string(name='OssKey'),
                  part?: string(name='Part'),
                  size?: string(name='Size'),
                  skuProps?: [ 
                    {
                      name?: string(name='Name'),
                      options?: [ string ](name='Options'),
                    }
                  ](name='SkuProps'),
                  skus?: [ 
                    {
                      color?: string(name='Color'),
                      cover?: string(name='Cover'),
                      size?: string(name='Size'),
                      status?: string(name='Status'),
                    }
                  ](name='Skus'),
                  status?: map[string]string(name='Status'),
                  type?: string(name='Type'),
                  version?: int32(name='Version'),
                }
              ](name='Clothes'),
              createTime?: string(name='CreateTime'),
              deleted?: boolean(name='Deleted'),
              id?: long(name='Id'),
              modifiedTime?: string(name='ModifiedTime'),
              ossKey?: string(name='OssKey'),
              policy?: {
                accessId?: string(name='AccessId'),
                dir?: string(name='Dir'),
                expire?: string(name='Expire'),
                host?: string(name='Host'),
                policy?: string(name='Policy'),
                signature?: string(name='Signature'),
              }(name='Policy'),
              sourceFiles?: [ 
                {
                  coverUrl?: string(name='CoverUrl'),
                  createTime?: string(name='CreateTime'),
                  deleted?: boolean(name='Deleted'),
                  fileName?: string(name='FileName'),
                  filesize?: long(name='Filesize'),
                  id?: long(name='Id'),
                  modifiedTime?: string(name='ModifiedTime'),
                  ossKey?: string(name='OssKey'),
                  type?: string(name='Type'),
                  url?: string(name='Url'),
                }
              ](name='SourceFiles'),
              token?: {
                accessKeyId?: string(name='AccessKeyId'),
                accessKeySecret?: string(name='AccessKeySecret'),
                dir?: string(name='Dir'),
                expiration?: string(name='Expiration'),
                host?: string(name='Host'),
                securityToken?: string(name='SecurityToken'),
              }(name='Token'),
            }(name='Source'),
            status?: string(name='Status'),
            title?: string(name='Title'),
            type?: string(name='Type'),
          }(name='SubProjectInfo'),
        }
      ](name='SubTasks'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  pages?: int32(name='Pages'),
  requestId?: string(name='RequestId'),
  size?: int32(name='Size'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model PopListAITryOnJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopListAITryOnJobsResponseBody(name='body'),
}

async function popListAITryOnJobs(request: PopListAITryOnJobsRequest): PopListAITryOnJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopListAITryOnJobs', 'POST', '/', 'json', true, 'form', request);
}

model PopListCommonMaterialsAllRequest {
  current?: int32(name='Current', position='Body'),
  jwtToken?: string(name='JwtToken', position='Query'),
  listStatus?: string(name='ListStatus', position='Query'),
  name?: string(name='Name', position='Query'),
  size?: int32(name='Size', position='Body'),
  tags?: string(name='Tags', position='Query'),
  type?: string(name='Type', position='Query'),
}

model PopListCommonMaterialsAllResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      checkStatus?: string(name='CheckStatus'),
      common?: boolean(name='Common'),
      coverUrl?: string(name='CoverUrl'),
      createTime?: string(name='CreateTime'),
      deleted?: boolean(name='Deleted'),
      ext?: string(name='Ext'),
      fileUrl?: string(name='FileUrl'),
      id?: string(name='Id'),
      intro?: string(name='Intro'),
      listStatus?: string(name='ListStatus'),
      modifiedTime?: string(name='ModifiedTime'),
      name?: string(name='Name'),
      ossKey?: string(name='OssKey'),
      previewUrl?: string(name='PreviewUrl'),
      type?: string(name='Type'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopListCommonMaterialsAllResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopListCommonMaterialsAllResponseBody(name='body'),
}

async function popListCommonMaterialsAll(request: PopListCommonMaterialsAllRequest): PopListCommonMaterialsAllResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopListCommonMaterialsAll', 'POST', '/', 'json', true, 'form', request);
}

model PopListFeatureToAvatarMaterialsRequest {
  current?: int32(name='Current', position='Body'),
  listStatus?: string(name='ListStatus', position='Body'),
  size?: int32(name='Size', position='Body'),
  tags?: string(name='Tags', position='Body'),
}

model PopListFeatureToAvatarMaterialsResponseBody = {
  code?: string(name='Code'),
  current?: int32(name='Current'),
  data?: [ 
    {
      checkStatus?: string(name='CheckStatus'),
      common?: boolean(name='Common'),
      coverUrl?: string(name='CoverUrl'),
      deleted?: boolean(name='Deleted'),
      ext?: string(name='Ext'),
      fileUrl?: string(name='FileUrl'),
      id?: string(name='Id'),
      intro?: string(name='Intro'),
      listStatus?: string(name='ListStatus'),
      name?: string(name='Name'),
      type?: string(name='Type'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  pages?: int32(name='Pages'),
  requestId?: string(name='RequestId'),
  size?: int32(name='Size'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model PopListFeatureToAvatarMaterialsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopListFeatureToAvatarMaterialsResponseBody(name='body'),
}

async function popListFeatureToAvatarMaterials(request: PopListFeatureToAvatarMaterialsRequest): PopListFeatureToAvatarMaterialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopListFeatureToAvatarMaterials', 'POST', '/', 'json', true, 'form', request);
}

model PopListFeatureToAvatarProjectRequest {
  current?: int32(name='Current', position='Body'),
  size?: int32(name='Size', position='Body'),
  sortField?: string(name='SortField', position='Body'),
  status?: string(name='Status', position='Body'),
  title?: string(name='Title', position='Body'),
}

model PopListFeatureToAvatarProjectResponseBody = {
  code?: string(name='Code'),
  current?: int32(name='Current'),
  data?: [ 
    {
      bizUsage?: string(name='BizUsage'),
      buildDetail?: {
        completedTime?: string(name='CompletedTime'),
        createTime?: string(name='CreateTime'),
        deleted?: boolean(name='Deleted'),
        errorMessage?: string(name='ErrorMessage'),
        estimatedDuration?: long(name='EstimatedDuration'),
        modifiedTime?: string(name='ModifiedTime'),
        runningTime?: string(name='RunningTime'),
        status?: string(name='Status'),
        submitTime?: string(name='SubmitTime'),
      }(name='BuildDetail'),
      checkStatus?: string(name='CheckStatus'),
      createMode?: string(name='CreateMode'),
      createTime?: string(name='CreateTime'),
      dataset?: {
        buildResultUrl?: map[string]any(name='BuildResultUrl'),
        coverUrl?: string(name='CoverUrl'),
        createTime?: string(name='CreateTime'),
        deleted?: boolean(name='Deleted'),
        errorCode?: string(name='ErrorCode'),
        errorMessage?: string(name='ErrorMessage'),
        glbModelUrl?: string(name='GlbModelUrl'),
        modelUrl?: string(name='ModelUrl'),
        modifiedTime?: string(name='ModifiedTime'),
        originResultUrl?: string(name='OriginResultUrl'),
        ossKey?: string(name='OssKey'),
        policy?: {
          accessId?: string(name='AccessId'),
          dir?: string(name='Dir'),
          expire?: string(name='Expire'),
          host?: string(name='Host'),
          policy?: string(name='Policy'),
          signature?: string(name='Signature'),
        }(name='Policy'),
        poseUrl?: string(name='PoseUrl'),
        previewUrl?: string(name='PreviewUrl'),
      }(name='Dataset'),
      deleted?: boolean(name='Deleted'),
      ext?: string(name='Ext'),
      id?: string(name='Id'),
      intro?: string(name='Intro'),
      materialCoverUrl?: string(name='MaterialCoverUrl'),
      modifiedTime?: string(name='ModifiedTime'),
      status?: string(name='Status'),
      title?: string(name='Title'),
      type?: string(name='Type'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  pages?: int32(name='Pages'),
  requestId?: string(name='RequestId'),
  size?: int32(name='Size'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model PopListFeatureToAvatarProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopListFeatureToAvatarProjectResponseBody(name='body'),
}

async function popListFeatureToAvatarProject(request: PopListFeatureToAvatarProjectRequest): PopListFeatureToAvatarProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopListFeatureToAvatarProject', 'POST', '/', 'json', true, 'form', request);
}

model PopListLivePortraitModelScopeMaterialsRequest {
  current?: int32(name='Current', position='Body'),
  size?: int32(name='Size', position='Body'),
  types?: string(name='Types', position='Body'),
}

model PopListLivePortraitModelScopeMaterialsResponseBody = {
  code?: string(name='Code'),
  current?: int32(name='Current'),
  data?: [ 
    {
      coverUrl?: string(name='CoverUrl'),
      ext?: string(name='Ext'),
      fileUrl?: string(name='FileUrl'),
      id?: string(name='Id'),
      intro?: string(name='Intro'),
      name?: string(name='Name'),
      type?: string(name='Type'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  pages?: int32(name='Pages'),
  requestId?: string(name='RequestId'),
  size?: int32(name='Size'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model PopListLivePortraitModelScopeMaterialsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopListLivePortraitModelScopeMaterialsResponseBody(name='body'),
}

async function popListLivePortraitModelScopeMaterials(request: PopListLivePortraitModelScopeMaterialsRequest): PopListLivePortraitModelScopeMaterialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopListLivePortraitModelScopeMaterials', 'POST', '/', 'json', true, 'form', request);
}

model PopListObjectCaseRequest {
  current?: int32(name='Current', position='Body'),
  jwtToken?: string(name='JwtToken', position='Body'),
  size?: int32(name='Size', position='Body'),
}

model PopListObjectCaseResponseBody = {
  code?: string(name='Code'),
  current?: int32(name='Current'),
  data?: [ 
    {
      auditStatus?: string(name='AuditStatus'),
      autoBuild?: boolean(name='AutoBuild'),
      bizUsage?: string(name='BizUsage'),
      buildDetail?: {
        completedTime?: string(name='CompletedTime'),
        createTime?: string(name='CreateTime'),
        deleted?: boolean(name='Deleted'),
        errorMessage?: string(name='ErrorMessage'),
        estimatedDuration?: long(name='EstimatedDuration'),
        modifiedTime?: string(name='ModifiedTime'),
        runningTime?: string(name='RunningTime'),
        submitTime?: string(name='SubmitTime'),
      }(name='BuildDetail'),
      checkStatus?: string(name='CheckStatus'),
      createMode?: string(name='CreateMode'),
      createTime?: string(name='CreateTime'),
      customSource?: string(name='CustomSource'),
      dataset?: {
        buildResultUrl?: map[string]any(name='BuildResultUrl'),
        coverUrl?: string(name='CoverUrl'),
        createTime?: string(name='CreateTime'),
        deleted?: boolean(name='Deleted'),
        errorMessage?: string(name='ErrorMessage'),
        glbModelUrl?: string(name='GlbModelUrl'),
        modelUrl?: string(name='ModelUrl'),
        modifiedTime?: string(name='ModifiedTime'),
        originResultUrl?: string(name='OriginResultUrl'),
        ossKey?: string(name='OssKey'),
        policy?: {
          accessId?: string(name='AccessId'),
          dir?: string(name='Dir'),
          expire?: string(name='Expire'),
          host?: string(name='Host'),
          policy?: string(name='Policy'),
          signature?: string(name='Signature'),
        }(name='Policy'),
        poseUrl?: string(name='PoseUrl'),
        previewUrl?: string(name='PreviewUrl'),
      }(name='Dataset'),
      deleted?: boolean(name='Deleted'),
      dependencies?: string(name='Dependencies'),
      ext?: string(name='Ext'),
      id?: string(name='Id'),
      intro?: string(name='Intro'),
      modifiedTime?: string(name='ModifiedTime'),
      source?: {
        clothes?: [ 
          {
            coverUrl?: string(name='CoverUrl'),
            createTime?: string(name='CreateTime'),
            deleted?: boolean(name='Deleted'),
            modifiedTime?: string(name='ModifiedTime'),
            name?: string(name='Name'),
            ossKey?: string(name='OssKey'),
            type?: string(name='Type'),
          }
        ](name='Clothes'),
        createTime?: string(name='CreateTime'),
        deleted?: boolean(name='Deleted'),
        modifiedTime?: string(name='ModifiedTime'),
        ossKey?: string(name='OssKey'),
        policy?: {
          accessId?: string(name='AccessId'),
          dir?: string(name='Dir'),
          expire?: string(name='Expire'),
          host?: string(name='Host'),
          policy?: string(name='Policy'),
          signature?: string(name='Signature'),
        }(name='Policy'),
        sourceFiles?: [ 
          {
            coverUrl?: string(name='CoverUrl'),
            createTime?: string(name='CreateTime'),
            deleted?: boolean(name='Deleted'),
            fileName?: string(name='FileName'),
            filesize?: long(name='Filesize'),
            modifiedTime?: string(name='ModifiedTime'),
            ossKey?: string(name='OssKey'),
            type?: string(name='Type'),
            url?: string(name='Url'),
          }
        ](name='SourceFiles'),
      }(name='Source'),
      status?: string(name='Status'),
      title?: string(name='Title'),
      type?: string(name='Type'),
    }
  ](name='Data'),
  errorName?: string(name='ErrorName'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message'),
  pages?: int32(name='Pages'),
  requestId?: string(name='RequestId'),
  size?: int32(name='Size'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model PopListObjectCaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopListObjectCaseResponseBody(name='body'),
}

async function popListObjectCase(request: PopListObjectCaseRequest): PopListObjectCaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopListObjectCase', 'POST', '/', 'json', true, 'form', request);
}

model PopListObjectGenerationProjectRequest {
  current?: int32(name='Current', position='Body'),
  jwtToken?: string(name='JwtToken', position='Query'),
  size?: int32(name='Size', position='Body'),
}

model PopListObjectGenerationProjectResponseBody = {
  code?: string(name='Code'),
  current?: int32(name='Current'),
  data?: [ 
    {
      bizUsage?: string(name='BizUsage'),
      buildDetail?: {
        completedTime?: string(name='CompletedTime'),
        errorMessage?: string(name='ErrorMessage'),
        estimatedDuration?: long(name='EstimatedDuration'),
        runningTime?: string(name='RunningTime'),
        submitTime?: string(name='SubmitTime'),
      }(name='BuildDetail'),
      dataset?: {
        buildResultUrl?: map[string]any(name='BuildResultUrl'),
      }(name='Dataset'),
      ext?: string(name='Ext'),
      id?: string(name='Id'),
      intro?: string(name='Intro'),
      status?: string(name='Status'),
      title?: string(name='Title'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  pages?: int32(name='Pages'),
  requestId?: string(name='RequestId'),
  size?: int32(name='Size'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model PopListObjectGenerationProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopListObjectGenerationProjectResponseBody(name='body'),
}

async function popListObjectGenerationProject(request: PopListObjectGenerationProjectRequest): PopListObjectGenerationProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopListObjectGenerationProject', 'POST', '/', 'json', true, 'form', request);
}

model PopListObjectProjectRequest {
  auditStatus?: string(name='AuditStatus', position='Body'),
  current?: int32(name='Current', position='Body'),
  customSource?: string(name='CustomSource', position='Body'),
  jwtToken?: string(name='JwtToken', position='Body'),
  size?: int32(name='Size', position='Body'),
  sortField?: string(name='SortField', position='Body'),
  status?: string(name='Status', position='Body'),
  title?: string(name='Title', position='Body'),
  withSource?: boolean(name='WithSource', position='Body'),
}

model PopListObjectProjectResponseBody = {
  code?: string(name='Code'),
  current?: int32(name='Current'),
  data?: [ 
    {
      auditStatus?: string(name='AuditStatus'),
      autoBuild?: boolean(name='AutoBuild'),
      bizUsage?: string(name='BizUsage'),
      buildDetail?: {
        completedTime?: string(name='CompletedTime'),
        createTime?: string(name='CreateTime'),
        deleted?: boolean(name='Deleted'),
        errorMessage?: string(name='ErrorMessage'),
        estimatedDuration?: long(name='EstimatedDuration'),
        modifiedTime?: string(name='ModifiedTime'),
        runningTime?: string(name='RunningTime'),
        submitTime?: string(name='SubmitTime'),
      }(name='BuildDetail'),
      checkStatus?: string(name='CheckStatus'),
      createMode?: string(name='CreateMode'),
      createTime?: string(name='CreateTime'),
      customSource?: string(name='CustomSource'),
      dataset?: {
        buildResultUrl?: map[string]any(name='BuildResultUrl'),
        coverUrl?: string(name='CoverUrl'),
        createTime?: string(name='CreateTime'),
        deleted?: boolean(name='Deleted'),
        errorMessage?: string(name='ErrorMessage'),
        glbModelUrl?: string(name='GlbModelUrl'),
        modelUrl?: string(name='ModelUrl'),
        modifiedTime?: string(name='ModifiedTime'),
        originResultUrl?: string(name='OriginResultUrl'),
        ossKey?: string(name='OssKey'),
        policy?: {
          accessId?: string(name='AccessId'),
          dir?: string(name='Dir'),
          expire?: string(name='Expire'),
          host?: string(name='Host'),
          policy?: string(name='Policy'),
          signature?: string(name='Signature'),
        }(name='Policy'),
        poseUrl?: string(name='PoseUrl'),
        previewUrl?: string(name='PreviewUrl'),
      }(name='Dataset'),
      deleted?: boolean(name='Deleted'),
      dependencies?: string(name='Dependencies'),
      ext?: string(name='Ext'),
      id?: string(name='Id'),
      intro?: string(name='Intro'),
      modifiedTime?: string(name='ModifiedTime'),
      source?: {
        clothes?: [ 
          {
            coverUrl?: string(name='CoverUrl'),
            createTime?: string(name='CreateTime'),
            deleted?: boolean(name='Deleted'),
            modifiedTime?: string(name='ModifiedTime'),
            name?: string(name='Name'),
            ossKey?: string(name='OssKey'),
            type?: string(name='Type'),
          }
        ](name='Clothes'),
        createTime?: string(name='CreateTime'),
        deleted?: boolean(name='Deleted'),
        modifiedTime?: string(name='ModifiedTime'),
        ossKey?: string(name='OssKey'),
        policy?: {
          accessId?: string(name='AccessId'),
          dir?: string(name='Dir'),
          expire?: string(name='Expire'),
          host?: string(name='Host'),
          policy?: string(name='Policy'),
          signature?: string(name='Signature'),
        }(name='Policy'),
        sourceFiles?: [ 
          {
            coverUrl?: string(name='CoverUrl'),
            createTime?: string(name='CreateTime'),
            deleted?: boolean(name='Deleted'),
            fileName?: string(name='FileName'),
            filesize?: long(name='Filesize'),
            modifiedTime?: string(name='ModifiedTime'),
            ossKey?: string(name='OssKey'),
            type?: string(name='Type'),
            url?: string(name='Url'),
          }
        ](name='SourceFiles'),
      }(name='Source'),
      status?: string(name='Status'),
      title?: string(name='Title'),
      type?: string(name='Type'),
    }
  ](name='Data'),
  errorName?: string(name='ErrorName'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message'),
  pages?: int32(name='Pages'),
  requestId?: string(name='RequestId'),
  size?: int32(name='Size'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model PopListObjectProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopListObjectProjectResponseBody(name='body'),
}

async function popListObjectProject(request: PopListObjectProjectRequest): PopListObjectProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopListObjectProject', 'POST', '/', 'json', true, 'form', request);
}

model PopListPakRenderExpressionRequest {
  current?: int32(name='Current', position='Body'),
  listStatus?: string(name='ListStatus', position='Query'),
  size?: int32(name='Size', position='Body'),
}

model PopListPakRenderExpressionResponseBody = {
  code?: string(name='Code'),
  current?: int32(name='Current'),
  data?: [ 
    {
      coverUrl?: string(name='CoverUrl'),
      ext?: string(name='Ext'),
      fileUrl?: string(name='FileUrl'),
      id?: string(name='Id'),
      intro?: string(name='Intro'),
      name?: string(name='Name'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  pages?: int32(name='Pages'),
  requestId?: string(name='RequestId'),
  size?: int32(name='Size'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model PopListPakRenderExpressionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopListPakRenderExpressionResponseBody(name='body'),
}

async function popListPakRenderExpression(request: PopListPakRenderExpressionRequest): PopListPakRenderExpressionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopListPakRenderExpression', 'POST', '/', 'json', true, 'form', request);
}

model PopListTextToAvatarProjectRequest {
  current?: int32(name='Current', position='Body'),
  jwtToken?: string(name='JwtToken', position='Query'),
  size?: int32(name='Size', position='Body'),
  sortField?: string(name='SortField', position='Body'),
  status?: string(name='Status', position='Body'),
  title?: string(name='Title', position='Body'),
}

model PopListTextToAvatarProjectResponseBody = {
  code?: string(name='Code'),
  current?: int32(name='Current'),
  data?: [ 
    {
      autoBuild?: boolean(name='AutoBuild'),
      bizUsage?: string(name='BizUsage'),
      buildDetail?: {
        completedTime?: string(name='CompletedTime'),
        createTime?: string(name='CreateTime'),
        deleted?: boolean(name='Deleted'),
        errorMessage?: string(name='ErrorMessage'),
        estimatedDuration?: long(name='EstimatedDuration'),
        modifiedTime?: string(name='ModifiedTime'),
        runningTime?: string(name='RunningTime'),
        status?: string(name='Status'),
        submitTime?: string(name='SubmitTime'),
      }(name='BuildDetail'),
      checkStatus?: string(name='CheckStatus'),
      createMode?: string(name='CreateMode'),
      createTime?: string(name='CreateTime'),
      dataset?: {
        buildResultUrl?: map[string]any(name='BuildResultUrl'),
        createTime?: string(name='CreateTime'),
        deleted?: boolean(name='Deleted'),
        errorCode?: string(name='ErrorCode'),
        errorMessage?: string(name='ErrorMessage'),
        modifiedTime?: string(name='ModifiedTime'),
        ossKey?: string(name='OssKey'),
        policy?: {
          accessId?: string(name='AccessId'),
          dir?: string(name='Dir'),
          expire?: string(name='Expire'),
          host?: string(name='Host'),
          policy?: string(name='Policy'),
          signature?: string(name='Signature'),
        }(name='Policy'),
      }(name='Dataset'),
      deleted?: boolean(name='Deleted'),
      dependencies?: string(name='Dependencies'),
      ext?: string(name='Ext'),
      id?: string(name='Id'),
      intro?: string(name='Intro'),
      materialCoverUrl?: string(name='MaterialCoverUrl'),
      modifiedTime?: string(name='ModifiedTime'),
      status?: string(name='Status'),
      title?: string(name='Title'),
      type?: string(name='Type'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  pages?: int32(name='Pages'),
  requestId?: string(name='RequestId'),
  size?: int32(name='Size'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model PopListTextToAvatarProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopListTextToAvatarProjectResponseBody(name='body'),
}

async function popListTextToAvatarProject(request: PopListTextToAvatarProjectRequest): PopListTextToAvatarProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopListTextToAvatarProject', 'POST', '/', 'json', true, 'form', request);
}

model PopObjectProjectDetailRequest {
  jwtToken?: string(name='JwtToken', position='Body'),
  projectId: string(name='ProjectId', position='Query'),
}

model PopObjectProjectDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    autoBuild?: boolean(name='AutoBuild'),
    bizUsage?: string(name='BizUsage'),
    buildDetail?: {
      completedTime?: string(name='CompletedTime'),
      createTime?: string(name='CreateTime'),
      deleted?: boolean(name='Deleted'),
      errorMessage?: string(name='ErrorMessage'),
      estimatedDuration?: long(name='EstimatedDuration'),
      modifiedTime?: string(name='ModifiedTime'),
      runningTime?: string(name='RunningTime'),
      submitTime?: string(name='SubmitTime'),
    }(name='BuildDetail'),
    checkStatus?: string(name='CheckStatus'),
    createMode?: string(name='CreateMode'),
    createTime?: string(name='CreateTime'),
    dataset?: {
      buildResultUrl?: map[string]any(name='BuildResultUrl'),
      coverUrl?: string(name='CoverUrl'),
      createTime?: string(name='CreateTime'),
      deleted?: boolean(name='Deleted'),
      errorMessage?: string(name='ErrorMessage'),
      glbModelUrl?: string(name='GlbModelUrl'),
      modelUrl?: string(name='ModelUrl'),
      modifiedTime?: string(name='ModifiedTime'),
      originResultUrl?: string(name='OriginResultUrl'),
      ossKey?: string(name='OssKey'),
      policy?: {
        accessId?: string(name='AccessId'),
        dir?: string(name='Dir'),
        expire?: string(name='Expire'),
        host?: string(name='Host'),
        policy?: string(name='Policy'),
        signature?: string(name='Signature'),
      }(name='Policy'),
      poseUrl?: string(name='PoseUrl'),
      previewUrl?: string(name='PreviewUrl'),
    }(name='Dataset'),
    deleted?: boolean(name='Deleted'),
    dependencies?: string(name='Dependencies'),
    ext?: string(name='Ext'),
    id?: string(name='Id'),
    intro?: string(name='Intro'),
    modifiedTime?: string(name='ModifiedTime'),
    source?: {
      clothes?: [ 
        {
          coverUrl?: string(name='CoverUrl'),
          createTime?: string(name='CreateTime'),
          deleted?: boolean(name='Deleted'),
          modifiedTime?: string(name='ModifiedTime'),
          name?: string(name='Name'),
          ossKey?: string(name='OssKey'),
          type?: string(name='Type'),
        }
      ](name='Clothes'),
      createTime?: string(name='CreateTime'),
      deleted?: boolean(name='Deleted'),
      modifiedTime?: string(name='ModifiedTime'),
      ossKey?: string(name='OssKey'),
      policy?: {
        accessId?: string(name='AccessId'),
        dir?: string(name='Dir'),
        expire?: string(name='Expire'),
        host?: string(name='Host'),
        policy?: string(name='Policy'),
        signature?: string(name='Signature'),
      }(name='Policy'),
      sourceFiles?: [ 
        {
          coverUrl?: string(name='CoverUrl'),
          createTime?: string(name='CreateTime'),
          deleted?: boolean(name='Deleted'),
          fileName?: string(name='FileName'),
          filesize?: long(name='Filesize'),
          modifiedTime?: string(name='ModifiedTime'),
          ossKey?: string(name='OssKey'),
          type?: string(name='Type'),
          url?: string(name='Url'),
        }
      ](name='SourceFiles'),
    }(name='Source'),
    status?: string(name='Status'),
    title?: string(name='Title'),
    type?: string(name='Type'),
  }(name='Data'),
  errorName?: string(name='ErrorName'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopObjectProjectDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopObjectProjectDetailResponseBody(name='body'),
}

async function popObjectProjectDetail(request: PopObjectProjectDetailRequest): PopObjectProjectDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopObjectProjectDetail', 'POST', '/', 'json', true, 'form', request);
}

model PopObjectRetrievalRequest {
  content?: string(name='Content', position='Body'),
  jwtToken?: string(name='JwtToken', position='Query'),
  sourceType?: string(name='SourceType', position='Body'),
  topK?: int32(name='TopK', position='Body'),
}

model PopObjectRetrievalResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      coverUrl?: string(name='CoverUrl'),
      glbUrl?: string(name='GlbUrl'),
      id?: string(name='Id'),
      modelUrl?: string(name='ModelUrl'),
      previewUrl?: string(name='PreviewUrl'),
      title?: string(name='Title'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopObjectRetrievalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopObjectRetrievalResponseBody(name='body'),
}

async function popObjectRetrieval(request: PopObjectRetrievalRequest): PopObjectRetrievalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopObjectRetrieval', 'POST', '/', 'json', true, 'form', request);
}

model PopObjectRetrievalUploadDataRequest {
  jwtToken?: string(name='JwtToken', position='Query'),
}

model PopObjectRetrievalUploadDataResponseBody = {
  code?: string(name='Code'),
  data?: {
    accessId?: string(name='AccessId'),
    dir?: string(name='Dir'),
    expire?: string(name='Expire'),
    host?: string(name='Host'),
    policy?: string(name='Policy'),
    signature?: string(name='Signature'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopObjectRetrievalUploadDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopObjectRetrievalUploadDataResponseBody(name='body'),
}

async function popObjectRetrievalUploadData(request: PopObjectRetrievalUploadDataRequest): PopObjectRetrievalUploadDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopObjectRetrievalUploadData', 'POST', '/', 'json', false, 'json', request);
}

model PopQueryAvatarProjectDetailRequest {
  projectId: string(name='ProjectId', position='Query'),
}

model PopQueryAvatarProjectDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    autoBuild?: boolean(name='AutoBuild'),
    bizUsage?: string(name='BizUsage'),
    buildDetail?: {
      completedTime?: string(name='CompletedTime'),
      createTime?: string(name='CreateTime'),
      deleted?: boolean(name='Deleted'),
      errorMessage?: string(name='ErrorMessage'),
      estimatedDuration?: long(name='EstimatedDuration'),
      modifiedTime?: string(name='ModifiedTime'),
      runningTime?: string(name='RunningTime'),
      status?: string(name='Status'),
      submitTime?: string(name='SubmitTime'),
    }(name='BuildDetail'),
    checkStatus?: string(name='CheckStatus'),
    createMode?: string(name='CreateMode'),
    createTime?: string(name='CreateTime'),
    dataset?: {
      buildResultUrl?: map[string]any(name='BuildResultUrl'),
      coverUrl?: string(name='CoverUrl'),
      createTime?: string(name='CreateTime'),
      deleted?: boolean(name='Deleted'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      glbModelUrl?: string(name='GlbModelUrl'),
      modelUrl?: string(name='ModelUrl'),
      modifiedTime?: string(name='ModifiedTime'),
      originResultUrl?: string(name='OriginResultUrl'),
      ossKey?: string(name='OssKey'),
      poseUrl?: string(name='PoseUrl'),
      previewUrl?: string(name='PreviewUrl'),
    }(name='Dataset'),
    deleted?: boolean(name='Deleted'),
    dependencies?: string(name='Dependencies'),
    ext?: string(name='Ext'),
    id?: string(name='Id'),
    intro?: string(name='Intro'),
    materialCoverUrl?: string(name='MaterialCoverUrl'),
    modifiedTime?: string(name='ModifiedTime'),
    status?: string(name='Status'),
    title?: string(name='Title'),
    type?: string(name='Type'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopQueryAvatarProjectDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopQueryAvatarProjectDetailResponseBody(name='body'),
}

async function popQueryAvatarProjectDetail(request: PopQueryAvatarProjectDetailRequest): PopQueryAvatarProjectDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopQueryAvatarProjectDetail', 'POST', '/', 'json', false, 'json', request);
}

model PopQueryLatestAvatarProjectDetailByUserRequest {
  jwtToken?: string(name='JwtToken', position='Query'),
}

model PopQueryLatestAvatarProjectDetailByUserResponseBody = {
  code?: string(name='Code'),
  data?: {
    bizUsage?: string(name='BizUsage'),
    buildDetail?: {
      runningTime?: string(name='RunningTime'),
      status?: string(name='Status'),
    }(name='BuildDetail'),
    createTime?: string(name='CreateTime'),
    dataset?: {
      buildResultUrl?: map[string]any(name='BuildResultUrl'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
    }(name='Dataset'),
    ext?: string(name='Ext'),
    id?: string(name='Id'),
    intro?: string(name='Intro'),
    status?: string(name='Status'),
    title?: string(name='Title'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopQueryLatestAvatarProjectDetailByUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopQueryLatestAvatarProjectDetailByUserResponseBody(name='body'),
}

async function popQueryLatestAvatarProjectDetailByUser(request: PopQueryLatestAvatarProjectDetailByUserRequest): PopQueryLatestAvatarProjectDetailByUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopQueryLatestAvatarProjectDetailByUser', 'POST', '/', 'json', false, 'json', request);
}

model PopQueryLivePortraitModelScopeProjectDetailRequest {
  projectId: string(name='ProjectId', position='Query'),
}

model PopQueryLivePortraitModelScopeProjectDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    bizUsage?: string(name='BizUsage'),
    dataset?: {
      buildResultUrl?: map[string]any(name='BuildResultUrl'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
    }(name='Dataset'),
    ext?: string(name='Ext'),
    id?: string(name='Id'),
    intro?: string(name='Intro'),
    materialCoverUrl?: string(name='MaterialCoverUrl'),
    status?: string(name='Status'),
    title?: string(name='Title'),
    type?: string(name='Type'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopQueryLivePortraitModelScopeProjectDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopQueryLivePortraitModelScopeProjectDetailResponseBody(name='body'),
}

async function popQueryLivePortraitModelScopeProjectDetail(request: PopQueryLivePortraitModelScopeProjectDetailRequest): PopQueryLivePortraitModelScopeProjectDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopQueryLivePortraitModelScopeProjectDetail', 'POST', '/', 'json', false, 'json', request);
}

model PopQueryObjectGenerationProjectDetailRequest {
  jwtToken?: string(name='JwtToken', position='Query'),
  projectId: string(name='ProjectId', position='Body'),
}

model PopQueryObjectGenerationProjectDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    bizUsage?: string(name='BizUsage'),
    buildDetail?: {
      completedTime?: string(name='CompletedTime'),
      errorMessage?: string(name='ErrorMessage'),
      estimatedDuration?: long(name='EstimatedDuration'),
      runningTime?: string(name='RunningTime'),
      submitTime?: string(name='SubmitTime'),
    }(name='BuildDetail'),
    dataset?: {
      buildResultUrl?: map[string]any(name='BuildResultUrl'),
    }(name='Dataset'),
    ext?: string(name='Ext'),
    id?: string(name='Id'),
    intro?: string(name='Intro'),
    status?: string(name='Status'),
    title?: string(name='Title'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopQueryObjectGenerationProjectDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopQueryObjectGenerationProjectDetailResponseBody(name='body'),
}

async function popQueryObjectGenerationProjectDetail(request: PopQueryObjectGenerationProjectDetailRequest): PopQueryObjectGenerationProjectDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopQueryObjectGenerationProjectDetail', 'POST', '/', 'json', true, 'form', request);
}

model PopRetryAITryOnTaskRequest {
  jwtToken?: string(name='JwtToken', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
}

model PopRetryAITryOnTaskResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopRetryAITryOnTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopRetryAITryOnTaskResponseBody(name='body'),
}

async function popRetryAITryOnTask(request: PopRetryAITryOnTaskRequest): PopRetryAITryOnTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopRetryAITryOnTask', 'POST', '/', 'json', false, 'json', request);
}

model PopSubmitAITryOnJobRequest {
  bottomsId?: string(name='BottomsId', position='Query'),
  clothingType: string(name='ClothingType', position='Query'),
  jwtToken?: string(name='JwtToken', position='Query'),
  modelId: string(name='ModelId', position='Query'),
  shoeType?: string(name='ShoeType', position='Query'),
  suitId?: string(name='SuitId', position='Query'),
  topsId?: string(name='TopsId', position='Query'),
}

model PopSubmitAITryOnJobResponseBody = {
  code?: string(name='Code'),
  data?: {
    projectId?: string(name='ProjectId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopSubmitAITryOnJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopSubmitAITryOnJobResponseBody(name='body'),
}

async function popSubmitAITryOnJob(request: PopSubmitAITryOnJobRequest): PopSubmitAITryOnJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopSubmitAITryOnJob', 'POST', '/', 'json', false, 'json', request);
}

model PopUploadMaterialRequest {
  jwtToken?: string(name='JwtToken', position='Query'),
}

model PopUploadMaterialResponseBody = {
  code?: string(name='Code'),
  data?: {
    ossKey?: string(name='OssKey'),
    policy?: {
      accessId?: string(name='AccessId'),
      dir?: string(name='Dir'),
      expire?: string(name='Expire'),
      host?: string(name='Host'),
      policy?: string(name='Policy'),
      signature?: string(name='Signature'),
    }(name='Policy'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopUploadMaterialResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopUploadMaterialResponseBody(name='body'),
}

async function popUploadMaterial(request: PopUploadMaterialRequest): PopUploadMaterialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopUploadMaterial', 'POST', '/', 'json', false, 'json', request);
}

model PopVideoSaveSourceRequest {
  jwtToken?: string(name='JwtToken', position='Body'),
  projectId: string(name='ProjectId', position='Query'),
  sourceType?: string(name='SourceType', position='Query'),
}

model PopVideoSaveSourceResponseBody = {
  code?: string(name='Code'),
  errorName?: string(name='ErrorName'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PopVideoSaveSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PopVideoSaveSourceResponseBody(name='body'),
}

async function popVideoSaveSource(request: PopVideoSaveSourceRequest): PopVideoSaveSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PopVideoSaveSource', 'POST', '/', 'json', true, 'form', request);
}

model QueryDigitalHumanProjectRequest {
  ids?: string(name='Ids', position='Body'),
  jwtToken?: string(name='JwtToken', position='Query'),
}

model QueryDigitalHumanProjectResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      estimatedDuration?: int32(name='EstimatedDuration'),
      fileUrl?: string(name='FileUrl'),
      id?: string(name='Id'),
      intro?: string(name='Intro'),
      runningTime?: string(name='RunningTime'),
      status?: string(name='Status'),
      subtitleUrl?: string(name='SubtitleUrl'),
      title?: string(name='Title'),
      videoLength?: int32(name='VideoLength'),
      waitingTime?: int32(name='WaitingTime'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDigitalHumanProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDigitalHumanProjectResponseBody(name='body'),
}

async function queryDigitalHumanProject(request: QueryDigitalHumanProjectRequest): QueryDigitalHumanProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDigitalHumanProject', 'POST', '/', 'json', true, 'form', request);
}

model QueryLongTtsResultRequest {
  jobId: string(name='JobId', position='Body'),
  jwtToken?: string(name='JwtToken', position='Query'),
}

model QueryLongTtsResultResponseBody = {
  code?: string(name='Code'),
  data?: {
    audioUrl?: string(name='AudioUrl'),
    duration?: float(name='Duration'),
    status?: string(name='Status'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryLongTtsResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryLongTtsResultResponseBody(name='body'),
}

async function queryLongTtsResult(request: QueryLongTtsResultRequest): QueryLongTtsResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryLongTtsResult', 'POST', '/', 'json', true, 'form', request);
}

model SubmitLongTtsTaskRequest {
  content: string(name='Content', position='Body'),
  jwtToken?: string(name='JwtToken', position='Query'),
  ttsVoiceId: string(name='TtsVoiceId', position='Body'),
}

model SubmitLongTtsTaskResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitLongTtsTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitLongTtsTaskResponseBody(name='body'),
}

async function submitLongTtsTask(request: SubmitLongTtsTaskRequest): SubmitLongTtsTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitLongTtsTask', 'POST', '/', 'json', true, 'form', request);
}

model UpdateUserEmailRequest {
  email?: string(name='Email', position='Body'),
  jwtToken?: string(name='JwtToken', position='Body'),
}

model UpdateUserEmailResponseBody = {
  code?: string(name='Code'),
  errorName?: string(name='ErrorName'),
  httpCode?: int32(name='HttpCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateUserEmailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateUserEmailResponseBody(name='body'),
}

async function updateUserEmail(request: UpdateUserEmailRequest): UpdateUserEmailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserEmail', 'POST', '/', 'json', true, 'form', request);
}

