/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'EhpcInstant';
  @version = '2023-07-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddImageRequest {
  containerImageSpec?: {
    isACREnterprise?: boolean(name='IsACREnterprise', example='True'),
    isACRRegistry?: boolean(name='IsACRRegistry', example='True'),
    registryCredential?: {
      password?: string(name='Password', example='userpassword'),
      server?: string(name='Server', example='registry-vpc.cn-hangzhou.aliyuncs.com'),
      userName?: string(name='UserName', example='username'),
    }(name='RegistryCredential'),
    registryCriId?: string(name='RegistryCriId', example='cri-xyz795ygf8k9****'),
    registryUrl?: string(name='RegistryUrl', example='registry-vpc.cn-hangzhou.aliyuncs.com/ehpc_open/nginx:latest'),
  }(name='ContainerImageSpec', shrink='json', position='Query'),
  description?: string(name='Description', position='Query'),
  imageType?: string(name='ImageType', position='Query'),
  imageVersion?: string(name='ImageVersion', example='V1.0', position='Query'),
  name: string(name='Name', description='This parameter is required.', example='app-image', position='Query'),
  VMImageSpec?: {
    imageId?: string(name='ImageId', example='m-bp1akkkr1rkxtb******'),
  }(name='VMImageSpec', shrink='json', position='Query'),
}

model AddImageResponseBody = {
  imageId?: string(name='ImageId', example='m-bp1akkkr1rkxtb******'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  success?: boolean(name='Success', example='True'),
}

model AddImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddImage  AddImageRequest
  * @return AddImageResponse
 */
async function addImage(request: AddImageRequest): AddImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddImage', 'POST', '/', 'json', false, 'json', request);
}

model CreateJobRequest {
  deploymentPolicy?: {
    allocationSpec?: string(name='AllocationSpec', example='Dedicated'),
    level?: string(name='Level'),
    network?: {
      enableExternalIpAddress?: boolean(name='EnableExternalIpAddress'),
      vswitch?: [ string ](name='Vswitch'),
    }(name='Network'),
    pool?: string(name='Pool'),
    priority?: int32(name='Priority'),
    tag?: [ 
      {
        key: string(name='Key', description='This parameter is required.'),
        value?: string(name='Value'),
      }
    ](name='Tag'),
  }(name='DeploymentPolicy', shrink='json', position='Query'),
  jobDescription?: string(name='JobDescription', example='Demo', position='Query'),
  jobName: string(name='JobName', description='This parameter is required.', example='testjob', position='Query'),
  jobScheduler?: string(name='JobScheduler', position='Query'),
  securityPolicy?: {
    securityGroup?: {
      securityGroupIds?: [ string ](name='SecurityGroupIds'),
    }(name='SecurityGroup'),
  }(name='SecurityPolicy', shrink='json', position='Query'),
  tasks: [ 
    {
      executorPolicy?: {
        arraySpec?: {
          indexEnd?: int32(name='IndexEnd', example='9'),
          indexStart?: int32(name='IndexStart', example='0'),
          indexStep?: int32(name='IndexStep', example='1'),
        }(name='ArraySpec'),
        maxCount?: int32(name='MaxCount', example='1'),
      }(name='ExecutorPolicy'),
      taskName?: string(name='TaskName', example='task0'),
      taskSpec?: {
        resource?: {
          cores?: float(name='Cores', example='2'),
          disks?: [ 
            {
              size?: int32(name='Size', example='40'),
              type?: string(name='Type', example='System'),
            }
          ](name='Disks'),
          instanceTypes?: [ string ](name='InstanceTypes'),
          memory?: float(name='Memory', example='4'),
        }(name='Resource'),
        taskExecutor: [ 
          {
            container?: {
              appId?: string(name='AppId'),
              arg?: [ string ](name='Arg'),
              command?: [ string ](name='Command'),
              environmentVars?: [ 
                {
                  name?: string(name='Name', example='PATH'),
                  value?: string(name='Value', example='/usr/local/bin'),
                }
              ](name='EnvironmentVars'),
              image: string(name='Image', description='This parameter is required.', example='registry-vpc.cn-hangzhou.aliyuncs.com/ehpc/hpl:latest'),
              workingDir?: string(name='WorkingDir', example='/usr/local/'),
            }(name='Container'),
            vm?: {
              appId?: string(name='AppId'),
              image: string(name='Image', description='This parameter is required.', example='m-xxxx'),
              password?: string(name='Password'),
              prologScript?: string(name='PrologScript', example='ZWNobyBoZWxsbyBlY3Mh'),
              script?: string(name='Script', example='ZWNobyBoZWxsbyBlY3Mh'),
            }(name='VM'),
          }
        ](name='TaskExecutor', description='This parameter is required.'),
        volumeMount?: [ 
          {
            mountOptions?: string(name='MountOptions', example='{"server":"xxxxx-xxxxx.cn-heyuan.nas.aliyuncs.com","vers":"3","path":"/data","options":"nolock,tcp,noresvport"}'),
            mountPath?: string(name='MountPath', example='/mnt'),
            readOnly?: boolean(name='ReadOnly'),
            volumeDriver?: string(name='VolumeDriver', example='alicloud/nas'),
          }
        ](name='VolumeMount'),
      }(name='TaskSpec'),
      taskSustainable?: boolean(name='TaskSustainable', example='true'),
    }
  ](name='Tasks', description='This parameter is required.', shrink='json', position='Query'),
}

model CreateJobResponseBody = {
  jobId?: string(name='JobId', example='job-xxxx'),
  requestId?: string(name='RequestId', example='896D338C-E4F4-41EC-A154-D605E5DE****'),
  tasks?: [ 
    {
      executorIds?: [ string ](name='ExecutorIds'),
      taskName?: string(name='TaskName'),
    }
  ](name='Tasks'),
}

model CreateJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateJob  CreateJobRequest
  * @return CreateJobResponse
 */
async function createJob(request: CreateJobRequest): CreateJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateJob', 'POST', '/', 'json', false, 'json', request);
}

model CreatePoolRequest {
  poolName: string(name='PoolName', description='This parameter is required.', example='PoolTest', maxLength=32, position='Query'),
  priority?: int32(name='Priority', example='1', position='Query'),
  resourceLimits?: {
    maxExectorNum?: int32(name='MaxExectorNum', example='2000'),
  }(name='ResourceLimits', shrink='json', position='Query'),
}

model CreatePoolResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='896D338C-E4F4-41EC-A154-D605E5DE****'),
}

model CreatePoolResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePoolResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePool  CreatePoolRequest
  * @return CreatePoolResponse
 */
async function createPool(request: CreatePoolRequest): CreatePoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePool', 'POST', '/', 'json', false, 'json', request);
}

model DeleteJobsRequest {
  executorIds?: [ string ](name='ExecutorIds', shrink='json', position='Query'),
  jobSpec?: [ 
    {
      jobId?: string(name='JobId', example='job-xxxx'),
      taskSpec?: [ 
        {
          arrayIndex?: [ int32 ](name='ArrayIndex'),
          taskName?: string(name='TaskName', example='task0'),
        }
      ](name='TaskSpec'),
    }
  ](name='JobSpec', shrink='json', position='Query'),
}

model DeleteJobsResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
}

model DeleteJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteJobs  DeleteJobsRequest
  * @return DeleteJobsResponse
 */
async function deleteJobs(request: DeleteJobsRequest): DeleteJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteJobs', 'POST', '/', 'json', false, 'json', request);
}

model DeletePoolRequest {
  poolName: string(name='PoolName', description='This parameter is required.', example='PoolTest', position='Query'),
}

model DeletePoolResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='896D338C-E4F4-41EC-A154-D605E5DE****'),
}

model DeletePoolResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePoolResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeletePool  DeletePoolRequest
  * @return DeletePoolResponse
 */
async function deletePool(request: DeletePoolRequest): DeletePoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePool', 'POST', '/', 'json', false, 'json', request);
}

model DescribeJobMetricDataRequest {
  arrayIndex?: [ int32 ](name='ArrayIndex', shrink='json', position='Query'),
  jobId?: string(name='JobId', example='job-xxxxx', position='Query'),
  metricName?: string(name='MetricName', example='cpu_utilization', position='Query'),
  taskName?: string(name='TaskName', example='Task0', position='Query'),
}

model DescribeJobMetricDataResponseBody = {
  dataPoints?: string(name='DataPoints', example='[{"timestamp":1709540685000,"Minimum":28.45,"Maximum":28.45,"Average":28.45}]'),
  period?: int32(name='Period', example='15'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
}

model DescribeJobMetricDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeJobMetricDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeJobMetricData  DescribeJobMetricDataRequest
  * @return DescribeJobMetricDataResponse
 */
async function describeJobMetricData(request: DescribeJobMetricDataRequest): DescribeJobMetricDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeJobMetricData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeJobMetricLastRequest {
  arrayIndex?: [ int32 ](name='ArrayIndex', shrink='json', position='Query'),
  jobId?: string(name='JobId', example='job-xxxxx', position='Query'),
  taskName?: string(name='TaskName', example='Task0', position='Query'),
}

model DescribeJobMetricLastResponseBody = {
  metrics?: [ 
    {
      arrayIndex?: int32(name='ArrayIndex', example='1'),
      metric?: string(name='Metric', example='{"memory_utilization": 37.42,"cpu_utilization": 1.008, "disk_utilization": 3.562}'),
    }
  ](name='Metrics'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
}

model DescribeJobMetricLastResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeJobMetricLastResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeJobMetricLast  DescribeJobMetricLastRequest
  * @return DescribeJobMetricLastResponse
 */
async function describeJobMetricLast(request: DescribeJobMetricLastRequest): DescribeJobMetricLastResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeJobMetricLast', 'POST', '/', 'json', false, 'json', request);
}

model GetAppVersionsRequest {
  appName: string(name='AppName', description='This parameter is required.', example='V-Ray', position='Query'),
  imageCategory?: string(name='ImageCategory', example='Public', position='Query'),
  imageType?: string(name='ImageType', example='VM', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
}

model GetAppVersionsResponseBody = {
  appVersions?: [ 
    {
      imageId: string(name='ImageId', description='This parameter is required.', example='m-f8z0dfa96luomqly****'),
      name?: string(name='Name', example='V-Ray'),
      version?: string(name='Version', example='v1.0'),
    }
  ](name='AppVersions'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model GetAppVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAppVersionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAppVersions  GetAppVersionsRequest
  * @return GetAppVersionsResponse
 */
async function getAppVersions(request: GetAppVersionsRequest): GetAppVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAppVersions', 'POST', '/', 'json', false, 'json', request);
}

model GetImageRequest {
  additionalRegionIds?: [ string ](name='AdditionalRegionIds', shrink='json', position='Query'),
  imageCategory?: string(name='ImageCategory', position='Query'),
  imageId?: string(name='ImageId', example='m-2ze74g5mvy4pjg*****', position='Query'),
  imageType?: string(name='ImageType', position='Query'),
}

model GetImageResponseBody = {
  image?: {
    additionalRegionsInfo?: [ 
      {
        imageId?: string(name='ImageId'),
        regionId?: string(name='RegionId'),
        status?: string(name='Status'),
      }
    ](name='AdditionalRegionsInfo'),
    appId?: string(name='AppId'),
    containerImageSpec?: {
      architecture?: string(name='Architecture'),
      isACREnterprise?: boolean(name='IsACREnterprise', example='True'),
      isACRRegistry?: boolean(name='IsACRRegistry', example='True'),
      osTag?: string(name='OsTag'),
      platform?: string(name='Platform'),
      registryCredential?: {
        password?: string(name='Password', example='userpassword'),
        server?: string(name='Server', example='registry-vpc.cn-hangzhou.aliyuncs.com'),
        userName?: string(name='UserName', example='username'),
      }(name='RegistryCredential'),
      registryCriId?: string(name='RegistryCriId', example='cri-xyz795ygf8k9****'),
      registryUrl?: string(name='RegistryUrl', example='registry-vpc.cn-hangzhou.aliyuncs.com/ehpc_open/nginx:latest'),
    }(name='ContainerImageSpec'),
    createTime?: string(name='CreateTime', example='2022-12-23T09:51:39Z'),
    description?: string(name='Description'),
    documentInfo?: {
      document?: string(name='Document'),
      documentId?: string(name='DocumentId'),
      encodingMode?: string(name='EncodingMode'),
    }(name='DocumentInfo'),
    imageType: string(name='ImageType', description='This parameter is required.', example='VM'),
    name?: string(name='Name', example='app-image'),
    size?: string(name='Size', example='40 GiB'),
    status?: string(name='Status'),
    VMImageSpec?: {
      architecture?: string(name='Architecture', example='x86_64'),
      imageId?: string(name='ImageId', example='m-uf60twafjtaart******'),
      osTag?: string(name='OsTag', example='CentOS  7.6 64 bit'),
      platform?: string(name='Platform', example='CentOS'),
    }(name='VMImageSpec'),
    version?: string(name='Version', example='v1.0'),
  }(name='Image'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model GetImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetImage  GetImageRequest
  * @return GetImageResponse
 */
async function getImage(request: GetImageRequest): GetImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetImage', 'POST', '/', 'json', false, 'json', request);
}

model GetJobRequest {
  jobId?: string(name='JobId', example='job-xxxx', position='Query'),
}

model GetJobResponseBody = {
  jobInfo?: {
    appExtraInfo?: string(name='AppExtraInfo'),
    createTime?: string(name='CreateTime', example='2024-03-05 20:00:46'),
    deploymentPolicy?: {
      allocationSpec?: string(name='AllocationSpec', example='Dedicated'),
      level?: string(name='Level'),
      network?: {
        enableENIMapping?: boolean(name='EnableENIMapping'),
        enableExternalIpAddress?: boolean(name='EnableExternalIpAddress'),
        vswitch?: [ string ](name='Vswitch'),
      }(name='Network'),
      tags?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tags'),
    }(name='DeploymentPolicy'),
    endTime?: string(name='EndTime', example='2024-03-05 20:01:48'),
    jobDescription?: string(name='JobDescription', example='Demo'),
    jobId?: string(name='JobId', example='job-xxxx'),
    jobName?: string(name='JobName', example='testJob'),
    jobScheduler?: string(name='JobScheduler'),
    startTime?: string(name='StartTime', example='2024-03-05 20:00:48'),
    status?: string(name='Status', example='Succeed'),
    tasks?: [ 
      {
        executorPolicy?: {
          arraySpec?: {
            indexEnd?: int32(name='IndexEnd', example='9'),
            indexStart?: int32(name='IndexStart', example='0'),
            indexStep?: int32(name='IndexStep', example='1'),
          }(name='ArraySpec'),
          maxCount?: int32(name='MaxCount', example='10'),
        }(name='ExecutorPolicy'),
        executorStatus?: [ 
          {
            arrayId?: int32(name='ArrayId', example='0'),
            createTime?: string(name='CreateTime', example='2024-02-04 13:54:10'),
            endTime?: string(name='EndTime', example='2024-02-04 13:54:10'),
            startTime?: string(name='StartTime', example='2024-02-04 13:54:10'),
            status?: string(name='Status', example='Running'),
            statusReason?: string(name='StatusReason', example='Creating executor'),
          }
        ](name='ExecutorStatus'),
        taskName?: string(name='TaskName', example='task0'),
        taskSpec?: {
          resource?: {
            cores?: float(name='Cores', example='1'),
            disks?: [ 
              {
                size?: int32(name='Size', example='100'),
                type?: string(name='Type', example='System'),
              }
            ](name='Disks'),
            instanceTypes?: [ string ](name='InstanceTypes'),
            memory?: int32(name='Memory', example='4'),
          }(name='Resource'),
          taskExecutor?: [ 
            {
              vm?: {
                image?: string(name='Image', example='m-xxxx'),
                prologScript?: string(name='PrologScript', example='ZWNobyAiMTIzNCIgPiBgZGF0ZSArJXNg'),
                script?: string(name='Script', example='ZWNobyAiMTIzNCIgPiBgZGF0ZSArJXNg'),
                userName?: string(name='UserName'),
              }(name='VM'),
            }
          ](name='TaskExecutor'),
        }(name='TaskSpec'),
        taskSustainable?: boolean(name='TaskSustainable', example='true'),
      }
    ](name='Tasks'),
  }(name='JobInfo'),
  requestId?: string(name='RequestId', example='896D338C-E4F4-41EC-A154-D605E5DE****'),
}

model GetJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetJob  GetJobRequest
  * @return GetJobResponse
 */
async function getJob(request: GetJobRequest): GetJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetJob', 'POST', '/', 'json', false, 'json', request);
}

model GetPoolRequest {
  poolName: string(name='PoolName', description='This parameter is required.', example='PoolTest', position='Query'),
}

model GetPoolResponseBody = {
  poolInfo?: {
    createTime?: string(name='CreateTime', example='2024-12-01 20:00:00'),
    exectorUsage?: int32(name='ExectorUsage', example='1'),
    isDefault?: boolean(name='IsDefault', example='true'),
    maxExectorNum?: int32(name='MaxExectorNum', example='2000'),
    poolName?: string(name='PoolName', example='PoolTest'),
    priority?: int32(name='Priority', example='1'),
    reason?: string(name='Reason', example='Fails to *** pool: ***.'),
    status?: string(name='Status', example='Working'),
    updateTime?: string(name='UpdateTime', example='2024-12-01 20:00:00'),
  }(name='PoolInfo'),
  requestId?: string(name='RequestId', description='Id of the request', example='896D338C-E4F4-41EC-A154-D605E5DE****'),
}

model GetPoolResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPoolResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPool  GetPoolRequest
  * @return GetPoolResponse
 */
async function getPool(request: GetPoolRequest): GetPoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPool', 'POST', '/', 'json', false, 'json', request);
}

model ListExecutorsRequest {
  filter?: {
    executorIds?: [ string ](name='ExecutorIds'),
    ipAddresses?: [ string ](name='IpAddresses'),
    jobName?: string(name='JobName', example='testJob'),
    status?: [ string ](name='Status'),
    timeCreatedAfter?: int32(name='TimeCreatedAfter', example='1703819914'),
    timeCreatedBefore?: int32(name='TimeCreatedBefore', example='1703820113'),
  }(name='Filter', shrink='json', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='50', position='Query'),
}

model ListExecutorsResponseBody = {
  executors?: [ 
    {
      appName?: string(name='AppName'),
      arrayIndex?: int32(name='ArrayIndex', example='0'),
      createTime?: string(name='CreateTime', example='2024-02-20 10:04:10'),
      endTime?: string(name='EndTime', example='2024-02-20 10:04:18'),
      executorId?: string(name='ExecutorId', example='job-xxxx-task0-1'),
      expirationTime?: string(name='ExpirationTime'),
      externalIpAddress?: [ string ](name='ExternalIpAddress'),
      hostName?: [ string ](name='HostName'),
      image?: string(name='Image'),
      ipAddress?: [ string ](name='IpAddress'),
      jobId?: string(name='JobId', example='job-hy1nggvyukuvkr******'),
      jobName?: string(name='JobName', example='testJob'),
      resource?: {
        cores?: float(name='Cores'),
        disks?: [ 
          {
            size?: int32(name='Size'),
            type?: string(name='Type'),
          }
        ](name='Disks'),
        memory?: float(name='Memory'),
      }(name='Resource'),
      resourceType?: string(name='ResourceType'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status', example='Running'),
      statusReason?: string(name='StatusReason', example='Succeeded to release executor resource'),
      tags?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tags'),
      taskName?: string(name='TaskName', example='task0'),
      taskSustainable?: boolean(name='TaskSustainable'),
      vswitchId?: string(name='VswitchId'),
    }
  ](name='Executors'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='50'),
  requestId?: string(name='RequestId', example='896D338C-E4F4-41EC-A154-D605E5DE****'),
  totalCount?: string(name='TotalCount', example='40'),
}

model ListExecutorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListExecutorsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListExecutors  ListExecutorsRequest
  * @return ListExecutorsResponse
 */
async function listExecutors(request: ListExecutorsRequest): ListExecutorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListExecutors', 'POST', '/', 'json', false, 'json', request);
}

model ListImagesRequest {
  imageCategory?: string(name='ImageCategory', position='Query'),
  imageIds?: [ string ](name='ImageIds', shrink='json', position='Query'),
  imageNames?: [ string ](name='ImageNames', shrink='json', position='Query'),
  imageType?: string(name='ImageType', position='Query'),
  mode?: string(name='Mode', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
}

model ListImagesResponseBody = {
  images?: [ 
    {
      appId: string(name='AppId', description='This parameter is required.'),
      createTime?: string(name='CreateTime', example='2022-12-09T07:06:34Z'),
      description?: string(name='Description'),
      documentId?: int32(name='DocumentId'),
      imageId: string(name='ImageId', description='This parameter is required.', example='m-bp181x855551ww5yq****'),
      imageType: string(name='ImageType', description='This parameter is required.', example='VM'),
      name?: string(name='Name', example='app-image'),
      osTag?: string(name='OsTag'),
      updateTime?: string(name='UpdateTime'),
      version?: string(name='Version', example='v1.0'),
      weight?: int32(name='Weight'),
    }
  ](name='Images'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='896D338C-E4F4-41EC-A154-D605E5DE****'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListImagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListImagesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListImages  ListImagesRequest
  * @return ListImagesResponse
 */
async function listImages(request: ListImagesRequest): ListImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListImages', 'POST', '/', 'json', false, 'json', request);
}

model ListJobExecutorsRequest {
  jobId?: string(name='JobId', example='job-xxx', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  taskName?: string(name='TaskName', example='task0', position='Query'),
}

model ListJobExecutorsResponseBody = {
  executorStatus?: {
    deleted?: int32(name='Deleted'),
    exception?: int32(name='Exception'),
    failed?: int32(name='Failed'),
    initing?: int32(name='Initing'),
    pending?: int32(name='Pending'),
    running?: int32(name='Running'),
    succeeded?: int32(name='Succeeded'),
  }(name='ExecutorStatus'),
  executors?: [ 
    {
      arrayIndex?: int32(name='ArrayIndex', example='0'),
      createTime?: string(name='CreateTime', example='2024-02-20 10:04:10'),
      endTime?: string(name='EndTime', example='2024-02-20 10:04:18'),
      executorId?: string(name='ExecutorId'),
      expirationTime?: string(name='ExpirationTime'),
      externalIpAddress?: [ string ](name='ExternalIpAddress'),
      hostName?: [ string ](name='HostName'),
      ipAddress?: [ string ](name='IpAddress'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status', example='Running'),
      statusReason?: string(name='StatusReason', example='Creating executor'),
      tags?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tags'),
    }
  ](name='Executors'),
  jobId?: string(name='JobId', example='job-xxxx'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='896D338C-E4F4-41EC-A154-D605E5DE****'),
  taskName?: string(name='TaskName', example='task0'),
  totalCount?: string(name='TotalCount', example='50'),
}

model ListJobExecutorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListJobExecutorsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListJobExecutors  ListJobExecutorsRequest
  * @return ListJobExecutorsResponse
 */
async function listJobExecutors(request: ListJobExecutorsRequest): ListJobExecutorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListJobExecutors', 'POST', '/', 'json', false, 'json', request);
}

model ListJobsRequest {
  filter?: {
    jobId?: string(name='JobId', example='job-xxxx'),
    jobName?: string(name='JobName', example='testJob'),
    status?: string(name='Status', example='Running'),
    timeCreatedAfter?: int32(name='TimeCreatedAfter', example='1703819914'),
    timeCreatedBefore?: int32(name='TimeCreatedBefore', example='1703820113'),
  }(name='Filter', shrink='json', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='50', position='Query'),
  sortBy?: {
    label?: string(name='Label', example='time_start'),
    order?: string(name='Order', example='ASC'),
  }(name='SortBy', shrink='json', position='Query'),
}

model ListJobsResponseBody = {
  jobList?: [ 
    {
      appExtraInfo?: string(name='AppExtraInfo'),
      appName?: string(name='AppName'),
      createTime?: string(name='CreateTime', example='2024-01-25 12:29:21'),
      endTime?: string(name='EndTime', example='2024-01-25 12:35:23'),
      executorCount?: int32(name='ExecutorCount', example='1'),
      jobDescription?: string(name='JobDescription', example='Demo'),
      jobId?: string(name='JobId', example='job-xxx'),
      jobName?: string(name='JobName', example='testJob'),
      ownerUid?: string(name='OwnerUid', example='129**********'),
      startTime?: string(name='StartTime', example='2024-01-25 12:29:23'),
      status?: string(name='Status', example='Running'),
      tags?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tags'),
      taskCount?: int32(name='TaskCount', example='1'),
      taskSustainable?: boolean(name='TaskSustainable', example='true'),
    }
  ](name='JobList'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='896D338C-E4F4-41EC-A154-D605E5DE****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListJobs  ListJobsRequest
  * @return ListJobsResponse
 */
async function listJobs(request: ListJobsRequest): ListJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListPoolsRequest {
  filter?: {
    poolName?: [ string ](name='PoolName'),
    status?: [ string ](name='Status'),
    timeCreatedAfter?: int32(name='TimeCreatedAfter', example='1703819914'),
    timeCreatedBefore?: int32(name='TimeCreatedBefore', example='1703820113'),
  }(name='Filter', shrink='json', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model ListPoolsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  poolList?: [ 
    {
      isDefault?: boolean(name='IsDefault', example='true'),
      maxExectorNum?: int32(name='MaxExectorNum', example='2000'),
      poolName?: string(name='PoolName', example='PoolTest'),
      priority?: int32(name='Priority', example='1'),
      status?: string(name='Status', example='Working'),
    }
  ](name='PoolList'),
  requestId?: string(name='RequestId', description='Id of the request', example='896D338C-E4F4-41EC-A154-D605E5DE****'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListPoolsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPoolsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPools  ListPoolsRequest
  * @return ListPoolsResponse
 */
async function listPools(request: ListPoolsRequest): ListPoolsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPools', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  maxResult?: int32(name='MaxResult', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='1d2db86scXXXXXXXXXX', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='Job', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='TestKey'),
      value?: string(name='Value', example='TestValue'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', example='1d2db86scXXXXXXXXXX'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', example='job-xxxxxxxx'),
      resourceType?: string(name='ResourceType', example='Job'),
      tagKey?: string(name='TagKey', example='TestKey'),
      tagValue?: string(name='TagValue', example='TestValue'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTagResources  ListTagResourcesRequest
  * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model RemoveImageRequest {
  imageId: string(name='ImageId', description='This parameter is required.', example='m-bp14wakr1rkxtb******', position='Query'),
  imageType?: string(name='ImageType', position='Query'),
}

model RemoveImageResponseBody = {
  requestId?: string(name='RequestId', example='896D338C-E4F4-41EC-A154-D605E5DE****'),
  success?: boolean(name='Success', example='true'),
}

model RemoveImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveImage  RemoveImageRequest
  * @return RemoveImageResponse
 */
async function removeImage(request: RemoveImageRequest): RemoveImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveImage', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  resourceId: [ string ](name='ResourceId', description='This parameter is required.', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='Job', position='Query'),
  tag: [ 
    {
      key: string(name='Key', description='This parameter is required.', example='TestKey'),
      value?: string(name='Value', example='TestValue'),
    }
  ](name='Tag', description='This parameter is required.', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='896D338C-E4F4-41EC-A154-D605E5DE****'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TagResources  TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UnTagResourcesRequest {
  all?: boolean(name='All', example='False', position='Query'),
  resourceId: [ string ](name='ResourceId', description='This parameter is required.', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='Job', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UnTagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='896D338C-E4F4-41EC-A154-D605E5DE****'),
}

model UnTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnTagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnTagResources  UnTagResourcesRequest
  * @return UnTagResourcesResponse
 */
async function unTagResources(request: UnTagResourcesRequest): UnTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnTagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePoolRequest {
  poolName: string(name='PoolName', description='This parameter is required.', example='PoolTest', position='Query'),
  priority?: int32(name='Priority', example='1', position='Query'),
  resourceLimits?: {
    maxExectorNum?: int32(name='MaxExectorNum', example='2000'),
  }(name='ResourceLimits', shrink='json', position='Query'),
}

model UpdatePoolResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
}

model UpdatePoolResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePoolResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdatePool  UpdatePoolRequest
  * @return UpdatePoolResponse
 */
async function updatePool(request: UpdatePoolRequest): UpdatePoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePool', 'POST', '/', 'json', false, 'json', request);
}

