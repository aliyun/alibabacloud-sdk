/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'composer';
  @version = '2018-12-12';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CloneFlowRequest {
  flowId: string(name='FlowId', description='The ID of the workflow that you want to clone.', example='lc-uf6yrfwxpe6wkw', position='Body'),
  versionId?: string(name='VersionId', description='The version of the workflow that you want to clone. If you do not specify this parameter, the latest version of the workflow is cloned.', example='10', position='Body'),
}

model CloneFlowResponseBody = {
  flowId?: string(name='FlowId', description='The ID of the cloned workflow.', example='lc-uf6wvbsyvvl5sy'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ADB97A33-50E7-48A5-963D-ACBAE36D0BEC'),
}

model CloneFlowResponse = {
  headers: map[string]string(name='headers'),
  body: CloneFlowResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function cloneFlow(request: CloneFlowRequest): CloneFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloneFlow', 'POST', '/', 'json', true, 'form', request);
}

model CreateFlowRequest {
  definition?: string(name='Definition', description='The definition of the workflow, which must be a JSON string.', example='{\\"schemaVersion\\":\\"2018-12-12\\",\\"actions\\":{},\\"version\\":\\"1.0.0\\",\\"triggers\\":{}}', position='Body'),
  flowDescription?: string(name='FlowDescription', description='The description of the workflow.', example='This is a workflow.', position='Body'),
  flowName: string(name='FlowName', description='The name of the workflow.', example='test', position='Body'),
  flowSource?: string(name='FlowSource', description='The source of the workflow. Valid values:

*   Default: Create the workflow in the console.
*   CloudConfig: Create the workflow by using Cloud Config.
*   Solution: Create the workflow by using Logic Composer.', example='Default', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aekzmrjn4nsszna', position='Body'),
  templateId?: string(name='TemplateId', description='The ID of the template.', example='tp-uf6tbvhheciyxl', position='Body'),
}

model CreateFlowResponseBody = {
  flowId?: string(name='FlowId', description='The ID of the created workflow.', example='lc-utf6abcdefg'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D264C934-2DA8-44B4-B034-C659A63AC659'),
}

model CreateFlowResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFlowResponseBody(name='body'),
}

/**
  * After you create a workflow, the system automatically creates a version for the workflow. You can call the GetVersion operation to obtain the version information.
  *
 */
async function createFlow(request: CreateFlowRequest): CreateFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFlow', 'POST', '/', 'json', true, 'form', request);
}

model DeleteFlowRequest {
  flowId: string(name='FlowId', description='The ID of the workflow that you want to delete.', example='lc-uf6wvbsyvvl5sy', position='Body'),
}

model DeleteFlowResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='ADB97A33-50E7-48A5-963D-ACBAE36D0BEC'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Valid values: **true**: The operation was successful. **false**: The operation failed.', example='true'),
}

model DeleteFlowResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFlowResponseBody(name='body'),
}

/**
  * If you delete a workflow, all the versions and execution records of the workflow are automatically deleted.
  *
 */
async function deleteFlow(request: DeleteFlowRequest): DeleteFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFlow', 'POST', '/', 'json', true, 'form', request);
}

model DisableFlowRequest {
  flowId: string(name='FlowId', description='The ID of the workflow that you want to disable.', example='lc-uf6pvud38xl0ia', position='Body'),
}

model DisableFlowResponseBody = {
  flowStatus?: string(name='FlowStatus', description='The status of the workflow.

*   **Enabled**: The workflow is enabled.
*   **Disabled**: The workflow is disabled.', example='Disabled'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ADB97A33-50E7-48A5-963D-ACBAE36D0BEC'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.

*   **true**: The operation was successful.
*   **false**: The operation failed.', example='true'),
}

model DisableFlowResponse = {
  headers: map[string]string(name='headers'),
  body: DisableFlowResponseBody(name='body'),
}

async function disableFlow(request: DisableFlowRequest): DisableFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableFlow', 'POST', '/', 'json', true, 'form', request);
}

model EnableFlowRequest {
  flowId: string(name='FlowId', description='The ID of the workflow that you want to enable.', example='tp-uf6pvud38xl0ia', position='Body'),
}

model EnableFlowResponseBody = {
  flowStatus?: string(name='FlowStatus', description='The status of the workflow. Valid values:

*   **Enabled**: The workflow is enabled.
*   **Disabled**: The workflow is disabled.', example='Enabled'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ADB97A33-50E7-48A5-963D-ACBAE36D0BEC'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Valid values:

*   **true**: The operation was successful.
*   **false**: The operation failed.', example='true'),
}

model EnableFlowResponse = {
  headers: map[string]string(name='headers'),
  body: EnableFlowResponseBody(name='body'),
}

async function enableFlow(request: EnableFlowRequest): EnableFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableFlow', 'POST', '/', 'json', true, 'form', request);
}

model GetFlowRequest {
  flowId: string(name='FlowId', description='The ID of the workflow.', example='lc-uf6pvud38xl0ia', position='Body'),
}

model GetFlowResponseBody = {
  createTime?: string(name='CreateTime', description='The time when the workflow was created.', example='2019-07-19T05:43:16.783Z'),
  currentVersionId?: string(name='CurrentVersionId', description='The version ID of the workflow.', example='1'),
  definition?: string(name='Definition', description='The definition of the workflow.', example='{\\"schemaVersion\\":\\"2018-12-12\\",\\"actions\\":{},\\"version\\":\\"1.0.0\\",\\"triggers\\":{}}'),
  flowDescription?: string(name='FlowDescription', description='The description of the workflow.', example='This is a workflow.'),
  flowEditMode?: string(name='FlowEditMode', description='The edit mode of the workflow.', example='Locked'),
  flowId?: string(name='FlowId', description='The ID of the workflow.', example='lc-uf6pvud38xl0ia'),
  flowName?: string(name='FlowName', description='The name of the workflow.', example='test'),
  flowSource?: string(name='FlowSource', description='The source of the workflow.', example='CloudConfig'),
  flowStatus?: string(name='FlowStatus', description='The status of the workflow. Valid values:

*   **Enabled**: The workflow is enabled.
*   **Disabled**: The workflow is disabled.', example='Enabled'),
  regionId?: string(name='RegionId', description='The ID of the region where the workflow resides.', example='cn-shanghai'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ADB97A33-50E7-48A5-963D-ACBAE36D0BEC'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzyxxxxxxx'),
  templateId?: string(name='TemplateId', description='The template ID.', example='tp-uf6tbvhheciyxl'),
  updateTime?: string(name='UpdateTime', description='The time when the workflow was last updated.', example='2019-07-19T05:43:16.783Z'),
}

model GetFlowResponse = {
  headers: map[string]string(name='headers'),
  body: GetFlowResponseBody(name='body'),
}

async function getFlow(request: GetFlowRequest): GetFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFlow', 'POST', '/', 'json', true, 'form', request);
}

model GetTemplateRequest {
  templateId: string(name='TemplateId', description='The ID of the template.', example='tp-uf6tbvhheciyxl', position='Body'),
}

model GetTemplateResponseBody = {
  createTime?: string(name='CreateTime', description='The time when the template was created.', example='2020-08-19T03:31:32.415Z'),
  definition?: string(name='Definition', description='The definition of the template.', example='{"actions": {},"schemaVersion":"2018-12-12","version": "1.0.0"}'),
  regionId?: string(name='RegionId', description='The region where the template resides.', example='cn-shanghai'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BCF7212F-9478-569A-B57C-8C1B5A560C2F'),
  templateConnector?: string(name='TemplateConnector', description='A list of connectors that are used in the template. The connectors are separated by commas.', example='config,oss'),
  templateCreator?: string(name='TemplateCreator', description='The publisher of the template.', example='Logic Composer'),
  templateDescription?: string(name='TemplateDescription', description='A description of the template.', example='This template is used only for testing purposes.'),
  templateId?: string(name='TemplateId', description='The ID of the template.', example='tp-uf6tbvhheciyxl'),
  templateLocale?: string(name='TemplateLocale', description='The language that is used in the template. Chinese and English are supported.', example='zh'),
  templateName?: string(name='TemplateName', description='The name of the template.', example='test'),
  templateOverview?: string(name='TemplateOverview', description='An overview of the template, which is a JSON string.', example='[]'),
  templateSummary?: string(name='TemplateSummary', description='A brief introduction to the template.', example='This is a test template.'),
  templateSummaryEn?: string(name='TemplateSummaryEn', description='A brief introduction to the template.', example='This is a test template'),
  templateTag?: string(name='TemplateTag', description='The tag of the template.', example='test,owner'),
  templateVersion?: int32(name='TemplateVersion', description='The version of the template, which is a number that increments from 0.', example='0'),
  updateTime?: string(name='UpdateTime', description='The time when the template was last updated.', example='2020-08-19T03:31:32.415Z'),
}

model GetTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetTemplateResponseBody(name='body'),
}

async function getTemplate(request: GetTemplateRequest): GetTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTemplate', 'POST', '/', 'json', true, 'form', request);
}

model GetVersionRequest {
  flowId: string(name='FlowId', description='The ID of the workflow.', example='lc-uf6axpwfcw4ubx', position='Body'),
  versionId: string(name='VersionId', description='The ID of the version.', example='10', position='Body'),
}

model GetVersionResponseBody = {
  createTime?: string(name='CreateTime', description='The time when the version was created.', example='2018-12-12T07:36:22.992Z'),
  definition?: string(name='Definition', description='The definition of the workflow to which the version belongs.', example='{\\"schemaVersion\\":\\"2018-12-12\\",\\"actions\\":{},\\"version\\":\\"1.0.0\\",\\"triggers\\":{}}'),
  flowId?: string(name='FlowId', description='The ID of the workflow to which the version belongs.', example='lc-uf6wvbsyvvl5sy'),
  regionId?: string(name='RegionId', description='The region where the workflow resides.', example='cn-shanghai'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ADB97A33-50E7-48A5-963D-ACBAE36D0BEC'),
  updateTime?: string(name='UpdateTime', description='The time when the version was last updated.', example='2018-12-12T07:36:22.992Z'),
  versionDescription?: string(name='VersionDescription', description='The description of the version.', example='This is the description of the version.'),
  versionId?: string(name='VersionId', description='The ID of the version.', example='10'),
  versionName?: string(name='VersionName', description='The name of the version.', example='5.3.6'),
  versionStatus?: string(name='VersionStatus', description='The status of the version. **Enabled** indicates that the version is enabled.', example='Enabled'),
}

model GetVersionResponse = {
  headers: map[string]string(name='headers'),
  body: GetVersionResponseBody(name='body'),
}

async function getVersion(request: GetVersionRequest): GetVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVersion', 'POST', '/', 'json', true, 'form', request);
}

model GroupInvokeFlowRequest {
  clientToken: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length.', example='abcdefghijklmn', position='Body'),
  data: string(name='Data', description='The information required by the group execution. Set this parameter to a JSON array of strings in the following format:`{"Items": []}`. Each string provides the information required by one time of execution. The string must use the format of the Data parameter in the InvokeFlow operation.', example='{\\"Items\\":[{\\"resourceId\\":\\"i-bp1383wskmaa65duviwh\\",\\"regionId\\":\\"cn-hangzhou\\",\\"resourceType\\":\\"ACS::ECS::Instance\\"}],\\"Source\\":\\"CloudConfig\\"}', position='Body'),
  flowId: string(name='FlowId', description='The ID of the workflow that you want to execute.', example='lc-uf6axpwfcw4ubx', position='Body'),
  groupKey: string(name='GroupKey', description='The name of the group. The name must be unique among the groups.', example='1632117849243', position='Body'),
  tags?: string(name='Tags', description='The tag that is attached to each time of execution. The value is a JSON array. The number of tags in the array is the same as the value of the TotalCount parameter.', example='[{\\"key1\\":\\"value1\\",\\"key2\\":\\"value2\\"}]', position='Query'),
  totalCount: int32(name='TotalCount', description='The number of times of execution. The value must be the same as the number of strings in the value of the Data parameter.', example='1', minimum=1, maximum=1000, position='Body'),
}

model GroupInvokeFlowResponseBody = {
  currentCount?: int32(name='CurrentCount', description='The number of times of execution that are pending.', example='10'),
  groupInvocationId?: string(name='GroupInvocationId', description='The unique identifier of the execution.', example='7bdbdb58-f028-4155-915e-f21e1f8fc48a'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4F06F96E-D1F8-54ED-9611-4F621AD899B5'),
  status?: string(name='Status', description='The status of the group. Valid values:

*   New: The group is created and waiting to be executed.
*   Started: The group is being executed.
*   Canceled: The group was canceled.
*   Failed: The execution failed.
*   Completed: All the times of execution in the group are complete.
*   Unknown: The group status is uncertain. In this case, a system error may occur.
*   TimedOut: The execution timed out.
*   Paused: The execution was suspended.', example='Completed'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.

*   **true**: The workflow execution is triggered.
*   **false**: The workflow execution failed to be triggered.

> : You can call the **GetInvocationLog** operation to check whether the workflow execution is successful.', example='true'),
}

model GroupInvokeFlowResponse = {
  headers: map[string]string(name='headers'),
  body: GroupInvokeFlowResponseBody(name='body'),
}

/**
  * *   You can call this operation to trigger a workflow to be executed more than 100 times per second. If the desired execution frequency does not exceed 100 times per second, we recommend that you call the InvokeFlow operation.
  * *   However, you may need to call the GroupInvokeFlow operation multiple times. For example, assume that you want a workflow to be executed 1,000 times per second and the 1,000 times of execution are divided into ten groups. You need to call the operation ten times for the ten groups and specify a group key for each group.
  * *   Each call corresponds to a group execution. Logic Composer automatically determines when a group execution starts. You must set the Data parameter to a JSON array of strings to specify the information required by the execution. Each string provides the information required by one time of execution. The string must use the format of the Data parameter in the InvokeFlow operation.
  *
 */
async function groupInvokeFlow(request: GroupInvokeFlowRequest): GroupInvokeFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GroupInvokeFlow', 'POST', '/', 'json', true, 'form', request);
}

model InvokeFlowRequest {
  clientToken?: string(name='ClientToken', description='The token that is used to guarantee idempotence to avoid repeated operations.', example='abcdefghijklmn', position='Body'),
  data?: string(name='Data', description='The data for invoking the workflow.', example='{"body": {"test": true}}', position='Body'),
  flowId: string(name='FlowId', description='The parameters required by the template, which must be in JSON format.', example='lc-abcdefg', position='Body'),
  parameters?: string(name='Parameters', description='The input parameters required by the trigger of the workflow execution, which must be in JSON format.', example='{"ParamA": "test"}', position='Body'),
}

model InvokeFlowResponseBody = {
  invocationId?: string(name='InvocationId', description='The unique identifier of the execution.', example='6b387696-d160-4ed7-xxxx-070ac29dce4d'),
  requestId?: string(name='RequestId', description='The ID for this request.', example='5CE7EAE6-XXXX-XXXX-A1A3-D3C2AE624000'),
  success?: boolean(name='Success', description='Indicates whether the workflow execution was triggered.

*   **true**: The workflow execution was triggered
*   **false**: The workflow execution failed to be triggered.

> : You can call the **GetInvocationLog** operation to check whether the workflow execution is successful.', example='true'),
}

model InvokeFlowResponse = {
  headers: map[string]string(name='headers'),
  body: InvokeFlowResponseBody(name='body'),
}

async function invokeFlow(request: InvokeFlowRequest): InvokeFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InvokeFlow', 'POST', '/', 'json', true, 'form', request);
}

model ListFlowsRequest {
  filter?: string(name='Filter', description='The filter condition, which is in the JSON format of {"key":"value"}. Example: {"key1":"value1"}', example='{\\"tags\\":[{\\"key\\":\\"acs:lc:Solution:AliyunSSO\\",\\"value\\":\\"AzureAD\\"}]}', position='Body'),
  flowName?: string(name='FlowName', description='The name of the workflow.', example='test', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The page number of the current page. Minimum value: 1. Default value: 1.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='Specifies the number of workflows to return on each page. A page can contain a maximum of 100 workflows. Default value: 10.', example='10', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmzy6dzs6qtqa', position='Body'),
}

model ListFlowsResponseBody = {
  flows?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the workflow was created.', example='2019-07-19T05:43:16.783Z'),
      flowDescription?: string(name='FlowDescription', description='The description of the workflow.', example='test flow'),
      flowEditMode?: string(name='FlowEditMode', description='The edit mode of the workflow.', example='Normal'),
      flowId?: string(name='FlowId', description='The ID of the workflow.', example='lc-uf6axpwfcw4ubx'),
      flowName?: string(name='FlowName', description='The name of the workflow.', example='test'),
      flowSource?: string(name='FlowSource', description='The source of the workflow.', example='Solution'),
      flowStatus?: string(name='FlowStatus', description='The status of the workflow. Valid values:

*   **Enabled**: The workflow is enabled.
*   **Disabled**: The workflow is disabled.', example='Enabled'),
      regionId?: string(name='RegionId', description='The region to which the workflow belongs.', example='cn-shanghai'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmzyxxxxxxx'),
      templateId?: string(name='TemplateId', description='The template ID. You can call the ListTemplates operation to obtain the template ID.', example='tp-uf6lzhzywy28bs'),
      updateTime?: string(name='UpdateTime', description='The time when the workflow was last updated.', example='2019-07-19T05:43:16.783Z'),
      versionId?: string(name='VersionId', description='The latest version of the workflow.', example='1'),
    }
  ](name='Flows', description='A list of workflows.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A4865221-E0BC-5AF6-BDD3-749F5A2371CC'),
  totalCount?: int32(name='TotalCount', description='The total number of workflows in the current region.', example='1'),
}

model ListFlowsResponse = {
  headers: map[string]string(name='headers'),
  body: ListFlowsResponseBody(name='body'),
}

async function listFlows(request: ListFlowsRequest): ListFlowsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFlows', 'POST', '/', 'json', true, 'form', request);
}

model ListTagResourcesRequest {
  maxResults?: int32(name='MaxResults', description='The maximum number of results to return on each page.', example='20', position='Body'),
  nextToken?: string(name='NextToken', description='The token that is used to start the next query.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Body'),
  resourceId?: [ string ](name='ResourceId', description='A list of resource IDs.', position='Body'),
  resourceType: string(name='ResourceType', description='The type of the resources. Set the value to ALIYUN::LC::FLOW.

*   ALIYUN::LC::FLOW indicates Logic Composer workflows.', example='ALIYUN::LC::FLOW', position='Body'),
  tag?: [ 
    {
      key: string(name='Key', description='The key of the tag.', example='testkey'),
      value: string(name='Value', description='The value of the tag.', example='testvalue'),
    }
  ](name='Tag', description='A list of tags that are attached to the resources. A list can contain a maximum of 20 tags.', position='Body'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The token that is used to start the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C9025B15-16CC-53FB-B7B1-7295AA010EBD'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='lc-0xiisfk685vhfk'),
      resourceType?: string(name='ResourceType', description='The type of the resource.

*   Valid value: ALIYUN::LC::FLOW', example='ALIYUN::LC::FLOW'),
      tagKey?: string(name='TagKey', description='The key of the tag.', example='testkey'),
      tagValue?: string(name='TagValue', description='The value of the tag.', example='testvalue'),
    }
  ](name='TagResources', description='The mappings between resources and tags.'),
  totalCount?: int32(name='TotalCount', description='The total number of resources.', example='2'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', true, 'form', request);
}

model ListTemplatesRequest {
  lang?: string(name='Lang', description='The language that is used in the templates.', example='zh', position='Body'),
  name?: string(name='Name', description='The keyword that is used to search for templates. This parameter is invalid if you specify a tag.', example='test', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The page number of current page.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of templates on each page. A page can contain a maximum of 100 templates. Default value: 10.', example='10', position='Body'),
  tag?: string(name='Tag', description='The tag that is used to search for templates.', example='{"key": "a","value":"b"}', position='Body'),
}

model ListTemplatesResponseBody = {
  requestId?: string(name='RequestId', description='The unique identifier of the request.', example='ADB97A33-50E7-48A5-963D-ACBAE36D0BEC'),
  templates?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the template was created.', example='2020-08-19T03:31:32.415Z'),
      templateConnector?: string(name='TemplateConnector', description='A list of connectors that are used in the template. The connectors are separated by commas.', example='oss,rds'),
      templateCreator?: string(name='TemplateCreator', description='The publisher of the template.', example='Logic Composer'),
      templateDescription?: string(name='TemplateDescription', description='A brief introduction to the template.', example='This is a test template.'),
      templateId?: string(name='TemplateId', description='The ID of the template.', example='tp-uf6tbvhheciyxl'),
      templateLocale?: string(name='TemplateLocale', description='The language that is used in the template. Chinese and English are supported.', example='zh'),
      templateName?: string(name='TemplateName', description='The name of the template.', example='test'),
      templateOverview?: string(name='TemplateOverview', description='An overview of the template, which is a JSON string.', example='[]'),
      templateSummary?: string(name='TemplateSummary', description='A description of the template.', example='This is a test template.'),
      templateSummaryEn?: string(name='TemplateSummaryEn', description='A brief introduction to the template.', example='This is a test template'),
      templateTag?: string(name='TemplateTag', description='The tag of the template.', example='finance'),
      templateVersion?: int32(name='TemplateVersion', description='The version of the template, which is a number that increments from 0.', example='0'),
      updateTime?: string(name='UpdateTime', description='The time when the template was last updated.', example='2020-08-19T03:31:32.415Z'),
    }
  ](name='Templates', description='A list of templates.'),
  totalCount?: int32(name='TotalCount', description='The total number of templates.', example='10'),
}

model ListTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTemplatesResponseBody(name='body'),
}

async function listTemplates(request: ListTemplatesRequest): ListTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTemplates', 'POST', '/', 'json', true, 'form', request);
}

model ListVersionsRequest {
  flowId: string(name='FlowId', description='The ID of the workflow whose versions you want to query.', example='lc-uf6axpwfcw4ubx', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The page number of the page to return. The value must be an integer that is greater than 0. Default value: 1.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of versions to return on each page. One page contains a maximum of 100 versions. Default value: 10.', example='10', position='Body'),
}

model ListVersionsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='ADB97A33-50E7-48A5-963D-ACBAE36D0BEC'),
  totalCount?: int32(name='TotalCount', description='The total number of versions of the workflow.', example='1'),
  versions?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the version was created.', example='2018-12-12T07:36:22.992Z'),
      flowId?: string(name='FlowId', description='The ID of the workflow to which the version belongs.', example='lc-uf6axpwfcw4ubx'),
      updateTime?: string(name='UpdateTime', description='The time when the version was last updated.', example='2018-12-12T07:36:22.992Z'),
      versionId?: string(name='VersionId', description='The ID of the version.', example='1'),
      versionName?: string(name='VersionName', description='The name of the version.', example='1'),
      versionNumber?: int32(name='VersionNumber', description='The number of the version. Increment from 1.', example='4'),
      versionStatus?: string(name='VersionStatus', description='The status of the version. **Enabled** indicates that the version is enabled.', example='Enabled'),
    }
  ](name='Versions', description='A list of the versions.'),
}

model ListVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListVersionsResponseBody(name='body'),
}

async function listVersions(request: ListVersionsRequest): ListVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVersions', 'POST', '/', 'json', true, 'form', request);
}

model TagResourcesRequest {
  resourceId: [ string ](name='ResourceId', description='Specifies a maximum of 50 resource IDs.', example='lc-uf6tbvhheciyxl', position='Body'),
  resourceType: string(name='ResourceType', description='The type of the resources. Set the value to ALIYUN::LC::FLOW.

*   ALIYUN::LC::FLOW indicates Logic Composer workflows.', example='ALIYUN::LC::FLOW', position='Body'),
  tag: [ 
    {
      key: string(name='Key', description='The key of the tag.', example='tagKey'),
      value: string(name='Value', description='The value of the tag.', example='tagValue'),
    }
  ](name='Tag', description='Specifies a list of tags that you want to attach to the resources.', position='Body'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='ADB97A33-50E7-48A5-963D-ACBAE36D0BEC'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', true, 'form', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='系统规定参数。取值：UntagResources。', example='false', position='Body'),
  resourceId: [ string ](name='ResourceId', description='The type of the resources. Set the value to ALIYUN::LC::FLOW.

*   ALIYUN::LC::FLOW indicates Logic Composer workflows.', example='lc-uf6tbvhheciyxl', position='Body'),
  resourceType: string(name='ResourceType', description='system', example='ALIYUN::LC::FLOW', position='Body'),
  tagKey?: [ string ](name='TagKey', description='Specifies a maximum of 50 resource IDs.', example='tagKey', position='Body'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='Indicates whether the call was successful.', example='ADB97A33-50E7-48A5-963D-ACBAE36D0BEC'),
  success?: boolean(name='Success', description='The ID of the request.', example='true'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', true, 'form', request);
}

model UpdateFlowRequest {
  definition?: string(name='Definition', description='The new definition that you want to specify for the workflow.', example='{\\"schemaVersion\\":\\"2018-12-12\\",\\"actions\\":{},\\"version\\":\\"1.0.0\\",\\"triggers\\":{}}', position='Body'),
  flowDescription?: string(name='FlowDescription', description='The new description that you want to specify for the workflow.', example='This is the description of the workflow.', position='Body'),
  flowId: string(name='FlowId', description='The ID of the workflow whose information you want to update.', example='lc-uf6axpwfcw4ubx', position='Body'),
  flowName?: string(name='FlowName', description='The new name that you want to specify for the workflow.', example='test', position='Body'),
}

model UpdateFlowResponseBody = {
  currentVersionId?: int32(name='CurrentVersionId', description='The version ID of the workflow after the update.', example='ve-uf6bwdtvid7o25'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ADB97A33-50E7-48A5-963D-ACBAE36D0BEC'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Valid values:

*   **true**: The operation was successful.
*   **false**: The operation failed.', example='true'),
}

model UpdateFlowResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFlowResponseBody(name='body'),
}

async function updateFlow(request: UpdateFlowRequest): UpdateFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFlow', 'POST', '/', 'json', true, 'form', request);
}

